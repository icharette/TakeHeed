
/Users/ninjacat/Documents/Particle/TakeHeed/motors/target/1.4.0/photon/motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e54  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1e70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  20000000  080a1e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  20000090  20000090  00030090  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1f04  080a1f04  00021f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1f2c  080a1f2c  00021f2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a32f9  00000000  00000000  00021f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ef0f  00000000  00000000  000c5229  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013cb1  00000000  00000000  000d4138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001fe8  00000000  00000000  000e7de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000032e0  00000000  00000000  000e9dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000236aa  00000000  00000000  000ed0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021c2e  00000000  00000000  0011075b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a55dc  00000000  00000000  00132389  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b8d8  00000000  00000000  001d7968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fd0d 	bl	80a1a4c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fd12 	bl	80a1a62 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1e74 	.word	0x080a1e74
 80a004c:	20000090 	.word	0x20000090
 80a0050:	20000090 	.word	0x20000090
 80a0054:	200006a0 	.word	0x200006a0
 80a0058:	200006a0 	.word	0x200006a0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fac3 	bl	80a15e8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1e34 	.word	0x080a1e34
 80a0084:	080a1e68 	.word	0x080a1e68

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b852 	b.w	80a0130 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f9c7 	bl	80a0420 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba69 	b.w	80a156c <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bc11 	b.w	80a08c0 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bc17 	b.w	80a08d0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f000 fed2 	bl	80a0e68 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f001 f807 	bl	80a10d8 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a1cd4 	.word	0x080a1cd4

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 fb5e 	bl	80a179a <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 fb54 	bl	80a179a <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}

080a00f6 <_Z10setupMotorPiiii>:
  rightShoulderMotors[0]= directionRight;
  rightShoulderMotors[1]= stepRight;
  rightShoulderMotors[2]= enableRight;
}

void setupMotor(int motorPinsArray[], int enable, int step, int direction){
 80a00f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a00fa:	4616      	mov	r6, r2
 80a00fc:	461f      	mov	r7, r3
 80a00fe:	4604      	mov	r4, r0
 80a0100:	460d      	mov	r5, r1
  pinMode(enable, OUTPUT); //Enable
 80a0102:	fa1f f881 	uxth.w	r8, r1
 80a0106:	4640      	mov	r0, r8
 80a0108:	2101      	movs	r1, #1
 80a010a:	f001 fabd 	bl	80a1688 <pinMode>
  pinMode(step, OUTPUT); //Step
 80a010e:	2101      	movs	r1, #1
 80a0110:	b2b0      	uxth	r0, r6
 80a0112:	f001 fab9 	bl	80a1688 <pinMode>
  pinMode(direction, OUTPUT); //Direction
 80a0116:	2101      	movs	r1, #1
 80a0118:	b2b8      	uxth	r0, r7
 80a011a:	f001 fab5 	bl	80a1688 <pinMode>

  digitalWrite(enable, LOW);
 80a011e:	2100      	movs	r1, #0
 80a0120:	4640      	mov	r0, r8
 80a0122:	f001 fac2 	bl	80a16aa <digitalWrite>

  motorPinsArray[0]= direction;
 80a0126:	6027      	str	r7, [r4, #0]
  motorPinsArray[1]= step;
 80a0128:	6066      	str	r6, [r4, #4]
  motorPinsArray[2]= enable;
 80a012a:	60a5      	str	r5, [r4, #8]
 80a012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0130 <setup>:
}
// setup() runs once, when the device is first turned on.
void setup() {
 80a0130:	b570      	push	{r4, r5, r6, lr}
 80a0132:	b096      	sub	sp, #88	; 0x58
   Serial.begin(9600);
 80a0134:	f001 f926 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a0138:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a013c:	f001 f902 	bl	80a1344 <_ZN9USBSerial5beginEl>

   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a0140:	4b32      	ldr	r3, [pc, #200]	; (80a020c <setup+0xdc>)
 80a0142:	4a33      	ldr	r2, [pc, #204]	; (80a0210 <setup+0xe0>)
 80a0144:	4933      	ldr	r1, [pc, #204]	; (80a0214 <setup+0xe4>)
 80a0146:	681b      	ldr	r3, [r3, #0]
 80a0148:	6812      	ldr	r2, [r2, #0]
 80a014a:	6809      	ldr	r1, [r1, #0]
 80a014c:	4832      	ldr	r0, [pc, #200]	; (80a0218 <setup+0xe8>)
 80a014e:	f7ff ffd2 	bl	80a00f6 <_Z10setupMotorPiiii>
  setupMotor(leftShoulderMotors, enableLeft, stepLeft, directionLeft);
 80a0152:	4b32      	ldr	r3, [pc, #200]	; (80a021c <setup+0xec>)
 80a0154:	4a32      	ldr	r2, [pc, #200]	; (80a0220 <setup+0xf0>)
 80a0156:	4933      	ldr	r1, [pc, #204]	; (80a0224 <setup+0xf4>)
 80a0158:	681b      	ldr	r3, [r3, #0]
 80a015a:	6812      	ldr	r2, [r2, #0]
 80a015c:	6809      	ldr	r1, [r1, #0]
 80a015e:	4832      	ldr	r0, [pc, #200]	; (80a0228 <setup+0xf8>)
 80a0160:	f7ff ffc9 	bl	80a00f6 <_Z10setupMotorPiiii>
  // setupMotorRight();
  

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0164:	f001 f90e 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a0168:	f001 f8f3 	bl	80a1352 <_ZN9USBSerialcvbEv>
 80a016c:	2800      	cmp	r0, #0
 80a016e:	d0f9      	beq.n	80a0164 <setup+0x34>
 80a0170:	4c2e      	ldr	r4, [pc, #184]	; (80a022c <setup+0xfc>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0172:	2300      	movs	r3, #0
 80a0174:	461a      	mov	r2, r3
 80a0176:	4619      	mov	r1, r3
 80a0178:	6860      	ldr	r0, [r4, #4]
 80a017a:	f000 fb41 	bl	80a0800 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a017e:	2200      	movs	r2, #0
 80a0180:	4611      	mov	r1, r2
 80a0182:	6860      	ldr	r0, [r4, #4]
 80a0184:	4d29      	ldr	r5, [pc, #164]	; (80a022c <setup+0xfc>)
 80a0186:	f000 fb53 	bl	80a0830 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a018a:	2800      	cmp	r0, #0
 80a018c:	d0f7      	beq.n	80a017e <setup+0x4e>
  Serial.println("Setup");
 80a018e:	f001 f8f9 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a0192:	4927      	ldr	r1, [pc, #156]	; (80a0230 <setup+0x100>)
 80a0194:	f000 fd17 	bl	80a0bc6 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a0198:	4b26      	ldr	r3, [pc, #152]	; (80a0234 <setup+0x104>)
 80a019a:	2200      	movs	r2, #0
 80a019c:	8819      	ldrh	r1, [r3, #0]
 80a019e:	4826      	ldr	r0, [pc, #152]	; (80a0238 <setup+0x108>)
 80a01a0:	f000 fe3d 	bl	80a0e1e <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a01a4:	2300      	movs	r3, #0
 80a01a6:	4619      	mov	r1, r3
 80a01a8:	4a24      	ldr	r2, [pc, #144]	; (80a023c <setup+0x10c>)
 80a01aa:	6868      	ldr	r0, [r5, #4]
 80a01ac:	f000 fb78 	bl	80a08a0 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a01b0:	f001 f8e8 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a01b4:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01b6:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a01b8:	2240      	movs	r2, #64	; 0x40
 80a01ba:	2100      	movs	r1, #0
 80a01bc:	a806      	add	r0, sp, #24
 80a01be:	f001 fc50 	bl	80a1a62 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01c2:	2340      	movs	r3, #64	; 0x40
 80a01c4:	aa06      	add	r2, sp, #24
 80a01c6:	4621      	mov	r1, r4
 80a01c8:	9400      	str	r4, [sp, #0]
 80a01ca:	6868      	ldr	r0, [r5, #4]
 80a01cc:	f000 fb70 	bl	80a08b0 <network_get_hostname>
        return String(buf);
 80a01d0:	a906      	add	r1, sp, #24
 80a01d2:	a802      	add	r0, sp, #8
 80a01d4:	f000 fdb2 	bl	80a0d3c <_ZN6StringC1EPK19__FlashStringHelper>
 80a01d8:	9902      	ldr	r1, [sp, #8]
 80a01da:	4630      	mov	r0, r6
 80a01dc:	f000 fcf3 	bl	80a0bc6 <_ZN5Print7printlnEPKc>
 80a01e0:	a802      	add	r0, sp, #8
 80a01e2:	f000 fd64 	bl	80a0cae <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a01e6:	f001 f8cd 	bl	80a1384 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01ea:	4622      	mov	r2, r4
 80a01ec:	4606      	mov	r6, r0
 80a01ee:	4621      	mov	r1, r4
 80a01f0:	6868      	ldr	r0, [r5, #4]
 80a01f2:	f000 fafd 	bl	80a07f0 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01f6:	1c81      	adds	r1, r0, #2
 80a01f8:	a806      	add	r0, sp, #24
 80a01fa:	f000 fbef 	bl	80a09dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01fe:	a906      	add	r1, sp, #24
 80a0200:	4630      	mov	r0, r6
 80a0202:	f000 fcea 	bl	80a0bda <_ZN5Print7printlnERK9Printable>

  }
 80a0206:	b016      	add	sp, #88	; 0x58
 80a0208:	bd70      	pop	{r4, r5, r6, pc}
 80a020a:	bf00      	nop
 80a020c:	20000024 	.word	0x20000024
 80a0210:	20000004 	.word	0x20000004
 80a0214:	20000020 	.word	0x20000020
 80a0218:	2000009c 	.word	0x2000009c
 80a021c:	2000000c 	.word	0x2000000c
 80a0220:	20000010 	.word	0x20000010
 80a0224:	20000018 	.word	0x20000018
 80a0228:	2000010c 	.word	0x2000010c
 80a022c:	2000059c 	.word	0x2000059c
 80a0230:	080a1ae8 	.word	0x080a1ae8
 80a0234:	20000008 	.word	0x20000008
 80a0238:	200000a8 	.word	0x200000a8
 80a023c:	080a1aee 	.word	0x080a1aee

080a0240 <_Z25setValuesAccordingToStatec>:

void setValuesAccordingToState(char state){
  switch(state){
 80a0240:	2844      	cmp	r0, #68	; 0x44
 80a0242:	d013      	beq.n	80a026c <_Z25setValuesAccordingToStatec+0x2c>
 80a0244:	d802      	bhi.n	80a024c <_Z25setValuesAccordingToStatec+0xc>
 80a0246:	2842      	cmp	r0, #66	; 0x42
 80a0248:	d014      	beq.n	80a0274 <_Z25setValuesAccordingToStatec+0x34>
 80a024a:	4770      	bx	lr
 80a024c:	284c      	cmp	r0, #76	; 0x4c
 80a024e:	d002      	beq.n	80a0256 <_Z25setValuesAccordingToStatec+0x16>
 80a0250:	2853      	cmp	r0, #83	; 0x53
 80a0252:	d00f      	beq.n	80a0274 <_Z25setValuesAccordingToStatec+0x34>
 80a0254:	4770      	bx	lr

    //life
    case 'L':
      pace = 500;
 80a0256:	4b0d      	ldr	r3, [pc, #52]	; (80a028c <_Z25setValuesAccordingToStatec+0x4c>)
 80a0258:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a025c:	601a      	str	r2, [r3, #0]
      wait = 1000;
 80a025e:	4b0c      	ldr	r3, [pc, #48]	; (80a0290 <_Z25setValuesAccordingToStatec+0x50>)
 80a0260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0264:	601a      	str	r2, [r3, #0]
      stepperIndexCap = 2000;
 80a0266:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80a026a:	e000      	b.n	80a026e <_Z25setValuesAccordingToStatec+0x2e>
    break;

    //dead
    case 'D':
    //not moving
      stepperIndexCap = 0;
 80a026c:	2200      	movs	r2, #0
 80a026e:	4b09      	ldr	r3, [pc, #36]	; (80a0294 <_Z25setValuesAccordingToStatec+0x54>)
 80a0270:	601a      	str	r2, [r3, #0]
    break;
 80a0272:	4770      	bx	lr

    //symbiosis, coming back to life
    case 'S':
      pace = 2000;
 80a0274:	4a05      	ldr	r2, [pc, #20]	; (80a028c <_Z25setValuesAccordingToStatec+0x4c>)
 80a0276:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80a027a:	6013      	str	r3, [r2, #0]
      wait = 1000;
 80a027c:	4a04      	ldr	r2, [pc, #16]	; (80a0290 <_Z25setValuesAccordingToStatec+0x50>)
 80a027e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0282:	6011      	str	r1, [r2, #0]
      stepperIndexCap = 2000;
 80a0284:	4a03      	ldr	r2, [pc, #12]	; (80a0294 <_Z25setValuesAccordingToStatec+0x54>)
 80a0286:	6013      	str	r3, [r2, #0]
 80a0288:	4770      	bx	lr
 80a028a:	bf00      	nop
 80a028c:	20000000 	.word	0x20000000
 80a0290:	20000014 	.word	0x20000014
 80a0294:	2000001c 	.word	0x2000001c

080a0298 <_Z20spinStepperRightSoloPiiii>:
// spinStepperLeftDuo(int motorPins[], int motorPins2[], int pace, int wait, int stepperIndexCap)
spinStepperLeftDuo(rightShoulderMotors, leftShoulderMotors, pace, wait, stepperIndexCap);

}

void spinStepperRightSolo(int motorPins[], int pace, int wait, int stepperIndexCap){
 80a0298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a029c:	4605      	mov	r5, r0
 80a029e:	4617      	mov	r7, r2
 80a02a0:	4698      	mov	r8, r3
 80a02a2:	460e      	mov	r6, r1
  Serial.println("STEP RIGHT SOLO");
 80a02a4:	f001 f86e 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a02a8:	490f      	ldr	r1, [pc, #60]	; (80a02e8 <_Z20spinStepperRightSoloPiiii+0x50>)
 80a02aa:	f000 fc8c 	bl	80a0bc6 <_ZN5Print7printlnEPKc>
  motorPins[0]= directionRight;
  motorPins[1]= stepRight;
  motorPins[2]= enableRight;

  */
  digitalWrite(motorPins[0],HIGH);
 80a02ae:	2101      	movs	r1, #1
 80a02b0:	8828      	ldrh	r0, [r5, #0]
 80a02b2:	f001 f9fa 	bl	80a16aa <digitalWrite>

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a02b6:	2400      	movs	r4, #0
 80a02b8:	4544      	cmp	r4, r8
 80a02ba:	da0f      	bge.n	80a02dc <_Z20spinStepperRightSoloPiiii+0x44>
  {
    digitalWrite(motorPins[1], HIGH);
 80a02bc:	2101      	movs	r1, #1
 80a02be:	88a8      	ldrh	r0, [r5, #4]
 80a02c0:	f001 f9f3 	bl	80a16aa <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a02c4:	4630      	mov	r0, r6
 80a02c6:	f000 f92d 	bl	80a0524 <HAL_Delay_Microseconds>
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
 80a02ca:	2100      	movs	r1, #0
 80a02cc:	88a8      	ldrh	r0, [r5, #4]
 80a02ce:	f001 f9ec 	bl	80a16aa <digitalWrite>
 80a02d2:	4630      	mov	r0, r6
 80a02d4:	f000 f926 	bl	80a0524 <HAL_Delay_Microseconds>
  motorPins[2]= enableRight;

  */
  digitalWrite(motorPins[0],HIGH);

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a02d8:	3401      	adds	r4, #1
 80a02da:	e7ed      	b.n	80a02b8 <_Z20spinStepperRightSoloPiiii+0x20>
    digitalWrite(motorPins[1], HIGH);
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
 80a02dc:	4638      	mov	r0, r7
}
 80a02de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite(motorPins[1], HIGH);
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
 80a02e2:	f000 bb05 	b.w	80a08f0 <delay>
 80a02e6:	bf00      	nop
 80a02e8:	080a1aff 	.word	0x080a1aff

080a02ec <_Z19spinStepperLeftSoloPiiii>:
}

void spinStepperLeftSolo(int motorPins[], int pace, int wait, int stepperIndexCap){
 80a02ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a02f0:	4605      	mov	r5, r0
 80a02f2:	4617      	mov	r7, r2
 80a02f4:	4698      	mov	r8, r3
 80a02f6:	460e      	mov	r6, r1
  Serial.println("STEP LEFT SOLO");
 80a02f8:	f001 f844 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a02fc:	490f      	ldr	r1, [pc, #60]	; (80a033c <_Z19spinStepperLeftSoloPiiii+0x50>)
 80a02fe:	f000 fc62 	bl	80a0bc6 <_ZN5Print7printlnEPKc>
  motorPins[0]= directionRight;
  motorPins[1]= stepRight;
  motorPins[2]= enableRight;

  */
  digitalWrite(motorPins[0],LOW);
 80a0302:	2100      	movs	r1, #0
 80a0304:	8828      	ldrh	r0, [r5, #0]
 80a0306:	f001 f9d0 	bl	80a16aa <digitalWrite>

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a030a:	2400      	movs	r4, #0
 80a030c:	4544      	cmp	r4, r8
 80a030e:	da0f      	bge.n	80a0330 <_Z19spinStepperLeftSoloPiiii+0x44>
  {
    digitalWrite(motorPins[1], HIGH);
 80a0310:	2101      	movs	r1, #1
 80a0312:	88a8      	ldrh	r0, [r5, #4]
 80a0314:	f001 f9c9 	bl	80a16aa <digitalWrite>
 80a0318:	4630      	mov	r0, r6
 80a031a:	f000 f903 	bl	80a0524 <HAL_Delay_Microseconds>
    delayMicroseconds(pace); //possibliy not necessary
    digitalWrite(motorPins[1],LOW);
 80a031e:	2100      	movs	r1, #0
 80a0320:	88a8      	ldrh	r0, [r5, #4]
 80a0322:	f001 f9c2 	bl	80a16aa <digitalWrite>
 80a0326:	4630      	mov	r0, r6
 80a0328:	f000 f8fc 	bl	80a0524 <HAL_Delay_Microseconds>
  motorPins[2]= enableRight;

  */
  digitalWrite(motorPins[0],LOW);

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a032c:	3401      	adds	r4, #1
 80a032e:	e7ed      	b.n	80a030c <_Z19spinStepperLeftSoloPiiii+0x20>
    digitalWrite(motorPins[1], HIGH);
    delayMicroseconds(pace); //possibliy not necessary
    digitalWrite(motorPins[1],LOW);
    delayMicroseconds(pace); //how fast the motor turns because of time between successive step pulses
  }
  delay(wait);
 80a0330:	4638      	mov	r0, r7
}
 80a0332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    digitalWrite(motorPins[1], HIGH);
    delayMicroseconds(pace); //possibliy not necessary
    digitalWrite(motorPins[1],LOW);
    delayMicroseconds(pace); //how fast the motor turns because of time between successive step pulses
  }
  delay(wait);
 80a0336:	f000 badb 	b.w	80a08f0 <delay>
 80a033a:	bf00      	nop
 80a033c:	080a1b0f 	.word	0x080a1b0f

080a0340 <_Z19spinStepperRightDuoPiS_iii>:
}

//spin motors on both shoulders
void spinStepperRightDuo(int motorPins[], int motorPins2[], int pace, int wait, int stepperIndexCap){
 80a0340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0344:	4604      	mov	r4, r0
 80a0346:	460f      	mov	r7, r1
 80a0348:	4616      	mov	r6, r2
 80a034a:	4698      	mov	r8, r3
 80a034c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  Serial.println("STEP RIGHT DUO");
 80a0350:	f001 f818 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a0354:	4915      	ldr	r1, [pc, #84]	; (80a03ac <_Z19spinStepperRightDuoPiS_iii+0x6c>)
 80a0356:	f000 fc36 	bl	80a0bc6 <_ZN5Print7printlnEPKc>
  motorPins[0]= directionRight;
  motorPins[1]= stepRight;
  motorPins[2]= enableRight;

  */
  digitalWrite(motorPins[0],HIGH);
 80a035a:	2101      	movs	r1, #1
 80a035c:	8820      	ldrh	r0, [r4, #0]
 80a035e:	f001 f9a4 	bl	80a16aa <digitalWrite>
  digitalWrite(motorPins2[0],HIGH);
 80a0362:	2101      	movs	r1, #1
 80a0364:	8838      	ldrh	r0, [r7, #0]
 80a0366:	f001 f9a0 	bl	80a16aa <digitalWrite>

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a036a:	2500      	movs	r5, #0
 80a036c:	454d      	cmp	r5, r9
 80a036e:	da17      	bge.n	80a03a0 <_Z19spinStepperRightDuoPiS_iii+0x60>
  {
    digitalWrite(motorPins[1], HIGH);
 80a0370:	2101      	movs	r1, #1
 80a0372:	88a0      	ldrh	r0, [r4, #4]
 80a0374:	f001 f999 	bl	80a16aa <digitalWrite>
    digitalWrite(motorPins2[1], HIGH);
 80a0378:	2101      	movs	r1, #1
 80a037a:	88b8      	ldrh	r0, [r7, #4]
 80a037c:	f001 f995 	bl	80a16aa <digitalWrite>
 80a0380:	4630      	mov	r0, r6
 80a0382:	f000 f8cf 	bl	80a0524 <HAL_Delay_Microseconds>
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
 80a0386:	2100      	movs	r1, #0
 80a0388:	88a0      	ldrh	r0, [r4, #4]
 80a038a:	f001 f98e 	bl	80a16aa <digitalWrite>
    digitalWrite(motorPins[2],LOW);
 80a038e:	2100      	movs	r1, #0
 80a0390:	8920      	ldrh	r0, [r4, #8]
 80a0392:	f001 f98a 	bl	80a16aa <digitalWrite>
 80a0396:	4630      	mov	r0, r6
 80a0398:	f000 f8c4 	bl	80a0524 <HAL_Delay_Microseconds>

  */
  digitalWrite(motorPins[0],HIGH);
  digitalWrite(motorPins2[0],HIGH);

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a039c:	3501      	adds	r5, #1
 80a039e:	e7e5      	b.n	80a036c <_Z19spinStepperRightDuoPiS_iii+0x2c>
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
    digitalWrite(motorPins[2],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
 80a03a0:	4640      	mov	r0, r8
}
 80a03a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
    digitalWrite(motorPins[2],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
 80a03a6:	f000 baa3 	b.w	80a08f0 <delay>
 80a03aa:	bf00      	nop
 80a03ac:	080a1b1e 	.word	0x080a1b1e

080a03b0 <_Z18spinStepperLeftDuoPiS_iii>:
}

//spin motors on both shoulders
void spinStepperLeftDuo(int motorPins[], int motorPins2[], int pace, int wait, int stepperIndexCap){
 80a03b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a03b4:	4604      	mov	r4, r0
 80a03b6:	460f      	mov	r7, r1
 80a03b8:	4616      	mov	r6, r2
 80a03ba:	4698      	mov	r8, r3
 80a03bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
  Serial.println("STEP LEFT DUO");
 80a03c0:	f000 ffe0 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a03c4:	4915      	ldr	r1, [pc, #84]	; (80a041c <_Z18spinStepperLeftDuoPiS_iii+0x6c>)
 80a03c6:	f000 fbfe 	bl	80a0bc6 <_ZN5Print7printlnEPKc>
  motorPins[0]= directionRight;
  motorPins[1]= stepRight;
  motorPins[2]= enableRight;

  */
  digitalWrite(motorPins[0],LOW);
 80a03ca:	2100      	movs	r1, #0
 80a03cc:	8820      	ldrh	r0, [r4, #0]
 80a03ce:	f001 f96c 	bl	80a16aa <digitalWrite>
  digitalWrite(motorPins2[0],LOW);
 80a03d2:	2100      	movs	r1, #0
 80a03d4:	8838      	ldrh	r0, [r7, #0]
 80a03d6:	f001 f968 	bl	80a16aa <digitalWrite>

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a03da:	2500      	movs	r5, #0
 80a03dc:	454d      	cmp	r5, r9
 80a03de:	da17      	bge.n	80a0410 <_Z18spinStepperLeftDuoPiS_iii+0x60>
  {
    digitalWrite(motorPins[1], HIGH);
 80a03e0:	2101      	movs	r1, #1
 80a03e2:	88a0      	ldrh	r0, [r4, #4]
 80a03e4:	f001 f961 	bl	80a16aa <digitalWrite>
    digitalWrite(motorPins2[1], HIGH);
 80a03e8:	2101      	movs	r1, #1
 80a03ea:	88b8      	ldrh	r0, [r7, #4]
 80a03ec:	f001 f95d 	bl	80a16aa <digitalWrite>
 80a03f0:	4630      	mov	r0, r6
 80a03f2:	f000 f897 	bl	80a0524 <HAL_Delay_Microseconds>
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
 80a03f6:	2100      	movs	r1, #0
 80a03f8:	88a0      	ldrh	r0, [r4, #4]
 80a03fa:	f001 f956 	bl	80a16aa <digitalWrite>
    digitalWrite(motorPins[2],LOW);
 80a03fe:	2100      	movs	r1, #0
 80a0400:	8920      	ldrh	r0, [r4, #8]
 80a0402:	f001 f952 	bl	80a16aa <digitalWrite>
 80a0406:	4630      	mov	r0, r6
 80a0408:	f000 f88c 	bl	80a0524 <HAL_Delay_Microseconds>

  */
  digitalWrite(motorPins[0],LOW);
  digitalWrite(motorPins2[0],LOW);

  for(int stepperIndex = 0; stepperIndex < stepperIndexCap; stepperIndex++)
 80a040c:	3501      	adds	r5, #1
 80a040e:	e7e5      	b.n	80a03dc <_Z18spinStepperLeftDuoPiS_iii+0x2c>
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
    digitalWrite(motorPins[2],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
 80a0410:	4640      	mov	r0, r8
}
 80a0412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delayMicroseconds(pace);
    digitalWrite(motorPins[1],LOW);
    digitalWrite(motorPins[2],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
 80a0416:	f000 ba6b 	b.w	80a08f0 <delay>
 80a041a:	bf00      	nop
 80a041c:	080a1b2d 	.word	0x080a1b2d

080a0420 <loop>:
      stepperIndexCap = 2000;
    break;
  }
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
S: symbiosis, coming back to life
*/
setValuesAccordingToState('L');

//spinStepperRightSolo(int motorPins[], int pace, int wait, int stepperIndexCap){
spinStepperRightSolo(rightShoulderMotors, pace, wait, stepperIndexCap);
 80a0424:	4e19      	ldr	r6, [pc, #100]	; (80a048c <loop+0x6c>)
 80a0426:	4d1a      	ldr	r5, [pc, #104]	; (80a0490 <loop+0x70>)
 80a0428:	4c1a      	ldr	r4, [pc, #104]	; (80a0494 <loop+0x74>)
 80a042a:	4f1b      	ldr	r7, [pc, #108]	; (80a0498 <loop+0x78>)
spinStepperRightSolo(leftShoulderMotors, pace, wait, stepperIndexCap);
 80a042c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a049c <loop+0x7c>
L: life
B: bleaching
D: dead
S: symbiosis, coming back to life
*/
setValuesAccordingToState('L');
 80a0430:	204c      	movs	r0, #76	; 0x4c
 80a0432:	f7ff ff05 	bl	80a0240 <_Z25setValuesAccordingToStatec>

//spinStepperRightSolo(int motorPins[], int pace, int wait, int stepperIndexCap){
spinStepperRightSolo(rightShoulderMotors, pace, wait, stepperIndexCap);
 80a0436:	6833      	ldr	r3, [r6, #0]
 80a0438:	682a      	ldr	r2, [r5, #0]
 80a043a:	6821      	ldr	r1, [r4, #0]
 80a043c:	4638      	mov	r0, r7
 80a043e:	f7ff ff2b 	bl	80a0298 <_Z20spinStepperRightSoloPiiii>
spinStepperRightSolo(leftShoulderMotors, pace, wait, stepperIndexCap);
 80a0442:	6833      	ldr	r3, [r6, #0]
 80a0444:	682a      	ldr	r2, [r5, #0]
 80a0446:	6821      	ldr	r1, [r4, #0]
 80a0448:	4640      	mov	r0, r8
 80a044a:	f7ff ff25 	bl	80a0298 <_Z20spinStepperRightSoloPiiii>
//spinStepperRightSolo(int motorPins[], int pace, int wait, int stepperIndexCap){
spinStepperLeftSolo(rightShoulderMotors, pace, wait, stepperIndexCap);
 80a044e:	6833      	ldr	r3, [r6, #0]
 80a0450:	682a      	ldr	r2, [r5, #0]
 80a0452:	6821      	ldr	r1, [r4, #0]
 80a0454:	4638      	mov	r0, r7
 80a0456:	f7ff ff49 	bl	80a02ec <_Z19spinStepperLeftSoloPiiii>
spinStepperLeftSolo(leftShoulderMotors, pace, wait, stepperIndexCap);
 80a045a:	6833      	ldr	r3, [r6, #0]
 80a045c:	682a      	ldr	r2, [r5, #0]
 80a045e:	6821      	ldr	r1, [r4, #0]
 80a0460:	4640      	mov	r0, r8
 80a0462:	f7ff ff43 	bl	80a02ec <_Z19spinStepperLeftSoloPiiii>
// spinStepperRightDuo(int motorPins[], int motorPins2[], int pace, int wait, int stepperIndexCap)
spinStepperRightDuo(rightShoulderMotors, leftShoulderMotors, pace, wait, stepperIndexCap);
 80a0466:	6833      	ldr	r3, [r6, #0]
 80a0468:	6822      	ldr	r2, [r4, #0]
 80a046a:	9300      	str	r3, [sp, #0]
 80a046c:	4641      	mov	r1, r8
 80a046e:	682b      	ldr	r3, [r5, #0]
 80a0470:	4638      	mov	r0, r7
 80a0472:	f7ff ff65 	bl	80a0340 <_Z19spinStepperRightDuoPiS_iii>
// spinStepperLeftDuo(int motorPins[], int motorPins2[], int pace, int wait, int stepperIndexCap)
spinStepperLeftDuo(rightShoulderMotors, leftShoulderMotors, pace, wait, stepperIndexCap);
 80a0476:	6833      	ldr	r3, [r6, #0]
 80a0478:	6822      	ldr	r2, [r4, #0]
 80a047a:	9300      	str	r3, [sp, #0]
 80a047c:	4641      	mov	r1, r8
 80a047e:	682b      	ldr	r3, [r5, #0]
 80a0480:	4638      	mov	r0, r7
 80a0482:	f7ff ff95 	bl	80a03b0 <_Z18spinStepperLeftDuoPiS_iii>

}
 80a0486:	b002      	add	sp, #8
 80a0488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a048c:	2000001c 	.word	0x2000001c
 80a0490:	20000014 	.word	0x20000014
 80a0494:	20000000 	.word	0x20000000
 80a0498:	2000009c 	.word	0x2000009c
 80a049c:	2000010c 	.word	0x2000010c

080a04a0 <_GLOBAL__sub_I_SystemMode>:
    digitalWrite(motorPins[1],LOW);
    digitalWrite(motorPins[2],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
}
 80a04a0:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a04a2:	f000 f84f 	bl	80a0544 <HAL_Pin_Map>
 */

#include "application.h"
#include "Particle.h"

SYSTEM_THREAD(ENABLED);
 80a04a6:	2100      	movs	r1, #0
 80a04a8:	2001      	movs	r0, #1
 80a04aa:	f000 f97d 	bl	80a07a8 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a04ae:	4b0f      	ldr	r3, [pc, #60]	; (80a04ec <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a04b0:	2200      	movs	r2, #0
 80a04b2:	701a      	strb	r2, [r3, #0]
 80a04b4:	805a      	strh	r2, [r3, #2]
 80a04b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a04ba:	4c0d      	ldr	r4, [pc, #52]	; (80a04f0 <_GLOBAL__sub_I_SystemMode+0x50>)
 80a04bc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a04be:	2002      	movs	r0, #2
 80a04c0:	f000 f962 	bl	80a0788 <set_system_mode>
 80a04c4:	4d0b      	ldr	r5, [pc, #44]	; (80a04f4 <_GLOBAL__sub_I_SystemMode+0x54>)
 80a04c6:	4620      	mov	r0, r4
 80a04c8:	f000 fa7a 	bl	80a09c0 <_ZN9IPAddressC1Ev>
 80a04cc:	4620      	mov	r0, r4
int port;
UDP udp;
 80a04ce:	4c0a      	ldr	r4, [pc, #40]	; (80a04f8 <_GLOBAL__sub_I_SystemMode+0x58>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a04d0:	462a      	mov	r2, r5
 80a04d2:	490a      	ldr	r1, [pc, #40]	; (80a04fc <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a04d4:	f001 f95c 	bl	80a1790 <__aeabi_atexit>
int port;
UDP udp;
 80a04d8:	4620      	mov	r0, r4
 80a04da:	f000 fddf 	bl	80a109c <_ZN3UDPC1Ev>
 80a04de:	462a      	mov	r2, r5
 80a04e0:	4620      	mov	r0, r4
    digitalWrite(motorPins[1],LOW);
    digitalWrite(motorPins[2],LOW);
    delayMicroseconds(pace);
  }
  delay(wait);
}
 80a04e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a04e6:	4906      	ldr	r1, [pc, #24]	; (80a0500 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a04e8:	f001 b952 	b.w	80a1790 <__aeabi_atexit>
 80a04ec:	20000094 	.word	0x20000094
 80a04f0:	200000f4 	.word	0x200000f4
 80a04f4:	20000090 	.word	0x20000090
 80a04f8:	200000a8 	.word	0x200000a8
 80a04fc:	080a00b3 	.word	0x080a00b3
 80a0500:	080a00b5 	.word	0x080a00b5

080a0504 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <os_mutex_create+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601d0 	.word	0x080601d0

080a0514 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <HAL_RNG_GetRandomNumber+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	685b      	ldr	r3, [r3, #4]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	0806019c 	.word	0x0806019c

080a0524 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <HAL_Delay_Microseconds+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	68db      	ldr	r3, [r3, #12]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	0806019c 	.word	0x0806019c

080a0534 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	695b      	ldr	r3, [r3, #20]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	0806019c 	.word	0x0806019c

080a0544 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <HAL_Pin_Map+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	681b      	ldr	r3, [r3, #0]
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601b0 	.word	0x080601b0

080a0554 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <HAL_Pin_Mode+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	689b      	ldr	r3, [r3, #8]
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601b0 	.word	0x080601b0

080a0564 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <HAL_Get_Pin_Mode+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	68db      	ldr	r3, [r3, #12]
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601b0 	.word	0x080601b0

080a0574 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <HAL_GPIO_Write+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	691b      	ldr	r3, [r3, #16]
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601b0 	.word	0x080601b0

080a0584 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <HAL_I2C_Write_Data+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601ac 	.word	0x080601ac

080a0594 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_I2C_Available_Data+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601ac 	.word	0x080601ac

080a05a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_I2C_Read_Data+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601ac 	.word	0x080601ac

080a05b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_I2C_Peek_Data+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601ac 	.word	0x080601ac

080a05c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <HAL_I2C_Flush_Data+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601ac 	.word	0x080601ac

080a05d4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <HAL_I2C_Is_Enabled+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601ac 	.word	0x080601ac

080a05e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b03      	ldr	r3, [pc, #12]	; (80a05f4 <HAL_I2C_Init+0x10>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a05ee:	9301      	str	r3, [sp, #4]
 80a05f0:	bd08      	pop	{r3, pc}
 80a05f2:	0000      	.short	0x0000
 80a05f4:	080601ac 	.word	0x080601ac

080a05f8 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <socket_handle_valid+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	685b      	ldr	r3, [r3, #4]
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601bc 	.word	0x080601bc

080a0608 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <socket_create+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	689b      	ldr	r3, [r3, #8]
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601bc 	.word	0x080601bc

080a0618 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <socket_receivefrom+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	695b      	ldr	r3, [r3, #20]
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601bc 	.word	0x080601bc

080a0628 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <socket_sendto+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	69db      	ldr	r3, [r3, #28]
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601bc 	.word	0x080601bc

080a0638 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <socket_close+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	6a1b      	ldr	r3, [r3, #32]
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601bc 	.word	0x080601bc

080a0648 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0648:	b508      	push	{r3, lr}
 80a064a:	4b02      	ldr	r3, [pc, #8]	; (80a0654 <socket_handle_invalid+0xc>)
 80a064c:	681b      	ldr	r3, [r3, #0]
 80a064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0650:	9301      	str	r3, [sp, #4]
 80a0652:	bd08      	pop	{r3, pc}
 80a0654:	080601bc 	.word	0x080601bc

080a0658 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b02      	ldr	r3, [pc, #8]	; (80a0664 <HAL_SPI_Init+0xc>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	69db      	ldr	r3, [r3, #28]
 80a0660:	9301      	str	r3, [sp, #4]
 80a0662:	bd08      	pop	{r3, pc}
 80a0664:	080601b4 	.word	0x080601b4

080a0668 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0668:	b508      	push	{r3, lr}
 80a066a:	4b02      	ldr	r3, [pc, #8]	; (80a0674 <HAL_SPI_Is_Enabled+0xc>)
 80a066c:	681b      	ldr	r3, [r3, #0]
 80a066e:	6a1b      	ldr	r3, [r3, #32]
 80a0670:	9301      	str	r3, [sp, #4]
 80a0672:	bd08      	pop	{r3, pc}
 80a0674:	080601b4 	.word	0x080601b4

080a0678 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b02      	ldr	r3, [pc, #8]	; (80a0684 <HAL_USART_Init+0xc>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	699b      	ldr	r3, [r3, #24]
 80a0680:	9301      	str	r3, [sp, #4]
 80a0682:	bd08      	pop	{r3, pc}
 80a0684:	080601c4 	.word	0x080601c4

080a0688 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <HAL_USART_Write_Data+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601c4 	.word	0x080601c4

080a0698 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <HAL_USART_Available_Data+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601c4 	.word	0x080601c4

080a06a8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <HAL_USART_Read_Data+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601c4 	.word	0x080601c4

080a06b8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <HAL_USART_Peek_Data+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	080601c4 	.word	0x080601c4

080a06c8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <HAL_USART_Flush_Data+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601c4 	.word	0x080601c4

080a06d8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <HAL_USART_Is_Enabled+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601c4 	.word	0x080601c4

080a06e8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601c4 	.word	0x080601c4

080a06f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <HAL_USB_USART_Init+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	681b      	ldr	r3, [r3, #0]
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601d8 	.word	0x080601d8

080a0708 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <HAL_USB_USART_Begin+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	685b      	ldr	r3, [r3, #4]
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601d8 	.word	0x080601d8

080a0718 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b02      	ldr	r3, [pc, #8]	; (80a0724 <HAL_USB_USART_Available_Data+0xc>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	691b      	ldr	r3, [r3, #16]
 80a0720:	9301      	str	r3, [sp, #4]
 80a0722:	bd08      	pop	{r3, pc}
 80a0724:	080601d8 	.word	0x080601d8

080a0728 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0728:	b508      	push	{r3, lr}
 80a072a:	4b02      	ldr	r3, [pc, #8]	; (80a0734 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a072c:	681b      	ldr	r3, [r3, #0]
 80a072e:	695b      	ldr	r3, [r3, #20]
 80a0730:	9301      	str	r3, [sp, #4]
 80a0732:	bd08      	pop	{r3, pc}
 80a0734:	080601d8 	.word	0x080601d8

080a0738 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0738:	b508      	push	{r3, lr}
 80a073a:	4b02      	ldr	r3, [pc, #8]	; (80a0744 <HAL_USB_USART_Receive_Data+0xc>)
 80a073c:	681b      	ldr	r3, [r3, #0]
 80a073e:	699b      	ldr	r3, [r3, #24]
 80a0740:	9301      	str	r3, [sp, #4]
 80a0742:	bd08      	pop	{r3, pc}
 80a0744:	080601d8 	.word	0x080601d8

080a0748 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <HAL_USB_USART_Send_Data+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	69db      	ldr	r3, [r3, #28]
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	080601d8 	.word	0x080601d8

080a0758 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <HAL_USB_USART_Flush_Data+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	6a1b      	ldr	r3, [r3, #32]
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	080601d8 	.word	0x080601d8

080a0768 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b02      	ldr	r3, [pc, #8]	; (80a0774 <HAL_USB_USART_Is_Enabled+0xc>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0770:	9301      	str	r3, [sp, #4]
 80a0772:	bd08      	pop	{r3, pc}
 80a0774:	080601d8 	.word	0x080601d8

080a0778 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0778:	b508      	push	{r3, lr}
 80a077a:	4b02      	ldr	r3, [pc, #8]	; (80a0784 <inet_gethostbyname+0xc>)
 80a077c:	681b      	ldr	r3, [r3, #0]
 80a077e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0780:	9301      	str	r3, [sp, #4]
 80a0782:	bd08      	pop	{r3, pc}
 80a0784:	080601c0 	.word	0x080601c0

080a0788 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <set_system_mode+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	685b      	ldr	r3, [r3, #4]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601a4 	.word	0x080601a4

080a0798 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <system_delay_ms+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	695b      	ldr	r3, [r3, #20]
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601a4 	.word	0x080601a4

080a07a8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <system_thread_set_state+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601a4 	.word	0x080601a4

080a07b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b03      	ldr	r3, [pc, #12]	; (80a07c8 <system_ctrl_set_app_request_handler+0x10>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a07c2:	9301      	str	r3, [sp, #4]
 80a07c4:	bd08      	pop	{r3, pc}
 80a07c6:	0000      	.short	0x0000
 80a07c8:	080601a4 	.word	0x080601a4

080a07cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b03      	ldr	r3, [pc, #12]	; (80a07dc <system_ctrl_set_result+0x10>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a07d6:	9301      	str	r3, [sp, #4]
 80a07d8:	bd08      	pop	{r3, pc}
 80a07da:	0000      	.short	0x0000
 80a07dc:	080601a4 	.word	0x080601a4

080a07e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <spark_set_random_seed_from_cloud_handler+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601cc 	.word	0x080601cc

080a07f0 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b02      	ldr	r3, [pc, #8]	; (80a07fc <network_config+0xc>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	681b      	ldr	r3, [r3, #0]
 80a07f8:	9301      	str	r3, [sp, #4]
 80a07fa:	bd08      	pop	{r3, pc}
 80a07fc:	080601c8 	.word	0x080601c8

080a0800 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <network_connect+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	685b      	ldr	r3, [r3, #4]
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601c8 	.word	0x080601c8

080a0810 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <network_connecting+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	689b      	ldr	r3, [r3, #8]
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601c8 	.word	0x080601c8

080a0820 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <network_disconnect+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	68db      	ldr	r3, [r3, #12]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	080601c8 	.word	0x080601c8

080a0830 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <network_ready+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	691b      	ldr	r3, [r3, #16]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	080601c8 	.word	0x080601c8

080a0840 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <network_on+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	695b      	ldr	r3, [r3, #20]
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	080601c8 	.word	0x080601c8

080a0850 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <network_off+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	699b      	ldr	r3, [r3, #24]
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080601c8 	.word	0x080601c8

080a0860 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <network_listen+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	69db      	ldr	r3, [r3, #28]
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080601c8 	.word	0x080601c8

080a0870 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <network_listening+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	6a1b      	ldr	r3, [r3, #32]
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601c8 	.word	0x080601c8

080a0880 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <network_set_listen_timeout+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601c8 	.word	0x080601c8

080a0890 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <network_get_listen_timeout+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601c8 	.word	0x080601c8

080a08a0 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <network_set_hostname+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601c8 	.word	0x080601c8

080a08b0 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <network_get_hostname+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601c8 	.word	0x080601c8

080a08c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <malloc+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	681b      	ldr	r3, [r3, #0]
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601a0 	.word	0x080601a0

080a08d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <free+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	685b      	ldr	r3, [r3, #4]
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601a0 	.word	0x080601a0

080a08e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <realloc+0xc>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	689b      	ldr	r3, [r3, #8]
 80a08e8:	9301      	str	r3, [sp, #4]
 80a08ea:	bd08      	pop	{r3, pc}
 80a08ec:	080601a0 	.word	0x080601a0

080a08f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a08f0:	2100      	movs	r1, #0
 80a08f2:	f7ff bf51 	b.w	80a0798 <system_delay_ms>

080a08f6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a08f8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08fa:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a08fc:	b113      	cbz	r3, 80a0904 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a08fe:	2203      	movs	r2, #3
 80a0900:	4601      	mov	r1, r0
 80a0902:	4798      	blx	r3
    }
 80a0904:	4620      	mov	r0, r4
 80a0906:	bd10      	pop	{r4, pc}

080a0908 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0908:	4770      	bx	lr

080a090a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a090a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a090c:	4606      	mov	r6, r0
 80a090e:	4615      	mov	r5, r2
 80a0910:	460c      	mov	r4, r1
 80a0912:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0914:	42bc      	cmp	r4, r7
 80a0916:	d006      	beq.n	80a0926 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0918:	6833      	ldr	r3, [r6, #0]
 80a091a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a091e:	689b      	ldr	r3, [r3, #8]
 80a0920:	4630      	mov	r0, r6
 80a0922:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0924:	e7f6      	b.n	80a0914 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0926:	4628      	mov	r0, r5
 80a0928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a092a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a092a:	2200      	movs	r2, #0
 80a092c:	7c00      	ldrb	r0, [r0, #16]
 80a092e:	f7ff be29 	b.w	80a0584 <HAL_I2C_Write_Data>

080a0932 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0932:	2100      	movs	r1, #0
 80a0934:	7c00      	ldrb	r0, [r0, #16]
 80a0936:	f7ff be2d 	b.w	80a0594 <HAL_I2C_Available_Data>

080a093a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a093a:	2100      	movs	r1, #0
 80a093c:	7c00      	ldrb	r0, [r0, #16]
 80a093e:	f7ff be31 	b.w	80a05a4 <HAL_I2C_Read_Data>

080a0942 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0942:	2100      	movs	r1, #0
 80a0944:	7c00      	ldrb	r0, [r0, #16]
 80a0946:	f7ff be35 	b.w	80a05b4 <HAL_I2C_Peek_Data>

080a094a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a094a:	2100      	movs	r1, #0
 80a094c:	7c00      	ldrb	r0, [r0, #16]
 80a094e:	f7ff be39 	b.w	80a05c4 <HAL_I2C_Flush_Data>

080a0952 <_ZN7TwoWireD0Ev>:
 80a0952:	b510      	push	{r4, lr}
 80a0954:	4604      	mov	r4, r0
 80a0956:	2114      	movs	r1, #20
 80a0958:	f000 ff1f 	bl	80a179a <_ZdlPvj>
 80a095c:	4620      	mov	r0, r4
 80a095e:	bd10      	pop	{r4, pc}

080a0960 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0960:	b510      	push	{r4, lr}
 80a0962:	4604      	mov	r4, r0
 80a0964:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a096a:	60a3      	str	r3, [r4, #8]
 80a096c:	4b04      	ldr	r3, [pc, #16]	; (80a0980 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a096e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0970:	7420      	strb	r0, [r4, #16]
 80a0972:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0974:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0976:	f7ff fe35 	bl	80a05e4 <HAL_I2C_Init>

}
 80a097a:	4620      	mov	r0, r4
 80a097c:	bd10      	pop	{r4, pc}
 80a097e:	bf00      	nop
 80a0980:	080a1b44 	.word	0x080a1b44

080a0984 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0984:	2100      	movs	r1, #0
 80a0986:	7c00      	ldrb	r0, [r0, #16]
 80a0988:	f7ff be24 	b.w	80a05d4 <HAL_I2C_Is_Enabled>

080a098c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a098e:	460f      	mov	r7, r1
 80a0990:	f100 0608 	add.w	r6, r0, #8
 80a0994:	1d05      	adds	r5, r0, #4
 80a0996:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0998:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a099c:	220a      	movs	r2, #10
 80a099e:	4638      	mov	r0, r7
 80a09a0:	f000 f94f 	bl	80a0c42 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a09a4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a09a6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a09a8:	d007      	beq.n	80a09ba <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a09aa:	2c00      	cmp	r4, #0
 80a09ac:	d0f4      	beq.n	80a0998 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a09ae:	212e      	movs	r1, #46	; 0x2e
 80a09b0:	4638      	mov	r0, r7
 80a09b2:	f000 f8f3 	bl	80a0b9c <_ZN5Print5printEc>
 80a09b6:	4404      	add	r4, r0
 80a09b8:	e7ee      	b.n	80a0998 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a09ba:	4620      	mov	r0, r4
 80a09bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a09c0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a09c0:	b510      	push	{r4, lr}
 80a09c2:	4604      	mov	r4, r0
 80a09c4:	4b04      	ldr	r3, [pc, #16]	; (80a09d8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a09c6:	2211      	movs	r2, #17
 80a09c8:	f840 3b04 	str.w	r3, [r0], #4
 80a09cc:	2100      	movs	r1, #0
 80a09ce:	f001 f848 	bl	80a1a62 <memset>
{
    clear();
}
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	bd10      	pop	{r4, pc}
 80a09d6:	bf00      	nop
 80a09d8:	080a1b6c 	.word	0x080a1b6c

080a09dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a09dc:	4603      	mov	r3, r0
 80a09de:	4a07      	ldr	r2, [pc, #28]	; (80a09fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a09e0:	b510      	push	{r4, lr}
 80a09e2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a09e6:	f101 0210 	add.w	r2, r1, #16
 80a09ea:	f851 4b04 	ldr.w	r4, [r1], #4
 80a09ee:	4291      	cmp	r1, r2
 80a09f0:	f843 4b04 	str.w	r4, [r3], #4
 80a09f4:	d1f9      	bne.n	80a09ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a09f6:	780a      	ldrb	r2, [r1, #0]
 80a09f8:	701a      	strb	r2, [r3, #0]
}
 80a09fa:	bd10      	pop	{r4, pc}
 80a09fc:	080a1b6c 	.word	0x080a1b6c

080a0a00 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a00:	4a02      	ldr	r2, [pc, #8]	; (80a0a0c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0a02:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a04:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0a06:	2204      	movs	r2, #4
 80a0a08:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0a0a:	4770      	bx	lr
 80a0a0c:	080a1b6c 	.word	0x080a1b6c

080a0a10 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0a10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0a12:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0a16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0a1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0a1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0a22:	2304      	movs	r3, #4
 80a0a24:	6041      	str	r1, [r0, #4]
 80a0a26:	7503      	strb	r3, [r0, #20]
 80a0a28:	bd10      	pop	{r4, pc}
	...

080a0a2c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a2e:	4d04      	ldr	r5, [pc, #16]	; (80a0a40 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0a30:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0a32:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0a36:	9500      	str	r5, [sp, #0]
 80a0a38:	f7ff ffea 	bl	80a0a10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0a3c:	b003      	add	sp, #12
 80a0a3e:	bd30      	pop	{r4, r5, pc}
 80a0a40:	080a1b6c 	.word	0x080a1b6c

080a0a44 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0a46:	780d      	ldrb	r5, [r1, #0]
 80a0a48:	788b      	ldrb	r3, [r1, #2]
 80a0a4a:	784a      	ldrb	r2, [r1, #1]
 80a0a4c:	78c9      	ldrb	r1, [r1, #3]
 80a0a4e:	9100      	str	r1, [sp, #0]
 80a0a50:	4629      	mov	r1, r5
 80a0a52:	f7ff ffdd 	bl	80a0a10 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0a56:	b003      	add	sp, #12
 80a0a58:	bd30      	pop	{r4, r5, pc}
	...

080a0a5c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0a5c:	4a01      	ldr	r2, [pc, #4]	; (80a0a64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a60:	601a      	str	r2, [r3, #0]
 80a0a62:	4770      	bx	lr
 80a0a64:	080a1bee 	.word	0x080a1bee
 80a0a68:	20000118 	.word	0x20000118

080a0a6c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0a6c:	2300      	movs	r3, #0
 80a0a6e:	461a      	mov	r2, r3
 80a0a70:	6840      	ldr	r0, [r0, #4]
 80a0a72:	f7ff bec5 	b.w	80a0800 <network_connect>

080a0a76 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0a76:	2200      	movs	r2, #0
 80a0a78:	2102      	movs	r1, #2
 80a0a7a:	6840      	ldr	r0, [r0, #4]
 80a0a7c:	f7ff bed0 	b.w	80a0820 <network_disconnect>

080a0a80 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0a80:	2200      	movs	r2, #0
 80a0a82:	4611      	mov	r1, r2
 80a0a84:	6840      	ldr	r0, [r0, #4]
 80a0a86:	f7ff bec3 	b.w	80a0810 <network_connecting>

080a0a8a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0a8a:	2200      	movs	r2, #0
 80a0a8c:	4611      	mov	r1, r2
 80a0a8e:	6840      	ldr	r0, [r0, #4]
 80a0a90:	f7ff bece 	b.w	80a0830 <network_ready>

080a0a94 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0a94:	2300      	movs	r3, #0
 80a0a96:	461a      	mov	r2, r3
 80a0a98:	4619      	mov	r1, r3
 80a0a9a:	6840      	ldr	r0, [r0, #4]
 80a0a9c:	f7ff bed0 	b.w	80a0840 <network_on>

080a0aa0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0aa0:	2300      	movs	r3, #0
 80a0aa2:	461a      	mov	r2, r3
 80a0aa4:	4619      	mov	r1, r3
 80a0aa6:	6840      	ldr	r0, [r0, #4]
 80a0aa8:	f7ff bed2 	b.w	80a0850 <network_off>

080a0aac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0aac:	2200      	movs	r2, #0
 80a0aae:	f081 0101 	eor.w	r1, r1, #1
 80a0ab2:	6840      	ldr	r0, [r0, #4]
 80a0ab4:	f7ff bed4 	b.w	80a0860 <network_listen>

080a0ab8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0ab8:	2200      	movs	r2, #0
 80a0aba:	6840      	ldr	r0, [r0, #4]
 80a0abc:	f7ff bee0 	b.w	80a0880 <network_set_listen_timeout>

080a0ac0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0ac0:	2200      	movs	r2, #0
 80a0ac2:	4611      	mov	r1, r2
 80a0ac4:	6840      	ldr	r0, [r0, #4]
 80a0ac6:	f7ff bee3 	b.w	80a0890 <network_get_listen_timeout>

080a0aca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0aca:	2200      	movs	r2, #0
 80a0acc:	4611      	mov	r1, r2
 80a0ace:	6840      	ldr	r0, [r0, #4]
 80a0ad0:	f7ff bece 	b.w	80a0870 <network_listening>

080a0ad4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0ad4:	b570      	push	{r4, r5, r6, lr}
 80a0ad6:	4616      	mov	r6, r2
 80a0ad8:	b08e      	sub	sp, #56	; 0x38
 80a0ada:	4604      	mov	r4, r0
    IPAddress addr;
 80a0adc:	a808      	add	r0, sp, #32
 80a0ade:	f7ff ff6f 	bl	80a09c0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0ae2:	2211      	movs	r2, #17
 80a0ae4:	2100      	movs	r1, #0
 80a0ae6:	a803      	add	r0, sp, #12
 80a0ae8:	f000 ffbb 	bl	80a1a62 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0aec:	4630      	mov	r0, r6
 80a0aee:	f000 ffe9 	bl	80a1ac4 <strlen>
 80a0af2:	2500      	movs	r5, #0
 80a0af4:	4b0a      	ldr	r3, [pc, #40]	; (80a0b20 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0af6:	9500      	str	r5, [sp, #0]
 80a0af8:	b281      	uxth	r1, r0
 80a0afa:	685b      	ldr	r3, [r3, #4]
 80a0afc:	aa03      	add	r2, sp, #12
 80a0afe:	4630      	mov	r0, r6
 80a0b00:	f7ff fe3a 	bl	80a0778 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b04:	b120      	cbz	r0, 80a0b10 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0b06:	4629      	mov	r1, r5
 80a0b08:	4620      	mov	r0, r4
 80a0b0a:	f7ff ff79 	bl	80a0a00 <_ZN9IPAddressC1Em>
 80a0b0e:	e003      	b.n	80a0b18 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0b10:	a903      	add	r1, sp, #12
 80a0b12:	4620      	mov	r0, r4
 80a0b14:	f7ff ff62 	bl	80a09dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0b18:	4620      	mov	r0, r4
 80a0b1a:	b00e      	add	sp, #56	; 0x38
 80a0b1c:	bd70      	pop	{r4, r5, r6, pc}
 80a0b1e:	bf00      	nop
 80a0b20:	2000059c 	.word	0x2000059c

080a0b24 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0b24:	4b03      	ldr	r3, [pc, #12]	; (80a0b34 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0b26:	4a04      	ldr	r2, [pc, #16]	; (80a0b38 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0b28:	2804      	cmp	r0, #4
 80a0b2a:	bf0c      	ite	eq
 80a0b2c:	4610      	moveq	r0, r2
 80a0b2e:	4618      	movne	r0, r3
 80a0b30:	4770      	bx	lr
 80a0b32:	bf00      	nop
 80a0b34:	2000011c 	.word	0x2000011c
 80a0b38:	2000059c 	.word	0x2000059c

080a0b3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b3c:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0b3e:	4a03      	ldr	r2, [pc, #12]	; (80a0b4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0b40:	601a      	str	r2, [r3, #0]
 80a0b42:	2200      	movs	r2, #0
 80a0b44:	605a      	str	r2, [r3, #4]
 80a0b46:	4770      	bx	lr
 80a0b48:	2000011c 	.word	0x2000011c
 80a0b4c:	080a1c64 	.word	0x080a1c64

080a0b50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b52:	4606      	mov	r6, r0
 80a0b54:	460d      	mov	r5, r1
 80a0b56:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0b58:	2400      	movs	r4, #0
  while (size--) {
 80a0b5a:	42bd      	cmp	r5, r7
 80a0b5c:	d00c      	beq.n	80a0b78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0b5e:	6833      	ldr	r3, [r6, #0]
 80a0b60:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0b64:	689b      	ldr	r3, [r3, #8]
 80a0b66:	4630      	mov	r0, r6
 80a0b68:	4798      	blx	r3
     if (chunk>=0)
 80a0b6a:	2800      	cmp	r0, #0
 80a0b6c:	db01      	blt.n	80a0b72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0b6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0b70:	e7f3      	b.n	80a0b5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0b72:	2c00      	cmp	r4, #0
 80a0b74:	bf08      	it	eq
 80a0b76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0b78:	4620      	mov	r0, r4
 80a0b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0b7c:	b570      	push	{r4, r5, r6, lr}
 80a0b7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0b80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0b82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0b84:	b149      	cbz	r1, 80a0b9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0b86:	f000 ff9d 	bl	80a1ac4 <strlen>
 80a0b8a:	682b      	ldr	r3, [r5, #0]
 80a0b8c:	4602      	mov	r2, r0
 80a0b8e:	4621      	mov	r1, r4
 80a0b90:	4628      	mov	r0, r5
    }
 80a0b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0b96:	68db      	ldr	r3, [r3, #12]
 80a0b98:	4718      	bx	r3
    }
 80a0b9a:	bd70      	pop	{r4, r5, r6, pc}

080a0b9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0b9c:	6803      	ldr	r3, [r0, #0]
 80a0b9e:	689b      	ldr	r3, [r3, #8]
 80a0ba0:	4718      	bx	r3

080a0ba2 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a0ba2:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a0ba4:	680a      	ldr	r2, [r1, #0]
 80a0ba6:	4601      	mov	r1, r0
 80a0ba8:	6812      	ldr	r2, [r2, #0]
 80a0baa:	4618      	mov	r0, r3
 80a0bac:	4710      	bx	r2

080a0bae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0bae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0bb0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0bb2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0bb4:	f7ff fff2 	bl	80a0b9c <_ZN5Print5printEc>
  n += print('\n');
 80a0bb8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0bba:	4604      	mov	r4, r0
  n += print('\n');
 80a0bbc:	4628      	mov	r0, r5
 80a0bbe:	f7ff ffed 	bl	80a0b9c <_ZN5Print5printEc>
  return n;
}
 80a0bc2:	4420      	add	r0, r4
 80a0bc4:	bd38      	pop	{r3, r4, r5, pc}

080a0bc6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0bc6:	b538      	push	{r3, r4, r5, lr}
 80a0bc8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0bca:	f7ff ffd7 	bl	80a0b7c <_ZN5Print5writeEPKc>
 80a0bce:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0bd0:	4628      	mov	r0, r5
 80a0bd2:	f7ff ffec 	bl	80a0bae <_ZN5Print7printlnEv>
  return n;
}
 80a0bd6:	4420      	add	r0, r4
 80a0bd8:	bd38      	pop	{r3, r4, r5, pc}

080a0bda <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0bda:	b538      	push	{r3, r4, r5, lr}
 80a0bdc:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0bde:	f7ff ffe0 	bl	80a0ba2 <_ZN5Print5printERK9Printable>
 80a0be2:	4604      	mov	r4, r0
   n += println();
 80a0be4:	4628      	mov	r0, r5
 80a0be6:	f7ff ffe2 	bl	80a0bae <_ZN5Print7printlnEv>
   return n;
 }
 80a0bea:	4420      	add	r0, r4
 80a0bec:	bd38      	pop	{r3, r4, r5, pc}

080a0bee <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0bee:	2a01      	cmp	r2, #1
 80a0bf0:	bf98      	it	ls
 80a0bf2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0bf4:	b530      	push	{r4, r5, lr}
 80a0bf6:	460b      	mov	r3, r1
 80a0bf8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0bfa:	2100      	movs	r1, #0
 80a0bfc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0c00:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0c04:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0c08:	fb05 3312 	mls	r3, r5, r2, r3
 80a0c0c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c0e:	2b09      	cmp	r3, #9
 80a0c10:	bf94      	ite	ls
 80a0c12:	3330      	addls	r3, #48	; 0x30
 80a0c14:	3337      	addhi	r3, #55	; 0x37
 80a0c16:	b2db      	uxtb	r3, r3
 80a0c18:	4621      	mov	r1, r4
 80a0c1a:	f804 3901 	strb.w	r3, [r4], #-1
 80a0c1e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0c20:	2d00      	cmp	r5, #0
 80a0c22:	d1ef      	bne.n	80a0c04 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0c24:	f7ff ffaa 	bl	80a0b7c <_ZN5Print5writeEPKc>
}
 80a0c28:	b00b      	add	sp, #44	; 0x2c
 80a0c2a:	bd30      	pop	{r4, r5, pc}

080a0c2c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0c2c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0c2e:	b922      	cbnz	r2, 80a0c3a <_ZN5Print5printEmi+0xe>
 80a0c30:	6803      	ldr	r3, [r0, #0]
 80a0c32:	b2c9      	uxtb	r1, r1
 80a0c34:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0c36:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0c38:	4718      	bx	r3
  else return printNumber(n, base);
 80a0c3a:	b2d2      	uxtb	r2, r2
}
 80a0c3c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0c3e:	f7ff bfd6 	b.w	80a0bee <_ZN5Print11printNumberEmh>

080a0c42 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0c42:	f7ff bff3 	b.w	80a0c2c <_ZN5Print5printEmi>

080a0c46 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0c46:	b510      	push	{r4, lr}
 80a0c48:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c4a:	f7ff fe54 	bl	80a08f6 <_ZNSt14_Function_baseD1Ev>
 80a0c4e:	4620      	mov	r0, r4
 80a0c50:	bd10      	pop	{r4, pc}
	...

080a0c54 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c54:	4803      	ldr	r0, [pc, #12]	; (80a0c64 <_GLOBAL__sub_I_RGB+0x10>)
 80a0c56:	2300      	movs	r3, #0
 80a0c58:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0c5a:	4a03      	ldr	r2, [pc, #12]	; (80a0c68 <_GLOBAL__sub_I_RGB+0x14>)
 80a0c5c:	4903      	ldr	r1, [pc, #12]	; (80a0c6c <_GLOBAL__sub_I_RGB+0x18>)
 80a0c5e:	f000 bd97 	b.w	80a1790 <__aeabi_atexit>
 80a0c62:	bf00      	nop
 80a0c64:	20000124 	.word	0x20000124
 80a0c68:	20000090 	.word	0x20000090
 80a0c6c:	080a0c47 	.word	0x080a0c47

080a0c70 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0c70:	4770      	bx	lr

080a0c72 <_ZN8SPIClassD0Ev>:
 80a0c72:	b510      	push	{r4, lr}
 80a0c74:	4604      	mov	r4, r0
 80a0c76:	2110      	movs	r1, #16
 80a0c78:	f000 fd8f 	bl	80a179a <_ZdlPvj>
 80a0c7c:	4620      	mov	r0, r4
 80a0c7e:	bd10      	pop	{r4, pc}

080a0c80 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0c80:	b570      	push	{r4, r5, r6, lr}
 80a0c82:	4604      	mov	r4, r0
 80a0c84:	460e      	mov	r6, r1
 80a0c86:	4b07      	ldr	r3, [pc, #28]	; (80a0ca4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0c88:	2500      	movs	r5, #0
 80a0c8a:	6003      	str	r3, [r0, #0]
 80a0c8c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0c90:	f7ff fc38 	bl	80a0504 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0c94:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0c96:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0c98:	f7ff fcde 	bl	80a0658 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0c9c:	60a5      	str	r5, [r4, #8]
}
 80a0c9e:	4620      	mov	r0, r4
 80a0ca0:	bd70      	pop	{r4, r5, r6, pc}
 80a0ca2:	bf00      	nop
 80a0ca4:	080a1c98 	.word	0x080a1c98

080a0ca8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0ca8:	7900      	ldrb	r0, [r0, #4]
 80a0caa:	f7ff bcdd 	b.w	80a0668 <HAL_SPI_Is_Enabled>

080a0cae <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0cae:	b510      	push	{r4, lr}
 80a0cb0:	4604      	mov	r4, r0
{
	free(buffer);
 80a0cb2:	6800      	ldr	r0, [r0, #0]
 80a0cb4:	f7ff fe0c 	bl	80a08d0 <free>
}
 80a0cb8:	4620      	mov	r0, r4
 80a0cba:	bd10      	pop	{r4, pc}

080a0cbc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0cbc:	b510      	push	{r4, lr}
 80a0cbe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0cc0:	6800      	ldr	r0, [r0, #0]
 80a0cc2:	b108      	cbz	r0, 80a0cc8 <_ZN6String10invalidateEv+0xc>
 80a0cc4:	f7ff fe04 	bl	80a08d0 <free>
	buffer = NULL;
 80a0cc8:	2300      	movs	r3, #0
 80a0cca:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0ccc:	60a3      	str	r3, [r4, #8]
 80a0cce:	6063      	str	r3, [r4, #4]
 80a0cd0:	bd10      	pop	{r4, pc}

080a0cd2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0cd2:	b538      	push	{r3, r4, r5, lr}
 80a0cd4:	4604      	mov	r4, r0
 80a0cd6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0cd8:	6800      	ldr	r0, [r0, #0]
 80a0cda:	3101      	adds	r1, #1
 80a0cdc:	f7ff fe00 	bl	80a08e0 <realloc>
	if (newbuffer) {
 80a0ce0:	b110      	cbz	r0, 80a0ce8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0ce2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0ce6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0ce8:	bd38      	pop	{r3, r4, r5, pc}

080a0cea <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0cea:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0cec:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0cee:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0cf0:	b113      	cbz	r3, 80a0cf8 <_ZN6String7reserveEj+0xe>
 80a0cf2:	6843      	ldr	r3, [r0, #4]
 80a0cf4:	428b      	cmp	r3, r1
 80a0cf6:	d207      	bcs.n	80a0d08 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0cf8:	4620      	mov	r0, r4
 80a0cfa:	f7ff ffea 	bl	80a0cd2 <_ZN6String12changeBufferEj>
 80a0cfe:	b120      	cbz	r0, 80a0d0a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0d00:	68a3      	ldr	r3, [r4, #8]
 80a0d02:	b90b      	cbnz	r3, 80a0d08 <_ZN6String7reserveEj+0x1e>
 80a0d04:	6822      	ldr	r2, [r4, #0]
 80a0d06:	7013      	strb	r3, [r2, #0]
 80a0d08:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0d0a:	bd10      	pop	{r4, pc}

080a0d0c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d0c:	b570      	push	{r4, r5, r6, lr}
 80a0d0e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0d10:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d12:	4604      	mov	r4, r0
 80a0d14:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0d16:	f7ff ffe8 	bl	80a0cea <_ZN6String7reserveEj>
 80a0d1a:	b918      	cbnz	r0, 80a0d24 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0d1c:	4620      	mov	r0, r4
 80a0d1e:	f7ff ffcd 	bl	80a0cbc <_ZN6String10invalidateEv>
		return *this;
 80a0d22:	e009      	b.n	80a0d38 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0d24:	462a      	mov	r2, r5
 80a0d26:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0d28:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0d2a:	6820      	ldr	r0, [r4, #0]
 80a0d2c:	f000 fe8e 	bl	80a1a4c <memcpy>
	buffer[len] = 0;
 80a0d30:	6822      	ldr	r2, [r4, #0]
 80a0d32:	68a3      	ldr	r3, [r4, #8]
 80a0d34:	2100      	movs	r1, #0
 80a0d36:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0d38:	4620      	mov	r0, r4
 80a0d3a:	bd70      	pop	{r4, r5, r6, pc}

080a0d3c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0d3c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d3e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0d40:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d42:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0d44:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0d46:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0d48:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0d4a:	460d      	mov	r5, r1
 80a0d4c:	b139      	cbz	r1, 80a0d5e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0d4e:	4608      	mov	r0, r1
 80a0d50:	f000 feb8 	bl	80a1ac4 <strlen>
 80a0d54:	4629      	mov	r1, r5
 80a0d56:	4602      	mov	r2, r0
 80a0d58:	4620      	mov	r0, r4
 80a0d5a:	f7ff ffd7 	bl	80a0d0c <_ZN6String4copyEPKcj>
}
 80a0d5e:	4620      	mov	r0, r4
 80a0d60:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0d64 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0d68:	4b03      	ldr	r3, [pc, #12]	; (80a0d78 <_GLOBAL__sub_I_System+0x14>)
 80a0d6a:	2000      	movs	r0, #0
 80a0d6c:	7018      	strb	r0, [r3, #0]
 80a0d6e:	8058      	strh	r0, [r3, #2]
 80a0d70:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0d72:	f7ff bd09 	b.w	80a0788 <set_system_mode>
 80a0d76:	bf00      	nop
 80a0d78:	20000134 	.word	0x20000134

080a0d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0d7c:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0d7e:	681a      	ldr	r2, [r3, #0]
 80a0d80:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0d82:	601a      	str	r2, [r3, #0]
 80a0d84:	4770      	bx	lr
 80a0d86:	bf00      	nop
 80a0d88:	20000028 	.word	0x20000028
 80a0d8c:	2000013c 	.word	0x2000013c

080a0d90 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0d90:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0d92:	6804      	ldr	r4, [r0, #0]
 80a0d94:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0d96:	46a4      	mov	ip, r4
    }
 80a0d98:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0d9a:	4760      	bx	ip

080a0d9c <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0d9c:	6803      	ldr	r3, [r0, #0]
 80a0d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0da0:	4718      	bx	r3

080a0da2 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0da2:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0da4:	4770      	bx	lr

080a0da6 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0da6:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0da8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0daa:	1a10      	subs	r0, r2, r0
 80a0dac:	4770      	bx	lr

080a0dae <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0dae:	b513      	push	{r0, r1, r4, lr}
 80a0db0:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0db2:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0db4:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0db8:	68d4      	ldr	r4, [r2, #12]
 80a0dba:	4619      	mov	r1, r3
 80a0dbc:	2201      	movs	r2, #1
 80a0dbe:	47a0      	blx	r4
}
 80a0dc0:	b002      	add	sp, #8
 80a0dc2:	bd10      	pop	{r4, pc}

080a0dc4 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0dc4:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0dc6:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0dc8:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0dca:	691b      	ldr	r3, [r3, #16]
 80a0dcc:	4798      	blx	r3
 80a0dce:	b128      	cbz	r0, 80a0ddc <_ZN3UDP4readEv+0x18>
 80a0dd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0dd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0dd4:	1c59      	adds	r1, r3, #1
 80a0dd6:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0dd8:	5cd0      	ldrb	r0, [r2, r3]
 80a0dda:	bd10      	pop	{r4, pc}
 80a0ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0de0:	bd10      	pop	{r4, pc}

080a0de2 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0de2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0de4:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0de6:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0de8:	691b      	ldr	r3, [r3, #16]
 80a0dea:	4798      	blx	r3
 80a0dec:	b118      	cbz	r0, 80a0df6 <_ZN3UDP4peekEv+0x14>
 80a0dee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0df0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0df2:	5cd0      	ldrb	r0, [r2, r3]
 80a0df4:	bd10      	pop	{r4, pc}
 80a0df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0dfa:	bd10      	pop	{r4, pc}

080a0dfc <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0dfc:	4770      	bx	lr

080a0dfe <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0dfe:	4603      	mov	r3, r0
 80a0e00:	4608      	mov	r0, r1
 80a0e02:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0e04:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0e06:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0e08:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0e0a:	6803      	ldr	r3, [r0, #0]
 80a0e0c:	1a52      	subs	r2, r2, r1
 80a0e0e:	68db      	ldr	r3, [r3, #12]
 80a0e10:	4421      	add	r1, r4
}
 80a0e12:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0e14:	4718      	bx	r3

080a0e16 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0e16:	f1a0 0010 	sub.w	r0, r0, #16
 80a0e1a:	f7ff bff0 	b.w	80a0dfe <_ZNK3UDP7printToER5Print>

080a0e1e <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0e20:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0e22:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0e24:	460f      	mov	r7, r1
 80a0e26:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0e28:	f7ff fe7c 	bl	80a0b24 <_ZN5spark12NetworkClass4fromEm>
 80a0e2c:	6803      	ldr	r3, [r0, #0]
 80a0e2e:	68db      	ldr	r3, [r3, #12]
 80a0e30:	4798      	blx	r3
 80a0e32:	b1b8      	cbz	r0, 80a0e64 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0e34:	2102      	movs	r1, #2
 80a0e36:	463b      	mov	r3, r7
 80a0e38:	2211      	movs	r2, #17
 80a0e3a:	4608      	mov	r0, r1
 80a0e3c:	9600      	str	r6, [sp, #0]
 80a0e3e:	f7ff fbe3 	bl	80a0608 <socket_create>
 80a0e42:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0e44:	f7ff fbd8 	bl	80a05f8 <socket_handle_valid>
 80a0e48:	4604      	mov	r4, r0
 80a0e4a:	b130      	cbz	r0, 80a0e5a <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0e4c:	2300      	movs	r3, #0
 80a0e4e:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0e50:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0e52:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0e54:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0e56:	2001      	movs	r0, #1
 80a0e58:	e004      	b.n	80a0e64 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0e5a:	682b      	ldr	r3, [r5, #0]
 80a0e5c:	4628      	mov	r0, r5
 80a0e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e60:	4798      	blx	r3
            bound = false;
 80a0e62:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a0e64:	b003      	add	sp, #12
 80a0e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e68 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a0e68:	b538      	push	{r3, r4, r5, lr}
 80a0e6a:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0e6c:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0e6e:	f7ff fbeb 	bl	80a0648 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0e72:	4285      	cmp	r5, r0
 80a0e74:	d002      	beq.n	80a0e7c <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0e76:	6960      	ldr	r0, [r4, #20]
 80a0e78:	f7ff fbde 	bl	80a0638 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0e7c:	f7ff fbe4 	bl	80a0648 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0e80:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0e82:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0e84:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0e86:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0e88:	bd38      	pop	{r3, r4, r5, pc}

080a0e8a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0e8a:	b530      	push	{r4, r5, lr}
 80a0e8c:	b087      	sub	sp, #28
 80a0e8e:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a0e92:	2502      	movs	r5, #2
 80a0e94:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a0e98:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0e9c:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0e9e:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0ea0:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0ea4:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a0ea8:	799c      	ldrb	r4, [r3, #6]
 80a0eaa:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0eae:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0eb0:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0eb2:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0eb6:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a0eba:	2310      	movs	r3, #16
 80a0ebc:	9301      	str	r3, [sp, #4]
 80a0ebe:	ab02      	add	r3, sp, #8
 80a0ec0:	9300      	str	r3, [sp, #0]
 80a0ec2:	6940      	ldr	r0, [r0, #20]
 80a0ec4:	2300      	movs	r3, #0
 80a0ec6:	f7ff fbaf 	bl	80a0628 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a0eca:	b007      	add	sp, #28
 80a0ecc:	bd30      	pop	{r4, r5, pc}

080a0ece <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0ece:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0ed0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0ed2:	4605      	mov	r5, r0
 80a0ed4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0ed6:	b113      	cbz	r3, 80a0ede <_ZN3UDP5writeEPKhj+0x10>
 80a0ed8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a0eda:	1a24      	subs	r4, r4, r0
 80a0edc:	e000      	b.n	80a0ee0 <_ZN3UDP5writeEPKhj+0x12>
 80a0ede:	461c      	mov	r4, r3
 80a0ee0:	4294      	cmp	r4, r2
 80a0ee2:	bf28      	it	cs
 80a0ee4:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a0ee6:	4418      	add	r0, r3
 80a0ee8:	4622      	mov	r2, r4
 80a0eea:	f000 fdaf 	bl	80a1a4c <memcpy>
    _offset += size;
 80a0eee:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0ef0:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a0ef2:	4423      	add	r3, r4
 80a0ef4:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0ef6:	bd38      	pop	{r3, r4, r5, pc}

080a0ef8 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0ef8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a0efa:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0efc:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a0efe:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0f00:	460e      	mov	r6, r1
 80a0f02:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a0f04:	4798      	blx	r3
 80a0f06:	b188      	cbz	r0, 80a0f2c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a0f08:	6823      	ldr	r3, [r4, #0]
 80a0f0a:	4620      	mov	r0, r4
 80a0f0c:	691b      	ldr	r3, [r3, #16]
 80a0f0e:	4798      	blx	r3
 80a0f10:	4285      	cmp	r5, r0
 80a0f12:	bfa8      	it	ge
 80a0f14:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a0f16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0f18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0f1a:	462a      	mov	r2, r5
 80a0f1c:	4419      	add	r1, r3
 80a0f1e:	4630      	mov	r0, r6
 80a0f20:	f000 fd94 	bl	80a1a4c <memcpy>
      _offset += read;
 80a0f24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0f26:	442b      	add	r3, r5
 80a0f28:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a0f2a:	e001      	b.n	80a0f30 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a0f2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a0f30:	4628      	mov	r0, r5
 80a0f32:	bd70      	pop	{r4, r5, r6, pc}

080a0f34 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f36:	4604      	mov	r4, r0
 80a0f38:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0f3a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0f3c:	460d      	mov	r5, r1
 80a0f3e:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0f40:	f7ff fdf0 	bl	80a0b24 <_ZN5spark12NetworkClass4fromEm>
 80a0f44:	6803      	ldr	r3, [r0, #0]
 80a0f46:	68db      	ldr	r3, [r3, #12]
 80a0f48:	4798      	blx	r3
 80a0f4a:	b310      	cbz	r0, 80a0f92 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0f4c:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0f4e:	f7ff fb7b 	bl	80a0648 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0f52:	4287      	cmp	r7, r0
 80a0f54:	d01d      	beq.n	80a0f92 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0f56:	b1e5      	cbz	r5, 80a0f92 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a0f58:	ab08      	add	r3, sp, #32
 80a0f5a:	2210      	movs	r2, #16
 80a0f5c:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a0f60:	9301      	str	r3, [sp, #4]
 80a0f62:	eb0d 0302 	add.w	r3, sp, r2
 80a0f66:	9300      	str	r3, [sp, #0]
 80a0f68:	4629      	mov	r1, r5
 80a0f6a:	2300      	movs	r3, #0
 80a0f6c:	4632      	mov	r2, r6
 80a0f6e:	6960      	ldr	r0, [r4, #20]
 80a0f70:	f7ff fb52 	bl	80a0618 <socket_receivefrom>
        if (ret >= 0)
 80a0f74:	1e05      	subs	r5, r0, #0
 80a0f76:	db0e      	blt.n	80a0f96 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0f78:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a0f7c:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0f80:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0f82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0f86:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0f88:	f104 001c 	add.w	r0, r4, #28
 80a0f8c:	f7ff fd5a 	bl	80a0a44 <_ZN9IPAddressaSEPKh>
 80a0f90:	e001      	b.n	80a0f96 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a0f92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a0f96:	4628      	mov	r0, r5
 80a0f98:	b009      	add	sp, #36	; 0x24
 80a0f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f9c <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0fa0:	4606      	mov	r6, r0
 80a0fa2:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a0fa4:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0fa6:	460d      	mov	r5, r1
 80a0fa8:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a0faa:	f7ff fdbb 	bl	80a0b24 <_ZN5spark12NetworkClass4fromEm>
 80a0fae:	6803      	ldr	r3, [r0, #0]
 80a0fb0:	68db      	ldr	r3, [r3, #12]
 80a0fb2:	4798      	blx	r3
 80a0fb4:	b1f8      	cbz	r0, 80a0ff6 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a0fb6:	4628      	mov	r0, r5
 80a0fb8:	f000 fd84 	bl	80a1ac4 <strlen>
 80a0fbc:	2400      	movs	r4, #0
 80a0fbe:	b281      	uxth	r1, r0
 80a0fc0:	9400      	str	r4, [sp, #0]
 80a0fc2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a0fc4:	aa03      	add	r2, sp, #12
 80a0fc6:	4628      	mov	r0, r5
 80a0fc8:	f7ff fbd6 	bl	80a0778 <inet_gethostbyname>
 80a0fcc:	b990      	cbnz	r0, 80a0ff4 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a0fce:	a903      	add	r1, sp, #12
 80a0fd0:	a808      	add	r0, sp, #32
 80a0fd2:	f7ff fd03 	bl	80a09dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a0fd6:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0fd8:	ac0f      	add	r4, sp, #60	; 0x3c
 80a0fda:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a0fdc:	4b07      	ldr	r3, [pc, #28]	; (80a0ffc <_ZN3UDP11beginPacketEPKct+0x60>)
 80a0fde:	ad09      	add	r5, sp, #36	; 0x24
 80a0fe0:	930e      	str	r3, [sp, #56]	; 0x38
 80a0fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0fe6:	682b      	ldr	r3, [r5, #0]
 80a0fe8:	4642      	mov	r2, r8
 80a0fea:	7023      	strb	r3, [r4, #0]
 80a0fec:	a90e      	add	r1, sp, #56	; 0x38
 80a0fee:	4630      	mov	r0, r6
 80a0ff0:	47b8      	blx	r7
 80a0ff2:	e000      	b.n	80a0ff6 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a0ff4:	4620      	mov	r0, r4
}
 80a0ff6:	b014      	add	sp, #80	; 0x50
 80a0ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0ffc:	080a1b6c 	.word	0x080a1b6c

080a1000 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1000:	b570      	push	{r4, r5, r6, lr}
 80a1002:	4604      	mov	r4, r0
 80a1004:	4606      	mov	r6, r0
 80a1006:	4b05      	ldr	r3, [pc, #20]	; (80a101c <_ZN3UDP8remoteIPEv+0x1c>)
 80a1008:	f101 0520 	add.w	r5, r1, #32
 80a100c:	f844 3b04 	str.w	r3, [r4], #4
 80a1010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1014:	682b      	ldr	r3, [r5, #0]
 80a1016:	4630      	mov	r0, r6
 80a1018:	7023      	strb	r3, [r4, #0]
 80a101a:	bd70      	pop	{r4, r5, r6, pc}
 80a101c:	080a1b6c 	.word	0x080a1b6c

080a1020 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1020:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1022:	4694      	mov	ip, r2
 80a1024:	468e      	mov	lr, r1
 80a1026:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1028:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a102a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a102c:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a102e:	4a09      	ldr	r2, [pc, #36]	; (80a1054 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a1030:	ac03      	add	r4, sp, #12
 80a1032:	1d1d      	adds	r5, r3, #4
 80a1034:	9202      	str	r2, [sp, #8]
 80a1036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a103a:	682b      	ldr	r3, [r5, #0]
 80a103c:	4662      	mov	r2, ip
 80a103e:	7023      	strb	r3, [r4, #0]
 80a1040:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a1044:	4671      	mov	r1, lr
 80a1046:	9300      	str	r3, [sp, #0]
 80a1048:	4630      	mov	r0, r6
 80a104a:	ab02      	add	r3, sp, #8
 80a104c:	47b8      	blx	r7
    }
 80a104e:	b009      	add	sp, #36	; 0x24
 80a1050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1052:	bf00      	nop
 80a1054:	080a1b6c 	.word	0x080a1b6c

080a1058 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1058:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a105a:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a105c:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a105e:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1060:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1062:	4b0d      	ldr	r3, [pc, #52]	; (80a1098 <_ZN3UDP9endPacketEv+0x40>)
 80a1064:	ad03      	add	r5, sp, #12
 80a1066:	f100 0620 	add.w	r6, r0, #32
 80a106a:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a106e:	9302      	str	r3, [sp, #8]
 80a1070:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1074:	6833      	ldr	r3, [r6, #0]
 80a1076:	4672      	mov	r2, lr
 80a1078:	702b      	strb	r3, [r5, #0]
 80a107a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a107c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a107e:	9300      	str	r3, [sp, #0]
 80a1080:	4620      	mov	r0, r4
 80a1082:	ab02      	add	r3, sp, #8
 80a1084:	47b8      	blx	r7
 80a1086:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1088:	6823      	ldr	r3, [r4, #0]
 80a108a:	4620      	mov	r0, r4
 80a108c:	69db      	ldr	r3, [r3, #28]
 80a108e:	4798      	blx	r3
    return result;
}
 80a1090:	4628      	mov	r0, r5
 80a1092:	b009      	add	sp, #36	; 0x24
 80a1094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1096:	bf00      	nop
 80a1098:	080a1b6c 	.word	0x080a1b6c

080a109c <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a109c:	b538      	push	{r3, r4, r5, lr}
 80a109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10a2:	6083      	str	r3, [r0, #8]
 80a10a4:	4b0b      	ldr	r3, [pc, #44]	; (80a10d4 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a10a6:	2500      	movs	r5, #0
 80a10a8:	f103 0208 	add.w	r2, r3, #8
 80a10ac:	336c      	adds	r3, #108	; 0x6c
 80a10ae:	6002      	str	r2, [r0, #0]
 80a10b0:	6103      	str	r3, [r0, #16]
 80a10b2:	6045      	str	r5, [r0, #4]
 80a10b4:	4604      	mov	r4, r0
 80a10b6:	f7ff fac7 	bl	80a0648 <socket_handle_invalid>
 80a10ba:	6160      	str	r0, [r4, #20]
 80a10bc:	f104 001c 	add.w	r0, r4, #28
 80a10c0:	f7ff fc7e 	bl	80a09c0 <_ZN9IPAddressC1Ev>
 80a10c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a10c8:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a10ca:	8725      	strh	r5, [r4, #56]	; 0x38
 80a10cc:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a10ce:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	bd38      	pop	{r3, r4, r5, pc}
 80a10d4:	080a1ccc 	.word	0x080a1ccc

080a10d8 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a10d8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a10da:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a10de:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a10e0:	b123      	cbz	r3, 80a10ec <_ZN3UDP13releaseBufferEv+0x14>
 80a10e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a10e4:	b110      	cbz	r0, 80a10ec <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a10e6:	2101      	movs	r1, #1
 80a10e8:	f000 fb57 	bl	80a179a <_ZdlPvj>
    }
    _buffer = NULL;
 80a10ec:	2300      	movs	r3, #0
 80a10ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a10f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a10f4:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a10f6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a10f8:	8723      	strh	r3, [r4, #56]	; 0x38
 80a10fa:	bd10      	pop	{r4, pc}

080a10fc <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a10fc:	b570      	push	{r4, r5, r6, lr}
 80a10fe:	4604      	mov	r4, r0
 80a1100:	4616      	mov	r6, r2
 80a1102:	460d      	mov	r5, r1
    releaseBuffer();
 80a1104:	f7ff ffe8 	bl	80a10d8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1108:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a110a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a110c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a110e:	b93e      	cbnz	r6, 80a1120 <_ZN3UDP9setBufferEjPh+0x24>
 80a1110:	b135      	cbz	r5, 80a1120 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1112:	4628      	mov	r0, r5
 80a1114:	f7fe ffc1 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a1118:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a111a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a111c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1120:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1122:	b103      	cbz	r3, 80a1126 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1124:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1126:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1128:	3000      	adds	r0, #0
 80a112a:	bf18      	it	ne
 80a112c:	2001      	movne	r0, #1
 80a112e:	bd70      	pop	{r4, r5, r6, pc}

080a1130 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1132:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1134:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1136:	4605      	mov	r5, r0
 80a1138:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a113a:	b91a      	cbnz	r2, 80a1144 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a113c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a113e:	b109      	cbz	r1, 80a1144 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a1140:	f7ff ffdc 	bl	80a10fc <_ZN3UDP9setBufferEjPh>
 80a1144:	f105 0620 	add.w	r6, r5, #32
 80a1148:	3404      	adds	r4, #4
 80a114a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a114c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a114e:	6823      	ldr	r3, [r4, #0]
 80a1150:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1152:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a1154:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1156:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1158:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a115a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a115e <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a115e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a1160:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1162:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a1164:	b91a      	cbnz	r2, 80a116e <_ZN3UDP11parsePacketEm+0x10>
 80a1166:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1168:	b109      	cbz	r1, 80a116e <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a116a:	f7ff ffc7 	bl	80a10fc <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a116e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1170:	2300      	movs	r3, #0
 80a1172:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1174:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1176:	b141      	cbz	r1, 80a118a <_ZN3UDP11parsePacketEm+0x2c>
 80a1178:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a117a:	b132      	cbz	r2, 80a118a <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a117c:	6820      	ldr	r0, [r4, #0]
 80a117e:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a1180:	4620      	mov	r0, r4
 80a1182:	47a8      	blx	r5
        if (result>0) {
 80a1184:	2800      	cmp	r0, #0
            _total = result;
 80a1186:	bfc8      	it	gt
 80a1188:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a118a:	6823      	ldr	r3, [r4, #0]
 80a118c:	4620      	mov	r0, r4
}
 80a118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a1192:	691b      	ldr	r3, [r3, #16]
 80a1194:	4718      	bx	r3

080a1196 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1196:	4770      	bx	lr

080a1198 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1198:	7441      	strb	r1, [r0, #17]
 80a119a:	4770      	bx	lr

080a119c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a119c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a119e:	7c00      	ldrb	r0, [r0, #16]
 80a11a0:	f7ff faa2 	bl	80a06e8 <HAL_USART_Available_Data_For_Write>
}
 80a11a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a11a8:	bd08      	pop	{r3, pc}

080a11aa <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a11aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a11ac:	7c00      	ldrb	r0, [r0, #16]
 80a11ae:	f7ff fa73 	bl	80a0698 <HAL_USART_Available_Data>
}
 80a11b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a11b6:	bd08      	pop	{r3, pc}

080a11b8 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a11b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a11ba:	7c00      	ldrb	r0, [r0, #16]
 80a11bc:	f7ff fa7c 	bl	80a06b8 <HAL_USART_Peek_Data>
}
 80a11c0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a11c4:	bf28      	it	cs
 80a11c6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a11ca:	bd08      	pop	{r3, pc}

080a11cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a11cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a11ce:	7c00      	ldrb	r0, [r0, #16]
 80a11d0:	f7ff fa6a 	bl	80a06a8 <HAL_USART_Read_Data>
}
 80a11d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a11d8:	bf28      	it	cs
 80a11da:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a11de:	bd08      	pop	{r3, pc}

080a11e0 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a11e0:	7c00      	ldrb	r0, [r0, #16]
 80a11e2:	f7ff ba71 	b.w	80a06c8 <HAL_USART_Flush_Data>

080a11e6 <_ZN11USARTSerialD0Ev>:
 80a11e6:	b510      	push	{r4, lr}
 80a11e8:	4604      	mov	r4, r0
 80a11ea:	2114      	movs	r1, #20
 80a11ec:	f000 fad5 	bl	80a179a <_ZdlPvj>
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	bd10      	pop	{r4, pc}

080a11f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a11f4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a11f6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a11f8:	4604      	mov	r4, r0
 80a11fa:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a11fc:	b925      	cbnz	r5, 80a1208 <_ZN11USARTSerial5writeEh+0x14>
 80a11fe:	7c00      	ldrb	r0, [r0, #16]
 80a1200:	f7ff fa72 	bl	80a06e8 <HAL_USART_Available_Data_For_Write>
 80a1204:	2800      	cmp	r0, #0
 80a1206:	dd05      	ble.n	80a1214 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1208:	4631      	mov	r1, r6
 80a120a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a120c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1210:	f7ff ba3a 	b.w	80a0688 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1214:	4628      	mov	r0, r5
 80a1216:	bd70      	pop	{r4, r5, r6, pc}

080a1218 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1218:	b510      	push	{r4, lr}
 80a121a:	4604      	mov	r4, r0
 80a121c:	4608      	mov	r0, r1
 80a121e:	4611      	mov	r1, r2
 80a1220:	2200      	movs	r2, #0
 80a1222:	6062      	str	r2, [r4, #4]
 80a1224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1228:	60a2      	str	r2, [r4, #8]
 80a122a:	4a05      	ldr	r2, [pc, #20]	; (80a1240 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a122c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a122e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1230:	2201      	movs	r2, #1
 80a1232:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1234:	461a      	mov	r2, r3
 80a1236:	f7ff fa1f 	bl	80a0678 <HAL_USART_Init>
}
 80a123a:	4620      	mov	r0, r4
 80a123c:	bd10      	pop	{r4, pc}
 80a123e:	bf00      	nop
 80a1240:	080a1d44 	.word	0x080a1d44

080a1244 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1244:	7c00      	ldrb	r0, [r0, #16]
 80a1246:	f7ff ba47 	b.w	80a06d8 <HAL_USART_Is_Enabled>
	...

080a124c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a124c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a124e:	4d0c      	ldr	r5, [pc, #48]	; (80a1280 <_Z22__fetch_global_Serial1v+0x34>)
 80a1250:	6829      	ldr	r1, [r5, #0]
 80a1252:	f011 0401 	ands.w	r4, r1, #1
 80a1256:	d111      	bne.n	80a127c <_Z22__fetch_global_Serial1v+0x30>
 80a1258:	4628      	mov	r0, r5
 80a125a:	f7fe ff22 	bl	80a00a2 <__cxa_guard_acquire>
 80a125e:	b168      	cbz	r0, 80a127c <_Z22__fetch_global_Serial1v+0x30>
 80a1260:	4a08      	ldr	r2, [pc, #32]	; (80a1284 <_Z22__fetch_global_Serial1v+0x38>)
 80a1262:	4621      	mov	r1, r4
 80a1264:	4b08      	ldr	r3, [pc, #32]	; (80a1288 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1266:	4809      	ldr	r0, [pc, #36]	; (80a128c <_Z22__fetch_global_Serial1v+0x40>)
 80a1268:	f7ff ffd6 	bl	80a1218 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a126c:	4628      	mov	r0, r5
 80a126e:	f7fe ff1d 	bl	80a00ac <__cxa_guard_release>
 80a1272:	4a07      	ldr	r2, [pc, #28]	; (80a1290 <_Z22__fetch_global_Serial1v+0x44>)
 80a1274:	4907      	ldr	r1, [pc, #28]	; (80a1294 <_Z22__fetch_global_Serial1v+0x48>)
 80a1276:	4805      	ldr	r0, [pc, #20]	; (80a128c <_Z22__fetch_global_Serial1v+0x40>)
 80a1278:	f000 fa8a 	bl	80a1790 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a127c:	4803      	ldr	r0, [pc, #12]	; (80a128c <_Z22__fetch_global_Serial1v+0x40>)
 80a127e:	bd38      	pop	{r3, r4, r5, pc}
 80a1280:	200001d8 	.word	0x200001d8
 80a1284:	200001dc 	.word	0x200001dc
 80a1288:	20000154 	.word	0x20000154
 80a128c:	20000140 	.word	0x20000140
 80a1290:	20000090 	.word	0x20000090
 80a1294:	080a1197 	.word	0x080a1197

080a1298 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1298:	7441      	strb	r1, [r0, #17]
 80a129a:	4770      	bx	lr

080a129c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a129c:	4770      	bx	lr

080a129e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a129e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a12a0:	2100      	movs	r1, #0
 80a12a2:	7c00      	ldrb	r0, [r0, #16]
 80a12a4:	f7ff fa48 	bl	80a0738 <HAL_USB_USART_Receive_Data>
}
 80a12a8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12ac:	bf28      	it	cs
 80a12ae:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a12b2:	bd08      	pop	{r3, pc}

080a12b4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a12b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a12b6:	2101      	movs	r1, #1
 80a12b8:	7c00      	ldrb	r0, [r0, #16]
 80a12ba:	f7ff fa3d 	bl	80a0738 <HAL_USB_USART_Receive_Data>
}
 80a12be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12c2:	bf28      	it	cs
 80a12c4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a12c8:	bd08      	pop	{r3, pc}

080a12ca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a12ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a12cc:	7c00      	ldrb	r0, [r0, #16]
 80a12ce:	f7ff fa2b 	bl	80a0728 <HAL_USB_USART_Available_Data_For_Write>
}
 80a12d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12d6:	bd08      	pop	{r3, pc}

080a12d8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a12d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a12da:	7c00      	ldrb	r0, [r0, #16]
 80a12dc:	f7ff fa1c 	bl	80a0718 <HAL_USB_USART_Available_Data>
}
 80a12e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12e4:	bd08      	pop	{r3, pc}

080a12e6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a12e6:	7c00      	ldrb	r0, [r0, #16]
 80a12e8:	f7ff ba36 	b.w	80a0758 <HAL_USB_USART_Flush_Data>

080a12ec <_ZN9USBSerialD0Ev>:
 80a12ec:	b510      	push	{r4, lr}
 80a12ee:	4604      	mov	r4, r0
 80a12f0:	2114      	movs	r1, #20
 80a12f2:	f000 fa52 	bl	80a179a <_ZdlPvj>
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	bd10      	pop	{r4, pc}

080a12fa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a12fa:	b538      	push	{r3, r4, r5, lr}
 80a12fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a12fe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1300:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1302:	f7ff fa11 	bl	80a0728 <HAL_USB_USART_Available_Data_For_Write>
 80a1306:	2800      	cmp	r0, #0
 80a1308:	dc01      	bgt.n	80a130e <_ZN9USBSerial5writeEh+0x14>
 80a130a:	7c60      	ldrb	r0, [r4, #17]
 80a130c:	b128      	cbz	r0, 80a131a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a130e:	4629      	mov	r1, r5
 80a1310:	7c20      	ldrb	r0, [r4, #16]
 80a1312:	f7ff fa19 	bl	80a0748 <HAL_USB_USART_Send_Data>
 80a1316:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a131a:	bd38      	pop	{r3, r4, r5, pc}

080a131c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a131c:	b510      	push	{r4, lr}
 80a131e:	4604      	mov	r4, r0
 80a1320:	2300      	movs	r3, #0
 80a1322:	6063      	str	r3, [r4, #4]
 80a1324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1328:	60a3      	str	r3, [r4, #8]
 80a132a:	4b05      	ldr	r3, [pc, #20]	; (80a1340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a132c:	4608      	mov	r0, r1
 80a132e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1330:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1332:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1334:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1336:	4611      	mov	r1, r2
 80a1338:	f7ff f9de 	bl	80a06f8 <HAL_USB_USART_Init>
}
 80a133c:	4620      	mov	r0, r4
 80a133e:	bd10      	pop	{r4, pc}
 80a1340:	080a1d74 	.word	0x080a1d74

080a1344 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1344:	2200      	movs	r2, #0
 80a1346:	7c00      	ldrb	r0, [r0, #16]
 80a1348:	f7ff b9de 	b.w	80a0708 <HAL_USB_USART_Begin>

080a134c <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a134c:	7c00      	ldrb	r0, [r0, #16]
 80a134e:	f7ff ba0b 	b.w	80a0768 <HAL_USB_USART_Is_Enabled>

080a1352 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a1352:	f7ff bffb 	b.w	80a134c <_ZN9USBSerial9isEnabledEv>
	...

080a1358 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1358:	b510      	push	{r4, lr}
 80a135a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a135c:	2214      	movs	r2, #20
 80a135e:	2100      	movs	r1, #0
 80a1360:	f000 fb7f 	bl	80a1a62 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1364:	4b05      	ldr	r3, [pc, #20]	; (80a137c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1366:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1368:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a136a:	4b05      	ldr	r3, [pc, #20]	; (80a1380 <_Z19acquireSerialBufferv+0x28>)
 80a136c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a136e:	f240 1301 	movw	r3, #257	; 0x101
 80a1372:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1374:	2381      	movs	r3, #129	; 0x81
 80a1376:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1378:	bd10      	pop	{r4, pc}
 80a137a:	bf00      	nop
 80a137c:	200002e5 	.word	0x200002e5
 80a1380:	20000264 	.word	0x20000264

080a1384 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1384:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1386:	4d0e      	ldr	r5, [pc, #56]	; (80a13c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1388:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a138a:	a801      	add	r0, sp, #4
 80a138c:	f7ff ffe4 	bl	80a1358 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1390:	6829      	ldr	r1, [r5, #0]
 80a1392:	f011 0401 	ands.w	r4, r1, #1
 80a1396:	d110      	bne.n	80a13ba <_Z16_fetch_usbserialv+0x36>
 80a1398:	4628      	mov	r0, r5
 80a139a:	f7fe fe82 	bl	80a00a2 <__cxa_guard_acquire>
 80a139e:	b160      	cbz	r0, 80a13ba <_Z16_fetch_usbserialv+0x36>
 80a13a0:	aa01      	add	r2, sp, #4
 80a13a2:	4621      	mov	r1, r4
 80a13a4:	4807      	ldr	r0, [pc, #28]	; (80a13c4 <_Z16_fetch_usbserialv+0x40>)
 80a13a6:	f7ff ffb9 	bl	80a131c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a13aa:	4628      	mov	r0, r5
 80a13ac:	f7fe fe7e 	bl	80a00ac <__cxa_guard_release>
 80a13b0:	4a05      	ldr	r2, [pc, #20]	; (80a13c8 <_Z16_fetch_usbserialv+0x44>)
 80a13b2:	4906      	ldr	r1, [pc, #24]	; (80a13cc <_Z16_fetch_usbserialv+0x48>)
 80a13b4:	4803      	ldr	r0, [pc, #12]	; (80a13c4 <_Z16_fetch_usbserialv+0x40>)
 80a13b6:	f000 f9eb 	bl	80a1790 <__aeabi_atexit>
	return _usbserial;
}
 80a13ba:	4802      	ldr	r0, [pc, #8]	; (80a13c4 <_Z16_fetch_usbserialv+0x40>)
 80a13bc:	b007      	add	sp, #28
 80a13be:	bd30      	pop	{r4, r5, pc}
 80a13c0:	20000260 	.word	0x20000260
 80a13c4:	200003e8 	.word	0x200003e8
 80a13c8:	20000090 	.word	0x20000090
 80a13cc:	080a129d 	.word	0x080a129d

080a13d0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a13d0:	b510      	push	{r4, lr}
 80a13d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a13d4:	2214      	movs	r2, #20
 80a13d6:	2100      	movs	r1, #0
 80a13d8:	f000 fb43 	bl	80a1a62 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a13dc:	4b05      	ldr	r3, [pc, #20]	; (80a13f4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a13de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a13e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a13e2:	4b05      	ldr	r3, [pc, #20]	; (80a13f8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a13e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a13e6:	f240 1301 	movw	r3, #257	; 0x101
 80a13ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a13ec:	2381      	movs	r3, #129	; 0x81
 80a13ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a13f0:	bd10      	pop	{r4, pc}
 80a13f2:	bf00      	nop
 80a13f4:	20000498 	.word	0x20000498
 80a13f8:	20000400 	.word	0x20000400

080a13fc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a13fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a13fe:	4c0e      	ldr	r4, [pc, #56]	; (80a1438 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1400:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1402:	a801      	add	r0, sp, #4
 80a1404:	f7ff ffe4 	bl	80a13d0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1408:	6823      	ldr	r3, [r4, #0]
 80a140a:	07db      	lsls	r3, r3, #31
 80a140c:	d410      	bmi.n	80a1430 <_Z17_fetch_usbserial1v+0x34>
 80a140e:	4620      	mov	r0, r4
 80a1410:	f7fe fe47 	bl	80a00a2 <__cxa_guard_acquire>
 80a1414:	b160      	cbz	r0, 80a1430 <_Z17_fetch_usbserial1v+0x34>
 80a1416:	aa01      	add	r2, sp, #4
 80a1418:	2101      	movs	r1, #1
 80a141a:	4808      	ldr	r0, [pc, #32]	; (80a143c <_Z17_fetch_usbserial1v+0x40>)
 80a141c:	f7ff ff7e 	bl	80a131c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1420:	4620      	mov	r0, r4
 80a1422:	f7fe fe43 	bl	80a00ac <__cxa_guard_release>
 80a1426:	4a06      	ldr	r2, [pc, #24]	; (80a1440 <_Z17_fetch_usbserial1v+0x44>)
 80a1428:	4906      	ldr	r1, [pc, #24]	; (80a1444 <_Z17_fetch_usbserial1v+0x48>)
 80a142a:	4804      	ldr	r0, [pc, #16]	; (80a143c <_Z17_fetch_usbserial1v+0x40>)
 80a142c:	f000 f9b0 	bl	80a1790 <__aeabi_atexit>
  return _usbserial1;
}
 80a1430:	4802      	ldr	r0, [pc, #8]	; (80a143c <_Z17_fetch_usbserial1v+0x40>)
 80a1432:	b006      	add	sp, #24
 80a1434:	bd10      	pop	{r4, pc}
 80a1436:	bf00      	nop
 80a1438:	200003fc 	.word	0x200003fc
 80a143c:	20000484 	.word	0x20000484
 80a1440:	20000090 	.word	0x20000090
 80a1444:	080a129d 	.word	0x080a129d

080a1448 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1448:	2200      	movs	r2, #0
 80a144a:	4611      	mov	r1, r2
 80a144c:	6840      	ldr	r0, [r0, #4]
 80a144e:	f7ff b9ef 	b.w	80a0830 <network_ready>

080a1452 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1452:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1454:	4616      	mov	r6, r2
 80a1456:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1458:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a145a:	460f      	mov	r7, r1
 80a145c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a145e:	2100      	movs	r1, #0
 80a1460:	a803      	add	r0, sp, #12
 80a1462:	f000 fafe 	bl	80a1a62 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1466:	4630      	mov	r0, r6
 80a1468:	f000 fb2c 	bl	80a1ac4 <strlen>
 80a146c:	2500      	movs	r5, #0
 80a146e:	9500      	str	r5, [sp, #0]
 80a1470:	b281      	uxth	r1, r0
 80a1472:	687b      	ldr	r3, [r7, #4]
 80a1474:	aa03      	add	r2, sp, #12
 80a1476:	4630      	mov	r0, r6
 80a1478:	f7ff f97e 	bl	80a0778 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a147c:	b120      	cbz	r0, 80a1488 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a147e:	4629      	mov	r1, r5
 80a1480:	4620      	mov	r0, r4
 80a1482:	f7ff fabd 	bl	80a0a00 <_ZN9IPAddressC1Em>
 80a1486:	e003      	b.n	80a1490 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1488:	a903      	add	r1, sp, #12
 80a148a:	4620      	mov	r0, r4
 80a148c:	f7ff faa6 	bl	80a09dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1490:	4620      	mov	r0, r4
 80a1492:	b009      	add	sp, #36	; 0x24
 80a1494:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1496 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1496:	2200      	movs	r2, #0
 80a1498:	4611      	mov	r1, r2
 80a149a:	6840      	ldr	r0, [r0, #4]
 80a149c:	f7ff b9e8 	b.w	80a0870 <network_listening>

080a14a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a14a0:	2200      	movs	r2, #0
 80a14a2:	4611      	mov	r1, r2
 80a14a4:	6840      	ldr	r0, [r0, #4]
 80a14a6:	f7ff b9f3 	b.w	80a0890 <network_get_listen_timeout>

080a14aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a14aa:	2200      	movs	r2, #0
 80a14ac:	6840      	ldr	r0, [r0, #4]
 80a14ae:	f7ff b9e7 	b.w	80a0880 <network_set_listen_timeout>

080a14b2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a14b2:	2200      	movs	r2, #0
 80a14b4:	f081 0101 	eor.w	r1, r1, #1
 80a14b8:	6840      	ldr	r0, [r0, #4]
 80a14ba:	f7ff b9d1 	b.w	80a0860 <network_listen>

080a14be <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a14be:	2300      	movs	r3, #0
 80a14c0:	461a      	mov	r2, r3
 80a14c2:	4619      	mov	r1, r3
 80a14c4:	6840      	ldr	r0, [r0, #4]
 80a14c6:	f7ff b9c3 	b.w	80a0850 <network_off>

080a14ca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a14ca:	2300      	movs	r3, #0
 80a14cc:	461a      	mov	r2, r3
 80a14ce:	4619      	mov	r1, r3
 80a14d0:	6840      	ldr	r0, [r0, #4]
 80a14d2:	f7ff b9b5 	b.w	80a0840 <network_on>

080a14d6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a14d6:	2200      	movs	r2, #0
 80a14d8:	4611      	mov	r1, r2
 80a14da:	6840      	ldr	r0, [r0, #4]
 80a14dc:	f7ff b998 	b.w	80a0810 <network_connecting>

080a14e0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a14e0:	2200      	movs	r2, #0
 80a14e2:	2102      	movs	r1, #2
 80a14e4:	6840      	ldr	r0, [r0, #4]
 80a14e6:	f7ff b99b 	b.w	80a0820 <network_disconnect>

080a14ea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a14ea:	2300      	movs	r3, #0
 80a14ec:	461a      	mov	r2, r3
 80a14ee:	6840      	ldr	r0, [r0, #4]
 80a14f0:	f7ff b986 	b.w	80a0800 <network_connect>

080a14f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a14f4:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a14f6:	2204      	movs	r2, #4
 80a14f8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a14fa:	4a02      	ldr	r2, [pc, #8]	; (80a1504 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a14fc:	601a      	str	r2, [r3, #0]
 80a14fe:	4770      	bx	lr
 80a1500:	2000059c 	.word	0x2000059c
 80a1504:	080a1da4 	.word	0x080a1da4

080a1508 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1508:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a150a:	4b14      	ldr	r3, [pc, #80]	; (80a155c <serialEventRun+0x54>)
 80a150c:	b133      	cbz	r3, 80a151c <serialEventRun+0x14>
 80a150e:	f7ff ff39 	bl	80a1384 <_Z16_fetch_usbserialv>
 80a1512:	6803      	ldr	r3, [r0, #0]
 80a1514:	691b      	ldr	r3, [r3, #16]
 80a1516:	4798      	blx	r3
 80a1518:	2800      	cmp	r0, #0
 80a151a:	dc16      	bgt.n	80a154a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a151c:	4b10      	ldr	r3, [pc, #64]	; (80a1560 <serialEventRun+0x58>)
 80a151e:	b133      	cbz	r3, 80a152e <serialEventRun+0x26>
 80a1520:	f7ff fe94 	bl	80a124c <_Z22__fetch_global_Serial1v>
 80a1524:	6803      	ldr	r3, [r0, #0]
 80a1526:	691b      	ldr	r3, [r3, #16]
 80a1528:	4798      	blx	r3
 80a152a:	2800      	cmp	r0, #0
 80a152c:	dc10      	bgt.n	80a1550 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a152e:	4b0d      	ldr	r3, [pc, #52]	; (80a1564 <serialEventRun+0x5c>)
 80a1530:	b10b      	cbz	r3, 80a1536 <serialEventRun+0x2e>
 80a1532:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1536:	4b0c      	ldr	r3, [pc, #48]	; (80a1568 <serialEventRun+0x60>)
 80a1538:	b17b      	cbz	r3, 80a155a <serialEventRun+0x52>
 80a153a:	f7ff ff5f 	bl	80a13fc <_Z17_fetch_usbserial1v>
 80a153e:	6803      	ldr	r3, [r0, #0]
 80a1540:	691b      	ldr	r3, [r3, #16]
 80a1542:	4798      	blx	r3
 80a1544:	2800      	cmp	r0, #0
 80a1546:	dc06      	bgt.n	80a1556 <serialEventRun+0x4e>
 80a1548:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a154a:	f3af 8000 	nop.w
 80a154e:	e7e5      	b.n	80a151c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1550:	f3af 8000 	nop.w
 80a1554:	e7eb      	b.n	80a152e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1556:	f3af 8000 	nop.w
 80a155a:	bd08      	pop	{r3, pc}
	...

080a156c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a156c:	b508      	push	{r3, lr}
	serialEventRun();
 80a156e:	f7ff ffcb 	bl	80a1508 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1572:	f7fe ffdf 	bl	80a0534 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1576:	4b01      	ldr	r3, [pc, #4]	; (80a157c <_post_loop+0x10>)
 80a1578:	6018      	str	r0, [r3, #0]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	200005ac 	.word	0x200005ac

080a1580 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1580:	4802      	ldr	r0, [pc, #8]	; (80a158c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1582:	4a03      	ldr	r2, [pc, #12]	; (80a1590 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1584:	4903      	ldr	r1, [pc, #12]	; (80a1594 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1586:	1a12      	subs	r2, r2, r0
 80a1588:	f000 ba60 	b.w	80a1a4c <memcpy>
 80a158c:	40024000 	.word	0x40024000
 80a1590:	40024004 	.word	0x40024004
 80a1594:	080a1e70 	.word	0x080a1e70

080a1598 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1598:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a159a:	2300      	movs	r3, #0
 80a159c:	9300      	str	r3, [sp, #0]
 80a159e:	461a      	mov	r2, r3
 80a15a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a15a4:	f7ff f912 	bl	80a07cc <system_ctrl_set_result>
}
 80a15a8:	b003      	add	sp, #12
 80a15aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a15b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a15b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a15b2:	8843      	ldrh	r3, [r0, #2]
 80a15b4:	2b0a      	cmp	r3, #10
 80a15b6:	d008      	beq.n	80a15ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a15b8:	2b50      	cmp	r3, #80	; 0x50
 80a15ba:	d109      	bne.n	80a15d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a15bc:	4b09      	ldr	r3, [pc, #36]	; (80a15e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a15be:	681b      	ldr	r3, [r3, #0]
 80a15c0:	b13b      	cbz	r3, 80a15d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a15c2:	b003      	add	sp, #12
 80a15c4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a15c8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a15ca:	f7ff ffe5 	bl	80a1598 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a15ce:	e006      	b.n	80a15de <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a15d0:	2300      	movs	r3, #0
 80a15d2:	9300      	str	r3, [sp, #0]
 80a15d4:	461a      	mov	r2, r3
 80a15d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a15da:	f7ff f8f7 	bl	80a07cc <system_ctrl_set_result>
        break;
    }
}
 80a15de:	b003      	add	sp, #12
 80a15e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a15e4:	200005a4 	.word	0x200005a4

080a15e8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a15e8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a15ea:	4c10      	ldr	r4, [pc, #64]	; (80a162c <module_user_init_hook+0x44>)
 80a15ec:	4d10      	ldr	r5, [pc, #64]	; (80a1630 <module_user_init_hook+0x48>)
 80a15ee:	6823      	ldr	r3, [r4, #0]
 80a15f0:	42ab      	cmp	r3, r5
 80a15f2:	4b10      	ldr	r3, [pc, #64]	; (80a1634 <module_user_init_hook+0x4c>)
 80a15f4:	bf0c      	ite	eq
 80a15f6:	2201      	moveq	r2, #1
 80a15f8:	2200      	movne	r2, #0
 80a15fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a15fc:	d002      	beq.n	80a1604 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a15fe:	f7ff ffbf 	bl	80a1580 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1602:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1604:	f7fe ff86 	bl	80a0514 <HAL_RNG_GetRandomNumber>
 80a1608:	4604      	mov	r4, r0
    srand(seed);
 80a160a:	f000 fa33 	bl	80a1a74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a160e:	4b0a      	ldr	r3, [pc, #40]	; (80a1638 <module_user_init_hook+0x50>)
 80a1610:	b113      	cbz	r3, 80a1618 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1612:	4620      	mov	r0, r4
 80a1614:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1618:	2100      	movs	r1, #0
 80a161a:	4807      	ldr	r0, [pc, #28]	; (80a1638 <module_user_init_hook+0x50>)
 80a161c:	f7ff f8e0 	bl	80a07e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1624:	2100      	movs	r1, #0
 80a1626:	4805      	ldr	r0, [pc, #20]	; (80a163c <module_user_init_hook+0x54>)
 80a1628:	f7ff b8c6 	b.w	80a07b8 <system_ctrl_set_app_request_handler>
 80a162c:	40024000 	.word	0x40024000
 80a1630:	9a271c1e 	.word	0x9a271c1e
 80a1634:	200005a8 	.word	0x200005a8
 80a1638:	00000000 	.word	0x00000000
 80a163c:	080a15b1 	.word	0x080a15b1

080a1640 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1640:	b510      	push	{r4, lr}
 80a1642:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1644:	480f      	ldr	r0, [pc, #60]	; (80a1684 <pinAvailable+0x44>)
 80a1646:	f7ff fb2f 	bl	80a0ca8 <_ZN8SPIClass9isEnabledEv>
 80a164a:	b128      	cbz	r0, 80a1658 <pinAvailable+0x18>
 80a164c:	f1a4 030d 	sub.w	r3, r4, #13
 80a1650:	2b02      	cmp	r3, #2
 80a1652:	d801      	bhi.n	80a1658 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1654:	2000      	movs	r0, #0
 80a1656:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1658:	f000 f840 	bl	80a16dc <_Z19__fetch_global_Wirev>
 80a165c:	f7ff f992 	bl	80a0984 <_ZN7TwoWire9isEnabledEv>
 80a1660:	b108      	cbz	r0, 80a1666 <pinAvailable+0x26>
 80a1662:	2c01      	cmp	r4, #1
 80a1664:	d9f6      	bls.n	80a1654 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1666:	f7ff fdf1 	bl	80a124c <_Z22__fetch_global_Serial1v>
 80a166a:	f7ff fdeb 	bl	80a1244 <_ZN11USARTSerial9isEnabledEv>
 80a166e:	b118      	cbz	r0, 80a1678 <pinAvailable+0x38>
 80a1670:	f1a4 0312 	sub.w	r3, r4, #18
 80a1674:	2b01      	cmp	r3, #1
 80a1676:	d9ed      	bls.n	80a1654 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1678:	2c17      	cmp	r4, #23
 80a167a:	bf8c      	ite	hi
 80a167c:	2000      	movhi	r0, #0
 80a167e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1680:	bd10      	pop	{r4, pc}
 80a1682:	bf00      	nop
 80a1684:	200005e0 	.word	0x200005e0

080a1688 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1688:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a168a:	b538      	push	{r3, r4, r5, lr}
 80a168c:	4604      	mov	r4, r0
 80a168e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1690:	d80a      	bhi.n	80a16a8 <pinMode+0x20>
 80a1692:	29ff      	cmp	r1, #255	; 0xff
 80a1694:	d008      	beq.n	80a16a8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1696:	f7ff ffd3 	bl	80a1640 <pinAvailable>
 80a169a:	b128      	cbz	r0, 80a16a8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a169c:	4629      	mov	r1, r5
 80a169e:	4620      	mov	r0, r4
}
 80a16a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a16a4:	f7fe bf56 	b.w	80a0554 <HAL_Pin_Mode>
 80a16a8:	bd38      	pop	{r3, r4, r5, pc}

080a16aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a16aa:	b538      	push	{r3, r4, r5, lr}
 80a16ac:	4604      	mov	r4, r0
 80a16ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a16b0:	f7fe ff58 	bl	80a0564 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a16b4:	28ff      	cmp	r0, #255	; 0xff
 80a16b6:	d010      	beq.n	80a16da <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a16b8:	2806      	cmp	r0, #6
 80a16ba:	d804      	bhi.n	80a16c6 <digitalWrite+0x1c>
 80a16bc:	234d      	movs	r3, #77	; 0x4d
 80a16be:	fa23 f000 	lsr.w	r0, r3, r0
 80a16c2:	07c3      	lsls	r3, r0, #31
 80a16c4:	d409      	bmi.n	80a16da <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a16c6:	4620      	mov	r0, r4
 80a16c8:	f7ff ffba 	bl	80a1640 <pinAvailable>
 80a16cc:	b128      	cbz	r0, 80a16da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a16ce:	4629      	mov	r1, r5
 80a16d0:	4620      	mov	r0, r4
}
 80a16d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a16d6:	f7fe bf4d 	b.w	80a0574 <HAL_GPIO_Write>
 80a16da:	bd38      	pop	{r3, r4, r5, pc}

080a16dc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a16dc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a16de:	4d0b      	ldr	r5, [pc, #44]	; (80a170c <_Z19__fetch_global_Wirev+0x30>)
 80a16e0:	6829      	ldr	r1, [r5, #0]
 80a16e2:	f011 0401 	ands.w	r4, r1, #1
 80a16e6:	d10f      	bne.n	80a1708 <_Z19__fetch_global_Wirev+0x2c>
 80a16e8:	4628      	mov	r0, r5
 80a16ea:	f7fe fcda 	bl	80a00a2 <__cxa_guard_acquire>
 80a16ee:	b158      	cbz	r0, 80a1708 <_Z19__fetch_global_Wirev+0x2c>
 80a16f0:	4621      	mov	r1, r4
 80a16f2:	4807      	ldr	r0, [pc, #28]	; (80a1710 <_Z19__fetch_global_Wirev+0x34>)
 80a16f4:	f7ff f934 	bl	80a0960 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a16f8:	4628      	mov	r0, r5
 80a16fa:	f7fe fcd7 	bl	80a00ac <__cxa_guard_release>
 80a16fe:	4a05      	ldr	r2, [pc, #20]	; (80a1714 <_Z19__fetch_global_Wirev+0x38>)
 80a1700:	4905      	ldr	r1, [pc, #20]	; (80a1718 <_Z19__fetch_global_Wirev+0x3c>)
 80a1702:	4803      	ldr	r0, [pc, #12]	; (80a1710 <_Z19__fetch_global_Wirev+0x34>)
 80a1704:	f000 f844 	bl	80a1790 <__aeabi_atexit>
	return wire;
}
 80a1708:	4801      	ldr	r0, [pc, #4]	; (80a1710 <_Z19__fetch_global_Wirev+0x34>)
 80a170a:	bd38      	pop	{r3, r4, r5, pc}
 80a170c:	200005b0 	.word	0x200005b0
 80a1710:	200005b4 	.word	0x200005b4
 80a1714:	20000090 	.word	0x20000090
 80a1718:	080a0909 	.word	0x080a0909

080a171c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a171c:	b513      	push	{r0, r1, r4, lr}
 80a171e:	4c08      	ldr	r4, [pc, #32]	; (80a1740 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1720:	2300      	movs	r3, #0
 80a1722:	461a      	mov	r2, r3
 80a1724:	4619      	mov	r1, r3
 80a1726:	9300      	str	r3, [sp, #0]
 80a1728:	4620      	mov	r0, r4
 80a172a:	f7ff f97f 	bl	80a0a2c <_ZN9IPAddressC1Ehhhh>
 80a172e:	4620      	mov	r0, r4
 80a1730:	4a04      	ldr	r2, [pc, #16]	; (80a1744 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1732:	4905      	ldr	r1, [pc, #20]	; (80a1748 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1734:	b002      	add	sp, #8
 80a1736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a173a:	f000 b829 	b.w	80a1790 <__aeabi_atexit>
 80a173e:	bf00      	nop
 80a1740:	200005c8 	.word	0x200005c8
 80a1744:	20000090 	.word	0x20000090
 80a1748:	080a00b3 	.word	0x080a00b3

080a174c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a174c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a174e:	4c0c      	ldr	r4, [pc, #48]	; (80a1780 <_GLOBAL__sub_I_SPI+0x34>)
 80a1750:	4e0c      	ldr	r6, [pc, #48]	; (80a1784 <_GLOBAL__sub_I_SPI+0x38>)
 80a1752:	4d0d      	ldr	r5, [pc, #52]	; (80a1788 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1754:	2100      	movs	r1, #0
 80a1756:	4620      	mov	r0, r4
 80a1758:	f7ff fa92 	bl	80a0c80 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a175c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a175e:	4c0b      	ldr	r4, [pc, #44]	; (80a178c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1760:	4632      	mov	r2, r6
 80a1762:	4629      	mov	r1, r5
 80a1764:	f000 f814 	bl	80a1790 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1768:	2101      	movs	r1, #1
 80a176a:	4620      	mov	r0, r4
 80a176c:	f7ff fa88 	bl	80a0c80 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1770:	4632      	mov	r2, r6
 80a1772:	4629      	mov	r1, r5
 80a1774:	4620      	mov	r0, r4
 80a1776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a177a:	f000 b809 	b.w	80a1790 <__aeabi_atexit>
 80a177e:	bf00      	nop
 80a1780:	200005e0 	.word	0x200005e0
 80a1784:	20000090 	.word	0x20000090
 80a1788:	080a0c71 	.word	0x080a0c71
 80a178c:	200005f0 	.word	0x200005f0

080a1790 <__aeabi_atexit>:
 80a1790:	460b      	mov	r3, r1
 80a1792:	4601      	mov	r1, r0
 80a1794:	4618      	mov	r0, r3
 80a1796:	f000 b94b 	b.w	80a1a30 <__cxa_atexit>

080a179a <_ZdlPvj>:
 80a179a:	f7fe bc80 	b.w	80a009e <_ZdlPv>
	...

080a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a17a0:	4b24      	ldr	r3, [pc, #144]	; (80a1834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a17a2:	681a      	ldr	r2, [r3, #0]
 80a17a4:	07d0      	lsls	r0, r2, #31
 80a17a6:	bf5c      	itt	pl
 80a17a8:	2201      	movpl	r2, #1
 80a17aa:	601a      	strpl	r2, [r3, #0]
 80a17ac:	4b22      	ldr	r3, [pc, #136]	; (80a1838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a17ae:	681a      	ldr	r2, [r3, #0]
 80a17b0:	07d1      	lsls	r1, r2, #31
 80a17b2:	bf5c      	itt	pl
 80a17b4:	2201      	movpl	r2, #1
 80a17b6:	601a      	strpl	r2, [r3, #0]
 80a17b8:	4b20      	ldr	r3, [pc, #128]	; (80a183c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a17ba:	681a      	ldr	r2, [r3, #0]
 80a17bc:	07d2      	lsls	r2, r2, #31
 80a17be:	bf5c      	itt	pl
 80a17c0:	2201      	movpl	r2, #1
 80a17c2:	601a      	strpl	r2, [r3, #0]
 80a17c4:	4b1e      	ldr	r3, [pc, #120]	; (80a1840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a17c6:	681a      	ldr	r2, [r3, #0]
 80a17c8:	07d0      	lsls	r0, r2, #31
 80a17ca:	bf5c      	itt	pl
 80a17cc:	2201      	movpl	r2, #1
 80a17ce:	601a      	strpl	r2, [r3, #0]
 80a17d0:	4b1c      	ldr	r3, [pc, #112]	; (80a1844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a17d2:	681a      	ldr	r2, [r3, #0]
 80a17d4:	07d1      	lsls	r1, r2, #31
 80a17d6:	bf5c      	itt	pl
 80a17d8:	2201      	movpl	r2, #1
 80a17da:	601a      	strpl	r2, [r3, #0]
 80a17dc:	4b1a      	ldr	r3, [pc, #104]	; (80a1848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a17de:	681a      	ldr	r2, [r3, #0]
 80a17e0:	07d2      	lsls	r2, r2, #31
 80a17e2:	bf5c      	itt	pl
 80a17e4:	2201      	movpl	r2, #1
 80a17e6:	601a      	strpl	r2, [r3, #0]
 80a17e8:	4b18      	ldr	r3, [pc, #96]	; (80a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a17ea:	681a      	ldr	r2, [r3, #0]
 80a17ec:	07d0      	lsls	r0, r2, #31
 80a17ee:	bf5c      	itt	pl
 80a17f0:	2201      	movpl	r2, #1
 80a17f2:	601a      	strpl	r2, [r3, #0]
 80a17f4:	4b16      	ldr	r3, [pc, #88]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a17f6:	681a      	ldr	r2, [r3, #0]
 80a17f8:	07d1      	lsls	r1, r2, #31
 80a17fa:	bf5c      	itt	pl
 80a17fc:	2201      	movpl	r2, #1
 80a17fe:	601a      	strpl	r2, [r3, #0]
 80a1800:	4b14      	ldr	r3, [pc, #80]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1802:	681a      	ldr	r2, [r3, #0]
 80a1804:	07d2      	lsls	r2, r2, #31
 80a1806:	bf5c      	itt	pl
 80a1808:	2201      	movpl	r2, #1
 80a180a:	601a      	strpl	r2, [r3, #0]
 80a180c:	4b12      	ldr	r3, [pc, #72]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a180e:	681a      	ldr	r2, [r3, #0]
 80a1810:	07d0      	lsls	r0, r2, #31
 80a1812:	bf5c      	itt	pl
 80a1814:	2201      	movpl	r2, #1
 80a1816:	601a      	strpl	r2, [r3, #0]
 80a1818:	4b10      	ldr	r3, [pc, #64]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a181a:	681a      	ldr	r2, [r3, #0]
 80a181c:	07d1      	lsls	r1, r2, #31
 80a181e:	bf5c      	itt	pl
 80a1820:	2201      	movpl	r2, #1
 80a1822:	601a      	strpl	r2, [r3, #0]
 80a1824:	4b0e      	ldr	r3, [pc, #56]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1826:	681a      	ldr	r2, [r3, #0]
 80a1828:	07d2      	lsls	r2, r2, #31
 80a182a:	bf5c      	itt	pl
 80a182c:	2201      	movpl	r2, #1
 80a182e:	601a      	strpl	r2, [r3, #0]
 80a1830:	4770      	bx	lr
 80a1832:	bf00      	nop
 80a1834:	2000062c 	.word	0x2000062c
 80a1838:	20000628 	.word	0x20000628
 80a183c:	20000624 	.word	0x20000624
 80a1840:	20000620 	.word	0x20000620
 80a1844:	2000061c 	.word	0x2000061c
 80a1848:	20000618 	.word	0x20000618
 80a184c:	20000614 	.word	0x20000614
 80a1850:	20000610 	.word	0x20000610
 80a1854:	2000060c 	.word	0x2000060c
 80a1858:	20000608 	.word	0x20000608
 80a185c:	20000604 	.word	0x20000604
 80a1860:	20000600 	.word	0x20000600

080a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1864:	4b18      	ldr	r3, [pc, #96]	; (80a18c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d1      	lsls	r1, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b16      	ldr	r3, [pc, #88]	; (80a18cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d2      	lsls	r2, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b14      	ldr	r3, [pc, #80]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d0      	lsls	r0, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b12      	ldr	r3, [pc, #72]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d1      	lsls	r1, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4b10      	ldr	r3, [pc, #64]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1896:	681a      	ldr	r2, [r3, #0]
 80a1898:	07d2      	lsls	r2, r2, #31
 80a189a:	bf5c      	itt	pl
 80a189c:	2201      	movpl	r2, #1
 80a189e:	601a      	strpl	r2, [r3, #0]
 80a18a0:	4b0e      	ldr	r3, [pc, #56]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a18a2:	681a      	ldr	r2, [r3, #0]
 80a18a4:	07d0      	lsls	r0, r2, #31
 80a18a6:	bf5c      	itt	pl
 80a18a8:	2201      	movpl	r2, #1
 80a18aa:	601a      	strpl	r2, [r3, #0]
 80a18ac:	4b0c      	ldr	r3, [pc, #48]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a18ae:	681a      	ldr	r2, [r3, #0]
 80a18b0:	07d1      	lsls	r1, r2, #31
 80a18b2:	bf5c      	itt	pl
 80a18b4:	2201      	movpl	r2, #1
 80a18b6:	601a      	strpl	r2, [r3, #0]
 80a18b8:	4b0a      	ldr	r3, [pc, #40]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d2      	lsls	r2, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4770      	bx	lr
 80a18c6:	bf00      	nop
 80a18c8:	2000064c 	.word	0x2000064c
 80a18cc:	20000648 	.word	0x20000648
 80a18d0:	20000644 	.word	0x20000644
 80a18d4:	20000640 	.word	0x20000640
 80a18d8:	2000063c 	.word	0x2000063c
 80a18dc:	20000638 	.word	0x20000638
 80a18e0:	20000634 	.word	0x20000634
 80a18e4:	20000630 	.word	0x20000630

080a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a18e8:	4b18      	ldr	r3, [pc, #96]	; (80a194c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a18ea:	681a      	ldr	r2, [r3, #0]
 80a18ec:	07d1      	lsls	r1, r2, #31
 80a18ee:	bf5c      	itt	pl
 80a18f0:	2201      	movpl	r2, #1
 80a18f2:	601a      	strpl	r2, [r3, #0]
 80a18f4:	4b16      	ldr	r3, [pc, #88]	; (80a1950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a18f6:	681a      	ldr	r2, [r3, #0]
 80a18f8:	07d2      	lsls	r2, r2, #31
 80a18fa:	bf5c      	itt	pl
 80a18fc:	2201      	movpl	r2, #1
 80a18fe:	601a      	strpl	r2, [r3, #0]
 80a1900:	4b14      	ldr	r3, [pc, #80]	; (80a1954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1902:	681a      	ldr	r2, [r3, #0]
 80a1904:	07d0      	lsls	r0, r2, #31
 80a1906:	bf5c      	itt	pl
 80a1908:	2201      	movpl	r2, #1
 80a190a:	601a      	strpl	r2, [r3, #0]
 80a190c:	4b12      	ldr	r3, [pc, #72]	; (80a1958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a190e:	681a      	ldr	r2, [r3, #0]
 80a1910:	07d1      	lsls	r1, r2, #31
 80a1912:	bf5c      	itt	pl
 80a1914:	2201      	movpl	r2, #1
 80a1916:	601a      	strpl	r2, [r3, #0]
 80a1918:	4b10      	ldr	r3, [pc, #64]	; (80a195c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a191a:	681a      	ldr	r2, [r3, #0]
 80a191c:	07d2      	lsls	r2, r2, #31
 80a191e:	bf5c      	itt	pl
 80a1920:	2201      	movpl	r2, #1
 80a1922:	601a      	strpl	r2, [r3, #0]
 80a1924:	4b0e      	ldr	r3, [pc, #56]	; (80a1960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1926:	681a      	ldr	r2, [r3, #0]
 80a1928:	07d0      	lsls	r0, r2, #31
 80a192a:	bf5c      	itt	pl
 80a192c:	2201      	movpl	r2, #1
 80a192e:	601a      	strpl	r2, [r3, #0]
 80a1930:	4b0c      	ldr	r3, [pc, #48]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1932:	681a      	ldr	r2, [r3, #0]
 80a1934:	07d1      	lsls	r1, r2, #31
 80a1936:	bf5c      	itt	pl
 80a1938:	2201      	movpl	r2, #1
 80a193a:	601a      	strpl	r2, [r3, #0]
 80a193c:	4b0a      	ldr	r3, [pc, #40]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d2      	lsls	r2, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4770      	bx	lr
 80a194a:	bf00      	nop
 80a194c:	2000066c 	.word	0x2000066c
 80a1950:	20000668 	.word	0x20000668
 80a1954:	20000664 	.word	0x20000664
 80a1958:	20000660 	.word	0x20000660
 80a195c:	2000065c 	.word	0x2000065c
 80a1960:	20000658 	.word	0x20000658
 80a1964:	20000654 	.word	0x20000654
 80a1968:	20000650 	.word	0x20000650

080a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a196c:	4b24      	ldr	r3, [pc, #144]	; (80a1a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a196e:	681a      	ldr	r2, [r3, #0]
 80a1970:	07d0      	lsls	r0, r2, #31
 80a1972:	bf5c      	itt	pl
 80a1974:	2201      	movpl	r2, #1
 80a1976:	601a      	strpl	r2, [r3, #0]
 80a1978:	4b22      	ldr	r3, [pc, #136]	; (80a1a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a197a:	681a      	ldr	r2, [r3, #0]
 80a197c:	07d1      	lsls	r1, r2, #31
 80a197e:	bf5c      	itt	pl
 80a1980:	2201      	movpl	r2, #1
 80a1982:	601a      	strpl	r2, [r3, #0]
 80a1984:	4b20      	ldr	r3, [pc, #128]	; (80a1a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1986:	681a      	ldr	r2, [r3, #0]
 80a1988:	07d2      	lsls	r2, r2, #31
 80a198a:	bf5c      	itt	pl
 80a198c:	2201      	movpl	r2, #1
 80a198e:	601a      	strpl	r2, [r3, #0]
 80a1990:	4b1e      	ldr	r3, [pc, #120]	; (80a1a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1992:	681a      	ldr	r2, [r3, #0]
 80a1994:	07d0      	lsls	r0, r2, #31
 80a1996:	bf5c      	itt	pl
 80a1998:	2201      	movpl	r2, #1
 80a199a:	601a      	strpl	r2, [r3, #0]
 80a199c:	4b1c      	ldr	r3, [pc, #112]	; (80a1a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a199e:	681a      	ldr	r2, [r3, #0]
 80a19a0:	07d1      	lsls	r1, r2, #31
 80a19a2:	bf5c      	itt	pl
 80a19a4:	2201      	movpl	r2, #1
 80a19a6:	601a      	strpl	r2, [r3, #0]
 80a19a8:	4b1a      	ldr	r3, [pc, #104]	; (80a1a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a19aa:	681a      	ldr	r2, [r3, #0]
 80a19ac:	07d2      	lsls	r2, r2, #31
 80a19ae:	bf5c      	itt	pl
 80a19b0:	2201      	movpl	r2, #1
 80a19b2:	601a      	strpl	r2, [r3, #0]
 80a19b4:	4b18      	ldr	r3, [pc, #96]	; (80a1a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a19b6:	681a      	ldr	r2, [r3, #0]
 80a19b8:	07d0      	lsls	r0, r2, #31
 80a19ba:	bf5c      	itt	pl
 80a19bc:	2201      	movpl	r2, #1
 80a19be:	601a      	strpl	r2, [r3, #0]
 80a19c0:	4b16      	ldr	r3, [pc, #88]	; (80a1a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a19c2:	681a      	ldr	r2, [r3, #0]
 80a19c4:	07d1      	lsls	r1, r2, #31
 80a19c6:	bf5c      	itt	pl
 80a19c8:	2201      	movpl	r2, #1
 80a19ca:	601a      	strpl	r2, [r3, #0]
 80a19cc:	4b14      	ldr	r3, [pc, #80]	; (80a1a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a19ce:	681a      	ldr	r2, [r3, #0]
 80a19d0:	07d2      	lsls	r2, r2, #31
 80a19d2:	bf5c      	itt	pl
 80a19d4:	2201      	movpl	r2, #1
 80a19d6:	601a      	strpl	r2, [r3, #0]
 80a19d8:	4b12      	ldr	r3, [pc, #72]	; (80a1a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a19da:	681a      	ldr	r2, [r3, #0]
 80a19dc:	07d0      	lsls	r0, r2, #31
 80a19de:	bf5c      	itt	pl
 80a19e0:	2201      	movpl	r2, #1
 80a19e2:	601a      	strpl	r2, [r3, #0]
 80a19e4:	4b10      	ldr	r3, [pc, #64]	; (80a1a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a19e6:	681a      	ldr	r2, [r3, #0]
 80a19e8:	07d1      	lsls	r1, r2, #31
 80a19ea:	bf5c      	itt	pl
 80a19ec:	2201      	movpl	r2, #1
 80a19ee:	601a      	strpl	r2, [r3, #0]
 80a19f0:	4b0e      	ldr	r3, [pc, #56]	; (80a1a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a19f2:	681a      	ldr	r2, [r3, #0]
 80a19f4:	07d2      	lsls	r2, r2, #31
 80a19f6:	bf5c      	itt	pl
 80a19f8:	2201      	movpl	r2, #1
 80a19fa:	601a      	strpl	r2, [r3, #0]
 80a19fc:	4770      	bx	lr
 80a19fe:	bf00      	nop
 80a1a00:	2000069c 	.word	0x2000069c
 80a1a04:	20000698 	.word	0x20000698
 80a1a08:	20000694 	.word	0x20000694
 80a1a0c:	20000690 	.word	0x20000690
 80a1a10:	2000068c 	.word	0x2000068c
 80a1a14:	20000688 	.word	0x20000688
 80a1a18:	20000684 	.word	0x20000684
 80a1a1c:	20000680 	.word	0x20000680
 80a1a20:	2000067c 	.word	0x2000067c
 80a1a24:	20000678 	.word	0x20000678
 80a1a28:	20000674 	.word	0x20000674
 80a1a2c:	20000670 	.word	0x20000670

080a1a30 <__cxa_atexit>:
 80a1a30:	b510      	push	{r4, lr}
 80a1a32:	4c05      	ldr	r4, [pc, #20]	; (80a1a48 <__cxa_atexit+0x18>)
 80a1a34:	4613      	mov	r3, r2
 80a1a36:	b12c      	cbz	r4, 80a1a44 <__cxa_atexit+0x14>
 80a1a38:	460a      	mov	r2, r1
 80a1a3a:	4601      	mov	r1, r0
 80a1a3c:	2002      	movs	r0, #2
 80a1a3e:	f3af 8000 	nop.w
 80a1a42:	bd10      	pop	{r4, pc}
 80a1a44:	4620      	mov	r0, r4
 80a1a46:	bd10      	pop	{r4, pc}
 80a1a48:	00000000 	.word	0x00000000

080a1a4c <memcpy>:
 80a1a4c:	b510      	push	{r4, lr}
 80a1a4e:	1e43      	subs	r3, r0, #1
 80a1a50:	440a      	add	r2, r1
 80a1a52:	4291      	cmp	r1, r2
 80a1a54:	d004      	beq.n	80a1a60 <memcpy+0x14>
 80a1a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1a5e:	e7f8      	b.n	80a1a52 <memcpy+0x6>
 80a1a60:	bd10      	pop	{r4, pc}

080a1a62 <memset>:
 80a1a62:	4603      	mov	r3, r0
 80a1a64:	4402      	add	r2, r0
 80a1a66:	4293      	cmp	r3, r2
 80a1a68:	d002      	beq.n	80a1a70 <memset+0xe>
 80a1a6a:	f803 1b01 	strb.w	r1, [r3], #1
 80a1a6e:	e7fa      	b.n	80a1a66 <memset+0x4>
 80a1a70:	4770      	bx	lr
	...

080a1a74 <srand>:
 80a1a74:	b538      	push	{r3, r4, r5, lr}
 80a1a76:	4b12      	ldr	r3, [pc, #72]	; (80a1ac0 <srand+0x4c>)
 80a1a78:	4605      	mov	r5, r0
 80a1a7a:	681c      	ldr	r4, [r3, #0]
 80a1a7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a7e:	b9d3      	cbnz	r3, 80a1ab6 <srand+0x42>
 80a1a80:	2018      	movs	r0, #24
 80a1a82:	f7fe ff1d 	bl	80a08c0 <malloc>
 80a1a86:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1a8a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a8c:	8003      	strh	r3, [r0, #0]
 80a1a8e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1a92:	8043      	strh	r3, [r0, #2]
 80a1a94:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1a98:	8083      	strh	r3, [r0, #4]
 80a1a9a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1a9e:	80c3      	strh	r3, [r0, #6]
 80a1aa0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1aa4:	8103      	strh	r3, [r0, #8]
 80a1aa6:	2305      	movs	r3, #5
 80a1aa8:	8143      	strh	r3, [r0, #10]
 80a1aaa:	230b      	movs	r3, #11
 80a1aac:	8183      	strh	r3, [r0, #12]
 80a1aae:	2201      	movs	r2, #1
 80a1ab0:	2300      	movs	r3, #0
 80a1ab2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1ab8:	2200      	movs	r2, #0
 80a1aba:	611d      	str	r5, [r3, #16]
 80a1abc:	615a      	str	r2, [r3, #20]
 80a1abe:	bd38      	pop	{r3, r4, r5, pc}
 80a1ac0:	2000008c 	.word	0x2000008c

080a1ac4 <strlen>:
 80a1ac4:	4603      	mov	r3, r0
 80a1ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1aca:	2a00      	cmp	r2, #0
 80a1acc:	d1fb      	bne.n	80a1ac6 <strlen+0x2>
 80a1ace:	1a18      	subs	r0, r3, r0
 80a1ad0:	3801      	subs	r0, #1
 80a1ad2:	4770      	bx	lr

080a1ad4 <dynalib_user>:
 80a1ad4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1ae4:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a1af4:	7265 505f 4255 494c 4853 5300 4554 2050     er_PUBLISH.STEP 
 80a1b04:	4952 4847 2054 4f53 4f4c 5300 4554 2050     RIGHT SOLO.STEP 
 80a1b14:	454c 5446 5320 4c4f 004f 5453 5045 5220     LEFT SOLO.STEP R
 80a1b24:	4749 5448 4420 4f55 5300 4554 2050 454c     IGHT DUO.STEP LE
 80a1b34:	5446 4420 4f55 0000                         FT DUO..

080a1b3c <_ZTV7TwoWire>:
	...
 80a1b44:	0909 080a 0953 080a 092b 080a 090b 080a     ....S...+.......
 80a1b54:	0933 080a 093b 080a 0943 080a 094b 080a     3...;...C...K...

080a1b64 <_ZTV9IPAddress>:
	...
 80a1b6c:	098d 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a1b7c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1b8c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1b9c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1bac:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1bbc:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1bcc:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1bdc:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1bec:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1bfc:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1c0c:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1c1c:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1c2c:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1c3c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1c4c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1c5c <_ZTVN5spark12NetworkClassE>:
	...
 80a1c64:	0a6d 080a 0a77 080a 0a81 080a 0a8b 080a     m...w...........
 80a1c74:	0a95 080a 0aa1 080a 0aad 080a 0ab9 080a     ................
 80a1c84:	0ac1 080a 0acb 080a 0ad5 080a               ............

080a1c90 <_ZTV8SPIClass>:
	...
 80a1c98:	0c71 080a 0c73 080a 005a 2b25 3330 3a64     q...s...Z.%+03d:
 80a1ca8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1cb8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1cc8:	0000 0000                                   ....

080a1ccc <_ZTV3UDP>:
	...
 80a1cd4:	00b5 080a 00e3 080a 0daf 080a 0ecf 080a     ................
 80a1ce4:	0da7 080a 0dc5 080a 0de3 080a 0dfd 080a     ................
 80a1cf4:	0e1f 080a 0e69 080a 0e8b 080a 1021 080a     ....i.......!...
 80a1d04:	0f35 080a 0d91 080a 1131 080a 0f9d 080a     5.......1.......
 80a1d14:	1059 080a 115f 080a 0ef9 080a 0d9d 080a     Y..._...........
 80a1d24:	1001 080a 0da3 080a 0dff 080a fff0 ffff     ................
 80a1d34:	0000 0000 0e17 080a                         ........

080a1d3c <_ZTV11USARTSerial>:
	...
 80a1d44:	1197 080a 11e7 080a 11f5 080a 0b51 080a     ............Q...
 80a1d54:	11ab 080a 11cd 080a 11b9 080a 11e1 080a     ................
 80a1d64:	1199 080a 119d 080a                         ........

080a1d6c <_ZTV9USBSerial>:
	...
 80a1d74:	129d 080a 12ed 080a 12fb 080a 0b51 080a     ............Q...
 80a1d84:	12d9 080a 129f 080a 12b5 080a 12e7 080a     ................
 80a1d94:	12cb 080a 1299 080a                         ........

080a1d9c <_ZTVN5spark9WiFiClassE>:
	...
 80a1da4:	14eb 080a 14e1 080a 14d7 080a 1449 080a     ............I...
 80a1db4:	14cb 080a 14bf 080a 14b3 080a 14ab 080a     ................
 80a1dc4:	14a1 080a 1497 080a 1453 080a               ........S...

080a1dd0 <__sf_fake_stdin>:
	...

080a1df0 <__sf_fake_stdout>:
	...

080a1e10 <__sf_fake_stderr>:
	...
 80a1e30:	0043                                        C.

080a1e32 <link_const_variable_data_end>:
	...

080a1e34 <link_constructors_location>:
 80a1e34:	080a04a1 	.word	0x080a04a1
 80a1e38:	080a0a5d 	.word	0x080a0a5d
 80a1e3c:	080a0b3d 	.word	0x080a0b3d
 80a1e40:	080a0c55 	.word	0x080a0c55
 80a1e44:	080a0d65 	.word	0x080a0d65
 80a1e48:	080a0d7d 	.word	0x080a0d7d
 80a1e4c:	080a14f5 	.word	0x080a14f5
 80a1e50:	080a171d 	.word	0x080a171d
 80a1e54:	080a174d 	.word	0x080a174d
 80a1e58:	080a17a1 	.word	0x080a17a1
 80a1e5c:	080a1865 	.word	0x080a1865
 80a1e60:	080a18e9 	.word	0x080a18e9
 80a1e64:	080a196d 	.word	0x080a196d

080a1e68 <link_constructors_end>:
	...
