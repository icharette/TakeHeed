
/Users/ninjacat/Documents/Particle/TakeHeed/TakeHeed_ParticleSetup/target/1.4.1-rc.1/photon/TakeHeed_ParticleSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a24  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2a40  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a2a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000068c  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2ac0  080a2ac0  00022ac0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2ae8  080a2ae8  00022ae8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c32de  00000000  00000000  00022aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000120d5  00000000  00000000  000e5dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001858b  00000000  00000000  000f7e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023a8  00000000  00000000  0011042a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000037c0  00000000  00000000  001127d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027c6d  00000000  00000000  00115f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ab60  00000000  00000000  0013dbff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7a29  00000000  00000000  0016875f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c504  00000000  00000000  00210188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 faa1 	bl	80a2574 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 faa6 	bl	80a258a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2a44 	.word	0x080a2a44
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000708 	.word	0x20000708
 80a0058:	20000708 	.word	0x20000708

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fdf9 	bl	80a1c54 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a29f4 	.word	0x080a29f4
 80a0084:	080a2a3c 	.word	0x080a2a3c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8b5 	bl	80a01fc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bd9f 	b.w	80a1bd8 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bec5 	b.w	80a0e28 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 becb 	b.w	80a0e38 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f001 fa0c 	bl	80a14dc <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f001 fb41 	bl	80a174c <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a2894 	.word	0x080a2894

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 fe94 	bl	80a1e06 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 fe8a 	bl	80a1e06 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
#include "SparkCorePolledTimer.h"
SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
void OnTimer(void);   //Prototype for timer callback method


void setup(){
 80a00f8:	b570      	push	{r4, r5, r6, lr}
 80a00fa:	b096      	sub	sp, #88	; 0x58

  //setup to connect to router wireless network
  while(!Serial);
 80a00fc:	f001 fc78 	bl	80a19f0 <_Z16_fetch_usbserialv>
 80a0100:	f001 fc5d 	bl	80a19be <_ZN9USBSerialcvbEv>
 80a0104:	2800      	cmp	r0, #0
 80a0106:	d0f9      	beq.n	80a00fc <setup+0x4>
 80a0108:	4c33      	ldr	r4, [pc, #204]	; (80a01d8 <setup+0xe0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a010a:	2300      	movs	r3, #0
 80a010c:	461a      	mov	r2, r3
 80a010e:	4619      	mov	r1, r3
 80a0110:	6860      	ldr	r0, [r4, #4]
 80a0112:	f000 fe29 	bl	80a0d68 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0116:	2200      	movs	r2, #0
 80a0118:	4611      	mov	r1, r2
 80a011a:	6860      	ldr	r0, [r4, #4]
 80a011c:	4d2e      	ldr	r5, [pc, #184]	; (80a01d8 <setup+0xe0>)
 80a011e:	f000 fe3b 	bl	80a0d98 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a0122:	2800      	cmp	r0, #0
 80a0124:	d0f7      	beq.n	80a0116 <setup+0x1e>
  Serial.println("Setup");
 80a0126:	f001 fc63 	bl	80a19f0 <_Z16_fetch_usbserialv>
 80a012a:	492c      	ldr	r1, [pc, #176]	; (80a01dc <setup+0xe4>)
 80a012c:	f001 f819 	bl	80a1162 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a0130:	4b2b      	ldr	r3, [pc, #172]	; (80a01e0 <setup+0xe8>)
 80a0132:	2200      	movs	r2, #0
 80a0134:	8819      	ldrh	r1, [r3, #0]
 80a0136:	482b      	ldr	r0, [pc, #172]	; (80a01e4 <setup+0xec>)
 80a0138:	f001 f9ab 	bl	80a1492 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a013c:	2300      	movs	r3, #0
 80a013e:	4619      	mov	r1, r3
 80a0140:	4a29      	ldr	r2, [pc, #164]	; (80a01e8 <setup+0xf0>)
 80a0142:	6868      	ldr	r0, [r5, #4]
 80a0144:	f000 fe60 	bl	80a0e08 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a0148:	f001 fc52 	bl	80a19f0 <_Z16_fetch_usbserialv>
 80a014c:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a014e:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0150:	2240      	movs	r2, #64	; 0x40
 80a0152:	2100      	movs	r1, #0
 80a0154:	a806      	add	r0, sp, #24
 80a0156:	f002 fa18 	bl	80a258a <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a015a:	2340      	movs	r3, #64	; 0x40
 80a015c:	aa06      	add	r2, sp, #24
 80a015e:	4621      	mov	r1, r4
 80a0160:	9400      	str	r4, [sp, #0]
 80a0162:	6868      	ldr	r0, [r5, #4]
 80a0164:	f000 fe58 	bl	80a0e18 <network_get_hostname>
        return String(buf);
 80a0168:	a906      	add	r1, sp, #24
 80a016a:	a802      	add	r0, sp, #8
 80a016c:	f001 f920 	bl	80a13b0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0170:	9902      	ldr	r1, [sp, #8]
 80a0172:	4630      	mov	r0, r6
 80a0174:	f000 fff5 	bl	80a1162 <_ZN5Print7printlnEPKc>
 80a0178:	a802      	add	r0, sp, #8
 80a017a:	f001 f8d2 	bl	80a1322 <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a017e:	f001 fc37 	bl	80a19f0 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0182:	4622      	mov	r2, r4
 80a0184:	4606      	mov	r6, r0
 80a0186:	4621      	mov	r1, r4
 80a0188:	6868      	ldr	r0, [r5, #4]
 80a018a:	f000 fde5 	bl	80a0d58 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a018e:	1c81      	adds	r1, r0, #2
 80a0190:	a806      	add	r0, sp, #24
 80a0192:	f000 fef1 	bl	80a0f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0196:	a906      	add	r1, sp, #24
 80a0198:	4630      	mov	r0, r6
 80a019a:	f000 ffec 	bl	80a1176 <_ZN5Print7printlnERK9Printable>


  // settings for imu
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a019e:	4813      	ldr	r0, [pc, #76]	; (80a01ec <setup+0xf4>)
 80a01a0:	2301      	movs	r3, #1
 80a01a2:	7003      	strb	r3, [r0, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
 80a01a4:	231e      	movs	r3, #30
 80a01a6:	7083      	strb	r3, [r0, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01a8:	236b      	movs	r3, #107	; 0x6b
 80a01aa:	7043      	strb	r3, [r0, #1]

  //checking if imu is ready to communicate
  if (!imu.begin())
 80a01ac:	f000 fb19 	bl	80a07e2 <_ZN7LSM9DS15beginEv>
 80a01b0:	b978      	cbnz	r0, 80a01d2 <setup+0xda>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a01b2:	f001 fc1d 	bl	80a19f0 <_Z16_fetch_usbserialv>
 80a01b6:	490e      	ldr	r1, [pc, #56]	; (80a01f0 <setup+0xf8>)
 80a01b8:	f000 ffd3 	bl	80a1162 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a01bc:	f001 fc18 	bl	80a19f0 <_Z16_fetch_usbserialv>
 80a01c0:	490c      	ldr	r1, [pc, #48]	; (80a01f4 <setup+0xfc>)
 80a01c2:	f000 ffce 	bl	80a1162 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " 
 80a01c6:	f001 fc13 	bl	80a19f0 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " 
                  "Breakout, but may need to be modified " 
                  "if the board jumpers are.");
 80a01ca:	490b      	ldr	r1, [pc, #44]	; (80a01f8 <setup+0x100>)
 80a01cc:	f000 ffc9 	bl	80a1162 <_ZN5Print7printlnEPKc>
 80a01d0:	e7fe      	b.n	80a01d0 <setup+0xd8>
    while (1)
      ;
  }
}
 80a01d2:	b016      	add	sp, #88	; 0x58
 80a01d4:	bd70      	pop	{r4, r5, r6, pc}
 80a01d6:	bf00      	nop
 80a01d8:	20000604 	.word	0x20000604
 80a01dc:	080a2610 	.word	0x080a2610
 80a01e0:	20000000 	.word	0x20000000
 80a01e4:	2000010c 	.word	0x2000010c
 80a01e8:	080a2616 	.word	0x080a2616
 80a01ec:	20000088 	.word	0x20000088
 80a01f0:	080a2627 	.word	0x080a2627
 80a01f4:	080a264b 	.word	0x080a264b
 80a01f8:	080a2660 	.word	0x080a2660

080a01fc <loop>:

void loop(){
 80a01fc:	b510      	push	{r4, lr}
  imu.readMag();
 80a01fe:	4c04      	ldr	r4, [pc, #16]	; (80a0210 <loop+0x14>)
 80a0200:	4620      	mov	r0, r4
 80a0202:	f000 fbce 	bl	80a09a2 <_ZN7LSM9DS17readMagEv>
  imu.readAccel();
 80a0206:	4620      	mov	r0, r4

  // IMU_sensor compasCalc;
  // compasCalc.iecompass(-imu.my, -imu.mx, imu.mz, imu.ax, imu.ay, imu.az);
 80a0208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

void loop(){
  imu.readMag();
  imu.readAccel();
 80a020c:	f000 bb81 	b.w	80a0912 <_ZN7LSM9DS19readAccelEv>
 80a0210:	20000088 	.word	0x20000088

080a0214 <_GLOBAL__sub_I_SystemMode>:

  // IMU_sensor compasCalc;
  // compasCalc.iecompass(-imu.my, -imu.mx, imu.mz, imu.ax, imu.ay, imu.az);
 80a0214:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0216:	f000 fc09 	bl	80a0a2c <HAL_Pin_Map>
#include "LSM9DS1_Registers.h"
#include "LSM9DS1_Types.h"
#include "compass.h"

//set up to connect to Router instead of cloud
SYSTEM_THREAD(ENABLED);
 80a021a:	2100      	movs	r1, #0
 80a021c:	2001      	movs	r0, #1
 80a021e:	f000 fd77 	bl	80a0d10 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0222:	4b13      	ldr	r3, [pc, #76]	; (80a0270 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0224:	2200      	movs	r2, #0
 80a0226:	701a      	strb	r2, [r3, #0]
 80a0228:	805a      	strh	r2, [r3, #2]
 80a022a:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a022e:	4c11      	ldr	r4, [pc, #68]	; (80a0274 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0230:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0232:	2002      	movs	r0, #2
 80a0234:	f000 fd64 	bl	80a0d00 <set_system_mode>
 80a0238:	4d0f      	ldr	r5, [pc, #60]	; (80a0278 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a023a:	4620      	mov	r0, r4
 80a023c:	f000 fe8e 	bl	80a0f5c <_ZN9IPAddressC1Ev>
 80a0240:	4620      	mov	r0, r4
int port;
UDP udp;
 80a0242:	4c0e      	ldr	r4, [pc, #56]	; (80a027c <_GLOBAL__sub_I_SystemMode+0x68>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0244:	462a      	mov	r2, r5
 80a0246:	490e      	ldr	r1, [pc, #56]	; (80a0280 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0248:	f001 fdd8 	bl	80a1dfc <__aeabi_atexit>
int port;
UDP udp;
 80a024c:	4620      	mov	r0, r4
 80a024e:	f001 fa5f 	bl	80a1710 <_ZN3UDPC1Ev>
 80a0252:	462a      	mov	r2, r5
 80a0254:	490b      	ldr	r1, [pc, #44]	; (80a0284 <_GLOBAL__sub_I_SystemMode+0x70>)
 80a0256:	4620      	mov	r0, r4
 80a0258:	f001 fdd0 	bl	80a1dfc <__aeabi_atexit>


//variables for IMU sensor
LSM9DS1 imu;
 80a025c:	480a      	ldr	r0, [pc, #40]	; (80a0288 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a025e:	f000 f877 	bl	80a0350 <_ZN7LSM9DS1C1Ev>
  imu.readMag();
  imu.readAccel();

  // IMU_sensor compasCalc;
  // compasCalc.iecompass(-imu.my, -imu.mx, imu.mz, imu.ax, imu.ay, imu.az);
 80a0262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// your's here:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal
int testPin =D7;
#include "SparkCorePolledTimer.h"
SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a0266:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a026a:	4808      	ldr	r0, [pc, #32]	; (80a028c <_GLOBAL__sub_I_SystemMode+0x78>)
 80a026c:	f000 b818 	b.w	80a02a0 <_ZN20SparkCorePolledTimerC1Em>
 80a0270:	20000080 	.word	0x20000080
 80a0274:	20000158 	.word	0x20000158
 80a0278:	2000007c 	.word	0x2000007c
 80a027c:	2000010c 	.word	0x2000010c
 80a0280:	080a00b3 	.word	0x080a00b3
 80a0284:	080a00b5 	.word	0x080a00b5
 80a0288:	20000088 	.word	0x20000088
 80a028c:	20000170 	.word	0x20000170

080a0290 <_GLOBAL__sub_I__ZN10IMU_sensorC2Ev>:
 80a0290:	f000 bbcc 	b.w	80a0a2c <HAL_Pin_Map>

080a0294 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0294:	b510      	push	{r4, lr}
 80a0296:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0298:	f000 fbc0 	bl	80a0a1c <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a029c:	6020      	str	r0, [r4, #0]
 80a029e:	bd10      	pop	{r4, pc}

080a02a0 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a02a0:	b538      	push	{r3, r4, r5, lr}
 80a02a2:	4604      	mov	r4, r0
 80a02a4:	460d      	mov	r5, r1
    Reset();
 80a02a6:	f7ff fff5 	bl	80a0294 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a02aa:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a02ac:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a02ae:	60a3      	str	r3, [r4, #8]
}
 80a02b0:	4620      	mov	r0, r4
 80a02b2:	bd38      	pop	{r3, r4, r5, pc}

080a02b4 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a02b4:	f000 bbba 	b.w	80a0a2c <HAL_Pin_Map>

080a02b8 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a02b8:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a02ba:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a02bc:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a02be:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a02c0:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a02c2:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a02c4:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a02c6:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a02c8:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a02ca:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a02cc:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a02ce:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a02d0:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a02d2:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a02d4:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a02d8:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a02da:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a02dc:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a02de:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a02e0:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a02e2:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a02e4:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a02e6:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a02e8:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a02ea:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a02ec:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a02ee:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a02f0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a02f4:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a02f6:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a02f8:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a02fa:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a02fc:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a02fe:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0300:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0302:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0304:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0306:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0308:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a030a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a030e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0310:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0314:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0318:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a031a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a031e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0322:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0326:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0328:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a032a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a032c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a032e:	6565      	str	r5, [r4, #84]	; 0x54
 80a0330:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0334:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0338:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a033c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0340:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0344:	d1f0      	bne.n	80a0328 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0346:	f04f 0300 	mov.w	r3, #0
 80a034a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a034e:	bd30      	pop	{r4, r5, pc}

080a0350 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0350:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0352:	231e      	movs	r3, #30
 80a0354:	226b      	movs	r2, #107	; 0x6b
 80a0356:	2101      	movs	r1, #1
 80a0358:	f7ff ffae 	bl	80a02b8 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a035c:	bd10      	pop	{r4, pc}

080a035e <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a035e:	b510      	push	{r4, lr}
 80a0360:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0362:	88c0      	ldrh	r0, [r0, #6]
 80a0364:	f001 ff50 	bl	80a2208 <__aeabi_ui2f>
 80a0368:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a036c:	f001 ffa4 	bl	80a22b8 <__aeabi_fmul>
 80a0370:	6760      	str	r0, [r4, #116]	; 0x74
 80a0372:	bd10      	pop	{r4, pc}

080a0374 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0374:	b510      	push	{r4, lr}
 80a0376:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0378:	7dc0      	ldrb	r0, [r0, #23]
 80a037a:	f001 ff45 	bl	80a2208 <__aeabi_ui2f>
 80a037e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0382:	f001 ff99 	bl	80a22b8 <__aeabi_fmul>
 80a0386:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0388:	bd10      	pop	{r4, pc}
	...

080a038c <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a038c:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0390:	3b04      	subs	r3, #4
 80a0392:	2b0c      	cmp	r3, #12
 80a0394:	d814      	bhi.n	80a03c0 <_ZN7LSM9DS18calcmResEv+0x34>
 80a0396:	e8df f003 	tbb	[pc, r3]
 80a039a:	1307      	.short	0x1307
 80a039c:	130a1313 	.word	0x130a1313
 80a03a0:	130d1313 	.word	0x130d1313
 80a03a4:	1313      	.short	0x1313
 80a03a6:	10          	.byte	0x10
 80a03a7:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a03a8:	4b06      	ldr	r3, [pc, #24]	; (80a03c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a03aa:	681b      	ldr	r3, [r3, #0]
 80a03ac:	e007      	b.n	80a03be <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a03ae:	4b05      	ldr	r3, [pc, #20]	; (80a03c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a03b0:	685b      	ldr	r3, [r3, #4]
 80a03b2:	e004      	b.n	80a03be <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a03b4:	4b03      	ldr	r3, [pc, #12]	; (80a03c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a03b6:	689b      	ldr	r3, [r3, #8]
 80a03b8:	e001      	b.n	80a03be <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a03bc:	68db      	ldr	r3, [r3, #12]
 80a03be:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a03c0:	4770      	bx	lr
 80a03c2:	bf00      	nop
 80a03c4:	20000004 	.word	0x20000004

080a03c8 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a03c8:	88c3      	ldrh	r3, [r0, #6]
 80a03ca:	2bf5      	cmp	r3, #245	; 0xf5
 80a03cc:	d007      	beq.n	80a03de <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a03ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a03d2:	d004      	beq.n	80a03de <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a03d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a03d8:	bf1c      	itt	ne
 80a03da:	23f5      	movne	r3, #245	; 0xf5
 80a03dc:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a03de:	7dc2      	ldrb	r2, [r0, #23]
 80a03e0:	2a10      	cmp	r2, #16
 80a03e2:	d803      	bhi.n	80a03ec <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a03e4:	4b08      	ldr	r3, [pc, #32]	; (80a0408 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a03e6:	40d3      	lsrs	r3, r2
 80a03e8:	07da      	lsls	r2, r3, #31
 80a03ea:	d401      	bmi.n	80a03f0 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a03ec:	2302      	movs	r3, #2
 80a03ee:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a03f0:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a03f4:	2a10      	cmp	r2, #16
 80a03f6:	d803      	bhi.n	80a0400 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a03f8:	4b04      	ldr	r3, [pc, #16]	; (80a040c <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a03fa:	40d3      	lsrs	r3, r2
 80a03fc:	07db      	lsls	r3, r3, #31
 80a03fe:	d402      	bmi.n	80a0406 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0400:	2304      	movs	r3, #4
 80a0402:	f880 3020 	strb.w	r3, [r0, #32]
 80a0406:	4770      	bx	lr
 80a0408:	00010114 	.word	0x00010114
 80a040c:	00011110 	.word	0x00011110

080a0410 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0410:	b510      	push	{r4, lr}
 80a0412:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0414:	2101      	movs	r1, #1
 80a0416:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a041a:	f001 fc6b 	bl	80a1cf4 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a041e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0422:	2101      	movs	r1, #1
 80a0424:	f001 fc77 	bl	80a1d16 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0428:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a042c:	2101      	movs	r1, #1
 80a042e:	f001 fc61 	bl	80a1cf4 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0432:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a0436:	4c0a      	ldr	r4, [pc, #40]	; (80a0460 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a0438:	2101      	movs	r1, #1
 80a043a:	f001 fc6c 	bl	80a1d16 <digitalWrite>
	
	SPI.begin();
 80a043e:	4620      	mov	r0, r4
 80a0440:	f000 ff00 	bl	80a1244 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0444:	4620      	mov	r0, r4
 80a0446:	2108      	movs	r1, #8
 80a0448:	f000 ff4e 	bl	80a12e8 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a044c:	4620      	mov	r0, r4
 80a044e:	2101      	movs	r1, #1
 80a0450:	f000 fefd 	bl	80a124e <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0454:	4620      	mov	r0, r4
}
 80a0456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a045a:	2100      	movs	r1, #0
 80a045c:	f000 befa 	b.w	80a1254 <_ZN8SPIClass11setDataModeEh>
 80a0460:	20000648 	.word	0x20000648

080a0464 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0466:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0468:	4617      	mov	r7, r2
 80a046a:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a046c:	4d09      	ldr	r5, [pc, #36]	; (80a0494 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a046e:	4620      	mov	r0, r4
 80a0470:	2100      	movs	r1, #0
 80a0472:	f001 fc50 	bl	80a1d16 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0476:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a047a:	4628      	mov	r0, r5
 80a047c:	f000 ff48 	bl	80a1310 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0480:	4631      	mov	r1, r6
 80a0482:	4628      	mov	r0, r5
 80a0484:	f000 ff44 	bl	80a1310 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0488:	4620      	mov	r0, r4
}
 80a048a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a048e:	2101      	movs	r1, #1
 80a0490:	f001 bc41 	b.w	80a1d16 <digitalWrite>
 80a0494:	20000648 	.word	0x20000648

080a0498 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a049a:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a049c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a04a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a04a4:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a04a6:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a04aa:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a04ae:	d103      	bne.n	80a04b8 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a04b0:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a04b2:	bf88      	it	hi
 80a04b4:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a04b8:	b28c      	uxth	r4, r1
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	2100      	movs	r1, #0
 80a04be:	f001 fc2a 	bl	80a1d16 <digitalWrite>
	SPI.transfer(rAddress);
 80a04c2:	4629      	mov	r1, r5
 80a04c4:	4809      	ldr	r0, [pc, #36]	; (80a04ec <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a04c6:	f000 ff23 	bl	80a1310 <_ZN8SPIClass8transferEh>
 80a04ca:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a04cc:	1bab      	subs	r3, r5, r6
 80a04ce:	429f      	cmp	r7, r3
 80a04d0:	dd06      	ble.n	80a04e0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a04d2:	2100      	movs	r1, #0
 80a04d4:	4805      	ldr	r0, [pc, #20]	; (80a04ec <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a04d6:	f000 ff1b 	bl	80a1310 <_ZN8SPIClass8transferEh>
 80a04da:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a04de:	e7f5      	b.n	80a04cc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a04e0:	4620      	mov	r0, r4
 80a04e2:	2101      	movs	r1, #1
 80a04e4:	f001 fc17 	bl	80a1d16 <digitalWrite>
	
	return 1;
}
 80a04e8:	2001      	movs	r0, #1
 80a04ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a04ec:	20000648 	.word	0x20000648

080a04f0 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a04f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a04f2:	2301      	movs	r3, #1
 80a04f4:	9300      	str	r3, [sp, #0]
 80a04f6:	f10d 030f 	add.w	r3, sp, #15
 80a04fa:	f7ff ffcd 	bl	80a0498 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a04fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0502:	b005      	add	sp, #20
 80a0504:	f85d fb04 	ldr.w	pc, [sp], #4

080a0508 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0508:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a050a:	f001 fc1d 	bl	80a1d48 <_Z19__fetch_global_Wirev>
}
 80a050e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0512:	f000 bce9 	b.w	80a0ee8 <_ZN7TwoWire5beginEv>

080a0516 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0516:	b570      	push	{r4, r5, r6, lr}
 80a0518:	460e      	mov	r6, r1
 80a051a:	4615      	mov	r5, r2
 80a051c:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a051e:	f001 fc13 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0522:	4631      	mov	r1, r6
 80a0524:	f000 fcf2 	bl	80a0f0c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0528:	f001 fc0e 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a052c:	6803      	ldr	r3, [r0, #0]
 80a052e:	4629      	mov	r1, r5
 80a0530:	689b      	ldr	r3, [r3, #8]
 80a0532:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0534:	f001 fc08 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0538:	6803      	ldr	r3, [r0, #0]
 80a053a:	4621      	mov	r1, r4
 80a053c:	689a      	ldr	r2, [r3, #8]
 80a053e:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0540:	f001 fc02 	bl	80a1d48 <_Z19__fetch_global_Wirev>
}
 80a0544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0548:	f000 bce8 	b.w	80a0f1c <_ZN7TwoWire15endTransmissionEv>

080a054c <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a054c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a054e:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0550:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0552:	2a01      	cmp	r2, #1
 80a0554:	d105      	bne.n	80a0562 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0556:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0558:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a055a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a055e:	f7ff bfda 	b.w	80a0516 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0562:	b92a      	cbnz	r2, 80a0570 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0564:	460a      	mov	r2, r1
}
 80a0566:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0568:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a056c:	f7ff bf7a 	b.w	80a0464 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0570:	bc10      	pop	{r4}
 80a0572:	4770      	bx	lr

080a0574 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0574:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0576:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0578:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a057a:	b113      	cbz	r3, 80a0582 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a057c:	7a03      	ldrb	r3, [r0, #8]
 80a057e:	015b      	lsls	r3, r3, #5
 80a0580:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0582:	88e2      	ldrh	r2, [r4, #6]
 80a0584:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0588:	d005      	beq.n	80a0596 <_ZN7LSM9DS18initGyroEv+0x22>
 80a058a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a058e:	d104      	bne.n	80a059a <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0590:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0594:	e001      	b.n	80a059a <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0596:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a059a:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a059c:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a059e:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a05a2:	431a      	orrs	r2, r3
 80a05a4:	4620      	mov	r0, r4
 80a05a6:	f7ff ffd1 	bl	80a054c <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a05aa:	2200      	movs	r2, #0
 80a05ac:	2111      	movs	r1, #17
 80a05ae:	4620      	mov	r0, r4
 80a05b0:	f7ff ffcc 	bl	80a054c <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a05b4:	7aa3      	ldrb	r3, [r4, #10]
 80a05b6:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a05b8:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a05ba:	bf14      	ite	ne
 80a05bc:	2280      	movne	r2, #128	; 0x80
 80a05be:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a05c0:	b12b      	cbz	r3, 80a05ce <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a05c2:	7b23      	ldrb	r3, [r4, #12]
 80a05c4:	f003 030f 	and.w	r3, r3, #15
 80a05c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a05cc:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a05ce:	2112      	movs	r1, #18
 80a05d0:	4620      	mov	r0, r4
 80a05d2:	f7ff ffbb 	bl	80a054c <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a05d6:	7ce3      	ldrb	r3, [r4, #19]
 80a05d8:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a05da:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a05dc:	bf0c      	ite	eq
 80a05de:	2200      	moveq	r2, #0
 80a05e0:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a05e2:	b113      	cbz	r3, 80a05ea <_ZN7LSM9DS18initGyroEv+0x76>
 80a05e4:	f042 0210 	orr.w	r2, r2, #16
 80a05e8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a05ea:	7c63      	ldrb	r3, [r4, #17]
 80a05ec:	b10b      	cbz	r3, 80a05f2 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a05ee:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a05f2:	7d23      	ldrb	r3, [r4, #20]
 80a05f4:	b10b      	cbz	r3, 80a05fa <_ZN7LSM9DS18initGyroEv+0x86>
 80a05f6:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a05fa:	211e      	movs	r1, #30
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	f7ff ffa5 	bl	80a054c <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0602:	7b63      	ldrb	r3, [r4, #13]
 80a0604:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0606:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0608:	bf0c      	ite	eq
 80a060a:	2200      	moveq	r2, #0
 80a060c:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a060e:	b113      	cbz	r3, 80a0616 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0610:	f042 0210 	orr.w	r2, r2, #16
 80a0614:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0616:	7be3      	ldrb	r3, [r4, #15]
 80a0618:	b10b      	cbz	r3, 80a061e <_ZN7LSM9DS18initGyroEv+0xaa>
 80a061a:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a061e:	4620      	mov	r0, r4
}
 80a0620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0624:	2113      	movs	r1, #19
 80a0626:	f7ff bf91 	b.w	80a054c <_ZN7LSM9DS111xgWriteByteEhh>

080a062a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a062a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a062c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a062e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0630:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0632:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0634:	bf0c      	ite	eq
 80a0636:	2200      	moveq	r2, #0
 80a0638:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a063a:	b113      	cbz	r3, 80a0642 <_ZN7LSM9DS19initAccelEv+0x18>
 80a063c:	f042 0210 	orr.w	r2, r2, #16
 80a0640:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0642:	7e63      	ldrb	r3, [r4, #25]
 80a0644:	b10b      	cbz	r3, 80a064a <_ZN7LSM9DS19initAccelEv+0x20>
 80a0646:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a064a:	211f      	movs	r1, #31
 80a064c:	4620      	mov	r0, r4
 80a064e:	f7ff ff7d 	bl	80a054c <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0652:	7da2      	ldrb	r2, [r4, #22]
 80a0654:	b112      	cbz	r2, 80a065c <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0656:	7e22      	ldrb	r2, [r4, #24]
 80a0658:	0152      	lsls	r2, r2, #5
 80a065a:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a065c:	7de3      	ldrb	r3, [r4, #23]
 80a065e:	2b08      	cmp	r3, #8
 80a0660:	d006      	beq.n	80a0670 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0662:	2b10      	cmp	r3, #16
 80a0664:	d007      	beq.n	80a0676 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0666:	2b04      	cmp	r3, #4
 80a0668:	d107      	bne.n	80a067a <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a066a:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a066e:	e004      	b.n	80a067a <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0670:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0674:	e001      	b.n	80a067a <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0676:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a067a:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a067e:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0680:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0682:	bfa2      	ittt	ge
 80a0684:	f003 0303 	andge.w	r3, r3, #3
 80a0688:	431a      	orrge	r2, r3
 80a068a:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a068e:	4620      	mov	r0, r4
 80a0690:	f7ff ff5c 	bl	80a054c <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0694:	7f62      	ldrb	r2, [r4, #29]
 80a0696:	b12a      	cbz	r2, 80a06a4 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0698:	7fa2      	ldrb	r2, [r4, #30]
 80a069a:	0152      	lsls	r2, r2, #5
 80a069c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a06a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a06a4:	4620      	mov	r0, r4
}
 80a06a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a06aa:	2121      	movs	r1, #33	; 0x21
 80a06ac:	f7ff bf4e 	b.w	80a054c <_ZN7LSM9DS111xgWriteByteEhh>

080a06b0 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a06b0:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a06b2:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a06b4:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a06b6:	2a01      	cmp	r2, #1
 80a06b8:	d105      	bne.n	80a06c6 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a06ba:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a06bc:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a06be:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a06c2:	f7ff bf28 	b.w	80a0516 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a06c6:	b92a      	cbnz	r2, 80a06d4 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a06c8:	460a      	mov	r2, r1
}
 80a06ca:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a06cc:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a06d0:	f7ff bec8 	b.w	80a0464 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a06d4:	bc10      	pop	{r4}
 80a06d6:	4770      	bx	lr

080a06d8 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a06d8:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a06da:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a06de:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a06e0:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a06e2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a06e6:	bf08      	it	eq
 80a06e8:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a06ea:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a06ee:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a06f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a06f6:	bf18      	it	ne
 80a06f8:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a06fa:	009b      	lsls	r3, r3, #2
 80a06fc:	f003 031c 	and.w	r3, r3, #28
 80a0700:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0702:	431a      	orrs	r2, r3
 80a0704:	2120      	movs	r1, #32
 80a0706:	f7ff ffd3 	bl	80a06b0 <_ZN7LSM9DS110mWriteByteEhh>
 80a070a:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a070e:	4620      	mov	r0, r4
 80a0710:	3b08      	subs	r3, #8
 80a0712:	b2db      	uxtb	r3, r3
 80a0714:	2b08      	cmp	r3, #8
 80a0716:	bf96      	itet	ls
 80a0718:	4a12      	ldrls	r2, [pc, #72]	; (80a0764 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a071a:	2200      	movhi	r2, #0
 80a071c:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a071e:	2121      	movs	r1, #33	; 0x21
 80a0720:	f7ff ffc6 	bl	80a06b0 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0724:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0728:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a072a:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a072c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0730:	bf0c      	ite	eq
 80a0732:	2200      	moveq	r2, #0
 80a0734:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0736:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a073a:	431a      	orrs	r2, r3
 80a073c:	2122      	movs	r1, #34	; 0x22
 80a073e:	f7ff ffb7 	bl	80a06b0 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0742:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0746:	4620      	mov	r0, r4
 80a0748:	0092      	lsls	r2, r2, #2
 80a074a:	f002 020c 	and.w	r2, r2, #12
 80a074e:	2123      	movs	r1, #35	; 0x23
 80a0750:	f7ff ffae 	bl	80a06b0 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0754:	4620      	mov	r0, r4
}
 80a0756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a075a:	2200      	movs	r2, #0
 80a075c:	2124      	movs	r1, #36	; 0x24
 80a075e:	f7ff bfa7 	b.w	80a06b0 <_ZN7LSM9DS110mWriteByteEhh>
 80a0762:	bf00      	nop
 80a0764:	080a26e8 	.word	0x080a26e8

080a0768 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0768:	b538      	push	{r3, r4, r5, lr}
 80a076a:	460c      	mov	r4, r1
 80a076c:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a076e:	f001 faeb 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0772:	4621      	mov	r1, r4
 80a0774:	f000 fbca 	bl	80a0f0c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0778:	f001 fae6 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a077c:	6803      	ldr	r3, [r0, #0]
 80a077e:	4629      	mov	r1, r5
 80a0780:	689b      	ldr	r3, [r3, #8]
 80a0782:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0784:	f001 fae0 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0788:	2100      	movs	r1, #0
 80a078a:	f000 fbc3 	bl	80a0f14 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a078e:	f001 fadb 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0792:	2201      	movs	r2, #1
 80a0794:	4621      	mov	r1, r4
 80a0796:	f000 fbb6 	bl	80a0f06 <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a079a:	f001 fad5 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a079e:	6803      	ldr	r3, [r0, #0]
 80a07a0:	695b      	ldr	r3, [r3, #20]
 80a07a2:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a07a4:	b2c0      	uxtb	r0, r0
 80a07a6:	bd38      	pop	{r3, r4, r5, pc}

080a07a8 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a07a8:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07aa:	7801      	ldrb	r1, [r0, #0]
 80a07ac:	2901      	cmp	r1, #1
 80a07ae:	d103      	bne.n	80a07b8 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a07b0:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a07b4:	f7ff bfd8 	b.w	80a0768 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a07b8:	b919      	cbnz	r1, 80a07c2 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a07ba:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a07be:	f7ff be97 	b.w	80a04f0 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a07c2:	2000      	movs	r0, #0
 80a07c4:	4770      	bx	lr

080a07c6 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a07c6:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07c8:	7801      	ldrb	r1, [r0, #0]
 80a07ca:	2901      	cmp	r1, #1
 80a07cc:	d103      	bne.n	80a07d6 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a07ce:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a07d2:	f7ff bfc9 	b.w	80a0768 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a07d6:	b919      	cbnz	r1, 80a07e0 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a07d8:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a07dc:	f7ff be88 	b.w	80a04f0 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a07e0:	4770      	bx	lr

080a07e2 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a07e2:	b538      	push	{r3, r4, r5, lr}
 80a07e4:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a07e6:	7843      	ldrb	r3, [r0, #1]
 80a07e8:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a07ec:	7883      	ldrb	r3, [r0, #2]
 80a07ee:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a07f2:	f7ff fde9 	bl	80a03c8 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a07f6:	f7ff fdb2 	bl	80a035e <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a07fa:	4620      	mov	r0, r4
 80a07fc:	f7ff fdc6 	bl	80a038c <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0800:	4620      	mov	r0, r4
 80a0802:	f7ff fdb7 	bl	80a0374 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0806:	7823      	ldrb	r3, [r4, #0]
 80a0808:	2b01      	cmp	r3, #1
 80a080a:	d103      	bne.n	80a0814 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a080c:	4620      	mov	r0, r4
 80a080e:	f7ff fe7b 	bl	80a0508 <_ZN7LSM9DS17initI2CEv>
 80a0812:	e003      	b.n	80a081c <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0814:	b913      	cbnz	r3, 80a081c <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0816:	4620      	mov	r0, r4
 80a0818:	f7ff fdfa 	bl	80a0410 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a081c:	210f      	movs	r1, #15
 80a081e:	4620      	mov	r0, r4
 80a0820:	f7ff ffd1 	bl	80a07c6 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0824:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0826:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0828:	4620      	mov	r0, r4
 80a082a:	f7ff ffbd 	bl	80a07a8 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a082e:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0832:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0836:	b205      	sxth	r5, r0
 80a0838:	429d      	cmp	r5, r3
 80a083a:	d10a      	bne.n	80a0852 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a083c:	4620      	mov	r0, r4
 80a083e:	f7ff fe99 	bl	80a0574 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0842:	4620      	mov	r0, r4
 80a0844:	f7ff fef1 	bl	80a062a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0848:	4620      	mov	r0, r4
 80a084a:	f7ff ff45 	bl	80a06d8 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a084e:	4628      	mov	r0, r5
 80a0850:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0852:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0854:	bd38      	pop	{r3, r4, r5, pc}

080a0856 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a0856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a085a:	4690      	mov	r8, r2
 80a085c:	460c      	mov	r4, r1
 80a085e:	461d      	mov	r5, r3
 80a0860:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a0864:	f000 f8da 	bl	80a0a1c <HAL_Timer_Get_Milli_Seconds>
 80a0868:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a086a:	f001 fa6d 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a086e:	4621      	mov	r1, r4
 80a0870:	f000 fb4c 	bl	80a0f0c <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0874:	f001 fa68 	bl	80a1d48 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0878:	6803      	ldr	r3, [r0, #0]
 80a087a:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a087e:	689b      	ldr	r3, [r3, #8]
 80a0880:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0882:	f001 fa61 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0886:	2100      	movs	r1, #0
 80a0888:	f000 fb44 	bl	80a0f14 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a088c:	f001 fa5c 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a0890:	4621      	mov	r1, r4
 80a0892:	4632      	mov	r2, r6
 80a0894:	f000 fb37 	bl	80a0f06 <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0898:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a089a:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a089e:	42b4      	cmp	r4, r6
 80a08a0:	da1a      	bge.n	80a08d8 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a08a2:	f001 fa51 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a08a6:	6803      	ldr	r3, [r0, #0]
 80a08a8:	691b      	ldr	r3, [r3, #16]
 80a08aa:	4798      	blx	r3
 80a08ac:	b140      	cbz	r0, 80a08c0 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a08ae:	f001 fa4b 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a08b2:	6803      	ldr	r3, [r0, #0]
 80a08b4:	f104 0801 	add.w	r8, r4, #1
 80a08b8:	695b      	ldr	r3, [r3, #20]
 80a08ba:	4798      	blx	r3
 80a08bc:	5528      	strb	r0, [r5, r4]
 80a08be:	4644      	mov	r4, r8
 80a08c0:	f000 f8ac 	bl	80a0a1c <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a08c4:	42b8      	cmp	r0, r7
 80a08c6:	d9ea      	bls.n	80a089e <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a08c8:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a08ca:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a08cc:	1b62      	subs	r2, r4, r5
 80a08ce:	4296      	cmp	r6, r2
 80a08d0:	dd05      	ble.n	80a08de <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a08d2:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a08d6:	e7f9      	b.n	80a08cc <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a08d8:	2001      	movs	r0, #1
 80a08da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a08de:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a08e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a08e4 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a08e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a08e6:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a08e8:	7801      	ldrb	r1, [r0, #0]
 80a08ea:	2901      	cmp	r1, #1
 80a08ec:	d107      	bne.n	80a08fe <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a08ee:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a08f2:	9300      	str	r3, [sp, #0]
 80a08f4:	4613      	mov	r3, r2
 80a08f6:	462a      	mov	r2, r5
 80a08f8:	f7ff ffad 	bl	80a0856 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a08fc:	e007      	b.n	80a090e <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a08fe:	b931      	cbnz	r1, 80a090e <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0900:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0904:	9300      	str	r3, [sp, #0]
 80a0906:	4613      	mov	r3, r2
 80a0908:	462a      	mov	r2, r5
 80a090a:	f7ff fdc5 	bl	80a0498 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a090e:	b003      	add	sp, #12
 80a0910:	bd30      	pop	{r4, r5, pc}

080a0912 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0912:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0914:	2306      	movs	r3, #6
 80a0916:	466a      	mov	r2, sp
 80a0918:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a091a:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a091c:	f7ff ffe2 	bl	80a08e4 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0920:	b330      	cbz	r0, 80a0970 <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0922:	f89d 3000 	ldrb.w	r3, [sp]
 80a0926:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a092a:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a092e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0932:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0936:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a093a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a093e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0942:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0944:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0948:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a094c:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a094e:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0950:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0952:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0954:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0956:	b15d      	cbz	r5, 80a0970 <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0958:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a095c:	1b49      	subs	r1, r1, r5
 80a095e:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0960:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0964:	1a52      	subs	r2, r2, r1
 80a0966:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0968:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a096c:	1a9b      	subs	r3, r3, r2
 80a096e:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0970:	b003      	add	sp, #12
 80a0972:	bd30      	pop	{r4, r5, pc}

080a0974 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0976:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0978:	7801      	ldrb	r1, [r0, #0]
 80a097a:	2901      	cmp	r1, #1
 80a097c:	d107      	bne.n	80a098e <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a097e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0982:	9300      	str	r3, [sp, #0]
 80a0984:	4613      	mov	r3, r2
 80a0986:	462a      	mov	r2, r5
 80a0988:	f7ff ff65 	bl	80a0856 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a098c:	e007      	b.n	80a099e <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a098e:	b931      	cbnz	r1, 80a099e <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a0990:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0994:	9300      	str	r3, [sp, #0]
 80a0996:	4613      	mov	r3, r2
 80a0998:	462a      	mov	r2, r5
 80a099a:	f7ff fd7d 	bl	80a0498 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a099e:	b003      	add	sp, #12
 80a09a0:	bd30      	pop	{r4, r5, pc}

080a09a2 <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a09a2:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a09a4:	2306      	movs	r3, #6
 80a09a6:	466a      	mov	r2, sp
 80a09a8:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a09aa:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a09ac:	f7ff ffe2 	bl	80a0974 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a09b0:	b1a0      	cbz	r0, 80a09dc <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a09b2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a09b6:	f89d 3000 	ldrb.w	r3, [sp]
 80a09ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a09be:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a09c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a09c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a09c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a09cc:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a09ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a09d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a09d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a09da:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a09dc:	b002      	add	sp, #8
 80a09de:	bd10      	pop	{r4, pc}

080a09e0 <_GLOBAL__sub_I_magSensitivity>:
 80a09e0:	f000 b824 	b.w	80a0a2c <HAL_Pin_Map>

080a09e4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	f000 f821 	bl	80a0a2c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a09ea:	f000 f81f 	bl	80a0a2c <HAL_Pin_Map>
 80a09ee:	4b01      	ldr	r3, [pc, #4]	; (80a09f4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a09f0:	6018      	str	r0, [r3, #0]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	2000017c 	.word	0x2000017c

080a09f8 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a09f8:	f000 b818 	b.w	80a0a2c <HAL_Pin_Map>

080a09fc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <os_mutex_create+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601d0 	.word	0x080601d0

080a0a0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <HAL_RNG_GetRandomNumber+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	685b      	ldr	r3, [r3, #4]
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	0806019c 	.word	0x0806019c

080a0a1c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	695b      	ldr	r3, [r3, #20]
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	0806019c 	.word	0x0806019c

080a0a2c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <HAL_Pin_Map+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	681b      	ldr	r3, [r3, #0]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601b0 	.word	0x080601b0

080a0a3c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <HAL_Pin_Mode+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	689b      	ldr	r3, [r3, #8]
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601b0 	.word	0x080601b0

080a0a4c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <HAL_Get_Pin_Mode+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	68db      	ldr	r3, [r3, #12]
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601b0 	.word	0x080601b0

080a0a5c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <HAL_GPIO_Write+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	691b      	ldr	r3, [r3, #16]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601b0 	.word	0x080601b0

080a0a6c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <HAL_I2C_Begin+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601ac 	.word	0x080601ac

080a0a7c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <HAL_I2C_Request_Data+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601ac 	.word	0x080601ac

080a0a8c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <HAL_I2C_Begin_Transmission+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601ac 	.word	0x080601ac

080a0a9c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <HAL_I2C_End_Transmission+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601ac 	.word	0x080601ac

080a0aac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <HAL_I2C_Write_Data+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601ac 	.word	0x080601ac

080a0abc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b02      	ldr	r3, [pc, #8]	; (80a0ac8 <HAL_I2C_Available_Data+0xc>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ac4:	9301      	str	r3, [sp, #4]
 80a0ac6:	bd08      	pop	{r3, pc}
 80a0ac8:	080601ac 	.word	0x080601ac

080a0acc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0acc:	b508      	push	{r3, lr}
 80a0ace:	4b02      	ldr	r3, [pc, #8]	; (80a0ad8 <HAL_I2C_Read_Data+0xc>)
 80a0ad0:	681b      	ldr	r3, [r3, #0]
 80a0ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0ad4:	9301      	str	r3, [sp, #4]
 80a0ad6:	bd08      	pop	{r3, pc}
 80a0ad8:	080601ac 	.word	0x080601ac

080a0adc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0adc:	b508      	push	{r3, lr}
 80a0ade:	4b02      	ldr	r3, [pc, #8]	; (80a0ae8 <HAL_I2C_Peek_Data+0xc>)
 80a0ae0:	681b      	ldr	r3, [r3, #0]
 80a0ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0ae4:	9301      	str	r3, [sp, #4]
 80a0ae6:	bd08      	pop	{r3, pc}
 80a0ae8:	080601ac 	.word	0x080601ac

080a0aec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0aec:	b508      	push	{r3, lr}
 80a0aee:	4b02      	ldr	r3, [pc, #8]	; (80a0af8 <HAL_I2C_Flush_Data+0xc>)
 80a0af0:	681b      	ldr	r3, [r3, #0]
 80a0af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0af4:	9301      	str	r3, [sp, #4]
 80a0af6:	bd08      	pop	{r3, pc}
 80a0af8:	080601ac 	.word	0x080601ac

080a0afc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0afc:	b508      	push	{r3, lr}
 80a0afe:	4b02      	ldr	r3, [pc, #8]	; (80a0b08 <HAL_I2C_Is_Enabled+0xc>)
 80a0b00:	681b      	ldr	r3, [r3, #0]
 80a0b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0b04:	9301      	str	r3, [sp, #4]
 80a0b06:	bd08      	pop	{r3, pc}
 80a0b08:	080601ac 	.word	0x080601ac

080a0b0c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0b0c:	b508      	push	{r3, lr}
 80a0b0e:	4b03      	ldr	r3, [pc, #12]	; (80a0b1c <HAL_I2C_Init+0x10>)
 80a0b10:	681b      	ldr	r3, [r3, #0]
 80a0b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0b16:	9301      	str	r3, [sp, #4]
 80a0b18:	bd08      	pop	{r3, pc}
 80a0b1a:	0000      	.short	0x0000
 80a0b1c:	080601ac 	.word	0x080601ac

080a0b20 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <socket_handle_valid+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	685b      	ldr	r3, [r3, #4]
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601bc 	.word	0x080601bc

080a0b30 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <socket_create+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	689b      	ldr	r3, [r3, #8]
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601bc 	.word	0x080601bc

080a0b40 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b02      	ldr	r3, [pc, #8]	; (80a0b4c <socket_receivefrom+0xc>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	695b      	ldr	r3, [r3, #20]
 80a0b48:	9301      	str	r3, [sp, #4]
 80a0b4a:	bd08      	pop	{r3, pc}
 80a0b4c:	080601bc 	.word	0x080601bc

080a0b50 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0b50:	b508      	push	{r3, lr}
 80a0b52:	4b02      	ldr	r3, [pc, #8]	; (80a0b5c <socket_sendto+0xc>)
 80a0b54:	681b      	ldr	r3, [r3, #0]
 80a0b56:	69db      	ldr	r3, [r3, #28]
 80a0b58:	9301      	str	r3, [sp, #4]
 80a0b5a:	bd08      	pop	{r3, pc}
 80a0b5c:	080601bc 	.word	0x080601bc

080a0b60 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0b60:	b508      	push	{r3, lr}
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <socket_close+0xc>)
 80a0b64:	681b      	ldr	r3, [r3, #0]
 80a0b66:	6a1b      	ldr	r3, [r3, #32]
 80a0b68:	9301      	str	r3, [sp, #4]
 80a0b6a:	bd08      	pop	{r3, pc}
 80a0b6c:	080601bc 	.word	0x080601bc

080a0b70 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <socket_handle_invalid+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601bc 	.word	0x080601bc

080a0b80 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <HAL_SPI_Begin+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	681b      	ldr	r3, [r3, #0]
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601b4 	.word	0x080601b4

080a0b90 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <HAL_SPI_Set_Bit_Order+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	689b      	ldr	r3, [r3, #8]
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601b4 	.word	0x080601b4

080a0ba0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <HAL_SPI_Set_Data_Mode+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	68db      	ldr	r3, [r3, #12]
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601b4 	.word	0x080601b4

080a0bb0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <HAL_SPI_Set_Clock_Divider+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	691b      	ldr	r3, [r3, #16]
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601b4 	.word	0x080601b4

080a0bc0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <HAL_SPI_Send_Receive_Data+0xc>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	695b      	ldr	r3, [r3, #20]
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	bd08      	pop	{r3, pc}
 80a0bcc:	080601b4 	.word	0x080601b4

080a0bd0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0bd0:	b508      	push	{r3, lr}
 80a0bd2:	4b02      	ldr	r3, [pc, #8]	; (80a0bdc <HAL_SPI_Init+0xc>)
 80a0bd4:	681b      	ldr	r3, [r3, #0]
 80a0bd6:	69db      	ldr	r3, [r3, #28]
 80a0bd8:	9301      	str	r3, [sp, #4]
 80a0bda:	bd08      	pop	{r3, pc}
 80a0bdc:	080601b4 	.word	0x080601b4

080a0be0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0be0:	b508      	push	{r3, lr}
 80a0be2:	4b02      	ldr	r3, [pc, #8]	; (80a0bec <HAL_SPI_Is_Enabled+0xc>)
 80a0be4:	681b      	ldr	r3, [r3, #0]
 80a0be6:	6a1b      	ldr	r3, [r3, #32]
 80a0be8:	9301      	str	r3, [sp, #4]
 80a0bea:	bd08      	pop	{r3, pc}
 80a0bec:	080601b4 	.word	0x080601b4

080a0bf0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0bf0:	b508      	push	{r3, lr}
 80a0bf2:	4b02      	ldr	r3, [pc, #8]	; (80a0bfc <HAL_SPI_Info+0xc>)
 80a0bf4:	681b      	ldr	r3, [r3, #0]
 80a0bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0bf8:	9301      	str	r3, [sp, #4]
 80a0bfa:	bd08      	pop	{r3, pc}
 80a0bfc:	080601b4 	.word	0x080601b4

080a0c00 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0c00:	b508      	push	{r3, lr}
 80a0c02:	4b02      	ldr	r3, [pc, #8]	; (80a0c0c <HAL_USART_Init+0xc>)
 80a0c04:	681b      	ldr	r3, [r3, #0]
 80a0c06:	699b      	ldr	r3, [r3, #24]
 80a0c08:	9301      	str	r3, [sp, #4]
 80a0c0a:	bd08      	pop	{r3, pc}
 80a0c0c:	080601c4 	.word	0x080601c4

080a0c10 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0c10:	b508      	push	{r3, lr}
 80a0c12:	4b02      	ldr	r3, [pc, #8]	; (80a0c1c <HAL_USART_Write_Data+0xc>)
 80a0c14:	681b      	ldr	r3, [r3, #0]
 80a0c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c18:	9301      	str	r3, [sp, #4]
 80a0c1a:	bd08      	pop	{r3, pc}
 80a0c1c:	080601c4 	.word	0x080601c4

080a0c20 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0c20:	b508      	push	{r3, lr}
 80a0c22:	4b02      	ldr	r3, [pc, #8]	; (80a0c2c <HAL_USART_Available_Data+0xc>)
 80a0c24:	681b      	ldr	r3, [r3, #0]
 80a0c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0c28:	9301      	str	r3, [sp, #4]
 80a0c2a:	bd08      	pop	{r3, pc}
 80a0c2c:	080601c4 	.word	0x080601c4

080a0c30 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0c30:	b508      	push	{r3, lr}
 80a0c32:	4b02      	ldr	r3, [pc, #8]	; (80a0c3c <HAL_USART_Read_Data+0xc>)
 80a0c34:	681b      	ldr	r3, [r3, #0]
 80a0c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c38:	9301      	str	r3, [sp, #4]
 80a0c3a:	bd08      	pop	{r3, pc}
 80a0c3c:	080601c4 	.word	0x080601c4

080a0c40 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0c40:	b508      	push	{r3, lr}
 80a0c42:	4b02      	ldr	r3, [pc, #8]	; (80a0c4c <HAL_USART_Peek_Data+0xc>)
 80a0c44:	681b      	ldr	r3, [r3, #0]
 80a0c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c48:	9301      	str	r3, [sp, #4]
 80a0c4a:	bd08      	pop	{r3, pc}
 80a0c4c:	080601c4 	.word	0x080601c4

080a0c50 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0c50:	b508      	push	{r3, lr}
 80a0c52:	4b02      	ldr	r3, [pc, #8]	; (80a0c5c <HAL_USART_Flush_Data+0xc>)
 80a0c54:	681b      	ldr	r3, [r3, #0]
 80a0c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c58:	9301      	str	r3, [sp, #4]
 80a0c5a:	bd08      	pop	{r3, pc}
 80a0c5c:	080601c4 	.word	0x080601c4

080a0c60 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0c60:	b508      	push	{r3, lr}
 80a0c62:	4b02      	ldr	r3, [pc, #8]	; (80a0c6c <HAL_USART_Is_Enabled+0xc>)
 80a0c64:	681b      	ldr	r3, [r3, #0]
 80a0c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0c68:	9301      	str	r3, [sp, #4]
 80a0c6a:	bd08      	pop	{r3, pc}
 80a0c6c:	080601c4 	.word	0x080601c4

080a0c70 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0c70:	b508      	push	{r3, lr}
 80a0c72:	4b02      	ldr	r3, [pc, #8]	; (80a0c7c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0c74:	681b      	ldr	r3, [r3, #0]
 80a0c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0c78:	9301      	str	r3, [sp, #4]
 80a0c7a:	bd08      	pop	{r3, pc}
 80a0c7c:	080601c4 	.word	0x080601c4

080a0c80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0c80:	b508      	push	{r3, lr}
 80a0c82:	4b02      	ldr	r3, [pc, #8]	; (80a0c8c <HAL_USB_USART_Init+0xc>)
 80a0c84:	681b      	ldr	r3, [r3, #0]
 80a0c86:	681b      	ldr	r3, [r3, #0]
 80a0c88:	9301      	str	r3, [sp, #4]
 80a0c8a:	bd08      	pop	{r3, pc}
 80a0c8c:	080601d8 	.word	0x080601d8

080a0c90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0c90:	b508      	push	{r3, lr}
 80a0c92:	4b02      	ldr	r3, [pc, #8]	; (80a0c9c <HAL_USB_USART_Available_Data+0xc>)
 80a0c94:	681b      	ldr	r3, [r3, #0]
 80a0c96:	691b      	ldr	r3, [r3, #16]
 80a0c98:	9301      	str	r3, [sp, #4]
 80a0c9a:	bd08      	pop	{r3, pc}
 80a0c9c:	080601d8 	.word	0x080601d8

080a0ca0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0ca0:	b508      	push	{r3, lr}
 80a0ca2:	4b02      	ldr	r3, [pc, #8]	; (80a0cac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0ca4:	681b      	ldr	r3, [r3, #0]
 80a0ca6:	695b      	ldr	r3, [r3, #20]
 80a0ca8:	9301      	str	r3, [sp, #4]
 80a0caa:	bd08      	pop	{r3, pc}
 80a0cac:	080601d8 	.word	0x080601d8

080a0cb0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cb0:	b508      	push	{r3, lr}
 80a0cb2:	4b02      	ldr	r3, [pc, #8]	; (80a0cbc <HAL_USB_USART_Receive_Data+0xc>)
 80a0cb4:	681b      	ldr	r3, [r3, #0]
 80a0cb6:	699b      	ldr	r3, [r3, #24]
 80a0cb8:	9301      	str	r3, [sp, #4]
 80a0cba:	bd08      	pop	{r3, pc}
 80a0cbc:	080601d8 	.word	0x080601d8

080a0cc0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cc0:	b508      	push	{r3, lr}
 80a0cc2:	4b02      	ldr	r3, [pc, #8]	; (80a0ccc <HAL_USB_USART_Send_Data+0xc>)
 80a0cc4:	681b      	ldr	r3, [r3, #0]
 80a0cc6:	69db      	ldr	r3, [r3, #28]
 80a0cc8:	9301      	str	r3, [sp, #4]
 80a0cca:	bd08      	pop	{r3, pc}
 80a0ccc:	080601d8 	.word	0x080601d8

080a0cd0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0cd0:	b508      	push	{r3, lr}
 80a0cd2:	4b02      	ldr	r3, [pc, #8]	; (80a0cdc <HAL_USB_USART_Flush_Data+0xc>)
 80a0cd4:	681b      	ldr	r3, [r3, #0]
 80a0cd6:	6a1b      	ldr	r3, [r3, #32]
 80a0cd8:	9301      	str	r3, [sp, #4]
 80a0cda:	bd08      	pop	{r3, pc}
 80a0cdc:	080601d8 	.word	0x080601d8

080a0ce0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0ce0:	b508      	push	{r3, lr}
 80a0ce2:	4b02      	ldr	r3, [pc, #8]	; (80a0cec <HAL_USB_USART_Is_Enabled+0xc>)
 80a0ce4:	681b      	ldr	r3, [r3, #0]
 80a0ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ce8:	9301      	str	r3, [sp, #4]
 80a0cea:	bd08      	pop	{r3, pc}
 80a0cec:	080601d8 	.word	0x080601d8

080a0cf0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0cf0:	b508      	push	{r3, lr}
 80a0cf2:	4b02      	ldr	r3, [pc, #8]	; (80a0cfc <inet_gethostbyname+0xc>)
 80a0cf4:	681b      	ldr	r3, [r3, #0]
 80a0cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0cf8:	9301      	str	r3, [sp, #4]
 80a0cfa:	bd08      	pop	{r3, pc}
 80a0cfc:	080601c0 	.word	0x080601c0

080a0d00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0d00:	b508      	push	{r3, lr}
 80a0d02:	4b02      	ldr	r3, [pc, #8]	; (80a0d0c <set_system_mode+0xc>)
 80a0d04:	681b      	ldr	r3, [r3, #0]
 80a0d06:	685b      	ldr	r3, [r3, #4]
 80a0d08:	9301      	str	r3, [sp, #4]
 80a0d0a:	bd08      	pop	{r3, pc}
 80a0d0c:	080601a4 	.word	0x080601a4

080a0d10 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0d10:	b508      	push	{r3, lr}
 80a0d12:	4b02      	ldr	r3, [pc, #8]	; (80a0d1c <system_thread_set_state+0xc>)
 80a0d14:	681b      	ldr	r3, [r3, #0]
 80a0d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d18:	9301      	str	r3, [sp, #4]
 80a0d1a:	bd08      	pop	{r3, pc}
 80a0d1c:	080601a4 	.word	0x080601a4

080a0d20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0d20:	b508      	push	{r3, lr}
 80a0d22:	4b03      	ldr	r3, [pc, #12]	; (80a0d30 <system_ctrl_set_app_request_handler+0x10>)
 80a0d24:	681b      	ldr	r3, [r3, #0]
 80a0d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0d2a:	9301      	str	r3, [sp, #4]
 80a0d2c:	bd08      	pop	{r3, pc}
 80a0d2e:	0000      	.short	0x0000
 80a0d30:	080601a4 	.word	0x080601a4

080a0d34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b03      	ldr	r3, [pc, #12]	; (80a0d44 <system_ctrl_set_result+0x10>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d3e:	9301      	str	r3, [sp, #4]
 80a0d40:	bd08      	pop	{r3, pc}
 80a0d42:	0000      	.short	0x0000
 80a0d44:	080601a4 	.word	0x080601a4

080a0d48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b02      	ldr	r3, [pc, #8]	; (80a0d54 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d50:	9301      	str	r3, [sp, #4]
 80a0d52:	bd08      	pop	{r3, pc}
 80a0d54:	080601cc 	.word	0x080601cc

080a0d58 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b02      	ldr	r3, [pc, #8]	; (80a0d64 <network_config+0xc>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	681b      	ldr	r3, [r3, #0]
 80a0d60:	9301      	str	r3, [sp, #4]
 80a0d62:	bd08      	pop	{r3, pc}
 80a0d64:	080601c8 	.word	0x080601c8

080a0d68 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d68:	b508      	push	{r3, lr}
 80a0d6a:	4b02      	ldr	r3, [pc, #8]	; (80a0d74 <network_connect+0xc>)
 80a0d6c:	681b      	ldr	r3, [r3, #0]
 80a0d6e:	685b      	ldr	r3, [r3, #4]
 80a0d70:	9301      	str	r3, [sp, #4]
 80a0d72:	bd08      	pop	{r3, pc}
 80a0d74:	080601c8 	.word	0x080601c8

080a0d78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0d78:	b508      	push	{r3, lr}
 80a0d7a:	4b02      	ldr	r3, [pc, #8]	; (80a0d84 <network_connecting+0xc>)
 80a0d7c:	681b      	ldr	r3, [r3, #0]
 80a0d7e:	689b      	ldr	r3, [r3, #8]
 80a0d80:	9301      	str	r3, [sp, #4]
 80a0d82:	bd08      	pop	{r3, pc}
 80a0d84:	080601c8 	.word	0x080601c8

080a0d88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d88:	b508      	push	{r3, lr}
 80a0d8a:	4b02      	ldr	r3, [pc, #8]	; (80a0d94 <network_disconnect+0xc>)
 80a0d8c:	681b      	ldr	r3, [r3, #0]
 80a0d8e:	68db      	ldr	r3, [r3, #12]
 80a0d90:	9301      	str	r3, [sp, #4]
 80a0d92:	bd08      	pop	{r3, pc}
 80a0d94:	080601c8 	.word	0x080601c8

080a0d98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d98:	b508      	push	{r3, lr}
 80a0d9a:	4b02      	ldr	r3, [pc, #8]	; (80a0da4 <network_ready+0xc>)
 80a0d9c:	681b      	ldr	r3, [r3, #0]
 80a0d9e:	691b      	ldr	r3, [r3, #16]
 80a0da0:	9301      	str	r3, [sp, #4]
 80a0da2:	bd08      	pop	{r3, pc}
 80a0da4:	080601c8 	.word	0x080601c8

080a0da8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <network_on+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	695b      	ldr	r3, [r3, #20]
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601c8 	.word	0x080601c8

080a0db8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <network_off+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	699b      	ldr	r3, [r3, #24]
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	080601c8 	.word	0x080601c8

080a0dc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <network_listen+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	69db      	ldr	r3, [r3, #28]
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	080601c8 	.word	0x080601c8

080a0dd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <network_listening+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	6a1b      	ldr	r3, [r3, #32]
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	080601c8 	.word	0x080601c8

080a0de8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <network_set_listen_timeout+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601c8 	.word	0x080601c8

080a0df8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <network_get_listen_timeout+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601c8 	.word	0x080601c8

080a0e08 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <network_set_hostname+0xc>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0e10:	9301      	str	r3, [sp, #4]
 80a0e12:	bd08      	pop	{r3, pc}
 80a0e14:	080601c8 	.word	0x080601c8

080a0e18 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a0e18:	b508      	push	{r3, lr}
 80a0e1a:	4b02      	ldr	r3, [pc, #8]	; (80a0e24 <network_get_hostname+0xc>)
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	bd08      	pop	{r3, pc}
 80a0e24:	080601c8 	.word	0x080601c8

080a0e28 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0e28:	b508      	push	{r3, lr}
 80a0e2a:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <malloc+0xc>)
 80a0e2c:	681b      	ldr	r3, [r3, #0]
 80a0e2e:	681b      	ldr	r3, [r3, #0]
 80a0e30:	9301      	str	r3, [sp, #4]
 80a0e32:	bd08      	pop	{r3, pc}
 80a0e34:	080601a0 	.word	0x080601a0

080a0e38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b02      	ldr	r3, [pc, #8]	; (80a0e44 <free+0xc>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	685b      	ldr	r3, [r3, #4]
 80a0e40:	9301      	str	r3, [sp, #4]
 80a0e42:	bd08      	pop	{r3, pc}
 80a0e44:	080601a0 	.word	0x080601a0

080a0e48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0e48:	b508      	push	{r3, lr}
 80a0e4a:	4b02      	ldr	r3, [pc, #8]	; (80a0e54 <realloc+0xc>)
 80a0e4c:	681b      	ldr	r3, [r3, #0]
 80a0e4e:	689b      	ldr	r3, [r3, #8]
 80a0e50:	9301      	str	r3, [sp, #4]
 80a0e52:	bd08      	pop	{r3, pc}
 80a0e54:	080601a0 	.word	0x080601a0

080a0e58 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e58:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0e5a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e5c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0e5e:	b113      	cbz	r3, 80a0e66 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e60:	2203      	movs	r2, #3
 80a0e62:	4601      	mov	r1, r0
 80a0e64:	4798      	blx	r3
    }
 80a0e66:	4620      	mov	r0, r4
 80a0e68:	bd10      	pop	{r4, pc}

080a0e6a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0e6a:	4770      	bx	lr

080a0e6c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e6e:	4606      	mov	r6, r0
 80a0e70:	4615      	mov	r5, r2
 80a0e72:	460c      	mov	r4, r1
 80a0e74:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e76:	42bc      	cmp	r4, r7
 80a0e78:	d006      	beq.n	80a0e88 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0e7a:	6833      	ldr	r3, [r6, #0]
 80a0e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0e80:	689b      	ldr	r3, [r3, #8]
 80a0e82:	4630      	mov	r0, r6
 80a0e84:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e86:	e7f6      	b.n	80a0e76 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0e88:	4628      	mov	r0, r5
 80a0e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e8c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0e8c:	2200      	movs	r2, #0
 80a0e8e:	7c00      	ldrb	r0, [r0, #16]
 80a0e90:	f7ff be0c 	b.w	80a0aac <HAL_I2C_Write_Data>

080a0e94 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0e94:	2100      	movs	r1, #0
 80a0e96:	7c00      	ldrb	r0, [r0, #16]
 80a0e98:	f7ff be10 	b.w	80a0abc <HAL_I2C_Available_Data>

080a0e9c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0e9c:	2100      	movs	r1, #0
 80a0e9e:	7c00      	ldrb	r0, [r0, #16]
 80a0ea0:	f7ff be14 	b.w	80a0acc <HAL_I2C_Read_Data>

080a0ea4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0ea4:	2100      	movs	r1, #0
 80a0ea6:	7c00      	ldrb	r0, [r0, #16]
 80a0ea8:	f7ff be18 	b.w	80a0adc <HAL_I2C_Peek_Data>

080a0eac <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0eac:	2100      	movs	r1, #0
 80a0eae:	7c00      	ldrb	r0, [r0, #16]
 80a0eb0:	f7ff be1c 	b.w	80a0aec <HAL_I2C_Flush_Data>

080a0eb4 <_ZN7TwoWireD0Ev>:
 80a0eb4:	b510      	push	{r4, lr}
 80a0eb6:	4604      	mov	r4, r0
 80a0eb8:	2114      	movs	r1, #20
 80a0eba:	f000 ffa4 	bl	80a1e06 <_ZdlPvj>
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	bd10      	pop	{r4, pc}
	...

080a0ec4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0ec4:	b510      	push	{r4, lr}
 80a0ec6:	4604      	mov	r4, r0
 80a0ec8:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ece:	60a3      	str	r3, [r4, #8]
 80a0ed0:	4b04      	ldr	r3, [pc, #16]	; (80a0ee4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0ed2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0ed4:	7420      	strb	r0, [r4, #16]
 80a0ed6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0ed8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0eda:	f7ff fe17 	bl	80a0b0c <HAL_I2C_Init>

}
 80a0ede:	4620      	mov	r0, r4
 80a0ee0:	bd10      	pop	{r4, pc}
 80a0ee2:	bf00      	nop
 80a0ee4:	080a26fc 	.word	0x080a26fc

080a0ee8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0ee8:	2300      	movs	r3, #0
 80a0eea:	461a      	mov	r2, r3
 80a0eec:	4619      	mov	r1, r3
 80a0eee:	7c00      	ldrb	r0, [r0, #16]
 80a0ef0:	f7ff bdbc 	b.w	80a0a6c <HAL_I2C_Begin>

080a0ef4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a0ef4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a0ef6:	2400      	movs	r4, #0
 80a0ef8:	7c00      	ldrb	r0, [r0, #16]
 80a0efa:	9400      	str	r4, [sp, #0]
 80a0efc:	f7ff fdbe 	bl	80a0a7c <HAL_I2C_Request_Data>
  return result;
}
 80a0f00:	b2c0      	uxtb	r0, r0
 80a0f02:	b002      	add	sp, #8
 80a0f04:	bd10      	pop	{r4, pc}

080a0f06 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a0f06:	2301      	movs	r3, #1
 80a0f08:	f7ff bff4 	b.w	80a0ef4 <_ZN7TwoWire11requestFromEhhh>

080a0f0c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a0f0c:	2200      	movs	r2, #0
 80a0f0e:	7c00      	ldrb	r0, [r0, #16]
 80a0f10:	f7ff bdbc 	b.w	80a0a8c <HAL_I2C_Begin_Transmission>

080a0f14 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a0f14:	2200      	movs	r2, #0
 80a0f16:	7c00      	ldrb	r0, [r0, #16]
 80a0f18:	f7ff bdc0 	b.w	80a0a9c <HAL_I2C_End_Transmission>

080a0f1c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a0f1c:	2101      	movs	r1, #1
 80a0f1e:	f7ff bff9 	b.w	80a0f14 <_ZN7TwoWire15endTransmissionEh>

080a0f22 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0f22:	2100      	movs	r1, #0
 80a0f24:	7c00      	ldrb	r0, [r0, #16]
 80a0f26:	f7ff bde9 	b.w	80a0afc <HAL_I2C_Is_Enabled>

080a0f2a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f2c:	460f      	mov	r7, r1
 80a0f2e:	f100 0608 	add.w	r6, r0, #8
 80a0f32:	1d05      	adds	r5, r0, #4
 80a0f34:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0f3a:	220a      	movs	r2, #10
 80a0f3c:	4638      	mov	r0, r7
 80a0f3e:	f000 f94e 	bl	80a11de <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f42:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f44:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f46:	d007      	beq.n	80a0f58 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0f48:	2c00      	cmp	r4, #0
 80a0f4a:	d0f4      	beq.n	80a0f36 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0f4c:	212e      	movs	r1, #46	; 0x2e
 80a0f4e:	4638      	mov	r0, r7
 80a0f50:	f000 f8f2 	bl	80a1138 <_ZN5Print5printEc>
 80a0f54:	4404      	add	r4, r0
 80a0f56:	e7ee      	b.n	80a0f36 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0f58:	4620      	mov	r0, r4
 80a0f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f5c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0f5c:	b510      	push	{r4, lr}
 80a0f5e:	4604      	mov	r4, r0
 80a0f60:	4b04      	ldr	r3, [pc, #16]	; (80a0f74 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0f62:	2211      	movs	r2, #17
 80a0f64:	f840 3b04 	str.w	r3, [r0], #4
 80a0f68:	2100      	movs	r1, #0
 80a0f6a:	f001 fb0e 	bl	80a258a <memset>
{
    clear();
}
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	bd10      	pop	{r4, pc}
 80a0f72:	bf00      	nop
 80a0f74:	080a2724 	.word	0x080a2724

080a0f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0f78:	4603      	mov	r3, r0
 80a0f7a:	4a07      	ldr	r2, [pc, #28]	; (80a0f98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0f7c:	b510      	push	{r4, lr}
 80a0f7e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0f82:	f101 0210 	add.w	r2, r1, #16
 80a0f86:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0f8a:	4291      	cmp	r1, r2
 80a0f8c:	f843 4b04 	str.w	r4, [r3], #4
 80a0f90:	d1f9      	bne.n	80a0f86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0f92:	780a      	ldrb	r2, [r1, #0]
 80a0f94:	701a      	strb	r2, [r3, #0]
}
 80a0f96:	bd10      	pop	{r4, pc}
 80a0f98:	080a2724 	.word	0x080a2724

080a0f9c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0f9c:	4a02      	ldr	r2, [pc, #8]	; (80a0fa8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0f9e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0fa0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0fa2:	2204      	movs	r2, #4
 80a0fa4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0fa6:	4770      	bx	lr
 80a0fa8:	080a2724 	.word	0x080a2724

080a0fac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0fac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0fae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0fb2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0fb6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0fba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0fbe:	2304      	movs	r3, #4
 80a0fc0:	6041      	str	r1, [r0, #4]
 80a0fc2:	7503      	strb	r3, [r0, #20]
 80a0fc4:	bd10      	pop	{r4, pc}
	...

080a0fc8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0fca:	4d04      	ldr	r5, [pc, #16]	; (80a0fdc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0fcc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0fce:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0fd2:	9500      	str	r5, [sp, #0]
 80a0fd4:	f7ff ffea 	bl	80a0fac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0fd8:	b003      	add	sp, #12
 80a0fda:	bd30      	pop	{r4, r5, pc}
 80a0fdc:	080a2724 	.word	0x080a2724

080a0fe0 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0fe2:	780d      	ldrb	r5, [r1, #0]
 80a0fe4:	788b      	ldrb	r3, [r1, #2]
 80a0fe6:	784a      	ldrb	r2, [r1, #1]
 80a0fe8:	78c9      	ldrb	r1, [r1, #3]
 80a0fea:	9100      	str	r1, [sp, #0]
 80a0fec:	4629      	mov	r1, r5
 80a0fee:	f7ff ffdd 	bl	80a0fac <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0ff2:	b003      	add	sp, #12
 80a0ff4:	bd30      	pop	{r4, r5, pc}
	...

080a0ff8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0ff8:	4a01      	ldr	r2, [pc, #4]	; (80a1000 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0ffc:	601a      	str	r2, [r3, #0]
 80a0ffe:	4770      	bx	lr
 80a1000:	080a27a6 	.word	0x080a27a6
 80a1004:	20000180 	.word	0x20000180

080a1008 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1008:	2300      	movs	r3, #0
 80a100a:	461a      	mov	r2, r3
 80a100c:	6840      	ldr	r0, [r0, #4]
 80a100e:	f7ff beab 	b.w	80a0d68 <network_connect>

080a1012 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1012:	2200      	movs	r2, #0
 80a1014:	2102      	movs	r1, #2
 80a1016:	6840      	ldr	r0, [r0, #4]
 80a1018:	f7ff beb6 	b.w	80a0d88 <network_disconnect>

080a101c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a101c:	2200      	movs	r2, #0
 80a101e:	4611      	mov	r1, r2
 80a1020:	6840      	ldr	r0, [r0, #4]
 80a1022:	f7ff bea9 	b.w	80a0d78 <network_connecting>

080a1026 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1026:	2200      	movs	r2, #0
 80a1028:	4611      	mov	r1, r2
 80a102a:	6840      	ldr	r0, [r0, #4]
 80a102c:	f7ff beb4 	b.w	80a0d98 <network_ready>

080a1030 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1030:	2300      	movs	r3, #0
 80a1032:	461a      	mov	r2, r3
 80a1034:	4619      	mov	r1, r3
 80a1036:	6840      	ldr	r0, [r0, #4]
 80a1038:	f7ff beb6 	b.w	80a0da8 <network_on>

080a103c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a103c:	2300      	movs	r3, #0
 80a103e:	461a      	mov	r2, r3
 80a1040:	4619      	mov	r1, r3
 80a1042:	6840      	ldr	r0, [r0, #4]
 80a1044:	f7ff beb8 	b.w	80a0db8 <network_off>

080a1048 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1048:	2200      	movs	r2, #0
 80a104a:	f081 0101 	eor.w	r1, r1, #1
 80a104e:	6840      	ldr	r0, [r0, #4]
 80a1050:	f7ff beba 	b.w	80a0dc8 <network_listen>

080a1054 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1054:	2200      	movs	r2, #0
 80a1056:	6840      	ldr	r0, [r0, #4]
 80a1058:	f7ff bec6 	b.w	80a0de8 <network_set_listen_timeout>

080a105c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a105c:	2200      	movs	r2, #0
 80a105e:	4611      	mov	r1, r2
 80a1060:	6840      	ldr	r0, [r0, #4]
 80a1062:	f7ff bec9 	b.w	80a0df8 <network_get_listen_timeout>

080a1066 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1066:	2200      	movs	r2, #0
 80a1068:	4611      	mov	r1, r2
 80a106a:	6840      	ldr	r0, [r0, #4]
 80a106c:	f7ff beb4 	b.w	80a0dd8 <network_listening>

080a1070 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1070:	b570      	push	{r4, r5, r6, lr}
 80a1072:	4616      	mov	r6, r2
 80a1074:	b08e      	sub	sp, #56	; 0x38
 80a1076:	4604      	mov	r4, r0
    IPAddress addr;
 80a1078:	a808      	add	r0, sp, #32
 80a107a:	f7ff ff6f 	bl	80a0f5c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a107e:	2211      	movs	r2, #17
 80a1080:	2100      	movs	r1, #0
 80a1082:	a803      	add	r0, sp, #12
 80a1084:	f001 fa81 	bl	80a258a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1088:	4630      	mov	r0, r6
 80a108a:	f001 faaf 	bl	80a25ec <strlen>
 80a108e:	2500      	movs	r5, #0
 80a1090:	4b0a      	ldr	r3, [pc, #40]	; (80a10bc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1092:	9500      	str	r5, [sp, #0]
 80a1094:	b281      	uxth	r1, r0
 80a1096:	685b      	ldr	r3, [r3, #4]
 80a1098:	aa03      	add	r2, sp, #12
 80a109a:	4630      	mov	r0, r6
 80a109c:	f7ff fe28 	bl	80a0cf0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a10a0:	b120      	cbz	r0, 80a10ac <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a10a2:	4629      	mov	r1, r5
 80a10a4:	4620      	mov	r0, r4
 80a10a6:	f7ff ff79 	bl	80a0f9c <_ZN9IPAddressC1Em>
 80a10aa:	e003      	b.n	80a10b4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a10ac:	a903      	add	r1, sp, #12
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	f7ff ff62 	bl	80a0f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a10b4:	4620      	mov	r0, r4
 80a10b6:	b00e      	add	sp, #56	; 0x38
 80a10b8:	bd70      	pop	{r4, r5, r6, pc}
 80a10ba:	bf00      	nop
 80a10bc:	20000604 	.word	0x20000604

080a10c0 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a10c0:	4b03      	ldr	r3, [pc, #12]	; (80a10d0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a10c2:	4a04      	ldr	r2, [pc, #16]	; (80a10d4 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a10c4:	2804      	cmp	r0, #4
 80a10c6:	bf0c      	ite	eq
 80a10c8:	4610      	moveq	r0, r2
 80a10ca:	4618      	movne	r0, r3
 80a10cc:	4770      	bx	lr
 80a10ce:	bf00      	nop
 80a10d0:	20000184 	.word	0x20000184
 80a10d4:	20000604 	.word	0x20000604

080a10d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a10d8:	4b02      	ldr	r3, [pc, #8]	; (80a10e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a10da:	4a03      	ldr	r2, [pc, #12]	; (80a10e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a10dc:	601a      	str	r2, [r3, #0]
 80a10de:	2200      	movs	r2, #0
 80a10e0:	605a      	str	r2, [r3, #4]
 80a10e2:	4770      	bx	lr
 80a10e4:	20000184 	.word	0x20000184
 80a10e8:	080a281c 	.word	0x080a281c

080a10ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10ee:	4606      	mov	r6, r0
 80a10f0:	460d      	mov	r5, r1
 80a10f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a10f4:	2400      	movs	r4, #0
  while (size--) {
 80a10f6:	42bd      	cmp	r5, r7
 80a10f8:	d00c      	beq.n	80a1114 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a10fa:	6833      	ldr	r3, [r6, #0]
 80a10fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1100:	689b      	ldr	r3, [r3, #8]
 80a1102:	4630      	mov	r0, r6
 80a1104:	4798      	blx	r3
     if (chunk>=0)
 80a1106:	2800      	cmp	r0, #0
 80a1108:	db01      	blt.n	80a110e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a110a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a110c:	e7f3      	b.n	80a10f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a110e:	2c00      	cmp	r4, #0
 80a1110:	bf08      	it	eq
 80a1112:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1114:	4620      	mov	r0, r4
 80a1116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1118 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1118:	b570      	push	{r4, r5, r6, lr}
 80a111a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a111c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a111e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1120:	b149      	cbz	r1, 80a1136 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1122:	f001 fa63 	bl	80a25ec <strlen>
 80a1126:	682b      	ldr	r3, [r5, #0]
 80a1128:	4602      	mov	r2, r0
 80a112a:	4621      	mov	r1, r4
 80a112c:	4628      	mov	r0, r5
    }
 80a112e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1132:	68db      	ldr	r3, [r3, #12]
 80a1134:	4718      	bx	r3
    }
 80a1136:	bd70      	pop	{r4, r5, r6, pc}

080a1138 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1138:	6803      	ldr	r3, [r0, #0]
 80a113a:	689b      	ldr	r3, [r3, #8]
 80a113c:	4718      	bx	r3

080a113e <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a113e:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a1140:	680a      	ldr	r2, [r1, #0]
 80a1142:	4601      	mov	r1, r0
 80a1144:	6812      	ldr	r2, [r2, #0]
 80a1146:	4618      	mov	r0, r3
 80a1148:	4710      	bx	r2

080a114a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a114a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a114c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a114e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1150:	f7ff fff2 	bl	80a1138 <_ZN5Print5printEc>
  n += print('\n');
 80a1154:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1156:	4604      	mov	r4, r0
  n += print('\n');
 80a1158:	4628      	mov	r0, r5
 80a115a:	f7ff ffed 	bl	80a1138 <_ZN5Print5printEc>
  return n;
}
 80a115e:	4420      	add	r0, r4
 80a1160:	bd38      	pop	{r3, r4, r5, pc}

080a1162 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1162:	b538      	push	{r3, r4, r5, lr}
 80a1164:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1166:	f7ff ffd7 	bl	80a1118 <_ZN5Print5writeEPKc>
 80a116a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a116c:	4628      	mov	r0, r5
 80a116e:	f7ff ffec 	bl	80a114a <_ZN5Print7printlnEv>
  return n;
}
 80a1172:	4420      	add	r0, r4
 80a1174:	bd38      	pop	{r3, r4, r5, pc}

080a1176 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a1176:	b538      	push	{r3, r4, r5, lr}
 80a1178:	4605      	mov	r5, r0
   size_t n = print(x);
 80a117a:	f7ff ffe0 	bl	80a113e <_ZN5Print5printERK9Printable>
 80a117e:	4604      	mov	r4, r0
   n += println();
 80a1180:	4628      	mov	r0, r5
 80a1182:	f7ff ffe2 	bl	80a114a <_ZN5Print7printlnEv>
   return n;
 }
 80a1186:	4420      	add	r0, r4
 80a1188:	bd38      	pop	{r3, r4, r5, pc}

080a118a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a118a:	2a01      	cmp	r2, #1
 80a118c:	bf98      	it	ls
 80a118e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1190:	b530      	push	{r4, r5, lr}
 80a1192:	460b      	mov	r3, r1
 80a1194:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1196:	2100      	movs	r1, #0
 80a1198:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a119c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a11a0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a11a4:	fb05 3312 	mls	r3, r5, r2, r3
 80a11a8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a11aa:	2b09      	cmp	r3, #9
 80a11ac:	bf94      	ite	ls
 80a11ae:	3330      	addls	r3, #48	; 0x30
 80a11b0:	3337      	addhi	r3, #55	; 0x37
 80a11b2:	b2db      	uxtb	r3, r3
 80a11b4:	4621      	mov	r1, r4
 80a11b6:	f804 3901 	strb.w	r3, [r4], #-1
 80a11ba:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a11bc:	2d00      	cmp	r5, #0
 80a11be:	d1ef      	bne.n	80a11a0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a11c0:	f7ff ffaa 	bl	80a1118 <_ZN5Print5writeEPKc>
}
 80a11c4:	b00b      	add	sp, #44	; 0x2c
 80a11c6:	bd30      	pop	{r4, r5, pc}

080a11c8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a11c8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a11ca:	b922      	cbnz	r2, 80a11d6 <_ZN5Print5printEmi+0xe>
 80a11cc:	6803      	ldr	r3, [r0, #0]
 80a11ce:	b2c9      	uxtb	r1, r1
 80a11d0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a11d2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a11d4:	4718      	bx	r3
  else return printNumber(n, base);
 80a11d6:	b2d2      	uxtb	r2, r2
}
 80a11d8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a11da:	f7ff bfd6 	b.w	80a118a <_ZN5Print11printNumberEmh>

080a11de <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a11de:	f7ff bff3 	b.w	80a11c8 <_ZN5Print5printEmi>

080a11e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a11e2:	b510      	push	{r4, lr}
 80a11e4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a11e6:	f7ff fe37 	bl	80a0e58 <_ZNSt14_Function_baseD1Ev>
 80a11ea:	4620      	mov	r0, r4
 80a11ec:	bd10      	pop	{r4, pc}
	...

080a11f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11f0:	4803      	ldr	r0, [pc, #12]	; (80a1200 <_GLOBAL__sub_I_RGB+0x10>)
 80a11f2:	2300      	movs	r3, #0
 80a11f4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a11f6:	4a03      	ldr	r2, [pc, #12]	; (80a1204 <_GLOBAL__sub_I_RGB+0x14>)
 80a11f8:	4903      	ldr	r1, [pc, #12]	; (80a1208 <_GLOBAL__sub_I_RGB+0x18>)
 80a11fa:	f000 bdff 	b.w	80a1dfc <__aeabi_atexit>
 80a11fe:	bf00      	nop
 80a1200:	2000018c 	.word	0x2000018c
 80a1204:	2000007c 	.word	0x2000007c
 80a1208:	080a11e3 	.word	0x080a11e3

080a120c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a120c:	4770      	bx	lr

080a120e <_ZN8SPIClassD0Ev>:
 80a120e:	b510      	push	{r4, lr}
 80a1210:	4604      	mov	r4, r0
 80a1212:	2110      	movs	r1, #16
 80a1214:	f000 fdf7 	bl	80a1e06 <_ZdlPvj>
 80a1218:	4620      	mov	r0, r4
 80a121a:	bd10      	pop	{r4, pc}

080a121c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a121c:	b570      	push	{r4, r5, r6, lr}
 80a121e:	4604      	mov	r4, r0
 80a1220:	460e      	mov	r6, r1
 80a1222:	4b07      	ldr	r3, [pc, #28]	; (80a1240 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1224:	2500      	movs	r5, #0
 80a1226:	6003      	str	r3, [r0, #0]
 80a1228:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a122c:	f7ff fbe6 	bl	80a09fc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1230:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1232:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1234:	f7ff fccc 	bl	80a0bd0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1238:	60a5      	str	r5, [r4, #8]
}
 80a123a:	4620      	mov	r0, r4
 80a123c:	bd70      	pop	{r4, r5, r6, pc}
 80a123e:	bf00      	nop
 80a1240:	080a2850 	.word	0x080a2850

080a1244 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1248:	7900      	ldrb	r0, [r0, #4]
 80a124a:	f7ff bc99 	b.w	80a0b80 <HAL_SPI_Begin>

080a124e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a124e:	7900      	ldrb	r0, [r0, #4]
 80a1250:	f7ff bc9e 	b.w	80a0b90 <HAL_SPI_Set_Bit_Order>

080a1254 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1254:	7900      	ldrb	r0, [r0, #4]
 80a1256:	f7ff bca3 	b.w	80a0ba0 <HAL_SPI_Set_Data_Mode>
	...

080a125c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a125c:	4a05      	ldr	r2, [pc, #20]	; (80a1274 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a125e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1260:	5c99      	ldrb	r1, [r3, r2]
 80a1262:	4281      	cmp	r1, r0
 80a1264:	d002      	beq.n	80a126c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a1266:	3301      	adds	r3, #1
 80a1268:	2b08      	cmp	r3, #8
 80a126a:	d1f9      	bne.n	80a1260 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a126c:	1c58      	adds	r0, r3, #1
}
 80a126e:	b2c0      	uxtb	r0, r0
 80a1270:	4770      	bx	lr
 80a1272:	bf00      	nop
 80a1274:	080a2858 	.word	0x080a2858

080a1278 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1278:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a127a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a127c:	6018      	str	r0, [r3, #0]
 80a127e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1280:	6818      	ldr	r0, [r3, #0]
 80a1282:	b2e5      	uxtb	r5, r4
 80a1284:	4288      	cmp	r0, r1
 80a1286:	d906      	bls.n	80a1296 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1288:	3401      	adds	r4, #1
 80a128a:	2c08      	cmp	r4, #8
 80a128c:	d002      	beq.n	80a1294 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a128e:	0840      	lsrs	r0, r0, #1
 80a1290:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1292:	e7f5      	b.n	80a1280 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1294:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1296:	4b02      	ldr	r3, [pc, #8]	; (80a12a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1298:	5d5b      	ldrb	r3, [r3, r5]
 80a129a:	7013      	strb	r3, [r2, #0]
 80a129c:	bd30      	pop	{r4, r5, pc}
 80a129e:	bf00      	nop
 80a12a0:	080a2858 	.word	0x080a2858

080a12a4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a12a4:	b570      	push	{r4, r5, r6, lr}
 80a12a6:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a12a8:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a12ac:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a12ae:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a12b0:	2214      	movs	r2, #20
 80a12b2:	2100      	movs	r1, #0
 80a12b4:	a803      	add	r0, sp, #12
 80a12b6:	f001 f968 	bl	80a258a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a12ba:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a12bc:	a903      	add	r1, sp, #12
 80a12be:	4630      	mov	r0, r6
 80a12c0:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a12c2:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a12c6:	f7ff fc93 	bl	80a0bf0 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a12ca:	ab02      	add	r3, sp, #8
 80a12cc:	f10d 0207 	add.w	r2, sp, #7
 80a12d0:	4629      	mov	r1, r5
 80a12d2:	9804      	ldr	r0, [sp, #16]
 80a12d4:	f7ff ffd0 	bl	80a1278 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a12d8:	7920      	ldrb	r0, [r4, #4]
 80a12da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a12de:	f7ff fc67 	bl	80a0bb0 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a12e2:	9802      	ldr	r0, [sp, #8]
 80a12e4:	b008      	add	sp, #32
 80a12e6:	bd70      	pop	{r4, r5, r6, pc}

080a12e8 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a12e8:	b538      	push	{r3, r4, r5, lr}
 80a12ea:	4604      	mov	r4, r0
    if (dividerReference)
 80a12ec:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a12ee:	4608      	mov	r0, r1
    if (dividerReference)
 80a12f0:	b14d      	cbz	r5, 80a1306 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a12f2:	f7ff ffb3 	bl	80a125c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a12f6:	2201      	movs	r2, #1
 80a12f8:	fa25 f100 	lsr.w	r1, r5, r0
 80a12fc:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a12fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1302:	f7ff bfcf 	b.w	80a12a4 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1306:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a130c:	f7ff bc50 	b.w	80a0bb0 <HAL_SPI_Set_Clock_Divider>

080a1310 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1310:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1312:	7900      	ldrb	r0, [r0, #4]
 80a1314:	f7ff fc54 	bl	80a0bc0 <HAL_SPI_Send_Receive_Data>
}
 80a1318:	b2c0      	uxtb	r0, r0
 80a131a:	bd08      	pop	{r3, pc}

080a131c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a131c:	7900      	ldrb	r0, [r0, #4]
 80a131e:	f7ff bc5f 	b.w	80a0be0 <HAL_SPI_Is_Enabled>

080a1322 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1322:	b510      	push	{r4, lr}
 80a1324:	4604      	mov	r4, r0
{
	free(buffer);
 80a1326:	6800      	ldr	r0, [r0, #0]
 80a1328:	f7ff fd86 	bl	80a0e38 <free>
}
 80a132c:	4620      	mov	r0, r4
 80a132e:	bd10      	pop	{r4, pc}

080a1330 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1330:	b510      	push	{r4, lr}
 80a1332:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1334:	6800      	ldr	r0, [r0, #0]
 80a1336:	b108      	cbz	r0, 80a133c <_ZN6String10invalidateEv+0xc>
 80a1338:	f7ff fd7e 	bl	80a0e38 <free>
	buffer = NULL;
 80a133c:	2300      	movs	r3, #0
 80a133e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1340:	60a3      	str	r3, [r4, #8]
 80a1342:	6063      	str	r3, [r4, #4]
 80a1344:	bd10      	pop	{r4, pc}

080a1346 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1346:	b538      	push	{r3, r4, r5, lr}
 80a1348:	4604      	mov	r4, r0
 80a134a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a134c:	6800      	ldr	r0, [r0, #0]
 80a134e:	3101      	adds	r1, #1
 80a1350:	f7ff fd7a 	bl	80a0e48 <realloc>
	if (newbuffer) {
 80a1354:	b110      	cbz	r0, 80a135c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1356:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a135a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a135c:	bd38      	pop	{r3, r4, r5, pc}

080a135e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a135e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1360:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1362:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1364:	b113      	cbz	r3, 80a136c <_ZN6String7reserveEj+0xe>
 80a1366:	6843      	ldr	r3, [r0, #4]
 80a1368:	428b      	cmp	r3, r1
 80a136a:	d207      	bcs.n	80a137c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a136c:	4620      	mov	r0, r4
 80a136e:	f7ff ffea 	bl	80a1346 <_ZN6String12changeBufferEj>
 80a1372:	b120      	cbz	r0, 80a137e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1374:	68a3      	ldr	r3, [r4, #8]
 80a1376:	b90b      	cbnz	r3, 80a137c <_ZN6String7reserveEj+0x1e>
 80a1378:	6822      	ldr	r2, [r4, #0]
 80a137a:	7013      	strb	r3, [r2, #0]
 80a137c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a137e:	bd10      	pop	{r4, pc}

080a1380 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1380:	b570      	push	{r4, r5, r6, lr}
 80a1382:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1384:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1386:	4604      	mov	r4, r0
 80a1388:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a138a:	f7ff ffe8 	bl	80a135e <_ZN6String7reserveEj>
 80a138e:	b918      	cbnz	r0, 80a1398 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1390:	4620      	mov	r0, r4
 80a1392:	f7ff ffcd 	bl	80a1330 <_ZN6String10invalidateEv>
		return *this;
 80a1396:	e009      	b.n	80a13ac <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1398:	462a      	mov	r2, r5
 80a139a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a139c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a139e:	6820      	ldr	r0, [r4, #0]
 80a13a0:	f001 f8e8 	bl	80a2574 <memcpy>
	buffer[len] = 0;
 80a13a4:	6822      	ldr	r2, [r4, #0]
 80a13a6:	68a3      	ldr	r3, [r4, #8]
 80a13a8:	2100      	movs	r1, #0
 80a13aa:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a13ac:	4620      	mov	r0, r4
 80a13ae:	bd70      	pop	{r4, r5, r6, pc}

080a13b0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a13b0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a13b2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a13b4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a13b6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a13b8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a13ba:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a13bc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a13be:	460d      	mov	r5, r1
 80a13c0:	b139      	cbz	r1, 80a13d2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a13c2:	4608      	mov	r0, r1
 80a13c4:	f001 f912 	bl	80a25ec <strlen>
 80a13c8:	4629      	mov	r1, r5
 80a13ca:	4602      	mov	r2, r0
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	f7ff ffd7 	bl	80a1380 <_ZN6String4copyEPKcj>
}
 80a13d2:	4620      	mov	r0, r4
 80a13d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a13d8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a13d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a13dc:	4b03      	ldr	r3, [pc, #12]	; (80a13ec <_GLOBAL__sub_I_System+0x14>)
 80a13de:	2000      	movs	r0, #0
 80a13e0:	7018      	strb	r0, [r3, #0]
 80a13e2:	8058      	strh	r0, [r3, #2]
 80a13e4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a13e6:	f7ff bc8b 	b.w	80a0d00 <set_system_mode>
 80a13ea:	bf00      	nop
 80a13ec:	2000019c 	.word	0x2000019c

080a13f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a13f0:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a13f2:	681a      	ldr	r2, [r3, #0]
 80a13f4:	4b02      	ldr	r3, [pc, #8]	; (80a1400 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a13f6:	601a      	str	r2, [r3, #0]
 80a13f8:	4770      	bx	lr
 80a13fa:	bf00      	nop
 80a13fc:	20000014 	.word	0x20000014
 80a1400:	200001a4 	.word	0x200001a4

080a1404 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1404:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1406:	6804      	ldr	r4, [r0, #0]
 80a1408:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a140a:	46a4      	mov	ip, r4
    }
 80a140c:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a140e:	4760      	bx	ip

080a1410 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1410:	6803      	ldr	r3, [r0, #0]
 80a1412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1414:	4718      	bx	r3

080a1416 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1416:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1418:	4770      	bx	lr

080a141a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a141a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a141c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a141e:	1a10      	subs	r0, r2, r0
 80a1420:	4770      	bx	lr

080a1422 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1422:	b513      	push	{r0, r1, r4, lr}
 80a1424:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1426:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1428:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a142c:	68d4      	ldr	r4, [r2, #12]
 80a142e:	4619      	mov	r1, r3
 80a1430:	2201      	movs	r2, #1
 80a1432:	47a0      	blx	r4
}
 80a1434:	b002      	add	sp, #8
 80a1436:	bd10      	pop	{r4, pc}

080a1438 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1438:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a143a:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a143c:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a143e:	691b      	ldr	r3, [r3, #16]
 80a1440:	4798      	blx	r3
 80a1442:	b128      	cbz	r0, 80a1450 <_ZN3UDP4readEv+0x18>
 80a1444:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1446:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1448:	1c59      	adds	r1, r3, #1
 80a144a:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a144c:	5cd0      	ldrb	r0, [r2, r3]
 80a144e:	bd10      	pop	{r4, pc}
 80a1450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1454:	bd10      	pop	{r4, pc}

080a1456 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1456:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1458:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a145a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a145c:	691b      	ldr	r3, [r3, #16]
 80a145e:	4798      	blx	r3
 80a1460:	b118      	cbz	r0, 80a146a <_ZN3UDP4peekEv+0x14>
 80a1462:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1464:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1466:	5cd0      	ldrb	r0, [r2, r3]
 80a1468:	bd10      	pop	{r4, pc}
 80a146a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a146e:	bd10      	pop	{r4, pc}

080a1470 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1470:	4770      	bx	lr

080a1472 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1472:	4603      	mov	r3, r0
 80a1474:	4608      	mov	r0, r1
 80a1476:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1478:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a147a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a147c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a147e:	6803      	ldr	r3, [r0, #0]
 80a1480:	1a52      	subs	r2, r2, r1
 80a1482:	68db      	ldr	r3, [r3, #12]
 80a1484:	4421      	add	r1, r4
}
 80a1486:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1488:	4718      	bx	r3

080a148a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a148a:	f1a0 0010 	sub.w	r0, r0, #16
 80a148e:	f7ff bff0 	b.w	80a1472 <_ZNK3UDP7printToER5Print>

080a1492 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1494:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1496:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1498:	460f      	mov	r7, r1
 80a149a:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a149c:	f7ff fe10 	bl	80a10c0 <_ZN5spark12NetworkClass4fromEm>
 80a14a0:	6803      	ldr	r3, [r0, #0]
 80a14a2:	68db      	ldr	r3, [r3, #12]
 80a14a4:	4798      	blx	r3
 80a14a6:	b1b8      	cbz	r0, 80a14d8 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a14a8:	2102      	movs	r1, #2
 80a14aa:	463b      	mov	r3, r7
 80a14ac:	2211      	movs	r2, #17
 80a14ae:	4608      	mov	r0, r1
 80a14b0:	9600      	str	r6, [sp, #0]
 80a14b2:	f7ff fb3d 	bl	80a0b30 <socket_create>
 80a14b6:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a14b8:	f7ff fb32 	bl	80a0b20 <socket_handle_valid>
 80a14bc:	4604      	mov	r4, r0
 80a14be:	b130      	cbz	r0, 80a14ce <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a14c0:	2300      	movs	r3, #0
 80a14c2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a14c4:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a14c6:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a14c8:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a14ca:	2001      	movs	r0, #1
 80a14cc:	e004      	b.n	80a14d8 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a14ce:	682b      	ldr	r3, [r5, #0]
 80a14d0:	4628      	mov	r0, r5
 80a14d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a14d4:	4798      	blx	r3
            bound = false;
 80a14d6:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a14d8:	b003      	add	sp, #12
 80a14da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a14dc <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a14dc:	b538      	push	{r3, r4, r5, lr}
 80a14de:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a14e0:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a14e2:	f7ff fb45 	bl	80a0b70 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a14e6:	4285      	cmp	r5, r0
 80a14e8:	d002      	beq.n	80a14f0 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a14ea:	6960      	ldr	r0, [r4, #20]
 80a14ec:	f7ff fb38 	bl	80a0b60 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a14f0:	f7ff fb3e 	bl	80a0b70 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a14f4:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a14f6:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a14f8:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a14fa:	8723      	strh	r3, [r4, #56]	; 0x38
 80a14fc:	bd38      	pop	{r3, r4, r5, pc}

080a14fe <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a14fe:	b530      	push	{r4, r5, lr}
 80a1500:	b087      	sub	sp, #28
 80a1502:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1506:	2502      	movs	r5, #2
 80a1508:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a150c:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1510:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1512:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1514:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1518:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a151c:	799c      	ldrb	r4, [r3, #6]
 80a151e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1522:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1524:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1526:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a152a:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a152e:	2310      	movs	r3, #16
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	ab02      	add	r3, sp, #8
 80a1534:	9300      	str	r3, [sp, #0]
 80a1536:	6940      	ldr	r0, [r0, #20]
 80a1538:	2300      	movs	r3, #0
 80a153a:	f7ff fb09 	bl	80a0b50 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a153e:	b007      	add	sp, #28
 80a1540:	bd30      	pop	{r4, r5, pc}

080a1542 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1542:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1544:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1546:	4605      	mov	r5, r0
 80a1548:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a154a:	b113      	cbz	r3, 80a1552 <_ZN3UDP5writeEPKhj+0x10>
 80a154c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a154e:	1a24      	subs	r4, r4, r0
 80a1550:	e000      	b.n	80a1554 <_ZN3UDP5writeEPKhj+0x12>
 80a1552:	461c      	mov	r4, r3
 80a1554:	4294      	cmp	r4, r2
 80a1556:	bf28      	it	cs
 80a1558:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a155a:	4418      	add	r0, r3
 80a155c:	4622      	mov	r2, r4
 80a155e:	f001 f809 	bl	80a2574 <memcpy>
    _offset += size;
 80a1562:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1564:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1566:	4423      	add	r3, r4
 80a1568:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a156a:	bd38      	pop	{r3, r4, r5, pc}

080a156c <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a156c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a156e:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1570:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1572:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1574:	460e      	mov	r6, r1
 80a1576:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1578:	4798      	blx	r3
 80a157a:	b188      	cbz	r0, 80a15a0 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a157c:	6823      	ldr	r3, [r4, #0]
 80a157e:	4620      	mov	r0, r4
 80a1580:	691b      	ldr	r3, [r3, #16]
 80a1582:	4798      	blx	r3
 80a1584:	4285      	cmp	r5, r0
 80a1586:	bfa8      	it	ge
 80a1588:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a158a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a158c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a158e:	462a      	mov	r2, r5
 80a1590:	4419      	add	r1, r3
 80a1592:	4630      	mov	r0, r6
 80a1594:	f000 ffee 	bl	80a2574 <memcpy>
      _offset += read;
 80a1598:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a159a:	442b      	add	r3, r5
 80a159c:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a159e:	e001      	b.n	80a15a4 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a15a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a15a4:	4628      	mov	r0, r5
 80a15a6:	bd70      	pop	{r4, r5, r6, pc}

080a15a8 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a15aa:	4604      	mov	r4, r0
 80a15ac:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a15ae:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a15b0:	460d      	mov	r5, r1
 80a15b2:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a15b4:	f7ff fd84 	bl	80a10c0 <_ZN5spark12NetworkClass4fromEm>
 80a15b8:	6803      	ldr	r3, [r0, #0]
 80a15ba:	68db      	ldr	r3, [r3, #12]
 80a15bc:	4798      	blx	r3
 80a15be:	b310      	cbz	r0, 80a1606 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a15c0:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a15c2:	f7ff fad5 	bl	80a0b70 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a15c6:	4287      	cmp	r7, r0
 80a15c8:	d01d      	beq.n	80a1606 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a15ca:	b1e5      	cbz	r5, 80a1606 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a15cc:	ab08      	add	r3, sp, #32
 80a15ce:	2210      	movs	r2, #16
 80a15d0:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	eb0d 0302 	add.w	r3, sp, r2
 80a15da:	9300      	str	r3, [sp, #0]
 80a15dc:	4629      	mov	r1, r5
 80a15de:	2300      	movs	r3, #0
 80a15e0:	4632      	mov	r2, r6
 80a15e2:	6960      	ldr	r0, [r4, #20]
 80a15e4:	f7ff faac 	bl	80a0b40 <socket_receivefrom>
        if (ret >= 0)
 80a15e8:	1e05      	subs	r5, r0, #0
 80a15ea:	db0e      	blt.n	80a160a <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a15ec:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a15f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a15f4:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a15f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a15fa:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a15fc:	f104 001c 	add.w	r0, r4, #28
 80a1600:	f7ff fcee 	bl	80a0fe0 <_ZN9IPAddressaSEPKh>
 80a1604:	e001      	b.n	80a160a <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1606:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a160a:	4628      	mov	r0, r5
 80a160c:	b009      	add	sp, #36	; 0x24
 80a160e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1610 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1614:	4606      	mov	r6, r0
 80a1616:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1618:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a161a:	460d      	mov	r5, r1
 80a161c:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a161e:	f7ff fd4f 	bl	80a10c0 <_ZN5spark12NetworkClass4fromEm>
 80a1622:	6803      	ldr	r3, [r0, #0]
 80a1624:	68db      	ldr	r3, [r3, #12]
 80a1626:	4798      	blx	r3
 80a1628:	b1f8      	cbz	r0, 80a166a <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a162a:	4628      	mov	r0, r5
 80a162c:	f000 ffde 	bl	80a25ec <strlen>
 80a1630:	2400      	movs	r4, #0
 80a1632:	b281      	uxth	r1, r0
 80a1634:	9400      	str	r4, [sp, #0]
 80a1636:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1638:	aa03      	add	r2, sp, #12
 80a163a:	4628      	mov	r0, r5
 80a163c:	f7ff fb58 	bl	80a0cf0 <inet_gethostbyname>
 80a1640:	b990      	cbnz	r0, 80a1668 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a1642:	a903      	add	r1, sp, #12
 80a1644:	a808      	add	r0, sp, #32
 80a1646:	f7ff fc97 	bl	80a0f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a164a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a164c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a164e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1650:	4b07      	ldr	r3, [pc, #28]	; (80a1670 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a1652:	ad09      	add	r5, sp, #36	; 0x24
 80a1654:	930e      	str	r3, [sp, #56]	; 0x38
 80a1656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a165a:	682b      	ldr	r3, [r5, #0]
 80a165c:	4642      	mov	r2, r8
 80a165e:	7023      	strb	r3, [r4, #0]
 80a1660:	a90e      	add	r1, sp, #56	; 0x38
 80a1662:	4630      	mov	r0, r6
 80a1664:	47b8      	blx	r7
 80a1666:	e000      	b.n	80a166a <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1668:	4620      	mov	r0, r4
}
 80a166a:	b014      	add	sp, #80	; 0x50
 80a166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1670:	080a2724 	.word	0x080a2724

080a1674 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1674:	b570      	push	{r4, r5, r6, lr}
 80a1676:	4604      	mov	r4, r0
 80a1678:	4606      	mov	r6, r0
 80a167a:	4b05      	ldr	r3, [pc, #20]	; (80a1690 <_ZN3UDP8remoteIPEv+0x1c>)
 80a167c:	f101 0520 	add.w	r5, r1, #32
 80a1680:	f844 3b04 	str.w	r3, [r4], #4
 80a1684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1688:	682b      	ldr	r3, [r5, #0]
 80a168a:	4630      	mov	r0, r6
 80a168c:	7023      	strb	r3, [r4, #0]
 80a168e:	bd70      	pop	{r4, r5, r6, pc}
 80a1690:	080a2724 	.word	0x080a2724

080a1694 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1694:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1696:	4694      	mov	ip, r2
 80a1698:	468e      	mov	lr, r1
 80a169a:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a169c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a169e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a16a0:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a16a2:	4a09      	ldr	r2, [pc, #36]	; (80a16c8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a16a4:	ac03      	add	r4, sp, #12
 80a16a6:	1d1d      	adds	r5, r3, #4
 80a16a8:	9202      	str	r2, [sp, #8]
 80a16aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a16ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a16ae:	682b      	ldr	r3, [r5, #0]
 80a16b0:	4662      	mov	r2, ip
 80a16b2:	7023      	strb	r3, [r4, #0]
 80a16b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a16b8:	4671      	mov	r1, lr
 80a16ba:	9300      	str	r3, [sp, #0]
 80a16bc:	4630      	mov	r0, r6
 80a16be:	ab02      	add	r3, sp, #8
 80a16c0:	47b8      	blx	r7
    }
 80a16c2:	b009      	add	sp, #36	; 0x24
 80a16c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a16c6:	bf00      	nop
 80a16c8:	080a2724 	.word	0x080a2724

080a16cc <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a16ce:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a16d0:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a16d2:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a16d4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a16d6:	4b0d      	ldr	r3, [pc, #52]	; (80a170c <_ZN3UDP9endPacketEv+0x40>)
 80a16d8:	ad03      	add	r5, sp, #12
 80a16da:	f100 0620 	add.w	r6, r0, #32
 80a16de:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a16e2:	9302      	str	r3, [sp, #8]
 80a16e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a16e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a16e8:	6833      	ldr	r3, [r6, #0]
 80a16ea:	4672      	mov	r2, lr
 80a16ec:	702b      	strb	r3, [r5, #0]
 80a16ee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a16f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a16f2:	9300      	str	r3, [sp, #0]
 80a16f4:	4620      	mov	r0, r4
 80a16f6:	ab02      	add	r3, sp, #8
 80a16f8:	47b8      	blx	r7
 80a16fa:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a16fc:	6823      	ldr	r3, [r4, #0]
 80a16fe:	4620      	mov	r0, r4
 80a1700:	69db      	ldr	r3, [r3, #28]
 80a1702:	4798      	blx	r3
    return result;
}
 80a1704:	4628      	mov	r0, r5
 80a1706:	b009      	add	sp, #36	; 0x24
 80a1708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a170a:	bf00      	nop
 80a170c:	080a2724 	.word	0x080a2724

080a1710 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1710:	b538      	push	{r3, r4, r5, lr}
 80a1712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1716:	6083      	str	r3, [r0, #8]
 80a1718:	4b0b      	ldr	r3, [pc, #44]	; (80a1748 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a171a:	2500      	movs	r5, #0
 80a171c:	f103 0208 	add.w	r2, r3, #8
 80a1720:	336c      	adds	r3, #108	; 0x6c
 80a1722:	6002      	str	r2, [r0, #0]
 80a1724:	6103      	str	r3, [r0, #16]
 80a1726:	6045      	str	r5, [r0, #4]
 80a1728:	4604      	mov	r4, r0
 80a172a:	f7ff fa21 	bl	80a0b70 <socket_handle_invalid>
 80a172e:	6160      	str	r0, [r4, #20]
 80a1730:	f104 001c 	add.w	r0, r4, #28
 80a1734:	f7ff fc12 	bl	80a0f5c <_ZN9IPAddressC1Ev>
 80a1738:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a173c:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a173e:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1740:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1742:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1744:	4620      	mov	r0, r4
 80a1746:	bd38      	pop	{r3, r4, r5, pc}
 80a1748:	080a288c 	.word	0x080a288c

080a174c <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a174c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a174e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1752:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1754:	b123      	cbz	r3, 80a1760 <_ZN3UDP13releaseBufferEv+0x14>
 80a1756:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1758:	b110      	cbz	r0, 80a1760 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a175a:	2101      	movs	r1, #1
 80a175c:	f000 fb53 	bl	80a1e06 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1760:	2300      	movs	r3, #0
 80a1762:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1764:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1768:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a176a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a176c:	8723      	strh	r3, [r4, #56]	; 0x38
 80a176e:	bd10      	pop	{r4, pc}

080a1770 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1770:	b570      	push	{r4, r5, r6, lr}
 80a1772:	4604      	mov	r4, r0
 80a1774:	4616      	mov	r6, r2
 80a1776:	460d      	mov	r5, r1
    releaseBuffer();
 80a1778:	f7ff ffe8 	bl	80a174c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a177c:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a177e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1780:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a1782:	b93e      	cbnz	r6, 80a1794 <_ZN3UDP9setBufferEjPh+0x24>
 80a1784:	b135      	cbz	r5, 80a1794 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1786:	4628      	mov	r0, r5
 80a1788:	f7fe fc87 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a178c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a178e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1790:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1794:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1796:	b103      	cbz	r3, 80a179a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1798:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a179a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a179c:	3000      	adds	r0, #0
 80a179e:	bf18      	it	ne
 80a17a0:	2001      	movne	r0, #1
 80a17a2:	bd70      	pop	{r4, r5, r6, pc}

080a17a4 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a17a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17a6:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a17a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a17aa:	4605      	mov	r5, r0
 80a17ac:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a17ae:	b91a      	cbnz	r2, 80a17b8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a17b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a17b2:	b109      	cbz	r1, 80a17b8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a17b4:	f7ff ffdc 	bl	80a1770 <_ZN3UDP9setBufferEjPh>
 80a17b8:	f105 0620 	add.w	r6, r5, #32
 80a17bc:	3404      	adds	r4, #4
 80a17be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a17c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a17c2:	6823      	ldr	r3, [r4, #0]
 80a17c4:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a17c6:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a17c8:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a17ca:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a17cc:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a17ce:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a17d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17d2 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a17d2:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a17d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a17d6:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a17d8:	b91a      	cbnz	r2, 80a17e2 <_ZN3UDP11parsePacketEm+0x10>
 80a17da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a17dc:	b109      	cbz	r1, 80a17e2 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a17de:	f7ff ffc7 	bl	80a1770 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a17e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a17e4:	2300      	movs	r3, #0
 80a17e6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a17e8:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a17ea:	b141      	cbz	r1, 80a17fe <_ZN3UDP11parsePacketEm+0x2c>
 80a17ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a17ee:	b132      	cbz	r2, 80a17fe <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a17f0:	6820      	ldr	r0, [r4, #0]
 80a17f2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a17f4:	4620      	mov	r0, r4
 80a17f6:	47a8      	blx	r5
        if (result>0) {
 80a17f8:	2800      	cmp	r0, #0
            _total = result;
 80a17fa:	bfc8      	it	gt
 80a17fc:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a17fe:	6823      	ldr	r3, [r4, #0]
 80a1800:	4620      	mov	r0, r4
}
 80a1802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a1806:	691b      	ldr	r3, [r3, #16]
 80a1808:	4718      	bx	r3

080a180a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a180a:	4770      	bx	lr

080a180c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a180c:	7441      	strb	r1, [r0, #17]
 80a180e:	4770      	bx	lr

080a1810 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1810:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1812:	7c00      	ldrb	r0, [r0, #16]
 80a1814:	f7ff fa2c 	bl	80a0c70 <HAL_USART_Available_Data_For_Write>
}
 80a1818:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a181c:	bd08      	pop	{r3, pc}

080a181e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a181e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1820:	7c00      	ldrb	r0, [r0, #16]
 80a1822:	f7ff f9fd 	bl	80a0c20 <HAL_USART_Available_Data>
}
 80a1826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a182a:	bd08      	pop	{r3, pc}

080a182c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a182c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a182e:	7c00      	ldrb	r0, [r0, #16]
 80a1830:	f7ff fa06 	bl	80a0c40 <HAL_USART_Peek_Data>
}
 80a1834:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1838:	bf28      	it	cs
 80a183a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a183e:	bd08      	pop	{r3, pc}

080a1840 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1840:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1842:	7c00      	ldrb	r0, [r0, #16]
 80a1844:	f7ff f9f4 	bl	80a0c30 <HAL_USART_Read_Data>
}
 80a1848:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a184c:	bf28      	it	cs
 80a184e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1852:	bd08      	pop	{r3, pc}

080a1854 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1854:	7c00      	ldrb	r0, [r0, #16]
 80a1856:	f7ff b9fb 	b.w	80a0c50 <HAL_USART_Flush_Data>

080a185a <_ZN11USARTSerialD0Ev>:
 80a185a:	b510      	push	{r4, lr}
 80a185c:	4604      	mov	r4, r0
 80a185e:	2114      	movs	r1, #20
 80a1860:	f000 fad1 	bl	80a1e06 <_ZdlPvj>
 80a1864:	4620      	mov	r0, r4
 80a1866:	bd10      	pop	{r4, pc}

080a1868 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1868:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a186a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a186c:	4604      	mov	r4, r0
 80a186e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1870:	b925      	cbnz	r5, 80a187c <_ZN11USARTSerial5writeEh+0x14>
 80a1872:	7c00      	ldrb	r0, [r0, #16]
 80a1874:	f7ff f9fc 	bl	80a0c70 <HAL_USART_Available_Data_For_Write>
 80a1878:	2800      	cmp	r0, #0
 80a187a:	dd05      	ble.n	80a1888 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a187c:	4631      	mov	r1, r6
 80a187e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1884:	f7ff b9c4 	b.w	80a0c10 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1888:	4628      	mov	r0, r5
 80a188a:	bd70      	pop	{r4, r5, r6, pc}

080a188c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a188c:	b510      	push	{r4, lr}
 80a188e:	4604      	mov	r4, r0
 80a1890:	4608      	mov	r0, r1
 80a1892:	4611      	mov	r1, r2
 80a1894:	2200      	movs	r2, #0
 80a1896:	6062      	str	r2, [r4, #4]
 80a1898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a189c:	60a2      	str	r2, [r4, #8]
 80a189e:	4a05      	ldr	r2, [pc, #20]	; (80a18b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a18a0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a18a2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a18a4:	2201      	movs	r2, #1
 80a18a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a18a8:	461a      	mov	r2, r3
 80a18aa:	f7ff f9a9 	bl	80a0c00 <HAL_USART_Init>
}
 80a18ae:	4620      	mov	r0, r4
 80a18b0:	bd10      	pop	{r4, pc}
 80a18b2:	bf00      	nop
 80a18b4:	080a2904 	.word	0x080a2904

080a18b8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a18b8:	7c00      	ldrb	r0, [r0, #16]
 80a18ba:	f7ff b9d1 	b.w	80a0c60 <HAL_USART_Is_Enabled>
	...

080a18c0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a18c0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a18c2:	4d0c      	ldr	r5, [pc, #48]	; (80a18f4 <_Z22__fetch_global_Serial1v+0x34>)
 80a18c4:	6829      	ldr	r1, [r5, #0]
 80a18c6:	f011 0401 	ands.w	r4, r1, #1
 80a18ca:	d111      	bne.n	80a18f0 <_Z22__fetch_global_Serial1v+0x30>
 80a18cc:	4628      	mov	r0, r5
 80a18ce:	f7fe fbe8 	bl	80a00a2 <__cxa_guard_acquire>
 80a18d2:	b168      	cbz	r0, 80a18f0 <_Z22__fetch_global_Serial1v+0x30>
 80a18d4:	4a08      	ldr	r2, [pc, #32]	; (80a18f8 <_Z22__fetch_global_Serial1v+0x38>)
 80a18d6:	4621      	mov	r1, r4
 80a18d8:	4b08      	ldr	r3, [pc, #32]	; (80a18fc <_Z22__fetch_global_Serial1v+0x3c>)
 80a18da:	4809      	ldr	r0, [pc, #36]	; (80a1900 <_Z22__fetch_global_Serial1v+0x40>)
 80a18dc:	f7ff ffd6 	bl	80a188c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a18e0:	4628      	mov	r0, r5
 80a18e2:	f7fe fbe3 	bl	80a00ac <__cxa_guard_release>
 80a18e6:	4a07      	ldr	r2, [pc, #28]	; (80a1904 <_Z22__fetch_global_Serial1v+0x44>)
 80a18e8:	4907      	ldr	r1, [pc, #28]	; (80a1908 <_Z22__fetch_global_Serial1v+0x48>)
 80a18ea:	4805      	ldr	r0, [pc, #20]	; (80a1900 <_Z22__fetch_global_Serial1v+0x40>)
 80a18ec:	f000 fa86 	bl	80a1dfc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a18f0:	4803      	ldr	r0, [pc, #12]	; (80a1900 <_Z22__fetch_global_Serial1v+0x40>)
 80a18f2:	bd38      	pop	{r3, r4, r5, pc}
 80a18f4:	20000240 	.word	0x20000240
 80a18f8:	20000244 	.word	0x20000244
 80a18fc:	200001bc 	.word	0x200001bc
 80a1900:	200001a8 	.word	0x200001a8
 80a1904:	2000007c 	.word	0x2000007c
 80a1908:	080a180b 	.word	0x080a180b

080a190c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a190c:	7441      	strb	r1, [r0, #17]
 80a190e:	4770      	bx	lr

080a1910 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1910:	4770      	bx	lr

080a1912 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1912:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1914:	2100      	movs	r1, #0
 80a1916:	7c00      	ldrb	r0, [r0, #16]
 80a1918:	f7ff f9ca 	bl	80a0cb0 <HAL_USB_USART_Receive_Data>
}
 80a191c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1920:	bf28      	it	cs
 80a1922:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1926:	bd08      	pop	{r3, pc}

080a1928 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1928:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a192a:	2101      	movs	r1, #1
 80a192c:	7c00      	ldrb	r0, [r0, #16]
 80a192e:	f7ff f9bf 	bl	80a0cb0 <HAL_USB_USART_Receive_Data>
}
 80a1932:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1936:	bf28      	it	cs
 80a1938:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a193c:	bd08      	pop	{r3, pc}

080a193e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a193e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1940:	7c00      	ldrb	r0, [r0, #16]
 80a1942:	f7ff f9ad 	bl	80a0ca0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1946:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a194a:	bd08      	pop	{r3, pc}

080a194c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a194c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a194e:	7c00      	ldrb	r0, [r0, #16]
 80a1950:	f7ff f99e 	bl	80a0c90 <HAL_USB_USART_Available_Data>
}
 80a1954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1958:	bd08      	pop	{r3, pc}

080a195a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a195a:	7c00      	ldrb	r0, [r0, #16]
 80a195c:	f7ff b9b8 	b.w	80a0cd0 <HAL_USB_USART_Flush_Data>

080a1960 <_ZN9USBSerialD0Ev>:
 80a1960:	b510      	push	{r4, lr}
 80a1962:	4604      	mov	r4, r0
 80a1964:	2114      	movs	r1, #20
 80a1966:	f000 fa4e 	bl	80a1e06 <_ZdlPvj>
 80a196a:	4620      	mov	r0, r4
 80a196c:	bd10      	pop	{r4, pc}

080a196e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a196e:	b538      	push	{r3, r4, r5, lr}
 80a1970:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1972:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1974:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1976:	f7ff f993 	bl	80a0ca0 <HAL_USB_USART_Available_Data_For_Write>
 80a197a:	2800      	cmp	r0, #0
 80a197c:	dc01      	bgt.n	80a1982 <_ZN9USBSerial5writeEh+0x14>
 80a197e:	7c60      	ldrb	r0, [r4, #17]
 80a1980:	b128      	cbz	r0, 80a198e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1982:	4629      	mov	r1, r5
 80a1984:	7c20      	ldrb	r0, [r4, #16]
 80a1986:	f7ff f99b 	bl	80a0cc0 <HAL_USB_USART_Send_Data>
 80a198a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a198e:	bd38      	pop	{r3, r4, r5, pc}

080a1990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1990:	b510      	push	{r4, lr}
 80a1992:	4604      	mov	r4, r0
 80a1994:	2300      	movs	r3, #0
 80a1996:	6063      	str	r3, [r4, #4]
 80a1998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a199c:	60a3      	str	r3, [r4, #8]
 80a199e:	4b05      	ldr	r3, [pc, #20]	; (80a19b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a19a0:	4608      	mov	r0, r1
 80a19a2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a19a4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a19a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a19a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a19aa:	4611      	mov	r1, r2
 80a19ac:	f7ff f968 	bl	80a0c80 <HAL_USB_USART_Init>
}
 80a19b0:	4620      	mov	r0, r4
 80a19b2:	bd10      	pop	{r4, pc}
 80a19b4:	080a2934 	.word	0x080a2934

080a19b8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a19b8:	7c00      	ldrb	r0, [r0, #16]
 80a19ba:	f7ff b991 	b.w	80a0ce0 <HAL_USB_USART_Is_Enabled>

080a19be <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a19be:	f7ff bffb 	b.w	80a19b8 <_ZN9USBSerial9isEnabledEv>
	...

080a19c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a19c4:	b510      	push	{r4, lr}
 80a19c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a19c8:	2214      	movs	r2, #20
 80a19ca:	2100      	movs	r1, #0
 80a19cc:	f000 fddd 	bl	80a258a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a19d0:	4b05      	ldr	r3, [pc, #20]	; (80a19e8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a19d2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a19d4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a19d6:	4b05      	ldr	r3, [pc, #20]	; (80a19ec <_Z19acquireSerialBufferv+0x28>)
 80a19d8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a19da:	f240 1301 	movw	r3, #257	; 0x101
 80a19de:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a19e0:	2381      	movs	r3, #129	; 0x81
 80a19e2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a19e4:	bd10      	pop	{r4, pc}
 80a19e6:	bf00      	nop
 80a19e8:	2000034d 	.word	0x2000034d
 80a19ec:	200002cc 	.word	0x200002cc

080a19f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a19f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a19f2:	4d0e      	ldr	r5, [pc, #56]	; (80a1a2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a19f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a19f6:	a801      	add	r0, sp, #4
 80a19f8:	f7ff ffe4 	bl	80a19c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a19fc:	6829      	ldr	r1, [r5, #0]
 80a19fe:	f011 0401 	ands.w	r4, r1, #1
 80a1a02:	d110      	bne.n	80a1a26 <_Z16_fetch_usbserialv+0x36>
 80a1a04:	4628      	mov	r0, r5
 80a1a06:	f7fe fb4c 	bl	80a00a2 <__cxa_guard_acquire>
 80a1a0a:	b160      	cbz	r0, 80a1a26 <_Z16_fetch_usbserialv+0x36>
 80a1a0c:	aa01      	add	r2, sp, #4
 80a1a0e:	4621      	mov	r1, r4
 80a1a10:	4807      	ldr	r0, [pc, #28]	; (80a1a30 <_Z16_fetch_usbserialv+0x40>)
 80a1a12:	f7ff ffbd 	bl	80a1990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1a16:	4628      	mov	r0, r5
 80a1a18:	f7fe fb48 	bl	80a00ac <__cxa_guard_release>
 80a1a1c:	4a05      	ldr	r2, [pc, #20]	; (80a1a34 <_Z16_fetch_usbserialv+0x44>)
 80a1a1e:	4906      	ldr	r1, [pc, #24]	; (80a1a38 <_Z16_fetch_usbserialv+0x48>)
 80a1a20:	4803      	ldr	r0, [pc, #12]	; (80a1a30 <_Z16_fetch_usbserialv+0x40>)
 80a1a22:	f000 f9eb 	bl	80a1dfc <__aeabi_atexit>
	return _usbserial;
}
 80a1a26:	4802      	ldr	r0, [pc, #8]	; (80a1a30 <_Z16_fetch_usbserialv+0x40>)
 80a1a28:	b007      	add	sp, #28
 80a1a2a:	bd30      	pop	{r4, r5, pc}
 80a1a2c:	200002c8 	.word	0x200002c8
 80a1a30:	20000450 	.word	0x20000450
 80a1a34:	2000007c 	.word	0x2000007c
 80a1a38:	080a1911 	.word	0x080a1911

080a1a3c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1a3c:	b510      	push	{r4, lr}
 80a1a3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1a40:	2214      	movs	r2, #20
 80a1a42:	2100      	movs	r1, #0
 80a1a44:	f000 fda1 	bl	80a258a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1a48:	4b05      	ldr	r3, [pc, #20]	; (80a1a60 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1a4a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1a4c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1a4e:	4b05      	ldr	r3, [pc, #20]	; (80a1a64 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1a50:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1a52:	f240 1301 	movw	r3, #257	; 0x101
 80a1a56:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1a58:	2381      	movs	r3, #129	; 0x81
 80a1a5a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1a5c:	bd10      	pop	{r4, pc}
 80a1a5e:	bf00      	nop
 80a1a60:	20000500 	.word	0x20000500
 80a1a64:	20000468 	.word	0x20000468

080a1a68 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1a68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1a6a:	4c0e      	ldr	r4, [pc, #56]	; (80a1aa4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1a6c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1a6e:	a801      	add	r0, sp, #4
 80a1a70:	f7ff ffe4 	bl	80a1a3c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1a74:	6823      	ldr	r3, [r4, #0]
 80a1a76:	07db      	lsls	r3, r3, #31
 80a1a78:	d410      	bmi.n	80a1a9c <_Z17_fetch_usbserial1v+0x34>
 80a1a7a:	4620      	mov	r0, r4
 80a1a7c:	f7fe fb11 	bl	80a00a2 <__cxa_guard_acquire>
 80a1a80:	b160      	cbz	r0, 80a1a9c <_Z17_fetch_usbserial1v+0x34>
 80a1a82:	aa01      	add	r2, sp, #4
 80a1a84:	2101      	movs	r1, #1
 80a1a86:	4808      	ldr	r0, [pc, #32]	; (80a1aa8 <_Z17_fetch_usbserial1v+0x40>)
 80a1a88:	f7ff ff82 	bl	80a1990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1a8c:	4620      	mov	r0, r4
 80a1a8e:	f7fe fb0d 	bl	80a00ac <__cxa_guard_release>
 80a1a92:	4a06      	ldr	r2, [pc, #24]	; (80a1aac <_Z17_fetch_usbserial1v+0x44>)
 80a1a94:	4906      	ldr	r1, [pc, #24]	; (80a1ab0 <_Z17_fetch_usbserial1v+0x48>)
 80a1a96:	4804      	ldr	r0, [pc, #16]	; (80a1aa8 <_Z17_fetch_usbserial1v+0x40>)
 80a1a98:	f000 f9b0 	bl	80a1dfc <__aeabi_atexit>
  return _usbserial1;
}
 80a1a9c:	4802      	ldr	r0, [pc, #8]	; (80a1aa8 <_Z17_fetch_usbserial1v+0x40>)
 80a1a9e:	b006      	add	sp, #24
 80a1aa0:	bd10      	pop	{r4, pc}
 80a1aa2:	bf00      	nop
 80a1aa4:	20000464 	.word	0x20000464
 80a1aa8:	200004ec 	.word	0x200004ec
 80a1aac:	2000007c 	.word	0x2000007c
 80a1ab0:	080a1911 	.word	0x080a1911

080a1ab4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1ab4:	2200      	movs	r2, #0
 80a1ab6:	4611      	mov	r1, r2
 80a1ab8:	6840      	ldr	r0, [r0, #4]
 80a1aba:	f7ff b96d 	b.w	80a0d98 <network_ready>

080a1abe <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ac0:	4616      	mov	r6, r2
 80a1ac2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1ac4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1ac6:	460f      	mov	r7, r1
 80a1ac8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1aca:	2100      	movs	r1, #0
 80a1acc:	a803      	add	r0, sp, #12
 80a1ace:	f000 fd5c 	bl	80a258a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ad2:	4630      	mov	r0, r6
 80a1ad4:	f000 fd8a 	bl	80a25ec <strlen>
 80a1ad8:	2500      	movs	r5, #0
 80a1ada:	9500      	str	r5, [sp, #0]
 80a1adc:	b281      	uxth	r1, r0
 80a1ade:	687b      	ldr	r3, [r7, #4]
 80a1ae0:	aa03      	add	r2, sp, #12
 80a1ae2:	4630      	mov	r0, r6
 80a1ae4:	f7ff f904 	bl	80a0cf0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ae8:	b120      	cbz	r0, 80a1af4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1aea:	4629      	mov	r1, r5
 80a1aec:	4620      	mov	r0, r4
 80a1aee:	f7ff fa55 	bl	80a0f9c <_ZN9IPAddressC1Em>
 80a1af2:	e003      	b.n	80a1afc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1af4:	a903      	add	r1, sp, #12
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	f7ff fa3e 	bl	80a0f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1afc:	4620      	mov	r0, r4
 80a1afe:	b009      	add	sp, #36	; 0x24
 80a1b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1b02:	2200      	movs	r2, #0
 80a1b04:	4611      	mov	r1, r2
 80a1b06:	6840      	ldr	r0, [r0, #4]
 80a1b08:	f7ff b966 	b.w	80a0dd8 <network_listening>

080a1b0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1b0c:	2200      	movs	r2, #0
 80a1b0e:	4611      	mov	r1, r2
 80a1b10:	6840      	ldr	r0, [r0, #4]
 80a1b12:	f7ff b971 	b.w	80a0df8 <network_get_listen_timeout>

080a1b16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1b16:	2200      	movs	r2, #0
 80a1b18:	6840      	ldr	r0, [r0, #4]
 80a1b1a:	f7ff b965 	b.w	80a0de8 <network_set_listen_timeout>

080a1b1e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1b1e:	2200      	movs	r2, #0
 80a1b20:	f081 0101 	eor.w	r1, r1, #1
 80a1b24:	6840      	ldr	r0, [r0, #4]
 80a1b26:	f7ff b94f 	b.w	80a0dc8 <network_listen>

080a1b2a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1b2a:	2300      	movs	r3, #0
 80a1b2c:	461a      	mov	r2, r3
 80a1b2e:	4619      	mov	r1, r3
 80a1b30:	6840      	ldr	r0, [r0, #4]
 80a1b32:	f7ff b941 	b.w	80a0db8 <network_off>

080a1b36 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1b36:	2300      	movs	r3, #0
 80a1b38:	461a      	mov	r2, r3
 80a1b3a:	4619      	mov	r1, r3
 80a1b3c:	6840      	ldr	r0, [r0, #4]
 80a1b3e:	f7ff b933 	b.w	80a0da8 <network_on>

080a1b42 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1b42:	2200      	movs	r2, #0
 80a1b44:	4611      	mov	r1, r2
 80a1b46:	6840      	ldr	r0, [r0, #4]
 80a1b48:	f7ff b916 	b.w	80a0d78 <network_connecting>

080a1b4c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1b4c:	2200      	movs	r2, #0
 80a1b4e:	2102      	movs	r1, #2
 80a1b50:	6840      	ldr	r0, [r0, #4]
 80a1b52:	f7ff b919 	b.w	80a0d88 <network_disconnect>

080a1b56 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1b56:	2300      	movs	r3, #0
 80a1b58:	461a      	mov	r2, r3
 80a1b5a:	6840      	ldr	r0, [r0, #4]
 80a1b5c:	f7ff b904 	b.w	80a0d68 <network_connect>

080a1b60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1b60:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1b62:	2204      	movs	r2, #4
 80a1b64:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1b66:	4a02      	ldr	r2, [pc, #8]	; (80a1b70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1b68:	601a      	str	r2, [r3, #0]
 80a1b6a:	4770      	bx	lr
 80a1b6c:	20000604 	.word	0x20000604
 80a1b70:	080a2964 	.word	0x080a2964

080a1b74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1b74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1b76:	4b14      	ldr	r3, [pc, #80]	; (80a1bc8 <serialEventRun+0x54>)
 80a1b78:	b133      	cbz	r3, 80a1b88 <serialEventRun+0x14>
 80a1b7a:	f7ff ff39 	bl	80a19f0 <_Z16_fetch_usbserialv>
 80a1b7e:	6803      	ldr	r3, [r0, #0]
 80a1b80:	691b      	ldr	r3, [r3, #16]
 80a1b82:	4798      	blx	r3
 80a1b84:	2800      	cmp	r0, #0
 80a1b86:	dc16      	bgt.n	80a1bb6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1b88:	4b10      	ldr	r3, [pc, #64]	; (80a1bcc <serialEventRun+0x58>)
 80a1b8a:	b133      	cbz	r3, 80a1b9a <serialEventRun+0x26>
 80a1b8c:	f7ff fe98 	bl	80a18c0 <_Z22__fetch_global_Serial1v>
 80a1b90:	6803      	ldr	r3, [r0, #0]
 80a1b92:	691b      	ldr	r3, [r3, #16]
 80a1b94:	4798      	blx	r3
 80a1b96:	2800      	cmp	r0, #0
 80a1b98:	dc10      	bgt.n	80a1bbc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1b9a:	4b0d      	ldr	r3, [pc, #52]	; (80a1bd0 <serialEventRun+0x5c>)
 80a1b9c:	b10b      	cbz	r3, 80a1ba2 <serialEventRun+0x2e>
 80a1b9e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1ba2:	4b0c      	ldr	r3, [pc, #48]	; (80a1bd4 <serialEventRun+0x60>)
 80a1ba4:	b17b      	cbz	r3, 80a1bc6 <serialEventRun+0x52>
 80a1ba6:	f7ff ff5f 	bl	80a1a68 <_Z17_fetch_usbserial1v>
 80a1baa:	6803      	ldr	r3, [r0, #0]
 80a1bac:	691b      	ldr	r3, [r3, #16]
 80a1bae:	4798      	blx	r3
 80a1bb0:	2800      	cmp	r0, #0
 80a1bb2:	dc06      	bgt.n	80a1bc2 <serialEventRun+0x4e>
 80a1bb4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1bb6:	f3af 8000 	nop.w
 80a1bba:	e7e5      	b.n	80a1b88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1bbc:	f3af 8000 	nop.w
 80a1bc0:	e7eb      	b.n	80a1b9a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1bc2:	f3af 8000 	nop.w
 80a1bc6:	bd08      	pop	{r3, pc}
	...

080a1bd8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1bd8:	b508      	push	{r3, lr}
	serialEventRun();
 80a1bda:	f7ff ffcb 	bl	80a1b74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1bde:	f7fe ff1d 	bl	80a0a1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1be2:	4b01      	ldr	r3, [pc, #4]	; (80a1be8 <_post_loop+0x10>)
 80a1be4:	6018      	str	r0, [r3, #0]
 80a1be6:	bd08      	pop	{r3, pc}
 80a1be8:	20000614 	.word	0x20000614

080a1bec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1bec:	4802      	ldr	r0, [pc, #8]	; (80a1bf8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1bee:	4a03      	ldr	r2, [pc, #12]	; (80a1bfc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1bf0:	4903      	ldr	r1, [pc, #12]	; (80a1c00 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1bf2:	1a12      	subs	r2, r2, r0
 80a1bf4:	f000 bcbe 	b.w	80a2574 <memcpy>
 80a1bf8:	40024000 	.word	0x40024000
 80a1bfc:	40024004 	.word	0x40024004
 80a1c00:	080a2a40 	.word	0x080a2a40

080a1c04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1c04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1c06:	2300      	movs	r3, #0
 80a1c08:	9300      	str	r3, [sp, #0]
 80a1c0a:	461a      	mov	r2, r3
 80a1c0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1c10:	f7ff f890 	bl	80a0d34 <system_ctrl_set_result>
}
 80a1c14:	b003      	add	sp, #12
 80a1c16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1c1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1c1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1c1e:	8843      	ldrh	r3, [r0, #2]
 80a1c20:	2b0a      	cmp	r3, #10
 80a1c22:	d008      	beq.n	80a1c36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1c24:	2b50      	cmp	r3, #80	; 0x50
 80a1c26:	d109      	bne.n	80a1c3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1c28:	4b09      	ldr	r3, [pc, #36]	; (80a1c50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1c2a:	681b      	ldr	r3, [r3, #0]
 80a1c2c:	b13b      	cbz	r3, 80a1c3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1c2e:	b003      	add	sp, #12
 80a1c30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1c34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1c36:	f7ff ffe5 	bl	80a1c04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1c3a:	e006      	b.n	80a1c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1c3c:	2300      	movs	r3, #0
 80a1c3e:	9300      	str	r3, [sp, #0]
 80a1c40:	461a      	mov	r2, r3
 80a1c42:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1c46:	f7ff f875 	bl	80a0d34 <system_ctrl_set_result>
        break;
    }
}
 80a1c4a:	b003      	add	sp, #12
 80a1c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1c50:	2000060c 	.word	0x2000060c

080a1c54 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1c54:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1c56:	4c10      	ldr	r4, [pc, #64]	; (80a1c98 <module_user_init_hook+0x44>)
 80a1c58:	4d10      	ldr	r5, [pc, #64]	; (80a1c9c <module_user_init_hook+0x48>)
 80a1c5a:	6823      	ldr	r3, [r4, #0]
 80a1c5c:	42ab      	cmp	r3, r5
 80a1c5e:	4b10      	ldr	r3, [pc, #64]	; (80a1ca0 <module_user_init_hook+0x4c>)
 80a1c60:	bf0c      	ite	eq
 80a1c62:	2201      	moveq	r2, #1
 80a1c64:	2200      	movne	r2, #0
 80a1c66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1c68:	d002      	beq.n	80a1c70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1c6a:	f7ff ffbf 	bl	80a1bec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1c6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1c70:	f7fe fecc 	bl	80a0a0c <HAL_RNG_GetRandomNumber>
 80a1c74:	4604      	mov	r4, r0
    srand(seed);
 80a1c76:	f000 fc91 	bl	80a259c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1c7a:	4b0a      	ldr	r3, [pc, #40]	; (80a1ca4 <module_user_init_hook+0x50>)
 80a1c7c:	b113      	cbz	r3, 80a1c84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1c7e:	4620      	mov	r0, r4
 80a1c80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1c84:	2100      	movs	r1, #0
 80a1c86:	4807      	ldr	r0, [pc, #28]	; (80a1ca4 <module_user_init_hook+0x50>)
 80a1c88:	f7ff f85e 	bl	80a0d48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1c90:	2100      	movs	r1, #0
 80a1c92:	4805      	ldr	r0, [pc, #20]	; (80a1ca8 <module_user_init_hook+0x54>)
 80a1c94:	f7ff b844 	b.w	80a0d20 <system_ctrl_set_app_request_handler>
 80a1c98:	40024000 	.word	0x40024000
 80a1c9c:	9a271c1e 	.word	0x9a271c1e
 80a1ca0:	20000610 	.word	0x20000610
 80a1ca4:	00000000 	.word	0x00000000
 80a1ca8:	080a1c1d 	.word	0x080a1c1d

080a1cac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1cac:	b510      	push	{r4, lr}
 80a1cae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1cb0:	480f      	ldr	r0, [pc, #60]	; (80a1cf0 <pinAvailable+0x44>)
 80a1cb2:	f7ff fb33 	bl	80a131c <_ZN8SPIClass9isEnabledEv>
 80a1cb6:	b128      	cbz	r0, 80a1cc4 <pinAvailable+0x18>
 80a1cb8:	f1a4 030d 	sub.w	r3, r4, #13
 80a1cbc:	2b02      	cmp	r3, #2
 80a1cbe:	d801      	bhi.n	80a1cc4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1cc0:	2000      	movs	r0, #0
 80a1cc2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1cc4:	f000 f840 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a1cc8:	f7ff f92b 	bl	80a0f22 <_ZN7TwoWire9isEnabledEv>
 80a1ccc:	b108      	cbz	r0, 80a1cd2 <pinAvailable+0x26>
 80a1cce:	2c01      	cmp	r4, #1
 80a1cd0:	d9f6      	bls.n	80a1cc0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1cd2:	f7ff fdf5 	bl	80a18c0 <_Z22__fetch_global_Serial1v>
 80a1cd6:	f7ff fdef 	bl	80a18b8 <_ZN11USARTSerial9isEnabledEv>
 80a1cda:	b118      	cbz	r0, 80a1ce4 <pinAvailable+0x38>
 80a1cdc:	f1a4 0312 	sub.w	r3, r4, #18
 80a1ce0:	2b01      	cmp	r3, #1
 80a1ce2:	d9ed      	bls.n	80a1cc0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1ce4:	2c17      	cmp	r4, #23
 80a1ce6:	bf8c      	ite	hi
 80a1ce8:	2000      	movhi	r0, #0
 80a1cea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1cec:	bd10      	pop	{r4, pc}
 80a1cee:	bf00      	nop
 80a1cf0:	20000648 	.word	0x20000648

080a1cf4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1cf4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1cf6:	b538      	push	{r3, r4, r5, lr}
 80a1cf8:	4604      	mov	r4, r0
 80a1cfa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1cfc:	d80a      	bhi.n	80a1d14 <pinMode+0x20>
 80a1cfe:	29ff      	cmp	r1, #255	; 0xff
 80a1d00:	d008      	beq.n	80a1d14 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d02:	f7ff ffd3 	bl	80a1cac <pinAvailable>
 80a1d06:	b128      	cbz	r0, 80a1d14 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1d08:	4629      	mov	r1, r5
 80a1d0a:	4620      	mov	r0, r4
}
 80a1d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1d10:	f7fe be94 	b.w	80a0a3c <HAL_Pin_Mode>
 80a1d14:	bd38      	pop	{r3, r4, r5, pc}

080a1d16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1d16:	b538      	push	{r3, r4, r5, lr}
 80a1d18:	4604      	mov	r4, r0
 80a1d1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1d1c:	f7fe fe96 	bl	80a0a4c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1d20:	28ff      	cmp	r0, #255	; 0xff
 80a1d22:	d010      	beq.n	80a1d46 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1d24:	2806      	cmp	r0, #6
 80a1d26:	d804      	bhi.n	80a1d32 <digitalWrite+0x1c>
 80a1d28:	234d      	movs	r3, #77	; 0x4d
 80a1d2a:	fa23 f000 	lsr.w	r0, r3, r0
 80a1d2e:	07c3      	lsls	r3, r0, #31
 80a1d30:	d409      	bmi.n	80a1d46 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d32:	4620      	mov	r0, r4
 80a1d34:	f7ff ffba 	bl	80a1cac <pinAvailable>
 80a1d38:	b128      	cbz	r0, 80a1d46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1d3a:	4629      	mov	r1, r5
 80a1d3c:	4620      	mov	r0, r4
}
 80a1d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1d42:	f7fe be8b 	b.w	80a0a5c <HAL_GPIO_Write>
 80a1d46:	bd38      	pop	{r3, r4, r5, pc}

080a1d48 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1d48:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1d4a:	4d0b      	ldr	r5, [pc, #44]	; (80a1d78 <_Z19__fetch_global_Wirev+0x30>)
 80a1d4c:	6829      	ldr	r1, [r5, #0]
 80a1d4e:	f011 0401 	ands.w	r4, r1, #1
 80a1d52:	d10f      	bne.n	80a1d74 <_Z19__fetch_global_Wirev+0x2c>
 80a1d54:	4628      	mov	r0, r5
 80a1d56:	f7fe f9a4 	bl	80a00a2 <__cxa_guard_acquire>
 80a1d5a:	b158      	cbz	r0, 80a1d74 <_Z19__fetch_global_Wirev+0x2c>
 80a1d5c:	4621      	mov	r1, r4
 80a1d5e:	4807      	ldr	r0, [pc, #28]	; (80a1d7c <_Z19__fetch_global_Wirev+0x34>)
 80a1d60:	f7ff f8b0 	bl	80a0ec4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1d64:	4628      	mov	r0, r5
 80a1d66:	f7fe f9a1 	bl	80a00ac <__cxa_guard_release>
 80a1d6a:	4a05      	ldr	r2, [pc, #20]	; (80a1d80 <_Z19__fetch_global_Wirev+0x38>)
 80a1d6c:	4905      	ldr	r1, [pc, #20]	; (80a1d84 <_Z19__fetch_global_Wirev+0x3c>)
 80a1d6e:	4803      	ldr	r0, [pc, #12]	; (80a1d7c <_Z19__fetch_global_Wirev+0x34>)
 80a1d70:	f000 f844 	bl	80a1dfc <__aeabi_atexit>
	return wire;
}
 80a1d74:	4801      	ldr	r0, [pc, #4]	; (80a1d7c <_Z19__fetch_global_Wirev+0x34>)
 80a1d76:	bd38      	pop	{r3, r4, r5, pc}
 80a1d78:	20000618 	.word	0x20000618
 80a1d7c:	2000061c 	.word	0x2000061c
 80a1d80:	2000007c 	.word	0x2000007c
 80a1d84:	080a0e6b 	.word	0x080a0e6b

080a1d88 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1d88:	b513      	push	{r0, r1, r4, lr}
 80a1d8a:	4c08      	ldr	r4, [pc, #32]	; (80a1dac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1d8c:	2300      	movs	r3, #0
 80a1d8e:	461a      	mov	r2, r3
 80a1d90:	4619      	mov	r1, r3
 80a1d92:	9300      	str	r3, [sp, #0]
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	f7ff f917 	bl	80a0fc8 <_ZN9IPAddressC1Ehhhh>
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	4a04      	ldr	r2, [pc, #16]	; (80a1db0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1d9e:	4905      	ldr	r1, [pc, #20]	; (80a1db4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1da0:	b002      	add	sp, #8
 80a1da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1da6:	f000 b829 	b.w	80a1dfc <__aeabi_atexit>
 80a1daa:	bf00      	nop
 80a1dac:	20000630 	.word	0x20000630
 80a1db0:	2000007c 	.word	0x2000007c
 80a1db4:	080a00b3 	.word	0x080a00b3

080a1db8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1db8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1dba:	4c0c      	ldr	r4, [pc, #48]	; (80a1dec <_GLOBAL__sub_I_SPI+0x34>)
 80a1dbc:	4e0c      	ldr	r6, [pc, #48]	; (80a1df0 <_GLOBAL__sub_I_SPI+0x38>)
 80a1dbe:	4d0d      	ldr	r5, [pc, #52]	; (80a1df4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1dc0:	2100      	movs	r1, #0
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	f7ff fa2a 	bl	80a121c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1dc8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1dca:	4c0b      	ldr	r4, [pc, #44]	; (80a1df8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1dcc:	4632      	mov	r2, r6
 80a1dce:	4629      	mov	r1, r5
 80a1dd0:	f000 f814 	bl	80a1dfc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1dd4:	2101      	movs	r1, #1
 80a1dd6:	4620      	mov	r0, r4
 80a1dd8:	f7ff fa20 	bl	80a121c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1ddc:	4632      	mov	r2, r6
 80a1dde:	4629      	mov	r1, r5
 80a1de0:	4620      	mov	r0, r4
 80a1de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1de6:	f000 b809 	b.w	80a1dfc <__aeabi_atexit>
 80a1dea:	bf00      	nop
 80a1dec:	20000648 	.word	0x20000648
 80a1df0:	2000007c 	.word	0x2000007c
 80a1df4:	080a120d 	.word	0x080a120d
 80a1df8:	20000658 	.word	0x20000658

080a1dfc <__aeabi_atexit>:
 80a1dfc:	460b      	mov	r3, r1
 80a1dfe:	4601      	mov	r1, r0
 80a1e00:	4618      	mov	r0, r3
 80a1e02:	f000 bba9 	b.w	80a2558 <__cxa_atexit>

080a1e06 <_ZdlPvj>:
 80a1e06:	f7fe b94a 	b.w	80a009e <_ZdlPv>
	...

080a1e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1e0c:	4b24      	ldr	r3, [pc, #144]	; (80a1ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1e0e:	681a      	ldr	r2, [r3, #0]
 80a1e10:	07d0      	lsls	r0, r2, #31
 80a1e12:	bf5c      	itt	pl
 80a1e14:	2201      	movpl	r2, #1
 80a1e16:	601a      	strpl	r2, [r3, #0]
 80a1e18:	4b22      	ldr	r3, [pc, #136]	; (80a1ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1e1a:	681a      	ldr	r2, [r3, #0]
 80a1e1c:	07d1      	lsls	r1, r2, #31
 80a1e1e:	bf5c      	itt	pl
 80a1e20:	2201      	movpl	r2, #1
 80a1e22:	601a      	strpl	r2, [r3, #0]
 80a1e24:	4b20      	ldr	r3, [pc, #128]	; (80a1ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1e26:	681a      	ldr	r2, [r3, #0]
 80a1e28:	07d2      	lsls	r2, r2, #31
 80a1e2a:	bf5c      	itt	pl
 80a1e2c:	2201      	movpl	r2, #1
 80a1e2e:	601a      	strpl	r2, [r3, #0]
 80a1e30:	4b1e      	ldr	r3, [pc, #120]	; (80a1eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1e32:	681a      	ldr	r2, [r3, #0]
 80a1e34:	07d0      	lsls	r0, r2, #31
 80a1e36:	bf5c      	itt	pl
 80a1e38:	2201      	movpl	r2, #1
 80a1e3a:	601a      	strpl	r2, [r3, #0]
 80a1e3c:	4b1c      	ldr	r3, [pc, #112]	; (80a1eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1e3e:	681a      	ldr	r2, [r3, #0]
 80a1e40:	07d1      	lsls	r1, r2, #31
 80a1e42:	bf5c      	itt	pl
 80a1e44:	2201      	movpl	r2, #1
 80a1e46:	601a      	strpl	r2, [r3, #0]
 80a1e48:	4b1a      	ldr	r3, [pc, #104]	; (80a1eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1e4a:	681a      	ldr	r2, [r3, #0]
 80a1e4c:	07d2      	lsls	r2, r2, #31
 80a1e4e:	bf5c      	itt	pl
 80a1e50:	2201      	movpl	r2, #1
 80a1e52:	601a      	strpl	r2, [r3, #0]
 80a1e54:	4b18      	ldr	r3, [pc, #96]	; (80a1eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1e56:	681a      	ldr	r2, [r3, #0]
 80a1e58:	07d0      	lsls	r0, r2, #31
 80a1e5a:	bf5c      	itt	pl
 80a1e5c:	2201      	movpl	r2, #1
 80a1e5e:	601a      	strpl	r2, [r3, #0]
 80a1e60:	4b16      	ldr	r3, [pc, #88]	; (80a1ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1e62:	681a      	ldr	r2, [r3, #0]
 80a1e64:	07d1      	lsls	r1, r2, #31
 80a1e66:	bf5c      	itt	pl
 80a1e68:	2201      	movpl	r2, #1
 80a1e6a:	601a      	strpl	r2, [r3, #0]
 80a1e6c:	4b14      	ldr	r3, [pc, #80]	; (80a1ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1e6e:	681a      	ldr	r2, [r3, #0]
 80a1e70:	07d2      	lsls	r2, r2, #31
 80a1e72:	bf5c      	itt	pl
 80a1e74:	2201      	movpl	r2, #1
 80a1e76:	601a      	strpl	r2, [r3, #0]
 80a1e78:	4b12      	ldr	r3, [pc, #72]	; (80a1ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1e7a:	681a      	ldr	r2, [r3, #0]
 80a1e7c:	07d0      	lsls	r0, r2, #31
 80a1e7e:	bf5c      	itt	pl
 80a1e80:	2201      	movpl	r2, #1
 80a1e82:	601a      	strpl	r2, [r3, #0]
 80a1e84:	4b10      	ldr	r3, [pc, #64]	; (80a1ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1e86:	681a      	ldr	r2, [r3, #0]
 80a1e88:	07d1      	lsls	r1, r2, #31
 80a1e8a:	bf5c      	itt	pl
 80a1e8c:	2201      	movpl	r2, #1
 80a1e8e:	601a      	strpl	r2, [r3, #0]
 80a1e90:	4b0e      	ldr	r3, [pc, #56]	; (80a1ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1e92:	681a      	ldr	r2, [r3, #0]
 80a1e94:	07d2      	lsls	r2, r2, #31
 80a1e96:	bf5c      	itt	pl
 80a1e98:	2201      	movpl	r2, #1
 80a1e9a:	601a      	strpl	r2, [r3, #0]
 80a1e9c:	4770      	bx	lr
 80a1e9e:	bf00      	nop
 80a1ea0:	20000694 	.word	0x20000694
 80a1ea4:	20000690 	.word	0x20000690
 80a1ea8:	2000068c 	.word	0x2000068c
 80a1eac:	20000688 	.word	0x20000688
 80a1eb0:	20000684 	.word	0x20000684
 80a1eb4:	20000680 	.word	0x20000680
 80a1eb8:	2000067c 	.word	0x2000067c
 80a1ebc:	20000678 	.word	0x20000678
 80a1ec0:	20000674 	.word	0x20000674
 80a1ec4:	20000670 	.word	0x20000670
 80a1ec8:	2000066c 	.word	0x2000066c
 80a1ecc:	20000668 	.word	0x20000668

080a1ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1ed0:	4b18      	ldr	r3, [pc, #96]	; (80a1f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1ed2:	681a      	ldr	r2, [r3, #0]
 80a1ed4:	07d1      	lsls	r1, r2, #31
 80a1ed6:	bf5c      	itt	pl
 80a1ed8:	2201      	movpl	r2, #1
 80a1eda:	601a      	strpl	r2, [r3, #0]
 80a1edc:	4b16      	ldr	r3, [pc, #88]	; (80a1f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1ede:	681a      	ldr	r2, [r3, #0]
 80a1ee0:	07d2      	lsls	r2, r2, #31
 80a1ee2:	bf5c      	itt	pl
 80a1ee4:	2201      	movpl	r2, #1
 80a1ee6:	601a      	strpl	r2, [r3, #0]
 80a1ee8:	4b14      	ldr	r3, [pc, #80]	; (80a1f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1eea:	681a      	ldr	r2, [r3, #0]
 80a1eec:	07d0      	lsls	r0, r2, #31
 80a1eee:	bf5c      	itt	pl
 80a1ef0:	2201      	movpl	r2, #1
 80a1ef2:	601a      	strpl	r2, [r3, #0]
 80a1ef4:	4b12      	ldr	r3, [pc, #72]	; (80a1f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1ef6:	681a      	ldr	r2, [r3, #0]
 80a1ef8:	07d1      	lsls	r1, r2, #31
 80a1efa:	bf5c      	itt	pl
 80a1efc:	2201      	movpl	r2, #1
 80a1efe:	601a      	strpl	r2, [r3, #0]
 80a1f00:	4b10      	ldr	r3, [pc, #64]	; (80a1f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1f02:	681a      	ldr	r2, [r3, #0]
 80a1f04:	07d2      	lsls	r2, r2, #31
 80a1f06:	bf5c      	itt	pl
 80a1f08:	2201      	movpl	r2, #1
 80a1f0a:	601a      	strpl	r2, [r3, #0]
 80a1f0c:	4b0e      	ldr	r3, [pc, #56]	; (80a1f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1f0e:	681a      	ldr	r2, [r3, #0]
 80a1f10:	07d0      	lsls	r0, r2, #31
 80a1f12:	bf5c      	itt	pl
 80a1f14:	2201      	movpl	r2, #1
 80a1f16:	601a      	strpl	r2, [r3, #0]
 80a1f18:	4b0c      	ldr	r3, [pc, #48]	; (80a1f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1f1a:	681a      	ldr	r2, [r3, #0]
 80a1f1c:	07d1      	lsls	r1, r2, #31
 80a1f1e:	bf5c      	itt	pl
 80a1f20:	2201      	movpl	r2, #1
 80a1f22:	601a      	strpl	r2, [r3, #0]
 80a1f24:	4b0a      	ldr	r3, [pc, #40]	; (80a1f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1f26:	681a      	ldr	r2, [r3, #0]
 80a1f28:	07d2      	lsls	r2, r2, #31
 80a1f2a:	bf5c      	itt	pl
 80a1f2c:	2201      	movpl	r2, #1
 80a1f2e:	601a      	strpl	r2, [r3, #0]
 80a1f30:	4770      	bx	lr
 80a1f32:	bf00      	nop
 80a1f34:	200006b4 	.word	0x200006b4
 80a1f38:	200006b0 	.word	0x200006b0
 80a1f3c:	200006ac 	.word	0x200006ac
 80a1f40:	200006a8 	.word	0x200006a8
 80a1f44:	200006a4 	.word	0x200006a4
 80a1f48:	200006a0 	.word	0x200006a0
 80a1f4c:	2000069c 	.word	0x2000069c
 80a1f50:	20000698 	.word	0x20000698

080a1f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1f54:	4b18      	ldr	r3, [pc, #96]	; (80a1fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1f56:	681a      	ldr	r2, [r3, #0]
 80a1f58:	07d1      	lsls	r1, r2, #31
 80a1f5a:	bf5c      	itt	pl
 80a1f5c:	2201      	movpl	r2, #1
 80a1f5e:	601a      	strpl	r2, [r3, #0]
 80a1f60:	4b16      	ldr	r3, [pc, #88]	; (80a1fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1f62:	681a      	ldr	r2, [r3, #0]
 80a1f64:	07d2      	lsls	r2, r2, #31
 80a1f66:	bf5c      	itt	pl
 80a1f68:	2201      	movpl	r2, #1
 80a1f6a:	601a      	strpl	r2, [r3, #0]
 80a1f6c:	4b14      	ldr	r3, [pc, #80]	; (80a1fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1f6e:	681a      	ldr	r2, [r3, #0]
 80a1f70:	07d0      	lsls	r0, r2, #31
 80a1f72:	bf5c      	itt	pl
 80a1f74:	2201      	movpl	r2, #1
 80a1f76:	601a      	strpl	r2, [r3, #0]
 80a1f78:	4b12      	ldr	r3, [pc, #72]	; (80a1fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1f7a:	681a      	ldr	r2, [r3, #0]
 80a1f7c:	07d1      	lsls	r1, r2, #31
 80a1f7e:	bf5c      	itt	pl
 80a1f80:	2201      	movpl	r2, #1
 80a1f82:	601a      	strpl	r2, [r3, #0]
 80a1f84:	4b10      	ldr	r3, [pc, #64]	; (80a1fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1f86:	681a      	ldr	r2, [r3, #0]
 80a1f88:	07d2      	lsls	r2, r2, #31
 80a1f8a:	bf5c      	itt	pl
 80a1f8c:	2201      	movpl	r2, #1
 80a1f8e:	601a      	strpl	r2, [r3, #0]
 80a1f90:	4b0e      	ldr	r3, [pc, #56]	; (80a1fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1f92:	681a      	ldr	r2, [r3, #0]
 80a1f94:	07d0      	lsls	r0, r2, #31
 80a1f96:	bf5c      	itt	pl
 80a1f98:	2201      	movpl	r2, #1
 80a1f9a:	601a      	strpl	r2, [r3, #0]
 80a1f9c:	4b0c      	ldr	r3, [pc, #48]	; (80a1fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1f9e:	681a      	ldr	r2, [r3, #0]
 80a1fa0:	07d1      	lsls	r1, r2, #31
 80a1fa2:	bf5c      	itt	pl
 80a1fa4:	2201      	movpl	r2, #1
 80a1fa6:	601a      	strpl	r2, [r3, #0]
 80a1fa8:	4b0a      	ldr	r3, [pc, #40]	; (80a1fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1faa:	681a      	ldr	r2, [r3, #0]
 80a1fac:	07d2      	lsls	r2, r2, #31
 80a1fae:	bf5c      	itt	pl
 80a1fb0:	2201      	movpl	r2, #1
 80a1fb2:	601a      	strpl	r2, [r3, #0]
 80a1fb4:	4770      	bx	lr
 80a1fb6:	bf00      	nop
 80a1fb8:	200006d4 	.word	0x200006d4
 80a1fbc:	200006d0 	.word	0x200006d0
 80a1fc0:	200006cc 	.word	0x200006cc
 80a1fc4:	200006c8 	.word	0x200006c8
 80a1fc8:	200006c4 	.word	0x200006c4
 80a1fcc:	200006c0 	.word	0x200006c0
 80a1fd0:	200006bc 	.word	0x200006bc
 80a1fd4:	200006b8 	.word	0x200006b8

080a1fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1fd8:	4b24      	ldr	r3, [pc, #144]	; (80a206c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1fda:	681a      	ldr	r2, [r3, #0]
 80a1fdc:	07d0      	lsls	r0, r2, #31
 80a1fde:	bf5c      	itt	pl
 80a1fe0:	2201      	movpl	r2, #1
 80a1fe2:	601a      	strpl	r2, [r3, #0]
 80a1fe4:	4b22      	ldr	r3, [pc, #136]	; (80a2070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1fe6:	681a      	ldr	r2, [r3, #0]
 80a1fe8:	07d1      	lsls	r1, r2, #31
 80a1fea:	bf5c      	itt	pl
 80a1fec:	2201      	movpl	r2, #1
 80a1fee:	601a      	strpl	r2, [r3, #0]
 80a1ff0:	4b20      	ldr	r3, [pc, #128]	; (80a2074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1ff2:	681a      	ldr	r2, [r3, #0]
 80a1ff4:	07d2      	lsls	r2, r2, #31
 80a1ff6:	bf5c      	itt	pl
 80a1ff8:	2201      	movpl	r2, #1
 80a1ffa:	601a      	strpl	r2, [r3, #0]
 80a1ffc:	4b1e      	ldr	r3, [pc, #120]	; (80a2078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1ffe:	681a      	ldr	r2, [r3, #0]
 80a2000:	07d0      	lsls	r0, r2, #31
 80a2002:	bf5c      	itt	pl
 80a2004:	2201      	movpl	r2, #1
 80a2006:	601a      	strpl	r2, [r3, #0]
 80a2008:	4b1c      	ldr	r3, [pc, #112]	; (80a207c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a200a:	681a      	ldr	r2, [r3, #0]
 80a200c:	07d1      	lsls	r1, r2, #31
 80a200e:	bf5c      	itt	pl
 80a2010:	2201      	movpl	r2, #1
 80a2012:	601a      	strpl	r2, [r3, #0]
 80a2014:	4b1a      	ldr	r3, [pc, #104]	; (80a2080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2016:	681a      	ldr	r2, [r3, #0]
 80a2018:	07d2      	lsls	r2, r2, #31
 80a201a:	bf5c      	itt	pl
 80a201c:	2201      	movpl	r2, #1
 80a201e:	601a      	strpl	r2, [r3, #0]
 80a2020:	4b18      	ldr	r3, [pc, #96]	; (80a2084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2022:	681a      	ldr	r2, [r3, #0]
 80a2024:	07d0      	lsls	r0, r2, #31
 80a2026:	bf5c      	itt	pl
 80a2028:	2201      	movpl	r2, #1
 80a202a:	601a      	strpl	r2, [r3, #0]
 80a202c:	4b16      	ldr	r3, [pc, #88]	; (80a2088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a202e:	681a      	ldr	r2, [r3, #0]
 80a2030:	07d1      	lsls	r1, r2, #31
 80a2032:	bf5c      	itt	pl
 80a2034:	2201      	movpl	r2, #1
 80a2036:	601a      	strpl	r2, [r3, #0]
 80a2038:	4b14      	ldr	r3, [pc, #80]	; (80a208c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a203a:	681a      	ldr	r2, [r3, #0]
 80a203c:	07d2      	lsls	r2, r2, #31
 80a203e:	bf5c      	itt	pl
 80a2040:	2201      	movpl	r2, #1
 80a2042:	601a      	strpl	r2, [r3, #0]
 80a2044:	4b12      	ldr	r3, [pc, #72]	; (80a2090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2046:	681a      	ldr	r2, [r3, #0]
 80a2048:	07d0      	lsls	r0, r2, #31
 80a204a:	bf5c      	itt	pl
 80a204c:	2201      	movpl	r2, #1
 80a204e:	601a      	strpl	r2, [r3, #0]
 80a2050:	4b10      	ldr	r3, [pc, #64]	; (80a2094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2052:	681a      	ldr	r2, [r3, #0]
 80a2054:	07d1      	lsls	r1, r2, #31
 80a2056:	bf5c      	itt	pl
 80a2058:	2201      	movpl	r2, #1
 80a205a:	601a      	strpl	r2, [r3, #0]
 80a205c:	4b0e      	ldr	r3, [pc, #56]	; (80a2098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a205e:	681a      	ldr	r2, [r3, #0]
 80a2060:	07d2      	lsls	r2, r2, #31
 80a2062:	bf5c      	itt	pl
 80a2064:	2201      	movpl	r2, #1
 80a2066:	601a      	strpl	r2, [r3, #0]
 80a2068:	4770      	bx	lr
 80a206a:	bf00      	nop
 80a206c:	20000704 	.word	0x20000704
 80a2070:	20000700 	.word	0x20000700
 80a2074:	200006fc 	.word	0x200006fc
 80a2078:	200006f8 	.word	0x200006f8
 80a207c:	200006f4 	.word	0x200006f4
 80a2080:	200006f0 	.word	0x200006f0
 80a2084:	200006ec 	.word	0x200006ec
 80a2088:	200006e8 	.word	0x200006e8
 80a208c:	200006e4 	.word	0x200006e4
 80a2090:	200006e0 	.word	0x200006e0
 80a2094:	200006dc 	.word	0x200006dc
 80a2098:	200006d8 	.word	0x200006d8

080a209c <__aeabi_frsub>:
 80a209c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a20a0:	e002      	b.n	80a20a8 <__addsf3>
 80a20a2:	bf00      	nop

080a20a4 <__aeabi_fsub>:
 80a20a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a20a8 <__addsf3>:
 80a20a8:	0042      	lsls	r2, r0, #1
 80a20aa:	bf1f      	itttt	ne
 80a20ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a20b0:	ea92 0f03 	teqne	r2, r3
 80a20b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a20b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a20bc:	d06a      	beq.n	80a2194 <__addsf3+0xec>
 80a20be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a20c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a20c6:	bfc1      	itttt	gt
 80a20c8:	18d2      	addgt	r2, r2, r3
 80a20ca:	4041      	eorgt	r1, r0
 80a20cc:	4048      	eorgt	r0, r1
 80a20ce:	4041      	eorgt	r1, r0
 80a20d0:	bfb8      	it	lt
 80a20d2:	425b      	neglt	r3, r3
 80a20d4:	2b19      	cmp	r3, #25
 80a20d6:	bf88      	it	hi
 80a20d8:	4770      	bxhi	lr
 80a20da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a20de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a20e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a20e6:	bf18      	it	ne
 80a20e8:	4240      	negne	r0, r0
 80a20ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a20ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a20f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a20f6:	bf18      	it	ne
 80a20f8:	4249      	negne	r1, r1
 80a20fa:	ea92 0f03 	teq	r2, r3
 80a20fe:	d03f      	beq.n	80a2180 <__addsf3+0xd8>
 80a2100:	f1a2 0201 	sub.w	r2, r2, #1
 80a2104:	fa41 fc03 	asr.w	ip, r1, r3
 80a2108:	eb10 000c 	adds.w	r0, r0, ip
 80a210c:	f1c3 0320 	rsb	r3, r3, #32
 80a2110:	fa01 f103 	lsl.w	r1, r1, r3
 80a2114:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2118:	d502      	bpl.n	80a2120 <__addsf3+0x78>
 80a211a:	4249      	negs	r1, r1
 80a211c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2120:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2124:	d313      	bcc.n	80a214e <__addsf3+0xa6>
 80a2126:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a212a:	d306      	bcc.n	80a213a <__addsf3+0x92>
 80a212c:	0840      	lsrs	r0, r0, #1
 80a212e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2132:	f102 0201 	add.w	r2, r2, #1
 80a2136:	2afe      	cmp	r2, #254	; 0xfe
 80a2138:	d251      	bcs.n	80a21de <__addsf3+0x136>
 80a213a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a213e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2142:	bf08      	it	eq
 80a2144:	f020 0001 	biceq.w	r0, r0, #1
 80a2148:	ea40 0003 	orr.w	r0, r0, r3
 80a214c:	4770      	bx	lr
 80a214e:	0049      	lsls	r1, r1, #1
 80a2150:	eb40 0000 	adc.w	r0, r0, r0
 80a2154:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2158:	f1a2 0201 	sub.w	r2, r2, #1
 80a215c:	d1ed      	bne.n	80a213a <__addsf3+0x92>
 80a215e:	fab0 fc80 	clz	ip, r0
 80a2162:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2166:	ebb2 020c 	subs.w	r2, r2, ip
 80a216a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a216e:	bfaa      	itet	ge
 80a2170:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2174:	4252      	neglt	r2, r2
 80a2176:	4318      	orrge	r0, r3
 80a2178:	bfbc      	itt	lt
 80a217a:	40d0      	lsrlt	r0, r2
 80a217c:	4318      	orrlt	r0, r3
 80a217e:	4770      	bx	lr
 80a2180:	f092 0f00 	teq	r2, #0
 80a2184:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2188:	bf06      	itte	eq
 80a218a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a218e:	3201      	addeq	r2, #1
 80a2190:	3b01      	subne	r3, #1
 80a2192:	e7b5      	b.n	80a2100 <__addsf3+0x58>
 80a2194:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2198:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a219c:	bf18      	it	ne
 80a219e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a21a2:	d021      	beq.n	80a21e8 <__addsf3+0x140>
 80a21a4:	ea92 0f03 	teq	r2, r3
 80a21a8:	d004      	beq.n	80a21b4 <__addsf3+0x10c>
 80a21aa:	f092 0f00 	teq	r2, #0
 80a21ae:	bf08      	it	eq
 80a21b0:	4608      	moveq	r0, r1
 80a21b2:	4770      	bx	lr
 80a21b4:	ea90 0f01 	teq	r0, r1
 80a21b8:	bf1c      	itt	ne
 80a21ba:	2000      	movne	r0, #0
 80a21bc:	4770      	bxne	lr
 80a21be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a21c2:	d104      	bne.n	80a21ce <__addsf3+0x126>
 80a21c4:	0040      	lsls	r0, r0, #1
 80a21c6:	bf28      	it	cs
 80a21c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a21cc:	4770      	bx	lr
 80a21ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a21d2:	bf3c      	itt	cc
 80a21d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a21d8:	4770      	bxcc	lr
 80a21da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a21de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a21e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a21e6:	4770      	bx	lr
 80a21e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a21ec:	bf16      	itet	ne
 80a21ee:	4608      	movne	r0, r1
 80a21f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a21f4:	4601      	movne	r1, r0
 80a21f6:	0242      	lsls	r2, r0, #9
 80a21f8:	bf06      	itte	eq
 80a21fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a21fe:	ea90 0f01 	teqeq	r0, r1
 80a2202:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2206:	4770      	bx	lr

080a2208 <__aeabi_ui2f>:
 80a2208:	f04f 0300 	mov.w	r3, #0
 80a220c:	e004      	b.n	80a2218 <__aeabi_i2f+0x8>
 80a220e:	bf00      	nop

080a2210 <__aeabi_i2f>:
 80a2210:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2214:	bf48      	it	mi
 80a2216:	4240      	negmi	r0, r0
 80a2218:	ea5f 0c00 	movs.w	ip, r0
 80a221c:	bf08      	it	eq
 80a221e:	4770      	bxeq	lr
 80a2220:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2224:	4601      	mov	r1, r0
 80a2226:	f04f 0000 	mov.w	r0, #0
 80a222a:	e01c      	b.n	80a2266 <__aeabi_l2f+0x2a>

080a222c <__aeabi_ul2f>:
 80a222c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2230:	bf08      	it	eq
 80a2232:	4770      	bxeq	lr
 80a2234:	f04f 0300 	mov.w	r3, #0
 80a2238:	e00a      	b.n	80a2250 <__aeabi_l2f+0x14>
 80a223a:	bf00      	nop

080a223c <__aeabi_l2f>:
 80a223c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2240:	bf08      	it	eq
 80a2242:	4770      	bxeq	lr
 80a2244:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2248:	d502      	bpl.n	80a2250 <__aeabi_l2f+0x14>
 80a224a:	4240      	negs	r0, r0
 80a224c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2250:	ea5f 0c01 	movs.w	ip, r1
 80a2254:	bf02      	ittt	eq
 80a2256:	4684      	moveq	ip, r0
 80a2258:	4601      	moveq	r1, r0
 80a225a:	2000      	moveq	r0, #0
 80a225c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2260:	bf08      	it	eq
 80a2262:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2266:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a226a:	fabc f28c 	clz	r2, ip
 80a226e:	3a08      	subs	r2, #8
 80a2270:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2274:	db10      	blt.n	80a2298 <__aeabi_l2f+0x5c>
 80a2276:	fa01 fc02 	lsl.w	ip, r1, r2
 80a227a:	4463      	add	r3, ip
 80a227c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2280:	f1c2 0220 	rsb	r2, r2, #32
 80a2284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2288:	fa20 f202 	lsr.w	r2, r0, r2
 80a228c:	eb43 0002 	adc.w	r0, r3, r2
 80a2290:	bf08      	it	eq
 80a2292:	f020 0001 	biceq.w	r0, r0, #1
 80a2296:	4770      	bx	lr
 80a2298:	f102 0220 	add.w	r2, r2, #32
 80a229c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a22a0:	f1c2 0220 	rsb	r2, r2, #32
 80a22a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a22a8:	fa21 f202 	lsr.w	r2, r1, r2
 80a22ac:	eb43 0002 	adc.w	r0, r3, r2
 80a22b0:	bf08      	it	eq
 80a22b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a22b6:	4770      	bx	lr

080a22b8 <__aeabi_fmul>:
 80a22b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a22bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a22c0:	bf1e      	ittt	ne
 80a22c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a22c6:	ea92 0f0c 	teqne	r2, ip
 80a22ca:	ea93 0f0c 	teqne	r3, ip
 80a22ce:	d06f      	beq.n	80a23b0 <__aeabi_fmul+0xf8>
 80a22d0:	441a      	add	r2, r3
 80a22d2:	ea80 0c01 	eor.w	ip, r0, r1
 80a22d6:	0240      	lsls	r0, r0, #9
 80a22d8:	bf18      	it	ne
 80a22da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a22de:	d01e      	beq.n	80a231e <__aeabi_fmul+0x66>
 80a22e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a22e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a22e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a22ec:	fba0 3101 	umull	r3, r1, r0, r1
 80a22f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a22f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a22f8:	bf3e      	ittt	cc
 80a22fa:	0049      	lslcc	r1, r1, #1
 80a22fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2300:	005b      	lslcc	r3, r3, #1
 80a2302:	ea40 0001 	orr.w	r0, r0, r1
 80a2306:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a230a:	2afd      	cmp	r2, #253	; 0xfd
 80a230c:	d81d      	bhi.n	80a234a <__aeabi_fmul+0x92>
 80a230e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2312:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2316:	bf08      	it	eq
 80a2318:	f020 0001 	biceq.w	r0, r0, #1
 80a231c:	4770      	bx	lr
 80a231e:	f090 0f00 	teq	r0, #0
 80a2322:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2326:	bf08      	it	eq
 80a2328:	0249      	lsleq	r1, r1, #9
 80a232a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a232e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2332:	3a7f      	subs	r2, #127	; 0x7f
 80a2334:	bfc2      	ittt	gt
 80a2336:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a233a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a233e:	4770      	bxgt	lr
 80a2340:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2344:	f04f 0300 	mov.w	r3, #0
 80a2348:	3a01      	subs	r2, #1
 80a234a:	dc5d      	bgt.n	80a2408 <__aeabi_fmul+0x150>
 80a234c:	f112 0f19 	cmn.w	r2, #25
 80a2350:	bfdc      	itt	le
 80a2352:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2356:	4770      	bxle	lr
 80a2358:	f1c2 0200 	rsb	r2, r2, #0
 80a235c:	0041      	lsls	r1, r0, #1
 80a235e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2362:	f1c2 0220 	rsb	r2, r2, #32
 80a2366:	fa00 fc02 	lsl.w	ip, r0, r2
 80a236a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a236e:	f140 0000 	adc.w	r0, r0, #0
 80a2372:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2376:	bf08      	it	eq
 80a2378:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a237c:	4770      	bx	lr
 80a237e:	f092 0f00 	teq	r2, #0
 80a2382:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2386:	bf02      	ittt	eq
 80a2388:	0040      	lsleq	r0, r0, #1
 80a238a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a238e:	3a01      	subeq	r2, #1
 80a2390:	d0f9      	beq.n	80a2386 <__aeabi_fmul+0xce>
 80a2392:	ea40 000c 	orr.w	r0, r0, ip
 80a2396:	f093 0f00 	teq	r3, #0
 80a239a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a239e:	bf02      	ittt	eq
 80a23a0:	0049      	lsleq	r1, r1, #1
 80a23a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a23a6:	3b01      	subeq	r3, #1
 80a23a8:	d0f9      	beq.n	80a239e <__aeabi_fmul+0xe6>
 80a23aa:	ea41 010c 	orr.w	r1, r1, ip
 80a23ae:	e78f      	b.n	80a22d0 <__aeabi_fmul+0x18>
 80a23b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a23b4:	ea92 0f0c 	teq	r2, ip
 80a23b8:	bf18      	it	ne
 80a23ba:	ea93 0f0c 	teqne	r3, ip
 80a23be:	d00a      	beq.n	80a23d6 <__aeabi_fmul+0x11e>
 80a23c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a23c4:	bf18      	it	ne
 80a23c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a23ca:	d1d8      	bne.n	80a237e <__aeabi_fmul+0xc6>
 80a23cc:	ea80 0001 	eor.w	r0, r0, r1
 80a23d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a23d4:	4770      	bx	lr
 80a23d6:	f090 0f00 	teq	r0, #0
 80a23da:	bf17      	itett	ne
 80a23dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a23e0:	4608      	moveq	r0, r1
 80a23e2:	f091 0f00 	teqne	r1, #0
 80a23e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a23ea:	d014      	beq.n	80a2416 <__aeabi_fmul+0x15e>
 80a23ec:	ea92 0f0c 	teq	r2, ip
 80a23f0:	d101      	bne.n	80a23f6 <__aeabi_fmul+0x13e>
 80a23f2:	0242      	lsls	r2, r0, #9
 80a23f4:	d10f      	bne.n	80a2416 <__aeabi_fmul+0x15e>
 80a23f6:	ea93 0f0c 	teq	r3, ip
 80a23fa:	d103      	bne.n	80a2404 <__aeabi_fmul+0x14c>
 80a23fc:	024b      	lsls	r3, r1, #9
 80a23fe:	bf18      	it	ne
 80a2400:	4608      	movne	r0, r1
 80a2402:	d108      	bne.n	80a2416 <__aeabi_fmul+0x15e>
 80a2404:	ea80 0001 	eor.w	r0, r0, r1
 80a2408:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a240c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2410:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2414:	4770      	bx	lr
 80a2416:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a241a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a241e:	4770      	bx	lr

080a2420 <__aeabi_fdiv>:
 80a2420:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2424:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2428:	bf1e      	ittt	ne
 80a242a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a242e:	ea92 0f0c 	teqne	r2, ip
 80a2432:	ea93 0f0c 	teqne	r3, ip
 80a2436:	d069      	beq.n	80a250c <__aeabi_fdiv+0xec>
 80a2438:	eba2 0203 	sub.w	r2, r2, r3
 80a243c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2440:	0249      	lsls	r1, r1, #9
 80a2442:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2446:	d037      	beq.n	80a24b8 <__aeabi_fdiv+0x98>
 80a2448:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a244c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2450:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2458:	428b      	cmp	r3, r1
 80a245a:	bf38      	it	cc
 80a245c:	005b      	lslcc	r3, r3, #1
 80a245e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2462:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2466:	428b      	cmp	r3, r1
 80a2468:	bf24      	itt	cs
 80a246a:	1a5b      	subcs	r3, r3, r1
 80a246c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2470:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2474:	bf24      	itt	cs
 80a2476:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a247a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a247e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2482:	bf24      	itt	cs
 80a2484:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2488:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a248c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2490:	bf24      	itt	cs
 80a2492:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2496:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a249a:	011b      	lsls	r3, r3, #4
 80a249c:	bf18      	it	ne
 80a249e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a24a2:	d1e0      	bne.n	80a2466 <__aeabi_fdiv+0x46>
 80a24a4:	2afd      	cmp	r2, #253	; 0xfd
 80a24a6:	f63f af50 	bhi.w	80a234a <__aeabi_fmul+0x92>
 80a24aa:	428b      	cmp	r3, r1
 80a24ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a24b0:	bf08      	it	eq
 80a24b2:	f020 0001 	biceq.w	r0, r0, #1
 80a24b6:	4770      	bx	lr
 80a24b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a24bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a24c0:	327f      	adds	r2, #127	; 0x7f
 80a24c2:	bfc2      	ittt	gt
 80a24c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a24c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a24cc:	4770      	bxgt	lr
 80a24ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a24d2:	f04f 0300 	mov.w	r3, #0
 80a24d6:	3a01      	subs	r2, #1
 80a24d8:	e737      	b.n	80a234a <__aeabi_fmul+0x92>
 80a24da:	f092 0f00 	teq	r2, #0
 80a24de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a24e2:	bf02      	ittt	eq
 80a24e4:	0040      	lsleq	r0, r0, #1
 80a24e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a24ea:	3a01      	subeq	r2, #1
 80a24ec:	d0f9      	beq.n	80a24e2 <__aeabi_fdiv+0xc2>
 80a24ee:	ea40 000c 	orr.w	r0, r0, ip
 80a24f2:	f093 0f00 	teq	r3, #0
 80a24f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a24fa:	bf02      	ittt	eq
 80a24fc:	0049      	lsleq	r1, r1, #1
 80a24fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2502:	3b01      	subeq	r3, #1
 80a2504:	d0f9      	beq.n	80a24fa <__aeabi_fdiv+0xda>
 80a2506:	ea41 010c 	orr.w	r1, r1, ip
 80a250a:	e795      	b.n	80a2438 <__aeabi_fdiv+0x18>
 80a250c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2510:	ea92 0f0c 	teq	r2, ip
 80a2514:	d108      	bne.n	80a2528 <__aeabi_fdiv+0x108>
 80a2516:	0242      	lsls	r2, r0, #9
 80a2518:	f47f af7d 	bne.w	80a2416 <__aeabi_fmul+0x15e>
 80a251c:	ea93 0f0c 	teq	r3, ip
 80a2520:	f47f af70 	bne.w	80a2404 <__aeabi_fmul+0x14c>
 80a2524:	4608      	mov	r0, r1
 80a2526:	e776      	b.n	80a2416 <__aeabi_fmul+0x15e>
 80a2528:	ea93 0f0c 	teq	r3, ip
 80a252c:	d104      	bne.n	80a2538 <__aeabi_fdiv+0x118>
 80a252e:	024b      	lsls	r3, r1, #9
 80a2530:	f43f af4c 	beq.w	80a23cc <__aeabi_fmul+0x114>
 80a2534:	4608      	mov	r0, r1
 80a2536:	e76e      	b.n	80a2416 <__aeabi_fmul+0x15e>
 80a2538:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a253c:	bf18      	it	ne
 80a253e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2542:	d1ca      	bne.n	80a24da <__aeabi_fdiv+0xba>
 80a2544:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2548:	f47f af5c 	bne.w	80a2404 <__aeabi_fmul+0x14c>
 80a254c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2550:	f47f af3c 	bne.w	80a23cc <__aeabi_fmul+0x114>
 80a2554:	e75f      	b.n	80a2416 <__aeabi_fmul+0x15e>
 80a2556:	bf00      	nop

080a2558 <__cxa_atexit>:
 80a2558:	b510      	push	{r4, lr}
 80a255a:	4c05      	ldr	r4, [pc, #20]	; (80a2570 <__cxa_atexit+0x18>)
 80a255c:	4613      	mov	r3, r2
 80a255e:	b12c      	cbz	r4, 80a256c <__cxa_atexit+0x14>
 80a2560:	460a      	mov	r2, r1
 80a2562:	4601      	mov	r1, r0
 80a2564:	2002      	movs	r0, #2
 80a2566:	f3af 8000 	nop.w
 80a256a:	bd10      	pop	{r4, pc}
 80a256c:	4620      	mov	r0, r4
 80a256e:	bd10      	pop	{r4, pc}
 80a2570:	00000000 	.word	0x00000000

080a2574 <memcpy>:
 80a2574:	b510      	push	{r4, lr}
 80a2576:	1e43      	subs	r3, r0, #1
 80a2578:	440a      	add	r2, r1
 80a257a:	4291      	cmp	r1, r2
 80a257c:	d004      	beq.n	80a2588 <memcpy+0x14>
 80a257e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2582:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2586:	e7f8      	b.n	80a257a <memcpy+0x6>
 80a2588:	bd10      	pop	{r4, pc}

080a258a <memset>:
 80a258a:	4603      	mov	r3, r0
 80a258c:	4402      	add	r2, r0
 80a258e:	4293      	cmp	r3, r2
 80a2590:	d002      	beq.n	80a2598 <memset+0xe>
 80a2592:	f803 1b01 	strb.w	r1, [r3], #1
 80a2596:	e7fa      	b.n	80a258e <memset+0x4>
 80a2598:	4770      	bx	lr
	...

080a259c <srand>:
 80a259c:	b538      	push	{r3, r4, r5, lr}
 80a259e:	4b12      	ldr	r3, [pc, #72]	; (80a25e8 <srand+0x4c>)
 80a25a0:	4605      	mov	r5, r0
 80a25a2:	681c      	ldr	r4, [r3, #0]
 80a25a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a25a6:	b9d3      	cbnz	r3, 80a25de <srand+0x42>
 80a25a8:	2018      	movs	r0, #24
 80a25aa:	f7fe fc3d 	bl	80a0e28 <malloc>
 80a25ae:	f243 330e 	movw	r3, #13070	; 0x330e
 80a25b2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a25b4:	8003      	strh	r3, [r0, #0]
 80a25b6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a25ba:	8043      	strh	r3, [r0, #2]
 80a25bc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a25c0:	8083      	strh	r3, [r0, #4]
 80a25c2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a25c6:	80c3      	strh	r3, [r0, #6]
 80a25c8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a25cc:	8103      	strh	r3, [r0, #8]
 80a25ce:	2305      	movs	r3, #5
 80a25d0:	8143      	strh	r3, [r0, #10]
 80a25d2:	230b      	movs	r3, #11
 80a25d4:	8183      	strh	r3, [r0, #12]
 80a25d6:	2201      	movs	r2, #1
 80a25d8:	2300      	movs	r3, #0
 80a25da:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a25de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a25e0:	2200      	movs	r2, #0
 80a25e2:	611d      	str	r5, [r3, #16]
 80a25e4:	615a      	str	r2, [r3, #20]
 80a25e6:	bd38      	pop	{r3, r4, r5, pc}
 80a25e8:	20000078 	.word	0x20000078

080a25ec <strlen>:
 80a25ec:	4603      	mov	r3, r0
 80a25ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a25f2:	2a00      	cmp	r2, #0
 80a25f4:	d1fb      	bne.n	80a25ee <strlen+0x2>
 80a25f6:	1a18      	subs	r0, r3, r0
 80a25f8:	3801      	subs	r0, #1
 80a25fa:	4770      	bx	lr

080a25fc <dynalib_user>:
 80a25fc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a260c:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a261c:	7265 505f 4255 494c 4853 4600 6961 656c     er_PUBLISH.Faile
 80a262c:	2064 6f74 6320 6d6f 756d 696e 6163 6574     d to communicate
 80a263c:	7720 7469 2068 534c 394d 5344 2e31 4400      with LSM9DS1..D
 80a264c:	756f 6c62 2d65 6863 6365 206b 6977 6972     ouble-check wiri
 80a265c:	676e 002e 6544 6166 6c75 2074 6573 7474     ng..Default sett
 80a266c:	6e69 7367 6920 206e 6874 7369 7320 656b     ings in this ske
 80a267c:	6374 2068 6977 6c6c 7720 726f 206b 6f66     tch will work fo
 80a268c:	2072 6e61 6f20 7475 6f20 2066 6874 2065     r an out of the 
 80a269c:	6f62 2078 534c 394d 5344 2031 7242 6165     box LSM9DS1 Brea
 80a26ac:	6f6b 7475 202c 7562 2074 616d 2079 656e     kout, but may ne
 80a26bc:	6465 7420 206f 6562 6d20 646f 6669 6569     ed to be modifie
 80a26cc:	2064 6669 7420 6568 6220 616f 6472 6a20     d if the board j
 80a26dc:	6d75 6570 7372 6120 6572 002e               umpers are..

080a26e8 <CSWTCH.57>:
 80a26e8:	0020 0000 0040 0000 0060 0000                ...@...`...

080a26f4 <_ZTV7TwoWire>:
	...
 80a26fc:	0e6b 080a 0eb5 080a 0e8d 080a 0e6d 080a     k...........m...
 80a270c:	0e95 080a 0e9d 080a 0ea5 080a 0ead 080a     ................

080a271c <_ZTV9IPAddress>:
	...
 80a2724:	0f2b 080a 00b3 080a 00d5 080a 6162 6475     +...........baud
 80a2734:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2744:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2754:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2764:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2774:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2784:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2794:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a27a4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a27b4:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a27c4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a27d4:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a27e4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a27f4:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2804:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2814 <_ZTVN5spark12NetworkClassE>:
	...
 80a281c:	1009 080a 1013 080a 101d 080a 1027 080a     ............'...
 80a282c:	1031 080a 103d 080a 1049 080a 1055 080a     1...=...I...U...
 80a283c:	105d 080a 1067 080a 1071 080a               ]...g...q...

080a2848 <_ZTV8SPIClass>:
	...
 80a2850:	120d 080a 120f 080a                         ........

080a2858 <_ZL14clock_divisors>:
 80a2858:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a2868:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2878:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2888:	0000 0000                                   ....

080a288c <_ZTV3UDP>:
	...
 80a2894:	00b5 080a 00e3 080a 1423 080a 1543 080a     ........#...C...
 80a28a4:	141b 080a 1439 080a 1457 080a 1471 080a     ....9...W...q...
 80a28b4:	1493 080a 14dd 080a 14ff 080a 1695 080a     ................
 80a28c4:	15a9 080a 1405 080a 17a5 080a 1611 080a     ................
 80a28d4:	16cd 080a 17d3 080a 156d 080a 1411 080a     ........m.......
 80a28e4:	1675 080a 1417 080a 1473 080a fff0 ffff     u.......s.......
 80a28f4:	0000 0000 148b 080a                         ........

080a28fc <_ZTV11USARTSerial>:
	...
 80a2904:	180b 080a 185b 080a 1869 080a 10ed 080a     ....[...i.......
 80a2914:	181f 080a 1841 080a 182d 080a 1855 080a     ....A...-...U...
 80a2924:	180d 080a 1811 080a                         ........

080a292c <_ZTV9USBSerial>:
	...
 80a2934:	1911 080a 1961 080a 196f 080a 10ed 080a     ....a...o.......
 80a2944:	194d 080a 1913 080a 1929 080a 195b 080a     M.......)...[...
 80a2954:	193f 080a 190d 080a                         ?.......

080a295c <_ZTVN5spark9WiFiClassE>:
	...
 80a2964:	1b57 080a 1b4d 080a 1b43 080a 1ab5 080a     W...M...C.......
 80a2974:	1b37 080a 1b2b 080a 1b1f 080a 1b17 080a     7...+...........
 80a2984:	1b0d 080a 1b03 080a 1abf 080a               ............

080a2990 <__sf_fake_stdin>:
	...

080a29b0 <__sf_fake_stdout>:
	...

080a29d0 <__sf_fake_stderr>:
	...
 80a29f0:	0043                                        C.

080a29f2 <link_const_variable_data_end>:
	...

080a29f4 <link_constructors_location>:
 80a29f4:	080a0215 	.word	0x080a0215
 80a29f8:	080a0291 	.word	0x080a0291
 80a29fc:	080a02b5 	.word	0x080a02b5
 80a2a00:	080a09e1 	.word	0x080a09e1
 80a2a04:	080a09e5 	.word	0x080a09e5
 80a2a08:	080a09f9 	.word	0x080a09f9
 80a2a0c:	080a0ff9 	.word	0x080a0ff9
 80a2a10:	080a10d9 	.word	0x080a10d9
 80a2a14:	080a11f1 	.word	0x080a11f1
 80a2a18:	080a13d9 	.word	0x080a13d9
 80a2a1c:	080a13f1 	.word	0x080a13f1
 80a2a20:	080a1b61 	.word	0x080a1b61
 80a2a24:	080a1d89 	.word	0x080a1d89
 80a2a28:	080a1db9 	.word	0x080a1db9
 80a2a2c:	080a1e0d 	.word	0x080a1e0d
 80a2a30:	080a1ed1 	.word	0x080a1ed1
 80a2a34:	080a1f55 	.word	0x080a1f55
 80a2a38:	080a1fd9 	.word	0x080a1fd9

080a2a3c <link_constructors_end>:
 80a2a3c:	00000000 	.word	0x00000000
