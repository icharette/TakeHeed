
/Users/ninjacat/Documents/Particle/TakeHeed/TakeHeed_ParticleSetup/target/1.4.1-rc.1/photon/TakeHeed_ParticleSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3f80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  20000000  080a3f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006cc  20000090  20000090  00030090  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4014  080a4014  00024014  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a403c  080a403c  0002403c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bd071  00000000  00000000  00024040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000114b5  00000000  00000000  000e10b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018597  00000000  00000000  000f2566  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023b0  00000000  00000000  0010aafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003840  00000000  00000000  0010cead  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026db2  00000000  00000000  001106ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002878f  00000000  00000000  0013749f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a77ac  00000000  00000000  0015fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c5f8  00000000  00000000  002073dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fd05 	bl	80a3a3c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fd0a 	bl	80a3a52 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3f84 	.word	0x080a3f84
 80a004c:	20000090 	.word	0x20000090
 80a0050:	20000090 	.word	0x20000090
 80a0054:	2000075c 	.word	0x2000075c
 80a0058:	2000075c 	.word	0x2000075c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 f85d 	bl	80a311c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3f3c 	.word	0x080a3f3c
 80a0084:	080a3f7c 	.word	0x080a3f7c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b968 	b.w	80a035c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f891 	bl	80a01b4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 b803 	b.w	80a30a0 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f002 b91f 	b.w	80a22dc <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 b925 	b.w	80a22ec <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f002 fc6c 	bl	80a299c <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f002 fda1 	bl	80a2c0c <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a3ddc 	.word	0x080a3ddc

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f003 f8f8 	bl	80a32ce <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f003 f8ee 	bl	80a32ce <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <_Z8setupImuv>:
void printAccel();    
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void calibrateSensor();

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00f8:	4811      	ldr	r0, [pc, #68]	; (80a0140 <_Z8setupImuv+0x48>)
//Function definitions 
void printAccel();    
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void calibrateSensor();

void setupImu(){
 80a00fa:	b508      	push	{r3, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00fc:	2301      	movs	r3, #1
 80a00fe:	7003      	strb	r3, [r0, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
 80a0100:	231e      	movs	r3, #30
 80a0102:	7083      	strb	r3, [r0, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0104:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a0106:	4a0f      	ldr	r2, [pc, #60]	; (80a0144 <_Z8setupImuv+0x4c>)
void calibrateSensor();

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0108:	7043      	strb	r3, [r0, #1]
  lossThreshold = 5;
 80a010a:	4b0f      	ldr	r3, [pc, #60]	; (80a0148 <_Z8setupImuv+0x50>)
 80a010c:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a010e:	4b0f      	ldr	r3, [pc, #60]	; (80a014c <_Z8setupImuv+0x54>)
 80a0110:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a0114:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0116:	f000 fcb9 	bl	80a0a8c <_ZN7LSM9DS15beginEv>
 80a011a:	b978      	cbnz	r0, 80a013c <_Z8setupImuv+0x44>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a011c:	f002 fecc 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a0120:	490b      	ldr	r1, [pc, #44]	; (80a0150 <_Z8setupImuv+0x58>)
 80a0122:	f002 fa7e 	bl	80a2622 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a0126:	f002 fec7 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a012a:	490a      	ldr	r1, [pc, #40]	; (80a0154 <_Z8setupImuv+0x5c>)
 80a012c:	f002 fa79 	bl	80a2622 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a0130:	f002 fec2 	bl	80a2eb8 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0134:	4908      	ldr	r1, [pc, #32]	; (80a0158 <_Z8setupImuv+0x60>)
 80a0136:	f002 fa74 	bl	80a2622 <_ZN5Print7printlnEPKc>
 80a013a:	e7fe      	b.n	80a013a <_Z8setupImuv+0x42>
 80a013c:	bd08      	pop	{r3, pc}
 80a013e:	bf00      	nop
 80a0140:	20000118 	.word	0x20000118
 80a0144:	40a00000 	.word	0x40a00000
 80a0148:	200000f4 	.word	0x200000f4
 80a014c:	20000114 	.word	0x20000114
 80a0150:	080a3ad8 	.word	0x080a3ad8
 80a0154:	080a3afc 	.word	0x080a3afc
 80a0158:	080a3b11 	.word	0x080a3b11

080a015c <_Z10setupMotorv>:
    while (1)
      ;
  }
}

void setupMotor(){
 80a015c:	b508      	push	{r3, lr}
  pinMode(6, OUTPUT); //Enable
 80a015e:	2101      	movs	r1, #1
 80a0160:	2006      	movs	r0, #6
 80a0162:	f003 f82b 	bl	80a31bc <pinMode>
  pinMode(5, OUTPUT); //Step
 80a0166:	2101      	movs	r1, #1
 80a0168:	2005      	movs	r0, #5
 80a016a:	f003 f827 	bl	80a31bc <pinMode>
  pinMode(4, OUTPUT); //Direction
 80a016e:	2101      	movs	r1, #1
 80a0170:	2004      	movs	r0, #4
 80a0172:	f003 f823 	bl	80a31bc <pinMode>

  digitalWrite(6,LOW);
}
 80a0176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setupMotor(){
  pinMode(6, OUTPUT); //Enable
  pinMode(5, OUTPUT); //Step
  pinMode(4, OUTPUT); //Direction

  digitalWrite(6,LOW);
 80a017a:	2100      	movs	r1, #0
 80a017c:	2006      	movs	r0, #6
 80a017e:	f003 b82e 	b.w	80a31de <digitalWrite>
	...

080a0184 <_Z13setupNeopixelv>:
}

void setupNeopixel(){
 80a0184:	b508      	push	{r3, lr}
    // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
 80a0186:	4808      	ldr	r0, [pc, #32]	; (80a01a8 <_Z13setupNeopixelv+0x24>)
 80a0188:	f000 fd77 	bl	80a0c7a <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a018c:	4806      	ldr	r0, [pc, #24]	; (80a01a8 <_Z13setupNeopixelv+0x24>)
 80a018e:	f000 fdab 	bl	80a0ce8 <_ZN17Adafruit_NeoPixel4showEv>
  for(int i = 0; i < NUM_LED; i++){
    pixels[i] = 1;
 80a0192:	4a06      	ldr	r2, [pc, #24]	; (80a01ac <_Z13setupNeopixelv+0x28>)
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
  for(int i = 0; i < NUM_LED; i++){
 80a0194:	2300      	movs	r3, #0
    pixels[i] = 1;
 80a0196:	2101      	movs	r1, #1
 80a0198:	5499      	strb	r1, [r3, r2]
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
  for(int i = 0; i < NUM_LED; i++){
 80a019a:	3301      	adds	r3, #1
 80a019c:	2b14      	cmp	r3, #20
 80a019e:	d1fb      	bne.n	80a0198 <_Z13setupNeopixelv+0x14>
    pixels[i] = 1;
  }
  pixelPointer = 20;
 80a01a0:	4a03      	ldr	r2, [pc, #12]	; (80a01b0 <_Z13setupNeopixelv+0x2c>)
 80a01a2:	6013      	str	r3, [r2, #0]
 80a01a4:	bd08      	pop	{r3, pc}
 80a01a6:	bf00      	nop
 80a01a8:	20000100 	.word	0x20000100
 80a01ac:	200001bc 	.word	0x200001bc
 80a01b0:	200001b4 	.word	0x200001b4

080a01b4 <loop>:
  gainThreshold = 0.5;
  lossThreshold = 2;
}

void loop() 
{
 80a01b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a01b8:	4c31      	ldr	r4, [pc, #196]	; (80a0280 <loop+0xcc>)
  lossThreshold = 2;
}

void loop() 
{
  digitalWrite(direction,HIGH);
 80a01ba:	4e32      	ldr	r6, [pc, #200]	; (80a0284 <loop+0xd0>)
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a01bc:	4627      	mov	r7, r4
  lossThreshold = 2;
}

void loop() 
{
  digitalWrite(direction,HIGH);
 80a01be:	2101      	movs	r1, #1
 80a01c0:	8830      	ldrh	r0, [r6, #0]
 80a01c2:	f003 f80c 	bl	80a31de <digitalWrite>
int time = 500;

  for(Index = 0; Index < 2000; Index++)
  {
    digitalWrite(testPin, HIGH);
 80a01c6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80a0288 <loop+0xd4>
void loop() 
{
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a01ca:	2300      	movs	r3, #0
  {
    digitalWrite(testPin, HIGH);
    digitalWrite(step,HIGH);
 80a01cc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80a028c <loop+0xd8>
void loop() 
{
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a01d0:	6023      	str	r3, [r4, #0]
 80a01d2:	6823      	ldr	r3, [r4, #0]
 80a01d4:	4d2a      	ldr	r5, [pc, #168]	; (80a0280 <loop+0xcc>)
 80a01d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a01da:	da1f      	bge.n	80a021c <loop+0x68>
  {
    digitalWrite(testPin, HIGH);
 80a01dc:	2101      	movs	r1, #1
 80a01de:	f8b8 0000 	ldrh.w	r0, [r8]
 80a01e2:	f002 fffc 	bl	80a31de <digitalWrite>
    digitalWrite(step,HIGH);
 80a01e6:	2101      	movs	r1, #1
 80a01e8:	f8b9 0000 	ldrh.w	r0, [r9]
 80a01ec:	f002 fff7 	bl	80a31de <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a01f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01f4:	f001 fe4c 	bl	80a1e90 <HAL_Delay_Microseconds>
    delayMicroseconds(time);
    digitalWrite(step,LOW);
 80a01f8:	2100      	movs	r1, #0
 80a01fa:	f8b9 0000 	ldrh.w	r0, [r9]
 80a01fe:	f002 ffee 	bl	80a31de <digitalWrite>
    digitalWrite(testPin, LOW);
 80a0202:	2100      	movs	r1, #0
 80a0204:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0208:	f002 ffe9 	bl	80a31de <digitalWrite>
 80a020c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0210:	f001 fe3e 	bl	80a1e90 <HAL_Delay_Microseconds>
void loop() 
{
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a0214:	683b      	ldr	r3, [r7, #0]
 80a0216:	3301      	adds	r3, #1
 80a0218:	603b      	str	r3, [r7, #0]
 80a021a:	e7da      	b.n	80a01d2 <loop+0x1e>
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);

    
  }
  delay(1000);
 80a021c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0220:	f002 f874 	bl	80a230c <delay>

  digitalWrite(direction,LOW);
 80a0224:	8830      	ldrh	r0, [r6, #0]
 80a0226:	2100      	movs	r1, #0
 80a0228:	f002 ffd9 	bl	80a31de <digitalWrite>

  for(Index = 0; Index < 2000; Index++)
  {
    digitalWrite(testPin, HIGH);
 80a022c:	4e16      	ldr	r6, [pc, #88]	; (80a0288 <loop+0xd4>)
  }
  delay(1000);

  digitalWrite(direction,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a022e:	2300      	movs	r3, #0
  {
    digitalWrite(testPin, HIGH);
    digitalWrite(step,HIGH);
 80a0230:	4f16      	ldr	r7, [pc, #88]	; (80a028c <loop+0xd8>)
  }
  delay(1000);

  digitalWrite(direction,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a0232:	602b      	str	r3, [r5, #0]
 80a0234:	6823      	ldr	r3, [r4, #0]
 80a0236:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a023a:	da1b      	bge.n	80a0274 <loop+0xc0>
  {
    digitalWrite(testPin, HIGH);
 80a023c:	2101      	movs	r1, #1
 80a023e:	8830      	ldrh	r0, [r6, #0]
 80a0240:	f002 ffcd 	bl	80a31de <digitalWrite>
    digitalWrite(step,HIGH);
 80a0244:	2101      	movs	r1, #1
 80a0246:	8838      	ldrh	r0, [r7, #0]
 80a0248:	f002 ffc9 	bl	80a31de <digitalWrite>
 80a024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0250:	f001 fe1e 	bl	80a1e90 <HAL_Delay_Microseconds>
    delayMicroseconds(time);
    digitalWrite(step,LOW);
 80a0254:	2100      	movs	r1, #0
 80a0256:	8838      	ldrh	r0, [r7, #0]
 80a0258:	f002 ffc1 	bl	80a31de <digitalWrite>
    digitalWrite(testPin, LOW);
 80a025c:	2100      	movs	r1, #0
 80a025e:	8830      	ldrh	r0, [r6, #0]
 80a0260:	f002 ffbd 	bl	80a31de <digitalWrite>
 80a0264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0268:	f001 fe12 	bl	80a1e90 <HAL_Delay_Microseconds>
  }
  delay(1000);

  digitalWrite(direction,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a026c:	682b      	ldr	r3, [r5, #0]
 80a026e:	3301      	adds	r3, #1
 80a0270:	602b      	str	r3, [r5, #0]
 80a0272:	e7df      	b.n	80a0234 <loop+0x80>
    delayMicroseconds(time);
    digitalWrite(step,LOW);
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);
  }
  delay(1000);
 80a0274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a0278:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delayMicroseconds(time);
    digitalWrite(step,LOW);
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);
  }
  delay(1000);
 80a027c:	f002 b846 	b.w	80a230c <delay>
 80a0280:	200001b8 	.word	0x200001b8
 80a0284:	2000000c 	.word	0x2000000c
 80a0288:	20000014 	.word	0x20000014
 80a028c:	20000004 	.word	0x20000004

080a0290 <_Z15calibrateSensorv>:
  Serial.print(", ");
  Serial.println(roll, 2);
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
 80a0290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.print("calibrating sensor...");
 80a0294:	f002 fe10 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a0298:	4929      	ldr	r1, [pc, #164]	; (80a0340 <_Z15calibrateSensorv+0xb0>)
 80a029a:	f002 f9a9 	bl	80a25f0 <_ZN5Print5printEPKc>
  for(int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a029e:	4e29      	ldr	r6, [pc, #164]	; (80a0344 <_Z15calibrateSensorv+0xb4>)
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a02a0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80a0354 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a02a4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80a0358 <_Z15calibrateSensorv+0xc8>
  Serial.println(roll, 2);
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
  Serial.print("calibrating sensor...");
 80a02a8:	250a      	movs	r5, #10
  for(int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a02aa:	4826      	ldr	r0, [pc, #152]	; (80a0344 <_Z15calibrateSensorv+0xb4>)
 80a02ac:	f000 fbd9 	bl	80a0a62 <_ZN7LSM9DS114accelAvailableEv>
 80a02b0:	b110      	cbz	r0, 80a02b8 <_Z15calibrateSensorv+0x28>
    {
      imu.readAccel();
 80a02b2:	4824      	ldr	r0, [pc, #144]	; (80a0344 <_Z15calibrateSensorv+0xb4>)
 80a02b4:	f000 fc82 	bl	80a0bbc <_ZN7LSM9DS19readAccelEv>
    }
    refX += imu.calcAccel(imu.ax);
 80a02b8:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a02bc:	4821      	ldr	r0, [pc, #132]	; (80a0344 <_Z15calibrateSensorv+0xb4>)
 80a02be:	f000 f994 	bl	80a05ea <_ZN7LSM9DS19calcAccelEs>
 80a02c2:	4601      	mov	r1, r0
 80a02c4:	f8db 0000 	ldr.w	r0, [fp]
 80a02c8:	f003 f952 	bl	80a3570 <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a02cc:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  for(int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a02d0:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a02d4:	481b      	ldr	r0, [pc, #108]	; (80a0344 <_Z15calibrateSensorv+0xb4>)
 80a02d6:	f000 f988 	bl	80a05ea <_ZN7LSM9DS19calcAccelEs>
 80a02da:	4601      	mov	r1, r0
 80a02dc:	f8da 0000 	ldr.w	r0, [sl]
 80a02e0:	f003 f946 	bl	80a3570 <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a02e4:	4c18      	ldr	r4, [pc, #96]	; (80a0348 <_Z15calibrateSensorv+0xb8>)
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a02e6:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a02ea:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a02ee:	4815      	ldr	r0, [pc, #84]	; (80a0344 <_Z15calibrateSensorv+0xb4>)
 80a02f0:	f000 f97b 	bl	80a05ea <_ZN7LSM9DS19calcAccelEs>
 80a02f4:	6821      	ldr	r1, [r4, #0]
 80a02f6:	f003 f93b 	bl	80a3570 <__addsf3>
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
  Serial.print("calibrating sensor...");
  for(int i = 0; i < 10; i++){
 80a02fa:	3d01      	subs	r5, #1
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a02fc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a0354 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a0300:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a0358 <_Z15calibrateSensorv+0xc8>
    refZ += imu.calcAccel(imu.az);
 80a0304:	4607      	mov	r7, r0
 80a0306:	6020      	str	r0, [r4, #0]
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
  Serial.print("calibrating sensor...");
  for(int i = 0; i < 10; i++){
 80a0308:	d1cf      	bne.n	80a02aa <_Z15calibrateSensorv+0x1a>
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
 80a030a:	f8d9 0000 	ldr.w	r0, [r9]
 80a030e:	490f      	ldr	r1, [pc, #60]	; (80a034c <_Z15calibrateSensorv+0xbc>)
 80a0310:	f003 faea 	bl	80a38e8 <__aeabi_fdiv>
  refY = refY / 10;
 80a0314:	490d      	ldr	r1, [pc, #52]	; (80a034c <_Z15calibrateSensorv+0xbc>)
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
 80a0316:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / 10;
 80a031a:	f8d8 0000 	ldr.w	r0, [r8]
 80a031e:	f003 fae3 	bl	80a38e8 <__aeabi_fdiv>
  refZ = refZ / 10; 
 80a0322:	490a      	ldr	r1, [pc, #40]	; (80a034c <_Z15calibrateSensorv+0xbc>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
  refY = refY / 10;
 80a0324:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / 10; 
 80a0328:	4638      	mov	r0, r7
 80a032a:	f003 fadd 	bl	80a38e8 <__aeabi_fdiv>
 80a032e:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a0330:	f002 fdc2 	bl	80a2eb8 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a0334:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
  refY = refY / 10;
  refZ = refZ / 10; 
  Serial.println("done");
 80a0338:	4905      	ldr	r1, [pc, #20]	; (80a0350 <_Z15calibrateSensorv+0xc0>)
 80a033a:	f002 b972 	b.w	80a2622 <_ZN5Print7printlnEPKc>
 80a033e:	bf00      	nop
 80a0340:	080a3bbb 	.word	0x080a3bbb
 80a0344:	20000118 	.word	0x20000118
 80a0348:	2000009c 	.word	0x2000009c
 80a034c:	41200000 	.word	0x41200000
 80a0350:	080a3bd1 	.word	0x080a3bd1
 80a0354:	20000094 	.word	0x20000094
 80a0358:	20000098 	.word	0x20000098

080a035c <setup>:

int enable = A5;
int step = A4;
int direction = A3;

void setup() {
 80a035c:	b570      	push	{r4, r5, r6, lr}
 80a035e:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
 80a0360:	f002 fdaa 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a0364:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0368:	f002 fd86 	bl	80a2e78 <_ZN9USBSerial5beginEl>
   bool pressed = false;
  
    pinMode(buttonIn, INPUT);    
 80a036c:	4b43      	ldr	r3, [pc, #268]	; (80a047c <setup+0x120>)
 80a036e:	2100      	movs	r1, #0
 80a0370:	8818      	ldrh	r0, [r3, #0]
 80a0372:	f002 ff23 	bl	80a31bc <pinMode>
    pinMode(buttonOut, INPUT);                                            
 80a0376:	4b42      	ldr	r3, [pc, #264]	; (80a0480 <setup+0x124>)
 80a0378:	2100      	movs	r1, #0
 80a037a:	8818      	ldrh	r0, [r3, #0]
 80a037c:	f002 ff1e 	bl	80a31bc <pinMode>
  
  //waiting for serial to correctly initialze and allocate memory
    //serial object
    while(!Serial);
 80a0380:	f002 fd9a 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a0384:	f002 fd7f 	bl	80a2e86 <_ZN9USBSerialcvbEv>
 80a0388:	2800      	cmp	r0, #0
 80a038a:	d0f9      	beq.n	80a0380 <setup+0x24>
 80a038c:	4c3d      	ldr	r4, [pc, #244]	; (80a0484 <setup+0x128>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a038e:	2300      	movs	r3, #0
 80a0390:	461a      	mov	r2, r3
 80a0392:	4619      	mov	r1, r3
 80a0394:	6860      	ldr	r0, [r4, #4]
 80a0396:	f001 ff41 	bl	80a221c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a039a:	2200      	movs	r2, #0
 80a039c:	4611      	mov	r1, r2
 80a039e:	6860      	ldr	r0, [r4, #4]
 80a03a0:	4d38      	ldr	r5, [pc, #224]	; (80a0484 <setup+0x128>)
 80a03a2:	f001 ff53 	bl	80a224c <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a03a6:	2800      	cmp	r0, #0
 80a03a8:	d0f7      	beq.n	80a039a <setup+0x3e>
    Serial.println("Setup");
 80a03aa:	f002 fd85 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a03ae:	4936      	ldr	r1, [pc, #216]	; (80a0488 <setup+0x12c>)
 80a03b0:	f002 f937 	bl	80a2622 <_ZN5Print7printlnEPKc>
    udp.begin(localPort);
 80a03b4:	4b35      	ldr	r3, [pc, #212]	; (80a048c <setup+0x130>)
 80a03b6:	2200      	movs	r2, #0
 80a03b8:	8819      	ldrh	r1, [r3, #0]
 80a03ba:	4835      	ldr	r0, [pc, #212]	; (80a0490 <setup+0x134>)
 80a03bc:	f002 fac9 	bl	80a2952 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a03c0:	2300      	movs	r3, #0
 80a03c2:	4619      	mov	r1, r3
 80a03c4:	4a33      	ldr	r2, [pc, #204]	; (80a0494 <setup+0x138>)
 80a03c6:	6868      	ldr	r0, [r5, #4]
 80a03c8:	f001 ff78 	bl	80a22bc <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a03cc:	f002 fd74 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a03d0:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a03d2:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a03d4:	2240      	movs	r2, #64	; 0x40
 80a03d6:	2100      	movs	r1, #0
 80a03d8:	a806      	add	r0, sp, #24
 80a03da:	f003 fb3a 	bl	80a3a52 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a03de:	9400      	str	r4, [sp, #0]
 80a03e0:	2340      	movs	r3, #64	; 0x40
 80a03e2:	aa06      	add	r2, sp, #24
 80a03e4:	4621      	mov	r1, r4
 80a03e6:	6868      	ldr	r0, [r5, #4]
 80a03e8:	f001 ff70 	bl	80a22cc <network_get_hostname>
        return String(buf);
 80a03ec:	a906      	add	r1, sp, #24
 80a03ee:	a802      	add	r0, sp, #8
 80a03f0:	f002 fa3e 	bl	80a2870 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03f4:	9902      	ldr	r1, [sp, #8]
 80a03f6:	4630      	mov	r0, r6
 80a03f8:	f002 f913 	bl	80a2622 <_ZN5Print7printlnEPKc>
 80a03fc:	a802      	add	r0, sp, #8
 80a03fe:	f002 f9f0 	bl	80a27e2 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a0402:	f002 fd59 	bl	80a2eb8 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0406:	4622      	mov	r2, r4
 80a0408:	4606      	mov	r6, r0
 80a040a:	4621      	mov	r1, r4
 80a040c:	6868      	ldr	r0, [r5, #4]
 80a040e:	f001 fefd 	bl	80a220c <network_config>

    pinMode(enable, OUTPUT); //Enable
 80a0412:	4d21      	ldr	r5, [pc, #132]	; (80a0498 <setup+0x13c>)
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0414:	1c81      	adds	r1, r0, #2
 80a0416:	a806      	add	r0, sp, #24
 80a0418:	f002 f80a 	bl	80a2430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    while(!WiFi.ready());
    Serial.println("Setup");
    udp.begin(localPort);
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
    Serial.println(WiFi.localIP());
 80a041c:	a906      	add	r1, sp, #24
 80a041e:	4630      	mov	r0, r6
 80a0420:	f002 f909 	bl	80a2636 <_ZN5Print7printlnERK9Printable>

    pinMode(enable, OUTPUT); //Enable
 80a0424:	8828      	ldrh	r0, [r5, #0]
 80a0426:	2101      	movs	r1, #1
 80a0428:	f002 fec8 	bl	80a31bc <pinMode>
    pinMode(step, OUTPUT); //Step
 80a042c:	4b1b      	ldr	r3, [pc, #108]	; (80a049c <setup+0x140>)
 80a042e:	2101      	movs	r1, #1
 80a0430:	8818      	ldrh	r0, [r3, #0]
 80a0432:	f002 fec3 	bl	80a31bc <pinMode>
    pinMode(direction, OUTPUT); //Direction
 80a0436:	4b1a      	ldr	r3, [pc, #104]	; (80a04a0 <setup+0x144>)
 80a0438:	2101      	movs	r1, #1
 80a043a:	8818      	ldrh	r0, [r3, #0]
 80a043c:	f002 febe 	bl	80a31bc <pinMode>

    digitalWrite(enable,LOW);
 80a0440:	4621      	mov	r1, r4
 80a0442:	8828      	ldrh	r0, [r5, #0]
 80a0444:	f002 fecb 	bl	80a31de <digitalWrite>
    // Set the initial state of subscriber
    // to off just in case.
    //  Particle.publish("elaEvent", "high", 60, PUBLIC); //PUBLIC OR PRIVATE OR DEVICE ID
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);

    Serial.begin(115200);
 80a0448:	f002 fd36 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a044c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0450:	f002 fd12 	bl	80a2e78 <_ZN9USBSerial5beginEl>
  setupImu();
 80a0454:	f7ff fe50 	bl	80a00f8 <_Z8setupImuv>
  calibrateSensor();
 80a0458:	f7ff ff1a 	bl	80a0290 <_Z15calibrateSensorv>
  setupMotor();
 80a045c:	f7ff fe7e 	bl	80a015c <_Z10setupMotorv>
  setupNeopixel();
 80a0460:	f7ff fe90 	bl	80a0184 <_Z13setupNeopixelv>
  state = 0;
 80a0464:	4b0f      	ldr	r3, [pc, #60]	; (80a04a4 <setup+0x148>)
  gainThreshold = 0.5;
 80a0466:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    Serial.begin(115200);
  setupImu();
  calibrateSensor();
  setupMotor();
  setupNeopixel();
  state = 0;
 80a046a:	601c      	str	r4, [r3, #0]
  gainThreshold = 0.5;
 80a046c:	4b0e      	ldr	r3, [pc, #56]	; (80a04a8 <setup+0x14c>)
 80a046e:	601a      	str	r2, [r3, #0]
  lossThreshold = 2;
 80a0470:	4b0e      	ldr	r3, [pc, #56]	; (80a04ac <setup+0x150>)
 80a0472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a0476:	601a      	str	r2, [r3, #0]
}
 80a0478:	b016      	add	sp, #88	; 0x58
 80a047a:	bd70      	pop	{r4, r5, r6, pc}
 80a047c:	200000fc 	.word	0x200000fc
 80a0480:	20000010 	.word	0x20000010
 80a0484:	20000658 	.word	0x20000658
 80a0488:	080a3bd6 	.word	0x080a3bd6
 80a048c:	20000008 	.word	0x20000008
 80a0490:	200000a0 	.word	0x200000a0
 80a0494:	080a3bdc 	.word	0x080a3bdc
 80a0498:	20000000 	.word	0x20000000
 80a049c:	20000004 	.word	0x20000004
 80a04a0:	2000000c 	.word	0x2000000c
 80a04a4:	200000f8 	.word	0x200000f8
 80a04a8:	20000114 	.word	0x20000114
 80a04ac:	200000f4 	.word	0x200000f4

080a04b0 <_GLOBAL__sub_I_imu>:
    Serial.print(" Z:");
    Serial.print(dZ);
    Serial.print(" av: ");
    Serial.print(avMvmt);
    Serial.println(" ");
 80a04b0:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a04b2:	f001 fd05 	bl	80a1ec0 <HAL_Pin_Map>
LSM9DS1 imu;
// #define LED_PIN 8
#define LED_PIN D0
#define NUM_LED 20
// Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, D2, WS2812B);
 80a04b6:	4d19      	ldr	r5, [pc, #100]	; (80a051c <_GLOBAL__sub_I_imu+0x6c>)
#include "math.h"
#include "SparkFunLSM9DS1.h"
#ifdef __AVR__
#include <avr/power.h>
#endif
LSM9DS1 imu;
 80a04b8:	4819      	ldr	r0, [pc, #100]	; (80a0520 <_GLOBAL__sub_I_imu+0x70>)
 80a04ba:	f000 f88f 	bl	80a05dc <_ZN7LSM9DS1C1Ev>
// #define LED_PIN 8
#define LED_PIN D0
#define NUM_LED 20
// Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, D2, WS2812B);
 80a04be:	4c19      	ldr	r4, [pc, #100]	; (80a0524 <_GLOBAL__sub_I_imu+0x74>)
 80a04c0:	2302      	movs	r3, #2
 80a04c2:	461a      	mov	r2, r3
 80a04c4:	2114      	movs	r1, #20
 80a04c6:	4628      	mov	r0, r5
 80a04c8:	f000 fbfc 	bl	80a0cc4 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04cc:	4622      	mov	r2, r4
 80a04ce:	4916      	ldr	r1, [pc, #88]	; (80a0528 <_GLOBAL__sub_I_imu+0x78>)
 80a04d0:	4628      	mov	r0, r5
 80a04d2:	f002 fef7 	bl	80a32c4 <__aeabi_atexit>
  pixelPointer = 20;
}
void setup();
void loop();

SYSTEM_THREAD(ENABLED);
 80a04d6:	2100      	movs	r1, #0
 80a04d8:	2001      	movs	r0, #1
 80a04da:	f001 fe73 	bl	80a21c4 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a04de:	4b13      	ldr	r3, [pc, #76]	; (80a052c <_GLOBAL__sub_I_imu+0x7c>)
 80a04e0:	2200      	movs	r2, #0
 80a04e2:	701a      	strb	r2, [r3, #0]
 80a04e4:	805a      	strh	r2, [r3, #2]
 80a04e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a04ea:	4d11      	ldr	r5, [pc, #68]	; (80a0530 <_GLOBAL__sub_I_imu+0x80>)
 80a04ec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a04ee:	2002      	movs	r0, #2
 80a04f0:	f001 fe58 	bl	80a21a4 <set_system_mode>
 80a04f4:	4628      	mov	r0, r5
 80a04f6:	f001 ff8d 	bl	80a2414 <_ZN9IPAddressC1Ev>
 80a04fa:	4628      	mov	r0, r5
int port;
UDP udp;
 80a04fc:	4d0d      	ldr	r5, [pc, #52]	; (80a0534 <_GLOBAL__sub_I_imu+0x84>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a04fe:	4622      	mov	r2, r4
 80a0500:	490d      	ldr	r1, [pc, #52]	; (80a0538 <_GLOBAL__sub_I_imu+0x88>)
 80a0502:	f002 fedf 	bl	80a32c4 <__aeabi_atexit>
int port;
UDP udp;
 80a0506:	4628      	mov	r0, r5
 80a0508:	f002 fb62 	bl	80a2bd0 <_ZN3UDPC1Ev>
 80a050c:	4622      	mov	r2, r4
 80a050e:	4628      	mov	r0, r5
    Serial.print(" Z:");
    Serial.print(dZ);
    Serial.print(" av: ");
    Serial.print(avMvmt);
    Serial.println(" ");
 80a0510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}


unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0514:	4909      	ldr	r1, [pc, #36]	; (80a053c <_GLOBAL__sub_I_imu+0x8c>)
 80a0516:	f002 bed5 	b.w	80a32c4 <__aeabi_atexit>
 80a051a:	bf00      	nop
 80a051c:	20000100 	.word	0x20000100
 80a0520:	20000118 	.word	0x20000118
 80a0524:	20000090 	.word	0x20000090
 80a0528:	080a0c27 	.word	0x080a0c27
 80a052c:	200000ec 	.word	0x200000ec
 80a0530:	2000019c 	.word	0x2000019c
 80a0534:	200000a0 	.word	0x200000a0
 80a0538:	080a00b3 	.word	0x080a00b3
 80a053c:	080a00b5 	.word	0x080a00b5

080a0540 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a0540:	f001 bcbe 	b.w	80a1ec0 <HAL_Pin_Map>

080a0544 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0544:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0546:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a0548:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a054a:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a054c:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a054e:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0550:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0552:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0554:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0556:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0558:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a055a:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a055c:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a055e:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0560:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0564:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0566:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0568:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a056a:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a056c:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a056e:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0570:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0572:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0574:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0576:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0578:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a057a:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a057c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0580:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0582:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0584:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0586:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0588:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a058a:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a058c:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a058e:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0590:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0592:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0594:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0596:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a059a:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a059c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a05a0:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a05a4:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a05a6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a05aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a05ae:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a05b2:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a05b4:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a05b6:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a05b8:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a05ba:	6565      	str	r5, [r4, #84]	; 0x54
 80a05bc:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a05c0:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a05c4:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a05c8:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a05cc:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a05d0:	d1f0      	bne.n	80a05b4 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a05d2:	f04f 0300 	mov.w	r3, #0
 80a05d6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a05da:	bd30      	pop	{r4, r5, pc}

080a05dc <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a05dc:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a05de:	231e      	movs	r3, #30
 80a05e0:	226b      	movs	r2, #107	; 0x6b
 80a05e2:	2101      	movs	r1, #1
 80a05e4:	f7ff ffae 	bl	80a0544 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a05e8:	bd10      	pop	{r4, pc}

080a05ea <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a05ea:	b510      	push	{r4, lr}
 80a05ec:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a05ee:	4608      	mov	r0, r1
 80a05f0:	f003 f872 	bl	80a36d8 <__aeabi_i2f>
 80a05f4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a05f6:	f003 f8c3 	bl	80a3780 <__aeabi_fmul>
}
 80a05fa:	bd10      	pop	{r4, pc}

080a05fc <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a05fc:	b510      	push	{r4, lr}
 80a05fe:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0600:	88c0      	ldrh	r0, [r0, #6]
 80a0602:	f003 f865 	bl	80a36d0 <__aeabi_ui2f>
 80a0606:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a060a:	f003 f8b9 	bl	80a3780 <__aeabi_fmul>
 80a060e:	6760      	str	r0, [r4, #116]	; 0x74
 80a0610:	bd10      	pop	{r4, pc}

080a0612 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0612:	b510      	push	{r4, lr}
 80a0614:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0616:	7dc0      	ldrb	r0, [r0, #23]
 80a0618:	f003 f85a 	bl	80a36d0 <__aeabi_ui2f>
 80a061c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0620:	f003 f8ae 	bl	80a3780 <__aeabi_fmul>
 80a0624:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0626:	bd10      	pop	{r4, pc}

080a0628 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0628:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a062c:	3b04      	subs	r3, #4
 80a062e:	2b0c      	cmp	r3, #12
 80a0630:	d814      	bhi.n	80a065c <_ZN7LSM9DS18calcmResEv+0x34>
 80a0632:	e8df f003 	tbb	[pc, r3]
 80a0636:	1307      	.short	0x1307
 80a0638:	130a1313 	.word	0x130a1313
 80a063c:	130d1313 	.word	0x130d1313
 80a0640:	1313      	.short	0x1313
 80a0642:	10          	.byte	0x10
 80a0643:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0644:	4b06      	ldr	r3, [pc, #24]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0646:	681b      	ldr	r3, [r3, #0]
 80a0648:	e007      	b.n	80a065a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a064a:	4b05      	ldr	r3, [pc, #20]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a064c:	685b      	ldr	r3, [r3, #4]
 80a064e:	e004      	b.n	80a065a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0650:	4b03      	ldr	r3, [pc, #12]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0652:	689b      	ldr	r3, [r3, #8]
 80a0654:	e001      	b.n	80a065a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0658:	68db      	ldr	r3, [r3, #12]
 80a065a:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a065c:	4770      	bx	lr
 80a065e:	bf00      	nop
 80a0660:	20000018 	.word	0x20000018

080a0664 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0664:	88c3      	ldrh	r3, [r0, #6]
 80a0666:	2bf5      	cmp	r3, #245	; 0xf5
 80a0668:	d007      	beq.n	80a067a <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a066a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a066e:	d004      	beq.n	80a067a <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0670:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0674:	bf1c      	itt	ne
 80a0676:	23f5      	movne	r3, #245	; 0xf5
 80a0678:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a067a:	7dc2      	ldrb	r2, [r0, #23]
 80a067c:	2a10      	cmp	r2, #16
 80a067e:	d803      	bhi.n	80a0688 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0680:	4b08      	ldr	r3, [pc, #32]	; (80a06a4 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0682:	40d3      	lsrs	r3, r2
 80a0684:	07da      	lsls	r2, r3, #31
 80a0686:	d401      	bmi.n	80a068c <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0688:	2302      	movs	r3, #2
 80a068a:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a068c:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0690:	2a10      	cmp	r2, #16
 80a0692:	d803      	bhi.n	80a069c <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0694:	4b04      	ldr	r3, [pc, #16]	; (80a06a8 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0696:	40d3      	lsrs	r3, r2
 80a0698:	07db      	lsls	r3, r3, #31
 80a069a:	d402      	bmi.n	80a06a2 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a069c:	2304      	movs	r3, #4
 80a069e:	f880 3020 	strb.w	r3, [r0, #32]
 80a06a2:	4770      	bx	lr
 80a06a4:	00010114 	.word	0x00010114
 80a06a8:	00011110 	.word	0x00011110

080a06ac <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a06ac:	b510      	push	{r4, lr}
 80a06ae:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a06b0:	2101      	movs	r1, #1
 80a06b2:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a06b6:	f002 fd81 	bl	80a31bc <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a06ba:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a06be:	2101      	movs	r1, #1
 80a06c0:	f002 fd8d 	bl	80a31de <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a06c4:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a06c8:	2101      	movs	r1, #1
 80a06ca:	f002 fd77 	bl	80a31bc <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a06ce:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a06d2:	4c0a      	ldr	r4, [pc, #40]	; (80a06fc <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a06d4:	2101      	movs	r1, #1
 80a06d6:	f002 fd82 	bl	80a31de <digitalWrite>
	
	SPI.begin();
 80a06da:	4620      	mov	r0, r4
 80a06dc:	f002 f812 	bl	80a2704 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	2108      	movs	r1, #8
 80a06e4:	f002 f860 	bl	80a27a8 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a06e8:	4620      	mov	r0, r4
 80a06ea:	2101      	movs	r1, #1
 80a06ec:	f002 f80f 	bl	80a270e <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a06f0:	4620      	mov	r0, r4
}
 80a06f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a06f6:	2100      	movs	r1, #0
 80a06f8:	f002 b80c 	b.w	80a2714 <_ZN8SPIClass11setDataModeEh>
 80a06fc:	2000069c 	.word	0x2000069c

080a0700 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0702:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0704:	4617      	mov	r7, r2
 80a0706:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0708:	4d09      	ldr	r5, [pc, #36]	; (80a0730 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a070a:	4620      	mov	r0, r4
 80a070c:	2100      	movs	r1, #0
 80a070e:	f002 fd66 	bl	80a31de <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0712:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0716:	4628      	mov	r0, r5
 80a0718:	f002 f85a 	bl	80a27d0 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a071c:	4631      	mov	r1, r6
 80a071e:	4628      	mov	r0, r5
 80a0720:	f002 f856 	bl	80a27d0 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0724:	4620      	mov	r0, r4
}
 80a0726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a072a:	2101      	movs	r1, #1
 80a072c:	f002 bd57 	b.w	80a31de <digitalWrite>
 80a0730:	2000069c 	.word	0x2000069c

080a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0736:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0738:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a073c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0740:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0742:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0746:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a074a:	d103      	bne.n	80a0754 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a074c:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a074e:	bf88      	it	hi
 80a0750:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0754:	b28c      	uxth	r4, r1
 80a0756:	4620      	mov	r0, r4
 80a0758:	2100      	movs	r1, #0
 80a075a:	f002 fd40 	bl	80a31de <digitalWrite>
	SPI.transfer(rAddress);
 80a075e:	4629      	mov	r1, r5
 80a0760:	4809      	ldr	r0, [pc, #36]	; (80a0788 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0762:	f002 f835 	bl	80a27d0 <_ZN8SPIClass8transferEh>
 80a0766:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0768:	1bab      	subs	r3, r5, r6
 80a076a:	429f      	cmp	r7, r3
 80a076c:	dd06      	ble.n	80a077c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a076e:	2100      	movs	r1, #0
 80a0770:	4805      	ldr	r0, [pc, #20]	; (80a0788 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0772:	f002 f82d 	bl	80a27d0 <_ZN8SPIClass8transferEh>
 80a0776:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a077a:	e7f5      	b.n	80a0768 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a077c:	4620      	mov	r0, r4
 80a077e:	2101      	movs	r1, #1
 80a0780:	f002 fd2d 	bl	80a31de <digitalWrite>
	
	return 1;
}
 80a0784:	2001      	movs	r0, #1
 80a0786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0788:	2000069c 	.word	0x2000069c

080a078c <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a078c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a078e:	2301      	movs	r3, #1
 80a0790:	9300      	str	r3, [sp, #0]
 80a0792:	f10d 030f 	add.w	r3, sp, #15
 80a0796:	f7ff ffcd 	bl	80a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a079a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a079e:	b005      	add	sp, #20
 80a07a0:	f85d fb04 	ldr.w	pc, [sp], #4

080a07a4 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a07a4:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a07a6:	f002 fd33 	bl	80a3210 <_Z19__fetch_global_Wirev>
}
 80a07aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a07ae:	f001 bdf7 	b.w	80a23a0 <_ZN7TwoWire5beginEv>

080a07b2 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a07b2:	b570      	push	{r4, r5, r6, lr}
 80a07b4:	460e      	mov	r6, r1
 80a07b6:	4615      	mov	r5, r2
 80a07b8:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a07ba:	f002 fd29 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a07be:	4631      	mov	r1, r6
 80a07c0:	f001 fe00 	bl	80a23c4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a07c4:	f002 fd24 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a07c8:	6803      	ldr	r3, [r0, #0]
 80a07ca:	4629      	mov	r1, r5
 80a07cc:	689b      	ldr	r3, [r3, #8]
 80a07ce:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a07d0:	f002 fd1e 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a07d4:	6803      	ldr	r3, [r0, #0]
 80a07d6:	4621      	mov	r1, r4
 80a07d8:	689a      	ldr	r2, [r3, #8]
 80a07da:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a07dc:	f002 fd18 	bl	80a3210 <_Z19__fetch_global_Wirev>
}
 80a07e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a07e4:	f001 bdf6 	b.w	80a23d4 <_ZN7TwoWire15endTransmissionEv>

080a07e8 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a07e8:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07ea:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a07ec:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07ee:	2a01      	cmp	r2, #1
 80a07f0:	d105      	bne.n	80a07fe <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a07f2:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a07f4:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a07f6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a07fa:	f7ff bfda 	b.w	80a07b2 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a07fe:	b92a      	cbnz	r2, 80a080c <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0800:	460a      	mov	r2, r1
}
 80a0802:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0804:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0808:	f7ff bf7a 	b.w	80a0700 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a080c:	bc10      	pop	{r4}
 80a080e:	4770      	bx	lr

080a0810 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0810:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0812:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0814:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0816:	b113      	cbz	r3, 80a081e <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0818:	7a03      	ldrb	r3, [r0, #8]
 80a081a:	015b      	lsls	r3, r3, #5
 80a081c:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a081e:	88e2      	ldrh	r2, [r4, #6]
 80a0820:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0824:	d005      	beq.n	80a0832 <_ZN7LSM9DS18initGyroEv+0x22>
 80a0826:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a082a:	d104      	bne.n	80a0836 <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a082c:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0830:	e001      	b.n	80a0836 <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0832:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0836:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0838:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a083a:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a083e:	431a      	orrs	r2, r3
 80a0840:	4620      	mov	r0, r4
 80a0842:	f7ff ffd1 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0846:	2200      	movs	r2, #0
 80a0848:	2111      	movs	r1, #17
 80a084a:	4620      	mov	r0, r4
 80a084c:	f7ff ffcc 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0850:	7aa3      	ldrb	r3, [r4, #10]
 80a0852:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0854:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0856:	bf14      	ite	ne
 80a0858:	2280      	movne	r2, #128	; 0x80
 80a085a:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a085c:	b12b      	cbz	r3, 80a086a <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a085e:	7b23      	ldrb	r3, [r4, #12]
 80a0860:	f003 030f 	and.w	r3, r3, #15
 80a0864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0868:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a086a:	2112      	movs	r1, #18
 80a086c:	4620      	mov	r0, r4
 80a086e:	f7ff ffbb 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0872:	7ce3      	ldrb	r3, [r4, #19]
 80a0874:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0876:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0878:	bf0c      	ite	eq
 80a087a:	2200      	moveq	r2, #0
 80a087c:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a087e:	b113      	cbz	r3, 80a0886 <_ZN7LSM9DS18initGyroEv+0x76>
 80a0880:	f042 0210 	orr.w	r2, r2, #16
 80a0884:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0886:	7c63      	ldrb	r3, [r4, #17]
 80a0888:	b10b      	cbz	r3, 80a088e <_ZN7LSM9DS18initGyroEv+0x7e>
 80a088a:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a088e:	7d23      	ldrb	r3, [r4, #20]
 80a0890:	b10b      	cbz	r3, 80a0896 <_ZN7LSM9DS18initGyroEv+0x86>
 80a0892:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0896:	211e      	movs	r1, #30
 80a0898:	4620      	mov	r0, r4
 80a089a:	f7ff ffa5 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a089e:	7b63      	ldrb	r3, [r4, #13]
 80a08a0:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a08a2:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a08a4:	bf0c      	ite	eq
 80a08a6:	2200      	moveq	r2, #0
 80a08a8:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a08aa:	b113      	cbz	r3, 80a08b2 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a08ac:	f042 0210 	orr.w	r2, r2, #16
 80a08b0:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a08b2:	7be3      	ldrb	r3, [r4, #15]
 80a08b4:	b10b      	cbz	r3, 80a08ba <_ZN7LSM9DS18initGyroEv+0xaa>
 80a08b6:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a08ba:	4620      	mov	r0, r4
}
 80a08bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a08c0:	2113      	movs	r1, #19
 80a08c2:	f7ff bf91 	b.w	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>

080a08c6 <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a08c6:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a08c8:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a08ca:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a08cc:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a08ce:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a08d0:	bf0c      	ite	eq
 80a08d2:	2200      	moveq	r2, #0
 80a08d4:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a08d6:	b113      	cbz	r3, 80a08de <_ZN7LSM9DS19initAccelEv+0x18>
 80a08d8:	f042 0210 	orr.w	r2, r2, #16
 80a08dc:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a08de:	7e63      	ldrb	r3, [r4, #25]
 80a08e0:	b10b      	cbz	r3, 80a08e6 <_ZN7LSM9DS19initAccelEv+0x20>
 80a08e2:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a08e6:	211f      	movs	r1, #31
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	f7ff ff7d 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a08ee:	7da2      	ldrb	r2, [r4, #22]
 80a08f0:	b112      	cbz	r2, 80a08f8 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a08f2:	7e22      	ldrb	r2, [r4, #24]
 80a08f4:	0152      	lsls	r2, r2, #5
 80a08f6:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a08f8:	7de3      	ldrb	r3, [r4, #23]
 80a08fa:	2b08      	cmp	r3, #8
 80a08fc:	d006      	beq.n	80a090c <_ZN7LSM9DS19initAccelEv+0x46>
 80a08fe:	2b10      	cmp	r3, #16
 80a0900:	d007      	beq.n	80a0912 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0902:	2b04      	cmp	r3, #4
 80a0904:	d107      	bne.n	80a0916 <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0906:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a090a:	e004      	b.n	80a0916 <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a090c:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0910:	e001      	b.n	80a0916 <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0912:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0916:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a091a:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a091c:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a091e:	bfa2      	ittt	ge
 80a0920:	f003 0303 	andge.w	r3, r3, #3
 80a0924:	431a      	orrge	r2, r3
 80a0926:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a092a:	4620      	mov	r0, r4
 80a092c:	f7ff ff5c 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0930:	7f62      	ldrb	r2, [r4, #29]
 80a0932:	b12a      	cbz	r2, 80a0940 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0934:	7fa2      	ldrb	r2, [r4, #30]
 80a0936:	0152      	lsls	r2, r2, #5
 80a0938:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a093c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0940:	4620      	mov	r0, r4
}
 80a0942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0946:	2121      	movs	r1, #33	; 0x21
 80a0948:	f7ff bf4e 	b.w	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>

080a094c <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a094c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a094e:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0950:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0952:	2a01      	cmp	r2, #1
 80a0954:	d105      	bne.n	80a0962 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0956:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0958:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a095a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a095e:	f7ff bf28 	b.w	80a07b2 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0962:	b92a      	cbnz	r2, 80a0970 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0964:	460a      	mov	r2, r1
}
 80a0966:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0968:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a096c:	f7ff bec8 	b.w	80a0700 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0970:	bc10      	pop	{r4}
 80a0972:	4770      	bx	lr

080a0974 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0974:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0976:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a097a:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a097c:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a097e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0982:	bf08      	it	eq
 80a0984:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0986:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a098a:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a098e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0992:	bf18      	it	ne
 80a0994:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0996:	009b      	lsls	r3, r3, #2
 80a0998:	f003 031c 	and.w	r3, r3, #28
 80a099c:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a099e:	431a      	orrs	r2, r3
 80a09a0:	2120      	movs	r1, #32
 80a09a2:	f7ff ffd3 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
 80a09a6:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a09aa:	4620      	mov	r0, r4
 80a09ac:	3b08      	subs	r3, #8
 80a09ae:	b2db      	uxtb	r3, r3
 80a09b0:	2b08      	cmp	r3, #8
 80a09b2:	bf96      	itet	ls
 80a09b4:	4a12      	ldrls	r2, [pc, #72]	; (80a0a00 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a09b6:	2200      	movhi	r2, #0
 80a09b8:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a09ba:	2121      	movs	r1, #33	; 0x21
 80a09bc:	f7ff ffc6 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a09c0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a09c4:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a09c6:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a09c8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a09cc:	bf0c      	ite	eq
 80a09ce:	2200      	moveq	r2, #0
 80a09d0:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a09d2:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a09d6:	431a      	orrs	r2, r3
 80a09d8:	2122      	movs	r1, #34	; 0x22
 80a09da:	f7ff ffb7 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a09de:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a09e2:	4620      	mov	r0, r4
 80a09e4:	0092      	lsls	r2, r2, #2
 80a09e6:	f002 020c 	and.w	r2, r2, #12
 80a09ea:	2123      	movs	r1, #35	; 0x23
 80a09ec:	f7ff ffae 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a09f0:	4620      	mov	r0, r4
}
 80a09f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a09f6:	2200      	movs	r2, #0
 80a09f8:	2124      	movs	r1, #36	; 0x24
 80a09fa:	f7ff bfa7 	b.w	80a094c <_ZN7LSM9DS110mWriteByteEhh>
 80a09fe:	bf00      	nop
 80a0a00:	080a3c1c 	.word	0x080a3c1c

080a0a04 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0a04:	b538      	push	{r3, r4, r5, lr}
 80a0a06:	460c      	mov	r4, r1
 80a0a08:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0a0a:	f002 fc01 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0a0e:	4621      	mov	r1, r4
 80a0a10:	f001 fcd8 	bl	80a23c4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0a14:	f002 fbfc 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0a18:	6803      	ldr	r3, [r0, #0]
 80a0a1a:	4629      	mov	r1, r5
 80a0a1c:	689b      	ldr	r3, [r3, #8]
 80a0a1e:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0a20:	f002 fbf6 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0a24:	2100      	movs	r1, #0
 80a0a26:	f001 fcd1 	bl	80a23cc <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0a2a:	f002 fbf1 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0a2e:	2201      	movs	r2, #1
 80a0a30:	4621      	mov	r1, r4
 80a0a32:	f001 fcc4 	bl	80a23be <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0a36:	f002 fbeb 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0a3a:	6803      	ldr	r3, [r0, #0]
 80a0a3c:	695b      	ldr	r3, [r3, #20]
 80a0a3e:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0a40:	b2c0      	uxtb	r0, r0
 80a0a42:	bd38      	pop	{r3, r4, r5, pc}

080a0a44 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0a44:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0a46:	7801      	ldrb	r1, [r0, #0]
 80a0a48:	2901      	cmp	r1, #1
 80a0a4a:	d103      	bne.n	80a0a54 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0a4c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0a50:	f7ff bfd8 	b.w	80a0a04 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0a54:	b919      	cbnz	r1, 80a0a5e <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0a56:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0a5a:	f7ff be97 	b.w	80a078c <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0a5e:	2000      	movs	r0, #0
 80a0a60:	4770      	bx	lr

080a0a62 <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a0a62:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a0a64:	2127      	movs	r1, #39	; 0x27
 80a0a66:	f7ff ffed 	bl	80a0a44 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a0a6a:	f000 0001 	and.w	r0, r0, #1
 80a0a6e:	bd08      	pop	{r3, pc}

080a0a70 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a0a70:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0a72:	7801      	ldrb	r1, [r0, #0]
 80a0a74:	2901      	cmp	r1, #1
 80a0a76:	d103      	bne.n	80a0a80 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0a78:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0a7c:	f7ff bfc2 	b.w	80a0a04 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0a80:	b919      	cbnz	r1, 80a0a8a <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a0a82:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0a86:	f7ff be81 	b.w	80a078c <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0a8a:	4770      	bx	lr

080a0a8c <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0a8c:	b538      	push	{r3, r4, r5, lr}
 80a0a8e:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a0a90:	7843      	ldrb	r3, [r0, #1]
 80a0a92:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0a96:	7883      	ldrb	r3, [r0, #2]
 80a0a98:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0a9c:	f7ff fde2 	bl	80a0664 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a0aa0:	f7ff fdac 	bl	80a05fc <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f7ff fdbf 	bl	80a0628 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0aaa:	4620      	mov	r0, r4
 80a0aac:	f7ff fdb1 	bl	80a0612 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0ab0:	7823      	ldrb	r3, [r4, #0]
 80a0ab2:	2b01      	cmp	r3, #1
 80a0ab4:	d103      	bne.n	80a0abe <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0ab6:	4620      	mov	r0, r4
 80a0ab8:	f7ff fe74 	bl	80a07a4 <_ZN7LSM9DS17initI2CEv>
 80a0abc:	e003      	b.n	80a0ac6 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0abe:	b913      	cbnz	r3, 80a0ac6 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0ac0:	4620      	mov	r0, r4
 80a0ac2:	f7ff fdf3 	bl	80a06ac <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0ac6:	210f      	movs	r1, #15
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	f7ff ffd1 	bl	80a0a70 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0ace:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0ad0:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0ad2:	4620      	mov	r0, r4
 80a0ad4:	f7ff ffb6 	bl	80a0a44 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0ad8:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0adc:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0ae0:	b205      	sxth	r5, r0
 80a0ae2:	429d      	cmp	r5, r3
 80a0ae4:	d10a      	bne.n	80a0afc <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	f7ff fe92 	bl	80a0810 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0aec:	4620      	mov	r0, r4
 80a0aee:	f7ff feea 	bl	80a08c6 <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	f7ff ff3e 	bl	80a0974 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0af8:	4628      	mov	r0, r5
 80a0afa:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0afc:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0afe:	bd38      	pop	{r3, r4, r5, pc}

080a0b00 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a0b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b04:	4690      	mov	r8, r2
 80a0b06:	460c      	mov	r4, r1
 80a0b08:	461d      	mov	r5, r3
 80a0b0a:	f89d 6018 	ldrb.w	r6, [sp, #24]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b0e:	f001 f9cf 	bl	80a1eb0 <HAL_Timer_Get_Milli_Seconds>
 80a0b12:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a0b14:	f002 fb7c 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0b18:	4621      	mov	r1, r4
 80a0b1a:	f001 fc53 	bl	80a23c4 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0b1e:	f002 fb77 	bl	80a3210 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0b22:	6803      	ldr	r3, [r0, #0]
 80a0b24:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a0b28:	689b      	ldr	r3, [r3, #8]
 80a0b2a:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0b2c:	f002 fb70 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0b30:	2100      	movs	r1, #0
 80a0b32:	f001 fc4b 	bl	80a23cc <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0b36:	f002 fb6b 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0b3a:	4621      	mov	r1, r4
 80a0b3c:	4632      	mov	r2, r6
 80a0b3e:	f001 fc3e 	bl	80a23be <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0b42:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0b44:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a0b48:	42b4      	cmp	r4, r6
 80a0b4a:	da1a      	bge.n	80a0b82 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a0b4c:	f002 fb60 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0b50:	6803      	ldr	r3, [r0, #0]
 80a0b52:	691b      	ldr	r3, [r3, #16]
 80a0b54:	4798      	blx	r3
 80a0b56:	b140      	cbz	r0, 80a0b6a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a0b58:	f002 fb5a 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a0b5c:	6803      	ldr	r3, [r0, #0]
 80a0b5e:	f104 0801 	add.w	r8, r4, #1
 80a0b62:	695b      	ldr	r3, [r3, #20]
 80a0b64:	4798      	blx	r3
 80a0b66:	5528      	strb	r0, [r5, r4]
 80a0b68:	4644      	mov	r4, r8
 80a0b6a:	f001 f9a1 	bl	80a1eb0 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0b6e:	42b8      	cmp	r0, r7
 80a0b70:	d9ea      	bls.n	80a0b48 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a0b72:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a0b74:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0b76:	1b62      	subs	r2, r4, r5
 80a0b78:	4296      	cmp	r6, r2
 80a0b7a:	dd05      	ble.n	80a0b88 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a0b7c:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0b80:	e7f9      	b.n	80a0b76 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a0b82:	2001      	movs	r0, #1
 80a0b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a0b88:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a0b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0b8e <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b90:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0b92:	7801      	ldrb	r1, [r0, #0]
 80a0b94:	2901      	cmp	r1, #1
 80a0b96:	d107      	bne.n	80a0ba8 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a0b98:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0b9c:	9300      	str	r3, [sp, #0]
 80a0b9e:	4613      	mov	r3, r2
 80a0ba0:	462a      	mov	r2, r5
 80a0ba2:	f7ff ffad 	bl	80a0b00 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0ba6:	e007      	b.n	80a0bb8 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0ba8:	b931      	cbnz	r1, 80a0bb8 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0baa:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0bae:	9300      	str	r3, [sp, #0]
 80a0bb0:	4613      	mov	r3, r2
 80a0bb2:	462a      	mov	r2, r5
 80a0bb4:	f7ff fdbe 	bl	80a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0bb8:	b003      	add	sp, #12
 80a0bba:	bd30      	pop	{r4, r5, pc}

080a0bbc <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0bbe:	2306      	movs	r3, #6
 80a0bc0:	466a      	mov	r2, sp
 80a0bc2:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0bc4:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0bc6:	f7ff ffe2 	bl	80a0b8e <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0bca:	b330      	cbz	r0, 80a0c1a <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0bcc:	f89d 3000 	ldrb.w	r3, [sp]
 80a0bd0:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0bd4:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0bd8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0bdc:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0be0:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0be4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0be8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0bec:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0bee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0bf2:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0bf6:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0bf8:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0bfa:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0bfc:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0bfe:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0c00:	b15d      	cbz	r5, 80a0c1a <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0c02:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a0c06:	1b49      	subs	r1, r1, r5
 80a0c08:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0c0a:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0c0e:	1a52      	subs	r2, r2, r1
 80a0c10:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0c12:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a0c16:	1a9b      	subs	r3, r3, r2
 80a0c18:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0c1a:	b003      	add	sp, #12
 80a0c1c:	bd30      	pop	{r4, r5, pc}

080a0c1e <_GLOBAL__sub_I_magSensitivity>:
 80a0c1e:	f001 b94f 	b.w	80a1ec0 <HAL_Pin_Map>

080a0c22 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0c22:	f001 b93d 	b.w	80a1ea0 <HAL_Timer_Get_Micro_Seconds>

080a0c26 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0c26:	b510      	push	{r4, lr}
 80a0c28:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0c2a:	68c0      	ldr	r0, [r0, #12]
 80a0c2c:	b108      	cbz	r0, 80a0c32 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0c2e:	f001 fb5d 	bl	80a22ec <free>
  if (begun) pinMode(pin, INPUT);
 80a0c32:	7823      	ldrb	r3, [r4, #0]
 80a0c34:	b11b      	cbz	r3, 80a0c3e <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0c36:	2100      	movs	r1, #0
 80a0c38:	79e0      	ldrb	r0, [r4, #7]
 80a0c3a:	f002 fabf 	bl	80a31bc <pinMode>
}
 80a0c3e:	4620      	mov	r0, r4
 80a0c40:	bd10      	pop	{r4, pc}

080a0c42 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0c42:	b538      	push	{r3, r4, r5, lr}
 80a0c44:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0c46:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0c48:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0c4a:	b108      	cbz	r0, 80a0c50 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0c4c:	f001 fb4e 	bl	80a22ec <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0c50:	79a3      	ldrb	r3, [r4, #6]
 80a0c52:	2b06      	cmp	r3, #6
 80a0c54:	bf0c      	ite	eq
 80a0c56:	2004      	moveq	r0, #4
 80a0c58:	2003      	movne	r0, #3
 80a0c5a:	4368      	muls	r0, r5
 80a0c5c:	b280      	uxth	r0, r0
 80a0c5e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0c60:	f001 fb3c 	bl	80a22dc <malloc>
 80a0c64:	60e0      	str	r0, [r4, #12]
 80a0c66:	b128      	cbz	r0, 80a0c74 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0c68:	88a2      	ldrh	r2, [r4, #4]
 80a0c6a:	2100      	movs	r1, #0
 80a0c6c:	f002 fef1 	bl	80a3a52 <memset>
    numLEDs = n;
 80a0c70:	8065      	strh	r5, [r4, #2]
 80a0c72:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0c74:	80a0      	strh	r0, [r4, #4]
 80a0c76:	8060      	strh	r0, [r4, #2]
 80a0c78:	bd38      	pop	{r3, r4, r5, pc}

080a0c7a <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0c7a:	b510      	push	{r4, lr}
 80a0c7c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0c7e:	2101      	movs	r1, #1
 80a0c80:	79c0      	ldrb	r0, [r0, #7]
 80a0c82:	f002 fa9b 	bl	80a31bc <pinMode>
  digitalWrite(pin, LOW);
 80a0c86:	2100      	movs	r1, #0
 80a0c88:	79e0      	ldrb	r0, [r4, #7]
 80a0c8a:	f002 faa8 	bl	80a31de <digitalWrite>
  begun = true;
 80a0c8e:	2301      	movs	r3, #1
 80a0c90:	7023      	strb	r3, [r4, #0]
 80a0c92:	bd10      	pop	{r4, pc}

080a0c94 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0c94:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0c96:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0c98:	4605      	mov	r5, r0
 80a0c9a:	460c      	mov	r4, r1
    if (begun) {
 80a0c9c:	b11b      	cbz	r3, 80a0ca6 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0c9e:	2100      	movs	r1, #0
 80a0ca0:	79c0      	ldrb	r0, [r0, #7]
 80a0ca2:	f002 fa8b 	bl	80a31bc <pinMode>
    }
    pin = p;
    if (begun) {
 80a0ca6:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0ca8:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0caa:	b153      	cbz	r3, 80a0cc2 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0cac:	b2a4      	uxth	r4, r4
 80a0cae:	4620      	mov	r0, r4
 80a0cb0:	2101      	movs	r1, #1
 80a0cb2:	f002 fa83 	bl	80a31bc <pinMode>
        digitalWrite(p, LOW);
 80a0cb6:	4620      	mov	r0, r4
    }
}
 80a0cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0cbc:	2100      	movs	r1, #0
 80a0cbe:	f002 ba8e 	b.w	80a31de <digitalWrite>
 80a0cc2:	bd38      	pop	{r3, r4, r5, pc}

080a0cc4 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0cc4:	b570      	push	{r4, r5, r6, lr}
 80a0cc6:	4604      	mov	r4, r0
 80a0cc8:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0cca:	2500      	movs	r5, #0
 80a0ccc:	7183      	strb	r3, [r0, #6]
 80a0cce:	7005      	strb	r5, [r0, #0]
 80a0cd0:	7205      	strb	r5, [r0, #8]
 80a0cd2:	60c5      	str	r5, [r0, #12]
 80a0cd4:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0cd6:	f7ff ffb4 	bl	80a0c42 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	4631      	mov	r1, r6
 80a0cde:	f7ff ffd9 	bl	80a0c94 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0ce8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0ce8:	68c3      	ldr	r3, [r0, #12]
 80a0cea:	2b00      	cmp	r3, #0
 80a0cec:	f000 858e 	beq.w	80a180c <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0cf4:	4604      	mov	r4, r0
 80a0cf6:	7983      	ldrb	r3, [r0, #6]
 80a0cf8:	b086      	sub	sp, #24
 80a0cfa:	3b02      	subs	r3, #2
 80a0cfc:	b2db      	uxtb	r3, r3
 80a0cfe:	2b04      	cmp	r3, #4
 80a0d00:	bf96      	itet	ls
 80a0d02:	4a29      	ldrls	r2, [pc, #164]	; (80a0da8 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0d04:	2532      	movhi	r5, #50	; 0x32
 80a0d06:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0d0a:	f7ff ff8a 	bl	80a0c22 <micros>
 80a0d0e:	6923      	ldr	r3, [r4, #16]
 80a0d10:	1ac0      	subs	r0, r0, r3
 80a0d12:	42a8      	cmp	r0, r5
 80a0d14:	d3f9      	bcc.n	80a0d0a <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0d16:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0d18:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0d1a:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0d1c:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0d1e:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0d22:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0d26:	f000 8272 	beq.w	80a120e <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0d2a:	2907      	cmp	r1, #7
 80a0d2c:	f000 826f 	beq.w	80a120e <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0d30:	2906      	cmp	r1, #6
 80a0d32:	f000 8432 	beq.w	80a159a <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0d36:	2905      	cmp	r1, #5
 80a0d38:	f000 83ab 	beq.w	80a1492 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0d3c:	2908      	cmp	r1, #8
 80a0d3e:	f000 83a8 	beq.w	80a1492 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0d42:	2900      	cmp	r1, #0
 80a0d44:	f040 8563 	bne.w	80a180e <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0d48:	4a18      	ldr	r2, [pc, #96]	; (80a0dac <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0d4a:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d4e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d52:	b29b      	uxth	r3, r3
 80a0d54:	2b00      	cmp	r3, #0
 80a0d56:	f000 8395 	beq.w	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0d5a:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d60:	f10e 0503 	add.w	r5, lr, #3
 80a0d64:	3b03      	subs	r3, #3
 80a0d66:	b29b      	uxth	r3, r3
 80a0d68:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0d6c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0d70:	b2db      	uxtb	r3, r3
 80a0d72:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0d76:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0d7a:	b2db      	uxtb	r3, r3
 80a0d7c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0d80:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0d84:	b2db      	uxtb	r3, r3
 80a0d86:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0d8a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0d8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0d92:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0d96:	021b      	lsls	r3, r3, #8
 80a0d98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0d9c:	4303      	orrs	r3, r0
 80a0d9e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0da0:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0da4:	e11b      	b.n	80a0fde <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0da6:	bf00      	nop
 80a0da8:	080a3c28 	.word	0x080a3c28
 80a0dac:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0db0:	4600      	mov	r0, r0
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0eb8:	79e3      	ldrb	r3, [r4, #7]
 80a0eba:	6810      	ldr	r0, [r2, #0]
 80a0ebc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ec0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ec4:	88bf      	ldrh	r7, [r7, #4]
 80a0ec6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0eca:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ecc:	4600      	mov	r0, r0
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0fc6:	9b04      	ldr	r3, [sp, #16]
 80a0fc8:	085b      	lsrs	r3, r3, #1
 80a0fca:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0fcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fd0:	3301      	adds	r3, #1
 80a0fd2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0fd4:	2b17      	cmp	r3, #23
 80a0fd6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0fda:	f200 82db 	bhi.w	80a1594 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0fde:	79e3      	ldrb	r3, [r4, #7]
 80a0fe0:	6810      	ldr	r0, [r2, #0]
 80a0fe2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fe6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fea:	88bf      	ldrh	r7, [r7, #4]
 80a0fec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ff0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0ff2:	9803      	ldr	r0, [sp, #12]
 80a0ff4:	9b04      	ldr	r3, [sp, #16]
 80a0ff6:	4218      	tst	r0, r3
 80a0ff8:	f47f aeda 	bne.w	80a0db0 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0ffc:	4600      	mov	r0, r0
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a104e:	79e3      	ldrb	r3, [r4, #7]
 80a1050:	6810      	ldr	r0, [r2, #0]
 80a1052:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1056:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a105a:	88bf      	ldrh	r7, [r7, #4]
 80a105c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1060:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1062:	4600      	mov	r0, r0
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	e6db      	b.n	80a0fc6 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a120e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1212:	4a17      	ldr	r2, [pc, #92]	; (80a1270 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a1214:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a1216:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a121a:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a121c:	2b00      	cmp	r3, #0
 80a121e:	f000 8131 	beq.w	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1222:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1224:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1228:	f10e 0103 	add.w	r1, lr, #3
 80a122c:	3b03      	subs	r3, #3
 80a122e:	b29b      	uxth	r3, r3
 80a1230:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1234:	f89e 3000 	ldrb.w	r3, [lr]
 80a1238:	b2db      	uxtb	r3, r3
 80a123a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a123e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1242:	b2db      	uxtb	r3, r3
 80a1244:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1248:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a124c:	b2db      	uxtb	r3, r3
 80a124e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1252:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1256:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a125a:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a125e:	0200      	lsls	r0, r0, #8
 80a1260:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a1264:	433b      	orrs	r3, r7
 80a1266:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1268:	f88d 6005 	strb.w	r6, [sp, #5]
 80a126c:	e080      	b.n	80a1370 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a126e:	bf00      	nop
 80a1270:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1274:	4600      	mov	r0, r0
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a130e:	79e3      	ldrb	r3, [r4, #7]
 80a1310:	6810      	ldr	r0, [r2, #0]
 80a1312:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1316:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a131a:	88bf      	ldrh	r7, [r7, #4]
 80a131c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1320:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1322:	4600      	mov	r0, r0
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1358:	9b04      	ldr	r3, [sp, #16]
 80a135a:	085b      	lsrs	r3, r3, #1
 80a135c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a135e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1362:	3301      	adds	r3, #1
 80a1364:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1366:	2b17      	cmp	r3, #23
 80a1368:	f88d 3005 	strb.w	r3, [sp, #5]
 80a136c:	f200 8083 	bhi.w	80a1476 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1370:	79e3      	ldrb	r3, [r4, #7]
 80a1372:	6810      	ldr	r0, [r2, #0]
 80a1374:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1378:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a137c:	88bf      	ldrh	r7, [r7, #4]
 80a137e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1382:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1384:	9803      	ldr	r0, [sp, #12]
 80a1386:	9b04      	ldr	r3, [sp, #16]
 80a1388:	4218      	tst	r0, r3
 80a138a:	f47f af73 	bne.w	80a1274 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a138e:	4600      	mov	r0, r0
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a13b6:	79e3      	ldrb	r3, [r4, #7]
 80a13b8:	6810      	ldr	r0, [r2, #0]
 80a13ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13be:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13c2:	88bf      	ldrh	r7, [r7, #4]
 80a13c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13c8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13ca:	4600      	mov	r0, r0
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	e770      	b.n	80a1358 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1476:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a147a:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a147c:	b29b      	uxth	r3, r3
 80a147e:	2b00      	cmp	r3, #0
 80a1480:	f47f aecf 	bne.w	80a1222 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1484:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1486:	f7ff fbcc 	bl	80a0c22 <micros>
 80a148a:	6120      	str	r0, [r4, #16]
}
 80a148c:	b006      	add	sp, #24
 80a148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1492:	4b5e      	ldr	r3, [pc, #376]	; (80a160c <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1494:	4a5e      	ldr	r2, [pc, #376]	; (80a1610 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1496:	4618      	mov	r0, r3
 80a1498:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a149a:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a149e:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a14a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a14a4:	b292      	uxth	r2, r2
 80a14a6:	2a00      	cmp	r2, #0
 80a14a8:	d0ec      	beq.n	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a14aa:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a14ae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a14b2:	f10e 0503 	add.w	r5, lr, #3
 80a14b6:	3a03      	subs	r2, #3
 80a14b8:	b292      	uxth	r2, r2
 80a14ba:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a14be:	f89e 2000 	ldrb.w	r2, [lr]
 80a14c2:	b2d2      	uxtb	r2, r2
 80a14c4:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a14c8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a14cc:	b2d2      	uxtb	r2, r2
 80a14ce:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a14d2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a14d6:	b2d2      	uxtb	r2, r2
 80a14d8:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a14dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a14e0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a14e4:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a14e8:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a14ec:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a14f0:	ea42 020c 	orr.w	r2, r2, ip
 80a14f4:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a14f6:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a14fa:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a14fc:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a14fe:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1502:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1506:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a150a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a150e:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1510:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1514:	9e03      	ldr	r6, [sp, #12]
 80a1516:	9a04      	ldr	r2, [sp, #16]
 80a1518:	4216      	tst	r6, r2
 80a151a:	d023      	beq.n	80a1564 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a151c:	685a      	ldr	r2, [r3, #4]
 80a151e:	9e05      	ldr	r6, [sp, #20]
 80a1520:	1b92      	subs	r2, r2, r6
 80a1522:	2a4f      	cmp	r2, #79	; 0x4f
 80a1524:	d9fa      	bls.n	80a151c <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1526:	79e2      	ldrb	r2, [r4, #7]
 80a1528:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a152c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1530:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1534:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1538:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a153c:	6842      	ldr	r2, [r0, #4]
 80a153e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1540:	685a      	ldr	r2, [r3, #4]
 80a1542:	9e05      	ldr	r6, [sp, #20]
 80a1544:	1b92      	subs	r2, r2, r6
 80a1546:	2a07      	cmp	r2, #7
 80a1548:	d9fa      	bls.n	80a1540 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a154a:	9a04      	ldr	r2, [sp, #16]
 80a154c:	0852      	lsrs	r2, r2, #1
 80a154e:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1550:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1554:	3201      	adds	r2, #1
 80a1556:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1558:	2a17      	cmp	r2, #23
 80a155a:	f88d 2005 	strb.w	r2, [sp, #5]
 80a155e:	d9cc      	bls.n	80a14fa <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1560:	46ae      	mov	lr, r5
 80a1562:	e79d      	b.n	80a14a0 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1564:	685a      	ldr	r2, [r3, #4]
 80a1566:	9e05      	ldr	r6, [sp, #20]
 80a1568:	1b92      	subs	r2, r2, r6
 80a156a:	2a18      	cmp	r2, #24
 80a156c:	d9fa      	bls.n	80a1564 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a156e:	79e2      	ldrb	r2, [r4, #7]
 80a1570:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1574:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1578:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a157c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1580:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1584:	6842      	ldr	r2, [r0, #4]
 80a1586:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1588:	685a      	ldr	r2, [r3, #4]
 80a158a:	9e05      	ldr	r6, [sp, #20]
 80a158c:	1b92      	subs	r2, r2, r6
 80a158e:	2a45      	cmp	r2, #69	; 0x45
 80a1590:	d9fa      	bls.n	80a1588 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1592:	e7da      	b.n	80a154a <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1594:	46ae      	mov	lr, r5
 80a1596:	f7ff bbda 	b.w	80a0d4e <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a159a:	4a1d      	ldr	r2, [pc, #116]	; (80a1610 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a159c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a15a0:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a15a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15a6:	b29b      	uxth	r3, r3
 80a15a8:	2b00      	cmp	r3, #0
 80a15aa:	f43f af6b 	beq.w	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a15ae:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a15b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15b4:	f10e 0104 	add.w	r1, lr, #4
 80a15b8:	3b04      	subs	r3, #4
 80a15ba:	b29b      	uxth	r3, r3
 80a15bc:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a15c0:	f89e 3000 	ldrb.w	r3, [lr]
 80a15c4:	b2db      	uxtb	r3, r3
 80a15c6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a15ca:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a15ce:	b2db      	uxtb	r3, r3
 80a15d0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a15d4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a15d8:	b2db      	uxtb	r3, r3
 80a15da:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a15de:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a15e2:	b2db      	uxtb	r3, r3
 80a15e4:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a15e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a15ec:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a15f0:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a15f4:	043f      	lsls	r7, r7, #16
 80a15f6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a15fa:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a15fe:	4303      	orrs	r3, r0
 80a1600:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1604:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1606:	f88d 6005 	strb.w	r6, [sp, #5]
 80a160a:	e07e      	b.n	80a170a <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a160c:	e0001000 	.word	0xe0001000
 80a1610:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1614:	4600      	mov	r0, r0
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1682:	79e3      	ldrb	r3, [r4, #7]
 80a1684:	6810      	ldr	r0, [r2, #0]
 80a1686:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a168a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a168e:	88bf      	ldrh	r7, [r7, #4]
 80a1690:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1694:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1696:	4600      	mov	r0, r0
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a16f4:	9b04      	ldr	r3, [sp, #16]
 80a16f6:	085b      	lsrs	r3, r3, #1
 80a16f8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a16fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16fe:	3301      	adds	r3, #1
 80a1700:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1702:	2b1f      	cmp	r3, #31
 80a1704:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1708:	d87e      	bhi.n	80a1808 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a170a:	79e3      	ldrb	r3, [r4, #7]
 80a170c:	6810      	ldr	r0, [r2, #0]
 80a170e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1712:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1716:	88bf      	ldrh	r7, [r7, #4]
 80a1718:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a171c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a171e:	9803      	ldr	r0, [sp, #12]
 80a1720:	9b04      	ldr	r3, [sp, #16]
 80a1722:	4218      	tst	r0, r3
 80a1724:	f47f af76 	bne.w	80a1614 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1728:	4600      	mov	r0, r0
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1750:	79e3      	ldrb	r3, [r4, #7]
 80a1752:	6810      	ldr	r0, [r2, #0]
 80a1754:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1758:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a175c:	88bf      	ldrh	r7, [r7, #4]
 80a175e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1762:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1764:	4600      	mov	r0, r0
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	e775      	b.n	80a16f4 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1808:	468e      	mov	lr, r1
 80a180a:	e6ca      	b.n	80a15a2 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a180c:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a180e:	2903      	cmp	r1, #3
 80a1810:	f000 812e 	beq.w	80a1a70 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1814:	4a1e      	ldr	r2, [pc, #120]	; (80a1890 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1816:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a181a:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a181c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1820:	b29b      	uxth	r3, r3
 80a1822:	2b00      	cmp	r3, #0
 80a1824:	f43f ae2e 	beq.w	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1828:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a182a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a182e:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1830:	3b03      	subs	r3, #3
 80a1832:	b29b      	uxth	r3, r3
 80a1834:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1838:	f89e 3000 	ldrb.w	r3, [lr]
 80a183c:	f10e 0103 	add.w	r1, lr, #3
 80a1840:	b2db      	uxtb	r3, r3
 80a1842:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1846:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a184a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a184e:	b2db      	uxtb	r3, r3
 80a1850:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1854:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1858:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a185c:	b2db      	uxtb	r3, r3
 80a185e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1862:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1866:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a186a:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a186e:	021b      	lsls	r3, r3, #8
 80a1870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1874:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1878:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a187c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1880:	433b      	orrs	r3, r7
 80a1882:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1884:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1888:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a188c:	e07d      	b.n	80a198a <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a188e:	bf00      	nop
 80a1890:	200001d0 	.word	0x200001d0
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1894:	9b04      	ldr	r3, [sp, #16]
 80a1896:	085b      	lsrs	r3, r3, #1
 80a1898:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a189a:	4600      	mov	r0, r0
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1920:	79e0      	ldrb	r0, [r4, #7]
 80a1922:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1924:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1928:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a192c:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1930:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1934:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1938:	3301      	adds	r3, #1
 80a193a:	b2db      	uxtb	r3, r3
 80a193c:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1940:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1944:	4600      	mov	r0, r0
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
          if(j==24) break;
 80a196e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1972:	2b18      	cmp	r3, #24
 80a1974:	d07a      	beq.n	80a1a6c <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1976:	79e3      	ldrb	r3, [r4, #7]
 80a1978:	6810      	ldr	r0, [r2, #0]
 80a197a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a197e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1982:	88bf      	ldrh	r7, [r7, #4]
 80a1984:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1988:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a198a:	9803      	ldr	r0, [sp, #12]
 80a198c:	9b04      	ldr	r3, [sp, #16]
 80a198e:	4218      	tst	r0, r3
 80a1990:	d180      	bne.n	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1992:	4600      	mov	r0, r0
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a19b4:	79e3      	ldrb	r3, [r4, #7]
 80a19b6:	6810      	ldr	r0, [r2, #0]
 80a19b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19bc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a19c0:	88bf      	ldrh	r7, [r7, #4]
 80a19c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a19c6:	831f      	strh	r7, [r3, #24]
          j++;
 80a19c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a19cc:	3301      	adds	r3, #1
 80a19ce:	b2db      	uxtb	r3, r3
 80a19d0:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a19d4:	9b04      	ldr	r3, [sp, #16]
 80a19d6:	085b      	lsrs	r3, r3, #1
 80a19d8:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a19da:	4600      	mov	r0, r0
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
          if(j==24) break;
 80a1a64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1a68:	2b18      	cmp	r3, #24
 80a1a6a:	d184      	bne.n	80a1976 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1a6c:	468e      	mov	lr, r1
 80a1a6e:	e6d5      	b.n	80a181c <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1a70:	4a17      	ldr	r2, [pc, #92]	; (80a1ad0 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1a72:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1a76:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a7c:	b29b      	uxth	r3, r3
 80a1a7e:	2b00      	cmp	r3, #0
 80a1a80:	f43f ad00 	beq.w	80a1484 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1a84:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1a86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a8a:	f10e 0103 	add.w	r1, lr, #3
 80a1a8e:	3b03      	subs	r3, #3
 80a1a90:	b29b      	uxth	r3, r3
 80a1a92:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1a96:	f89e 3000 	ldrb.w	r3, [lr]
 80a1a9a:	b2db      	uxtb	r3, r3
 80a1a9c:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1aa0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1aa4:	b2db      	uxtb	r3, r3
 80a1aa6:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1aaa:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1aae:	b2db      	uxtb	r3, r3
 80a1ab0:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1ab4:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1ab8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1abc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1ac0:	021b      	lsls	r3, r3, #8
 80a1ac2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1ac6:	4303      	orrs	r3, r0
 80a1ac8:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1aca:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1ace:	e0e0      	b.n	80a1c92 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1ad0:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1ad4:	4600      	mov	r0, r0
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
 80a1bc4:	bf00      	nop
 80a1bc6:	bf00      	nop
 80a1bc8:	bf00      	nop
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1bf6:	79e3      	ldrb	r3, [r4, #7]
 80a1bf8:	6810      	ldr	r0, [r2, #0]
 80a1bfa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1bfe:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c02:	88bf      	ldrh	r7, [r7, #4]
 80a1c04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c08:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c0a:	4600      	mov	r0, r0
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1c7a:	9b04      	ldr	r3, [sp, #16]
 80a1c7c:	085b      	lsrs	r3, r3, #1
 80a1c7e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1c80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1c84:	3301      	adds	r3, #1
 80a1c86:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1c88:	2b17      	cmp	r3, #23
 80a1c8a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1c8e:	f200 80e3 	bhi.w	80a1e58 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a1c92:	79e3      	ldrb	r3, [r4, #7]
 80a1c94:	6810      	ldr	r0, [r2, #0]
 80a1c96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c9a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c9e:	88bf      	ldrh	r7, [r7, #4]
 80a1ca0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ca4:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1ca6:	9803      	ldr	r0, [sp, #12]
 80a1ca8:	9b04      	ldr	r3, [sp, #16]
 80a1caa:	4218      	tst	r0, r3
 80a1cac:	f47f af12 	bne.w	80a1ad4 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1cb0:	4600      	mov	r0, r0
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1d32:	79e3      	ldrb	r3, [r4, #7]
 80a1d34:	6810      	ldr	r0, [r2, #0]
 80a1d36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1d3a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1d3e:	88bf      	ldrh	r7, [r7, #4]
 80a1d40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1d44:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1d46:	4600      	mov	r0, r0
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
 80a1d52:	bf00      	nop
 80a1d54:	bf00      	nop
 80a1d56:	bf00      	nop
 80a1d58:	bf00      	nop
 80a1d5a:	bf00      	nop
 80a1d5c:	bf00      	nop
 80a1d5e:	bf00      	nop
 80a1d60:	bf00      	nop
 80a1d62:	bf00      	nop
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	bf00      	nop
 80a1d86:	bf00      	nop
 80a1d88:	bf00      	nop
 80a1d8a:	bf00      	nop
 80a1d8c:	bf00      	nop
 80a1d8e:	bf00      	nop
 80a1d90:	bf00      	nop
 80a1d92:	bf00      	nop
 80a1d94:	bf00      	nop
 80a1d96:	bf00      	nop
 80a1d98:	bf00      	nop
 80a1d9a:	bf00      	nop
 80a1d9c:	bf00      	nop
 80a1d9e:	bf00      	nop
 80a1da0:	bf00      	nop
 80a1da2:	bf00      	nop
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
 80a1dc4:	bf00      	nop
 80a1dc6:	bf00      	nop
 80a1dc8:	bf00      	nop
 80a1dca:	bf00      	nop
 80a1dcc:	bf00      	nop
 80a1dce:	bf00      	nop
 80a1dd0:	bf00      	nop
 80a1dd2:	bf00      	nop
 80a1dd4:	bf00      	nop
 80a1dd6:	bf00      	nop
 80a1dd8:	bf00      	nop
 80a1dda:	bf00      	nop
 80a1ddc:	bf00      	nop
 80a1dde:	bf00      	nop
 80a1de0:	bf00      	nop
 80a1de2:	bf00      	nop
 80a1de4:	bf00      	nop
 80a1de6:	bf00      	nop
 80a1de8:	bf00      	nop
 80a1dea:	bf00      	nop
 80a1dec:	bf00      	nop
 80a1dee:	bf00      	nop
 80a1df0:	bf00      	nop
 80a1df2:	bf00      	nop
 80a1df4:	bf00      	nop
 80a1df6:	bf00      	nop
 80a1df8:	bf00      	nop
 80a1dfa:	bf00      	nop
 80a1dfc:	bf00      	nop
 80a1dfe:	bf00      	nop
 80a1e00:	bf00      	nop
 80a1e02:	bf00      	nop
 80a1e04:	bf00      	nop
 80a1e06:	bf00      	nop
 80a1e08:	bf00      	nop
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
 80a1e40:	bf00      	nop
 80a1e42:	bf00      	nop
 80a1e44:	bf00      	nop
 80a1e46:	bf00      	nop
 80a1e48:	bf00      	nop
 80a1e4a:	bf00      	nop
 80a1e4c:	bf00      	nop
 80a1e4e:	bf00      	nop
 80a1e50:	bf00      	nop
 80a1e52:	bf00      	nop
 80a1e54:	bf00      	nop
 80a1e56:	e710      	b.n	80a1c7a <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1e58:	468e      	mov	lr, r1
 80a1e5a:	e60d      	b.n	80a1a78 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1e5c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1e5c:	b508      	push	{r3, lr}
 80a1e5e:	f000 f82f 	bl	80a1ec0 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1e62:	f000 f82d 	bl	80a1ec0 <HAL_Pin_Map>
 80a1e66:	4b01      	ldr	r3, [pc, #4]	; (80a1e6c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1e68:	6018      	str	r0, [r3, #0]
 80a1e6a:	bd08      	pop	{r3, pc}
 80a1e6c:	200001d0 	.word	0x200001d0

080a1e70 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1e70:	b508      	push	{r3, lr}
 80a1e72:	4b02      	ldr	r3, [pc, #8]	; (80a1e7c <os_mutex_create+0xc>)
 80a1e74:	681b      	ldr	r3, [r3, #0]
 80a1e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e78:	9301      	str	r3, [sp, #4]
 80a1e7a:	bd08      	pop	{r3, pc}
 80a1e7c:	080601d0 	.word	0x080601d0

080a1e80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1e80:	b508      	push	{r3, lr}
 80a1e82:	4b02      	ldr	r3, [pc, #8]	; (80a1e8c <HAL_RNG_GetRandomNumber+0xc>)
 80a1e84:	681b      	ldr	r3, [r3, #0]
 80a1e86:	685b      	ldr	r3, [r3, #4]
 80a1e88:	9301      	str	r3, [sp, #4]
 80a1e8a:	bd08      	pop	{r3, pc}
 80a1e8c:	0806019c 	.word	0x0806019c

080a1e90 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1e90:	b508      	push	{r3, lr}
 80a1e92:	4b02      	ldr	r3, [pc, #8]	; (80a1e9c <HAL_Delay_Microseconds+0xc>)
 80a1e94:	681b      	ldr	r3, [r3, #0]
 80a1e96:	68db      	ldr	r3, [r3, #12]
 80a1e98:	9301      	str	r3, [sp, #4]
 80a1e9a:	bd08      	pop	{r3, pc}
 80a1e9c:	0806019c 	.word	0x0806019c

080a1ea0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	691b      	ldr	r3, [r3, #16]
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	0806019c 	.word	0x0806019c

080a1eb0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	695b      	ldr	r3, [r3, #20]
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	0806019c 	.word	0x0806019c

080a1ec0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <HAL_Pin_Map+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	681b      	ldr	r3, [r3, #0]
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080601b0 	.word	0x080601b0

080a1ed0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1ed0:	b508      	push	{r3, lr}
 80a1ed2:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <HAL_Pin_Mode+0xc>)
 80a1ed4:	681b      	ldr	r3, [r3, #0]
 80a1ed6:	689b      	ldr	r3, [r3, #8]
 80a1ed8:	9301      	str	r3, [sp, #4]
 80a1eda:	bd08      	pop	{r3, pc}
 80a1edc:	080601b0 	.word	0x080601b0

080a1ee0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1ee0:	b508      	push	{r3, lr}
 80a1ee2:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <HAL_Get_Pin_Mode+0xc>)
 80a1ee4:	681b      	ldr	r3, [r3, #0]
 80a1ee6:	68db      	ldr	r3, [r3, #12]
 80a1ee8:	9301      	str	r3, [sp, #4]
 80a1eea:	bd08      	pop	{r3, pc}
 80a1eec:	080601b0 	.word	0x080601b0

080a1ef0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <HAL_GPIO_Write+0xc>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	691b      	ldr	r3, [r3, #16]
 80a1ef8:	9301      	str	r3, [sp, #4]
 80a1efa:	bd08      	pop	{r3, pc}
 80a1efc:	080601b0 	.word	0x080601b0

080a1f00 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1f00:	b508      	push	{r3, lr}
 80a1f02:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <HAL_I2C_Begin+0xc>)
 80a1f04:	681b      	ldr	r3, [r3, #0]
 80a1f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1f08:	9301      	str	r3, [sp, #4]
 80a1f0a:	bd08      	pop	{r3, pc}
 80a1f0c:	080601ac 	.word	0x080601ac

080a1f10 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1f10:	b508      	push	{r3, lr}
 80a1f12:	4b02      	ldr	r3, [pc, #8]	; (80a1f1c <HAL_I2C_Request_Data+0xc>)
 80a1f14:	681b      	ldr	r3, [r3, #0]
 80a1f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1f18:	9301      	str	r3, [sp, #4]
 80a1f1a:	bd08      	pop	{r3, pc}
 80a1f1c:	080601ac 	.word	0x080601ac

080a1f20 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1f20:	b508      	push	{r3, lr}
 80a1f22:	4b02      	ldr	r3, [pc, #8]	; (80a1f2c <HAL_I2C_Begin_Transmission+0xc>)
 80a1f24:	681b      	ldr	r3, [r3, #0]
 80a1f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1f28:	9301      	str	r3, [sp, #4]
 80a1f2a:	bd08      	pop	{r3, pc}
 80a1f2c:	080601ac 	.word	0x080601ac

080a1f30 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1f30:	b508      	push	{r3, lr}
 80a1f32:	4b02      	ldr	r3, [pc, #8]	; (80a1f3c <HAL_I2C_End_Transmission+0xc>)
 80a1f34:	681b      	ldr	r3, [r3, #0]
 80a1f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1f38:	9301      	str	r3, [sp, #4]
 80a1f3a:	bd08      	pop	{r3, pc}
 80a1f3c:	080601ac 	.word	0x080601ac

080a1f40 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1f40:	b508      	push	{r3, lr}
 80a1f42:	4b02      	ldr	r3, [pc, #8]	; (80a1f4c <HAL_I2C_Write_Data+0xc>)
 80a1f44:	681b      	ldr	r3, [r3, #0]
 80a1f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1f48:	9301      	str	r3, [sp, #4]
 80a1f4a:	bd08      	pop	{r3, pc}
 80a1f4c:	080601ac 	.word	0x080601ac

080a1f50 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1f50:	b508      	push	{r3, lr}
 80a1f52:	4b02      	ldr	r3, [pc, #8]	; (80a1f5c <HAL_I2C_Available_Data+0xc>)
 80a1f54:	681b      	ldr	r3, [r3, #0]
 80a1f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1f58:	9301      	str	r3, [sp, #4]
 80a1f5a:	bd08      	pop	{r3, pc}
 80a1f5c:	080601ac 	.word	0x080601ac

080a1f60 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1f60:	b508      	push	{r3, lr}
 80a1f62:	4b02      	ldr	r3, [pc, #8]	; (80a1f6c <HAL_I2C_Read_Data+0xc>)
 80a1f64:	681b      	ldr	r3, [r3, #0]
 80a1f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1f68:	9301      	str	r3, [sp, #4]
 80a1f6a:	bd08      	pop	{r3, pc}
 80a1f6c:	080601ac 	.word	0x080601ac

080a1f70 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1f70:	b508      	push	{r3, lr}
 80a1f72:	4b02      	ldr	r3, [pc, #8]	; (80a1f7c <HAL_I2C_Peek_Data+0xc>)
 80a1f74:	681b      	ldr	r3, [r3, #0]
 80a1f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1f78:	9301      	str	r3, [sp, #4]
 80a1f7a:	bd08      	pop	{r3, pc}
 80a1f7c:	080601ac 	.word	0x080601ac

080a1f80 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1f80:	b508      	push	{r3, lr}
 80a1f82:	4b02      	ldr	r3, [pc, #8]	; (80a1f8c <HAL_I2C_Flush_Data+0xc>)
 80a1f84:	681b      	ldr	r3, [r3, #0]
 80a1f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1f88:	9301      	str	r3, [sp, #4]
 80a1f8a:	bd08      	pop	{r3, pc}
 80a1f8c:	080601ac 	.word	0x080601ac

080a1f90 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1f90:	b508      	push	{r3, lr}
 80a1f92:	4b02      	ldr	r3, [pc, #8]	; (80a1f9c <HAL_I2C_Is_Enabled+0xc>)
 80a1f94:	681b      	ldr	r3, [r3, #0]
 80a1f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1f98:	9301      	str	r3, [sp, #4]
 80a1f9a:	bd08      	pop	{r3, pc}
 80a1f9c:	080601ac 	.word	0x080601ac

080a1fa0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1fa0:	b508      	push	{r3, lr}
 80a1fa2:	4b03      	ldr	r3, [pc, #12]	; (80a1fb0 <HAL_I2C_Init+0x10>)
 80a1fa4:	681b      	ldr	r3, [r3, #0]
 80a1fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1faa:	9301      	str	r3, [sp, #4]
 80a1fac:	bd08      	pop	{r3, pc}
 80a1fae:	0000      	.short	0x0000
 80a1fb0:	080601ac 	.word	0x080601ac

080a1fb4 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1fb4:	b508      	push	{r3, lr}
 80a1fb6:	4b02      	ldr	r3, [pc, #8]	; (80a1fc0 <socket_handle_valid+0xc>)
 80a1fb8:	681b      	ldr	r3, [r3, #0]
 80a1fba:	685b      	ldr	r3, [r3, #4]
 80a1fbc:	9301      	str	r3, [sp, #4]
 80a1fbe:	bd08      	pop	{r3, pc}
 80a1fc0:	080601bc 	.word	0x080601bc

080a1fc4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1fc4:	b508      	push	{r3, lr}
 80a1fc6:	4b02      	ldr	r3, [pc, #8]	; (80a1fd0 <socket_create+0xc>)
 80a1fc8:	681b      	ldr	r3, [r3, #0]
 80a1fca:	689b      	ldr	r3, [r3, #8]
 80a1fcc:	9301      	str	r3, [sp, #4]
 80a1fce:	bd08      	pop	{r3, pc}
 80a1fd0:	080601bc 	.word	0x080601bc

080a1fd4 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1fd4:	b508      	push	{r3, lr}
 80a1fd6:	4b02      	ldr	r3, [pc, #8]	; (80a1fe0 <socket_receivefrom+0xc>)
 80a1fd8:	681b      	ldr	r3, [r3, #0]
 80a1fda:	695b      	ldr	r3, [r3, #20]
 80a1fdc:	9301      	str	r3, [sp, #4]
 80a1fde:	bd08      	pop	{r3, pc}
 80a1fe0:	080601bc 	.word	0x080601bc

080a1fe4 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a1fe4:	b508      	push	{r3, lr}
 80a1fe6:	4b02      	ldr	r3, [pc, #8]	; (80a1ff0 <socket_sendto+0xc>)
 80a1fe8:	681b      	ldr	r3, [r3, #0]
 80a1fea:	69db      	ldr	r3, [r3, #28]
 80a1fec:	9301      	str	r3, [sp, #4]
 80a1fee:	bd08      	pop	{r3, pc}
 80a1ff0:	080601bc 	.word	0x080601bc

080a1ff4 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1ff4:	b508      	push	{r3, lr}
 80a1ff6:	4b02      	ldr	r3, [pc, #8]	; (80a2000 <socket_close+0xc>)
 80a1ff8:	681b      	ldr	r3, [r3, #0]
 80a1ffa:	6a1b      	ldr	r3, [r3, #32]
 80a1ffc:	9301      	str	r3, [sp, #4]
 80a1ffe:	bd08      	pop	{r3, pc}
 80a2000:	080601bc 	.word	0x080601bc

080a2004 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2004:	b508      	push	{r3, lr}
 80a2006:	4b02      	ldr	r3, [pc, #8]	; (80a2010 <socket_handle_invalid+0xc>)
 80a2008:	681b      	ldr	r3, [r3, #0]
 80a200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a200c:	9301      	str	r3, [sp, #4]
 80a200e:	bd08      	pop	{r3, pc}
 80a2010:	080601bc 	.word	0x080601bc

080a2014 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2014:	b508      	push	{r3, lr}
 80a2016:	4b02      	ldr	r3, [pc, #8]	; (80a2020 <HAL_SPI_Begin+0xc>)
 80a2018:	681b      	ldr	r3, [r3, #0]
 80a201a:	681b      	ldr	r3, [r3, #0]
 80a201c:	9301      	str	r3, [sp, #4]
 80a201e:	bd08      	pop	{r3, pc}
 80a2020:	080601b4 	.word	0x080601b4

080a2024 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2024:	b508      	push	{r3, lr}
 80a2026:	4b02      	ldr	r3, [pc, #8]	; (80a2030 <HAL_SPI_Set_Bit_Order+0xc>)
 80a2028:	681b      	ldr	r3, [r3, #0]
 80a202a:	689b      	ldr	r3, [r3, #8]
 80a202c:	9301      	str	r3, [sp, #4]
 80a202e:	bd08      	pop	{r3, pc}
 80a2030:	080601b4 	.word	0x080601b4

080a2034 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a2034:	b508      	push	{r3, lr}
 80a2036:	4b02      	ldr	r3, [pc, #8]	; (80a2040 <HAL_SPI_Set_Data_Mode+0xc>)
 80a2038:	681b      	ldr	r3, [r3, #0]
 80a203a:	68db      	ldr	r3, [r3, #12]
 80a203c:	9301      	str	r3, [sp, #4]
 80a203e:	bd08      	pop	{r3, pc}
 80a2040:	080601b4 	.word	0x080601b4

080a2044 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a2044:	b508      	push	{r3, lr}
 80a2046:	4b02      	ldr	r3, [pc, #8]	; (80a2050 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a2048:	681b      	ldr	r3, [r3, #0]
 80a204a:	691b      	ldr	r3, [r3, #16]
 80a204c:	9301      	str	r3, [sp, #4]
 80a204e:	bd08      	pop	{r3, pc}
 80a2050:	080601b4 	.word	0x080601b4

080a2054 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2054:	b508      	push	{r3, lr}
 80a2056:	4b02      	ldr	r3, [pc, #8]	; (80a2060 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2058:	681b      	ldr	r3, [r3, #0]
 80a205a:	695b      	ldr	r3, [r3, #20]
 80a205c:	9301      	str	r3, [sp, #4]
 80a205e:	bd08      	pop	{r3, pc}
 80a2060:	080601b4 	.word	0x080601b4

080a2064 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2064:	b508      	push	{r3, lr}
 80a2066:	4b02      	ldr	r3, [pc, #8]	; (80a2070 <HAL_SPI_Init+0xc>)
 80a2068:	681b      	ldr	r3, [r3, #0]
 80a206a:	69db      	ldr	r3, [r3, #28]
 80a206c:	9301      	str	r3, [sp, #4]
 80a206e:	bd08      	pop	{r3, pc}
 80a2070:	080601b4 	.word	0x080601b4

080a2074 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2074:	b508      	push	{r3, lr}
 80a2076:	4b02      	ldr	r3, [pc, #8]	; (80a2080 <HAL_SPI_Is_Enabled+0xc>)
 80a2078:	681b      	ldr	r3, [r3, #0]
 80a207a:	6a1b      	ldr	r3, [r3, #32]
 80a207c:	9301      	str	r3, [sp, #4]
 80a207e:	bd08      	pop	{r3, pc}
 80a2080:	080601b4 	.word	0x080601b4

080a2084 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a2084:	b508      	push	{r3, lr}
 80a2086:	4b02      	ldr	r3, [pc, #8]	; (80a2090 <HAL_SPI_Info+0xc>)
 80a2088:	681b      	ldr	r3, [r3, #0]
 80a208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a208c:	9301      	str	r3, [sp, #4]
 80a208e:	bd08      	pop	{r3, pc}
 80a2090:	080601b4 	.word	0x080601b4

080a2094 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2094:	b508      	push	{r3, lr}
 80a2096:	4b02      	ldr	r3, [pc, #8]	; (80a20a0 <HAL_USART_Init+0xc>)
 80a2098:	681b      	ldr	r3, [r3, #0]
 80a209a:	699b      	ldr	r3, [r3, #24]
 80a209c:	9301      	str	r3, [sp, #4]
 80a209e:	bd08      	pop	{r3, pc}
 80a20a0:	080601c4 	.word	0x080601c4

080a20a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a20a4:	b508      	push	{r3, lr}
 80a20a6:	4b02      	ldr	r3, [pc, #8]	; (80a20b0 <HAL_USART_Write_Data+0xc>)
 80a20a8:	681b      	ldr	r3, [r3, #0]
 80a20aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a20ac:	9301      	str	r3, [sp, #4]
 80a20ae:	bd08      	pop	{r3, pc}
 80a20b0:	080601c4 	.word	0x080601c4

080a20b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a20b4:	b508      	push	{r3, lr}
 80a20b6:	4b02      	ldr	r3, [pc, #8]	; (80a20c0 <HAL_USART_Available_Data+0xc>)
 80a20b8:	681b      	ldr	r3, [r3, #0]
 80a20ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a20bc:	9301      	str	r3, [sp, #4]
 80a20be:	bd08      	pop	{r3, pc}
 80a20c0:	080601c4 	.word	0x080601c4

080a20c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a20c4:	b508      	push	{r3, lr}
 80a20c6:	4b02      	ldr	r3, [pc, #8]	; (80a20d0 <HAL_USART_Read_Data+0xc>)
 80a20c8:	681b      	ldr	r3, [r3, #0]
 80a20ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a20cc:	9301      	str	r3, [sp, #4]
 80a20ce:	bd08      	pop	{r3, pc}
 80a20d0:	080601c4 	.word	0x080601c4

080a20d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a20d4:	b508      	push	{r3, lr}
 80a20d6:	4b02      	ldr	r3, [pc, #8]	; (80a20e0 <HAL_USART_Peek_Data+0xc>)
 80a20d8:	681b      	ldr	r3, [r3, #0]
 80a20da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a20dc:	9301      	str	r3, [sp, #4]
 80a20de:	bd08      	pop	{r3, pc}
 80a20e0:	080601c4 	.word	0x080601c4

080a20e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a20e4:	b508      	push	{r3, lr}
 80a20e6:	4b02      	ldr	r3, [pc, #8]	; (80a20f0 <HAL_USART_Flush_Data+0xc>)
 80a20e8:	681b      	ldr	r3, [r3, #0]
 80a20ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a20ec:	9301      	str	r3, [sp, #4]
 80a20ee:	bd08      	pop	{r3, pc}
 80a20f0:	080601c4 	.word	0x080601c4

080a20f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a20f4:	b508      	push	{r3, lr}
 80a20f6:	4b02      	ldr	r3, [pc, #8]	; (80a2100 <HAL_USART_Is_Enabled+0xc>)
 80a20f8:	681b      	ldr	r3, [r3, #0]
 80a20fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a20fc:	9301      	str	r3, [sp, #4]
 80a20fe:	bd08      	pop	{r3, pc}
 80a2100:	080601c4 	.word	0x080601c4

080a2104 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2104:	b508      	push	{r3, lr}
 80a2106:	4b02      	ldr	r3, [pc, #8]	; (80a2110 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2108:	681b      	ldr	r3, [r3, #0]
 80a210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a210c:	9301      	str	r3, [sp, #4]
 80a210e:	bd08      	pop	{r3, pc}
 80a2110:	080601c4 	.word	0x080601c4

080a2114 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2114:	b508      	push	{r3, lr}
 80a2116:	4b02      	ldr	r3, [pc, #8]	; (80a2120 <HAL_USB_USART_Init+0xc>)
 80a2118:	681b      	ldr	r3, [r3, #0]
 80a211a:	681b      	ldr	r3, [r3, #0]
 80a211c:	9301      	str	r3, [sp, #4]
 80a211e:	bd08      	pop	{r3, pc}
 80a2120:	080601d8 	.word	0x080601d8

080a2124 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2124:	b508      	push	{r3, lr}
 80a2126:	4b02      	ldr	r3, [pc, #8]	; (80a2130 <HAL_USB_USART_Begin+0xc>)
 80a2128:	681b      	ldr	r3, [r3, #0]
 80a212a:	685b      	ldr	r3, [r3, #4]
 80a212c:	9301      	str	r3, [sp, #4]
 80a212e:	bd08      	pop	{r3, pc}
 80a2130:	080601d8 	.word	0x080601d8

080a2134 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2134:	b508      	push	{r3, lr}
 80a2136:	4b02      	ldr	r3, [pc, #8]	; (80a2140 <HAL_USB_USART_Available_Data+0xc>)
 80a2138:	681b      	ldr	r3, [r3, #0]
 80a213a:	691b      	ldr	r3, [r3, #16]
 80a213c:	9301      	str	r3, [sp, #4]
 80a213e:	bd08      	pop	{r3, pc}
 80a2140:	080601d8 	.word	0x080601d8

080a2144 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2144:	b508      	push	{r3, lr}
 80a2146:	4b02      	ldr	r3, [pc, #8]	; (80a2150 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2148:	681b      	ldr	r3, [r3, #0]
 80a214a:	695b      	ldr	r3, [r3, #20]
 80a214c:	9301      	str	r3, [sp, #4]
 80a214e:	bd08      	pop	{r3, pc}
 80a2150:	080601d8 	.word	0x080601d8

080a2154 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2154:	b508      	push	{r3, lr}
 80a2156:	4b02      	ldr	r3, [pc, #8]	; (80a2160 <HAL_USB_USART_Receive_Data+0xc>)
 80a2158:	681b      	ldr	r3, [r3, #0]
 80a215a:	699b      	ldr	r3, [r3, #24]
 80a215c:	9301      	str	r3, [sp, #4]
 80a215e:	bd08      	pop	{r3, pc}
 80a2160:	080601d8 	.word	0x080601d8

080a2164 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2164:	b508      	push	{r3, lr}
 80a2166:	4b02      	ldr	r3, [pc, #8]	; (80a2170 <HAL_USB_USART_Send_Data+0xc>)
 80a2168:	681b      	ldr	r3, [r3, #0]
 80a216a:	69db      	ldr	r3, [r3, #28]
 80a216c:	9301      	str	r3, [sp, #4]
 80a216e:	bd08      	pop	{r3, pc}
 80a2170:	080601d8 	.word	0x080601d8

080a2174 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2174:	b508      	push	{r3, lr}
 80a2176:	4b02      	ldr	r3, [pc, #8]	; (80a2180 <HAL_USB_USART_Flush_Data+0xc>)
 80a2178:	681b      	ldr	r3, [r3, #0]
 80a217a:	6a1b      	ldr	r3, [r3, #32]
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	bd08      	pop	{r3, pc}
 80a2180:	080601d8 	.word	0x080601d8

080a2184 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <HAL_USB_USART_Is_Enabled+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601d8 	.word	0x080601d8

080a2194 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <inet_gethostbyname+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601c0 	.word	0x080601c0

080a21a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <set_system_mode+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	685b      	ldr	r3, [r3, #4]
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	080601a4 	.word	0x080601a4

080a21b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <system_delay_ms+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	695b      	ldr	r3, [r3, #20]
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	080601a4 	.word	0x080601a4

080a21c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <system_thread_set_state+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	080601a4 	.word	0x080601a4

080a21d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b03      	ldr	r3, [pc, #12]	; (80a21e4 <system_ctrl_set_app_request_handler+0x10>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a21de:	9301      	str	r3, [sp, #4]
 80a21e0:	bd08      	pop	{r3, pc}
 80a21e2:	0000      	.short	0x0000
 80a21e4:	080601a4 	.word	0x080601a4

080a21e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a21e8:	b508      	push	{r3, lr}
 80a21ea:	4b03      	ldr	r3, [pc, #12]	; (80a21f8 <system_ctrl_set_result+0x10>)
 80a21ec:	681b      	ldr	r3, [r3, #0]
 80a21ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a21f2:	9301      	str	r3, [sp, #4]
 80a21f4:	bd08      	pop	{r3, pc}
 80a21f6:	0000      	.short	0x0000
 80a21f8:	080601a4 	.word	0x080601a4

080a21fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a21fc:	b508      	push	{r3, lr}
 80a21fe:	4b02      	ldr	r3, [pc, #8]	; (80a2208 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2200:	681b      	ldr	r3, [r3, #0]
 80a2202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2204:	9301      	str	r3, [sp, #4]
 80a2206:	bd08      	pop	{r3, pc}
 80a2208:	080601cc 	.word	0x080601cc

080a220c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a220c:	b508      	push	{r3, lr}
 80a220e:	4b02      	ldr	r3, [pc, #8]	; (80a2218 <network_config+0xc>)
 80a2210:	681b      	ldr	r3, [r3, #0]
 80a2212:	681b      	ldr	r3, [r3, #0]
 80a2214:	9301      	str	r3, [sp, #4]
 80a2216:	bd08      	pop	{r3, pc}
 80a2218:	080601c8 	.word	0x080601c8

080a221c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a221c:	b508      	push	{r3, lr}
 80a221e:	4b02      	ldr	r3, [pc, #8]	; (80a2228 <network_connect+0xc>)
 80a2220:	681b      	ldr	r3, [r3, #0]
 80a2222:	685b      	ldr	r3, [r3, #4]
 80a2224:	9301      	str	r3, [sp, #4]
 80a2226:	bd08      	pop	{r3, pc}
 80a2228:	080601c8 	.word	0x080601c8

080a222c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a222c:	b508      	push	{r3, lr}
 80a222e:	4b02      	ldr	r3, [pc, #8]	; (80a2238 <network_connecting+0xc>)
 80a2230:	681b      	ldr	r3, [r3, #0]
 80a2232:	689b      	ldr	r3, [r3, #8]
 80a2234:	9301      	str	r3, [sp, #4]
 80a2236:	bd08      	pop	{r3, pc}
 80a2238:	080601c8 	.word	0x080601c8

080a223c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a223c:	b508      	push	{r3, lr}
 80a223e:	4b02      	ldr	r3, [pc, #8]	; (80a2248 <network_disconnect+0xc>)
 80a2240:	681b      	ldr	r3, [r3, #0]
 80a2242:	68db      	ldr	r3, [r3, #12]
 80a2244:	9301      	str	r3, [sp, #4]
 80a2246:	bd08      	pop	{r3, pc}
 80a2248:	080601c8 	.word	0x080601c8

080a224c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a224c:	b508      	push	{r3, lr}
 80a224e:	4b02      	ldr	r3, [pc, #8]	; (80a2258 <network_ready+0xc>)
 80a2250:	681b      	ldr	r3, [r3, #0]
 80a2252:	691b      	ldr	r3, [r3, #16]
 80a2254:	9301      	str	r3, [sp, #4]
 80a2256:	bd08      	pop	{r3, pc}
 80a2258:	080601c8 	.word	0x080601c8

080a225c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a225c:	b508      	push	{r3, lr}
 80a225e:	4b02      	ldr	r3, [pc, #8]	; (80a2268 <network_on+0xc>)
 80a2260:	681b      	ldr	r3, [r3, #0]
 80a2262:	695b      	ldr	r3, [r3, #20]
 80a2264:	9301      	str	r3, [sp, #4]
 80a2266:	bd08      	pop	{r3, pc}
 80a2268:	080601c8 	.word	0x080601c8

080a226c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a226c:	b508      	push	{r3, lr}
 80a226e:	4b02      	ldr	r3, [pc, #8]	; (80a2278 <network_off+0xc>)
 80a2270:	681b      	ldr	r3, [r3, #0]
 80a2272:	699b      	ldr	r3, [r3, #24]
 80a2274:	9301      	str	r3, [sp, #4]
 80a2276:	bd08      	pop	{r3, pc}
 80a2278:	080601c8 	.word	0x080601c8

080a227c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a227c:	b508      	push	{r3, lr}
 80a227e:	4b02      	ldr	r3, [pc, #8]	; (80a2288 <network_listen+0xc>)
 80a2280:	681b      	ldr	r3, [r3, #0]
 80a2282:	69db      	ldr	r3, [r3, #28]
 80a2284:	9301      	str	r3, [sp, #4]
 80a2286:	bd08      	pop	{r3, pc}
 80a2288:	080601c8 	.word	0x080601c8

080a228c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a228c:	b508      	push	{r3, lr}
 80a228e:	4b02      	ldr	r3, [pc, #8]	; (80a2298 <network_listening+0xc>)
 80a2290:	681b      	ldr	r3, [r3, #0]
 80a2292:	6a1b      	ldr	r3, [r3, #32]
 80a2294:	9301      	str	r3, [sp, #4]
 80a2296:	bd08      	pop	{r3, pc}
 80a2298:	080601c8 	.word	0x080601c8

080a229c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a229c:	b508      	push	{r3, lr}
 80a229e:	4b02      	ldr	r3, [pc, #8]	; (80a22a8 <network_set_listen_timeout+0xc>)
 80a22a0:	681b      	ldr	r3, [r3, #0]
 80a22a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a22a4:	9301      	str	r3, [sp, #4]
 80a22a6:	bd08      	pop	{r3, pc}
 80a22a8:	080601c8 	.word	0x080601c8

080a22ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a22ac:	b508      	push	{r3, lr}
 80a22ae:	4b02      	ldr	r3, [pc, #8]	; (80a22b8 <network_get_listen_timeout+0xc>)
 80a22b0:	681b      	ldr	r3, [r3, #0]
 80a22b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a22b4:	9301      	str	r3, [sp, #4]
 80a22b6:	bd08      	pop	{r3, pc}
 80a22b8:	080601c8 	.word	0x080601c8

080a22bc <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a22bc:	b508      	push	{r3, lr}
 80a22be:	4b02      	ldr	r3, [pc, #8]	; (80a22c8 <network_set_hostname+0xc>)
 80a22c0:	681b      	ldr	r3, [r3, #0]
 80a22c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a22c4:	9301      	str	r3, [sp, #4]
 80a22c6:	bd08      	pop	{r3, pc}
 80a22c8:	080601c8 	.word	0x080601c8

080a22cc <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a22cc:	b508      	push	{r3, lr}
 80a22ce:	4b02      	ldr	r3, [pc, #8]	; (80a22d8 <network_get_hostname+0xc>)
 80a22d0:	681b      	ldr	r3, [r3, #0]
 80a22d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a22d4:	9301      	str	r3, [sp, #4]
 80a22d6:	bd08      	pop	{r3, pc}
 80a22d8:	080601c8 	.word	0x080601c8

080a22dc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a22dc:	b508      	push	{r3, lr}
 80a22de:	4b02      	ldr	r3, [pc, #8]	; (80a22e8 <malloc+0xc>)
 80a22e0:	681b      	ldr	r3, [r3, #0]
 80a22e2:	681b      	ldr	r3, [r3, #0]
 80a22e4:	9301      	str	r3, [sp, #4]
 80a22e6:	bd08      	pop	{r3, pc}
 80a22e8:	080601a0 	.word	0x080601a0

080a22ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a22ec:	b508      	push	{r3, lr}
 80a22ee:	4b02      	ldr	r3, [pc, #8]	; (80a22f8 <free+0xc>)
 80a22f0:	681b      	ldr	r3, [r3, #0]
 80a22f2:	685b      	ldr	r3, [r3, #4]
 80a22f4:	9301      	str	r3, [sp, #4]
 80a22f6:	bd08      	pop	{r3, pc}
 80a22f8:	080601a0 	.word	0x080601a0

080a22fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a22fc:	b508      	push	{r3, lr}
 80a22fe:	4b02      	ldr	r3, [pc, #8]	; (80a2308 <realloc+0xc>)
 80a2300:	681b      	ldr	r3, [r3, #0]
 80a2302:	689b      	ldr	r3, [r3, #8]
 80a2304:	9301      	str	r3, [sp, #4]
 80a2306:	bd08      	pop	{r3, pc}
 80a2308:	080601a0 	.word	0x080601a0

080a230c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a230c:	2100      	movs	r1, #0
 80a230e:	f7ff bf51 	b.w	80a21b4 <system_delay_ms>

080a2312 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2312:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2314:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2316:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2318:	b113      	cbz	r3, 80a2320 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a231a:	2203      	movs	r2, #3
 80a231c:	4601      	mov	r1, r0
 80a231e:	4798      	blx	r3
    }
 80a2320:	4620      	mov	r0, r4
 80a2322:	bd10      	pop	{r4, pc}

080a2324 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2324:	4770      	bx	lr

080a2326 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2328:	4606      	mov	r6, r0
 80a232a:	4615      	mov	r5, r2
 80a232c:	460c      	mov	r4, r1
 80a232e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2330:	42bc      	cmp	r4, r7
 80a2332:	d006      	beq.n	80a2342 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2334:	6833      	ldr	r3, [r6, #0]
 80a2336:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a233a:	689b      	ldr	r3, [r3, #8]
 80a233c:	4630      	mov	r0, r6
 80a233e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2340:	e7f6      	b.n	80a2330 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2342:	4628      	mov	r0, r5
 80a2344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2346 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2346:	2200      	movs	r2, #0
 80a2348:	7c00      	ldrb	r0, [r0, #16]
 80a234a:	f7ff bdf9 	b.w	80a1f40 <HAL_I2C_Write_Data>

080a234e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a234e:	2100      	movs	r1, #0
 80a2350:	7c00      	ldrb	r0, [r0, #16]
 80a2352:	f7ff bdfd 	b.w	80a1f50 <HAL_I2C_Available_Data>

080a2356 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2356:	2100      	movs	r1, #0
 80a2358:	7c00      	ldrb	r0, [r0, #16]
 80a235a:	f7ff be01 	b.w	80a1f60 <HAL_I2C_Read_Data>

080a235e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a235e:	2100      	movs	r1, #0
 80a2360:	7c00      	ldrb	r0, [r0, #16]
 80a2362:	f7ff be05 	b.w	80a1f70 <HAL_I2C_Peek_Data>

080a2366 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2366:	2100      	movs	r1, #0
 80a2368:	7c00      	ldrb	r0, [r0, #16]
 80a236a:	f7ff be09 	b.w	80a1f80 <HAL_I2C_Flush_Data>

080a236e <_ZN7TwoWireD0Ev>:
 80a236e:	b510      	push	{r4, lr}
 80a2370:	4604      	mov	r4, r0
 80a2372:	2114      	movs	r1, #20
 80a2374:	f000 ffab 	bl	80a32ce <_ZdlPvj>
 80a2378:	4620      	mov	r0, r4
 80a237a:	bd10      	pop	{r4, pc}

080a237c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a237c:	b510      	push	{r4, lr}
 80a237e:	4604      	mov	r4, r0
 80a2380:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2386:	60a3      	str	r3, [r4, #8]
 80a2388:	4b04      	ldr	r3, [pc, #16]	; (80a239c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a238a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a238c:	7420      	strb	r0, [r4, #16]
 80a238e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2390:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2392:	f7ff fe05 	bl	80a1fa0 <HAL_I2C_Init>

}
 80a2396:	4620      	mov	r0, r4
 80a2398:	bd10      	pop	{r4, pc}
 80a239a:	bf00      	nop
 80a239c:	080a3c44 	.word	0x080a3c44

080a23a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a23a0:	2300      	movs	r3, #0
 80a23a2:	461a      	mov	r2, r3
 80a23a4:	4619      	mov	r1, r3
 80a23a6:	7c00      	ldrb	r0, [r0, #16]
 80a23a8:	f7ff bdaa 	b.w	80a1f00 <HAL_I2C_Begin>

080a23ac <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a23ac:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a23ae:	2400      	movs	r4, #0
 80a23b0:	7c00      	ldrb	r0, [r0, #16]
 80a23b2:	9400      	str	r4, [sp, #0]
 80a23b4:	f7ff fdac 	bl	80a1f10 <HAL_I2C_Request_Data>
  return result;
}
 80a23b8:	b2c0      	uxtb	r0, r0
 80a23ba:	b002      	add	sp, #8
 80a23bc:	bd10      	pop	{r4, pc}

080a23be <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a23be:	2301      	movs	r3, #1
 80a23c0:	f7ff bff4 	b.w	80a23ac <_ZN7TwoWire11requestFromEhhh>

080a23c4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a23c4:	2200      	movs	r2, #0
 80a23c6:	7c00      	ldrb	r0, [r0, #16]
 80a23c8:	f7ff bdaa 	b.w	80a1f20 <HAL_I2C_Begin_Transmission>

080a23cc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a23cc:	2200      	movs	r2, #0
 80a23ce:	7c00      	ldrb	r0, [r0, #16]
 80a23d0:	f7ff bdae 	b.w	80a1f30 <HAL_I2C_End_Transmission>

080a23d4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a23d4:	2101      	movs	r1, #1
 80a23d6:	f7ff bff9 	b.w	80a23cc <_ZN7TwoWire15endTransmissionEh>

080a23da <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a23da:	2100      	movs	r1, #0
 80a23dc:	7c00      	ldrb	r0, [r0, #16]
 80a23de:	f7ff bdd7 	b.w	80a1f90 <HAL_I2C_Is_Enabled>

080a23e2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a23e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a23e4:	460f      	mov	r7, r1
 80a23e6:	f100 0608 	add.w	r6, r0, #8
 80a23ea:	1d05      	adds	r5, r0, #4
 80a23ec:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a23ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a23f2:	220a      	movs	r2, #10
 80a23f4:	4638      	mov	r0, r7
 80a23f6:	f000 f952 	bl	80a269e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a23fa:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a23fc:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a23fe:	d007      	beq.n	80a2410 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2400:	2c00      	cmp	r4, #0
 80a2402:	d0f4      	beq.n	80a23ee <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2404:	212e      	movs	r1, #46	; 0x2e
 80a2406:	4638      	mov	r0, r7
 80a2408:	f000 f8f6 	bl	80a25f8 <_ZN5Print5printEc>
 80a240c:	4404      	add	r4, r0
 80a240e:	e7ee      	b.n	80a23ee <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2410:	4620      	mov	r0, r4
 80a2412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2414 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2414:	b510      	push	{r4, lr}
 80a2416:	4604      	mov	r4, r0
 80a2418:	4b04      	ldr	r3, [pc, #16]	; (80a242c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a241a:	2211      	movs	r2, #17
 80a241c:	f840 3b04 	str.w	r3, [r0], #4
 80a2420:	2100      	movs	r1, #0
 80a2422:	f001 fb16 	bl	80a3a52 <memset>
{
    clear();
}
 80a2426:	4620      	mov	r0, r4
 80a2428:	bd10      	pop	{r4, pc}
 80a242a:	bf00      	nop
 80a242c:	080a3c6c 	.word	0x080a3c6c

080a2430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2430:	4603      	mov	r3, r0
 80a2432:	4a07      	ldr	r2, [pc, #28]	; (80a2450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2434:	b510      	push	{r4, lr}
 80a2436:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a243a:	f101 0210 	add.w	r2, r1, #16
 80a243e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2442:	4291      	cmp	r1, r2
 80a2444:	f843 4b04 	str.w	r4, [r3], #4
 80a2448:	d1f9      	bne.n	80a243e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a244a:	780a      	ldrb	r2, [r1, #0]
 80a244c:	701a      	strb	r2, [r3, #0]
}
 80a244e:	bd10      	pop	{r4, pc}
 80a2450:	080a3c6c 	.word	0x080a3c6c

080a2454 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2454:	4a02      	ldr	r2, [pc, #8]	; (80a2460 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2456:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2458:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a245a:	2204      	movs	r2, #4
 80a245c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a245e:	4770      	bx	lr
 80a2460:	080a3c6c 	.word	0x080a3c6c

080a2464 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2464:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2466:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a246a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a246e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2472:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2476:	2304      	movs	r3, #4
 80a2478:	6041      	str	r1, [r0, #4]
 80a247a:	7503      	strb	r3, [r0, #20]
 80a247c:	bd10      	pop	{r4, pc}
	...

080a2480 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2482:	4d04      	ldr	r5, [pc, #16]	; (80a2494 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2484:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2486:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a248a:	9500      	str	r5, [sp, #0]
 80a248c:	f7ff ffea 	bl	80a2464 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2490:	b003      	add	sp, #12
 80a2492:	bd30      	pop	{r4, r5, pc}
 80a2494:	080a3c6c 	.word	0x080a3c6c

080a2498 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a2498:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a249a:	780d      	ldrb	r5, [r1, #0]
 80a249c:	788b      	ldrb	r3, [r1, #2]
 80a249e:	784a      	ldrb	r2, [r1, #1]
 80a24a0:	78c9      	ldrb	r1, [r1, #3]
 80a24a2:	9100      	str	r1, [sp, #0]
 80a24a4:	4629      	mov	r1, r5
 80a24a6:	f7ff ffdd 	bl	80a2464 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a24aa:	b003      	add	sp, #12
 80a24ac:	bd30      	pop	{r4, r5, pc}
	...

080a24b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a24b0:	4a01      	ldr	r2, [pc, #4]	; (80a24b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a24b2:	4b02      	ldr	r3, [pc, #8]	; (80a24bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a24b4:	601a      	str	r2, [r3, #0]
 80a24b6:	4770      	bx	lr
 80a24b8:	080a3cee 	.word	0x080a3cee
 80a24bc:	200001d4 	.word	0x200001d4

080a24c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a24c0:	2300      	movs	r3, #0
 80a24c2:	461a      	mov	r2, r3
 80a24c4:	6840      	ldr	r0, [r0, #4]
 80a24c6:	f7ff bea9 	b.w	80a221c <network_connect>

080a24ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a24ca:	2200      	movs	r2, #0
 80a24cc:	2102      	movs	r1, #2
 80a24ce:	6840      	ldr	r0, [r0, #4]
 80a24d0:	f7ff beb4 	b.w	80a223c <network_disconnect>

080a24d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a24d4:	2200      	movs	r2, #0
 80a24d6:	4611      	mov	r1, r2
 80a24d8:	6840      	ldr	r0, [r0, #4]
 80a24da:	f7ff bea7 	b.w	80a222c <network_connecting>

080a24de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a24de:	2200      	movs	r2, #0
 80a24e0:	4611      	mov	r1, r2
 80a24e2:	6840      	ldr	r0, [r0, #4]
 80a24e4:	f7ff beb2 	b.w	80a224c <network_ready>

080a24e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a24e8:	2300      	movs	r3, #0
 80a24ea:	461a      	mov	r2, r3
 80a24ec:	4619      	mov	r1, r3
 80a24ee:	6840      	ldr	r0, [r0, #4]
 80a24f0:	f7ff beb4 	b.w	80a225c <network_on>

080a24f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a24f4:	2300      	movs	r3, #0
 80a24f6:	461a      	mov	r2, r3
 80a24f8:	4619      	mov	r1, r3
 80a24fa:	6840      	ldr	r0, [r0, #4]
 80a24fc:	f7ff beb6 	b.w	80a226c <network_off>

080a2500 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2500:	2200      	movs	r2, #0
 80a2502:	f081 0101 	eor.w	r1, r1, #1
 80a2506:	6840      	ldr	r0, [r0, #4]
 80a2508:	f7ff beb8 	b.w	80a227c <network_listen>

080a250c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a250c:	2200      	movs	r2, #0
 80a250e:	6840      	ldr	r0, [r0, #4]
 80a2510:	f7ff bec4 	b.w	80a229c <network_set_listen_timeout>

080a2514 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2514:	2200      	movs	r2, #0
 80a2516:	4611      	mov	r1, r2
 80a2518:	6840      	ldr	r0, [r0, #4]
 80a251a:	f7ff bec7 	b.w	80a22ac <network_get_listen_timeout>

080a251e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a251e:	2200      	movs	r2, #0
 80a2520:	4611      	mov	r1, r2
 80a2522:	6840      	ldr	r0, [r0, #4]
 80a2524:	f7ff beb2 	b.w	80a228c <network_listening>

080a2528 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2528:	b570      	push	{r4, r5, r6, lr}
 80a252a:	4616      	mov	r6, r2
 80a252c:	b08e      	sub	sp, #56	; 0x38
 80a252e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2530:	a808      	add	r0, sp, #32
 80a2532:	f7ff ff6f 	bl	80a2414 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2536:	2211      	movs	r2, #17
 80a2538:	2100      	movs	r1, #0
 80a253a:	a803      	add	r0, sp, #12
 80a253c:	f001 fa89 	bl	80a3a52 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2540:	4630      	mov	r0, r6
 80a2542:	f001 fab7 	bl	80a3ab4 <strlen>
 80a2546:	2500      	movs	r5, #0
 80a2548:	4b0a      	ldr	r3, [pc, #40]	; (80a2574 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a254a:	9500      	str	r5, [sp, #0]
 80a254c:	b281      	uxth	r1, r0
 80a254e:	685b      	ldr	r3, [r3, #4]
 80a2550:	aa03      	add	r2, sp, #12
 80a2552:	4630      	mov	r0, r6
 80a2554:	f7ff fe1e 	bl	80a2194 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2558:	b120      	cbz	r0, 80a2564 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a255a:	4629      	mov	r1, r5
 80a255c:	4620      	mov	r0, r4
 80a255e:	f7ff ff79 	bl	80a2454 <_ZN9IPAddressC1Em>
 80a2562:	e003      	b.n	80a256c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2564:	a903      	add	r1, sp, #12
 80a2566:	4620      	mov	r0, r4
 80a2568:	f7ff ff62 	bl	80a2430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a256c:	4620      	mov	r0, r4
 80a256e:	b00e      	add	sp, #56	; 0x38
 80a2570:	bd70      	pop	{r4, r5, r6, pc}
 80a2572:	bf00      	nop
 80a2574:	20000658 	.word	0x20000658

080a2578 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2578:	4b03      	ldr	r3, [pc, #12]	; (80a2588 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a257a:	4a04      	ldr	r2, [pc, #16]	; (80a258c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a257c:	2804      	cmp	r0, #4
 80a257e:	bf0c      	ite	eq
 80a2580:	4610      	moveq	r0, r2
 80a2582:	4618      	movne	r0, r3
 80a2584:	4770      	bx	lr
 80a2586:	bf00      	nop
 80a2588:	200001d8 	.word	0x200001d8
 80a258c:	20000658 	.word	0x20000658

080a2590 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2590:	4b02      	ldr	r3, [pc, #8]	; (80a259c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2592:	4a03      	ldr	r2, [pc, #12]	; (80a25a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2594:	601a      	str	r2, [r3, #0]
 80a2596:	2200      	movs	r2, #0
 80a2598:	605a      	str	r2, [r3, #4]
 80a259a:	4770      	bx	lr
 80a259c:	200001d8 	.word	0x200001d8
 80a25a0:	080a3d64 	.word	0x080a3d64

080a25a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a25a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a25a6:	4606      	mov	r6, r0
 80a25a8:	460d      	mov	r5, r1
 80a25aa:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a25ac:	2400      	movs	r4, #0
  while (size--) {
 80a25ae:	42bd      	cmp	r5, r7
 80a25b0:	d00c      	beq.n	80a25cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a25b2:	6833      	ldr	r3, [r6, #0]
 80a25b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a25b8:	689b      	ldr	r3, [r3, #8]
 80a25ba:	4630      	mov	r0, r6
 80a25bc:	4798      	blx	r3
     if (chunk>=0)
 80a25be:	2800      	cmp	r0, #0
 80a25c0:	db01      	blt.n	80a25c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a25c2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a25c4:	e7f3      	b.n	80a25ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a25c6:	2c00      	cmp	r4, #0
 80a25c8:	bf08      	it	eq
 80a25ca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a25cc:	4620      	mov	r0, r4
 80a25ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a25d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a25d0:	b570      	push	{r4, r5, r6, lr}
 80a25d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a25d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a25d6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a25d8:	b149      	cbz	r1, 80a25ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a25da:	f001 fa6b 	bl	80a3ab4 <strlen>
 80a25de:	682b      	ldr	r3, [r5, #0]
 80a25e0:	4602      	mov	r2, r0
 80a25e2:	4621      	mov	r1, r4
 80a25e4:	4628      	mov	r0, r5
    }
 80a25e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a25ea:	68db      	ldr	r3, [r3, #12]
 80a25ec:	4718      	bx	r3
    }
 80a25ee:	bd70      	pop	{r4, r5, r6, pc}

080a25f0 <_ZN5Print5printEPKc>:
 80a25f0:	b508      	push	{r3, lr}
 80a25f2:	f7ff ffed 	bl	80a25d0 <_ZN5Print5writeEPKc>
 80a25f6:	bd08      	pop	{r3, pc}

080a25f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a25f8:	6803      	ldr	r3, [r0, #0]
 80a25fa:	689b      	ldr	r3, [r3, #8]
 80a25fc:	4718      	bx	r3

080a25fe <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a25fe:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a2600:	680a      	ldr	r2, [r1, #0]
 80a2602:	4601      	mov	r1, r0
 80a2604:	6812      	ldr	r2, [r2, #0]
 80a2606:	4618      	mov	r0, r3
 80a2608:	4710      	bx	r2

080a260a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a260a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a260c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a260e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2610:	f7ff fff2 	bl	80a25f8 <_ZN5Print5printEc>
  n += print('\n');
 80a2614:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2616:	4604      	mov	r4, r0
  n += print('\n');
 80a2618:	4628      	mov	r0, r5
 80a261a:	f7ff ffed 	bl	80a25f8 <_ZN5Print5printEc>
  return n;
}
 80a261e:	4420      	add	r0, r4
 80a2620:	bd38      	pop	{r3, r4, r5, pc}

080a2622 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2622:	b538      	push	{r3, r4, r5, lr}
 80a2624:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2626:	f7ff ffd3 	bl	80a25d0 <_ZN5Print5writeEPKc>
 80a262a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a262c:	4628      	mov	r0, r5
 80a262e:	f7ff ffec 	bl	80a260a <_ZN5Print7printlnEv>
  return n;
}
 80a2632:	4420      	add	r0, r4
 80a2634:	bd38      	pop	{r3, r4, r5, pc}

080a2636 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a2636:	b538      	push	{r3, r4, r5, lr}
 80a2638:	4605      	mov	r5, r0
   size_t n = print(x);
 80a263a:	f7ff ffe0 	bl	80a25fe <_ZN5Print5printERK9Printable>
 80a263e:	4604      	mov	r4, r0
   n += println();
 80a2640:	4628      	mov	r0, r5
 80a2642:	f7ff ffe2 	bl	80a260a <_ZN5Print7printlnEv>
   return n;
 }
 80a2646:	4420      	add	r0, r4
 80a2648:	bd38      	pop	{r3, r4, r5, pc}

080a264a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a264a:	2a01      	cmp	r2, #1
 80a264c:	bf98      	it	ls
 80a264e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2650:	b530      	push	{r4, r5, lr}
 80a2652:	460b      	mov	r3, r1
 80a2654:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2656:	2100      	movs	r1, #0
 80a2658:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a265c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2660:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2664:	fb05 3312 	mls	r3, r5, r2, r3
 80a2668:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a266a:	2b09      	cmp	r3, #9
 80a266c:	bf94      	ite	ls
 80a266e:	3330      	addls	r3, #48	; 0x30
 80a2670:	3337      	addhi	r3, #55	; 0x37
 80a2672:	b2db      	uxtb	r3, r3
 80a2674:	4621      	mov	r1, r4
 80a2676:	f804 3901 	strb.w	r3, [r4], #-1
 80a267a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a267c:	2d00      	cmp	r5, #0
 80a267e:	d1ef      	bne.n	80a2660 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2680:	f7ff ffa6 	bl	80a25d0 <_ZN5Print5writeEPKc>
}
 80a2684:	b00b      	add	sp, #44	; 0x2c
 80a2686:	bd30      	pop	{r4, r5, pc}

080a2688 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2688:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a268a:	b922      	cbnz	r2, 80a2696 <_ZN5Print5printEmi+0xe>
 80a268c:	6803      	ldr	r3, [r0, #0]
 80a268e:	b2c9      	uxtb	r1, r1
 80a2690:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2692:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2694:	4718      	bx	r3
  else return printNumber(n, base);
 80a2696:	b2d2      	uxtb	r2, r2
}
 80a2698:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a269a:	f7ff bfd6 	b.w	80a264a <_ZN5Print11printNumberEmh>

080a269e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a269e:	f7ff bff3 	b.w	80a2688 <_ZN5Print5printEmi>

080a26a2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a26a2:	b510      	push	{r4, lr}
 80a26a4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a26a6:	f7ff fe34 	bl	80a2312 <_ZNSt14_Function_baseD1Ev>
 80a26aa:	4620      	mov	r0, r4
 80a26ac:	bd10      	pop	{r4, pc}
	...

080a26b0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a26b0:	4803      	ldr	r0, [pc, #12]	; (80a26c0 <_GLOBAL__sub_I_RGB+0x10>)
 80a26b2:	2300      	movs	r3, #0
 80a26b4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a26b6:	4a03      	ldr	r2, [pc, #12]	; (80a26c4 <_GLOBAL__sub_I_RGB+0x14>)
 80a26b8:	4903      	ldr	r1, [pc, #12]	; (80a26c8 <_GLOBAL__sub_I_RGB+0x18>)
 80a26ba:	f000 be03 	b.w	80a32c4 <__aeabi_atexit>
 80a26be:	bf00      	nop
 80a26c0:	200001e0 	.word	0x200001e0
 80a26c4:	20000090 	.word	0x20000090
 80a26c8:	080a26a3 	.word	0x080a26a3

080a26cc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a26cc:	4770      	bx	lr

080a26ce <_ZN8SPIClassD0Ev>:
 80a26ce:	b510      	push	{r4, lr}
 80a26d0:	4604      	mov	r4, r0
 80a26d2:	2110      	movs	r1, #16
 80a26d4:	f000 fdfb 	bl	80a32ce <_ZdlPvj>
 80a26d8:	4620      	mov	r0, r4
 80a26da:	bd10      	pop	{r4, pc}

080a26dc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a26dc:	b570      	push	{r4, r5, r6, lr}
 80a26de:	4604      	mov	r4, r0
 80a26e0:	460e      	mov	r6, r1
 80a26e2:	4b07      	ldr	r3, [pc, #28]	; (80a2700 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a26e4:	2500      	movs	r5, #0
 80a26e6:	6003      	str	r3, [r0, #0]
 80a26e8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a26ec:	f7ff fbc0 	bl	80a1e70 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a26f0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a26f2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a26f4:	f7ff fcb6 	bl	80a2064 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a26f8:	60a5      	str	r5, [r4, #8]
}
 80a26fa:	4620      	mov	r0, r4
 80a26fc:	bd70      	pop	{r4, r5, r6, pc}
 80a26fe:	bf00      	nop
 80a2700:	080a3d98 	.word	0x080a3d98

080a2704 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2704:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2708:	7900      	ldrb	r0, [r0, #4]
 80a270a:	f7ff bc83 	b.w	80a2014 <HAL_SPI_Begin>

080a270e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a270e:	7900      	ldrb	r0, [r0, #4]
 80a2710:	f7ff bc88 	b.w	80a2024 <HAL_SPI_Set_Bit_Order>

080a2714 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2714:	7900      	ldrb	r0, [r0, #4]
 80a2716:	f7ff bc8d 	b.w	80a2034 <HAL_SPI_Set_Data_Mode>
	...

080a271c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a271c:	4a05      	ldr	r2, [pc, #20]	; (80a2734 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a271e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2720:	5c99      	ldrb	r1, [r3, r2]
 80a2722:	4281      	cmp	r1, r0
 80a2724:	d002      	beq.n	80a272c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a2726:	3301      	adds	r3, #1
 80a2728:	2b08      	cmp	r3, #8
 80a272a:	d1f9      	bne.n	80a2720 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a272c:	1c58      	adds	r0, r3, #1
}
 80a272e:	b2c0      	uxtb	r0, r0
 80a2730:	4770      	bx	lr
 80a2732:	bf00      	nop
 80a2734:	080a3da0 	.word	0x080a3da0

080a2738 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2738:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a273a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a273c:	6018      	str	r0, [r3, #0]
 80a273e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2740:	6818      	ldr	r0, [r3, #0]
 80a2742:	b2e5      	uxtb	r5, r4
 80a2744:	4288      	cmp	r0, r1
 80a2746:	d906      	bls.n	80a2756 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2748:	3401      	adds	r4, #1
 80a274a:	2c08      	cmp	r4, #8
 80a274c:	d002      	beq.n	80a2754 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a274e:	0840      	lsrs	r0, r0, #1
 80a2750:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2752:	e7f5      	b.n	80a2740 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2754:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2756:	4b02      	ldr	r3, [pc, #8]	; (80a2760 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2758:	5d5b      	ldrb	r3, [r3, r5]
 80a275a:	7013      	strb	r3, [r2, #0]
 80a275c:	bd30      	pop	{r4, r5, pc}
 80a275e:	bf00      	nop
 80a2760:	080a3da0 	.word	0x080a3da0

080a2764 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2764:	b570      	push	{r4, r5, r6, lr}
 80a2766:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2768:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a276c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a276e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2770:	2214      	movs	r2, #20
 80a2772:	2100      	movs	r1, #0
 80a2774:	a803      	add	r0, sp, #12
 80a2776:	f001 f96c 	bl	80a3a52 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a277a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a277c:	a903      	add	r1, sp, #12
 80a277e:	4630      	mov	r0, r6
 80a2780:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2782:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2786:	f7ff fc7d 	bl	80a2084 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a278a:	ab02      	add	r3, sp, #8
 80a278c:	f10d 0207 	add.w	r2, sp, #7
 80a2790:	4629      	mov	r1, r5
 80a2792:	9804      	ldr	r0, [sp, #16]
 80a2794:	f7ff ffd0 	bl	80a2738 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2798:	7920      	ldrb	r0, [r4, #4]
 80a279a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a279e:	f7ff fc51 	bl	80a2044 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a27a2:	9802      	ldr	r0, [sp, #8]
 80a27a4:	b008      	add	sp, #32
 80a27a6:	bd70      	pop	{r4, r5, r6, pc}

080a27a8 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a27a8:	b538      	push	{r3, r4, r5, lr}
 80a27aa:	4604      	mov	r4, r0
    if (dividerReference)
 80a27ac:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a27ae:	4608      	mov	r0, r1
    if (dividerReference)
 80a27b0:	b14d      	cbz	r5, 80a27c6 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a27b2:	f7ff ffb3 	bl	80a271c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a27b6:	2201      	movs	r2, #1
 80a27b8:	fa25 f100 	lsr.w	r1, r5, r0
 80a27bc:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a27be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a27c2:	f7ff bfcf 	b.w	80a2764 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a27c6:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a27c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a27cc:	f7ff bc3a 	b.w	80a2044 <HAL_SPI_Set_Clock_Divider>

080a27d0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a27d0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a27d2:	7900      	ldrb	r0, [r0, #4]
 80a27d4:	f7ff fc3e 	bl	80a2054 <HAL_SPI_Send_Receive_Data>
}
 80a27d8:	b2c0      	uxtb	r0, r0
 80a27da:	bd08      	pop	{r3, pc}

080a27dc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a27dc:	7900      	ldrb	r0, [r0, #4]
 80a27de:	f7ff bc49 	b.w	80a2074 <HAL_SPI_Is_Enabled>

080a27e2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a27e2:	b510      	push	{r4, lr}
 80a27e4:	4604      	mov	r4, r0
{
	free(buffer);
 80a27e6:	6800      	ldr	r0, [r0, #0]
 80a27e8:	f7ff fd80 	bl	80a22ec <free>
}
 80a27ec:	4620      	mov	r0, r4
 80a27ee:	bd10      	pop	{r4, pc}

080a27f0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a27f0:	b510      	push	{r4, lr}
 80a27f2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a27f4:	6800      	ldr	r0, [r0, #0]
 80a27f6:	b108      	cbz	r0, 80a27fc <_ZN6String10invalidateEv+0xc>
 80a27f8:	f7ff fd78 	bl	80a22ec <free>
	buffer = NULL;
 80a27fc:	2300      	movs	r3, #0
 80a27fe:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2800:	60a3      	str	r3, [r4, #8]
 80a2802:	6063      	str	r3, [r4, #4]
 80a2804:	bd10      	pop	{r4, pc}

080a2806 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2806:	b538      	push	{r3, r4, r5, lr}
 80a2808:	4604      	mov	r4, r0
 80a280a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a280c:	6800      	ldr	r0, [r0, #0]
 80a280e:	3101      	adds	r1, #1
 80a2810:	f7ff fd74 	bl	80a22fc <realloc>
	if (newbuffer) {
 80a2814:	b110      	cbz	r0, 80a281c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2816:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a281a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a281c:	bd38      	pop	{r3, r4, r5, pc}

080a281e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a281e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2820:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2822:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2824:	b113      	cbz	r3, 80a282c <_ZN6String7reserveEj+0xe>
 80a2826:	6843      	ldr	r3, [r0, #4]
 80a2828:	428b      	cmp	r3, r1
 80a282a:	d207      	bcs.n	80a283c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a282c:	4620      	mov	r0, r4
 80a282e:	f7ff ffea 	bl	80a2806 <_ZN6String12changeBufferEj>
 80a2832:	b120      	cbz	r0, 80a283e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2834:	68a3      	ldr	r3, [r4, #8]
 80a2836:	b90b      	cbnz	r3, 80a283c <_ZN6String7reserveEj+0x1e>
 80a2838:	6822      	ldr	r2, [r4, #0]
 80a283a:	7013      	strb	r3, [r2, #0]
 80a283c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a283e:	bd10      	pop	{r4, pc}

080a2840 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2840:	b570      	push	{r4, r5, r6, lr}
 80a2842:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2844:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2846:	4604      	mov	r4, r0
 80a2848:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a284a:	f7ff ffe8 	bl	80a281e <_ZN6String7reserveEj>
 80a284e:	b918      	cbnz	r0, 80a2858 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2850:	4620      	mov	r0, r4
 80a2852:	f7ff ffcd 	bl	80a27f0 <_ZN6String10invalidateEv>
		return *this;
 80a2856:	e009      	b.n	80a286c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2858:	462a      	mov	r2, r5
 80a285a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a285c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a285e:	6820      	ldr	r0, [r4, #0]
 80a2860:	f001 f8ec 	bl	80a3a3c <memcpy>
	buffer[len] = 0;
 80a2864:	6822      	ldr	r2, [r4, #0]
 80a2866:	68a3      	ldr	r3, [r4, #8]
 80a2868:	2100      	movs	r1, #0
 80a286a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a286c:	4620      	mov	r0, r4
 80a286e:	bd70      	pop	{r4, r5, r6, pc}

080a2870 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2870:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2872:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2874:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2876:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2878:	6043      	str	r3, [r0, #4]
	len = 0;
 80a287a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a287c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a287e:	460d      	mov	r5, r1
 80a2880:	b139      	cbz	r1, 80a2892 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2882:	4608      	mov	r0, r1
 80a2884:	f001 f916 	bl	80a3ab4 <strlen>
 80a2888:	4629      	mov	r1, r5
 80a288a:	4602      	mov	r2, r0
 80a288c:	4620      	mov	r0, r4
 80a288e:	f7ff ffd7 	bl	80a2840 <_ZN6String4copyEPKcj>
}
 80a2892:	4620      	mov	r0, r4
 80a2894:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2898 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a289c:	4b03      	ldr	r3, [pc, #12]	; (80a28ac <_GLOBAL__sub_I_System+0x14>)
 80a289e:	2000      	movs	r0, #0
 80a28a0:	7018      	strb	r0, [r3, #0]
 80a28a2:	8058      	strh	r0, [r3, #2]
 80a28a4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a28a6:	f7ff bc7d 	b.w	80a21a4 <set_system_mode>
 80a28aa:	bf00      	nop
 80a28ac:	200001f0 	.word	0x200001f0

080a28b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a28b0:	4b02      	ldr	r3, [pc, #8]	; (80a28bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a28b2:	681a      	ldr	r2, [r3, #0]
 80a28b4:	4b02      	ldr	r3, [pc, #8]	; (80a28c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a28b6:	601a      	str	r2, [r3, #0]
 80a28b8:	4770      	bx	lr
 80a28ba:	bf00      	nop
 80a28bc:	20000028 	.word	0x20000028
 80a28c0:	200001f8 	.word	0x200001f8

080a28c4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a28c4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a28c6:	6804      	ldr	r4, [r0, #0]
 80a28c8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a28ca:	46a4      	mov	ip, r4
    }
 80a28cc:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a28ce:	4760      	bx	ip

080a28d0 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a28d0:	6803      	ldr	r3, [r0, #0]
 80a28d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a28d4:	4718      	bx	r3

080a28d6 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a28d6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a28d8:	4770      	bx	lr

080a28da <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a28da:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a28dc:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a28de:	1a10      	subs	r0, r2, r0
 80a28e0:	4770      	bx	lr

080a28e2 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a28e2:	b513      	push	{r0, r1, r4, lr}
 80a28e4:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a28e6:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a28e8:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a28ec:	68d4      	ldr	r4, [r2, #12]
 80a28ee:	4619      	mov	r1, r3
 80a28f0:	2201      	movs	r2, #1
 80a28f2:	47a0      	blx	r4
}
 80a28f4:	b002      	add	sp, #8
 80a28f6:	bd10      	pop	{r4, pc}

080a28f8 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a28f8:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a28fa:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a28fc:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a28fe:	691b      	ldr	r3, [r3, #16]
 80a2900:	4798      	blx	r3
 80a2902:	b128      	cbz	r0, 80a2910 <_ZN3UDP4readEv+0x18>
 80a2904:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2906:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a2908:	1c59      	adds	r1, r3, #1
 80a290a:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a290c:	5cd0      	ldrb	r0, [r2, r3]
 80a290e:	bd10      	pop	{r4, pc}
 80a2910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2914:	bd10      	pop	{r4, pc}

080a2916 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a2916:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a2918:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a291a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a291c:	691b      	ldr	r3, [r3, #16]
 80a291e:	4798      	blx	r3
 80a2920:	b118      	cbz	r0, 80a292a <_ZN3UDP4peekEv+0x14>
 80a2922:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2924:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a2926:	5cd0      	ldrb	r0, [r2, r3]
 80a2928:	bd10      	pop	{r4, pc}
 80a292a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a292e:	bd10      	pop	{r4, pc}

080a2930 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a2930:	4770      	bx	lr

080a2932 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a2932:	4603      	mov	r3, r0
 80a2934:	4608      	mov	r0, r1
 80a2936:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a2938:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a293a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a293c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a293e:	6803      	ldr	r3, [r0, #0]
 80a2940:	1a52      	subs	r2, r2, r1
 80a2942:	68db      	ldr	r3, [r3, #12]
 80a2944:	4421      	add	r1, r4
}
 80a2946:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a2948:	4718      	bx	r3

080a294a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a294a:	f1a0 0010 	sub.w	r0, r0, #16
 80a294e:	f7ff bff0 	b.w	80a2932 <_ZNK3UDP7printToER5Print>

080a2952 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a2952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2954:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a2956:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a2958:	460f      	mov	r7, r1
 80a295a:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a295c:	f7ff fe0c 	bl	80a2578 <_ZN5spark12NetworkClass4fromEm>
 80a2960:	6803      	ldr	r3, [r0, #0]
 80a2962:	68db      	ldr	r3, [r3, #12]
 80a2964:	4798      	blx	r3
 80a2966:	b1b8      	cbz	r0, 80a2998 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a2968:	2102      	movs	r1, #2
 80a296a:	463b      	mov	r3, r7
 80a296c:	2211      	movs	r2, #17
 80a296e:	4608      	mov	r0, r1
 80a2970:	9600      	str	r6, [sp, #0]
 80a2972:	f7ff fb27 	bl	80a1fc4 <socket_create>
 80a2976:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a2978:	f7ff fb1c 	bl	80a1fb4 <socket_handle_valid>
 80a297c:	4604      	mov	r4, r0
 80a297e:	b130      	cbz	r0, 80a298e <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2980:	2300      	movs	r3, #0
 80a2982:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2984:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a2986:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a2988:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a298a:	2001      	movs	r0, #1
 80a298c:	e004      	b.n	80a2998 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a298e:	682b      	ldr	r3, [r5, #0]
 80a2990:	4628      	mov	r0, r5
 80a2992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2994:	4798      	blx	r3
            bound = false;
 80a2996:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a2998:	b003      	add	sp, #12
 80a299a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a299c <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a299c:	b538      	push	{r3, r4, r5, lr}
 80a299e:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a29a0:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a29a2:	f7ff fb2f 	bl	80a2004 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a29a6:	4285      	cmp	r5, r0
 80a29a8:	d002      	beq.n	80a29b0 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a29aa:	6960      	ldr	r0, [r4, #20]
 80a29ac:	f7ff fb22 	bl	80a1ff4 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a29b0:	f7ff fb28 	bl	80a2004 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a29b4:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a29b6:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a29b8:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a29ba:	8723      	strh	r3, [r4, #56]	; 0x38
 80a29bc:	bd38      	pop	{r3, r4, r5, pc}

080a29be <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a29be:	b530      	push	{r4, r5, lr}
 80a29c0:	b087      	sub	sp, #28
 80a29c2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a29c6:	2502      	movs	r5, #2
 80a29c8:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a29cc:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a29d0:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a29d2:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a29d4:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a29d8:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a29dc:	799c      	ldrb	r4, [r3, #6]
 80a29de:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a29e2:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a29e4:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a29e6:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a29ea:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a29ee:	2310      	movs	r3, #16
 80a29f0:	9301      	str	r3, [sp, #4]
 80a29f2:	ab02      	add	r3, sp, #8
 80a29f4:	9300      	str	r3, [sp, #0]
 80a29f6:	6940      	ldr	r0, [r0, #20]
 80a29f8:	2300      	movs	r3, #0
 80a29fa:	f7ff faf3 	bl	80a1fe4 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a29fe:	b007      	add	sp, #28
 80a2a00:	bd30      	pop	{r4, r5, pc}

080a2a02 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a2a02:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2a04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a2a06:	4605      	mov	r5, r0
 80a2a08:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2a0a:	b113      	cbz	r3, 80a2a12 <_ZN3UDP5writeEPKhj+0x10>
 80a2a0c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a2a0e:	1a24      	subs	r4, r4, r0
 80a2a10:	e000      	b.n	80a2a14 <_ZN3UDP5writeEPKhj+0x12>
 80a2a12:	461c      	mov	r4, r3
 80a2a14:	4294      	cmp	r4, r2
 80a2a16:	bf28      	it	cs
 80a2a18:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a2a1a:	4418      	add	r0, r3
 80a2a1c:	4622      	mov	r2, r4
 80a2a1e:	f001 f80d 	bl	80a3a3c <memcpy>
    _offset += size;
 80a2a22:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2a24:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a2a26:	4423      	add	r3, r4
 80a2a28:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2a2a:	bd38      	pop	{r3, r4, r5, pc}

080a2a2c <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2a2c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a2a2e:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2a30:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a2a32:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2a34:	460e      	mov	r6, r1
 80a2a36:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a2a38:	4798      	blx	r3
 80a2a3a:	b188      	cbz	r0, 80a2a60 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a2a3c:	6823      	ldr	r3, [r4, #0]
 80a2a3e:	4620      	mov	r0, r4
 80a2a40:	691b      	ldr	r3, [r3, #16]
 80a2a42:	4798      	blx	r3
 80a2a44:	4285      	cmp	r5, r0
 80a2a46:	bfa8      	it	ge
 80a2a48:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a2a4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2a4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2a4e:	462a      	mov	r2, r5
 80a2a50:	4419      	add	r1, r3
 80a2a52:	4630      	mov	r0, r6
 80a2a54:	f000 fff2 	bl	80a3a3c <memcpy>
      _offset += read;
 80a2a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2a5a:	442b      	add	r3, r5
 80a2a5c:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a2a5e:	e001      	b.n	80a2a64 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a2a60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a2a64:	4628      	mov	r0, r5
 80a2a66:	bd70      	pop	{r4, r5, r6, pc}

080a2a68 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2a6a:	4604      	mov	r4, r0
 80a2a6c:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2a6e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2a70:	460d      	mov	r5, r1
 80a2a72:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2a74:	f7ff fd80 	bl	80a2578 <_ZN5spark12NetworkClass4fromEm>
 80a2a78:	6803      	ldr	r3, [r0, #0]
 80a2a7a:	68db      	ldr	r3, [r3, #12]
 80a2a7c:	4798      	blx	r3
 80a2a7e:	b310      	cbz	r0, 80a2ac6 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2a80:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2a82:	f7ff fabf 	bl	80a2004 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2a86:	4287      	cmp	r7, r0
 80a2a88:	d01d      	beq.n	80a2ac6 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2a8a:	b1e5      	cbz	r5, 80a2ac6 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a2a8c:	ab08      	add	r3, sp, #32
 80a2a8e:	2210      	movs	r2, #16
 80a2a90:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a2a94:	9301      	str	r3, [sp, #4]
 80a2a96:	eb0d 0302 	add.w	r3, sp, r2
 80a2a9a:	9300      	str	r3, [sp, #0]
 80a2a9c:	4629      	mov	r1, r5
 80a2a9e:	2300      	movs	r3, #0
 80a2aa0:	4632      	mov	r2, r6
 80a2aa2:	6960      	ldr	r0, [r4, #20]
 80a2aa4:	f7ff fa96 	bl	80a1fd4 <socket_receivefrom>
        if (ret >= 0)
 80a2aa8:	1e05      	subs	r5, r0, #0
 80a2aaa:	db0e      	blt.n	80a2aca <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2aac:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a2ab0:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2ab4:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2ab6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2aba:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2abc:	f104 001c 	add.w	r0, r4, #28
 80a2ac0:	f7ff fcea 	bl	80a2498 <_ZN9IPAddressaSEPKh>
 80a2ac4:	e001      	b.n	80a2aca <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a2ac6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a2aca:	4628      	mov	r0, r5
 80a2acc:	b009      	add	sp, #36	; 0x24
 80a2ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2ad0 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ad4:	4606      	mov	r6, r0
 80a2ad6:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a2ad8:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2ada:	460d      	mov	r5, r1
 80a2adc:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a2ade:	f7ff fd4b 	bl	80a2578 <_ZN5spark12NetworkClass4fromEm>
 80a2ae2:	6803      	ldr	r3, [r0, #0]
 80a2ae4:	68db      	ldr	r3, [r3, #12]
 80a2ae6:	4798      	blx	r3
 80a2ae8:	b1f8      	cbz	r0, 80a2b2a <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a2aea:	4628      	mov	r0, r5
 80a2aec:	f000 ffe2 	bl	80a3ab4 <strlen>
 80a2af0:	2400      	movs	r4, #0
 80a2af2:	b281      	uxth	r1, r0
 80a2af4:	9400      	str	r4, [sp, #0]
 80a2af6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a2af8:	aa03      	add	r2, sp, #12
 80a2afa:	4628      	mov	r0, r5
 80a2afc:	f7ff fb4a 	bl	80a2194 <inet_gethostbyname>
 80a2b00:	b990      	cbnz	r0, 80a2b28 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a2b02:	a903      	add	r1, sp, #12
 80a2b04:	a808      	add	r0, sp, #32
 80a2b06:	f7ff fc93 	bl	80a2430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a2b0a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2b0c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a2b0e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a2b10:	4b07      	ldr	r3, [pc, #28]	; (80a2b30 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a2b12:	ad09      	add	r5, sp, #36	; 0x24
 80a2b14:	930e      	str	r3, [sp, #56]	; 0x38
 80a2b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2b1a:	682b      	ldr	r3, [r5, #0]
 80a2b1c:	4642      	mov	r2, r8
 80a2b1e:	7023      	strb	r3, [r4, #0]
 80a2b20:	a90e      	add	r1, sp, #56	; 0x38
 80a2b22:	4630      	mov	r0, r6
 80a2b24:	47b8      	blx	r7
 80a2b26:	e000      	b.n	80a2b2a <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a2b28:	4620      	mov	r0, r4
}
 80a2b2a:	b014      	add	sp, #80	; 0x50
 80a2b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2b30:	080a3c6c 	.word	0x080a3c6c

080a2b34 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a2b34:	b570      	push	{r4, r5, r6, lr}
 80a2b36:	4604      	mov	r4, r0
 80a2b38:	4606      	mov	r6, r0
 80a2b3a:	4b05      	ldr	r3, [pc, #20]	; (80a2b50 <_ZN3UDP8remoteIPEv+0x1c>)
 80a2b3c:	f101 0520 	add.w	r5, r1, #32
 80a2b40:	f844 3b04 	str.w	r3, [r4], #4
 80a2b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2b48:	682b      	ldr	r3, [r5, #0]
 80a2b4a:	4630      	mov	r0, r6
 80a2b4c:	7023      	strb	r3, [r4, #0]
 80a2b4e:	bd70      	pop	{r4, r5, r6, pc}
 80a2b50:	080a3c6c 	.word	0x080a3c6c

080a2b54 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2b56:	4694      	mov	ip, r2
 80a2b58:	468e      	mov	lr, r1
 80a2b5a:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2b5c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2b5e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2b60:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a2b62:	4a09      	ldr	r2, [pc, #36]	; (80a2b88 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a2b64:	ac03      	add	r4, sp, #12
 80a2b66:	1d1d      	adds	r5, r3, #4
 80a2b68:	9202      	str	r2, [sp, #8]
 80a2b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2b6e:	682b      	ldr	r3, [r5, #0]
 80a2b70:	4662      	mov	r2, ip
 80a2b72:	7023      	strb	r3, [r4, #0]
 80a2b74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a2b78:	4671      	mov	r1, lr
 80a2b7a:	9300      	str	r3, [sp, #0]
 80a2b7c:	4630      	mov	r0, r6
 80a2b7e:	ab02      	add	r3, sp, #8
 80a2b80:	47b8      	blx	r7
    }
 80a2b82:	b009      	add	sp, #36	; 0x24
 80a2b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2b86:	bf00      	nop
 80a2b88:	080a3c6c 	.word	0x080a3c6c

080a2b8c <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2b8e:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2b90:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2b92:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2b94:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a2b96:	4b0d      	ldr	r3, [pc, #52]	; (80a2bcc <_ZN3UDP9endPacketEv+0x40>)
 80a2b98:	ad03      	add	r5, sp, #12
 80a2b9a:	f100 0620 	add.w	r6, r0, #32
 80a2b9e:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a2ba2:	9302      	str	r3, [sp, #8]
 80a2ba4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a2ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2ba8:	6833      	ldr	r3, [r6, #0]
 80a2baa:	4672      	mov	r2, lr
 80a2bac:	702b      	strb	r3, [r5, #0]
 80a2bae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a2bb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2bb2:	9300      	str	r3, [sp, #0]
 80a2bb4:	4620      	mov	r0, r4
 80a2bb6:	ab02      	add	r3, sp, #8
 80a2bb8:	47b8      	blx	r7
 80a2bba:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a2bbc:	6823      	ldr	r3, [r4, #0]
 80a2bbe:	4620      	mov	r0, r4
 80a2bc0:	69db      	ldr	r3, [r3, #28]
 80a2bc2:	4798      	blx	r3
    return result;
}
 80a2bc4:	4628      	mov	r0, r5
 80a2bc6:	b009      	add	sp, #36	; 0x24
 80a2bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2bca:	bf00      	nop
 80a2bcc:	080a3c6c 	.word	0x080a3c6c

080a2bd0 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a2bd0:	b538      	push	{r3, r4, r5, lr}
 80a2bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2bd6:	6083      	str	r3, [r0, #8]
 80a2bd8:	4b0b      	ldr	r3, [pc, #44]	; (80a2c08 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2bda:	2500      	movs	r5, #0
 80a2bdc:	f103 0208 	add.w	r2, r3, #8
 80a2be0:	336c      	adds	r3, #108	; 0x6c
 80a2be2:	6002      	str	r2, [r0, #0]
 80a2be4:	6103      	str	r3, [r0, #16]
 80a2be6:	6045      	str	r5, [r0, #4]
 80a2be8:	4604      	mov	r4, r0
 80a2bea:	f7ff fa0b 	bl	80a2004 <socket_handle_invalid>
 80a2bee:	6160      	str	r0, [r4, #20]
 80a2bf0:	f104 001c 	add.w	r0, r4, #28
 80a2bf4:	f7ff fc0e 	bl	80a2414 <_ZN9IPAddressC1Ev>
 80a2bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a2bfc:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a2bfe:	8725      	strh	r5, [r4, #56]	; 0x38
 80a2c00:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a2c02:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a2c04:	4620      	mov	r0, r4
 80a2c06:	bd38      	pop	{r3, r4, r5, pc}
 80a2c08:	080a3dd4 	.word	0x080a3dd4

080a2c0c <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a2c0c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a2c0e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a2c12:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a2c14:	b123      	cbz	r3, 80a2c20 <_ZN3UDP13releaseBufferEv+0x14>
 80a2c16:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a2c18:	b110      	cbz	r0, 80a2c20 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a2c1a:	2101      	movs	r1, #1
 80a2c1c:	f000 fb57 	bl	80a32ce <_ZdlPvj>
    }
    _buffer = NULL;
 80a2c20:	2300      	movs	r3, #0
 80a2c22:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a2c24:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a2c28:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2c2a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2c2c:	8723      	strh	r3, [r4, #56]	; 0x38
 80a2c2e:	bd10      	pop	{r4, pc}

080a2c30 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a2c30:	b570      	push	{r4, r5, r6, lr}
 80a2c32:	4604      	mov	r4, r0
 80a2c34:	4616      	mov	r6, r2
 80a2c36:	460d      	mov	r5, r1
    releaseBuffer();
 80a2c38:	f7ff ffe8 	bl	80a2c0c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a2c3c:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a2c3e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a2c40:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a2c42:	b93e      	cbnz	r6, 80a2c54 <_ZN3UDP9setBufferEjPh+0x24>
 80a2c44:	b135      	cbz	r5, 80a2c54 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a2c46:	4628      	mov	r0, r5
 80a2c48:	f7fd fa27 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a2c4c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a2c4e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a2c50:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a2c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a2c56:	b103      	cbz	r3, 80a2c5a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a2c58:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a2c5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a2c5c:	3000      	adds	r0, #0
 80a2c5e:	bf18      	it	ne
 80a2c60:	2001      	movne	r0, #1
 80a2c62:	bd70      	pop	{r4, r5, r6, pc}

080a2c64 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c66:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2c68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2c6a:	4605      	mov	r5, r0
 80a2c6c:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2c6e:	b91a      	cbnz	r2, 80a2c78 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2c70:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2c72:	b109      	cbz	r1, 80a2c78 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a2c74:	f7ff ffdc 	bl	80a2c30 <_ZN3UDP9setBufferEjPh>
 80a2c78:	f105 0620 	add.w	r6, r5, #32
 80a2c7c:	3404      	adds	r4, #4
 80a2c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2c82:	6823      	ldr	r3, [r4, #0]
 80a2c84:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2c86:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a2c88:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2c8a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2c8c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2c8e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2c92 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2c92:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a2c94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2c96:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a2c98:	b91a      	cbnz	r2, 80a2ca2 <_ZN3UDP11parsePacketEm+0x10>
 80a2c9a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2c9c:	b109      	cbz	r1, 80a2ca2 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a2c9e:	f7ff ffc7 	bl	80a2c30 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2ca2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2ca4:	2300      	movs	r3, #0
 80a2ca6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2ca8:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2caa:	b141      	cbz	r1, 80a2cbe <_ZN3UDP11parsePacketEm+0x2c>
 80a2cac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a2cae:	b132      	cbz	r2, 80a2cbe <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a2cb0:	6820      	ldr	r0, [r4, #0]
 80a2cb2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a2cb4:	4620      	mov	r0, r4
 80a2cb6:	47a8      	blx	r5
        if (result>0) {
 80a2cb8:	2800      	cmp	r0, #0
            _total = result;
 80a2cba:	bfc8      	it	gt
 80a2cbc:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a2cbe:	6823      	ldr	r3, [r4, #0]
 80a2cc0:	4620      	mov	r0, r4
}
 80a2cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a2cc6:	691b      	ldr	r3, [r3, #16]
 80a2cc8:	4718      	bx	r3

080a2cca <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2cca:	4770      	bx	lr

080a2ccc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2ccc:	7441      	strb	r1, [r0, #17]
 80a2cce:	4770      	bx	lr

080a2cd0 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2cd0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2cd2:	7c00      	ldrb	r0, [r0, #16]
 80a2cd4:	f7ff fa16 	bl	80a2104 <HAL_USART_Available_Data_For_Write>
}
 80a2cd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2cdc:	bd08      	pop	{r3, pc}

080a2cde <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2cde:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2ce0:	7c00      	ldrb	r0, [r0, #16]
 80a2ce2:	f7ff f9e7 	bl	80a20b4 <HAL_USART_Available_Data>
}
 80a2ce6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2cea:	bd08      	pop	{r3, pc}

080a2cec <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2cec:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2cee:	7c00      	ldrb	r0, [r0, #16]
 80a2cf0:	f7ff f9f0 	bl	80a20d4 <HAL_USART_Peek_Data>
}
 80a2cf4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2cf8:	bf28      	it	cs
 80a2cfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2cfe:	bd08      	pop	{r3, pc}

080a2d00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2d00:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2d02:	7c00      	ldrb	r0, [r0, #16]
 80a2d04:	f7ff f9de 	bl	80a20c4 <HAL_USART_Read_Data>
}
 80a2d08:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d0c:	bf28      	it	cs
 80a2d0e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2d12:	bd08      	pop	{r3, pc}

080a2d14 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2d14:	7c00      	ldrb	r0, [r0, #16]
 80a2d16:	f7ff b9e5 	b.w	80a20e4 <HAL_USART_Flush_Data>

080a2d1a <_ZN11USARTSerialD0Ev>:
 80a2d1a:	b510      	push	{r4, lr}
 80a2d1c:	4604      	mov	r4, r0
 80a2d1e:	2114      	movs	r1, #20
 80a2d20:	f000 fad5 	bl	80a32ce <_ZdlPvj>
 80a2d24:	4620      	mov	r0, r4
 80a2d26:	bd10      	pop	{r4, pc}

080a2d28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2d28:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2d2a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2d2c:	4604      	mov	r4, r0
 80a2d2e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2d30:	b925      	cbnz	r5, 80a2d3c <_ZN11USARTSerial5writeEh+0x14>
 80a2d32:	7c00      	ldrb	r0, [r0, #16]
 80a2d34:	f7ff f9e6 	bl	80a2104 <HAL_USART_Available_Data_For_Write>
 80a2d38:	2800      	cmp	r0, #0
 80a2d3a:	dd05      	ble.n	80a2d48 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2d3c:	4631      	mov	r1, r6
 80a2d3e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2d44:	f7ff b9ae 	b.w	80a20a4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2d48:	4628      	mov	r0, r5
 80a2d4a:	bd70      	pop	{r4, r5, r6, pc}

080a2d4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2d4c:	b510      	push	{r4, lr}
 80a2d4e:	4604      	mov	r4, r0
 80a2d50:	4608      	mov	r0, r1
 80a2d52:	4611      	mov	r1, r2
 80a2d54:	2200      	movs	r2, #0
 80a2d56:	6062      	str	r2, [r4, #4]
 80a2d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2d5c:	60a2      	str	r2, [r4, #8]
 80a2d5e:	4a05      	ldr	r2, [pc, #20]	; (80a2d74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2d60:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2d62:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2d64:	2201      	movs	r2, #1
 80a2d66:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2d68:	461a      	mov	r2, r3
 80a2d6a:	f7ff f993 	bl	80a2094 <HAL_USART_Init>
}
 80a2d6e:	4620      	mov	r0, r4
 80a2d70:	bd10      	pop	{r4, pc}
 80a2d72:	bf00      	nop
 80a2d74:	080a3e4c 	.word	0x080a3e4c

080a2d78 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2d78:	7c00      	ldrb	r0, [r0, #16]
 80a2d7a:	f7ff b9bb 	b.w	80a20f4 <HAL_USART_Is_Enabled>
	...

080a2d80 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2d80:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2d82:	4d0c      	ldr	r5, [pc, #48]	; (80a2db4 <_Z22__fetch_global_Serial1v+0x34>)
 80a2d84:	6829      	ldr	r1, [r5, #0]
 80a2d86:	f011 0401 	ands.w	r4, r1, #1
 80a2d8a:	d111      	bne.n	80a2db0 <_Z22__fetch_global_Serial1v+0x30>
 80a2d8c:	4628      	mov	r0, r5
 80a2d8e:	f7fd f988 	bl	80a00a2 <__cxa_guard_acquire>
 80a2d92:	b168      	cbz	r0, 80a2db0 <_Z22__fetch_global_Serial1v+0x30>
 80a2d94:	4a08      	ldr	r2, [pc, #32]	; (80a2db8 <_Z22__fetch_global_Serial1v+0x38>)
 80a2d96:	4621      	mov	r1, r4
 80a2d98:	4b08      	ldr	r3, [pc, #32]	; (80a2dbc <_Z22__fetch_global_Serial1v+0x3c>)
 80a2d9a:	4809      	ldr	r0, [pc, #36]	; (80a2dc0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2d9c:	f7ff ffd6 	bl	80a2d4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2da0:	4628      	mov	r0, r5
 80a2da2:	f7fd f983 	bl	80a00ac <__cxa_guard_release>
 80a2da6:	4a07      	ldr	r2, [pc, #28]	; (80a2dc4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2da8:	4907      	ldr	r1, [pc, #28]	; (80a2dc8 <_Z22__fetch_global_Serial1v+0x48>)
 80a2daa:	4805      	ldr	r0, [pc, #20]	; (80a2dc0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2dac:	f000 fa8a 	bl	80a32c4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2db0:	4803      	ldr	r0, [pc, #12]	; (80a2dc0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2db2:	bd38      	pop	{r3, r4, r5, pc}
 80a2db4:	20000294 	.word	0x20000294
 80a2db8:	20000298 	.word	0x20000298
 80a2dbc:	20000210 	.word	0x20000210
 80a2dc0:	200001fc 	.word	0x200001fc
 80a2dc4:	20000090 	.word	0x20000090
 80a2dc8:	080a2ccb 	.word	0x080a2ccb

080a2dcc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2dcc:	7441      	strb	r1, [r0, #17]
 80a2dce:	4770      	bx	lr

080a2dd0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2dd0:	4770      	bx	lr

080a2dd2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2dd2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2dd4:	2100      	movs	r1, #0
 80a2dd6:	7c00      	ldrb	r0, [r0, #16]
 80a2dd8:	f7ff f9bc 	bl	80a2154 <HAL_USB_USART_Receive_Data>
}
 80a2ddc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2de0:	bf28      	it	cs
 80a2de2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2de6:	bd08      	pop	{r3, pc}

080a2de8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2de8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2dea:	2101      	movs	r1, #1
 80a2dec:	7c00      	ldrb	r0, [r0, #16]
 80a2dee:	f7ff f9b1 	bl	80a2154 <HAL_USB_USART_Receive_Data>
}
 80a2df2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2df6:	bf28      	it	cs
 80a2df8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2dfc:	bd08      	pop	{r3, pc}

080a2dfe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2dfe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2e00:	7c00      	ldrb	r0, [r0, #16]
 80a2e02:	f7ff f99f 	bl	80a2144 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2e06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2e0a:	bd08      	pop	{r3, pc}

080a2e0c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2e0c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2e0e:	7c00      	ldrb	r0, [r0, #16]
 80a2e10:	f7ff f990 	bl	80a2134 <HAL_USB_USART_Available_Data>
}
 80a2e14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2e18:	bd08      	pop	{r3, pc}

080a2e1a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2e1a:	7c00      	ldrb	r0, [r0, #16]
 80a2e1c:	f7ff b9aa 	b.w	80a2174 <HAL_USB_USART_Flush_Data>

080a2e20 <_ZN9USBSerialD0Ev>:
 80a2e20:	b510      	push	{r4, lr}
 80a2e22:	4604      	mov	r4, r0
 80a2e24:	2114      	movs	r1, #20
 80a2e26:	f000 fa52 	bl	80a32ce <_ZdlPvj>
 80a2e2a:	4620      	mov	r0, r4
 80a2e2c:	bd10      	pop	{r4, pc}

080a2e2e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2e2e:	b538      	push	{r3, r4, r5, lr}
 80a2e30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2e32:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2e34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2e36:	f7ff f985 	bl	80a2144 <HAL_USB_USART_Available_Data_For_Write>
 80a2e3a:	2800      	cmp	r0, #0
 80a2e3c:	dc01      	bgt.n	80a2e42 <_ZN9USBSerial5writeEh+0x14>
 80a2e3e:	7c60      	ldrb	r0, [r4, #17]
 80a2e40:	b128      	cbz	r0, 80a2e4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2e42:	4629      	mov	r1, r5
 80a2e44:	7c20      	ldrb	r0, [r4, #16]
 80a2e46:	f7ff f98d 	bl	80a2164 <HAL_USB_USART_Send_Data>
 80a2e4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2e4e:	bd38      	pop	{r3, r4, r5, pc}

080a2e50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2e50:	b510      	push	{r4, lr}
 80a2e52:	4604      	mov	r4, r0
 80a2e54:	2300      	movs	r3, #0
 80a2e56:	6063      	str	r3, [r4, #4]
 80a2e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2e5c:	60a3      	str	r3, [r4, #8]
 80a2e5e:	4b05      	ldr	r3, [pc, #20]	; (80a2e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2e60:	4608      	mov	r0, r1
 80a2e62:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2e64:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2e66:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2e68:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2e6a:	4611      	mov	r1, r2
 80a2e6c:	f7ff f952 	bl	80a2114 <HAL_USB_USART_Init>
}
 80a2e70:	4620      	mov	r0, r4
 80a2e72:	bd10      	pop	{r4, pc}
 80a2e74:	080a3e7c 	.word	0x080a3e7c

080a2e78 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2e78:	2200      	movs	r2, #0
 80a2e7a:	7c00      	ldrb	r0, [r0, #16]
 80a2e7c:	f7ff b952 	b.w	80a2124 <HAL_USB_USART_Begin>

080a2e80 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2e80:	7c00      	ldrb	r0, [r0, #16]
 80a2e82:	f7ff b97f 	b.w	80a2184 <HAL_USB_USART_Is_Enabled>

080a2e86 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a2e86:	f7ff bffb 	b.w	80a2e80 <_ZN9USBSerial9isEnabledEv>
	...

080a2e8c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2e8c:	b510      	push	{r4, lr}
 80a2e8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2e90:	2214      	movs	r2, #20
 80a2e92:	2100      	movs	r1, #0
 80a2e94:	f000 fddd 	bl	80a3a52 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2e98:	4b05      	ldr	r3, [pc, #20]	; (80a2eb0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2e9a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2e9c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2e9e:	4b05      	ldr	r3, [pc, #20]	; (80a2eb4 <_Z19acquireSerialBufferv+0x28>)
 80a2ea0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2ea2:	f240 1301 	movw	r3, #257	; 0x101
 80a2ea6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2ea8:	2381      	movs	r3, #129	; 0x81
 80a2eaa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2eac:	bd10      	pop	{r4, pc}
 80a2eae:	bf00      	nop
 80a2eb0:	200003a1 	.word	0x200003a1
 80a2eb4:	20000320 	.word	0x20000320

080a2eb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2eb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2eba:	4d0e      	ldr	r5, [pc, #56]	; (80a2ef4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2ebc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2ebe:	a801      	add	r0, sp, #4
 80a2ec0:	f7ff ffe4 	bl	80a2e8c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2ec4:	6829      	ldr	r1, [r5, #0]
 80a2ec6:	f011 0401 	ands.w	r4, r1, #1
 80a2eca:	d110      	bne.n	80a2eee <_Z16_fetch_usbserialv+0x36>
 80a2ecc:	4628      	mov	r0, r5
 80a2ece:	f7fd f8e8 	bl	80a00a2 <__cxa_guard_acquire>
 80a2ed2:	b160      	cbz	r0, 80a2eee <_Z16_fetch_usbserialv+0x36>
 80a2ed4:	aa01      	add	r2, sp, #4
 80a2ed6:	4621      	mov	r1, r4
 80a2ed8:	4807      	ldr	r0, [pc, #28]	; (80a2ef8 <_Z16_fetch_usbserialv+0x40>)
 80a2eda:	f7ff ffb9 	bl	80a2e50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2ede:	4628      	mov	r0, r5
 80a2ee0:	f7fd f8e4 	bl	80a00ac <__cxa_guard_release>
 80a2ee4:	4a05      	ldr	r2, [pc, #20]	; (80a2efc <_Z16_fetch_usbserialv+0x44>)
 80a2ee6:	4906      	ldr	r1, [pc, #24]	; (80a2f00 <_Z16_fetch_usbserialv+0x48>)
 80a2ee8:	4803      	ldr	r0, [pc, #12]	; (80a2ef8 <_Z16_fetch_usbserialv+0x40>)
 80a2eea:	f000 f9eb 	bl	80a32c4 <__aeabi_atexit>
	return _usbserial;
}
 80a2eee:	4802      	ldr	r0, [pc, #8]	; (80a2ef8 <_Z16_fetch_usbserialv+0x40>)
 80a2ef0:	b007      	add	sp, #28
 80a2ef2:	bd30      	pop	{r4, r5, pc}
 80a2ef4:	2000031c 	.word	0x2000031c
 80a2ef8:	200004a4 	.word	0x200004a4
 80a2efc:	20000090 	.word	0x20000090
 80a2f00:	080a2dd1 	.word	0x080a2dd1

080a2f04 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2f04:	b510      	push	{r4, lr}
 80a2f06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2f08:	2214      	movs	r2, #20
 80a2f0a:	2100      	movs	r1, #0
 80a2f0c:	f000 fda1 	bl	80a3a52 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2f10:	4b05      	ldr	r3, [pc, #20]	; (80a2f28 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2f12:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2f14:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2f16:	4b05      	ldr	r3, [pc, #20]	; (80a2f2c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2f18:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2f1a:	f240 1301 	movw	r3, #257	; 0x101
 80a2f1e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2f20:	2381      	movs	r3, #129	; 0x81
 80a2f22:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2f24:	bd10      	pop	{r4, pc}
 80a2f26:	bf00      	nop
 80a2f28:	20000554 	.word	0x20000554
 80a2f2c:	200004bc 	.word	0x200004bc

080a2f30 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2f30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2f32:	4c0e      	ldr	r4, [pc, #56]	; (80a2f6c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2f34:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2f36:	a801      	add	r0, sp, #4
 80a2f38:	f7ff ffe4 	bl	80a2f04 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2f3c:	6823      	ldr	r3, [r4, #0]
 80a2f3e:	07db      	lsls	r3, r3, #31
 80a2f40:	d410      	bmi.n	80a2f64 <_Z17_fetch_usbserial1v+0x34>
 80a2f42:	4620      	mov	r0, r4
 80a2f44:	f7fd f8ad 	bl	80a00a2 <__cxa_guard_acquire>
 80a2f48:	b160      	cbz	r0, 80a2f64 <_Z17_fetch_usbserial1v+0x34>
 80a2f4a:	aa01      	add	r2, sp, #4
 80a2f4c:	2101      	movs	r1, #1
 80a2f4e:	4808      	ldr	r0, [pc, #32]	; (80a2f70 <_Z17_fetch_usbserial1v+0x40>)
 80a2f50:	f7ff ff7e 	bl	80a2e50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2f54:	4620      	mov	r0, r4
 80a2f56:	f7fd f8a9 	bl	80a00ac <__cxa_guard_release>
 80a2f5a:	4a06      	ldr	r2, [pc, #24]	; (80a2f74 <_Z17_fetch_usbserial1v+0x44>)
 80a2f5c:	4906      	ldr	r1, [pc, #24]	; (80a2f78 <_Z17_fetch_usbserial1v+0x48>)
 80a2f5e:	4804      	ldr	r0, [pc, #16]	; (80a2f70 <_Z17_fetch_usbserial1v+0x40>)
 80a2f60:	f000 f9b0 	bl	80a32c4 <__aeabi_atexit>
  return _usbserial1;
}
 80a2f64:	4802      	ldr	r0, [pc, #8]	; (80a2f70 <_Z17_fetch_usbserial1v+0x40>)
 80a2f66:	b006      	add	sp, #24
 80a2f68:	bd10      	pop	{r4, pc}
 80a2f6a:	bf00      	nop
 80a2f6c:	200004b8 	.word	0x200004b8
 80a2f70:	20000540 	.word	0x20000540
 80a2f74:	20000090 	.word	0x20000090
 80a2f78:	080a2dd1 	.word	0x080a2dd1

080a2f7c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2f7c:	2200      	movs	r2, #0
 80a2f7e:	4611      	mov	r1, r2
 80a2f80:	6840      	ldr	r0, [r0, #4]
 80a2f82:	f7ff b963 	b.w	80a224c <network_ready>

080a2f86 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2f88:	4616      	mov	r6, r2
 80a2f8a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2f8c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2f8e:	460f      	mov	r7, r1
 80a2f90:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2f92:	2100      	movs	r1, #0
 80a2f94:	a803      	add	r0, sp, #12
 80a2f96:	f000 fd5c 	bl	80a3a52 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2f9a:	4630      	mov	r0, r6
 80a2f9c:	f000 fd8a 	bl	80a3ab4 <strlen>
 80a2fa0:	2500      	movs	r5, #0
 80a2fa2:	9500      	str	r5, [sp, #0]
 80a2fa4:	b281      	uxth	r1, r0
 80a2fa6:	687b      	ldr	r3, [r7, #4]
 80a2fa8:	aa03      	add	r2, sp, #12
 80a2faa:	4630      	mov	r0, r6
 80a2fac:	f7ff f8f2 	bl	80a2194 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2fb0:	b120      	cbz	r0, 80a2fbc <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2fb2:	4629      	mov	r1, r5
 80a2fb4:	4620      	mov	r0, r4
 80a2fb6:	f7ff fa4d 	bl	80a2454 <_ZN9IPAddressC1Em>
 80a2fba:	e003      	b.n	80a2fc4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2fbc:	a903      	add	r1, sp, #12
 80a2fbe:	4620      	mov	r0, r4
 80a2fc0:	f7ff fa36 	bl	80a2430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2fc4:	4620      	mov	r0, r4
 80a2fc6:	b009      	add	sp, #36	; 0x24
 80a2fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2fca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2fca:	2200      	movs	r2, #0
 80a2fcc:	4611      	mov	r1, r2
 80a2fce:	6840      	ldr	r0, [r0, #4]
 80a2fd0:	f7ff b95c 	b.w	80a228c <network_listening>

080a2fd4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2fd4:	2200      	movs	r2, #0
 80a2fd6:	4611      	mov	r1, r2
 80a2fd8:	6840      	ldr	r0, [r0, #4]
 80a2fda:	f7ff b967 	b.w	80a22ac <network_get_listen_timeout>

080a2fde <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2fde:	2200      	movs	r2, #0
 80a2fe0:	6840      	ldr	r0, [r0, #4]
 80a2fe2:	f7ff b95b 	b.w	80a229c <network_set_listen_timeout>

080a2fe6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2fe6:	2200      	movs	r2, #0
 80a2fe8:	f081 0101 	eor.w	r1, r1, #1
 80a2fec:	6840      	ldr	r0, [r0, #4]
 80a2fee:	f7ff b945 	b.w	80a227c <network_listen>

080a2ff2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2ff2:	2300      	movs	r3, #0
 80a2ff4:	461a      	mov	r2, r3
 80a2ff6:	4619      	mov	r1, r3
 80a2ff8:	6840      	ldr	r0, [r0, #4]
 80a2ffa:	f7ff b937 	b.w	80a226c <network_off>

080a2ffe <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2ffe:	2300      	movs	r3, #0
 80a3000:	461a      	mov	r2, r3
 80a3002:	4619      	mov	r1, r3
 80a3004:	6840      	ldr	r0, [r0, #4]
 80a3006:	f7ff b929 	b.w	80a225c <network_on>

080a300a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a300a:	2200      	movs	r2, #0
 80a300c:	4611      	mov	r1, r2
 80a300e:	6840      	ldr	r0, [r0, #4]
 80a3010:	f7ff b90c 	b.w	80a222c <network_connecting>

080a3014 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3014:	2200      	movs	r2, #0
 80a3016:	2102      	movs	r1, #2
 80a3018:	6840      	ldr	r0, [r0, #4]
 80a301a:	f7ff b90f 	b.w	80a223c <network_disconnect>

080a301e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a301e:	2300      	movs	r3, #0
 80a3020:	461a      	mov	r2, r3
 80a3022:	6840      	ldr	r0, [r0, #4]
 80a3024:	f7ff b8fa 	b.w	80a221c <network_connect>

080a3028 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3028:	4b02      	ldr	r3, [pc, #8]	; (80a3034 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a302a:	2204      	movs	r2, #4
 80a302c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a302e:	4a02      	ldr	r2, [pc, #8]	; (80a3038 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3030:	601a      	str	r2, [r3, #0]
 80a3032:	4770      	bx	lr
 80a3034:	20000658 	.word	0x20000658
 80a3038:	080a3eac 	.word	0x080a3eac

080a303c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a303c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a303e:	4b14      	ldr	r3, [pc, #80]	; (80a3090 <serialEventRun+0x54>)
 80a3040:	b133      	cbz	r3, 80a3050 <serialEventRun+0x14>
 80a3042:	f7ff ff39 	bl	80a2eb8 <_Z16_fetch_usbserialv>
 80a3046:	6803      	ldr	r3, [r0, #0]
 80a3048:	691b      	ldr	r3, [r3, #16]
 80a304a:	4798      	blx	r3
 80a304c:	2800      	cmp	r0, #0
 80a304e:	dc16      	bgt.n	80a307e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3050:	4b10      	ldr	r3, [pc, #64]	; (80a3094 <serialEventRun+0x58>)
 80a3052:	b133      	cbz	r3, 80a3062 <serialEventRun+0x26>
 80a3054:	f7ff fe94 	bl	80a2d80 <_Z22__fetch_global_Serial1v>
 80a3058:	6803      	ldr	r3, [r0, #0]
 80a305a:	691b      	ldr	r3, [r3, #16]
 80a305c:	4798      	blx	r3
 80a305e:	2800      	cmp	r0, #0
 80a3060:	dc10      	bgt.n	80a3084 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3062:	4b0d      	ldr	r3, [pc, #52]	; (80a3098 <serialEventRun+0x5c>)
 80a3064:	b10b      	cbz	r3, 80a306a <serialEventRun+0x2e>
 80a3066:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a306a:	4b0c      	ldr	r3, [pc, #48]	; (80a309c <serialEventRun+0x60>)
 80a306c:	b17b      	cbz	r3, 80a308e <serialEventRun+0x52>
 80a306e:	f7ff ff5f 	bl	80a2f30 <_Z17_fetch_usbserial1v>
 80a3072:	6803      	ldr	r3, [r0, #0]
 80a3074:	691b      	ldr	r3, [r3, #16]
 80a3076:	4798      	blx	r3
 80a3078:	2800      	cmp	r0, #0
 80a307a:	dc06      	bgt.n	80a308a <serialEventRun+0x4e>
 80a307c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a307e:	f3af 8000 	nop.w
 80a3082:	e7e5      	b.n	80a3050 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3084:	f3af 8000 	nop.w
 80a3088:	e7eb      	b.n	80a3062 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a308a:	f3af 8000 	nop.w
 80a308e:	bd08      	pop	{r3, pc}
	...

080a30a0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a30a0:	b508      	push	{r3, lr}
	serialEventRun();
 80a30a2:	f7ff ffcb 	bl	80a303c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a30a6:	f7fe ff03 	bl	80a1eb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a30aa:	4b01      	ldr	r3, [pc, #4]	; (80a30b0 <_post_loop+0x10>)
 80a30ac:	6018      	str	r0, [r3, #0]
 80a30ae:	bd08      	pop	{r3, pc}
 80a30b0:	20000668 	.word	0x20000668

080a30b4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a30b4:	4802      	ldr	r0, [pc, #8]	; (80a30c0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a30b6:	4a03      	ldr	r2, [pc, #12]	; (80a30c4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a30b8:	4903      	ldr	r1, [pc, #12]	; (80a30c8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a30ba:	1a12      	subs	r2, r2, r0
 80a30bc:	f000 bcbe 	b.w	80a3a3c <memcpy>
 80a30c0:	40024000 	.word	0x40024000
 80a30c4:	40024004 	.word	0x40024004
 80a30c8:	080a3f80 	.word	0x080a3f80

080a30cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a30cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a30ce:	2300      	movs	r3, #0
 80a30d0:	9300      	str	r3, [sp, #0]
 80a30d2:	461a      	mov	r2, r3
 80a30d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a30d8:	f7ff f886 	bl	80a21e8 <system_ctrl_set_result>
}
 80a30dc:	b003      	add	sp, #12
 80a30de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a30e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a30e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a30e6:	8843      	ldrh	r3, [r0, #2]
 80a30e8:	2b0a      	cmp	r3, #10
 80a30ea:	d008      	beq.n	80a30fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a30ec:	2b50      	cmp	r3, #80	; 0x50
 80a30ee:	d109      	bne.n	80a3104 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a30f0:	4b09      	ldr	r3, [pc, #36]	; (80a3118 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a30f2:	681b      	ldr	r3, [r3, #0]
 80a30f4:	b13b      	cbz	r3, 80a3106 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a30f6:	b003      	add	sp, #12
 80a30f8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a30fc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a30fe:	f7ff ffe5 	bl	80a30cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3102:	e006      	b.n	80a3112 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3104:	2300      	movs	r3, #0
 80a3106:	9300      	str	r3, [sp, #0]
 80a3108:	461a      	mov	r2, r3
 80a310a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a310e:	f7ff f86b 	bl	80a21e8 <system_ctrl_set_result>
        break;
    }
}
 80a3112:	b003      	add	sp, #12
 80a3114:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3118:	20000660 	.word	0x20000660

080a311c <module_user_init_hook>:

void module_user_init_hook()
{
 80a311c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a311e:	4c10      	ldr	r4, [pc, #64]	; (80a3160 <module_user_init_hook+0x44>)
 80a3120:	4d10      	ldr	r5, [pc, #64]	; (80a3164 <module_user_init_hook+0x48>)
 80a3122:	6823      	ldr	r3, [r4, #0]
 80a3124:	42ab      	cmp	r3, r5
 80a3126:	4b10      	ldr	r3, [pc, #64]	; (80a3168 <module_user_init_hook+0x4c>)
 80a3128:	bf0c      	ite	eq
 80a312a:	2201      	moveq	r2, #1
 80a312c:	2200      	movne	r2, #0
 80a312e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3130:	d002      	beq.n	80a3138 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3132:	f7ff ffbf 	bl	80a30b4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3136:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3138:	f7fe fea2 	bl	80a1e80 <HAL_RNG_GetRandomNumber>
 80a313c:	4604      	mov	r4, r0
    srand(seed);
 80a313e:	f000 fc91 	bl	80a3a64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3142:	4b0a      	ldr	r3, [pc, #40]	; (80a316c <module_user_init_hook+0x50>)
 80a3144:	b113      	cbz	r3, 80a314c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3146:	4620      	mov	r0, r4
 80a3148:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a314c:	2100      	movs	r1, #0
 80a314e:	4807      	ldr	r0, [pc, #28]	; (80a316c <module_user_init_hook+0x50>)
 80a3150:	f7ff f854 	bl	80a21fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3158:	2100      	movs	r1, #0
 80a315a:	4805      	ldr	r0, [pc, #20]	; (80a3170 <module_user_init_hook+0x54>)
 80a315c:	f7ff b83a 	b.w	80a21d4 <system_ctrl_set_app_request_handler>
 80a3160:	40024000 	.word	0x40024000
 80a3164:	9a271c1e 	.word	0x9a271c1e
 80a3168:	20000664 	.word	0x20000664
 80a316c:	00000000 	.word	0x00000000
 80a3170:	080a30e5 	.word	0x080a30e5

080a3174 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3174:	b510      	push	{r4, lr}
 80a3176:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3178:	480f      	ldr	r0, [pc, #60]	; (80a31b8 <pinAvailable+0x44>)
 80a317a:	f7ff fb2f 	bl	80a27dc <_ZN8SPIClass9isEnabledEv>
 80a317e:	b128      	cbz	r0, 80a318c <pinAvailable+0x18>
 80a3180:	f1a4 030d 	sub.w	r3, r4, #13
 80a3184:	2b02      	cmp	r3, #2
 80a3186:	d801      	bhi.n	80a318c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3188:	2000      	movs	r0, #0
 80a318a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a318c:	f000 f840 	bl	80a3210 <_Z19__fetch_global_Wirev>
 80a3190:	f7ff f923 	bl	80a23da <_ZN7TwoWire9isEnabledEv>
 80a3194:	b108      	cbz	r0, 80a319a <pinAvailable+0x26>
 80a3196:	2c01      	cmp	r4, #1
 80a3198:	d9f6      	bls.n	80a3188 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a319a:	f7ff fdf1 	bl	80a2d80 <_Z22__fetch_global_Serial1v>
 80a319e:	f7ff fdeb 	bl	80a2d78 <_ZN11USARTSerial9isEnabledEv>
 80a31a2:	b118      	cbz	r0, 80a31ac <pinAvailable+0x38>
 80a31a4:	f1a4 0312 	sub.w	r3, r4, #18
 80a31a8:	2b01      	cmp	r3, #1
 80a31aa:	d9ed      	bls.n	80a3188 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a31ac:	2c17      	cmp	r4, #23
 80a31ae:	bf8c      	ite	hi
 80a31b0:	2000      	movhi	r0, #0
 80a31b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a31b4:	bd10      	pop	{r4, pc}
 80a31b6:	bf00      	nop
 80a31b8:	2000069c 	.word	0x2000069c

080a31bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a31bc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a31be:	b538      	push	{r3, r4, r5, lr}
 80a31c0:	4604      	mov	r4, r0
 80a31c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a31c4:	d80a      	bhi.n	80a31dc <pinMode+0x20>
 80a31c6:	29ff      	cmp	r1, #255	; 0xff
 80a31c8:	d008      	beq.n	80a31dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a31ca:	f7ff ffd3 	bl	80a3174 <pinAvailable>
 80a31ce:	b128      	cbz	r0, 80a31dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a31d0:	4629      	mov	r1, r5
 80a31d2:	4620      	mov	r0, r4
}
 80a31d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a31d8:	f7fe be7a 	b.w	80a1ed0 <HAL_Pin_Mode>
 80a31dc:	bd38      	pop	{r3, r4, r5, pc}

080a31de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a31de:	b538      	push	{r3, r4, r5, lr}
 80a31e0:	4604      	mov	r4, r0
 80a31e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a31e4:	f7fe fe7c 	bl	80a1ee0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a31e8:	28ff      	cmp	r0, #255	; 0xff
 80a31ea:	d010      	beq.n	80a320e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a31ec:	2806      	cmp	r0, #6
 80a31ee:	d804      	bhi.n	80a31fa <digitalWrite+0x1c>
 80a31f0:	234d      	movs	r3, #77	; 0x4d
 80a31f2:	fa23 f000 	lsr.w	r0, r3, r0
 80a31f6:	07c3      	lsls	r3, r0, #31
 80a31f8:	d409      	bmi.n	80a320e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a31fa:	4620      	mov	r0, r4
 80a31fc:	f7ff ffba 	bl	80a3174 <pinAvailable>
 80a3200:	b128      	cbz	r0, 80a320e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3202:	4629      	mov	r1, r5
 80a3204:	4620      	mov	r0, r4
}
 80a3206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a320a:	f7fe be71 	b.w	80a1ef0 <HAL_GPIO_Write>
 80a320e:	bd38      	pop	{r3, r4, r5, pc}

080a3210 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3210:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3212:	4d0b      	ldr	r5, [pc, #44]	; (80a3240 <_Z19__fetch_global_Wirev+0x30>)
 80a3214:	6829      	ldr	r1, [r5, #0]
 80a3216:	f011 0401 	ands.w	r4, r1, #1
 80a321a:	d10f      	bne.n	80a323c <_Z19__fetch_global_Wirev+0x2c>
 80a321c:	4628      	mov	r0, r5
 80a321e:	f7fc ff40 	bl	80a00a2 <__cxa_guard_acquire>
 80a3222:	b158      	cbz	r0, 80a323c <_Z19__fetch_global_Wirev+0x2c>
 80a3224:	4621      	mov	r1, r4
 80a3226:	4807      	ldr	r0, [pc, #28]	; (80a3244 <_Z19__fetch_global_Wirev+0x34>)
 80a3228:	f7ff f8a8 	bl	80a237c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a322c:	4628      	mov	r0, r5
 80a322e:	f7fc ff3d 	bl	80a00ac <__cxa_guard_release>
 80a3232:	4a05      	ldr	r2, [pc, #20]	; (80a3248 <_Z19__fetch_global_Wirev+0x38>)
 80a3234:	4905      	ldr	r1, [pc, #20]	; (80a324c <_Z19__fetch_global_Wirev+0x3c>)
 80a3236:	4803      	ldr	r0, [pc, #12]	; (80a3244 <_Z19__fetch_global_Wirev+0x34>)
 80a3238:	f000 f844 	bl	80a32c4 <__aeabi_atexit>
	return wire;
}
 80a323c:	4801      	ldr	r0, [pc, #4]	; (80a3244 <_Z19__fetch_global_Wirev+0x34>)
 80a323e:	bd38      	pop	{r3, r4, r5, pc}
 80a3240:	2000066c 	.word	0x2000066c
 80a3244:	20000670 	.word	0x20000670
 80a3248:	20000090 	.word	0x20000090
 80a324c:	080a2325 	.word	0x080a2325

080a3250 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3250:	b513      	push	{r0, r1, r4, lr}
 80a3252:	4c08      	ldr	r4, [pc, #32]	; (80a3274 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3254:	2300      	movs	r3, #0
 80a3256:	461a      	mov	r2, r3
 80a3258:	4619      	mov	r1, r3
 80a325a:	9300      	str	r3, [sp, #0]
 80a325c:	4620      	mov	r0, r4
 80a325e:	f7ff f90f 	bl	80a2480 <_ZN9IPAddressC1Ehhhh>
 80a3262:	4620      	mov	r0, r4
 80a3264:	4a04      	ldr	r2, [pc, #16]	; (80a3278 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3266:	4905      	ldr	r1, [pc, #20]	; (80a327c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3268:	b002      	add	sp, #8
 80a326a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a326e:	f000 b829 	b.w	80a32c4 <__aeabi_atexit>
 80a3272:	bf00      	nop
 80a3274:	20000684 	.word	0x20000684
 80a3278:	20000090 	.word	0x20000090
 80a327c:	080a00b3 	.word	0x080a00b3

080a3280 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3280:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3282:	4c0c      	ldr	r4, [pc, #48]	; (80a32b4 <_GLOBAL__sub_I_SPI+0x34>)
 80a3284:	4e0c      	ldr	r6, [pc, #48]	; (80a32b8 <_GLOBAL__sub_I_SPI+0x38>)
 80a3286:	4d0d      	ldr	r5, [pc, #52]	; (80a32bc <_GLOBAL__sub_I_SPI+0x3c>)
 80a3288:	2100      	movs	r1, #0
 80a328a:	4620      	mov	r0, r4
 80a328c:	f7ff fa26 	bl	80a26dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3290:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3292:	4c0b      	ldr	r4, [pc, #44]	; (80a32c0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3294:	4632      	mov	r2, r6
 80a3296:	4629      	mov	r1, r5
 80a3298:	f000 f814 	bl	80a32c4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a329c:	2101      	movs	r1, #1
 80a329e:	4620      	mov	r0, r4
 80a32a0:	f7ff fa1c 	bl	80a26dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a32a4:	4632      	mov	r2, r6
 80a32a6:	4629      	mov	r1, r5
 80a32a8:	4620      	mov	r0, r4
 80a32aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a32ae:	f000 b809 	b.w	80a32c4 <__aeabi_atexit>
 80a32b2:	bf00      	nop
 80a32b4:	2000069c 	.word	0x2000069c
 80a32b8:	20000090 	.word	0x20000090
 80a32bc:	080a26cd 	.word	0x080a26cd
 80a32c0:	200006ac 	.word	0x200006ac

080a32c4 <__aeabi_atexit>:
 80a32c4:	460b      	mov	r3, r1
 80a32c6:	4601      	mov	r1, r0
 80a32c8:	4618      	mov	r0, r3
 80a32ca:	f000 bba9 	b.w	80a3a20 <__cxa_atexit>

080a32ce <_ZdlPvj>:
 80a32ce:	f7fc bee6 	b.w	80a009e <_ZdlPv>
	...

080a32d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a32d4:	4b24      	ldr	r3, [pc, #144]	; (80a3368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a32d6:	681a      	ldr	r2, [r3, #0]
 80a32d8:	07d0      	lsls	r0, r2, #31
 80a32da:	bf5c      	itt	pl
 80a32dc:	2201      	movpl	r2, #1
 80a32de:	601a      	strpl	r2, [r3, #0]
 80a32e0:	4b22      	ldr	r3, [pc, #136]	; (80a336c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a32e2:	681a      	ldr	r2, [r3, #0]
 80a32e4:	07d1      	lsls	r1, r2, #31
 80a32e6:	bf5c      	itt	pl
 80a32e8:	2201      	movpl	r2, #1
 80a32ea:	601a      	strpl	r2, [r3, #0]
 80a32ec:	4b20      	ldr	r3, [pc, #128]	; (80a3370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a32ee:	681a      	ldr	r2, [r3, #0]
 80a32f0:	07d2      	lsls	r2, r2, #31
 80a32f2:	bf5c      	itt	pl
 80a32f4:	2201      	movpl	r2, #1
 80a32f6:	601a      	strpl	r2, [r3, #0]
 80a32f8:	4b1e      	ldr	r3, [pc, #120]	; (80a3374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a32fa:	681a      	ldr	r2, [r3, #0]
 80a32fc:	07d0      	lsls	r0, r2, #31
 80a32fe:	bf5c      	itt	pl
 80a3300:	2201      	movpl	r2, #1
 80a3302:	601a      	strpl	r2, [r3, #0]
 80a3304:	4b1c      	ldr	r3, [pc, #112]	; (80a3378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3306:	681a      	ldr	r2, [r3, #0]
 80a3308:	07d1      	lsls	r1, r2, #31
 80a330a:	bf5c      	itt	pl
 80a330c:	2201      	movpl	r2, #1
 80a330e:	601a      	strpl	r2, [r3, #0]
 80a3310:	4b1a      	ldr	r3, [pc, #104]	; (80a337c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3312:	681a      	ldr	r2, [r3, #0]
 80a3314:	07d2      	lsls	r2, r2, #31
 80a3316:	bf5c      	itt	pl
 80a3318:	2201      	movpl	r2, #1
 80a331a:	601a      	strpl	r2, [r3, #0]
 80a331c:	4b18      	ldr	r3, [pc, #96]	; (80a3380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a331e:	681a      	ldr	r2, [r3, #0]
 80a3320:	07d0      	lsls	r0, r2, #31
 80a3322:	bf5c      	itt	pl
 80a3324:	2201      	movpl	r2, #1
 80a3326:	601a      	strpl	r2, [r3, #0]
 80a3328:	4b16      	ldr	r3, [pc, #88]	; (80a3384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a332a:	681a      	ldr	r2, [r3, #0]
 80a332c:	07d1      	lsls	r1, r2, #31
 80a332e:	bf5c      	itt	pl
 80a3330:	2201      	movpl	r2, #1
 80a3332:	601a      	strpl	r2, [r3, #0]
 80a3334:	4b14      	ldr	r3, [pc, #80]	; (80a3388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3336:	681a      	ldr	r2, [r3, #0]
 80a3338:	07d2      	lsls	r2, r2, #31
 80a333a:	bf5c      	itt	pl
 80a333c:	2201      	movpl	r2, #1
 80a333e:	601a      	strpl	r2, [r3, #0]
 80a3340:	4b12      	ldr	r3, [pc, #72]	; (80a338c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3342:	681a      	ldr	r2, [r3, #0]
 80a3344:	07d0      	lsls	r0, r2, #31
 80a3346:	bf5c      	itt	pl
 80a3348:	2201      	movpl	r2, #1
 80a334a:	601a      	strpl	r2, [r3, #0]
 80a334c:	4b10      	ldr	r3, [pc, #64]	; (80a3390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a334e:	681a      	ldr	r2, [r3, #0]
 80a3350:	07d1      	lsls	r1, r2, #31
 80a3352:	bf5c      	itt	pl
 80a3354:	2201      	movpl	r2, #1
 80a3356:	601a      	strpl	r2, [r3, #0]
 80a3358:	4b0e      	ldr	r3, [pc, #56]	; (80a3394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a335a:	681a      	ldr	r2, [r3, #0]
 80a335c:	07d2      	lsls	r2, r2, #31
 80a335e:	bf5c      	itt	pl
 80a3360:	2201      	movpl	r2, #1
 80a3362:	601a      	strpl	r2, [r3, #0]
 80a3364:	4770      	bx	lr
 80a3366:	bf00      	nop
 80a3368:	200006e8 	.word	0x200006e8
 80a336c:	200006e4 	.word	0x200006e4
 80a3370:	200006e0 	.word	0x200006e0
 80a3374:	200006dc 	.word	0x200006dc
 80a3378:	200006d8 	.word	0x200006d8
 80a337c:	200006d4 	.word	0x200006d4
 80a3380:	200006d0 	.word	0x200006d0
 80a3384:	200006cc 	.word	0x200006cc
 80a3388:	200006c8 	.word	0x200006c8
 80a338c:	200006c4 	.word	0x200006c4
 80a3390:	200006c0 	.word	0x200006c0
 80a3394:	200006bc 	.word	0x200006bc

080a3398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3398:	4b18      	ldr	r3, [pc, #96]	; (80a33fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a339a:	681a      	ldr	r2, [r3, #0]
 80a339c:	07d1      	lsls	r1, r2, #31
 80a339e:	bf5c      	itt	pl
 80a33a0:	2201      	movpl	r2, #1
 80a33a2:	601a      	strpl	r2, [r3, #0]
 80a33a4:	4b16      	ldr	r3, [pc, #88]	; (80a3400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a33a6:	681a      	ldr	r2, [r3, #0]
 80a33a8:	07d2      	lsls	r2, r2, #31
 80a33aa:	bf5c      	itt	pl
 80a33ac:	2201      	movpl	r2, #1
 80a33ae:	601a      	strpl	r2, [r3, #0]
 80a33b0:	4b14      	ldr	r3, [pc, #80]	; (80a3404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a33b2:	681a      	ldr	r2, [r3, #0]
 80a33b4:	07d0      	lsls	r0, r2, #31
 80a33b6:	bf5c      	itt	pl
 80a33b8:	2201      	movpl	r2, #1
 80a33ba:	601a      	strpl	r2, [r3, #0]
 80a33bc:	4b12      	ldr	r3, [pc, #72]	; (80a3408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a33be:	681a      	ldr	r2, [r3, #0]
 80a33c0:	07d1      	lsls	r1, r2, #31
 80a33c2:	bf5c      	itt	pl
 80a33c4:	2201      	movpl	r2, #1
 80a33c6:	601a      	strpl	r2, [r3, #0]
 80a33c8:	4b10      	ldr	r3, [pc, #64]	; (80a340c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a33ca:	681a      	ldr	r2, [r3, #0]
 80a33cc:	07d2      	lsls	r2, r2, #31
 80a33ce:	bf5c      	itt	pl
 80a33d0:	2201      	movpl	r2, #1
 80a33d2:	601a      	strpl	r2, [r3, #0]
 80a33d4:	4b0e      	ldr	r3, [pc, #56]	; (80a3410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a33d6:	681a      	ldr	r2, [r3, #0]
 80a33d8:	07d0      	lsls	r0, r2, #31
 80a33da:	bf5c      	itt	pl
 80a33dc:	2201      	movpl	r2, #1
 80a33de:	601a      	strpl	r2, [r3, #0]
 80a33e0:	4b0c      	ldr	r3, [pc, #48]	; (80a3414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a33e2:	681a      	ldr	r2, [r3, #0]
 80a33e4:	07d1      	lsls	r1, r2, #31
 80a33e6:	bf5c      	itt	pl
 80a33e8:	2201      	movpl	r2, #1
 80a33ea:	601a      	strpl	r2, [r3, #0]
 80a33ec:	4b0a      	ldr	r3, [pc, #40]	; (80a3418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a33ee:	681a      	ldr	r2, [r3, #0]
 80a33f0:	07d2      	lsls	r2, r2, #31
 80a33f2:	bf5c      	itt	pl
 80a33f4:	2201      	movpl	r2, #1
 80a33f6:	601a      	strpl	r2, [r3, #0]
 80a33f8:	4770      	bx	lr
 80a33fa:	bf00      	nop
 80a33fc:	20000708 	.word	0x20000708
 80a3400:	20000704 	.word	0x20000704
 80a3404:	20000700 	.word	0x20000700
 80a3408:	200006fc 	.word	0x200006fc
 80a340c:	200006f8 	.word	0x200006f8
 80a3410:	200006f4 	.word	0x200006f4
 80a3414:	200006f0 	.word	0x200006f0
 80a3418:	200006ec 	.word	0x200006ec

080a341c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a341c:	4b18      	ldr	r3, [pc, #96]	; (80a3480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a341e:	681a      	ldr	r2, [r3, #0]
 80a3420:	07d1      	lsls	r1, r2, #31
 80a3422:	bf5c      	itt	pl
 80a3424:	2201      	movpl	r2, #1
 80a3426:	601a      	strpl	r2, [r3, #0]
 80a3428:	4b16      	ldr	r3, [pc, #88]	; (80a3484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a342a:	681a      	ldr	r2, [r3, #0]
 80a342c:	07d2      	lsls	r2, r2, #31
 80a342e:	bf5c      	itt	pl
 80a3430:	2201      	movpl	r2, #1
 80a3432:	601a      	strpl	r2, [r3, #0]
 80a3434:	4b14      	ldr	r3, [pc, #80]	; (80a3488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3436:	681a      	ldr	r2, [r3, #0]
 80a3438:	07d0      	lsls	r0, r2, #31
 80a343a:	bf5c      	itt	pl
 80a343c:	2201      	movpl	r2, #1
 80a343e:	601a      	strpl	r2, [r3, #0]
 80a3440:	4b12      	ldr	r3, [pc, #72]	; (80a348c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3442:	681a      	ldr	r2, [r3, #0]
 80a3444:	07d1      	lsls	r1, r2, #31
 80a3446:	bf5c      	itt	pl
 80a3448:	2201      	movpl	r2, #1
 80a344a:	601a      	strpl	r2, [r3, #0]
 80a344c:	4b10      	ldr	r3, [pc, #64]	; (80a3490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a344e:	681a      	ldr	r2, [r3, #0]
 80a3450:	07d2      	lsls	r2, r2, #31
 80a3452:	bf5c      	itt	pl
 80a3454:	2201      	movpl	r2, #1
 80a3456:	601a      	strpl	r2, [r3, #0]
 80a3458:	4b0e      	ldr	r3, [pc, #56]	; (80a3494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a345a:	681a      	ldr	r2, [r3, #0]
 80a345c:	07d0      	lsls	r0, r2, #31
 80a345e:	bf5c      	itt	pl
 80a3460:	2201      	movpl	r2, #1
 80a3462:	601a      	strpl	r2, [r3, #0]
 80a3464:	4b0c      	ldr	r3, [pc, #48]	; (80a3498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3466:	681a      	ldr	r2, [r3, #0]
 80a3468:	07d1      	lsls	r1, r2, #31
 80a346a:	bf5c      	itt	pl
 80a346c:	2201      	movpl	r2, #1
 80a346e:	601a      	strpl	r2, [r3, #0]
 80a3470:	4b0a      	ldr	r3, [pc, #40]	; (80a349c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3472:	681a      	ldr	r2, [r3, #0]
 80a3474:	07d2      	lsls	r2, r2, #31
 80a3476:	bf5c      	itt	pl
 80a3478:	2201      	movpl	r2, #1
 80a347a:	601a      	strpl	r2, [r3, #0]
 80a347c:	4770      	bx	lr
 80a347e:	bf00      	nop
 80a3480:	20000728 	.word	0x20000728
 80a3484:	20000724 	.word	0x20000724
 80a3488:	20000720 	.word	0x20000720
 80a348c:	2000071c 	.word	0x2000071c
 80a3490:	20000718 	.word	0x20000718
 80a3494:	20000714 	.word	0x20000714
 80a3498:	20000710 	.word	0x20000710
 80a349c:	2000070c 	.word	0x2000070c

080a34a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a34a0:	4b24      	ldr	r3, [pc, #144]	; (80a3534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a34a2:	681a      	ldr	r2, [r3, #0]
 80a34a4:	07d0      	lsls	r0, r2, #31
 80a34a6:	bf5c      	itt	pl
 80a34a8:	2201      	movpl	r2, #1
 80a34aa:	601a      	strpl	r2, [r3, #0]
 80a34ac:	4b22      	ldr	r3, [pc, #136]	; (80a3538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a34ae:	681a      	ldr	r2, [r3, #0]
 80a34b0:	07d1      	lsls	r1, r2, #31
 80a34b2:	bf5c      	itt	pl
 80a34b4:	2201      	movpl	r2, #1
 80a34b6:	601a      	strpl	r2, [r3, #0]
 80a34b8:	4b20      	ldr	r3, [pc, #128]	; (80a353c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a34ba:	681a      	ldr	r2, [r3, #0]
 80a34bc:	07d2      	lsls	r2, r2, #31
 80a34be:	bf5c      	itt	pl
 80a34c0:	2201      	movpl	r2, #1
 80a34c2:	601a      	strpl	r2, [r3, #0]
 80a34c4:	4b1e      	ldr	r3, [pc, #120]	; (80a3540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a34c6:	681a      	ldr	r2, [r3, #0]
 80a34c8:	07d0      	lsls	r0, r2, #31
 80a34ca:	bf5c      	itt	pl
 80a34cc:	2201      	movpl	r2, #1
 80a34ce:	601a      	strpl	r2, [r3, #0]
 80a34d0:	4b1c      	ldr	r3, [pc, #112]	; (80a3544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a34d2:	681a      	ldr	r2, [r3, #0]
 80a34d4:	07d1      	lsls	r1, r2, #31
 80a34d6:	bf5c      	itt	pl
 80a34d8:	2201      	movpl	r2, #1
 80a34da:	601a      	strpl	r2, [r3, #0]
 80a34dc:	4b1a      	ldr	r3, [pc, #104]	; (80a3548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a34de:	681a      	ldr	r2, [r3, #0]
 80a34e0:	07d2      	lsls	r2, r2, #31
 80a34e2:	bf5c      	itt	pl
 80a34e4:	2201      	movpl	r2, #1
 80a34e6:	601a      	strpl	r2, [r3, #0]
 80a34e8:	4b18      	ldr	r3, [pc, #96]	; (80a354c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a34ea:	681a      	ldr	r2, [r3, #0]
 80a34ec:	07d0      	lsls	r0, r2, #31
 80a34ee:	bf5c      	itt	pl
 80a34f0:	2201      	movpl	r2, #1
 80a34f2:	601a      	strpl	r2, [r3, #0]
 80a34f4:	4b16      	ldr	r3, [pc, #88]	; (80a3550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a34f6:	681a      	ldr	r2, [r3, #0]
 80a34f8:	07d1      	lsls	r1, r2, #31
 80a34fa:	bf5c      	itt	pl
 80a34fc:	2201      	movpl	r2, #1
 80a34fe:	601a      	strpl	r2, [r3, #0]
 80a3500:	4b14      	ldr	r3, [pc, #80]	; (80a3554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3502:	681a      	ldr	r2, [r3, #0]
 80a3504:	07d2      	lsls	r2, r2, #31
 80a3506:	bf5c      	itt	pl
 80a3508:	2201      	movpl	r2, #1
 80a350a:	601a      	strpl	r2, [r3, #0]
 80a350c:	4b12      	ldr	r3, [pc, #72]	; (80a3558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a350e:	681a      	ldr	r2, [r3, #0]
 80a3510:	07d0      	lsls	r0, r2, #31
 80a3512:	bf5c      	itt	pl
 80a3514:	2201      	movpl	r2, #1
 80a3516:	601a      	strpl	r2, [r3, #0]
 80a3518:	4b10      	ldr	r3, [pc, #64]	; (80a355c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a351a:	681a      	ldr	r2, [r3, #0]
 80a351c:	07d1      	lsls	r1, r2, #31
 80a351e:	bf5c      	itt	pl
 80a3520:	2201      	movpl	r2, #1
 80a3522:	601a      	strpl	r2, [r3, #0]
 80a3524:	4b0e      	ldr	r3, [pc, #56]	; (80a3560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3526:	681a      	ldr	r2, [r3, #0]
 80a3528:	07d2      	lsls	r2, r2, #31
 80a352a:	bf5c      	itt	pl
 80a352c:	2201      	movpl	r2, #1
 80a352e:	601a      	strpl	r2, [r3, #0]
 80a3530:	4770      	bx	lr
 80a3532:	bf00      	nop
 80a3534:	20000758 	.word	0x20000758
 80a3538:	20000754 	.word	0x20000754
 80a353c:	20000750 	.word	0x20000750
 80a3540:	2000074c 	.word	0x2000074c
 80a3544:	20000748 	.word	0x20000748
 80a3548:	20000744 	.word	0x20000744
 80a354c:	20000740 	.word	0x20000740
 80a3550:	2000073c 	.word	0x2000073c
 80a3554:	20000738 	.word	0x20000738
 80a3558:	20000734 	.word	0x20000734
 80a355c:	20000730 	.word	0x20000730
 80a3560:	2000072c 	.word	0x2000072c

080a3564 <__aeabi_frsub>:
 80a3564:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3568:	e002      	b.n	80a3570 <__addsf3>
 80a356a:	bf00      	nop

080a356c <__aeabi_fsub>:
 80a356c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3570 <__addsf3>:
 80a3570:	0042      	lsls	r2, r0, #1
 80a3572:	bf1f      	itttt	ne
 80a3574:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3578:	ea92 0f03 	teqne	r2, r3
 80a357c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3580:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3584:	d06a      	beq.n	80a365c <__addsf3+0xec>
 80a3586:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a358a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a358e:	bfc1      	itttt	gt
 80a3590:	18d2      	addgt	r2, r2, r3
 80a3592:	4041      	eorgt	r1, r0
 80a3594:	4048      	eorgt	r0, r1
 80a3596:	4041      	eorgt	r1, r0
 80a3598:	bfb8      	it	lt
 80a359a:	425b      	neglt	r3, r3
 80a359c:	2b19      	cmp	r3, #25
 80a359e:	bf88      	it	hi
 80a35a0:	4770      	bxhi	lr
 80a35a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a35a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a35aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a35ae:	bf18      	it	ne
 80a35b0:	4240      	negne	r0, r0
 80a35b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a35b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a35ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a35be:	bf18      	it	ne
 80a35c0:	4249      	negne	r1, r1
 80a35c2:	ea92 0f03 	teq	r2, r3
 80a35c6:	d03f      	beq.n	80a3648 <__addsf3+0xd8>
 80a35c8:	f1a2 0201 	sub.w	r2, r2, #1
 80a35cc:	fa41 fc03 	asr.w	ip, r1, r3
 80a35d0:	eb10 000c 	adds.w	r0, r0, ip
 80a35d4:	f1c3 0320 	rsb	r3, r3, #32
 80a35d8:	fa01 f103 	lsl.w	r1, r1, r3
 80a35dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a35e0:	d502      	bpl.n	80a35e8 <__addsf3+0x78>
 80a35e2:	4249      	negs	r1, r1
 80a35e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a35e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a35ec:	d313      	bcc.n	80a3616 <__addsf3+0xa6>
 80a35ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a35f2:	d306      	bcc.n	80a3602 <__addsf3+0x92>
 80a35f4:	0840      	lsrs	r0, r0, #1
 80a35f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a35fa:	f102 0201 	add.w	r2, r2, #1
 80a35fe:	2afe      	cmp	r2, #254	; 0xfe
 80a3600:	d251      	bcs.n	80a36a6 <__addsf3+0x136>
 80a3602:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a360a:	bf08      	it	eq
 80a360c:	f020 0001 	biceq.w	r0, r0, #1
 80a3610:	ea40 0003 	orr.w	r0, r0, r3
 80a3614:	4770      	bx	lr
 80a3616:	0049      	lsls	r1, r1, #1
 80a3618:	eb40 0000 	adc.w	r0, r0, r0
 80a361c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3620:	f1a2 0201 	sub.w	r2, r2, #1
 80a3624:	d1ed      	bne.n	80a3602 <__addsf3+0x92>
 80a3626:	fab0 fc80 	clz	ip, r0
 80a362a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a362e:	ebb2 020c 	subs.w	r2, r2, ip
 80a3632:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3636:	bfaa      	itet	ge
 80a3638:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a363c:	4252      	neglt	r2, r2
 80a363e:	4318      	orrge	r0, r3
 80a3640:	bfbc      	itt	lt
 80a3642:	40d0      	lsrlt	r0, r2
 80a3644:	4318      	orrlt	r0, r3
 80a3646:	4770      	bx	lr
 80a3648:	f092 0f00 	teq	r2, #0
 80a364c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3650:	bf06      	itte	eq
 80a3652:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3656:	3201      	addeq	r2, #1
 80a3658:	3b01      	subne	r3, #1
 80a365a:	e7b5      	b.n	80a35c8 <__addsf3+0x58>
 80a365c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3660:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3664:	bf18      	it	ne
 80a3666:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a366a:	d021      	beq.n	80a36b0 <__addsf3+0x140>
 80a366c:	ea92 0f03 	teq	r2, r3
 80a3670:	d004      	beq.n	80a367c <__addsf3+0x10c>
 80a3672:	f092 0f00 	teq	r2, #0
 80a3676:	bf08      	it	eq
 80a3678:	4608      	moveq	r0, r1
 80a367a:	4770      	bx	lr
 80a367c:	ea90 0f01 	teq	r0, r1
 80a3680:	bf1c      	itt	ne
 80a3682:	2000      	movne	r0, #0
 80a3684:	4770      	bxne	lr
 80a3686:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a368a:	d104      	bne.n	80a3696 <__addsf3+0x126>
 80a368c:	0040      	lsls	r0, r0, #1
 80a368e:	bf28      	it	cs
 80a3690:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3694:	4770      	bx	lr
 80a3696:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a369a:	bf3c      	itt	cc
 80a369c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a36a0:	4770      	bxcc	lr
 80a36a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a36a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a36aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a36ae:	4770      	bx	lr
 80a36b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a36b4:	bf16      	itet	ne
 80a36b6:	4608      	movne	r0, r1
 80a36b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a36bc:	4601      	movne	r1, r0
 80a36be:	0242      	lsls	r2, r0, #9
 80a36c0:	bf06      	itte	eq
 80a36c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a36c6:	ea90 0f01 	teqeq	r0, r1
 80a36ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a36ce:	4770      	bx	lr

080a36d0 <__aeabi_ui2f>:
 80a36d0:	f04f 0300 	mov.w	r3, #0
 80a36d4:	e004      	b.n	80a36e0 <__aeabi_i2f+0x8>
 80a36d6:	bf00      	nop

080a36d8 <__aeabi_i2f>:
 80a36d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a36dc:	bf48      	it	mi
 80a36de:	4240      	negmi	r0, r0
 80a36e0:	ea5f 0c00 	movs.w	ip, r0
 80a36e4:	bf08      	it	eq
 80a36e6:	4770      	bxeq	lr
 80a36e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a36ec:	4601      	mov	r1, r0
 80a36ee:	f04f 0000 	mov.w	r0, #0
 80a36f2:	e01c      	b.n	80a372e <__aeabi_l2f+0x2a>

080a36f4 <__aeabi_ul2f>:
 80a36f4:	ea50 0201 	orrs.w	r2, r0, r1
 80a36f8:	bf08      	it	eq
 80a36fa:	4770      	bxeq	lr
 80a36fc:	f04f 0300 	mov.w	r3, #0
 80a3700:	e00a      	b.n	80a3718 <__aeabi_l2f+0x14>
 80a3702:	bf00      	nop

080a3704 <__aeabi_l2f>:
 80a3704:	ea50 0201 	orrs.w	r2, r0, r1
 80a3708:	bf08      	it	eq
 80a370a:	4770      	bxeq	lr
 80a370c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3710:	d502      	bpl.n	80a3718 <__aeabi_l2f+0x14>
 80a3712:	4240      	negs	r0, r0
 80a3714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3718:	ea5f 0c01 	movs.w	ip, r1
 80a371c:	bf02      	ittt	eq
 80a371e:	4684      	moveq	ip, r0
 80a3720:	4601      	moveq	r1, r0
 80a3722:	2000      	moveq	r0, #0
 80a3724:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3728:	bf08      	it	eq
 80a372a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a372e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3732:	fabc f28c 	clz	r2, ip
 80a3736:	3a08      	subs	r2, #8
 80a3738:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a373c:	db10      	blt.n	80a3760 <__aeabi_l2f+0x5c>
 80a373e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3742:	4463      	add	r3, ip
 80a3744:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3748:	f1c2 0220 	rsb	r2, r2, #32
 80a374c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3750:	fa20 f202 	lsr.w	r2, r0, r2
 80a3754:	eb43 0002 	adc.w	r0, r3, r2
 80a3758:	bf08      	it	eq
 80a375a:	f020 0001 	biceq.w	r0, r0, #1
 80a375e:	4770      	bx	lr
 80a3760:	f102 0220 	add.w	r2, r2, #32
 80a3764:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3768:	f1c2 0220 	rsb	r2, r2, #32
 80a376c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3770:	fa21 f202 	lsr.w	r2, r1, r2
 80a3774:	eb43 0002 	adc.w	r0, r3, r2
 80a3778:	bf08      	it	eq
 80a377a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a377e:	4770      	bx	lr

080a3780 <__aeabi_fmul>:
 80a3780:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3784:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3788:	bf1e      	ittt	ne
 80a378a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a378e:	ea92 0f0c 	teqne	r2, ip
 80a3792:	ea93 0f0c 	teqne	r3, ip
 80a3796:	d06f      	beq.n	80a3878 <__aeabi_fmul+0xf8>
 80a3798:	441a      	add	r2, r3
 80a379a:	ea80 0c01 	eor.w	ip, r0, r1
 80a379e:	0240      	lsls	r0, r0, #9
 80a37a0:	bf18      	it	ne
 80a37a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a37a6:	d01e      	beq.n	80a37e6 <__aeabi_fmul+0x66>
 80a37a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a37ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a37b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a37b4:	fba0 3101 	umull	r3, r1, r0, r1
 80a37b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a37bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a37c0:	bf3e      	ittt	cc
 80a37c2:	0049      	lslcc	r1, r1, #1
 80a37c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a37c8:	005b      	lslcc	r3, r3, #1
 80a37ca:	ea40 0001 	orr.w	r0, r0, r1
 80a37ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a37d2:	2afd      	cmp	r2, #253	; 0xfd
 80a37d4:	d81d      	bhi.n	80a3812 <__aeabi_fmul+0x92>
 80a37d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a37da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a37de:	bf08      	it	eq
 80a37e0:	f020 0001 	biceq.w	r0, r0, #1
 80a37e4:	4770      	bx	lr
 80a37e6:	f090 0f00 	teq	r0, #0
 80a37ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a37ee:	bf08      	it	eq
 80a37f0:	0249      	lsleq	r1, r1, #9
 80a37f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a37f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a37fa:	3a7f      	subs	r2, #127	; 0x7f
 80a37fc:	bfc2      	ittt	gt
 80a37fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3802:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3806:	4770      	bxgt	lr
 80a3808:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a380c:	f04f 0300 	mov.w	r3, #0
 80a3810:	3a01      	subs	r2, #1
 80a3812:	dc5d      	bgt.n	80a38d0 <__aeabi_fmul+0x150>
 80a3814:	f112 0f19 	cmn.w	r2, #25
 80a3818:	bfdc      	itt	le
 80a381a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a381e:	4770      	bxle	lr
 80a3820:	f1c2 0200 	rsb	r2, r2, #0
 80a3824:	0041      	lsls	r1, r0, #1
 80a3826:	fa21 f102 	lsr.w	r1, r1, r2
 80a382a:	f1c2 0220 	rsb	r2, r2, #32
 80a382e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3832:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3836:	f140 0000 	adc.w	r0, r0, #0
 80a383a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a383e:	bf08      	it	eq
 80a3840:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3844:	4770      	bx	lr
 80a3846:	f092 0f00 	teq	r2, #0
 80a384a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a384e:	bf02      	ittt	eq
 80a3850:	0040      	lsleq	r0, r0, #1
 80a3852:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3856:	3a01      	subeq	r2, #1
 80a3858:	d0f9      	beq.n	80a384e <__aeabi_fmul+0xce>
 80a385a:	ea40 000c 	orr.w	r0, r0, ip
 80a385e:	f093 0f00 	teq	r3, #0
 80a3862:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3866:	bf02      	ittt	eq
 80a3868:	0049      	lsleq	r1, r1, #1
 80a386a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a386e:	3b01      	subeq	r3, #1
 80a3870:	d0f9      	beq.n	80a3866 <__aeabi_fmul+0xe6>
 80a3872:	ea41 010c 	orr.w	r1, r1, ip
 80a3876:	e78f      	b.n	80a3798 <__aeabi_fmul+0x18>
 80a3878:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a387c:	ea92 0f0c 	teq	r2, ip
 80a3880:	bf18      	it	ne
 80a3882:	ea93 0f0c 	teqne	r3, ip
 80a3886:	d00a      	beq.n	80a389e <__aeabi_fmul+0x11e>
 80a3888:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a388c:	bf18      	it	ne
 80a388e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3892:	d1d8      	bne.n	80a3846 <__aeabi_fmul+0xc6>
 80a3894:	ea80 0001 	eor.w	r0, r0, r1
 80a3898:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a389c:	4770      	bx	lr
 80a389e:	f090 0f00 	teq	r0, #0
 80a38a2:	bf17      	itett	ne
 80a38a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a38a8:	4608      	moveq	r0, r1
 80a38aa:	f091 0f00 	teqne	r1, #0
 80a38ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a38b2:	d014      	beq.n	80a38de <__aeabi_fmul+0x15e>
 80a38b4:	ea92 0f0c 	teq	r2, ip
 80a38b8:	d101      	bne.n	80a38be <__aeabi_fmul+0x13e>
 80a38ba:	0242      	lsls	r2, r0, #9
 80a38bc:	d10f      	bne.n	80a38de <__aeabi_fmul+0x15e>
 80a38be:	ea93 0f0c 	teq	r3, ip
 80a38c2:	d103      	bne.n	80a38cc <__aeabi_fmul+0x14c>
 80a38c4:	024b      	lsls	r3, r1, #9
 80a38c6:	bf18      	it	ne
 80a38c8:	4608      	movne	r0, r1
 80a38ca:	d108      	bne.n	80a38de <__aeabi_fmul+0x15e>
 80a38cc:	ea80 0001 	eor.w	r0, r0, r1
 80a38d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a38d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a38d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a38dc:	4770      	bx	lr
 80a38de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a38e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a38e6:	4770      	bx	lr

080a38e8 <__aeabi_fdiv>:
 80a38e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a38ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a38f0:	bf1e      	ittt	ne
 80a38f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a38f6:	ea92 0f0c 	teqne	r2, ip
 80a38fa:	ea93 0f0c 	teqne	r3, ip
 80a38fe:	d069      	beq.n	80a39d4 <__aeabi_fdiv+0xec>
 80a3900:	eba2 0203 	sub.w	r2, r2, r3
 80a3904:	ea80 0c01 	eor.w	ip, r0, r1
 80a3908:	0249      	lsls	r1, r1, #9
 80a390a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a390e:	d037      	beq.n	80a3980 <__aeabi_fdiv+0x98>
 80a3910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3914:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3918:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a391c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3920:	428b      	cmp	r3, r1
 80a3922:	bf38      	it	cc
 80a3924:	005b      	lslcc	r3, r3, #1
 80a3926:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a392a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a392e:	428b      	cmp	r3, r1
 80a3930:	bf24      	itt	cs
 80a3932:	1a5b      	subcs	r3, r3, r1
 80a3934:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3938:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a393c:	bf24      	itt	cs
 80a393e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3942:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3946:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a394a:	bf24      	itt	cs
 80a394c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3954:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3958:	bf24      	itt	cs
 80a395a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a395e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3962:	011b      	lsls	r3, r3, #4
 80a3964:	bf18      	it	ne
 80a3966:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a396a:	d1e0      	bne.n	80a392e <__aeabi_fdiv+0x46>
 80a396c:	2afd      	cmp	r2, #253	; 0xfd
 80a396e:	f63f af50 	bhi.w	80a3812 <__aeabi_fmul+0x92>
 80a3972:	428b      	cmp	r3, r1
 80a3974:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3978:	bf08      	it	eq
 80a397a:	f020 0001 	biceq.w	r0, r0, #1
 80a397e:	4770      	bx	lr
 80a3980:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3984:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3988:	327f      	adds	r2, #127	; 0x7f
 80a398a:	bfc2      	ittt	gt
 80a398c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3990:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3994:	4770      	bxgt	lr
 80a3996:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a399a:	f04f 0300 	mov.w	r3, #0
 80a399e:	3a01      	subs	r2, #1
 80a39a0:	e737      	b.n	80a3812 <__aeabi_fmul+0x92>
 80a39a2:	f092 0f00 	teq	r2, #0
 80a39a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a39aa:	bf02      	ittt	eq
 80a39ac:	0040      	lsleq	r0, r0, #1
 80a39ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a39b2:	3a01      	subeq	r2, #1
 80a39b4:	d0f9      	beq.n	80a39aa <__aeabi_fdiv+0xc2>
 80a39b6:	ea40 000c 	orr.w	r0, r0, ip
 80a39ba:	f093 0f00 	teq	r3, #0
 80a39be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a39c2:	bf02      	ittt	eq
 80a39c4:	0049      	lsleq	r1, r1, #1
 80a39c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a39ca:	3b01      	subeq	r3, #1
 80a39cc:	d0f9      	beq.n	80a39c2 <__aeabi_fdiv+0xda>
 80a39ce:	ea41 010c 	orr.w	r1, r1, ip
 80a39d2:	e795      	b.n	80a3900 <__aeabi_fdiv+0x18>
 80a39d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a39d8:	ea92 0f0c 	teq	r2, ip
 80a39dc:	d108      	bne.n	80a39f0 <__aeabi_fdiv+0x108>
 80a39de:	0242      	lsls	r2, r0, #9
 80a39e0:	f47f af7d 	bne.w	80a38de <__aeabi_fmul+0x15e>
 80a39e4:	ea93 0f0c 	teq	r3, ip
 80a39e8:	f47f af70 	bne.w	80a38cc <__aeabi_fmul+0x14c>
 80a39ec:	4608      	mov	r0, r1
 80a39ee:	e776      	b.n	80a38de <__aeabi_fmul+0x15e>
 80a39f0:	ea93 0f0c 	teq	r3, ip
 80a39f4:	d104      	bne.n	80a3a00 <__aeabi_fdiv+0x118>
 80a39f6:	024b      	lsls	r3, r1, #9
 80a39f8:	f43f af4c 	beq.w	80a3894 <__aeabi_fmul+0x114>
 80a39fc:	4608      	mov	r0, r1
 80a39fe:	e76e      	b.n	80a38de <__aeabi_fmul+0x15e>
 80a3a00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3a04:	bf18      	it	ne
 80a3a06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3a0a:	d1ca      	bne.n	80a39a2 <__aeabi_fdiv+0xba>
 80a3a0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3a10:	f47f af5c 	bne.w	80a38cc <__aeabi_fmul+0x14c>
 80a3a14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3a18:	f47f af3c 	bne.w	80a3894 <__aeabi_fmul+0x114>
 80a3a1c:	e75f      	b.n	80a38de <__aeabi_fmul+0x15e>
 80a3a1e:	bf00      	nop

080a3a20 <__cxa_atexit>:
 80a3a20:	b510      	push	{r4, lr}
 80a3a22:	4c05      	ldr	r4, [pc, #20]	; (80a3a38 <__cxa_atexit+0x18>)
 80a3a24:	4613      	mov	r3, r2
 80a3a26:	b12c      	cbz	r4, 80a3a34 <__cxa_atexit+0x14>
 80a3a28:	460a      	mov	r2, r1
 80a3a2a:	4601      	mov	r1, r0
 80a3a2c:	2002      	movs	r0, #2
 80a3a2e:	f3af 8000 	nop.w
 80a3a32:	bd10      	pop	{r4, pc}
 80a3a34:	4620      	mov	r0, r4
 80a3a36:	bd10      	pop	{r4, pc}
 80a3a38:	00000000 	.word	0x00000000

080a3a3c <memcpy>:
 80a3a3c:	b510      	push	{r4, lr}
 80a3a3e:	1e43      	subs	r3, r0, #1
 80a3a40:	440a      	add	r2, r1
 80a3a42:	4291      	cmp	r1, r2
 80a3a44:	d004      	beq.n	80a3a50 <memcpy+0x14>
 80a3a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3a4e:	e7f8      	b.n	80a3a42 <memcpy+0x6>
 80a3a50:	bd10      	pop	{r4, pc}

080a3a52 <memset>:
 80a3a52:	4603      	mov	r3, r0
 80a3a54:	4402      	add	r2, r0
 80a3a56:	4293      	cmp	r3, r2
 80a3a58:	d002      	beq.n	80a3a60 <memset+0xe>
 80a3a5a:	f803 1b01 	strb.w	r1, [r3], #1
 80a3a5e:	e7fa      	b.n	80a3a56 <memset+0x4>
 80a3a60:	4770      	bx	lr
	...

080a3a64 <srand>:
 80a3a64:	b538      	push	{r3, r4, r5, lr}
 80a3a66:	4b12      	ldr	r3, [pc, #72]	; (80a3ab0 <srand+0x4c>)
 80a3a68:	4605      	mov	r5, r0
 80a3a6a:	681c      	ldr	r4, [r3, #0]
 80a3a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3a6e:	b9d3      	cbnz	r3, 80a3aa6 <srand+0x42>
 80a3a70:	2018      	movs	r0, #24
 80a3a72:	f7fe fc33 	bl	80a22dc <malloc>
 80a3a76:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3a7a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3a7c:	8003      	strh	r3, [r0, #0]
 80a3a7e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3a82:	8043      	strh	r3, [r0, #2]
 80a3a84:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3a88:	8083      	strh	r3, [r0, #4]
 80a3a8a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3a8e:	80c3      	strh	r3, [r0, #6]
 80a3a90:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3a94:	8103      	strh	r3, [r0, #8]
 80a3a96:	2305      	movs	r3, #5
 80a3a98:	8143      	strh	r3, [r0, #10]
 80a3a9a:	230b      	movs	r3, #11
 80a3a9c:	8183      	strh	r3, [r0, #12]
 80a3a9e:	2201      	movs	r2, #1
 80a3aa0:	2300      	movs	r3, #0
 80a3aa2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3aa8:	2200      	movs	r2, #0
 80a3aaa:	611d      	str	r5, [r3, #16]
 80a3aac:	615a      	str	r2, [r3, #20]
 80a3aae:	bd38      	pop	{r3, r4, r5, pc}
 80a3ab0:	2000008c 	.word	0x2000008c

080a3ab4 <strlen>:
 80a3ab4:	4603      	mov	r3, r0
 80a3ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3aba:	2a00      	cmp	r2, #0
 80a3abc:	d1fb      	bne.n	80a3ab6 <strlen+0x2>
 80a3abe:	1a18      	subs	r0, r3, r0
 80a3ac0:	3801      	subs	r0, #1
 80a3ac2:	4770      	bx	lr

080a3ac4 <dynalib_user>:
 80a3ac4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3ad4:	0000 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
 80a3ae4:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80a3af4:	4d53 4439 3153 002e 6f44 6275 656c 632d     SM9DS1..Double-c
 80a3b04:	6568 6b63 7720 7269 6e69 2e67 4400 6665     heck wiring..Def
 80a3b14:	7561 746c 7320 7465 6974 676e 2073 6e69     ault settings in
 80a3b24:	7420 6968 2073 6b73 7465 6863 7720 6c69      this sketch wil
 80a3b34:	206c 6f77 6b72 6620 726f 6120 206e 756f     l work for an ou
 80a3b44:	2074 666f 7420 6568 6220 786f 4c20 4d53     t of the box LSM
 80a3b54:	4439 3153 4220 6572 6b61 756f 2c74 6220     9DS1 Breakout, b
 80a3b64:	7475 6d20 7961 6e20 6565 2064 6f74 6220     ut may need to b
 80a3b74:	2065 6f6d 6964 6966 6465 6920 2066 6874     e modified if th
 80a3b84:	2065 6f62 7261 2064 756a 706d 7265 2073     e board jumpers 
 80a3b94:	7261 2e65 4100 203a 2c00 0020 6720 5000     are..A: ., . g.P
 80a3ba4:	7469 6863 202c 6f52 6c6c 203a 4800 6165     itch, Roll: .Hea
 80a3bb4:	6964 676e 203a 6300 6c61 6269 6172 6974     ding: .calibrati
 80a3bc4:	676e 7320 6e65 6f73 2e72 2e2e 6400 6e6f     ng sensor....don
 80a3bd4:	0065 6553 7574 0070 5148 6f52 7475 7265     e.Setup.HQRouter
 80a3be4:	505f 4255 494c 4853 6200 656c 6361 0068     _PUBLISH.bleach.
 80a3bf4:	7270 736f 6570 6972 7974 6500 646e 6e61     prosperity.endan
 80a3c04:	6567 6572 0064 3a78 0020 5920 003a 5a20     gered.x: . Y:. Z
 80a3c14:	003a 6120 3a76 0020                         :. av: .

080a3c1c <CSWTCH.57>:
 80a3c1c:	0020 0000 0040 0000 0060 0000                ...@...`...

080a3c28 <CSWTCH.215>:
 80a3c28:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3c38:	0050 0000                                   P...

080a3c3c <_ZTV7TwoWire>:
	...
 80a3c44:	2325 080a 236f 080a 2347 080a 2327 080a     %#..o#..G#..'#..
 80a3c54:	234f 080a 2357 080a 235f 080a 2367 080a     O#..W#.._#..g#..

080a3c64 <_ZTV9IPAddress>:
	...
 80a3c6c:	23e3 080a 00b3 080a 00d5 080a 6162 6475     .#..........baud
 80a3c7c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3c8c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3c9c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3cac:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3cbc:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3ccc:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3cdc:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3cec:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3cfc:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a3d0c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a3d1c:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
 80a3d2c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 80a3d3c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 80a3d4c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

080a3d5c <_ZTVN5spark12NetworkClassE>:
	...
 80a3d64:	24c1 080a 24cb 080a 24d5 080a 24df 080a     .$...$...$...$..
 80a3d74:	24e9 080a 24f5 080a 2501 080a 250d 080a     .$...$...%...%..
 80a3d84:	2515 080a 251f 080a 2529 080a               .%...%..)%..

080a3d90 <_ZTV8SPIClass>:
	...
 80a3d98:	26cd 080a 26cf 080a                         .&...&..

080a3da0 <_ZL14clock_divisors>:
 80a3da0:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a3db0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3dc0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3dd0:	0000 0000                                   ....

080a3dd4 <_ZTV3UDP>:
	...
 80a3ddc:	00b5 080a 00e3 080a 28e3 080a 2a03 080a     .........(...*..
 80a3dec:	28db 080a 28f9 080a 2917 080a 2931 080a     .(...(...)..1)..
 80a3dfc:	2953 080a 299d 080a 29bf 080a 2b55 080a     S)...)...)..U+..
 80a3e0c:	2a69 080a 28c5 080a 2c65 080a 2ad1 080a     i*...(..e,...*..
 80a3e1c:	2b8d 080a 2c93 080a 2a2d 080a 28d1 080a     .+...,..-*...(..
 80a3e2c:	2b35 080a 28d7 080a 2933 080a fff0 ffff     5+...(..3)......
 80a3e3c:	0000 0000 294b 080a                         ....K)..

080a3e44 <_ZTV11USARTSerial>:
	...
 80a3e4c:	2ccb 080a 2d1b 080a 2d29 080a 25a5 080a     .,...-..)-...%..
 80a3e5c:	2cdf 080a 2d01 080a 2ced 080a 2d15 080a     .,...-...,...-..
 80a3e6c:	2ccd 080a 2cd1 080a                         .,...,..

080a3e74 <_ZTV9USBSerial>:
	...
 80a3e7c:	2dd1 080a 2e21 080a 2e2f 080a 25a5 080a     .-..!.../....%..
 80a3e8c:	2e0d 080a 2dd3 080a 2de9 080a 2e1b 080a     .....-...-......
 80a3e9c:	2dff 080a 2dcd 080a                         .-...-..

080a3ea4 <_ZTVN5spark9WiFiClassE>:
	...
 80a3eac:	301f 080a 3015 080a 300b 080a 2f7d 080a     .0...0...0..}/..
 80a3ebc:	2fff 080a 2ff3 080a 2fe7 080a 2fdf 080a     ./.../.../.../..
 80a3ecc:	2fd5 080a 2fcb 080a 2f87 080a               ./.../.../..

080a3ed8 <__sf_fake_stdin>:
	...

080a3ef8 <__sf_fake_stdout>:
	...

080a3f18 <__sf_fake_stderr>:
	...
 80a3f38:	0043                                        C.

080a3f3a <link_const_variable_data_end>:
	...

080a3f3c <link_constructors_location>:
 80a3f3c:	080a04b1 	.word	0x080a04b1
 80a3f40:	080a0541 	.word	0x080a0541
 80a3f44:	080a0c1f 	.word	0x080a0c1f
 80a3f48:	080a1e5d 	.word	0x080a1e5d
 80a3f4c:	080a24b1 	.word	0x080a24b1
 80a3f50:	080a2591 	.word	0x080a2591
 80a3f54:	080a26b1 	.word	0x080a26b1
 80a3f58:	080a2899 	.word	0x080a2899
 80a3f5c:	080a28b1 	.word	0x080a28b1
 80a3f60:	080a3029 	.word	0x080a3029
 80a3f64:	080a3251 	.word	0x080a3251
 80a3f68:	080a3281 	.word	0x080a3281
 80a3f6c:	080a32d5 	.word	0x080a32d5
 80a3f70:	080a3399 	.word	0x080a3399
 80a3f74:	080a341d 	.word	0x080a341d
 80a3f78:	080a34a1 	.word	0x080a34a1

080a3f7c <link_constructors_end>:
 80a3f7c:	00000000 	.word	0x00000000
