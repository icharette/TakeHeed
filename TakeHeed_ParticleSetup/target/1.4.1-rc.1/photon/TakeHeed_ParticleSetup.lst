
/Users/ninjacat/Documents/Particle/TakeHeed/TakeHeed_ParticleSetup/target/1.4.1-rc.1/photon/TakeHeed_ParticleSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1c80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080a1c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000600  20000080  20000080  00030080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1d04  080a1d04  00021d04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1d2c  080a1d2c  00021d2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a9db6  00000000  00000000  00021d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fa40  00000000  00000000  000cbae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014335  00000000  00000000  000db526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002040  00000000  00000000  000ef85b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000033b8  00000000  00000000  000f189b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024771  00000000  00000000  000f4c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023afc  00000000  00000000  001193c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5931  00000000  00000000  0013cec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b9d8  00000000  00000000  001e27f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fc35 	bl	80a189c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fc3a 	bl	80a18b2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1c84 	.word	0x080a1c84
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	20000680 	.word	0x20000680
 80a0058:	20000680 	.word	0x20000680

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f9eb 	bl	80a1438 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1c48 	.word	0x080a1c48
 80a0084:	080a1c80 	.word	0x080a1c80

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8bf 	bl	80a0210 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b991 	b.w	80a13bc <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bb39 	b.w	80a0710 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bb3f 	b.w	80a0720 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f000 fdfa 	bl	80a0cb8 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f000 ff2f 	bl	80a0f28 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a1ae8 	.word	0x080a1ae8

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 fa86 	bl	80a15ea <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 fa7c 	bl	80a15ea <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
int testPin =D7;

int enable = A5;
int step = A4;
int direction = A3;
void setup() {
 80a00f8:	b570      	push	{r4, r5, r6, lr}
 80a00fa:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
 80a00fc:	f001 f86a 	bl	80a11d4 <_Z16_fetch_usbserialv>
 80a0100:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0104:	f001 f846 	bl	80a1194 <_ZN9USBSerial5beginEl>
   bool pressed = false;
  
    pinMode(buttonIn, INPUT);    
 80a0108:	4b37      	ldr	r3, [pc, #220]	; (80a01e8 <setup+0xf0>)
 80a010a:	2100      	movs	r1, #0
 80a010c:	8818      	ldrh	r0, [r3, #0]
 80a010e:	f001 f9e3 	bl	80a14d8 <pinMode>
    pinMode(buttonOut, INPUT);                                            
 80a0112:	4b36      	ldr	r3, [pc, #216]	; (80a01ec <setup+0xf4>)
 80a0114:	2100      	movs	r1, #0
 80a0116:	8818      	ldrh	r0, [r3, #0]
 80a0118:	f001 f9de 	bl	80a14d8 <pinMode>
  
  //waiting for serial to correctly initialze and allocate memory
    //serial object
    while(!Serial);
 80a011c:	f001 f85a 	bl	80a11d4 <_Z16_fetch_usbserialv>
 80a0120:	f001 f83f 	bl	80a11a2 <_ZN9USBSerialcvbEv>
 80a0124:	2800      	cmp	r0, #0
 80a0126:	d0f9      	beq.n	80a011c <setup+0x24>
 80a0128:	4c31      	ldr	r4, [pc, #196]	; (80a01f0 <setup+0xf8>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a012a:	2300      	movs	r3, #0
 80a012c:	461a      	mov	r2, r3
 80a012e:	4619      	mov	r1, r3
 80a0130:	6860      	ldr	r0, [r4, #4]
 80a0132:	f000 fa8d 	bl	80a0650 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0136:	2200      	movs	r2, #0
 80a0138:	4611      	mov	r1, r2
 80a013a:	6860      	ldr	r0, [r4, #4]
 80a013c:	4d2c      	ldr	r5, [pc, #176]	; (80a01f0 <setup+0xf8>)
 80a013e:	f000 fa9f 	bl	80a0680 <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a0142:	2800      	cmp	r0, #0
 80a0144:	d0f7      	beq.n	80a0136 <setup+0x3e>
    Serial.println("Setup");
 80a0146:	f001 f845 	bl	80a11d4 <_Z16_fetch_usbserialv>
 80a014a:	492a      	ldr	r1, [pc, #168]	; (80a01f4 <setup+0xfc>)
 80a014c:	f000 fc63 	bl	80a0a16 <_ZN5Print7printlnEPKc>
   udp.begin(localPort);
 80a0150:	4b29      	ldr	r3, [pc, #164]	; (80a01f8 <setup+0x100>)
 80a0152:	2200      	movs	r2, #0
 80a0154:	8819      	ldrh	r1, [r3, #0]
 80a0156:	4829      	ldr	r0, [pc, #164]	; (80a01fc <setup+0x104>)
 80a0158:	f000 fd89 	bl	80a0c6e <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a015c:	2300      	movs	r3, #0
 80a015e:	4619      	mov	r1, r3
 80a0160:	4a27      	ldr	r2, [pc, #156]	; (80a0200 <setup+0x108>)
 80a0162:	6868      	ldr	r0, [r5, #4]
 80a0164:	f000 fac4 	bl	80a06f0 <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a0168:	f001 f834 	bl	80a11d4 <_Z16_fetch_usbserialv>
 80a016c:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a016e:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0170:	2240      	movs	r2, #64	; 0x40
 80a0172:	2100      	movs	r1, #0
 80a0174:	a806      	add	r0, sp, #24
 80a0176:	f001 fb9c 	bl	80a18b2 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a017a:	9400      	str	r4, [sp, #0]
 80a017c:	2340      	movs	r3, #64	; 0x40
 80a017e:	aa06      	add	r2, sp, #24
 80a0180:	4621      	mov	r1, r4
 80a0182:	6868      	ldr	r0, [r5, #4]
 80a0184:	f000 fabc 	bl	80a0700 <network_get_hostname>
        return String(buf);
 80a0188:	a906      	add	r1, sp, #24
 80a018a:	a802      	add	r0, sp, #8
 80a018c:	f000 fcfe 	bl	80a0b8c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0190:	9902      	ldr	r1, [sp, #8]
 80a0192:	4630      	mov	r0, r6
 80a0194:	f000 fc3f 	bl	80a0a16 <_ZN5Print7printlnEPKc>
 80a0198:	a802      	add	r0, sp, #8
 80a019a:	f000 fcb0 	bl	80a0afe <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a019e:	f001 f819 	bl	80a11d4 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01a2:	4622      	mov	r2, r4
 80a01a4:	4606      	mov	r6, r0
 80a01a6:	4621      	mov	r1, r4
 80a01a8:	6868      	ldr	r0, [r5, #4]
 80a01aa:	f000 fa49 	bl	80a0640 <network_config>

     pinMode(enable, OUTPUT); //Enable
 80a01ae:	4d15      	ldr	r5, [pc, #84]	; (80a0204 <setup+0x10c>)
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01b0:	1c81      	adds	r1, r0, #2
 80a01b2:	a806      	add	r0, sp, #24
 80a01b4:	f000 fb3a 	bl	80a082c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    while(!WiFi.ready());
    Serial.println("Setup");
   udp.begin(localPort);
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
    Serial.println(WiFi.localIP());
 80a01b8:	a906      	add	r1, sp, #24
 80a01ba:	4630      	mov	r0, r6
 80a01bc:	f000 fc35 	bl	80a0a2a <_ZN5Print7printlnERK9Printable>

     pinMode(enable, OUTPUT); //Enable
 80a01c0:	8828      	ldrh	r0, [r5, #0]
 80a01c2:	2101      	movs	r1, #1
 80a01c4:	f001 f988 	bl	80a14d8 <pinMode>
  pinMode(step, OUTPUT); //Step
 80a01c8:	4b0f      	ldr	r3, [pc, #60]	; (80a0208 <setup+0x110>)
 80a01ca:	2101      	movs	r1, #1
 80a01cc:	8818      	ldrh	r0, [r3, #0]
 80a01ce:	f001 f983 	bl	80a14d8 <pinMode>
  pinMode(direction, OUTPUT); //Direction
 80a01d2:	4b0e      	ldr	r3, [pc, #56]	; (80a020c <setup+0x114>)
 80a01d4:	2101      	movs	r1, #1
 80a01d6:	8818      	ldrh	r0, [r3, #0]
 80a01d8:	f001 f97e 	bl	80a14d8 <pinMode>

  digitalWrite(enable,LOW);
 80a01dc:	4621      	mov	r1, r4
 80a01de:	8828      	ldrh	r0, [r5, #0]
 80a01e0:	f001 f98b 	bl	80a14fa <digitalWrite>
    // Set the initial state of subscriber
    // to off just in case.
    //  Particle.publish("elaEvent", "high", 60, PUBLIC); //PUBLIC OR PRIVATE OR DEVICE ID
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);
}
 80a01e4:	b016      	add	sp, #88	; 0x58
 80a01e6:	bd70      	pop	{r4, r5, r6, pc}
 80a01e8:	200000dc 	.word	0x200000dc
 80a01ec:	20000010 	.word	0x20000010
 80a01f0:	2000057c 	.word	0x2000057c
 80a01f4:	080a1938 	.word	0x080a1938
 80a01f8:	2000000c 	.word	0x2000000c
 80a01fc:	20000084 	.word	0x20000084
 80a0200:	080a193e 	.word	0x080a193e
 80a0204:	20000000 	.word	0x20000000
 80a0208:	20000004 	.word	0x20000004
 80a020c:	20000014 	.word	0x20000014

080a0210 <loop>:

void loop() 
{
 80a0210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a0214:	4c31      	ldr	r4, [pc, #196]	; (80a02dc <loop+0xcc>)
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);
}

void loop() 
{
  digitalWrite(direction,HIGH);
 80a0216:	4e32      	ldr	r6, [pc, #200]	; (80a02e0 <loop+0xd0>)
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a0218:	4627      	mov	r7, r4
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);
}

void loop() 
{
  digitalWrite(direction,HIGH);
 80a021a:	2101      	movs	r1, #1
 80a021c:	8830      	ldrh	r0, [r6, #0]
 80a021e:	f001 f96c 	bl	80a14fa <digitalWrite>
int time = 500;

  for(Index = 0; Index < 2000; Index++)
  {
    digitalWrite(testPin, HIGH);
 80a0222:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80a02e4 <loop+0xd4>
void loop() 
{
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a0226:	2300      	movs	r3, #0
  {
    digitalWrite(testPin, HIGH);
    digitalWrite(step,HIGH);
 80a0228:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80a02e8 <loop+0xd8>
void loop() 
{
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a022c:	6023      	str	r3, [r4, #0]
 80a022e:	6823      	ldr	r3, [r4, #0]
 80a0230:	4d2a      	ldr	r5, [pc, #168]	; (80a02dc <loop+0xcc>)
 80a0232:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0236:	da1f      	bge.n	80a0278 <loop+0x68>
  {
    digitalWrite(testPin, HIGH);
 80a0238:	2101      	movs	r1, #1
 80a023a:	f8b8 0000 	ldrh.w	r0, [r8]
 80a023e:	f001 f95c 	bl	80a14fa <digitalWrite>
    digitalWrite(step,HIGH);
 80a0242:	2101      	movs	r1, #1
 80a0244:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0248:	f001 f957 	bl	80a14fa <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0250:	f000 f890 	bl	80a0374 <HAL_Delay_Microseconds>
    delayMicroseconds(time);
    digitalWrite(step,LOW);
 80a0254:	2100      	movs	r1, #0
 80a0256:	f8b9 0000 	ldrh.w	r0, [r9]
 80a025a:	f001 f94e 	bl	80a14fa <digitalWrite>
    digitalWrite(testPin, LOW);
 80a025e:	2100      	movs	r1, #0
 80a0260:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0264:	f001 f949 	bl	80a14fa <digitalWrite>
 80a0268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a026c:	f000 f882 	bl	80a0374 <HAL_Delay_Microseconds>
void loop() 
{
  digitalWrite(direction,HIGH);
int time = 500;

  for(Index = 0; Index < 2000; Index++)
 80a0270:	683b      	ldr	r3, [r7, #0]
 80a0272:	3301      	adds	r3, #1
 80a0274:	603b      	str	r3, [r7, #0]
 80a0276:	e7da      	b.n	80a022e <loop+0x1e>
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);

    
  }
  delay(1000);
 80a0278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a027c:	f000 fa60 	bl	80a0740 <delay>

  digitalWrite(direction,LOW);
 80a0280:	8830      	ldrh	r0, [r6, #0]
 80a0282:	2100      	movs	r1, #0
 80a0284:	f001 f939 	bl	80a14fa <digitalWrite>

  for(Index = 0; Index < 2000; Index++)
  {
    digitalWrite(testPin, HIGH);
 80a0288:	4e16      	ldr	r6, [pc, #88]	; (80a02e4 <loop+0xd4>)
  }
  delay(1000);

  digitalWrite(direction,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a028a:	2300      	movs	r3, #0
  {
    digitalWrite(testPin, HIGH);
    digitalWrite(step,HIGH);
 80a028c:	4f16      	ldr	r7, [pc, #88]	; (80a02e8 <loop+0xd8>)
  }
  delay(1000);

  digitalWrite(direction,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a028e:	602b      	str	r3, [r5, #0]
 80a0290:	6823      	ldr	r3, [r4, #0]
 80a0292:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0296:	da1b      	bge.n	80a02d0 <loop+0xc0>
  {
    digitalWrite(testPin, HIGH);
 80a0298:	2101      	movs	r1, #1
 80a029a:	8830      	ldrh	r0, [r6, #0]
 80a029c:	f001 f92d 	bl	80a14fa <digitalWrite>
    digitalWrite(step,HIGH);
 80a02a0:	2101      	movs	r1, #1
 80a02a2:	8838      	ldrh	r0, [r7, #0]
 80a02a4:	f001 f929 	bl	80a14fa <digitalWrite>
 80a02a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02ac:	f000 f862 	bl	80a0374 <HAL_Delay_Microseconds>
    delayMicroseconds(time);
    digitalWrite(step,LOW);
 80a02b0:	2100      	movs	r1, #0
 80a02b2:	8838      	ldrh	r0, [r7, #0]
 80a02b4:	f001 f921 	bl	80a14fa <digitalWrite>
    digitalWrite(testPin, LOW);
 80a02b8:	2100      	movs	r1, #0
 80a02ba:	8830      	ldrh	r0, [r6, #0]
 80a02bc:	f001 f91d 	bl	80a14fa <digitalWrite>
 80a02c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02c4:	f000 f856 	bl	80a0374 <HAL_Delay_Microseconds>
  }
  delay(1000);

  digitalWrite(direction,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a02c8:	682b      	ldr	r3, [r5, #0]
 80a02ca:	3301      	adds	r3, #1
 80a02cc:	602b      	str	r3, [r5, #0]
 80a02ce:	e7df      	b.n	80a0290 <loop+0x80>
    delayMicroseconds(time);
    digitalWrite(step,LOW);
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);
  }
  delay(1000);
 80a02d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delayMicroseconds(time);
    digitalWrite(step,LOW);
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);
  }
  delay(1000);
 80a02d8:	f000 ba32 	b.w	80a0740 <delay>
 80a02dc:	200000d8 	.word	0x200000d8
 80a02e0:	20000014 	.word	0x20000014
 80a02e4:	20000008 	.word	0x20000008
 80a02e8:	20000004 	.word	0x20000004

080a02ec <_GLOBAL__sub_I_SystemMode>:
 80a02ec:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02ee:	f000 f851 	bl	80a0394 <HAL_Pin_Map>
#include "Particle.h"

void setup();
void loop();

SYSTEM_THREAD(ENABLED);
 80a02f2:	2100      	movs	r1, #0
 80a02f4:	2001      	movs	r0, #1
 80a02f6:	f000 f97f 	bl	80a05f8 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a02fa:	4b0f      	ldr	r3, [pc, #60]	; (80a0338 <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a02fc:	2200      	movs	r2, #0
 80a02fe:	701a      	strb	r2, [r3, #0]
 80a0300:	805a      	strh	r2, [r3, #2]
 80a0302:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0306:	4c0d      	ldr	r4, [pc, #52]	; (80a033c <_GLOBAL__sub_I_SystemMode+0x50>)
 80a0308:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a030a:	2002      	movs	r0, #2
 80a030c:	f000 f964 	bl	80a05d8 <set_system_mode>
 80a0310:	4d0b      	ldr	r5, [pc, #44]	; (80a0340 <_GLOBAL__sub_I_SystemMode+0x54>)
 80a0312:	4620      	mov	r0, r4
 80a0314:	f000 fa7c 	bl	80a0810 <_ZN9IPAddressC1Ev>
 80a0318:	4620      	mov	r0, r4
int port;
UDP udp;
 80a031a:	4c0a      	ldr	r4, [pc, #40]	; (80a0344 <_GLOBAL__sub_I_SystemMode+0x58>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a031c:	462a      	mov	r2, r5
 80a031e:	490a      	ldr	r1, [pc, #40]	; (80a0348 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0320:	f001 f95e 	bl	80a15e0 <__aeabi_atexit>
int port;
UDP udp;
 80a0324:	4620      	mov	r0, r4
 80a0326:	f000 fde1 	bl	80a0eec <_ZN3UDPC1Ev>
 80a032a:	462a      	mov	r2, r5
 80a032c:	4620      	mov	r0, r4
    digitalWrite(step,LOW);
    digitalWrite(testPin, LOW);
    delayMicroseconds(time);
  }
  delay(1000);
 80a032e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}


unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0332:	4906      	ldr	r1, [pc, #24]	; (80a034c <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0334:	f001 b954 	b.w	80a15e0 <__aeabi_atexit>
 80a0338:	200000d0 	.word	0x200000d0
 80a033c:	200000e0 	.word	0x200000e0
 80a0340:	20000080 	.word	0x20000080
 80a0344:	20000084 	.word	0x20000084
 80a0348:	080a00b3 	.word	0x080a00b3
 80a034c:	080a00b5 	.word	0x080a00b5

080a0350 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a0350:	f000 b820 	b.w	80a0394 <HAL_Pin_Map>

080a0354 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <os_mutex_create+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601d0 	.word	0x080601d0

080a0364 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_RNG_GetRandomNumber+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	685b      	ldr	r3, [r3, #4]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	0806019c 	.word	0x0806019c

080a0374 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_Delay_Microseconds+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	68db      	ldr	r3, [r3, #12]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	0806019c 	.word	0x0806019c

080a0384 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	695b      	ldr	r3, [r3, #20]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	0806019c 	.word	0x0806019c

080a0394 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_Pin_Map+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	681b      	ldr	r3, [r3, #0]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601b0 	.word	0x080601b0

080a03a4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_Pin_Mode+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	689b      	ldr	r3, [r3, #8]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601b0 	.word	0x080601b0

080a03b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_Get_Pin_Mode+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	68db      	ldr	r3, [r3, #12]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601b0 	.word	0x080601b0

080a03c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_GPIO_Write+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	691b      	ldr	r3, [r3, #16]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601b0 	.word	0x080601b0

080a03d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_I2C_Write_Data+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601ac 	.word	0x080601ac

080a03e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_I2C_Available_Data+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601ac 	.word	0x080601ac

080a03f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_I2C_Read_Data+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601ac 	.word	0x080601ac

080a0404 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_I2C_Peek_Data+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601ac 	.word	0x080601ac

080a0414 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_I2C_Flush_Data+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601ac 	.word	0x080601ac

080a0424 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_I2C_Is_Enabled+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601ac 	.word	0x080601ac

080a0434 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b03      	ldr	r3, [pc, #12]	; (80a0444 <HAL_I2C_Init+0x10>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a043e:	9301      	str	r3, [sp, #4]
 80a0440:	bd08      	pop	{r3, pc}
 80a0442:	0000      	.short	0x0000
 80a0444:	080601ac 	.word	0x080601ac

080a0448 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <socket_handle_valid+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	685b      	ldr	r3, [r3, #4]
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601bc 	.word	0x080601bc

080a0458 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <socket_create+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	689b      	ldr	r3, [r3, #8]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601bc 	.word	0x080601bc

080a0468 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <socket_receivefrom+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	695b      	ldr	r3, [r3, #20]
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601bc 	.word	0x080601bc

080a0478 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <socket_sendto+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	69db      	ldr	r3, [r3, #28]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601bc 	.word	0x080601bc

080a0488 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <socket_close+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	6a1b      	ldr	r3, [r3, #32]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601bc 	.word	0x080601bc

080a0498 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <socket_handle_invalid+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601bc 	.word	0x080601bc

080a04a8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <HAL_SPI_Init+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	69db      	ldr	r3, [r3, #28]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601b4 	.word	0x080601b4

080a04b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <HAL_SPI_Is_Enabled+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	6a1b      	ldr	r3, [r3, #32]
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601b4 	.word	0x080601b4

080a04c8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <HAL_USART_Init+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	699b      	ldr	r3, [r3, #24]
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c4 	.word	0x080601c4

080a04d8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <HAL_USART_Write_Data+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601c4 	.word	0x080601c4

080a04e8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <HAL_USART_Available_Data+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601c4 	.word	0x080601c4

080a04f8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <HAL_USART_Read_Data+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601c4 	.word	0x080601c4

080a0508 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <HAL_USART_Peek_Data+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601c4 	.word	0x080601c4

080a0518 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <HAL_USART_Flush_Data+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601c4 	.word	0x080601c4

080a0528 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <HAL_USART_Is_Enabled+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601c4 	.word	0x080601c4

080a0538 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <HAL_USART_Available_Data_For_Write+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601c4 	.word	0x080601c4

080a0548 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <HAL_USB_USART_Init+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	681b      	ldr	r3, [r3, #0]
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601d8 	.word	0x080601d8

080a0558 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <HAL_USB_USART_Begin+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	685b      	ldr	r3, [r3, #4]
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601d8 	.word	0x080601d8

080a0568 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <HAL_USB_USART_Available_Data+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	691b      	ldr	r3, [r3, #16]
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601d8 	.word	0x080601d8

080a0578 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	695b      	ldr	r3, [r3, #20]
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601d8 	.word	0x080601d8

080a0588 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <HAL_USB_USART_Receive_Data+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	699b      	ldr	r3, [r3, #24]
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601d8 	.word	0x080601d8

080a0598 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <HAL_USB_USART_Send_Data+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	69db      	ldr	r3, [r3, #28]
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601d8 	.word	0x080601d8

080a05a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <HAL_USB_USART_Flush_Data+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	6a1b      	ldr	r3, [r3, #32]
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	080601d8 	.word	0x080601d8

080a05b8 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <HAL_USB_USART_Is_Enabled+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601d8 	.word	0x080601d8

080a05c8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <inet_gethostbyname+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601c0 	.word	0x080601c0

080a05d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <set_system_mode+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	685b      	ldr	r3, [r3, #4]
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601a4 	.word	0x080601a4

080a05e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <system_delay_ms+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	695b      	ldr	r3, [r3, #20]
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601a4 	.word	0x080601a4

080a05f8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <system_thread_set_state+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601a4 	.word	0x080601a4

080a0608 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b03      	ldr	r3, [pc, #12]	; (80a0618 <system_ctrl_set_app_request_handler+0x10>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0612:	9301      	str	r3, [sp, #4]
 80a0614:	bd08      	pop	{r3, pc}
 80a0616:	0000      	.short	0x0000
 80a0618:	080601a4 	.word	0x080601a4

080a061c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b03      	ldr	r3, [pc, #12]	; (80a062c <system_ctrl_set_result+0x10>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0626:	9301      	str	r3, [sp, #4]
 80a0628:	bd08      	pop	{r3, pc}
 80a062a:	0000      	.short	0x0000
 80a062c:	080601a4 	.word	0x080601a4

080a0630 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601cc 	.word	0x080601cc

080a0640 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <network_config+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	681b      	ldr	r3, [r3, #0]
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601c8 	.word	0x080601c8

080a0650 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <network_connect+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	685b      	ldr	r3, [r3, #4]
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601c8 	.word	0x080601c8

080a0660 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <network_connecting+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	689b      	ldr	r3, [r3, #8]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601c8 	.word	0x080601c8

080a0670 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <network_disconnect+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	68db      	ldr	r3, [r3, #12]
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601c8 	.word	0x080601c8

080a0680 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <network_ready+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	691b      	ldr	r3, [r3, #16]
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601c8 	.word	0x080601c8

080a0690 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <network_on+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	695b      	ldr	r3, [r3, #20]
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601c8 	.word	0x080601c8

080a06a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <network_off+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	699b      	ldr	r3, [r3, #24]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601c8 	.word	0x080601c8

080a06b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <network_listen+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	69db      	ldr	r3, [r3, #28]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601c8 	.word	0x080601c8

080a06c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <network_listening+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	6a1b      	ldr	r3, [r3, #32]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601c8 	.word	0x080601c8

080a06d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <network_set_listen_timeout+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601c8 	.word	0x080601c8

080a06e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <network_get_listen_timeout+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601c8 	.word	0x080601c8

080a06f0 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <network_set_hostname+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c8 	.word	0x080601c8

080a0700 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <network_get_hostname+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c8 	.word	0x080601c8

080a0710 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <malloc+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	681b      	ldr	r3, [r3, #0]
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601a0 	.word	0x080601a0

080a0720 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <free+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	685b      	ldr	r3, [r3, #4]
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601a0 	.word	0x080601a0

080a0730 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <realloc+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	689b      	ldr	r3, [r3, #8]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601a0 	.word	0x080601a0

080a0740 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0740:	2100      	movs	r1, #0
 80a0742:	f7ff bf51 	b.w	80a05e8 <system_delay_ms>

080a0746 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0746:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0748:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a074a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a074c:	b113      	cbz	r3, 80a0754 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a074e:	2203      	movs	r2, #3
 80a0750:	4601      	mov	r1, r0
 80a0752:	4798      	blx	r3
    }
 80a0754:	4620      	mov	r0, r4
 80a0756:	bd10      	pop	{r4, pc}

080a0758 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0758:	4770      	bx	lr

080a075a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a075a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a075c:	4606      	mov	r6, r0
 80a075e:	4615      	mov	r5, r2
 80a0760:	460c      	mov	r4, r1
 80a0762:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0764:	42bc      	cmp	r4, r7
 80a0766:	d006      	beq.n	80a0776 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0768:	6833      	ldr	r3, [r6, #0]
 80a076a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a076e:	689b      	ldr	r3, [r3, #8]
 80a0770:	4630      	mov	r0, r6
 80a0772:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0774:	e7f6      	b.n	80a0764 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0776:	4628      	mov	r0, r5
 80a0778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a077a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a077a:	2200      	movs	r2, #0
 80a077c:	7c00      	ldrb	r0, [r0, #16]
 80a077e:	f7ff be29 	b.w	80a03d4 <HAL_I2C_Write_Data>

080a0782 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0782:	2100      	movs	r1, #0
 80a0784:	7c00      	ldrb	r0, [r0, #16]
 80a0786:	f7ff be2d 	b.w	80a03e4 <HAL_I2C_Available_Data>

080a078a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a078a:	2100      	movs	r1, #0
 80a078c:	7c00      	ldrb	r0, [r0, #16]
 80a078e:	f7ff be31 	b.w	80a03f4 <HAL_I2C_Read_Data>

080a0792 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0792:	2100      	movs	r1, #0
 80a0794:	7c00      	ldrb	r0, [r0, #16]
 80a0796:	f7ff be35 	b.w	80a0404 <HAL_I2C_Peek_Data>

080a079a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a079a:	2100      	movs	r1, #0
 80a079c:	7c00      	ldrb	r0, [r0, #16]
 80a079e:	f7ff be39 	b.w	80a0414 <HAL_I2C_Flush_Data>

080a07a2 <_ZN7TwoWireD0Ev>:
 80a07a2:	b510      	push	{r4, lr}
 80a07a4:	4604      	mov	r4, r0
 80a07a6:	2114      	movs	r1, #20
 80a07a8:	f000 ff1f 	bl	80a15ea <_ZdlPvj>
 80a07ac:	4620      	mov	r0, r4
 80a07ae:	bd10      	pop	{r4, pc}

080a07b0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a07b0:	b510      	push	{r4, lr}
 80a07b2:	4604      	mov	r4, r0
 80a07b4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a07b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a07ba:	60a3      	str	r3, [r4, #8]
 80a07bc:	4b04      	ldr	r3, [pc, #16]	; (80a07d0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a07be:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a07c0:	7420      	strb	r0, [r4, #16]
 80a07c2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a07c4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a07c6:	f7ff fe35 	bl	80a0434 <HAL_I2C_Init>

}
 80a07ca:	4620      	mov	r0, r4
 80a07cc:	bd10      	pop	{r4, pc}
 80a07ce:	bf00      	nop
 80a07d0:	080a1958 	.word	0x080a1958

080a07d4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a07d4:	2100      	movs	r1, #0
 80a07d6:	7c00      	ldrb	r0, [r0, #16]
 80a07d8:	f7ff be24 	b.w	80a0424 <HAL_I2C_Is_Enabled>

080a07dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a07dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07de:	460f      	mov	r7, r1
 80a07e0:	f100 0608 	add.w	r6, r0, #8
 80a07e4:	1d05      	adds	r5, r0, #4
 80a07e6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a07e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a07ec:	220a      	movs	r2, #10
 80a07ee:	4638      	mov	r0, r7
 80a07f0:	f000 f94f 	bl	80a0a92 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a07f4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a07f6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a07f8:	d007      	beq.n	80a080a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a07fa:	2c00      	cmp	r4, #0
 80a07fc:	d0f4      	beq.n	80a07e8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a07fe:	212e      	movs	r1, #46	; 0x2e
 80a0800:	4638      	mov	r0, r7
 80a0802:	f000 f8f3 	bl	80a09ec <_ZN5Print5printEc>
 80a0806:	4404      	add	r4, r0
 80a0808:	e7ee      	b.n	80a07e8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a080a:	4620      	mov	r0, r4
 80a080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0810 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0810:	b510      	push	{r4, lr}
 80a0812:	4604      	mov	r4, r0
 80a0814:	4b04      	ldr	r3, [pc, #16]	; (80a0828 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0816:	2211      	movs	r2, #17
 80a0818:	f840 3b04 	str.w	r3, [r0], #4
 80a081c:	2100      	movs	r1, #0
 80a081e:	f001 f848 	bl	80a18b2 <memset>
{
    clear();
}
 80a0822:	4620      	mov	r0, r4
 80a0824:	bd10      	pop	{r4, pc}
 80a0826:	bf00      	nop
 80a0828:	080a1980 	.word	0x080a1980

080a082c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a082c:	4603      	mov	r3, r0
 80a082e:	4a07      	ldr	r2, [pc, #28]	; (80a084c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0830:	b510      	push	{r4, lr}
 80a0832:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0836:	f101 0210 	add.w	r2, r1, #16
 80a083a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a083e:	4291      	cmp	r1, r2
 80a0840:	f843 4b04 	str.w	r4, [r3], #4
 80a0844:	d1f9      	bne.n	80a083a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0846:	780a      	ldrb	r2, [r1, #0]
 80a0848:	701a      	strb	r2, [r3, #0]
}
 80a084a:	bd10      	pop	{r4, pc}
 80a084c:	080a1980 	.word	0x080a1980

080a0850 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0850:	4a02      	ldr	r2, [pc, #8]	; (80a085c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0852:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0854:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0856:	2204      	movs	r2, #4
 80a0858:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a085a:	4770      	bx	lr
 80a085c:	080a1980 	.word	0x080a1980

080a0860 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0860:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0862:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0866:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a086a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a086e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0872:	2304      	movs	r3, #4
 80a0874:	6041      	str	r1, [r0, #4]
 80a0876:	7503      	strb	r3, [r0, #20]
 80a0878:	bd10      	pop	{r4, pc}
	...

080a087c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a087c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a087e:	4d04      	ldr	r5, [pc, #16]	; (80a0890 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0880:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0882:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0886:	9500      	str	r5, [sp, #0]
 80a0888:	f7ff ffea 	bl	80a0860 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a088c:	b003      	add	sp, #12
 80a088e:	bd30      	pop	{r4, r5, pc}
 80a0890:	080a1980 	.word	0x080a1980

080a0894 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0894:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0896:	780d      	ldrb	r5, [r1, #0]
 80a0898:	788b      	ldrb	r3, [r1, #2]
 80a089a:	784a      	ldrb	r2, [r1, #1]
 80a089c:	78c9      	ldrb	r1, [r1, #3]
 80a089e:	9100      	str	r1, [sp, #0]
 80a08a0:	4629      	mov	r1, r5
 80a08a2:	f7ff ffdd 	bl	80a0860 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a08a6:	b003      	add	sp, #12
 80a08a8:	bd30      	pop	{r4, r5, pc}
	...

080a08ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a08ac:	4a01      	ldr	r2, [pc, #4]	; (80a08b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a08b0:	601a      	str	r2, [r3, #0]
 80a08b2:	4770      	bx	lr
 80a08b4:	080a1a02 	.word	0x080a1a02
 80a08b8:	200000f8 	.word	0x200000f8

080a08bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a08bc:	2300      	movs	r3, #0
 80a08be:	461a      	mov	r2, r3
 80a08c0:	6840      	ldr	r0, [r0, #4]
 80a08c2:	f7ff bec5 	b.w	80a0650 <network_connect>

080a08c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a08c6:	2200      	movs	r2, #0
 80a08c8:	2102      	movs	r1, #2
 80a08ca:	6840      	ldr	r0, [r0, #4]
 80a08cc:	f7ff bed0 	b.w	80a0670 <network_disconnect>

080a08d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a08d0:	2200      	movs	r2, #0
 80a08d2:	4611      	mov	r1, r2
 80a08d4:	6840      	ldr	r0, [r0, #4]
 80a08d6:	f7ff bec3 	b.w	80a0660 <network_connecting>

080a08da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a08da:	2200      	movs	r2, #0
 80a08dc:	4611      	mov	r1, r2
 80a08de:	6840      	ldr	r0, [r0, #4]
 80a08e0:	f7ff bece 	b.w	80a0680 <network_ready>

080a08e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a08e4:	2300      	movs	r3, #0
 80a08e6:	461a      	mov	r2, r3
 80a08e8:	4619      	mov	r1, r3
 80a08ea:	6840      	ldr	r0, [r0, #4]
 80a08ec:	f7ff bed0 	b.w	80a0690 <network_on>

080a08f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a08f0:	2300      	movs	r3, #0
 80a08f2:	461a      	mov	r2, r3
 80a08f4:	4619      	mov	r1, r3
 80a08f6:	6840      	ldr	r0, [r0, #4]
 80a08f8:	f7ff bed2 	b.w	80a06a0 <network_off>

080a08fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a08fc:	2200      	movs	r2, #0
 80a08fe:	f081 0101 	eor.w	r1, r1, #1
 80a0902:	6840      	ldr	r0, [r0, #4]
 80a0904:	f7ff bed4 	b.w	80a06b0 <network_listen>

080a0908 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0908:	2200      	movs	r2, #0
 80a090a:	6840      	ldr	r0, [r0, #4]
 80a090c:	f7ff bee0 	b.w	80a06d0 <network_set_listen_timeout>

080a0910 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0910:	2200      	movs	r2, #0
 80a0912:	4611      	mov	r1, r2
 80a0914:	6840      	ldr	r0, [r0, #4]
 80a0916:	f7ff bee3 	b.w	80a06e0 <network_get_listen_timeout>

080a091a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a091a:	2200      	movs	r2, #0
 80a091c:	4611      	mov	r1, r2
 80a091e:	6840      	ldr	r0, [r0, #4]
 80a0920:	f7ff bece 	b.w	80a06c0 <network_listening>

080a0924 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0924:	b570      	push	{r4, r5, r6, lr}
 80a0926:	4616      	mov	r6, r2
 80a0928:	b08e      	sub	sp, #56	; 0x38
 80a092a:	4604      	mov	r4, r0
    IPAddress addr;
 80a092c:	a808      	add	r0, sp, #32
 80a092e:	f7ff ff6f 	bl	80a0810 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0932:	2211      	movs	r2, #17
 80a0934:	2100      	movs	r1, #0
 80a0936:	a803      	add	r0, sp, #12
 80a0938:	f000 ffbb 	bl	80a18b2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a093c:	4630      	mov	r0, r6
 80a093e:	f000 ffe9 	bl	80a1914 <strlen>
 80a0942:	2500      	movs	r5, #0
 80a0944:	4b0a      	ldr	r3, [pc, #40]	; (80a0970 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0946:	9500      	str	r5, [sp, #0]
 80a0948:	b281      	uxth	r1, r0
 80a094a:	685b      	ldr	r3, [r3, #4]
 80a094c:	aa03      	add	r2, sp, #12
 80a094e:	4630      	mov	r0, r6
 80a0950:	f7ff fe3a 	bl	80a05c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0954:	b120      	cbz	r0, 80a0960 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0956:	4629      	mov	r1, r5
 80a0958:	4620      	mov	r0, r4
 80a095a:	f7ff ff79 	bl	80a0850 <_ZN9IPAddressC1Em>
 80a095e:	e003      	b.n	80a0968 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0960:	a903      	add	r1, sp, #12
 80a0962:	4620      	mov	r0, r4
 80a0964:	f7ff ff62 	bl	80a082c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0968:	4620      	mov	r0, r4
 80a096a:	b00e      	add	sp, #56	; 0x38
 80a096c:	bd70      	pop	{r4, r5, r6, pc}
 80a096e:	bf00      	nop
 80a0970:	2000057c 	.word	0x2000057c

080a0974 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0974:	4b03      	ldr	r3, [pc, #12]	; (80a0984 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0976:	4a04      	ldr	r2, [pc, #16]	; (80a0988 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0978:	2804      	cmp	r0, #4
 80a097a:	bf0c      	ite	eq
 80a097c:	4610      	moveq	r0, r2
 80a097e:	4618      	movne	r0, r3
 80a0980:	4770      	bx	lr
 80a0982:	bf00      	nop
 80a0984:	200000fc 	.word	0x200000fc
 80a0988:	2000057c 	.word	0x2000057c

080a098c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a098c:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a098e:	4a03      	ldr	r2, [pc, #12]	; (80a099c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0990:	601a      	str	r2, [r3, #0]
 80a0992:	2200      	movs	r2, #0
 80a0994:	605a      	str	r2, [r3, #4]
 80a0996:	4770      	bx	lr
 80a0998:	200000fc 	.word	0x200000fc
 80a099c:	080a1a78 	.word	0x080a1a78

080a09a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a09a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09a2:	4606      	mov	r6, r0
 80a09a4:	460d      	mov	r5, r1
 80a09a6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a09a8:	2400      	movs	r4, #0
  while (size--) {
 80a09aa:	42bd      	cmp	r5, r7
 80a09ac:	d00c      	beq.n	80a09c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a09ae:	6833      	ldr	r3, [r6, #0]
 80a09b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a09b4:	689b      	ldr	r3, [r3, #8]
 80a09b6:	4630      	mov	r0, r6
 80a09b8:	4798      	blx	r3
     if (chunk>=0)
 80a09ba:	2800      	cmp	r0, #0
 80a09bc:	db01      	blt.n	80a09c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a09be:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a09c0:	e7f3      	b.n	80a09aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a09c2:	2c00      	cmp	r4, #0
 80a09c4:	bf08      	it	eq
 80a09c6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a09c8:	4620      	mov	r0, r4
 80a09ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a09cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a09cc:	b570      	push	{r4, r5, r6, lr}
 80a09ce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a09d0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a09d2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a09d4:	b149      	cbz	r1, 80a09ea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a09d6:	f000 ff9d 	bl	80a1914 <strlen>
 80a09da:	682b      	ldr	r3, [r5, #0]
 80a09dc:	4602      	mov	r2, r0
 80a09de:	4621      	mov	r1, r4
 80a09e0:	4628      	mov	r0, r5
    }
 80a09e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a09e6:	68db      	ldr	r3, [r3, #12]
 80a09e8:	4718      	bx	r3
    }
 80a09ea:	bd70      	pop	{r4, r5, r6, pc}

080a09ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a09ec:	6803      	ldr	r3, [r0, #0]
 80a09ee:	689b      	ldr	r3, [r3, #8]
 80a09f0:	4718      	bx	r3

080a09f2 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a09f2:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a09f4:	680a      	ldr	r2, [r1, #0]
 80a09f6:	4601      	mov	r1, r0
 80a09f8:	6812      	ldr	r2, [r2, #0]
 80a09fa:	4618      	mov	r0, r3
 80a09fc:	4710      	bx	r2

080a09fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a09fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0a00:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0a02:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0a04:	f7ff fff2 	bl	80a09ec <_ZN5Print5printEc>
  n += print('\n');
 80a0a08:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0a0a:	4604      	mov	r4, r0
  n += print('\n');
 80a0a0c:	4628      	mov	r0, r5
 80a0a0e:	f7ff ffed 	bl	80a09ec <_ZN5Print5printEc>
  return n;
}
 80a0a12:	4420      	add	r0, r4
 80a0a14:	bd38      	pop	{r3, r4, r5, pc}

080a0a16 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0a16:	b538      	push	{r3, r4, r5, lr}
 80a0a18:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0a1a:	f7ff ffd7 	bl	80a09cc <_ZN5Print5writeEPKc>
 80a0a1e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0a20:	4628      	mov	r0, r5
 80a0a22:	f7ff ffec 	bl	80a09fe <_ZN5Print7printlnEv>
  return n;
}
 80a0a26:	4420      	add	r0, r4
 80a0a28:	bd38      	pop	{r3, r4, r5, pc}

080a0a2a <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0a2a:	b538      	push	{r3, r4, r5, lr}
 80a0a2c:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0a2e:	f7ff ffe0 	bl	80a09f2 <_ZN5Print5printERK9Printable>
 80a0a32:	4604      	mov	r4, r0
   n += println();
 80a0a34:	4628      	mov	r0, r5
 80a0a36:	f7ff ffe2 	bl	80a09fe <_ZN5Print7printlnEv>
   return n;
 }
 80a0a3a:	4420      	add	r0, r4
 80a0a3c:	bd38      	pop	{r3, r4, r5, pc}

080a0a3e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0a3e:	2a01      	cmp	r2, #1
 80a0a40:	bf98      	it	ls
 80a0a42:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0a44:	b530      	push	{r4, r5, lr}
 80a0a46:	460b      	mov	r3, r1
 80a0a48:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0a4a:	2100      	movs	r1, #0
 80a0a4c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0a50:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0a54:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0a58:	fb05 3312 	mls	r3, r5, r2, r3
 80a0a5c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0a5e:	2b09      	cmp	r3, #9
 80a0a60:	bf94      	ite	ls
 80a0a62:	3330      	addls	r3, #48	; 0x30
 80a0a64:	3337      	addhi	r3, #55	; 0x37
 80a0a66:	b2db      	uxtb	r3, r3
 80a0a68:	4621      	mov	r1, r4
 80a0a6a:	f804 3901 	strb.w	r3, [r4], #-1
 80a0a6e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0a70:	2d00      	cmp	r5, #0
 80a0a72:	d1ef      	bne.n	80a0a54 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0a74:	f7ff ffaa 	bl	80a09cc <_ZN5Print5writeEPKc>
}
 80a0a78:	b00b      	add	sp, #44	; 0x2c
 80a0a7a:	bd30      	pop	{r4, r5, pc}

080a0a7c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0a7c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0a7e:	b922      	cbnz	r2, 80a0a8a <_ZN5Print5printEmi+0xe>
 80a0a80:	6803      	ldr	r3, [r0, #0]
 80a0a82:	b2c9      	uxtb	r1, r1
 80a0a84:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0a86:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0a88:	4718      	bx	r3
  else return printNumber(n, base);
 80a0a8a:	b2d2      	uxtb	r2, r2
}
 80a0a8c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0a8e:	f7ff bfd6 	b.w	80a0a3e <_ZN5Print11printNumberEmh>

080a0a92 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0a92:	f7ff bff3 	b.w	80a0a7c <_ZN5Print5printEmi>

080a0a96 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0a96:	b510      	push	{r4, lr}
 80a0a98:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0a9a:	f7ff fe54 	bl	80a0746 <_ZNSt14_Function_baseD1Ev>
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	bd10      	pop	{r4, pc}
	...

080a0aa4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0aa4:	4803      	ldr	r0, [pc, #12]	; (80a0ab4 <_GLOBAL__sub_I_RGB+0x10>)
 80a0aa6:	2300      	movs	r3, #0
 80a0aa8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0aaa:	4a03      	ldr	r2, [pc, #12]	; (80a0ab8 <_GLOBAL__sub_I_RGB+0x14>)
 80a0aac:	4903      	ldr	r1, [pc, #12]	; (80a0abc <_GLOBAL__sub_I_RGB+0x18>)
 80a0aae:	f000 bd97 	b.w	80a15e0 <__aeabi_atexit>
 80a0ab2:	bf00      	nop
 80a0ab4:	20000104 	.word	0x20000104
 80a0ab8:	20000080 	.word	0x20000080
 80a0abc:	080a0a97 	.word	0x080a0a97

080a0ac0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0ac0:	4770      	bx	lr

080a0ac2 <_ZN8SPIClassD0Ev>:
 80a0ac2:	b510      	push	{r4, lr}
 80a0ac4:	4604      	mov	r4, r0
 80a0ac6:	2110      	movs	r1, #16
 80a0ac8:	f000 fd8f 	bl	80a15ea <_ZdlPvj>
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	bd10      	pop	{r4, pc}

080a0ad0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ad0:	b570      	push	{r4, r5, r6, lr}
 80a0ad2:	4604      	mov	r4, r0
 80a0ad4:	460e      	mov	r6, r1
 80a0ad6:	4b07      	ldr	r3, [pc, #28]	; (80a0af4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0ad8:	2500      	movs	r5, #0
 80a0ada:	6003      	str	r3, [r0, #0]
 80a0adc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0ae0:	f7ff fc38 	bl	80a0354 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0ae4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0ae6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0ae8:	f7ff fcde 	bl	80a04a8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0aec:	60a5      	str	r5, [r4, #8]
}
 80a0aee:	4620      	mov	r0, r4
 80a0af0:	bd70      	pop	{r4, r5, r6, pc}
 80a0af2:	bf00      	nop
 80a0af4:	080a1aac 	.word	0x080a1aac

080a0af8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0af8:	7900      	ldrb	r0, [r0, #4]
 80a0afa:	f7ff bcdd 	b.w	80a04b8 <HAL_SPI_Is_Enabled>

080a0afe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0afe:	b510      	push	{r4, lr}
 80a0b00:	4604      	mov	r4, r0
{
	free(buffer);
 80a0b02:	6800      	ldr	r0, [r0, #0]
 80a0b04:	f7ff fe0c 	bl	80a0720 <free>
}
 80a0b08:	4620      	mov	r0, r4
 80a0b0a:	bd10      	pop	{r4, pc}

080a0b0c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0b0c:	b510      	push	{r4, lr}
 80a0b0e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0b10:	6800      	ldr	r0, [r0, #0]
 80a0b12:	b108      	cbz	r0, 80a0b18 <_ZN6String10invalidateEv+0xc>
 80a0b14:	f7ff fe04 	bl	80a0720 <free>
	buffer = NULL;
 80a0b18:	2300      	movs	r3, #0
 80a0b1a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0b1c:	60a3      	str	r3, [r4, #8]
 80a0b1e:	6063      	str	r3, [r4, #4]
 80a0b20:	bd10      	pop	{r4, pc}

080a0b22 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0b22:	b538      	push	{r3, r4, r5, lr}
 80a0b24:	4604      	mov	r4, r0
 80a0b26:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0b28:	6800      	ldr	r0, [r0, #0]
 80a0b2a:	3101      	adds	r1, #1
 80a0b2c:	f7ff fe00 	bl	80a0730 <realloc>
	if (newbuffer) {
 80a0b30:	b110      	cbz	r0, 80a0b38 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0b32:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0b36:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0b38:	bd38      	pop	{r3, r4, r5, pc}

080a0b3a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0b3a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0b3c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0b3e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0b40:	b113      	cbz	r3, 80a0b48 <_ZN6String7reserveEj+0xe>
 80a0b42:	6843      	ldr	r3, [r0, #4]
 80a0b44:	428b      	cmp	r3, r1
 80a0b46:	d207      	bcs.n	80a0b58 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0b48:	4620      	mov	r0, r4
 80a0b4a:	f7ff ffea 	bl	80a0b22 <_ZN6String12changeBufferEj>
 80a0b4e:	b120      	cbz	r0, 80a0b5a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0b50:	68a3      	ldr	r3, [r4, #8]
 80a0b52:	b90b      	cbnz	r3, 80a0b58 <_ZN6String7reserveEj+0x1e>
 80a0b54:	6822      	ldr	r2, [r4, #0]
 80a0b56:	7013      	strb	r3, [r2, #0]
 80a0b58:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0b5a:	bd10      	pop	{r4, pc}

080a0b5c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0b5c:	b570      	push	{r4, r5, r6, lr}
 80a0b5e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0b60:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0b62:	4604      	mov	r4, r0
 80a0b64:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0b66:	f7ff ffe8 	bl	80a0b3a <_ZN6String7reserveEj>
 80a0b6a:	b918      	cbnz	r0, 80a0b74 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0b6c:	4620      	mov	r0, r4
 80a0b6e:	f7ff ffcd 	bl	80a0b0c <_ZN6String10invalidateEv>
		return *this;
 80a0b72:	e009      	b.n	80a0b88 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0b74:	462a      	mov	r2, r5
 80a0b76:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0b78:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0b7a:	6820      	ldr	r0, [r4, #0]
 80a0b7c:	f000 fe8e 	bl	80a189c <memcpy>
	buffer[len] = 0;
 80a0b80:	6822      	ldr	r2, [r4, #0]
 80a0b82:	68a3      	ldr	r3, [r4, #8]
 80a0b84:	2100      	movs	r1, #0
 80a0b86:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0b88:	4620      	mov	r0, r4
 80a0b8a:	bd70      	pop	{r4, r5, r6, pc}

080a0b8c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0b8c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0b8e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0b90:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0b92:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0b94:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0b96:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0b98:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0b9a:	460d      	mov	r5, r1
 80a0b9c:	b139      	cbz	r1, 80a0bae <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0b9e:	4608      	mov	r0, r1
 80a0ba0:	f000 feb8 	bl	80a1914 <strlen>
 80a0ba4:	4629      	mov	r1, r5
 80a0ba6:	4602      	mov	r2, r0
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	f7ff ffd7 	bl	80a0b5c <_ZN6String4copyEPKcj>
}
 80a0bae:	4620      	mov	r0, r4
 80a0bb0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0bb4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0bb8:	4b03      	ldr	r3, [pc, #12]	; (80a0bc8 <_GLOBAL__sub_I_System+0x14>)
 80a0bba:	2000      	movs	r0, #0
 80a0bbc:	7018      	strb	r0, [r3, #0]
 80a0bbe:	8058      	strh	r0, [r3, #2]
 80a0bc0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0bc2:	f7ff bd09 	b.w	80a05d8 <set_system_mode>
 80a0bc6:	bf00      	nop
 80a0bc8:	20000114 	.word	0x20000114

080a0bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0bcc:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0bce:	681a      	ldr	r2, [r3, #0]
 80a0bd0:	4b02      	ldr	r3, [pc, #8]	; (80a0bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0bd2:	601a      	str	r2, [r3, #0]
 80a0bd4:	4770      	bx	lr
 80a0bd6:	bf00      	nop
 80a0bd8:	20000018 	.word	0x20000018
 80a0bdc:	2000011c 	.word	0x2000011c

080a0be0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0be0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0be2:	6804      	ldr	r4, [r0, #0]
 80a0be4:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0be6:	46a4      	mov	ip, r4
    }
 80a0be8:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0bea:	4760      	bx	ip

080a0bec <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0bec:	6803      	ldr	r3, [r0, #0]
 80a0bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0bf0:	4718      	bx	r3

080a0bf2 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0bf2:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0bf4:	4770      	bx	lr

080a0bf6 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0bf6:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0bf8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0bfa:	1a10      	subs	r0, r2, r0
 80a0bfc:	4770      	bx	lr

080a0bfe <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0bfe:	b513      	push	{r0, r1, r4, lr}
 80a0c00:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0c02:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0c04:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0c08:	68d4      	ldr	r4, [r2, #12]
 80a0c0a:	4619      	mov	r1, r3
 80a0c0c:	2201      	movs	r2, #1
 80a0c0e:	47a0      	blx	r4
}
 80a0c10:	b002      	add	sp, #8
 80a0c12:	bd10      	pop	{r4, pc}

080a0c14 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0c14:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0c16:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0c18:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0c1a:	691b      	ldr	r3, [r3, #16]
 80a0c1c:	4798      	blx	r3
 80a0c1e:	b128      	cbz	r0, 80a0c2c <_ZN3UDP4readEv+0x18>
 80a0c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0c22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0c24:	1c59      	adds	r1, r3, #1
 80a0c26:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0c28:	5cd0      	ldrb	r0, [r2, r3]
 80a0c2a:	bd10      	pop	{r4, pc}
 80a0c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0c30:	bd10      	pop	{r4, pc}

080a0c32 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0c32:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0c34:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0c36:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0c38:	691b      	ldr	r3, [r3, #16]
 80a0c3a:	4798      	blx	r3
 80a0c3c:	b118      	cbz	r0, 80a0c46 <_ZN3UDP4peekEv+0x14>
 80a0c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0c40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0c42:	5cd0      	ldrb	r0, [r2, r3]
 80a0c44:	bd10      	pop	{r4, pc}
 80a0c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0c4a:	bd10      	pop	{r4, pc}

080a0c4c <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0c4c:	4770      	bx	lr

080a0c4e <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0c4e:	4603      	mov	r3, r0
 80a0c50:	4608      	mov	r0, r1
 80a0c52:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0c54:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0c56:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0c58:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0c5a:	6803      	ldr	r3, [r0, #0]
 80a0c5c:	1a52      	subs	r2, r2, r1
 80a0c5e:	68db      	ldr	r3, [r3, #12]
 80a0c60:	4421      	add	r1, r4
}
 80a0c62:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0c64:	4718      	bx	r3

080a0c66 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0c66:	f1a0 0010 	sub.w	r0, r0, #16
 80a0c6a:	f7ff bff0 	b.w	80a0c4e <_ZNK3UDP7printToER5Print>

080a0c6e <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0c70:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0c72:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0c74:	460f      	mov	r7, r1
 80a0c76:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0c78:	f7ff fe7c 	bl	80a0974 <_ZN5spark12NetworkClass4fromEm>
 80a0c7c:	6803      	ldr	r3, [r0, #0]
 80a0c7e:	68db      	ldr	r3, [r3, #12]
 80a0c80:	4798      	blx	r3
 80a0c82:	b1b8      	cbz	r0, 80a0cb4 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0c84:	2102      	movs	r1, #2
 80a0c86:	463b      	mov	r3, r7
 80a0c88:	2211      	movs	r2, #17
 80a0c8a:	4608      	mov	r0, r1
 80a0c8c:	9600      	str	r6, [sp, #0]
 80a0c8e:	f7ff fbe3 	bl	80a0458 <socket_create>
 80a0c92:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0c94:	f7ff fbd8 	bl	80a0448 <socket_handle_valid>
 80a0c98:	4604      	mov	r4, r0
 80a0c9a:	b130      	cbz	r0, 80a0caa <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0c9c:	2300      	movs	r3, #0
 80a0c9e:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0ca0:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0ca2:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0ca4:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0ca6:	2001      	movs	r0, #1
 80a0ca8:	e004      	b.n	80a0cb4 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0caa:	682b      	ldr	r3, [r5, #0]
 80a0cac:	4628      	mov	r0, r5
 80a0cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0cb0:	4798      	blx	r3
            bound = false;
 80a0cb2:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a0cb4:	b003      	add	sp, #12
 80a0cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0cb8 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a0cb8:	b538      	push	{r3, r4, r5, lr}
 80a0cba:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0cbc:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0cbe:	f7ff fbeb 	bl	80a0498 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0cc2:	4285      	cmp	r5, r0
 80a0cc4:	d002      	beq.n	80a0ccc <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0cc6:	6960      	ldr	r0, [r4, #20]
 80a0cc8:	f7ff fbde 	bl	80a0488 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0ccc:	f7ff fbe4 	bl	80a0498 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0cd0:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0cd2:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0cd4:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0cd6:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0cd8:	bd38      	pop	{r3, r4, r5, pc}

080a0cda <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0cda:	b530      	push	{r4, r5, lr}
 80a0cdc:	b087      	sub	sp, #28
 80a0cde:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a0ce2:	2502      	movs	r5, #2
 80a0ce4:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a0ce8:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0cec:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0cee:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0cf0:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0cf4:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a0cf8:	799c      	ldrb	r4, [r3, #6]
 80a0cfa:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0cfe:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0d00:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0d02:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0d06:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a0d0a:	2310      	movs	r3, #16
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	ab02      	add	r3, sp, #8
 80a0d10:	9300      	str	r3, [sp, #0]
 80a0d12:	6940      	ldr	r0, [r0, #20]
 80a0d14:	2300      	movs	r3, #0
 80a0d16:	f7ff fbaf 	bl	80a0478 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a0d1a:	b007      	add	sp, #28
 80a0d1c:	bd30      	pop	{r4, r5, pc}

080a0d1e <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0d1e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0d20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0d22:	4605      	mov	r5, r0
 80a0d24:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0d26:	b113      	cbz	r3, 80a0d2e <_ZN3UDP5writeEPKhj+0x10>
 80a0d28:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a0d2a:	1a24      	subs	r4, r4, r0
 80a0d2c:	e000      	b.n	80a0d30 <_ZN3UDP5writeEPKhj+0x12>
 80a0d2e:	461c      	mov	r4, r3
 80a0d30:	4294      	cmp	r4, r2
 80a0d32:	bf28      	it	cs
 80a0d34:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a0d36:	4418      	add	r0, r3
 80a0d38:	4622      	mov	r2, r4
 80a0d3a:	f000 fdaf 	bl	80a189c <memcpy>
    _offset += size;
 80a0d3e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0d40:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a0d42:	4423      	add	r3, r4
 80a0d44:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0d46:	bd38      	pop	{r3, r4, r5, pc}

080a0d48 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0d48:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a0d4a:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0d4c:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a0d4e:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0d50:	460e      	mov	r6, r1
 80a0d52:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a0d54:	4798      	blx	r3
 80a0d56:	b188      	cbz	r0, 80a0d7c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a0d58:	6823      	ldr	r3, [r4, #0]
 80a0d5a:	4620      	mov	r0, r4
 80a0d5c:	691b      	ldr	r3, [r3, #16]
 80a0d5e:	4798      	blx	r3
 80a0d60:	4285      	cmp	r5, r0
 80a0d62:	bfa8      	it	ge
 80a0d64:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a0d66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0d68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0d6a:	462a      	mov	r2, r5
 80a0d6c:	4419      	add	r1, r3
 80a0d6e:	4630      	mov	r0, r6
 80a0d70:	f000 fd94 	bl	80a189c <memcpy>
      _offset += read;
 80a0d74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0d76:	442b      	add	r3, r5
 80a0d78:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a0d7a:	e001      	b.n	80a0d80 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a0d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a0d80:	4628      	mov	r0, r5
 80a0d82:	bd70      	pop	{r4, r5, r6, pc}

080a0d84 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0d86:	4604      	mov	r4, r0
 80a0d88:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0d8a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0d8c:	460d      	mov	r5, r1
 80a0d8e:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0d90:	f7ff fdf0 	bl	80a0974 <_ZN5spark12NetworkClass4fromEm>
 80a0d94:	6803      	ldr	r3, [r0, #0]
 80a0d96:	68db      	ldr	r3, [r3, #12]
 80a0d98:	4798      	blx	r3
 80a0d9a:	b310      	cbz	r0, 80a0de2 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0d9c:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0d9e:	f7ff fb7b 	bl	80a0498 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0da2:	4287      	cmp	r7, r0
 80a0da4:	d01d      	beq.n	80a0de2 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0da6:	b1e5      	cbz	r5, 80a0de2 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a0da8:	ab08      	add	r3, sp, #32
 80a0daa:	2210      	movs	r2, #16
 80a0dac:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	eb0d 0302 	add.w	r3, sp, r2
 80a0db6:	9300      	str	r3, [sp, #0]
 80a0db8:	4629      	mov	r1, r5
 80a0dba:	2300      	movs	r3, #0
 80a0dbc:	4632      	mov	r2, r6
 80a0dbe:	6960      	ldr	r0, [r4, #20]
 80a0dc0:	f7ff fb52 	bl	80a0468 <socket_receivefrom>
        if (ret >= 0)
 80a0dc4:	1e05      	subs	r5, r0, #0
 80a0dc6:	db0e      	blt.n	80a0de6 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0dc8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a0dcc:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0dd0:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0dd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0dd6:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0dd8:	f104 001c 	add.w	r0, r4, #28
 80a0ddc:	f7ff fd5a 	bl	80a0894 <_ZN9IPAddressaSEPKh>
 80a0de0:	e001      	b.n	80a0de6 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a0de2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a0de6:	4628      	mov	r0, r5
 80a0de8:	b009      	add	sp, #36	; 0x24
 80a0dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0dec <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0df0:	4606      	mov	r6, r0
 80a0df2:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a0df4:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0df6:	460d      	mov	r5, r1
 80a0df8:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a0dfa:	f7ff fdbb 	bl	80a0974 <_ZN5spark12NetworkClass4fromEm>
 80a0dfe:	6803      	ldr	r3, [r0, #0]
 80a0e00:	68db      	ldr	r3, [r3, #12]
 80a0e02:	4798      	blx	r3
 80a0e04:	b1f8      	cbz	r0, 80a0e46 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a0e06:	4628      	mov	r0, r5
 80a0e08:	f000 fd84 	bl	80a1914 <strlen>
 80a0e0c:	2400      	movs	r4, #0
 80a0e0e:	b281      	uxth	r1, r0
 80a0e10:	9400      	str	r4, [sp, #0]
 80a0e12:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a0e14:	aa03      	add	r2, sp, #12
 80a0e16:	4628      	mov	r0, r5
 80a0e18:	f7ff fbd6 	bl	80a05c8 <inet_gethostbyname>
 80a0e1c:	b990      	cbnz	r0, 80a0e44 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a0e1e:	a903      	add	r1, sp, #12
 80a0e20:	a808      	add	r0, sp, #32
 80a0e22:	f7ff fd03 	bl	80a082c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a0e26:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0e28:	ac0f      	add	r4, sp, #60	; 0x3c
 80a0e2a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a0e2c:	4b07      	ldr	r3, [pc, #28]	; (80a0e4c <_ZN3UDP11beginPacketEPKct+0x60>)
 80a0e2e:	ad09      	add	r5, sp, #36	; 0x24
 80a0e30:	930e      	str	r3, [sp, #56]	; 0x38
 80a0e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0e36:	682b      	ldr	r3, [r5, #0]
 80a0e38:	4642      	mov	r2, r8
 80a0e3a:	7023      	strb	r3, [r4, #0]
 80a0e3c:	a90e      	add	r1, sp, #56	; 0x38
 80a0e3e:	4630      	mov	r0, r6
 80a0e40:	47b8      	blx	r7
 80a0e42:	e000      	b.n	80a0e46 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a0e44:	4620      	mov	r0, r4
}
 80a0e46:	b014      	add	sp, #80	; 0x50
 80a0e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0e4c:	080a1980 	.word	0x080a1980

080a0e50 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a0e50:	b570      	push	{r4, r5, r6, lr}
 80a0e52:	4604      	mov	r4, r0
 80a0e54:	4606      	mov	r6, r0
 80a0e56:	4b05      	ldr	r3, [pc, #20]	; (80a0e6c <_ZN3UDP8remoteIPEv+0x1c>)
 80a0e58:	f101 0520 	add.w	r5, r1, #32
 80a0e5c:	f844 3b04 	str.w	r3, [r4], #4
 80a0e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0e64:	682b      	ldr	r3, [r5, #0]
 80a0e66:	4630      	mov	r0, r6
 80a0e68:	7023      	strb	r3, [r4, #0]
 80a0e6a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e6c:	080a1980 	.word	0x080a1980

080a0e70 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e72:	4694      	mov	ip, r2
 80a0e74:	468e      	mov	lr, r1
 80a0e76:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0e78:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0e7a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0e7c:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a0e7e:	4a09      	ldr	r2, [pc, #36]	; (80a0ea4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a0e80:	ac03      	add	r4, sp, #12
 80a0e82:	1d1d      	adds	r5, r3, #4
 80a0e84:	9202      	str	r2, [sp, #8]
 80a0e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0e8a:	682b      	ldr	r3, [r5, #0]
 80a0e8c:	4662      	mov	r2, ip
 80a0e8e:	7023      	strb	r3, [r4, #0]
 80a0e90:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a0e94:	4671      	mov	r1, lr
 80a0e96:	9300      	str	r3, [sp, #0]
 80a0e98:	4630      	mov	r0, r6
 80a0e9a:	ab02      	add	r3, sp, #8
 80a0e9c:	47b8      	blx	r7
    }
 80a0e9e:	b009      	add	sp, #36	; 0x24
 80a0ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ea2:	bf00      	nop
 80a0ea4:	080a1980 	.word	0x080a1980

080a0ea8 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0eaa:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0eac:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0eae:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0eb0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a0eb2:	4b0d      	ldr	r3, [pc, #52]	; (80a0ee8 <_ZN3UDP9endPacketEv+0x40>)
 80a0eb4:	ad03      	add	r5, sp, #12
 80a0eb6:	f100 0620 	add.w	r6, r0, #32
 80a0eba:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a0ebe:	9302      	str	r3, [sp, #8]
 80a0ec0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0ec4:	6833      	ldr	r3, [r6, #0]
 80a0ec6:	4672      	mov	r2, lr
 80a0ec8:	702b      	strb	r3, [r5, #0]
 80a0eca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a0ecc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0ece:	9300      	str	r3, [sp, #0]
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	ab02      	add	r3, sp, #8
 80a0ed4:	47b8      	blx	r7
 80a0ed6:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a0ed8:	6823      	ldr	r3, [r4, #0]
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	69db      	ldr	r3, [r3, #28]
 80a0ede:	4798      	blx	r3
    return result;
}
 80a0ee0:	4628      	mov	r0, r5
 80a0ee2:	b009      	add	sp, #36	; 0x24
 80a0ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ee6:	bf00      	nop
 80a0ee8:	080a1980 	.word	0x080a1980

080a0eec <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a0eec:	b538      	push	{r3, r4, r5, lr}
 80a0eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ef2:	6083      	str	r3, [r0, #8]
 80a0ef4:	4b0b      	ldr	r3, [pc, #44]	; (80a0f24 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0ef6:	2500      	movs	r5, #0
 80a0ef8:	f103 0208 	add.w	r2, r3, #8
 80a0efc:	336c      	adds	r3, #108	; 0x6c
 80a0efe:	6002      	str	r2, [r0, #0]
 80a0f00:	6103      	str	r3, [r0, #16]
 80a0f02:	6045      	str	r5, [r0, #4]
 80a0f04:	4604      	mov	r4, r0
 80a0f06:	f7ff fac7 	bl	80a0498 <socket_handle_invalid>
 80a0f0a:	6160      	str	r0, [r4, #20]
 80a0f0c:	f104 001c 	add.w	r0, r4, #28
 80a0f10:	f7ff fc7e 	bl	80a0810 <_ZN9IPAddressC1Ev>
 80a0f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0f18:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a0f1a:	8725      	strh	r5, [r4, #56]	; 0x38
 80a0f1c:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a0f1e:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a0f20:	4620      	mov	r0, r4
 80a0f22:	bd38      	pop	{r3, r4, r5, pc}
 80a0f24:	080a1ae0 	.word	0x080a1ae0

080a0f28 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a0f28:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a0f2a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a0f2e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a0f30:	b123      	cbz	r3, 80a0f3c <_ZN3UDP13releaseBufferEv+0x14>
 80a0f32:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a0f34:	b110      	cbz	r0, 80a0f3c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a0f36:	2101      	movs	r1, #1
 80a0f38:	f000 fb57 	bl	80a15ea <_ZdlPvj>
    }
    _buffer = NULL;
 80a0f3c:	2300      	movs	r3, #0
 80a0f3e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a0f40:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a0f44:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0f46:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0f48:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0f4a:	bd10      	pop	{r4, pc}

080a0f4c <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a0f4c:	b570      	push	{r4, r5, r6, lr}
 80a0f4e:	4604      	mov	r4, r0
 80a0f50:	4616      	mov	r6, r2
 80a0f52:	460d      	mov	r5, r1
    releaseBuffer();
 80a0f54:	f7ff ffe8 	bl	80a0f28 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a0f58:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a0f5a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a0f5c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a0f5e:	b93e      	cbnz	r6, 80a0f70 <_ZN3UDP9setBufferEjPh+0x24>
 80a0f60:	b135      	cbz	r5, 80a0f70 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a0f62:	4628      	mov	r0, r5
 80a0f64:	f7ff f899 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a0f68:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a0f6a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a0f6c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a0f70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a0f72:	b103      	cbz	r3, 80a0f76 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a0f74:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a0f76:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a0f78:	3000      	adds	r0, #0
 80a0f7a:	bf18      	it	ne
 80a0f7c:	2001      	movne	r0, #1
 80a0f7e:	bd70      	pop	{r4, r5, r6, pc}

080a0f80 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a0f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f82:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a0f84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a0f86:	4605      	mov	r5, r0
 80a0f88:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a0f8a:	b91a      	cbnz	r2, 80a0f94 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a0f8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a0f8e:	b109      	cbz	r1, 80a0f94 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a0f90:	f7ff ffdc 	bl	80a0f4c <_ZN3UDP9setBufferEjPh>
 80a0f94:	f105 0620 	add.w	r6, r5, #32
 80a0f98:	3404      	adds	r4, #4
 80a0f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0f9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0f9e:	6823      	ldr	r3, [r4, #0]
 80a0fa0:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0fa2:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a0fa4:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0fa6:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0fa8:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a0faa:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a0fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0fae <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a0fae:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a0fb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a0fb2:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a0fb4:	b91a      	cbnz	r2, 80a0fbe <_ZN3UDP11parsePacketEm+0x10>
 80a0fb6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a0fb8:	b109      	cbz	r1, 80a0fbe <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a0fba:	f7ff ffc7 	bl	80a0f4c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a0fbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0fc0:	2300      	movs	r3, #0
 80a0fc2:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0fc4:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a0fc6:	b141      	cbz	r1, 80a0fda <_ZN3UDP11parsePacketEm+0x2c>
 80a0fc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0fca:	b132      	cbz	r2, 80a0fda <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a0fcc:	6820      	ldr	r0, [r4, #0]
 80a0fce:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a0fd0:	4620      	mov	r0, r4
 80a0fd2:	47a8      	blx	r5
        if (result>0) {
 80a0fd4:	2800      	cmp	r0, #0
            _total = result;
 80a0fd6:	bfc8      	it	gt
 80a0fd8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a0fda:	6823      	ldr	r3, [r4, #0]
 80a0fdc:	4620      	mov	r0, r4
}
 80a0fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a0fe2:	691b      	ldr	r3, [r3, #16]
 80a0fe4:	4718      	bx	r3

080a0fe6 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0fe6:	4770      	bx	lr

080a0fe8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0fe8:	7441      	strb	r1, [r0, #17]
 80a0fea:	4770      	bx	lr

080a0fec <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0fec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0fee:	7c00      	ldrb	r0, [r0, #16]
 80a0ff0:	f7ff faa2 	bl	80a0538 <HAL_USART_Available_Data_For_Write>
}
 80a0ff4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ff8:	bd08      	pop	{r3, pc}

080a0ffa <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0ffa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0ffc:	7c00      	ldrb	r0, [r0, #16]
 80a0ffe:	f7ff fa73 	bl	80a04e8 <HAL_USART_Available_Data>
}
 80a1002:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1006:	bd08      	pop	{r3, pc}

080a1008 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1008:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a100a:	7c00      	ldrb	r0, [r0, #16]
 80a100c:	f7ff fa7c 	bl	80a0508 <HAL_USART_Peek_Data>
}
 80a1010:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1014:	bf28      	it	cs
 80a1016:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a101a:	bd08      	pop	{r3, pc}

080a101c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a101c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a101e:	7c00      	ldrb	r0, [r0, #16]
 80a1020:	f7ff fa6a 	bl	80a04f8 <HAL_USART_Read_Data>
}
 80a1024:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1028:	bf28      	it	cs
 80a102a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a102e:	bd08      	pop	{r3, pc}

080a1030 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1030:	7c00      	ldrb	r0, [r0, #16]
 80a1032:	f7ff ba71 	b.w	80a0518 <HAL_USART_Flush_Data>

080a1036 <_ZN11USARTSerialD0Ev>:
 80a1036:	b510      	push	{r4, lr}
 80a1038:	4604      	mov	r4, r0
 80a103a:	2114      	movs	r1, #20
 80a103c:	f000 fad5 	bl	80a15ea <_ZdlPvj>
 80a1040:	4620      	mov	r0, r4
 80a1042:	bd10      	pop	{r4, pc}

080a1044 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1044:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1046:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1048:	4604      	mov	r4, r0
 80a104a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a104c:	b925      	cbnz	r5, 80a1058 <_ZN11USARTSerial5writeEh+0x14>
 80a104e:	7c00      	ldrb	r0, [r0, #16]
 80a1050:	f7ff fa72 	bl	80a0538 <HAL_USART_Available_Data_For_Write>
 80a1054:	2800      	cmp	r0, #0
 80a1056:	dd05      	ble.n	80a1064 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1058:	4631      	mov	r1, r6
 80a105a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a105c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1060:	f7ff ba3a 	b.w	80a04d8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1064:	4628      	mov	r0, r5
 80a1066:	bd70      	pop	{r4, r5, r6, pc}

080a1068 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1068:	b510      	push	{r4, lr}
 80a106a:	4604      	mov	r4, r0
 80a106c:	4608      	mov	r0, r1
 80a106e:	4611      	mov	r1, r2
 80a1070:	2200      	movs	r2, #0
 80a1072:	6062      	str	r2, [r4, #4]
 80a1074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1078:	60a2      	str	r2, [r4, #8]
 80a107a:	4a05      	ldr	r2, [pc, #20]	; (80a1090 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a107c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a107e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1080:	2201      	movs	r2, #1
 80a1082:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1084:	461a      	mov	r2, r3
 80a1086:	f7ff fa1f 	bl	80a04c8 <HAL_USART_Init>
}
 80a108a:	4620      	mov	r0, r4
 80a108c:	bd10      	pop	{r4, pc}
 80a108e:	bf00      	nop
 80a1090:	080a1b58 	.word	0x080a1b58

080a1094 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1094:	7c00      	ldrb	r0, [r0, #16]
 80a1096:	f7ff ba47 	b.w	80a0528 <HAL_USART_Is_Enabled>
	...

080a109c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a109c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a109e:	4d0c      	ldr	r5, [pc, #48]	; (80a10d0 <_Z22__fetch_global_Serial1v+0x34>)
 80a10a0:	6829      	ldr	r1, [r5, #0]
 80a10a2:	f011 0401 	ands.w	r4, r1, #1
 80a10a6:	d111      	bne.n	80a10cc <_Z22__fetch_global_Serial1v+0x30>
 80a10a8:	4628      	mov	r0, r5
 80a10aa:	f7fe fffa 	bl	80a00a2 <__cxa_guard_acquire>
 80a10ae:	b168      	cbz	r0, 80a10cc <_Z22__fetch_global_Serial1v+0x30>
 80a10b0:	4a08      	ldr	r2, [pc, #32]	; (80a10d4 <_Z22__fetch_global_Serial1v+0x38>)
 80a10b2:	4621      	mov	r1, r4
 80a10b4:	4b08      	ldr	r3, [pc, #32]	; (80a10d8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a10b6:	4809      	ldr	r0, [pc, #36]	; (80a10dc <_Z22__fetch_global_Serial1v+0x40>)
 80a10b8:	f7ff ffd6 	bl	80a1068 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a10bc:	4628      	mov	r0, r5
 80a10be:	f7fe fff5 	bl	80a00ac <__cxa_guard_release>
 80a10c2:	4a07      	ldr	r2, [pc, #28]	; (80a10e0 <_Z22__fetch_global_Serial1v+0x44>)
 80a10c4:	4907      	ldr	r1, [pc, #28]	; (80a10e4 <_Z22__fetch_global_Serial1v+0x48>)
 80a10c6:	4805      	ldr	r0, [pc, #20]	; (80a10dc <_Z22__fetch_global_Serial1v+0x40>)
 80a10c8:	f000 fa8a 	bl	80a15e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a10cc:	4803      	ldr	r0, [pc, #12]	; (80a10dc <_Z22__fetch_global_Serial1v+0x40>)
 80a10ce:	bd38      	pop	{r3, r4, r5, pc}
 80a10d0:	200001b8 	.word	0x200001b8
 80a10d4:	200001bc 	.word	0x200001bc
 80a10d8:	20000134 	.word	0x20000134
 80a10dc:	20000120 	.word	0x20000120
 80a10e0:	20000080 	.word	0x20000080
 80a10e4:	080a0fe7 	.word	0x080a0fe7

080a10e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10e8:	7441      	strb	r1, [r0, #17]
 80a10ea:	4770      	bx	lr

080a10ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a10ec:	4770      	bx	lr

080a10ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a10ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a10f0:	2100      	movs	r1, #0
 80a10f2:	7c00      	ldrb	r0, [r0, #16]
 80a10f4:	f7ff fa48 	bl	80a0588 <HAL_USB_USART_Receive_Data>
}
 80a10f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a10fc:	bf28      	it	cs
 80a10fe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1102:	bd08      	pop	{r3, pc}

080a1104 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1104:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1106:	2101      	movs	r1, #1
 80a1108:	7c00      	ldrb	r0, [r0, #16]
 80a110a:	f7ff fa3d 	bl	80a0588 <HAL_USB_USART_Receive_Data>
}
 80a110e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1112:	bf28      	it	cs
 80a1114:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1118:	bd08      	pop	{r3, pc}

080a111a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a111a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a111c:	7c00      	ldrb	r0, [r0, #16]
 80a111e:	f7ff fa2b 	bl	80a0578 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1122:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1126:	bd08      	pop	{r3, pc}

080a1128 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1128:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a112a:	7c00      	ldrb	r0, [r0, #16]
 80a112c:	f7ff fa1c 	bl	80a0568 <HAL_USB_USART_Available_Data>
}
 80a1130:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1134:	bd08      	pop	{r3, pc}

080a1136 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1136:	7c00      	ldrb	r0, [r0, #16]
 80a1138:	f7ff ba36 	b.w	80a05a8 <HAL_USB_USART_Flush_Data>

080a113c <_ZN9USBSerialD0Ev>:
 80a113c:	b510      	push	{r4, lr}
 80a113e:	4604      	mov	r4, r0
 80a1140:	2114      	movs	r1, #20
 80a1142:	f000 fa52 	bl	80a15ea <_ZdlPvj>
 80a1146:	4620      	mov	r0, r4
 80a1148:	bd10      	pop	{r4, pc}

080a114a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a114a:	b538      	push	{r3, r4, r5, lr}
 80a114c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a114e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1150:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1152:	f7ff fa11 	bl	80a0578 <HAL_USB_USART_Available_Data_For_Write>
 80a1156:	2800      	cmp	r0, #0
 80a1158:	dc01      	bgt.n	80a115e <_ZN9USBSerial5writeEh+0x14>
 80a115a:	7c60      	ldrb	r0, [r4, #17]
 80a115c:	b128      	cbz	r0, 80a116a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a115e:	4629      	mov	r1, r5
 80a1160:	7c20      	ldrb	r0, [r4, #16]
 80a1162:	f7ff fa19 	bl	80a0598 <HAL_USB_USART_Send_Data>
 80a1166:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a116a:	bd38      	pop	{r3, r4, r5, pc}

080a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a116c:	b510      	push	{r4, lr}
 80a116e:	4604      	mov	r4, r0
 80a1170:	2300      	movs	r3, #0
 80a1172:	6063      	str	r3, [r4, #4]
 80a1174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1178:	60a3      	str	r3, [r4, #8]
 80a117a:	4b05      	ldr	r3, [pc, #20]	; (80a1190 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a117c:	4608      	mov	r0, r1
 80a117e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1180:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1182:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1184:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1186:	4611      	mov	r1, r2
 80a1188:	f7ff f9de 	bl	80a0548 <HAL_USB_USART_Init>
}
 80a118c:	4620      	mov	r0, r4
 80a118e:	bd10      	pop	{r4, pc}
 80a1190:	080a1b88 	.word	0x080a1b88

080a1194 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1194:	2200      	movs	r2, #0
 80a1196:	7c00      	ldrb	r0, [r0, #16]
 80a1198:	f7ff b9de 	b.w	80a0558 <HAL_USB_USART_Begin>

080a119c <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a119c:	7c00      	ldrb	r0, [r0, #16]
 80a119e:	f7ff ba0b 	b.w	80a05b8 <HAL_USB_USART_Is_Enabled>

080a11a2 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a11a2:	f7ff bffb 	b.w	80a119c <_ZN9USBSerial9isEnabledEv>
	...

080a11a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a11a8:	b510      	push	{r4, lr}
 80a11aa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11ac:	2214      	movs	r2, #20
 80a11ae:	2100      	movs	r1, #0
 80a11b0:	f000 fb7f 	bl	80a18b2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11b4:	4b05      	ldr	r3, [pc, #20]	; (80a11cc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11b6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11b8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a11ba:	4b05      	ldr	r3, [pc, #20]	; (80a11d0 <_Z19acquireSerialBufferv+0x28>)
 80a11bc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11be:	f240 1301 	movw	r3, #257	; 0x101
 80a11c2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11c4:	2381      	movs	r3, #129	; 0x81
 80a11c6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11c8:	bd10      	pop	{r4, pc}
 80a11ca:	bf00      	nop
 80a11cc:	200002c5 	.word	0x200002c5
 80a11d0:	20000244 	.word	0x20000244

080a11d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a11d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11d6:	4d0e      	ldr	r5, [pc, #56]	; (80a1210 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a11d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a11da:	a801      	add	r0, sp, #4
 80a11dc:	f7ff ffe4 	bl	80a11a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11e0:	6829      	ldr	r1, [r5, #0]
 80a11e2:	f011 0401 	ands.w	r4, r1, #1
 80a11e6:	d110      	bne.n	80a120a <_Z16_fetch_usbserialv+0x36>
 80a11e8:	4628      	mov	r0, r5
 80a11ea:	f7fe ff5a 	bl	80a00a2 <__cxa_guard_acquire>
 80a11ee:	b160      	cbz	r0, 80a120a <_Z16_fetch_usbserialv+0x36>
 80a11f0:	aa01      	add	r2, sp, #4
 80a11f2:	4621      	mov	r1, r4
 80a11f4:	4807      	ldr	r0, [pc, #28]	; (80a1214 <_Z16_fetch_usbserialv+0x40>)
 80a11f6:	f7ff ffb9 	bl	80a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11fa:	4628      	mov	r0, r5
 80a11fc:	f7fe ff56 	bl	80a00ac <__cxa_guard_release>
 80a1200:	4a05      	ldr	r2, [pc, #20]	; (80a1218 <_Z16_fetch_usbserialv+0x44>)
 80a1202:	4906      	ldr	r1, [pc, #24]	; (80a121c <_Z16_fetch_usbserialv+0x48>)
 80a1204:	4803      	ldr	r0, [pc, #12]	; (80a1214 <_Z16_fetch_usbserialv+0x40>)
 80a1206:	f000 f9eb 	bl	80a15e0 <__aeabi_atexit>
	return _usbserial;
}
 80a120a:	4802      	ldr	r0, [pc, #8]	; (80a1214 <_Z16_fetch_usbserialv+0x40>)
 80a120c:	b007      	add	sp, #28
 80a120e:	bd30      	pop	{r4, r5, pc}
 80a1210:	20000240 	.word	0x20000240
 80a1214:	200003c8 	.word	0x200003c8
 80a1218:	20000080 	.word	0x20000080
 80a121c:	080a10ed 	.word	0x080a10ed

080a1220 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1220:	b510      	push	{r4, lr}
 80a1222:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1224:	2214      	movs	r2, #20
 80a1226:	2100      	movs	r1, #0
 80a1228:	f000 fb43 	bl	80a18b2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a122c:	4b05      	ldr	r3, [pc, #20]	; (80a1244 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a122e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1230:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1232:	4b05      	ldr	r3, [pc, #20]	; (80a1248 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1234:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1236:	f240 1301 	movw	r3, #257	; 0x101
 80a123a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a123c:	2381      	movs	r3, #129	; 0x81
 80a123e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1240:	bd10      	pop	{r4, pc}
 80a1242:	bf00      	nop
 80a1244:	20000478 	.word	0x20000478
 80a1248:	200003e0 	.word	0x200003e0

080a124c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a124c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a124e:	4c0e      	ldr	r4, [pc, #56]	; (80a1288 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1250:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1252:	a801      	add	r0, sp, #4
 80a1254:	f7ff ffe4 	bl	80a1220 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1258:	6823      	ldr	r3, [r4, #0]
 80a125a:	07db      	lsls	r3, r3, #31
 80a125c:	d410      	bmi.n	80a1280 <_Z17_fetch_usbserial1v+0x34>
 80a125e:	4620      	mov	r0, r4
 80a1260:	f7fe ff1f 	bl	80a00a2 <__cxa_guard_acquire>
 80a1264:	b160      	cbz	r0, 80a1280 <_Z17_fetch_usbserial1v+0x34>
 80a1266:	aa01      	add	r2, sp, #4
 80a1268:	2101      	movs	r1, #1
 80a126a:	4808      	ldr	r0, [pc, #32]	; (80a128c <_Z17_fetch_usbserial1v+0x40>)
 80a126c:	f7ff ff7e 	bl	80a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1270:	4620      	mov	r0, r4
 80a1272:	f7fe ff1b 	bl	80a00ac <__cxa_guard_release>
 80a1276:	4a06      	ldr	r2, [pc, #24]	; (80a1290 <_Z17_fetch_usbserial1v+0x44>)
 80a1278:	4906      	ldr	r1, [pc, #24]	; (80a1294 <_Z17_fetch_usbserial1v+0x48>)
 80a127a:	4804      	ldr	r0, [pc, #16]	; (80a128c <_Z17_fetch_usbserial1v+0x40>)
 80a127c:	f000 f9b0 	bl	80a15e0 <__aeabi_atexit>
  return _usbserial1;
}
 80a1280:	4802      	ldr	r0, [pc, #8]	; (80a128c <_Z17_fetch_usbserial1v+0x40>)
 80a1282:	b006      	add	sp, #24
 80a1284:	bd10      	pop	{r4, pc}
 80a1286:	bf00      	nop
 80a1288:	200003dc 	.word	0x200003dc
 80a128c:	20000464 	.word	0x20000464
 80a1290:	20000080 	.word	0x20000080
 80a1294:	080a10ed 	.word	0x080a10ed

080a1298 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1298:	2200      	movs	r2, #0
 80a129a:	4611      	mov	r1, r2
 80a129c:	6840      	ldr	r0, [r0, #4]
 80a129e:	f7ff b9ef 	b.w	80a0680 <network_ready>

080a12a2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a12a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12a4:	4616      	mov	r6, r2
 80a12a6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a12a8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a12aa:	460f      	mov	r7, r1
 80a12ac:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a12ae:	2100      	movs	r1, #0
 80a12b0:	a803      	add	r0, sp, #12
 80a12b2:	f000 fafe 	bl	80a18b2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12b6:	4630      	mov	r0, r6
 80a12b8:	f000 fb2c 	bl	80a1914 <strlen>
 80a12bc:	2500      	movs	r5, #0
 80a12be:	9500      	str	r5, [sp, #0]
 80a12c0:	b281      	uxth	r1, r0
 80a12c2:	687b      	ldr	r3, [r7, #4]
 80a12c4:	aa03      	add	r2, sp, #12
 80a12c6:	4630      	mov	r0, r6
 80a12c8:	f7ff f97e 	bl	80a05c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12cc:	b120      	cbz	r0, 80a12d8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a12ce:	4629      	mov	r1, r5
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	f7ff fabd 	bl	80a0850 <_ZN9IPAddressC1Em>
 80a12d6:	e003      	b.n	80a12e0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a12d8:	a903      	add	r1, sp, #12
 80a12da:	4620      	mov	r0, r4
 80a12dc:	f7ff faa6 	bl	80a082c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a12e0:	4620      	mov	r0, r4
 80a12e2:	b009      	add	sp, #36	; 0x24
 80a12e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a12e6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a12e6:	2200      	movs	r2, #0
 80a12e8:	4611      	mov	r1, r2
 80a12ea:	6840      	ldr	r0, [r0, #4]
 80a12ec:	f7ff b9e8 	b.w	80a06c0 <network_listening>

080a12f0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a12f0:	2200      	movs	r2, #0
 80a12f2:	4611      	mov	r1, r2
 80a12f4:	6840      	ldr	r0, [r0, #4]
 80a12f6:	f7ff b9f3 	b.w	80a06e0 <network_get_listen_timeout>

080a12fa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a12fa:	2200      	movs	r2, #0
 80a12fc:	6840      	ldr	r0, [r0, #4]
 80a12fe:	f7ff b9e7 	b.w	80a06d0 <network_set_listen_timeout>

080a1302 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1302:	2200      	movs	r2, #0
 80a1304:	f081 0101 	eor.w	r1, r1, #1
 80a1308:	6840      	ldr	r0, [r0, #4]
 80a130a:	f7ff b9d1 	b.w	80a06b0 <network_listen>

080a130e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a130e:	2300      	movs	r3, #0
 80a1310:	461a      	mov	r2, r3
 80a1312:	4619      	mov	r1, r3
 80a1314:	6840      	ldr	r0, [r0, #4]
 80a1316:	f7ff b9c3 	b.w	80a06a0 <network_off>

080a131a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a131a:	2300      	movs	r3, #0
 80a131c:	461a      	mov	r2, r3
 80a131e:	4619      	mov	r1, r3
 80a1320:	6840      	ldr	r0, [r0, #4]
 80a1322:	f7ff b9b5 	b.w	80a0690 <network_on>

080a1326 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1326:	2200      	movs	r2, #0
 80a1328:	4611      	mov	r1, r2
 80a132a:	6840      	ldr	r0, [r0, #4]
 80a132c:	f7ff b998 	b.w	80a0660 <network_connecting>

080a1330 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1330:	2200      	movs	r2, #0
 80a1332:	2102      	movs	r1, #2
 80a1334:	6840      	ldr	r0, [r0, #4]
 80a1336:	f7ff b99b 	b.w	80a0670 <network_disconnect>

080a133a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a133a:	2300      	movs	r3, #0
 80a133c:	461a      	mov	r2, r3
 80a133e:	6840      	ldr	r0, [r0, #4]
 80a1340:	f7ff b986 	b.w	80a0650 <network_connect>

080a1344 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1344:	4b02      	ldr	r3, [pc, #8]	; (80a1350 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1346:	2204      	movs	r2, #4
 80a1348:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a134a:	4a02      	ldr	r2, [pc, #8]	; (80a1354 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a134c:	601a      	str	r2, [r3, #0]
 80a134e:	4770      	bx	lr
 80a1350:	2000057c 	.word	0x2000057c
 80a1354:	080a1bb8 	.word	0x080a1bb8

080a1358 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1358:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a135a:	4b14      	ldr	r3, [pc, #80]	; (80a13ac <serialEventRun+0x54>)
 80a135c:	b133      	cbz	r3, 80a136c <serialEventRun+0x14>
 80a135e:	f7ff ff39 	bl	80a11d4 <_Z16_fetch_usbserialv>
 80a1362:	6803      	ldr	r3, [r0, #0]
 80a1364:	691b      	ldr	r3, [r3, #16]
 80a1366:	4798      	blx	r3
 80a1368:	2800      	cmp	r0, #0
 80a136a:	dc16      	bgt.n	80a139a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a136c:	4b10      	ldr	r3, [pc, #64]	; (80a13b0 <serialEventRun+0x58>)
 80a136e:	b133      	cbz	r3, 80a137e <serialEventRun+0x26>
 80a1370:	f7ff fe94 	bl	80a109c <_Z22__fetch_global_Serial1v>
 80a1374:	6803      	ldr	r3, [r0, #0]
 80a1376:	691b      	ldr	r3, [r3, #16]
 80a1378:	4798      	blx	r3
 80a137a:	2800      	cmp	r0, #0
 80a137c:	dc10      	bgt.n	80a13a0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a137e:	4b0d      	ldr	r3, [pc, #52]	; (80a13b4 <serialEventRun+0x5c>)
 80a1380:	b10b      	cbz	r3, 80a1386 <serialEventRun+0x2e>
 80a1382:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1386:	4b0c      	ldr	r3, [pc, #48]	; (80a13b8 <serialEventRun+0x60>)
 80a1388:	b17b      	cbz	r3, 80a13aa <serialEventRun+0x52>
 80a138a:	f7ff ff5f 	bl	80a124c <_Z17_fetch_usbserial1v>
 80a138e:	6803      	ldr	r3, [r0, #0]
 80a1390:	691b      	ldr	r3, [r3, #16]
 80a1392:	4798      	blx	r3
 80a1394:	2800      	cmp	r0, #0
 80a1396:	dc06      	bgt.n	80a13a6 <serialEventRun+0x4e>
 80a1398:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a139a:	f3af 8000 	nop.w
 80a139e:	e7e5      	b.n	80a136c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a13a0:	f3af 8000 	nop.w
 80a13a4:	e7eb      	b.n	80a137e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a13a6:	f3af 8000 	nop.w
 80a13aa:	bd08      	pop	{r3, pc}
	...

080a13bc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a13bc:	b508      	push	{r3, lr}
	serialEventRun();
 80a13be:	f7ff ffcb 	bl	80a1358 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a13c2:	f7fe ffdf 	bl	80a0384 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a13c6:	4b01      	ldr	r3, [pc, #4]	; (80a13cc <_post_loop+0x10>)
 80a13c8:	6018      	str	r0, [r3, #0]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	2000058c 	.word	0x2000058c

080a13d0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a13d0:	4802      	ldr	r0, [pc, #8]	; (80a13dc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a13d2:	4a03      	ldr	r2, [pc, #12]	; (80a13e0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a13d4:	4903      	ldr	r1, [pc, #12]	; (80a13e4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a13d6:	1a12      	subs	r2, r2, r0
 80a13d8:	f000 ba60 	b.w	80a189c <memcpy>
 80a13dc:	40024000 	.word	0x40024000
 80a13e0:	40024004 	.word	0x40024004
 80a13e4:	080a1c80 	.word	0x080a1c80

080a13e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a13e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a13ea:	2300      	movs	r3, #0
 80a13ec:	9300      	str	r3, [sp, #0]
 80a13ee:	461a      	mov	r2, r3
 80a13f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a13f4:	f7ff f912 	bl	80a061c <system_ctrl_set_result>
}
 80a13f8:	b003      	add	sp, #12
 80a13fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1400 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1400:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1402:	8843      	ldrh	r3, [r0, #2]
 80a1404:	2b0a      	cmp	r3, #10
 80a1406:	d008      	beq.n	80a141a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1408:	2b50      	cmp	r3, #80	; 0x50
 80a140a:	d109      	bne.n	80a1420 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a140c:	4b09      	ldr	r3, [pc, #36]	; (80a1434 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a140e:	681b      	ldr	r3, [r3, #0]
 80a1410:	b13b      	cbz	r3, 80a1422 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1412:	b003      	add	sp, #12
 80a1414:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1418:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a141a:	f7ff ffe5 	bl	80a13e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a141e:	e006      	b.n	80a142e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1420:	2300      	movs	r3, #0
 80a1422:	9300      	str	r3, [sp, #0]
 80a1424:	461a      	mov	r2, r3
 80a1426:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a142a:	f7ff f8f7 	bl	80a061c <system_ctrl_set_result>
        break;
    }
}
 80a142e:	b003      	add	sp, #12
 80a1430:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1434:	20000584 	.word	0x20000584

080a1438 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1438:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a143a:	4c10      	ldr	r4, [pc, #64]	; (80a147c <module_user_init_hook+0x44>)
 80a143c:	4d10      	ldr	r5, [pc, #64]	; (80a1480 <module_user_init_hook+0x48>)
 80a143e:	6823      	ldr	r3, [r4, #0]
 80a1440:	42ab      	cmp	r3, r5
 80a1442:	4b10      	ldr	r3, [pc, #64]	; (80a1484 <module_user_init_hook+0x4c>)
 80a1444:	bf0c      	ite	eq
 80a1446:	2201      	moveq	r2, #1
 80a1448:	2200      	movne	r2, #0
 80a144a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a144c:	d002      	beq.n	80a1454 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a144e:	f7ff ffbf 	bl	80a13d0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1452:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1454:	f7fe ff86 	bl	80a0364 <HAL_RNG_GetRandomNumber>
 80a1458:	4604      	mov	r4, r0
    srand(seed);
 80a145a:	f000 fa33 	bl	80a18c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a145e:	4b0a      	ldr	r3, [pc, #40]	; (80a1488 <module_user_init_hook+0x50>)
 80a1460:	b113      	cbz	r3, 80a1468 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1462:	4620      	mov	r0, r4
 80a1464:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1468:	2100      	movs	r1, #0
 80a146a:	4807      	ldr	r0, [pc, #28]	; (80a1488 <module_user_init_hook+0x50>)
 80a146c:	f7ff f8e0 	bl	80a0630 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1474:	2100      	movs	r1, #0
 80a1476:	4805      	ldr	r0, [pc, #20]	; (80a148c <module_user_init_hook+0x54>)
 80a1478:	f7ff b8c6 	b.w	80a0608 <system_ctrl_set_app_request_handler>
 80a147c:	40024000 	.word	0x40024000
 80a1480:	9a271c1e 	.word	0x9a271c1e
 80a1484:	20000588 	.word	0x20000588
 80a1488:	00000000 	.word	0x00000000
 80a148c:	080a1401 	.word	0x080a1401

080a1490 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1490:	b510      	push	{r4, lr}
 80a1492:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1494:	480f      	ldr	r0, [pc, #60]	; (80a14d4 <pinAvailable+0x44>)
 80a1496:	f7ff fb2f 	bl	80a0af8 <_ZN8SPIClass9isEnabledEv>
 80a149a:	b128      	cbz	r0, 80a14a8 <pinAvailable+0x18>
 80a149c:	f1a4 030d 	sub.w	r3, r4, #13
 80a14a0:	2b02      	cmp	r3, #2
 80a14a2:	d801      	bhi.n	80a14a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a14a4:	2000      	movs	r0, #0
 80a14a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a14a8:	f000 f840 	bl	80a152c <_Z19__fetch_global_Wirev>
 80a14ac:	f7ff f992 	bl	80a07d4 <_ZN7TwoWire9isEnabledEv>
 80a14b0:	b108      	cbz	r0, 80a14b6 <pinAvailable+0x26>
 80a14b2:	2c01      	cmp	r4, #1
 80a14b4:	d9f6      	bls.n	80a14a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a14b6:	f7ff fdf1 	bl	80a109c <_Z22__fetch_global_Serial1v>
 80a14ba:	f7ff fdeb 	bl	80a1094 <_ZN11USARTSerial9isEnabledEv>
 80a14be:	b118      	cbz	r0, 80a14c8 <pinAvailable+0x38>
 80a14c0:	f1a4 0312 	sub.w	r3, r4, #18
 80a14c4:	2b01      	cmp	r3, #1
 80a14c6:	d9ed      	bls.n	80a14a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a14c8:	2c17      	cmp	r4, #23
 80a14ca:	bf8c      	ite	hi
 80a14cc:	2000      	movhi	r0, #0
 80a14ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a14d0:	bd10      	pop	{r4, pc}
 80a14d2:	bf00      	nop
 80a14d4:	200005c0 	.word	0x200005c0

080a14d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14d8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a14da:	b538      	push	{r3, r4, r5, lr}
 80a14dc:	4604      	mov	r4, r0
 80a14de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14e0:	d80a      	bhi.n	80a14f8 <pinMode+0x20>
 80a14e2:	29ff      	cmp	r1, #255	; 0xff
 80a14e4:	d008      	beq.n	80a14f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a14e6:	f7ff ffd3 	bl	80a1490 <pinAvailable>
 80a14ea:	b128      	cbz	r0, 80a14f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a14ec:	4629      	mov	r1, r5
 80a14ee:	4620      	mov	r0, r4
}
 80a14f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a14f4:	f7fe bf56 	b.w	80a03a4 <HAL_Pin_Mode>
 80a14f8:	bd38      	pop	{r3, r4, r5, pc}

080a14fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a14fa:	b538      	push	{r3, r4, r5, lr}
 80a14fc:	4604      	mov	r4, r0
 80a14fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1500:	f7fe ff58 	bl	80a03b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1504:	28ff      	cmp	r0, #255	; 0xff
 80a1506:	d010      	beq.n	80a152a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1508:	2806      	cmp	r0, #6
 80a150a:	d804      	bhi.n	80a1516 <digitalWrite+0x1c>
 80a150c:	234d      	movs	r3, #77	; 0x4d
 80a150e:	fa23 f000 	lsr.w	r0, r3, r0
 80a1512:	07c3      	lsls	r3, r0, #31
 80a1514:	d409      	bmi.n	80a152a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1516:	4620      	mov	r0, r4
 80a1518:	f7ff ffba 	bl	80a1490 <pinAvailable>
 80a151c:	b128      	cbz	r0, 80a152a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a151e:	4629      	mov	r1, r5
 80a1520:	4620      	mov	r0, r4
}
 80a1522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1526:	f7fe bf4d 	b.w	80a03c4 <HAL_GPIO_Write>
 80a152a:	bd38      	pop	{r3, r4, r5, pc}

080a152c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a152c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a152e:	4d0b      	ldr	r5, [pc, #44]	; (80a155c <_Z19__fetch_global_Wirev+0x30>)
 80a1530:	6829      	ldr	r1, [r5, #0]
 80a1532:	f011 0401 	ands.w	r4, r1, #1
 80a1536:	d10f      	bne.n	80a1558 <_Z19__fetch_global_Wirev+0x2c>
 80a1538:	4628      	mov	r0, r5
 80a153a:	f7fe fdb2 	bl	80a00a2 <__cxa_guard_acquire>
 80a153e:	b158      	cbz	r0, 80a1558 <_Z19__fetch_global_Wirev+0x2c>
 80a1540:	4621      	mov	r1, r4
 80a1542:	4807      	ldr	r0, [pc, #28]	; (80a1560 <_Z19__fetch_global_Wirev+0x34>)
 80a1544:	f7ff f934 	bl	80a07b0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1548:	4628      	mov	r0, r5
 80a154a:	f7fe fdaf 	bl	80a00ac <__cxa_guard_release>
 80a154e:	4a05      	ldr	r2, [pc, #20]	; (80a1564 <_Z19__fetch_global_Wirev+0x38>)
 80a1550:	4905      	ldr	r1, [pc, #20]	; (80a1568 <_Z19__fetch_global_Wirev+0x3c>)
 80a1552:	4803      	ldr	r0, [pc, #12]	; (80a1560 <_Z19__fetch_global_Wirev+0x34>)
 80a1554:	f000 f844 	bl	80a15e0 <__aeabi_atexit>
	return wire;
}
 80a1558:	4801      	ldr	r0, [pc, #4]	; (80a1560 <_Z19__fetch_global_Wirev+0x34>)
 80a155a:	bd38      	pop	{r3, r4, r5, pc}
 80a155c:	20000590 	.word	0x20000590
 80a1560:	20000594 	.word	0x20000594
 80a1564:	20000080 	.word	0x20000080
 80a1568:	080a0759 	.word	0x080a0759

080a156c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a156c:	b513      	push	{r0, r1, r4, lr}
 80a156e:	4c08      	ldr	r4, [pc, #32]	; (80a1590 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1570:	2300      	movs	r3, #0
 80a1572:	461a      	mov	r2, r3
 80a1574:	4619      	mov	r1, r3
 80a1576:	9300      	str	r3, [sp, #0]
 80a1578:	4620      	mov	r0, r4
 80a157a:	f7ff f97f 	bl	80a087c <_ZN9IPAddressC1Ehhhh>
 80a157e:	4620      	mov	r0, r4
 80a1580:	4a04      	ldr	r2, [pc, #16]	; (80a1594 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1582:	4905      	ldr	r1, [pc, #20]	; (80a1598 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1584:	b002      	add	sp, #8
 80a1586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a158a:	f000 b829 	b.w	80a15e0 <__aeabi_atexit>
 80a158e:	bf00      	nop
 80a1590:	200005a8 	.word	0x200005a8
 80a1594:	20000080 	.word	0x20000080
 80a1598:	080a00b3 	.word	0x080a00b3

080a159c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a159c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a159e:	4c0c      	ldr	r4, [pc, #48]	; (80a15d0 <_GLOBAL__sub_I_SPI+0x34>)
 80a15a0:	4e0c      	ldr	r6, [pc, #48]	; (80a15d4 <_GLOBAL__sub_I_SPI+0x38>)
 80a15a2:	4d0d      	ldr	r5, [pc, #52]	; (80a15d8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a15a4:	2100      	movs	r1, #0
 80a15a6:	4620      	mov	r0, r4
 80a15a8:	f7ff fa92 	bl	80a0ad0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a15ac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15ae:	4c0b      	ldr	r4, [pc, #44]	; (80a15dc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a15b0:	4632      	mov	r2, r6
 80a15b2:	4629      	mov	r1, r5
 80a15b4:	f000 f814 	bl	80a15e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15b8:	2101      	movs	r1, #1
 80a15ba:	4620      	mov	r0, r4
 80a15bc:	f7ff fa88 	bl	80a0ad0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a15c0:	4632      	mov	r2, r6
 80a15c2:	4629      	mov	r1, r5
 80a15c4:	4620      	mov	r0, r4
 80a15c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a15ca:	f000 b809 	b.w	80a15e0 <__aeabi_atexit>
 80a15ce:	bf00      	nop
 80a15d0:	200005c0 	.word	0x200005c0
 80a15d4:	20000080 	.word	0x20000080
 80a15d8:	080a0ac1 	.word	0x080a0ac1
 80a15dc:	200005d0 	.word	0x200005d0

080a15e0 <__aeabi_atexit>:
 80a15e0:	460b      	mov	r3, r1
 80a15e2:	4601      	mov	r1, r0
 80a15e4:	4618      	mov	r0, r3
 80a15e6:	f000 b94b 	b.w	80a1880 <__cxa_atexit>

080a15ea <_ZdlPvj>:
 80a15ea:	f7fe bd58 	b.w	80a009e <_ZdlPv>
	...

080a15f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a15f0:	4b24      	ldr	r3, [pc, #144]	; (80a1684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a15f2:	681a      	ldr	r2, [r3, #0]
 80a15f4:	07d0      	lsls	r0, r2, #31
 80a15f6:	bf5c      	itt	pl
 80a15f8:	2201      	movpl	r2, #1
 80a15fa:	601a      	strpl	r2, [r3, #0]
 80a15fc:	4b22      	ldr	r3, [pc, #136]	; (80a1688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a15fe:	681a      	ldr	r2, [r3, #0]
 80a1600:	07d1      	lsls	r1, r2, #31
 80a1602:	bf5c      	itt	pl
 80a1604:	2201      	movpl	r2, #1
 80a1606:	601a      	strpl	r2, [r3, #0]
 80a1608:	4b20      	ldr	r3, [pc, #128]	; (80a168c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a160a:	681a      	ldr	r2, [r3, #0]
 80a160c:	07d2      	lsls	r2, r2, #31
 80a160e:	bf5c      	itt	pl
 80a1610:	2201      	movpl	r2, #1
 80a1612:	601a      	strpl	r2, [r3, #0]
 80a1614:	4b1e      	ldr	r3, [pc, #120]	; (80a1690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1616:	681a      	ldr	r2, [r3, #0]
 80a1618:	07d0      	lsls	r0, r2, #31
 80a161a:	bf5c      	itt	pl
 80a161c:	2201      	movpl	r2, #1
 80a161e:	601a      	strpl	r2, [r3, #0]
 80a1620:	4b1c      	ldr	r3, [pc, #112]	; (80a1694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1622:	681a      	ldr	r2, [r3, #0]
 80a1624:	07d1      	lsls	r1, r2, #31
 80a1626:	bf5c      	itt	pl
 80a1628:	2201      	movpl	r2, #1
 80a162a:	601a      	strpl	r2, [r3, #0]
 80a162c:	4b1a      	ldr	r3, [pc, #104]	; (80a1698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a162e:	681a      	ldr	r2, [r3, #0]
 80a1630:	07d2      	lsls	r2, r2, #31
 80a1632:	bf5c      	itt	pl
 80a1634:	2201      	movpl	r2, #1
 80a1636:	601a      	strpl	r2, [r3, #0]
 80a1638:	4b18      	ldr	r3, [pc, #96]	; (80a169c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a163a:	681a      	ldr	r2, [r3, #0]
 80a163c:	07d0      	lsls	r0, r2, #31
 80a163e:	bf5c      	itt	pl
 80a1640:	2201      	movpl	r2, #1
 80a1642:	601a      	strpl	r2, [r3, #0]
 80a1644:	4b16      	ldr	r3, [pc, #88]	; (80a16a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1646:	681a      	ldr	r2, [r3, #0]
 80a1648:	07d1      	lsls	r1, r2, #31
 80a164a:	bf5c      	itt	pl
 80a164c:	2201      	movpl	r2, #1
 80a164e:	601a      	strpl	r2, [r3, #0]
 80a1650:	4b14      	ldr	r3, [pc, #80]	; (80a16a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1652:	681a      	ldr	r2, [r3, #0]
 80a1654:	07d2      	lsls	r2, r2, #31
 80a1656:	bf5c      	itt	pl
 80a1658:	2201      	movpl	r2, #1
 80a165a:	601a      	strpl	r2, [r3, #0]
 80a165c:	4b12      	ldr	r3, [pc, #72]	; (80a16a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a165e:	681a      	ldr	r2, [r3, #0]
 80a1660:	07d0      	lsls	r0, r2, #31
 80a1662:	bf5c      	itt	pl
 80a1664:	2201      	movpl	r2, #1
 80a1666:	601a      	strpl	r2, [r3, #0]
 80a1668:	4b10      	ldr	r3, [pc, #64]	; (80a16ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a166a:	681a      	ldr	r2, [r3, #0]
 80a166c:	07d1      	lsls	r1, r2, #31
 80a166e:	bf5c      	itt	pl
 80a1670:	2201      	movpl	r2, #1
 80a1672:	601a      	strpl	r2, [r3, #0]
 80a1674:	4b0e      	ldr	r3, [pc, #56]	; (80a16b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1676:	681a      	ldr	r2, [r3, #0]
 80a1678:	07d2      	lsls	r2, r2, #31
 80a167a:	bf5c      	itt	pl
 80a167c:	2201      	movpl	r2, #1
 80a167e:	601a      	strpl	r2, [r3, #0]
 80a1680:	4770      	bx	lr
 80a1682:	bf00      	nop
 80a1684:	2000060c 	.word	0x2000060c
 80a1688:	20000608 	.word	0x20000608
 80a168c:	20000604 	.word	0x20000604
 80a1690:	20000600 	.word	0x20000600
 80a1694:	200005fc 	.word	0x200005fc
 80a1698:	200005f8 	.word	0x200005f8
 80a169c:	200005f4 	.word	0x200005f4
 80a16a0:	200005f0 	.word	0x200005f0
 80a16a4:	200005ec 	.word	0x200005ec
 80a16a8:	200005e8 	.word	0x200005e8
 80a16ac:	200005e4 	.word	0x200005e4
 80a16b0:	200005e0 	.word	0x200005e0

080a16b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a16b4:	4b18      	ldr	r3, [pc, #96]	; (80a1718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a16b6:	681a      	ldr	r2, [r3, #0]
 80a16b8:	07d1      	lsls	r1, r2, #31
 80a16ba:	bf5c      	itt	pl
 80a16bc:	2201      	movpl	r2, #1
 80a16be:	601a      	strpl	r2, [r3, #0]
 80a16c0:	4b16      	ldr	r3, [pc, #88]	; (80a171c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a16c2:	681a      	ldr	r2, [r3, #0]
 80a16c4:	07d2      	lsls	r2, r2, #31
 80a16c6:	bf5c      	itt	pl
 80a16c8:	2201      	movpl	r2, #1
 80a16ca:	601a      	strpl	r2, [r3, #0]
 80a16cc:	4b14      	ldr	r3, [pc, #80]	; (80a1720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a16ce:	681a      	ldr	r2, [r3, #0]
 80a16d0:	07d0      	lsls	r0, r2, #31
 80a16d2:	bf5c      	itt	pl
 80a16d4:	2201      	movpl	r2, #1
 80a16d6:	601a      	strpl	r2, [r3, #0]
 80a16d8:	4b12      	ldr	r3, [pc, #72]	; (80a1724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a16da:	681a      	ldr	r2, [r3, #0]
 80a16dc:	07d1      	lsls	r1, r2, #31
 80a16de:	bf5c      	itt	pl
 80a16e0:	2201      	movpl	r2, #1
 80a16e2:	601a      	strpl	r2, [r3, #0]
 80a16e4:	4b10      	ldr	r3, [pc, #64]	; (80a1728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a16e6:	681a      	ldr	r2, [r3, #0]
 80a16e8:	07d2      	lsls	r2, r2, #31
 80a16ea:	bf5c      	itt	pl
 80a16ec:	2201      	movpl	r2, #1
 80a16ee:	601a      	strpl	r2, [r3, #0]
 80a16f0:	4b0e      	ldr	r3, [pc, #56]	; (80a172c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a16f2:	681a      	ldr	r2, [r3, #0]
 80a16f4:	07d0      	lsls	r0, r2, #31
 80a16f6:	bf5c      	itt	pl
 80a16f8:	2201      	movpl	r2, #1
 80a16fa:	601a      	strpl	r2, [r3, #0]
 80a16fc:	4b0c      	ldr	r3, [pc, #48]	; (80a1730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a16fe:	681a      	ldr	r2, [r3, #0]
 80a1700:	07d1      	lsls	r1, r2, #31
 80a1702:	bf5c      	itt	pl
 80a1704:	2201      	movpl	r2, #1
 80a1706:	601a      	strpl	r2, [r3, #0]
 80a1708:	4b0a      	ldr	r3, [pc, #40]	; (80a1734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a170a:	681a      	ldr	r2, [r3, #0]
 80a170c:	07d2      	lsls	r2, r2, #31
 80a170e:	bf5c      	itt	pl
 80a1710:	2201      	movpl	r2, #1
 80a1712:	601a      	strpl	r2, [r3, #0]
 80a1714:	4770      	bx	lr
 80a1716:	bf00      	nop
 80a1718:	2000062c 	.word	0x2000062c
 80a171c:	20000628 	.word	0x20000628
 80a1720:	20000624 	.word	0x20000624
 80a1724:	20000620 	.word	0x20000620
 80a1728:	2000061c 	.word	0x2000061c
 80a172c:	20000618 	.word	0x20000618
 80a1730:	20000614 	.word	0x20000614
 80a1734:	20000610 	.word	0x20000610

080a1738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1738:	4b18      	ldr	r3, [pc, #96]	; (80a179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a173a:	681a      	ldr	r2, [r3, #0]
 80a173c:	07d1      	lsls	r1, r2, #31
 80a173e:	bf5c      	itt	pl
 80a1740:	2201      	movpl	r2, #1
 80a1742:	601a      	strpl	r2, [r3, #0]
 80a1744:	4b16      	ldr	r3, [pc, #88]	; (80a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1746:	681a      	ldr	r2, [r3, #0]
 80a1748:	07d2      	lsls	r2, r2, #31
 80a174a:	bf5c      	itt	pl
 80a174c:	2201      	movpl	r2, #1
 80a174e:	601a      	strpl	r2, [r3, #0]
 80a1750:	4b14      	ldr	r3, [pc, #80]	; (80a17a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1752:	681a      	ldr	r2, [r3, #0]
 80a1754:	07d0      	lsls	r0, r2, #31
 80a1756:	bf5c      	itt	pl
 80a1758:	2201      	movpl	r2, #1
 80a175a:	601a      	strpl	r2, [r3, #0]
 80a175c:	4b12      	ldr	r3, [pc, #72]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a175e:	681a      	ldr	r2, [r3, #0]
 80a1760:	07d1      	lsls	r1, r2, #31
 80a1762:	bf5c      	itt	pl
 80a1764:	2201      	movpl	r2, #1
 80a1766:	601a      	strpl	r2, [r3, #0]
 80a1768:	4b10      	ldr	r3, [pc, #64]	; (80a17ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d2      	lsls	r2, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b0e      	ldr	r3, [pc, #56]	; (80a17b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d0      	lsls	r0, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b0c      	ldr	r3, [pc, #48]	; (80a17b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d1      	lsls	r1, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b0a      	ldr	r3, [pc, #40]	; (80a17b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d2      	lsls	r2, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4770      	bx	lr
 80a179a:	bf00      	nop
 80a179c:	2000064c 	.word	0x2000064c
 80a17a0:	20000648 	.word	0x20000648
 80a17a4:	20000644 	.word	0x20000644
 80a17a8:	20000640 	.word	0x20000640
 80a17ac:	2000063c 	.word	0x2000063c
 80a17b0:	20000638 	.word	0x20000638
 80a17b4:	20000634 	.word	0x20000634
 80a17b8:	20000630 	.word	0x20000630

080a17bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a17bc:	4b24      	ldr	r3, [pc, #144]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a17be:	681a      	ldr	r2, [r3, #0]
 80a17c0:	07d0      	lsls	r0, r2, #31
 80a17c2:	bf5c      	itt	pl
 80a17c4:	2201      	movpl	r2, #1
 80a17c6:	601a      	strpl	r2, [r3, #0]
 80a17c8:	4b22      	ldr	r3, [pc, #136]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a17ca:	681a      	ldr	r2, [r3, #0]
 80a17cc:	07d1      	lsls	r1, r2, #31
 80a17ce:	bf5c      	itt	pl
 80a17d0:	2201      	movpl	r2, #1
 80a17d2:	601a      	strpl	r2, [r3, #0]
 80a17d4:	4b20      	ldr	r3, [pc, #128]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a17d6:	681a      	ldr	r2, [r3, #0]
 80a17d8:	07d2      	lsls	r2, r2, #31
 80a17da:	bf5c      	itt	pl
 80a17dc:	2201      	movpl	r2, #1
 80a17de:	601a      	strpl	r2, [r3, #0]
 80a17e0:	4b1e      	ldr	r3, [pc, #120]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a17e2:	681a      	ldr	r2, [r3, #0]
 80a17e4:	07d0      	lsls	r0, r2, #31
 80a17e6:	bf5c      	itt	pl
 80a17e8:	2201      	movpl	r2, #1
 80a17ea:	601a      	strpl	r2, [r3, #0]
 80a17ec:	4b1c      	ldr	r3, [pc, #112]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a17ee:	681a      	ldr	r2, [r3, #0]
 80a17f0:	07d1      	lsls	r1, r2, #31
 80a17f2:	bf5c      	itt	pl
 80a17f4:	2201      	movpl	r2, #1
 80a17f6:	601a      	strpl	r2, [r3, #0]
 80a17f8:	4b1a      	ldr	r3, [pc, #104]	; (80a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a17fa:	681a      	ldr	r2, [r3, #0]
 80a17fc:	07d2      	lsls	r2, r2, #31
 80a17fe:	bf5c      	itt	pl
 80a1800:	2201      	movpl	r2, #1
 80a1802:	601a      	strpl	r2, [r3, #0]
 80a1804:	4b18      	ldr	r3, [pc, #96]	; (80a1868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1806:	681a      	ldr	r2, [r3, #0]
 80a1808:	07d0      	lsls	r0, r2, #31
 80a180a:	bf5c      	itt	pl
 80a180c:	2201      	movpl	r2, #1
 80a180e:	601a      	strpl	r2, [r3, #0]
 80a1810:	4b16      	ldr	r3, [pc, #88]	; (80a186c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1812:	681a      	ldr	r2, [r3, #0]
 80a1814:	07d1      	lsls	r1, r2, #31
 80a1816:	bf5c      	itt	pl
 80a1818:	2201      	movpl	r2, #1
 80a181a:	601a      	strpl	r2, [r3, #0]
 80a181c:	4b14      	ldr	r3, [pc, #80]	; (80a1870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a181e:	681a      	ldr	r2, [r3, #0]
 80a1820:	07d2      	lsls	r2, r2, #31
 80a1822:	bf5c      	itt	pl
 80a1824:	2201      	movpl	r2, #1
 80a1826:	601a      	strpl	r2, [r3, #0]
 80a1828:	4b12      	ldr	r3, [pc, #72]	; (80a1874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a182a:	681a      	ldr	r2, [r3, #0]
 80a182c:	07d0      	lsls	r0, r2, #31
 80a182e:	bf5c      	itt	pl
 80a1830:	2201      	movpl	r2, #1
 80a1832:	601a      	strpl	r2, [r3, #0]
 80a1834:	4b10      	ldr	r3, [pc, #64]	; (80a1878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d1      	lsls	r1, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4b0e      	ldr	r3, [pc, #56]	; (80a187c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d2      	lsls	r2, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4770      	bx	lr
 80a184e:	bf00      	nop
 80a1850:	2000067c 	.word	0x2000067c
 80a1854:	20000678 	.word	0x20000678
 80a1858:	20000674 	.word	0x20000674
 80a185c:	20000670 	.word	0x20000670
 80a1860:	2000066c 	.word	0x2000066c
 80a1864:	20000668 	.word	0x20000668
 80a1868:	20000664 	.word	0x20000664
 80a186c:	20000660 	.word	0x20000660
 80a1870:	2000065c 	.word	0x2000065c
 80a1874:	20000658 	.word	0x20000658
 80a1878:	20000654 	.word	0x20000654
 80a187c:	20000650 	.word	0x20000650

080a1880 <__cxa_atexit>:
 80a1880:	b510      	push	{r4, lr}
 80a1882:	4c05      	ldr	r4, [pc, #20]	; (80a1898 <__cxa_atexit+0x18>)
 80a1884:	4613      	mov	r3, r2
 80a1886:	b12c      	cbz	r4, 80a1894 <__cxa_atexit+0x14>
 80a1888:	460a      	mov	r2, r1
 80a188a:	4601      	mov	r1, r0
 80a188c:	2002      	movs	r0, #2
 80a188e:	f3af 8000 	nop.w
 80a1892:	bd10      	pop	{r4, pc}
 80a1894:	4620      	mov	r0, r4
 80a1896:	bd10      	pop	{r4, pc}
 80a1898:	00000000 	.word	0x00000000

080a189c <memcpy>:
 80a189c:	b510      	push	{r4, lr}
 80a189e:	1e43      	subs	r3, r0, #1
 80a18a0:	440a      	add	r2, r1
 80a18a2:	4291      	cmp	r1, r2
 80a18a4:	d004      	beq.n	80a18b0 <memcpy+0x14>
 80a18a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a18aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a18ae:	e7f8      	b.n	80a18a2 <memcpy+0x6>
 80a18b0:	bd10      	pop	{r4, pc}

080a18b2 <memset>:
 80a18b2:	4603      	mov	r3, r0
 80a18b4:	4402      	add	r2, r0
 80a18b6:	4293      	cmp	r3, r2
 80a18b8:	d002      	beq.n	80a18c0 <memset+0xe>
 80a18ba:	f803 1b01 	strb.w	r1, [r3], #1
 80a18be:	e7fa      	b.n	80a18b6 <memset+0x4>
 80a18c0:	4770      	bx	lr
	...

080a18c4 <srand>:
 80a18c4:	b538      	push	{r3, r4, r5, lr}
 80a18c6:	4b12      	ldr	r3, [pc, #72]	; (80a1910 <srand+0x4c>)
 80a18c8:	4605      	mov	r5, r0
 80a18ca:	681c      	ldr	r4, [r3, #0]
 80a18cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a18ce:	b9d3      	cbnz	r3, 80a1906 <srand+0x42>
 80a18d0:	2018      	movs	r0, #24
 80a18d2:	f7fe ff1d 	bl	80a0710 <malloc>
 80a18d6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a18da:	63a0      	str	r0, [r4, #56]	; 0x38
 80a18dc:	8003      	strh	r3, [r0, #0]
 80a18de:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a18e2:	8043      	strh	r3, [r0, #2]
 80a18e4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a18e8:	8083      	strh	r3, [r0, #4]
 80a18ea:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a18ee:	80c3      	strh	r3, [r0, #6]
 80a18f0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a18f4:	8103      	strh	r3, [r0, #8]
 80a18f6:	2305      	movs	r3, #5
 80a18f8:	8143      	strh	r3, [r0, #10]
 80a18fa:	230b      	movs	r3, #11
 80a18fc:	8183      	strh	r3, [r0, #12]
 80a18fe:	2201      	movs	r2, #1
 80a1900:	2300      	movs	r3, #0
 80a1902:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1908:	2200      	movs	r2, #0
 80a190a:	611d      	str	r5, [r3, #16]
 80a190c:	615a      	str	r2, [r3, #20]
 80a190e:	bd38      	pop	{r3, r4, r5, pc}
 80a1910:	2000007c 	.word	0x2000007c

080a1914 <strlen>:
 80a1914:	4603      	mov	r3, r0
 80a1916:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a191a:	2a00      	cmp	r2, #0
 80a191c:	d1fb      	bne.n	80a1916 <strlen+0x2>
 80a191e:	1a18      	subs	r0, r3, r0
 80a1920:	3801      	subs	r0, #1
 80a1922:	4770      	bx	lr

080a1924 <dynalib_user>:
 80a1924:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1934:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a1944:	7265 505f 4255 494c 4853 0000               er_PUBLISH..

080a1950 <_ZTV7TwoWire>:
	...
 80a1958:	0759 080a 07a3 080a 077b 080a 075b 080a     Y.......{...[...
 80a1968:	0783 080a 078b 080a 0793 080a 079b 080a     ................

080a1978 <_ZTV9IPAddress>:
	...
 80a1980:	07dd 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a1990:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a19a0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a19b0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a19c0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a19d0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a19e0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a19f0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1a00:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1a10:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1a20:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1a30:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1a40:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1a50:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1a60:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1a70 <_ZTVN5spark12NetworkClassE>:
	...
 80a1a78:	08bd 080a 08c7 080a 08d1 080a 08db 080a     ................
 80a1a88:	08e5 080a 08f1 080a 08fd 080a 0909 080a     ................
 80a1a98:	0911 080a 091b 080a 0925 080a               ........%...

080a1aa4 <_ZTV8SPIClass>:
	...
 80a1aac:	0ac1 080a 0ac3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1abc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1acc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1adc:	0000 0000                                   ....

080a1ae0 <_ZTV3UDP>:
	...
 80a1ae8:	00b5 080a 00e3 080a 0bff 080a 0d1f 080a     ................
 80a1af8:	0bf7 080a 0c15 080a 0c33 080a 0c4d 080a     ........3...M...
 80a1b08:	0c6f 080a 0cb9 080a 0cdb 080a 0e71 080a     o...........q...
 80a1b18:	0d85 080a 0be1 080a 0f81 080a 0ded 080a     ................
 80a1b28:	0ea9 080a 0faf 080a 0d49 080a 0bed 080a     ........I.......
 80a1b38:	0e51 080a 0bf3 080a 0c4f 080a fff0 ffff     Q.......O.......
 80a1b48:	0000 0000 0c67 080a                         ....g...

080a1b50 <_ZTV11USARTSerial>:
	...
 80a1b58:	0fe7 080a 1037 080a 1045 080a 09a1 080a     ....7...E.......
 80a1b68:	0ffb 080a 101d 080a 1009 080a 1031 080a     ............1...
 80a1b78:	0fe9 080a 0fed 080a                         ........

080a1b80 <_ZTV9USBSerial>:
	...
 80a1b88:	10ed 080a 113d 080a 114b 080a 09a1 080a     ....=...K.......
 80a1b98:	1129 080a 10ef 080a 1105 080a 1137 080a     )...........7...
 80a1ba8:	111b 080a 10e9 080a                         ........

080a1bb0 <_ZTVN5spark9WiFiClassE>:
	...
 80a1bb8:	133b 080a 1331 080a 1327 080a 1299 080a     ;...1...'.......
 80a1bc8:	131b 080a 130f 080a 1303 080a 12fb 080a     ................
 80a1bd8:	12f1 080a 12e7 080a 12a3 080a               ............

080a1be4 <__sf_fake_stdin>:
	...

080a1c04 <__sf_fake_stdout>:
	...

080a1c24 <__sf_fake_stderr>:
	...
 80a1c44:	0043                                        C.

080a1c46 <link_const_variable_data_end>:
	...

080a1c48 <link_constructors_location>:
 80a1c48:	080a02ed 	.word	0x080a02ed
 80a1c4c:	080a0351 	.word	0x080a0351
 80a1c50:	080a08ad 	.word	0x080a08ad
 80a1c54:	080a098d 	.word	0x080a098d
 80a1c58:	080a0aa5 	.word	0x080a0aa5
 80a1c5c:	080a0bb5 	.word	0x080a0bb5
 80a1c60:	080a0bcd 	.word	0x080a0bcd
 80a1c64:	080a1345 	.word	0x080a1345
 80a1c68:	080a156d 	.word	0x080a156d
 80a1c6c:	080a159d 	.word	0x080a159d
 80a1c70:	080a15f1 	.word	0x080a15f1
 80a1c74:	080a16b5 	.word	0x080a16b5
 80a1c78:	080a1739 	.word	0x080a1739
 80a1c7c:	080a17bd 	.word	0x080a17bd
