
/Users/ninjacat/Documents/Particle/TakeHeed/TakeHeed_ParticleSetup/target/1.4.0/photon/TakeHeed_ParticleSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000010c4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a10e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a10e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000574  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a114c  080a114c  0002114c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1174  080a1174  00021174  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00087344  00000000  00000000  00021178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c256  00000000  00000000  000a84bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f122  00000000  00000000  000b4712  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001840  00000000  00000000  000c3834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002850  00000000  00000000  000c5074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002014b  00000000  00000000  000c78c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001bb13  00000000  00000000  000e7a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3743  00000000  00000000  00103522  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a454  00000000  00000000  001a6c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 feb7 	bl	80a0da0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 febc 	bl	80a0db6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a10e4 	.word	0x080a10e4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200005dc 	.word	0x200005dc
 80a0058:	200005dc 	.word	0x200005dc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fcdb 	bl	80a0a18 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a109c 	.word	0x080a109c
 80a0084:	080a10d4 	.word	0x080a10d4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b811 	b.w	80a00ae <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f80f 	bl	80a00b0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bc81 	b.w	80a099c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b923 	b.w	80a02e4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
 80a00ae:	4770      	bx	lr

080a00b0 <loop>:
  // Put initialization like pinMode and begin functions here.

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00b0:	4770      	bx	lr

080a00b2 <_GLOBAL__sub_I_setup>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00b2:	f000 b81b 	b.w	80a00ec <HAL_Pin_Map>

080a00b6 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a00b6:	f000 b819 	b.w	80a00ec <HAL_Pin_Map>
	...

080a00bc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a00bc:	b508      	push	{r3, lr}
 80a00be:	4b02      	ldr	r3, [pc, #8]	; (80a00c8 <os_mutex_create+0xc>)
 80a00c0:	681b      	ldr	r3, [r3, #0]
 80a00c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a00c4:	9301      	str	r3, [sp, #4]
 80a00c6:	bd08      	pop	{r3, pc}
 80a00c8:	080601d0 	.word	0x080601d0

080a00cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a00cc:	b508      	push	{r3, lr}
 80a00ce:	4b02      	ldr	r3, [pc, #8]	; (80a00d8 <HAL_RNG_GetRandomNumber+0xc>)
 80a00d0:	681b      	ldr	r3, [r3, #0]
 80a00d2:	685b      	ldr	r3, [r3, #4]
 80a00d4:	9301      	str	r3, [sp, #4]
 80a00d6:	bd08      	pop	{r3, pc}
 80a00d8:	0806019c 	.word	0x0806019c

080a00dc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a00dc:	b508      	push	{r3, lr}
 80a00de:	4b02      	ldr	r3, [pc, #8]	; (80a00e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a00e0:	681b      	ldr	r3, [r3, #0]
 80a00e2:	695b      	ldr	r3, [r3, #20]
 80a00e4:	9301      	str	r3, [sp, #4]
 80a00e6:	bd08      	pop	{r3, pc}
 80a00e8:	0806019c 	.word	0x0806019c

080a00ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a00ec:	b508      	push	{r3, lr}
 80a00ee:	4b02      	ldr	r3, [pc, #8]	; (80a00f8 <HAL_Pin_Map+0xc>)
 80a00f0:	681b      	ldr	r3, [r3, #0]
 80a00f2:	681b      	ldr	r3, [r3, #0]
 80a00f4:	9301      	str	r3, [sp, #4]
 80a00f6:	bd08      	pop	{r3, pc}
 80a00f8:	080601b0 	.word	0x080601b0

080a00fc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a00fc:	b508      	push	{r3, lr}
 80a00fe:	4b02      	ldr	r3, [pc, #8]	; (80a0108 <HAL_SPI_Init+0xc>)
 80a0100:	681b      	ldr	r3, [r3, #0]
 80a0102:	69db      	ldr	r3, [r3, #28]
 80a0104:	9301      	str	r3, [sp, #4]
 80a0106:	bd08      	pop	{r3, pc}
 80a0108:	080601b4 	.word	0x080601b4

080a010c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a010c:	b508      	push	{r3, lr}
 80a010e:	4b02      	ldr	r3, [pc, #8]	; (80a0118 <HAL_USART_Init+0xc>)
 80a0110:	681b      	ldr	r3, [r3, #0]
 80a0112:	699b      	ldr	r3, [r3, #24]
 80a0114:	9301      	str	r3, [sp, #4]
 80a0116:	bd08      	pop	{r3, pc}
 80a0118:	080601c4 	.word	0x080601c4

080a011c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a011c:	b508      	push	{r3, lr}
 80a011e:	4b02      	ldr	r3, [pc, #8]	; (80a0128 <HAL_USART_Write_Data+0xc>)
 80a0120:	681b      	ldr	r3, [r3, #0]
 80a0122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0124:	9301      	str	r3, [sp, #4]
 80a0126:	bd08      	pop	{r3, pc}
 80a0128:	080601c4 	.word	0x080601c4

080a012c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a012c:	b508      	push	{r3, lr}
 80a012e:	4b02      	ldr	r3, [pc, #8]	; (80a0138 <HAL_USART_Available_Data+0xc>)
 80a0130:	681b      	ldr	r3, [r3, #0]
 80a0132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0134:	9301      	str	r3, [sp, #4]
 80a0136:	bd08      	pop	{r3, pc}
 80a0138:	080601c4 	.word	0x080601c4

080a013c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a013c:	b508      	push	{r3, lr}
 80a013e:	4b02      	ldr	r3, [pc, #8]	; (80a0148 <HAL_USART_Read_Data+0xc>)
 80a0140:	681b      	ldr	r3, [r3, #0]
 80a0142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0144:	9301      	str	r3, [sp, #4]
 80a0146:	bd08      	pop	{r3, pc}
 80a0148:	080601c4 	.word	0x080601c4

080a014c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a014c:	b508      	push	{r3, lr}
 80a014e:	4b02      	ldr	r3, [pc, #8]	; (80a0158 <HAL_USART_Peek_Data+0xc>)
 80a0150:	681b      	ldr	r3, [r3, #0]
 80a0152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0154:	9301      	str	r3, [sp, #4]
 80a0156:	bd08      	pop	{r3, pc}
 80a0158:	080601c4 	.word	0x080601c4

080a015c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a015c:	b508      	push	{r3, lr}
 80a015e:	4b02      	ldr	r3, [pc, #8]	; (80a0168 <HAL_USART_Flush_Data+0xc>)
 80a0160:	681b      	ldr	r3, [r3, #0]
 80a0162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0164:	9301      	str	r3, [sp, #4]
 80a0166:	bd08      	pop	{r3, pc}
 80a0168:	080601c4 	.word	0x080601c4

080a016c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a016c:	b508      	push	{r3, lr}
 80a016e:	4b02      	ldr	r3, [pc, #8]	; (80a0178 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0170:	681b      	ldr	r3, [r3, #0]
 80a0172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0174:	9301      	str	r3, [sp, #4]
 80a0176:	bd08      	pop	{r3, pc}
 80a0178:	080601c4 	.word	0x080601c4

080a017c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a017c:	b508      	push	{r3, lr}
 80a017e:	4b02      	ldr	r3, [pc, #8]	; (80a0188 <HAL_USB_USART_Init+0xc>)
 80a0180:	681b      	ldr	r3, [r3, #0]
 80a0182:	681b      	ldr	r3, [r3, #0]
 80a0184:	9301      	str	r3, [sp, #4]
 80a0186:	bd08      	pop	{r3, pc}
 80a0188:	080601d8 	.word	0x080601d8

080a018c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a018c:	b508      	push	{r3, lr}
 80a018e:	4b02      	ldr	r3, [pc, #8]	; (80a0198 <HAL_USB_USART_Available_Data+0xc>)
 80a0190:	681b      	ldr	r3, [r3, #0]
 80a0192:	691b      	ldr	r3, [r3, #16]
 80a0194:	9301      	str	r3, [sp, #4]
 80a0196:	bd08      	pop	{r3, pc}
 80a0198:	080601d8 	.word	0x080601d8

080a019c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a019c:	b508      	push	{r3, lr}
 80a019e:	4b02      	ldr	r3, [pc, #8]	; (80a01a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a01a0:	681b      	ldr	r3, [r3, #0]
 80a01a2:	695b      	ldr	r3, [r3, #20]
 80a01a4:	9301      	str	r3, [sp, #4]
 80a01a6:	bd08      	pop	{r3, pc}
 80a01a8:	080601d8 	.word	0x080601d8

080a01ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a01ac:	b508      	push	{r3, lr}
 80a01ae:	4b02      	ldr	r3, [pc, #8]	; (80a01b8 <HAL_USB_USART_Receive_Data+0xc>)
 80a01b0:	681b      	ldr	r3, [r3, #0]
 80a01b2:	699b      	ldr	r3, [r3, #24]
 80a01b4:	9301      	str	r3, [sp, #4]
 80a01b6:	bd08      	pop	{r3, pc}
 80a01b8:	080601d8 	.word	0x080601d8

080a01bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a01bc:	b508      	push	{r3, lr}
 80a01be:	4b02      	ldr	r3, [pc, #8]	; (80a01c8 <HAL_USB_USART_Send_Data+0xc>)
 80a01c0:	681b      	ldr	r3, [r3, #0]
 80a01c2:	69db      	ldr	r3, [r3, #28]
 80a01c4:	9301      	str	r3, [sp, #4]
 80a01c6:	bd08      	pop	{r3, pc}
 80a01c8:	080601d8 	.word	0x080601d8

080a01cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a01cc:	b508      	push	{r3, lr}
 80a01ce:	4b02      	ldr	r3, [pc, #8]	; (80a01d8 <HAL_USB_USART_Flush_Data+0xc>)
 80a01d0:	681b      	ldr	r3, [r3, #0]
 80a01d2:	6a1b      	ldr	r3, [r3, #32]
 80a01d4:	9301      	str	r3, [sp, #4]
 80a01d6:	bd08      	pop	{r3, pc}
 80a01d8:	080601d8 	.word	0x080601d8

080a01dc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a01dc:	b508      	push	{r3, lr}
 80a01de:	4b02      	ldr	r3, [pc, #8]	; (80a01e8 <inet_gethostbyname+0xc>)
 80a01e0:	681b      	ldr	r3, [r3, #0]
 80a01e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01e4:	9301      	str	r3, [sp, #4]
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	080601c0 	.word	0x080601c0

080a01ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <set_system_mode+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	685b      	ldr	r3, [r3, #4]
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601a4 	.word	0x080601a4

080a01fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b03      	ldr	r3, [pc, #12]	; (80a020c <system_ctrl_set_app_request_handler+0x10>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0206:	9301      	str	r3, [sp, #4]
 80a0208:	bd08      	pop	{r3, pc}
 80a020a:	0000      	.short	0x0000
 80a020c:	080601a4 	.word	0x080601a4

080a0210 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0210:	b508      	push	{r3, lr}
 80a0212:	4b03      	ldr	r3, [pc, #12]	; (80a0220 <system_ctrl_set_result+0x10>)
 80a0214:	681b      	ldr	r3, [r3, #0]
 80a0216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a021a:	9301      	str	r3, [sp, #4]
 80a021c:	bd08      	pop	{r3, pc}
 80a021e:	0000      	.short	0x0000
 80a0220:	080601a4 	.word	0x080601a4

080a0224 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601cc 	.word	0x080601cc

080a0234 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <network_connect+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	685b      	ldr	r3, [r3, #4]
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601c8 	.word	0x080601c8

080a0244 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <network_connecting+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	689b      	ldr	r3, [r3, #8]
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601c8 	.word	0x080601c8

080a0254 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <network_disconnect+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	68db      	ldr	r3, [r3, #12]
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601c8 	.word	0x080601c8

080a0264 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <network_ready+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	691b      	ldr	r3, [r3, #16]
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601c8 	.word	0x080601c8

080a0274 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <network_on+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	695b      	ldr	r3, [r3, #20]
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601c8 	.word	0x080601c8

080a0284 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <network_off+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	699b      	ldr	r3, [r3, #24]
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601c8 	.word	0x080601c8

080a0294 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <network_listen+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	69db      	ldr	r3, [r3, #28]
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601c8 	.word	0x080601c8

080a02a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <network_listening+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	6a1b      	ldr	r3, [r3, #32]
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601c8 	.word	0x080601c8

080a02b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <network_set_listen_timeout+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601c8 	.word	0x080601c8

080a02c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <network_get_listen_timeout+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601c8 	.word	0x080601c8

080a02d4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <malloc+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	681b      	ldr	r3, [r3, #0]
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601a0 	.word	0x080601a0

080a02e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <free+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	685b      	ldr	r3, [r3, #4]
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601a0 	.word	0x080601a0

080a02f4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a02f4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a02f6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a02f8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a02fa:	b113      	cbz	r3, 80a0302 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a02fc:	2203      	movs	r2, #3
 80a02fe:	4601      	mov	r1, r0
 80a0300:	4798      	blx	r3
    }
 80a0302:	4620      	mov	r0, r4
 80a0304:	bd10      	pop	{r4, pc}

080a0306 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0306:	4770      	bx	lr

080a0308 <_ZN9IPAddressD0Ev>:
 80a0308:	b510      	push	{r4, lr}
 80a030a:	4604      	mov	r4, r0
 80a030c:	2118      	movs	r1, #24
 80a030e:	f000 fbee 	bl	80a0aee <_ZdlPvj>
 80a0312:	4620      	mov	r0, r4
 80a0314:	bd10      	pop	{r4, pc}

080a0316 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0318:	460f      	mov	r7, r1
 80a031a:	f100 0608 	add.w	r6, r0, #8
 80a031e:	1d05      	adds	r5, r0, #4
 80a0320:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0326:	220a      	movs	r2, #10
 80a0328:	4638      	mov	r0, r7
 80a032a:	f000 f910 	bl	80a054e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a032e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0330:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0332:	d007      	beq.n	80a0344 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0334:	2c00      	cmp	r4, #0
 80a0336:	d0f4      	beq.n	80a0322 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0338:	212e      	movs	r1, #46	; 0x2e
 80a033a:	4638      	mov	r0, r7
 80a033c:	f000 f8da 	bl	80a04f4 <_ZN5Print5printEc>
 80a0340:	4404      	add	r4, r0
 80a0342:	e7ee      	b.n	80a0322 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0344:	4620      	mov	r0, r4
 80a0346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0348 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0348:	b510      	push	{r4, lr}
 80a034a:	4604      	mov	r4, r0
 80a034c:	4b04      	ldr	r3, [pc, #16]	; (80a0360 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a034e:	2211      	movs	r2, #17
 80a0350:	f840 3b04 	str.w	r3, [r0], #4
 80a0354:	2100      	movs	r1, #0
 80a0356:	f000 fd2e 	bl	80a0db6 <memset>
{
    clear();
}
 80a035a:	4620      	mov	r0, r4
 80a035c:	bd10      	pop	{r4, pc}
 80a035e:	bf00      	nop
 80a0360:	080a0e44 	.word	0x080a0e44

080a0364 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0364:	4603      	mov	r3, r0
 80a0366:	4a07      	ldr	r2, [pc, #28]	; (80a0384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0368:	b510      	push	{r4, lr}
 80a036a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a036e:	f101 0210 	add.w	r2, r1, #16
 80a0372:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0376:	4291      	cmp	r1, r2
 80a0378:	f843 4b04 	str.w	r4, [r3], #4
 80a037c:	d1f9      	bne.n	80a0372 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a037e:	780a      	ldrb	r2, [r1, #0]
 80a0380:	701a      	strb	r2, [r3, #0]
}
 80a0382:	bd10      	pop	{r4, pc}
 80a0384:	080a0e44 	.word	0x080a0e44

080a0388 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0388:	4a02      	ldr	r2, [pc, #8]	; (80a0394 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a038a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a038c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a038e:	2204      	movs	r2, #4
 80a0390:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0392:	4770      	bx	lr
 80a0394:	080a0e44 	.word	0x080a0e44

080a0398 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0398:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a039a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a039e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a03a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a03a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a03aa:	2304      	movs	r3, #4
 80a03ac:	6041      	str	r1, [r0, #4]
 80a03ae:	7503      	strb	r3, [r0, #20]
 80a03b0:	bd10      	pop	{r4, pc}
	...

080a03b4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a03b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a03b6:	4d04      	ldr	r5, [pc, #16]	; (80a03c8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a03b8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a03ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a03be:	9500      	str	r5, [sp, #0]
 80a03c0:	f7ff ffea 	bl	80a0398 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a03c4:	b003      	add	sp, #12
 80a03c6:	bd30      	pop	{r4, r5, pc}
 80a03c8:	080a0e44 	.word	0x080a0e44

080a03cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a03cc:	4a01      	ldr	r2, [pc, #4]	; (80a03d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a03d0:	601a      	str	r2, [r3, #0]
 80a03d2:	4770      	bx	lr
 80a03d4:	080a0ec6 	.word	0x080a0ec6
 80a03d8:	2000006c 	.word	0x2000006c

080a03dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a03dc:	2300      	movs	r3, #0
 80a03de:	461a      	mov	r2, r3
 80a03e0:	6840      	ldr	r0, [r0, #4]
 80a03e2:	f7ff bf27 	b.w	80a0234 <network_connect>

080a03e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a03e6:	2200      	movs	r2, #0
 80a03e8:	2102      	movs	r1, #2
 80a03ea:	6840      	ldr	r0, [r0, #4]
 80a03ec:	f7ff bf32 	b.w	80a0254 <network_disconnect>

080a03f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a03f0:	2200      	movs	r2, #0
 80a03f2:	4611      	mov	r1, r2
 80a03f4:	6840      	ldr	r0, [r0, #4]
 80a03f6:	f7ff bf25 	b.w	80a0244 <network_connecting>

080a03fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a03fa:	2200      	movs	r2, #0
 80a03fc:	4611      	mov	r1, r2
 80a03fe:	6840      	ldr	r0, [r0, #4]
 80a0400:	f7ff bf30 	b.w	80a0264 <network_ready>

080a0404 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0404:	2300      	movs	r3, #0
 80a0406:	461a      	mov	r2, r3
 80a0408:	4619      	mov	r1, r3
 80a040a:	6840      	ldr	r0, [r0, #4]
 80a040c:	f7ff bf32 	b.w	80a0274 <network_on>

080a0410 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0410:	2300      	movs	r3, #0
 80a0412:	461a      	mov	r2, r3
 80a0414:	4619      	mov	r1, r3
 80a0416:	6840      	ldr	r0, [r0, #4]
 80a0418:	f7ff bf34 	b.w	80a0284 <network_off>

080a041c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a041c:	2200      	movs	r2, #0
 80a041e:	f081 0101 	eor.w	r1, r1, #1
 80a0422:	6840      	ldr	r0, [r0, #4]
 80a0424:	f7ff bf36 	b.w	80a0294 <network_listen>

080a0428 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0428:	2200      	movs	r2, #0
 80a042a:	6840      	ldr	r0, [r0, #4]
 80a042c:	f7ff bf42 	b.w	80a02b4 <network_set_listen_timeout>

080a0430 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0430:	2200      	movs	r2, #0
 80a0432:	4611      	mov	r1, r2
 80a0434:	6840      	ldr	r0, [r0, #4]
 80a0436:	f7ff bf45 	b.w	80a02c4 <network_get_listen_timeout>

080a043a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a043a:	2200      	movs	r2, #0
 80a043c:	4611      	mov	r1, r2
 80a043e:	6840      	ldr	r0, [r0, #4]
 80a0440:	f7ff bf30 	b.w	80a02a4 <network_listening>

080a0444 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0444:	b570      	push	{r4, r5, r6, lr}
 80a0446:	4616      	mov	r6, r2
 80a0448:	b08e      	sub	sp, #56	; 0x38
 80a044a:	4604      	mov	r4, r0
    IPAddress addr;
 80a044c:	a808      	add	r0, sp, #32
 80a044e:	f7ff ff7b 	bl	80a0348 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0452:	2211      	movs	r2, #17
 80a0454:	2100      	movs	r1, #0
 80a0456:	a803      	add	r0, sp, #12
 80a0458:	f000 fcad 	bl	80a0db6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a045c:	4630      	mov	r0, r6
 80a045e:	f000 fcdb 	bl	80a0e18 <strlen>
 80a0462:	2500      	movs	r5, #0
 80a0464:	4b0a      	ldr	r3, [pc, #40]	; (80a0490 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0466:	9500      	str	r5, [sp, #0]
 80a0468:	b281      	uxth	r1, r0
 80a046a:	685b      	ldr	r3, [r3, #4]
 80a046c:	aa03      	add	r2, sp, #12
 80a046e:	4630      	mov	r0, r6
 80a0470:	f7ff feb4 	bl	80a01dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0474:	b120      	cbz	r0, 80a0480 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0476:	4629      	mov	r1, r5
 80a0478:	4620      	mov	r0, r4
 80a047a:	f7ff ff85 	bl	80a0388 <_ZN9IPAddressC1Em>
 80a047e:	e003      	b.n	80a0488 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0480:	a903      	add	r1, sp, #12
 80a0482:	4620      	mov	r0, r4
 80a0484:	f7ff ff6e 	bl	80a0364 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0488:	4620      	mov	r0, r4
 80a048a:	b00e      	add	sp, #56	; 0x38
 80a048c:	bd70      	pop	{r4, r5, r6, pc}
 80a048e:	bf00      	nop
 80a0490:	200004f0 	.word	0x200004f0

080a0494 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0494:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0496:	4a03      	ldr	r2, [pc, #12]	; (80a04a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0498:	601a      	str	r2, [r3, #0]
 80a049a:	2200      	movs	r2, #0
 80a049c:	605a      	str	r2, [r3, #4]
 80a049e:	4770      	bx	lr
 80a04a0:	20000070 	.word	0x20000070
 80a04a4:	080a0f3c 	.word	0x080a0f3c

080a04a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a04a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04aa:	4606      	mov	r6, r0
 80a04ac:	460d      	mov	r5, r1
 80a04ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a04b0:	2400      	movs	r4, #0
  while (size--) {
 80a04b2:	42bd      	cmp	r5, r7
 80a04b4:	d00c      	beq.n	80a04d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a04b6:	6833      	ldr	r3, [r6, #0]
 80a04b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a04bc:	689b      	ldr	r3, [r3, #8]
 80a04be:	4630      	mov	r0, r6
 80a04c0:	4798      	blx	r3
     if (chunk>=0)
 80a04c2:	2800      	cmp	r0, #0
 80a04c4:	db01      	blt.n	80a04ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a04c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a04c8:	e7f3      	b.n	80a04b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a04ca:	2c00      	cmp	r4, #0
 80a04cc:	bf08      	it	eq
 80a04ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a04d0:	4620      	mov	r0, r4
 80a04d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a04d4:	b570      	push	{r4, r5, r6, lr}
 80a04d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a04d8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a04da:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a04dc:	b149      	cbz	r1, 80a04f2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a04de:	f000 fc9b 	bl	80a0e18 <strlen>
 80a04e2:	682b      	ldr	r3, [r5, #0]
 80a04e4:	4602      	mov	r2, r0
 80a04e6:	4621      	mov	r1, r4
 80a04e8:	4628      	mov	r0, r5
    }
 80a04ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a04ee:	68db      	ldr	r3, [r3, #12]
 80a04f0:	4718      	bx	r3
    }
 80a04f2:	bd70      	pop	{r4, r5, r6, pc}

080a04f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a04f4:	6803      	ldr	r3, [r0, #0]
 80a04f6:	689b      	ldr	r3, [r3, #8]
 80a04f8:	4718      	bx	r3

080a04fa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a04fa:	2a01      	cmp	r2, #1
 80a04fc:	bf98      	it	ls
 80a04fe:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0500:	b530      	push	{r4, r5, lr}
 80a0502:	460b      	mov	r3, r1
 80a0504:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0506:	2100      	movs	r1, #0
 80a0508:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a050c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0510:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0514:	fb05 3312 	mls	r3, r5, r2, r3
 80a0518:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a051a:	2b09      	cmp	r3, #9
 80a051c:	bf94      	ite	ls
 80a051e:	3330      	addls	r3, #48	; 0x30
 80a0520:	3337      	addhi	r3, #55	; 0x37
 80a0522:	b2db      	uxtb	r3, r3
 80a0524:	4621      	mov	r1, r4
 80a0526:	f804 3901 	strb.w	r3, [r4], #-1
 80a052a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a052c:	2d00      	cmp	r5, #0
 80a052e:	d1ef      	bne.n	80a0510 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0530:	f7ff ffd0 	bl	80a04d4 <_ZN5Print5writeEPKc>
}
 80a0534:	b00b      	add	sp, #44	; 0x2c
 80a0536:	bd30      	pop	{r4, r5, pc}

080a0538 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0538:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a053a:	b922      	cbnz	r2, 80a0546 <_ZN5Print5printEmi+0xe>
 80a053c:	6803      	ldr	r3, [r0, #0]
 80a053e:	b2c9      	uxtb	r1, r1
 80a0540:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0542:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0544:	4718      	bx	r3
  else return printNumber(n, base);
 80a0546:	b2d2      	uxtb	r2, r2
}
 80a0548:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a054a:	f7ff bfd6 	b.w	80a04fa <_ZN5Print11printNumberEmh>

080a054e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a054e:	f7ff bff3 	b.w	80a0538 <_ZN5Print5printEmi>

080a0552 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0552:	b510      	push	{r4, lr}
 80a0554:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0556:	f7ff fecd 	bl	80a02f4 <_ZNSt14_Function_baseD1Ev>
 80a055a:	4620      	mov	r0, r4
 80a055c:	bd10      	pop	{r4, pc}
	...

080a0560 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0560:	4803      	ldr	r0, [pc, #12]	; (80a0570 <_GLOBAL__sub_I_RGB+0x10>)
 80a0562:	2300      	movs	r3, #0
 80a0564:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0566:	4a03      	ldr	r2, [pc, #12]	; (80a0574 <_GLOBAL__sub_I_RGB+0x14>)
 80a0568:	4903      	ldr	r1, [pc, #12]	; (80a0578 <_GLOBAL__sub_I_RGB+0x18>)
 80a056a:	f000 babb 	b.w	80a0ae4 <__aeabi_atexit>
 80a056e:	bf00      	nop
 80a0570:	20000078 	.word	0x20000078
 80a0574:	20000068 	.word	0x20000068
 80a0578:	080a0553 	.word	0x080a0553

080a057c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a057c:	4770      	bx	lr

080a057e <_ZN8SPIClassD0Ev>:
 80a057e:	b510      	push	{r4, lr}
 80a0580:	4604      	mov	r4, r0
 80a0582:	2110      	movs	r1, #16
 80a0584:	f000 fab3 	bl	80a0aee <_ZdlPvj>
 80a0588:	4620      	mov	r0, r4
 80a058a:	bd10      	pop	{r4, pc}

080a058c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a058c:	b570      	push	{r4, r5, r6, lr}
 80a058e:	4604      	mov	r4, r0
 80a0590:	460e      	mov	r6, r1
 80a0592:	4b07      	ldr	r3, [pc, #28]	; (80a05b0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0594:	2500      	movs	r5, #0
 80a0596:	6003      	str	r3, [r0, #0]
 80a0598:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a059c:	f7ff fd8e 	bl	80a00bc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a05a0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a05a2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a05a4:	f7ff fdaa 	bl	80a00fc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a05a8:	60a5      	str	r5, [r4, #8]
}
 80a05aa:	4620      	mov	r0, r4
 80a05ac:	bd70      	pop	{r4, r5, r6, pc}
 80a05ae:	bf00      	nop
 80a05b0:	080a0f70 	.word	0x080a0f70

080a05b4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a05b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a05b8:	4b03      	ldr	r3, [pc, #12]	; (80a05c8 <_GLOBAL__sub_I_System+0x14>)
 80a05ba:	2000      	movs	r0, #0
 80a05bc:	7018      	strb	r0, [r3, #0]
 80a05be:	8058      	strh	r0, [r3, #2]
 80a05c0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a05c2:	f7ff be13 	b.w	80a01ec <set_system_mode>
 80a05c6:	bf00      	nop
 80a05c8:	20000088 	.word	0x20000088

080a05cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a05cc:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a05ce:	681a      	ldr	r2, [r3, #0]
 80a05d0:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a05d2:	601a      	str	r2, [r3, #0]
 80a05d4:	4770      	bx	lr
 80a05d6:	bf00      	nop
 80a05d8:	20000000 	.word	0x20000000
 80a05dc:	20000090 	.word	0x20000090

080a05e0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a05e0:	4770      	bx	lr

080a05e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a05e2:	7441      	strb	r1, [r0, #17]
 80a05e4:	4770      	bx	lr

080a05e6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a05e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a05e8:	7c00      	ldrb	r0, [r0, #16]
 80a05ea:	f7ff fdbf 	bl	80a016c <HAL_USART_Available_Data_For_Write>
}
 80a05ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a05f2:	bd08      	pop	{r3, pc}

080a05f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a05f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a05f6:	7c00      	ldrb	r0, [r0, #16]
 80a05f8:	f7ff fd98 	bl	80a012c <HAL_USART_Available_Data>
}
 80a05fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0600:	bd08      	pop	{r3, pc}

080a0602 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0602:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0604:	7c00      	ldrb	r0, [r0, #16]
 80a0606:	f7ff fda1 	bl	80a014c <HAL_USART_Peek_Data>
}
 80a060a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a060e:	bf28      	it	cs
 80a0610:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0614:	bd08      	pop	{r3, pc}

080a0616 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0616:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0618:	7c00      	ldrb	r0, [r0, #16]
 80a061a:	f7ff fd8f 	bl	80a013c <HAL_USART_Read_Data>
}
 80a061e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0622:	bf28      	it	cs
 80a0624:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0628:	bd08      	pop	{r3, pc}

080a062a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a062a:	7c00      	ldrb	r0, [r0, #16]
 80a062c:	f7ff bd96 	b.w	80a015c <HAL_USART_Flush_Data>

080a0630 <_ZN11USARTSerialD0Ev>:
 80a0630:	b510      	push	{r4, lr}
 80a0632:	4604      	mov	r4, r0
 80a0634:	2114      	movs	r1, #20
 80a0636:	f000 fa5a 	bl	80a0aee <_ZdlPvj>
 80a063a:	4620      	mov	r0, r4
 80a063c:	bd10      	pop	{r4, pc}

080a063e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a063e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0640:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0642:	4604      	mov	r4, r0
 80a0644:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0646:	b925      	cbnz	r5, 80a0652 <_ZN11USARTSerial5writeEh+0x14>
 80a0648:	7c00      	ldrb	r0, [r0, #16]
 80a064a:	f7ff fd8f 	bl	80a016c <HAL_USART_Available_Data_For_Write>
 80a064e:	2800      	cmp	r0, #0
 80a0650:	dd05      	ble.n	80a065e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0652:	4631      	mov	r1, r6
 80a0654:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a065a:	f7ff bd5f 	b.w	80a011c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a065e:	4628      	mov	r0, r5
 80a0660:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0664 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0664:	b510      	push	{r4, lr}
 80a0666:	4604      	mov	r4, r0
 80a0668:	4608      	mov	r0, r1
 80a066a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a066c:	2200      	movs	r2, #0
 80a066e:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0674:	60a2      	str	r2, [r4, #8]
 80a0676:	4a05      	ldr	r2, [pc, #20]	; (80a068c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0678:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a067a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a067c:	2201      	movs	r2, #1
 80a067e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0680:	461a      	mov	r2, r3
 80a0682:	f7ff fd43 	bl	80a010c <HAL_USART_Init>
}
 80a0686:	4620      	mov	r0, r4
 80a0688:	bd10      	pop	{r4, pc}
 80a068a:	bf00      	nop
 80a068c:	080a0fac 	.word	0x080a0fac

080a0690 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0690:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0692:	4d0c      	ldr	r5, [pc, #48]	; (80a06c4 <_Z22__fetch_global_Serial1v+0x34>)
 80a0694:	6829      	ldr	r1, [r5, #0]
 80a0696:	f011 0401 	ands.w	r4, r1, #1
 80a069a:	d111      	bne.n	80a06c0 <_Z22__fetch_global_Serial1v+0x30>
 80a069c:	4628      	mov	r0, r5
 80a069e:	f7ff fcfe 	bl	80a009e <__cxa_guard_acquire>
 80a06a2:	b168      	cbz	r0, 80a06c0 <_Z22__fetch_global_Serial1v+0x30>
 80a06a4:	4a08      	ldr	r2, [pc, #32]	; (80a06c8 <_Z22__fetch_global_Serial1v+0x38>)
 80a06a6:	4621      	mov	r1, r4
 80a06a8:	4b08      	ldr	r3, [pc, #32]	; (80a06cc <_Z22__fetch_global_Serial1v+0x3c>)
 80a06aa:	4809      	ldr	r0, [pc, #36]	; (80a06d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a06ac:	f7ff ffda 	bl	80a0664 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a06b0:	4628      	mov	r0, r5
 80a06b2:	f7ff fcf9 	bl	80a00a8 <__cxa_guard_release>
 80a06b6:	4a07      	ldr	r2, [pc, #28]	; (80a06d4 <_Z22__fetch_global_Serial1v+0x44>)
 80a06b8:	4907      	ldr	r1, [pc, #28]	; (80a06d8 <_Z22__fetch_global_Serial1v+0x48>)
 80a06ba:	4805      	ldr	r0, [pc, #20]	; (80a06d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a06bc:	f000 fa12 	bl	80a0ae4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a06c0:	4803      	ldr	r0, [pc, #12]	; (80a06d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a06c2:	bd38      	pop	{r3, r4, r5, pc}
 80a06c4:	2000012c 	.word	0x2000012c
 80a06c8:	20000130 	.word	0x20000130
 80a06cc:	200000a8 	.word	0x200000a8
 80a06d0:	20000094 	.word	0x20000094
 80a06d4:	20000068 	.word	0x20000068
 80a06d8:	080a05e1 	.word	0x080a05e1

080a06dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a06dc:	7441      	strb	r1, [r0, #17]
 80a06de:	4770      	bx	lr

080a06e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a06e0:	4770      	bx	lr

080a06e2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a06e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a06e4:	2100      	movs	r1, #0
 80a06e6:	7c00      	ldrb	r0, [r0, #16]
 80a06e8:	f7ff fd60 	bl	80a01ac <HAL_USB_USART_Receive_Data>
}
 80a06ec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a06f0:	bf28      	it	cs
 80a06f2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a06f6:	bd08      	pop	{r3, pc}

080a06f8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a06f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a06fa:	2101      	movs	r1, #1
 80a06fc:	7c00      	ldrb	r0, [r0, #16]
 80a06fe:	f7ff fd55 	bl	80a01ac <HAL_USB_USART_Receive_Data>
}
 80a0702:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0706:	bf28      	it	cs
 80a0708:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a070c:	bd08      	pop	{r3, pc}

080a070e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a070e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0710:	7c00      	ldrb	r0, [r0, #16]
 80a0712:	f7ff fd43 	bl	80a019c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0716:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a071a:	bd08      	pop	{r3, pc}

080a071c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a071c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a071e:	7c00      	ldrb	r0, [r0, #16]
 80a0720:	f7ff fd34 	bl	80a018c <HAL_USB_USART_Available_Data>
}
 80a0724:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0728:	bd08      	pop	{r3, pc}

080a072a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a072a:	7c00      	ldrb	r0, [r0, #16]
 80a072c:	f7ff bd4e 	b.w	80a01cc <HAL_USB_USART_Flush_Data>

080a0730 <_ZN9USBSerialD0Ev>:
 80a0730:	b510      	push	{r4, lr}
 80a0732:	4604      	mov	r4, r0
 80a0734:	2114      	movs	r1, #20
 80a0736:	f000 f9da 	bl	80a0aee <_ZdlPvj>
 80a073a:	4620      	mov	r0, r4
 80a073c:	bd10      	pop	{r4, pc}

080a073e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a073e:	b538      	push	{r3, r4, r5, lr}
 80a0740:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0742:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0744:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0746:	f7ff fd29 	bl	80a019c <HAL_USB_USART_Available_Data_For_Write>
 80a074a:	2800      	cmp	r0, #0
 80a074c:	dc01      	bgt.n	80a0752 <_ZN9USBSerial5writeEh+0x14>
 80a074e:	7c60      	ldrb	r0, [r4, #17]
 80a0750:	b128      	cbz	r0, 80a075e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0752:	4629      	mov	r1, r5
 80a0754:	7c20      	ldrb	r0, [r4, #16]
 80a0756:	f7ff fd31 	bl	80a01bc <HAL_USB_USART_Send_Data>
 80a075a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a075e:	bd38      	pop	{r3, r4, r5, pc}

080a0760 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0760:	b510      	push	{r4, lr}
 80a0762:	4604      	mov	r4, r0
 80a0764:	2300      	movs	r3, #0
 80a0766:	6063      	str	r3, [r4, #4]
 80a0768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a076c:	60a3      	str	r3, [r4, #8]
 80a076e:	4b05      	ldr	r3, [pc, #20]	; (80a0784 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0770:	4608      	mov	r0, r1
 80a0772:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0774:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0776:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0778:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a077a:	4611      	mov	r1, r2
 80a077c:	f7ff fcfe 	bl	80a017c <HAL_USB_USART_Init>
}
 80a0780:	4620      	mov	r0, r4
 80a0782:	bd10      	pop	{r4, pc}
 80a0784:	080a0fdc 	.word	0x080a0fdc

080a0788 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0788:	b510      	push	{r4, lr}
 80a078a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a078c:	2214      	movs	r2, #20
 80a078e:	2100      	movs	r1, #0
 80a0790:	f000 fb11 	bl	80a0db6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0794:	4b05      	ldr	r3, [pc, #20]	; (80a07ac <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0796:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0798:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a079a:	4b05      	ldr	r3, [pc, #20]	; (80a07b0 <_Z19acquireSerialBufferv+0x28>)
 80a079c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a079e:	f240 1301 	movw	r3, #257	; 0x101
 80a07a2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a07a4:	2381      	movs	r3, #129	; 0x81
 80a07a6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a07a8:	bd10      	pop	{r4, pc}
 80a07aa:	bf00      	nop
 80a07ac:	20000239 	.word	0x20000239
 80a07b0:	200001b8 	.word	0x200001b8

080a07b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a07b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a07b6:	4d0e      	ldr	r5, [pc, #56]	; (80a07f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a07b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a07ba:	a801      	add	r0, sp, #4
 80a07bc:	f7ff ffe4 	bl	80a0788 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a07c0:	6829      	ldr	r1, [r5, #0]
 80a07c2:	f011 0401 	ands.w	r4, r1, #1
 80a07c6:	d110      	bne.n	80a07ea <_Z16_fetch_usbserialv+0x36>
 80a07c8:	4628      	mov	r0, r5
 80a07ca:	f7ff fc68 	bl	80a009e <__cxa_guard_acquire>
 80a07ce:	b160      	cbz	r0, 80a07ea <_Z16_fetch_usbserialv+0x36>
 80a07d0:	aa01      	add	r2, sp, #4
 80a07d2:	4621      	mov	r1, r4
 80a07d4:	4807      	ldr	r0, [pc, #28]	; (80a07f4 <_Z16_fetch_usbserialv+0x40>)
 80a07d6:	f7ff ffc3 	bl	80a0760 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a07da:	4628      	mov	r0, r5
 80a07dc:	f7ff fc64 	bl	80a00a8 <__cxa_guard_release>
 80a07e0:	4a05      	ldr	r2, [pc, #20]	; (80a07f8 <_Z16_fetch_usbserialv+0x44>)
 80a07e2:	4906      	ldr	r1, [pc, #24]	; (80a07fc <_Z16_fetch_usbserialv+0x48>)
 80a07e4:	4803      	ldr	r0, [pc, #12]	; (80a07f4 <_Z16_fetch_usbserialv+0x40>)
 80a07e6:	f000 f97d 	bl	80a0ae4 <__aeabi_atexit>
	return _usbserial;
}
 80a07ea:	4802      	ldr	r0, [pc, #8]	; (80a07f4 <_Z16_fetch_usbserialv+0x40>)
 80a07ec:	b007      	add	sp, #28
 80a07ee:	bd30      	pop	{r4, r5, pc}
 80a07f0:	200001b4 	.word	0x200001b4
 80a07f4:	2000033c 	.word	0x2000033c
 80a07f8:	20000068 	.word	0x20000068
 80a07fc:	080a06e1 	.word	0x080a06e1

080a0800 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0800:	b510      	push	{r4, lr}
 80a0802:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0804:	2214      	movs	r2, #20
 80a0806:	2100      	movs	r1, #0
 80a0808:	f000 fad5 	bl	80a0db6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a080c:	4b05      	ldr	r3, [pc, #20]	; (80a0824 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a080e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0810:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0812:	4b05      	ldr	r3, [pc, #20]	; (80a0828 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0814:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0816:	f240 1301 	movw	r3, #257	; 0x101
 80a081a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a081c:	2381      	movs	r3, #129	; 0x81
 80a081e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0820:	bd10      	pop	{r4, pc}
 80a0822:	bf00      	nop
 80a0824:	200003ec 	.word	0x200003ec
 80a0828:	20000354 	.word	0x20000354

080a082c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a082c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a082e:	4c0e      	ldr	r4, [pc, #56]	; (80a0868 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0830:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0832:	a801      	add	r0, sp, #4
 80a0834:	f7ff ffe4 	bl	80a0800 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0838:	6823      	ldr	r3, [r4, #0]
 80a083a:	07db      	lsls	r3, r3, #31
 80a083c:	d410      	bmi.n	80a0860 <_Z17_fetch_usbserial1v+0x34>
 80a083e:	4620      	mov	r0, r4
 80a0840:	f7ff fc2d 	bl	80a009e <__cxa_guard_acquire>
 80a0844:	b160      	cbz	r0, 80a0860 <_Z17_fetch_usbserial1v+0x34>
 80a0846:	aa01      	add	r2, sp, #4
 80a0848:	2101      	movs	r1, #1
 80a084a:	4808      	ldr	r0, [pc, #32]	; (80a086c <_Z17_fetch_usbserial1v+0x40>)
 80a084c:	f7ff ff88 	bl	80a0760 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0850:	4620      	mov	r0, r4
 80a0852:	f7ff fc29 	bl	80a00a8 <__cxa_guard_release>
 80a0856:	4a06      	ldr	r2, [pc, #24]	; (80a0870 <_Z17_fetch_usbserial1v+0x44>)
 80a0858:	4906      	ldr	r1, [pc, #24]	; (80a0874 <_Z17_fetch_usbserial1v+0x48>)
 80a085a:	4804      	ldr	r0, [pc, #16]	; (80a086c <_Z17_fetch_usbserial1v+0x40>)
 80a085c:	f000 f942 	bl	80a0ae4 <__aeabi_atexit>
  return _usbserial1;
}
 80a0860:	4802      	ldr	r0, [pc, #8]	; (80a086c <_Z17_fetch_usbserial1v+0x40>)
 80a0862:	b006      	add	sp, #24
 80a0864:	bd10      	pop	{r4, pc}
 80a0866:	bf00      	nop
 80a0868:	20000350 	.word	0x20000350
 80a086c:	200003d8 	.word	0x200003d8
 80a0870:	20000068 	.word	0x20000068
 80a0874:	080a06e1 	.word	0x080a06e1

080a0878 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0878:	2200      	movs	r2, #0
 80a087a:	4611      	mov	r1, r2
 80a087c:	6840      	ldr	r0, [r0, #4]
 80a087e:	f7ff bcf1 	b.w	80a0264 <network_ready>

080a0882 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0882:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0884:	4616      	mov	r6, r2
 80a0886:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0888:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a088a:	460f      	mov	r7, r1
 80a088c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a088e:	2100      	movs	r1, #0
 80a0890:	a803      	add	r0, sp, #12
 80a0892:	f000 fa90 	bl	80a0db6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0896:	4630      	mov	r0, r6
 80a0898:	f000 fabe 	bl	80a0e18 <strlen>
 80a089c:	2500      	movs	r5, #0
 80a089e:	9500      	str	r5, [sp, #0]
 80a08a0:	b281      	uxth	r1, r0
 80a08a2:	687b      	ldr	r3, [r7, #4]
 80a08a4:	aa03      	add	r2, sp, #12
 80a08a6:	4630      	mov	r0, r6
 80a08a8:	f7ff fc98 	bl	80a01dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a08ac:	b120      	cbz	r0, 80a08b8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a08ae:	4629      	mov	r1, r5
 80a08b0:	4620      	mov	r0, r4
 80a08b2:	f7ff fd69 	bl	80a0388 <_ZN9IPAddressC1Em>
 80a08b6:	e003      	b.n	80a08c0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a08b8:	a903      	add	r1, sp, #12
 80a08ba:	4620      	mov	r0, r4
 80a08bc:	f7ff fd52 	bl	80a0364 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a08c0:	4620      	mov	r0, r4
 80a08c2:	b009      	add	sp, #36	; 0x24
 80a08c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a08c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a08c6:	2200      	movs	r2, #0
 80a08c8:	4611      	mov	r1, r2
 80a08ca:	6840      	ldr	r0, [r0, #4]
 80a08cc:	f7ff bcea 	b.w	80a02a4 <network_listening>

080a08d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a08d0:	2200      	movs	r2, #0
 80a08d2:	4611      	mov	r1, r2
 80a08d4:	6840      	ldr	r0, [r0, #4]
 80a08d6:	f7ff bcf5 	b.w	80a02c4 <network_get_listen_timeout>

080a08da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a08da:	2200      	movs	r2, #0
 80a08dc:	6840      	ldr	r0, [r0, #4]
 80a08de:	f7ff bce9 	b.w	80a02b4 <network_set_listen_timeout>

080a08e2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a08e2:	2200      	movs	r2, #0
 80a08e4:	f081 0101 	eor.w	r1, r1, #1
 80a08e8:	6840      	ldr	r0, [r0, #4]
 80a08ea:	f7ff bcd3 	b.w	80a0294 <network_listen>

080a08ee <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a08ee:	2300      	movs	r3, #0
 80a08f0:	461a      	mov	r2, r3
 80a08f2:	4619      	mov	r1, r3
 80a08f4:	6840      	ldr	r0, [r0, #4]
 80a08f6:	f7ff bcc5 	b.w	80a0284 <network_off>

080a08fa <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a08fa:	2300      	movs	r3, #0
 80a08fc:	461a      	mov	r2, r3
 80a08fe:	4619      	mov	r1, r3
 80a0900:	6840      	ldr	r0, [r0, #4]
 80a0902:	f7ff bcb7 	b.w	80a0274 <network_on>

080a0906 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0906:	2200      	movs	r2, #0
 80a0908:	4611      	mov	r1, r2
 80a090a:	6840      	ldr	r0, [r0, #4]
 80a090c:	f7ff bc9a 	b.w	80a0244 <network_connecting>

080a0910 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0910:	2200      	movs	r2, #0
 80a0912:	2102      	movs	r1, #2
 80a0914:	6840      	ldr	r0, [r0, #4]
 80a0916:	f7ff bc9d 	b.w	80a0254 <network_disconnect>

080a091a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a091a:	2300      	movs	r3, #0
 80a091c:	461a      	mov	r2, r3
 80a091e:	6840      	ldr	r0, [r0, #4]
 80a0920:	f7ff bc88 	b.w	80a0234 <network_connect>

080a0924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0924:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0926:	2204      	movs	r2, #4
 80a0928:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a092a:	4a02      	ldr	r2, [pc, #8]	; (80a0934 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a092c:	601a      	str	r2, [r3, #0]
 80a092e:	4770      	bx	lr
 80a0930:	200004f0 	.word	0x200004f0
 80a0934:	080a100c 	.word	0x080a100c

080a0938 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0938:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a093a:	4b14      	ldr	r3, [pc, #80]	; (80a098c <serialEventRun+0x54>)
 80a093c:	b133      	cbz	r3, 80a094c <serialEventRun+0x14>
 80a093e:	f7ff ff39 	bl	80a07b4 <_Z16_fetch_usbserialv>
 80a0942:	6803      	ldr	r3, [r0, #0]
 80a0944:	691b      	ldr	r3, [r3, #16]
 80a0946:	4798      	blx	r3
 80a0948:	2800      	cmp	r0, #0
 80a094a:	dc16      	bgt.n	80a097a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a094c:	4b10      	ldr	r3, [pc, #64]	; (80a0990 <serialEventRun+0x58>)
 80a094e:	b133      	cbz	r3, 80a095e <serialEventRun+0x26>
 80a0950:	f7ff fe9e 	bl	80a0690 <_Z22__fetch_global_Serial1v>
 80a0954:	6803      	ldr	r3, [r0, #0]
 80a0956:	691b      	ldr	r3, [r3, #16]
 80a0958:	4798      	blx	r3
 80a095a:	2800      	cmp	r0, #0
 80a095c:	dc10      	bgt.n	80a0980 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a095e:	4b0d      	ldr	r3, [pc, #52]	; (80a0994 <serialEventRun+0x5c>)
 80a0960:	b10b      	cbz	r3, 80a0966 <serialEventRun+0x2e>
 80a0962:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0966:	4b0c      	ldr	r3, [pc, #48]	; (80a0998 <serialEventRun+0x60>)
 80a0968:	b17b      	cbz	r3, 80a098a <serialEventRun+0x52>
 80a096a:	f7ff ff5f 	bl	80a082c <_Z17_fetch_usbserial1v>
 80a096e:	6803      	ldr	r3, [r0, #0]
 80a0970:	691b      	ldr	r3, [r3, #16]
 80a0972:	4798      	blx	r3
 80a0974:	2800      	cmp	r0, #0
 80a0976:	dc06      	bgt.n	80a0986 <serialEventRun+0x4e>
 80a0978:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a097a:	f3af 8000 	nop.w
 80a097e:	e7e5      	b.n	80a094c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0980:	f3af 8000 	nop.w
 80a0984:	e7eb      	b.n	80a095e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0986:	f3af 8000 	nop.w
 80a098a:	bd08      	pop	{r3, pc}
	...

080a099c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a099c:	b508      	push	{r3, lr}
	serialEventRun();
 80a099e:	f7ff ffcb 	bl	80a0938 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a09a2:	f7ff fb9b 	bl	80a00dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a09a6:	4b01      	ldr	r3, [pc, #4]	; (80a09ac <_post_loop+0x10>)
 80a09a8:	6018      	str	r0, [r3, #0]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	20000500 	.word	0x20000500

080a09b0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a09b0:	4802      	ldr	r0, [pc, #8]	; (80a09bc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a09b2:	4a03      	ldr	r2, [pc, #12]	; (80a09c0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a09b4:	4903      	ldr	r1, [pc, #12]	; (80a09c4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a09b6:	1a12      	subs	r2, r2, r0
 80a09b8:	f000 b9f2 	b.w	80a0da0 <memcpy>
 80a09bc:	40024000 	.word	0x40024000
 80a09c0:	40024004 	.word	0x40024004
 80a09c4:	080a10e0 	.word	0x080a10e0

080a09c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a09c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09ca:	2300      	movs	r3, #0
 80a09cc:	9300      	str	r3, [sp, #0]
 80a09ce:	461a      	mov	r2, r3
 80a09d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09d4:	f7ff fc1c 	bl	80a0210 <system_ctrl_set_result>
}
 80a09d8:	b003      	add	sp, #12
 80a09da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a09e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a09e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a09e2:	8843      	ldrh	r3, [r0, #2]
 80a09e4:	2b0a      	cmp	r3, #10
 80a09e6:	d008      	beq.n	80a09fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a09e8:	2b50      	cmp	r3, #80	; 0x50
 80a09ea:	d109      	bne.n	80a0a00 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a09ec:	4b09      	ldr	r3, [pc, #36]	; (80a0a14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a09ee:	681b      	ldr	r3, [r3, #0]
 80a09f0:	b13b      	cbz	r3, 80a0a02 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a09f2:	b003      	add	sp, #12
 80a09f4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a09f8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a09fa:	f7ff ffe5 	bl	80a09c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a09fe:	e006      	b.n	80a0a0e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a00:	2300      	movs	r3, #0
 80a0a02:	9300      	str	r3, [sp, #0]
 80a0a04:	461a      	mov	r2, r3
 80a0a06:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0a0a:	f7ff fc01 	bl	80a0210 <system_ctrl_set_result>
        break;
    }
}
 80a0a0e:	b003      	add	sp, #12
 80a0a10:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0a14:	200004f8 	.word	0x200004f8

080a0a18 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0a18:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0a1a:	4c10      	ldr	r4, [pc, #64]	; (80a0a5c <module_user_init_hook+0x44>)
 80a0a1c:	4d10      	ldr	r5, [pc, #64]	; (80a0a60 <module_user_init_hook+0x48>)
 80a0a1e:	6823      	ldr	r3, [r4, #0]
 80a0a20:	42ab      	cmp	r3, r5
 80a0a22:	4b10      	ldr	r3, [pc, #64]	; (80a0a64 <module_user_init_hook+0x4c>)
 80a0a24:	bf0c      	ite	eq
 80a0a26:	2201      	moveq	r2, #1
 80a0a28:	2200      	movne	r2, #0
 80a0a2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0a2c:	d002      	beq.n	80a0a34 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0a2e:	f7ff ffbf 	bl	80a09b0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0a32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0a34:	f7ff fb4a 	bl	80a00cc <HAL_RNG_GetRandomNumber>
 80a0a38:	4604      	mov	r4, r0
    srand(seed);
 80a0a3a:	f000 f9c5 	bl	80a0dc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0a3e:	4b0a      	ldr	r3, [pc, #40]	; (80a0a68 <module_user_init_hook+0x50>)
 80a0a40:	b113      	cbz	r3, 80a0a48 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0a42:	4620      	mov	r0, r4
 80a0a44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0a48:	2100      	movs	r1, #0
 80a0a4a:	4807      	ldr	r0, [pc, #28]	; (80a0a68 <module_user_init_hook+0x50>)
 80a0a4c:	f7ff fbea 	bl	80a0224 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0a54:	2100      	movs	r1, #0
 80a0a56:	4805      	ldr	r0, [pc, #20]	; (80a0a6c <module_user_init_hook+0x54>)
 80a0a58:	f7ff bbd0 	b.w	80a01fc <system_ctrl_set_app_request_handler>
 80a0a5c:	40024000 	.word	0x40024000
 80a0a60:	9a271c1e 	.word	0x9a271c1e
 80a0a64:	200004fc 	.word	0x200004fc
 80a0a68:	00000000 	.word	0x00000000
 80a0a6c:	080a09e1 	.word	0x080a09e1

080a0a70 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0a70:	b513      	push	{r0, r1, r4, lr}
 80a0a72:	4c08      	ldr	r4, [pc, #32]	; (80a0a94 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0a74:	2300      	movs	r3, #0
 80a0a76:	461a      	mov	r2, r3
 80a0a78:	4619      	mov	r1, r3
 80a0a7a:	9300      	str	r3, [sp, #0]
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	f7ff fc99 	bl	80a03b4 <_ZN9IPAddressC1Ehhhh>
 80a0a82:	4620      	mov	r0, r4
 80a0a84:	4a04      	ldr	r2, [pc, #16]	; (80a0a98 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0a86:	4905      	ldr	r1, [pc, #20]	; (80a0a9c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0a88:	b002      	add	sp, #8
 80a0a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0a8e:	f000 b829 	b.w	80a0ae4 <__aeabi_atexit>
 80a0a92:	bf00      	nop
 80a0a94:	20000504 	.word	0x20000504
 80a0a98:	20000068 	.word	0x20000068
 80a0a9c:	080a0307 	.word	0x080a0307

080a0aa0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0aa0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0aa2:	4c0c      	ldr	r4, [pc, #48]	; (80a0ad4 <_GLOBAL__sub_I_SPI+0x34>)
 80a0aa4:	4e0c      	ldr	r6, [pc, #48]	; (80a0ad8 <_GLOBAL__sub_I_SPI+0x38>)
 80a0aa6:	4d0d      	ldr	r5, [pc, #52]	; (80a0adc <_GLOBAL__sub_I_SPI+0x3c>)
 80a0aa8:	2100      	movs	r1, #0
 80a0aaa:	4620      	mov	r0, r4
 80a0aac:	f7ff fd6e 	bl	80a058c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0ab0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0ab2:	4c0b      	ldr	r4, [pc, #44]	; (80a0ae0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0ab4:	4632      	mov	r2, r6
 80a0ab6:	4629      	mov	r1, r5
 80a0ab8:	f000 f814 	bl	80a0ae4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0abc:	2101      	movs	r1, #1
 80a0abe:	4620      	mov	r0, r4
 80a0ac0:	f7ff fd64 	bl	80a058c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0ac4:	4632      	mov	r2, r6
 80a0ac6:	4629      	mov	r1, r5
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0ace:	f000 b809 	b.w	80a0ae4 <__aeabi_atexit>
 80a0ad2:	bf00      	nop
 80a0ad4:	2000051c 	.word	0x2000051c
 80a0ad8:	20000068 	.word	0x20000068
 80a0adc:	080a057d 	.word	0x080a057d
 80a0ae0:	2000052c 	.word	0x2000052c

080a0ae4 <__aeabi_atexit>:
 80a0ae4:	460b      	mov	r3, r1
 80a0ae6:	4601      	mov	r1, r0
 80a0ae8:	4618      	mov	r0, r3
 80a0aea:	f000 b94b 	b.w	80a0d84 <__cxa_atexit>

080a0aee <_ZdlPvj>:
 80a0aee:	f7ff bad4 	b.w	80a009a <_ZdlPv>
	...

080a0af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0af4:	4b24      	ldr	r3, [pc, #144]	; (80a0b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0af6:	681a      	ldr	r2, [r3, #0]
 80a0af8:	07d0      	lsls	r0, r2, #31
 80a0afa:	bf5c      	itt	pl
 80a0afc:	2201      	movpl	r2, #1
 80a0afe:	601a      	strpl	r2, [r3, #0]
 80a0b00:	4b22      	ldr	r3, [pc, #136]	; (80a0b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0b02:	681a      	ldr	r2, [r3, #0]
 80a0b04:	07d1      	lsls	r1, r2, #31
 80a0b06:	bf5c      	itt	pl
 80a0b08:	2201      	movpl	r2, #1
 80a0b0a:	601a      	strpl	r2, [r3, #0]
 80a0b0c:	4b20      	ldr	r3, [pc, #128]	; (80a0b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0b0e:	681a      	ldr	r2, [r3, #0]
 80a0b10:	07d2      	lsls	r2, r2, #31
 80a0b12:	bf5c      	itt	pl
 80a0b14:	2201      	movpl	r2, #1
 80a0b16:	601a      	strpl	r2, [r3, #0]
 80a0b18:	4b1e      	ldr	r3, [pc, #120]	; (80a0b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0b1a:	681a      	ldr	r2, [r3, #0]
 80a0b1c:	07d0      	lsls	r0, r2, #31
 80a0b1e:	bf5c      	itt	pl
 80a0b20:	2201      	movpl	r2, #1
 80a0b22:	601a      	strpl	r2, [r3, #0]
 80a0b24:	4b1c      	ldr	r3, [pc, #112]	; (80a0b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0b26:	681a      	ldr	r2, [r3, #0]
 80a0b28:	07d1      	lsls	r1, r2, #31
 80a0b2a:	bf5c      	itt	pl
 80a0b2c:	2201      	movpl	r2, #1
 80a0b2e:	601a      	strpl	r2, [r3, #0]
 80a0b30:	4b1a      	ldr	r3, [pc, #104]	; (80a0b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0b32:	681a      	ldr	r2, [r3, #0]
 80a0b34:	07d2      	lsls	r2, r2, #31
 80a0b36:	bf5c      	itt	pl
 80a0b38:	2201      	movpl	r2, #1
 80a0b3a:	601a      	strpl	r2, [r3, #0]
 80a0b3c:	4b18      	ldr	r3, [pc, #96]	; (80a0ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0b3e:	681a      	ldr	r2, [r3, #0]
 80a0b40:	07d0      	lsls	r0, r2, #31
 80a0b42:	bf5c      	itt	pl
 80a0b44:	2201      	movpl	r2, #1
 80a0b46:	601a      	strpl	r2, [r3, #0]
 80a0b48:	4b16      	ldr	r3, [pc, #88]	; (80a0ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0b4a:	681a      	ldr	r2, [r3, #0]
 80a0b4c:	07d1      	lsls	r1, r2, #31
 80a0b4e:	bf5c      	itt	pl
 80a0b50:	2201      	movpl	r2, #1
 80a0b52:	601a      	strpl	r2, [r3, #0]
 80a0b54:	4b14      	ldr	r3, [pc, #80]	; (80a0ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0b56:	681a      	ldr	r2, [r3, #0]
 80a0b58:	07d2      	lsls	r2, r2, #31
 80a0b5a:	bf5c      	itt	pl
 80a0b5c:	2201      	movpl	r2, #1
 80a0b5e:	601a      	strpl	r2, [r3, #0]
 80a0b60:	4b12      	ldr	r3, [pc, #72]	; (80a0bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0b62:	681a      	ldr	r2, [r3, #0]
 80a0b64:	07d0      	lsls	r0, r2, #31
 80a0b66:	bf5c      	itt	pl
 80a0b68:	2201      	movpl	r2, #1
 80a0b6a:	601a      	strpl	r2, [r3, #0]
 80a0b6c:	4b10      	ldr	r3, [pc, #64]	; (80a0bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0b6e:	681a      	ldr	r2, [r3, #0]
 80a0b70:	07d1      	lsls	r1, r2, #31
 80a0b72:	bf5c      	itt	pl
 80a0b74:	2201      	movpl	r2, #1
 80a0b76:	601a      	strpl	r2, [r3, #0]
 80a0b78:	4b0e      	ldr	r3, [pc, #56]	; (80a0bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0b7a:	681a      	ldr	r2, [r3, #0]
 80a0b7c:	07d2      	lsls	r2, r2, #31
 80a0b7e:	bf5c      	itt	pl
 80a0b80:	2201      	movpl	r2, #1
 80a0b82:	601a      	strpl	r2, [r3, #0]
 80a0b84:	4770      	bx	lr
 80a0b86:	bf00      	nop
 80a0b88:	20000568 	.word	0x20000568
 80a0b8c:	20000564 	.word	0x20000564
 80a0b90:	20000560 	.word	0x20000560
 80a0b94:	2000055c 	.word	0x2000055c
 80a0b98:	20000558 	.word	0x20000558
 80a0b9c:	20000554 	.word	0x20000554
 80a0ba0:	20000550 	.word	0x20000550
 80a0ba4:	2000054c 	.word	0x2000054c
 80a0ba8:	20000548 	.word	0x20000548
 80a0bac:	20000544 	.word	0x20000544
 80a0bb0:	20000540 	.word	0x20000540
 80a0bb4:	2000053c 	.word	0x2000053c

080a0bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0bb8:	4b18      	ldr	r3, [pc, #96]	; (80a0c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0bba:	681a      	ldr	r2, [r3, #0]
 80a0bbc:	07d1      	lsls	r1, r2, #31
 80a0bbe:	bf5c      	itt	pl
 80a0bc0:	2201      	movpl	r2, #1
 80a0bc2:	601a      	strpl	r2, [r3, #0]
 80a0bc4:	4b16      	ldr	r3, [pc, #88]	; (80a0c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0bc6:	681a      	ldr	r2, [r3, #0]
 80a0bc8:	07d2      	lsls	r2, r2, #31
 80a0bca:	bf5c      	itt	pl
 80a0bcc:	2201      	movpl	r2, #1
 80a0bce:	601a      	strpl	r2, [r3, #0]
 80a0bd0:	4b14      	ldr	r3, [pc, #80]	; (80a0c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0bd2:	681a      	ldr	r2, [r3, #0]
 80a0bd4:	07d0      	lsls	r0, r2, #31
 80a0bd6:	bf5c      	itt	pl
 80a0bd8:	2201      	movpl	r2, #1
 80a0bda:	601a      	strpl	r2, [r3, #0]
 80a0bdc:	4b12      	ldr	r3, [pc, #72]	; (80a0c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0bde:	681a      	ldr	r2, [r3, #0]
 80a0be0:	07d1      	lsls	r1, r2, #31
 80a0be2:	bf5c      	itt	pl
 80a0be4:	2201      	movpl	r2, #1
 80a0be6:	601a      	strpl	r2, [r3, #0]
 80a0be8:	4b10      	ldr	r3, [pc, #64]	; (80a0c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0bea:	681a      	ldr	r2, [r3, #0]
 80a0bec:	07d2      	lsls	r2, r2, #31
 80a0bee:	bf5c      	itt	pl
 80a0bf0:	2201      	movpl	r2, #1
 80a0bf2:	601a      	strpl	r2, [r3, #0]
 80a0bf4:	4b0e      	ldr	r3, [pc, #56]	; (80a0c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0bf6:	681a      	ldr	r2, [r3, #0]
 80a0bf8:	07d0      	lsls	r0, r2, #31
 80a0bfa:	bf5c      	itt	pl
 80a0bfc:	2201      	movpl	r2, #1
 80a0bfe:	601a      	strpl	r2, [r3, #0]
 80a0c00:	4b0c      	ldr	r3, [pc, #48]	; (80a0c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0c02:	681a      	ldr	r2, [r3, #0]
 80a0c04:	07d1      	lsls	r1, r2, #31
 80a0c06:	bf5c      	itt	pl
 80a0c08:	2201      	movpl	r2, #1
 80a0c0a:	601a      	strpl	r2, [r3, #0]
 80a0c0c:	4b0a      	ldr	r3, [pc, #40]	; (80a0c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0c0e:	681a      	ldr	r2, [r3, #0]
 80a0c10:	07d2      	lsls	r2, r2, #31
 80a0c12:	bf5c      	itt	pl
 80a0c14:	2201      	movpl	r2, #1
 80a0c16:	601a      	strpl	r2, [r3, #0]
 80a0c18:	4770      	bx	lr
 80a0c1a:	bf00      	nop
 80a0c1c:	20000588 	.word	0x20000588
 80a0c20:	20000584 	.word	0x20000584
 80a0c24:	20000580 	.word	0x20000580
 80a0c28:	2000057c 	.word	0x2000057c
 80a0c2c:	20000578 	.word	0x20000578
 80a0c30:	20000574 	.word	0x20000574
 80a0c34:	20000570 	.word	0x20000570
 80a0c38:	2000056c 	.word	0x2000056c

080a0c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0c3c:	4b18      	ldr	r3, [pc, #96]	; (80a0ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0c3e:	681a      	ldr	r2, [r3, #0]
 80a0c40:	07d1      	lsls	r1, r2, #31
 80a0c42:	bf5c      	itt	pl
 80a0c44:	2201      	movpl	r2, #1
 80a0c46:	601a      	strpl	r2, [r3, #0]
 80a0c48:	4b16      	ldr	r3, [pc, #88]	; (80a0ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0c4a:	681a      	ldr	r2, [r3, #0]
 80a0c4c:	07d2      	lsls	r2, r2, #31
 80a0c4e:	bf5c      	itt	pl
 80a0c50:	2201      	movpl	r2, #1
 80a0c52:	601a      	strpl	r2, [r3, #0]
 80a0c54:	4b14      	ldr	r3, [pc, #80]	; (80a0ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0c56:	681a      	ldr	r2, [r3, #0]
 80a0c58:	07d0      	lsls	r0, r2, #31
 80a0c5a:	bf5c      	itt	pl
 80a0c5c:	2201      	movpl	r2, #1
 80a0c5e:	601a      	strpl	r2, [r3, #0]
 80a0c60:	4b12      	ldr	r3, [pc, #72]	; (80a0cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0c62:	681a      	ldr	r2, [r3, #0]
 80a0c64:	07d1      	lsls	r1, r2, #31
 80a0c66:	bf5c      	itt	pl
 80a0c68:	2201      	movpl	r2, #1
 80a0c6a:	601a      	strpl	r2, [r3, #0]
 80a0c6c:	4b10      	ldr	r3, [pc, #64]	; (80a0cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0c6e:	681a      	ldr	r2, [r3, #0]
 80a0c70:	07d2      	lsls	r2, r2, #31
 80a0c72:	bf5c      	itt	pl
 80a0c74:	2201      	movpl	r2, #1
 80a0c76:	601a      	strpl	r2, [r3, #0]
 80a0c78:	4b0e      	ldr	r3, [pc, #56]	; (80a0cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0c7a:	681a      	ldr	r2, [r3, #0]
 80a0c7c:	07d0      	lsls	r0, r2, #31
 80a0c7e:	bf5c      	itt	pl
 80a0c80:	2201      	movpl	r2, #1
 80a0c82:	601a      	strpl	r2, [r3, #0]
 80a0c84:	4b0c      	ldr	r3, [pc, #48]	; (80a0cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0c86:	681a      	ldr	r2, [r3, #0]
 80a0c88:	07d1      	lsls	r1, r2, #31
 80a0c8a:	bf5c      	itt	pl
 80a0c8c:	2201      	movpl	r2, #1
 80a0c8e:	601a      	strpl	r2, [r3, #0]
 80a0c90:	4b0a      	ldr	r3, [pc, #40]	; (80a0cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0c92:	681a      	ldr	r2, [r3, #0]
 80a0c94:	07d2      	lsls	r2, r2, #31
 80a0c96:	bf5c      	itt	pl
 80a0c98:	2201      	movpl	r2, #1
 80a0c9a:	601a      	strpl	r2, [r3, #0]
 80a0c9c:	4770      	bx	lr
 80a0c9e:	bf00      	nop
 80a0ca0:	200005a8 	.word	0x200005a8
 80a0ca4:	200005a4 	.word	0x200005a4
 80a0ca8:	200005a0 	.word	0x200005a0
 80a0cac:	2000059c 	.word	0x2000059c
 80a0cb0:	20000598 	.word	0x20000598
 80a0cb4:	20000594 	.word	0x20000594
 80a0cb8:	20000590 	.word	0x20000590
 80a0cbc:	2000058c 	.word	0x2000058c

080a0cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0cc0:	4b24      	ldr	r3, [pc, #144]	; (80a0d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0cc2:	681a      	ldr	r2, [r3, #0]
 80a0cc4:	07d0      	lsls	r0, r2, #31
 80a0cc6:	bf5c      	itt	pl
 80a0cc8:	2201      	movpl	r2, #1
 80a0cca:	601a      	strpl	r2, [r3, #0]
 80a0ccc:	4b22      	ldr	r3, [pc, #136]	; (80a0d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0cce:	681a      	ldr	r2, [r3, #0]
 80a0cd0:	07d1      	lsls	r1, r2, #31
 80a0cd2:	bf5c      	itt	pl
 80a0cd4:	2201      	movpl	r2, #1
 80a0cd6:	601a      	strpl	r2, [r3, #0]
 80a0cd8:	4b20      	ldr	r3, [pc, #128]	; (80a0d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0cda:	681a      	ldr	r2, [r3, #0]
 80a0cdc:	07d2      	lsls	r2, r2, #31
 80a0cde:	bf5c      	itt	pl
 80a0ce0:	2201      	movpl	r2, #1
 80a0ce2:	601a      	strpl	r2, [r3, #0]
 80a0ce4:	4b1e      	ldr	r3, [pc, #120]	; (80a0d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0ce6:	681a      	ldr	r2, [r3, #0]
 80a0ce8:	07d0      	lsls	r0, r2, #31
 80a0cea:	bf5c      	itt	pl
 80a0cec:	2201      	movpl	r2, #1
 80a0cee:	601a      	strpl	r2, [r3, #0]
 80a0cf0:	4b1c      	ldr	r3, [pc, #112]	; (80a0d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0cf2:	681a      	ldr	r2, [r3, #0]
 80a0cf4:	07d1      	lsls	r1, r2, #31
 80a0cf6:	bf5c      	itt	pl
 80a0cf8:	2201      	movpl	r2, #1
 80a0cfa:	601a      	strpl	r2, [r3, #0]
 80a0cfc:	4b1a      	ldr	r3, [pc, #104]	; (80a0d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0cfe:	681a      	ldr	r2, [r3, #0]
 80a0d00:	07d2      	lsls	r2, r2, #31
 80a0d02:	bf5c      	itt	pl
 80a0d04:	2201      	movpl	r2, #1
 80a0d06:	601a      	strpl	r2, [r3, #0]
 80a0d08:	4b18      	ldr	r3, [pc, #96]	; (80a0d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0d0a:	681a      	ldr	r2, [r3, #0]
 80a0d0c:	07d0      	lsls	r0, r2, #31
 80a0d0e:	bf5c      	itt	pl
 80a0d10:	2201      	movpl	r2, #1
 80a0d12:	601a      	strpl	r2, [r3, #0]
 80a0d14:	4b16      	ldr	r3, [pc, #88]	; (80a0d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0d16:	681a      	ldr	r2, [r3, #0]
 80a0d18:	07d1      	lsls	r1, r2, #31
 80a0d1a:	bf5c      	itt	pl
 80a0d1c:	2201      	movpl	r2, #1
 80a0d1e:	601a      	strpl	r2, [r3, #0]
 80a0d20:	4b14      	ldr	r3, [pc, #80]	; (80a0d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0d22:	681a      	ldr	r2, [r3, #0]
 80a0d24:	07d2      	lsls	r2, r2, #31
 80a0d26:	bf5c      	itt	pl
 80a0d28:	2201      	movpl	r2, #1
 80a0d2a:	601a      	strpl	r2, [r3, #0]
 80a0d2c:	4b12      	ldr	r3, [pc, #72]	; (80a0d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0d2e:	681a      	ldr	r2, [r3, #0]
 80a0d30:	07d0      	lsls	r0, r2, #31
 80a0d32:	bf5c      	itt	pl
 80a0d34:	2201      	movpl	r2, #1
 80a0d36:	601a      	strpl	r2, [r3, #0]
 80a0d38:	4b10      	ldr	r3, [pc, #64]	; (80a0d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0d3a:	681a      	ldr	r2, [r3, #0]
 80a0d3c:	07d1      	lsls	r1, r2, #31
 80a0d3e:	bf5c      	itt	pl
 80a0d40:	2201      	movpl	r2, #1
 80a0d42:	601a      	strpl	r2, [r3, #0]
 80a0d44:	4b0e      	ldr	r3, [pc, #56]	; (80a0d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0d46:	681a      	ldr	r2, [r3, #0]
 80a0d48:	07d2      	lsls	r2, r2, #31
 80a0d4a:	bf5c      	itt	pl
 80a0d4c:	2201      	movpl	r2, #1
 80a0d4e:	601a      	strpl	r2, [r3, #0]
 80a0d50:	4770      	bx	lr
 80a0d52:	bf00      	nop
 80a0d54:	200005d8 	.word	0x200005d8
 80a0d58:	200005d4 	.word	0x200005d4
 80a0d5c:	200005d0 	.word	0x200005d0
 80a0d60:	200005cc 	.word	0x200005cc
 80a0d64:	200005c8 	.word	0x200005c8
 80a0d68:	200005c4 	.word	0x200005c4
 80a0d6c:	200005c0 	.word	0x200005c0
 80a0d70:	200005bc 	.word	0x200005bc
 80a0d74:	200005b8 	.word	0x200005b8
 80a0d78:	200005b4 	.word	0x200005b4
 80a0d7c:	200005b0 	.word	0x200005b0
 80a0d80:	200005ac 	.word	0x200005ac

080a0d84 <__cxa_atexit>:
 80a0d84:	b510      	push	{r4, lr}
 80a0d86:	4c05      	ldr	r4, [pc, #20]	; (80a0d9c <__cxa_atexit+0x18>)
 80a0d88:	4613      	mov	r3, r2
 80a0d8a:	b12c      	cbz	r4, 80a0d98 <__cxa_atexit+0x14>
 80a0d8c:	460a      	mov	r2, r1
 80a0d8e:	4601      	mov	r1, r0
 80a0d90:	2002      	movs	r0, #2
 80a0d92:	f3af 8000 	nop.w
 80a0d96:	bd10      	pop	{r4, pc}
 80a0d98:	4620      	mov	r0, r4
 80a0d9a:	bd10      	pop	{r4, pc}
 80a0d9c:	00000000 	.word	0x00000000

080a0da0 <memcpy>:
 80a0da0:	b510      	push	{r4, lr}
 80a0da2:	1e43      	subs	r3, r0, #1
 80a0da4:	440a      	add	r2, r1
 80a0da6:	4291      	cmp	r1, r2
 80a0da8:	d004      	beq.n	80a0db4 <memcpy+0x14>
 80a0daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0db2:	e7f8      	b.n	80a0da6 <memcpy+0x6>
 80a0db4:	bd10      	pop	{r4, pc}

080a0db6 <memset>:
 80a0db6:	4603      	mov	r3, r0
 80a0db8:	4402      	add	r2, r0
 80a0dba:	4293      	cmp	r3, r2
 80a0dbc:	d002      	beq.n	80a0dc4 <memset+0xe>
 80a0dbe:	f803 1b01 	strb.w	r1, [r3], #1
 80a0dc2:	e7fa      	b.n	80a0dba <memset+0x4>
 80a0dc4:	4770      	bx	lr
	...

080a0dc8 <srand>:
 80a0dc8:	b538      	push	{r3, r4, r5, lr}
 80a0dca:	4b12      	ldr	r3, [pc, #72]	; (80a0e14 <srand+0x4c>)
 80a0dcc:	4605      	mov	r5, r0
 80a0dce:	681c      	ldr	r4, [r3, #0]
 80a0dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0dd2:	b9d3      	cbnz	r3, 80a0e0a <srand+0x42>
 80a0dd4:	2018      	movs	r0, #24
 80a0dd6:	f7ff fa7d 	bl	80a02d4 <malloc>
 80a0dda:	f243 330e 	movw	r3, #13070	; 0x330e
 80a0dde:	63a0      	str	r0, [r4, #56]	; 0x38
 80a0de0:	8003      	strh	r3, [r0, #0]
 80a0de2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a0de6:	8043      	strh	r3, [r0, #2]
 80a0de8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a0dec:	8083      	strh	r3, [r0, #4]
 80a0dee:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a0df2:	80c3      	strh	r3, [r0, #6]
 80a0df4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a0df8:	8103      	strh	r3, [r0, #8]
 80a0dfa:	2305      	movs	r3, #5
 80a0dfc:	8143      	strh	r3, [r0, #10]
 80a0dfe:	230b      	movs	r3, #11
 80a0e00:	8183      	strh	r3, [r0, #12]
 80a0e02:	2201      	movs	r2, #1
 80a0e04:	2300      	movs	r3, #0
 80a0e06:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a0e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0e0c:	2200      	movs	r2, #0
 80a0e0e:	611d      	str	r5, [r3, #16]
 80a0e10:	615a      	str	r2, [r3, #20]
 80a0e12:	bd38      	pop	{r3, r4, r5, pc}
 80a0e14:	20000064 	.word	0x20000064

080a0e18 <strlen>:
 80a0e18:	4603      	mov	r3, r0
 80a0e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0e1e:	2a00      	cmp	r2, #0
 80a0e20:	d1fb      	bne.n	80a0e1a <strlen+0x2>
 80a0e22:	1a18      	subs	r0, r3, r0
 80a0e24:	3801      	subs	r0, #1
 80a0e26:	4770      	bx	lr

080a0e28 <dynalib_user>:
 80a0e28:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a0e38:	0000 0000                                   ....

080a0e3c <_ZTV9IPAddress>:
	...
 80a0e44:	0317 080a 0307 080a 0309 080a 6162 6475     ............baud
 80a0e54:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a0e64:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a0e74:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a0e84:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a0e94:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a0ea4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a0eb4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a0ec4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a0ed4:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a0ee4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a0ef4:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a0f04:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a0f14:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a0f24:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a0f34 <_ZTVN5spark12NetworkClassE>:
	...
 80a0f3c:	03dd 080a 03e7 080a 03f1 080a 03fb 080a     ................
 80a0f4c:	0405 080a 0411 080a 041d 080a 0429 080a     ............)...
 80a0f5c:	0431 080a 043b 080a 0445 080a               1...;...E...

080a0f68 <_ZTV8SPIClass>:
	...
 80a0f70:	057d 080a 057f 080a 005a 2b25 3330 3a64     }.......Z.%+03d:
 80a0f80:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a0f90:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a0fa0:	0000 0000                                   ....

080a0fa4 <_ZTV11USARTSerial>:
	...
 80a0fac:	05e1 080a 0631 080a 063f 080a 04a9 080a     ....1...?.......
 80a0fbc:	05f5 080a 0617 080a 0603 080a 062b 080a     ............+...
 80a0fcc:	05e3 080a 05e7 080a                         ........

080a0fd4 <_ZTV9USBSerial>:
	...
 80a0fdc:	06e1 080a 0731 080a 073f 080a 04a9 080a     ....1...?.......
 80a0fec:	071d 080a 06e3 080a 06f9 080a 072b 080a     ............+...
 80a0ffc:	070f 080a 06dd 080a                         ........

080a1004 <_ZTVN5spark9WiFiClassE>:
	...
 80a100c:	091b 080a 0911 080a 0907 080a 0879 080a     ............y...
 80a101c:	08fb 080a 08ef 080a 08e3 080a 08db 080a     ................
 80a102c:	08d1 080a 08c7 080a 0883 080a               ............

080a1038 <__sf_fake_stdin>:
	...

080a1058 <__sf_fake_stdout>:
	...

080a1078 <__sf_fake_stderr>:
	...
 80a1098:	0043                                        C.

080a109a <link_const_variable_data_end>:
	...

080a109c <link_constructors_location>:
 80a109c:	080a00b3 	.word	0x080a00b3
 80a10a0:	080a00b7 	.word	0x080a00b7
 80a10a4:	080a03cd 	.word	0x080a03cd
 80a10a8:	080a0495 	.word	0x080a0495
 80a10ac:	080a0561 	.word	0x080a0561
 80a10b0:	080a05b5 	.word	0x080a05b5
 80a10b4:	080a05cd 	.word	0x080a05cd
 80a10b8:	080a0925 	.word	0x080a0925
 80a10bc:	080a0a71 	.word	0x080a0a71
 80a10c0:	080a0aa1 	.word	0x080a0aa1
 80a10c4:	080a0af5 	.word	0x080a0af5
 80a10c8:	080a0bb9 	.word	0x080a0bb9
 80a10cc:	080a0c3d 	.word	0x080a0c3d
 80a10d0:	080a0cc1 	.word	0x080a0cc1

080a10d4 <link_constructors_end>:
	...
