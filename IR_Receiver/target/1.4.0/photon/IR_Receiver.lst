
/Users/ninjacat/Documents/Particle/TakeHeed/IR_Receiver/target/1.4.0/photon/IR_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a34c0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a34c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007d8  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3534  080a3534  00023534  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a355c  080a355c  0002355c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a8bd5  00000000  00000000  00023560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010897  00000000  00000000  000cc135  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017418  00000000  00000000  000dc9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002588  00000000  00000000  000f3de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038b8  00000000  00000000  000f636c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002538e  00000000  00000000  000f9c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026e3c  00000000  00000000  0011efb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a37ff  00000000  00000000  00145dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c7ec  00000000  00000000  001e95f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f84b 	bl	80a30cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f850 	bl	80a30e2 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a34c4 	.word	0x080a34c4
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000848 	.word	0x20000848
 80a005c:	20000848 	.word	0x20000848

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f971 	bl	80a2348 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a3478 	.word	0x080a3478
 80a0088:	080a34b8 	.word	0x080a34b8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b9a0 	b.w	80a03d0 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fa0d 	bl	80a04b0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b917 	b.w	80a22cc <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 ba79 	b.w	80a1594 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f001 ba77 	b.w	80a1594 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f001 ba7d 	b.w	80a15a4 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr
	...

080a00bc <NVIC_Init>:
 80a00bc:	78c3      	ldrb	r3, [r0, #3]
 80a00be:	b31b      	cbz	r3, 80a0108 <NVIC_Init+0x4c>
 80a00c0:	4b17      	ldr	r3, [pc, #92]	; (80a0120 <NVIC_Init+0x64>)
 80a00c2:	68da      	ldr	r2, [r3, #12]
 80a00c4:	7843      	ldrb	r3, [r0, #1]
 80a00c6:	43d2      	mvns	r2, r2
 80a00c8:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80a00cc:	f1c2 0104 	rsb	r1, r2, #4
 80a00d0:	b2c9      	uxtb	r1, r1
 80a00d2:	408b      	lsls	r3, r1
 80a00d4:	b2d9      	uxtb	r1, r3
 80a00d6:	230f      	movs	r3, #15
 80a00d8:	4113      	asrs	r3, r2
 80a00da:	7882      	ldrb	r2, [r0, #2]
 80a00dc:	4013      	ands	r3, r2
 80a00de:	7802      	ldrb	r2, [r0, #0]
 80a00e0:	430b      	orrs	r3, r1
 80a00e2:	011b      	lsls	r3, r3, #4
 80a00e4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80a00e8:	b2db      	uxtb	r3, r3
 80a00ea:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80a00ee:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 80a00f2:	7803      	ldrb	r3, [r0, #0]
 80a00f4:	2201      	movs	r2, #1
 80a00f6:	0959      	lsrs	r1, r3, #5
 80a00f8:	f003 031f 	and.w	r3, r3, #31
 80a00fc:	fa02 f303 	lsl.w	r3, r2, r3
 80a0100:	4a08      	ldr	r2, [pc, #32]	; (80a0124 <NVIC_Init+0x68>)
 80a0102:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a0106:	4770      	bx	lr
 80a0108:	7803      	ldrb	r3, [r0, #0]
 80a010a:	2101      	movs	r1, #1
 80a010c:	095a      	lsrs	r2, r3, #5
 80a010e:	f003 031f 	and.w	r3, r3, #31
 80a0112:	4099      	lsls	r1, r3
 80a0114:	f102 0320 	add.w	r3, r2, #32
 80a0118:	4a02      	ldr	r2, [pc, #8]	; (80a0124 <NVIC_Init+0x68>)
 80a011a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a011e:	4770      	bx	lr
 80a0120:	e000ed00 	.word	0xe000ed00
 80a0124:	e000e100 	.word	0xe000e100

080a0128 <RCC_APB1PeriphClockCmd>:
 80a0128:	4b04      	ldr	r3, [pc, #16]	; (80a013c <RCC_APB1PeriphClockCmd+0x14>)
 80a012a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80a012c:	b109      	cbz	r1, 80a0132 <RCC_APB1PeriphClockCmd+0xa>
 80a012e:	4310      	orrs	r0, r2
 80a0130:	e001      	b.n	80a0136 <RCC_APB1PeriphClockCmd+0xe>
 80a0132:	ea22 0000 	bic.w	r0, r2, r0
 80a0136:	6418      	str	r0, [r3, #64]	; 0x40
 80a0138:	4770      	bx	lr
 80a013a:	bf00      	nop
 80a013c:	40023800 	.word	0x40023800

080a0140 <RCC_APB1PeriphResetCmd>:
 80a0140:	4b04      	ldr	r3, [pc, #16]	; (80a0154 <RCC_APB1PeriphResetCmd+0x14>)
 80a0142:	6a1a      	ldr	r2, [r3, #32]
 80a0144:	b109      	cbz	r1, 80a014a <RCC_APB1PeriphResetCmd+0xa>
 80a0146:	4310      	orrs	r0, r2
 80a0148:	e001      	b.n	80a014e <RCC_APB1PeriphResetCmd+0xe>
 80a014a:	ea22 0000 	bic.w	r0, r2, r0
 80a014e:	6218      	str	r0, [r3, #32]
 80a0150:	4770      	bx	lr
 80a0152:	bf00      	nop
 80a0154:	40023800 	.word	0x40023800

080a0158 <RCC_APB2PeriphResetCmd>:
 80a0158:	4b04      	ldr	r3, [pc, #16]	; (80a016c <RCC_APB2PeriphResetCmd+0x14>)
 80a015a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80a015c:	b109      	cbz	r1, 80a0162 <RCC_APB2PeriphResetCmd+0xa>
 80a015e:	4310      	orrs	r0, r2
 80a0160:	e001      	b.n	80a0166 <RCC_APB2PeriphResetCmd+0xe>
 80a0162:	ea22 0000 	bic.w	r0, r2, r0
 80a0166:	6258      	str	r0, [r3, #36]	; 0x24
 80a0168:	4770      	bx	lr
 80a016a:	bf00      	nop
 80a016c:	40023800 	.word	0x40023800

080a0170 <TIM_DeInit>:
 80a0170:	b508      	push	{r3, lr}
 80a0172:	4b47      	ldr	r3, [pc, #284]	; (80a0290 <TIM_DeInit+0x120>)
 80a0174:	4298      	cmp	r0, r3
 80a0176:	d105      	bne.n	80a0184 <TIM_DeInit+0x14>
 80a0178:	2001      	movs	r0, #1
 80a017a:	4601      	mov	r1, r0
 80a017c:	f7ff ffec 	bl	80a0158 <RCC_APB2PeriphResetCmd>
 80a0180:	2001      	movs	r0, #1
 80a0182:	e03d      	b.n	80a0200 <TIM_DeInit+0x90>
 80a0184:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80a0188:	d105      	bne.n	80a0196 <TIM_DeInit+0x26>
 80a018a:	2001      	movs	r0, #1
 80a018c:	4601      	mov	r1, r0
 80a018e:	f7ff ffd7 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a0192:	2001      	movs	r0, #1
 80a0194:	e076      	b.n	80a0284 <TIM_DeInit+0x114>
 80a0196:	4b3f      	ldr	r3, [pc, #252]	; (80a0294 <TIM_DeInit+0x124>)
 80a0198:	4298      	cmp	r0, r3
 80a019a:	d105      	bne.n	80a01a8 <TIM_DeInit+0x38>
 80a019c:	2002      	movs	r0, #2
 80a019e:	2101      	movs	r1, #1
 80a01a0:	f7ff ffce 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a01a4:	2002      	movs	r0, #2
 80a01a6:	e06d      	b.n	80a0284 <TIM_DeInit+0x114>
 80a01a8:	4b3b      	ldr	r3, [pc, #236]	; (80a0298 <TIM_DeInit+0x128>)
 80a01aa:	4298      	cmp	r0, r3
 80a01ac:	d105      	bne.n	80a01ba <TIM_DeInit+0x4a>
 80a01ae:	2004      	movs	r0, #4
 80a01b0:	2101      	movs	r1, #1
 80a01b2:	f7ff ffc5 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a01b6:	2004      	movs	r0, #4
 80a01b8:	e064      	b.n	80a0284 <TIM_DeInit+0x114>
 80a01ba:	4b38      	ldr	r3, [pc, #224]	; (80a029c <TIM_DeInit+0x12c>)
 80a01bc:	4298      	cmp	r0, r3
 80a01be:	d105      	bne.n	80a01cc <TIM_DeInit+0x5c>
 80a01c0:	2008      	movs	r0, #8
 80a01c2:	2101      	movs	r1, #1
 80a01c4:	f7ff ffbc 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a01c8:	2008      	movs	r0, #8
 80a01ca:	e05b      	b.n	80a0284 <TIM_DeInit+0x114>
 80a01cc:	4b34      	ldr	r3, [pc, #208]	; (80a02a0 <TIM_DeInit+0x130>)
 80a01ce:	4298      	cmp	r0, r3
 80a01d0:	d105      	bne.n	80a01de <TIM_DeInit+0x6e>
 80a01d2:	2010      	movs	r0, #16
 80a01d4:	2101      	movs	r1, #1
 80a01d6:	f7ff ffb3 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a01da:	2010      	movs	r0, #16
 80a01dc:	e052      	b.n	80a0284 <TIM_DeInit+0x114>
 80a01de:	4b31      	ldr	r3, [pc, #196]	; (80a02a4 <TIM_DeInit+0x134>)
 80a01e0:	4298      	cmp	r0, r3
 80a01e2:	d105      	bne.n	80a01f0 <TIM_DeInit+0x80>
 80a01e4:	2020      	movs	r0, #32
 80a01e6:	2101      	movs	r1, #1
 80a01e8:	f7ff ffaa 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a01ec:	2020      	movs	r0, #32
 80a01ee:	e049      	b.n	80a0284 <TIM_DeInit+0x114>
 80a01f0:	4b2d      	ldr	r3, [pc, #180]	; (80a02a8 <TIM_DeInit+0x138>)
 80a01f2:	4298      	cmp	r0, r3
 80a01f4:	d109      	bne.n	80a020a <TIM_DeInit+0x9a>
 80a01f6:	2002      	movs	r0, #2
 80a01f8:	2101      	movs	r1, #1
 80a01fa:	f7ff ffad 	bl	80a0158 <RCC_APB2PeriphResetCmd>
 80a01fe:	2002      	movs	r0, #2
 80a0200:	2100      	movs	r1, #0
 80a0202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0206:	f7ff bfa7 	b.w	80a0158 <RCC_APB2PeriphResetCmd>
 80a020a:	4b28      	ldr	r3, [pc, #160]	; (80a02ac <TIM_DeInit+0x13c>)
 80a020c:	4298      	cmp	r0, r3
 80a020e:	d107      	bne.n	80a0220 <TIM_DeInit+0xb0>
 80a0210:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80a0214:	2101      	movs	r1, #1
 80a0216:	f7ff ff9f 	bl	80a0158 <RCC_APB2PeriphResetCmd>
 80a021a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80a021e:	e7ef      	b.n	80a0200 <TIM_DeInit+0x90>
 80a0220:	4b23      	ldr	r3, [pc, #140]	; (80a02b0 <TIM_DeInit+0x140>)
 80a0222:	4298      	cmp	r0, r3
 80a0224:	d107      	bne.n	80a0236 <TIM_DeInit+0xc6>
 80a0226:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80a022a:	2101      	movs	r1, #1
 80a022c:	f7ff ff94 	bl	80a0158 <RCC_APB2PeriphResetCmd>
 80a0230:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80a0234:	e7e4      	b.n	80a0200 <TIM_DeInit+0x90>
 80a0236:	4b1f      	ldr	r3, [pc, #124]	; (80a02b4 <TIM_DeInit+0x144>)
 80a0238:	4298      	cmp	r0, r3
 80a023a:	d107      	bne.n	80a024c <TIM_DeInit+0xdc>
 80a023c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80a0240:	2101      	movs	r1, #1
 80a0242:	f7ff ff89 	bl	80a0158 <RCC_APB2PeriphResetCmd>
 80a0246:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80a024a:	e7d9      	b.n	80a0200 <TIM_DeInit+0x90>
 80a024c:	4b1a      	ldr	r3, [pc, #104]	; (80a02b8 <TIM_DeInit+0x148>)
 80a024e:	4298      	cmp	r0, r3
 80a0250:	d105      	bne.n	80a025e <TIM_DeInit+0xee>
 80a0252:	2040      	movs	r0, #64	; 0x40
 80a0254:	2101      	movs	r1, #1
 80a0256:	f7ff ff73 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a025a:	2040      	movs	r0, #64	; 0x40
 80a025c:	e012      	b.n	80a0284 <TIM_DeInit+0x114>
 80a025e:	4b17      	ldr	r3, [pc, #92]	; (80a02bc <TIM_DeInit+0x14c>)
 80a0260:	4298      	cmp	r0, r3
 80a0262:	d105      	bne.n	80a0270 <TIM_DeInit+0x100>
 80a0264:	2080      	movs	r0, #128	; 0x80
 80a0266:	2101      	movs	r1, #1
 80a0268:	f7ff ff6a 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a026c:	2080      	movs	r0, #128	; 0x80
 80a026e:	e009      	b.n	80a0284 <TIM_DeInit+0x114>
 80a0270:	4b13      	ldr	r3, [pc, #76]	; (80a02c0 <TIM_DeInit+0x150>)
 80a0272:	4298      	cmp	r0, r3
 80a0274:	d10b      	bne.n	80a028e <TIM_DeInit+0x11e>
 80a0276:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a027a:	2101      	movs	r1, #1
 80a027c:	f7ff ff60 	bl	80a0140 <RCC_APB1PeriphResetCmd>
 80a0280:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a0284:	2100      	movs	r1, #0
 80a0286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a028a:	f7ff bf59 	b.w	80a0140 <RCC_APB1PeriphResetCmd>
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	40010000 	.word	0x40010000
 80a0294:	40000400 	.word	0x40000400
 80a0298:	40000800 	.word	0x40000800
 80a029c:	40000c00 	.word	0x40000c00
 80a02a0:	40001000 	.word	0x40001000
 80a02a4:	40001400 	.word	0x40001400
 80a02a8:	40010400 	.word	0x40010400
 80a02ac:	40014000 	.word	0x40014000
 80a02b0:	40014400 	.word	0x40014400
 80a02b4:	40014800 	.word	0x40014800
 80a02b8:	40001800 	.word	0x40001800
 80a02bc:	40001c00 	.word	0x40001c00
 80a02c0:	40002000 	.word	0x40002000

080a02c4 <TIM_TimeBaseInit>:
 80a02c4:	4a1c      	ldr	r2, [pc, #112]	; (80a0338 <TIM_TimeBaseInit+0x74>)
 80a02c6:	8803      	ldrh	r3, [r0, #0]
 80a02c8:	4290      	cmp	r0, r2
 80a02ca:	b29b      	uxth	r3, r3
 80a02cc:	d012      	beq.n	80a02f4 <TIM_TimeBaseInit+0x30>
 80a02ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a02d2:	4290      	cmp	r0, r2
 80a02d4:	d00e      	beq.n	80a02f4 <TIM_TimeBaseInit+0x30>
 80a02d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80a02da:	d00b      	beq.n	80a02f4 <TIM_TimeBaseInit+0x30>
 80a02dc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a02e0:	4290      	cmp	r0, r2
 80a02e2:	d007      	beq.n	80a02f4 <TIM_TimeBaseInit+0x30>
 80a02e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a02e8:	4290      	cmp	r0, r2
 80a02ea:	d003      	beq.n	80a02f4 <TIM_TimeBaseInit+0x30>
 80a02ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a02f0:	4290      	cmp	r0, r2
 80a02f2:	d103      	bne.n	80a02fc <TIM_TimeBaseInit+0x38>
 80a02f4:	884a      	ldrh	r2, [r1, #2]
 80a02f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a02fa:	4313      	orrs	r3, r2
 80a02fc:	4a0f      	ldr	r2, [pc, #60]	; (80a033c <TIM_TimeBaseInit+0x78>)
 80a02fe:	4290      	cmp	r0, r2
 80a0300:	d008      	beq.n	80a0314 <TIM_TimeBaseInit+0x50>
 80a0302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0306:	4290      	cmp	r0, r2
 80a0308:	bf1f      	itttt	ne
 80a030a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80a030e:	890a      	ldrhne	r2, [r1, #8]
 80a0310:	b29b      	uxthne	r3, r3
 80a0312:	4313      	orrne	r3, r2
 80a0314:	8003      	strh	r3, [r0, #0]
 80a0316:	684b      	ldr	r3, [r1, #4]
 80a0318:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a031a:	880b      	ldrh	r3, [r1, #0]
 80a031c:	8503      	strh	r3, [r0, #40]	; 0x28
 80a031e:	4b06      	ldr	r3, [pc, #24]	; (80a0338 <TIM_TimeBaseInit+0x74>)
 80a0320:	4298      	cmp	r0, r3
 80a0322:	d003      	beq.n	80a032c <TIM_TimeBaseInit+0x68>
 80a0324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80a0328:	4298      	cmp	r0, r3
 80a032a:	d101      	bne.n	80a0330 <TIM_TimeBaseInit+0x6c>
 80a032c:	7a8b      	ldrb	r3, [r1, #10]
 80a032e:	8603      	strh	r3, [r0, #48]	; 0x30
 80a0330:	2301      	movs	r3, #1
 80a0332:	8283      	strh	r3, [r0, #20]
 80a0334:	4770      	bx	lr
 80a0336:	bf00      	nop
 80a0338:	40010000 	.word	0x40010000
 80a033c:	40001000 	.word	0x40001000

080a0340 <TIM_Cmd>:
 80a0340:	8803      	ldrh	r3, [r0, #0]
 80a0342:	b119      	cbz	r1, 80a034c <TIM_Cmd+0xc>
 80a0344:	b29b      	uxth	r3, r3
 80a0346:	f043 0301 	orr.w	r3, r3, #1
 80a034a:	e003      	b.n	80a0354 <TIM_Cmd+0x14>
 80a034c:	f023 0301 	bic.w	r3, r3, #1
 80a0350:	041b      	lsls	r3, r3, #16
 80a0352:	0c1b      	lsrs	r3, r3, #16
 80a0354:	8003      	strh	r3, [r0, #0]
 80a0356:	4770      	bx	lr

080a0358 <TIM_ITConfig>:
 80a0358:	8983      	ldrh	r3, [r0, #12]
 80a035a:	b29b      	uxth	r3, r3
 80a035c:	b10a      	cbz	r2, 80a0362 <TIM_ITConfig+0xa>
 80a035e:	4319      	orrs	r1, r3
 80a0360:	e001      	b.n	80a0366 <TIM_ITConfig+0xe>
 80a0362:	ea23 0101 	bic.w	r1, r3, r1
 80a0366:	8181      	strh	r1, [r0, #12]
 80a0368:	4770      	bx	lr

080a036a <TIM_GetITStatus>:
 80a036a:	8a03      	ldrh	r3, [r0, #16]
 80a036c:	8982      	ldrh	r2, [r0, #12]
 80a036e:	ea11 0003 	ands.w	r0, r1, r3
 80a0372:	b292      	uxth	r2, r2
 80a0374:	d003      	beq.n	80a037e <TIM_GetITStatus+0x14>
 80a0376:	4211      	tst	r1, r2
 80a0378:	bf14      	ite	ne
 80a037a:	2001      	movne	r0, #1
 80a037c:	2000      	moveq	r0, #0
 80a037e:	4770      	bx	lr

080a0380 <TIM_ClearITPendingBit>:
 80a0380:	43c9      	mvns	r1, r1
 80a0382:	b289      	uxth	r1, r1
 80a0384:	8201      	strh	r1, [r0, #16]
 80a0386:	4770      	bx	lr

080a0388 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0388:	4770      	bx	lr
	...

080a038c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a038c:	b510      	push	{r4, lr}
 80a038e:	4604      	mov	r4, r0
 80a0390:	4b05      	ldr	r3, [pc, #20]	; (80a03a8 <_ZN3UDPD1Ev+0x1c>)
 80a0392:	6003      	str	r3, [r0, #0]
 80a0394:	3364      	adds	r3, #100	; 0x64
 80a0396:	6103      	str	r3, [r0, #16]
 80a0398:	f001 fc16 	bl	80a1bc8 <_ZN3UDP4stopEv>
 80a039c:	4620      	mov	r0, r4
 80a039e:	f001 fd4b 	bl	80a1e38 <_ZN3UDP13releaseBufferEv>
 80a03a2:	4620      	mov	r0, r4
 80a03a4:	bd10      	pop	{r4, pc}
 80a03a6:	bf00      	nop
 80a03a8:	080a3318 	.word	0x080a3318

080a03ac <_ZN9IPAddressD0Ev>:
 80a03ac:	b510      	push	{r4, lr}
 80a03ae:	4604      	mov	r4, r0
 80a03b0:	2118      	movs	r1, #24
 80a03b2:	f002 f8b6 	bl	80a2522 <_ZdlPvj>
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	bd10      	pop	{r4, pc}

080a03ba <_ZN3UDPD0Ev>:
 80a03ba:	b510      	push	{r4, lr}
 80a03bc:	4604      	mov	r4, r0
 80a03be:	f7ff ffe5 	bl	80a038c <_ZN3UDPD1Ev>
 80a03c2:	4620      	mov	r0, r4
 80a03c4:	214c      	movs	r1, #76	; 0x4c
 80a03c6:	f002 f8ac 	bl	80a2522 <_ZdlPvj>
 80a03ca:	4620      	mov	r0, r4
 80a03cc:	bd10      	pop	{r4, pc}
	...

080a03d0 <setup>:
int RECV_PIN = 6; //necessary to be pin 6 ?
IRrecv irrecv(RECV_PIN);
decode_results results;

//-----------------------//-----------------------//-----------------------//-----------------------SETUP
void setup() {
 80a03d0:	b570      	push	{r4, r5, r6, lr}
 80a03d2:	b096      	sub	sp, #88	; 0x58
  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a03d4:	f001 fe86 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a03d8:	f001 fe6b 	bl	80a20b2 <_ZN9USBSerialcvbEv>
 80a03dc:	2800      	cmp	r0, #0
 80a03de:	d0f9      	beq.n	80a03d4 <setup+0x4>
 80a03e0:	4c2d      	ldr	r4, [pc, #180]	; (80a0498 <setup+0xc8>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a03e2:	2300      	movs	r3, #0
 80a03e4:	461a      	mov	r2, r3
 80a03e6:	4619      	mov	r1, r3
 80a03e8:	6860      	ldr	r0, [r4, #4]
 80a03ea:	f001 f873 	bl	80a14d4 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a03ee:	2200      	movs	r2, #0
 80a03f0:	4611      	mov	r1, r2
 80a03f2:	6860      	ldr	r0, [r4, #4]
 80a03f4:	4d28      	ldr	r5, [pc, #160]	; (80a0498 <setup+0xc8>)
 80a03f6:	f001 f885 	bl	80a1504 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a03fa:	2800      	cmp	r0, #0
 80a03fc:	d0f7      	beq.n	80a03ee <setup+0x1e>
  Serial.println("Setup");
 80a03fe:	f001 fe71 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a0402:	4926      	ldr	r1, [pc, #152]	; (80a049c <setup+0xcc>)
 80a0404:	f001 fa85 	bl	80a1912 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a0408:	4b25      	ldr	r3, [pc, #148]	; (80a04a0 <setup+0xd0>)
 80a040a:	2200      	movs	r2, #0
 80a040c:	8819      	ldrh	r1, [r3, #0]
 80a040e:	4825      	ldr	r0, [pc, #148]	; (80a04a4 <setup+0xd4>)
 80a0410:	f001 fbb5 	bl	80a1b7e <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a0414:	2300      	movs	r3, #0
 80a0416:	4619      	mov	r1, r3
 80a0418:	4a23      	ldr	r2, [pc, #140]	; (80a04a8 <setup+0xd8>)
 80a041a:	6868      	ldr	r0, [r5, #4]
 80a041c:	f001 f8aa 	bl	80a1574 <network_set_hostname>
  WiFi.setHostname("HQRouter_Receiver");
  Serial.println(WiFi.hostname());
 80a0420:	f001 fe60 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a0424:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0426:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0428:	2240      	movs	r2, #64	; 0x40
 80a042a:	2100      	movs	r1, #0
 80a042c:	a806      	add	r0, sp, #24
 80a042e:	f002 fe58 	bl	80a30e2 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0432:	2340      	movs	r3, #64	; 0x40
 80a0434:	aa06      	add	r2, sp, #24
 80a0436:	4621      	mov	r1, r4
 80a0438:	9400      	str	r4, [sp, #0]
 80a043a:	6868      	ldr	r0, [r5, #4]
 80a043c:	f001 f8a2 	bl	80a1584 <network_get_hostname>
        return String(buf);
 80a0440:	a906      	add	r1, sp, #24
 80a0442:	a802      	add	r0, sp, #8
 80a0444:	f001 fb2a 	bl	80a1a9c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0448:	9902      	ldr	r1, [sp, #8]
 80a044a:	4630      	mov	r0, r6
 80a044c:	f001 fa61 	bl	80a1912 <_ZN5Print7printlnEPKc>
 80a0450:	a802      	add	r0, sp, #8
 80a0452:	f001 fadc 	bl	80a1a0e <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP()); 
 80a0456:	f001 fe45 	bl	80a20e4 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a045a:	4622      	mov	r2, r4
 80a045c:	4606      	mov	r6, r0
 80a045e:	4621      	mov	r1, r4
 80a0460:	6868      	ldr	r0, [r5, #4]
 80a0462:	f001 f82f 	bl	80a14c4 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0466:	1c81      	adds	r1, r0, #2
 80a0468:	a806      	add	r0, sp, #24
 80a046a:	f001 f95d 	bl	80a1728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a046e:	a906      	add	r1, sp, #24
 80a0470:	4630      	mov	r0, r6
 80a0472:	f001 fa58 	bl	80a1926 <_ZN5Print7printlnERK9Printable>
  Serial.begin(9600);
 80a0476:	f001 fe35 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a047a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a047e:	f001 fe11 	bl	80a20a4 <_ZN9USBSerial5beginEl>

  Serial.begin(9600);
 80a0482:	f001 fe2f 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a0486:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a048a:	f001 fe0b 	bl	80a20a4 <_ZN9USBSerial5beginEl>
  irrecv.enableIRIn(); // Start the receiver
 80a048e:	4807      	ldr	r0, [pc, #28]	; (80a04ac <setup+0xdc>)
 80a0490:	f000 f988 	bl	80a07a4 <_ZN6IRrecv10enableIRInEv>
}
 80a0494:	b016      	add	sp, #88	; 0x58
 80a0496:	bd70      	pop	{r4, r5, r6, pc}
 80a0498:	20000744 	.word	0x20000744
 80a049c:	080a3168 	.word	0x080a3168
 80a04a0:	20000000 	.word	0x20000000
 80a04a4:	20000094 	.word	0x20000094
 80a04a8:	080a316e 	.word	0x080a316e
 80a04ac:	2000008c 	.word	0x2000008c

080a04b0 <loop>:
//-----------------------//-----------------------//-----------------------//-----------------------SETUP

//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
 80a04b0:	b510      	push	{r4, lr}
  if (irrecv.decode(&results)) {
 80a04b2:	4c09      	ldr	r4, [pc, #36]	; (80a04d8 <loop+0x28>)
 80a04b4:	4809      	ldr	r0, [pc, #36]	; (80a04dc <loop+0x2c>)
 80a04b6:	4621      	mov	r1, r4
 80a04b8:	f000 fcb2 	bl	80a0e20 <_ZN6IRrecv6decodeEP14decode_results>
 80a04bc:	b150      	cbz	r0, 80a04d4 <loop+0x24>
    Serial.println(results.value, HEX); 
 80a04be:	f001 fe11 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a04c2:	68a1      	ldr	r1, [r4, #8]
 80a04c4:	2210      	movs	r2, #16
 80a04c6:	f001 fa64 	bl	80a1992 <_ZN5Print7printlnEmi>
    irrecv.resume(); // Receive the next value
  }
}
 80a04ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
  if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX); 
    irrecv.resume(); // Receive the next value
 80a04ce:	4803      	ldr	r0, [pc, #12]	; (80a04dc <loop+0x2c>)
 80a04d0:	f000 b986 	b.w	80a07e0 <_ZN6IRrecv6resumeEv>
 80a04d4:	bd10      	pop	{r4, pc}
 80a04d6:	bf00      	nop
 80a04d8:	200000e0 	.word	0x200000e0
 80a04dc:	2000008c 	.word	0x2000008c

080a04e0 <_GLOBAL__sub_I_SystemMode>:
  }
}
 80a04e0:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a04e2:	f000 fe91 	bl	80a1208 <HAL_Pin_Map>
//-----------------------//-----------------------//-----------------------//-----------------------#INCLUDES
#include <Particle.h>
#include "IRremote.h"
#include "IRTransmitter.h"
//-----------------------//-----------------------//-----------------------//-----------------------PARTICLE
SYSTEM_THREAD(ENABLED);
 80a04e6:	2100      	movs	r1, #0
 80a04e8:	2001      	movs	r0, #1
 80a04ea:	f000 ffc7 	bl	80a147c <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a04ee:	4b12      	ldr	r3, [pc, #72]	; (80a0538 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a04f0:	2200      	movs	r2, #0
 80a04f2:	701a      	strb	r2, [r3, #0]
 80a04f4:	805a      	strh	r2, [r3, #2]
 80a04f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC); //avoid automatic connection to the cloud

//-----------------------//-----------------------//-----------------------//-----------------------WIFI
unsigned int localPort = 8888;
IPAddress ipAddress;
 80a04fa:	4c10      	ldr	r4, [pc, #64]	; (80a053c <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a04fc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a04fe:	2002      	movs	r0, #2
 80a0500:	f000 ffb4 	bl	80a146c <set_system_mode>
 80a0504:	4d0e      	ldr	r5, [pc, #56]	; (80a0540 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0506:	4620      	mov	r0, r4
 80a0508:	f001 f900 	bl	80a170c <_ZN9IPAddressC1Ev>
 80a050c:	4620      	mov	r0, r4
int port;
UDP udp;
 80a050e:	4c0d      	ldr	r4, [pc, #52]	; (80a0544 <_GLOBAL__sub_I_SystemMode+0x64>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC); //avoid automatic connection to the cloud

//-----------------------//-----------------------//-----------------------//-----------------------WIFI
unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0510:	462a      	mov	r2, r5
 80a0512:	490d      	ldr	r1, [pc, #52]	; (80a0548 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0514:	f002 f800 	bl	80a2518 <__aeabi_atexit>
int port;
UDP udp;
 80a0518:	4620      	mov	r0, r4
 80a051a:	f001 fc6f 	bl	80a1dfc <_ZN3UDPC1Ev>
 80a051e:	462a      	mov	r2, r5
 80a0520:	490a      	ldr	r1, [pc, #40]	; (80a054c <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0522:	4620      	mov	r0, r4
 80a0524:	f001 fff8 	bl	80a2518 <__aeabi_atexit>

//-----------------------//-----------------------//-----------------------//-----------------------IR
// receiver variables
int RECV_PIN = 6; //necessary to be pin 6 ?
IRrecv irrecv(RECV_PIN);
 80a0528:	4b09      	ldr	r3, [pc, #36]	; (80a0550 <_GLOBAL__sub_I_SystemMode+0x70>)
 80a052a:	480a      	ldr	r0, [pc, #40]	; (80a0554 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a052c:	6819      	ldr	r1, [r3, #0]
void loop() {
  if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX); 
    irrecv.resume(); // Receive the next value
  }
}
 80a052e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
UDP udp;

//-----------------------//-----------------------//-----------------------//-----------------------IR
// receiver variables
int RECV_PIN = 6; //necessary to be pin 6 ?
IRrecv irrecv(RECV_PIN);
 80a0532:	f000 b92f 	b.w	80a0794 <_ZN6IRrecvC1Ei>
 80a0536:	bf00      	nop
 80a0538:	2000008e 	.word	0x2000008e
 80a053c:	20000074 	.word	0x20000074
 80a0540:	20000070 	.word	0x20000070
 80a0544:	20000094 	.word	0x20000094
 80a0548:	080a0389 	.word	0x080a0389
 80a054c:	080a038d 	.word	0x080a038d
 80a0550:	20000004 	.word	0x20000004
 80a0554:	2000008c 	.word	0x2000008c

080a0558 <_GLOBAL__sub_I__ZN13IRTransmitter10duty_cycleE>:
 80a0558:	f000 be56 	b.w	80a1208 <HAL_Pin_Map>

080a055c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a055c:	6803      	ldr	r3, [r0, #0]
 80a055e:	4718      	bx	r3

080a0560 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0560:	2a01      	cmp	r2, #1
 80a0562:	d002      	beq.n	80a056a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a0564:	2a02      	cmp	r2, #2
 80a0566:	d002      	beq.n	80a056e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a0568:	e004      	b.n	80a0574 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a056a:	6001      	str	r1, [r0, #0]
	      break;
 80a056c:	e002      	b.n	80a0574 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a056e:	680b      	ldr	r3, [r1, #0]
 80a0570:	b100      	cbz	r0, 80a0574 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a0572:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0574:	2000      	movs	r0, #0
 80a0576:	4770      	bx	lr

080a0578 <_Z9timer_isrv>:
// First entry is the SPACE between transmissions.
// As soon as a SPACE gets long, ready is set, state switches to IDLE, timing of SPACE continues.
// As soon as first MARK arrives, gap width is recorded, ready is cleared, and new logging starts
#if defined(PARTICLE)
  void timer_isr()
{
 80a0578:	b510      	push	{r4, lr}
    ISR(TIMER_INTR_NAME)
{
  TIMER_RESET;
#endif

  uint8_t irdata = (uint8_t)digitalRead(irparams.recvpin);
 80a057a:	4c32      	ldr	r4, [pc, #200]	; (80a0644 <_Z9timer_isrv+0xcc>)
 80a057c:	7820      	ldrb	r0, [r4, #0]
 80a057e:	f001 ff5d 	bl	80a243c <digitalRead>

  irparams.timer++; // One more 50us tick
 80a0582:	6863      	ldr	r3, [r4, #4]
    ISR(TIMER_INTR_NAME)
{
  TIMER_RESET;
#endif

  uint8_t irdata = (uint8_t)digitalRead(irparams.recvpin);
 80a0584:	b2c0      	uxtb	r0, r0

  irparams.timer++; // One more 50us tick
 80a0586:	3301      	adds	r3, #1
 80a0588:	6063      	str	r3, [r4, #4]
  if (irparams.rawlen >= RAWBUF) {
 80a058a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
 80a058e:	2b63      	cmp	r3, #99	; 0x63
    // Buffer overflow
    irparams.rcvstate = STATE_STOP;
 80a0590:	bf84      	itt	hi
 80a0592:	2205      	movhi	r2, #5
 80a0594:	7062      	strbhi	r2, [r4, #1]
  }
  switch(irparams.rcvstate) {
 80a0596:	7862      	ldrb	r2, [r4, #1]
 80a0598:	4623      	mov	r3, r4
 80a059a:	3a02      	subs	r2, #2
 80a059c:	2a03      	cmp	r2, #3
 80a059e:	d845      	bhi.n	80a062c <_Z9timer_isrv+0xb4>
 80a05a0:	e8df f002 	tbb	[pc, r2]
 80a05a4:	422b1a02 	.word	0x422b1a02
  case STATE_IDLE: // In the middle of a gap
    if (irdata == MARK) {
 80a05a8:	2800      	cmp	r0, #0
 80a05aa:	d13f      	bne.n	80a062c <_Z9timer_isrv+0xb4>
      if (irparams.timer < GAP_TICKS) {
 80a05ac:	6861      	ldr	r1, [r4, #4]
 80a05ae:	4a25      	ldr	r2, [pc, #148]	; (80a0644 <_Z9timer_isrv+0xcc>)
 80a05b0:	2963      	cmp	r1, #99	; 0x63
 80a05b2:	d801      	bhi.n	80a05b8 <_Z9timer_isrv+0x40>
        // Not big enough to be a gap.
        irparams.timer = 0;
 80a05b4:	6050      	str	r0, [r2, #4]
 80a05b6:	e039      	b.n	80a062c <_Z9timer_isrv+0xb4>
      }
      else {
        // gap just ended, record duration and start recording transmission
        irparams.rawlen = 0;
 80a05b8:	f882 0198 	strb.w	r0, [r2, #408]	; 0x198
        irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80a05bc:	f892 1198 	ldrb.w	r1, [r2, #408]	; 0x198
 80a05c0:	b2c9      	uxtb	r1, r1
 80a05c2:	1c4c      	adds	r4, r1, #1
 80a05c4:	b2e4      	uxtb	r4, r4
 80a05c6:	f882 4198 	strb.w	r4, [r2, #408]	; 0x198
 80a05ca:	6854      	ldr	r4, [r2, #4]
 80a05cc:	3102      	adds	r1, #2
 80a05ce:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
        irparams.timer = 0;
 80a05d2:	6050      	str	r0, [r2, #4]
        irparams.rcvstate = STATE_MARK;
 80a05d4:	2103      	movs	r1, #3
 80a05d6:	e025      	b.n	80a0624 <_Z9timer_isrv+0xac>
      }
    }
    break;
  case STATE_MARK: // timing MARK
    if (irdata == SPACE) {   // MARK ended, record time
 80a05d8:	2801      	cmp	r0, #1
 80a05da:	d127      	bne.n	80a062c <_Z9timer_isrv+0xb4>
      irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80a05dc:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
 80a05e0:	b2d2      	uxtb	r2, r2
 80a05e2:	1c51      	adds	r1, r2, #1
 80a05e4:	b2c9      	uxtb	r1, r1
 80a05e6:	f884 1198 	strb.w	r1, [r4, #408]	; 0x198
 80a05ea:	6861      	ldr	r1, [r4, #4]
 80a05ec:	3202      	adds	r2, #2
 80a05ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
      irparams.timer = 0;
 80a05f2:	2200      	movs	r2, #0
 80a05f4:	6062      	str	r2, [r4, #4]
      irparams.rcvstate = STATE_SPACE;
 80a05f6:	2204      	movs	r2, #4
 80a05f8:	e00d      	b.n	80a0616 <_Z9timer_isrv+0x9e>
    }
    break;
  case STATE_SPACE: // timing SPACE
    if (irdata == MARK) { // SPACE just ended, record it
 80a05fa:	b970      	cbnz	r0, 80a061a <_Z9timer_isrv+0xa2>
      irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80a05fc:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
 80a0600:	b2d2      	uxtb	r2, r2
 80a0602:	1c51      	adds	r1, r2, #1
 80a0604:	b2c9      	uxtb	r1, r1
 80a0606:	f884 1198 	strb.w	r1, [r4, #408]	; 0x198
 80a060a:	6861      	ldr	r1, [r4, #4]
 80a060c:	3202      	adds	r2, #2
 80a060e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
      irparams.timer = 0;
 80a0612:	6060      	str	r0, [r4, #4]
      irparams.rcvstate = STATE_MARK;
 80a0614:	2203      	movs	r2, #3
 80a0616:	705a      	strb	r2, [r3, #1]
 80a0618:	e008      	b.n	80a062c <_Z9timer_isrv+0xb4>
    }
    else { // SPACE
      if (irparams.timer > GAP_TICKS) {
 80a061a:	6862      	ldr	r2, [r4, #4]
 80a061c:	2a64      	cmp	r2, #100	; 0x64
 80a061e:	d905      	bls.n	80a062c <_Z9timer_isrv+0xb4>
        // big SPACE, indicates gap between codes
        // Mark current code as ready for processing
        // Switch to STOP
        // Don't reset timer; keep counting space width
        irparams.rcvstate = STATE_STOP;
 80a0620:	4a08      	ldr	r2, [pc, #32]	; (80a0644 <_Z9timer_isrv+0xcc>)
 80a0622:	2105      	movs	r1, #5
 80a0624:	7051      	strb	r1, [r2, #1]
 80a0626:	e001      	b.n	80a062c <_Z9timer_isrv+0xb4>
      }
    }
    break;
  case STATE_STOP: // waiting, measuring gap
    if (irdata == MARK) { // reset gap timer
 80a0628:	b900      	cbnz	r0, 80a062c <_Z9timer_isrv+0xb4>
      irparams.timer = 0;
 80a062a:	6060      	str	r0, [r4, #4]
    }
    break;
  }

  if (irparams.blinkflag) {
 80a062c:	789b      	ldrb	r3, [r3, #2]
 80a062e:	b143      	cbz	r3, 80a0642 <_Z9timer_isrv+0xca>
    if (irdata == MARK) {
 80a0630:	b908      	cbnz	r0, 80a0636 <_Z9timer_isrv+0xbe>
      BLINKLED_ON();  // turn pin 13 LED on
 80a0632:	2101      	movs	r1, #1
 80a0634:	e000      	b.n	80a0638 <_Z9timer_isrv+0xc0>
    }
    else {
      BLINKLED_OFF();  // turn pin 13 LED off
 80a0636:	2100      	movs	r1, #0
 80a0638:	2007      	movs	r0, #7
    }
  }
}
 80a063a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (irparams.blinkflag) {
    if (irdata == MARK) {
      BLINKLED_ON();  // turn pin 13 LED on
    }
    else {
      BLINKLED_OFF();  // turn pin 13 LED off
 80a063e:	f001 bee4 	b.w	80a240a <digitalWrite>
 80a0642:	bd10      	pop	{r4, pc}
 80a0644:	200000f8 	.word	0x200000f8

080a0648 <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 80a0648:	b510      	push	{r4, lr}
 80a064a:	4604      	mov	r4, r0
 80a064c:	f000 fdb8 	bl	80a11c0 <_ZN13IntervalTimer3endEv>
 80a0650:	4620      	mov	r0, r4
 80a0652:	bd10      	pop	{r4, pc}

080a0654 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0654:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0656:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0658:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a065a:	b113      	cbz	r3, 80a0662 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a065c:	2203      	movs	r2, #3
 80a065e:	4601      	mov	r1, r0
 80a0660:	4798      	blx	r3
    }
 80a0662:	4620      	mov	r0, r4
 80a0664:	bd10      	pop	{r4, pc}
	...

080a0668 <_ZN13IntervalTimerC1Ev>:
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 80a0668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a066a:	223b      	movs	r2, #59	; 0x3b
 80a066c:	8042      	strh	r2, [r0, #2]
 80a066e:	f247 522f 	movw	r2, #29999	; 0x752f
 80a0672:	8082      	strh	r2, [r0, #4]
 80a0674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0678:	80c2      	strh	r2, [r0, #6]
	status = TIMER_OFF;

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 80a067a:	4a25      	ldr	r2, [pc, #148]	; (80a0710 <_ZN13IntervalTimerC1Ev+0xa8>)
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 80a067c:	2300      	movs	r3, #0
 80a067e:	7003      	strb	r3, [r0, #0]
	status = TIMER_OFF;
 80a0680:	7203      	strb	r3, [r0, #8]

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 80a0682:	7013      	strb	r3, [r2, #0]
 80a0684:	7053      	strb	r3, [r2, #1]
 80a0686:	7093      	strb	r3, [r2, #2]
 80a0688:	70d3      	strb	r3, [r2, #3]
 80a068a:	7113      	strb	r3, [r2, #4]
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 80a068c:	7803      	ldrb	r3, [r0, #0]
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 80a068e:	4604      	mov	r4, r0
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 80a0690:	2b00      	cmp	r3, #0
 80a0692:	d13a      	bne.n	80a070a <_ZN13IntervalTimerC1Ev+0xa2>
		sysIntSetupDone = true;
 80a0694:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0696:	4e1f      	ldr	r6, [pc, #124]	; (80a0714 <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 80a0698:	4d1f      	ldr	r5, [pc, #124]	; (80a0718 <_ZN13IntervalTimerC1Ev+0xb0>)
 80a069a:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a069c:	4b1f      	ldr	r3, [pc, #124]	; (80a071c <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 80a069e:	4669      	mov	r1, sp
 80a06a0:	2013      	movs	r0, #19
 80a06a2:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06a4:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a06a6:	9502      	str	r5, [sp, #8]
 80a06a8:	f000 ffee 	bl	80a1688 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06ac:	4668      	mov	r0, sp
 80a06ae:	f7ff ffd1 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a06b2:	4b1b      	ldr	r3, [pc, #108]	; (80a0720 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 80a06b4:	4669      	mov	r1, sp
 80a06b6:	201a      	movs	r0, #26
 80a06b8:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06ba:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a06bc:	9502      	str	r5, [sp, #8]
 80a06be:	f000 ffe3 	bl	80a1688 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06c2:	4668      	mov	r0, sp
 80a06c4:	f7ff ffc6 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a06c8:	4b16      	ldr	r3, [pc, #88]	; (80a0724 <_ZN13IntervalTimerC1Ev+0xbc>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 80a06ca:	4669      	mov	r1, sp
 80a06cc:	2021      	movs	r0, #33	; 0x21
 80a06ce:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06d0:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a06d2:	9502      	str	r5, [sp, #8]
 80a06d4:	f000 ffd8 	bl	80a1688 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06d8:	4668      	mov	r0, sp
 80a06da:	f7ff ffbb 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a06de:	4b12      	ldr	r3, [pc, #72]	; (80a0728 <_ZN13IntervalTimerC1Ev+0xc0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 80a06e0:	4669      	mov	r1, sp
 80a06e2:	2024      	movs	r0, #36	; 0x24
 80a06e4:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06e6:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a06e8:	9502      	str	r5, [sp, #8]
 80a06ea:	f000 ffcd 	bl	80a1688 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06ee:	4668      	mov	r0, sp
 80a06f0:	f7ff ffb0 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a06f4:	4b0d      	ldr	r3, [pc, #52]	; (80a072c <_ZN13IntervalTimerC1Ev+0xc4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 80a06f6:	4669      	mov	r1, sp
 80a06f8:	2026      	movs	r0, #38	; 0x26
 80a06fa:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06fc:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a06fe:	9502      	str	r5, [sp, #8]
 80a0700:	f000 ffc2 	bl	80a1688 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0704:	4668      	mov	r0, sp
 80a0706:	f7ff ffa5 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
	}
#endif

    }
 80a070a:	4620      	mov	r0, r4
 80a070c:	b004      	add	sp, #16
 80a070e:	bd70      	pop	{r4, r5, r6, pc}
 80a0710:	200002b8 	.word	0x200002b8
 80a0714:	080a055d 	.word	0x080a055d
 80a0718:	080a0561 	.word	0x080a0561
 80a071c:	080a0ed9 	.word	0x080a0ed9
 80a0720:	080a0f01 	.word	0x080a0f01
 80a0724:	080a0f29 	.word	0x080a0f29
 80a0728:	080a0f51 	.word	0x080a0f51
 80a072c:	080a0f79 	.word	0x080a0f79

080a0730 <_Z5MATCHii>:

#define TICKS_LOW(us) (int) (((us)*LTOL/USECPERTICK))
#define TICKS_HIGH(us) (int) (((us)*UTOL/USECPERTICK + 1))

#if(!DEBUG)
int MATCH(int measured, int desired) {return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);}
 80a0730:	b5d0      	push	{r4, r6, r7, lr}
 80a0732:	4604      	mov	r4, r0
 80a0734:	4608      	mov	r0, r1
 80a0736:	f002 f993 	bl	80a2a60 <__aeabi_i2d>
 80a073a:	2200      	movs	r2, #0
 80a073c:	4b11      	ldr	r3, [pc, #68]	; (80a0784 <_Z5MATCHii+0x54>)
 80a073e:	4606      	mov	r6, r0
 80a0740:	460f      	mov	r7, r1
 80a0742:	f002 f9f3 	bl	80a2b2c <__aeabi_dmul>
 80a0746:	2200      	movs	r2, #0
 80a0748:	4b0f      	ldr	r3, [pc, #60]	; (80a0788 <_Z5MATCHii+0x58>)
 80a074a:	f002 fb19 	bl	80a2d80 <__aeabi_ddiv>
 80a074e:	f002 fc87 	bl	80a3060 <__aeabi_d2iz>
 80a0752:	42a0      	cmp	r0, r4
 80a0754:	dc14      	bgt.n	80a0780 <_Z5MATCHii+0x50>
 80a0756:	2200      	movs	r2, #0
 80a0758:	4b0c      	ldr	r3, [pc, #48]	; (80a078c <_Z5MATCHii+0x5c>)
 80a075a:	4630      	mov	r0, r6
 80a075c:	4639      	mov	r1, r7
 80a075e:	f002 f9e5 	bl	80a2b2c <__aeabi_dmul>
 80a0762:	2200      	movs	r2, #0
 80a0764:	4b08      	ldr	r3, [pc, #32]	; (80a0788 <_Z5MATCHii+0x58>)
 80a0766:	f002 fb0b 	bl	80a2d80 <__aeabi_ddiv>
 80a076a:	2200      	movs	r2, #0
 80a076c:	4b08      	ldr	r3, [pc, #32]	; (80a0790 <_Z5MATCHii+0x60>)
 80a076e:	f002 f82b 	bl	80a27c8 <__adddf3>
 80a0772:	f002 fc75 	bl	80a3060 <__aeabi_d2iz>
 80a0776:	4284      	cmp	r4, r0
 80a0778:	bfcc      	ite	gt
 80a077a:	2000      	movgt	r0, #0
 80a077c:	2001      	movle	r0, #1
 80a077e:	bdd0      	pop	{r4, r6, r7, pc}
 80a0780:	2000      	movs	r0, #0
 80a0782:	bdd0      	pop	{r4, r6, r7, pc}
 80a0784:	3fe80000 	.word	0x3fe80000
 80a0788:	40490000 	.word	0x40490000
 80a078c:	3ff40000 	.word	0x3ff40000
 80a0790:	3ff00000 	.word	0x3ff00000

080a0794 <_ZN6IRrecvC1Ei>:
  TIMER_CONFIG_KHZ(khz);
}

IRrecv::IRrecv(int recvpin)
{
  irparams.recvpin = recvpin;
 80a0794:	4b02      	ldr	r3, [pc, #8]	; (80a07a0 <_ZN6IRrecvC1Ei+0xc>)
 80a0796:	b2c9      	uxtb	r1, r1
  irparams.blinkflag = 0;
 80a0798:	2200      	movs	r2, #0
  TIMER_CONFIG_KHZ(khz);
}

IRrecv::IRrecv(int recvpin)
{
  irparams.recvpin = recvpin;
 80a079a:	7019      	strb	r1, [r3, #0]
  irparams.blinkflag = 0;
 80a079c:	709a      	strb	r2, [r3, #2]
}
 80a079e:	4770      	bx	lr
 80a07a0:	200000f8 	.word	0x200000f8

080a07a4 <_ZN6IRrecv10enableIRInEv>:

// initialization
void IRrecv::enableIRIn() {
 80a07a4:	b507      	push	{r0, r1, r2, lr}

    ~IntervalTimer() { end(); }

    bool begin(void (*isrCallback)(), intPeriod Period, bool scale) {
		if (Period < 10 || Period > MAX_PERIOD)
 80a07a6:	480b      	ldr	r0, [pc, #44]	; (80a07d4 <_ZN6IRrecv10enableIRInEv+0x30>)
 80a07a8:	88c3      	ldrh	r3, [r0, #6]
 80a07aa:	2b31      	cmp	r3, #49	; 0x31
 80a07ac:	d906      	bls.n	80a07bc <_ZN6IRrecv10enableIRInEv+0x18>
			return false;
		return beginCycles(isrCallback, Period, scale, AUTO);
 80a07ae:	23ff      	movs	r3, #255	; 0xff
 80a07b0:	9300      	str	r3, [sp, #0]
 80a07b2:	2232      	movs	r2, #50	; 0x32
 80a07b4:	2300      	movs	r3, #0
 80a07b6:	4908      	ldr	r1, [pc, #32]	; (80a07d8 <_ZN6IRrecv10enableIRInEv+0x34>)
 80a07b8:	f000 fccc 	bl	80a1154 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>
  TIMER_RESET;
  sei();  // enable interrupts
  #endif

  // initialize state machine variables
  irparams.rcvstate = STATE_IDLE;
 80a07bc:	4b07      	ldr	r3, [pc, #28]	; (80a07dc <_ZN6IRrecv10enableIRInEv+0x38>)
 80a07be:	2202      	movs	r2, #2
  irparams.rawlen = 0;
 80a07c0:	2100      	movs	r1, #0
  TIMER_RESET;
  sei();  // enable interrupts
  #endif

  // initialize state machine variables
  irparams.rcvstate = STATE_IDLE;
 80a07c2:	705a      	strb	r2, [r3, #1]
  irparams.rawlen = 0;
 80a07c4:	f883 1198 	strb.w	r1, [r3, #408]	; 0x198

  // set pin modes
  pinMode(irparams.recvpin, INPUT);
 80a07c8:	7818      	ldrb	r0, [r3, #0]
}
 80a07ca:	b003      	add	sp, #12
 80a07cc:	f85d eb04 	ldr.w	lr, [sp], #4
  // initialize state machine variables
  irparams.rcvstate = STATE_IDLE;
  irparams.rawlen = 0;

  // set pin modes
  pinMode(irparams.recvpin, INPUT);
 80a07d0:	f001 be0a 	b.w	80a23e8 <pinMode>
 80a07d4:	20000294 	.word	0x20000294
 80a07d8:	080a0579 	.word	0x080a0579
 80a07dc:	200000f8 	.word	0x200000f8

080a07e0 <_ZN6IRrecv6resumeEv>:
    pinMode(BLINKLED, OUTPUT);
}


void IRrecv::resume() {
  irparams.rcvstate = STATE_IDLE;
 80a07e0:	4b03      	ldr	r3, [pc, #12]	; (80a07f0 <_ZN6IRrecv6resumeEv+0x10>)
 80a07e2:	2202      	movs	r2, #2
 80a07e4:	705a      	strb	r2, [r3, #1]
  irparams.rawlen = 0;
 80a07e6:	2200      	movs	r2, #0
 80a07e8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 80a07ec:	4770      	bx	lr
 80a07ee:	bf00      	nop
 80a07f0:	200000f8 	.word	0x200000f8

080a07f4 <_ZN6IRrecv9decodeNECEP14decode_results>:
  resume();
  return ERR;
}

// NECs have a repeat only 4 items long
long IRrecv::decodeNEC(decode_results *results) {
 80a07f4:	b510      	push	{r4, lr}
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
 80a07f6:	690b      	ldr	r3, [r1, #16]
 80a07f8:	685a      	ldr	r2, [r3, #4]
 80a07fa:	3a88      	subs	r2, #136	; 0x88
 80a07fc:	2a5c      	cmp	r2, #92	; 0x5c
 80a07fe:	d80c      	bhi.n	80a081a <_ZN6IRrecv9decodeNECEP14decode_results+0x26>
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
 80a0800:	4a1e      	ldr	r2, [pc, #120]	; (80a087c <_ZN6IRrecv9decodeNECEP14decode_results+0x88>)
 80a0802:	f892 0198 	ldrb.w	r0, [r2, #408]	; 0x198
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
 80a0806:	2804      	cmp	r0, #4
 80a0808:	d103      	bne.n	80a0812 <_ZN6IRrecv9decodeNECEP14decode_results+0x1e>
 80a080a:	6898      	ldr	r0, [r3, #8]
 80a080c:	3820      	subs	r0, #32
 80a080e:	2816      	cmp	r0, #22
 80a0810:	d913      	bls.n	80a083a <_ZN6IRrecv9decodeNECEP14decode_results+0x46>
    results->bits = 0;
    results->value = REPEAT;
    results->decode_type = NEC;
    return DECODED;
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
 80a0812:	f892 2198 	ldrb.w	r2, [r2, #408]	; 0x198
 80a0816:	2a43      	cmp	r2, #67	; 0x43
 80a0818:	d801      	bhi.n	80a081e <_ZN6IRrecv9decodeNECEP14decode_results+0x2a>
long IRrecv::decodeNEC(decode_results *results) {
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
    return ERR;
 80a081a:	2000      	movs	r0, #0
 80a081c:	bd10      	pop	{r4, pc}
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
    return ERR;
  }
  // Initial space
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
 80a081e:	689a      	ldr	r2, [r3, #8]
 80a0820:	3a42      	subs	r2, #66	; 0x42
 80a0822:	2a2d      	cmp	r2, #45	; 0x2d
 80a0824:	d8f9      	bhi.n	80a081a <_ZN6IRrecv9decodeNECEP14decode_results+0x26>
 80a0826:	f103 000c 	add.w	r0, r3, #12
 80a082a:	2200      	movs	r2, #0
 80a082c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
    return ERR;
  }
  offset++;
  for (int i = 0; i < NEC_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
 80a0830:	6804      	ldr	r4, [r0, #0]
 80a0832:	3c09      	subs	r4, #9
 80a0834:	2c08      	cmp	r4, #8
 80a0836:	d90a      	bls.n	80a084e <_ZN6IRrecv9decodeNECEP14decode_results+0x5a>
 80a0838:	e7ef      	b.n	80a081a <_ZN6IRrecv9decodeNECEP14decode_results+0x26>
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
    MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
 80a083a:	68d8      	ldr	r0, [r3, #12]
 80a083c:	3809      	subs	r0, #9
 80a083e:	2808      	cmp	r0, #8
 80a0840:	d8e7      	bhi.n	80a0812 <_ZN6IRrecv9decodeNECEP14decode_results+0x1e>
    results->bits = 0;
 80a0842:	2300      	movs	r3, #0
 80a0844:	60cb      	str	r3, [r1, #12]
    results->value = REPEAT;
 80a0846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a084a:	608b      	str	r3, [r1, #8]
 80a084c:	e013      	b.n	80a0876 <_ZN6IRrecv9decodeNECEP14decode_results+0x82>
  for (int i = 0; i < NEC_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
      return ERR;
    }
    offset++;
    if (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE)) {
 80a084e:	6844      	ldr	r4, [r0, #4]
 80a0850:	3c16      	subs	r4, #22
 80a0852:	2c10      	cmp	r4, #16
 80a0854:	d809      	bhi.n	80a086a <_ZN6IRrecv9decodeNECEP14decode_results+0x76>
      data = (data << 1) | 1;
 80a0856:	0052      	lsls	r2, r2, #1
 80a0858:	f042 0201 	orr.w	r2, r2, #1
 80a085c:	3008      	adds	r0, #8
  // Initial space
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  for (int i = 0; i < NEC_BITS; i++) {
 80a085e:	4283      	cmp	r3, r0
 80a0860:	d1e6      	bne.n	80a0830 <_ZN6IRrecv9decodeNECEP14decode_results+0x3c>
      return ERR;
    }
    offset++;
  }
  // Success
  results->bits = NEC_BITS;
 80a0862:	2320      	movs	r3, #32
 80a0864:	60cb      	str	r3, [r1, #12]
  results->value = data;
 80a0866:	608a      	str	r2, [r1, #8]
 80a0868:	e005      	b.n	80a0876 <_ZN6IRrecv9decodeNECEP14decode_results+0x82>
    }
    offset++;
    if (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE)) {
      data = (data << 1) | 1;
    }
    else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
 80a086a:	6844      	ldr	r4, [r0, #4]
 80a086c:	3c06      	subs	r4, #6
 80a086e:	2c06      	cmp	r4, #6
 80a0870:	d8d3      	bhi.n	80a081a <_ZN6IRrecv9decodeNECEP14decode_results+0x26>
      data <<= 1;
 80a0872:	0052      	lsls	r2, r2, #1
 80a0874:	e7f2      	b.n	80a085c <_ZN6IRrecv9decodeNECEP14decode_results+0x68>
  if (irparams.rawlen == 4 &&
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
    MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
    results->bits = 0;
    results->value = REPEAT;
    results->decode_type = NEC;
 80a0876:	2001      	movs	r0, #1
 80a0878:	6008      	str	r0, [r1, #0]
  // Success
  results->bits = NEC_BITS;
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}
 80a087a:	bd10      	pop	{r4, pc}
 80a087c:	200000f8 	.word	0x200000f8

080a0880 <_ZN6IRrecv10decodeSonyEP14decode_results>:

long IRrecv::decodeSony(decode_results *results) {
 80a0880:	b570      	push	{r4, r5, r6, lr}
  long data = 0;
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
 80a0882:	4b21      	ldr	r3, [pc, #132]	; (80a0908 <_ZN6IRrecv10decodeSonyEP14decode_results+0x88>)
 80a0884:	f893 2198 	ldrb.w	r2, [r3, #408]	; 0x198
 80a0888:	461d      	mov	r5, r3
 80a088a:	2a19      	cmp	r2, #25
 80a088c:	d929      	bls.n	80a08e2 <_ZN6IRrecv10decodeSonyEP14decode_results+0x62>
  }
  int offset = 0; // Dont skip first space, check its size

  // Some Sony's deliver repeats fast after first
  // unfortunately can't spot difference from of repeat from two fast clicks
  if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 80a088e:	690b      	ldr	r3, [r1, #16]
 80a0890:	681a      	ldr	r2, [r3, #0]
 80a0892:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0896:	d206      	bcs.n	80a08a6 <_ZN6IRrecv10decodeSonyEP14decode_results+0x26>
    // Serial.print("IR Gap found: ");
    results->bits = 0;
 80a0898:	2300      	movs	r3, #0
 80a089a:	60cb      	str	r3, [r1, #12]
    results->value = REPEAT;
 80a089c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a08a0:	608b      	str	r3, [r1, #8]
    results->decode_type = SANYO;
 80a08a2:	2309      	movs	r3, #9
 80a08a4:	e01a      	b.n	80a08dc <_ZN6IRrecv10decodeSonyEP14decode_results+0x5c>
    return DECODED;
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
 80a08a6:	685a      	ldr	r2, [r3, #4]
 80a08a8:	3a25      	subs	r2, #37	; 0x25
 80a08aa:	2a1a      	cmp	r2, #26
 80a08ac:	d819      	bhi.n	80a08e2 <_ZN6IRrecv10decodeSonyEP14decode_results+0x62>
 80a08ae:	330c      	adds	r3, #12
 80a08b0:	2202      	movs	r2, #2
 80a08b2:	2000      	movs	r0, #0
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
 80a08b4:	f895 6198 	ldrb.w	r6, [r5, #408]	; 0x198
 80a08b8:	1c54      	adds	r4, r2, #1
 80a08ba:	42a6      	cmp	r6, r4
 80a08bc:	dd04      	ble.n	80a08c8 <_ZN6IRrecv10decodeSonyEP14decode_results+0x48>
    if (!MATCH_SPACE(results->rawbuf[offset], SONY_HDR_SPACE)) {
 80a08be:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80a08c2:	3c07      	subs	r4, #7
 80a08c4:	2c06      	cmp	r4, #6
 80a08c6:	d90e      	bls.n	80a08e6 <_ZN6IRrecv10decodeSonyEP14decode_results+0x66>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 80a08c8:	3a01      	subs	r2, #1
 80a08ca:	1052      	asrs	r2, r2, #1
  if (results->bits < 12) {
 80a08cc:	2a0b      	cmp	r2, #11
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 80a08ce:	60ca      	str	r2, [r1, #12]
  if (results->bits < 12) {
 80a08d0:	dc02      	bgt.n	80a08d8 <_ZN6IRrecv10decodeSonyEP14decode_results+0x58>
    results->bits = 0;
 80a08d2:	2000      	movs	r0, #0
 80a08d4:	60c8      	str	r0, [r1, #12]
 80a08d6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR;
  }
  results->value = data;
 80a08d8:	6088      	str	r0, [r1, #8]
  results->decode_type = SONY;
 80a08da:	2302      	movs	r3, #2
 80a08dc:	600b      	str	r3, [r1, #0]
  return DECODED;
 80a08de:	2001      	movs	r0, #1
 80a08e0:	bd70      	pop	{r4, r5, r6, pc}
}

long IRrecv::decodeSony(decode_results *results) {
  long data = 0;
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
    return ERR;
 80a08e2:	2000      	movs	r0, #0
 80a08e4:	bd70      	pop	{r4, r5, r6, pc}
  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SONY_HDR_SPACE)) {
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK)) {
 80a08e6:	681c      	ldr	r4, [r3, #0]
 80a08e8:	3c13      	subs	r4, #19
 80a08ea:	2c0e      	cmp	r4, #14
 80a08ec:	d805      	bhi.n	80a08fa <_ZN6IRrecv10decodeSonyEP14decode_results+0x7a>
      data = (data << 1) | 1;
 80a08ee:	0040      	lsls	r0, r0, #1
 80a08f0:	f040 0001 	orr.w	r0, r0, #1
      data <<= 1;
    }
    else {
      return ERR;
    }
    offset++;
 80a08f4:	3202      	adds	r2, #2
 80a08f6:	3308      	adds	r3, #8
 80a08f8:	e7dc      	b.n	80a08b4 <_ZN6IRrecv10decodeSonyEP14decode_results+0x34>
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK)) {
      data = (data << 1) | 1;
    }
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
 80a08fa:	681c      	ldr	r4, [r3, #0]
 80a08fc:	3c0a      	subs	r4, #10
 80a08fe:	2c08      	cmp	r4, #8
 80a0900:	d8ef      	bhi.n	80a08e2 <_ZN6IRrecv10decodeSonyEP14decode_results+0x62>
      data <<= 1;
 80a0902:	0040      	lsls	r0, r0, #1
 80a0904:	e7f6      	b.n	80a08f4 <_ZN6IRrecv10decodeSonyEP14decode_results+0x74>
 80a0906:	bf00      	nop
 80a0908:	200000f8 	.word	0x200000f8

080a090c <_ZN6IRrecv11decodeSanyoEP14decode_results>:
  return DECODED;
}

// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeSanyo(decode_results *results) {
 80a090c:	b570      	push	{r4, r5, r6, lr}
  long data = 0;
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
 80a090e:	4c22      	ldr	r4, [pc, #136]	; (80a0998 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x8c>)
 80a0910:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
 80a0914:	2b19      	cmp	r3, #25
 80a0916:	d92d      	bls.n	80a0974 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x68>
  Serial.print("IR Gap: ");
  Serial.println( results->rawbuf[offset]);
  Serial.println( "test against:");
  Serial.println(results->rawbuf[offset]);
  */
  if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 80a0918:	690b      	ldr	r3, [r1, #16]
 80a091a:	681a      	ldr	r2, [r3, #0]
 80a091c:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 80a0920:	d205      	bcs.n	80a092e <_ZN6IRrecv11decodeSanyoEP14decode_results+0x22>
    // Serial.print("IR Gap found: ");
    results->bits = 0;
 80a0922:	2300      	movs	r3, #0
 80a0924:	60cb      	str	r3, [r1, #12]
    results->value = REPEAT;
 80a0926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a092a:	608b      	str	r3, [r1, #8]
 80a092c:	e005      	b.n	80a093a <_ZN6IRrecv11decodeSanyoEP14decode_results+0x2e>
    return DECODED;
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
 80a092e:	685a      	ldr	r2, [r3, #4]
 80a0930:	3a36      	subs	r2, #54	; 0x36
 80a0932:	2a25      	cmp	r2, #37	; 0x25
 80a0934:	d905      	bls.n	80a0942 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x36>
 80a0936:	e01d      	b.n	80a0974 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x68>
  results->bits = (offset - 1) / 2;
  if (results->bits < 12) {
    results->bits = 0;
    return ERR;
  }
  results->value = data;
 80a0938:	6088      	str	r0, [r1, #8]
  results->decode_type = SANYO;
 80a093a:	2309      	movs	r3, #9
 80a093c:	600b      	str	r3, [r1, #0]
  return DECODED;
 80a093e:	2001      	movs	r0, #1
 80a0940:	bd70      	pop	{r4, r5, r6, pc}
    return ERR;
  }
  offset++;

  // Skip Second Mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
 80a0942:	689a      	ldr	r2, [r3, #8]
 80a0944:	3a36      	subs	r2, #54	; 0x36
 80a0946:	2a25      	cmp	r2, #37	; 0x25
 80a0948:	d814      	bhi.n	80a0974 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x68>
 80a094a:	3310      	adds	r3, #16
 80a094c:	2203      	movs	r2, #3
 80a094e:	2000      	movs	r0, #0
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
 80a0950:	f894 6198 	ldrb.w	r6, [r4, #408]	; 0x198
 80a0954:	1c55      	adds	r5, r2, #1
 80a0956:	42ae      	cmp	r6, r5
 80a0958:	dd04      	ble.n	80a0964 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x58>
    if (!MATCH_SPACE(results->rawbuf[offset], SANYO_HDR_SPACE)) {
 80a095a:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80a095e:	3d0c      	subs	r5, #12
 80a0960:	2d0a      	cmp	r5, #10
 80a0962:	d909      	bls.n	80a0978 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x6c>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 80a0964:	3a01      	subs	r2, #1
 80a0966:	1052      	asrs	r2, r2, #1
  if (results->bits < 12) {
 80a0968:	2a0b      	cmp	r2, #11
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 80a096a:	60ca      	str	r2, [r1, #12]
  if (results->bits < 12) {
 80a096c:	dce4      	bgt.n	80a0938 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x2c>
    results->bits = 0;
 80a096e:	2000      	movs	r0, #0
 80a0970:	60c8      	str	r0, [r1, #12]
 80a0972:	bd70      	pop	{r4, r5, r6, pc}
// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeSanyo(decode_results *results) {
  long data = 0;
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
    return ERR;
 80a0974:	2000      	movs	r0, #0
 80a0976:	bd70      	pop	{r4, r5, r6, pc}
  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SANYO_HDR_SPACE)) {
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK)) {
 80a0978:	681d      	ldr	r5, [r3, #0]
 80a097a:	3d25      	subs	r5, #37	; 0x25
 80a097c:	2d1a      	cmp	r5, #26
 80a097e:	d805      	bhi.n	80a098c <_ZN6IRrecv11decodeSanyoEP14decode_results+0x80>
      data = (data << 1) | 1;
 80a0980:	0040      	lsls	r0, r0, #1
 80a0982:	f040 0001 	orr.w	r0, r0, #1
      data <<= 1;
    }
    else {
      return ERR;
    }
    offset++;
 80a0986:	3202      	adds	r2, #2
 80a0988:	3308      	adds	r3, #8
 80a098a:	e7e1      	b.n	80a0950 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x44>
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK)) {
      data = (data << 1) | 1;
    }
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
 80a098c:	681d      	ldr	r5, [r3, #0]
 80a098e:	3d0c      	subs	r5, #12
 80a0990:	2d09      	cmp	r5, #9
 80a0992:	d8ef      	bhi.n	80a0974 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x68>
      data <<= 1;
 80a0994:	0040      	lsls	r0, r0, #1
 80a0996:	e7f6      	b.n	80a0986 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x7a>
 80a0998:	200000f8 	.word	0x200000f8

080a099c <_ZN6IRrecv16decodeMitsubishiEP14decode_results>:
  results->decode_type = SANYO;
  return DECODED;
}

// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeMitsubishi(decode_results *results) {
 80a099c:	b570      	push	{r4, r5, r6, lr}
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
 80a099e:	4c1c      	ldr	r4, [pc, #112]	; (80a0a10 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x74>)
 80a09a0:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
 80a09a4:	2b21      	cmp	r3, #33	; 0x21
 80a09a6:	d927      	bls.n	80a09f8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x5c>

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
 80a09a8:	690a      	ldr	r2, [r1, #16]
 80a09aa:	6853      	ldr	r3, [r2, #4]
 80a09ac:	3b06      	subs	r3, #6
 80a09ae:	2b06      	cmp	r3, #6
 80a09b0:	d822      	bhi.n	80a09f8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x5c>
 80a09b2:	320c      	adds	r2, #12
 80a09b4:	2302      	movs	r3, #2
 80a09b6:	2000      	movs	r0, #0
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
 80a09b8:	f894 5198 	ldrb.w	r5, [r4, #408]	; 0x198
 80a09bc:	1c5e      	adds	r6, r3, #1
 80a09be:	42b5      	cmp	r5, r6
 80a09c0:	dd0d      	ble.n	80a09de <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x42>
    if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK)) {
 80a09c2:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80a09c6:	3d1e      	subs	r5, #30
 80a09c8:	2d16      	cmp	r5, #22
 80a09ca:	d817      	bhi.n	80a09fc <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x60>
      data = (data << 1) | 1;
 80a09cc:	0040      	lsls	r0, r0, #1
 80a09ce:	f040 0001 	orr.w	r0, r0, #1
    else {
      // Serial.println("A"); Serial.println(offset); Serial.println(results->rawbuf[offset]);
      return ERR;
    }
    offset++;
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
 80a09d2:	f852 5b08 	ldr.w	r5, [r2], #8
 80a09d6:	3d03      	subs	r5, #3
 80a09d8:	2d04      	cmp	r5, #4
 80a09da:	d916      	bls.n	80a0a0a <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x6e>
 80a09dc:	4633      	mov	r3, r6
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 80a09de:	3b01      	subs	r3, #1
 80a09e0:	105b      	asrs	r3, r3, #1
  if (results->bits < MITSUBISHI_BITS) {
 80a09e2:	2b0f      	cmp	r3, #15
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
 80a09e4:	60cb      	str	r3, [r1, #12]
  if (results->bits < MITSUBISHI_BITS) {
    results->bits = 0;
 80a09e6:	bfd3      	iteet	le
 80a09e8:	2000      	movle	r0, #0
    return ERR;
  }
  results->value = data;
  results->decode_type = MITSUBISHI;
 80a09ea:	230a      	movgt	r3, #10
  results->bits = (offset - 1) / 2;
  if (results->bits < MITSUBISHI_BITS) {
    results->bits = 0;
    return ERR;
  }
  results->value = data;
 80a09ec:	6088      	strgt	r0, [r1, #8]
  }

  // Success
  results->bits = (offset - 1) / 2;
  if (results->bits < MITSUBISHI_BITS) {
    results->bits = 0;
 80a09ee:	60c8      	strle	r0, [r1, #12]
    return ERR;
  }
  results->value = data;
  results->decode_type = MITSUBISHI;
 80a09f0:	bfc4      	itt	gt
 80a09f2:	600b      	strgt	r3, [r1, #0]
  return DECODED;
 80a09f4:	2001      	movgt	r0, #1
 80a09f6:	bd70      	pop	{r4, r5, r6, pc}
// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeMitsubishi(decode_results *results) {
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
    return ERR;
 80a09f8:	2000      	movs	r0, #0
 80a09fa:	bd70      	pop	{r4, r5, r6, pc}
  offset++;
  while (offset + 1 < irparams.rawlen) {
    if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK)) {
      data = (data << 1) | 1;
    }
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
 80a09fc:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80a0a00:	3d0c      	subs	r5, #12
 80a0a02:	2d0a      	cmp	r5, #10
 80a0a04:	d8f8      	bhi.n	80a09f8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x5c>
      data <<= 1;
 80a0a06:	0040      	lsls	r0, r0, #1
 80a0a08:	e7e3      	b.n	80a09d2 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x36>
    offset++;
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
      // Serial.println("B"); Serial.println(offset); Serial.println(results->rawbuf[offset]);
      break;
    }
    offset++;
 80a0a0a:	3302      	adds	r3, #2
 80a0a0c:	e7d4      	b.n	80a09b8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x1c>
 80a0a0e:	bf00      	nop
 80a0a10:	200000f8 	.word	0x200000f8

080a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>:
// E.g. if the buffer has MARK for 2 time intervals and SPACE for 1,
// successive calls to getRClevel will return MARK, MARK, SPACE.
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
int IRrecv::getRClevel(decode_results *results, int *offset, int *used, int t1) {
 80a0a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0a18:	4616      	mov	r6, r2
 80a0a1a:	461f      	mov	r7, r3
  if (*offset >= results->rawlen) {
 80a0a1c:	6813      	ldr	r3, [r2, #0]
 80a0a1e:	694a      	ldr	r2, [r1, #20]
// E.g. if the buffer has MARK for 2 time intervals and SPACE for 1,
// successive calls to getRClevel will return MARK, MARK, SPACE.
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
int IRrecv::getRClevel(decode_results *results, int *offset, int *used, int t1) {
 80a0a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (*offset >= results->rawlen) {
 80a0a24:	4293      	cmp	r3, r2
 80a0a26:	da30      	bge.n	80a0a8a <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x76>
    // After end of recorded buffer, assume SPACE.
    return SPACE;
  }
  int width = results->rawbuf[*offset];
 80a0a28:	690a      	ldr	r2, [r1, #16]
 80a0a2a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
  int val = ((*offset) % 2) ? MARK : SPACE;
 80a0a2e:	f003 0301 	and.w	r3, r3, #1
  int correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 80a0a32:	2b00      	cmp	r3, #0
 80a0a34:	bf14      	ite	ne
 80a0a36:	2564      	movne	r5, #100	; 0x64
 80a0a38:	f06f 0563 	mvneq.w	r5, #99	; 0x63

  int avail;
  if (MATCH(width, t1 + correction)) {
 80a0a3c:	4445      	add	r5, r8
 80a0a3e:	4629      	mov	r1, r5
 80a0a40:	4648      	mov	r0, r9
 80a0a42:	f083 0401 	eor.w	r4, r3, #1
 80a0a46:	f7ff fe73 	bl	80a0730 <_Z5MATCHii>
 80a0a4a:	b968      	cbnz	r0, 80a0a68 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x54>
    avail = 1;
  }
  else if (MATCH(width, 2*t1 + correction)) {
 80a0a4c:	4445      	add	r5, r8
 80a0a4e:	4629      	mov	r1, r5
 80a0a50:	4648      	mov	r0, r9
 80a0a52:	f7ff fe6d 	bl	80a0730 <_Z5MATCHii>
 80a0a56:	b948      	cbnz	r0, 80a0a6c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x58>
    avail = 2;
  }
  else if (MATCH(width, 3*t1 + correction)) {
 80a0a58:	eb08 0105 	add.w	r1, r8, r5
 80a0a5c:	4648      	mov	r0, r9
 80a0a5e:	f7ff fe67 	bl	80a0730 <_Z5MATCHii>
 80a0a62:	b1a8      	cbz	r0, 80a0a90 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x7c>
    avail = 3;
 80a0a64:	2203      	movs	r2, #3
 80a0a66:	e002      	b.n	80a0a6e <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x5a>
  int val = ((*offset) % 2) ? MARK : SPACE;
  int correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

  int avail;
  if (MATCH(width, t1 + correction)) {
    avail = 1;
 80a0a68:	2201      	movs	r2, #1
 80a0a6a:	e000      	b.n	80a0a6e <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x5a>
  }
  else if (MATCH(width, 2*t1 + correction)) {
    avail = 2;
 80a0a6c:	2202      	movs	r2, #2
  }
  else {
    return -1;
  }

  (*used)++;
 80a0a6e:	683b      	ldr	r3, [r7, #0]
  }
  else {
    Serial.println("SPACE");
  }
#endif
  return val;
 80a0a70:	4620      	mov	r0, r4
  }
  else {
    return -1;
  }

  (*used)++;
 80a0a72:	3301      	adds	r3, #1
  if (*used >= avail) {
 80a0a74:	429a      	cmp	r2, r3
    *used = 0;
 80a0a76:	bfdd      	ittte	le
 80a0a78:	2300      	movle	r3, #0
 80a0a7a:	603b      	strle	r3, [r7, #0]
    (*offset)++;
 80a0a7c:	6833      	ldrle	r3, [r6, #0]
  }
  else {
    return -1;
  }

  (*used)++;
 80a0a7e:	603b      	strgt	r3, [r7, #0]
  if (*used >= avail) {
    *used = 0;
    (*offset)++;
 80a0a80:	bfdc      	itt	le
 80a0a82:	3301      	addle	r3, #1
 80a0a84:	6033      	strle	r3, [r6, #0]
 80a0a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
int IRrecv::getRClevel(decode_results *results, int *offset, int *used, int t1) {
  if (*offset >= results->rawlen) {
    // After end of recorded buffer, assume SPACE.
    return SPACE;
 80a0a8a:	2001      	movs	r0, #1
 80a0a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  else if (MATCH(width, 3*t1 + correction)) {
    avail = 3;
  }
  else {
    return -1;
 80a0a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  else {
    Serial.println("SPACE");
  }
#endif
  return val;
}
 80a0a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0a98 <_ZN6IRrecv9decodeRC5EP14decode_results>:

long IRrecv::decodeRC5(decode_results *results) {
 80a0a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
 80a0a9c:	4b30      	ldr	r3, [pc, #192]	; (80a0b60 <_ZN6IRrecv9decodeRC5EP14decode_results+0xc8>)
  }
#endif
  return val;
}

long IRrecv::decodeRC5(decode_results *results) {
 80a0a9e:	b085      	sub	sp, #20
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
 80a0aa0:	f893 2198 	ldrb.w	r2, [r3, #408]	; 0x198
 80a0aa4:	469a      	mov	sl, r3
 80a0aa6:	2a0c      	cmp	r2, #12
  }
#endif
  return val;
}

long IRrecv::decodeRC5(decode_results *results) {
 80a0aa8:	4681      	mov	r9, r0
 80a0aaa:	460c      	mov	r4, r1
 80a0aac:	f04f 0300 	mov.w	r3, #0
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
 80a0ab0:	d952      	bls.n	80a0b58 <_ZN6IRrecv9decodeRC5EP14decode_results+0xc0>
  }
  int offset = 1; // Skip gap space
  long data = 0;
  int used = 0;
  // Get start bits
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
 80a0ab2:	f240 3879 	movw	r8, #889	; 0x379
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    return ERR;
  }
  int offset = 1; // Skip gap space
  long data = 0;
  int used = 0;
 80a0ab6:	af04      	add	r7, sp, #16

long IRrecv::decodeRC5(decode_results *results) {
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    return ERR;
  }
  int offset = 1; // Skip gap space
 80a0ab8:	2201      	movs	r2, #1
  long data = 0;
  int used = 0;
 80a0aba:	f847 3d04 	str.w	r3, [r7, #-4]!

long IRrecv::decodeRC5(decode_results *results) {
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    return ERR;
  }
  int offset = 1; // Skip gap space
 80a0abe:	9202      	str	r2, [sp, #8]
  long data = 0;
  int used = 0;
  // Get start bits
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
 80a0ac0:	f8cd 8000 	str.w	r8, [sp]
 80a0ac4:	463b      	mov	r3, r7
 80a0ac6:	aa02      	add	r2, sp, #8
 80a0ac8:	f7ff ffa4 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0acc:	b108      	cbz	r0, 80a0ad2 <_ZN6IRrecv9decodeRC5EP14decode_results+0x3a>
 80a0ace:	2000      	movs	r0, #0
 80a0ad0:	e043      	b.n	80a0b5a <_ZN6IRrecv9decodeRC5EP14decode_results+0xc2>
  if (getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
 80a0ad2:	f8cd 8000 	str.w	r8, [sp]
 80a0ad6:	463b      	mov	r3, r7
 80a0ad8:	aa02      	add	r2, sp, #8
 80a0ada:	4621      	mov	r1, r4
 80a0adc:	4648      	mov	r0, r9
 80a0ade:	f7ff ff99 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0ae2:	2801      	cmp	r0, #1
 80a0ae4:	d1f3      	bne.n	80a0ace <_ZN6IRrecv9decodeRC5EP14decode_results+0x36>
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
 80a0ae6:	f8cd 8000 	str.w	r8, [sp]
 80a0aea:	463b      	mov	r3, r7
 80a0aec:	aa02      	add	r2, sp, #8
 80a0aee:	4621      	mov	r1, r4
 80a0af0:	4648      	mov	r0, r9
 80a0af2:	f7ff ff8f 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0af6:	2800      	cmp	r0, #0
 80a0af8:	d1e9      	bne.n	80a0ace <_ZN6IRrecv9decodeRC5EP14decode_results+0x36>
 80a0afa:	4606      	mov	r6, r0
 80a0afc:	4605      	mov	r5, r0
  int nbits;
  for (nbits = 0; offset < irparams.rawlen; nbits++) {
 80a0afe:	f89a 2198 	ldrb.w	r2, [sl, #408]	; 0x198
 80a0b02:	9b02      	ldr	r3, [sp, #8]
 80a0b04:	429a      	cmp	r2, r3
 80a0b06:	dd21      	ble.n	80a0b4c <_ZN6IRrecv9decodeRC5EP14decode_results+0xb4>
    int levelA = getRClevel(results, &offset, &used, RC5_T1);
 80a0b08:	463b      	mov	r3, r7
 80a0b0a:	aa02      	add	r2, sp, #8
 80a0b0c:	4621      	mov	r1, r4
 80a0b0e:	f8cd 8000 	str.w	r8, [sp]
 80a0b12:	4648      	mov	r0, r9
 80a0b14:	f7ff ff7e 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0b18:	4683      	mov	fp, r0
    int levelB = getRClevel(results, &offset, &used, RC5_T1);
 80a0b1a:	f8cd 8000 	str.w	r8, [sp]
 80a0b1e:	463b      	mov	r3, r7
 80a0b20:	aa02      	add	r2, sp, #8
 80a0b22:	4621      	mov	r1, r4
 80a0b24:	4648      	mov	r0, r9
 80a0b26:	f7ff ff75 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    if (levelA == SPACE && levelB == MARK) {
 80a0b2a:	f1bb 0f01 	cmp.w	fp, #1
 80a0b2e:	d105      	bne.n	80a0b3c <_ZN6IRrecv9decodeRC5EP14decode_results+0xa4>
 80a0b30:	2800      	cmp	r0, #0
 80a0b32:	d1cc      	bne.n	80a0ace <_ZN6IRrecv9decodeRC5EP14decode_results+0x36>
      // 1 bit
      data = (data << 1) | 1;
 80a0b34:	006d      	lsls	r5, r5, #1
 80a0b36:	f045 0501 	orr.w	r5, r5, #1
 80a0b3a:	e005      	b.n	80a0b48 <_ZN6IRrecv9decodeRC5EP14decode_results+0xb0>
    }
    else if (levelA == MARK && levelB == SPACE) {
 80a0b3c:	f1bb 0f00 	cmp.w	fp, #0
 80a0b40:	d1c5      	bne.n	80a0ace <_ZN6IRrecv9decodeRC5EP14decode_results+0x36>
 80a0b42:	2801      	cmp	r0, #1
 80a0b44:	d1c3      	bne.n	80a0ace <_ZN6IRrecv9decodeRC5EP14decode_results+0x36>
      // zero bit
      data <<= 1;
 80a0b46:	006d      	lsls	r5, r5, #1
  // Get start bits
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
  if (getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
  int nbits;
  for (nbits = 0; offset < irparams.rawlen; nbits++) {
 80a0b48:	3601      	adds	r6, #1
 80a0b4a:	e7d8      	b.n	80a0afe <_ZN6IRrecv9decodeRC5EP14decode_results+0x66>
  }

  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC5;
 80a0b4c:	2303      	movs	r3, #3
      return ERR;
    }
  }

  // Success
  results->bits = nbits;
 80a0b4e:	60e6      	str	r6, [r4, #12]
  results->value = data;
 80a0b50:	60a5      	str	r5, [r4, #8]
  results->decode_type = RC5;
 80a0b52:	6023      	str	r3, [r4, #0]
  return DECODED;
 80a0b54:	2001      	movs	r0, #1
 80a0b56:	e000      	b.n	80a0b5a <_ZN6IRrecv9decodeRC5EP14decode_results+0xc2>
  return val;
}

long IRrecv::decodeRC5(decode_results *results) {
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    return ERR;
 80a0b58:	4618      	mov	r0, r3
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}
 80a0b5a:	b005      	add	sp, #20
 80a0b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b60:	200000f8 	.word	0x200000f8

080a0b64 <_ZN6IRrecv9decodeRC6EP14decode_results>:

long IRrecv::decodeRC6(decode_results *results) {
 80a0b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (results->rawlen < MIN_RC6_SAMPLES) {
 80a0b68:	694b      	ldr	r3, [r1, #20]
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}

long IRrecv::decodeRC6(decode_results *results) {
 80a0b6a:	b085      	sub	sp, #20
  if (results->rawlen < MIN_RC6_SAMPLES) {
 80a0b6c:	2b00      	cmp	r3, #0
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}

long IRrecv::decodeRC6(decode_results *results) {
 80a0b6e:	4681      	mov	r9, r0
 80a0b70:	460c      	mov	r4, r1
  if (results->rawlen < MIN_RC6_SAMPLES) {
 80a0b72:	dc01      	bgt.n	80a0b78 <_ZN6IRrecv9decodeRC6EP14decode_results+0x14>
    return ERR;
 80a0b74:	2000      	movs	r0, #0
 80a0b76:	e06d      	b.n	80a0c54 <_ZN6IRrecv9decodeRC6EP14decode_results+0xf0>
  }
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
 80a0b78:	690a      	ldr	r2, [r1, #16]

long IRrecv::decodeRC6(decode_results *results) {
  if (results->rawlen < MIN_RC6_SAMPLES) {
    return ERR;
  }
  int offset = 1; // Skip first space
 80a0b7a:	2301      	movs	r3, #1
 80a0b7c:	9302      	str	r3, [sp, #8]
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
 80a0b7e:	6853      	ldr	r3, [r2, #4]
 80a0b80:	3b29      	subs	r3, #41	; 0x29
 80a0b82:	2b1d      	cmp	r3, #29
 80a0b84:	d8f6      	bhi.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
    return ERR;
  }
  offset++;
 80a0b86:	2302      	movs	r3, #2
 80a0b88:	9302      	str	r3, [sp, #8]
  if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
 80a0b8a:	6893      	ldr	r3, [r2, #8]
 80a0b8c:	3b0b      	subs	r3, #11
 80a0b8e:	2b09      	cmp	r3, #9
 80a0b90:	d8f0      	bhi.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
    return ERR;
  }
  offset++;
 80a0b92:	2303      	movs	r3, #3
 80a0b94:	9302      	str	r3, [sp, #8]
  long data = 0;
  int used = 0;
 80a0b96:	ae04      	add	r6, sp, #16
 80a0b98:	2300      	movs	r3, #0
 80a0b9a:	f846 3d04 	str.w	r3, [r6, #-4]!
  // Get start bit (1)
  if (getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
 80a0b9e:	f44f 77de 	mov.w	r7, #444	; 0x1bc
 80a0ba2:	9700      	str	r7, [sp, #0]
 80a0ba4:	4633      	mov	r3, r6
 80a0ba6:	aa02      	add	r2, sp, #8
 80a0ba8:	f7ff ff34 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0bac:	4605      	mov	r5, r0
 80a0bae:	2800      	cmp	r0, #0
 80a0bb0:	d1e0      	bne.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
  if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
 80a0bb2:	9700      	str	r7, [sp, #0]
 80a0bb4:	4633      	mov	r3, r6
 80a0bb6:	aa02      	add	r2, sp, #8
 80a0bb8:	4621      	mov	r1, r4
 80a0bba:	4648      	mov	r0, r9
 80a0bbc:	f7ff ff2a 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0bc0:	2801      	cmp	r0, #1
 80a0bc2:	d1d7      	bne.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
 80a0bc4:	46a8      	mov	r8, r5
  int nbits;
  for (nbits = 0; offset < results->rawlen; nbits++) {
 80a0bc6:	6962      	ldr	r2, [r4, #20]
 80a0bc8:	9b02      	ldr	r3, [sp, #8]
 80a0bca:	429a      	cmp	r2, r3
 80a0bcc:	dd3c      	ble.n	80a0c48 <_ZN6IRrecv9decodeRC6EP14decode_results+0xe4>
    int levelA, levelB; // Next two levels
    levelA = getRClevel(results, &offset, &used, RC6_T1);
 80a0bce:	9700      	str	r7, [sp, #0]
 80a0bd0:	4633      	mov	r3, r6
 80a0bd2:	aa02      	add	r2, sp, #8
 80a0bd4:	4621      	mov	r1, r4
 80a0bd6:	4648      	mov	r0, r9
 80a0bd8:	f7ff ff1c 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    if (nbits == 3) {
 80a0bdc:	2d03      	cmp	r5, #3
  if (getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
  if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
  int nbits;
  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = getRClevel(results, &offset, &used, RC6_T1);
 80a0bde:	4683      	mov	fp, r0
    if (nbits == 3) {
 80a0be0:	d00a      	beq.n	80a0bf8 <_ZN6IRrecv9decodeRC6EP14decode_results+0x94>
      // T bit is double wide; make sure second half matches
      if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return ERR;
    }
    levelB = getRClevel(results, &offset, &used, RC6_T1);
 80a0be2:	9700      	str	r7, [sp, #0]
 80a0be4:	4633      	mov	r3, r6
 80a0be6:	aa02      	add	r2, sp, #8
 80a0be8:	4621      	mov	r1, r4
 80a0bea:	4648      	mov	r0, r9
 80a0bec:	f7ff ff12 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    if (nbits == 3) {
 80a0bf0:	2d03      	cmp	r5, #3
    levelA = getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return ERR;
    }
    levelB = getRClevel(results, &offset, &used, RC6_T1);
 80a0bf2:	4682      	mov	sl, r0
    if (nbits == 3) {
 80a0bf4:	d113      	bne.n	80a0c1e <_ZN6IRrecv9decodeRC6EP14decode_results+0xba>
 80a0bf6:	e009      	b.n	80a0c0c <_ZN6IRrecv9decodeRC6EP14decode_results+0xa8>
  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return ERR;
 80a0bf8:	9700      	str	r7, [sp, #0]
 80a0bfa:	4633      	mov	r3, r6
 80a0bfc:	aa02      	add	r2, sp, #8
 80a0bfe:	4621      	mov	r1, r4
 80a0c00:	4648      	mov	r0, r9
 80a0c02:	f7ff ff07 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0c06:	4583      	cmp	fp, r0
 80a0c08:	d0eb      	beq.n	80a0be2 <_ZN6IRrecv9decodeRC6EP14decode_results+0x7e>
 80a0c0a:	e7b3      	b.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
    }
    levelB = getRClevel(results, &offset, &used, RC6_T1);
    if (nbits == 3) {
      // T bit is double wide; make sure second half matches
      if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return ERR;
 80a0c0c:	9700      	str	r7, [sp, #0]
 80a0c0e:	4633      	mov	r3, r6
 80a0c10:	aa02      	add	r2, sp, #8
 80a0c12:	4621      	mov	r1, r4
 80a0c14:	4648      	mov	r0, r9
 80a0c16:	f7ff fefd 	bl	80a0a14 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
 80a0c1a:	4582      	cmp	sl, r0
 80a0c1c:	d1aa      	bne.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
    }
    if (levelA == MARK && levelB == SPACE) { // reversed compared to RC5
 80a0c1e:	f1bb 0f00 	cmp.w	fp, #0
 80a0c22:	d107      	bne.n	80a0c34 <_ZN6IRrecv9decodeRC6EP14decode_results+0xd0>
 80a0c24:	f1ba 0f01 	cmp.w	sl, #1
 80a0c28:	d1a4      	bne.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
      // 1 bit
      data = (data << 1) | 1;
 80a0c2a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80a0c2e:	f048 0801 	orr.w	r8, r8, #1
 80a0c32:	e007      	b.n	80a0c44 <_ZN6IRrecv9decodeRC6EP14decode_results+0xe0>
    }
    else if (levelA == SPACE && levelB == MARK) {
 80a0c34:	f1bb 0f01 	cmp.w	fp, #1
 80a0c38:	d19c      	bne.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
 80a0c3a:	f1ba 0f00 	cmp.w	sl, #0
 80a0c3e:	d199      	bne.n	80a0b74 <_ZN6IRrecv9decodeRC6EP14decode_results+0x10>
      // zero bit
      data <<= 1;
 80a0c40:	ea4f 0848 	mov.w	r8, r8, lsl #1
  int used = 0;
  // Get start bit (1)
  if (getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
  if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
  int nbits;
  for (nbits = 0; offset < results->rawlen; nbits++) {
 80a0c44:	3501      	adds	r5, #1
 80a0c46:	e7be      	b.n	80a0bc6 <_ZN6IRrecv9decodeRC6EP14decode_results+0x62>
    }
  }
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC6;
 80a0c48:	2304      	movs	r3, #4
    else {
      return ERR; // Error
    }
  }
  // Success
  results->bits = nbits;
 80a0c4a:	60e5      	str	r5, [r4, #12]
  results->value = data;
 80a0c4c:	f8c4 8008 	str.w	r8, [r4, #8]
  results->decode_type = RC6;
 80a0c50:	6023      	str	r3, [r4, #0]
  return DECODED;
 80a0c52:	2001      	movs	r0, #1
}
 80a0c54:	b005      	add	sp, #20
 80a0c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0c5a <_ZN6IRrecv15decodePanasonicEP14decode_results>:
long IRrecv::decodePanasonic(decode_results *results) {
 80a0c5a:	b530      	push	{r4, r5, lr}
    unsigned long long data = 0;
    int offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
 80a0c5c:	690b      	ldr	r3, [r1, #16]
 80a0c5e:	685a      	ldr	r2, [r3, #4]
 80a0c60:	3a36      	subs	r2, #54	; 0x36
 80a0c62:	2a25      	cmp	r2, #37	; 0x25
 80a0c64:	d815      	bhi.n	80a0c92 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x38>
        return ERR;
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
 80a0c66:	689a      	ldr	r2, [r3, #8]
 80a0c68:	3a1b      	subs	r2, #27
 80a0c6a:	2a14      	cmp	r2, #20
 80a0c6c:	d811      	bhi.n	80a0c92 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x38>
 80a0c6e:	f103 000c 	add.w	r0, r3, #12
 80a0c72:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 80a0c76:	2200      	movs	r2, #0
 80a0c78:	2300      	movs	r3, #0
    }
    offset++;

    // decode address
    for (int i = 0; i < PANASONIC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
 80a0c7a:	6805      	ldr	r5, [r0, #0]
 80a0c7c:	3d09      	subs	r5, #9
 80a0c7e:	2d07      	cmp	r5, #7
 80a0c80:	d807      	bhi.n	80a0c92 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x38>
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
 80a0c82:	6845      	ldr	r5, [r0, #4]
 80a0c84:	3d11      	subs	r5, #17
 80a0c86:	2d0c      	cmp	r5, #12
 80a0c88:	d905      	bls.n	80a0c96 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x3c>
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
 80a0c8a:	6845      	ldr	r5, [r0, #4]
 80a0c8c:	3d04      	subs	r5, #4
 80a0c8e:	2d04      	cmp	r5, #4
 80a0c90:	d910      	bls.n	80a0cb4 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x5a>
long IRrecv::decodePanasonic(decode_results *results) {
    unsigned long long data = 0;
    int offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
        return ERR;
 80a0c92:	2000      	movs	r0, #0
 80a0c94:	bd30      	pop	{r4, r5, pc}
    for (int i = 0; i < PANASONIC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
 80a0c96:	1892      	adds	r2, r2, r2
 80a0c98:	415b      	adcs	r3, r3
 80a0c9a:	f042 0201 	orr.w	r2, r2, #1
 80a0c9e:	3008      	adds	r0, #8
        return ERR;
    }
    offset++;

    // decode address
    for (int i = 0; i < PANASONIC_BITS; i++) {
 80a0ca0:	4284      	cmp	r4, r0
 80a0ca2:	d1ea      	bne.n	80a0c7a <_ZN6IRrecv15decodePanasonicEP14decode_results+0x20>
            return ERR;
        }
        offset++;
    }
    results->value = (unsigned long)data;
    results->panasonicAddress = (unsigned int)(data >> 32);
 80a0ca4:	604b      	str	r3, [r1, #4]
    results->decode_type = PANASONIC;
 80a0ca6:	2307      	movs	r3, #7
 80a0ca8:	600b      	str	r3, [r1, #0]
    results->bits = PANASONIC_BITS;
 80a0caa:	2330      	movs	r3, #48	; 0x30
        } else {
            return ERR;
        }
        offset++;
    }
    results->value = (unsigned long)data;
 80a0cac:	608a      	str	r2, [r1, #8]
    results->panasonicAddress = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
    results->bits = PANASONIC_BITS;
 80a0cae:	60cb      	str	r3, [r1, #12]
    return DECODED;
 80a0cb0:	2001      	movs	r0, #1
 80a0cb2:	bd30      	pop	{r4, r5, pc}
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
            data <<= 1;
 80a0cb4:	1892      	adds	r2, r2, r2
 80a0cb6:	415b      	adcs	r3, r3
 80a0cb8:	e7f1      	b.n	80a0c9e <_ZN6IRrecv15decodePanasonicEP14decode_results+0x44>
	...

080a0cbc <_ZN6IRrecv9decodeJVCEP14decode_results>:
    results->panasonicAddress = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
    results->bits = PANASONIC_BITS;
    return DECODED;
}
long IRrecv::decodeJVC(decode_results *results) {
 80a0cbc:	b530      	push	{r4, r5, lr}
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
 80a0cbe:	4b27      	ldr	r3, [pc, #156]	; (80a0d5c <_ZN6IRrecv9decodeJVCEP14decode_results+0xa0>)
 80a0cc0:	f893 2198 	ldrb.w	r2, [r3, #408]	; 0x198
 80a0cc4:	461c      	mov	r4, r3
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
 80a0cc6:	2a22      	cmp	r2, #34	; 0x22
 80a0cc8:	690a      	ldr	r2, [r1, #16]
 80a0cca:	d103      	bne.n	80a0cd4 <_ZN6IRrecv9decodeJVCEP14decode_results+0x18>
 80a0ccc:	6850      	ldr	r0, [r2, #4]
 80a0cce:	380a      	subs	r0, #10
 80a0cd0:	2808      	cmp	r0, #8
 80a0cd2:	d915      	bls.n	80a0d00 <_ZN6IRrecv9decodeJVCEP14decode_results+0x44>
        results->value = REPEAT;
        results->decode_type = JVC;
        return DECODED;
    }
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
 80a0cd4:	6853      	ldr	r3, [r2, #4]
 80a0cd6:	3b79      	subs	r3, #121	; 0x79
 80a0cd8:	2b52      	cmp	r3, #82	; 0x52
 80a0cda:	d80f      	bhi.n	80a0cfc <_ZN6IRrecv9decodeJVCEP14decode_results+0x40>
        return ERR;
    }
    offset++;
    if (irparams.rawlen < 2 * JVC_BITS + 1 ) {
 80a0cdc:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
 80a0ce0:	2b20      	cmp	r3, #32
 80a0ce2:	d90b      	bls.n	80a0cfc <_ZN6IRrecv9decodeJVCEP14decode_results+0x40>
        return ERR;
    }
    // Initial space
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
 80a0ce4:	6893      	ldr	r3, [r2, #8]
 80a0ce6:	3b3a      	subs	r3, #58	; 0x3a
 80a0ce8:	2b28      	cmp	r3, #40	; 0x28
 80a0cea:	d807      	bhi.n	80a0cfc <_ZN6IRrecv9decodeJVCEP14decode_results+0x40>
 80a0cec:	f102 000c 	add.w	r0, r2, #12
 80a0cf0:	2300      	movs	r3, #0
 80a0cf2:	2403      	movs	r4, #3
        return ERR;
    }
    offset++;
    for (int i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
 80a0cf4:	6805      	ldr	r5, [r0, #0]
 80a0cf6:	3d0a      	subs	r5, #10
 80a0cf8:	2d08      	cmp	r5, #8
 80a0cfa:	d910      	bls.n	80a0d1e <_ZN6IRrecv9decodeJVCEP14decode_results+0x62>
        results->decode_type = JVC;
        return DECODED;
    }
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
        return ERR;
 80a0cfc:	2000      	movs	r0, #0
 80a0cfe:	bd30      	pop	{r4, r5, pc}
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
 80a0d00:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80a0d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a0d08:	3b01      	subs	r3, #1
 80a0d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a0d0e:	3b0a      	subs	r3, #10
 80a0d10:	2b08      	cmp	r3, #8
 80a0d12:	d8df      	bhi.n	80a0cd4 <_ZN6IRrecv9decodeJVCEP14decode_results+0x18>
        results->bits = 0;
 80a0d14:	2300      	movs	r3, #0
 80a0d16:	60cb      	str	r3, [r1, #12]
        results->value = REPEAT;
 80a0d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0d1c:	e019      	b.n	80a0d52 <_ZN6IRrecv9decodeJVCEP14decode_results+0x96>
    for (int i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
            return ERR;
        }
        offset++;
        if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE)) {
 80a0d1e:	6845      	ldr	r5, [r0, #4]
 80a0d20:	3d16      	subs	r5, #22
 80a0d22:	2d10      	cmp	r5, #16
 80a0d24:	d80f      	bhi.n	80a0d46 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8a>
            data = (data << 1) | 1;
 80a0d26:	005b      	lsls	r3, r3, #1
 80a0d28:	f043 0301 	orr.w	r3, r3, #1
            data <<= 1;
        }
        else {
            return ERR;
        }
        offset++;
 80a0d2c:	3402      	adds	r4, #2
    // Initial space
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    }
    offset++;
    for (int i = 0; i < JVC_BITS; i++) {
 80a0d2e:	2c23      	cmp	r4, #35	; 0x23
 80a0d30:	f100 0008 	add.w	r0, r0, #8
 80a0d34:	d1de      	bne.n	80a0cf4 <_ZN6IRrecv9decodeJVCEP14decode_results+0x38>
            return ERR;
        }
        offset++;
    }
    //Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
 80a0d36:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80a0d3a:	3a0a      	subs	r2, #10
 80a0d3c:	2a08      	cmp	r2, #8
 80a0d3e:	d8dd      	bhi.n	80a0cfc <_ZN6IRrecv9decodeJVCEP14decode_results+0x40>
        return ERR;
    }
    // Success
    results->bits = JVC_BITS;
 80a0d40:	2210      	movs	r2, #16
 80a0d42:	60ca      	str	r2, [r1, #12]
 80a0d44:	e005      	b.n	80a0d52 <_ZN6IRrecv9decodeJVCEP14decode_results+0x96>
        }
        offset++;
        if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE)) {
            data = (data << 1) | 1;
        }
        else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
 80a0d46:	6845      	ldr	r5, [r0, #4]
 80a0d48:	3d06      	subs	r5, #6
 80a0d4a:	2d06      	cmp	r5, #6
 80a0d4c:	d8d6      	bhi.n	80a0cfc <_ZN6IRrecv9decodeJVCEP14decode_results+0x40>
            data <<= 1;
 80a0d4e:	005b      	lsls	r3, r3, #1
 80a0d50:	e7ec      	b.n	80a0d2c <_ZN6IRrecv9decodeJVCEP14decode_results+0x70>
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
        return ERR;
    }
    // Success
    results->bits = JVC_BITS;
    results->value = data;
 80a0d52:	608b      	str	r3, [r1, #8]
    results->decode_type = JVC;
 80a0d54:	2308      	movs	r3, #8
 80a0d56:	600b      	str	r3, [r1, #0]
    return DECODED;
 80a0d58:	2001      	movs	r0, #1
}
 80a0d5a:	bd30      	pop	{r4, r5, pc}
 80a0d5c:	200000f8 	.word	0x200000f8

080a0d60 <_ZN6IRrecv7compareEjj>:
 */

// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
 80a0d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (newval < oldval * .8) {
 80a0d62:	4610      	mov	r0, r2
 */

// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
 80a0d64:	460e      	mov	r6, r1
  if (newval < oldval * .8) {
 80a0d66:	f001 fe6b 	bl	80a2a40 <__aeabi_ui2d>
 80a0d6a:	4604      	mov	r4, r0
 80a0d6c:	4630      	mov	r0, r6
 80a0d6e:	460d      	mov	r5, r1
 80a0d70:	f001 fe66 	bl	80a2a40 <__aeabi_ui2d>
 80a0d74:	a310      	add	r3, pc, #64	; (adr r3, 80a0db8 <_ZN6IRrecv7compareEjj+0x58>)
 80a0d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0d7a:	4606      	mov	r6, r0
 80a0d7c:	460f      	mov	r7, r1
 80a0d7e:	f001 fed5 	bl	80a2b2c <__aeabi_dmul>
 80a0d82:	4602      	mov	r2, r0
 80a0d84:	460b      	mov	r3, r1
 80a0d86:	4620      	mov	r0, r4
 80a0d88:	4629      	mov	r1, r5
 80a0d8a:	f002 f941 	bl	80a3010 <__aeabi_dcmplt>
 80a0d8e:	b988      	cbnz	r0, 80a0db4 <_ZN6IRrecv7compareEjj+0x54>
    return 0;
  }
  else if (oldval < newval * .8) {
 80a0d90:	a309      	add	r3, pc, #36	; (adr r3, 80a0db8 <_ZN6IRrecv7compareEjj+0x58>)
 80a0d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	4629      	mov	r1, r5
 80a0d9a:	f001 fec7 	bl	80a2b2c <__aeabi_dmul>
 80a0d9e:	4602      	mov	r2, r0
 80a0da0:	460b      	mov	r3, r1
 80a0da2:	4630      	mov	r0, r6
 80a0da4:	4639      	mov	r1, r7
 80a0da6:	f002 f933 	bl	80a3010 <__aeabi_dcmplt>
 80a0daa:	2800      	cmp	r0, #0
    return 2;
  }
  else {
    return 1;
 80a0dac:	bf14      	ite	ne
 80a0dae:	2002      	movne	r0, #2
 80a0db0:	2001      	moveq	r0, #1
 80a0db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
  if (newval < oldval * .8) {
    return 0;
 80a0db4:	2000      	movs	r0, #0
    return 2;
  }
  else {
    return 1;
  }
}
 80a0db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0db8:	9999999a 	.word	0x9999999a
 80a0dbc:	3fe99999 	.word	0x3fe99999

080a0dc0 <_ZN6IRrecv10decodeHashEP14decode_results>:

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
 80a0dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
 80a0dc4:	694f      	ldr	r7, [r1, #20]

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
 80a0dc6:	4681      	mov	r9, r0
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
 80a0dc8:	2f05      	cmp	r7, #5

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
 80a0dca:	460c      	mov	r4, r1
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
 80a0dcc:	dd21      	ble.n	80a0e12 <_ZN6IRrecv10decodeHashEP14decode_results+0x52>
 80a0dce:	4d12      	ldr	r5, [pc, #72]	; (80a0e18 <_ZN6IRrecv10decodeHashEP14decode_results+0x58>)
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
 80a0dd0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80a0e1c <_ZN6IRrecv10decodeHashEP14decode_results+0x5c>
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
 80a0dd4:	2302      	movs	r3, #2
 80a0dd6:	1c5e      	adds	r6, r3, #1
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
 80a0dd8:	42b7      	cmp	r7, r6
 80a0dda:	d011      	beq.n	80a0e00 <_ZN6IRrecv10decodeHashEP14decode_results+0x40>
 80a0ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
 80a0de0:	6920      	ldr	r0, [r4, #16]
 80a0de2:	3b01      	subs	r3, #1
 80a0de4:	009a      	lsls	r2, r3, #2
 80a0de6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80a0dea:	f102 0308 	add.w	r3, r2, #8
 80a0dee:	58c2      	ldr	r2, [r0, r3]
 80a0df0:	4648      	mov	r0, r9
 80a0df2:	f7ff ffb5 	bl	80a0d60 <_ZN6IRrecv7compareEjj>
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
 80a0df6:	fb08 f505 	mul.w	r5, r8, r5
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
 80a0dfa:	4633      	mov	r3, r6
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
 80a0dfc:	4045      	eors	r5, r0
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
 80a0dfe:	e7ea      	b.n	80a0dd6 <_ZN6IRrecv10decodeHashEP14decode_results+0x16>
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
  results->bits = 32;
 80a0e00:	2320      	movs	r3, #32
 80a0e02:	60e3      	str	r3, [r4, #12]
  results->decode_type = UNKNOWN;
 80a0e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (int i = 1; i+2 < results->rawlen; i++) {
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
 80a0e08:	60a5      	str	r5, [r4, #8]
  results->bits = 32;
  results->decode_type = UNKNOWN;
 80a0e0a:	6023      	str	r3, [r4, #0]
  return DECODED;
 80a0e0c:	2001      	movs	r0, #1
 80a0e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
 80a0e12:	2000      	movs	r0, #0
  }
  results->value = hash;
  results->bits = 32;
  results->decode_type = UNKNOWN;
  return DECODED;
}
 80a0e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0e18:	811c9dc5 	.word	0x811c9dc5
 80a0e1c:	01000193 	.word	0x01000193

080a0e20 <_ZN6IRrecv6decodeEP14decode_results>:


// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int IRrecv::decode(decode_results *results) {
 80a0e20:	b570      	push	{r4, r5, r6, lr}
  results->rawbuf = irparams.rawbuf;
 80a0e22:	4b22      	ldr	r3, [pc, #136]	; (80a0eac <_ZN6IRrecv6decodeEP14decode_results+0x8c>)


// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int IRrecv::decode(decode_results *results) {
 80a0e24:	4605      	mov	r5, r0
  results->rawbuf = irparams.rawbuf;
 80a0e26:	f103 0208 	add.w	r2, r3, #8
 80a0e2a:	610a      	str	r2, [r1, #16]
  results->rawlen = irparams.rawlen;
 80a0e2c:	f893 2198 	ldrb.w	r2, [r3, #408]	; 0x198


// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int IRrecv::decode(decode_results *results) {
 80a0e30:	460c      	mov	r4, r1
  results->rawbuf = irparams.rawbuf;
  results->rawlen = irparams.rawlen;
 80a0e32:	614a      	str	r2, [r1, #20]
  if (irparams.rcvstate != STATE_STOP) {
 80a0e34:	785a      	ldrb	r2, [r3, #1]
 80a0e36:	461e      	mov	r6, r3
 80a0e38:	2a05      	cmp	r2, #5
 80a0e3a:	d135      	bne.n	80a0ea8 <_ZN6IRrecv6decodeEP14decode_results+0x88>
    return ERR;
  }
#if(DEBUG)
  Serial.println("Attempting NEC decode");
#endif
  if (decodeNEC(results)) {
 80a0e3c:	f7ff fcda 	bl	80a07f4 <_ZN6IRrecv9decodeNECEP14decode_results>
 80a0e40:	b108      	cbz	r0, 80a0e46 <_ZN6IRrecv6decodeEP14decode_results+0x26>
    return DECODED;
 80a0e42:	2001      	movs	r0, #1
 80a0e44:	bd70      	pop	{r4, r5, r6, pc}
  }
#if(DEBUG)
  Serial.println("Attempting Sony decode");
#endif
  if (decodeSony(results)) {
 80a0e46:	4628      	mov	r0, r5
 80a0e48:	f7ff fd1a 	bl	80a0880 <_ZN6IRrecv10decodeSonyEP14decode_results>
 80a0e4c:	2800      	cmp	r0, #0
 80a0e4e:	d1f8      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
    return DECODED;
  }
#if(DEBUG)
  Serial.println("Attempting Sanyo decode");
#endif
  if (decodeSanyo(results)) {
 80a0e50:	4628      	mov	r0, r5
 80a0e52:	f7ff fd5b 	bl	80a090c <_ZN6IRrecv11decodeSanyoEP14decode_results>
 80a0e56:	2800      	cmp	r0, #0
 80a0e58:	d1f3      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
    return DECODED;
  }
#if(DEBUG)
  Serial.println("Attempting Mitsubishi decode");
#endif
  if (decodeMitsubishi(results)) {
 80a0e5a:	4628      	mov	r0, r5
 80a0e5c:	f7ff fd9e 	bl	80a099c <_ZN6IRrecv16decodeMitsubishiEP14decode_results>
 80a0e60:	2800      	cmp	r0, #0
 80a0e62:	d1ee      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
    return DECODED;
  }
#if(DEBUG)
  Serial.println("Attempting RC5 decode");
#endif
  if (decodeRC5(results)) {
 80a0e64:	4628      	mov	r0, r5
 80a0e66:	f7ff fe17 	bl	80a0a98 <_ZN6IRrecv9decodeRC5EP14decode_results>
 80a0e6a:	2800      	cmp	r0, #0
 80a0e6c:	d1e9      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
    return DECODED;
  }
#if(DEBUG)
  Serial.println("Attempting RC6 decode");
#endif
  if (decodeRC6(results)) {
 80a0e6e:	4621      	mov	r1, r4
 80a0e70:	4628      	mov	r0, r5
 80a0e72:	f7ff fe77 	bl	80a0b64 <_ZN6IRrecv9decodeRC6EP14decode_results>
 80a0e76:	2800      	cmp	r0, #0
 80a0e78:	d1e3      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
    return DECODED;
  }
#if(DEBUG)
    Serial.println("Attempting Panasonic decode");
#endif
    if (decodePanasonic(results)) {
 80a0e7a:	4621      	mov	r1, r4
 80a0e7c:	4628      	mov	r0, r5
 80a0e7e:	f7ff feec 	bl	80a0c5a <_ZN6IRrecv15decodePanasonicEP14decode_results>
 80a0e82:	2800      	cmp	r0, #0
 80a0e84:	d1dd      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
        return DECODED;
    }
#if(DEBUG)
    Serial.println("Attempting JVC decode");
#endif
    if (decodeJVC(results)) {
 80a0e86:	4621      	mov	r1, r4
 80a0e88:	4628      	mov	r0, r5
 80a0e8a:	f7ff ff17 	bl	80a0cbc <_ZN6IRrecv9decodeJVCEP14decode_results>
 80a0e8e:	2800      	cmp	r0, #0
 80a0e90:	d1d7      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
        return DECODED;
    }
  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (decodeHash(results)) {
 80a0e92:	4621      	mov	r1, r4
 80a0e94:	4628      	mov	r0, r5
 80a0e96:	f7ff ff93 	bl	80a0dc0 <_ZN6IRrecv10decodeHashEP14decode_results>
 80a0e9a:	2800      	cmp	r0, #0
 80a0e9c:	d1d1      	bne.n	80a0e42 <_ZN6IRrecv6decodeEP14decode_results+0x22>
    pinMode(BLINKLED, OUTPUT);
}


void IRrecv::resume() {
  irparams.rcvstate = STATE_IDLE;
 80a0e9e:	2302      	movs	r3, #2
 80a0ea0:	7073      	strb	r3, [r6, #1]
  irparams.rawlen = 0;
 80a0ea2:	f886 0198 	strb.w	r0, [r6, #408]	; 0x198
  if (decodeHash(results)) {
    return DECODED;
  }
  // Throw away and start over
  resume();
  return ERR;
 80a0ea6:	bd70      	pop	{r4, r5, r6, pc}
// Results of decoding are stored in results
int IRrecv::decode(decode_results *results) {
  results->rawbuf = irparams.rawbuf;
  results->rawlen = irparams.rawlen;
  if (irparams.rcvstate != STATE_STOP) {
    return ERR;
 80a0ea8:	2000      	movs	r0, #0
    return DECODED;
  }
  // Throw away and start over
  resume();
  return ERR;
}
 80a0eaa:	bd70      	pop	{r4, r5, r6, pc}
 80a0eac:	200000f8 	.word	0x200000f8

080a0eb0 <_GLOBAL__sub_I_irout_khz>:
      mark(DISH_BIT_MARK);
      space(DISH_ZERO_SPACE);
    }
    data <<= 1;
  }
}
 80a0eb0:	b510      	push	{r4, lr}
      BLINKLED_OFF();  // turn pin 13 LED off
    }
  }
}

IntervalTimer timer;
 80a0eb2:	4c06      	ldr	r4, [pc, #24]	; (80a0ecc <_GLOBAL__sub_I_irout_khz+0x1c>)
 80a0eb4:	f000 f9a8 	bl	80a1208 <HAL_Pin_Map>
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	f7ff fbd5 	bl	80a0668 <_ZN13IntervalTimerC1Ev>
 80a0ebe:	4620      	mov	r0, r4
      mark(DISH_BIT_MARK);
      space(DISH_ZERO_SPACE);
    }
    data <<= 1;
  }
}
 80a0ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      BLINKLED_OFF();  // turn pin 13 LED off
    }
  }
}

IntervalTimer timer;
 80a0ec4:	4a02      	ldr	r2, [pc, #8]	; (80a0ed0 <_GLOBAL__sub_I_irout_khz+0x20>)
 80a0ec6:	4903      	ldr	r1, [pc, #12]	; (80a0ed4 <_GLOBAL__sub_I_irout_khz+0x24>)
 80a0ec8:	f001 bb26 	b.w	80a2518 <__aeabi_atexit>
 80a0ecc:	20000294 	.word	0x20000294
 80a0ed0:	20000070 	.word	0x20000070
 80a0ed4:	080a0649 	.word	0x080a0649

080a0ed8 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 80a0ed8:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 80a0eda:	2101      	movs	r1, #1
 80a0edc:	4806      	ldr	r0, [pc, #24]	; (80a0ef8 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 80a0ede:	f7ff fa44 	bl	80a036a <TIM_GetITStatus>
 80a0ee2:	b140      	cbz	r0, 80a0ef6 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80a0ee4:	2101      	movs	r1, #1
 80a0ee6:	4804      	ldr	r0, [pc, #16]	; (80a0ef8 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 80a0ee8:	f7ff fa4a 	bl	80a0380 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 80a0eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM3_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[0]();
 80a0ef0:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 80a0ef2:	681b      	ldr	r3, [r3, #0]
 80a0ef4:	4718      	bx	r3
 80a0ef6:	bd10      	pop	{r4, pc}
 80a0ef8:	40000400 	.word	0x40000400
 80a0efc:	200002a4 	.word	0x200002a4

080a0f00 <Wiring_TIM4_Interrupt_Handler_override>:
	}
}

void Wiring_TIM4_Interrupt_Handler_override()
{
 80a0f00:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 80a0f02:	2101      	movs	r1, #1
 80a0f04:	4806      	ldr	r0, [pc, #24]	; (80a0f20 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80a0f06:	f7ff fa30 	bl	80a036a <TIM_GetITStatus>
 80a0f0a:	b140      	cbz	r0, 80a0f1e <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80a0f0c:	2101      	movs	r1, #1
 80a0f0e:	4804      	ldr	r0, [pc, #16]	; (80a0f20 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80a0f10:	f7ff fa36 	bl	80a0380 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 80a0f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM4_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[1]();
 80a0f18:	4b02      	ldr	r3, [pc, #8]	; (80a0f24 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 80a0f1a:	685b      	ldr	r3, [r3, #4]
 80a0f1c:	4718      	bx	r3
 80a0f1e:	bd10      	pop	{r4, pc}
 80a0f20:	40000800 	.word	0x40000800
 80a0f24:	200002a4 	.word	0x200002a4

080a0f28 <Wiring_TIM5_Interrupt_Handler_override>:
	}
}

void Wiring_TIM5_Interrupt_Handler_override()
{
 80a0f28:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 80a0f2a:	2101      	movs	r1, #1
 80a0f2c:	4806      	ldr	r0, [pc, #24]	; (80a0f48 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80a0f2e:	f7ff fa1c 	bl	80a036a <TIM_GetITStatus>
 80a0f32:	b140      	cbz	r0, 80a0f46 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80a0f34:	2101      	movs	r1, #1
 80a0f36:	4804      	ldr	r0, [pc, #16]	; (80a0f48 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80a0f38:	f7ff fa22 	bl	80a0380 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 80a0f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM5_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[2]();
 80a0f40:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 80a0f42:	689b      	ldr	r3, [r3, #8]
 80a0f44:	4718      	bx	r3
 80a0f46:	bd10      	pop	{r4, pc}
 80a0f48:	40000c00 	.word	0x40000c00
 80a0f4c:	200002a4 	.word	0x200002a4

080a0f50 <Wiring_TIM6_Interrupt_Handler_override>:
	}
}

void Wiring_TIM6_Interrupt_Handler_override()
{
 80a0f50:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 80a0f52:	2101      	movs	r1, #1
 80a0f54:	4806      	ldr	r0, [pc, #24]	; (80a0f70 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80a0f56:	f7ff fa08 	bl	80a036a <TIM_GetITStatus>
 80a0f5a:	b140      	cbz	r0, 80a0f6e <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 80a0f5c:	2101      	movs	r1, #1
 80a0f5e:	4804      	ldr	r0, [pc, #16]	; (80a0f70 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80a0f60:	f7ff fa0e 	bl	80a0380 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 80a0f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM6_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[3]();
 80a0f68:	4b02      	ldr	r3, [pc, #8]	; (80a0f74 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 80a0f6a:	68db      	ldr	r3, [r3, #12]
 80a0f6c:	4718      	bx	r3
 80a0f6e:	bd10      	pop	{r4, pc}
 80a0f70:	40001000 	.word	0x40001000
 80a0f74:	200002a4 	.word	0x200002a4

080a0f78 <Wiring_TIM7_Interrupt_Handler_override>:
	}
}

void Wiring_TIM7_Interrupt_Handler_override()
{
 80a0f78:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 80a0f7a:	2101      	movs	r1, #1
 80a0f7c:	4806      	ldr	r0, [pc, #24]	; (80a0f98 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80a0f7e:	f7ff f9f4 	bl	80a036a <TIM_GetITStatus>
 80a0f82:	b140      	cbz	r0, 80a0f96 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80a0f84:	2101      	movs	r1, #1
 80a0f86:	4804      	ldr	r0, [pc, #16]	; (80a0f98 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80a0f88:	f7ff f9fa 	bl	80a0380 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 80a0f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM7_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[4]();
 80a0f90:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 80a0f92:	691b      	ldr	r3, [r3, #16]
 80a0f94:	4718      	bx	r3
 80a0f96:	bd10      	pop	{r4, pc}
 80a0f98:	40001400 	.word	0x40001400
 80a0f9c:	200002a4 	.word	0x200002a4

080a0fa0 <_ZN13IntervalTimer9start_SITEmb>:

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 80a0fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80a0fa2:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// configuters a SIT's TIMER registers, etc and enables
// interrupts, effectively starting the timer upon completion
// ------------------------------------------------------------
void IntervalTimer::start_SIT(intPeriod Period, bool scale) {
 80a0fa4:	b085      	sub	sp, #20
 80a0fa6:	4605      	mov	r5, r0
 80a0fa8:	460f      	mov	r7, r1
 80a0faa:	4616      	mov	r6, r2
    NVIC_InitTypeDef nvicStructure;
	intPeriod prescaler;
	TIM_TypeDef* TIMx;

	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80a0fac:	2b04      	cmp	r3, #4
 80a0fae:	d830      	bhi.n	80a1012 <_ZN13IntervalTimer9start_SITEmb+0x72>
 80a0fb0:	e8df f003 	tbb	[pc, r3]
 80a0fb4:	1e150c03 	.word	0x1e150c03
 80a0fb8:	27          	.byte	0x27
 80a0fb9:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80a0fba:	2101      	movs	r1, #1
 80a0fbc:	2002      	movs	r0, #2
 80a0fbe:	f7ff f8b3 	bl	80a0128 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80a0fc2:	231d      	movs	r3, #29
 80a0fc4:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM3;
 80a0fc8:	4c29      	ldr	r4, [pc, #164]	; (80a1070 <_ZN13IntervalTimer9start_SITEmb+0xd0>)
		break;
 80a0fca:	e022      	b.n	80a1012 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 1:		// TIM4
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80a0fcc:	2101      	movs	r1, #1
 80a0fce:	2004      	movs	r0, #4
 80a0fd0:	f7ff f8aa 	bl	80a0128 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80a0fd4:	231e      	movs	r3, #30
 80a0fd6:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM4;
 80a0fda:	4c26      	ldr	r4, [pc, #152]	; (80a1074 <_ZN13IntervalTimer9start_SITEmb+0xd4>)
		break;
 80a0fdc:	e019      	b.n	80a1012 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 2:		// TIM5
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80a0fde:	2101      	movs	r1, #1
 80a0fe0:	2008      	movs	r0, #8
 80a0fe2:	f7ff f8a1 	bl	80a0128 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80a0fe6:	2332      	movs	r3, #50	; 0x32
 80a0fe8:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM5;
 80a0fec:	4c22      	ldr	r4, [pc, #136]	; (80a1078 <_ZN13IntervalTimer9start_SITEmb+0xd8>)
		break;
 80a0fee:	e010      	b.n	80a1012 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 3:		// TIM6
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80a0ff0:	2101      	movs	r1, #1
 80a0ff2:	2010      	movs	r0, #16
 80a0ff4:	f7ff f898 	bl	80a0128 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80a0ff8:	2336      	movs	r3, #54	; 0x36
 80a0ffa:	f88d 3000 	strb.w	r3, [sp]
		TIMx = TIM6;
 80a0ffe:	4c1f      	ldr	r4, [pc, #124]	; (80a107c <_ZN13IntervalTimer9start_SITEmb+0xdc>)
		break;
 80a1000:	e007      	b.n	80a1012 <_ZN13IntervalTimer9start_SITEmb+0x72>
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80a1002:	2101      	movs	r1, #1
 80a1004:	2020      	movs	r0, #32
 80a1006:	f7ff f88f 	bl	80a0128 <RCC_APB1PeriphClockCmd>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
		TIMx = TIM7;
 80a100a:	4c1d      	ldr	r4, [pc, #116]	; (80a1080 <_ZN13IntervalTimer9start_SITEmb+0xe0>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80a100c:	2337      	movs	r3, #55	; 0x37
 80a100e:	f88d 3000 	strb.w	r3, [sp]
		break;
#endif
	}
	
	// Initialize Timer
	switch (scale) {
 80a1012:	b11e      	cbz	r6, 80a101c <_ZN13IntervalTimer9start_SITEmb+0x7c>
 80a1014:	2e01      	cmp	r6, #1
 80a1016:	d101      	bne.n	80a101c <_ZN13IntervalTimer9start_SITEmb+0x7c>
		case uSec:
			prescaler = SIT_PRESCALERu;	// Set prescaler for 1MHz clock, 1us period
			break;
		case hmSec:
			prescaler = SIT_PRESCALERm;	// Set prescaler for 2Hz clock, .5ms period
 80a1018:	88ae      	ldrh	r6, [r5, #4]
			break;
 80a101a:	e000      	b.n	80a101e <_ZN13IntervalTimer9start_SITEmb+0x7e>
		default:
			prescaler = SIT_PRESCALERu;
 80a101c:	886e      	ldrh	r6, [r5, #2]
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 80a101e:	7a6a      	ldrb	r2, [r5, #9]
 80a1020:	68e9      	ldr	r1, [r5, #12]
 80a1022:	4b18      	ldr	r3, [pc, #96]	; (80a1084 <_ZN13IntervalTimer9start_SITEmb+0xe4>)

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80a1024:	2501      	movs	r5, #1
			scale = uSec;				// Default to microseconds
			break;
	}

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;
 80a1026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
 80a102a:	4668      	mov	r0, sp

	// point to the correct SIT ISR
	SIT_CALLBACK[SIT_id] = myISRcallback;

	// Enable Timer Interrupt
    	nvicStructure.NVIC_IRQChannelPreemptionPriority = 10;
 80a102c:	230a      	movs	r3, #10
 80a102e:	f88d 3001 	strb.w	r3, [sp, #1]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80a1032:	f88d 5002 	strb.w	r5, [sp, #2]
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80a1036:	f88d 5003 	strb.w	r5, [sp, #3]
    	NVIC_Init(&nvicStructure);
 80a103a:	f7ff f83f 	bl	80a00bc <NVIC_Init>
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80a103e:	2300      	movs	r3, #0
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80a1040:	a901      	add	r1, sp, #4
 80a1042:	4620      	mov	r0, r4
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80a1044:	f8ad 3006 	strh.w	r3, [sp, #6]
	timerInitStructure.TIM_Period = Period;
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80a1048:	f8ad 300c 	strh.w	r3, [sp, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 80a104c:	f88d 300e 	strb.w	r3, [sp, #14]
    	nvicStructure.NVIC_IRQChannelSubPriority = 1;
    	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    	NVIC_Init(&nvicStructure);
	
	// Timebase configuration
	timerInitStructure.TIM_Prescaler = prescaler;
 80a1050:	f8ad 6004 	strh.w	r6, [sp, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	timerInitStructure.TIM_Period = Period;
 80a1054:	9702      	str	r7, [sp, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	timerInitStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80a1056:	f7ff f935 	bl	80a02c4 <TIM_TimeBaseInit>
	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 80a105a:	462a      	mov	r2, r5
 80a105c:	4629      	mov	r1, r5
 80a105e:	4620      	mov	r0, r4
 80a1060:	f7ff f97a 	bl	80a0358 <TIM_ITConfig>
	TIM_Cmd(TIMx, ENABLE);
 80a1064:	4629      	mov	r1, r5
 80a1066:	4620      	mov	r0, r4
 80a1068:	f7ff f96a 	bl	80a0340 <TIM_Cmd>
}
 80a106c:	b005      	add	sp, #20
 80a106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1070:	40000400 	.word	0x40000400
 80a1074:	40000800 	.word	0x40000800
 80a1078:	40000c00 	.word	0x40000c00
 80a107c:	40001000 	.word	0x40001000
 80a1080:	40001400 	.word	0x40001400
 80a1084:	200002a4 	.word	0x200002a4

080a1088 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>:
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 80a1088:	2b04      	cmp	r3, #4
// enables the SIT clock if not already enabled, then checks to
// see if any SITs are available for use. if one is available,
// it's initialized and started with the specified value, and
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {
 80a108a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a108c:	4606      	mov	r6, r0
 80a108e:	460f      	mov	r7, r1
 80a1090:	4696      	mov	lr, r2
 80a1092:	461c      	mov	r4, r3
 80a1094:	4d0e      	ldr	r5, [pc, #56]	; (80a10d0 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
 80a1096:	d911      	bls.n	80a10bc <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x34>
 80a1098:	2400      	movs	r4, #0
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 80a109a:	5d2a      	ldrb	r2, [r5, r4]
 80a109c:	b2e3      	uxtb	r3, r4
 80a109e:	b94a      	cbnz	r2, 80a10b4 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x2c>
				SIT_id = tid;
 80a10a0:	7273      	strb	r3, [r6, #9]
				start_SIT(Period, scale);
 80a10a2:	4630      	mov	r0, r6
 80a10a4:	4672      	mov	r2, lr
 80a10a6:	4639      	mov	r1, r7
 80a10a8:	f7ff ff7a 	bl	80a0fa0 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 80a10ac:	4b08      	ldr	r3, [pc, #32]	; (80a10d0 <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x48>)
 80a10ae:	2001      	movs	r0, #1
 80a10b0:	5518      	strb	r0, [r3, r4]
 80a10b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a10b4:	3401      	adds	r4, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 80a10b6:	2c05      	cmp	r4, #5
 80a10b8:	d1ef      	bne.n	80a109a <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x12>
 80a10ba:	e007      	b.n	80a10cc <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
// the function returns true, otherwise it returns false
// ------------------------------------------------------------
bool IntervalTimer::allocate_SIT(intPeriod Period, bool scale, TIMid id) {

	if (id < NUM_SIT) {		// Allocate specified timer (id=TIMER3/4/5) or auto-allocate from pool (id=AUTO)
		if (!SIT_used[id]) {
 80a10bc:	5ceb      	ldrb	r3, [r5, r3]
 80a10be:	b92b      	cbnz	r3, 80a10cc <_ZN13IntervalTimer12allocate_SITEmb5TIMid+0x44>
			SIT_id = id;
 80a10c0:	7244      	strb	r4, [r0, #9]
			start_SIT(Period, scale);
 80a10c2:	f7ff ff6d 	bl	80a0fa0 <_ZN13IntervalTimer9start_SITEmb>
			SIT_used[id] = true;
 80a10c6:	2001      	movs	r0, #1
 80a10c8:	5528      	strb	r0, [r5, r4]
			return true;
 80a10ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	
	// Specified or no auto-allocate SIT available
	return false;
 80a10cc:	2000      	movs	r0, #0
}
 80a10ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a10d0:	200002b8 	.word	0x200002b8

080a10d4 <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80a10d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80a10d6:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80a10d8:	4606      	mov	r6, r0
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80a10da:	2b04      	cmp	r3, #4
 80a10dc:	d81c      	bhi.n	80a1118 <_ZN13IntervalTimer8stop_SITEv+0x44>
 80a10de:	e8df f003 	tbb	[pc, r3]
 80a10e2:	0803      	.short	0x0803
 80a10e4:	120d      	.short	0x120d
 80a10e6:	17          	.byte	0x17
 80a10e7:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80a10e8:	231d      	movs	r3, #29
 80a10ea:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM3;
 80a10ee:	4c13      	ldr	r4, [pc, #76]	; (80a113c <_ZN13IntervalTimer8stop_SITEv+0x68>)
		break;
 80a10f0:	e012      	b.n	80a1118 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 1:		// TIM4
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80a10f2:	231e      	movs	r3, #30
 80a10f4:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM4;
 80a10f8:	4c11      	ldr	r4, [pc, #68]	; (80a1140 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
		break;
 80a10fa:	e00d      	b.n	80a1118 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 2:		// TIM5
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80a10fc:	2332      	movs	r3, #50	; 0x32
 80a10fe:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM5;
 80a1102:	4c10      	ldr	r4, [pc, #64]	; (80a1144 <_ZN13IntervalTimer8stop_SITEv+0x70>)
		break;
 80a1104:	e008      	b.n	80a1118 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80a1106:	2336      	movs	r3, #54	; 0x36
 80a1108:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM6;
 80a110c:	4c0e      	ldr	r4, [pc, #56]	; (80a1148 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		break;
 80a110e:	e003      	b.n	80a1118 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80a1110:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 80a1112:	4c0e      	ldr	r4, [pc, #56]	; (80a114c <_ZN13IntervalTimer8stop_SITEv+0x78>)
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80a1114:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM7;
		break;
#endif
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
 80a1118:	2100      	movs	r1, #0
 80a111a:	4620      	mov	r0, r4
 80a111c:	f7ff f910 	bl	80a0340 <TIM_Cmd>
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 80a1120:	2500      	movs	r5, #0
    NVIC_Init(&nvicStructure);
 80a1122:	a801      	add	r0, sp, #4
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 80a1124:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&nvicStructure);
 80a1128:	f7fe ffc8 	bl	80a00bc <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 80a112c:	4620      	mov	r0, r4
 80a112e:	f7ff f81f 	bl	80a0170 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 80a1132:	7a73      	ldrb	r3, [r6, #9]
 80a1134:	4a06      	ldr	r2, [pc, #24]	; (80a1150 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 80a1136:	54d5      	strb	r5, [r2, r3]
}
 80a1138:	b002      	add	sp, #8
 80a113a:	bd70      	pop	{r4, r5, r6, pc}
 80a113c:	40000400 	.word	0x40000400
 80a1140:	40000800 	.word	0x40000800
 80a1144:	40000c00 	.word	0x40000c00
 80a1148:	40001000 	.word	0x40001000
 80a114c:	40001400 	.word	0x40001400
 80a1150:	200002b8 	.word	0x200002b8

080a1154 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid>:
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 80a1154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1158:	461f      	mov	r7, r3

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 80a115a:	7a03      	ldrb	r3, [r0, #8]
// returning true on success or false in case of failure.
// Period units is defined by scale, where scale = uSec or hmSec
// and = 1-65535 microsecond (uSec)
// or 1-65535 0.5ms increments (hmSec)
// ------------------------------------------------------------
bool IntervalTimer::beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id) {
 80a115c:	4604      	mov	r4, r0
 80a115e:	4688      	mov	r8, r1
 80a1160:	4616      	mov	r6, r2
 80a1162:	f89d 5018 	ldrb.w	r5, [sp, #24]

	// if this interval timer is already running, stop and deallocate it
	if (status == TIMER_SIT) {
 80a1166:	b11b      	cbz	r3, 80a1170 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x1c>
		stop_SIT();
 80a1168:	f7ff ffb4 	bl	80a10d4 <_ZN13IntervalTimer8stop_SITEv>
		status = TIMER_OFF;
 80a116c:	2300      	movs	r3, #0
 80a116e:	7223      	strb	r3, [r4, #8]
	}
	// store callback pointer
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 80a1170:	2d04      	cmp	r5, #4
	if (status == TIMER_SIT) {
		stop_SIT();
		status = TIMER_OFF;
	}
	// store callback pointer
	myISRcallback = isrCallback;
 80a1172:	f8c4 800c 	str.w	r8, [r4, #12]

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
 80a1176:	d810      	bhi.n	80a119a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x46>
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
 80a1178:	462b      	mov	r3, r5
 80a117a:	463a      	mov	r2, r7
 80a117c:	4631      	mov	r1, r6
 80a117e:	4620      	mov	r0, r4
 80a1180:	f7ff ff82 	bl	80a1088 <_ZN13IntervalTimer12allocate_SITEmb5TIMid>
 80a1184:	b120      	cbz	r0, 80a1190 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3c>
 80a1186:	2301      	movs	r3, #1
 80a1188:	e003      	b.n	80a1192 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 80a118a:	3501      	adds	r5, #1
			return true;
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
 80a118c:	2d05      	cmp	r5, #5
 80a118e:	d106      	bne.n	80a119e <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x4a>
	myISRcallback = isrCallback;

	if (id < NUM_SIT) {		// Allocate specified timer (id=0 to 2/4) or auto-allocate from pool (id=255)
		// attempt to allocate this timer
		if (allocate_SIT(Period, scale, id)) status = TIMER_SIT;		//255 means allocate from pool
		else status = TIMER_OFF;
 80a1190:	2300      	movs	r3, #0
 80a1192:	7223      	strb	r3, [r4, #8]

	// check for success and return
	if (status != TIMER_OFF) return true;
	return false;

}
 80a1194:	7a20      	ldrb	r0, [r4, #8]
 80a1196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}
	else {	
		// Auto allocate - check for an available SIT, and if so, start it
		for (uint8_t tid = 0; tid < NUM_SIT; tid++) {
			if (!SIT_used[tid]) {
 80a119a:	4b08      	ldr	r3, [pc, #32]	; (80a11bc <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 80a119c:	2500      	movs	r5, #0
 80a119e:	5ce9      	ldrb	r1, [r5, r3]
 80a11a0:	b2ea      	uxtb	r2, r5
 80a11a2:	2900      	cmp	r1, #0
 80a11a4:	d1f1      	bne.n	80a118a <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x36>
				SIT_id = tid;
 80a11a6:	7262      	strb	r2, [r4, #9]
				start_SIT(Period, scale);
 80a11a8:	4631      	mov	r1, r6
 80a11aa:	463a      	mov	r2, r7
 80a11ac:	4620      	mov	r0, r4
 80a11ae:	f7ff fef7 	bl	80a0fa0 <_ZN13IntervalTimer9start_SITEmb>
				SIT_used[tid] = true;
 80a11b2:	4a02      	ldr	r2, [pc, #8]	; (80a11bc <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x68>)
 80a11b4:	2301      	movs	r3, #1
 80a11b6:	5553      	strb	r3, [r2, r5]
 80a11b8:	e7eb      	b.n	80a1192 <_ZN13IntervalTimer11beginCyclesEPFvvEmb5TIMid+0x3e>
 80a11ba:	bf00      	nop
 80a11bc:	200002b8 	.word	0x200002b8

080a11c0 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
	if (status == TIMER_SIT) stop_SIT();
 80a11c0:	7a03      	ldrb	r3, [r0, #8]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
 80a11c2:	b510      	push	{r4, lr}
 80a11c4:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 80a11c6:	b10b      	cbz	r3, 80a11cc <_ZN13IntervalTimer3endEv+0xc>
 80a11c8:	f7ff ff84 	bl	80a10d4 <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 80a11cc:	2300      	movs	r3, #0
 80a11ce:	7223      	strb	r3, [r4, #8]
 80a11d0:	bd10      	pop	{r4, pc}

080a11d2 <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 80a11d2:	f000 b819 	b.w	80a1208 <HAL_Pin_Map>
	...

080a11d8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b02      	ldr	r3, [pc, #8]	; (80a11e4 <os_mutex_create+0xc>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	bd08      	pop	{r3, pc}
 80a11e4:	080601d0 	.word	0x080601d0

080a11e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a11e8:	b508      	push	{r3, lr}
 80a11ea:	4b02      	ldr	r3, [pc, #8]	; (80a11f4 <HAL_RNG_GetRandomNumber+0xc>)
 80a11ec:	681b      	ldr	r3, [r3, #0]
 80a11ee:	685b      	ldr	r3, [r3, #4]
 80a11f0:	9301      	str	r3, [sp, #4]
 80a11f2:	bd08      	pop	{r3, pc}
 80a11f4:	0806019c 	.word	0x0806019c

080a11f8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a11f8:	b508      	push	{r3, lr}
 80a11fa:	4b02      	ldr	r3, [pc, #8]	; (80a1204 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a11fc:	681b      	ldr	r3, [r3, #0]
 80a11fe:	695b      	ldr	r3, [r3, #20]
 80a1200:	9301      	str	r3, [sp, #4]
 80a1202:	bd08      	pop	{r3, pc}
 80a1204:	0806019c 	.word	0x0806019c

080a1208 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1208:	b508      	push	{r3, lr}
 80a120a:	4b02      	ldr	r3, [pc, #8]	; (80a1214 <HAL_Pin_Map+0xc>)
 80a120c:	681b      	ldr	r3, [r3, #0]
 80a120e:	681b      	ldr	r3, [r3, #0]
 80a1210:	9301      	str	r3, [sp, #4]
 80a1212:	bd08      	pop	{r3, pc}
 80a1214:	080601b0 	.word	0x080601b0

080a1218 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1218:	b508      	push	{r3, lr}
 80a121a:	4b02      	ldr	r3, [pc, #8]	; (80a1224 <HAL_Pin_Mode+0xc>)
 80a121c:	681b      	ldr	r3, [r3, #0]
 80a121e:	689b      	ldr	r3, [r3, #8]
 80a1220:	9301      	str	r3, [sp, #4]
 80a1222:	bd08      	pop	{r3, pc}
 80a1224:	080601b0 	.word	0x080601b0

080a1228 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1228:	b508      	push	{r3, lr}
 80a122a:	4b02      	ldr	r3, [pc, #8]	; (80a1234 <HAL_Get_Pin_Mode+0xc>)
 80a122c:	681b      	ldr	r3, [r3, #0]
 80a122e:	68db      	ldr	r3, [r3, #12]
 80a1230:	9301      	str	r3, [sp, #4]
 80a1232:	bd08      	pop	{r3, pc}
 80a1234:	080601b0 	.word	0x080601b0

080a1238 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1238:	b508      	push	{r3, lr}
 80a123a:	4b02      	ldr	r3, [pc, #8]	; (80a1244 <HAL_GPIO_Write+0xc>)
 80a123c:	681b      	ldr	r3, [r3, #0]
 80a123e:	691b      	ldr	r3, [r3, #16]
 80a1240:	9301      	str	r3, [sp, #4]
 80a1242:	bd08      	pop	{r3, pc}
 80a1244:	080601b0 	.word	0x080601b0

080a1248 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1248:	b508      	push	{r3, lr}
 80a124a:	4b02      	ldr	r3, [pc, #8]	; (80a1254 <HAL_GPIO_Read+0xc>)
 80a124c:	681b      	ldr	r3, [r3, #0]
 80a124e:	695b      	ldr	r3, [r3, #20]
 80a1250:	9301      	str	r3, [sp, #4]
 80a1252:	bd08      	pop	{r3, pc}
 80a1254:	080601b0 	.word	0x080601b0

080a1258 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 80a1258:	b508      	push	{r3, lr}
 80a125a:	4b02      	ldr	r3, [pc, #8]	; (80a1264 <HAL_Set_System_Interrupt_Handler+0xc>)
 80a125c:	681b      	ldr	r3, [r3, #0]
 80a125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1260:	9301      	str	r3, [sp, #4]
 80a1262:	bd08      	pop	{r3, pc}
 80a1264:	080601b0 	.word	0x080601b0

080a1268 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1268:	b508      	push	{r3, lr}
 80a126a:	4b02      	ldr	r3, [pc, #8]	; (80a1274 <HAL_I2C_Write_Data+0xc>)
 80a126c:	681b      	ldr	r3, [r3, #0]
 80a126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1270:	9301      	str	r3, [sp, #4]
 80a1272:	bd08      	pop	{r3, pc}
 80a1274:	080601ac 	.word	0x080601ac

080a1278 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1278:	b508      	push	{r3, lr}
 80a127a:	4b02      	ldr	r3, [pc, #8]	; (80a1284 <HAL_I2C_Available_Data+0xc>)
 80a127c:	681b      	ldr	r3, [r3, #0]
 80a127e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1280:	9301      	str	r3, [sp, #4]
 80a1282:	bd08      	pop	{r3, pc}
 80a1284:	080601ac 	.word	0x080601ac

080a1288 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1288:	b508      	push	{r3, lr}
 80a128a:	4b02      	ldr	r3, [pc, #8]	; (80a1294 <HAL_I2C_Read_Data+0xc>)
 80a128c:	681b      	ldr	r3, [r3, #0]
 80a128e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1290:	9301      	str	r3, [sp, #4]
 80a1292:	bd08      	pop	{r3, pc}
 80a1294:	080601ac 	.word	0x080601ac

080a1298 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1298:	b508      	push	{r3, lr}
 80a129a:	4b02      	ldr	r3, [pc, #8]	; (80a12a4 <HAL_I2C_Peek_Data+0xc>)
 80a129c:	681b      	ldr	r3, [r3, #0]
 80a129e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a12a0:	9301      	str	r3, [sp, #4]
 80a12a2:	bd08      	pop	{r3, pc}
 80a12a4:	080601ac 	.word	0x080601ac

080a12a8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a12a8:	b508      	push	{r3, lr}
 80a12aa:	4b02      	ldr	r3, [pc, #8]	; (80a12b4 <HAL_I2C_Flush_Data+0xc>)
 80a12ac:	681b      	ldr	r3, [r3, #0]
 80a12ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a12b0:	9301      	str	r3, [sp, #4]
 80a12b2:	bd08      	pop	{r3, pc}
 80a12b4:	080601ac 	.word	0x080601ac

080a12b8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a12b8:	b508      	push	{r3, lr}
 80a12ba:	4b02      	ldr	r3, [pc, #8]	; (80a12c4 <HAL_I2C_Is_Enabled+0xc>)
 80a12bc:	681b      	ldr	r3, [r3, #0]
 80a12be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a12c0:	9301      	str	r3, [sp, #4]
 80a12c2:	bd08      	pop	{r3, pc}
 80a12c4:	080601ac 	.word	0x080601ac

080a12c8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b03      	ldr	r3, [pc, #12]	; (80a12d8 <HAL_I2C_Init+0x10>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a12d2:	9301      	str	r3, [sp, #4]
 80a12d4:	bd08      	pop	{r3, pc}
 80a12d6:	0000      	.short	0x0000
 80a12d8:	080601ac 	.word	0x080601ac

080a12dc <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <socket_handle_valid+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	685b      	ldr	r3, [r3, #4]
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601bc 	.word	0x080601bc

080a12ec <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <socket_create+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	689b      	ldr	r3, [r3, #8]
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601bc 	.word	0x080601bc

080a12fc <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b02      	ldr	r3, [pc, #8]	; (80a1308 <socket_receivefrom+0xc>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	695b      	ldr	r3, [r3, #20]
 80a1304:	9301      	str	r3, [sp, #4]
 80a1306:	bd08      	pop	{r3, pc}
 80a1308:	080601bc 	.word	0x080601bc

080a130c <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a130c:	b508      	push	{r3, lr}
 80a130e:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <socket_sendto+0xc>)
 80a1310:	681b      	ldr	r3, [r3, #0]
 80a1312:	69db      	ldr	r3, [r3, #28]
 80a1314:	9301      	str	r3, [sp, #4]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	080601bc 	.word	0x080601bc

080a131c <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a131c:	b508      	push	{r3, lr}
 80a131e:	4b02      	ldr	r3, [pc, #8]	; (80a1328 <socket_close+0xc>)
 80a1320:	681b      	ldr	r3, [r3, #0]
 80a1322:	6a1b      	ldr	r3, [r3, #32]
 80a1324:	9301      	str	r3, [sp, #4]
 80a1326:	bd08      	pop	{r3, pc}
 80a1328:	080601bc 	.word	0x080601bc

080a132c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <socket_handle_invalid+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601bc 	.word	0x080601bc

080a133c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a133c:	b508      	push	{r3, lr}
 80a133e:	4b02      	ldr	r3, [pc, #8]	; (80a1348 <HAL_SPI_Init+0xc>)
 80a1340:	681b      	ldr	r3, [r3, #0]
 80a1342:	69db      	ldr	r3, [r3, #28]
 80a1344:	9301      	str	r3, [sp, #4]
 80a1346:	bd08      	pop	{r3, pc}
 80a1348:	080601b4 	.word	0x080601b4

080a134c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a134c:	b508      	push	{r3, lr}
 80a134e:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <HAL_SPI_Is_Enabled+0xc>)
 80a1350:	681b      	ldr	r3, [r3, #0]
 80a1352:	6a1b      	ldr	r3, [r3, #32]
 80a1354:	9301      	str	r3, [sp, #4]
 80a1356:	bd08      	pop	{r3, pc}
 80a1358:	080601b4 	.word	0x080601b4

080a135c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a135c:	b508      	push	{r3, lr}
 80a135e:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <HAL_USART_Init+0xc>)
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	699b      	ldr	r3, [r3, #24]
 80a1364:	9301      	str	r3, [sp, #4]
 80a1366:	bd08      	pop	{r3, pc}
 80a1368:	080601c4 	.word	0x080601c4

080a136c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a136c:	b508      	push	{r3, lr}
 80a136e:	4b02      	ldr	r3, [pc, #8]	; (80a1378 <HAL_USART_Write_Data+0xc>)
 80a1370:	681b      	ldr	r3, [r3, #0]
 80a1372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1374:	9301      	str	r3, [sp, #4]
 80a1376:	bd08      	pop	{r3, pc}
 80a1378:	080601c4 	.word	0x080601c4

080a137c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a137c:	b508      	push	{r3, lr}
 80a137e:	4b02      	ldr	r3, [pc, #8]	; (80a1388 <HAL_USART_Available_Data+0xc>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1384:	9301      	str	r3, [sp, #4]
 80a1386:	bd08      	pop	{r3, pc}
 80a1388:	080601c4 	.word	0x080601c4

080a138c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a138c:	b508      	push	{r3, lr}
 80a138e:	4b02      	ldr	r3, [pc, #8]	; (80a1398 <HAL_USART_Read_Data+0xc>)
 80a1390:	681b      	ldr	r3, [r3, #0]
 80a1392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1394:	9301      	str	r3, [sp, #4]
 80a1396:	bd08      	pop	{r3, pc}
 80a1398:	080601c4 	.word	0x080601c4

080a139c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a139c:	b508      	push	{r3, lr}
 80a139e:	4b02      	ldr	r3, [pc, #8]	; (80a13a8 <HAL_USART_Peek_Data+0xc>)
 80a13a0:	681b      	ldr	r3, [r3, #0]
 80a13a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13a4:	9301      	str	r3, [sp, #4]
 80a13a6:	bd08      	pop	{r3, pc}
 80a13a8:	080601c4 	.word	0x080601c4

080a13ac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a13ac:	b508      	push	{r3, lr}
 80a13ae:	4b02      	ldr	r3, [pc, #8]	; (80a13b8 <HAL_USART_Flush_Data+0xc>)
 80a13b0:	681b      	ldr	r3, [r3, #0]
 80a13b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a13b4:	9301      	str	r3, [sp, #4]
 80a13b6:	bd08      	pop	{r3, pc}
 80a13b8:	080601c4 	.word	0x080601c4

080a13bc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a13bc:	b508      	push	{r3, lr}
 80a13be:	4b02      	ldr	r3, [pc, #8]	; (80a13c8 <HAL_USART_Is_Enabled+0xc>)
 80a13c0:	681b      	ldr	r3, [r3, #0]
 80a13c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a13c4:	9301      	str	r3, [sp, #4]
 80a13c6:	bd08      	pop	{r3, pc}
 80a13c8:	080601c4 	.word	0x080601c4

080a13cc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a13cc:	b508      	push	{r3, lr}
 80a13ce:	4b02      	ldr	r3, [pc, #8]	; (80a13d8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a13d0:	681b      	ldr	r3, [r3, #0]
 80a13d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a13d4:	9301      	str	r3, [sp, #4]
 80a13d6:	bd08      	pop	{r3, pc}
 80a13d8:	080601c4 	.word	0x080601c4

080a13dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a13dc:	b508      	push	{r3, lr}
 80a13de:	4b02      	ldr	r3, [pc, #8]	; (80a13e8 <HAL_USB_USART_Init+0xc>)
 80a13e0:	681b      	ldr	r3, [r3, #0]
 80a13e2:	681b      	ldr	r3, [r3, #0]
 80a13e4:	9301      	str	r3, [sp, #4]
 80a13e6:	bd08      	pop	{r3, pc}
 80a13e8:	080601d8 	.word	0x080601d8

080a13ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a13ec:	b508      	push	{r3, lr}
 80a13ee:	4b02      	ldr	r3, [pc, #8]	; (80a13f8 <HAL_USB_USART_Begin+0xc>)
 80a13f0:	681b      	ldr	r3, [r3, #0]
 80a13f2:	685b      	ldr	r3, [r3, #4]
 80a13f4:	9301      	str	r3, [sp, #4]
 80a13f6:	bd08      	pop	{r3, pc}
 80a13f8:	080601d8 	.word	0x080601d8

080a13fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a13fc:	b508      	push	{r3, lr}
 80a13fe:	4b02      	ldr	r3, [pc, #8]	; (80a1408 <HAL_USB_USART_Available_Data+0xc>)
 80a1400:	681b      	ldr	r3, [r3, #0]
 80a1402:	691b      	ldr	r3, [r3, #16]
 80a1404:	9301      	str	r3, [sp, #4]
 80a1406:	bd08      	pop	{r3, pc}
 80a1408:	080601d8 	.word	0x080601d8

080a140c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a140c:	b508      	push	{r3, lr}
 80a140e:	4b02      	ldr	r3, [pc, #8]	; (80a1418 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1410:	681b      	ldr	r3, [r3, #0]
 80a1412:	695b      	ldr	r3, [r3, #20]
 80a1414:	9301      	str	r3, [sp, #4]
 80a1416:	bd08      	pop	{r3, pc}
 80a1418:	080601d8 	.word	0x080601d8

080a141c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a141c:	b508      	push	{r3, lr}
 80a141e:	4b02      	ldr	r3, [pc, #8]	; (80a1428 <HAL_USB_USART_Receive_Data+0xc>)
 80a1420:	681b      	ldr	r3, [r3, #0]
 80a1422:	699b      	ldr	r3, [r3, #24]
 80a1424:	9301      	str	r3, [sp, #4]
 80a1426:	bd08      	pop	{r3, pc}
 80a1428:	080601d8 	.word	0x080601d8

080a142c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a142c:	b508      	push	{r3, lr}
 80a142e:	4b02      	ldr	r3, [pc, #8]	; (80a1438 <HAL_USB_USART_Send_Data+0xc>)
 80a1430:	681b      	ldr	r3, [r3, #0]
 80a1432:	69db      	ldr	r3, [r3, #28]
 80a1434:	9301      	str	r3, [sp, #4]
 80a1436:	bd08      	pop	{r3, pc}
 80a1438:	080601d8 	.word	0x080601d8

080a143c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a143c:	b508      	push	{r3, lr}
 80a143e:	4b02      	ldr	r3, [pc, #8]	; (80a1448 <HAL_USB_USART_Flush_Data+0xc>)
 80a1440:	681b      	ldr	r3, [r3, #0]
 80a1442:	6a1b      	ldr	r3, [r3, #32]
 80a1444:	9301      	str	r3, [sp, #4]
 80a1446:	bd08      	pop	{r3, pc}
 80a1448:	080601d8 	.word	0x080601d8

080a144c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a144c:	b508      	push	{r3, lr}
 80a144e:	4b02      	ldr	r3, [pc, #8]	; (80a1458 <HAL_USB_USART_Is_Enabled+0xc>)
 80a1450:	681b      	ldr	r3, [r3, #0]
 80a1452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1454:	9301      	str	r3, [sp, #4]
 80a1456:	bd08      	pop	{r3, pc}
 80a1458:	080601d8 	.word	0x080601d8

080a145c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a145c:	b508      	push	{r3, lr}
 80a145e:	4b02      	ldr	r3, [pc, #8]	; (80a1468 <inet_gethostbyname+0xc>)
 80a1460:	681b      	ldr	r3, [r3, #0]
 80a1462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1464:	9301      	str	r3, [sp, #4]
 80a1466:	bd08      	pop	{r3, pc}
 80a1468:	080601c0 	.word	0x080601c0

080a146c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a146c:	b508      	push	{r3, lr}
 80a146e:	4b02      	ldr	r3, [pc, #8]	; (80a1478 <set_system_mode+0xc>)
 80a1470:	681b      	ldr	r3, [r3, #0]
 80a1472:	685b      	ldr	r3, [r3, #4]
 80a1474:	9301      	str	r3, [sp, #4]
 80a1476:	bd08      	pop	{r3, pc}
 80a1478:	080601a4 	.word	0x080601a4

080a147c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a147c:	b508      	push	{r3, lr}
 80a147e:	4b02      	ldr	r3, [pc, #8]	; (80a1488 <system_thread_set_state+0xc>)
 80a1480:	681b      	ldr	r3, [r3, #0]
 80a1482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1484:	9301      	str	r3, [sp, #4]
 80a1486:	bd08      	pop	{r3, pc}
 80a1488:	080601a4 	.word	0x080601a4

080a148c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a148c:	b508      	push	{r3, lr}
 80a148e:	4b03      	ldr	r3, [pc, #12]	; (80a149c <system_ctrl_set_app_request_handler+0x10>)
 80a1490:	681b      	ldr	r3, [r3, #0]
 80a1492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1496:	9301      	str	r3, [sp, #4]
 80a1498:	bd08      	pop	{r3, pc}
 80a149a:	0000      	.short	0x0000
 80a149c:	080601a4 	.word	0x080601a4

080a14a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b03      	ldr	r3, [pc, #12]	; (80a14b0 <system_ctrl_set_result+0x10>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a14aa:	9301      	str	r3, [sp, #4]
 80a14ac:	bd08      	pop	{r3, pc}
 80a14ae:	0000      	.short	0x0000
 80a14b0:	080601a4 	.word	0x080601a4

080a14b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601cc 	.word	0x080601cc

080a14c4 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <network_config+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	681b      	ldr	r3, [r3, #0]
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601c8 	.word	0x080601c8

080a14d4 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <network_connect+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	685b      	ldr	r3, [r3, #4]
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	080601c8 	.word	0x080601c8

080a14e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <network_connecting+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	689b      	ldr	r3, [r3, #8]
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	080601c8 	.word	0x080601c8

080a14f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <network_disconnect+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	68db      	ldr	r3, [r3, #12]
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	080601c8 	.word	0x080601c8

080a1504 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <network_ready+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	691b      	ldr	r3, [r3, #16]
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601c8 	.word	0x080601c8

080a1514 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <network_on+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	695b      	ldr	r3, [r3, #20]
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601c8 	.word	0x080601c8

080a1524 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <network_off+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	699b      	ldr	r3, [r3, #24]
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601c8 	.word	0x080601c8

080a1534 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <network_listen+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	69db      	ldr	r3, [r3, #28]
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080601c8 	.word	0x080601c8

080a1544 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <network_listening+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	6a1b      	ldr	r3, [r3, #32]
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601c8 	.word	0x080601c8

080a1554 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <network_set_listen_timeout+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601c8 	.word	0x080601c8

080a1564 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <network_get_listen_timeout+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	080601c8 	.word	0x080601c8

080a1574 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b02      	ldr	r3, [pc, #8]	; (80a1580 <network_set_hostname+0xc>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a157c:	9301      	str	r3, [sp, #4]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	080601c8 	.word	0x080601c8

080a1584 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <network_get_hostname+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	080601c8 	.word	0x080601c8

080a1594 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <malloc+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	681b      	ldr	r3, [r3, #0]
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601a0 	.word	0x080601a0

080a15a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b02      	ldr	r3, [pc, #8]	; (80a15b0 <free+0xc>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	685b      	ldr	r3, [r3, #4]
 80a15ac:	9301      	str	r3, [sp, #4]
 80a15ae:	bd08      	pop	{r3, pc}
 80a15b0:	080601a0 	.word	0x080601a0

080a15b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a15b4:	b508      	push	{r3, lr}
 80a15b6:	4b02      	ldr	r3, [pc, #8]	; (80a15c0 <realloc+0xc>)
 80a15b8:	681b      	ldr	r3, [r3, #0]
 80a15ba:	689b      	ldr	r3, [r3, #8]
 80a15bc:	9301      	str	r3, [sp, #4]
 80a15be:	bd08      	pop	{r3, pc}
 80a15c0:	080601a0 	.word	0x080601a0

080a15c4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a15c4:	b508      	push	{r3, lr}
 80a15c6:	4b02      	ldr	r3, [pc, #8]	; (80a15d0 <abort+0xc>)
 80a15c8:	681b      	ldr	r3, [r3, #0]
 80a15ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a15cc:	9301      	str	r3, [sp, #4]
 80a15ce:	bd08      	pop	{r3, pc}
 80a15d0:	080601a0 	.word	0x080601a0

080a15d4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a15d4:	4770      	bx	lr

080a15d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a15d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15d8:	4606      	mov	r6, r0
 80a15da:	4615      	mov	r5, r2
 80a15dc:	460c      	mov	r4, r1
 80a15de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a15e0:	42bc      	cmp	r4, r7
 80a15e2:	d006      	beq.n	80a15f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a15e4:	6833      	ldr	r3, [r6, #0]
 80a15e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a15ea:	689b      	ldr	r3, [r3, #8]
 80a15ec:	4630      	mov	r0, r6
 80a15ee:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a15f0:	e7f6      	b.n	80a15e0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a15f2:	4628      	mov	r0, r5
 80a15f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a15f6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a15f6:	2200      	movs	r2, #0
 80a15f8:	7c00      	ldrb	r0, [r0, #16]
 80a15fa:	f7ff be35 	b.w	80a1268 <HAL_I2C_Write_Data>

080a15fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a15fe:	2100      	movs	r1, #0
 80a1600:	7c00      	ldrb	r0, [r0, #16]
 80a1602:	f7ff be39 	b.w	80a1278 <HAL_I2C_Available_Data>

080a1606 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1606:	2100      	movs	r1, #0
 80a1608:	7c00      	ldrb	r0, [r0, #16]
 80a160a:	f7ff be3d 	b.w	80a1288 <HAL_I2C_Read_Data>

080a160e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a160e:	2100      	movs	r1, #0
 80a1610:	7c00      	ldrb	r0, [r0, #16]
 80a1612:	f7ff be41 	b.w	80a1298 <HAL_I2C_Peek_Data>

080a1616 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1616:	2100      	movs	r1, #0
 80a1618:	7c00      	ldrb	r0, [r0, #16]
 80a161a:	f7ff be45 	b.w	80a12a8 <HAL_I2C_Flush_Data>

080a161e <_ZN7TwoWireD0Ev>:
 80a161e:	b510      	push	{r4, lr}
 80a1620:	4604      	mov	r4, r0
 80a1622:	2114      	movs	r1, #20
 80a1624:	f000 ff7d 	bl	80a2522 <_ZdlPvj>
 80a1628:	4620      	mov	r0, r4
 80a162a:	bd10      	pop	{r4, pc}

080a162c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a162c:	b510      	push	{r4, lr}
 80a162e:	4604      	mov	r4, r0
 80a1630:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1636:	60a3      	str	r3, [r4, #8]
 80a1638:	4b04      	ldr	r3, [pc, #16]	; (80a164c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a163a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a163c:	7420      	strb	r0, [r4, #16]
 80a163e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1640:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1642:	f7ff fe41 	bl	80a12c8 <HAL_I2C_Init>

}
 80a1646:	4620      	mov	r0, r4
 80a1648:	bd10      	pop	{r4, pc}
 80a164a:	bf00      	nop
 80a164c:	080a3188 	.word	0x080a3188

080a1650 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1650:	2100      	movs	r1, #0
 80a1652:	7c00      	ldrb	r0, [r0, #16]
 80a1654:	f7ff be30 	b.w	80a12b8 <HAL_I2C_Is_Enabled>

080a1658 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1658:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a165a:	b510      	push	{r4, lr}
 80a165c:	b90a      	cbnz	r2, 80a1662 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a165e:	f000 ff62 	bl	80a2526 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1662:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a1664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1668:	4718      	bx	r3

080a166a <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a166a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a166c:	2300      	movs	r3, #0
 80a166e:	6083      	str	r3, [r0, #8]
 80a1670:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1672:	4604      	mov	r4, r0
 80a1674:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1676:	b12b      	cbz	r3, 80a1684 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1678:	2202      	movs	r2, #2
 80a167a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a167c:	68eb      	ldr	r3, [r5, #12]
 80a167e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1680:	68ab      	ldr	r3, [r5, #8]
 80a1682:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1684:	4620      	mov	r0, r4
 80a1686:	bd38      	pop	{r3, r4, r5, pc}

080a1688 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a1688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80a168a:	4b12      	ldr	r3, [pc, #72]	; (80a16d4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a168c:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a168e:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a1690:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80a1692:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a1694:	f7fe fd03 	bl	80a009e <_Znwj>
 80a1698:	4605      	mov	r5, r0
 80a169a:	b110      	cbz	r0, 80a16a2 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 80a169c:	4631      	mov	r1, r6
 80a169e:	f7ff ffe4 	bl	80a166a <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 80a16a2:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a16a4:	4620      	mov	r0, r4
 80a16a6:	aa02      	add	r2, sp, #8
 80a16a8:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a16aa:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 80a16ac:	9302      	str	r3, [sp, #8]
 80a16ae:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a16b0:	f7ff fdd2 	bl	80a1258 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 80a16b4:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a16b6:	1c05      	adds	r5, r0, #0
 80a16b8:	bf18      	it	ne
 80a16ba:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 80a16bc:	b134      	cbz	r4, 80a16cc <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a16be:	4620      	mov	r0, r4
 80a16c0:	f7fe ffc8 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
 80a16c4:	2110      	movs	r1, #16
 80a16c6:	4620      	mov	r0, r4
 80a16c8:	f000 ff2b 	bl	80a2522 <_ZdlPvj>
    return ok;
}
 80a16cc:	4628      	mov	r0, r5
 80a16ce:	b004      	add	sp, #16
 80a16d0:	bd70      	pop	{r4, r5, r6, pc}
 80a16d2:	bf00      	nop
 80a16d4:	080a1659 	.word	0x080a1659

080a16d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a16d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16da:	460f      	mov	r7, r1
 80a16dc:	f100 0608 	add.w	r6, r0, #8
 80a16e0:	1d05      	adds	r5, r0, #4
 80a16e2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a16e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a16e8:	220a      	movs	r2, #10
 80a16ea:	4638      	mov	r0, r7
 80a16ec:	f000 f94f 	bl	80a198e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a16f0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a16f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a16f4:	d007      	beq.n	80a1706 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a16f6:	2c00      	cmp	r4, #0
 80a16f8:	d0f4      	beq.n	80a16e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a16fa:	212e      	movs	r1, #46	; 0x2e
 80a16fc:	4638      	mov	r0, r7
 80a16fe:	f000 f8f3 	bl	80a18e8 <_ZN5Print5printEc>
 80a1702:	4404      	add	r4, r0
 80a1704:	e7ee      	b.n	80a16e4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1706:	4620      	mov	r0, r4
 80a1708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a170c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a170c:	b510      	push	{r4, lr}
 80a170e:	4604      	mov	r4, r0
 80a1710:	4b04      	ldr	r3, [pc, #16]	; (80a1724 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1712:	2211      	movs	r2, #17
 80a1714:	f840 3b04 	str.w	r3, [r0], #4
 80a1718:	2100      	movs	r1, #0
 80a171a:	f001 fce2 	bl	80a30e2 <memset>
{
    clear();
}
 80a171e:	4620      	mov	r0, r4
 80a1720:	bd10      	pop	{r4, pc}
 80a1722:	bf00      	nop
 80a1724:	080a31b0 	.word	0x080a31b0

080a1728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1728:	4603      	mov	r3, r0
 80a172a:	4a07      	ldr	r2, [pc, #28]	; (80a1748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a172c:	b510      	push	{r4, lr}
 80a172e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1732:	f101 0210 	add.w	r2, r1, #16
 80a1736:	f851 4b04 	ldr.w	r4, [r1], #4
 80a173a:	4291      	cmp	r1, r2
 80a173c:	f843 4b04 	str.w	r4, [r3], #4
 80a1740:	d1f9      	bne.n	80a1736 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1742:	780a      	ldrb	r2, [r1, #0]
 80a1744:	701a      	strb	r2, [r3, #0]
}
 80a1746:	bd10      	pop	{r4, pc}
 80a1748:	080a31b0 	.word	0x080a31b0

080a174c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a174c:	4a02      	ldr	r2, [pc, #8]	; (80a1758 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a174e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1750:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1752:	2204      	movs	r2, #4
 80a1754:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1756:	4770      	bx	lr
 80a1758:	080a31b0 	.word	0x080a31b0

080a175c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a175c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a175e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1762:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1766:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a176a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a176e:	2304      	movs	r3, #4
 80a1770:	6041      	str	r1, [r0, #4]
 80a1772:	7503      	strb	r3, [r0, #20]
 80a1774:	bd10      	pop	{r4, pc}
	...

080a1778 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a177a:	4d04      	ldr	r5, [pc, #16]	; (80a178c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a177c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a177e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1782:	9500      	str	r5, [sp, #0]
 80a1784:	f7ff ffea 	bl	80a175c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1788:	b003      	add	sp, #12
 80a178a:	bd30      	pop	{r4, r5, pc}
 80a178c:	080a31b0 	.word	0x080a31b0

080a1790 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1790:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1792:	780d      	ldrb	r5, [r1, #0]
 80a1794:	788b      	ldrb	r3, [r1, #2]
 80a1796:	784a      	ldrb	r2, [r1, #1]
 80a1798:	78c9      	ldrb	r1, [r1, #3]
 80a179a:	9100      	str	r1, [sp, #0]
 80a179c:	4629      	mov	r1, r5
 80a179e:	f7ff ffdd 	bl	80a175c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a17a2:	b003      	add	sp, #12
 80a17a4:	bd30      	pop	{r4, r5, pc}
	...

080a17a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a17a8:	4a01      	ldr	r2, [pc, #4]	; (80a17b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a17aa:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a17ac:	601a      	str	r2, [r3, #0]
 80a17ae:	4770      	bx	lr
 80a17b0:	080a3232 	.word	0x080a3232
 80a17b4:	200002c0 	.word	0x200002c0

080a17b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a17b8:	2300      	movs	r3, #0
 80a17ba:	461a      	mov	r2, r3
 80a17bc:	6840      	ldr	r0, [r0, #4]
 80a17be:	f7ff be89 	b.w	80a14d4 <network_connect>

080a17c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a17c2:	2200      	movs	r2, #0
 80a17c4:	2102      	movs	r1, #2
 80a17c6:	6840      	ldr	r0, [r0, #4]
 80a17c8:	f7ff be94 	b.w	80a14f4 <network_disconnect>

080a17cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a17cc:	2200      	movs	r2, #0
 80a17ce:	4611      	mov	r1, r2
 80a17d0:	6840      	ldr	r0, [r0, #4]
 80a17d2:	f7ff be87 	b.w	80a14e4 <network_connecting>

080a17d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a17d6:	2200      	movs	r2, #0
 80a17d8:	4611      	mov	r1, r2
 80a17da:	6840      	ldr	r0, [r0, #4]
 80a17dc:	f7ff be92 	b.w	80a1504 <network_ready>

080a17e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a17e0:	2300      	movs	r3, #0
 80a17e2:	461a      	mov	r2, r3
 80a17e4:	4619      	mov	r1, r3
 80a17e6:	6840      	ldr	r0, [r0, #4]
 80a17e8:	f7ff be94 	b.w	80a1514 <network_on>

080a17ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a17ec:	2300      	movs	r3, #0
 80a17ee:	461a      	mov	r2, r3
 80a17f0:	4619      	mov	r1, r3
 80a17f2:	6840      	ldr	r0, [r0, #4]
 80a17f4:	f7ff be96 	b.w	80a1524 <network_off>

080a17f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a17f8:	2200      	movs	r2, #0
 80a17fa:	f081 0101 	eor.w	r1, r1, #1
 80a17fe:	6840      	ldr	r0, [r0, #4]
 80a1800:	f7ff be98 	b.w	80a1534 <network_listen>

080a1804 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1804:	2200      	movs	r2, #0
 80a1806:	6840      	ldr	r0, [r0, #4]
 80a1808:	f7ff bea4 	b.w	80a1554 <network_set_listen_timeout>

080a180c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a180c:	2200      	movs	r2, #0
 80a180e:	4611      	mov	r1, r2
 80a1810:	6840      	ldr	r0, [r0, #4]
 80a1812:	f7ff bea7 	b.w	80a1564 <network_get_listen_timeout>

080a1816 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1816:	2200      	movs	r2, #0
 80a1818:	4611      	mov	r1, r2
 80a181a:	6840      	ldr	r0, [r0, #4]
 80a181c:	f7ff be92 	b.w	80a1544 <network_listening>

080a1820 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1820:	b570      	push	{r4, r5, r6, lr}
 80a1822:	4616      	mov	r6, r2
 80a1824:	b08e      	sub	sp, #56	; 0x38
 80a1826:	4604      	mov	r4, r0
    IPAddress addr;
 80a1828:	a808      	add	r0, sp, #32
 80a182a:	f7ff ff6f 	bl	80a170c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a182e:	2211      	movs	r2, #17
 80a1830:	2100      	movs	r1, #0
 80a1832:	a803      	add	r0, sp, #12
 80a1834:	f001 fc55 	bl	80a30e2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1838:	4630      	mov	r0, r6
 80a183a:	f001 fc83 	bl	80a3144 <strlen>
 80a183e:	2500      	movs	r5, #0
 80a1840:	4b0a      	ldr	r3, [pc, #40]	; (80a186c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1842:	9500      	str	r5, [sp, #0]
 80a1844:	b281      	uxth	r1, r0
 80a1846:	685b      	ldr	r3, [r3, #4]
 80a1848:	aa03      	add	r2, sp, #12
 80a184a:	4630      	mov	r0, r6
 80a184c:	f7ff fe06 	bl	80a145c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1850:	b120      	cbz	r0, 80a185c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1852:	4629      	mov	r1, r5
 80a1854:	4620      	mov	r0, r4
 80a1856:	f7ff ff79 	bl	80a174c <_ZN9IPAddressC1Em>
 80a185a:	e003      	b.n	80a1864 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a185c:	a903      	add	r1, sp, #12
 80a185e:	4620      	mov	r0, r4
 80a1860:	f7ff ff62 	bl	80a1728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1864:	4620      	mov	r0, r4
 80a1866:	b00e      	add	sp, #56	; 0x38
 80a1868:	bd70      	pop	{r4, r5, r6, pc}
 80a186a:	bf00      	nop
 80a186c:	20000744 	.word	0x20000744

080a1870 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1870:	4b03      	ldr	r3, [pc, #12]	; (80a1880 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1872:	4a04      	ldr	r2, [pc, #16]	; (80a1884 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1874:	2804      	cmp	r0, #4
 80a1876:	bf0c      	ite	eq
 80a1878:	4610      	moveq	r0, r2
 80a187a:	4618      	movne	r0, r3
 80a187c:	4770      	bx	lr
 80a187e:	bf00      	nop
 80a1880:	200002c4 	.word	0x200002c4
 80a1884:	20000744 	.word	0x20000744

080a1888 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1888:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a188a:	4a03      	ldr	r2, [pc, #12]	; (80a1898 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a188c:	601a      	str	r2, [r3, #0]
 80a188e:	2200      	movs	r2, #0
 80a1890:	605a      	str	r2, [r3, #4]
 80a1892:	4770      	bx	lr
 80a1894:	200002c4 	.word	0x200002c4
 80a1898:	080a32a8 	.word	0x080a32a8

080a189c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a189e:	4606      	mov	r6, r0
 80a18a0:	460d      	mov	r5, r1
 80a18a2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a18a4:	2400      	movs	r4, #0
  while (size--) {
 80a18a6:	42bd      	cmp	r5, r7
 80a18a8:	d00c      	beq.n	80a18c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a18aa:	6833      	ldr	r3, [r6, #0]
 80a18ac:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a18b0:	689b      	ldr	r3, [r3, #8]
 80a18b2:	4630      	mov	r0, r6
 80a18b4:	4798      	blx	r3
     if (chunk>=0)
 80a18b6:	2800      	cmp	r0, #0
 80a18b8:	db01      	blt.n	80a18be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a18ba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a18bc:	e7f3      	b.n	80a18a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a18be:	2c00      	cmp	r4, #0
 80a18c0:	bf08      	it	eq
 80a18c2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a18c4:	4620      	mov	r0, r4
 80a18c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a18c8:	b570      	push	{r4, r5, r6, lr}
 80a18ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a18cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a18ce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a18d0:	b149      	cbz	r1, 80a18e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a18d2:	f001 fc37 	bl	80a3144 <strlen>
 80a18d6:	682b      	ldr	r3, [r5, #0]
 80a18d8:	4602      	mov	r2, r0
 80a18da:	4621      	mov	r1, r4
 80a18dc:	4628      	mov	r0, r5
    }
 80a18de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a18e2:	68db      	ldr	r3, [r3, #12]
 80a18e4:	4718      	bx	r3
    }
 80a18e6:	bd70      	pop	{r4, r5, r6, pc}

080a18e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a18e8:	6803      	ldr	r3, [r0, #0]
 80a18ea:	689b      	ldr	r3, [r3, #8]
 80a18ec:	4718      	bx	r3

080a18ee <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a18ee:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a18f0:	680a      	ldr	r2, [r1, #0]
 80a18f2:	4601      	mov	r1, r0
 80a18f4:	6812      	ldr	r2, [r2, #0]
 80a18f6:	4618      	mov	r0, r3
 80a18f8:	4710      	bx	r2

080a18fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a18fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a18fc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a18fe:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1900:	f7ff fff2 	bl	80a18e8 <_ZN5Print5printEc>
  n += print('\n');
 80a1904:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1906:	4604      	mov	r4, r0
  n += print('\n');
 80a1908:	4628      	mov	r0, r5
 80a190a:	f7ff ffed 	bl	80a18e8 <_ZN5Print5printEc>
  return n;
}
 80a190e:	4420      	add	r0, r4
 80a1910:	bd38      	pop	{r3, r4, r5, pc}

080a1912 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1912:	b538      	push	{r3, r4, r5, lr}
 80a1914:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1916:	f7ff ffd7 	bl	80a18c8 <_ZN5Print5writeEPKc>
 80a191a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a191c:	4628      	mov	r0, r5
 80a191e:	f7ff ffec 	bl	80a18fa <_ZN5Print7printlnEv>
  return n;
}
 80a1922:	4420      	add	r0, r4
 80a1924:	bd38      	pop	{r3, r4, r5, pc}

080a1926 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a1926:	b538      	push	{r3, r4, r5, lr}
 80a1928:	4605      	mov	r5, r0
   size_t n = print(x);
 80a192a:	f7ff ffe0 	bl	80a18ee <_ZN5Print5printERK9Printable>
 80a192e:	4604      	mov	r4, r0
   n += println();
 80a1930:	4628      	mov	r0, r5
 80a1932:	f7ff ffe2 	bl	80a18fa <_ZN5Print7printlnEv>
   return n;
 }
 80a1936:	4420      	add	r0, r4
 80a1938:	bd38      	pop	{r3, r4, r5, pc}

080a193a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a193a:	2a01      	cmp	r2, #1
 80a193c:	bf98      	it	ls
 80a193e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1940:	b530      	push	{r4, r5, lr}
 80a1942:	460b      	mov	r3, r1
 80a1944:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1946:	2100      	movs	r1, #0
 80a1948:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a194c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1950:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1954:	fb05 3312 	mls	r3, r5, r2, r3
 80a1958:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a195a:	2b09      	cmp	r3, #9
 80a195c:	bf94      	ite	ls
 80a195e:	3330      	addls	r3, #48	; 0x30
 80a1960:	3337      	addhi	r3, #55	; 0x37
 80a1962:	b2db      	uxtb	r3, r3
 80a1964:	4621      	mov	r1, r4
 80a1966:	f804 3901 	strb.w	r3, [r4], #-1
 80a196a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a196c:	2d00      	cmp	r5, #0
 80a196e:	d1ef      	bne.n	80a1950 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1970:	f7ff ffaa 	bl	80a18c8 <_ZN5Print5writeEPKc>
}
 80a1974:	b00b      	add	sp, #44	; 0x2c
 80a1976:	bd30      	pop	{r4, r5, pc}

080a1978 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1978:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a197a:	b922      	cbnz	r2, 80a1986 <_ZN5Print5printEmi+0xe>
 80a197c:	6803      	ldr	r3, [r0, #0]
 80a197e:	b2c9      	uxtb	r1, r1
 80a1980:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1982:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1984:	4718      	bx	r3
  else return printNumber(n, base);
 80a1986:	b2d2      	uxtb	r2, r2
}
 80a1988:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a198a:	f7ff bfd6 	b.w	80a193a <_ZN5Print11printNumberEmh>

080a198e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a198e:	f7ff bff3 	b.w	80a1978 <_ZN5Print5printEmi>

080a1992 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a1992:	b538      	push	{r3, r4, r5, lr}
 80a1994:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a1996:	f7ff ffef 	bl	80a1978 <_ZN5Print5printEmi>
 80a199a:	4604      	mov	r4, r0
  n += println();
 80a199c:	4628      	mov	r0, r5
 80a199e:	f7ff ffac 	bl	80a18fa <_ZN5Print7printlnEv>
  return n;
}
 80a19a2:	4420      	add	r0, r4
 80a19a4:	bd38      	pop	{r3, r4, r5, pc}

080a19a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a19a6:	b510      	push	{r4, lr}
 80a19a8:	4604      	mov	r4, r0
 80a19aa:	f7fe fe53 	bl	80a0654 <_ZNSt14_Function_baseD1Ev>
 80a19ae:	4620      	mov	r0, r4
 80a19b0:	bd10      	pop	{r4, pc}
	...

080a19b4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19b4:	4803      	ldr	r0, [pc, #12]	; (80a19c4 <_GLOBAL__sub_I_RGB+0x10>)
 80a19b6:	2300      	movs	r3, #0
 80a19b8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a19ba:	4a03      	ldr	r2, [pc, #12]	; (80a19c8 <_GLOBAL__sub_I_RGB+0x14>)
 80a19bc:	4903      	ldr	r1, [pc, #12]	; (80a19cc <_GLOBAL__sub_I_RGB+0x18>)
 80a19be:	f000 bdab 	b.w	80a2518 <__aeabi_atexit>
 80a19c2:	bf00      	nop
 80a19c4:	200002cc 	.word	0x200002cc
 80a19c8:	20000070 	.word	0x20000070
 80a19cc:	080a19a7 	.word	0x080a19a7

080a19d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a19d0:	4770      	bx	lr

080a19d2 <_ZN8SPIClassD0Ev>:
 80a19d2:	b510      	push	{r4, lr}
 80a19d4:	4604      	mov	r4, r0
 80a19d6:	2110      	movs	r1, #16
 80a19d8:	f000 fda3 	bl	80a2522 <_ZdlPvj>
 80a19dc:	4620      	mov	r0, r4
 80a19de:	bd10      	pop	{r4, pc}

080a19e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a19e0:	b570      	push	{r4, r5, r6, lr}
 80a19e2:	4604      	mov	r4, r0
 80a19e4:	460e      	mov	r6, r1
 80a19e6:	4b07      	ldr	r3, [pc, #28]	; (80a1a04 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a19e8:	2500      	movs	r5, #0
 80a19ea:	6003      	str	r3, [r0, #0]
 80a19ec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a19f0:	f7ff fbf2 	bl	80a11d8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a19f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a19f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a19f8:	f7ff fca0 	bl	80a133c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a19fc:	60a5      	str	r5, [r4, #8]
}
 80a19fe:	4620      	mov	r0, r4
 80a1a00:	bd70      	pop	{r4, r5, r6, pc}
 80a1a02:	bf00      	nop
 80a1a04:	080a32dc 	.word	0x080a32dc

080a1a08 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1a08:	7900      	ldrb	r0, [r0, #4]
 80a1a0a:	f7ff bc9f 	b.w	80a134c <HAL_SPI_Is_Enabled>

080a1a0e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1a0e:	b510      	push	{r4, lr}
 80a1a10:	4604      	mov	r4, r0
{
	free(buffer);
 80a1a12:	6800      	ldr	r0, [r0, #0]
 80a1a14:	f7ff fdc6 	bl	80a15a4 <free>
}
 80a1a18:	4620      	mov	r0, r4
 80a1a1a:	bd10      	pop	{r4, pc}

080a1a1c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1a1c:	b510      	push	{r4, lr}
 80a1a1e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1a20:	6800      	ldr	r0, [r0, #0]
 80a1a22:	b108      	cbz	r0, 80a1a28 <_ZN6String10invalidateEv+0xc>
 80a1a24:	f7ff fdbe 	bl	80a15a4 <free>
	buffer = NULL;
 80a1a28:	2300      	movs	r3, #0
 80a1a2a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1a2c:	60a3      	str	r3, [r4, #8]
 80a1a2e:	6063      	str	r3, [r4, #4]
 80a1a30:	bd10      	pop	{r4, pc}

080a1a32 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1a32:	b538      	push	{r3, r4, r5, lr}
 80a1a34:	4604      	mov	r4, r0
 80a1a36:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1a38:	6800      	ldr	r0, [r0, #0]
 80a1a3a:	3101      	adds	r1, #1
 80a1a3c:	f7ff fdba 	bl	80a15b4 <realloc>
	if (newbuffer) {
 80a1a40:	b110      	cbz	r0, 80a1a48 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1a42:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1a46:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1a48:	bd38      	pop	{r3, r4, r5, pc}

080a1a4a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1a4a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1a4c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1a4e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1a50:	b113      	cbz	r3, 80a1a58 <_ZN6String7reserveEj+0xe>
 80a1a52:	6843      	ldr	r3, [r0, #4]
 80a1a54:	428b      	cmp	r3, r1
 80a1a56:	d207      	bcs.n	80a1a68 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1a58:	4620      	mov	r0, r4
 80a1a5a:	f7ff ffea 	bl	80a1a32 <_ZN6String12changeBufferEj>
 80a1a5e:	b120      	cbz	r0, 80a1a6a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1a60:	68a3      	ldr	r3, [r4, #8]
 80a1a62:	b90b      	cbnz	r3, 80a1a68 <_ZN6String7reserveEj+0x1e>
 80a1a64:	6822      	ldr	r2, [r4, #0]
 80a1a66:	7013      	strb	r3, [r2, #0]
 80a1a68:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1a6a:	bd10      	pop	{r4, pc}

080a1a6c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1a6c:	b570      	push	{r4, r5, r6, lr}
 80a1a6e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1a70:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1a72:	4604      	mov	r4, r0
 80a1a74:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1a76:	f7ff ffe8 	bl	80a1a4a <_ZN6String7reserveEj>
 80a1a7a:	b918      	cbnz	r0, 80a1a84 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1a7c:	4620      	mov	r0, r4
 80a1a7e:	f7ff ffcd 	bl	80a1a1c <_ZN6String10invalidateEv>
		return *this;
 80a1a82:	e009      	b.n	80a1a98 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1a84:	462a      	mov	r2, r5
 80a1a86:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1a88:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1a8a:	6820      	ldr	r0, [r4, #0]
 80a1a8c:	f001 fb1e 	bl	80a30cc <memcpy>
	buffer[len] = 0;
 80a1a90:	6822      	ldr	r2, [r4, #0]
 80a1a92:	68a3      	ldr	r3, [r4, #8]
 80a1a94:	2100      	movs	r1, #0
 80a1a96:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1a98:	4620      	mov	r0, r4
 80a1a9a:	bd70      	pop	{r4, r5, r6, pc}

080a1a9c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1a9c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1a9e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1aa0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1aa2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1aa4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1aa6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1aa8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1aaa:	460d      	mov	r5, r1
 80a1aac:	b139      	cbz	r1, 80a1abe <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1aae:	4608      	mov	r0, r1
 80a1ab0:	f001 fb48 	bl	80a3144 <strlen>
 80a1ab4:	4629      	mov	r1, r5
 80a1ab6:	4602      	mov	r2, r0
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	f7ff ffd7 	bl	80a1a6c <_ZN6String4copyEPKcj>
}
 80a1abe:	4620      	mov	r0, r4
 80a1ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1ac4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1ac8:	4b03      	ldr	r3, [pc, #12]	; (80a1ad8 <_GLOBAL__sub_I_System+0x14>)
 80a1aca:	2000      	movs	r0, #0
 80a1acc:	7018      	strb	r0, [r3, #0]
 80a1ace:	8058      	strh	r0, [r3, #2]
 80a1ad0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1ad2:	f7ff bccb 	b.w	80a146c <set_system_mode>
 80a1ad6:	bf00      	nop
 80a1ad8:	200002dc 	.word	0x200002dc

080a1adc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1adc:	4b02      	ldr	r3, [pc, #8]	; (80a1ae8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1ade:	681a      	ldr	r2, [r3, #0]
 80a1ae0:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1ae2:	601a      	str	r2, [r3, #0]
 80a1ae4:	4770      	bx	lr
 80a1ae6:	bf00      	nop
 80a1ae8:	20000008 	.word	0x20000008
 80a1aec:	200002e4 	.word	0x200002e4

080a1af0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1af0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1af2:	6804      	ldr	r4, [r0, #0]
 80a1af4:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1af6:	46a4      	mov	ip, r4
    }
 80a1af8:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1afa:	4760      	bx	ip

080a1afc <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1afc:	6803      	ldr	r3, [r0, #0]
 80a1afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1b00:	4718      	bx	r3

080a1b02 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1b02:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1b04:	4770      	bx	lr

080a1b06 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1b06:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1b08:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1b0a:	1a10      	subs	r0, r2, r0
 80a1b0c:	4770      	bx	lr

080a1b0e <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1b0e:	b513      	push	{r0, r1, r4, lr}
 80a1b10:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1b12:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1b14:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1b18:	68d4      	ldr	r4, [r2, #12]
 80a1b1a:	4619      	mov	r1, r3
 80a1b1c:	2201      	movs	r2, #1
 80a1b1e:	47a0      	blx	r4
}
 80a1b20:	b002      	add	sp, #8
 80a1b22:	bd10      	pop	{r4, pc}

080a1b24 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1b24:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1b26:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1b28:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1b2a:	691b      	ldr	r3, [r3, #16]
 80a1b2c:	4798      	blx	r3
 80a1b2e:	b128      	cbz	r0, 80a1b3c <_ZN3UDP4readEv+0x18>
 80a1b30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1b32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1b34:	1c59      	adds	r1, r3, #1
 80a1b36:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1b38:	5cd0      	ldrb	r0, [r2, r3]
 80a1b3a:	bd10      	pop	{r4, pc}
 80a1b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1b40:	bd10      	pop	{r4, pc}

080a1b42 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1b42:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1b44:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1b46:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1b48:	691b      	ldr	r3, [r3, #16]
 80a1b4a:	4798      	blx	r3
 80a1b4c:	b118      	cbz	r0, 80a1b56 <_ZN3UDP4peekEv+0x14>
 80a1b4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1b50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1b52:	5cd0      	ldrb	r0, [r2, r3]
 80a1b54:	bd10      	pop	{r4, pc}
 80a1b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1b5a:	bd10      	pop	{r4, pc}

080a1b5c <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1b5c:	4770      	bx	lr

080a1b5e <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1b5e:	4603      	mov	r3, r0
 80a1b60:	4608      	mov	r0, r1
 80a1b62:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1b64:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1b66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1b68:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1b6a:	6803      	ldr	r3, [r0, #0]
 80a1b6c:	1a52      	subs	r2, r2, r1
 80a1b6e:	68db      	ldr	r3, [r3, #12]
 80a1b70:	4421      	add	r1, r4
}
 80a1b72:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1b74:	4718      	bx	r3

080a1b76 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1b76:	f1a0 0010 	sub.w	r0, r0, #16
 80a1b7a:	f7ff bff0 	b.w	80a1b5e <_ZNK3UDP7printToER5Print>

080a1b7e <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1b80:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1b82:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1b84:	460f      	mov	r7, r1
 80a1b86:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1b88:	f7ff fe72 	bl	80a1870 <_ZN5spark12NetworkClass4fromEm>
 80a1b8c:	6803      	ldr	r3, [r0, #0]
 80a1b8e:	68db      	ldr	r3, [r3, #12]
 80a1b90:	4798      	blx	r3
 80a1b92:	b1b8      	cbz	r0, 80a1bc4 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1b94:	2102      	movs	r1, #2
 80a1b96:	463b      	mov	r3, r7
 80a1b98:	2211      	movs	r2, #17
 80a1b9a:	4608      	mov	r0, r1
 80a1b9c:	9600      	str	r6, [sp, #0]
 80a1b9e:	f7ff fba5 	bl	80a12ec <socket_create>
 80a1ba2:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1ba4:	f7ff fb9a 	bl	80a12dc <socket_handle_valid>
 80a1ba8:	4604      	mov	r4, r0
 80a1baa:	b130      	cbz	r0, 80a1bba <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1bac:	2300      	movs	r3, #0
 80a1bae:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1bb0:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1bb2:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1bb4:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1bb6:	2001      	movs	r0, #1
 80a1bb8:	e004      	b.n	80a1bc4 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a1bba:	682b      	ldr	r3, [r5, #0]
 80a1bbc:	4628      	mov	r0, r5
 80a1bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1bc0:	4798      	blx	r3
            bound = false;
 80a1bc2:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1bc4:	b003      	add	sp, #12
 80a1bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1bc8 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1bc8:	b538      	push	{r3, r4, r5, lr}
 80a1bca:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1bcc:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1bce:	f7ff fbad 	bl	80a132c <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1bd2:	4285      	cmp	r5, r0
 80a1bd4:	d002      	beq.n	80a1bdc <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1bd6:	6960      	ldr	r0, [r4, #20]
 80a1bd8:	f7ff fba0 	bl	80a131c <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1bdc:	f7ff fba6 	bl	80a132c <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1be0:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1be2:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1be4:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1be6:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1be8:	bd38      	pop	{r3, r4, r5, pc}

080a1bea <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1bea:	b530      	push	{r4, r5, lr}
 80a1bec:	b087      	sub	sp, #28
 80a1bee:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1bf2:	2502      	movs	r5, #2
 80a1bf4:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1bf8:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1bfc:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1bfe:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1c00:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1c04:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1c08:	799c      	ldrb	r4, [r3, #6]
 80a1c0a:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1c0e:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1c10:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1c12:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1c16:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1c1a:	2310      	movs	r3, #16
 80a1c1c:	9301      	str	r3, [sp, #4]
 80a1c1e:	ab02      	add	r3, sp, #8
 80a1c20:	9300      	str	r3, [sp, #0]
 80a1c22:	6940      	ldr	r0, [r0, #20]
 80a1c24:	2300      	movs	r3, #0
 80a1c26:	f7ff fb71 	bl	80a130c <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1c2a:	b007      	add	sp, #28
 80a1c2c:	bd30      	pop	{r4, r5, pc}

080a1c2e <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1c2e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1c30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1c32:	4605      	mov	r5, r0
 80a1c34:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1c36:	b113      	cbz	r3, 80a1c3e <_ZN3UDP5writeEPKhj+0x10>
 80a1c38:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1c3a:	1a24      	subs	r4, r4, r0
 80a1c3c:	e000      	b.n	80a1c40 <_ZN3UDP5writeEPKhj+0x12>
 80a1c3e:	461c      	mov	r4, r3
 80a1c40:	4294      	cmp	r4, r2
 80a1c42:	bf28      	it	cs
 80a1c44:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1c46:	4418      	add	r0, r3
 80a1c48:	4622      	mov	r2, r4
 80a1c4a:	f001 fa3f 	bl	80a30cc <memcpy>
    _offset += size;
 80a1c4e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1c50:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1c52:	4423      	add	r3, r4
 80a1c54:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1c56:	bd38      	pop	{r3, r4, r5, pc}

080a1c58 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1c58:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1c5a:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1c5c:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1c5e:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1c60:	460e      	mov	r6, r1
 80a1c62:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1c64:	4798      	blx	r3
 80a1c66:	b188      	cbz	r0, 80a1c8c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1c68:	6823      	ldr	r3, [r4, #0]
 80a1c6a:	4620      	mov	r0, r4
 80a1c6c:	691b      	ldr	r3, [r3, #16]
 80a1c6e:	4798      	blx	r3
 80a1c70:	4285      	cmp	r5, r0
 80a1c72:	bfa8      	it	ge
 80a1c74:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1c76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1c78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1c7a:	462a      	mov	r2, r5
 80a1c7c:	4419      	add	r1, r3
 80a1c7e:	4630      	mov	r0, r6
 80a1c80:	f001 fa24 	bl	80a30cc <memcpy>
      _offset += read;
 80a1c84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1c86:	442b      	add	r3, r5
 80a1c88:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a1c8a:	e001      	b.n	80a1c90 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a1c8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a1c90:	4628      	mov	r0, r5
 80a1c92:	bd70      	pop	{r4, r5, r6, pc}

080a1c94 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c96:	4604      	mov	r4, r0
 80a1c98:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1c9a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1c9c:	460d      	mov	r5, r1
 80a1c9e:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1ca0:	f7ff fde6 	bl	80a1870 <_ZN5spark12NetworkClass4fromEm>
 80a1ca4:	6803      	ldr	r3, [r0, #0]
 80a1ca6:	68db      	ldr	r3, [r3, #12]
 80a1ca8:	4798      	blx	r3
 80a1caa:	b310      	cbz	r0, 80a1cf2 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1cac:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1cae:	f7ff fb3d 	bl	80a132c <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1cb2:	4287      	cmp	r7, r0
 80a1cb4:	d01d      	beq.n	80a1cf2 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1cb6:	b1e5      	cbz	r5, 80a1cf2 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1cb8:	ab08      	add	r3, sp, #32
 80a1cba:	2210      	movs	r2, #16
 80a1cbc:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a1cc0:	9301      	str	r3, [sp, #4]
 80a1cc2:	eb0d 0302 	add.w	r3, sp, r2
 80a1cc6:	9300      	str	r3, [sp, #0]
 80a1cc8:	4629      	mov	r1, r5
 80a1cca:	2300      	movs	r3, #0
 80a1ccc:	4632      	mov	r2, r6
 80a1cce:	6960      	ldr	r0, [r4, #20]
 80a1cd0:	f7ff fb14 	bl	80a12fc <socket_receivefrom>
        if (ret >= 0)
 80a1cd4:	1e05      	subs	r5, r0, #0
 80a1cd6:	db0e      	blt.n	80a1cf6 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1cd8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1cdc:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1ce0:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1ce2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1ce6:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1ce8:	f104 001c 	add.w	r0, r4, #28
 80a1cec:	f7ff fd50 	bl	80a1790 <_ZN9IPAddressaSEPKh>
 80a1cf0:	e001      	b.n	80a1cf6 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1cf2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1cf6:	4628      	mov	r0, r5
 80a1cf8:	b009      	add	sp, #36	; 0x24
 80a1cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1cfc <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1d00:	4606      	mov	r6, r0
 80a1d02:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1d04:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1d06:	460d      	mov	r5, r1
 80a1d08:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1d0a:	f7ff fdb1 	bl	80a1870 <_ZN5spark12NetworkClass4fromEm>
 80a1d0e:	6803      	ldr	r3, [r0, #0]
 80a1d10:	68db      	ldr	r3, [r3, #12]
 80a1d12:	4798      	blx	r3
 80a1d14:	b1f8      	cbz	r0, 80a1d56 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1d16:	4628      	mov	r0, r5
 80a1d18:	f001 fa14 	bl	80a3144 <strlen>
 80a1d1c:	2400      	movs	r4, #0
 80a1d1e:	b281      	uxth	r1, r0
 80a1d20:	9400      	str	r4, [sp, #0]
 80a1d22:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1d24:	aa03      	add	r2, sp, #12
 80a1d26:	4628      	mov	r0, r5
 80a1d28:	f7ff fb98 	bl	80a145c <inet_gethostbyname>
 80a1d2c:	b990      	cbnz	r0, 80a1d54 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a1d2e:	a903      	add	r1, sp, #12
 80a1d30:	a808      	add	r0, sp, #32
 80a1d32:	f7ff fcf9 	bl	80a1728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1d36:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1d38:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1d3a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1d3c:	4b07      	ldr	r3, [pc, #28]	; (80a1d5c <_ZN3UDP11beginPacketEPKct+0x60>)
 80a1d3e:	ad09      	add	r5, sp, #36	; 0x24
 80a1d40:	930e      	str	r3, [sp, #56]	; 0x38
 80a1d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1d46:	682b      	ldr	r3, [r5, #0]
 80a1d48:	4642      	mov	r2, r8
 80a1d4a:	7023      	strb	r3, [r4, #0]
 80a1d4c:	a90e      	add	r1, sp, #56	; 0x38
 80a1d4e:	4630      	mov	r0, r6
 80a1d50:	47b8      	blx	r7
 80a1d52:	e000      	b.n	80a1d56 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1d54:	4620      	mov	r0, r4
}
 80a1d56:	b014      	add	sp, #80	; 0x50
 80a1d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1d5c:	080a31b0 	.word	0x080a31b0

080a1d60 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1d60:	b570      	push	{r4, r5, r6, lr}
 80a1d62:	4604      	mov	r4, r0
 80a1d64:	4606      	mov	r6, r0
 80a1d66:	4b05      	ldr	r3, [pc, #20]	; (80a1d7c <_ZN3UDP8remoteIPEv+0x1c>)
 80a1d68:	f101 0520 	add.w	r5, r1, #32
 80a1d6c:	f844 3b04 	str.w	r3, [r4], #4
 80a1d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1d74:	682b      	ldr	r3, [r5, #0]
 80a1d76:	4630      	mov	r0, r6
 80a1d78:	7023      	strb	r3, [r4, #0]
 80a1d7a:	bd70      	pop	{r4, r5, r6, pc}
 80a1d7c:	080a31b0 	.word	0x080a31b0

080a1d80 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d82:	4694      	mov	ip, r2
 80a1d84:	468e      	mov	lr, r1
 80a1d86:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1d88:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1d8a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1d8c:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a1d8e:	4a09      	ldr	r2, [pc, #36]	; (80a1db4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a1d90:	ac03      	add	r4, sp, #12
 80a1d92:	1d1d      	adds	r5, r3, #4
 80a1d94:	9202      	str	r2, [sp, #8]
 80a1d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1d9a:	682b      	ldr	r3, [r5, #0]
 80a1d9c:	4662      	mov	r2, ip
 80a1d9e:	7023      	strb	r3, [r4, #0]
 80a1da0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a1da4:	4671      	mov	r1, lr
 80a1da6:	9300      	str	r3, [sp, #0]
 80a1da8:	4630      	mov	r0, r6
 80a1daa:	ab02      	add	r3, sp, #8
 80a1dac:	47b8      	blx	r7
    }
 80a1dae:	b009      	add	sp, #36	; 0x24
 80a1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1db2:	bf00      	nop
 80a1db4:	080a31b0 	.word	0x080a31b0

080a1db8 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dba:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1dbc:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1dbe:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1dc0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1dc2:	4b0d      	ldr	r3, [pc, #52]	; (80a1df8 <_ZN3UDP9endPacketEv+0x40>)
 80a1dc4:	ad03      	add	r5, sp, #12
 80a1dc6:	f100 0620 	add.w	r6, r0, #32
 80a1dca:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a1dce:	9302      	str	r3, [sp, #8]
 80a1dd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1dd4:	6833      	ldr	r3, [r6, #0]
 80a1dd6:	4672      	mov	r2, lr
 80a1dd8:	702b      	strb	r3, [r5, #0]
 80a1dda:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1ddc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1dde:	9300      	str	r3, [sp, #0]
 80a1de0:	4620      	mov	r0, r4
 80a1de2:	ab02      	add	r3, sp, #8
 80a1de4:	47b8      	blx	r7
 80a1de6:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1de8:	6823      	ldr	r3, [r4, #0]
 80a1dea:	4620      	mov	r0, r4
 80a1dec:	69db      	ldr	r3, [r3, #28]
 80a1dee:	4798      	blx	r3
    return result;
}
 80a1df0:	4628      	mov	r0, r5
 80a1df2:	b009      	add	sp, #36	; 0x24
 80a1df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1df6:	bf00      	nop
 80a1df8:	080a31b0 	.word	0x080a31b0

080a1dfc <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1dfc:	b538      	push	{r3, r4, r5, lr}
 80a1dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e02:	6083      	str	r3, [r0, #8]
 80a1e04:	4b0b      	ldr	r3, [pc, #44]	; (80a1e34 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1e06:	2500      	movs	r5, #0
 80a1e08:	f103 0208 	add.w	r2, r3, #8
 80a1e0c:	336c      	adds	r3, #108	; 0x6c
 80a1e0e:	6002      	str	r2, [r0, #0]
 80a1e10:	6103      	str	r3, [r0, #16]
 80a1e12:	6045      	str	r5, [r0, #4]
 80a1e14:	4604      	mov	r4, r0
 80a1e16:	f7ff fa89 	bl	80a132c <socket_handle_invalid>
 80a1e1a:	6160      	str	r0, [r4, #20]
 80a1e1c:	f104 001c 	add.w	r0, r4, #28
 80a1e20:	f7ff fc74 	bl	80a170c <_ZN9IPAddressC1Ev>
 80a1e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1e28:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1e2a:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1e2c:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1e2e:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	bd38      	pop	{r3, r4, r5, pc}
 80a1e34:	080a3310 	.word	0x080a3310

080a1e38 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1e38:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1e3a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1e3e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1e40:	b123      	cbz	r3, 80a1e4c <_ZN3UDP13releaseBufferEv+0x14>
 80a1e42:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1e44:	b110      	cbz	r0, 80a1e4c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1e46:	2101      	movs	r1, #1
 80a1e48:	f000 fb6b 	bl	80a2522 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1e4c:	2300      	movs	r3, #0
 80a1e4e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1e50:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1e54:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1e56:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1e58:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1e5a:	bd10      	pop	{r4, pc}

080a1e5c <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1e5c:	b570      	push	{r4, r5, r6, lr}
 80a1e5e:	4604      	mov	r4, r0
 80a1e60:	4616      	mov	r6, r2
 80a1e62:	460d      	mov	r5, r1
    releaseBuffer();
 80a1e64:	f7ff ffe8 	bl	80a1e38 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1e68:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a1e6a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1e6c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a1e6e:	b93e      	cbnz	r6, 80a1e80 <_ZN3UDP9setBufferEjPh+0x24>
 80a1e70:	b135      	cbz	r5, 80a1e80 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1e72:	4628      	mov	r0, r5
 80a1e74:	f7fe f915 	bl	80a00a2 <_Znaj>
        _buffer_allocated = true;
 80a1e78:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a1e7a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1e7c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1e82:	b103      	cbz	r3, 80a1e86 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1e84:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1e86:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1e88:	3000      	adds	r0, #0
 80a1e8a:	bf18      	it	ne
 80a1e8c:	2001      	movne	r0, #1
 80a1e8e:	bd70      	pop	{r4, r5, r6, pc}

080a1e90 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e92:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1e94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1e96:	4605      	mov	r5, r0
 80a1e98:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1e9a:	b91a      	cbnz	r2, 80a1ea4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a1e9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1e9e:	b109      	cbz	r1, 80a1ea4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a1ea0:	f7ff ffdc 	bl	80a1e5c <_ZN3UDP9setBufferEjPh>
 80a1ea4:	f105 0620 	add.w	r6, r5, #32
 80a1ea8:	3404      	adds	r4, #4
 80a1eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1eac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1eae:	6823      	ldr	r3, [r4, #0]
 80a1eb0:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1eb2:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a1eb4:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1eb6:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1eb8:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a1eba:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a1ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ebe <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1ebe:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a1ec0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1ec2:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a1ec4:	b91a      	cbnz	r2, 80a1ece <_ZN3UDP11parsePacketEm+0x10>
 80a1ec6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1ec8:	b109      	cbz	r1, 80a1ece <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a1eca:	f7ff ffc7 	bl	80a1e5c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1ece:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1ed0:	2300      	movs	r3, #0
 80a1ed2:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1ed4:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1ed6:	b141      	cbz	r1, 80a1eea <_ZN3UDP11parsePacketEm+0x2c>
 80a1ed8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1eda:	b132      	cbz	r2, 80a1eea <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a1edc:	6820      	ldr	r0, [r4, #0]
 80a1ede:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a1ee0:	4620      	mov	r0, r4
 80a1ee2:	47a8      	blx	r5
        if (result>0) {
 80a1ee4:	2800      	cmp	r0, #0
            _total = result;
 80a1ee6:	bfc8      	it	gt
 80a1ee8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a1eea:	6823      	ldr	r3, [r4, #0]
 80a1eec:	4620      	mov	r0, r4
}
 80a1eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a1ef2:	691b      	ldr	r3, [r3, #16]
 80a1ef4:	4718      	bx	r3

080a1ef6 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ef6:	4770      	bx	lr

080a1ef8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ef8:	7441      	strb	r1, [r0, #17]
 80a1efa:	4770      	bx	lr

080a1efc <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1efc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1efe:	7c00      	ldrb	r0, [r0, #16]
 80a1f00:	f7ff fa64 	bl	80a13cc <HAL_USART_Available_Data_For_Write>
}
 80a1f04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f08:	bd08      	pop	{r3, pc}

080a1f0a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f0c:	7c00      	ldrb	r0, [r0, #16]
 80a1f0e:	f7ff fa35 	bl	80a137c <HAL_USART_Available_Data>
}
 80a1f12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f16:	bd08      	pop	{r3, pc}

080a1f18 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f18:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1f1a:	7c00      	ldrb	r0, [r0, #16]
 80a1f1c:	f7ff fa3e 	bl	80a139c <HAL_USART_Peek_Data>
}
 80a1f20:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f24:	bf28      	it	cs
 80a1f26:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f2a:	bd08      	pop	{r3, pc}

080a1f2c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1f2c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1f2e:	7c00      	ldrb	r0, [r0, #16]
 80a1f30:	f7ff fa2c 	bl	80a138c <HAL_USART_Read_Data>
}
 80a1f34:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f38:	bf28      	it	cs
 80a1f3a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f3e:	bd08      	pop	{r3, pc}

080a1f40 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f40:	7c00      	ldrb	r0, [r0, #16]
 80a1f42:	f7ff ba33 	b.w	80a13ac <HAL_USART_Flush_Data>

080a1f46 <_ZN11USARTSerialD0Ev>:
 80a1f46:	b510      	push	{r4, lr}
 80a1f48:	4604      	mov	r4, r0
 80a1f4a:	2114      	movs	r1, #20
 80a1f4c:	f000 fae9 	bl	80a2522 <_ZdlPvj>
 80a1f50:	4620      	mov	r0, r4
 80a1f52:	bd10      	pop	{r4, pc}

080a1f54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f54:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f56:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f58:	4604      	mov	r4, r0
 80a1f5a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f5c:	b925      	cbnz	r5, 80a1f68 <_ZN11USARTSerial5writeEh+0x14>
 80a1f5e:	7c00      	ldrb	r0, [r0, #16]
 80a1f60:	f7ff fa34 	bl	80a13cc <HAL_USART_Available_Data_For_Write>
 80a1f64:	2800      	cmp	r0, #0
 80a1f66:	dd05      	ble.n	80a1f74 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f68:	4631      	mov	r1, r6
 80a1f6a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f70:	f7ff b9fc 	b.w	80a136c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f74:	4628      	mov	r0, r5
 80a1f76:	bd70      	pop	{r4, r5, r6, pc}

080a1f78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f78:	b510      	push	{r4, lr}
 80a1f7a:	4604      	mov	r4, r0
 80a1f7c:	4608      	mov	r0, r1
 80a1f7e:	4611      	mov	r1, r2
 80a1f80:	2200      	movs	r2, #0
 80a1f82:	6062      	str	r2, [r4, #4]
 80a1f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f88:	60a2      	str	r2, [r4, #8]
 80a1f8a:	4a05      	ldr	r2, [pc, #20]	; (80a1fa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1f8c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f8e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1f90:	2201      	movs	r2, #1
 80a1f92:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1f94:	461a      	mov	r2, r3
 80a1f96:	f7ff f9e1 	bl	80a135c <HAL_USART_Init>
}
 80a1f9a:	4620      	mov	r0, r4
 80a1f9c:	bd10      	pop	{r4, pc}
 80a1f9e:	bf00      	nop
 80a1fa0:	080a3388 	.word	0x080a3388

080a1fa4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1fa4:	7c00      	ldrb	r0, [r0, #16]
 80a1fa6:	f7ff ba09 	b.w	80a13bc <HAL_USART_Is_Enabled>
	...

080a1fac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1fac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1fae:	4d0c      	ldr	r5, [pc, #48]	; (80a1fe0 <_Z22__fetch_global_Serial1v+0x34>)
 80a1fb0:	6829      	ldr	r1, [r5, #0]
 80a1fb2:	f011 0401 	ands.w	r4, r1, #1
 80a1fb6:	d111      	bne.n	80a1fdc <_Z22__fetch_global_Serial1v+0x30>
 80a1fb8:	4628      	mov	r0, r5
 80a1fba:	f7fe f876 	bl	80a00aa <__cxa_guard_acquire>
 80a1fbe:	b168      	cbz	r0, 80a1fdc <_Z22__fetch_global_Serial1v+0x30>
 80a1fc0:	4a08      	ldr	r2, [pc, #32]	; (80a1fe4 <_Z22__fetch_global_Serial1v+0x38>)
 80a1fc2:	4621      	mov	r1, r4
 80a1fc4:	4b08      	ldr	r3, [pc, #32]	; (80a1fe8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1fc6:	4809      	ldr	r0, [pc, #36]	; (80a1fec <_Z22__fetch_global_Serial1v+0x40>)
 80a1fc8:	f7ff ffd6 	bl	80a1f78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1fcc:	4628      	mov	r0, r5
 80a1fce:	f7fe f871 	bl	80a00b4 <__cxa_guard_release>
 80a1fd2:	4a07      	ldr	r2, [pc, #28]	; (80a1ff0 <_Z22__fetch_global_Serial1v+0x44>)
 80a1fd4:	4907      	ldr	r1, [pc, #28]	; (80a1ff4 <_Z22__fetch_global_Serial1v+0x48>)
 80a1fd6:	4805      	ldr	r0, [pc, #20]	; (80a1fec <_Z22__fetch_global_Serial1v+0x40>)
 80a1fd8:	f000 fa9e 	bl	80a2518 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1fdc:	4803      	ldr	r0, [pc, #12]	; (80a1fec <_Z22__fetch_global_Serial1v+0x40>)
 80a1fde:	bd38      	pop	{r3, r4, r5, pc}
 80a1fe0:	20000380 	.word	0x20000380
 80a1fe4:	20000384 	.word	0x20000384
 80a1fe8:	200002fc 	.word	0x200002fc
 80a1fec:	200002e8 	.word	0x200002e8
 80a1ff0:	20000070 	.word	0x20000070
 80a1ff4:	080a1ef7 	.word	0x080a1ef7

080a1ff8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ff8:	7441      	strb	r1, [r0, #17]
 80a1ffa:	4770      	bx	lr

080a1ffc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1ffc:	4770      	bx	lr

080a1ffe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1ffe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2000:	2100      	movs	r1, #0
 80a2002:	7c00      	ldrb	r0, [r0, #16]
 80a2004:	f7ff fa0a 	bl	80a141c <HAL_USB_USART_Receive_Data>
}
 80a2008:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a200c:	bf28      	it	cs
 80a200e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2012:	bd08      	pop	{r3, pc}

080a2014 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2014:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2016:	2101      	movs	r1, #1
 80a2018:	7c00      	ldrb	r0, [r0, #16]
 80a201a:	f7ff f9ff 	bl	80a141c <HAL_USB_USART_Receive_Data>
}
 80a201e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2022:	bf28      	it	cs
 80a2024:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2028:	bd08      	pop	{r3, pc}

080a202a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a202a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a202c:	7c00      	ldrb	r0, [r0, #16]
 80a202e:	f7ff f9ed 	bl	80a140c <HAL_USB_USART_Available_Data_For_Write>
}
 80a2032:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2036:	bd08      	pop	{r3, pc}

080a2038 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2038:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a203a:	7c00      	ldrb	r0, [r0, #16]
 80a203c:	f7ff f9de 	bl	80a13fc <HAL_USB_USART_Available_Data>
}
 80a2040:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2044:	bd08      	pop	{r3, pc}

080a2046 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2046:	7c00      	ldrb	r0, [r0, #16]
 80a2048:	f7ff b9f8 	b.w	80a143c <HAL_USB_USART_Flush_Data>

080a204c <_ZN9USBSerialD0Ev>:
 80a204c:	b510      	push	{r4, lr}
 80a204e:	4604      	mov	r4, r0
 80a2050:	2114      	movs	r1, #20
 80a2052:	f000 fa66 	bl	80a2522 <_ZdlPvj>
 80a2056:	4620      	mov	r0, r4
 80a2058:	bd10      	pop	{r4, pc}

080a205a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a205a:	b538      	push	{r3, r4, r5, lr}
 80a205c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a205e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2060:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2062:	f7ff f9d3 	bl	80a140c <HAL_USB_USART_Available_Data_For_Write>
 80a2066:	2800      	cmp	r0, #0
 80a2068:	dc01      	bgt.n	80a206e <_ZN9USBSerial5writeEh+0x14>
 80a206a:	7c60      	ldrb	r0, [r4, #17]
 80a206c:	b128      	cbz	r0, 80a207a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a206e:	4629      	mov	r1, r5
 80a2070:	7c20      	ldrb	r0, [r4, #16]
 80a2072:	f7ff f9db 	bl	80a142c <HAL_USB_USART_Send_Data>
 80a2076:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a207a:	bd38      	pop	{r3, r4, r5, pc}

080a207c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a207c:	b510      	push	{r4, lr}
 80a207e:	4604      	mov	r4, r0
 80a2080:	2300      	movs	r3, #0
 80a2082:	6063      	str	r3, [r4, #4]
 80a2084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2088:	60a3      	str	r3, [r4, #8]
 80a208a:	4b05      	ldr	r3, [pc, #20]	; (80a20a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a208c:	4608      	mov	r0, r1
 80a208e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2090:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2092:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2094:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2096:	4611      	mov	r1, r2
 80a2098:	f7ff f9a0 	bl	80a13dc <HAL_USB_USART_Init>
}
 80a209c:	4620      	mov	r0, r4
 80a209e:	bd10      	pop	{r4, pc}
 80a20a0:	080a33b8 	.word	0x080a33b8

080a20a4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a20a4:	2200      	movs	r2, #0
 80a20a6:	7c00      	ldrb	r0, [r0, #16]
 80a20a8:	f7ff b9a0 	b.w	80a13ec <HAL_USB_USART_Begin>

080a20ac <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a20ac:	7c00      	ldrb	r0, [r0, #16]
 80a20ae:	f7ff b9cd 	b.w	80a144c <HAL_USB_USART_Is_Enabled>

080a20b2 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a20b2:	f7ff bffb 	b.w	80a20ac <_ZN9USBSerial9isEnabledEv>
	...

080a20b8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a20b8:	b510      	push	{r4, lr}
 80a20ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a20bc:	2214      	movs	r2, #20
 80a20be:	2100      	movs	r1, #0
 80a20c0:	f001 f80f 	bl	80a30e2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20c4:	4b05      	ldr	r3, [pc, #20]	; (80a20dc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a20c6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20c8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a20ca:	4b05      	ldr	r3, [pc, #20]	; (80a20e0 <_Z19acquireSerialBufferv+0x28>)
 80a20cc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a20ce:	f240 1301 	movw	r3, #257	; 0x101
 80a20d2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a20d4:	2381      	movs	r3, #129	; 0x81
 80a20d6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a20d8:	bd10      	pop	{r4, pc}
 80a20da:	bf00      	nop
 80a20dc:	2000048d 	.word	0x2000048d
 80a20e0:	2000040c 	.word	0x2000040c

080a20e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a20e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20e6:	4d0e      	ldr	r5, [pc, #56]	; (80a2120 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a20e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a20ea:	a801      	add	r0, sp, #4
 80a20ec:	f7ff ffe4 	bl	80a20b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20f0:	6829      	ldr	r1, [r5, #0]
 80a20f2:	f011 0401 	ands.w	r4, r1, #1
 80a20f6:	d110      	bne.n	80a211a <_Z16_fetch_usbserialv+0x36>
 80a20f8:	4628      	mov	r0, r5
 80a20fa:	f7fd ffd6 	bl	80a00aa <__cxa_guard_acquire>
 80a20fe:	b160      	cbz	r0, 80a211a <_Z16_fetch_usbserialv+0x36>
 80a2100:	aa01      	add	r2, sp, #4
 80a2102:	4621      	mov	r1, r4
 80a2104:	4807      	ldr	r0, [pc, #28]	; (80a2124 <_Z16_fetch_usbserialv+0x40>)
 80a2106:	f7ff ffb9 	bl	80a207c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a210a:	4628      	mov	r0, r5
 80a210c:	f7fd ffd2 	bl	80a00b4 <__cxa_guard_release>
 80a2110:	4a05      	ldr	r2, [pc, #20]	; (80a2128 <_Z16_fetch_usbserialv+0x44>)
 80a2112:	4906      	ldr	r1, [pc, #24]	; (80a212c <_Z16_fetch_usbserialv+0x48>)
 80a2114:	4803      	ldr	r0, [pc, #12]	; (80a2124 <_Z16_fetch_usbserialv+0x40>)
 80a2116:	f000 f9ff 	bl	80a2518 <__aeabi_atexit>
	return _usbserial;
}
 80a211a:	4802      	ldr	r0, [pc, #8]	; (80a2124 <_Z16_fetch_usbserialv+0x40>)
 80a211c:	b007      	add	sp, #28
 80a211e:	bd30      	pop	{r4, r5, pc}
 80a2120:	20000408 	.word	0x20000408
 80a2124:	20000590 	.word	0x20000590
 80a2128:	20000070 	.word	0x20000070
 80a212c:	080a1ffd 	.word	0x080a1ffd

080a2130 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2130:	b510      	push	{r4, lr}
 80a2132:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2134:	2214      	movs	r2, #20
 80a2136:	2100      	movs	r1, #0
 80a2138:	f000 ffd3 	bl	80a30e2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a213c:	4b05      	ldr	r3, [pc, #20]	; (80a2154 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a213e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2140:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2142:	4b05      	ldr	r3, [pc, #20]	; (80a2158 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2144:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2146:	f240 1301 	movw	r3, #257	; 0x101
 80a214a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a214c:	2381      	movs	r3, #129	; 0x81
 80a214e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2150:	bd10      	pop	{r4, pc}
 80a2152:	bf00      	nop
 80a2154:	20000640 	.word	0x20000640
 80a2158:	200005a8 	.word	0x200005a8

080a215c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a215c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a215e:	4c0e      	ldr	r4, [pc, #56]	; (80a2198 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2160:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2162:	a801      	add	r0, sp, #4
 80a2164:	f7ff ffe4 	bl	80a2130 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2168:	6823      	ldr	r3, [r4, #0]
 80a216a:	07db      	lsls	r3, r3, #31
 80a216c:	d410      	bmi.n	80a2190 <_Z17_fetch_usbserial1v+0x34>
 80a216e:	4620      	mov	r0, r4
 80a2170:	f7fd ff9b 	bl	80a00aa <__cxa_guard_acquire>
 80a2174:	b160      	cbz	r0, 80a2190 <_Z17_fetch_usbserial1v+0x34>
 80a2176:	aa01      	add	r2, sp, #4
 80a2178:	2101      	movs	r1, #1
 80a217a:	4808      	ldr	r0, [pc, #32]	; (80a219c <_Z17_fetch_usbserial1v+0x40>)
 80a217c:	f7ff ff7e 	bl	80a207c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2180:	4620      	mov	r0, r4
 80a2182:	f7fd ff97 	bl	80a00b4 <__cxa_guard_release>
 80a2186:	4a06      	ldr	r2, [pc, #24]	; (80a21a0 <_Z17_fetch_usbserial1v+0x44>)
 80a2188:	4906      	ldr	r1, [pc, #24]	; (80a21a4 <_Z17_fetch_usbserial1v+0x48>)
 80a218a:	4804      	ldr	r0, [pc, #16]	; (80a219c <_Z17_fetch_usbserial1v+0x40>)
 80a218c:	f000 f9c4 	bl	80a2518 <__aeabi_atexit>
  return _usbserial1;
}
 80a2190:	4802      	ldr	r0, [pc, #8]	; (80a219c <_Z17_fetch_usbserial1v+0x40>)
 80a2192:	b006      	add	sp, #24
 80a2194:	bd10      	pop	{r4, pc}
 80a2196:	bf00      	nop
 80a2198:	200005a4 	.word	0x200005a4
 80a219c:	2000062c 	.word	0x2000062c
 80a21a0:	20000070 	.word	0x20000070
 80a21a4:	080a1ffd 	.word	0x080a1ffd

080a21a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a21a8:	2200      	movs	r2, #0
 80a21aa:	4611      	mov	r1, r2
 80a21ac:	6840      	ldr	r0, [r0, #4]
 80a21ae:	f7ff b9a9 	b.w	80a1504 <network_ready>

080a21b2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21b4:	4616      	mov	r6, r2
 80a21b6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a21b8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21ba:	460f      	mov	r7, r1
 80a21bc:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a21be:	2100      	movs	r1, #0
 80a21c0:	a803      	add	r0, sp, #12
 80a21c2:	f000 ff8e 	bl	80a30e2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a21c6:	4630      	mov	r0, r6
 80a21c8:	f000 ffbc 	bl	80a3144 <strlen>
 80a21cc:	2500      	movs	r5, #0
 80a21ce:	9500      	str	r5, [sp, #0]
 80a21d0:	b281      	uxth	r1, r0
 80a21d2:	687b      	ldr	r3, [r7, #4]
 80a21d4:	aa03      	add	r2, sp, #12
 80a21d6:	4630      	mov	r0, r6
 80a21d8:	f7ff f940 	bl	80a145c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21dc:	b120      	cbz	r0, 80a21e8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a21de:	4629      	mov	r1, r5
 80a21e0:	4620      	mov	r0, r4
 80a21e2:	f7ff fab3 	bl	80a174c <_ZN9IPAddressC1Em>
 80a21e6:	e003      	b.n	80a21f0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a21e8:	a903      	add	r1, sp, #12
 80a21ea:	4620      	mov	r0, r4
 80a21ec:	f7ff fa9c 	bl	80a1728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a21f0:	4620      	mov	r0, r4
 80a21f2:	b009      	add	sp, #36	; 0x24
 80a21f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a21f6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a21f6:	2200      	movs	r2, #0
 80a21f8:	4611      	mov	r1, r2
 80a21fa:	6840      	ldr	r0, [r0, #4]
 80a21fc:	f7ff b9a2 	b.w	80a1544 <network_listening>

080a2200 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2200:	2200      	movs	r2, #0
 80a2202:	4611      	mov	r1, r2
 80a2204:	6840      	ldr	r0, [r0, #4]
 80a2206:	f7ff b9ad 	b.w	80a1564 <network_get_listen_timeout>

080a220a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a220a:	2200      	movs	r2, #0
 80a220c:	6840      	ldr	r0, [r0, #4]
 80a220e:	f7ff b9a1 	b.w	80a1554 <network_set_listen_timeout>

080a2212 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2212:	2200      	movs	r2, #0
 80a2214:	f081 0101 	eor.w	r1, r1, #1
 80a2218:	6840      	ldr	r0, [r0, #4]
 80a221a:	f7ff b98b 	b.w	80a1534 <network_listen>

080a221e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a221e:	2300      	movs	r3, #0
 80a2220:	461a      	mov	r2, r3
 80a2222:	4619      	mov	r1, r3
 80a2224:	6840      	ldr	r0, [r0, #4]
 80a2226:	f7ff b97d 	b.w	80a1524 <network_off>

080a222a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a222a:	2300      	movs	r3, #0
 80a222c:	461a      	mov	r2, r3
 80a222e:	4619      	mov	r1, r3
 80a2230:	6840      	ldr	r0, [r0, #4]
 80a2232:	f7ff b96f 	b.w	80a1514 <network_on>

080a2236 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2236:	2200      	movs	r2, #0
 80a2238:	4611      	mov	r1, r2
 80a223a:	6840      	ldr	r0, [r0, #4]
 80a223c:	f7ff b952 	b.w	80a14e4 <network_connecting>

080a2240 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2240:	2200      	movs	r2, #0
 80a2242:	2102      	movs	r1, #2
 80a2244:	6840      	ldr	r0, [r0, #4]
 80a2246:	f7ff b955 	b.w	80a14f4 <network_disconnect>

080a224a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a224a:	2300      	movs	r3, #0
 80a224c:	461a      	mov	r2, r3
 80a224e:	6840      	ldr	r0, [r0, #4]
 80a2250:	f7ff b940 	b.w	80a14d4 <network_connect>

080a2254 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2254:	4b02      	ldr	r3, [pc, #8]	; (80a2260 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2256:	2204      	movs	r2, #4
 80a2258:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a225a:	4a02      	ldr	r2, [pc, #8]	; (80a2264 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a225c:	601a      	str	r2, [r3, #0]
 80a225e:	4770      	bx	lr
 80a2260:	20000744 	.word	0x20000744
 80a2264:	080a33e8 	.word	0x080a33e8

080a2268 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2268:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a226a:	4b14      	ldr	r3, [pc, #80]	; (80a22bc <serialEventRun+0x54>)
 80a226c:	b133      	cbz	r3, 80a227c <serialEventRun+0x14>
 80a226e:	f7ff ff39 	bl	80a20e4 <_Z16_fetch_usbserialv>
 80a2272:	6803      	ldr	r3, [r0, #0]
 80a2274:	691b      	ldr	r3, [r3, #16]
 80a2276:	4798      	blx	r3
 80a2278:	2800      	cmp	r0, #0
 80a227a:	dc16      	bgt.n	80a22aa <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a227c:	4b10      	ldr	r3, [pc, #64]	; (80a22c0 <serialEventRun+0x58>)
 80a227e:	b133      	cbz	r3, 80a228e <serialEventRun+0x26>
 80a2280:	f7ff fe94 	bl	80a1fac <_Z22__fetch_global_Serial1v>
 80a2284:	6803      	ldr	r3, [r0, #0]
 80a2286:	691b      	ldr	r3, [r3, #16]
 80a2288:	4798      	blx	r3
 80a228a:	2800      	cmp	r0, #0
 80a228c:	dc10      	bgt.n	80a22b0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a228e:	4b0d      	ldr	r3, [pc, #52]	; (80a22c4 <serialEventRun+0x5c>)
 80a2290:	b10b      	cbz	r3, 80a2296 <serialEventRun+0x2e>
 80a2292:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2296:	4b0c      	ldr	r3, [pc, #48]	; (80a22c8 <serialEventRun+0x60>)
 80a2298:	b17b      	cbz	r3, 80a22ba <serialEventRun+0x52>
 80a229a:	f7ff ff5f 	bl	80a215c <_Z17_fetch_usbserial1v>
 80a229e:	6803      	ldr	r3, [r0, #0]
 80a22a0:	691b      	ldr	r3, [r3, #16]
 80a22a2:	4798      	blx	r3
 80a22a4:	2800      	cmp	r0, #0
 80a22a6:	dc06      	bgt.n	80a22b6 <serialEventRun+0x4e>
 80a22a8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a22aa:	f3af 8000 	nop.w
 80a22ae:	e7e5      	b.n	80a227c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a22b0:	f3af 8000 	nop.w
 80a22b4:	e7eb      	b.n	80a228e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a22b6:	f3af 8000 	nop.w
 80a22ba:	bd08      	pop	{r3, pc}
	...

080a22cc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a22cc:	b508      	push	{r3, lr}
	serialEventRun();
 80a22ce:	f7ff ffcb 	bl	80a2268 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22d2:	f7fe ff91 	bl	80a11f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22d6:	4b01      	ldr	r3, [pc, #4]	; (80a22dc <_post_loop+0x10>)
 80a22d8:	6018      	str	r0, [r3, #0]
 80a22da:	bd08      	pop	{r3, pc}
 80a22dc:	20000754 	.word	0x20000754

080a22e0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22e0:	4802      	ldr	r0, [pc, #8]	; (80a22ec <_Z33system_initialize_user_backup_ramv+0xc>)
 80a22e2:	4a03      	ldr	r2, [pc, #12]	; (80a22f0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a22e4:	4903      	ldr	r1, [pc, #12]	; (80a22f4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a22e6:	1a12      	subs	r2, r2, r0
 80a22e8:	f000 bef0 	b.w	80a30cc <memcpy>
 80a22ec:	40024000 	.word	0x40024000
 80a22f0:	40024004 	.word	0x40024004
 80a22f4:	080a34c0 	.word	0x080a34c0

080a22f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a22f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22fa:	2300      	movs	r3, #0
 80a22fc:	9300      	str	r3, [sp, #0]
 80a22fe:	461a      	mov	r2, r3
 80a2300:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2304:	f7ff f8cc 	bl	80a14a0 <system_ctrl_set_result>
}
 80a2308:	b003      	add	sp, #12
 80a230a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2310 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2310:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2312:	8843      	ldrh	r3, [r0, #2]
 80a2314:	2b0a      	cmp	r3, #10
 80a2316:	d008      	beq.n	80a232a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2318:	2b50      	cmp	r3, #80	; 0x50
 80a231a:	d109      	bne.n	80a2330 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a231c:	4b09      	ldr	r3, [pc, #36]	; (80a2344 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a231e:	681b      	ldr	r3, [r3, #0]
 80a2320:	b13b      	cbz	r3, 80a2332 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2322:	b003      	add	sp, #12
 80a2324:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2328:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a232a:	f7ff ffe5 	bl	80a22f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a232e:	e006      	b.n	80a233e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2330:	2300      	movs	r3, #0
 80a2332:	9300      	str	r3, [sp, #0]
 80a2334:	461a      	mov	r2, r3
 80a2336:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a233a:	f7ff f8b1 	bl	80a14a0 <system_ctrl_set_result>
        break;
    }
}
 80a233e:	b003      	add	sp, #12
 80a2340:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2344:	2000074c 	.word	0x2000074c

080a2348 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2348:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a234a:	4c10      	ldr	r4, [pc, #64]	; (80a238c <module_user_init_hook+0x44>)
 80a234c:	4d10      	ldr	r5, [pc, #64]	; (80a2390 <module_user_init_hook+0x48>)
 80a234e:	6823      	ldr	r3, [r4, #0]
 80a2350:	42ab      	cmp	r3, r5
 80a2352:	4b10      	ldr	r3, [pc, #64]	; (80a2394 <module_user_init_hook+0x4c>)
 80a2354:	bf0c      	ite	eq
 80a2356:	2201      	moveq	r2, #1
 80a2358:	2200      	movne	r2, #0
 80a235a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a235c:	d002      	beq.n	80a2364 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a235e:	f7ff ffbf 	bl	80a22e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2362:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2364:	f7fe ff40 	bl	80a11e8 <HAL_RNG_GetRandomNumber>
 80a2368:	4604      	mov	r4, r0
    srand(seed);
 80a236a:	f000 fec3 	bl	80a30f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a236e:	4b0a      	ldr	r3, [pc, #40]	; (80a2398 <module_user_init_hook+0x50>)
 80a2370:	b113      	cbz	r3, 80a2378 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2372:	4620      	mov	r0, r4
 80a2374:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2378:	2100      	movs	r1, #0
 80a237a:	4807      	ldr	r0, [pc, #28]	; (80a2398 <module_user_init_hook+0x50>)
 80a237c:	f7ff f89a 	bl	80a14b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2384:	2100      	movs	r1, #0
 80a2386:	4805      	ldr	r0, [pc, #20]	; (80a239c <module_user_init_hook+0x54>)
 80a2388:	f7ff b880 	b.w	80a148c <system_ctrl_set_app_request_handler>
 80a238c:	40024000 	.word	0x40024000
 80a2390:	9a271c1e 	.word	0x9a271c1e
 80a2394:	20000750 	.word	0x20000750
 80a2398:	00000000 	.word	0x00000000
 80a239c:	080a2311 	.word	0x080a2311

080a23a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a23a0:	b510      	push	{r4, lr}
 80a23a2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a23a4:	480f      	ldr	r0, [pc, #60]	; (80a23e4 <pinAvailable+0x44>)
 80a23a6:	f7ff fb2f 	bl	80a1a08 <_ZN8SPIClass9isEnabledEv>
 80a23aa:	b128      	cbz	r0, 80a23b8 <pinAvailable+0x18>
 80a23ac:	f1a4 030d 	sub.w	r3, r4, #13
 80a23b0:	2b02      	cmp	r3, #2
 80a23b2:	d801      	bhi.n	80a23b8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a23b4:	2000      	movs	r0, #0
 80a23b6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a23b8:	f000 f854 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a23bc:	f7ff f948 	bl	80a1650 <_ZN7TwoWire9isEnabledEv>
 80a23c0:	b108      	cbz	r0, 80a23c6 <pinAvailable+0x26>
 80a23c2:	2c01      	cmp	r4, #1
 80a23c4:	d9f6      	bls.n	80a23b4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a23c6:	f7ff fdf1 	bl	80a1fac <_Z22__fetch_global_Serial1v>
 80a23ca:	f7ff fdeb 	bl	80a1fa4 <_ZN11USARTSerial9isEnabledEv>
 80a23ce:	b118      	cbz	r0, 80a23d8 <pinAvailable+0x38>
 80a23d0:	f1a4 0312 	sub.w	r3, r4, #18
 80a23d4:	2b01      	cmp	r3, #1
 80a23d6:	d9ed      	bls.n	80a23b4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a23d8:	2c17      	cmp	r4, #23
 80a23da:	bf8c      	ite	hi
 80a23dc:	2000      	movhi	r0, #0
 80a23de:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a23e0:	bd10      	pop	{r4, pc}
 80a23e2:	bf00      	nop
 80a23e4:	20000788 	.word	0x20000788

080a23e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a23e8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a23ea:	b538      	push	{r3, r4, r5, lr}
 80a23ec:	4604      	mov	r4, r0
 80a23ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a23f0:	d80a      	bhi.n	80a2408 <pinMode+0x20>
 80a23f2:	29ff      	cmp	r1, #255	; 0xff
 80a23f4:	d008      	beq.n	80a2408 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a23f6:	f7ff ffd3 	bl	80a23a0 <pinAvailable>
 80a23fa:	b128      	cbz	r0, 80a2408 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a23fc:	4629      	mov	r1, r5
 80a23fe:	4620      	mov	r0, r4
}
 80a2400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2404:	f7fe bf08 	b.w	80a1218 <HAL_Pin_Mode>
 80a2408:	bd38      	pop	{r3, r4, r5, pc}

080a240a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a240a:	b538      	push	{r3, r4, r5, lr}
 80a240c:	4604      	mov	r4, r0
 80a240e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2410:	f7fe ff0a 	bl	80a1228 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2414:	28ff      	cmp	r0, #255	; 0xff
 80a2416:	d010      	beq.n	80a243a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2418:	2806      	cmp	r0, #6
 80a241a:	d804      	bhi.n	80a2426 <digitalWrite+0x1c>
 80a241c:	234d      	movs	r3, #77	; 0x4d
 80a241e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2422:	07c3      	lsls	r3, r0, #31
 80a2424:	d409      	bmi.n	80a243a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2426:	4620      	mov	r0, r4
 80a2428:	f7ff ffba 	bl	80a23a0 <pinAvailable>
 80a242c:	b128      	cbz	r0, 80a243a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a242e:	4629      	mov	r1, r5
 80a2430:	4620      	mov	r0, r4
}
 80a2432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2436:	f7fe beff 	b.w	80a1238 <HAL_GPIO_Write>
 80a243a:	bd38      	pop	{r3, r4, r5, pc}

080a243c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a243c:	b510      	push	{r4, lr}
 80a243e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2440:	f7fe fef2 	bl	80a1228 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2444:	3804      	subs	r0, #4
 80a2446:	b2c0      	uxtb	r0, r0
 80a2448:	2801      	cmp	r0, #1
 80a244a:	d908      	bls.n	80a245e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a244c:	4620      	mov	r0, r4
 80a244e:	f7ff ffa7 	bl	80a23a0 <pinAvailable>
 80a2452:	b120      	cbz	r0, 80a245e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2454:	4620      	mov	r0, r4
}
 80a2456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a245a:	f7fe bef5 	b.w	80a1248 <HAL_GPIO_Read>
}
 80a245e:	2000      	movs	r0, #0
 80a2460:	bd10      	pop	{r4, pc}
	...

080a2464 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2464:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2466:	4d0b      	ldr	r5, [pc, #44]	; (80a2494 <_Z19__fetch_global_Wirev+0x30>)
 80a2468:	6829      	ldr	r1, [r5, #0]
 80a246a:	f011 0401 	ands.w	r4, r1, #1
 80a246e:	d10f      	bne.n	80a2490 <_Z19__fetch_global_Wirev+0x2c>
 80a2470:	4628      	mov	r0, r5
 80a2472:	f7fd fe1a 	bl	80a00aa <__cxa_guard_acquire>
 80a2476:	b158      	cbz	r0, 80a2490 <_Z19__fetch_global_Wirev+0x2c>
 80a2478:	4621      	mov	r1, r4
 80a247a:	4807      	ldr	r0, [pc, #28]	; (80a2498 <_Z19__fetch_global_Wirev+0x34>)
 80a247c:	f7ff f8d6 	bl	80a162c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2480:	4628      	mov	r0, r5
 80a2482:	f7fd fe17 	bl	80a00b4 <__cxa_guard_release>
 80a2486:	4a05      	ldr	r2, [pc, #20]	; (80a249c <_Z19__fetch_global_Wirev+0x38>)
 80a2488:	4905      	ldr	r1, [pc, #20]	; (80a24a0 <_Z19__fetch_global_Wirev+0x3c>)
 80a248a:	4803      	ldr	r0, [pc, #12]	; (80a2498 <_Z19__fetch_global_Wirev+0x34>)
 80a248c:	f000 f844 	bl	80a2518 <__aeabi_atexit>
	return wire;
}
 80a2490:	4801      	ldr	r0, [pc, #4]	; (80a2498 <_Z19__fetch_global_Wirev+0x34>)
 80a2492:	bd38      	pop	{r3, r4, r5, pc}
 80a2494:	20000758 	.word	0x20000758
 80a2498:	2000075c 	.word	0x2000075c
 80a249c:	20000070 	.word	0x20000070
 80a24a0:	080a15d5 	.word	0x080a15d5

080a24a4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a24a4:	b513      	push	{r0, r1, r4, lr}
 80a24a6:	4c08      	ldr	r4, [pc, #32]	; (80a24c8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a24a8:	2300      	movs	r3, #0
 80a24aa:	461a      	mov	r2, r3
 80a24ac:	4619      	mov	r1, r3
 80a24ae:	9300      	str	r3, [sp, #0]
 80a24b0:	4620      	mov	r0, r4
 80a24b2:	f7ff f961 	bl	80a1778 <_ZN9IPAddressC1Ehhhh>
 80a24b6:	4620      	mov	r0, r4
 80a24b8:	4a04      	ldr	r2, [pc, #16]	; (80a24cc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a24ba:	4905      	ldr	r1, [pc, #20]	; (80a24d0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a24bc:	b002      	add	sp, #8
 80a24be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a24c2:	f000 b829 	b.w	80a2518 <__aeabi_atexit>
 80a24c6:	bf00      	nop
 80a24c8:	20000770 	.word	0x20000770
 80a24cc:	20000070 	.word	0x20000070
 80a24d0:	080a0389 	.word	0x080a0389

080a24d4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24d4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a24d6:	4c0c      	ldr	r4, [pc, #48]	; (80a2508 <_GLOBAL__sub_I_SPI+0x34>)
 80a24d8:	4e0c      	ldr	r6, [pc, #48]	; (80a250c <_GLOBAL__sub_I_SPI+0x38>)
 80a24da:	4d0d      	ldr	r5, [pc, #52]	; (80a2510 <_GLOBAL__sub_I_SPI+0x3c>)
 80a24dc:	2100      	movs	r1, #0
 80a24de:	4620      	mov	r0, r4
 80a24e0:	f7ff fa7e 	bl	80a19e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a24e4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24e6:	4c0b      	ldr	r4, [pc, #44]	; (80a2514 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a24e8:	4632      	mov	r2, r6
 80a24ea:	4629      	mov	r1, r5
 80a24ec:	f000 f814 	bl	80a2518 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24f0:	2101      	movs	r1, #1
 80a24f2:	4620      	mov	r0, r4
 80a24f4:	f7ff fa74 	bl	80a19e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a24f8:	4632      	mov	r2, r6
 80a24fa:	4629      	mov	r1, r5
 80a24fc:	4620      	mov	r0, r4
 80a24fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2502:	f000 b809 	b.w	80a2518 <__aeabi_atexit>
 80a2506:	bf00      	nop
 80a2508:	20000788 	.word	0x20000788
 80a250c:	20000070 	.word	0x20000070
 80a2510:	080a19d1 	.word	0x080a19d1
 80a2514:	20000798 	.word	0x20000798

080a2518 <__aeabi_atexit>:
 80a2518:	460b      	mov	r3, r1
 80a251a:	4601      	mov	r1, r0
 80a251c:	4618      	mov	r0, r3
 80a251e:	f000 bdc7 	b.w	80a30b0 <__cxa_atexit>

080a2522 <_ZdlPvj>:
 80a2522:	f7fd bdc0 	b.w	80a00a6 <_ZdlPv>

080a2526 <_ZSt25__throw_bad_function_callv>:
 80a2526:	b508      	push	{r3, lr}
 80a2528:	f7ff f84c 	bl	80a15c4 <abort>

080a252c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a252c:	4b24      	ldr	r3, [pc, #144]	; (80a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a252e:	681a      	ldr	r2, [r3, #0]
 80a2530:	07d0      	lsls	r0, r2, #31
 80a2532:	bf5c      	itt	pl
 80a2534:	2201      	movpl	r2, #1
 80a2536:	601a      	strpl	r2, [r3, #0]
 80a2538:	4b22      	ldr	r3, [pc, #136]	; (80a25c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a253a:	681a      	ldr	r2, [r3, #0]
 80a253c:	07d1      	lsls	r1, r2, #31
 80a253e:	bf5c      	itt	pl
 80a2540:	2201      	movpl	r2, #1
 80a2542:	601a      	strpl	r2, [r3, #0]
 80a2544:	4b20      	ldr	r3, [pc, #128]	; (80a25c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2546:	681a      	ldr	r2, [r3, #0]
 80a2548:	07d2      	lsls	r2, r2, #31
 80a254a:	bf5c      	itt	pl
 80a254c:	2201      	movpl	r2, #1
 80a254e:	601a      	strpl	r2, [r3, #0]
 80a2550:	4b1e      	ldr	r3, [pc, #120]	; (80a25cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2552:	681a      	ldr	r2, [r3, #0]
 80a2554:	07d0      	lsls	r0, r2, #31
 80a2556:	bf5c      	itt	pl
 80a2558:	2201      	movpl	r2, #1
 80a255a:	601a      	strpl	r2, [r3, #0]
 80a255c:	4b1c      	ldr	r3, [pc, #112]	; (80a25d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a255e:	681a      	ldr	r2, [r3, #0]
 80a2560:	07d1      	lsls	r1, r2, #31
 80a2562:	bf5c      	itt	pl
 80a2564:	2201      	movpl	r2, #1
 80a2566:	601a      	strpl	r2, [r3, #0]
 80a2568:	4b1a      	ldr	r3, [pc, #104]	; (80a25d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a256a:	681a      	ldr	r2, [r3, #0]
 80a256c:	07d2      	lsls	r2, r2, #31
 80a256e:	bf5c      	itt	pl
 80a2570:	2201      	movpl	r2, #1
 80a2572:	601a      	strpl	r2, [r3, #0]
 80a2574:	4b18      	ldr	r3, [pc, #96]	; (80a25d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2576:	681a      	ldr	r2, [r3, #0]
 80a2578:	07d0      	lsls	r0, r2, #31
 80a257a:	bf5c      	itt	pl
 80a257c:	2201      	movpl	r2, #1
 80a257e:	601a      	strpl	r2, [r3, #0]
 80a2580:	4b16      	ldr	r3, [pc, #88]	; (80a25dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2582:	681a      	ldr	r2, [r3, #0]
 80a2584:	07d1      	lsls	r1, r2, #31
 80a2586:	bf5c      	itt	pl
 80a2588:	2201      	movpl	r2, #1
 80a258a:	601a      	strpl	r2, [r3, #0]
 80a258c:	4b14      	ldr	r3, [pc, #80]	; (80a25e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a258e:	681a      	ldr	r2, [r3, #0]
 80a2590:	07d2      	lsls	r2, r2, #31
 80a2592:	bf5c      	itt	pl
 80a2594:	2201      	movpl	r2, #1
 80a2596:	601a      	strpl	r2, [r3, #0]
 80a2598:	4b12      	ldr	r3, [pc, #72]	; (80a25e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a259a:	681a      	ldr	r2, [r3, #0]
 80a259c:	07d0      	lsls	r0, r2, #31
 80a259e:	bf5c      	itt	pl
 80a25a0:	2201      	movpl	r2, #1
 80a25a2:	601a      	strpl	r2, [r3, #0]
 80a25a4:	4b10      	ldr	r3, [pc, #64]	; (80a25e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a25a6:	681a      	ldr	r2, [r3, #0]
 80a25a8:	07d1      	lsls	r1, r2, #31
 80a25aa:	bf5c      	itt	pl
 80a25ac:	2201      	movpl	r2, #1
 80a25ae:	601a      	strpl	r2, [r3, #0]
 80a25b0:	4b0e      	ldr	r3, [pc, #56]	; (80a25ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a25b2:	681a      	ldr	r2, [r3, #0]
 80a25b4:	07d2      	lsls	r2, r2, #31
 80a25b6:	bf5c      	itt	pl
 80a25b8:	2201      	movpl	r2, #1
 80a25ba:	601a      	strpl	r2, [r3, #0]
 80a25bc:	4770      	bx	lr
 80a25be:	bf00      	nop
 80a25c0:	200007d4 	.word	0x200007d4
 80a25c4:	200007d0 	.word	0x200007d0
 80a25c8:	200007cc 	.word	0x200007cc
 80a25cc:	200007c8 	.word	0x200007c8
 80a25d0:	200007c4 	.word	0x200007c4
 80a25d4:	200007c0 	.word	0x200007c0
 80a25d8:	200007bc 	.word	0x200007bc
 80a25dc:	200007b8 	.word	0x200007b8
 80a25e0:	200007b4 	.word	0x200007b4
 80a25e4:	200007b0 	.word	0x200007b0
 80a25e8:	200007ac 	.word	0x200007ac
 80a25ec:	200007a8 	.word	0x200007a8

080a25f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a25f0:	4b18      	ldr	r3, [pc, #96]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a25f2:	681a      	ldr	r2, [r3, #0]
 80a25f4:	07d1      	lsls	r1, r2, #31
 80a25f6:	bf5c      	itt	pl
 80a25f8:	2201      	movpl	r2, #1
 80a25fa:	601a      	strpl	r2, [r3, #0]
 80a25fc:	4b16      	ldr	r3, [pc, #88]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a25fe:	681a      	ldr	r2, [r3, #0]
 80a2600:	07d2      	lsls	r2, r2, #31
 80a2602:	bf5c      	itt	pl
 80a2604:	2201      	movpl	r2, #1
 80a2606:	601a      	strpl	r2, [r3, #0]
 80a2608:	4b14      	ldr	r3, [pc, #80]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a260a:	681a      	ldr	r2, [r3, #0]
 80a260c:	07d0      	lsls	r0, r2, #31
 80a260e:	bf5c      	itt	pl
 80a2610:	2201      	movpl	r2, #1
 80a2612:	601a      	strpl	r2, [r3, #0]
 80a2614:	4b12      	ldr	r3, [pc, #72]	; (80a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2616:	681a      	ldr	r2, [r3, #0]
 80a2618:	07d1      	lsls	r1, r2, #31
 80a261a:	bf5c      	itt	pl
 80a261c:	2201      	movpl	r2, #1
 80a261e:	601a      	strpl	r2, [r3, #0]
 80a2620:	4b10      	ldr	r3, [pc, #64]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2622:	681a      	ldr	r2, [r3, #0]
 80a2624:	07d2      	lsls	r2, r2, #31
 80a2626:	bf5c      	itt	pl
 80a2628:	2201      	movpl	r2, #1
 80a262a:	601a      	strpl	r2, [r3, #0]
 80a262c:	4b0e      	ldr	r3, [pc, #56]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a262e:	681a      	ldr	r2, [r3, #0]
 80a2630:	07d0      	lsls	r0, r2, #31
 80a2632:	bf5c      	itt	pl
 80a2634:	2201      	movpl	r2, #1
 80a2636:	601a      	strpl	r2, [r3, #0]
 80a2638:	4b0c      	ldr	r3, [pc, #48]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a263a:	681a      	ldr	r2, [r3, #0]
 80a263c:	07d1      	lsls	r1, r2, #31
 80a263e:	bf5c      	itt	pl
 80a2640:	2201      	movpl	r2, #1
 80a2642:	601a      	strpl	r2, [r3, #0]
 80a2644:	4b0a      	ldr	r3, [pc, #40]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2646:	681a      	ldr	r2, [r3, #0]
 80a2648:	07d2      	lsls	r2, r2, #31
 80a264a:	bf5c      	itt	pl
 80a264c:	2201      	movpl	r2, #1
 80a264e:	601a      	strpl	r2, [r3, #0]
 80a2650:	4770      	bx	lr
 80a2652:	bf00      	nop
 80a2654:	200007f4 	.word	0x200007f4
 80a2658:	200007f0 	.word	0x200007f0
 80a265c:	200007ec 	.word	0x200007ec
 80a2660:	200007e8 	.word	0x200007e8
 80a2664:	200007e4 	.word	0x200007e4
 80a2668:	200007e0 	.word	0x200007e0
 80a266c:	200007dc 	.word	0x200007dc
 80a2670:	200007d8 	.word	0x200007d8

080a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2674:	4b18      	ldr	r3, [pc, #96]	; (80a26d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2676:	681a      	ldr	r2, [r3, #0]
 80a2678:	07d1      	lsls	r1, r2, #31
 80a267a:	bf5c      	itt	pl
 80a267c:	2201      	movpl	r2, #1
 80a267e:	601a      	strpl	r2, [r3, #0]
 80a2680:	4b16      	ldr	r3, [pc, #88]	; (80a26dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2682:	681a      	ldr	r2, [r3, #0]
 80a2684:	07d2      	lsls	r2, r2, #31
 80a2686:	bf5c      	itt	pl
 80a2688:	2201      	movpl	r2, #1
 80a268a:	601a      	strpl	r2, [r3, #0]
 80a268c:	4b14      	ldr	r3, [pc, #80]	; (80a26e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a268e:	681a      	ldr	r2, [r3, #0]
 80a2690:	07d0      	lsls	r0, r2, #31
 80a2692:	bf5c      	itt	pl
 80a2694:	2201      	movpl	r2, #1
 80a2696:	601a      	strpl	r2, [r3, #0]
 80a2698:	4b12      	ldr	r3, [pc, #72]	; (80a26e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a269a:	681a      	ldr	r2, [r3, #0]
 80a269c:	07d1      	lsls	r1, r2, #31
 80a269e:	bf5c      	itt	pl
 80a26a0:	2201      	movpl	r2, #1
 80a26a2:	601a      	strpl	r2, [r3, #0]
 80a26a4:	4b10      	ldr	r3, [pc, #64]	; (80a26e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26a6:	681a      	ldr	r2, [r3, #0]
 80a26a8:	07d2      	lsls	r2, r2, #31
 80a26aa:	bf5c      	itt	pl
 80a26ac:	2201      	movpl	r2, #1
 80a26ae:	601a      	strpl	r2, [r3, #0]
 80a26b0:	4b0e      	ldr	r3, [pc, #56]	; (80a26ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26b2:	681a      	ldr	r2, [r3, #0]
 80a26b4:	07d0      	lsls	r0, r2, #31
 80a26b6:	bf5c      	itt	pl
 80a26b8:	2201      	movpl	r2, #1
 80a26ba:	601a      	strpl	r2, [r3, #0]
 80a26bc:	4b0c      	ldr	r3, [pc, #48]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26be:	681a      	ldr	r2, [r3, #0]
 80a26c0:	07d1      	lsls	r1, r2, #31
 80a26c2:	bf5c      	itt	pl
 80a26c4:	2201      	movpl	r2, #1
 80a26c6:	601a      	strpl	r2, [r3, #0]
 80a26c8:	4b0a      	ldr	r3, [pc, #40]	; (80a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26ca:	681a      	ldr	r2, [r3, #0]
 80a26cc:	07d2      	lsls	r2, r2, #31
 80a26ce:	bf5c      	itt	pl
 80a26d0:	2201      	movpl	r2, #1
 80a26d2:	601a      	strpl	r2, [r3, #0]
 80a26d4:	4770      	bx	lr
 80a26d6:	bf00      	nop
 80a26d8:	20000814 	.word	0x20000814
 80a26dc:	20000810 	.word	0x20000810
 80a26e0:	2000080c 	.word	0x2000080c
 80a26e4:	20000808 	.word	0x20000808
 80a26e8:	20000804 	.word	0x20000804
 80a26ec:	20000800 	.word	0x20000800
 80a26f0:	200007fc 	.word	0x200007fc
 80a26f4:	200007f8 	.word	0x200007f8

080a26f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a26f8:	4b24      	ldr	r3, [pc, #144]	; (80a278c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a26fa:	681a      	ldr	r2, [r3, #0]
 80a26fc:	07d0      	lsls	r0, r2, #31
 80a26fe:	bf5c      	itt	pl
 80a2700:	2201      	movpl	r2, #1
 80a2702:	601a      	strpl	r2, [r3, #0]
 80a2704:	4b22      	ldr	r3, [pc, #136]	; (80a2790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2706:	681a      	ldr	r2, [r3, #0]
 80a2708:	07d1      	lsls	r1, r2, #31
 80a270a:	bf5c      	itt	pl
 80a270c:	2201      	movpl	r2, #1
 80a270e:	601a      	strpl	r2, [r3, #0]
 80a2710:	4b20      	ldr	r3, [pc, #128]	; (80a2794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2712:	681a      	ldr	r2, [r3, #0]
 80a2714:	07d2      	lsls	r2, r2, #31
 80a2716:	bf5c      	itt	pl
 80a2718:	2201      	movpl	r2, #1
 80a271a:	601a      	strpl	r2, [r3, #0]
 80a271c:	4b1e      	ldr	r3, [pc, #120]	; (80a2798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a271e:	681a      	ldr	r2, [r3, #0]
 80a2720:	07d0      	lsls	r0, r2, #31
 80a2722:	bf5c      	itt	pl
 80a2724:	2201      	movpl	r2, #1
 80a2726:	601a      	strpl	r2, [r3, #0]
 80a2728:	4b1c      	ldr	r3, [pc, #112]	; (80a279c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a272a:	681a      	ldr	r2, [r3, #0]
 80a272c:	07d1      	lsls	r1, r2, #31
 80a272e:	bf5c      	itt	pl
 80a2730:	2201      	movpl	r2, #1
 80a2732:	601a      	strpl	r2, [r3, #0]
 80a2734:	4b1a      	ldr	r3, [pc, #104]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2736:	681a      	ldr	r2, [r3, #0]
 80a2738:	07d2      	lsls	r2, r2, #31
 80a273a:	bf5c      	itt	pl
 80a273c:	2201      	movpl	r2, #1
 80a273e:	601a      	strpl	r2, [r3, #0]
 80a2740:	4b18      	ldr	r3, [pc, #96]	; (80a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2742:	681a      	ldr	r2, [r3, #0]
 80a2744:	07d0      	lsls	r0, r2, #31
 80a2746:	bf5c      	itt	pl
 80a2748:	2201      	movpl	r2, #1
 80a274a:	601a      	strpl	r2, [r3, #0]
 80a274c:	4b16      	ldr	r3, [pc, #88]	; (80a27a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a274e:	681a      	ldr	r2, [r3, #0]
 80a2750:	07d1      	lsls	r1, r2, #31
 80a2752:	bf5c      	itt	pl
 80a2754:	2201      	movpl	r2, #1
 80a2756:	601a      	strpl	r2, [r3, #0]
 80a2758:	4b14      	ldr	r3, [pc, #80]	; (80a27ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a275a:	681a      	ldr	r2, [r3, #0]
 80a275c:	07d2      	lsls	r2, r2, #31
 80a275e:	bf5c      	itt	pl
 80a2760:	2201      	movpl	r2, #1
 80a2762:	601a      	strpl	r2, [r3, #0]
 80a2764:	4b12      	ldr	r3, [pc, #72]	; (80a27b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2766:	681a      	ldr	r2, [r3, #0]
 80a2768:	07d0      	lsls	r0, r2, #31
 80a276a:	bf5c      	itt	pl
 80a276c:	2201      	movpl	r2, #1
 80a276e:	601a      	strpl	r2, [r3, #0]
 80a2770:	4b10      	ldr	r3, [pc, #64]	; (80a27b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2772:	681a      	ldr	r2, [r3, #0]
 80a2774:	07d1      	lsls	r1, r2, #31
 80a2776:	bf5c      	itt	pl
 80a2778:	2201      	movpl	r2, #1
 80a277a:	601a      	strpl	r2, [r3, #0]
 80a277c:	4b0e      	ldr	r3, [pc, #56]	; (80a27b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a277e:	681a      	ldr	r2, [r3, #0]
 80a2780:	07d2      	lsls	r2, r2, #31
 80a2782:	bf5c      	itt	pl
 80a2784:	2201      	movpl	r2, #1
 80a2786:	601a      	strpl	r2, [r3, #0]
 80a2788:	4770      	bx	lr
 80a278a:	bf00      	nop
 80a278c:	20000844 	.word	0x20000844
 80a2790:	20000840 	.word	0x20000840
 80a2794:	2000083c 	.word	0x2000083c
 80a2798:	20000838 	.word	0x20000838
 80a279c:	20000834 	.word	0x20000834
 80a27a0:	20000830 	.word	0x20000830
 80a27a4:	2000082c 	.word	0x2000082c
 80a27a8:	20000828 	.word	0x20000828
 80a27ac:	20000824 	.word	0x20000824
 80a27b0:	20000820 	.word	0x20000820
 80a27b4:	2000081c 	.word	0x2000081c
 80a27b8:	20000818 	.word	0x20000818

080a27bc <__aeabi_drsub>:
 80a27bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a27c0:	e002      	b.n	80a27c8 <__adddf3>
 80a27c2:	bf00      	nop

080a27c4 <__aeabi_dsub>:
 80a27c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a27c8 <__adddf3>:
 80a27c8:	b530      	push	{r4, r5, lr}
 80a27ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a27ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a27d2:	ea94 0f05 	teq	r4, r5
 80a27d6:	bf08      	it	eq
 80a27d8:	ea90 0f02 	teqeq	r0, r2
 80a27dc:	bf1f      	itttt	ne
 80a27de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a27e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a27e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a27ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a27ee:	f000 80e2 	beq.w	80a29b6 <__adddf3+0x1ee>
 80a27f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a27f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a27fa:	bfb8      	it	lt
 80a27fc:	426d      	neglt	r5, r5
 80a27fe:	dd0c      	ble.n	80a281a <__adddf3+0x52>
 80a2800:	442c      	add	r4, r5
 80a2802:	ea80 0202 	eor.w	r2, r0, r2
 80a2806:	ea81 0303 	eor.w	r3, r1, r3
 80a280a:	ea82 0000 	eor.w	r0, r2, r0
 80a280e:	ea83 0101 	eor.w	r1, r3, r1
 80a2812:	ea80 0202 	eor.w	r2, r0, r2
 80a2816:	ea81 0303 	eor.w	r3, r1, r3
 80a281a:	2d36      	cmp	r5, #54	; 0x36
 80a281c:	bf88      	it	hi
 80a281e:	bd30      	pophi	{r4, r5, pc}
 80a2820:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2824:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2828:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a282c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2830:	d002      	beq.n	80a2838 <__adddf3+0x70>
 80a2832:	4240      	negs	r0, r0
 80a2834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2838:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a283c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2840:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2844:	d002      	beq.n	80a284c <__adddf3+0x84>
 80a2846:	4252      	negs	r2, r2
 80a2848:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a284c:	ea94 0f05 	teq	r4, r5
 80a2850:	f000 80a7 	beq.w	80a29a2 <__adddf3+0x1da>
 80a2854:	f1a4 0401 	sub.w	r4, r4, #1
 80a2858:	f1d5 0e20 	rsbs	lr, r5, #32
 80a285c:	db0d      	blt.n	80a287a <__adddf3+0xb2>
 80a285e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2862:	fa22 f205 	lsr.w	r2, r2, r5
 80a2866:	1880      	adds	r0, r0, r2
 80a2868:	f141 0100 	adc.w	r1, r1, #0
 80a286c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2870:	1880      	adds	r0, r0, r2
 80a2872:	fa43 f305 	asr.w	r3, r3, r5
 80a2876:	4159      	adcs	r1, r3
 80a2878:	e00e      	b.n	80a2898 <__adddf3+0xd0>
 80a287a:	f1a5 0520 	sub.w	r5, r5, #32
 80a287e:	f10e 0e20 	add.w	lr, lr, #32
 80a2882:	2a01      	cmp	r2, #1
 80a2884:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2888:	bf28      	it	cs
 80a288a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a288e:	fa43 f305 	asr.w	r3, r3, r5
 80a2892:	18c0      	adds	r0, r0, r3
 80a2894:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a289c:	d507      	bpl.n	80a28ae <__adddf3+0xe6>
 80a289e:	f04f 0e00 	mov.w	lr, #0
 80a28a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a28a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a28aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80a28ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a28b2:	d31b      	bcc.n	80a28ec <__adddf3+0x124>
 80a28b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a28b8:	d30c      	bcc.n	80a28d4 <__adddf3+0x10c>
 80a28ba:	0849      	lsrs	r1, r1, #1
 80a28bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a28c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a28c4:	f104 0401 	add.w	r4, r4, #1
 80a28c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a28cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a28d0:	f080 809a 	bcs.w	80a2a08 <__adddf3+0x240>
 80a28d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a28d8:	bf08      	it	eq
 80a28da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a28de:	f150 0000 	adcs.w	r0, r0, #0
 80a28e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a28e6:	ea41 0105 	orr.w	r1, r1, r5
 80a28ea:	bd30      	pop	{r4, r5, pc}
 80a28ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a28f0:	4140      	adcs	r0, r0
 80a28f2:	eb41 0101 	adc.w	r1, r1, r1
 80a28f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a28fa:	f1a4 0401 	sub.w	r4, r4, #1
 80a28fe:	d1e9      	bne.n	80a28d4 <__adddf3+0x10c>
 80a2900:	f091 0f00 	teq	r1, #0
 80a2904:	bf04      	itt	eq
 80a2906:	4601      	moveq	r1, r0
 80a2908:	2000      	moveq	r0, #0
 80a290a:	fab1 f381 	clz	r3, r1
 80a290e:	bf08      	it	eq
 80a2910:	3320      	addeq	r3, #32
 80a2912:	f1a3 030b 	sub.w	r3, r3, #11
 80a2916:	f1b3 0220 	subs.w	r2, r3, #32
 80a291a:	da0c      	bge.n	80a2936 <__adddf3+0x16e>
 80a291c:	320c      	adds	r2, #12
 80a291e:	dd08      	ble.n	80a2932 <__adddf3+0x16a>
 80a2920:	f102 0c14 	add.w	ip, r2, #20
 80a2924:	f1c2 020c 	rsb	r2, r2, #12
 80a2928:	fa01 f00c 	lsl.w	r0, r1, ip
 80a292c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2930:	e00c      	b.n	80a294c <__adddf3+0x184>
 80a2932:	f102 0214 	add.w	r2, r2, #20
 80a2936:	bfd8      	it	le
 80a2938:	f1c2 0c20 	rsble	ip, r2, #32
 80a293c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2940:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2944:	bfdc      	itt	le
 80a2946:	ea41 010c 	orrle.w	r1, r1, ip
 80a294a:	4090      	lslle	r0, r2
 80a294c:	1ae4      	subs	r4, r4, r3
 80a294e:	bfa2      	ittt	ge
 80a2950:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2954:	4329      	orrge	r1, r5
 80a2956:	bd30      	popge	{r4, r5, pc}
 80a2958:	ea6f 0404 	mvn.w	r4, r4
 80a295c:	3c1f      	subs	r4, #31
 80a295e:	da1c      	bge.n	80a299a <__adddf3+0x1d2>
 80a2960:	340c      	adds	r4, #12
 80a2962:	dc0e      	bgt.n	80a2982 <__adddf3+0x1ba>
 80a2964:	f104 0414 	add.w	r4, r4, #20
 80a2968:	f1c4 0220 	rsb	r2, r4, #32
 80a296c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2970:	fa01 f302 	lsl.w	r3, r1, r2
 80a2974:	ea40 0003 	orr.w	r0, r0, r3
 80a2978:	fa21 f304 	lsr.w	r3, r1, r4
 80a297c:	ea45 0103 	orr.w	r1, r5, r3
 80a2980:	bd30      	pop	{r4, r5, pc}
 80a2982:	f1c4 040c 	rsb	r4, r4, #12
 80a2986:	f1c4 0220 	rsb	r2, r4, #32
 80a298a:	fa20 f002 	lsr.w	r0, r0, r2
 80a298e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2992:	ea40 0003 	orr.w	r0, r0, r3
 80a2996:	4629      	mov	r1, r5
 80a2998:	bd30      	pop	{r4, r5, pc}
 80a299a:	fa21 f004 	lsr.w	r0, r1, r4
 80a299e:	4629      	mov	r1, r5
 80a29a0:	bd30      	pop	{r4, r5, pc}
 80a29a2:	f094 0f00 	teq	r4, #0
 80a29a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a29aa:	bf06      	itte	eq
 80a29ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a29b0:	3401      	addeq	r4, #1
 80a29b2:	3d01      	subne	r5, #1
 80a29b4:	e74e      	b.n	80a2854 <__adddf3+0x8c>
 80a29b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a29ba:	bf18      	it	ne
 80a29bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a29c0:	d029      	beq.n	80a2a16 <__adddf3+0x24e>
 80a29c2:	ea94 0f05 	teq	r4, r5
 80a29c6:	bf08      	it	eq
 80a29c8:	ea90 0f02 	teqeq	r0, r2
 80a29cc:	d005      	beq.n	80a29da <__adddf3+0x212>
 80a29ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80a29d2:	bf04      	itt	eq
 80a29d4:	4619      	moveq	r1, r3
 80a29d6:	4610      	moveq	r0, r2
 80a29d8:	bd30      	pop	{r4, r5, pc}
 80a29da:	ea91 0f03 	teq	r1, r3
 80a29de:	bf1e      	ittt	ne
 80a29e0:	2100      	movne	r1, #0
 80a29e2:	2000      	movne	r0, #0
 80a29e4:	bd30      	popne	{r4, r5, pc}
 80a29e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a29ea:	d105      	bne.n	80a29f8 <__adddf3+0x230>
 80a29ec:	0040      	lsls	r0, r0, #1
 80a29ee:	4149      	adcs	r1, r1
 80a29f0:	bf28      	it	cs
 80a29f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a29f6:	bd30      	pop	{r4, r5, pc}
 80a29f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a29fc:	bf3c      	itt	cc
 80a29fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2a02:	bd30      	popcc	{r4, r5, pc}
 80a2a04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2a0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a10:	f04f 0000 	mov.w	r0, #0
 80a2a14:	bd30      	pop	{r4, r5, pc}
 80a2a16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a1a:	bf1a      	itte	ne
 80a2a1c:	4619      	movne	r1, r3
 80a2a1e:	4610      	movne	r0, r2
 80a2a20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2a24:	bf1c      	itt	ne
 80a2a26:	460b      	movne	r3, r1
 80a2a28:	4602      	movne	r2, r0
 80a2a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a2e:	bf06      	itte	eq
 80a2a30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2a34:	ea91 0f03 	teqeq	r1, r3
 80a2a38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2a3c:	bd30      	pop	{r4, r5, pc}
 80a2a3e:	bf00      	nop

080a2a40 <__aeabi_ui2d>:
 80a2a40:	f090 0f00 	teq	r0, #0
 80a2a44:	bf04      	itt	eq
 80a2a46:	2100      	moveq	r1, #0
 80a2a48:	4770      	bxeq	lr
 80a2a4a:	b530      	push	{r4, r5, lr}
 80a2a4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a54:	f04f 0500 	mov.w	r5, #0
 80a2a58:	f04f 0100 	mov.w	r1, #0
 80a2a5c:	e750      	b.n	80a2900 <__adddf3+0x138>
 80a2a5e:	bf00      	nop

080a2a60 <__aeabi_i2d>:
 80a2a60:	f090 0f00 	teq	r0, #0
 80a2a64:	bf04      	itt	eq
 80a2a66:	2100      	moveq	r1, #0
 80a2a68:	4770      	bxeq	lr
 80a2a6a:	b530      	push	{r4, r5, lr}
 80a2a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2a78:	bf48      	it	mi
 80a2a7a:	4240      	negmi	r0, r0
 80a2a7c:	f04f 0100 	mov.w	r1, #0
 80a2a80:	e73e      	b.n	80a2900 <__adddf3+0x138>
 80a2a82:	bf00      	nop

080a2a84 <__aeabi_f2d>:
 80a2a84:	0042      	lsls	r2, r0, #1
 80a2a86:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2a8a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2a8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2a92:	bf1f      	itttt	ne
 80a2a94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2a98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2a9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2aa0:	4770      	bxne	lr
 80a2aa2:	f092 0f00 	teq	r2, #0
 80a2aa6:	bf14      	ite	ne
 80a2aa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2aac:	4770      	bxeq	lr
 80a2aae:	b530      	push	{r4, r5, lr}
 80a2ab0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2ab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ab8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2abc:	e720      	b.n	80a2900 <__adddf3+0x138>
 80a2abe:	bf00      	nop

080a2ac0 <__aeabi_ul2d>:
 80a2ac0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ac4:	bf08      	it	eq
 80a2ac6:	4770      	bxeq	lr
 80a2ac8:	b530      	push	{r4, r5, lr}
 80a2aca:	f04f 0500 	mov.w	r5, #0
 80a2ace:	e00a      	b.n	80a2ae6 <__aeabi_l2d+0x16>

080a2ad0 <__aeabi_l2d>:
 80a2ad0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ad4:	bf08      	it	eq
 80a2ad6:	4770      	bxeq	lr
 80a2ad8:	b530      	push	{r4, r5, lr}
 80a2ada:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2ade:	d502      	bpl.n	80a2ae6 <__aeabi_l2d+0x16>
 80a2ae0:	4240      	negs	r0, r0
 80a2ae2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2ae6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2aea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2aee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2af2:	f43f aedc 	beq.w	80a28ae <__adddf3+0xe6>
 80a2af6:	f04f 0203 	mov.w	r2, #3
 80a2afa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2afe:	bf18      	it	ne
 80a2b00:	3203      	addne	r2, #3
 80a2b02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b06:	bf18      	it	ne
 80a2b08:	3203      	addne	r2, #3
 80a2b0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2b0e:	f1c2 0320 	rsb	r3, r2, #32
 80a2b12:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2b16:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b1a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2b1e:	ea40 000e 	orr.w	r0, r0, lr
 80a2b22:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b26:	4414      	add	r4, r2
 80a2b28:	e6c1      	b.n	80a28ae <__adddf3+0xe6>
 80a2b2a:	bf00      	nop

080a2b2c <__aeabi_dmul>:
 80a2b2c:	b570      	push	{r4, r5, r6, lr}
 80a2b2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b3a:	bf1d      	ittte	ne
 80a2b3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b40:	ea94 0f0c 	teqne	r4, ip
 80a2b44:	ea95 0f0c 	teqne	r5, ip
 80a2b48:	f000 f8de 	bleq	80a2d08 <__aeabi_dmul+0x1dc>
 80a2b4c:	442c      	add	r4, r5
 80a2b4e:	ea81 0603 	eor.w	r6, r1, r3
 80a2b52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2b56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2b5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2b5e:	bf18      	it	ne
 80a2b60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2b6c:	d038      	beq.n	80a2be0 <__aeabi_dmul+0xb4>
 80a2b6e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2b72:	f04f 0500 	mov.w	r5, #0
 80a2b76:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2b7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2b7e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2b82:	f04f 0600 	mov.w	r6, #0
 80a2b86:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2b8a:	f09c 0f00 	teq	ip, #0
 80a2b8e:	bf18      	it	ne
 80a2b90:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2b94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2b98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2b9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2ba0:	d204      	bcs.n	80a2bac <__aeabi_dmul+0x80>
 80a2ba2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2ba6:	416d      	adcs	r5, r5
 80a2ba8:	eb46 0606 	adc.w	r6, r6, r6
 80a2bac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2bb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2bb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2bb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2bbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2bc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2bc4:	bf88      	it	hi
 80a2bc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2bca:	d81e      	bhi.n	80a2c0a <__aeabi_dmul+0xde>
 80a2bcc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2bd0:	bf08      	it	eq
 80a2bd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2bd6:	f150 0000 	adcs.w	r0, r0, #0
 80a2bda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2bde:	bd70      	pop	{r4, r5, r6, pc}
 80a2be0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2be4:	ea46 0101 	orr.w	r1, r6, r1
 80a2be8:	ea40 0002 	orr.w	r0, r0, r2
 80a2bec:	ea81 0103 	eor.w	r1, r1, r3
 80a2bf0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2bf4:	bfc2      	ittt	gt
 80a2bf6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2bfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2bfe:	bd70      	popgt	{r4, r5, r6, pc}
 80a2c00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c04:	f04f 0e00 	mov.w	lr, #0
 80a2c08:	3c01      	subs	r4, #1
 80a2c0a:	f300 80ab 	bgt.w	80a2d64 <__aeabi_dmul+0x238>
 80a2c0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2c12:	bfde      	ittt	le
 80a2c14:	2000      	movle	r0, #0
 80a2c16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2c1a:	bd70      	pople	{r4, r5, r6, pc}
 80a2c1c:	f1c4 0400 	rsb	r4, r4, #0
 80a2c20:	3c20      	subs	r4, #32
 80a2c22:	da35      	bge.n	80a2c90 <__aeabi_dmul+0x164>
 80a2c24:	340c      	adds	r4, #12
 80a2c26:	dc1b      	bgt.n	80a2c60 <__aeabi_dmul+0x134>
 80a2c28:	f104 0414 	add.w	r4, r4, #20
 80a2c2c:	f1c4 0520 	rsb	r5, r4, #32
 80a2c30:	fa00 f305 	lsl.w	r3, r0, r5
 80a2c34:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c38:	fa01 f205 	lsl.w	r2, r1, r5
 80a2c3c:	ea40 0002 	orr.w	r0, r0, r2
 80a2c40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2c44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c4c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2c50:	eb42 0106 	adc.w	r1, r2, r6
 80a2c54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c58:	bf08      	it	eq
 80a2c5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c5e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c60:	f1c4 040c 	rsb	r4, r4, #12
 80a2c64:	f1c4 0520 	rsb	r5, r4, #32
 80a2c68:	fa00 f304 	lsl.w	r3, r0, r4
 80a2c6c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2c70:	fa01 f204 	lsl.w	r2, r1, r4
 80a2c74:	ea40 0002 	orr.w	r0, r0, r2
 80a2c78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2c7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c80:	f141 0100 	adc.w	r1, r1, #0
 80a2c84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c88:	bf08      	it	eq
 80a2c8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c8e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c90:	f1c4 0520 	rsb	r5, r4, #32
 80a2c94:	fa00 f205 	lsl.w	r2, r0, r5
 80a2c98:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2c9c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2ca0:	fa01 f205 	lsl.w	r2, r1, r5
 80a2ca4:	ea43 0302 	orr.w	r3, r3, r2
 80a2ca8:	fa21 f004 	lsr.w	r0, r1, r4
 80a2cac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cb0:	fa21 f204 	lsr.w	r2, r1, r4
 80a2cb4:	ea20 0002 	bic.w	r0, r0, r2
 80a2cb8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cc0:	bf08      	it	eq
 80a2cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cc6:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc8:	f094 0f00 	teq	r4, #0
 80a2ccc:	d10f      	bne.n	80a2cee <__aeabi_dmul+0x1c2>
 80a2cce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2cd2:	0040      	lsls	r0, r0, #1
 80a2cd4:	eb41 0101 	adc.w	r1, r1, r1
 80a2cd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2cdc:	bf08      	it	eq
 80a2cde:	3c01      	subeq	r4, #1
 80a2ce0:	d0f7      	beq.n	80a2cd2 <__aeabi_dmul+0x1a6>
 80a2ce2:	ea41 0106 	orr.w	r1, r1, r6
 80a2ce6:	f095 0f00 	teq	r5, #0
 80a2cea:	bf18      	it	ne
 80a2cec:	4770      	bxne	lr
 80a2cee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2cf2:	0052      	lsls	r2, r2, #1
 80a2cf4:	eb43 0303 	adc.w	r3, r3, r3
 80a2cf8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2cfc:	bf08      	it	eq
 80a2cfe:	3d01      	subeq	r5, #1
 80a2d00:	d0f7      	beq.n	80a2cf2 <__aeabi_dmul+0x1c6>
 80a2d02:	ea43 0306 	orr.w	r3, r3, r6
 80a2d06:	4770      	bx	lr
 80a2d08:	ea94 0f0c 	teq	r4, ip
 80a2d0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2d10:	bf18      	it	ne
 80a2d12:	ea95 0f0c 	teqne	r5, ip
 80a2d16:	d00c      	beq.n	80a2d32 <__aeabi_dmul+0x206>
 80a2d18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d1c:	bf18      	it	ne
 80a2d1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d22:	d1d1      	bne.n	80a2cc8 <__aeabi_dmul+0x19c>
 80a2d24:	ea81 0103 	eor.w	r1, r1, r3
 80a2d28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d2c:	f04f 0000 	mov.w	r0, #0
 80a2d30:	bd70      	pop	{r4, r5, r6, pc}
 80a2d32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d36:	bf06      	itte	eq
 80a2d38:	4610      	moveq	r0, r2
 80a2d3a:	4619      	moveq	r1, r3
 80a2d3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d40:	d019      	beq.n	80a2d76 <__aeabi_dmul+0x24a>
 80a2d42:	ea94 0f0c 	teq	r4, ip
 80a2d46:	d102      	bne.n	80a2d4e <__aeabi_dmul+0x222>
 80a2d48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2d4c:	d113      	bne.n	80a2d76 <__aeabi_dmul+0x24a>
 80a2d4e:	ea95 0f0c 	teq	r5, ip
 80a2d52:	d105      	bne.n	80a2d60 <__aeabi_dmul+0x234>
 80a2d54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2d58:	bf1c      	itt	ne
 80a2d5a:	4610      	movne	r0, r2
 80a2d5c:	4619      	movne	r1, r3
 80a2d5e:	d10a      	bne.n	80a2d76 <__aeabi_dmul+0x24a>
 80a2d60:	ea81 0103 	eor.w	r1, r1, r3
 80a2d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2d70:	f04f 0000 	mov.w	r0, #0
 80a2d74:	bd70      	pop	{r4, r5, r6, pc}
 80a2d76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2d7e:	bd70      	pop	{r4, r5, r6, pc}

080a2d80 <__aeabi_ddiv>:
 80a2d80:	b570      	push	{r4, r5, r6, lr}
 80a2d82:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2d86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2d8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2d8e:	bf1d      	ittte	ne
 80a2d90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2d94:	ea94 0f0c 	teqne	r4, ip
 80a2d98:	ea95 0f0c 	teqne	r5, ip
 80a2d9c:	f000 f8a7 	bleq	80a2eee <__aeabi_ddiv+0x16e>
 80a2da0:	eba4 0405 	sub.w	r4, r4, r5
 80a2da4:	ea81 0e03 	eor.w	lr, r1, r3
 80a2da8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2dac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2db0:	f000 8088 	beq.w	80a2ec4 <__aeabi_ddiv+0x144>
 80a2db4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2db8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2dbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2dc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2dc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2dc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2dcc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2dd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2dd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2dd8:	429d      	cmp	r5, r3
 80a2dda:	bf08      	it	eq
 80a2ddc:	4296      	cmpeq	r6, r2
 80a2dde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2de2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2de6:	d202      	bcs.n	80a2dee <__aeabi_ddiv+0x6e>
 80a2de8:	085b      	lsrs	r3, r3, #1
 80a2dea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2dee:	1ab6      	subs	r6, r6, r2
 80a2df0:	eb65 0503 	sbc.w	r5, r5, r3
 80a2df4:	085b      	lsrs	r3, r3, #1
 80a2df6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2dfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2dfe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2e02:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e06:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e0a:	bf22      	ittt	cs
 80a2e0c:	1ab6      	subcs	r6, r6, r2
 80a2e0e:	4675      	movcs	r5, lr
 80a2e10:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e14:	085b      	lsrs	r3, r3, #1
 80a2e16:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e1a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e22:	bf22      	ittt	cs
 80a2e24:	1ab6      	subcs	r6, r6, r2
 80a2e26:	4675      	movcs	r5, lr
 80a2e28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e2c:	085b      	lsrs	r3, r3, #1
 80a2e2e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e32:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e36:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e3a:	bf22      	ittt	cs
 80a2e3c:	1ab6      	subcs	r6, r6, r2
 80a2e3e:	4675      	movcs	r5, lr
 80a2e40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e44:	085b      	lsrs	r3, r3, #1
 80a2e46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e4a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e52:	bf22      	ittt	cs
 80a2e54:	1ab6      	subcs	r6, r6, r2
 80a2e56:	4675      	movcs	r5, lr
 80a2e58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e5c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2e60:	d018      	beq.n	80a2e94 <__aeabi_ddiv+0x114>
 80a2e62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2e66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2e6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2e6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2e72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2e76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2e7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2e7e:	d1c0      	bne.n	80a2e02 <__aeabi_ddiv+0x82>
 80a2e80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e84:	d10b      	bne.n	80a2e9e <__aeabi_ddiv+0x11e>
 80a2e86:	ea41 0100 	orr.w	r1, r1, r0
 80a2e8a:	f04f 0000 	mov.w	r0, #0
 80a2e8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2e92:	e7b6      	b.n	80a2e02 <__aeabi_ddiv+0x82>
 80a2e94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e98:	bf04      	itt	eq
 80a2e9a:	4301      	orreq	r1, r0
 80a2e9c:	2000      	moveq	r0, #0
 80a2e9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2ea2:	bf88      	it	hi
 80a2ea4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2ea8:	f63f aeaf 	bhi.w	80a2c0a <__aeabi_dmul+0xde>
 80a2eac:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2eb0:	bf04      	itt	eq
 80a2eb2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2eb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2eba:	f150 0000 	adcs.w	r0, r0, #0
 80a2ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2ec2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ec4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2ec8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2ecc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2ed0:	bfc2      	ittt	gt
 80a2ed2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2ed6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2eda:	bd70      	popgt	{r4, r5, r6, pc}
 80a2edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ee0:	f04f 0e00 	mov.w	lr, #0
 80a2ee4:	3c01      	subs	r4, #1
 80a2ee6:	e690      	b.n	80a2c0a <__aeabi_dmul+0xde>
 80a2ee8:	ea45 0e06 	orr.w	lr, r5, r6
 80a2eec:	e68d      	b.n	80a2c0a <__aeabi_dmul+0xde>
 80a2eee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2ef2:	ea94 0f0c 	teq	r4, ip
 80a2ef6:	bf08      	it	eq
 80a2ef8:	ea95 0f0c 	teqeq	r5, ip
 80a2efc:	f43f af3b 	beq.w	80a2d76 <__aeabi_dmul+0x24a>
 80a2f00:	ea94 0f0c 	teq	r4, ip
 80a2f04:	d10a      	bne.n	80a2f1c <__aeabi_ddiv+0x19c>
 80a2f06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f0a:	f47f af34 	bne.w	80a2d76 <__aeabi_dmul+0x24a>
 80a2f0e:	ea95 0f0c 	teq	r5, ip
 80a2f12:	f47f af25 	bne.w	80a2d60 <__aeabi_dmul+0x234>
 80a2f16:	4610      	mov	r0, r2
 80a2f18:	4619      	mov	r1, r3
 80a2f1a:	e72c      	b.n	80a2d76 <__aeabi_dmul+0x24a>
 80a2f1c:	ea95 0f0c 	teq	r5, ip
 80a2f20:	d106      	bne.n	80a2f30 <__aeabi_ddiv+0x1b0>
 80a2f22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f26:	f43f aefd 	beq.w	80a2d24 <__aeabi_dmul+0x1f8>
 80a2f2a:	4610      	mov	r0, r2
 80a2f2c:	4619      	mov	r1, r3
 80a2f2e:	e722      	b.n	80a2d76 <__aeabi_dmul+0x24a>
 80a2f30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f34:	bf18      	it	ne
 80a2f36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f3a:	f47f aec5 	bne.w	80a2cc8 <__aeabi_dmul+0x19c>
 80a2f3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2f42:	f47f af0d 	bne.w	80a2d60 <__aeabi_dmul+0x234>
 80a2f46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2f4a:	f47f aeeb 	bne.w	80a2d24 <__aeabi_dmul+0x1f8>
 80a2f4e:	e712      	b.n	80a2d76 <__aeabi_dmul+0x24a>

080a2f50 <__gedf2>:
 80a2f50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2f54:	e006      	b.n	80a2f64 <__cmpdf2+0x4>
 80a2f56:	bf00      	nop

080a2f58 <__ledf2>:
 80a2f58:	f04f 0c01 	mov.w	ip, #1
 80a2f5c:	e002      	b.n	80a2f64 <__cmpdf2+0x4>
 80a2f5e:	bf00      	nop

080a2f60 <__cmpdf2>:
 80a2f60:	f04f 0c01 	mov.w	ip, #1
 80a2f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2f68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2f6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2f74:	bf18      	it	ne
 80a2f76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2f7a:	d01b      	beq.n	80a2fb4 <__cmpdf2+0x54>
 80a2f7c:	b001      	add	sp, #4
 80a2f7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2f82:	bf0c      	ite	eq
 80a2f84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2f88:	ea91 0f03 	teqne	r1, r3
 80a2f8c:	bf02      	ittt	eq
 80a2f8e:	ea90 0f02 	teqeq	r0, r2
 80a2f92:	2000      	moveq	r0, #0
 80a2f94:	4770      	bxeq	lr
 80a2f96:	f110 0f00 	cmn.w	r0, #0
 80a2f9a:	ea91 0f03 	teq	r1, r3
 80a2f9e:	bf58      	it	pl
 80a2fa0:	4299      	cmppl	r1, r3
 80a2fa2:	bf08      	it	eq
 80a2fa4:	4290      	cmpeq	r0, r2
 80a2fa6:	bf2c      	ite	cs
 80a2fa8:	17d8      	asrcs	r0, r3, #31
 80a2faa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2fae:	f040 0001 	orr.w	r0, r0, #1
 80a2fb2:	4770      	bx	lr
 80a2fb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2fb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fbc:	d102      	bne.n	80a2fc4 <__cmpdf2+0x64>
 80a2fbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2fc2:	d107      	bne.n	80a2fd4 <__cmpdf2+0x74>
 80a2fc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fcc:	d1d6      	bne.n	80a2f7c <__cmpdf2+0x1c>
 80a2fce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2fd2:	d0d3      	beq.n	80a2f7c <__cmpdf2+0x1c>
 80a2fd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2fd8:	4770      	bx	lr
 80a2fda:	bf00      	nop

080a2fdc <__aeabi_cdrcmple>:
 80a2fdc:	4684      	mov	ip, r0
 80a2fde:	4610      	mov	r0, r2
 80a2fe0:	4662      	mov	r2, ip
 80a2fe2:	468c      	mov	ip, r1
 80a2fe4:	4619      	mov	r1, r3
 80a2fe6:	4663      	mov	r3, ip
 80a2fe8:	e000      	b.n	80a2fec <__aeabi_cdcmpeq>
 80a2fea:	bf00      	nop

080a2fec <__aeabi_cdcmpeq>:
 80a2fec:	b501      	push	{r0, lr}
 80a2fee:	f7ff ffb7 	bl	80a2f60 <__cmpdf2>
 80a2ff2:	2800      	cmp	r0, #0
 80a2ff4:	bf48      	it	mi
 80a2ff6:	f110 0f00 	cmnmi.w	r0, #0
 80a2ffa:	bd01      	pop	{r0, pc}

080a2ffc <__aeabi_dcmpeq>:
 80a2ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3000:	f7ff fff4 	bl	80a2fec <__aeabi_cdcmpeq>
 80a3004:	bf0c      	ite	eq
 80a3006:	2001      	moveq	r0, #1
 80a3008:	2000      	movne	r0, #0
 80a300a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a300e:	bf00      	nop

080a3010 <__aeabi_dcmplt>:
 80a3010:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3014:	f7ff ffea 	bl	80a2fec <__aeabi_cdcmpeq>
 80a3018:	bf34      	ite	cc
 80a301a:	2001      	movcc	r0, #1
 80a301c:	2000      	movcs	r0, #0
 80a301e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3022:	bf00      	nop

080a3024 <__aeabi_dcmple>:
 80a3024:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3028:	f7ff ffe0 	bl	80a2fec <__aeabi_cdcmpeq>
 80a302c:	bf94      	ite	ls
 80a302e:	2001      	movls	r0, #1
 80a3030:	2000      	movhi	r0, #0
 80a3032:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3036:	bf00      	nop

080a3038 <__aeabi_dcmpge>:
 80a3038:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a303c:	f7ff ffce 	bl	80a2fdc <__aeabi_cdrcmple>
 80a3040:	bf94      	ite	ls
 80a3042:	2001      	movls	r0, #1
 80a3044:	2000      	movhi	r0, #0
 80a3046:	f85d fb08 	ldr.w	pc, [sp], #8
 80a304a:	bf00      	nop

080a304c <__aeabi_dcmpgt>:
 80a304c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3050:	f7ff ffc4 	bl	80a2fdc <__aeabi_cdrcmple>
 80a3054:	bf34      	ite	cc
 80a3056:	2001      	movcc	r0, #1
 80a3058:	2000      	movcs	r0, #0
 80a305a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a305e:	bf00      	nop

080a3060 <__aeabi_d2iz>:
 80a3060:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3068:	d215      	bcs.n	80a3096 <__aeabi_d2iz+0x36>
 80a306a:	d511      	bpl.n	80a3090 <__aeabi_d2iz+0x30>
 80a306c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3074:	d912      	bls.n	80a309c <__aeabi_d2iz+0x3c>
 80a3076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a307a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a307e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3086:	fa23 f002 	lsr.w	r0, r3, r2
 80a308a:	bf18      	it	ne
 80a308c:	4240      	negne	r0, r0
 80a308e:	4770      	bx	lr
 80a3090:	f04f 0000 	mov.w	r0, #0
 80a3094:	4770      	bx	lr
 80a3096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a309a:	d105      	bne.n	80a30a8 <__aeabi_d2iz+0x48>
 80a309c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a30a0:	bf08      	it	eq
 80a30a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a30a6:	4770      	bx	lr
 80a30a8:	f04f 0000 	mov.w	r0, #0
 80a30ac:	4770      	bx	lr
 80a30ae:	bf00      	nop

080a30b0 <__cxa_atexit>:
 80a30b0:	b510      	push	{r4, lr}
 80a30b2:	4c05      	ldr	r4, [pc, #20]	; (80a30c8 <__cxa_atexit+0x18>)
 80a30b4:	4613      	mov	r3, r2
 80a30b6:	b12c      	cbz	r4, 80a30c4 <__cxa_atexit+0x14>
 80a30b8:	460a      	mov	r2, r1
 80a30ba:	4601      	mov	r1, r0
 80a30bc:	2002      	movs	r0, #2
 80a30be:	f3af 8000 	nop.w
 80a30c2:	bd10      	pop	{r4, pc}
 80a30c4:	4620      	mov	r0, r4
 80a30c6:	bd10      	pop	{r4, pc}
 80a30c8:	00000000 	.word	0x00000000

080a30cc <memcpy>:
 80a30cc:	b510      	push	{r4, lr}
 80a30ce:	1e43      	subs	r3, r0, #1
 80a30d0:	440a      	add	r2, r1
 80a30d2:	4291      	cmp	r1, r2
 80a30d4:	d004      	beq.n	80a30e0 <memcpy+0x14>
 80a30d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a30da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a30de:	e7f8      	b.n	80a30d2 <memcpy+0x6>
 80a30e0:	bd10      	pop	{r4, pc}

080a30e2 <memset>:
 80a30e2:	4603      	mov	r3, r0
 80a30e4:	4402      	add	r2, r0
 80a30e6:	4293      	cmp	r3, r2
 80a30e8:	d002      	beq.n	80a30f0 <memset+0xe>
 80a30ea:	f803 1b01 	strb.w	r1, [r3], #1
 80a30ee:	e7fa      	b.n	80a30e6 <memset+0x4>
 80a30f0:	4770      	bx	lr
	...

080a30f4 <srand>:
 80a30f4:	b538      	push	{r3, r4, r5, lr}
 80a30f6:	4b12      	ldr	r3, [pc, #72]	; (80a3140 <srand+0x4c>)
 80a30f8:	4605      	mov	r5, r0
 80a30fa:	681c      	ldr	r4, [r3, #0]
 80a30fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a30fe:	b9d3      	cbnz	r3, 80a3136 <srand+0x42>
 80a3100:	2018      	movs	r0, #24
 80a3102:	f7fe fa47 	bl	80a1594 <malloc>
 80a3106:	f243 330e 	movw	r3, #13070	; 0x330e
 80a310a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a310c:	8003      	strh	r3, [r0, #0]
 80a310e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3112:	8043      	strh	r3, [r0, #2]
 80a3114:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3118:	8083      	strh	r3, [r0, #4]
 80a311a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a311e:	80c3      	strh	r3, [r0, #6]
 80a3120:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3124:	8103      	strh	r3, [r0, #8]
 80a3126:	2305      	movs	r3, #5
 80a3128:	8143      	strh	r3, [r0, #10]
 80a312a:	230b      	movs	r3, #11
 80a312c:	8183      	strh	r3, [r0, #12]
 80a312e:	2201      	movs	r2, #1
 80a3130:	2300      	movs	r3, #0
 80a3132:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3138:	2200      	movs	r2, #0
 80a313a:	611d      	str	r5, [r3, #16]
 80a313c:	615a      	str	r2, [r3, #20]
 80a313e:	bd38      	pop	{r3, r4, r5, pc}
 80a3140:	2000006c 	.word	0x2000006c

080a3144 <strlen>:
 80a3144:	4603      	mov	r3, r0
 80a3146:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a314a:	2a00      	cmp	r2, #0
 80a314c:	d1fb      	bne.n	80a3146 <strlen+0x2>
 80a314e:	1a18      	subs	r0, r3, r0
 80a3150:	3801      	subs	r0, #1
 80a3152:	4770      	bx	lr

080a3154 <dynalib_user>:
 80a3154:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3164:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a3174:	7265 525f 6365 6965 6576 0072               er_Receiver.

080a3180 <_ZTV7TwoWire>:
	...
 80a3188:	15d5 080a 161f 080a 15f7 080a 15d7 080a     ................
 80a3198:	15ff 080a 1607 080a 160f 080a 1617 080a     ................

080a31a8 <_ZTV9IPAddress>:
	...
 80a31b0:	16d9 080a 0389 080a 03ad 080a 6162 6475     ............baud
 80a31c0:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a31d0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a31e0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a31f0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3200:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3210:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3220:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3230:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3240:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3250:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3260:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3270:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3280:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3290:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a32a0 <_ZTVN5spark12NetworkClassE>:
	...
 80a32a8:	17b9 080a 17c3 080a 17cd 080a 17d7 080a     ................
 80a32b8:	17e1 080a 17ed 080a 17f9 080a 1805 080a     ................
 80a32c8:	180d 080a 1817 080a 1821 080a               ........!...

080a32d4 <_ZTV8SPIClass>:
	...
 80a32dc:	19d1 080a 19d3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a32ec:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a32fc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a330c:	0000 0000                                   ....

080a3310 <_ZTV3UDP>:
	...
 80a3318:	038d 080a 03bb 080a 1b0f 080a 1c2f 080a     ............/...
 80a3328:	1b07 080a 1b25 080a 1b43 080a 1b5d 080a     ....%...C...]...
 80a3338:	1b7f 080a 1bc9 080a 1beb 080a 1d81 080a     ................
 80a3348:	1c95 080a 1af1 080a 1e91 080a 1cfd 080a     ................
 80a3358:	1db9 080a 1ebf 080a 1c59 080a 1afd 080a     ........Y.......
 80a3368:	1d61 080a 1b03 080a 1b5f 080a fff0 ffff     a......._.......
 80a3378:	0000 0000 1b77 080a                         ....w...

080a3380 <_ZTV11USARTSerial>:
	...
 80a3388:	1ef7 080a 1f47 080a 1f55 080a 189d 080a     ....G...U.......
 80a3398:	1f0b 080a 1f2d 080a 1f19 080a 1f41 080a     ....-.......A...
 80a33a8:	1ef9 080a 1efd 080a                         ........

080a33b0 <_ZTV9USBSerial>:
	...
 80a33b8:	1ffd 080a 204d 080a 205b 080a 189d 080a     ....M ..[ ......
 80a33c8:	2039 080a 1fff 080a 2015 080a 2047 080a     9 ....... ..G ..
 80a33d8:	202b 080a 1ff9 080a                         + ......

080a33e0 <_ZTVN5spark9WiFiClassE>:
	...
 80a33e8:	224b 080a 2241 080a 2237 080a 21a9 080a     K"..A"..7"...!..
 80a33f8:	222b 080a 221f 080a 2213 080a 220b 080a     +"..."..."..."..
 80a3408:	2201 080a 21f7 080a 21b3 080a               ."...!...!..

080a3414 <__sf_fake_stdin>:
	...

080a3434 <__sf_fake_stdout>:
	...

080a3454 <__sf_fake_stderr>:
	...
 80a3474:	0043                                        C.

080a3476 <link_const_variable_data_end>:
	...

080a3478 <link_constructors_location>:
 80a3478:	080a04e1 	.word	0x080a04e1
 80a347c:	080a0559 	.word	0x080a0559
 80a3480:	080a0eb1 	.word	0x080a0eb1
 80a3484:	080a11d3 	.word	0x080a11d3
 80a3488:	080a17a9 	.word	0x080a17a9
 80a348c:	080a1889 	.word	0x080a1889
 80a3490:	080a19b5 	.word	0x080a19b5
 80a3494:	080a1ac5 	.word	0x080a1ac5
 80a3498:	080a1add 	.word	0x080a1add
 80a349c:	080a2255 	.word	0x080a2255
 80a34a0:	080a24a5 	.word	0x080a24a5
 80a34a4:	080a24d5 	.word	0x080a24d5
 80a34a8:	080a252d 	.word	0x080a252d
 80a34ac:	080a25f1 	.word	0x080a25f1
 80a34b0:	080a2675 	.word	0x080a2675
 80a34b4:	080a26f9 	.word	0x080a26f9

080a34b8 <link_constructors_end>:
	...
