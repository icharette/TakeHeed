
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.1-rc.1/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005be0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5c00  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a5c04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000708  20000088  20000088  00040088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5c8c  080a5c8c  00035c8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5cb4  080a5cb4  00035cb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000caf6e  00000000  00000000  00035cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012aae  00000000  00000000  00100c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019622  00000000  00000000  001136d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002480  00000000  00000000  0012ccf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038e8  00000000  00000000  0012f176  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a0f6  00000000  00000000  00132a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c7e7  00000000  00000000  0015cb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aab45  00000000  00000000  0018933b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c800  00000000  00000000  00233e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 fa79 	bl	80a5528 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fa7e 	bl	80a553e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5c04 	.word	0x080a5c04
 80a0050:	20000088 	.word	0x20000088
 80a0054:	20000088 	.word	0x20000088
 80a0058:	20000790 	.word	0x20000790
 80a005c:	20000790 	.word	0x20000790

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 f885 	bl	80a4170 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a5bb0 	.word	0x080a5bb0
 80a0088:	080a5bf8 	.word	0x080a5bf8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8e8 	b.w	80a0260 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fccf 	bl	80a0a34 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f004 b82b 	b.w	80a40f4 <_post_loop>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f003 b831 	b.w	80a3104 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f003 b837 	b.w	80a3114 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b6:	4770      	bx	lr

080a00b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <_ZN3UDPD1Ev+0x1c>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	3364      	adds	r3, #100	; 0x64
 80a00c2:	6103      	str	r3, [r0, #16]
 80a00c4:	f003 fc94 	bl	80a39f0 <_ZN3UDP4stopEv>
 80a00c8:	4620      	mov	r0, r4
 80a00ca:	f003 fdc9 	bl	80a3c60 <_ZN3UDP13releaseBufferEv>
 80a00ce:	4620      	mov	r0, r4
 80a00d0:	bd10      	pop	{r4, pc}
 80a00d2:	bf00      	nop
 80a00d4:	080a5a50 	.word	0x080a5a50

080a00d8 <_ZN9IPAddressD0Ev>:
 80a00d8:	b510      	push	{r4, lr}
 80a00da:	4604      	mov	r4, r0
 80a00dc:	2118      	movs	r1, #24
 80a00de:	f004 f920 	bl	80a4322 <_ZdlPvj>
 80a00e2:	4620      	mov	r0, r4
 80a00e4:	bd10      	pop	{r4, pc}

080a00e6 <_ZN3UDPD0Ev>:
 80a00e6:	b510      	push	{r4, lr}
 80a00e8:	4604      	mov	r4, r0
 80a00ea:	f7ff ffe5 	bl	80a00b8 <_ZN3UDPD1Ev>
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	214c      	movs	r1, #76	; 0x4c
 80a00f2:	f004 f916 	bl	80a4322 <_ZdlPvj>
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	bd10      	pop	{r4, pc}
	...

080a00fc <_Z15calibrateSensorv>:
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
}

void calibrateSensor(){
 80a00fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0100:	f003 ff04 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0104:	4927      	ldr	r1, [pc, #156]	; (80a01a4 <_Z15calibrateSensorv+0xa8>)
 80a0106:	f003 f987 	bl	80a3418 <_ZN5Print5printEPKc>
  for(int i = 0; i < count; i++){
      imu.readAccel();
 80a010a:	4e27      	ldr	r6, [pc, #156]	; (80a01a8 <_Z15calibrateSensorv+0xac>)

    refX += imu.calcAccel(imu.ax);
 80a010c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80a01b8 <_Z15calibrateSensorv+0xbc>
    refY += imu.calcAccel(imu.ay);
 80a0110:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80a01bc <_Z15calibrateSensorv+0xc0>
  Serial.println("Calibration finished");
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0114:	2564      	movs	r5, #100	; 0x64
  for(int i = 0; i < count; i++){
      imu.readAccel();
 80a0116:	4824      	ldr	r0, [pc, #144]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a0118:	f001 f87a 	bl	80a1210 <_ZN7LSM9DS19readAccelEv>

    refX += imu.calcAccel(imu.ax);
 80a011c:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a0120:	4821      	ldr	r0, [pc, #132]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a0122:	f000 fd56 	bl	80a0bd2 <_ZN7LSM9DS19calcAccelEs>
 80a0126:	4601      	mov	r1, r0
 80a0128:	f8db 0000 	ldr.w	r0, [fp]
 80a012c:	f004 fefa 	bl	80a4f24 <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a0130:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
 80a0134:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a0138:	481b      	ldr	r0, [pc, #108]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a013a:	f000 fd4a 	bl	80a0bd2 <_ZN7LSM9DS19calcAccelEs>
 80a013e:	4601      	mov	r1, r0
 80a0140:	f8da 0000 	ldr.w	r0, [sl]
 80a0144:	f004 feee 	bl	80a4f24 <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a0148:	4c18      	ldr	r4, [pc, #96]	; (80a01ac <_Z15calibrateSensorv+0xb0>)
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a014a:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a014e:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a0152:	4815      	ldr	r0, [pc, #84]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a0154:	f000 fd3d 	bl	80a0bd2 <_ZN7LSM9DS19calcAccelEs>
 80a0158:	6821      	ldr	r1, [r4, #0]
 80a015a:	f004 fee3 	bl	80a4f24 <__addsf3>
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a015e:	3d01      	subs	r5, #1
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
 80a0160:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a01b8 <_Z15calibrateSensorv+0xbc>
    refY += imu.calcAccel(imu.ay);
 80a0164:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a01bc <_Z15calibrateSensorv+0xc0>
    refZ += imu.calcAccel(imu.az);
 80a0168:	4607      	mov	r7, r0
 80a016a:	6020      	str	r0, [r4, #0]
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a016c:	d1d3      	bne.n	80a0116 <_Z15calibrateSensorv+0x1a>

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a016e:	f8d9 0000 	ldr.w	r0, [r9]
 80a0172:	490f      	ldr	r1, [pc, #60]	; (80a01b0 <_Z15calibrateSensorv+0xb4>)
 80a0174:	f005 f892 	bl	80a529c <__aeabi_fdiv>
  refY = refY / count;
 80a0178:	490d      	ldr	r1, [pc, #52]	; (80a01b0 <_Z15calibrateSensorv+0xb4>)

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a017a:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / count;
 80a017e:	f8d8 0000 	ldr.w	r0, [r8]
 80a0182:	f005 f88b 	bl	80a529c <__aeabi_fdiv>
  refZ = refZ / count; 
 80a0186:	490a      	ldr	r1, [pc, #40]	; (80a01b0 <_Z15calibrateSensorv+0xb4>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
 80a0188:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / count; 
 80a018c:	4638      	mov	r0, r7
 80a018e:	f005 f885 	bl	80a529c <__aeabi_fdiv>
 80a0192:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a0194:	f003 feba 	bl	80a3f0c <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a0198:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
 80a019c:	4905      	ldr	r1, [pc, #20]	; (80a01b4 <_Z15calibrateSensorv+0xb8>)
 80a019e:	f003 b954 	b.w	80a344a <_ZN5Print7printlnEPKc>
 80a01a2:	bf00      	nop
 80a01a4:	080a564c 	.word	0x080a564c
 80a01a8:	200000b8 	.word	0x200000b8
 80a01ac:	2000017c 	.word	0x2000017c
 80a01b0:	42c80000 	.word	0x42c80000
 80a01b4:	080a5665 	.word	0x080a5665
 80a01b8:	20000174 	.word	0x20000174
 80a01bc:	20000178 	.word	0x20000178

080a01c0 <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a01c0:	b538      	push	{r3, r4, r5, lr}


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01c2:	4c1e      	ldr	r4, [pc, #120]	; (80a023c <_Z8setupImuv+0x7c>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a01c4:	231e      	movs	r3, #30
 80a01c6:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01c8:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a01ca:	4a1d      	ldr	r2, [pc, #116]	; (80a0240 <_Z8setupImuv+0x80>)
void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01cc:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a01ce:	4b1d      	ldr	r3, [pc, #116]	; (80a0244 <_Z8setupImuv+0x84>)
const int16_t K3 = 446;

void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01d0:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a01d2:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a01d4:	4b1c      	ldr	r3, [pc, #112]	; (80a0248 <_Z8setupImuv+0x88>)
 80a01d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

  if (!imu.begin())
 80a01da:	4620      	mov	r0, r4
const int16_t K3 = 446;

void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01dc:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a01de:	601a      	str	r2, [r3, #0]

  if (!imu.begin())
 80a01e0:	f000 ff73 	bl	80a10ca <_ZN7LSM9DS15beginEv>
 80a01e4:	b998      	cbnz	r0, 80a020e <_Z8setupImuv+0x4e>
  {
    digitalWrite(D7, HIGH);
 80a01e6:	4629      	mov	r1, r5
 80a01e8:	2007      	movs	r0, #7
 80a01ea:	f004 f822 	bl	80a4232 <digitalWrite>
    Serial.println("Failed to communicate with LSM9DS1.");
 80a01ee:	f003 fe8d 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a01f2:	4916      	ldr	r1, [pc, #88]	; (80a024c <_Z8setupImuv+0x8c>)
 80a01f4:	f003 f929 	bl	80a344a <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a01f8:	f003 fe88 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a01fc:	4914      	ldr	r1, [pc, #80]	; (80a0250 <_Z8setupImuv+0x90>)
 80a01fe:	f003 f924 	bl	80a344a <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a0202:	f003 fe83 	bl	80a3f0c <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0206:	4913      	ldr	r1, [pc, #76]	; (80a0254 <_Z8setupImuv+0x94>)
 80a0208:	f003 f91f 	bl	80a344a <_ZN5Print7printlnEPKc>
 80a020c:	e7fe      	b.n	80a020c <_Z8setupImuv+0x4c>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a020e:	f003 fe7d 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0212:	4911      	ldr	r1, [pc, #68]	; (80a0258 <_Z8setupImuv+0x98>)
 80a0214:	f003 f919 	bl	80a344a <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a0218:	4629      	mov	r1, r5
 80a021a:	4620      	mov	r0, r4
 80a021c:	f001 f85a 	bl	80a12d4 <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a0220:	4629      	mov	r1, r5
 80a0222:	4620      	mov	r0, r4
 80a0224:	f001 f922 	bl	80a146c <_ZN7LSM9DS112calibrateMagEb>
  calibrateSensor();
 80a0228:	f7ff ff68 	bl	80a00fc <_Z15calibrateSensorv>
  Serial.println("Calibration finished");
 80a022c:	f003 fe6e 	bl	80a3f0c <_Z16_fetch_usbserialv>
}
 80a0230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
 80a0234:	4909      	ldr	r1, [pc, #36]	; (80a025c <_Z8setupImuv+0x9c>)
 80a0236:	f003 b908 	b.w	80a344a <_ZN5Print7printlnEPKc>
 80a023a:	bf00      	nop
 80a023c:	200000b8 	.word	0x200000b8
 80a0240:	40a00000 	.word	0x40a00000
 80a0244:	20000098 	.word	0x20000098
 80a0248:	2000016c 	.word	0x2000016c
 80a024c:	080a566a 	.word	0x080a566a
 80a0250:	080a568e 	.word	0x080a568e
 80a0254:	080a56a3 	.word	0x080a56a3
 80a0258:	080a572b 	.word	0x080a572b
 80a025c:	080a573f 	.word	0x080a573f

080a0260 <setup>:
 
Stepper stepper(STEPS, A1, A2, A3, A4);

bool onlyMotor = true;

void setup() {
 80a0260:	b570      	push	{r4, r5, r6, lr}
  pinMode(D7, OUTPUT);
 80a0262:	2101      	movs	r1, #1
 
Stepper stepper(STEPS, A1, A2, A3, A4);

bool onlyMotor = true;

void setup() {
 80a0264:	b096      	sub	sp, #88	; 0x58
  pinMode(D7, OUTPUT);
 80a0266:	2007      	movs	r0, #7
 80a0268:	f003 ffd2 	bl	80a4210 <pinMode>
  digitalWrite(D7, LOW);
 80a026c:	2100      	movs	r1, #0
 80a026e:	2007      	movs	r0, #7
 80a0270:	f003 ffdf 	bl	80a4232 <digitalWrite>
  for(int i = 0; i < PIXEL_COUNT; i++){
    pixels[i] = true;
 80a0274:	4a3a      	ldr	r2, [pc, #232]	; (80a0360 <setup+0x100>)
bool onlyMotor = true;

void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a0276:	2300      	movs	r3, #0
    pixels[i] = true;
 80a0278:	2101      	movs	r1, #1
 80a027a:	5499      	strb	r1, [r3, r2]
bool onlyMotor = true;

void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a027c:	3301      	adds	r3, #1
 80a027e:	2b18      	cmp	r3, #24
 80a0280:	d1fb      	bne.n	80a027a <setup+0x1a>
    pixels[i] = true;
  }

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0282:	f003 fe43 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0286:	f003 fe28 	bl	80a3eda <_ZN9USBSerialcvbEv>
 80a028a:	2800      	cmp	r0, #0
 80a028c:	d0f9      	beq.n	80a0282 <setup+0x22>
 80a028e:	4c35      	ldr	r4, [pc, #212]	; (80a0364 <setup+0x104>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0290:	2300      	movs	r3, #0
 80a0292:	461a      	mov	r2, r3
 80a0294:	4619      	mov	r1, r3
 80a0296:	6860      	ldr	r0, [r4, #4]
 80a0298:	f002 fed4 	bl	80a3044 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a029c:	2200      	movs	r2, #0
 80a029e:	4611      	mov	r1, r2
 80a02a0:	6860      	ldr	r0, [r4, #4]
 80a02a2:	4d30      	ldr	r5, [pc, #192]	; (80a0364 <setup+0x104>)
 80a02a4:	f002 fee6 	bl	80a3074 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a02a8:	2800      	cmp	r0, #0
 80a02aa:	d0f7      	beq.n	80a029c <setup+0x3c>
  Serial.println("Setup");
 80a02ac:	f003 fe2e 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a02b0:	492d      	ldr	r1, [pc, #180]	; (80a0368 <setup+0x108>)
 80a02b2:	f003 f8ca 	bl	80a344a <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a02b6:	4b2d      	ldr	r3, [pc, #180]	; (80a036c <setup+0x10c>)
 80a02b8:	2200      	movs	r2, #0
 80a02ba:	8819      	ldrh	r1, [r3, #0]
 80a02bc:	482c      	ldr	r0, [pc, #176]	; (80a0370 <setup+0x110>)
 80a02be:	f003 fb72 	bl	80a39a6 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a02c2:	2300      	movs	r3, #0
 80a02c4:	4619      	mov	r1, r3
 80a02c6:	4a2b      	ldr	r2, [pc, #172]	; (80a0374 <setup+0x114>)
 80a02c8:	6868      	ldr	r0, [r5, #4]
 80a02ca:	f002 ff0b 	bl	80a30e4 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a02ce:	f003 fe1d 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a02d2:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02d4:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a02d6:	2240      	movs	r2, #64	; 0x40
 80a02d8:	2100      	movs	r1, #0
 80a02da:	a806      	add	r0, sp, #24
 80a02dc:	f005 f92f 	bl	80a553e <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02e0:	2340      	movs	r3, #64	; 0x40
 80a02e2:	aa06      	add	r2, sp, #24
 80a02e4:	4621      	mov	r1, r4
 80a02e6:	9400      	str	r4, [sp, #0]
 80a02e8:	6868      	ldr	r0, [r5, #4]
 80a02ea:	f002 ff03 	bl	80a30f4 <network_get_hostname>
        return String(buf);
 80a02ee:	a906      	add	r1, sp, #24
 80a02f0:	a802      	add	r0, sp, #8
 80a02f2:	f003 fac5 	bl	80a3880 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02f6:	9902      	ldr	r1, [sp, #8]
 80a02f8:	4630      	mov	r0, r6
 80a02fa:	f003 f8a6 	bl	80a344a <_ZN5Print7printlnEPKc>
 80a02fe:	a802      	add	r0, sp, #8
 80a0300:	f003 fa77 	bl	80a37f2 <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP()); 
 80a0304:	f003 fe02 	bl	80a3f0c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0308:	4622      	mov	r2, r4
 80a030a:	4621      	mov	r1, r4
 80a030c:	4606      	mov	r6, r0
 80a030e:	6868      	ldr	r0, [r5, #4]
 80a0310:	f002 fe90 	bl	80a3034 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0314:	1c81      	adds	r1, r0, #2
 80a0316:	a806      	add	r0, sp, #24
 80a0318:	f002 ff9e 	bl	80a3258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a031c:	a906      	add	r1, sp, #24
 80a031e:	4630      	mov	r0, r6
 80a0320:	f003 f8a7 	bl	80a3472 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a0324:	f003 fdf2 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0328:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a032c:	f003 fdce 	bl	80a3ecc <_ZN9USBSerial5beginEl>
    iVx = 0;
    iVy = 0;
    iVz = 0;

    if(!onlyMotor)setupImu();
 80a0330:	4b11      	ldr	r3, [pc, #68]	; (80a0378 <setup+0x118>)
 80a0332:	781a      	ldrb	r2, [r3, #0]
 80a0334:	461c      	mov	r4, r3
 80a0336:	b90a      	cbnz	r2, 80a033c <setup+0xdc>
 80a0338:	f7ff ff42 	bl	80a01c0 <_Z8setupImuv>
    
  
  if(!onlyMotor)updateTimer.SetCallback(OnTimer);
 80a033c:	7823      	ldrb	r3, [r4, #0]
 80a033e:	b91b      	cbnz	r3, 80a0348 <setup+0xe8>
 80a0340:	490e      	ldr	r1, [pc, #56]	; (80a037c <setup+0x11c>)
 80a0342:	480f      	ldr	r0, [pc, #60]	; (80a0380 <setup+0x120>)
 80a0344:	f000 fbee 	bl	80a0b24 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>

  strip.setBrightness(BRIGHTNESS);
 80a0348:	2132      	movs	r1, #50	; 0x32
 80a034a:	480e      	ldr	r0, [pc, #56]	; (80a0384 <setup+0x124>)
 80a034c:	f002 fa60 	bl	80a2810 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a0350:	480c      	ldr	r0, [pc, #48]	; (80a0384 <setup+0x124>)
 80a0352:	f001 f91b 	bl	80a158c <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0356:	480b      	ldr	r0, [pc, #44]	; (80a0384 <setup+0x124>)
 80a0358:	f001 f94e 	bl	80a15f8 <_ZN17Adafruit_NeoPixel4showEv>
  // stepper.setSpeed(20);
  }
 80a035c:	b016      	add	sp, #88	; 0x58
 80a035e:	bd70      	pop	{r4, r5, r6, pc}
 80a0360:	20000186 	.word	0x20000186
 80a0364:	2000068c 	.word	0x2000068c
 80a0368:	080a5754 	.word	0x080a5754
 80a036c:	20000004 	.word	0x20000004
 80a0370:	200001a4 	.word	0x200001a4
 80a0374:	080a575a 	.word	0x080a575a
 80a0378:	20000000 	.word	0x20000000
 80a037c:	080a0799 	.word	0x080a0799
 80a0380:	2000008c 	.word	0x2000008c
 80a0384:	200001f0 	.word	0x200001f0

080a0388 <_Z12getMouvementv>:

//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


//-----------------------//-----------------------//-----------------------//-----------------------IMU
void getMouvement(){
 80a0388:	b538      	push	{r3, r4, r5, lr}

    if ( imu.accelAvailable() )
 80a038a:	4824      	ldr	r0, [pc, #144]	; (80a041c <_Z12getMouvementv+0x94>)
 80a038c:	f000 fe75 	bl	80a107a <_ZN7LSM9DS114accelAvailableEv>
 80a0390:	4c22      	ldr	r4, [pc, #136]	; (80a041c <_Z12getMouvementv+0x94>)
 80a0392:	b110      	cbz	r0, 80a039a <_Z12getMouvementv+0x12>
    {
      imu.readAccel();
 80a0394:	4620      	mov	r0, r4
 80a0396:	f000 ff3b 	bl	80a1210 <_ZN7LSM9DS19readAccelEv>
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a039a:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a039e:	481f      	ldr	r0, [pc, #124]	; (80a041c <_Z12getMouvementv+0x94>)
 80a03a0:	f000 fc17 	bl	80a0bd2 <_ZN7LSM9DS19calcAccelEs>
 80a03a4:	4b1e      	ldr	r3, [pc, #120]	; (80a0420 <_Z12getMouvementv+0x98>)
 80a03a6:	4d1f      	ldr	r5, [pc, #124]	; (80a0424 <_Z12getMouvementv+0x9c>)
 80a03a8:	6819      	ldr	r1, [r3, #0]
 80a03aa:	f004 fdb9 	bl	80a4f20 <__aeabi_fsub>
 80a03ae:	f005 f887 	bl	80a54c0 <__aeabi_f2iz>
 80a03b2:	2800      	cmp	r0, #0
 80a03b4:	bfb8      	it	lt
 80a03b6:	4240      	neglt	r0, r0
 80a03b8:	f004 fe68 	bl	80a508c <__aeabi_i2f>
 80a03bc:	6829      	ldr	r1, [r5, #0]
 80a03be:	f004 fdb1 	bl	80a4f24 <__addsf3>
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03c2:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a03c6:	6028      	str	r0, [r5, #0]
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03c8:	4814      	ldr	r0, [pc, #80]	; (80a041c <_Z12getMouvementv+0x94>)
 80a03ca:	f000 fc02 	bl	80a0bd2 <_ZN7LSM9DS19calcAccelEs>
 80a03ce:	4b16      	ldr	r3, [pc, #88]	; (80a0428 <_Z12getMouvementv+0xa0>)
 80a03d0:	4d16      	ldr	r5, [pc, #88]	; (80a042c <_Z12getMouvementv+0xa4>)
 80a03d2:	6819      	ldr	r1, [r3, #0]
 80a03d4:	f004 fda4 	bl	80a4f20 <__aeabi_fsub>
 80a03d8:	f005 f872 	bl	80a54c0 <__aeabi_f2iz>
 80a03dc:	2800      	cmp	r0, #0
 80a03de:	bfb8      	it	lt
 80a03e0:	4240      	neglt	r0, r0
 80a03e2:	f004 fe53 	bl	80a508c <__aeabi_i2f>
 80a03e6:	6829      	ldr	r1, [r5, #0]
 80a03e8:	f004 fd9c 	bl	80a4f24 <__addsf3>
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a03ec:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    {
      imu.readAccel();
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03f0:	6028      	str	r0, [r5, #0]
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a03f2:	480a      	ldr	r0, [pc, #40]	; (80a041c <_Z12getMouvementv+0x94>)
 80a03f4:	f000 fbed 	bl	80a0bd2 <_ZN7LSM9DS19calcAccelEs>
 80a03f8:	4b0d      	ldr	r3, [pc, #52]	; (80a0430 <_Z12getMouvementv+0xa8>)
 80a03fa:	4c0e      	ldr	r4, [pc, #56]	; (80a0434 <_Z12getMouvementv+0xac>)
 80a03fc:	6819      	ldr	r1, [r3, #0]
 80a03fe:	f004 fd8f 	bl	80a4f20 <__aeabi_fsub>
 80a0402:	f005 f85d 	bl	80a54c0 <__aeabi_f2iz>
 80a0406:	2800      	cmp	r0, #0
 80a0408:	bfb8      	it	lt
 80a040a:	4240      	neglt	r0, r0
 80a040c:	f004 fe3e 	bl	80a508c <__aeabi_i2f>
 80a0410:	6821      	ldr	r1, [r4, #0]
 80a0412:	f004 fd87 	bl	80a4f24 <__addsf3>
 80a0416:	6020      	str	r0, [r4, #0]
 80a0418:	bd38      	pop	{r3, r4, r5, pc}
 80a041a:	bf00      	nop
 80a041c:	200000b8 	.word	0x200000b8
 80a0420:	20000174 	.word	0x20000174
 80a0424:	20000168 	.word	0x20000168
 80a0428:	20000178 	.word	0x20000178
 80a042c:	200001a0 	.word	0x200001a0
 80a0430:	2000017c 	.word	0x2000017c
 80a0434:	20000170 	.word	0x20000170

080a0438 <_Z10checkSpeedv>:
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
}

boolean checkSpeed(){
 80a0438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  float total = fluxX + fluxY + fluxZ;
 80a043c:	4e23      	ldr	r6, [pc, #140]	; (80a04cc <_Z10checkSpeedv+0x94>)
 80a043e:	4d24      	ldr	r5, [pc, #144]	; (80a04d0 <_Z10checkSpeedv+0x98>)
 80a0440:	4c24      	ldr	r4, [pc, #144]	; (80a04d4 <_Z10checkSpeedv+0x9c>)
 80a0442:	6829      	ldr	r1, [r5, #0]
 80a0444:	6830      	ldr	r0, [r6, #0]
 80a0446:	f004 fd6d 	bl	80a4f24 <__addsf3>
 80a044a:	6821      	ldr	r1, [r4, #0]
 80a044c:	f004 fd6a 	bl	80a4f24 <__addsf3>
 80a0450:	4607      	mov	r7, r0
  Serial.print("Total movement: ");
 80a0452:	f003 fd5b 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0456:	4920      	ldr	r1, [pc, #128]	; (80a04d8 <_Z10checkSpeedv+0xa0>)
 80a0458:	f002 ffde 	bl	80a3418 <_ZN5Print5printEPKc>
  Serial.println(total);
 80a045c:	f003 fd56 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0460:	4680      	mov	r8, r0
 80a0462:	4638      	mov	r0, r7
 80a0464:	f004 fa0c 	bl	80a4880 <__aeabi_f2d>
 80a0468:	2302      	movs	r3, #2
 80a046a:	4602      	mov	r2, r0
 80a046c:	9300      	str	r3, [sp, #0]
 80a046e:	4640      	mov	r0, r8
 80a0470:	460b      	mov	r3, r1
  Serial.print("Speed limit : ");
  Serial.println(speedLimit);
 80a0472:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a04e0 <_Z10checkSpeedv+0xa8>
}

boolean checkSpeed(){
  float total = fluxX + fluxY + fluxZ;
  Serial.print("Total movement: ");
  Serial.println(total);
 80a0476:	f003 f90f 	bl	80a3698 <_ZN5Print7printlnEdi>
  Serial.print("Speed limit : ");
 80a047a:	f003 fd47 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a047e:	4917      	ldr	r1, [pc, #92]	; (80a04dc <_Z10checkSpeedv+0xa4>)
 80a0480:	f002 ffca 	bl	80a3418 <_ZN5Print5printEPKc>
  Serial.println(speedLimit);
 80a0484:	f003 fd42 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0488:	f8d8 1000 	ldr.w	r1, [r8]
 80a048c:	220a      	movs	r2, #10
 80a048e:	f003 f84a 	bl	80a3526 <_ZN5Print7printlnEii>
  if((total) < speedLimit){
 80a0492:	f8d8 0000 	ldr.w	r0, [r8]
 80a0496:	f004 fdf9 	bl	80a508c <__aeabi_i2f>
 80a049a:	4680      	mov	r8, r0
 80a049c:	4601      	mov	r1, r0
 80a049e:	4638      	mov	r0, r7
 80a04a0:	f004 ffe6 	bl	80a5470 <__aeabi_fcmplt>
 80a04a4:	b128      	cbz	r0, 80a04b2 <_Z10checkSpeedv+0x7a>
      fluxX = 0;
 80a04a6:	2300      	movs	r3, #0
 80a04a8:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a04aa:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a04ac:	6023      	str	r3, [r4, #0]
     total = 0;
    return true;
 80a04ae:	2001      	movs	r0, #1
 80a04b0:	e009      	b.n	80a04c6 <_Z10checkSpeedv+0x8e>
  }else if(total >= speedLimit){
 80a04b2:	4641      	mov	r1, r8
 80a04b4:	4638      	mov	r0, r7
 80a04b6:	f004 ffef 	bl	80a5498 <__aeabi_fcmpge>
 80a04ba:	b120      	cbz	r0, 80a04c6 <_Z10checkSpeedv+0x8e>
      fluxX = 0;
 80a04bc:	2300      	movs	r3, #0
 80a04be:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a04c0:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a04c2:	6023      	str	r3, [r4, #0]
     total = 0;
    return false;
 80a04c4:	2000      	movs	r0, #0
  }

}
 80a04c6:	b002      	add	sp, #8
 80a04c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a04cc:	20000168 	.word	0x20000168
 80a04d0:	200001a0 	.word	0x200001a0
 80a04d4:	20000170 	.word	0x20000170
 80a04d8:	080a5786 	.word	0x080a5786
 80a04dc:	080a5797 	.word	0x080a5797
 80a04e0:	20000008 	.word	0x20000008

080a04e4 <_Z10checkMatchb>:
checkMatch(false);
}

boolean match = true;

void checkMatch(bool alge){
 80a04e4:	b510      	push	{r4, lr}
 80a04e6:	4c09      	ldr	r4, [pc, #36]	; (80a050c <_Z10checkMatchb+0x28>)
  if(alge && checkSpeed()){
 80a04e8:	b110      	cbz	r0, 80a04f0 <_Z10checkMatchb+0xc>
 80a04ea:	f7ff ffa5 	bl	80a0438 <_Z10checkSpeedv>
 80a04ee:	b948      	cbnz	r0, 80a0504 <_Z10checkMatchb+0x20>
    match =  true;
  }else{
    match = false;
 80a04f0:	2300      	movs	r3, #0
 80a04f2:	7023      	strb	r3, [r4, #0]
  }
    Serial.println(match);
 80a04f4:	f003 fd0a 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a04f8:	7821      	ldrb	r1, [r4, #0]
 80a04fa:	220a      	movs	r2, #10
}
 80a04fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(alge && checkSpeed()){
    match =  true;
  }else{
    match = false;
  }
    Serial.println(match);
 80a0500:	f003 b811 	b.w	80a3526 <_ZN5Print7printlnEii>

boolean match = true;

void checkMatch(bool alge){
  if(alge && checkSpeed()){
    match =  true;
 80a0504:	2301      	movs	r3, #1
 80a0506:	7023      	strb	r3, [r4, #0]
 80a0508:	e7f4      	b.n	80a04f4 <_Z10checkMatchb+0x10>
 80a050a:	bf00      	nop
 80a050c:	2000000c 	.word	0x2000000c

080a0510 <_Z5STILLR10OSCMessage>:
          trouble();
        }
      }
}

void STILL(OSCMessage &inMessag){
 80a0510:	b508      	push	{r3, lr}
  Serial.println("STILL");
 80a0512:	f003 fcfb 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0516:	4904      	ldr	r1, [pc, #16]	; (80a0528 <_Z5STILLR10OSCMessage+0x18>)
 80a0518:	f002 ff97 	bl	80a344a <_ZN5Print7printlnEPKc>
checkMatch(true);
}
 80a051c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      }
}

void STILL(OSCMessage &inMessag){
  Serial.println("STILL");
checkMatch(true);
 80a0520:	2001      	movs	r0, #1
 80a0522:	f7ff bfdf 	b.w	80a04e4 <_Z10checkMatchb>
 80a0526:	bf00      	nop
 80a0528:	080a57a6 	.word	0x080a57a6

080a052c <_Z4MOVER10OSCMessage>:
}

void MOVE(OSCMessage &inMessag){
 80a052c:	b508      	push	{r3, lr}
  Serial.println("MOVE");
 80a052e:	f003 fced 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0532:	4904      	ldr	r1, [pc, #16]	; (80a0544 <_Z4MOVER10OSCMessage+0x18>)
 80a0534:	f002 ff89 	bl	80a344a <_ZN5Print7printlnEPKc>
checkMatch(false);
}
 80a0538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
checkMatch(true);
}

void MOVE(OSCMessage &inMessag){
  Serial.println("MOVE");
checkMatch(false);
 80a053c:	2000      	movs	r0, #0
 80a053e:	f7ff bfd1 	b.w	80a04e4 <_Z10checkMatchb>
 80a0542:	bf00      	nop
 80a0544:	080a57ac 	.word	0x080a57ac

080a0548 <_Z7troublev>:

  // delay(500);
}

//generates behavior state of coral in distress
void trouble(){
 80a0548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a054c:	b085      	sub	sp, #20
  int delayIn = 10;
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
 80a054e:	4e89      	ldr	r6, [pc, #548]	; (80a0774 <_Z7troublev+0x22c>)

  // delay(500);
}

//generates behavior state of coral in distress
void trouble(){
 80a0550:	af00      	add	r7, sp, #0
  int delayIn = 10;
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
 80a0552:	6833      	ldr	r3, [r6, #0]
 80a0554:	b95b      	cbnz	r3, 80a056e <_Z7troublev+0x26>
      chunk = strip.numPixels()/4;
 80a0556:	4888      	ldr	r0, [pc, #544]	; (80a0778 <_Z7troublev+0x230>)
 80a0558:	f002 f958 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
      wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a055c:	2132      	movs	r1, #50	; 0x32
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
      chunk = strip.numPixels()/4;
 80a055e:	f3c0 048f 	ubfx	r4, r0, #2, #16
      wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a0562:	4886      	ldr	r0, [pc, #536]	; (80a077c <_Z7troublev+0x234>)
 80a0564:	f002 f9ac 	bl	80a28c0 <_ZN7Stepper8setSpeedEl>
      stepper.step(STEPS);
 80a0568:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a056c:	e023      	b.n	80a05b6 <_Z7troublev+0x6e>
  }else if(troubleCount == 1){
 80a056e:	2b01      	cmp	r3, #1
 80a0570:	d108      	bne.n	80a0584 <_Z7troublev+0x3c>
    chunk = strip.numPixels()/3;
 80a0572:	4881      	ldr	r0, [pc, #516]	; (80a0778 <_Z7troublev+0x230>)
 80a0574:	f002 f94a 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0578:	2403      	movs	r4, #3
 80a057a:	fbb0 f0f4 	udiv	r0, r0, r4
         wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a057e:	2132      	movs	r1, #50	; 0x32
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
      stepper.step(STEPS);
  }else if(troubleCount == 1){
    chunk = strip.numPixels()/3;
 80a0580:	b284      	uxth	r4, r0
 80a0582:	e014      	b.n	80a05ae <_Z7troublev+0x66>
         wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
       stepper.step(-STEPS);
  }else if(troubleCount ==2){
 80a0584:	2b02      	cmp	r3, #2
 80a0586:	d10b      	bne.n	80a05a0 <_Z7troublev+0x58>
      chunk = strip.numPixels()/2;
 80a0588:	487b      	ldr	r0, [pc, #492]	; (80a0778 <_Z7troublev+0x230>)
 80a058a:	f002 f93f 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(40);
 80a058e:	2128      	movs	r1, #40	; 0x28
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
       stepper.step(-STEPS);
  }else if(troubleCount ==2){
      chunk = strip.numPixels()/2;
 80a0590:	f3c0 044f 	ubfx	r4, r0, #1, #16
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(40);
 80a0594:	4879      	ldr	r0, [pc, #484]	; (80a077c <_Z7troublev+0x234>)
 80a0596:	f002 f993 	bl	80a28c0 <_ZN7Stepper8setSpeedEl>
        stepper.step(STEPS);
 80a059a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a059e:	e00a      	b.n	80a05b6 <_Z7troublev+0x6e>
  }else if(troubleCount == 3){
 80a05a0:	2b03      	cmp	r3, #3
 80a05a2:	d112      	bne.n	80a05ca <_Z7troublev+0x82>
      chunk = strip.numPixels();
 80a05a4:	4874      	ldr	r0, [pc, #464]	; (80a0778 <_Z7troublev+0x230>)
 80a05a6:	f002 f931 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a05aa:	4604      	mov	r4, r0
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(30);
 80a05ac:	211e      	movs	r1, #30
 80a05ae:	4873      	ldr	r0, [pc, #460]	; (80a077c <_Z7troublev+0x234>)
 80a05b0:	f002 f986 	bl	80a28c0 <_ZN7Stepper8setSpeedEl>
       stepper.step(-STEPS);
 80a05b4:	4972      	ldr	r1, [pc, #456]	; (80a0780 <_Z7troublev+0x238>)
 80a05b6:	4871      	ldr	r0, [pc, #452]	; (80a077c <_Z7troublev+0x234>)
        stepper.step(STEPS);
  }else if(troubleCount == 3){
      chunk = strip.numPixels();
           wait = 50;
      delayIn = 5;
      delayOut = 5;
 80a05b8:	f04f 0905 	mov.w	r9, #5
      stepper.setSpeed(30);
       stepper.step(-STEPS);
 80a05bc:	f002 fa50 	bl	80a2a60 <_ZN7Stepper4stepEi>
      delayOut = 5;
      stepper.setSpeed(40);
        stepper.step(STEPS);
  }else if(troubleCount == 3){
      chunk = strip.numPixels();
           wait = 50;
 80a05c0:	f04f 0a32 	mov.w	sl, #50	; 0x32
      delayIn = 5;
 80a05c4:	f8c7 900c 	str.w	r9, [r7, #12]
 80a05c8:	e006      	b.n	80a05d8 <_Z7troublev+0x90>
//how many LED to bleach in the LED strip
  int chunk = 0;
  

  int delayIn = 10;
  int delayOut = 0;
 80a05ca:	f04f 0900 	mov.w	r9, #0
  bool complete = false;
  bool checkNum = true;
  int val = -1;

//how many LED to bleach in the LED strip
  int chunk = 0;
 80a05ce:	464c      	mov	r4, r9
  

  int delayIn = 10;
  int delayOut = 0;

  int wait=10;
 80a05d0:	f04f 0a0a 	mov.w	sl, #10

//how many LED to bleach in the LED strip
  int chunk = 0;
  

  int delayIn = 10;
 80a05d4:	f8c7 a00c 	str.w	sl, [r7, #12]
      stepper.setSpeed(30);
       stepper.step(-STEPS);

  }

int randomNumList[chunk];
 80a05d8:	00a3      	lsls	r3, r4, #2
 80a05da:	f103 020a 	add.w	r2, r3, #10
 80a05de:	f022 0207 	bic.w	r2, r2, #7
 80a05e2:	ebad 0d02 	sub.w	sp, sp, r2
 80a05e6:	46e8      	mov	r8, sp
 80a05e8:	466a      	mov	r2, sp
 80a05ea:	446b      	add	r3, sp
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
    randomNumList[k] = -1;
 80a05ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a05f0:	4293      	cmp	r3, r2
 80a05f2:	d002      	beq.n	80a05fa <_Z7troublev+0xb2>
    randomNumList[k] = -1;
 80a05f4:	f842 1b04 	str.w	r1, [r2], #4

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a05f8:	e7fa      	b.n	80a05f0 <_Z7troublev+0xa8>
    randomNumList[k] = -1;
  }

    Serial.print("TROUBLE COUNT :: ");
 80a05fa:	f003 fc87 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a05fe:	4961      	ldr	r1, [pc, #388]	; (80a0784 <_Z7troublev+0x23c>)
 80a0600:	f002 ff0a 	bl	80a3418 <_ZN5Print5printEPKc>
    Serial.println(troubleCount);
 80a0604:	f003 fc82 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0608:	220a      	movs	r2, #10
 80a060a:	6831      	ldr	r1, [r6, #0]
 80a060c:	f002 ff8b 	bl	80a3526 <_ZN5Print7printlnEii>
 80a0610:	2300      	movs	r3, #0
 80a0612:	60bb      	str	r3, [r7, #8]
 80a0614:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

    for(uint16_t i=0; i<chunk; i++) {
 80a0618:	f8b7 b008 	ldrh.w	fp, [r7, #8]
 80a061c:	455c      	cmp	r4, fp
 80a061e:	dd5f      	ble.n	80a06e0 <_Z7troublev+0x198>
      getMouvement();
 80a0620:	f7ff feb2 	bl	80a0388 <_Z12getMouvementv>
       Serial.print("chunk :: ");
 80a0624:	f003 fc72 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0628:	4957      	ldr	r1, [pc, #348]	; (80a0788 <_Z7troublev+0x240>)
 80a062a:	f002 fef5 	bl	80a3418 <_ZN5Print5printEPKc>
    Serial.println(chunk);
 80a062e:	f003 fc6d 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0632:	220a      	movs	r2, #10
 80a0634:	4621      	mov	r1, r4
 80a0636:	f002 ff76 	bl	80a3526 <_ZN5Print7printlnEii>
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
 80a063a:	f004 ffb1 	bl	80a55a0 <rand>
 80a063e:	4605      	mov	r5, r0
 80a0640:	484d      	ldr	r0, [pc, #308]	; (80a0778 <_Z7troublev+0x230>)
 80a0642:	f002 f8e3 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0646:	fb95 f3f0 	sdiv	r3, r5, r0
 80a064a:	fb03 5510 	mls	r5, r3, r0, r5
        Serial.print("VAL:: ");
 80a064e:	f003 fc5d 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0652:	494e      	ldr	r1, [pc, #312]	; (80a078c <_Z7troublev+0x244>)
 80a0654:	f002 fee0 	bl	80a3418 <_ZN5Print5printEPKc>
        Serial.println(val);
 80a0658:	f003 fc58 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a065c:	220a      	movs	r2, #10
 80a065e:	4629      	mov	r1, r5
 80a0660:	f002 ff61 	bl	80a3526 <_ZN5Print7printlnEii>
        for(int k = 0; k < chunk; k++){
 80a0664:	2200      	movs	r2, #0
    for(uint16_t i=0; i<chunk; i++) {
      getMouvement();
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
        checkNum = false;
 80a0666:	4613      	mov	r3, r2
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
          if(randomNumList[k] == val){
 80a0668:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a066c:	3201      	adds	r2, #1
          if(randomNumList[k] == val){
            checkNum = true;
 80a066e:	428d      	cmp	r5, r1
 80a0670:	bf08      	it	eq
 80a0672:	2301      	moveq	r3, #1
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a0674:	4294      	cmp	r4, r2
 80a0676:	dcf7      	bgt.n	80a0668 <_Z7troublev+0x120>

    for(uint16_t i=0; i<chunk; i++) {
      getMouvement();
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
 80a0678:	2b00      	cmp	r3, #0
 80a067a:	d1de      	bne.n	80a063a <_Z7troublev+0xf2>
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
 80a067c:	b2da      	uxtb	r2, r3
 80a067e:	21ff      	movs	r1, #255	; 0xff
 80a0680:	4610      	mov	r0, r2
 80a0682:	607b      	str	r3, [r7, #4]
 80a0684:	f002 f8bd 	bl	80a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0688:	b2a9      	uxth	r1, r5
 80a068a:	4602      	mov	r2, r0
 80a068c:	483a      	ldr	r0, [pc, #232]	; (80a0778 <_Z7troublev+0x230>)
 80a068e:	f002 f86d 	bl	80a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          randomNumList[i] = val;
          delay(delayOut);
 80a0692:	4648      	mov	r0, r9
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
 80a0694:	f848 502b 	str.w	r5, [r8, fp, lsl #2]
          delay(delayOut);
 80a0698:	f002 fd4c 	bl	80a3134 <delay>
          pixels[val] = false;
 80a069c:	4b3c      	ldr	r3, [pc, #240]	; (80a0790 <_Z7troublev+0x248>)
 80a069e:	2200      	movs	r2, #0
          strip.show();
 80a06a0:	4835      	ldr	r0, [pc, #212]	; (80a0778 <_Z7troublev+0x230>)
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
 80a06a2:	555a      	strb	r2, [r3, r5]
          strip.show();
 80a06a4:	f000 ffa8 	bl	80a15f8 <_ZN17Adafruit_NeoPixel4showEv>
            checkNum = true;
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
 80a06a8:	687b      	ldr	r3, [r7, #4]
 80a06aa:	3301      	adds	r3, #1
 80a06ac:	2bff      	cmp	r3, #255	; 0xff
 80a06ae:	d1e5      	bne.n	80a067c <_Z7troublev+0x134>
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
          strip.show();
      }
    delay(wait);
 80a06b0:	4650      	mov	r0, sl
 80a06b2:	f002 fd3f 	bl	80a3134 <delay>

    Serial.print(i);
 80a06b6:	f003 fc29 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a06ba:	220a      	movs	r2, #10
 80a06bc:	4659      	mov	r1, fp
 80a06be:	f002 ff30 	bl	80a3522 <_ZN5Print5printEii>
       Serial.print(" ::  ");
 80a06c2:	f003 fc23 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a06c6:	4933      	ldr	r1, [pc, #204]	; (80a0794 <_Z7troublev+0x24c>)
 80a06c8:	f002 fea6 	bl	80a3418 <_ZN5Print5printEPKc>
       Serial.println(val);
 80a06cc:	f003 fc1e 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a06d0:	220a      	movs	r2, #10
 80a06d2:	4629      	mov	r1, r5
 80a06d4:	f002 ff27 	bl	80a3526 <_ZN5Print7printlnEii>
 80a06d8:	68bb      	ldr	r3, [r7, #8]
 80a06da:	3301      	adds	r3, #1
 80a06dc:	60bb      	str	r3, [r7, #8]
  }

    Serial.print("TROUBLE COUNT :: ");
    Serial.println(troubleCount);

    for(uint16_t i=0; i<chunk; i++) {
 80a06de:	e79b      	b.n	80a0618 <_Z7troublev+0xd0>
    Serial.print(i);
       Serial.print(" ::  ");
       Serial.println(val);
    }

if(troubleCount==3){
 80a06e0:	6833      	ldr	r3, [r6, #0]
 80a06e2:	2b03      	cmp	r3, #3
 80a06e4:	d106      	bne.n	80a06f4 <_Z7troublev+0x1ac>
  delay(5000);
 80a06e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80a06ea:	f002 fd23 	bl	80a3134 <delay>
  troubleCount = 0; 
 80a06ee:	4b21      	ldr	r3, [pc, #132]	; (80a0774 <_Z7troublev+0x22c>)
 80a06f0:	2200      	movs	r2, #0
 80a06f2:	601a      	str	r2, [r3, #0]
}

    if(checkSpeed()){
 80a06f4:	f7ff fea0 	bl	80a0438 <_Z10checkSpeedv>
 80a06f8:	b3a0      	cbz	r0, 80a0764 <_Z7troublev+0x21c>
      stepper.setSpeed(50);
 80a06fa:	2132      	movs	r1, #50	; 0x32
 80a06fc:	481f      	ldr	r0, [pc, #124]	; (80a077c <_Z7troublev+0x234>)
 80a06fe:	f002 f8df 	bl	80a28c0 <_ZN7Stepper8setSpeedEl>
        stepper.step(STEPS);
 80a0702:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0706:	481d      	ldr	r0, [pc, #116]	; (80a077c <_Z7troublev+0x234>)
 80a0708:	f002 f9aa 	bl	80a2a60 <_ZN7Stepper4stepEi>
 80a070c:	f04f 0a00 	mov.w	sl, #0

      for(uint16_t i=0; i<chunk; i++) {
 80a0710:	fa1f fb8a 	uxth.w	fp, sl
 80a0714:	455c      	cmp	r4, fp
 80a0716:	dd22      	ble.n	80a075e <_Z7troublev+0x216>
 80a0718:	f04f 09ff 	mov.w	r9, #255	; 0xff
          for(int k = 255; k >=0 ; k--){
              strip.setPixelColor(randomNumList[i], strip.Color(k, 255, k));
 80a071c:	fa5f f289 	uxtb.w	r2, r9
 80a0720:	f838 302b 	ldrh.w	r3, [r8, fp, lsl #2]
 80a0724:	21ff      	movs	r1, #255	; 0xff
 80a0726:	4610      	mov	r0, r2
 80a0728:	60bb      	str	r3, [r7, #8]
 80a072a:	f002 f86a 	bl	80a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a072e:	68bb      	ldr	r3, [r7, #8]
 80a0730:	4602      	mov	r2, r0
 80a0732:	4619      	mov	r1, r3
 80a0734:	4810      	ldr	r0, [pc, #64]	; (80a0778 <_Z7troublev+0x230>)
 80a0736:	f002 f819 	bl	80a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
              delay(10);
 80a073a:	200a      	movs	r0, #10
 80a073c:	f002 fcfa 	bl	80a3134 <delay>
strip.show();
 80a0740:	480d      	ldr	r0, [pc, #52]	; (80a0778 <_Z7troublev+0x230>)
 80a0742:	f000 ff59 	bl	80a15f8 <_ZN17Adafruit_NeoPixel4showEv>
    if(checkSpeed()){
      stepper.setSpeed(50);
        stepper.step(STEPS);

      for(uint16_t i=0; i<chunk; i++) {
          for(int k = 255; k >=0 ; k--){
 80a0746:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80a074a:	d2e7      	bcs.n	80a071c <_Z7troublev+0x1d4>
    //           strip.setPixelColor(randomNumList[i], curr_r, curr_g, curr_b);
    //           delay(10);


    //   }
              pixels[val] = true;
 80a074c:	4a10      	ldr	r2, [pc, #64]	; (80a0790 <_Z7troublev+0x248>)
 80a074e:	2301      	movs	r3, #1
              strip.show();
 80a0750:	4809      	ldr	r0, [pc, #36]	; (80a0778 <_Z7troublev+0x230>)
    //           strip.setPixelColor(randomNumList[i], curr_r, curr_g, curr_b);
    //           delay(10);


    //   }
              pixels[val] = true;
 80a0752:	5553      	strb	r3, [r2, r5]
 80a0754:	f10a 0a01 	add.w	sl, sl, #1
              strip.show();
 80a0758:	f000 ff4e 	bl	80a15f8 <_ZN17Adafruit_NeoPixel4showEv>

    if(checkSpeed()){
      stepper.setSpeed(50);
        stepper.step(STEPS);

      for(uint16_t i=0; i<chunk; i++) {
 80a075c:	e7d8      	b.n	80a0710 <_Z7troublev+0x1c8>

    //   }
              pixels[val] = true;
              strip.show();
          }
        delay(delayIn);
 80a075e:	68f8      	ldr	r0, [r7, #12]
 80a0760:	f002 fce8 	bl	80a3134 <delay>
        break;
      }
    }

  complete= true;
  troubleCount++;
 80a0764:	6833      	ldr	r3, [r6, #0]
  }

//   if(complete){
// healthyWave(10,10,1);
//   }
}
 80a0766:	3714      	adds	r7, #20
        break;
      }
    }

  complete= true;
  troubleCount++;
 80a0768:	3301      	adds	r3, #1
 80a076a:	6033      	str	r3, [r6, #0]
  }

//   if(complete){
// healthyWave(10,10,1);
//   }
}
 80a076c:	46bd      	mov	sp, r7
 80a076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0772:	bf00      	nop
 80a0774:	200000b4 	.word	0x200000b4
 80a0778:	200001f0 	.word	0x200001f0
 80a077c:	2000013c 	.word	0x2000013c
 80a0780:	fffffed4 	.word	0xfffffed4
 80a0784:	080a57b1 	.word	0x080a57b1
 80a0788:	080a57c3 	.word	0x080a57c3
 80a078c:	080a57cd 	.word	0x080a57cd
 80a0790:	20000186 	.word	0x20000186
 80a0794:	080a57d4 	.word	0x080a57d4

080a0798 <_Z7OnTimerv>:


//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a0798:	b530      	push	{r4, r5, lr}
 80a079a:	b097      	sub	sp, #92	; 0x5c
    int size = 0;
     OSCMessage inMessage;
 80a079c:	a801      	add	r0, sp, #4
 80a079e:	f002 f9ad 	bl	80a2afc <_ZN10OSCMessageC1Ev>
      
      Serial.println("LISTENING---------------");
 80a07a2:	f003 fbb3 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a07a6:	4923      	ldr	r1, [pc, #140]	; (80a0834 <_Z7OnTimerv+0x9c>)
 80a07a8:	f002 fe4f 	bl	80a344a <_ZN5Print7printlnEPKc>
       
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
 80a07ac:	2100      	movs	r1, #0
 80a07ae:	4822      	ldr	r0, [pc, #136]	; (80a0838 <_Z7OnTimerv+0xa0>)
 80a07b0:	f003 fa99 	bl	80a3ce6 <_ZN3UDP11parsePacketEm>
 80a07b4:	1e04      	subs	r4, r0, #0
 80a07b6:	dd32      	ble.n	80a081e <_Z7OnTimerv+0x86>
        Serial.println("receiving message");
 80a07b8:	f003 fba8 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a07bc:	491f      	ldr	r1, [pc, #124]	; (80a083c <_Z7OnTimerv+0xa4>)
 80a07be:	f002 fe44 	bl	80a344a <_ZN5Print7printlnEPKc>

        char c;
        while(size--){
 80a07c2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a07c6:	d312      	bcc.n	80a07ee <_Z7OnTimerv+0x56>
          Serial.println("---in while---");
 80a07c8:	f003 fba0 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a07cc:	491c      	ldr	r1, [pc, #112]	; (80a0840 <_Z7OnTimerv+0xa8>)
 80a07ce:	f002 fe3c 	bl	80a344a <_ZN5Print7printlnEPKc>
          c=udp.read();
 80a07d2:	4819      	ldr	r0, [pc, #100]	; (80a0838 <_Z7OnTimerv+0xa0>)
 80a07d4:	f003 f8ba 	bl	80a394c <_ZN3UDP4readEv>
 80a07d8:	b2c5      	uxtb	r5, r0
          Serial.println(c);
 80a07da:	f003 fb97 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a07de:	4629      	mov	r1, r5
 80a07e0:	f002 fe3d 	bl	80a345e <_ZN5Print7printlnEc>
          inMessage.fill(c);
 80a07e4:	4629      	mov	r1, r5
 80a07e6:	a801      	add	r0, sp, #4
 80a07e8:	f002 f9c3 	bl	80a2b72 <_ZN10OSCMessage4fillEc>
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
        Serial.println("receiving message");

        char c;
        while(size--){
 80a07ec:	e7e9      	b.n	80a07c2 <_Z7OnTimerv+0x2a>
          Serial.println(c);
          inMessage.fill(c);
          
        }

        if(inMessage.parse()){
 80a07ee:	a801      	add	r0, sp, #4
 80a07f0:	f002 f9ce 	bl	80a2b90 <_ZN10OSCMessage5parseEv>
 80a07f4:	b170      	cbz	r0, 80a0814 <_Z7OnTimerv+0x7c>

        Serial.println("PARSING");
 80a07f6:	f003 fb89 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a07fa:	4912      	ldr	r1, [pc, #72]	; (80a0844 <_Z7OnTimerv+0xac>)
 80a07fc:	f002 fe25 	bl	80a344a <_ZN5Print7printlnEPKc>

          inMessage.route("still", STILL);
 80a0800:	4a11      	ldr	r2, [pc, #68]	; (80a0848 <_Z7OnTimerv+0xb0>)
 80a0802:	4912      	ldr	r1, [pc, #72]	; (80a084c <_Z7OnTimerv+0xb4>)
 80a0804:	a801      	add	r0, sp, #4
 80a0806:	f002 fa3f 	bl	80a2c88 <_ZN10OSCMessage5routeEPKcPFvRS_E>
          inMessage.route("/move", MOVE);
 80a080a:	4a11      	ldr	r2, [pc, #68]	; (80a0850 <_Z7OnTimerv+0xb8>)
 80a080c:	4911      	ldr	r1, [pc, #68]	; (80a0854 <_Z7OnTimerv+0xbc>)
 80a080e:	a801      	add	r0, sp, #4
 80a0810:	f002 fa3a 	bl	80a2c88 <_ZN10OSCMessage5routeEPKcPFvRS_E>
        }
        Serial.println();
 80a0814:	f003 fb7a 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0818:	f002 fe0b 	bl	80a3432 <_ZN5Print7printlnEv>
 80a081c:	e004      	b.n	80a0828 <_Z7OnTimerv+0x90>
      }else{
        if(!checkSpeed()){
 80a081e:	f7ff fe0b 	bl	80a0438 <_Z10checkSpeedv>
 80a0822:	b908      	cbnz	r0, 80a0828 <_Z7OnTimerv+0x90>
          trouble();
 80a0824:	f7ff fe90 	bl	80a0548 <_Z7troublev>
//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


void OnTimer(void) {  //Handler for the timer, will be called automatically
    int size = 0;
     OSCMessage inMessage;
 80a0828:	a801      	add	r0, sp, #4
 80a082a:	f002 f985 	bl	80a2b38 <_ZN10OSCMessageD1Ev>
      }else{
        if(!checkSpeed()){
          trouble();
        }
      }
}
 80a082e:	b017      	add	sp, #92	; 0x5c
 80a0830:	bd30      	pop	{r4, r5, pc}
 80a0832:	bf00      	nop
 80a0834:	080a57da 	.word	0x080a57da
 80a0838:	200001a4 	.word	0x200001a4
 80a083c:	080a57f3 	.word	0x080a57f3
 80a0840:	080a5805 	.word	0x080a5805
 80a0844:	080a5814 	.word	0x080a5814
 80a0848:	080a0511 	.word	0x080a0511
 80a084c:	080a581c 	.word	0x080a581c
 80a0850:	080a052d 	.word	0x080a052d
 80a0854:	080a5822 	.word	0x080a5822

080a0858 <_Z14sectionSqueezeiii>:
      strip.setPixelColor(valUP, colorUP);
    // }
   
  }
}
void sectionSqueeze(int numLimit, int down, int up) {
 80a0858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a085c:	4607      	mov	r7, r0

  int valUP;
  int valDOWN;
  int numHalfPixels=strip.numPixels()/2;
 80a085e:	4834      	ldr	r0, [pc, #208]	; (80a0930 <_Z14sectionSqueezeiii+0xd8>)
      strip.setPixelColor(valUP, colorUP);
    // }
   
  }
}
void sectionSqueeze(int numLimit, int down, int up) {
 80a0860:	4614      	mov	r4, r2
 80a0862:	460d      	mov	r5, r1

  int valUP;
  int valDOWN;
  int numHalfPixels=strip.numPixels()/2;
 80a0864:	f001 ffd2 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0868:	f3c0 084f 	ubfx	r8, r0, #1, #16
   Serial.print("NUM_LIMIT--:");
 80a086c:	f003 fb4e 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0870:	4930      	ldr	r1, [pc, #192]	; (80a0934 <_Z14sectionSqueezeiii+0xdc>)
 80a0872:	f002 fdd1 	bl	80a3418 <_ZN5Print5printEPKc>
  Serial.println(numLimit);
 80a0876:	f003 fb49 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a087a:	220a      	movs	r2, #10
 80a087c:	4639      	mov	r1, r7
 80a087e:	f002 fe52 	bl	80a3526 <_ZN5Print7printlnEii>
   Serial.print("UP--:");
 80a0882:	f003 fb43 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0886:	492c      	ldr	r1, [pc, #176]	; (80a0938 <_Z14sectionSqueezeiii+0xe0>)
 80a0888:	f002 fdc6 	bl	80a3418 <_ZN5Print5printEPKc>
  Serial.println(up);
 80a088c:	f003 fb3e 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0890:	220a      	movs	r2, #10
 80a0892:	4621      	mov	r1, r4
 80a0894:	f002 fe47 	bl	80a3526 <_ZN5Print7printlnEii>
  
  Serial.print("DOWN--:");
 80a0898:	f003 fb38 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a089c:	4927      	ldr	r1, [pc, #156]	; (80a093c <_Z14sectionSqueezeiii+0xe4>)
 80a089e:	f002 fdbb 	bl	80a3418 <_ZN5Print5printEPKc>
  Serial.println(down);
 80a08a2:	f003 fb33 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a08a6:	220a      	movs	r2, #10
 80a08a8:	4629      	mov	r1, r5
 80a08aa:	f002 fe3c 	bl	80a3526 <_ZN5Print7printlnEii>
  uint32_t colorBlue = strip.Color(0,0,255);
 80a08ae:	2100      	movs	r1, #0
 80a08b0:	22ff      	movs	r2, #255	; 0xff
 80a08b2:	4608      	mov	r0, r1
 80a08b4:	f001 ffa5 	bl	80a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  uint32_t colorPink = strip.Color(255,0,255);
 80a08b8:	22ff      	movs	r2, #255	; 0xff
 80a08ba:	2100      	movs	r1, #0
   Serial.print("UP--:");
  Serial.println(up);
  
  Serial.print("DOWN--:");
  Serial.println(down);
  uint32_t colorBlue = strip.Color(0,0,255);
 80a08bc:	4682      	mov	sl, r0
  uint32_t colorPink = strip.Color(255,0,255);
 80a08be:	4610      	mov	r0, r2
 80a08c0:	f001 ff9f 	bl	80a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  uint32_t colorOFF = strip.Color(0,0,0);
 80a08c4:	2200      	movs	r2, #0
  Serial.println(up);
  
  Serial.print("DOWN--:");
  Serial.println(down);
  uint32_t colorBlue = strip.Color(0,0,255);
  uint32_t colorPink = strip.Color(255,0,255);
 80a08c6:	4683      	mov	fp, r0
  uint32_t colorOFF = strip.Color(0,0,0);
 80a08c8:	4611      	mov	r1, r2
 80a08ca:	4610      	mov	r0, r2
 80a08cc:	f001 ff99 	bl	80a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  uint32_t colorStep;
  for(int step = 0; step < numLimit; step++){
    valUP=up+step;
    valDOWN=down-step;

  if(step>numLimit/3){
 80a08d0:	2303      	movs	r3, #3
 80a08d2:	fb97 f3f3 	sdiv	r3, r7, r3
  
  Serial.print("DOWN--:");
  Serial.println(down);
  uint32_t colorBlue = strip.Color(0,0,255);
  uint32_t colorPink = strip.Color(255,0,255);
  uint32_t colorOFF = strip.Color(0,0,0);
 80a08d6:	4681      	mov	r9, r0
  uint32_t colorStep;
  for(int step = 0; step < numLimit; step++){
    valUP=up+step;
    valDOWN=down-step;

  if(step>numLimit/3){
 80a08d8:	9300      	str	r3, [sp, #0]
  uint32_t colorBlue = strip.Color(0,0,255);
  uint32_t colorPink = strip.Color(255,0,255);
  uint32_t colorOFF = strip.Color(0,0,0);

  uint32_t colorStep;
  for(int step = 0; step < numLimit; step++){
 80a08da:	2600      	movs	r6, #0
 80a08dc:	42be      	cmp	r6, r7
 80a08de:	da23      	bge.n	80a0928 <_Z14sectionSqueezeiii+0xd0>
    valDOWN=down-step;

  if(step>numLimit/3){
    colorStep=colorBlue;
  }else{
    colorStep=colorPink;
 80a08e0:	9b00      	ldr	r3, [sp, #0]
 80a08e2:	429e      	cmp	r6, r3
 80a08e4:	bfcc      	ite	gt
 80a08e6:	4653      	movgt	r3, sl
 80a08e8:	465b      	movle	r3, fp
  }
 
 
    if(valUP<numHalfPixels){
 80a08ea:	45a0      	cmp	r8, r4
 80a08ec:	dd05      	ble.n	80a08fa <_Z14sectionSqueezeiii+0xa2>
      strip.setPixelColor(valUP, colorOFF); 
 80a08ee:	464a      	mov	r2, r9
 80a08f0:	b2a1      	uxth	r1, r4
 80a08f2:	480f      	ldr	r0, [pc, #60]	; (80a0930 <_Z14sectionSqueezeiii+0xd8>)
 80a08f4:	f001 ff3a 	bl	80a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a08f8:	e012      	b.n	80a0920 <_Z14sectionSqueezeiii+0xc8>
    }else if(valDOWN>numHalfPixels){
 80a08fa:	45a8      	cmp	r8, r5
 80a08fc:	b2a9      	uxth	r1, r5
 80a08fe:	da04      	bge.n	80a090a <_Z14sectionSqueezeiii+0xb2>
      strip.setPixelColor(valDOWN, colorOFF); 
 80a0900:	464a      	mov	r2, r9
 80a0902:	480b      	ldr	r0, [pc, #44]	; (80a0930 <_Z14sectionSqueezeiii+0xd8>)
 80a0904:	f001 ff32 	bl	80a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a0908:	e00a      	b.n	80a0920 <_Z14sectionSqueezeiii+0xc8>
    }else{
      strip.setPixelColor(valDOWN, colorStep); 
 80a090a:	461a      	mov	r2, r3
 80a090c:	4808      	ldr	r0, [pc, #32]	; (80a0930 <_Z14sectionSqueezeiii+0xd8>)
 80a090e:	9301      	str	r3, [sp, #4]
 80a0910:	f001 ff2c 	bl	80a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      strip.setPixelColor(valUP, colorStep);
 80a0914:	9b01      	ldr	r3, [sp, #4]
 80a0916:	b2a1      	uxth	r1, r4
 80a0918:	461a      	mov	r2, r3
 80a091a:	4805      	ldr	r0, [pc, #20]	; (80a0930 <_Z14sectionSqueezeiii+0xd8>)
 80a091c:	f001 ff26 	bl	80a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  uint32_t colorBlue = strip.Color(0,0,255);
  uint32_t colorPink = strip.Color(255,0,255);
  uint32_t colorOFF = strip.Color(0,0,0);

  uint32_t colorStep;
  for(int step = 0; step < numLimit; step++){
 80a0920:	3601      	adds	r6, #1
 80a0922:	3d01      	subs	r5, #1
 80a0924:	3401      	adds	r4, #1
 80a0926:	e7d9      	b.n	80a08dc <_Z14sectionSqueezeiii+0x84>
      strip.setPixelColor(valDOWN, colorStep); 
      strip.setPixelColor(valUP, colorStep);
    }
   
  }
}
 80a0928:	b003      	add	sp, #12
 80a092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a092e:	bf00      	nop
 80a0930:	200001f0 	.word	0x200001f0
 80a0934:	080a5828 	.word	0x080a5828
 80a0938:	080a5835 	.word	0x080a5835
 80a093c:	080a583b 	.word	0x080a583b

080a0940 <_Z12theaterChasemi>:
void theaterChase(uint32_t color, int wait)
{
 80a0940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  
  int limit = 12;

  int numHalfPixels=strip.numPixels()/2;
 80a0944:	4836      	ldr	r0, [pc, #216]	; (80a0a20 <_Z12theaterChasemi+0xe0>)
    }
   
  }
}
void theaterChase(uint32_t color, int wait)
{
 80a0946:	460f      	mov	r7, r1
  
  int limit = 12;

  int numHalfPixels=strip.numPixels()/2;
 80a0948:	f001 ff60 	bl	80a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a094c:	f3c0 044f 	ubfx	r4, r0, #1, #16
 80a0950:	4626      	mov	r6, r4
  int numLimit = numHalfPixels-limit;
  int stretch = numHalfPixels;
  int up = numHalfPixels-limit;
  int down = numHalfPixels+limit;
 80a0952:	250c      	movs	r5, #12
 80a0954:	ebc5 0904 	rsb	r9, r5, r4
 80a0958:	eb05 0804 	add.w	r8, r5, r4
    for (; down > stretch; down--)
 80a095c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80a0960:	d318      	bcc.n	80a0994 <_Z12theaterChasemi+0x54>
    {     
            strip.clear(); //   Set all pixels in RAM to 0 (off)
 80a0962:	482f      	ldr	r0, [pc, #188]	; (80a0a20 <_Z12theaterChasemi+0xe0>)
 80a0964:	f001 ff7a 	bl	80a285c <_ZN17Adafruit_NeoPixel5clearEv>
            sectionSqueeze(limit,down,up);
 80a0968:	464a      	mov	r2, r9
 80a096a:	4641      	mov	r1, r8
 80a096c:	200c      	movs	r0, #12
 80a096e:	f7ff ff73 	bl	80a0858 <_Z14sectionSqueezeiii>
            strip.setPixelColor(up+3, color);
            */


            up++;
            strip.show(); // Update strip with new contents
 80a0972:	482b      	ldr	r0, [pc, #172]	; (80a0a20 <_Z12theaterChasemi+0xe0>)
 80a0974:	f000 fe40 	bl	80a15f8 <_ZN17Adafruit_NeoPixel4showEv>
            delay(wait*=0.8);  // Pause for a moment
 80a0978:	4638      	mov	r0, r7
 80a097a:	f003 ff6f 	bl	80a485c <__aeabi_i2d>
 80a097e:	a326      	add	r3, pc, #152	; (adr r3, 80a0a18 <_Z12theaterChasemi+0xd8>)
 80a0980:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0984:	f003 ffd0 	bl	80a4928 <__aeabi_dmul>
 80a0988:	f004 fa7e 	bl	80a4e88 <__aeabi_d2iz>
 80a098c:	4607      	mov	r7, r0
 80a098e:	f002 fbd1 	bl	80a3134 <delay>
  int numHalfPixels=strip.numPixels()/2;
  int numLimit = numHalfPixels-limit;
  int stretch = numHalfPixels;
  int up = numHalfPixels-limit;
  int down = numHalfPixels+limit;
    for (; down > stretch; down--)
 80a0992:	e7df      	b.n	80a0954 <_Z12theaterChasemi+0x14>
            delay(wait*=0.8);  // Pause for a moment
        // }
    }

    wait = 1000;
      Serial.println("END FIRST LOOP");
 80a0994:	f003 faba 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a0998:	4922      	ldr	r1, [pc, #136]	; (80a0a24 <_Z12theaterChasemi+0xe4>)
 80a099a:	f002 fd56 	bl	80a344a <_ZN5Print7printlnEPKc>
      Serial.print("LIMIT--");
 80a099e:	f003 fab5 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a09a2:	4921      	ldr	r1, [pc, #132]	; (80a0a28 <_Z12theaterChasemi+0xe8>)
 80a09a4:	f002 fd38 	bl	80a3418 <_ZN5Print5printEPKc>
      Serial.println(limit);
 80a09a8:	f003 fab0 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a09ac:	220a      	movs	r2, #10
 80a09ae:	210c      	movs	r1, #12
 80a09b0:	f002 fdb9 	bl	80a3526 <_ZN5Print7printlnEii>
        Serial.print("DOWN--");
 80a09b4:	f003 faaa 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a09b8:	491c      	ldr	r1, [pc, #112]	; (80a0a2c <_Z12theaterChasemi+0xec>)
 80a09ba:	f002 fd2d 	bl	80a3418 <_ZN5Print5printEPKc>
      Serial.println(down);
 80a09be:	f003 faa5 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a09c2:	220a      	movs	r2, #10
 80a09c4:	4621      	mov	r1, r4
 80a09c6:	f002 fdae 	bl	80a3526 <_ZN5Print7printlnEii>
    for (; down<numHalfPixels*2; down++)
 80a09ca:	0067      	lsls	r7, r4, #1
            strip.show(); // Update strip with new contents
            delay(wait*=0.8);  // Pause for a moment
        // }
    }

    wait = 1000;
 80a09cc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      Serial.println("END FIRST LOOP");
      Serial.print("LIMIT--");
      Serial.println(limit);
        Serial.print("DOWN--");
      Serial.println(down);
    for (; down<numHalfPixels*2; down++)
 80a09d0:	42bc      	cmp	r4, r7
 80a09d2:	da1f      	bge.n	80a0a14 <_Z12theaterChasemi+0xd4>
    { 
      Serial.println("SECOND LOOP");
 80a09d4:	f003 fa9a 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a09d8:	4915      	ldr	r1, [pc, #84]	; (80a0a30 <_Z12theaterChasemi+0xf0>)
 80a09da:	f002 fd36 	bl	80a344a <_ZN5Print7printlnEPKc>
            strip.clear(); //   Set all pixels in RAM to 0 (off)
 80a09de:	4810      	ldr	r0, [pc, #64]	; (80a0a20 <_Z12theaterChasemi+0xe0>)
 80a09e0:	f001 ff3c 	bl	80a285c <_ZN17Adafruit_NeoPixel5clearEv>
            sectionSqueeze(limit,down,up);
 80a09e4:	4632      	mov	r2, r6
 80a09e6:	4621      	mov	r1, r4
 80a09e8:	200c      	movs	r0, #12
 80a09ea:	f7ff ff35 	bl	80a0858 <_Z14sectionSqueezeiii>
            strip.setPixelColor(j+1, strip.Color(0,0,255));
            strip.setPixelColor(j+2, color);
            strip.setPixelColor(j+3, color);
            */
            up--;
            strip.show(); // Update strip with new contents
 80a09ee:	480c      	ldr	r0, [pc, #48]	; (80a0a20 <_Z12theaterChasemi+0xe0>)
 80a09f0:	f000 fe02 	bl	80a15f8 <_ZN17Adafruit_NeoPixel4showEv>
           delay(wait*=0.8); // Pause for a moment
 80a09f4:	4628      	mov	r0, r5
 80a09f6:	f003 ff31 	bl	80a485c <__aeabi_i2d>
 80a09fa:	a307      	add	r3, pc, #28	; (adr r3, 80a0a18 <_Z12theaterChasemi+0xd8>)
 80a09fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a00:	f003 ff92 	bl	80a4928 <__aeabi_dmul>
 80a0a04:	f004 fa40 	bl	80a4e88 <__aeabi_d2iz>
            strip.setPixelColor(j, strip.Color(0,0,255));
            strip.setPixelColor(j+1, strip.Color(0,0,255));
            strip.setPixelColor(j+2, color);
            strip.setPixelColor(j+3, color);
            */
            up--;
 80a0a08:	3e01      	subs	r6, #1
            strip.show(); // Update strip with new contents
           delay(wait*=0.8); // Pause for a moment
 80a0a0a:	4605      	mov	r5, r0
      Serial.println("END FIRST LOOP");
      Serial.print("LIMIT--");
      Serial.println(limit);
        Serial.print("DOWN--");
      Serial.println(down);
    for (; down<numHalfPixels*2; down++)
 80a0a0c:	3401      	adds	r4, #1
            strip.setPixelColor(j+2, color);
            strip.setPixelColor(j+3, color);
            */
            up--;
            strip.show(); // Update strip with new contents
           delay(wait*=0.8); // Pause for a moment
 80a0a0e:	f002 fb91 	bl	80a3134 <delay>
      Serial.println("END FIRST LOOP");
      Serial.print("LIMIT--");
      Serial.println(limit);
        Serial.print("DOWN--");
      Serial.println(down);
    for (; down<numHalfPixels*2; down++)
 80a0a12:	e7dd      	b.n	80a09d0 <_Z12theaterChasemi+0x90>
 80a0a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0a18:	9999999a 	.word	0x9999999a
 80a0a1c:	3fe99999 	.word	0x3fe99999
 80a0a20:	200001f0 	.word	0x200001f0
 80a0a24:	080a5843 	.word	0x080a5843
 80a0a28:	080a5852 	.word	0x080a5852
 80a0a2c:	080a585a 	.word	0x080a585a
 80a0a30:	080a5861 	.word	0x080a5861

080a0a34 <loop>:
/////---------------------------------------------------------------- SETUP



//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
 80a0a34:	b508      	push	{r3, lr}
// healthyWave(500,3,3);

// testCase(0); //motors
// testCase(1); //leds
theaterChase(strip.Color(255,0,0),1000);
 80a0a36:	2200      	movs	r2, #0
 80a0a38:	4611      	mov	r1, r2
 80a0a3a:	20ff      	movs	r0, #255	; 0xff
 80a0a3c:	f001 fee1 	bl	80a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>
// theaterChase(strip.Color(255,0,255),100);
//-->IMPORTANT: only set boolean onlyMotor to false when using next testcase
// testCase(2); //IMU
}
 80a0a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void loop() {
// healthyWave(500,3,3);

// testCase(0); //motors
// testCase(1); //leds
theaterChase(strip.Color(255,0,0),1000);
 80a0a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0a48:	f7ff bf7a 	b.w	80a0940 <_Z12theaterChasemi>

080a0a4c <_GLOBAL__sub_I_SystemMode>:
      j++;

      delay(_wait);
    }
  }
}
 80a0a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0a4e:	f002 f94b 	bl	80a2ce8 <HAL_Pin_Map>
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"
#include "simple-OSC.h"

SYSTEM_THREAD(ENABLED);
 80a0a52:	2100      	movs	r1, #0
 80a0a54:	2001      	movs	r0, #1
 80a0a56:	f002 fac9 	bl	80a2fec <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0a5a:	4b1f      	ldr	r3, [pc, #124]	; (80a0ad8 <_GLOBAL__sub_I_SystemMode+0x8c>)
 80a0a5c:	2200      	movs	r2, #0
 80a0a5e:	701a      	strb	r2, [r3, #0]
 80a0a60:	805a      	strh	r2, [r3, #2]
 80a0a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0a66:	4d1d      	ldr	r5, [pc, #116]	; (80a0adc <_GLOBAL__sub_I_SystemMode+0x90>)
 80a0a68:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a6a:	2002      	movs	r0, #2
 80a0a6c:	f002 faae 	bl	80a2fcc <set_system_mode>
 80a0a70:	4c1b      	ldr	r4, [pc, #108]	; (80a0ae0 <_GLOBAL__sub_I_SystemMode+0x94>)
 80a0a72:	4628      	mov	r0, r5
 80a0a74:	f002 fbe2 	bl	80a323c <_ZN9IPAddressC1Ev>
 80a0a78:	4628      	mov	r0, r5
int port;
UDP udp;
 80a0a7a:	4d1a      	ldr	r5, [pc, #104]	; (80a0ae4 <_GLOBAL__sub_I_SystemMode+0x98>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0a7c:	4622      	mov	r2, r4
 80a0a7e:	491a      	ldr	r1, [pc, #104]	; (80a0ae8 <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a0a80:	f003 fc4a 	bl	80a4318 <__aeabi_atexit>
int port;
UDP udp;
 80a0a84:	4628      	mov	r0, r5
 80a0a86:	f003 f8cd 	bl	80a3c24 <_ZN3UDPC1Ev>
 80a0a8a:	4622      	mov	r2, r4
 80a0a8c:	4917      	ldr	r1, [pc, #92]	; (80a0aec <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a0a8e:	4628      	mov	r0, r5
#define PIXEL_COUNT 24
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0a90:	4d17      	ldr	r5, [pc, #92]	; (80a0af0 <_GLOBAL__sub_I_SystemMode+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0a92:	f003 fc41 	bl	80a4318 <__aeabi_atexit>
#define PIXEL_COUNT 24
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0a96:	2302      	movs	r3, #2
 80a0a98:	461a      	mov	r2, r3
 80a0a9a:	2118      	movs	r1, #24
 80a0a9c:	4628      	mov	r0, r5
 80a0a9e:	f000 fd9a 	bl	80a15d6 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0aa2:	4622      	mov	r2, r4
 80a0aa4:	4913      	ldr	r1, [pc, #76]	; (80a0af4 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a0aa6:	4628      	mov	r0, r5
 80a0aa8:	f003 fc36 	bl	80a4318 <__aeabi_atexit>
}


/////---------------------------------------------------------------- IMU

LSM9DS1 imu;
 80a0aac:	4812      	ldr	r0, [pc, #72]	; (80a0af8 <_GLOBAL__sub_I_SystemMode+0xac>)
 80a0aae:	f000 f889 	bl	80a0bc4 <_ZN7LSM9DS1C1Ev>
#define PRINT_SPEED 250 // 250 ms between prints

// a declination to get a more accurate heading. 
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
 80a0ab2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80a0ab6:	4811      	ldr	r0, [pc, #68]	; (80a0afc <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a0ab8:	f000 f82a 	bl	80a0b10 <_ZN20SparkCorePolledTimerC1Em>
   //new driver motor motorTesting
#include "Stepper.h"
 
#define STEPS 300
 
Stepper stepper(STEPS, A1, A2, A3, A4);
 80a0abc:	220d      	movs	r2, #13
 80a0abe:	230e      	movs	r3, #14
 80a0ac0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0ac4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0ac8:	230c      	movs	r3, #12
 80a0aca:	220b      	movs	r2, #11
 80a0acc:	480c      	ldr	r0, [pc, #48]	; (80a0b00 <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a0ace:	f001 fed5 	bl	80a287c <_ZN7StepperC1Eiiiii>
      j++;

      delay(_wait);
    }
  }
}
 80a0ad2:	b003      	add	sp, #12
 80a0ad4:	bd30      	pop	{r4, r5, pc}
 80a0ad6:	bf00      	nop
 80a0ad8:	20000180 	.word	0x20000180
 80a0adc:	2000009c 	.word	0x2000009c
 80a0ae0:	20000088 	.word	0x20000088
 80a0ae4:	200001a4 	.word	0x200001a4
 80a0ae8:	080a00b7 	.word	0x080a00b7
 80a0aec:	080a00b9 	.word	0x080a00b9
 80a0af0:	200001f0 	.word	0x200001f0
 80a0af4:	080a1539 	.word	0x080a1539
 80a0af8:	200000b8 	.word	0x200000b8
 80a0afc:	2000008c 	.word	0x2000008c
 80a0b00:	2000013c 	.word	0x2000013c

080a0b04 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0b04:	b510      	push	{r4, lr}
 80a0b06:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b08:	f002 f8e6 	bl	80a2cd8 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a0b0c:	6020      	str	r0, [r4, #0]
 80a0b0e:	bd10      	pop	{r4, pc}

080a0b10 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a0b10:	b538      	push	{r3, r4, r5, lr}
 80a0b12:	4604      	mov	r4, r0
 80a0b14:	460d      	mov	r5, r1
    Reset();
 80a0b16:	f7ff fff5 	bl	80a0b04 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0b1a:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a0b1c:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0b1e:	60a3      	str	r3, [r4, #8]
}
 80a0b20:	4620      	mov	r0, r4
 80a0b22:	bd38      	pop	{r3, r4, r5, pc}

080a0b24 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a0b24:	6081      	str	r1, [r0, #8]
 80a0b26:	4770      	bx	lr

080a0b28 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0b28:	f002 b8de 	b.w	80a2ce8 <HAL_Pin_Map>

080a0b2c <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0b2c:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0b2e:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a0b30:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a0b32:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0b34:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0b36:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0b38:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0b3a:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0b3c:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0b3e:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0b40:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0b42:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0b44:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0b46:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0b48:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0b4c:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0b4e:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0b50:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a0b52:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0b54:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0b56:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0b58:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0b5a:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0b5c:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0b5e:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0b60:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a0b62:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0b64:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0b68:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0b6a:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0b6c:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0b6e:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0b70:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a0b72:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0b74:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0b76:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0b78:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0b7a:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0b7c:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0b7e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a0b82:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0b84:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0b88:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0b8c:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a0b8e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0b92:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0b96:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0b9a:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0b9c:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a0b9e:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0ba0:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0ba2:	6565      	str	r5, [r4, #84]	; 0x54
 80a0ba4:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0ba8:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0bac:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0bb0:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0bb4:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0bb8:	d1f0      	bne.n	80a0b9c <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0bba:	f04f 0300 	mov.w	r3, #0
 80a0bbe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0bc2:	bd30      	pop	{r4, r5, pc}

080a0bc4 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0bc4:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0bc6:	231e      	movs	r3, #30
 80a0bc8:	226b      	movs	r2, #107	; 0x6b
 80a0bca:	2101      	movs	r1, #1
 80a0bcc:	f7ff ffae 	bl	80a0b2c <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0bd0:	bd10      	pop	{r4, pc}

080a0bd2 <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a0bd2:	b510      	push	{r4, lr}
 80a0bd4:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0bd6:	4608      	mov	r0, r1
 80a0bd8:	f004 fa58 	bl	80a508c <__aeabi_i2f>
 80a0bdc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a0bde:	f004 faa9 	bl	80a5134 <__aeabi_fmul>
}
 80a0be2:	bd10      	pop	{r4, pc}

080a0be4 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a0be4:	b510      	push	{r4, lr}
 80a0be6:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0be8:	88c0      	ldrh	r0, [r0, #6]
 80a0bea:	f004 fa4b 	bl	80a5084 <__aeabi_ui2f>
 80a0bee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0bf2:	f004 fa9f 	bl	80a5134 <__aeabi_fmul>
 80a0bf6:	6760      	str	r0, [r4, #116]	; 0x74
 80a0bf8:	bd10      	pop	{r4, pc}

080a0bfa <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0bfa:	b510      	push	{r4, lr}
 80a0bfc:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0bfe:	7dc0      	ldrb	r0, [r0, #23]
 80a0c00:	f004 fa40 	bl	80a5084 <__aeabi_ui2f>
 80a0c04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0c08:	f004 fa94 	bl	80a5134 <__aeabi_fmul>
 80a0c0c:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0c0e:	bd10      	pop	{r4, pc}

080a0c10 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0c10:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0c14:	3b04      	subs	r3, #4
 80a0c16:	2b0c      	cmp	r3, #12
 80a0c18:	d814      	bhi.n	80a0c44 <_ZN7LSM9DS18calcmResEv+0x34>
 80a0c1a:	e8df f003 	tbb	[pc, r3]
 80a0c1e:	1307      	.short	0x1307
 80a0c20:	130a1313 	.word	0x130a1313
 80a0c24:	130d1313 	.word	0x130d1313
 80a0c28:	1313      	.short	0x1313
 80a0c2a:	10          	.byte	0x10
 80a0c2b:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0c2c:	4b06      	ldr	r3, [pc, #24]	; (80a0c48 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0c2e:	681b      	ldr	r3, [r3, #0]
 80a0c30:	e007      	b.n	80a0c42 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a0c32:	4b05      	ldr	r3, [pc, #20]	; (80a0c48 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0c34:	685b      	ldr	r3, [r3, #4]
 80a0c36:	e004      	b.n	80a0c42 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0c38:	4b03      	ldr	r3, [pc, #12]	; (80a0c48 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0c3a:	689b      	ldr	r3, [r3, #8]
 80a0c3c:	e001      	b.n	80a0c42 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0c40:	68db      	ldr	r3, [r3, #12]
 80a0c42:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a0c44:	4770      	bx	lr
 80a0c46:	bf00      	nop
 80a0c48:	20000010 	.word	0x20000010

080a0c4c <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0c4c:	88c3      	ldrh	r3, [r0, #6]
 80a0c4e:	2bf5      	cmp	r3, #245	; 0xf5
 80a0c50:	d007      	beq.n	80a0c62 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0c52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0c56:	d004      	beq.n	80a0c62 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0c58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0c5c:	bf1c      	itt	ne
 80a0c5e:	23f5      	movne	r3, #245	; 0xf5
 80a0c60:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a0c62:	7dc2      	ldrb	r2, [r0, #23]
 80a0c64:	2a10      	cmp	r2, #16
 80a0c66:	d803      	bhi.n	80a0c70 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0c68:	4b08      	ldr	r3, [pc, #32]	; (80a0c8c <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0c6a:	40d3      	lsrs	r3, r2
 80a0c6c:	07da      	lsls	r2, r3, #31
 80a0c6e:	d401      	bmi.n	80a0c74 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0c70:	2302      	movs	r3, #2
 80a0c72:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0c74:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0c78:	2a10      	cmp	r2, #16
 80a0c7a:	d803      	bhi.n	80a0c84 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0c7c:	4b04      	ldr	r3, [pc, #16]	; (80a0c90 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0c7e:	40d3      	lsrs	r3, r2
 80a0c80:	07db      	lsls	r3, r3, #31
 80a0c82:	d402      	bmi.n	80a0c8a <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0c84:	2304      	movs	r3, #4
 80a0c86:	f880 3020 	strb.w	r3, [r0, #32]
 80a0c8a:	4770      	bx	lr
 80a0c8c:	00010114 	.word	0x00010114
 80a0c90:	00011110 	.word	0x00011110

080a0c94 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0c94:	b510      	push	{r4, lr}
 80a0c96:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0c98:	2101      	movs	r1, #1
 80a0c9a:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a0c9e:	f003 fab7 	bl	80a4210 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a0ca2:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0ca6:	2101      	movs	r1, #1
 80a0ca8:	f003 fac3 	bl	80a4232 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0cac:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a0cb0:	2101      	movs	r1, #1
 80a0cb2:	f003 faad 	bl	80a4210 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0cb6:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a0cba:	4c0a      	ldr	r4, [pc, #40]	; (80a0ce4 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a0cbc:	2101      	movs	r1, #1
 80a0cbe:	f003 fab8 	bl	80a4232 <digitalWrite>
	
	SPI.begin();
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	f002 fd26 	bl	80a3714 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0cc8:	4620      	mov	r0, r4
 80a0cca:	2108      	movs	r1, #8
 80a0ccc:	f002 fd74 	bl	80a37b8 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a0cd0:	4620      	mov	r0, r4
 80a0cd2:	2101      	movs	r1, #1
 80a0cd4:	f002 fd23 	bl	80a371e <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0cd8:	4620      	mov	r0, r4
}
 80a0cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0cde:	2100      	movs	r1, #0
 80a0ce0:	f002 bd20 	b.w	80a3724 <_ZN8SPIClass11setDataModeEh>
 80a0ce4:	200006d0 	.word	0x200006d0

080a0ce8 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0cea:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0cec:	4617      	mov	r7, r2
 80a0cee:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0cf0:	4d09      	ldr	r5, [pc, #36]	; (80a0d18 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a0cf2:	4620      	mov	r0, r4
 80a0cf4:	2100      	movs	r1, #0
 80a0cf6:	f003 fa9c 	bl	80a4232 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0cfa:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0cfe:	4628      	mov	r0, r5
 80a0d00:	f002 fd6e 	bl	80a37e0 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0d04:	4631      	mov	r1, r6
 80a0d06:	4628      	mov	r0, r5
 80a0d08:	f002 fd6a 	bl	80a37e0 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0d0c:	4620      	mov	r0, r4
}
 80a0d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0d12:	2101      	movs	r1, #1
 80a0d14:	f003 ba8d 	b.w	80a4232 <digitalWrite>
 80a0d18:	200006d0 	.word	0x200006d0

080a0d1c <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d1e:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0d20:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0d24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0d28:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0d2a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0d2e:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0d32:	d103      	bne.n	80a0d3c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0d34:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0d36:	bf88      	it	hi
 80a0d38:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0d3c:	b28c      	uxth	r4, r1
 80a0d3e:	4620      	mov	r0, r4
 80a0d40:	2100      	movs	r1, #0
 80a0d42:	f003 fa76 	bl	80a4232 <digitalWrite>
	SPI.transfer(rAddress);
 80a0d46:	4629      	mov	r1, r5
 80a0d48:	4809      	ldr	r0, [pc, #36]	; (80a0d70 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0d4a:	f002 fd49 	bl	80a37e0 <_ZN8SPIClass8transferEh>
 80a0d4e:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0d50:	1bab      	subs	r3, r5, r6
 80a0d52:	429f      	cmp	r7, r3
 80a0d54:	dd06      	ble.n	80a0d64 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a0d56:	2100      	movs	r1, #0
 80a0d58:	4805      	ldr	r0, [pc, #20]	; (80a0d70 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0d5a:	f002 fd41 	bl	80a37e0 <_ZN8SPIClass8transferEh>
 80a0d5e:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a0d62:	e7f5      	b.n	80a0d50 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0d64:	4620      	mov	r0, r4
 80a0d66:	2101      	movs	r1, #1
 80a0d68:	f003 fa63 	bl	80a4232 <digitalWrite>
	
	return 1;
}
 80a0d6c:	2001      	movs	r0, #1
 80a0d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d70:	200006d0 	.word	0x200006d0

080a0d74 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0d76:	2301      	movs	r3, #1
 80a0d78:	9300      	str	r3, [sp, #0]
 80a0d7a:	f10d 030f 	add.w	r3, sp, #15
 80a0d7e:	f7ff ffcd 	bl	80a0d1c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a0d82:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0d86:	b005      	add	sp, #20
 80a0d88:	f85d fb04 	ldr.w	pc, [sp], #4

080a0d8c <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0d8c:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a0d8e:	f003 fa69 	bl	80a4264 <_Z19__fetch_global_Wirev>
}
 80a0d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0d96:	f002 ba17 	b.w	80a31c8 <_ZN7TwoWire5beginEv>

080a0d9a <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0d9a:	b570      	push	{r4, r5, r6, lr}
 80a0d9c:	460e      	mov	r6, r1
 80a0d9e:	4615      	mov	r5, r2
 80a0da0:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0da2:	f003 fa5f 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a0da6:	4631      	mov	r1, r6
 80a0da8:	f002 fa20 	bl	80a31ec <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0dac:	f003 fa5a 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a0db0:	6803      	ldr	r3, [r0, #0]
 80a0db2:	4629      	mov	r1, r5
 80a0db4:	689b      	ldr	r3, [r3, #8]
 80a0db6:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0db8:	f003 fa54 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a0dbc:	6803      	ldr	r3, [r0, #0]
 80a0dbe:	4621      	mov	r1, r4
 80a0dc0:	689a      	ldr	r2, [r3, #8]
 80a0dc2:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0dc4:	f003 fa4e 	bl	80a4264 <_Z19__fetch_global_Wirev>
}
 80a0dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0dcc:	f002 ba16 	b.w	80a31fc <_ZN7TwoWire15endTransmissionEv>

080a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0dd0:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0dd2:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0dd4:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0dd6:	2a01      	cmp	r2, #1
 80a0dd8:	d105      	bne.n	80a0de6 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0dda:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0ddc:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0dde:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0de2:	f7ff bfda 	b.w	80a0d9a <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0de6:	b92a      	cbnz	r2, 80a0df4 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0de8:	460a      	mov	r2, r1
}
 80a0dea:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0dec:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0df0:	f7ff bf7a 	b.w	80a0ce8 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0df4:	bc10      	pop	{r4}
 80a0df6:	4770      	bx	lr

080a0df8 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0df8:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0dfa:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0dfc:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0dfe:	b113      	cbz	r3, 80a0e06 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0e00:	7a03      	ldrb	r3, [r0, #8]
 80a0e02:	015b      	lsls	r3, r3, #5
 80a0e04:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0e06:	88e2      	ldrh	r2, [r4, #6]
 80a0e08:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0e0c:	d005      	beq.n	80a0e1a <_ZN7LSM9DS18initGyroEv+0x22>
 80a0e0e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0e12:	d104      	bne.n	80a0e1e <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0e14:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0e18:	e001      	b.n	80a0e1e <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0e1a:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0e1e:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0e20:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0e22:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0e26:	431a      	orrs	r2, r3
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	f7ff ffd1 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0e2e:	2200      	movs	r2, #0
 80a0e30:	2111      	movs	r1, #17
 80a0e32:	4620      	mov	r0, r4
 80a0e34:	f7ff ffcc 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0e38:	7aa3      	ldrb	r3, [r4, #10]
 80a0e3a:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0e3c:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0e3e:	bf14      	ite	ne
 80a0e40:	2280      	movne	r2, #128	; 0x80
 80a0e42:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0e44:	b12b      	cbz	r3, 80a0e52 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0e46:	7b23      	ldrb	r3, [r4, #12]
 80a0e48:	f003 030f 	and.w	r3, r3, #15
 80a0e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0e50:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a0e52:	2112      	movs	r1, #18
 80a0e54:	4620      	mov	r0, r4
 80a0e56:	f7ff ffbb 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0e5a:	7ce3      	ldrb	r3, [r4, #19]
 80a0e5c:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0e5e:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0e60:	bf0c      	ite	eq
 80a0e62:	2200      	moveq	r2, #0
 80a0e64:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0e66:	b113      	cbz	r3, 80a0e6e <_ZN7LSM9DS18initGyroEv+0x76>
 80a0e68:	f042 0210 	orr.w	r2, r2, #16
 80a0e6c:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0e6e:	7c63      	ldrb	r3, [r4, #17]
 80a0e70:	b10b      	cbz	r3, 80a0e76 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a0e72:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0e76:	7d23      	ldrb	r3, [r4, #20]
 80a0e78:	b10b      	cbz	r3, 80a0e7e <_ZN7LSM9DS18initGyroEv+0x86>
 80a0e7a:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0e7e:	211e      	movs	r1, #30
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	f7ff ffa5 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0e86:	7b63      	ldrb	r3, [r4, #13]
 80a0e88:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0e8a:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0e8c:	bf0c      	ite	eq
 80a0e8e:	2200      	moveq	r2, #0
 80a0e90:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0e92:	b113      	cbz	r3, 80a0e9a <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0e94:	f042 0210 	orr.w	r2, r2, #16
 80a0e98:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0e9a:	7be3      	ldrb	r3, [r4, #15]
 80a0e9c:	b10b      	cbz	r3, 80a0ea2 <_ZN7LSM9DS18initGyroEv+0xaa>
 80a0e9e:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0ea2:	4620      	mov	r0, r4
}
 80a0ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0ea8:	2113      	movs	r1, #19
 80a0eaa:	f7ff bf91 	b.w	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>

080a0eae <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a0eae:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0eb0:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0eb2:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0eb4:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0eb6:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0eb8:	bf0c      	ite	eq
 80a0eba:	2200      	moveq	r2, #0
 80a0ebc:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0ebe:	b113      	cbz	r3, 80a0ec6 <_ZN7LSM9DS19initAccelEv+0x18>
 80a0ec0:	f042 0210 	orr.w	r2, r2, #16
 80a0ec4:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0ec6:	7e63      	ldrb	r3, [r4, #25]
 80a0ec8:	b10b      	cbz	r3, 80a0ece <_ZN7LSM9DS19initAccelEv+0x20>
 80a0eca:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a0ece:	211f      	movs	r1, #31
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	f7ff ff7d 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0ed6:	7da2      	ldrb	r2, [r4, #22]
 80a0ed8:	b112      	cbz	r2, 80a0ee0 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0eda:	7e22      	ldrb	r2, [r4, #24]
 80a0edc:	0152      	lsls	r2, r2, #5
 80a0ede:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0ee0:	7de3      	ldrb	r3, [r4, #23]
 80a0ee2:	2b08      	cmp	r3, #8
 80a0ee4:	d006      	beq.n	80a0ef4 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0ee6:	2b10      	cmp	r3, #16
 80a0ee8:	d007      	beq.n	80a0efa <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0eea:	2b04      	cmp	r3, #4
 80a0eec:	d107      	bne.n	80a0efe <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0eee:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0ef2:	e004      	b.n	80a0efe <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0ef4:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0ef8:	e001      	b.n	80a0efe <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0efa:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0efe:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0f02:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0f04:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0f06:	bfa2      	ittt	ge
 80a0f08:	f003 0303 	andge.w	r3, r3, #3
 80a0f0c:	431a      	orrge	r2, r3
 80a0f0e:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	f7ff ff5c 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0f18:	7f62      	ldrb	r2, [r4, #29]
 80a0f1a:	b12a      	cbz	r2, 80a0f28 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0f1c:	7fa2      	ldrb	r2, [r4, #30]
 80a0f1e:	0152      	lsls	r2, r2, #5
 80a0f20:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0f28:	4620      	mov	r0, r4
}
 80a0f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0f2e:	2121      	movs	r1, #33	; 0x21
 80a0f30:	f7ff bf4e 	b.w	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>

080a0f34 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0f34:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0f36:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0f38:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0f3a:	2a01      	cmp	r2, #1
 80a0f3c:	d105      	bne.n	80a0f4a <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0f3e:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0f40:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0f42:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f46:	f7ff bf28 	b.w	80a0d9a <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0f4a:	b92a      	cbnz	r2, 80a0f58 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0f4c:	460a      	mov	r2, r1
}
 80a0f4e:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0f50:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f54:	f7ff bec8 	b.w	80a0ce8 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0f58:	bc10      	pop	{r4}
 80a0f5a:	4770      	bx	lr

080a0f5c <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0f5c:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0f5e:	b570      	push	{r4, r5, r6, lr}
 80a0f60:	4606      	mov	r6, r0
 80a0f62:	460c      	mov	r4, r1
 80a0f64:	4615      	mov	r5, r2
	if (axis > 2)
 80a0f66:	d810      	bhi.n	80a0f8a <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0f68:	0049      	lsls	r1, r1, #1
 80a0f6a:	3105      	adds	r1, #5
 80a0f6c:	b2d2      	uxtb	r2, r2
 80a0f6e:	b2c9      	uxtb	r1, r1
 80a0f70:	f7ff ffe0 	bl	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0f74:	1ce1      	adds	r1, r4, #3
 80a0f76:	0049      	lsls	r1, r1, #1
 80a0f78:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0f7c:	4630      	mov	r0, r6
}
 80a0f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0f82:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0f86:	f7ff bfd5 	b.w	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
 80a0f8a:	bd70      	pop	{r4, r5, r6, pc}

080a0f8c <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a0f8c:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0f8e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0f92:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0f94:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0f96:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0f9a:	bf08      	it	eq
 80a0f9c:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0f9e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a0fa2:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0fa6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0faa:	bf18      	it	ne
 80a0fac:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0fae:	009b      	lsls	r3, r3, #2
 80a0fb0:	f003 031c 	and.w	r3, r3, #28
 80a0fb4:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0fb6:	431a      	orrs	r2, r3
 80a0fb8:	2120      	movs	r1, #32
 80a0fba:	f7ff ffbb 	bl	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
 80a0fbe:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0fc2:	4620      	mov	r0, r4
 80a0fc4:	3b08      	subs	r3, #8
 80a0fc6:	b2db      	uxtb	r3, r3
 80a0fc8:	2b08      	cmp	r3, #8
 80a0fca:	bf96      	itet	ls
 80a0fcc:	4a12      	ldrls	r2, [pc, #72]	; (80a1018 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a0fce:	2200      	movhi	r2, #0
 80a0fd0:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0fd2:	2121      	movs	r1, #33	; 0x21
 80a0fd4:	f7ff ffae 	bl	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0fd8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0fdc:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0fde:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0fe0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0fe4:	bf0c      	ite	eq
 80a0fe6:	2200      	moveq	r2, #0
 80a0fe8:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0fea:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0fee:	431a      	orrs	r2, r3
 80a0ff0:	2122      	movs	r1, #34	; 0x22
 80a0ff2:	f7ff ff9f 	bl	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0ff6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0ffa:	4620      	mov	r0, r4
 80a0ffc:	0092      	lsls	r2, r2, #2
 80a0ffe:	f002 020c 	and.w	r2, r2, #12
 80a1002:	2123      	movs	r1, #35	; 0x23
 80a1004:	f7ff ff96 	bl	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a1008:	4620      	mov	r0, r4
}
 80a100a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a100e:	2200      	movs	r2, #0
 80a1010:	2124      	movs	r1, #36	; 0x24
 80a1012:	f7ff bf8f 	b.w	80a0f34 <_ZN7LSM9DS110mWriteByteEhh>
 80a1016:	bf00      	nop
 80a1018:	080a587c 	.word	0x080a587c

080a101c <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a101c:	b538      	push	{r3, r4, r5, lr}
 80a101e:	460c      	mov	r4, r1
 80a1020:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a1022:	f003 f91f 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a1026:	4621      	mov	r1, r4
 80a1028:	f002 f8e0 	bl	80a31ec <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a102c:	f003 f91a 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a1030:	6803      	ldr	r3, [r0, #0]
 80a1032:	4629      	mov	r1, r5
 80a1034:	689b      	ldr	r3, [r3, #8]
 80a1036:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a1038:	f003 f914 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a103c:	2100      	movs	r1, #0
 80a103e:	f002 f8d9 	bl	80a31f4 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a1042:	f003 f90f 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a1046:	2201      	movs	r2, #1
 80a1048:	4621      	mov	r1, r4
 80a104a:	f002 f8cc 	bl	80a31e6 <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a104e:	f003 f909 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a1052:	6803      	ldr	r3, [r0, #0]
 80a1054:	695b      	ldr	r3, [r3, #20]
 80a1056:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a1058:	b2c0      	uxtb	r0, r0
 80a105a:	bd38      	pop	{r3, r4, r5, pc}

080a105c <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a105c:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a105e:	7801      	ldrb	r1, [r0, #0]
 80a1060:	2901      	cmp	r1, #1
 80a1062:	d103      	bne.n	80a106c <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a1064:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1068:	f7ff bfd8 	b.w	80a101c <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a106c:	b919      	cbnz	r1, 80a1076 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a106e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1072:	f7ff be7f 	b.w	80a0d74 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a1076:	2000      	movs	r0, #0
 80a1078:	4770      	bx	lr

080a107a <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a107a:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a107c:	2127      	movs	r1, #39	; 0x27
 80a107e:	f7ff ffed 	bl	80a105c <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a1082:	f000 0001 	and.w	r0, r0, #1
 80a1086:	bd08      	pop	{r3, pc}

080a1088 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a1088:	b538      	push	{r3, r4, r5, lr}
 80a108a:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a108c:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a108e:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a1090:	f7ff ffe4 	bl	80a105c <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a1094:	b11d      	cbz	r5, 80a109e <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a1096:	f040 0202 	orr.w	r2, r0, #2
 80a109a:	b2d2      	uxtb	r2, r2
 80a109c:	e001      	b.n	80a10a2 <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a109e:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a10a2:	4620      	mov	r0, r4
}
 80a10a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a10a8:	2123      	movs	r1, #35	; 0x23
 80a10aa:	f7ff be91 	b.w	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>

080a10ae <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a10ae:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a10b0:	7801      	ldrb	r1, [r0, #0]
 80a10b2:	2901      	cmp	r1, #1
 80a10b4:	d103      	bne.n	80a10be <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a10b6:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a10ba:	f7ff bfaf 	b.w	80a101c <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a10be:	b919      	cbnz	r1, 80a10c8 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a10c0:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a10c4:	f7ff be56 	b.w	80a0d74 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a10c8:	4770      	bx	lr

080a10ca <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a10ca:	b538      	push	{r3, r4, r5, lr}
 80a10cc:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a10ce:	7843      	ldrb	r3, [r0, #1]
 80a10d0:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a10d4:	7883      	ldrb	r3, [r0, #2]
 80a10d6:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a10da:	f7ff fdb7 	bl	80a0c4c <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a10de:	f7ff fd81 	bl	80a0be4 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a10e2:	4620      	mov	r0, r4
 80a10e4:	f7ff fd94 	bl	80a0c10 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a10e8:	4620      	mov	r0, r4
 80a10ea:	f7ff fd86 	bl	80a0bfa <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a10ee:	7823      	ldrb	r3, [r4, #0]
 80a10f0:	2b01      	cmp	r3, #1
 80a10f2:	d103      	bne.n	80a10fc <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a10f4:	4620      	mov	r0, r4
 80a10f6:	f7ff fe49 	bl	80a0d8c <_ZN7LSM9DS17initI2CEv>
 80a10fa:	e003      	b.n	80a1104 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a10fc:	b913      	cbnz	r3, 80a1104 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a10fe:	4620      	mov	r0, r4
 80a1100:	f7ff fdc8 	bl	80a0c94 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a1104:	210f      	movs	r1, #15
 80a1106:	4620      	mov	r0, r4
 80a1108:	f7ff ffd1 	bl	80a10ae <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a110c:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a110e:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a1110:	4620      	mov	r0, r4
 80a1112:	f7ff ffa3 	bl	80a105c <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a1116:	f646 033d 	movw	r3, #26685	; 0x683d
 80a111a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a111e:	b205      	sxth	r5, r0
 80a1120:	429d      	cmp	r5, r3
 80a1122:	d10a      	bne.n	80a113a <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a1124:	4620      	mov	r0, r4
 80a1126:	f7ff fe67 	bl	80a0df8 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a112a:	4620      	mov	r0, r4
 80a112c:	f7ff febf 	bl	80a0eae <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a1130:	4620      	mov	r0, r4
 80a1132:	f7ff ff2b 	bl	80a0f8c <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a1136:	4628      	mov	r0, r5
 80a1138:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a113a:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a113c:	bd38      	pop	{r3, r4, r5, pc}

080a113e <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a113e:	b510      	push	{r4, lr}
 80a1140:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a1142:	2127      	movs	r1, #39	; 0x27
 80a1144:	f7ff ffb3 	bl	80a10ae <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a1148:	2101      	movs	r1, #1
 80a114a:	40a1      	lsls	r1, r4
 80a114c:	4008      	ands	r0, r1
 80a114e:	4120      	asrs	r0, r4
}
 80a1150:	b2c0      	uxtb	r0, r0
 80a1152:	bd10      	pop	{r4, pc}

080a1154 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a1154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1158:	4690      	mov	r8, r2
 80a115a:	460c      	mov	r4, r1
 80a115c:	461d      	mov	r5, r3
 80a115e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a1162:	f001 fdb9 	bl	80a2cd8 <HAL_Timer_Get_Milli_Seconds>
 80a1166:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a1168:	f003 f87c 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a116c:	4621      	mov	r1, r4
 80a116e:	f002 f83d 	bl	80a31ec <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a1172:	f003 f877 	bl	80a4264 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1176:	6803      	ldr	r3, [r0, #0]
 80a1178:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a117c:	689b      	ldr	r3, [r3, #8]
 80a117e:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a1180:	f003 f870 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a1184:	2100      	movs	r1, #0
 80a1186:	f002 f835 	bl	80a31f4 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a118a:	f003 f86b 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a118e:	4621      	mov	r1, r4
 80a1190:	4632      	mov	r2, r6
 80a1192:	f002 f828 	bl	80a31e6 <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a1196:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a1198:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a119c:	42b4      	cmp	r4, r6
 80a119e:	da1a      	bge.n	80a11d6 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a11a0:	f003 f860 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a11a4:	6803      	ldr	r3, [r0, #0]
 80a11a6:	691b      	ldr	r3, [r3, #16]
 80a11a8:	4798      	blx	r3
 80a11aa:	b140      	cbz	r0, 80a11be <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a11ac:	f003 f85a 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a11b0:	6803      	ldr	r3, [r0, #0]
 80a11b2:	f104 0801 	add.w	r8, r4, #1
 80a11b6:	695b      	ldr	r3, [r3, #20]
 80a11b8:	4798      	blx	r3
 80a11ba:	5528      	strb	r0, [r5, r4]
 80a11bc:	4644      	mov	r4, r8
 80a11be:	f001 fd8b 	bl	80a2cd8 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a11c2:	42b8      	cmp	r0, r7
 80a11c4:	d9ea      	bls.n	80a119c <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a11c6:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a11c8:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a11ca:	1b62      	subs	r2, r4, r5
 80a11cc:	4296      	cmp	r6, r2
 80a11ce:	dd05      	ble.n	80a11dc <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a11d0:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a11d4:	e7f9      	b.n	80a11ca <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a11d6:	2001      	movs	r0, #1
 80a11d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a11dc:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a11de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a11e2 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a11e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a11e4:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a11e6:	7801      	ldrb	r1, [r0, #0]
 80a11e8:	2901      	cmp	r1, #1
 80a11ea:	d107      	bne.n	80a11fc <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a11ec:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a11f0:	9300      	str	r3, [sp, #0]
 80a11f2:	4613      	mov	r3, r2
 80a11f4:	462a      	mov	r2, r5
 80a11f6:	f7ff ffad 	bl	80a1154 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a11fa:	e007      	b.n	80a120c <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a11fc:	b931      	cbnz	r1, 80a120c <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a11fe:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1202:	9300      	str	r3, [sp, #0]
 80a1204:	4613      	mov	r3, r2
 80a1206:	462a      	mov	r2, r5
 80a1208:	f7ff fd88 	bl	80a0d1c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a120c:	b003      	add	sp, #12
 80a120e:	bd30      	pop	{r4, r5, pc}

080a1210 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a1210:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a1212:	2306      	movs	r3, #6
 80a1214:	466a      	mov	r2, sp
 80a1216:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a1218:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a121a:	f7ff ffe2 	bl	80a11e2 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a121e:	b330      	cbz	r0, 80a126e <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a1220:	f89d 3000 	ldrb.w	r3, [sp]
 80a1224:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1228:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a122c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1230:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a1234:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1238:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a123c:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a1240:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a1242:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a1246:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a124a:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a124c:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a124e:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1250:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a1252:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a1254:	b15d      	cbz	r5, 80a126e <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a1256:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a125a:	1b49      	subs	r1, r1, r5
 80a125c:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a125e:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a1262:	1a52      	subs	r2, r2, r1
 80a1264:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a1266:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a126a:	1a9b      	subs	r3, r3, r2
 80a126c:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a126e:	b003      	add	sp, #12
 80a1270:	bd30      	pop	{r4, r5, pc}

080a1272 <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a1272:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a1274:	2306      	movs	r3, #6
 80a1276:	466a      	mov	r2, sp
 80a1278:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a127a:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a127c:	f7ff ffb1 	bl	80a11e2 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a1280:	b330      	cbz	r0, 80a12d0 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a1282:	f89d 3000 	ldrb.w	r3, [sp]
 80a1286:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a128a:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a128e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1292:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1296:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a129a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a129e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a12a2:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a12a4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a12a8:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a12ac:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a12ae:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a12b0:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a12b2:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a12b4:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a12b6:	b15d      	cbz	r5, 80a12d0 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a12b8:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a12bc:	1b49      	subs	r1, r1, r5
 80a12be:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a12c0:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a12c4:	1a52      	subs	r2, r2, r1
 80a12c6:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a12c8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a12cc:	1a9b      	subs	r3, r3, r2
 80a12ce:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a12d0:	b003      	add	sp, #12
 80a12d2:	bd30      	pop	{r4, r5, pc}

080a12d4 <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a12d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a12d8:	4604      	mov	r4, r0
 80a12da:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a12dc:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a12de:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a12e0:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a12e2:	9304      	str	r3, [sp, #16]
 80a12e4:	9305      	str	r3, [sp, #20]
 80a12e6:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a12e8:	9307      	str	r3, [sp, #28]
 80a12ea:	9308      	str	r3, [sp, #32]
 80a12ec:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a12ee:	f7ff fecb 	bl	80a1088 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a12f2:	223f      	movs	r2, #63	; 0x3f
 80a12f4:	212e      	movs	r1, #46	; 0x2e
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	f7ff fd6a 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a12fc:	212f      	movs	r1, #47	; 0x2f
 80a12fe:	4620      	mov	r0, r4
 80a1300:	f7ff feac 	bl	80a105c <_ZN7LSM9DS110xgReadByteEh>
 80a1304:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a1308:	2e1e      	cmp	r6, #30
 80a130a:	d9f7      	bls.n	80a12fc <_ZN7LSM9DS19calibrateEb+0x28>
 80a130c:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a130e:	42b7      	cmp	r7, r6
 80a1310:	da32      	bge.n	80a1378 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a1312:	4620      	mov	r0, r4
 80a1314:	f7ff ffad 	bl	80a1272 <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a1318:	9a07      	ldr	r2, [sp, #28]
 80a131a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a131e:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a1320:	4413      	add	r3, r2
 80a1322:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a1324:	9a08      	ldr	r2, [sp, #32]
 80a1326:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a132a:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a132c:	4413      	add	r3, r2
 80a132e:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a1330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1332:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a1336:	4413      	add	r3, r2
 80a1338:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a133a:	f7ff ff69 	bl	80a1210 <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a133e:	9a04      	ldr	r2, [sp, #16]
 80a1340:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a1344:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a1346:	4413      	add	r3, r2
 80a1348:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a134a:	9a05      	ldr	r2, [sp, #20]
 80a134c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a1350:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a1354:	4413      	add	r3, r2
 80a1356:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a1358:	f003 fa92 	bl	80a4880 <__aeabi_f2d>
 80a135c:	4602      	mov	r2, r0
 80a135e:	460b      	mov	r3, r1
 80a1360:	2000      	movs	r0, #0
 80a1362:	4926      	ldr	r1, [pc, #152]	; (80a13fc <_ZN7LSM9DS19calibrateEb+0x128>)
 80a1364:	f003 fc0a 	bl	80a4b7c <__aeabi_ddiv>
 80a1368:	f003 fd8e 	bl	80a4e88 <__aeabi_d2iz>
 80a136c:	b200      	sxth	r0, r0
 80a136e:	1a2d      	subs	r5, r5, r0
 80a1370:	9806      	ldr	r0, [sp, #24]
 80a1372:	4405      	add	r5, r0
 80a1374:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a1376:	e7ca      	b.n	80a130e <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a1378:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a137c:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a1380:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a1384:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a1388:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a138c:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a1390:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a1392:	a907      	add	r1, sp, #28
 80a1394:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a1398:	fb90 f0f6 	sdiv	r0, r0, r6
 80a139c:	b200      	sxth	r0, r0
 80a139e:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a13a2:	9202      	str	r2, [sp, #8]
 80a13a4:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a13a6:	f003 fe71 	bl	80a508c <__aeabi_i2f>
 80a13aa:	4659      	mov	r1, fp
 80a13ac:	f003 fec2 	bl	80a5134 <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a13b0:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a13b2:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a13b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a13ba:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a13bc:	fb90 f0f6 	sdiv	r0, r0, r6
 80a13c0:	b200      	sxth	r0, r0
 80a13c2:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a13c6:	f003 fe61 	bl	80a508c <__aeabi_i2f>
 80a13ca:	4651      	mov	r1, sl
 80a13cc:	f003 feb2 	bl	80a5134 <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a13d0:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a13d2:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a13d6:	9a02      	ldr	r2, [sp, #8]
 80a13d8:	d1db      	bne.n	80a1392 <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a13da:	2100      	movs	r1, #0
 80a13dc:	4620      	mov	r0, r4
 80a13de:	f7ff fe53 	bl	80a1088 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a13e2:	2200      	movs	r2, #0
 80a13e4:	212e      	movs	r1, #46	; 0x2e
 80a13e6:	4620      	mov	r0, r4
 80a13e8:	f7ff fcf2 	bl	80a0dd0 <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a13ec:	9b01      	ldr	r3, [sp, #4]
 80a13ee:	b113      	cbz	r3, 80a13f6 <_ZN7LSM9DS19calibrateEb+0x122>
 80a13f0:	2301      	movs	r3, #1
 80a13f2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a13f6:	b00b      	add	sp, #44	; 0x2c
 80a13f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a13fc:	3ff00000 	.word	0x3ff00000

080a1400 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a1400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1402:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1404:	7801      	ldrb	r1, [r0, #0]
 80a1406:	2901      	cmp	r1, #1
 80a1408:	d107      	bne.n	80a141a <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a140a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a140e:	9300      	str	r3, [sp, #0]
 80a1410:	4613      	mov	r3, r2
 80a1412:	462a      	mov	r2, r5
 80a1414:	f7ff fe9e 	bl	80a1154 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a1418:	e007      	b.n	80a142a <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a141a:	b931      	cbnz	r1, 80a142a <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a141c:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1420:	9300      	str	r3, [sp, #0]
 80a1422:	4613      	mov	r3, r2
 80a1424:	462a      	mov	r2, r5
 80a1426:	f7ff fc79 	bl	80a0d1c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a142a:	b003      	add	sp, #12
 80a142c:	bd30      	pop	{r4, r5, pc}

080a142e <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a142e:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a1430:	2306      	movs	r3, #6
 80a1432:	466a      	mov	r2, sp
 80a1434:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a1436:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a1438:	f7ff ffe2 	bl	80a1400 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a143c:	b1a0      	cbz	r0, 80a1468 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a143e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a1442:	f89d 3000 	ldrb.w	r3, [sp]
 80a1446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a144a:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a144c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a1450:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1458:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a145a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a145e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1466:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a1468:	b002      	add	sp, #8
 80a146a:	bd10      	pop	{r4, pc}

080a146c <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1470:	4605      	mov	r5, r0
 80a1472:	468a      	mov	sl, r1
 80a1474:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a1476:	2300      	movs	r3, #0
 80a1478:	f8ad 3000 	strh.w	r3, [sp]
 80a147c:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a1480:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a1484:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a1488:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a148c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1490:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a1492:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a1494:	2103      	movs	r1, #3
 80a1496:	4628      	mov	r0, r5
 80a1498:	f7ff fe51 	bl	80a113e <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a149c:	2800      	cmp	r0, #0
 80a149e:	d0f9      	beq.n	80a1494 <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a14a0:	4628      	mov	r0, r5
 80a14a2:	f7ff ffc4 	bl	80a142e <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a14a6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a14a8:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a14ac:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a14ae:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a14b2:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a14b4:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a14b8:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a14ba:	aa04      	add	r2, sp, #16
 80a14bc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a14c0:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a14c4:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a14c6:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a14ca:	bfb8      	it	lt
 80a14cc:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a14d0:	4291      	cmp	r1, r2
 80a14d2:	bfc8      	it	gt
 80a14d4:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a14d8:	3301      	adds	r3, #1
 80a14da:	2b03      	cmp	r3, #3
 80a14dc:	d1ed      	bne.n	80a14ba <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a14de:	3c01      	subs	r4, #1
 80a14e0:	d1d8      	bne.n	80a1494 <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a14e2:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a14e6:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a14ea:	f04f 0b02 	mov.w	fp, #2
 80a14ee:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a14f2:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a14f6:	441e      	add	r6, r3
 80a14f8:	fb96 f6fb 	sdiv	r6, r6, fp
 80a14fc:	b236      	sxth	r6, r6
 80a14fe:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a1502:	4630      	mov	r0, r6
 80a1504:	f003 fdc2 	bl	80a508c <__aeabi_i2f>
 80a1508:	4601      	mov	r1, r0
 80a150a:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a150c:	f003 fe12 	bl	80a5134 <__aeabi_fmul>
 80a1510:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a1514:	f1ba 0f00 	cmp.w	sl, #0
 80a1518:	d004      	beq.n	80a1524 <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a151a:	4632      	mov	r2, r6
 80a151c:	b2e1      	uxtb	r1, r4
 80a151e:	4628      	mov	r0, r5
 80a1520:	f7ff fd1c 	bl	80a0f5c <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a1524:	3401      	adds	r4, #1
 80a1526:	2c03      	cmp	r4, #3
 80a1528:	d1e1      	bne.n	80a14ee <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a152a:	b007      	add	sp, #28
 80a152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1530 <_GLOBAL__sub_I_magSensitivity>:
 80a1530:	f001 bbda 	b.w	80a2ce8 <HAL_Pin_Map>

080a1534 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a1534:	f001 bbc8 	b.w	80a2cc8 <HAL_Timer_Get_Micro_Seconds>

080a1538 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a1538:	b510      	push	{r4, lr}
 80a153a:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a153c:	68c0      	ldr	r0, [r0, #12]
 80a153e:	b108      	cbz	r0, 80a1544 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a1540:	f001 fde8 	bl	80a3114 <free>
  if (begun) pinMode(pin, INPUT);
 80a1544:	7823      	ldrb	r3, [r4, #0]
 80a1546:	b11b      	cbz	r3, 80a1550 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a1548:	2100      	movs	r1, #0
 80a154a:	79e0      	ldrb	r0, [r4, #7]
 80a154c:	f002 fe60 	bl	80a4210 <pinMode>
}
 80a1550:	4620      	mov	r0, r4
 80a1552:	bd10      	pop	{r4, pc}

080a1554 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a1554:	b538      	push	{r3, r4, r5, lr}
 80a1556:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a1558:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a155a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a155c:	b108      	cbz	r0, 80a1562 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a155e:	f001 fdd9 	bl	80a3114 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a1562:	79a3      	ldrb	r3, [r4, #6]
 80a1564:	2b06      	cmp	r3, #6
 80a1566:	bf0c      	ite	eq
 80a1568:	2004      	moveq	r0, #4
 80a156a:	2003      	movne	r0, #3
 80a156c:	4368      	muls	r0, r5
 80a156e:	b280      	uxth	r0, r0
 80a1570:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a1572:	f001 fdc7 	bl	80a3104 <malloc>
 80a1576:	60e0      	str	r0, [r4, #12]
 80a1578:	b128      	cbz	r0, 80a1586 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a157a:	88a2      	ldrh	r2, [r4, #4]
 80a157c:	2100      	movs	r1, #0
 80a157e:	f003 ffde 	bl	80a553e <memset>
    numLEDs = n;
 80a1582:	8065      	strh	r5, [r4, #2]
 80a1584:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a1586:	80a0      	strh	r0, [r4, #4]
 80a1588:	8060      	strh	r0, [r4, #2]
 80a158a:	bd38      	pop	{r3, r4, r5, pc}

080a158c <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a158c:	b510      	push	{r4, lr}
 80a158e:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a1590:	2101      	movs	r1, #1
 80a1592:	79c0      	ldrb	r0, [r0, #7]
 80a1594:	f002 fe3c 	bl	80a4210 <pinMode>
  digitalWrite(pin, LOW);
 80a1598:	2100      	movs	r1, #0
 80a159a:	79e0      	ldrb	r0, [r4, #7]
 80a159c:	f002 fe49 	bl	80a4232 <digitalWrite>
  begun = true;
 80a15a0:	2301      	movs	r3, #1
 80a15a2:	7023      	strb	r3, [r4, #0]
 80a15a4:	bd10      	pop	{r4, pc}

080a15a6 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a15a6:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a15a8:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a15aa:	4605      	mov	r5, r0
 80a15ac:	460c      	mov	r4, r1
    if (begun) {
 80a15ae:	b11b      	cbz	r3, 80a15b8 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a15b0:	2100      	movs	r1, #0
 80a15b2:	79c0      	ldrb	r0, [r0, #7]
 80a15b4:	f002 fe2c 	bl	80a4210 <pinMode>
    }
    pin = p;
    if (begun) {
 80a15b8:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a15ba:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a15bc:	b153      	cbz	r3, 80a15d4 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a15be:	b2a4      	uxth	r4, r4
 80a15c0:	4620      	mov	r0, r4
 80a15c2:	2101      	movs	r1, #1
 80a15c4:	f002 fe24 	bl	80a4210 <pinMode>
        digitalWrite(p, LOW);
 80a15c8:	4620      	mov	r0, r4
    }
}
 80a15ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a15ce:	2100      	movs	r1, #0
 80a15d0:	f002 be2f 	b.w	80a4232 <digitalWrite>
 80a15d4:	bd38      	pop	{r3, r4, r5, pc}

080a15d6 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a15d6:	b570      	push	{r4, r5, r6, lr}
 80a15d8:	4604      	mov	r4, r0
 80a15da:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a15dc:	2500      	movs	r5, #0
 80a15de:	7183      	strb	r3, [r0, #6]
 80a15e0:	7005      	strb	r5, [r0, #0]
 80a15e2:	7205      	strb	r5, [r0, #8]
 80a15e4:	60c5      	str	r5, [r0, #12]
 80a15e6:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a15e8:	f7ff ffb4 	bl	80a1554 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a15ec:	4620      	mov	r0, r4
 80a15ee:	4631      	mov	r1, r6
 80a15f0:	f7ff ffd9 	bl	80a15a6 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a15f4:	4620      	mov	r0, r4
 80a15f6:	bd70      	pop	{r4, r5, r6, pc}

080a15f8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a15f8:	68c3      	ldr	r3, [r0, #12]
 80a15fa:	2b00      	cmp	r3, #0
 80a15fc:	f000 858e 	beq.w	80a211c <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a1600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1604:	4604      	mov	r4, r0
 80a1606:	7983      	ldrb	r3, [r0, #6]
 80a1608:	b086      	sub	sp, #24
 80a160a:	3b02      	subs	r3, #2
 80a160c:	b2db      	uxtb	r3, r3
 80a160e:	2b04      	cmp	r3, #4
 80a1610:	bf96      	itet	ls
 80a1612:	4a29      	ldrls	r2, [pc, #164]	; (80a16b8 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a1614:	2532      	movhi	r5, #50	; 0x32
 80a1616:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a161a:	f7ff ff8b 	bl	80a1534 <micros>
 80a161e:	6923      	ldr	r3, [r4, #16]
 80a1620:	1ac0      	subs	r0, r0, r3
 80a1622:	42a8      	cmp	r0, r5
 80a1624:	d3f9      	bcc.n	80a161a <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a1626:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1628:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a162a:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a162c:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a162e:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a1632:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1636:	f000 8272 	beq.w	80a1b1e <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a163a:	2907      	cmp	r1, #7
 80a163c:	f000 826f 	beq.w	80a1b1e <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a1640:	2906      	cmp	r1, #6
 80a1642:	f000 8432 	beq.w	80a1eaa <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a1646:	2905      	cmp	r1, #5
 80a1648:	f000 83ab 	beq.w	80a1da2 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a164c:	2908      	cmp	r1, #8
 80a164e:	f000 83a8 	beq.w	80a1da2 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a1652:	2900      	cmp	r1, #0
 80a1654:	f040 8563 	bne.w	80a211e <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a1658:	4a18      	ldr	r2, [pc, #96]	; (80a16bc <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a165a:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a165e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1662:	b29b      	uxth	r3, r3
 80a1664:	2b00      	cmp	r3, #0
 80a1666:	f000 8395 	beq.w	80a1d94 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a166a:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a166c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1670:	f10e 0503 	add.w	r5, lr, #3
 80a1674:	3b03      	subs	r3, #3
 80a1676:	b29b      	uxth	r3, r3
 80a1678:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a167c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1680:	b2db      	uxtb	r3, r3
 80a1682:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1686:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a168a:	b2db      	uxtb	r3, r3
 80a168c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1690:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1694:	b2db      	uxtb	r3, r3
 80a1696:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a169a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a169e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a16a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a16a6:	021b      	lsls	r3, r3, #8
 80a16a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a16ac:	4303      	orrs	r3, r0
 80a16ae:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a16b0:	f88d 1005 	strb.w	r1, [sp, #5]
 80a16b4:	e11b      	b.n	80a18ee <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a16b6:	bf00      	nop
 80a16b8:	080a5888 	.word	0x080a5888
 80a16bc:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a16c0:	4600      	mov	r0, r0
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a17c8:	79e3      	ldrb	r3, [r4, #7]
 80a17ca:	6810      	ldr	r0, [r2, #0]
 80a17cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17d0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17d4:	88bf      	ldrh	r7, [r7, #4]
 80a17d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17da:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17dc:	4600      	mov	r0, r0
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a18d6:	9b04      	ldr	r3, [sp, #16]
 80a18d8:	085b      	lsrs	r3, r3, #1
 80a18da:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a18dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18e0:	3301      	adds	r3, #1
 80a18e2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a18e4:	2b17      	cmp	r3, #23
 80a18e6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a18ea:	f200 82db 	bhi.w	80a1ea4 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a18ee:	79e3      	ldrb	r3, [r4, #7]
 80a18f0:	6810      	ldr	r0, [r2, #0]
 80a18f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18fa:	88bf      	ldrh	r7, [r7, #4]
 80a18fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1900:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1902:	9803      	ldr	r0, [sp, #12]
 80a1904:	9b04      	ldr	r3, [sp, #16]
 80a1906:	4218      	tst	r0, r3
 80a1908:	f47f aeda 	bne.w	80a16c0 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a190c:	4600      	mov	r0, r0
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a195e:	79e3      	ldrb	r3, [r4, #7]
 80a1960:	6810      	ldr	r0, [r2, #0]
 80a1962:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1966:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a196a:	88bf      	ldrh	r7, [r7, #4]
 80a196c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1970:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1972:	4600      	mov	r0, r0
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	e6db      	b.n	80a18d6 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1b1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1b22:	4a17      	ldr	r2, [pc, #92]	; (80a1b80 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a1b24:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a1b26:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1b2a:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1b2c:	2b00      	cmp	r3, #0
 80a1b2e:	f000 8131 	beq.w	80a1d94 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1b32:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1b34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1b38:	f10e 0103 	add.w	r1, lr, #3
 80a1b3c:	3b03      	subs	r3, #3
 80a1b3e:	b29b      	uxth	r3, r3
 80a1b40:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1b44:	f89e 3000 	ldrb.w	r3, [lr]
 80a1b48:	b2db      	uxtb	r3, r3
 80a1b4a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1b4e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1b52:	b2db      	uxtb	r3, r3
 80a1b54:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1b58:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1b5c:	b2db      	uxtb	r3, r3
 80a1b5e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1b62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1b66:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1b6a:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a1b6e:	0200      	lsls	r0, r0, #8
 80a1b70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a1b74:	433b      	orrs	r3, r7
 80a1b76:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1b78:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1b7c:	e080      	b.n	80a1c80 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a1b7e:	bf00      	nop
 80a1b80:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b84:	4600      	mov	r0, r0
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
 80a1bc4:	bf00      	nop
 80a1bc6:	bf00      	nop
 80a1bc8:	bf00      	nop
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1c1e:	79e3      	ldrb	r3, [r4, #7]
 80a1c20:	6810      	ldr	r0, [r2, #0]
 80a1c22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c26:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c2a:	88bf      	ldrh	r7, [r7, #4]
 80a1c2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c30:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c32:	4600      	mov	r0, r0
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1c68:	9b04      	ldr	r3, [sp, #16]
 80a1c6a:	085b      	lsrs	r3, r3, #1
 80a1c6c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1c6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1c72:	3301      	adds	r3, #1
 80a1c74:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1c76:	2b17      	cmp	r3, #23
 80a1c78:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1c7c:	f200 8083 	bhi.w	80a1d86 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1c80:	79e3      	ldrb	r3, [r4, #7]
 80a1c82:	6810      	ldr	r0, [r2, #0]
 80a1c84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c88:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c8c:	88bf      	ldrh	r7, [r7, #4]
 80a1c8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c92:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1c94:	9803      	ldr	r0, [sp, #12]
 80a1c96:	9b04      	ldr	r3, [sp, #16]
 80a1c98:	4218      	tst	r0, r3
 80a1c9a:	f47f af73 	bne.w	80a1b84 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c9e:	4600      	mov	r0, r0
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a1cc6:	79e3      	ldrb	r3, [r4, #7]
 80a1cc8:	6810      	ldr	r0, [r2, #0]
 80a1cca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1cce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1cd2:	88bf      	ldrh	r7, [r7, #4]
 80a1cd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1cd8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1cda:	4600      	mov	r0, r0
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
 80a1d52:	bf00      	nop
 80a1d54:	bf00      	nop
 80a1d56:	bf00      	nop
 80a1d58:	bf00      	nop
 80a1d5a:	bf00      	nop
 80a1d5c:	bf00      	nop
 80a1d5e:	bf00      	nop
 80a1d60:	bf00      	nop
 80a1d62:	bf00      	nop
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	e770      	b.n	80a1c68 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1d86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1d8a:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1d8c:	b29b      	uxth	r3, r3
 80a1d8e:	2b00      	cmp	r3, #0
 80a1d90:	f47f aecf 	bne.w	80a1b32 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1d94:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1d96:	f7ff fbcd 	bl	80a1534 <micros>
 80a1d9a:	6120      	str	r0, [r4, #16]
}
 80a1d9c:	b006      	add	sp, #24
 80a1d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1da2:	4b5e      	ldr	r3, [pc, #376]	; (80a1f1c <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1da4:	4a5e      	ldr	r2, [pc, #376]	; (80a1f20 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1da6:	4618      	mov	r0, r3
 80a1da8:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1daa:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1dae:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1db0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1db4:	b292      	uxth	r2, r2
 80a1db6:	2a00      	cmp	r2, #0
 80a1db8:	d0ec      	beq.n	80a1d94 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1dba:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1dbe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1dc2:	f10e 0503 	add.w	r5, lr, #3
 80a1dc6:	3a03      	subs	r2, #3
 80a1dc8:	b292      	uxth	r2, r2
 80a1dca:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1dce:	f89e 2000 	ldrb.w	r2, [lr]
 80a1dd2:	b2d2      	uxtb	r2, r2
 80a1dd4:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1dd8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1ddc:	b2d2      	uxtb	r2, r2
 80a1dde:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1de2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a1de6:	b2d2      	uxtb	r2, r2
 80a1de8:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1dec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1df0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1df4:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1df8:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1dfc:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1e00:	ea42 020c 	orr.w	r2, r2, ip
 80a1e04:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1e06:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1e0a:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1e0c:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1e0e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1e12:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1e16:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1e1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1e1e:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1e20:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1e24:	9e03      	ldr	r6, [sp, #12]
 80a1e26:	9a04      	ldr	r2, [sp, #16]
 80a1e28:	4216      	tst	r6, r2
 80a1e2a:	d023      	beq.n	80a1e74 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1e2c:	685a      	ldr	r2, [r3, #4]
 80a1e2e:	9e05      	ldr	r6, [sp, #20]
 80a1e30:	1b92      	subs	r2, r2, r6
 80a1e32:	2a4f      	cmp	r2, #79	; 0x4f
 80a1e34:	d9fa      	bls.n	80a1e2c <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1e36:	79e2      	ldrb	r2, [r4, #7]
 80a1e38:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1e3c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1e40:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1e44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1e48:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1e4c:	6842      	ldr	r2, [r0, #4]
 80a1e4e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1e50:	685a      	ldr	r2, [r3, #4]
 80a1e52:	9e05      	ldr	r6, [sp, #20]
 80a1e54:	1b92      	subs	r2, r2, r6
 80a1e56:	2a07      	cmp	r2, #7
 80a1e58:	d9fa      	bls.n	80a1e50 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1e5a:	9a04      	ldr	r2, [sp, #16]
 80a1e5c:	0852      	lsrs	r2, r2, #1
 80a1e5e:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1e60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1e64:	3201      	adds	r2, #1
 80a1e66:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1e68:	2a17      	cmp	r2, #23
 80a1e6a:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1e6e:	d9cc      	bls.n	80a1e0a <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1e70:	46ae      	mov	lr, r5
 80a1e72:	e79d      	b.n	80a1db0 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1e74:	685a      	ldr	r2, [r3, #4]
 80a1e76:	9e05      	ldr	r6, [sp, #20]
 80a1e78:	1b92      	subs	r2, r2, r6
 80a1e7a:	2a18      	cmp	r2, #24
 80a1e7c:	d9fa      	bls.n	80a1e74 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1e7e:	79e2      	ldrb	r2, [r4, #7]
 80a1e80:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1e84:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1e88:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1e8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1e90:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1e94:	6842      	ldr	r2, [r0, #4]
 80a1e96:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1e98:	685a      	ldr	r2, [r3, #4]
 80a1e9a:	9e05      	ldr	r6, [sp, #20]
 80a1e9c:	1b92      	subs	r2, r2, r6
 80a1e9e:	2a45      	cmp	r2, #69	; 0x45
 80a1ea0:	d9fa      	bls.n	80a1e98 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1ea2:	e7da      	b.n	80a1e5a <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1ea4:	46ae      	mov	lr, r5
 80a1ea6:	f7ff bbda 	b.w	80a165e <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1eaa:	4a1d      	ldr	r2, [pc, #116]	; (80a1f20 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1eac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1eb0:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1eb2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1eb6:	b29b      	uxth	r3, r3
 80a1eb8:	2b00      	cmp	r3, #0
 80a1eba:	f43f af6b 	beq.w	80a1d94 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1ebe:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1ec0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1ec4:	f10e 0104 	add.w	r1, lr, #4
 80a1ec8:	3b04      	subs	r3, #4
 80a1eca:	b29b      	uxth	r3, r3
 80a1ecc:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1ed0:	f89e 3000 	ldrb.w	r3, [lr]
 80a1ed4:	b2db      	uxtb	r3, r3
 80a1ed6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1eda:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1ede:	b2db      	uxtb	r3, r3
 80a1ee0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1ee4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1ee8:	b2db      	uxtb	r3, r3
 80a1eea:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1eee:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1ef2:	b2db      	uxtb	r3, r3
 80a1ef4:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1ef8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1efc:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1f00:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1f04:	043f      	lsls	r7, r7, #16
 80a1f06:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1f0a:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1f0e:	4303      	orrs	r3, r0
 80a1f10:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1f14:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1f16:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1f1a:	e07e      	b.n	80a201a <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1f1c:	e0001000 	.word	0xe0001000
 80a1f20:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1f24:	4600      	mov	r0, r0
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1f92:	79e3      	ldrb	r3, [r4, #7]
 80a1f94:	6810      	ldr	r0, [r2, #0]
 80a1f96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1f9a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1f9e:	88bf      	ldrh	r7, [r7, #4]
 80a1fa0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1fa4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1fa6:	4600      	mov	r0, r0
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
 80a1fbc:	bf00      	nop
 80a1fbe:	bf00      	nop
 80a1fc0:	bf00      	nop
 80a1fc2:	bf00      	nop
 80a1fc4:	bf00      	nop
 80a1fc6:	bf00      	nop
 80a1fc8:	bf00      	nop
 80a1fca:	bf00      	nop
 80a1fcc:	bf00      	nop
 80a1fce:	bf00      	nop
 80a1fd0:	bf00      	nop
 80a1fd2:	bf00      	nop
 80a1fd4:	bf00      	nop
 80a1fd6:	bf00      	nop
 80a1fd8:	bf00      	nop
 80a1fda:	bf00      	nop
 80a1fdc:	bf00      	nop
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2004:	9b04      	ldr	r3, [sp, #16]
 80a2006:	085b      	lsrs	r3, r3, #1
 80a2008:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a200a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a200e:	3301      	adds	r3, #1
 80a2010:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a2012:	2b1f      	cmp	r3, #31
 80a2014:	f88d 3005 	strb.w	r3, [sp, #5]
 80a2018:	d87e      	bhi.n	80a2118 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a201a:	79e3      	ldrb	r3, [r4, #7]
 80a201c:	6810      	ldr	r0, [r2, #0]
 80a201e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2022:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2026:	88bf      	ldrh	r7, [r7, #4]
 80a2028:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a202c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a202e:	9803      	ldr	r0, [sp, #12]
 80a2030:	9b04      	ldr	r3, [sp, #16]
 80a2032:	4218      	tst	r0, r3
 80a2034:	f47f af76 	bne.w	80a1f24 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2038:	4600      	mov	r0, r0
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	bf00      	nop
 80a204c:	bf00      	nop
 80a204e:	bf00      	nop
 80a2050:	bf00      	nop
 80a2052:	bf00      	nop
 80a2054:	bf00      	nop
 80a2056:	bf00      	nop
 80a2058:	bf00      	nop
 80a205a:	bf00      	nop
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a2060:	79e3      	ldrb	r3, [r4, #7]
 80a2062:	6810      	ldr	r0, [r2, #0]
 80a2064:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2068:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a206c:	88bf      	ldrh	r7, [r7, #4]
 80a206e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2072:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2074:	4600      	mov	r0, r0
 80a2076:	bf00      	nop
 80a2078:	bf00      	nop
 80a207a:	bf00      	nop
 80a207c:	bf00      	nop
 80a207e:	bf00      	nop
 80a2080:	bf00      	nop
 80a2082:	bf00      	nop
 80a2084:	bf00      	nop
 80a2086:	bf00      	nop
 80a2088:	bf00      	nop
 80a208a:	bf00      	nop
 80a208c:	bf00      	nop
 80a208e:	bf00      	nop
 80a2090:	bf00      	nop
 80a2092:	bf00      	nop
 80a2094:	bf00      	nop
 80a2096:	bf00      	nop
 80a2098:	bf00      	nop
 80a209a:	bf00      	nop
 80a209c:	bf00      	nop
 80a209e:	bf00      	nop
 80a20a0:	bf00      	nop
 80a20a2:	bf00      	nop
 80a20a4:	bf00      	nop
 80a20a6:	bf00      	nop
 80a20a8:	bf00      	nop
 80a20aa:	bf00      	nop
 80a20ac:	bf00      	nop
 80a20ae:	bf00      	nop
 80a20b0:	bf00      	nop
 80a20b2:	bf00      	nop
 80a20b4:	bf00      	nop
 80a20b6:	bf00      	nop
 80a20b8:	bf00      	nop
 80a20ba:	bf00      	nop
 80a20bc:	bf00      	nop
 80a20be:	bf00      	nop
 80a20c0:	bf00      	nop
 80a20c2:	bf00      	nop
 80a20c4:	bf00      	nop
 80a20c6:	bf00      	nop
 80a20c8:	bf00      	nop
 80a20ca:	bf00      	nop
 80a20cc:	bf00      	nop
 80a20ce:	bf00      	nop
 80a20d0:	bf00      	nop
 80a20d2:	bf00      	nop
 80a20d4:	bf00      	nop
 80a20d6:	bf00      	nop
 80a20d8:	bf00      	nop
 80a20da:	bf00      	nop
 80a20dc:	bf00      	nop
 80a20de:	bf00      	nop
 80a20e0:	bf00      	nop
 80a20e2:	bf00      	nop
 80a20e4:	bf00      	nop
 80a20e6:	bf00      	nop
 80a20e8:	bf00      	nop
 80a20ea:	bf00      	nop
 80a20ec:	bf00      	nop
 80a20ee:	bf00      	nop
 80a20f0:	bf00      	nop
 80a20f2:	bf00      	nop
 80a20f4:	bf00      	nop
 80a20f6:	bf00      	nop
 80a20f8:	bf00      	nop
 80a20fa:	bf00      	nop
 80a20fc:	bf00      	nop
 80a20fe:	bf00      	nop
 80a2100:	bf00      	nop
 80a2102:	bf00      	nop
 80a2104:	bf00      	nop
 80a2106:	bf00      	nop
 80a2108:	bf00      	nop
 80a210a:	bf00      	nop
 80a210c:	bf00      	nop
 80a210e:	bf00      	nop
 80a2110:	bf00      	nop
 80a2112:	bf00      	nop
 80a2114:	bf00      	nop
 80a2116:	e775      	b.n	80a2004 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a2118:	468e      	mov	lr, r1
 80a211a:	e6ca      	b.n	80a1eb2 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a211c:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a211e:	2903      	cmp	r1, #3
 80a2120:	f000 812e 	beq.w	80a2380 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2124:	4a1e      	ldr	r2, [pc, #120]	; (80a21a0 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a2126:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a212a:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a212c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2130:	b29b      	uxth	r3, r3
 80a2132:	2b00      	cmp	r3, #0
 80a2134:	f43f ae2e 	beq.w	80a1d94 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a2138:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a213a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a213e:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a2140:	3b03      	subs	r3, #3
 80a2142:	b29b      	uxth	r3, r3
 80a2144:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2148:	f89e 3000 	ldrb.w	r3, [lr]
 80a214c:	f10e 0103 	add.w	r1, lr, #3
 80a2150:	b2db      	uxtb	r3, r3
 80a2152:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2156:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a215a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a215e:	b2db      	uxtb	r3, r3
 80a2160:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a2164:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2168:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a216c:	b2db      	uxtb	r3, r3
 80a216e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2172:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2176:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a217a:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a217e:	021b      	lsls	r3, r3, #8
 80a2180:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2184:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2188:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a218c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2190:	433b      	orrs	r3, r7
 80a2192:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2194:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a2198:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a219c:	e07d      	b.n	80a229a <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a219e:	bf00      	nop
 80a21a0:	20000204 	.word	0x20000204
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a21a4:	9b04      	ldr	r3, [sp, #16]
 80a21a6:	085b      	lsrs	r3, r3, #1
 80a21a8:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a21aa:	4600      	mov	r0, r0
 80a21ac:	bf00      	nop
 80a21ae:	bf00      	nop
 80a21b0:	bf00      	nop
 80a21b2:	bf00      	nop
 80a21b4:	bf00      	nop
 80a21b6:	bf00      	nop
 80a21b8:	bf00      	nop
 80a21ba:	bf00      	nop
 80a21bc:	bf00      	nop
 80a21be:	bf00      	nop
 80a21c0:	bf00      	nop
 80a21c2:	bf00      	nop
 80a21c4:	bf00      	nop
 80a21c6:	bf00      	nop
 80a21c8:	bf00      	nop
 80a21ca:	bf00      	nop
 80a21cc:	bf00      	nop
 80a21ce:	bf00      	nop
 80a21d0:	bf00      	nop
 80a21d2:	bf00      	nop
 80a21d4:	bf00      	nop
 80a21d6:	bf00      	nop
 80a21d8:	bf00      	nop
 80a21da:	bf00      	nop
 80a21dc:	bf00      	nop
 80a21de:	bf00      	nop
 80a21e0:	bf00      	nop
 80a21e2:	bf00      	nop
 80a21e4:	bf00      	nop
 80a21e6:	bf00      	nop
 80a21e8:	bf00      	nop
 80a21ea:	bf00      	nop
 80a21ec:	bf00      	nop
 80a21ee:	bf00      	nop
 80a21f0:	bf00      	nop
 80a21f2:	bf00      	nop
 80a21f4:	bf00      	nop
 80a21f6:	bf00      	nop
 80a21f8:	bf00      	nop
 80a21fa:	bf00      	nop
 80a21fc:	bf00      	nop
 80a21fe:	bf00      	nop
 80a2200:	bf00      	nop
 80a2202:	bf00      	nop
 80a2204:	bf00      	nop
 80a2206:	bf00      	nop
 80a2208:	bf00      	nop
 80a220a:	bf00      	nop
 80a220c:	bf00      	nop
 80a220e:	bf00      	nop
 80a2210:	bf00      	nop
 80a2212:	bf00      	nop
 80a2214:	bf00      	nop
 80a2216:	bf00      	nop
 80a2218:	bf00      	nop
 80a221a:	bf00      	nop
 80a221c:	bf00      	nop
 80a221e:	bf00      	nop
 80a2220:	bf00      	nop
 80a2222:	bf00      	nop
 80a2224:	bf00      	nop
 80a2226:	bf00      	nop
 80a2228:	bf00      	nop
 80a222a:	bf00      	nop
 80a222c:	bf00      	nop
 80a222e:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2230:	79e0      	ldrb	r0, [r4, #7]
 80a2232:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a2234:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2238:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a223c:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a2240:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a2244:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a2248:	3301      	adds	r3, #1
 80a224a:	b2db      	uxtb	r3, r3
 80a224c:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2250:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2254:	4600      	mov	r0, r0
 80a2256:	bf00      	nop
 80a2258:	bf00      	nop
 80a225a:	bf00      	nop
 80a225c:	bf00      	nop
 80a225e:	bf00      	nop
 80a2260:	bf00      	nop
 80a2262:	bf00      	nop
 80a2264:	bf00      	nop
 80a2266:	bf00      	nop
 80a2268:	bf00      	nop
 80a226a:	bf00      	nop
 80a226c:	bf00      	nop
 80a226e:	bf00      	nop
 80a2270:	bf00      	nop
 80a2272:	bf00      	nop
 80a2274:	bf00      	nop
 80a2276:	bf00      	nop
 80a2278:	bf00      	nop
 80a227a:	bf00      	nop
 80a227c:	bf00      	nop
          if(j==24) break;
 80a227e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2282:	2b18      	cmp	r3, #24
 80a2284:	d07a      	beq.n	80a237c <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a2286:	79e3      	ldrb	r3, [r4, #7]
 80a2288:	6810      	ldr	r0, [r2, #0]
 80a228a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a228e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2292:	88bf      	ldrh	r7, [r7, #4]
 80a2294:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2298:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a229a:	9803      	ldr	r0, [sp, #12]
 80a229c:	9b04      	ldr	r3, [sp, #16]
 80a229e:	4218      	tst	r0, r3
 80a22a0:	d180      	bne.n	80a21a4 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a22a2:	4600      	mov	r0, r0
 80a22a4:	bf00      	nop
 80a22a6:	bf00      	nop
 80a22a8:	bf00      	nop
 80a22aa:	bf00      	nop
 80a22ac:	bf00      	nop
 80a22ae:	bf00      	nop
 80a22b0:	bf00      	nop
 80a22b2:	bf00      	nop
 80a22b4:	bf00      	nop
 80a22b6:	bf00      	nop
 80a22b8:	bf00      	nop
 80a22ba:	bf00      	nop
 80a22bc:	bf00      	nop
 80a22be:	bf00      	nop
 80a22c0:	bf00      	nop
 80a22c2:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a22c4:	79e3      	ldrb	r3, [r4, #7]
 80a22c6:	6810      	ldr	r0, [r2, #0]
 80a22c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a22cc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a22d0:	88bf      	ldrh	r7, [r7, #4]
 80a22d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a22d6:	831f      	strh	r7, [r3, #24]
          j++;
 80a22d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a22dc:	3301      	adds	r3, #1
 80a22de:	b2db      	uxtb	r3, r3
 80a22e0:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a22e4:	9b04      	ldr	r3, [sp, #16]
 80a22e6:	085b      	lsrs	r3, r3, #1
 80a22e8:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a22ea:	4600      	mov	r0, r0
 80a22ec:	bf00      	nop
 80a22ee:	bf00      	nop
 80a22f0:	bf00      	nop
 80a22f2:	bf00      	nop
 80a22f4:	bf00      	nop
 80a22f6:	bf00      	nop
 80a22f8:	bf00      	nop
 80a22fa:	bf00      	nop
 80a22fc:	bf00      	nop
 80a22fe:	bf00      	nop
 80a2300:	bf00      	nop
 80a2302:	bf00      	nop
 80a2304:	bf00      	nop
 80a2306:	bf00      	nop
 80a2308:	bf00      	nop
 80a230a:	bf00      	nop
 80a230c:	bf00      	nop
 80a230e:	bf00      	nop
 80a2310:	bf00      	nop
 80a2312:	bf00      	nop
 80a2314:	bf00      	nop
 80a2316:	bf00      	nop
 80a2318:	bf00      	nop
 80a231a:	bf00      	nop
 80a231c:	bf00      	nop
 80a231e:	bf00      	nop
 80a2320:	bf00      	nop
 80a2322:	bf00      	nop
 80a2324:	bf00      	nop
 80a2326:	bf00      	nop
 80a2328:	bf00      	nop
 80a232a:	bf00      	nop
 80a232c:	bf00      	nop
 80a232e:	bf00      	nop
 80a2330:	bf00      	nop
 80a2332:	bf00      	nop
 80a2334:	bf00      	nop
 80a2336:	bf00      	nop
 80a2338:	bf00      	nop
 80a233a:	bf00      	nop
 80a233c:	bf00      	nop
 80a233e:	bf00      	nop
 80a2340:	bf00      	nop
 80a2342:	bf00      	nop
 80a2344:	bf00      	nop
 80a2346:	bf00      	nop
 80a2348:	bf00      	nop
 80a234a:	bf00      	nop
 80a234c:	bf00      	nop
 80a234e:	bf00      	nop
 80a2350:	bf00      	nop
 80a2352:	bf00      	nop
 80a2354:	bf00      	nop
 80a2356:	bf00      	nop
 80a2358:	bf00      	nop
 80a235a:	bf00      	nop
 80a235c:	bf00      	nop
 80a235e:	bf00      	nop
 80a2360:	bf00      	nop
 80a2362:	bf00      	nop
 80a2364:	bf00      	nop
 80a2366:	bf00      	nop
 80a2368:	bf00      	nop
 80a236a:	bf00      	nop
 80a236c:	bf00      	nop
 80a236e:	bf00      	nop
 80a2370:	bf00      	nop
 80a2372:	bf00      	nop
          if(j==24) break;
 80a2374:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2378:	2b18      	cmp	r3, #24
 80a237a:	d184      	bne.n	80a2286 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a237c:	468e      	mov	lr, r1
 80a237e:	e6d5      	b.n	80a212c <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a2380:	4a17      	ldr	r2, [pc, #92]	; (80a23e0 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a2382:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2386:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2388:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a238c:	b29b      	uxth	r3, r3
 80a238e:	2b00      	cmp	r3, #0
 80a2390:	f43f ad00 	beq.w	80a1d94 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a2394:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2396:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a239a:	f10e 0103 	add.w	r1, lr, #3
 80a239e:	3b03      	subs	r3, #3
 80a23a0:	b29b      	uxth	r3, r3
 80a23a2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a23a6:	f89e 3000 	ldrb.w	r3, [lr]
 80a23aa:	b2db      	uxtb	r3, r3
 80a23ac:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a23b0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a23b4:	b2db      	uxtb	r3, r3
 80a23b6:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a23ba:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a23be:	b2db      	uxtb	r3, r3
 80a23c0:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a23c4:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a23c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a23cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a23d0:	021b      	lsls	r3, r3, #8
 80a23d2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a23d6:	4303      	orrs	r3, r0
 80a23d8:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a23da:	f88d 6005 	strb.w	r6, [sp, #5]
 80a23de:	e0e0      	b.n	80a25a2 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a23e0:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a23e4:	4600      	mov	r0, r0
 80a23e6:	bf00      	nop
 80a23e8:	bf00      	nop
 80a23ea:	bf00      	nop
 80a23ec:	bf00      	nop
 80a23ee:	bf00      	nop
 80a23f0:	bf00      	nop
 80a23f2:	bf00      	nop
 80a23f4:	bf00      	nop
 80a23f6:	bf00      	nop
 80a23f8:	bf00      	nop
 80a23fa:	bf00      	nop
 80a23fc:	bf00      	nop
 80a23fe:	bf00      	nop
 80a2400:	bf00      	nop
 80a2402:	bf00      	nop
 80a2404:	bf00      	nop
 80a2406:	bf00      	nop
 80a2408:	bf00      	nop
 80a240a:	bf00      	nop
 80a240c:	bf00      	nop
 80a240e:	bf00      	nop
 80a2410:	bf00      	nop
 80a2412:	bf00      	nop
 80a2414:	bf00      	nop
 80a2416:	bf00      	nop
 80a2418:	bf00      	nop
 80a241a:	bf00      	nop
 80a241c:	bf00      	nop
 80a241e:	bf00      	nop
 80a2420:	bf00      	nop
 80a2422:	bf00      	nop
 80a2424:	bf00      	nop
 80a2426:	bf00      	nop
 80a2428:	bf00      	nop
 80a242a:	bf00      	nop
 80a242c:	bf00      	nop
 80a242e:	bf00      	nop
 80a2430:	bf00      	nop
 80a2432:	bf00      	nop
 80a2434:	bf00      	nop
 80a2436:	bf00      	nop
 80a2438:	bf00      	nop
 80a243a:	bf00      	nop
 80a243c:	bf00      	nop
 80a243e:	bf00      	nop
 80a2440:	bf00      	nop
 80a2442:	bf00      	nop
 80a2444:	bf00      	nop
 80a2446:	bf00      	nop
 80a2448:	bf00      	nop
 80a244a:	bf00      	nop
 80a244c:	bf00      	nop
 80a244e:	bf00      	nop
 80a2450:	bf00      	nop
 80a2452:	bf00      	nop
 80a2454:	bf00      	nop
 80a2456:	bf00      	nop
 80a2458:	bf00      	nop
 80a245a:	bf00      	nop
 80a245c:	bf00      	nop
 80a245e:	bf00      	nop
 80a2460:	bf00      	nop
 80a2462:	bf00      	nop
 80a2464:	bf00      	nop
 80a2466:	bf00      	nop
 80a2468:	bf00      	nop
 80a246a:	bf00      	nop
 80a246c:	bf00      	nop
 80a246e:	bf00      	nop
 80a2470:	bf00      	nop
 80a2472:	bf00      	nop
 80a2474:	bf00      	nop
 80a2476:	bf00      	nop
 80a2478:	bf00      	nop
 80a247a:	bf00      	nop
 80a247c:	bf00      	nop
 80a247e:	bf00      	nop
 80a2480:	bf00      	nop
 80a2482:	bf00      	nop
 80a2484:	bf00      	nop
 80a2486:	bf00      	nop
 80a2488:	bf00      	nop
 80a248a:	bf00      	nop
 80a248c:	bf00      	nop
 80a248e:	bf00      	nop
 80a2490:	bf00      	nop
 80a2492:	bf00      	nop
 80a2494:	bf00      	nop
 80a2496:	bf00      	nop
 80a2498:	bf00      	nop
 80a249a:	bf00      	nop
 80a249c:	bf00      	nop
 80a249e:	bf00      	nop
 80a24a0:	bf00      	nop
 80a24a2:	bf00      	nop
 80a24a4:	bf00      	nop
 80a24a6:	bf00      	nop
 80a24a8:	bf00      	nop
 80a24aa:	bf00      	nop
 80a24ac:	bf00      	nop
 80a24ae:	bf00      	nop
 80a24b0:	bf00      	nop
 80a24b2:	bf00      	nop
 80a24b4:	bf00      	nop
 80a24b6:	bf00      	nop
 80a24b8:	bf00      	nop
 80a24ba:	bf00      	nop
 80a24bc:	bf00      	nop
 80a24be:	bf00      	nop
 80a24c0:	bf00      	nop
 80a24c2:	bf00      	nop
 80a24c4:	bf00      	nop
 80a24c6:	bf00      	nop
 80a24c8:	bf00      	nop
 80a24ca:	bf00      	nop
 80a24cc:	bf00      	nop
 80a24ce:	bf00      	nop
 80a24d0:	bf00      	nop
 80a24d2:	bf00      	nop
 80a24d4:	bf00      	nop
 80a24d6:	bf00      	nop
 80a24d8:	bf00      	nop
 80a24da:	bf00      	nop
 80a24dc:	bf00      	nop
 80a24de:	bf00      	nop
 80a24e0:	bf00      	nop
 80a24e2:	bf00      	nop
 80a24e4:	bf00      	nop
 80a24e6:	bf00      	nop
 80a24e8:	bf00      	nop
 80a24ea:	bf00      	nop
 80a24ec:	bf00      	nop
 80a24ee:	bf00      	nop
 80a24f0:	bf00      	nop
 80a24f2:	bf00      	nop
 80a24f4:	bf00      	nop
 80a24f6:	bf00      	nop
 80a24f8:	bf00      	nop
 80a24fa:	bf00      	nop
 80a24fc:	bf00      	nop
 80a24fe:	bf00      	nop
 80a2500:	bf00      	nop
 80a2502:	bf00      	nop
 80a2504:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a2506:	79e3      	ldrb	r3, [r4, #7]
 80a2508:	6810      	ldr	r0, [r2, #0]
 80a250a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a250e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2512:	88bf      	ldrh	r7, [r7, #4]
 80a2514:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2518:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a251a:	4600      	mov	r0, r0
 80a251c:	bf00      	nop
 80a251e:	bf00      	nop
 80a2520:	bf00      	nop
 80a2522:	bf00      	nop
 80a2524:	bf00      	nop
 80a2526:	bf00      	nop
 80a2528:	bf00      	nop
 80a252a:	bf00      	nop
 80a252c:	bf00      	nop
 80a252e:	bf00      	nop
 80a2530:	bf00      	nop
 80a2532:	bf00      	nop
 80a2534:	bf00      	nop
 80a2536:	bf00      	nop
 80a2538:	bf00      	nop
 80a253a:	bf00      	nop
 80a253c:	bf00      	nop
 80a253e:	bf00      	nop
 80a2540:	bf00      	nop
 80a2542:	bf00      	nop
 80a2544:	bf00      	nop
 80a2546:	bf00      	nop
 80a2548:	bf00      	nop
 80a254a:	bf00      	nop
 80a254c:	bf00      	nop
 80a254e:	bf00      	nop
 80a2550:	bf00      	nop
 80a2552:	bf00      	nop
 80a2554:	bf00      	nop
 80a2556:	bf00      	nop
 80a2558:	bf00      	nop
 80a255a:	bf00      	nop
 80a255c:	bf00      	nop
 80a255e:	bf00      	nop
 80a2560:	bf00      	nop
 80a2562:	bf00      	nop
 80a2564:	bf00      	nop
 80a2566:	bf00      	nop
 80a2568:	bf00      	nop
 80a256a:	bf00      	nop
 80a256c:	bf00      	nop
 80a256e:	bf00      	nop
 80a2570:	bf00      	nop
 80a2572:	bf00      	nop
 80a2574:	bf00      	nop
 80a2576:	bf00      	nop
 80a2578:	bf00      	nop
 80a257a:	bf00      	nop
 80a257c:	bf00      	nop
 80a257e:	bf00      	nop
 80a2580:	bf00      	nop
 80a2582:	bf00      	nop
 80a2584:	bf00      	nop
 80a2586:	bf00      	nop
 80a2588:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a258a:	9b04      	ldr	r3, [sp, #16]
 80a258c:	085b      	lsrs	r3, r3, #1
 80a258e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2590:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2594:	3301      	adds	r3, #1
 80a2596:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a2598:	2b17      	cmp	r3, #23
 80a259a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a259e:	f200 80e3 	bhi.w	80a2768 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a25a2:	79e3      	ldrb	r3, [r4, #7]
 80a25a4:	6810      	ldr	r0, [r2, #0]
 80a25a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a25aa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a25ae:	88bf      	ldrh	r7, [r7, #4]
 80a25b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a25b4:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a25b6:	9803      	ldr	r0, [sp, #12]
 80a25b8:	9b04      	ldr	r3, [sp, #16]
 80a25ba:	4218      	tst	r0, r3
 80a25bc:	f47f af12 	bne.w	80a23e4 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a25c0:	4600      	mov	r0, r0
 80a25c2:	bf00      	nop
 80a25c4:	bf00      	nop
 80a25c6:	bf00      	nop
 80a25c8:	bf00      	nop
 80a25ca:	bf00      	nop
 80a25cc:	bf00      	nop
 80a25ce:	bf00      	nop
 80a25d0:	bf00      	nop
 80a25d2:	bf00      	nop
 80a25d4:	bf00      	nop
 80a25d6:	bf00      	nop
 80a25d8:	bf00      	nop
 80a25da:	bf00      	nop
 80a25dc:	bf00      	nop
 80a25de:	bf00      	nop
 80a25e0:	bf00      	nop
 80a25e2:	bf00      	nop
 80a25e4:	bf00      	nop
 80a25e6:	bf00      	nop
 80a25e8:	bf00      	nop
 80a25ea:	bf00      	nop
 80a25ec:	bf00      	nop
 80a25ee:	bf00      	nop
 80a25f0:	bf00      	nop
 80a25f2:	bf00      	nop
 80a25f4:	bf00      	nop
 80a25f6:	bf00      	nop
 80a25f8:	bf00      	nop
 80a25fa:	bf00      	nop
 80a25fc:	bf00      	nop
 80a25fe:	bf00      	nop
 80a2600:	bf00      	nop
 80a2602:	bf00      	nop
 80a2604:	bf00      	nop
 80a2606:	bf00      	nop
 80a2608:	bf00      	nop
 80a260a:	bf00      	nop
 80a260c:	bf00      	nop
 80a260e:	bf00      	nop
 80a2610:	bf00      	nop
 80a2612:	bf00      	nop
 80a2614:	bf00      	nop
 80a2616:	bf00      	nop
 80a2618:	bf00      	nop
 80a261a:	bf00      	nop
 80a261c:	bf00      	nop
 80a261e:	bf00      	nop
 80a2620:	bf00      	nop
 80a2622:	bf00      	nop
 80a2624:	bf00      	nop
 80a2626:	bf00      	nop
 80a2628:	bf00      	nop
 80a262a:	bf00      	nop
 80a262c:	bf00      	nop
 80a262e:	bf00      	nop
 80a2630:	bf00      	nop
 80a2632:	bf00      	nop
 80a2634:	bf00      	nop
 80a2636:	bf00      	nop
 80a2638:	bf00      	nop
 80a263a:	bf00      	nop
 80a263c:	bf00      	nop
 80a263e:	bf00      	nop
 80a2640:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a2642:	79e3      	ldrb	r3, [r4, #7]
 80a2644:	6810      	ldr	r0, [r2, #0]
 80a2646:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a264a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a264e:	88bf      	ldrh	r7, [r7, #4]
 80a2650:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2654:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2656:	4600      	mov	r0, r0
 80a2658:	bf00      	nop
 80a265a:	bf00      	nop
 80a265c:	bf00      	nop
 80a265e:	bf00      	nop
 80a2660:	bf00      	nop
 80a2662:	bf00      	nop
 80a2664:	bf00      	nop
 80a2666:	bf00      	nop
 80a2668:	bf00      	nop
 80a266a:	bf00      	nop
 80a266c:	bf00      	nop
 80a266e:	bf00      	nop
 80a2670:	bf00      	nop
 80a2672:	bf00      	nop
 80a2674:	bf00      	nop
 80a2676:	bf00      	nop
 80a2678:	bf00      	nop
 80a267a:	bf00      	nop
 80a267c:	bf00      	nop
 80a267e:	bf00      	nop
 80a2680:	bf00      	nop
 80a2682:	bf00      	nop
 80a2684:	bf00      	nop
 80a2686:	bf00      	nop
 80a2688:	bf00      	nop
 80a268a:	bf00      	nop
 80a268c:	bf00      	nop
 80a268e:	bf00      	nop
 80a2690:	bf00      	nop
 80a2692:	bf00      	nop
 80a2694:	bf00      	nop
 80a2696:	bf00      	nop
 80a2698:	bf00      	nop
 80a269a:	bf00      	nop
 80a269c:	bf00      	nop
 80a269e:	bf00      	nop
 80a26a0:	bf00      	nop
 80a26a2:	bf00      	nop
 80a26a4:	bf00      	nop
 80a26a6:	bf00      	nop
 80a26a8:	bf00      	nop
 80a26aa:	bf00      	nop
 80a26ac:	bf00      	nop
 80a26ae:	bf00      	nop
 80a26b0:	bf00      	nop
 80a26b2:	bf00      	nop
 80a26b4:	bf00      	nop
 80a26b6:	bf00      	nop
 80a26b8:	bf00      	nop
 80a26ba:	bf00      	nop
 80a26bc:	bf00      	nop
 80a26be:	bf00      	nop
 80a26c0:	bf00      	nop
 80a26c2:	bf00      	nop
 80a26c4:	bf00      	nop
 80a26c6:	bf00      	nop
 80a26c8:	bf00      	nop
 80a26ca:	bf00      	nop
 80a26cc:	bf00      	nop
 80a26ce:	bf00      	nop
 80a26d0:	bf00      	nop
 80a26d2:	bf00      	nop
 80a26d4:	bf00      	nop
 80a26d6:	bf00      	nop
 80a26d8:	bf00      	nop
 80a26da:	bf00      	nop
 80a26dc:	bf00      	nop
 80a26de:	bf00      	nop
 80a26e0:	bf00      	nop
 80a26e2:	bf00      	nop
 80a26e4:	bf00      	nop
 80a26e6:	bf00      	nop
 80a26e8:	bf00      	nop
 80a26ea:	bf00      	nop
 80a26ec:	bf00      	nop
 80a26ee:	bf00      	nop
 80a26f0:	bf00      	nop
 80a26f2:	bf00      	nop
 80a26f4:	bf00      	nop
 80a26f6:	bf00      	nop
 80a26f8:	bf00      	nop
 80a26fa:	bf00      	nop
 80a26fc:	bf00      	nop
 80a26fe:	bf00      	nop
 80a2700:	bf00      	nop
 80a2702:	bf00      	nop
 80a2704:	bf00      	nop
 80a2706:	bf00      	nop
 80a2708:	bf00      	nop
 80a270a:	bf00      	nop
 80a270c:	bf00      	nop
 80a270e:	bf00      	nop
 80a2710:	bf00      	nop
 80a2712:	bf00      	nop
 80a2714:	bf00      	nop
 80a2716:	bf00      	nop
 80a2718:	bf00      	nop
 80a271a:	bf00      	nop
 80a271c:	bf00      	nop
 80a271e:	bf00      	nop
 80a2720:	bf00      	nop
 80a2722:	bf00      	nop
 80a2724:	bf00      	nop
 80a2726:	bf00      	nop
 80a2728:	bf00      	nop
 80a272a:	bf00      	nop
 80a272c:	bf00      	nop
 80a272e:	bf00      	nop
 80a2730:	bf00      	nop
 80a2732:	bf00      	nop
 80a2734:	bf00      	nop
 80a2736:	bf00      	nop
 80a2738:	bf00      	nop
 80a273a:	bf00      	nop
 80a273c:	bf00      	nop
 80a273e:	bf00      	nop
 80a2740:	bf00      	nop
 80a2742:	bf00      	nop
 80a2744:	bf00      	nop
 80a2746:	bf00      	nop
 80a2748:	bf00      	nop
 80a274a:	bf00      	nop
 80a274c:	bf00      	nop
 80a274e:	bf00      	nop
 80a2750:	bf00      	nop
 80a2752:	bf00      	nop
 80a2754:	bf00      	nop
 80a2756:	bf00      	nop
 80a2758:	bf00      	nop
 80a275a:	bf00      	nop
 80a275c:	bf00      	nop
 80a275e:	bf00      	nop
 80a2760:	bf00      	nop
 80a2762:	bf00      	nop
 80a2764:	bf00      	nop
 80a2766:	e710      	b.n	80a258a <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a2768:	468e      	mov	lr, r1
 80a276a:	e60d      	b.n	80a2388 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a276c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a276c:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a276e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a2770:	428b      	cmp	r3, r1
 80a2772:	d945      	bls.n	80a2800 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a2774:	7a05      	ldrb	r5, [r0, #8]
 80a2776:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a277a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a277e:	b2d6      	uxtb	r6, r2
 80a2780:	b145      	cbz	r5, 80a2794 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a2782:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a2784:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a2786:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a2788:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a278c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a2790:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a2794:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a2798:	68c7      	ldr	r7, [r0, #12]
 80a279a:	f1bc 0f06 	cmp.w	ip, #6
 80a279e:	bf0c      	ite	eq
 80a27a0:	2504      	moveq	r5, #4
 80a27a2:	2503      	movne	r5, #3
 80a27a4:	4369      	muls	r1, r5
 80a27a6:	f1bc 0f08 	cmp.w	ip, #8
 80a27aa:	eb07 0501 	add.w	r5, r7, r1
 80a27ae:	d824      	bhi.n	80a27fa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a27b0:	f04f 0e01 	mov.w	lr, #1
 80a27b4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a27b8:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a27bc:	d10c      	bne.n	80a27d8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a27be:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a27c2:	d10d      	bne.n	80a27e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a27c4:	f01e 0f10 	tst.w	lr, #16
 80a27c8:	d017      	beq.n	80a27fa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a27ca:	2bff      	cmp	r3, #255	; 0xff
 80a27cc:	bf08      	it	eq
 80a27ce:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a27d0:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a27d2:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a27d4:	70ac      	strb	r4, [r5, #2]
        } break;
 80a27d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a27d8:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a27da:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a27dc:	70ae      	strb	r6, [r5, #2]
        } break;
 80a27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a27e0:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a27e2:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a27e4:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a27e6:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a27e8:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a27ea:	b90b      	cbnz	r3, 80a27f0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a27ec:	b2d2      	uxtb	r2, r2
 80a27ee:	e002      	b.n	80a27f6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a27f0:	435a      	muls	r2, r3
 80a27f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a27f6:	70ea      	strb	r2, [r5, #3]
        } break;
 80a27f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a27fa:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a27fc:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a27fe:	70ae      	strb	r6, [r5, #2]
 80a2800:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2802 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a2802:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a2806:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a280a:	4770      	bx	lr

080a280c <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a280c:	8840      	ldrh	r0, [r0, #2]
 80a280e:	4770      	bx	lr

080a2810 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2810:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a2812:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2814:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a2816:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a2818:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a281a:	d01e      	beq.n	80a285a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a281c:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a281e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2822:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2824:	d00c      	beq.n	80a2840 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2826:	29ff      	cmp	r1, #255	; 0xff
 80a2828:	bf0f      	iteee	eq
 80a282a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a282e:	0211      	lslne	r1, r2, #8
 80a2830:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a2834:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2838:	bf0c      	ite	eq
 80a283a:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a283e:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2840:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2842:	1b29      	subs	r1, r5, r4
 80a2844:	8886      	ldrh	r6, [r0, #4]
 80a2846:	b289      	uxth	r1, r1
 80a2848:	428e      	cmp	r6, r1
 80a284a:	d905      	bls.n	80a2858 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a284c:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a284e:	4359      	muls	r1, r3
 80a2850:	1209      	asrs	r1, r1, #8
 80a2852:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2856:	e7f4      	b.n	80a2842 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a2858:	7202      	strb	r2, [r0, #8]
 80a285a:	bd70      	pop	{r4, r5, r6, pc}

080a285c <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
 80a285c:	8882      	ldrh	r2, [r0, #4]
 80a285e:	2100      	movs	r1, #0
 80a2860:	68c0      	ldr	r0, [r0, #12]
 80a2862:	f002 be6c 	b.w	80a553e <memset>
	...

080a2868 <_GLOBAL__sub_I_PIN_MAP2>:
}
 80a2868:	b508      	push	{r3, lr}
 80a286a:	f000 fa3d 	bl	80a2ce8 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a286e:	f000 fa3b 	bl	80a2ce8 <HAL_Pin_Map>
 80a2872:	4b01      	ldr	r3, [pc, #4]	; (80a2878 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a2874:	6018      	str	r0, [r3, #0]
 80a2876:	bd08      	pop	{r3, pc}
 80a2878:	20000204 	.word	0x20000204

080a287c <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 80a287c:	b538      	push	{r3, r4, r5, lr}
 80a287e:	4604      	mov	r4, r0
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
 80a2880:	6183      	str	r3, [r0, #24]
  this->motor_pin_3 = motor_pin_3;
 80a2882:	9b04      	ldr	r3, [sp, #16]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a2884:	2500      	movs	r5, #0
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
 80a2886:	61c3      	str	r3, [r0, #28]
  this->motor_pin_4 = motor_pin_4;
 80a2888:	9b05      	ldr	r3, [sp, #20]
  this->direction = 0;      // motor direction
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80a288a:	6142      	str	r2, [r0, #20]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;
 80a288c:	6203      	str	r3, [r0, #32]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a288e:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
 80a2890:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80a2892:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80a2894:	6081      	str	r1, [r0, #8]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 80a2896:	b290      	uxth	r0, r2
 80a2898:	2101      	movs	r1, #1
 80a289a:	f001 fcb9 	bl	80a4210 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
 80a289e:	8b20      	ldrh	r0, [r4, #24]
 80a28a0:	2101      	movs	r1, #1
 80a28a2:	f001 fcb5 	bl	80a4210 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
 80a28a6:	8ba0      	ldrh	r0, [r4, #28]
 80a28a8:	2101      	movs	r1, #1
 80a28aa:	f001 fcb1 	bl	80a4210 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
 80a28ae:	8c20      	ldrh	r0, [r4, #32]
 80a28b0:	2101      	movs	r1, #1
 80a28b2:	f001 fcad 	bl	80a4210 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a28b6:	2304      	movs	r3, #4
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80a28b8:	6265      	str	r5, [r4, #36]	; 0x24

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a28ba:	60e3      	str	r3, [r4, #12]
}
 80a28bc:	4620      	mov	r0, r4
 80a28be:	bd38      	pop	{r3, r4, r5, pc}

080a28c0 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 80a28c0:	6882      	ldr	r2, [r0, #8]
 80a28c2:	4b03      	ldr	r3, [pc, #12]	; (80a28d0 <_ZN7Stepper8setSpeedEl+0x10>)
 80a28c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80a28c8:	fb93 f1f1 	sdiv	r1, r3, r1
 80a28cc:	6041      	str	r1, [r0, #4]
 80a28ce:	4770      	bx	lr
 80a28d0:	03938700 	.word	0x03938700

080a28d4 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a28d4:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
 80a28d6:	68c3      	ldr	r3, [r0, #12]

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a28d8:	4604      	mov	r4, r0
  if (this->pin_count == 2) {
 80a28da:	2b02      	cmp	r3, #2

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a28dc:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
 80a28de:	d117      	bne.n	80a2910 <_ZN7Stepper9stepMotorEi+0x3c>
    switch (thisStep) {
 80a28e0:	2903      	cmp	r1, #3
 80a28e2:	d815      	bhi.n	80a2910 <_ZN7Stepper9stepMotorEi+0x3c>
 80a28e4:	e8df f001 	tbb	[pc, r1]
 80a28e8:	0c0a0402 	.word	0x0c0a0402
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
 80a28ec:	2100      	movs	r1, #0
 80a28ee:	e000      	b.n	80a28f2 <_ZN7Stepper9stepMotorEi+0x1e>
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
 80a28f0:	2101      	movs	r1, #1
 80a28f2:	8aa0      	ldrh	r0, [r4, #20]
 80a28f4:	f001 fc9d 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a28f8:	2101      	movs	r1, #1
 80a28fa:	e006      	b.n	80a290a <_ZN7Stepper9stepMotorEi+0x36>
      break;
      case 2:  // 10
        digitalWrite(motor_pin_1, HIGH);
 80a28fc:	2101      	movs	r1, #1
 80a28fe:	e000      	b.n	80a2902 <_ZN7Stepper9stepMotorEi+0x2e>
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
 80a2900:	2100      	movs	r1, #0
 80a2902:	8aa0      	ldrh	r0, [r4, #20]
 80a2904:	f001 fc95 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2908:	2100      	movs	r1, #0
 80a290a:	8b20      	ldrh	r0, [r4, #24]
 80a290c:	f001 fc91 	bl	80a4232 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
 80a2910:	68e3      	ldr	r3, [r4, #12]
 80a2912:	2b04      	cmp	r3, #4
 80a2914:	d12f      	bne.n	80a2976 <_ZN7Stepper9stepMotorEi+0xa2>
    switch (thisStep) {
 80a2916:	2d03      	cmp	r5, #3
 80a2918:	d82d      	bhi.n	80a2976 <_ZN7Stepper9stepMotorEi+0xa2>
 80a291a:	e8df f005 	tbb	[pc, r5]
 80a291e:	0802      	.short	0x0802
 80a2920:	1c16      	.short	0x1c16
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 80a2922:	2101      	movs	r1, #1
 80a2924:	8aa0      	ldrh	r0, [r4, #20]
 80a2926:	f001 fc84 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a292a:	2100      	movs	r1, #0
 80a292c:	e004      	b.n	80a2938 <_ZN7Stepper9stepMotorEi+0x64>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
 80a292e:	2100      	movs	r1, #0
 80a2930:	8aa0      	ldrh	r0, [r4, #20]
 80a2932:	f001 fc7e 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2936:	2101      	movs	r1, #1
 80a2938:	8b20      	ldrh	r0, [r4, #24]
 80a293a:	f001 fc7a 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a293e:	2101      	movs	r1, #1
 80a2940:	8ba0      	ldrh	r0, [r4, #28]
 80a2942:	f001 fc76 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a2946:	2100      	movs	r1, #0
 80a2948:	e012      	b.n	80a2970 <_ZN7Stepper9stepMotorEi+0x9c>
      break;
      case 2:  //0101
        digitalWrite(motor_pin_1, LOW);
 80a294a:	2100      	movs	r1, #0
 80a294c:	8aa0      	ldrh	r0, [r4, #20]
 80a294e:	f001 fc70 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2952:	2101      	movs	r1, #1
 80a2954:	e004      	b.n	80a2960 <_ZN7Stepper9stepMotorEi+0x8c>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
 80a2956:	2101      	movs	r1, #1
 80a2958:	8aa0      	ldrh	r0, [r4, #20]
 80a295a:	f001 fc6a 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a295e:	2100      	movs	r1, #0
 80a2960:	8b20      	ldrh	r0, [r4, #24]
 80a2962:	f001 fc66 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a2966:	2100      	movs	r1, #0
 80a2968:	8ba0      	ldrh	r0, [r4, #28]
 80a296a:	f001 fc62 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a296e:	2101      	movs	r1, #1
 80a2970:	8c20      	ldrh	r0, [r4, #32]
 80a2972:	f001 fc5e 	bl	80a4232 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
 80a2976:	68e3      	ldr	r3, [r4, #12]
 80a2978:	2b05      	cmp	r3, #5
 80a297a:	d170      	bne.n	80a2a5e <_ZN7Stepper9stepMotorEi+0x18a>
    switch (thisStep) {
 80a297c:	2d09      	cmp	r5, #9
 80a297e:	d86e      	bhi.n	80a2a5e <_ZN7Stepper9stepMotorEi+0x18a>
 80a2980:	e8df f005 	tbb	[pc, r5]
 80a2984:	23150b05 	.word	0x23150b05
 80a2988:	43352b25 	.word	0x43352b25
 80a298c:	5755      	.short	0x5755
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
 80a298e:	2100      	movs	r1, #0
 80a2990:	8aa0      	ldrh	r0, [r4, #20]
 80a2992:	f001 fc4e 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2996:	2101      	movs	r1, #1
 80a2998:	e050      	b.n	80a2a3c <_ZN7Stepper9stepMotorEi+0x168>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 1:  // 01001
        digitalWrite(motor_pin_1, LOW);
 80a299a:	2100      	movs	r1, #0
 80a299c:	8aa0      	ldrh	r0, [r4, #20]
 80a299e:	f001 fc48 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a29a2:	2101      	movs	r1, #1
 80a29a4:	8b20      	ldrh	r0, [r4, #24]
 80a29a6:	f001 fc44 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a29aa:	2100      	movs	r1, #0
 80a29ac:	e04a      	b.n	80a2a44 <_ZN7Stepper9stepMotorEi+0x170>
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 2:  // 01011
        digitalWrite(motor_pin_1, LOW);
 80a29ae:	2100      	movs	r1, #0
 80a29b0:	8aa0      	ldrh	r0, [r4, #20]
 80a29b2:	f001 fc3e 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a29b6:	2101      	movs	r1, #1
 80a29b8:	8b20      	ldrh	r0, [r4, #24]
 80a29ba:	f001 fc3a 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a29be:	2100      	movs	r1, #0
 80a29c0:	8ba0      	ldrh	r0, [r4, #28]
 80a29c2:	f001 fc36 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a29c6:	2101      	movs	r1, #1
 80a29c8:	e040      	b.n	80a2a4c <_ZN7Stepper9stepMotorEi+0x178>
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 3:  // 01010
        digitalWrite(motor_pin_1, LOW);
 80a29ca:	2100      	movs	r1, #0
 80a29cc:	e000      	b.n	80a29d0 <_ZN7Stepper9stepMotorEi+0xfc>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 4:  // 11010
        digitalWrite(motor_pin_1, HIGH);
 80a29ce:	2101      	movs	r1, #1
 80a29d0:	8aa0      	ldrh	r0, [r4, #20]
 80a29d2:	f001 fc2e 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a29d6:	2101      	movs	r1, #1
 80a29d8:	e004      	b.n	80a29e4 <_ZN7Stepper9stepMotorEi+0x110>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 5:  // 10010
        digitalWrite(motor_pin_1, HIGH);
 80a29da:	2101      	movs	r1, #1
 80a29dc:	8aa0      	ldrh	r0, [r4, #20]
 80a29de:	f001 fc28 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a29e2:	2100      	movs	r1, #0
 80a29e4:	8b20      	ldrh	r0, [r4, #24]
 80a29e6:	f001 fc24 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a29ea:	2100      	movs	r1, #0
 80a29ec:	e008      	b.n	80a2a00 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 6:  // 10110
        digitalWrite(motor_pin_1, HIGH);
 80a29ee:	2101      	movs	r1, #1
 80a29f0:	8aa0      	ldrh	r0, [r4, #20]
 80a29f2:	f001 fc1e 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a29f6:	2100      	movs	r1, #0
 80a29f8:	8b20      	ldrh	r0, [r4, #24]
 80a29fa:	f001 fc1a 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a29fe:	2101      	movs	r1, #1
 80a2a00:	8ba0      	ldrh	r0, [r4, #28]
 80a2a02:	f001 fc16 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a2a06:	2101      	movs	r1, #1
 80a2a08:	e00c      	b.n	80a2a24 <_ZN7Stepper9stepMotorEi+0x150>
        digitalWrite(motor_pin_5, LOW);
        break;
      case 7:  // 10100
        digitalWrite(motor_pin_1, HIGH);
 80a2a0a:	2101      	movs	r1, #1
 80a2a0c:	8aa0      	ldrh	r0, [r4, #20]
 80a2a0e:	f001 fc10 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2a12:	2100      	movs	r1, #0
 80a2a14:	8b20      	ldrh	r0, [r4, #24]
 80a2a16:	f001 fc0c 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a2a1a:	2101      	movs	r1, #1
 80a2a1c:	8ba0      	ldrh	r0, [r4, #28]
 80a2a1e:	f001 fc08 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a2a22:	2100      	movs	r1, #0
 80a2a24:	8c20      	ldrh	r0, [r4, #32]
 80a2a26:	f001 fc04 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
 80a2a2a:	2100      	movs	r1, #0
 80a2a2c:	e012      	b.n	80a2a54 <_ZN7Stepper9stepMotorEi+0x180>
        break;
      case 8:  // 10101
        digitalWrite(motor_pin_1, HIGH);
 80a2a2e:	2101      	movs	r1, #1
 80a2a30:	e000      	b.n	80a2a34 <_ZN7Stepper9stepMotorEi+0x160>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
 80a2a32:	2100      	movs	r1, #0
 80a2a34:	8aa0      	ldrh	r0, [r4, #20]
 80a2a36:	f001 fbfc 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2a3a:	2100      	movs	r1, #0
 80a2a3c:	8b20      	ldrh	r0, [r4, #24]
 80a2a3e:	f001 fbf8 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a2a42:	2101      	movs	r1, #1
 80a2a44:	8ba0      	ldrh	r0, [r4, #28]
 80a2a46:	f001 fbf4 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a2a4a:	2100      	movs	r1, #0
 80a2a4c:	8c20      	ldrh	r0, [r4, #32]
 80a2a4e:	f001 fbf0 	bl	80a4232 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
 80a2a52:	2101      	movs	r1, #1
 80a2a54:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
 80a2a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
 80a2a5a:	f001 bbea 	b.w	80a4232 <digitalWrite>
 80a2a5e:	bd38      	pop	{r3, r4, r5, pc}

080a2a60 <_ZN7Stepper4stepEi>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a2a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int steps_left = abs(steps_to_move);  // how many steps to take

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a2a62:	2900      	cmp	r1, #0
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a2a64:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a2a68:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a2a6a:	eba5 75e1 	sub.w	r5, r5, r1, asr #31

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a2a6e:	dd01      	ble.n	80a2a74 <_ZN7Stepper4stepEi+0x14>
 80a2a70:	2301      	movs	r3, #1
 80a2a72:	e001      	b.n	80a2a78 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
 80a2a74:	d001      	beq.n	80a2a7a <_ZN7Stepper4stepEi+0x1a>
 80a2a76:	2300      	movs	r3, #0
 80a2a78:	6023      	str	r3, [r4, #0]
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
          this->step_number = 0;
 80a2a7a:	2700      	movs	r7, #0
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
        stepMotor(this->step_number % 10);
 80a2a7c:	260a      	movs	r6, #10
  if (steps_to_move > 0) { this->direction = 1; }
  if (steps_to_move < 0) { this->direction = 0; }


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80a2a7e:	2d00      	cmp	r5, #0
 80a2a80:	d02f      	beq.n	80a2ae2 <_ZN7Stepper4stepEi+0x82>
 80a2a82:	f000 f921 	bl	80a2cc8 <HAL_Timer_Get_Micro_Seconds>
  {
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
 80a2a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a2a88:	6862      	ldr	r2, [r4, #4]
 80a2a8a:	1ac3      	subs	r3, r0, r3
 80a2a8c:	4293      	cmp	r3, r2
 80a2a8e:	d3f6      	bcc.n	80a2a7e <_ZN7Stepper4stepEi+0x1e>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a2a90:	6823      	ldr	r3, [r4, #0]
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80a2a92:	62a0      	str	r0, [r4, #40]	; 0x28
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a2a94:	2b01      	cmp	r3, #1
 80a2a96:	6923      	ldr	r3, [r4, #16]
 80a2a98:	d106      	bne.n	80a2aa8 <_ZN7Stepper4stepEi+0x48>
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
 80a2a9a:	68a2      	ldr	r2, [r4, #8]
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a2a9c:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
 80a2a9e:	4293      	cmp	r3, r2
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a2aa0:	6123      	str	r3, [r4, #16]
        if (this->step_number == this->number_of_steps) {
 80a2aa2:	d107      	bne.n	80a2ab4 <_ZN7Stepper4stepEi+0x54>
          this->step_number = 0;
 80a2aa4:	6127      	str	r7, [r4, #16]
 80a2aa6:	e005      	b.n	80a2ab4 <_ZN7Stepper4stepEi+0x54>
        }
      }
      else
      {
        if (this->step_number == 0) {
 80a2aa8:	b90b      	cbnz	r3, 80a2aae <_ZN7Stepper4stepEi+0x4e>
          this->step_number = this->number_of_steps;
 80a2aaa:	68a3      	ldr	r3, [r4, #8]
 80a2aac:	6123      	str	r3, [r4, #16]
        }
        this->step_number--;
 80a2aae:	6923      	ldr	r3, [r4, #16]
 80a2ab0:	3b01      	subs	r3, #1
 80a2ab2:	6123      	str	r3, [r4, #16]
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a2ab4:	68e3      	ldr	r3, [r4, #12]
          this->step_number = this->number_of_steps;
        }
        this->step_number--;
      }
      // decrement the steps left:
      steps_left--;
 80a2ab6:	3d01      	subs	r5, #1
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a2ab8:	2b05      	cmp	r3, #5
 80a2aba:	6923      	ldr	r3, [r4, #16]
 80a2abc:	d104      	bne.n	80a2ac8 <_ZN7Stepper4stepEi+0x68>
        stepMotor(this->step_number % 10);
 80a2abe:	fb93 f1f6 	sdiv	r1, r3, r6
 80a2ac2:	fb06 3111 	mls	r1, r6, r1, r3
 80a2ac6:	e008      	b.n	80a2ada <_ZN7Stepper4stepEi+0x7a>
      else
        stepMotor(this->step_number % 4);
 80a2ac8:	4906      	ldr	r1, [pc, #24]	; (80a2ae4 <_ZN7Stepper4stepEi+0x84>)
 80a2aca:	4019      	ands	r1, r3
 80a2acc:	2900      	cmp	r1, #0
 80a2ace:	bfbe      	ittt	lt
 80a2ad0:	f101 31ff 	addlt.w	r1, r1, #4294967295	; 0xffffffff
 80a2ad4:	f061 0103 	ornlt	r1, r1, #3
 80a2ad8:	3101      	addlt	r1, #1
 80a2ada:	4620      	mov	r0, r4
 80a2adc:	f7ff fefa 	bl	80a28d4 <_ZN7Stepper9stepMotorEi>
 80a2ae0:	e7cd      	b.n	80a2a7e <_ZN7Stepper4stepEi+0x1e>
 80a2ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2ae4:	80000003 	.word	0x80000003

080a2ae8 <_GLOBAL__sub_I__ZN7StepperC2Eiii>:
 80a2ae8:	f000 b8fe 	b.w	80a2ce8 <HAL_Pin_Map>

080a2aec <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a2aec:	2300      	movs	r3, #0
 80a2aee:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a2af0:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a2af2:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a2af4:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a2af6:	6503      	str	r3, [r0, #80]	; 0x50
 80a2af8:	4770      	bx	lr
	...

080a2afc <_ZN10OSCMessageC1Ev>:
#include "simple-OSC.h"

OSCMessage::OSCMessage()
 80a2afc:	b538      	push	{r3, r4, r5, lr}
 80a2afe:	4604      	mov	r4, r0
 80a2b00:	4d0c      	ldr	r5, [pc, #48]	; (80a2b34 <_ZN10OSCMessageC1Ev+0x38>)
 80a2b02:	3008      	adds	r0, #8
 80a2b04:	4629      	mov	r1, r5
 80a2b06:	f000 febb 	bl	80a3880 <_ZN6StringC1EPK19__FlashStringHelper>
 80a2b0a:	4629      	mov	r1, r5
 80a2b0c:	f104 0018 	add.w	r0, r4, #24
 80a2b10:	f000 feb6 	bl	80a3880 <_ZN6StringC1EPK19__FlashStringHelper>
 80a2b14:	4629      	mov	r1, r5
 80a2b16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a2b1a:	f000 feb1 	bl	80a3880 <_ZN6StringC1EPK19__FlashStringHelper>
 80a2b1e:	4629      	mov	r1, r5
 80a2b20:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a2b24:	f000 feac 	bl	80a3880 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a2b28:	4620      	mov	r0, r4
 80a2b2a:	f7ff ffdf 	bl	80a2aec <_ZN10OSCMessage12setupMessageEv>
}
 80a2b2e:	4620      	mov	r0, r4
 80a2b30:	bd38      	pop	{r3, r4, r5, pc}
 80a2b32:	bf00      	nop
 80a2b34:	080a598a 	.word	0x080a598a

080a2b38 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a2b38:	b510      	push	{r4, lr}
 80a2b3a:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a2b3c:	6800      	ldr	r0, [r0, #0]
 80a2b3e:	f000 fae9 	bl	80a3114 <free>
    free(inputDatas);
 80a2b42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2b44:	f000 fae6 	bl	80a3114 <free>
    free(outputDatas);
 80a2b48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a2b4a:	f000 fae3 	bl	80a3114 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a2b4e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a2b52:	f000 fe4e 	bl	80a37f2 <_ZN6StringD1Ev>
 80a2b56:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a2b5a:	f000 fe4a 	bl	80a37f2 <_ZN6StringD1Ev>
 80a2b5e:	f104 0018 	add.w	r0, r4, #24
 80a2b62:	f000 fe46 	bl	80a37f2 <_ZN6StringD1Ev>
 80a2b66:	f104 0008 	add.w	r0, r4, #8
 80a2b6a:	f000 fe42 	bl	80a37f2 <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a2b6e:	4620      	mov	r0, r4
 80a2b70:	bd10      	pop	{r4, pc}

080a2b72 <_ZN10OSCMessage4fillEc>:

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a2b72:	b538      	push	{r3, r4, r5, lr}
 80a2b74:	460d      	mov	r5, r1
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a2b76:	6841      	ldr	r1, [r0, #4]
    free(outputDatas);
}

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a2b78:	4604      	mov	r4, r0
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a2b7a:	3101      	adds	r1, #1
 80a2b7c:	6800      	ldr	r0, [r0, #0]
 80a2b7e:	f000 fad1 	bl	80a3124 <realloc>
 80a2b82:	6020      	str	r0, [r4, #0]
    if (incomingBuffer != NULL)
 80a2b84:	b118      	cbz	r0, 80a2b8e <_ZN10OSCMessage4fillEc+0x1c>
    {
        incomingBuffer[incomingBufferSize++] = incomingByte;
 80a2b86:	6863      	ldr	r3, [r4, #4]
 80a2b88:	1c5a      	adds	r2, r3, #1
 80a2b8a:	6062      	str	r2, [r4, #4]
 80a2b8c:	54c5      	strb	r5, [r0, r3]
 80a2b8e:	bd38      	pop	{r3, r4, r5, pc}

080a2b90 <_ZN10OSCMessage5parseEv>:
    }
}

bool OSCMessage::parse()
{
 80a2b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2b98:	4606      	mov	r6, r0
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
    int dataLocation = -1;
 80a2b9a:	4614      	mov	r4, r2

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
 80a2b9c:	4691      	mov	r9, r2
}

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
 80a2b9e:	4690      	mov	r8, r2
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a2ba0:	b083      	sub	sp, #12
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
 80a2ba2:	f100 0b18 	add.w	fp, r0, #24
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a2ba6:	af00      	add	r7, sp, #0
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a2ba8:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a2bac:	1c55      	adds	r5, r2, #1
 80a2bae:	45aa      	cmp	sl, r5
 80a2bb0:	dd61      	ble.n	80a2c76 <_ZN10OSCMessage5parseEv+0xe6>
    {
        if (incomingBuffer[i] == 44)
 80a2bb2:	6831      	ldr	r1, [r6, #0]
 80a2bb4:	5d4b      	ldrb	r3, [r1, r5]
 80a2bb6:	2b2c      	cmp	r3, #44	; 0x2c
 80a2bb8:	d110      	bne.n	80a2bdc <_ZN10OSCMessage5parseEv+0x4c>
        {
            char charAddress[i-1];
            memcpy(charAddress,incomingBuffer,i-1);
            inputAddress = charAddress;
            addressLocation = i;
 80a2bba:	46e8      	mov	r8, sp
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
    {
        if (incomingBuffer[i] == 44)
        {
            char charAddress[i-1];
 80a2bbc:	1dd3      	adds	r3, r2, #7
 80a2bbe:	f023 0307 	bic.w	r3, r3, #7
 80a2bc2:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charAddress,incomingBuffer,i-1);
 80a2bc6:	4668      	mov	r0, sp
 80a2bc8:	f002 fcae 	bl	80a5528 <memcpy>
            inputAddress = charAddress;
 80a2bcc:	4669      	mov	r1, sp
 80a2bce:	f106 0008 	add.w	r0, r6, #8
 80a2bd2:	f000 fe68 	bl	80a38a6 <_ZN6StringaSEPKc>
 80a2bd6:	46c5      	mov	sp, r8
 80a2bd8:	46a8      	mov	r8, r5
 80a2bda:	e04a      	b.n	80a2c72 <_ZN10OSCMessage5parseEv+0xe2>
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
 80a2bdc:	f1b8 0f00 	cmp.w	r8, #0
 80a2be0:	dd47      	ble.n	80a2c72 <_ZN10OSCMessage5parseEv+0xe2>
 80a2be2:	b9bb      	cbnz	r3, 80a2c14 <_ZN10OSCMessage5parseEv+0x84>
 80a2be4:	f1b9 0f00 	cmp.w	r9, #0
 80a2be8:	da14      	bge.n	80a2c14 <_ZN10OSCMessage5parseEv+0x84>
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
            typesLocation = i;
 80a2bea:	46e9      	mov	r9, sp
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
 80a2bec:	ebc8 0305 	rsb	r3, r8, r5
 80a2bf0:	3306      	adds	r3, #6
 80a2bf2:	f023 0307 	bic.w	r3, r3, #7
 80a2bf6:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
 80a2bfa:	f108 0301 	add.w	r3, r8, #1
 80a2bfe:	4419      	add	r1, r3
 80a2c00:	4668      	mov	r0, sp
 80a2c02:	f002 fc91 	bl	80a5528 <memcpy>
            inputTypes = charTypes;
 80a2c06:	4669      	mov	r1, sp
 80a2c08:	4658      	mov	r0, fp
 80a2c0a:	f000 fe4c 	bl	80a38a6 <_ZN6StringaSEPKc>
 80a2c0e:	46cd      	mov	sp, r9
            typesLocation = i;
 80a2c10:	46a9      	mov	r9, r5
 80a2c12:	e02e      	b.n	80a2c72 <_ZN10OSCMessage5parseEv+0xe2>
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
 80a2c14:	f1b9 0f00 	cmp.w	r9, #0
 80a2c18:	dd2b      	ble.n	80a2c72 <_ZN10OSCMessage5parseEv+0xe2>
 80a2c1a:	2c00      	cmp	r4, #0
 80a2c1c:	da28      	bge.n	80a2c70 <_ZN10OSCMessage5parseEv+0xe0>
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a2c1e:	ebc8 0009 	rsb	r0, r8, r9
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a2c22:	2304      	movs	r3, #4
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a2c24:	1e44      	subs	r4, r0, #1
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a2c26:	fb90 f0f3 	sdiv	r0, r0, r3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a2c2a:	2800      	cmp	r0, #0
 80a2c2c:	db06      	blt.n	80a2c3c <_ZN10OSCMessage5parseEv+0xac>
 80a2c2e:	f001 fe15 	bl	80a485c <__aeabi_i2d>
 80a2c32:	2200      	movs	r2, #0
 80a2c34:	4b13      	ldr	r3, [pc, #76]	; (80a2c84 <_ZN10OSCMessage5parseEv+0xf4>)
 80a2c36:	f001 fcc5 	bl	80a45c4 <__adddf3>
 80a2c3a:	e005      	b.n	80a2c48 <_ZN10OSCMessage5parseEv+0xb8>
 80a2c3c:	f001 fe0e 	bl	80a485c <__aeabi_i2d>
 80a2c40:	2200      	movs	r2, #0
 80a2c42:	4b10      	ldr	r3, [pc, #64]	; (80a2c84 <_ZN10OSCMessage5parseEv+0xf4>)
 80a2c44:	f001 fcbc 	bl	80a45c0 <__aeabi_dsub>
 80a2c48:	f002 f91e 	bl	80a4e88 <__aeabi_d2iz>
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
 80a2c4c:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 80a2c50:	3403      	adds	r4, #3
 80a2c52:	444c      	add	r4, r9
            inputDatas = (char *) malloc ( datasSize );
 80a2c54:	ebc4 020a 	rsb	r2, r4, sl
 80a2c58:	4610      	mov	r0, r2
 80a2c5a:	607a      	str	r2, [r7, #4]
 80a2c5c:	f000 fa52 	bl	80a3104 <malloc>
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a2c60:	6831      	ldr	r1, [r6, #0]
            int typesCount = typesLocation - addressLocation - 1;
            int bitCount = 4*round((typesCount+1)/4)+3;
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
            inputDatas = (char *) malloc ( datasSize );
 80a2c62:	62b0      	str	r0, [r6, #40]	; 0x28
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a2c64:	4421      	add	r1, r4
 80a2c66:	687a      	ldr	r2, [r7, #4]
 80a2c68:	f002 fc5e 	bl	80a5528 <memcpy>
 80a2c6c:	4654      	mov	r4, sl
 80a2c6e:	e000      	b.n	80a2c72 <_ZN10OSCMessage5parseEv+0xe2>
             Serial.println();
             }
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
 80a2c70:	d103      	bne.n	80a2c7a <_ZN10OSCMessage5parseEv+0xea>
 80a2c72:	462a      	mov	r2, r5
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a2c74:	e798      	b.n	80a2ba8 <_ZN10OSCMessage5parseEv+0x18>
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
        }
    }
    return false;
 80a2c76:	2000      	movs	r0, #0
 80a2c78:	e000      	b.n	80a2c7c <_ZN10OSCMessage5parseEv+0xec>
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
 80a2c7a:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80a2c7c:	370c      	adds	r7, #12
 80a2c7e:	46bd      	mov	sp, r7
 80a2c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2c84:	3fe00000 	.word	0x3fe00000

080a2c88 <_ZN10OSCMessage5routeEPKcPFvRS_E>:

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
 80a2c88:	b570      	push	{r4, r5, r6, lr}
 80a2c8a:	4604      	mov	r4, r0
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2c8c:	3008      	adds	r0, #8
 80a2c8e:	4615      	mov	r5, r2
 80a2c90:	f000 fe1a 	bl	80a38c8 <_ZNK6String6equalsEPKc>
    if( inputAddress == pattern)
 80a2c94:	b120      	cbz	r0, 80a2ca0 <_ZN10OSCMessage5routeEPKcPFvRS_E+0x18>
    {
        callback(*this);
 80a2c96:	4620      	mov	r0, r4
 80a2c98:	462b      	mov	r3, r5
    }
}
 80a2c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
    if( inputAddress == pattern)
    {
        callback(*this);
 80a2c9e:	4718      	bx	r3
 80a2ca0:	bd70      	pop	{r4, r5, r6, pc}

080a2ca2 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a2ca2:	f000 b821 	b.w	80a2ce8 <HAL_Pin_Map>
	...

080a2ca8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2ca8:	b508      	push	{r3, lr}
 80a2caa:	4b02      	ldr	r3, [pc, #8]	; (80a2cb4 <os_mutex_create+0xc>)
 80a2cac:	681b      	ldr	r3, [r3, #0]
 80a2cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2cb0:	9301      	str	r3, [sp, #4]
 80a2cb2:	bd08      	pop	{r3, pc}
 80a2cb4:	080601d0 	.word	0x080601d0

080a2cb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2cb8:	b508      	push	{r3, lr}
 80a2cba:	4b02      	ldr	r3, [pc, #8]	; (80a2cc4 <HAL_RNG_GetRandomNumber+0xc>)
 80a2cbc:	681b      	ldr	r3, [r3, #0]
 80a2cbe:	685b      	ldr	r3, [r3, #4]
 80a2cc0:	9301      	str	r3, [sp, #4]
 80a2cc2:	bd08      	pop	{r3, pc}
 80a2cc4:	0806019c 	.word	0x0806019c

080a2cc8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2cc8:	b508      	push	{r3, lr}
 80a2cca:	4b02      	ldr	r3, [pc, #8]	; (80a2cd4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2ccc:	681b      	ldr	r3, [r3, #0]
 80a2cce:	691b      	ldr	r3, [r3, #16]
 80a2cd0:	9301      	str	r3, [sp, #4]
 80a2cd2:	bd08      	pop	{r3, pc}
 80a2cd4:	0806019c 	.word	0x0806019c

080a2cd8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2cd8:	b508      	push	{r3, lr}
 80a2cda:	4b02      	ldr	r3, [pc, #8]	; (80a2ce4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2cdc:	681b      	ldr	r3, [r3, #0]
 80a2cde:	695b      	ldr	r3, [r3, #20]
 80a2ce0:	9301      	str	r3, [sp, #4]
 80a2ce2:	bd08      	pop	{r3, pc}
 80a2ce4:	0806019c 	.word	0x0806019c

080a2ce8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2ce8:	b508      	push	{r3, lr}
 80a2cea:	4b02      	ldr	r3, [pc, #8]	; (80a2cf4 <HAL_Pin_Map+0xc>)
 80a2cec:	681b      	ldr	r3, [r3, #0]
 80a2cee:	681b      	ldr	r3, [r3, #0]
 80a2cf0:	9301      	str	r3, [sp, #4]
 80a2cf2:	bd08      	pop	{r3, pc}
 80a2cf4:	080601b0 	.word	0x080601b0

080a2cf8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2cf8:	b508      	push	{r3, lr}
 80a2cfa:	4b02      	ldr	r3, [pc, #8]	; (80a2d04 <HAL_Pin_Mode+0xc>)
 80a2cfc:	681b      	ldr	r3, [r3, #0]
 80a2cfe:	689b      	ldr	r3, [r3, #8]
 80a2d00:	9301      	str	r3, [sp, #4]
 80a2d02:	bd08      	pop	{r3, pc}
 80a2d04:	080601b0 	.word	0x080601b0

080a2d08 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2d08:	b508      	push	{r3, lr}
 80a2d0a:	4b02      	ldr	r3, [pc, #8]	; (80a2d14 <HAL_Get_Pin_Mode+0xc>)
 80a2d0c:	681b      	ldr	r3, [r3, #0]
 80a2d0e:	68db      	ldr	r3, [r3, #12]
 80a2d10:	9301      	str	r3, [sp, #4]
 80a2d12:	bd08      	pop	{r3, pc}
 80a2d14:	080601b0 	.word	0x080601b0

080a2d18 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2d18:	b508      	push	{r3, lr}
 80a2d1a:	4b02      	ldr	r3, [pc, #8]	; (80a2d24 <HAL_GPIO_Write+0xc>)
 80a2d1c:	681b      	ldr	r3, [r3, #0]
 80a2d1e:	691b      	ldr	r3, [r3, #16]
 80a2d20:	9301      	str	r3, [sp, #4]
 80a2d22:	bd08      	pop	{r3, pc}
 80a2d24:	080601b0 	.word	0x080601b0

080a2d28 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2d28:	b508      	push	{r3, lr}
 80a2d2a:	4b02      	ldr	r3, [pc, #8]	; (80a2d34 <HAL_I2C_Begin+0xc>)
 80a2d2c:	681b      	ldr	r3, [r3, #0]
 80a2d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2d30:	9301      	str	r3, [sp, #4]
 80a2d32:	bd08      	pop	{r3, pc}
 80a2d34:	080601ac 	.word	0x080601ac

080a2d38 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2d38:	b508      	push	{r3, lr}
 80a2d3a:	4b02      	ldr	r3, [pc, #8]	; (80a2d44 <HAL_I2C_Request_Data+0xc>)
 80a2d3c:	681b      	ldr	r3, [r3, #0]
 80a2d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2d40:	9301      	str	r3, [sp, #4]
 80a2d42:	bd08      	pop	{r3, pc}
 80a2d44:	080601ac 	.word	0x080601ac

080a2d48 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2d48:	b508      	push	{r3, lr}
 80a2d4a:	4b02      	ldr	r3, [pc, #8]	; (80a2d54 <HAL_I2C_Begin_Transmission+0xc>)
 80a2d4c:	681b      	ldr	r3, [r3, #0]
 80a2d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2d50:	9301      	str	r3, [sp, #4]
 80a2d52:	bd08      	pop	{r3, pc}
 80a2d54:	080601ac 	.word	0x080601ac

080a2d58 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2d58:	b508      	push	{r3, lr}
 80a2d5a:	4b02      	ldr	r3, [pc, #8]	; (80a2d64 <HAL_I2C_End_Transmission+0xc>)
 80a2d5c:	681b      	ldr	r3, [r3, #0]
 80a2d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2d60:	9301      	str	r3, [sp, #4]
 80a2d62:	bd08      	pop	{r3, pc}
 80a2d64:	080601ac 	.word	0x080601ac

080a2d68 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2d68:	b508      	push	{r3, lr}
 80a2d6a:	4b02      	ldr	r3, [pc, #8]	; (80a2d74 <HAL_I2C_Write_Data+0xc>)
 80a2d6c:	681b      	ldr	r3, [r3, #0]
 80a2d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2d70:	9301      	str	r3, [sp, #4]
 80a2d72:	bd08      	pop	{r3, pc}
 80a2d74:	080601ac 	.word	0x080601ac

080a2d78 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2d78:	b508      	push	{r3, lr}
 80a2d7a:	4b02      	ldr	r3, [pc, #8]	; (80a2d84 <HAL_I2C_Available_Data+0xc>)
 80a2d7c:	681b      	ldr	r3, [r3, #0]
 80a2d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2d80:	9301      	str	r3, [sp, #4]
 80a2d82:	bd08      	pop	{r3, pc}
 80a2d84:	080601ac 	.word	0x080601ac

080a2d88 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2d88:	b508      	push	{r3, lr}
 80a2d8a:	4b02      	ldr	r3, [pc, #8]	; (80a2d94 <HAL_I2C_Read_Data+0xc>)
 80a2d8c:	681b      	ldr	r3, [r3, #0]
 80a2d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2d90:	9301      	str	r3, [sp, #4]
 80a2d92:	bd08      	pop	{r3, pc}
 80a2d94:	080601ac 	.word	0x080601ac

080a2d98 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2d98:	b508      	push	{r3, lr}
 80a2d9a:	4b02      	ldr	r3, [pc, #8]	; (80a2da4 <HAL_I2C_Peek_Data+0xc>)
 80a2d9c:	681b      	ldr	r3, [r3, #0]
 80a2d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2da0:	9301      	str	r3, [sp, #4]
 80a2da2:	bd08      	pop	{r3, pc}
 80a2da4:	080601ac 	.word	0x080601ac

080a2da8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2da8:	b508      	push	{r3, lr}
 80a2daa:	4b02      	ldr	r3, [pc, #8]	; (80a2db4 <HAL_I2C_Flush_Data+0xc>)
 80a2dac:	681b      	ldr	r3, [r3, #0]
 80a2dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2db0:	9301      	str	r3, [sp, #4]
 80a2db2:	bd08      	pop	{r3, pc}
 80a2db4:	080601ac 	.word	0x080601ac

080a2db8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2db8:	b508      	push	{r3, lr}
 80a2dba:	4b02      	ldr	r3, [pc, #8]	; (80a2dc4 <HAL_I2C_Is_Enabled+0xc>)
 80a2dbc:	681b      	ldr	r3, [r3, #0]
 80a2dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2dc0:	9301      	str	r3, [sp, #4]
 80a2dc2:	bd08      	pop	{r3, pc}
 80a2dc4:	080601ac 	.word	0x080601ac

080a2dc8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2dc8:	b508      	push	{r3, lr}
 80a2dca:	4b03      	ldr	r3, [pc, #12]	; (80a2dd8 <HAL_I2C_Init+0x10>)
 80a2dcc:	681b      	ldr	r3, [r3, #0]
 80a2dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2dd2:	9301      	str	r3, [sp, #4]
 80a2dd4:	bd08      	pop	{r3, pc}
 80a2dd6:	0000      	.short	0x0000
 80a2dd8:	080601ac 	.word	0x080601ac

080a2ddc <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2ddc:	b508      	push	{r3, lr}
 80a2dde:	4b02      	ldr	r3, [pc, #8]	; (80a2de8 <socket_handle_valid+0xc>)
 80a2de0:	681b      	ldr	r3, [r3, #0]
 80a2de2:	685b      	ldr	r3, [r3, #4]
 80a2de4:	9301      	str	r3, [sp, #4]
 80a2de6:	bd08      	pop	{r3, pc}
 80a2de8:	080601bc 	.word	0x080601bc

080a2dec <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2dec:	b508      	push	{r3, lr}
 80a2dee:	4b02      	ldr	r3, [pc, #8]	; (80a2df8 <socket_create+0xc>)
 80a2df0:	681b      	ldr	r3, [r3, #0]
 80a2df2:	689b      	ldr	r3, [r3, #8]
 80a2df4:	9301      	str	r3, [sp, #4]
 80a2df6:	bd08      	pop	{r3, pc}
 80a2df8:	080601bc 	.word	0x080601bc

080a2dfc <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a2dfc:	b508      	push	{r3, lr}
 80a2dfe:	4b02      	ldr	r3, [pc, #8]	; (80a2e08 <socket_receivefrom+0xc>)
 80a2e00:	681b      	ldr	r3, [r3, #0]
 80a2e02:	695b      	ldr	r3, [r3, #20]
 80a2e04:	9301      	str	r3, [sp, #4]
 80a2e06:	bd08      	pop	{r3, pc}
 80a2e08:	080601bc 	.word	0x080601bc

080a2e0c <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a2e0c:	b508      	push	{r3, lr}
 80a2e0e:	4b02      	ldr	r3, [pc, #8]	; (80a2e18 <socket_sendto+0xc>)
 80a2e10:	681b      	ldr	r3, [r3, #0]
 80a2e12:	69db      	ldr	r3, [r3, #28]
 80a2e14:	9301      	str	r3, [sp, #4]
 80a2e16:	bd08      	pop	{r3, pc}
 80a2e18:	080601bc 	.word	0x080601bc

080a2e1c <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2e1c:	b508      	push	{r3, lr}
 80a2e1e:	4b02      	ldr	r3, [pc, #8]	; (80a2e28 <socket_close+0xc>)
 80a2e20:	681b      	ldr	r3, [r3, #0]
 80a2e22:	6a1b      	ldr	r3, [r3, #32]
 80a2e24:	9301      	str	r3, [sp, #4]
 80a2e26:	bd08      	pop	{r3, pc}
 80a2e28:	080601bc 	.word	0x080601bc

080a2e2c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2e2c:	b508      	push	{r3, lr}
 80a2e2e:	4b02      	ldr	r3, [pc, #8]	; (80a2e38 <socket_handle_invalid+0xc>)
 80a2e30:	681b      	ldr	r3, [r3, #0]
 80a2e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e34:	9301      	str	r3, [sp, #4]
 80a2e36:	bd08      	pop	{r3, pc}
 80a2e38:	080601bc 	.word	0x080601bc

080a2e3c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2e3c:	b508      	push	{r3, lr}
 80a2e3e:	4b02      	ldr	r3, [pc, #8]	; (80a2e48 <HAL_SPI_Begin+0xc>)
 80a2e40:	681b      	ldr	r3, [r3, #0]
 80a2e42:	681b      	ldr	r3, [r3, #0]
 80a2e44:	9301      	str	r3, [sp, #4]
 80a2e46:	bd08      	pop	{r3, pc}
 80a2e48:	080601b4 	.word	0x080601b4

080a2e4c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2e4c:	b508      	push	{r3, lr}
 80a2e4e:	4b02      	ldr	r3, [pc, #8]	; (80a2e58 <HAL_SPI_Set_Bit_Order+0xc>)
 80a2e50:	681b      	ldr	r3, [r3, #0]
 80a2e52:	689b      	ldr	r3, [r3, #8]
 80a2e54:	9301      	str	r3, [sp, #4]
 80a2e56:	bd08      	pop	{r3, pc}
 80a2e58:	080601b4 	.word	0x080601b4

080a2e5c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a2e5c:	b508      	push	{r3, lr}
 80a2e5e:	4b02      	ldr	r3, [pc, #8]	; (80a2e68 <HAL_SPI_Set_Data_Mode+0xc>)
 80a2e60:	681b      	ldr	r3, [r3, #0]
 80a2e62:	68db      	ldr	r3, [r3, #12]
 80a2e64:	9301      	str	r3, [sp, #4]
 80a2e66:	bd08      	pop	{r3, pc}
 80a2e68:	080601b4 	.word	0x080601b4

080a2e6c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a2e6c:	b508      	push	{r3, lr}
 80a2e6e:	4b02      	ldr	r3, [pc, #8]	; (80a2e78 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a2e70:	681b      	ldr	r3, [r3, #0]
 80a2e72:	691b      	ldr	r3, [r3, #16]
 80a2e74:	9301      	str	r3, [sp, #4]
 80a2e76:	bd08      	pop	{r3, pc}
 80a2e78:	080601b4 	.word	0x080601b4

080a2e7c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2e7c:	b508      	push	{r3, lr}
 80a2e7e:	4b02      	ldr	r3, [pc, #8]	; (80a2e88 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2e80:	681b      	ldr	r3, [r3, #0]
 80a2e82:	695b      	ldr	r3, [r3, #20]
 80a2e84:	9301      	str	r3, [sp, #4]
 80a2e86:	bd08      	pop	{r3, pc}
 80a2e88:	080601b4 	.word	0x080601b4

080a2e8c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2e8c:	b508      	push	{r3, lr}
 80a2e8e:	4b02      	ldr	r3, [pc, #8]	; (80a2e98 <HAL_SPI_Init+0xc>)
 80a2e90:	681b      	ldr	r3, [r3, #0]
 80a2e92:	69db      	ldr	r3, [r3, #28]
 80a2e94:	9301      	str	r3, [sp, #4]
 80a2e96:	bd08      	pop	{r3, pc}
 80a2e98:	080601b4 	.word	0x080601b4

080a2e9c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2e9c:	b508      	push	{r3, lr}
 80a2e9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ea8 <HAL_SPI_Is_Enabled+0xc>)
 80a2ea0:	681b      	ldr	r3, [r3, #0]
 80a2ea2:	6a1b      	ldr	r3, [r3, #32]
 80a2ea4:	9301      	str	r3, [sp, #4]
 80a2ea6:	bd08      	pop	{r3, pc}
 80a2ea8:	080601b4 	.word	0x080601b4

080a2eac <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a2eac:	b508      	push	{r3, lr}
 80a2eae:	4b02      	ldr	r3, [pc, #8]	; (80a2eb8 <HAL_SPI_Info+0xc>)
 80a2eb0:	681b      	ldr	r3, [r3, #0]
 80a2eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2eb4:	9301      	str	r3, [sp, #4]
 80a2eb6:	bd08      	pop	{r3, pc}
 80a2eb8:	080601b4 	.word	0x080601b4

080a2ebc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2ebc:	b508      	push	{r3, lr}
 80a2ebe:	4b02      	ldr	r3, [pc, #8]	; (80a2ec8 <HAL_USART_Init+0xc>)
 80a2ec0:	681b      	ldr	r3, [r3, #0]
 80a2ec2:	699b      	ldr	r3, [r3, #24]
 80a2ec4:	9301      	str	r3, [sp, #4]
 80a2ec6:	bd08      	pop	{r3, pc}
 80a2ec8:	080601c4 	.word	0x080601c4

080a2ecc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2ecc:	b508      	push	{r3, lr}
 80a2ece:	4b02      	ldr	r3, [pc, #8]	; (80a2ed8 <HAL_USART_Write_Data+0xc>)
 80a2ed0:	681b      	ldr	r3, [r3, #0]
 80a2ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2ed4:	9301      	str	r3, [sp, #4]
 80a2ed6:	bd08      	pop	{r3, pc}
 80a2ed8:	080601c4 	.word	0x080601c4

080a2edc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2edc:	b508      	push	{r3, lr}
 80a2ede:	4b02      	ldr	r3, [pc, #8]	; (80a2ee8 <HAL_USART_Available_Data+0xc>)
 80a2ee0:	681b      	ldr	r3, [r3, #0]
 80a2ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2ee4:	9301      	str	r3, [sp, #4]
 80a2ee6:	bd08      	pop	{r3, pc}
 80a2ee8:	080601c4 	.word	0x080601c4

080a2eec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2eec:	b508      	push	{r3, lr}
 80a2eee:	4b02      	ldr	r3, [pc, #8]	; (80a2ef8 <HAL_USART_Read_Data+0xc>)
 80a2ef0:	681b      	ldr	r3, [r3, #0]
 80a2ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2ef4:	9301      	str	r3, [sp, #4]
 80a2ef6:	bd08      	pop	{r3, pc}
 80a2ef8:	080601c4 	.word	0x080601c4

080a2efc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2efc:	b508      	push	{r3, lr}
 80a2efe:	4b02      	ldr	r3, [pc, #8]	; (80a2f08 <HAL_USART_Peek_Data+0xc>)
 80a2f00:	681b      	ldr	r3, [r3, #0]
 80a2f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2f04:	9301      	str	r3, [sp, #4]
 80a2f06:	bd08      	pop	{r3, pc}
 80a2f08:	080601c4 	.word	0x080601c4

080a2f0c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2f0c:	b508      	push	{r3, lr}
 80a2f0e:	4b02      	ldr	r3, [pc, #8]	; (80a2f18 <HAL_USART_Flush_Data+0xc>)
 80a2f10:	681b      	ldr	r3, [r3, #0]
 80a2f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2f14:	9301      	str	r3, [sp, #4]
 80a2f16:	bd08      	pop	{r3, pc}
 80a2f18:	080601c4 	.word	0x080601c4

080a2f1c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2f1c:	b508      	push	{r3, lr}
 80a2f1e:	4b02      	ldr	r3, [pc, #8]	; (80a2f28 <HAL_USART_Is_Enabled+0xc>)
 80a2f20:	681b      	ldr	r3, [r3, #0]
 80a2f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2f24:	9301      	str	r3, [sp, #4]
 80a2f26:	bd08      	pop	{r3, pc}
 80a2f28:	080601c4 	.word	0x080601c4

080a2f2c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2f2c:	b508      	push	{r3, lr}
 80a2f2e:	4b02      	ldr	r3, [pc, #8]	; (80a2f38 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2f30:	681b      	ldr	r3, [r3, #0]
 80a2f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2f34:	9301      	str	r3, [sp, #4]
 80a2f36:	bd08      	pop	{r3, pc}
 80a2f38:	080601c4 	.word	0x080601c4

080a2f3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2f3c:	b508      	push	{r3, lr}
 80a2f3e:	4b02      	ldr	r3, [pc, #8]	; (80a2f48 <HAL_USB_USART_Init+0xc>)
 80a2f40:	681b      	ldr	r3, [r3, #0]
 80a2f42:	681b      	ldr	r3, [r3, #0]
 80a2f44:	9301      	str	r3, [sp, #4]
 80a2f46:	bd08      	pop	{r3, pc}
 80a2f48:	080601d8 	.word	0x080601d8

080a2f4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2f4c:	b508      	push	{r3, lr}
 80a2f4e:	4b02      	ldr	r3, [pc, #8]	; (80a2f58 <HAL_USB_USART_Begin+0xc>)
 80a2f50:	681b      	ldr	r3, [r3, #0]
 80a2f52:	685b      	ldr	r3, [r3, #4]
 80a2f54:	9301      	str	r3, [sp, #4]
 80a2f56:	bd08      	pop	{r3, pc}
 80a2f58:	080601d8 	.word	0x080601d8

080a2f5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2f5c:	b508      	push	{r3, lr}
 80a2f5e:	4b02      	ldr	r3, [pc, #8]	; (80a2f68 <HAL_USB_USART_Available_Data+0xc>)
 80a2f60:	681b      	ldr	r3, [r3, #0]
 80a2f62:	691b      	ldr	r3, [r3, #16]
 80a2f64:	9301      	str	r3, [sp, #4]
 80a2f66:	bd08      	pop	{r3, pc}
 80a2f68:	080601d8 	.word	0x080601d8

080a2f6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2f6c:	b508      	push	{r3, lr}
 80a2f6e:	4b02      	ldr	r3, [pc, #8]	; (80a2f78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2f70:	681b      	ldr	r3, [r3, #0]
 80a2f72:	695b      	ldr	r3, [r3, #20]
 80a2f74:	9301      	str	r3, [sp, #4]
 80a2f76:	bd08      	pop	{r3, pc}
 80a2f78:	080601d8 	.word	0x080601d8

080a2f7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2f7c:	b508      	push	{r3, lr}
 80a2f7e:	4b02      	ldr	r3, [pc, #8]	; (80a2f88 <HAL_USB_USART_Receive_Data+0xc>)
 80a2f80:	681b      	ldr	r3, [r3, #0]
 80a2f82:	699b      	ldr	r3, [r3, #24]
 80a2f84:	9301      	str	r3, [sp, #4]
 80a2f86:	bd08      	pop	{r3, pc}
 80a2f88:	080601d8 	.word	0x080601d8

080a2f8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2f8c:	b508      	push	{r3, lr}
 80a2f8e:	4b02      	ldr	r3, [pc, #8]	; (80a2f98 <HAL_USB_USART_Send_Data+0xc>)
 80a2f90:	681b      	ldr	r3, [r3, #0]
 80a2f92:	69db      	ldr	r3, [r3, #28]
 80a2f94:	9301      	str	r3, [sp, #4]
 80a2f96:	bd08      	pop	{r3, pc}
 80a2f98:	080601d8 	.word	0x080601d8

080a2f9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2f9c:	b508      	push	{r3, lr}
 80a2f9e:	4b02      	ldr	r3, [pc, #8]	; (80a2fa8 <HAL_USB_USART_Flush_Data+0xc>)
 80a2fa0:	681b      	ldr	r3, [r3, #0]
 80a2fa2:	6a1b      	ldr	r3, [r3, #32]
 80a2fa4:	9301      	str	r3, [sp, #4]
 80a2fa6:	bd08      	pop	{r3, pc}
 80a2fa8:	080601d8 	.word	0x080601d8

080a2fac <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a2fac:	b508      	push	{r3, lr}
 80a2fae:	4b02      	ldr	r3, [pc, #8]	; (80a2fb8 <HAL_USB_USART_Is_Enabled+0xc>)
 80a2fb0:	681b      	ldr	r3, [r3, #0]
 80a2fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2fb4:	9301      	str	r3, [sp, #4]
 80a2fb6:	bd08      	pop	{r3, pc}
 80a2fb8:	080601d8 	.word	0x080601d8

080a2fbc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2fbc:	b508      	push	{r3, lr}
 80a2fbe:	4b02      	ldr	r3, [pc, #8]	; (80a2fc8 <inet_gethostbyname+0xc>)
 80a2fc0:	681b      	ldr	r3, [r3, #0]
 80a2fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2fc4:	9301      	str	r3, [sp, #4]
 80a2fc6:	bd08      	pop	{r3, pc}
 80a2fc8:	080601c0 	.word	0x080601c0

080a2fcc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2fcc:	b508      	push	{r3, lr}
 80a2fce:	4b02      	ldr	r3, [pc, #8]	; (80a2fd8 <set_system_mode+0xc>)
 80a2fd0:	681b      	ldr	r3, [r3, #0]
 80a2fd2:	685b      	ldr	r3, [r3, #4]
 80a2fd4:	9301      	str	r3, [sp, #4]
 80a2fd6:	bd08      	pop	{r3, pc}
 80a2fd8:	080601a4 	.word	0x080601a4

080a2fdc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2fdc:	b508      	push	{r3, lr}
 80a2fde:	4b02      	ldr	r3, [pc, #8]	; (80a2fe8 <system_delay_ms+0xc>)
 80a2fe0:	681b      	ldr	r3, [r3, #0]
 80a2fe2:	695b      	ldr	r3, [r3, #20]
 80a2fe4:	9301      	str	r3, [sp, #4]
 80a2fe6:	bd08      	pop	{r3, pc}
 80a2fe8:	080601a4 	.word	0x080601a4

080a2fec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2fec:	b508      	push	{r3, lr}
 80a2fee:	4b02      	ldr	r3, [pc, #8]	; (80a2ff8 <system_thread_set_state+0xc>)
 80a2ff0:	681b      	ldr	r3, [r3, #0]
 80a2ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2ff4:	9301      	str	r3, [sp, #4]
 80a2ff6:	bd08      	pop	{r3, pc}
 80a2ff8:	080601a4 	.word	0x080601a4

080a2ffc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2ffc:	b508      	push	{r3, lr}
 80a2ffe:	4b03      	ldr	r3, [pc, #12]	; (80a300c <system_ctrl_set_app_request_handler+0x10>)
 80a3000:	681b      	ldr	r3, [r3, #0]
 80a3002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3006:	9301      	str	r3, [sp, #4]
 80a3008:	bd08      	pop	{r3, pc}
 80a300a:	0000      	.short	0x0000
 80a300c:	080601a4 	.word	0x080601a4

080a3010 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3010:	b508      	push	{r3, lr}
 80a3012:	4b03      	ldr	r3, [pc, #12]	; (80a3020 <system_ctrl_set_result+0x10>)
 80a3014:	681b      	ldr	r3, [r3, #0]
 80a3016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a301a:	9301      	str	r3, [sp, #4]
 80a301c:	bd08      	pop	{r3, pc}
 80a301e:	0000      	.short	0x0000
 80a3020:	080601a4 	.word	0x080601a4

080a3024 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3024:	b508      	push	{r3, lr}
 80a3026:	4b02      	ldr	r3, [pc, #8]	; (80a3030 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3028:	681b      	ldr	r3, [r3, #0]
 80a302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a302c:	9301      	str	r3, [sp, #4]
 80a302e:	bd08      	pop	{r3, pc}
 80a3030:	080601cc 	.word	0x080601cc

080a3034 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a3034:	b508      	push	{r3, lr}
 80a3036:	4b02      	ldr	r3, [pc, #8]	; (80a3040 <network_config+0xc>)
 80a3038:	681b      	ldr	r3, [r3, #0]
 80a303a:	681b      	ldr	r3, [r3, #0]
 80a303c:	9301      	str	r3, [sp, #4]
 80a303e:	bd08      	pop	{r3, pc}
 80a3040:	080601c8 	.word	0x080601c8

080a3044 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3044:	b508      	push	{r3, lr}
 80a3046:	4b02      	ldr	r3, [pc, #8]	; (80a3050 <network_connect+0xc>)
 80a3048:	681b      	ldr	r3, [r3, #0]
 80a304a:	685b      	ldr	r3, [r3, #4]
 80a304c:	9301      	str	r3, [sp, #4]
 80a304e:	bd08      	pop	{r3, pc}
 80a3050:	080601c8 	.word	0x080601c8

080a3054 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3054:	b508      	push	{r3, lr}
 80a3056:	4b02      	ldr	r3, [pc, #8]	; (80a3060 <network_connecting+0xc>)
 80a3058:	681b      	ldr	r3, [r3, #0]
 80a305a:	689b      	ldr	r3, [r3, #8]
 80a305c:	9301      	str	r3, [sp, #4]
 80a305e:	bd08      	pop	{r3, pc}
 80a3060:	080601c8 	.word	0x080601c8

080a3064 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3064:	b508      	push	{r3, lr}
 80a3066:	4b02      	ldr	r3, [pc, #8]	; (80a3070 <network_disconnect+0xc>)
 80a3068:	681b      	ldr	r3, [r3, #0]
 80a306a:	68db      	ldr	r3, [r3, #12]
 80a306c:	9301      	str	r3, [sp, #4]
 80a306e:	bd08      	pop	{r3, pc}
 80a3070:	080601c8 	.word	0x080601c8

080a3074 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3074:	b508      	push	{r3, lr}
 80a3076:	4b02      	ldr	r3, [pc, #8]	; (80a3080 <network_ready+0xc>)
 80a3078:	681b      	ldr	r3, [r3, #0]
 80a307a:	691b      	ldr	r3, [r3, #16]
 80a307c:	9301      	str	r3, [sp, #4]
 80a307e:	bd08      	pop	{r3, pc}
 80a3080:	080601c8 	.word	0x080601c8

080a3084 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3084:	b508      	push	{r3, lr}
 80a3086:	4b02      	ldr	r3, [pc, #8]	; (80a3090 <network_on+0xc>)
 80a3088:	681b      	ldr	r3, [r3, #0]
 80a308a:	695b      	ldr	r3, [r3, #20]
 80a308c:	9301      	str	r3, [sp, #4]
 80a308e:	bd08      	pop	{r3, pc}
 80a3090:	080601c8 	.word	0x080601c8

080a3094 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3094:	b508      	push	{r3, lr}
 80a3096:	4b02      	ldr	r3, [pc, #8]	; (80a30a0 <network_off+0xc>)
 80a3098:	681b      	ldr	r3, [r3, #0]
 80a309a:	699b      	ldr	r3, [r3, #24]
 80a309c:	9301      	str	r3, [sp, #4]
 80a309e:	bd08      	pop	{r3, pc}
 80a30a0:	080601c8 	.word	0x080601c8

080a30a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a30a4:	b508      	push	{r3, lr}
 80a30a6:	4b02      	ldr	r3, [pc, #8]	; (80a30b0 <network_listen+0xc>)
 80a30a8:	681b      	ldr	r3, [r3, #0]
 80a30aa:	69db      	ldr	r3, [r3, #28]
 80a30ac:	9301      	str	r3, [sp, #4]
 80a30ae:	bd08      	pop	{r3, pc}
 80a30b0:	080601c8 	.word	0x080601c8

080a30b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a30b4:	b508      	push	{r3, lr}
 80a30b6:	4b02      	ldr	r3, [pc, #8]	; (80a30c0 <network_listening+0xc>)
 80a30b8:	681b      	ldr	r3, [r3, #0]
 80a30ba:	6a1b      	ldr	r3, [r3, #32]
 80a30bc:	9301      	str	r3, [sp, #4]
 80a30be:	bd08      	pop	{r3, pc}
 80a30c0:	080601c8 	.word	0x080601c8

080a30c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a30c4:	b508      	push	{r3, lr}
 80a30c6:	4b02      	ldr	r3, [pc, #8]	; (80a30d0 <network_set_listen_timeout+0xc>)
 80a30c8:	681b      	ldr	r3, [r3, #0]
 80a30ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a30cc:	9301      	str	r3, [sp, #4]
 80a30ce:	bd08      	pop	{r3, pc}
 80a30d0:	080601c8 	.word	0x080601c8

080a30d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a30d4:	b508      	push	{r3, lr}
 80a30d6:	4b02      	ldr	r3, [pc, #8]	; (80a30e0 <network_get_listen_timeout+0xc>)
 80a30d8:	681b      	ldr	r3, [r3, #0]
 80a30da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a30dc:	9301      	str	r3, [sp, #4]
 80a30de:	bd08      	pop	{r3, pc}
 80a30e0:	080601c8 	.word	0x080601c8

080a30e4 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a30e4:	b508      	push	{r3, lr}
 80a30e6:	4b02      	ldr	r3, [pc, #8]	; (80a30f0 <network_set_hostname+0xc>)
 80a30e8:	681b      	ldr	r3, [r3, #0]
 80a30ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a30ec:	9301      	str	r3, [sp, #4]
 80a30ee:	bd08      	pop	{r3, pc}
 80a30f0:	080601c8 	.word	0x080601c8

080a30f4 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a30f4:	b508      	push	{r3, lr}
 80a30f6:	4b02      	ldr	r3, [pc, #8]	; (80a3100 <network_get_hostname+0xc>)
 80a30f8:	681b      	ldr	r3, [r3, #0]
 80a30fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a30fc:	9301      	str	r3, [sp, #4]
 80a30fe:	bd08      	pop	{r3, pc}
 80a3100:	080601c8 	.word	0x080601c8

080a3104 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3104:	b508      	push	{r3, lr}
 80a3106:	4b02      	ldr	r3, [pc, #8]	; (80a3110 <malloc+0xc>)
 80a3108:	681b      	ldr	r3, [r3, #0]
 80a310a:	681b      	ldr	r3, [r3, #0]
 80a310c:	9301      	str	r3, [sp, #4]
 80a310e:	bd08      	pop	{r3, pc}
 80a3110:	080601a0 	.word	0x080601a0

080a3114 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3114:	b508      	push	{r3, lr}
 80a3116:	4b02      	ldr	r3, [pc, #8]	; (80a3120 <free+0xc>)
 80a3118:	681b      	ldr	r3, [r3, #0]
 80a311a:	685b      	ldr	r3, [r3, #4]
 80a311c:	9301      	str	r3, [sp, #4]
 80a311e:	bd08      	pop	{r3, pc}
 80a3120:	080601a0 	.word	0x080601a0

080a3124 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3124:	b508      	push	{r3, lr}
 80a3126:	4b02      	ldr	r3, [pc, #8]	; (80a3130 <realloc+0xc>)
 80a3128:	681b      	ldr	r3, [r3, #0]
 80a312a:	689b      	ldr	r3, [r3, #8]
 80a312c:	9301      	str	r3, [sp, #4]
 80a312e:	bd08      	pop	{r3, pc}
 80a3130:	080601a0 	.word	0x080601a0

080a3134 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3134:	2100      	movs	r1, #0
 80a3136:	f7ff bf51 	b.w	80a2fdc <system_delay_ms>

080a313a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a313a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a313c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a313e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a3140:	b113      	cbz	r3, 80a3148 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3142:	2203      	movs	r2, #3
 80a3144:	4601      	mov	r1, r0
 80a3146:	4798      	blx	r3
    }
 80a3148:	4620      	mov	r0, r4
 80a314a:	bd10      	pop	{r4, pc}

080a314c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a314c:	4770      	bx	lr

080a314e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a314e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3150:	4606      	mov	r6, r0
 80a3152:	4615      	mov	r5, r2
 80a3154:	460c      	mov	r4, r1
 80a3156:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3158:	42bc      	cmp	r4, r7
 80a315a:	d006      	beq.n	80a316a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a315c:	6833      	ldr	r3, [r6, #0]
 80a315e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3162:	689b      	ldr	r3, [r3, #8]
 80a3164:	4630      	mov	r0, r6
 80a3166:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3168:	e7f6      	b.n	80a3158 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a316a:	4628      	mov	r0, r5
 80a316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a316e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a316e:	2200      	movs	r2, #0
 80a3170:	7c00      	ldrb	r0, [r0, #16]
 80a3172:	f7ff bdf9 	b.w	80a2d68 <HAL_I2C_Write_Data>

080a3176 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3176:	2100      	movs	r1, #0
 80a3178:	7c00      	ldrb	r0, [r0, #16]
 80a317a:	f7ff bdfd 	b.w	80a2d78 <HAL_I2C_Available_Data>

080a317e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a317e:	2100      	movs	r1, #0
 80a3180:	7c00      	ldrb	r0, [r0, #16]
 80a3182:	f7ff be01 	b.w	80a2d88 <HAL_I2C_Read_Data>

080a3186 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3186:	2100      	movs	r1, #0
 80a3188:	7c00      	ldrb	r0, [r0, #16]
 80a318a:	f7ff be05 	b.w	80a2d98 <HAL_I2C_Peek_Data>

080a318e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a318e:	2100      	movs	r1, #0
 80a3190:	7c00      	ldrb	r0, [r0, #16]
 80a3192:	f7ff be09 	b.w	80a2da8 <HAL_I2C_Flush_Data>

080a3196 <_ZN7TwoWireD0Ev>:
 80a3196:	b510      	push	{r4, lr}
 80a3198:	4604      	mov	r4, r0
 80a319a:	2114      	movs	r1, #20
 80a319c:	f001 f8c1 	bl	80a4322 <_ZdlPvj>
 80a31a0:	4620      	mov	r0, r4
 80a31a2:	bd10      	pop	{r4, pc}

080a31a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a31a4:	b510      	push	{r4, lr}
 80a31a6:	4604      	mov	r4, r0
 80a31a8:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a31aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a31ae:	60a3      	str	r3, [r4, #8]
 80a31b0:	4b04      	ldr	r3, [pc, #16]	; (80a31c4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a31b2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a31b4:	7420      	strb	r0, [r4, #16]
 80a31b6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a31b8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a31ba:	f7ff fe05 	bl	80a2dc8 <HAL_I2C_Init>

}
 80a31be:	4620      	mov	r0, r4
 80a31c0:	bd10      	pop	{r4, pc}
 80a31c2:	bf00      	nop
 80a31c4:	080a58ac 	.word	0x080a58ac

080a31c8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a31c8:	2300      	movs	r3, #0
 80a31ca:	461a      	mov	r2, r3
 80a31cc:	4619      	mov	r1, r3
 80a31ce:	7c00      	ldrb	r0, [r0, #16]
 80a31d0:	f7ff bdaa 	b.w	80a2d28 <HAL_I2C_Begin>

080a31d4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a31d4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a31d6:	2400      	movs	r4, #0
 80a31d8:	7c00      	ldrb	r0, [r0, #16]
 80a31da:	9400      	str	r4, [sp, #0]
 80a31dc:	f7ff fdac 	bl	80a2d38 <HAL_I2C_Request_Data>
  return result;
}
 80a31e0:	b2c0      	uxtb	r0, r0
 80a31e2:	b002      	add	sp, #8
 80a31e4:	bd10      	pop	{r4, pc}

080a31e6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a31e6:	2301      	movs	r3, #1
 80a31e8:	f7ff bff4 	b.w	80a31d4 <_ZN7TwoWire11requestFromEhhh>

080a31ec <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a31ec:	2200      	movs	r2, #0
 80a31ee:	7c00      	ldrb	r0, [r0, #16]
 80a31f0:	f7ff bdaa 	b.w	80a2d48 <HAL_I2C_Begin_Transmission>

080a31f4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a31f4:	2200      	movs	r2, #0
 80a31f6:	7c00      	ldrb	r0, [r0, #16]
 80a31f8:	f7ff bdae 	b.w	80a2d58 <HAL_I2C_End_Transmission>

080a31fc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a31fc:	2101      	movs	r1, #1
 80a31fe:	f7ff bff9 	b.w	80a31f4 <_ZN7TwoWire15endTransmissionEh>

080a3202 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3202:	2100      	movs	r1, #0
 80a3204:	7c00      	ldrb	r0, [r0, #16]
 80a3206:	f7ff bdd7 	b.w	80a2db8 <HAL_I2C_Is_Enabled>

080a320a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a320a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a320c:	460f      	mov	r7, r1
 80a320e:	f100 0608 	add.w	r6, r0, #8
 80a3212:	1d05      	adds	r5, r0, #4
 80a3214:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a321a:	220a      	movs	r2, #10
 80a321c:	4638      	mov	r0, r7
 80a321e:	f000 f95c 	bl	80a34da <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3222:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3224:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3226:	d007      	beq.n	80a3238 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3228:	2c00      	cmp	r4, #0
 80a322a:	d0f4      	beq.n	80a3216 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a322c:	212e      	movs	r1, #46	; 0x2e
 80a322e:	4638      	mov	r0, r7
 80a3230:	f000 f8f6 	bl	80a3420 <_ZN5Print5printEc>
 80a3234:	4404      	add	r4, r0
 80a3236:	e7ee      	b.n	80a3216 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3238:	4620      	mov	r0, r4
 80a323a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a323c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a323c:	b510      	push	{r4, lr}
 80a323e:	4604      	mov	r4, r0
 80a3240:	4b04      	ldr	r3, [pc, #16]	; (80a3254 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3242:	2211      	movs	r2, #17
 80a3244:	f840 3b04 	str.w	r3, [r0], #4
 80a3248:	2100      	movs	r1, #0
 80a324a:	f002 f978 	bl	80a553e <memset>
{
    clear();
}
 80a324e:	4620      	mov	r0, r4
 80a3250:	bd10      	pop	{r4, pc}
 80a3252:	bf00      	nop
 80a3254:	080a58d4 	.word	0x080a58d4

080a3258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3258:	4603      	mov	r3, r0
 80a325a:	4a07      	ldr	r2, [pc, #28]	; (80a3278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a325c:	b510      	push	{r4, lr}
 80a325e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a3262:	f101 0210 	add.w	r2, r1, #16
 80a3266:	f851 4b04 	ldr.w	r4, [r1], #4
 80a326a:	4291      	cmp	r1, r2
 80a326c:	f843 4b04 	str.w	r4, [r3], #4
 80a3270:	d1f9      	bne.n	80a3266 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3272:	780a      	ldrb	r2, [r1, #0]
 80a3274:	701a      	strb	r2, [r3, #0]
}
 80a3276:	bd10      	pop	{r4, pc}
 80a3278:	080a58d4 	.word	0x080a58d4

080a327c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a327c:	4a02      	ldr	r2, [pc, #8]	; (80a3288 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a327e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3280:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3282:	2204      	movs	r2, #4
 80a3284:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a3286:	4770      	bx	lr
 80a3288:	080a58d4 	.word	0x080a58d4

080a328c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a328c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a328e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3292:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a3296:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a329a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a329e:	2304      	movs	r3, #4
 80a32a0:	6041      	str	r1, [r0, #4]
 80a32a2:	7503      	strb	r3, [r0, #20]
 80a32a4:	bd10      	pop	{r4, pc}
	...

080a32a8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a32a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a32aa:	4d04      	ldr	r5, [pc, #16]	; (80a32bc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a32ac:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a32ae:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a32b2:	9500      	str	r5, [sp, #0]
 80a32b4:	f7ff ffea 	bl	80a328c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a32b8:	b003      	add	sp, #12
 80a32ba:	bd30      	pop	{r4, r5, pc}
 80a32bc:	080a58d4 	.word	0x080a58d4

080a32c0 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a32c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a32c2:	780d      	ldrb	r5, [r1, #0]
 80a32c4:	788b      	ldrb	r3, [r1, #2]
 80a32c6:	784a      	ldrb	r2, [r1, #1]
 80a32c8:	78c9      	ldrb	r1, [r1, #3]
 80a32ca:	9100      	str	r1, [sp, #0]
 80a32cc:	4629      	mov	r1, r5
 80a32ce:	f7ff ffdd 	bl	80a328c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a32d2:	b003      	add	sp, #12
 80a32d4:	bd30      	pop	{r4, r5, pc}
	...

080a32d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a32d8:	4a01      	ldr	r2, [pc, #4]	; (80a32e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a32da:	4b02      	ldr	r3, [pc, #8]	; (80a32e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a32dc:	601a      	str	r2, [r3, #0]
 80a32de:	4770      	bx	lr
 80a32e0:	080a5956 	.word	0x080a5956
 80a32e4:	20000208 	.word	0x20000208

080a32e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a32e8:	2300      	movs	r3, #0
 80a32ea:	461a      	mov	r2, r3
 80a32ec:	6840      	ldr	r0, [r0, #4]
 80a32ee:	f7ff bea9 	b.w	80a3044 <network_connect>

080a32f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a32f2:	2200      	movs	r2, #0
 80a32f4:	2102      	movs	r1, #2
 80a32f6:	6840      	ldr	r0, [r0, #4]
 80a32f8:	f7ff beb4 	b.w	80a3064 <network_disconnect>

080a32fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a32fc:	2200      	movs	r2, #0
 80a32fe:	4611      	mov	r1, r2
 80a3300:	6840      	ldr	r0, [r0, #4]
 80a3302:	f7ff bea7 	b.w	80a3054 <network_connecting>

080a3306 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3306:	2200      	movs	r2, #0
 80a3308:	4611      	mov	r1, r2
 80a330a:	6840      	ldr	r0, [r0, #4]
 80a330c:	f7ff beb2 	b.w	80a3074 <network_ready>

080a3310 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3310:	2300      	movs	r3, #0
 80a3312:	461a      	mov	r2, r3
 80a3314:	4619      	mov	r1, r3
 80a3316:	6840      	ldr	r0, [r0, #4]
 80a3318:	f7ff beb4 	b.w	80a3084 <network_on>

080a331c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a331c:	2300      	movs	r3, #0
 80a331e:	461a      	mov	r2, r3
 80a3320:	4619      	mov	r1, r3
 80a3322:	6840      	ldr	r0, [r0, #4]
 80a3324:	f7ff beb6 	b.w	80a3094 <network_off>

080a3328 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3328:	2200      	movs	r2, #0
 80a332a:	f081 0101 	eor.w	r1, r1, #1
 80a332e:	6840      	ldr	r0, [r0, #4]
 80a3330:	f7ff beb8 	b.w	80a30a4 <network_listen>

080a3334 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3334:	2200      	movs	r2, #0
 80a3336:	6840      	ldr	r0, [r0, #4]
 80a3338:	f7ff bec4 	b.w	80a30c4 <network_set_listen_timeout>

080a333c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a333c:	2200      	movs	r2, #0
 80a333e:	4611      	mov	r1, r2
 80a3340:	6840      	ldr	r0, [r0, #4]
 80a3342:	f7ff bec7 	b.w	80a30d4 <network_get_listen_timeout>

080a3346 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3346:	2200      	movs	r2, #0
 80a3348:	4611      	mov	r1, r2
 80a334a:	6840      	ldr	r0, [r0, #4]
 80a334c:	f7ff beb2 	b.w	80a30b4 <network_listening>

080a3350 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a3350:	b570      	push	{r4, r5, r6, lr}
 80a3352:	4616      	mov	r6, r2
 80a3354:	b08e      	sub	sp, #56	; 0x38
 80a3356:	4604      	mov	r4, r0
    IPAddress addr;
 80a3358:	a808      	add	r0, sp, #32
 80a335a:	f7ff ff6f 	bl	80a323c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a335e:	2211      	movs	r2, #17
 80a3360:	2100      	movs	r1, #0
 80a3362:	a803      	add	r0, sp, #12
 80a3364:	f002 f8eb 	bl	80a553e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3368:	4630      	mov	r0, r6
 80a336a:	f002 f95d 	bl	80a5628 <strlen>
 80a336e:	2500      	movs	r5, #0
 80a3370:	4b0a      	ldr	r3, [pc, #40]	; (80a339c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a3372:	9500      	str	r5, [sp, #0]
 80a3374:	b281      	uxth	r1, r0
 80a3376:	685b      	ldr	r3, [r3, #4]
 80a3378:	aa03      	add	r2, sp, #12
 80a337a:	4630      	mov	r0, r6
 80a337c:	f7ff fe1e 	bl	80a2fbc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3380:	b120      	cbz	r0, 80a338c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a3382:	4629      	mov	r1, r5
 80a3384:	4620      	mov	r0, r4
 80a3386:	f7ff ff79 	bl	80a327c <_ZN9IPAddressC1Em>
 80a338a:	e003      	b.n	80a3394 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a338c:	a903      	add	r1, sp, #12
 80a338e:	4620      	mov	r0, r4
 80a3390:	f7ff ff62 	bl	80a3258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3394:	4620      	mov	r0, r4
 80a3396:	b00e      	add	sp, #56	; 0x38
 80a3398:	bd70      	pop	{r4, r5, r6, pc}
 80a339a:	bf00      	nop
 80a339c:	2000068c 	.word	0x2000068c

080a33a0 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a33a0:	4b03      	ldr	r3, [pc, #12]	; (80a33b0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a33a2:	4a04      	ldr	r2, [pc, #16]	; (80a33b4 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a33a4:	2804      	cmp	r0, #4
 80a33a6:	bf0c      	ite	eq
 80a33a8:	4610      	moveq	r0, r2
 80a33aa:	4618      	movne	r0, r3
 80a33ac:	4770      	bx	lr
 80a33ae:	bf00      	nop
 80a33b0:	2000020c 	.word	0x2000020c
 80a33b4:	2000068c 	.word	0x2000068c

080a33b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a33b8:	4b02      	ldr	r3, [pc, #8]	; (80a33c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a33ba:	4a03      	ldr	r2, [pc, #12]	; (80a33c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a33bc:	601a      	str	r2, [r3, #0]
 80a33be:	2200      	movs	r2, #0
 80a33c0:	605a      	str	r2, [r3, #4]
 80a33c2:	4770      	bx	lr
 80a33c4:	2000020c 	.word	0x2000020c
 80a33c8:	080a59cc 	.word	0x080a59cc

080a33cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a33cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a33ce:	4606      	mov	r6, r0
 80a33d0:	460d      	mov	r5, r1
 80a33d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a33d4:	2400      	movs	r4, #0
  while (size--) {
 80a33d6:	42bd      	cmp	r5, r7
 80a33d8:	d00c      	beq.n	80a33f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a33da:	6833      	ldr	r3, [r6, #0]
 80a33dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a33e0:	689b      	ldr	r3, [r3, #8]
 80a33e2:	4630      	mov	r0, r6
 80a33e4:	4798      	blx	r3
     if (chunk>=0)
 80a33e6:	2800      	cmp	r0, #0
 80a33e8:	db01      	blt.n	80a33ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a33ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a33ec:	e7f3      	b.n	80a33d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a33ee:	2c00      	cmp	r4, #0
 80a33f0:	bf08      	it	eq
 80a33f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a33f4:	4620      	mov	r0, r4
 80a33f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a33f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a33f8:	b570      	push	{r4, r5, r6, lr}
 80a33fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a33fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a33fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3400:	b149      	cbz	r1, 80a3416 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3402:	f002 f911 	bl	80a5628 <strlen>
 80a3406:	682b      	ldr	r3, [r5, #0]
 80a3408:	4602      	mov	r2, r0
 80a340a:	4621      	mov	r1, r4
 80a340c:	4628      	mov	r0, r5
    }
 80a340e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3412:	68db      	ldr	r3, [r3, #12]
 80a3414:	4718      	bx	r3
    }
 80a3416:	bd70      	pop	{r4, r5, r6, pc}

080a3418 <_ZN5Print5printEPKc>:
 80a3418:	b508      	push	{r3, lr}
 80a341a:	f7ff ffed 	bl	80a33f8 <_ZN5Print5writeEPKc>
 80a341e:	bd08      	pop	{r3, pc}

080a3420 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3420:	6803      	ldr	r3, [r0, #0]
 80a3422:	689b      	ldr	r3, [r3, #8]
 80a3424:	4718      	bx	r3

080a3426 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a3426:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a3428:	680a      	ldr	r2, [r1, #0]
 80a342a:	4601      	mov	r1, r0
 80a342c:	6812      	ldr	r2, [r2, #0]
 80a342e:	4618      	mov	r0, r3
 80a3430:	4710      	bx	r2

080a3432 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3432:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3434:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3436:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3438:	f7ff fff2 	bl	80a3420 <_ZN5Print5printEc>
  n += print('\n');
 80a343c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a343e:	4604      	mov	r4, r0
  n += print('\n');
 80a3440:	4628      	mov	r0, r5
 80a3442:	f7ff ffed 	bl	80a3420 <_ZN5Print5printEc>
  return n;
}
 80a3446:	4420      	add	r0, r4
 80a3448:	bd38      	pop	{r3, r4, r5, pc}

080a344a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a344a:	b538      	push	{r3, r4, r5, lr}
 80a344c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a344e:	f7ff ffd3 	bl	80a33f8 <_ZN5Print5writeEPKc>
 80a3452:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3454:	4628      	mov	r0, r5
 80a3456:	f7ff ffec 	bl	80a3432 <_ZN5Print7printlnEv>
  return n;
}
 80a345a:	4420      	add	r0, r4
 80a345c:	bd38      	pop	{r3, r4, r5, pc}

080a345e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80a345e:	b538      	push	{r3, r4, r5, lr}
 80a3460:	4605      	mov	r5, r0
  size_t n = print(c);
 80a3462:	f7ff ffdd 	bl	80a3420 <_ZN5Print5printEc>
 80a3466:	4604      	mov	r4, r0
  n += println();
 80a3468:	4628      	mov	r0, r5
 80a346a:	f7ff ffe2 	bl	80a3432 <_ZN5Print7printlnEv>
  return n;
}
 80a346e:	4420      	add	r0, r4
 80a3470:	bd38      	pop	{r3, r4, r5, pc}

080a3472 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a3472:	b538      	push	{r3, r4, r5, lr}
 80a3474:	4605      	mov	r5, r0
   size_t n = print(x);
 80a3476:	f7ff ffd6 	bl	80a3426 <_ZN5Print5printERK9Printable>
 80a347a:	4604      	mov	r4, r0
   n += println();
 80a347c:	4628      	mov	r0, r5
 80a347e:	f7ff ffd8 	bl	80a3432 <_ZN5Print7printlnEv>
   return n;
 }
 80a3482:	4420      	add	r0, r4
 80a3484:	bd38      	pop	{r3, r4, r5, pc}

080a3486 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3486:	2a01      	cmp	r2, #1
 80a3488:	bf98      	it	ls
 80a348a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a348c:	b530      	push	{r4, r5, lr}
 80a348e:	460b      	mov	r3, r1
 80a3490:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3492:	2100      	movs	r1, #0
 80a3494:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3498:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a349c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a34a0:	fb05 3312 	mls	r3, r5, r2, r3
 80a34a4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a34a6:	2b09      	cmp	r3, #9
 80a34a8:	bf94      	ite	ls
 80a34aa:	3330      	addls	r3, #48	; 0x30
 80a34ac:	3337      	addhi	r3, #55	; 0x37
 80a34ae:	b2db      	uxtb	r3, r3
 80a34b0:	4621      	mov	r1, r4
 80a34b2:	f804 3901 	strb.w	r3, [r4], #-1
 80a34b6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a34b8:	2d00      	cmp	r5, #0
 80a34ba:	d1ef      	bne.n	80a349c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a34bc:	f7ff ff9c 	bl	80a33f8 <_ZN5Print5writeEPKc>
}
 80a34c0:	b00b      	add	sp, #44	; 0x2c
 80a34c2:	bd30      	pop	{r4, r5, pc}

080a34c4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a34c4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a34c6:	b922      	cbnz	r2, 80a34d2 <_ZN5Print5printEmi+0xe>
 80a34c8:	6803      	ldr	r3, [r0, #0]
 80a34ca:	b2c9      	uxtb	r1, r1
 80a34cc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a34ce:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a34d0:	4718      	bx	r3
  else return printNumber(n, base);
 80a34d2:	b2d2      	uxtb	r2, r2
}
 80a34d4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a34d6:	f7ff bfd6 	b.w	80a3486 <_ZN5Print11printNumberEmh>

080a34da <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a34da:	f7ff bff3 	b.w	80a34c4 <_ZN5Print5printEmi>

080a34de <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a34de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a34e2:	4607      	mov	r7, r0
 80a34e4:	460e      	mov	r6, r1
  if (base == 0) {
 80a34e6:	4615      	mov	r5, r2
 80a34e8:	b92a      	cbnz	r2, 80a34f6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a34ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a34ee:	6803      	ldr	r3, [r0, #0]
 80a34f0:	b2c9      	uxtb	r1, r1
 80a34f2:	689b      	ldr	r3, [r3, #8]
 80a34f4:	4718      	bx	r3
  } else if (base == 10) {
 80a34f6:	2a0a      	cmp	r2, #10
 80a34f8:	d102      	bne.n	80a3500 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a34fa:	2900      	cmp	r1, #0
 80a34fc:	da01      	bge.n	80a3502 <_ZN5Print5printEli+0x24>
 80a34fe:	e004      	b.n	80a350a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3500:	b2d2      	uxtb	r2, r2
  }
}
 80a3502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3506:	f7ff bfbe 	b.w	80a3486 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a350a:	212d      	movs	r1, #45	; 0x2d
 80a350c:	f7ff ff88 	bl	80a3420 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3510:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3512:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3514:	4271      	negs	r1, r6
 80a3516:	4638      	mov	r0, r7
 80a3518:	f7ff ffb5 	bl	80a3486 <_ZN5Print11printNumberEmh>
 80a351c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a351e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3522 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3522:	f7ff bfdc 	b.w	80a34de <_ZN5Print5printEli>

080a3526 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a3526:	b538      	push	{r3, r4, r5, lr}
 80a3528:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a352a:	f7ff ffd8 	bl	80a34de <_ZN5Print5printEli>
 80a352e:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3530:	4628      	mov	r0, r5
 80a3532:	f7ff ff7e 	bl	80a3432 <_ZN5Print7printlnEv>
  return n;
}
 80a3536:	4420      	add	r0, r4
 80a3538:	bd38      	pop	{r3, r4, r5, pc}
	...

080a353c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3540:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3542:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3544:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3546:	4617      	mov	r7, r2
 80a3548:	461e      	mov	r6, r3
 80a354a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a354e:	f001 fc85 	bl	80a4e5c <__aeabi_dcmpun>
 80a3552:	b108      	cbz	r0, 80a3558 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3554:	4947      	ldr	r1, [pc, #284]	; (80a3674 <_ZN5Print10printFloatEdh+0x138>)
 80a3556:	e012      	b.n	80a357e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3558:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a355c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3560:	4b45      	ldr	r3, [pc, #276]	; (80a3678 <_ZN5Print10printFloatEdh+0x13c>)
 80a3562:	4638      	mov	r0, r7
 80a3564:	4621      	mov	r1, r4
 80a3566:	f001 fc79 	bl	80a4e5c <__aeabi_dcmpun>
 80a356a:	b968      	cbnz	r0, 80a3588 <_ZN5Print10printFloatEdh+0x4c>
 80a356c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3570:	4b41      	ldr	r3, [pc, #260]	; (80a3678 <_ZN5Print10printFloatEdh+0x13c>)
 80a3572:	4638      	mov	r0, r7
 80a3574:	4621      	mov	r1, r4
 80a3576:	f001 fc53 	bl	80a4e20 <__aeabi_dcmple>
 80a357a:	b928      	cbnz	r0, 80a3588 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a357c:	493f      	ldr	r1, [pc, #252]	; (80a367c <_ZN5Print10printFloatEdh+0x140>)
 80a357e:	4640      	mov	r0, r8
 80a3580:	f7ff ff3a 	bl	80a33f8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3588:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a358c:	4b3c      	ldr	r3, [pc, #240]	; (80a3680 <_ZN5Print10printFloatEdh+0x144>)
 80a358e:	4638      	mov	r0, r7
 80a3590:	4631      	mov	r1, r6
 80a3592:	f001 fc59 	bl	80a4e48 <__aeabi_dcmpgt>
 80a3596:	b108      	cbz	r0, 80a359c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3598:	493a      	ldr	r1, [pc, #232]	; (80a3684 <_ZN5Print10printFloatEdh+0x148>)
 80a359a:	e7f0      	b.n	80a357e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a359c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a35a0:	4b39      	ldr	r3, [pc, #228]	; (80a3688 <_ZN5Print10printFloatEdh+0x14c>)
 80a35a2:	4638      	mov	r0, r7
 80a35a4:	4631      	mov	r1, r6
 80a35a6:	f001 fc31 	bl	80a4e0c <__aeabi_dcmplt>
 80a35aa:	2800      	cmp	r0, #0
 80a35ac:	d1f4      	bne.n	80a3598 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a35ae:	2200      	movs	r2, #0
 80a35b0:	2300      	movs	r3, #0
 80a35b2:	4638      	mov	r0, r7
 80a35b4:	4631      	mov	r1, r6
 80a35b6:	f001 fc29 	bl	80a4e0c <__aeabi_dcmplt>
 80a35ba:	b138      	cbz	r0, 80a35cc <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a35bc:	212d      	movs	r1, #45	; 0x2d
 80a35be:	4640      	mov	r0, r8
 80a35c0:	f7ff ff2e 	bl	80a3420 <_ZN5Print5printEc>
     number = -number;
 80a35c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a35c8:	4604      	mov	r4, r0
 80a35ca:	e000      	b.n	80a35ce <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a35cc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a35ce:	492f      	ldr	r1, [pc, #188]	; (80a368c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a35d0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a35d4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a35d6:	fa5f f389 	uxtb.w	r3, r9
 80a35da:	429d      	cmp	r5, r3
 80a35dc:	d906      	bls.n	80a35ec <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a35de:	2200      	movs	r2, #0
 80a35e0:	4b2b      	ldr	r3, [pc, #172]	; (80a3690 <_ZN5Print10printFloatEdh+0x154>)
 80a35e2:	f001 facb 	bl	80a4b7c <__aeabi_ddiv>
 80a35e6:	f109 0901 	add.w	r9, r9, #1
 80a35ea:	e7f4      	b.n	80a35d6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a35ec:	463a      	mov	r2, r7
 80a35ee:	4633      	mov	r3, r6
 80a35f0:	f000 ffe8 	bl	80a45c4 <__adddf3>
 80a35f4:	460f      	mov	r7, r1
 80a35f6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a35f8:	f001 fc6e 	bl	80a4ed8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a35fc:	220a      	movs	r2, #10
 80a35fe:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3600:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3602:	4640      	mov	r0, r8
 80a3604:	f7ff ff3f 	bl	80a3486 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3608:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a360a:	b37d      	cbz	r5, 80a366c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a360c:	4648      	mov	r0, r9
 80a360e:	f001 f915 	bl	80a483c <__aeabi_ui2d>
 80a3612:	4602      	mov	r2, r0
 80a3614:	460b      	mov	r3, r1
 80a3616:	4630      	mov	r0, r6
 80a3618:	4639      	mov	r1, r7
 80a361a:	f000 ffd1 	bl	80a45c0 <__aeabi_dsub>
 80a361e:	4606      	mov	r6, r0
 80a3620:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3622:	4640      	mov	r0, r8
 80a3624:	491b      	ldr	r1, [pc, #108]	; (80a3694 <_ZN5Print10printFloatEdh+0x158>)
 80a3626:	f7ff fee7 	bl	80a33f8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a362a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a362c:	4b18      	ldr	r3, [pc, #96]	; (80a3690 <_ZN5Print10printFloatEdh+0x154>)
 80a362e:	2200      	movs	r2, #0
 80a3630:	4630      	mov	r0, r6
 80a3632:	4639      	mov	r1, r7
 80a3634:	f001 f978 	bl	80a4928 <__aeabi_dmul>
 80a3638:	460f      	mov	r7, r1
 80a363a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a363c:	f001 fc24 	bl	80a4e88 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3640:	220a      	movs	r2, #10
 80a3642:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a3644:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3646:	4640      	mov	r0, r8
 80a3648:	f7ff ff49 	bl	80a34de <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a364c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a364e:	4648      	mov	r0, r9
 80a3650:	f001 f904 	bl	80a485c <__aeabi_i2d>
 80a3654:	4602      	mov	r2, r0
 80a3656:	460b      	mov	r3, r1
 80a3658:	4630      	mov	r0, r6
 80a365a:	4639      	mov	r1, r7
 80a365c:	f000 ffb0 	bl	80a45c0 <__aeabi_dsub>
 80a3660:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3662:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a3666:	4606      	mov	r6, r0
 80a3668:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a366a:	d1df      	bne.n	80a362c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a366c:	4620      	mov	r0, r4
 80a366e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3672:	bf00      	nop
 80a3674:	080a59f8 	.word	0x080a59f8
 80a3678:	7fefffff 	.word	0x7fefffff
 80a367c:	080a5a00 	.word	0x080a5a00
 80a3680:	41efffff 	.word	0x41efffff
 80a3684:	080a59fc 	.word	0x080a59fc
 80a3688:	c1efffff 	.word	0xc1efffff
 80a368c:	3fe00000 	.word	0x3fe00000
 80a3690:	40240000 	.word	0x40240000
 80a3694:	080a568c 	.word	0x080a568c

080a3698 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a3698:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a369a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a369e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a36a0:	9100      	str	r1, [sp, #0]
 80a36a2:	f7ff ff4b 	bl	80a353c <_ZN5Print10printFloatEdh>
 80a36a6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a36a8:	4628      	mov	r0, r5
 80a36aa:	f7ff fec2 	bl	80a3432 <_ZN5Print7printlnEv>
  return n;
}
 80a36ae:	4420      	add	r0, r4
 80a36b0:	b003      	add	sp, #12
 80a36b2:	bd30      	pop	{r4, r5, pc}

080a36b4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a36b4:	b510      	push	{r4, lr}
 80a36b6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a36b8:	f7ff fd3f 	bl	80a313a <_ZNSt14_Function_baseD1Ev>
 80a36bc:	4620      	mov	r0, r4
 80a36be:	bd10      	pop	{r4, pc}

080a36c0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a36c0:	4803      	ldr	r0, [pc, #12]	; (80a36d0 <_GLOBAL__sub_I_RGB+0x10>)
 80a36c2:	2300      	movs	r3, #0
 80a36c4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a36c6:	4a03      	ldr	r2, [pc, #12]	; (80a36d4 <_GLOBAL__sub_I_RGB+0x14>)
 80a36c8:	4903      	ldr	r1, [pc, #12]	; (80a36d8 <_GLOBAL__sub_I_RGB+0x18>)
 80a36ca:	f000 be25 	b.w	80a4318 <__aeabi_atexit>
 80a36ce:	bf00      	nop
 80a36d0:	20000214 	.word	0x20000214
 80a36d4:	20000088 	.word	0x20000088
 80a36d8:	080a36b5 	.word	0x080a36b5

080a36dc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a36dc:	4770      	bx	lr

080a36de <_ZN8SPIClassD0Ev>:
 80a36de:	b510      	push	{r4, lr}
 80a36e0:	4604      	mov	r4, r0
 80a36e2:	2110      	movs	r1, #16
 80a36e4:	f000 fe1d 	bl	80a4322 <_ZdlPvj>
 80a36e8:	4620      	mov	r0, r4
 80a36ea:	bd10      	pop	{r4, pc}

080a36ec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a36ec:	b570      	push	{r4, r5, r6, lr}
 80a36ee:	4604      	mov	r4, r0
 80a36f0:	460e      	mov	r6, r1
 80a36f2:	4b07      	ldr	r3, [pc, #28]	; (80a3710 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a36f4:	2500      	movs	r5, #0
 80a36f6:	6003      	str	r3, [r0, #0]
 80a36f8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a36fc:	f7ff fad4 	bl	80a2ca8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a3700:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a3702:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a3704:	f7ff fbc2 	bl	80a2e8c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3708:	60a5      	str	r5, [r4, #8]
}
 80a370a:	4620      	mov	r0, r4
 80a370c:	bd70      	pop	{r4, r5, r6, pc}
 80a370e:	bf00      	nop
 80a3710:	080a5a0c 	.word	0x080a5a0c

080a3714 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a3714:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a3718:	7900      	ldrb	r0, [r0, #4]
 80a371a:	f7ff bb8f 	b.w	80a2e3c <HAL_SPI_Begin>

080a371e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a371e:	7900      	ldrb	r0, [r0, #4]
 80a3720:	f7ff bb94 	b.w	80a2e4c <HAL_SPI_Set_Bit_Order>

080a3724 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a3724:	7900      	ldrb	r0, [r0, #4]
 80a3726:	f7ff bb99 	b.w	80a2e5c <HAL_SPI_Set_Data_Mode>
	...

080a372c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a372c:	4a05      	ldr	r2, [pc, #20]	; (80a3744 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a372e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a3730:	5c99      	ldrb	r1, [r3, r2]
 80a3732:	4281      	cmp	r1, r0
 80a3734:	d002      	beq.n	80a373c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a3736:	3301      	adds	r3, #1
 80a3738:	2b08      	cmp	r3, #8
 80a373a:	d1f9      	bne.n	80a3730 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a373c:	1c58      	adds	r0, r3, #1
}
 80a373e:	b2c0      	uxtb	r0, r0
 80a3740:	4770      	bx	lr
 80a3742:	bf00      	nop
 80a3744:	080a5a14 	.word	0x080a5a14

080a3748 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a3748:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a374a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a374c:	6018      	str	r0, [r3, #0]
 80a374e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a3750:	6818      	ldr	r0, [r3, #0]
 80a3752:	b2e5      	uxtb	r5, r4
 80a3754:	4288      	cmp	r0, r1
 80a3756:	d906      	bls.n	80a3766 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a3758:	3401      	adds	r4, #1
 80a375a:	2c08      	cmp	r4, #8
 80a375c:	d002      	beq.n	80a3764 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a375e:	0840      	lsrs	r0, r0, #1
 80a3760:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a3762:	e7f5      	b.n	80a3750 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a3764:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a3766:	4b02      	ldr	r3, [pc, #8]	; (80a3770 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a3768:	5d5b      	ldrb	r3, [r3, r5]
 80a376a:	7013      	strb	r3, [r2, #0]
 80a376c:	bd30      	pop	{r4, r5, pc}
 80a376e:	bf00      	nop
 80a3770:	080a5a14 	.word	0x080a5a14

080a3774 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a3774:	b570      	push	{r4, r5, r6, lr}
 80a3776:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a3778:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a377c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a377e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a3780:	2214      	movs	r2, #20
 80a3782:	2100      	movs	r1, #0
 80a3784:	a803      	add	r0, sp, #12
 80a3786:	f001 feda 	bl	80a553e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a378a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a378c:	a903      	add	r1, sp, #12
 80a378e:	4630      	mov	r0, r6
 80a3790:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a3792:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a3796:	f7ff fb89 	bl	80a2eac <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a379a:	ab02      	add	r3, sp, #8
 80a379c:	f10d 0207 	add.w	r2, sp, #7
 80a37a0:	4629      	mov	r1, r5
 80a37a2:	9804      	ldr	r0, [sp, #16]
 80a37a4:	f7ff ffd0 	bl	80a3748 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a37a8:	7920      	ldrb	r0, [r4, #4]
 80a37aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a37ae:	f7ff fb5d 	bl	80a2e6c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a37b2:	9802      	ldr	r0, [sp, #8]
 80a37b4:	b008      	add	sp, #32
 80a37b6:	bd70      	pop	{r4, r5, r6, pc}

080a37b8 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a37b8:	b538      	push	{r3, r4, r5, lr}
 80a37ba:	4604      	mov	r4, r0
    if (dividerReference)
 80a37bc:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a37be:	4608      	mov	r0, r1
    if (dividerReference)
 80a37c0:	b14d      	cbz	r5, 80a37d6 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a37c2:	f7ff ffb3 	bl	80a372c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a37c6:	2201      	movs	r2, #1
 80a37c8:	fa25 f100 	lsr.w	r1, r5, r0
 80a37cc:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a37ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a37d2:	f7ff bfcf 	b.w	80a3774 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a37d6:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a37d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a37dc:	f7ff bb46 	b.w	80a2e6c <HAL_SPI_Set_Clock_Divider>

080a37e0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a37e0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a37e2:	7900      	ldrb	r0, [r0, #4]
 80a37e4:	f7ff fb4a 	bl	80a2e7c <HAL_SPI_Send_Receive_Data>
}
 80a37e8:	b2c0      	uxtb	r0, r0
 80a37ea:	bd08      	pop	{r3, pc}

080a37ec <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a37ec:	7900      	ldrb	r0, [r0, #4]
 80a37ee:	f7ff bb55 	b.w	80a2e9c <HAL_SPI_Is_Enabled>

080a37f2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a37f2:	b510      	push	{r4, lr}
 80a37f4:	4604      	mov	r4, r0
{
	free(buffer);
 80a37f6:	6800      	ldr	r0, [r0, #0]
 80a37f8:	f7ff fc8c 	bl	80a3114 <free>
}
 80a37fc:	4620      	mov	r0, r4
 80a37fe:	bd10      	pop	{r4, pc}

080a3800 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3800:	b510      	push	{r4, lr}
 80a3802:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3804:	6800      	ldr	r0, [r0, #0]
 80a3806:	b108      	cbz	r0, 80a380c <_ZN6String10invalidateEv+0xc>
 80a3808:	f7ff fc84 	bl	80a3114 <free>
	buffer = NULL;
 80a380c:	2300      	movs	r3, #0
 80a380e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3810:	60a3      	str	r3, [r4, #8]
 80a3812:	6063      	str	r3, [r4, #4]
 80a3814:	bd10      	pop	{r4, pc}

080a3816 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3816:	b538      	push	{r3, r4, r5, lr}
 80a3818:	4604      	mov	r4, r0
 80a381a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a381c:	6800      	ldr	r0, [r0, #0]
 80a381e:	3101      	adds	r1, #1
 80a3820:	f7ff fc80 	bl	80a3124 <realloc>
	if (newbuffer) {
 80a3824:	b110      	cbz	r0, 80a382c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3826:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a382a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a382c:	bd38      	pop	{r3, r4, r5, pc}

080a382e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a382e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3830:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3832:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3834:	b113      	cbz	r3, 80a383c <_ZN6String7reserveEj+0xe>
 80a3836:	6843      	ldr	r3, [r0, #4]
 80a3838:	428b      	cmp	r3, r1
 80a383a:	d207      	bcs.n	80a384c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a383c:	4620      	mov	r0, r4
 80a383e:	f7ff ffea 	bl	80a3816 <_ZN6String12changeBufferEj>
 80a3842:	b120      	cbz	r0, 80a384e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3844:	68a3      	ldr	r3, [r4, #8]
 80a3846:	b90b      	cbnz	r3, 80a384c <_ZN6String7reserveEj+0x1e>
 80a3848:	6822      	ldr	r2, [r4, #0]
 80a384a:	7013      	strb	r3, [r2, #0]
 80a384c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a384e:	bd10      	pop	{r4, pc}

080a3850 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3850:	b570      	push	{r4, r5, r6, lr}
 80a3852:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3854:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3856:	4604      	mov	r4, r0
 80a3858:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a385a:	f7ff ffe8 	bl	80a382e <_ZN6String7reserveEj>
 80a385e:	b918      	cbnz	r0, 80a3868 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3860:	4620      	mov	r0, r4
 80a3862:	f7ff ffcd 	bl	80a3800 <_ZN6String10invalidateEv>
		return *this;
 80a3866:	e009      	b.n	80a387c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3868:	462a      	mov	r2, r5
 80a386a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a386c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a386e:	6820      	ldr	r0, [r4, #0]
 80a3870:	f001 fe5a 	bl	80a5528 <memcpy>
	buffer[len] = 0;
 80a3874:	6822      	ldr	r2, [r4, #0]
 80a3876:	68a3      	ldr	r3, [r4, #8]
 80a3878:	2100      	movs	r1, #0
 80a387a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a387c:	4620      	mov	r0, r4
 80a387e:	bd70      	pop	{r4, r5, r6, pc}

080a3880 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3880:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3882:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3884:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3886:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3888:	6043      	str	r3, [r0, #4]
	len = 0;
 80a388a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a388c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a388e:	460d      	mov	r5, r1
 80a3890:	b139      	cbz	r1, 80a38a2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3892:	4608      	mov	r0, r1
 80a3894:	f001 fec8 	bl	80a5628 <strlen>
 80a3898:	4629      	mov	r1, r5
 80a389a:	4602      	mov	r2, r0
 80a389c:	4620      	mov	r0, r4
 80a389e:	f7ff ffd7 	bl	80a3850 <_ZN6String4copyEPKcj>
}
 80a38a2:	4620      	mov	r0, r4
 80a38a4:	bd38      	pop	{r3, r4, r5, pc}

080a38a6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a38a6:	b538      	push	{r3, r4, r5, lr}
 80a38a8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a38aa:	460c      	mov	r4, r1
 80a38ac:	b141      	cbz	r1, 80a38c0 <_ZN6StringaSEPKc+0x1a>
 80a38ae:	4608      	mov	r0, r1
 80a38b0:	f001 feba 	bl	80a5628 <strlen>
 80a38b4:	4621      	mov	r1, r4
 80a38b6:	4602      	mov	r2, r0
 80a38b8:	4628      	mov	r0, r5
 80a38ba:	f7ff ffc9 	bl	80a3850 <_ZN6String4copyEPKcj>
 80a38be:	e001      	b.n	80a38c4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a38c0:	f7ff ff9e 	bl	80a3800 <_ZN6String10invalidateEv>

	return *this;
}
 80a38c4:	4628      	mov	r0, r5
 80a38c6:	bd38      	pop	{r3, r4, r5, pc}

080a38c8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a38c8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a38ca:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a38cc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a38ce:	b912      	cbnz	r2, 80a38d6 <_ZNK6String6equalsEPKc+0xe>
 80a38d0:	b919      	cbnz	r1, 80a38da <_ZNK6String6equalsEPKc+0x12>
 80a38d2:	2001      	movs	r0, #1
 80a38d4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a38d6:	b911      	cbnz	r1, 80a38de <_ZNK6String6equalsEPKc+0x16>
 80a38d8:	6803      	ldr	r3, [r0, #0]
 80a38da:	7818      	ldrb	r0, [r3, #0]
 80a38dc:	e002      	b.n	80a38e4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a38de:	6800      	ldr	r0, [r0, #0]
 80a38e0:	f001 fe98 	bl	80a5614 <strcmp>
 80a38e4:	fab0 f080 	clz	r0, r0
 80a38e8:	0940      	lsrs	r0, r0, #5
}
 80a38ea:	bd08      	pop	{r3, pc}

080a38ec <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a38ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a38f0:	4b03      	ldr	r3, [pc, #12]	; (80a3900 <_GLOBAL__sub_I_System+0x14>)
 80a38f2:	2000      	movs	r0, #0
 80a38f4:	7018      	strb	r0, [r3, #0]
 80a38f6:	8058      	strh	r0, [r3, #2]
 80a38f8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a38fa:	f7ff bb67 	b.w	80a2fcc <set_system_mode>
 80a38fe:	bf00      	nop
 80a3900:	20000224 	.word	0x20000224

080a3904 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3904:	4b02      	ldr	r3, [pc, #8]	; (80a3910 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3906:	681a      	ldr	r2, [r3, #0]
 80a3908:	4b02      	ldr	r3, [pc, #8]	; (80a3914 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a390a:	601a      	str	r2, [r3, #0]
 80a390c:	4770      	bx	lr
 80a390e:	bf00      	nop
 80a3910:	20000020 	.word	0x20000020
 80a3914:	2000022c 	.word	0x2000022c

080a3918 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a3918:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a391a:	6804      	ldr	r4, [r0, #0]
 80a391c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a391e:	46a4      	mov	ip, r4
    }
 80a3920:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a3922:	4760      	bx	ip

080a3924 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a3924:	6803      	ldr	r3, [r0, #0]
 80a3926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3928:	4718      	bx	r3

080a392a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a392a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a392c:	4770      	bx	lr

080a392e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a392e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a3930:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a3932:	1a10      	subs	r0, r2, r0
 80a3934:	4770      	bx	lr

080a3936 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a3936:	b513      	push	{r0, r1, r4, lr}
 80a3938:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a393a:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a393c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a3940:	68d4      	ldr	r4, [r2, #12]
 80a3942:	4619      	mov	r1, r3
 80a3944:	2201      	movs	r2, #1
 80a3946:	47a0      	blx	r4
}
 80a3948:	b002      	add	sp, #8
 80a394a:	bd10      	pop	{r4, pc}

080a394c <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a394c:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a394e:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a3950:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a3952:	691b      	ldr	r3, [r3, #16]
 80a3954:	4798      	blx	r3
 80a3956:	b128      	cbz	r0, 80a3964 <_ZN3UDP4readEv+0x18>
 80a3958:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a395a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a395c:	1c59      	adds	r1, r3, #1
 80a395e:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a3960:	5cd0      	ldrb	r0, [r2, r3]
 80a3962:	bd10      	pop	{r4, pc}
 80a3964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3968:	bd10      	pop	{r4, pc}

080a396a <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a396a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a396c:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a396e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a3970:	691b      	ldr	r3, [r3, #16]
 80a3972:	4798      	blx	r3
 80a3974:	b118      	cbz	r0, 80a397e <_ZN3UDP4peekEv+0x14>
 80a3976:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3978:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a397a:	5cd0      	ldrb	r0, [r2, r3]
 80a397c:	bd10      	pop	{r4, pc}
 80a397e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3982:	bd10      	pop	{r4, pc}

080a3984 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a3984:	4770      	bx	lr

080a3986 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a3986:	4603      	mov	r3, r0
 80a3988:	4608      	mov	r0, r1
 80a398a:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a398c:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a398e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3990:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a3992:	6803      	ldr	r3, [r0, #0]
 80a3994:	1a52      	subs	r2, r2, r1
 80a3996:	68db      	ldr	r3, [r3, #12]
 80a3998:	4421      	add	r1, r4
}
 80a399a:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a399c:	4718      	bx	r3

080a399e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a399e:	f1a0 0010 	sub.w	r0, r0, #16
 80a39a2:	f7ff bff0 	b.w	80a3986 <_ZNK3UDP7printToER5Print>

080a39a6 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a39a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a39a8:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a39aa:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a39ac:	460f      	mov	r7, r1
 80a39ae:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a39b0:	f7ff fcf6 	bl	80a33a0 <_ZN5spark12NetworkClass4fromEm>
 80a39b4:	6803      	ldr	r3, [r0, #0]
 80a39b6:	68db      	ldr	r3, [r3, #12]
 80a39b8:	4798      	blx	r3
 80a39ba:	b1b8      	cbz	r0, 80a39ec <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a39bc:	2102      	movs	r1, #2
 80a39be:	463b      	mov	r3, r7
 80a39c0:	2211      	movs	r2, #17
 80a39c2:	4608      	mov	r0, r1
 80a39c4:	9600      	str	r6, [sp, #0]
 80a39c6:	f7ff fa11 	bl	80a2dec <socket_create>
 80a39ca:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a39cc:	f7ff fa06 	bl	80a2ddc <socket_handle_valid>
 80a39d0:	4604      	mov	r4, r0
 80a39d2:	b130      	cbz	r0, 80a39e2 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a39d4:	2300      	movs	r3, #0
 80a39d6:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a39d8:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a39da:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a39dc:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a39de:	2001      	movs	r0, #1
 80a39e0:	e004      	b.n	80a39ec <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a39e2:	682b      	ldr	r3, [r5, #0]
 80a39e4:	4628      	mov	r0, r5
 80a39e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a39e8:	4798      	blx	r3
            bound = false;
 80a39ea:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a39ec:	b003      	add	sp, #12
 80a39ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a39f0 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a39f0:	b538      	push	{r3, r4, r5, lr}
 80a39f2:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a39f4:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a39f6:	f7ff fa19 	bl	80a2e2c <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a39fa:	4285      	cmp	r5, r0
 80a39fc:	d002      	beq.n	80a3a04 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a39fe:	6960      	ldr	r0, [r4, #20]
 80a3a00:	f7ff fa0c 	bl	80a2e1c <socket_close>
    }
    _sock = socket_handle_invalid();
 80a3a04:	f7ff fa12 	bl	80a2e2c <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3a08:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a3a0a:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3a0c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3a0e:	8723      	strh	r3, [r4, #56]	; 0x38
 80a3a10:	bd38      	pop	{r3, r4, r5, pc}

080a3a12 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a3a12:	b530      	push	{r4, r5, lr}
 80a3a14:	b087      	sub	sp, #28
 80a3a16:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a3a1a:	2502      	movs	r5, #2
 80a3a1c:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a3a20:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3a24:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a3a26:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3a28:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a3a2c:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a3a30:	799c      	ldrb	r4, [r3, #6]
 80a3a32:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3a36:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3a38:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3a3a:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3a3e:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a3a42:	2310      	movs	r3, #16
 80a3a44:	9301      	str	r3, [sp, #4]
 80a3a46:	ab02      	add	r3, sp, #8
 80a3a48:	9300      	str	r3, [sp, #0]
 80a3a4a:	6940      	ldr	r0, [r0, #20]
 80a3a4c:	2300      	movs	r3, #0
 80a3a4e:	f7ff f9dd 	bl	80a2e0c <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a3a52:	b007      	add	sp, #28
 80a3a54:	bd30      	pop	{r4, r5, pc}

080a3a56 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3a56:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3a58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3a5a:	4605      	mov	r5, r0
 80a3a5c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3a5e:	b113      	cbz	r3, 80a3a66 <_ZN3UDP5writeEPKhj+0x10>
 80a3a60:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a3a62:	1a24      	subs	r4, r4, r0
 80a3a64:	e000      	b.n	80a3a68 <_ZN3UDP5writeEPKhj+0x12>
 80a3a66:	461c      	mov	r4, r3
 80a3a68:	4294      	cmp	r4, r2
 80a3a6a:	bf28      	it	cs
 80a3a6c:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a3a6e:	4418      	add	r0, r3
 80a3a70:	4622      	mov	r2, r4
 80a3a72:	f001 fd59 	bl	80a5528 <memcpy>
    _offset += size;
 80a3a76:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3a78:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a3a7a:	4423      	add	r3, r4
 80a3a7c:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3a7e:	bd38      	pop	{r3, r4, r5, pc}

080a3a80 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3a80:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a3a82:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3a84:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a3a86:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3a88:	460e      	mov	r6, r1
 80a3a8a:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a3a8c:	4798      	blx	r3
 80a3a8e:	b188      	cbz	r0, 80a3ab4 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a3a90:	6823      	ldr	r3, [r4, #0]
 80a3a92:	4620      	mov	r0, r4
 80a3a94:	691b      	ldr	r3, [r3, #16]
 80a3a96:	4798      	blx	r3
 80a3a98:	4285      	cmp	r5, r0
 80a3a9a:	bfa8      	it	ge
 80a3a9c:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a3a9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3aa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a3aa2:	462a      	mov	r2, r5
 80a3aa4:	4419      	add	r1, r3
 80a3aa6:	4630      	mov	r0, r6
 80a3aa8:	f001 fd3e 	bl	80a5528 <memcpy>
      _offset += read;
 80a3aac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3aae:	442b      	add	r3, r5
 80a3ab0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a3ab2:	e001      	b.n	80a3ab8 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a3ab4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a3ab8:	4628      	mov	r0, r5
 80a3aba:	bd70      	pop	{r4, r5, r6, pc}

080a3abc <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3abe:	4604      	mov	r4, r0
 80a3ac0:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3ac2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3ac4:	460d      	mov	r5, r1
 80a3ac6:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3ac8:	f7ff fc6a 	bl	80a33a0 <_ZN5spark12NetworkClass4fromEm>
 80a3acc:	6803      	ldr	r3, [r0, #0]
 80a3ace:	68db      	ldr	r3, [r3, #12]
 80a3ad0:	4798      	blx	r3
 80a3ad2:	b310      	cbz	r0, 80a3b1a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a3ad4:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a3ad6:	f7ff f9a9 	bl	80a2e2c <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3ada:	4287      	cmp	r7, r0
 80a3adc:	d01d      	beq.n	80a3b1a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a3ade:	b1e5      	cbz	r5, 80a3b1a <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a3ae0:	ab08      	add	r3, sp, #32
 80a3ae2:	2210      	movs	r2, #16
 80a3ae4:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a3ae8:	9301      	str	r3, [sp, #4]
 80a3aea:	eb0d 0302 	add.w	r3, sp, r2
 80a3aee:	9300      	str	r3, [sp, #0]
 80a3af0:	4629      	mov	r1, r5
 80a3af2:	2300      	movs	r3, #0
 80a3af4:	4632      	mov	r2, r6
 80a3af6:	6960      	ldr	r0, [r4, #20]
 80a3af8:	f7ff f980 	bl	80a2dfc <socket_receivefrom>
        if (ret >= 0)
 80a3afc:	1e05      	subs	r5, r0, #0
 80a3afe:	db0e      	blt.n	80a3b1e <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a3b00:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a3b04:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a3b08:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a3b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a3b0e:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a3b10:	f104 001c 	add.w	r0, r4, #28
 80a3b14:	f7ff fbd4 	bl	80a32c0 <_ZN9IPAddressaSEPKh>
 80a3b18:	e001      	b.n	80a3b1e <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a3b1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a3b1e:	4628      	mov	r0, r5
 80a3b20:	b009      	add	sp, #36	; 0x24
 80a3b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3b24 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a3b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3b28:	4606      	mov	r6, r0
 80a3b2a:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a3b2c:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a3b2e:	460d      	mov	r5, r1
 80a3b30:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a3b32:	f7ff fc35 	bl	80a33a0 <_ZN5spark12NetworkClass4fromEm>
 80a3b36:	6803      	ldr	r3, [r0, #0]
 80a3b38:	68db      	ldr	r3, [r3, #12]
 80a3b3a:	4798      	blx	r3
 80a3b3c:	b1f8      	cbz	r0, 80a3b7e <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a3b3e:	4628      	mov	r0, r5
 80a3b40:	f001 fd72 	bl	80a5628 <strlen>
 80a3b44:	2400      	movs	r4, #0
 80a3b46:	b281      	uxth	r1, r0
 80a3b48:	9400      	str	r4, [sp, #0]
 80a3b4a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a3b4c:	aa03      	add	r2, sp, #12
 80a3b4e:	4628      	mov	r0, r5
 80a3b50:	f7ff fa34 	bl	80a2fbc <inet_gethostbyname>
 80a3b54:	b990      	cbnz	r0, 80a3b7c <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a3b56:	a903      	add	r1, sp, #12
 80a3b58:	a808      	add	r0, sp, #32
 80a3b5a:	f7ff fb7d 	bl	80a3258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a3b5e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3b60:	ac0f      	add	r4, sp, #60	; 0x3c
 80a3b62:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a3b64:	4b07      	ldr	r3, [pc, #28]	; (80a3b84 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a3b66:	ad09      	add	r5, sp, #36	; 0x24
 80a3b68:	930e      	str	r3, [sp, #56]	; 0x38
 80a3b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3b6e:	682b      	ldr	r3, [r5, #0]
 80a3b70:	4642      	mov	r2, r8
 80a3b72:	7023      	strb	r3, [r4, #0]
 80a3b74:	a90e      	add	r1, sp, #56	; 0x38
 80a3b76:	4630      	mov	r0, r6
 80a3b78:	47b8      	blx	r7
 80a3b7a:	e000      	b.n	80a3b7e <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a3b7c:	4620      	mov	r0, r4
}
 80a3b7e:	b014      	add	sp, #80	; 0x50
 80a3b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3b84:	080a58d4 	.word	0x080a58d4

080a3b88 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a3b88:	b570      	push	{r4, r5, r6, lr}
 80a3b8a:	4604      	mov	r4, r0
 80a3b8c:	4606      	mov	r6, r0
 80a3b8e:	4b05      	ldr	r3, [pc, #20]	; (80a3ba4 <_ZN3UDP8remoteIPEv+0x1c>)
 80a3b90:	f101 0520 	add.w	r5, r1, #32
 80a3b94:	f844 3b04 	str.w	r3, [r4], #4
 80a3b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3b9c:	682b      	ldr	r3, [r5, #0]
 80a3b9e:	4630      	mov	r0, r6
 80a3ba0:	7023      	strb	r3, [r4, #0]
 80a3ba2:	bd70      	pop	{r4, r5, r6, pc}
 80a3ba4:	080a58d4 	.word	0x080a58d4

080a3ba8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3baa:	4694      	mov	ip, r2
 80a3bac:	468e      	mov	lr, r1
 80a3bae:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3bb0:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3bb2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3bb4:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a3bb6:	4a09      	ldr	r2, [pc, #36]	; (80a3bdc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a3bb8:	ac03      	add	r4, sp, #12
 80a3bba:	1d1d      	adds	r5, r3, #4
 80a3bbc:	9202      	str	r2, [sp, #8]
 80a3bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3bc2:	682b      	ldr	r3, [r5, #0]
 80a3bc4:	4662      	mov	r2, ip
 80a3bc6:	7023      	strb	r3, [r4, #0]
 80a3bc8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a3bcc:	4671      	mov	r1, lr
 80a3bce:	9300      	str	r3, [sp, #0]
 80a3bd0:	4630      	mov	r0, r6
 80a3bd2:	ab02      	add	r3, sp, #8
 80a3bd4:	47b8      	blx	r7
    }
 80a3bd6:	b009      	add	sp, #36	; 0x24
 80a3bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3bda:	bf00      	nop
 80a3bdc:	080a58d4 	.word	0x080a58d4

080a3be0 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a3be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3be2:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a3be4:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a3be6:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a3be8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a3bea:	4b0d      	ldr	r3, [pc, #52]	; (80a3c20 <_ZN3UDP9endPacketEv+0x40>)
 80a3bec:	ad03      	add	r5, sp, #12
 80a3bee:	f100 0620 	add.w	r6, r0, #32
 80a3bf2:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a3bf6:	9302      	str	r3, [sp, #8]
 80a3bf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a3bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3bfc:	6833      	ldr	r3, [r6, #0]
 80a3bfe:	4672      	mov	r2, lr
 80a3c00:	702b      	strb	r3, [r5, #0]
 80a3c02:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a3c04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a3c06:	9300      	str	r3, [sp, #0]
 80a3c08:	4620      	mov	r0, r4
 80a3c0a:	ab02      	add	r3, sp, #8
 80a3c0c:	47b8      	blx	r7
 80a3c0e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a3c10:	6823      	ldr	r3, [r4, #0]
 80a3c12:	4620      	mov	r0, r4
 80a3c14:	69db      	ldr	r3, [r3, #28]
 80a3c16:	4798      	blx	r3
    return result;
}
 80a3c18:	4628      	mov	r0, r5
 80a3c1a:	b009      	add	sp, #36	; 0x24
 80a3c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3c1e:	bf00      	nop
 80a3c20:	080a58d4 	.word	0x080a58d4

080a3c24 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a3c24:	b538      	push	{r3, r4, r5, lr}
 80a3c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3c2a:	6083      	str	r3, [r0, #8]
 80a3c2c:	4b0b      	ldr	r3, [pc, #44]	; (80a3c5c <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3c2e:	2500      	movs	r5, #0
 80a3c30:	f103 0208 	add.w	r2, r3, #8
 80a3c34:	336c      	adds	r3, #108	; 0x6c
 80a3c36:	6002      	str	r2, [r0, #0]
 80a3c38:	6103      	str	r3, [r0, #16]
 80a3c3a:	6045      	str	r5, [r0, #4]
 80a3c3c:	4604      	mov	r4, r0
 80a3c3e:	f7ff f8f5 	bl	80a2e2c <socket_handle_invalid>
 80a3c42:	6160      	str	r0, [r4, #20]
 80a3c44:	f104 001c 	add.w	r0, r4, #28
 80a3c48:	f7ff faf8 	bl	80a323c <_ZN9IPAddressC1Ev>
 80a3c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a3c50:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a3c52:	8725      	strh	r5, [r4, #56]	; 0x38
 80a3c54:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a3c56:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a3c58:	4620      	mov	r0, r4
 80a3c5a:	bd38      	pop	{r3, r4, r5, pc}
 80a3c5c:	080a5a48 	.word	0x080a5a48

080a3c60 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3c60:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a3c62:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3c66:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a3c68:	b123      	cbz	r3, 80a3c74 <_ZN3UDP13releaseBufferEv+0x14>
 80a3c6a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a3c6c:	b110      	cbz	r0, 80a3c74 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a3c6e:	2101      	movs	r1, #1
 80a3c70:	f000 fb57 	bl	80a4322 <_ZdlPvj>
    }
    _buffer = NULL;
 80a3c74:	2300      	movs	r3, #0
 80a3c76:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a3c78:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a3c7c:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3c7e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3c80:	8723      	strh	r3, [r4, #56]	; 0x38
 80a3c82:	bd10      	pop	{r4, pc}

080a3c84 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a3c84:	b570      	push	{r4, r5, r6, lr}
 80a3c86:	4604      	mov	r4, r0
 80a3c88:	4616      	mov	r6, r2
 80a3c8a:	460d      	mov	r5, r1
    releaseBuffer();
 80a3c8c:	f7ff ffe8 	bl	80a3c60 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a3c90:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a3c92:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a3c94:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a3c96:	b93e      	cbnz	r6, 80a3ca8 <_ZN3UDP9setBufferEjPh+0x24>
 80a3c98:	b135      	cbz	r5, 80a3ca8 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a3c9a:	4628      	mov	r0, r5
 80a3c9c:	f7fc f9ff 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a3ca0:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a3ca2:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a3ca4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a3ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3caa:	b103      	cbz	r3, 80a3cae <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a3cac:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a3cae:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a3cb0:	3000      	adds	r0, #0
 80a3cb2:	bf18      	it	ne
 80a3cb4:	2001      	movne	r0, #1
 80a3cb6:	bd70      	pop	{r4, r5, r6, pc}

080a3cb8 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3cba:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3cbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3cbe:	4605      	mov	r5, r0
 80a3cc0:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3cc2:	b91a      	cbnz	r2, 80a3ccc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a3cc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a3cc6:	b109      	cbz	r1, 80a3ccc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a3cc8:	f7ff ffdc 	bl	80a3c84 <_ZN3UDP9setBufferEjPh>
 80a3ccc:	f105 0620 	add.w	r6, r5, #32
 80a3cd0:	3404      	adds	r4, #4
 80a3cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3cd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3cd6:	6823      	ldr	r3, [r4, #0]
 80a3cd8:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3cda:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a3cdc:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3cde:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a3ce0:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a3ce2:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a3ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3ce6 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a3ce6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a3ce8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a3cea:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a3cec:	b91a      	cbnz	r2, 80a3cf6 <_ZN3UDP11parsePacketEm+0x10>
 80a3cee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a3cf0:	b109      	cbz	r1, 80a3cf6 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a3cf2:	f7ff ffc7 	bl	80a3c84 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a3cf6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3cf8:	2300      	movs	r3, #0
 80a3cfa:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3cfc:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a3cfe:	b141      	cbz	r1, 80a3d12 <_ZN3UDP11parsePacketEm+0x2c>
 80a3d00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a3d02:	b132      	cbz	r2, 80a3d12 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a3d04:	6820      	ldr	r0, [r4, #0]
 80a3d06:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a3d08:	4620      	mov	r0, r4
 80a3d0a:	47a8      	blx	r5
        if (result>0) {
 80a3d0c:	2800      	cmp	r0, #0
            _total = result;
 80a3d0e:	bfc8      	it	gt
 80a3d10:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a3d12:	6823      	ldr	r3, [r4, #0]
 80a3d14:	4620      	mov	r0, r4
}
 80a3d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a3d1a:	691b      	ldr	r3, [r3, #16]
 80a3d1c:	4718      	bx	r3

080a3d1e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3d1e:	4770      	bx	lr

080a3d20 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3d20:	7441      	strb	r1, [r0, #17]
 80a3d22:	4770      	bx	lr

080a3d24 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a3d24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a3d26:	7c00      	ldrb	r0, [r0, #16]
 80a3d28:	f7ff f900 	bl	80a2f2c <HAL_USART_Available_Data_For_Write>
}
 80a3d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d30:	bd08      	pop	{r3, pc}

080a3d32 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3d32:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3d34:	7c00      	ldrb	r0, [r0, #16]
 80a3d36:	f7ff f8d1 	bl	80a2edc <HAL_USART_Available_Data>
}
 80a3d3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d3e:	bd08      	pop	{r3, pc}

080a3d40 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3d40:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3d42:	7c00      	ldrb	r0, [r0, #16]
 80a3d44:	f7ff f8da 	bl	80a2efc <HAL_USART_Peek_Data>
}
 80a3d48:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3d4c:	bf28      	it	cs
 80a3d4e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3d52:	bd08      	pop	{r3, pc}

080a3d54 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3d54:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3d56:	7c00      	ldrb	r0, [r0, #16]
 80a3d58:	f7ff f8c8 	bl	80a2eec <HAL_USART_Read_Data>
}
 80a3d5c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3d60:	bf28      	it	cs
 80a3d62:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3d66:	bd08      	pop	{r3, pc}

080a3d68 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3d68:	7c00      	ldrb	r0, [r0, #16]
 80a3d6a:	f7ff b8cf 	b.w	80a2f0c <HAL_USART_Flush_Data>

080a3d6e <_ZN11USARTSerialD0Ev>:
 80a3d6e:	b510      	push	{r4, lr}
 80a3d70:	4604      	mov	r4, r0
 80a3d72:	2114      	movs	r1, #20
 80a3d74:	f000 fad5 	bl	80a4322 <_ZdlPvj>
 80a3d78:	4620      	mov	r0, r4
 80a3d7a:	bd10      	pop	{r4, pc}

080a3d7c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3d7c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3d7e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3d80:	4604      	mov	r4, r0
 80a3d82:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3d84:	b925      	cbnz	r5, 80a3d90 <_ZN11USARTSerial5writeEh+0x14>
 80a3d86:	7c00      	ldrb	r0, [r0, #16]
 80a3d88:	f7ff f8d0 	bl	80a2f2c <HAL_USART_Available_Data_For_Write>
 80a3d8c:	2800      	cmp	r0, #0
 80a3d8e:	dd05      	ble.n	80a3d9c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3d90:	4631      	mov	r1, r6
 80a3d92:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3d98:	f7ff b898 	b.w	80a2ecc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3d9c:	4628      	mov	r0, r5
 80a3d9e:	bd70      	pop	{r4, r5, r6, pc}

080a3da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3da0:	b510      	push	{r4, lr}
 80a3da2:	4604      	mov	r4, r0
 80a3da4:	4608      	mov	r0, r1
 80a3da6:	4611      	mov	r1, r2
 80a3da8:	2200      	movs	r2, #0
 80a3daa:	6062      	str	r2, [r4, #4]
 80a3dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3db0:	60a2      	str	r2, [r4, #8]
 80a3db2:	4a05      	ldr	r2, [pc, #20]	; (80a3dc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3db4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3db6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3db8:	2201      	movs	r2, #1
 80a3dba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3dbc:	461a      	mov	r2, r3
 80a3dbe:	f7ff f87d 	bl	80a2ebc <HAL_USART_Init>
}
 80a3dc2:	4620      	mov	r0, r4
 80a3dc4:	bd10      	pop	{r4, pc}
 80a3dc6:	bf00      	nop
 80a3dc8:	080a5ac0 	.word	0x080a5ac0

080a3dcc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3dcc:	7c00      	ldrb	r0, [r0, #16]
 80a3dce:	f7ff b8a5 	b.w	80a2f1c <HAL_USART_Is_Enabled>
	...

080a3dd4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3dd4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3dd6:	4d0c      	ldr	r5, [pc, #48]	; (80a3e08 <_Z22__fetch_global_Serial1v+0x34>)
 80a3dd8:	6829      	ldr	r1, [r5, #0]
 80a3dda:	f011 0401 	ands.w	r4, r1, #1
 80a3dde:	d111      	bne.n	80a3e04 <_Z22__fetch_global_Serial1v+0x30>
 80a3de0:	4628      	mov	r0, r5
 80a3de2:	f7fc f960 	bl	80a00a6 <__cxa_guard_acquire>
 80a3de6:	b168      	cbz	r0, 80a3e04 <_Z22__fetch_global_Serial1v+0x30>
 80a3de8:	4a08      	ldr	r2, [pc, #32]	; (80a3e0c <_Z22__fetch_global_Serial1v+0x38>)
 80a3dea:	4621      	mov	r1, r4
 80a3dec:	4b08      	ldr	r3, [pc, #32]	; (80a3e10 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3dee:	4809      	ldr	r0, [pc, #36]	; (80a3e14 <_Z22__fetch_global_Serial1v+0x40>)
 80a3df0:	f7ff ffd6 	bl	80a3da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3df4:	4628      	mov	r0, r5
 80a3df6:	f7fc f95b 	bl	80a00b0 <__cxa_guard_release>
 80a3dfa:	4a07      	ldr	r2, [pc, #28]	; (80a3e18 <_Z22__fetch_global_Serial1v+0x44>)
 80a3dfc:	4907      	ldr	r1, [pc, #28]	; (80a3e1c <_Z22__fetch_global_Serial1v+0x48>)
 80a3dfe:	4805      	ldr	r0, [pc, #20]	; (80a3e14 <_Z22__fetch_global_Serial1v+0x40>)
 80a3e00:	f000 fa8a 	bl	80a4318 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3e04:	4803      	ldr	r0, [pc, #12]	; (80a3e14 <_Z22__fetch_global_Serial1v+0x40>)
 80a3e06:	bd38      	pop	{r3, r4, r5, pc}
 80a3e08:	200002c8 	.word	0x200002c8
 80a3e0c:	200002cc 	.word	0x200002cc
 80a3e10:	20000244 	.word	0x20000244
 80a3e14:	20000230 	.word	0x20000230
 80a3e18:	20000088 	.word	0x20000088
 80a3e1c:	080a3d1f 	.word	0x080a3d1f

080a3e20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3e20:	7441      	strb	r1, [r0, #17]
 80a3e22:	4770      	bx	lr

080a3e24 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3e24:	4770      	bx	lr

080a3e26 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3e26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3e28:	2100      	movs	r1, #0
 80a3e2a:	7c00      	ldrb	r0, [r0, #16]
 80a3e2c:	f7ff f8a6 	bl	80a2f7c <HAL_USB_USART_Receive_Data>
}
 80a3e30:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3e34:	bf28      	it	cs
 80a3e36:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3e3a:	bd08      	pop	{r3, pc}

080a3e3c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3e3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3e3e:	2101      	movs	r1, #1
 80a3e40:	7c00      	ldrb	r0, [r0, #16]
 80a3e42:	f7ff f89b 	bl	80a2f7c <HAL_USB_USART_Receive_Data>
}
 80a3e46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3e4a:	bf28      	it	cs
 80a3e4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3e50:	bd08      	pop	{r3, pc}

080a3e52 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3e52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3e54:	7c00      	ldrb	r0, [r0, #16]
 80a3e56:	f7ff f889 	bl	80a2f6c <HAL_USB_USART_Available_Data_For_Write>
}
 80a3e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3e5e:	bd08      	pop	{r3, pc}

080a3e60 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3e60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3e62:	7c00      	ldrb	r0, [r0, #16]
 80a3e64:	f7ff f87a 	bl	80a2f5c <HAL_USB_USART_Available_Data>
}
 80a3e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3e6c:	bd08      	pop	{r3, pc}

080a3e6e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3e6e:	7c00      	ldrb	r0, [r0, #16]
 80a3e70:	f7ff b894 	b.w	80a2f9c <HAL_USB_USART_Flush_Data>

080a3e74 <_ZN9USBSerialD0Ev>:
 80a3e74:	b510      	push	{r4, lr}
 80a3e76:	4604      	mov	r4, r0
 80a3e78:	2114      	movs	r1, #20
 80a3e7a:	f000 fa52 	bl	80a4322 <_ZdlPvj>
 80a3e7e:	4620      	mov	r0, r4
 80a3e80:	bd10      	pop	{r4, pc}

080a3e82 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3e82:	b538      	push	{r3, r4, r5, lr}
 80a3e84:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3e86:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3e88:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3e8a:	f7ff f86f 	bl	80a2f6c <HAL_USB_USART_Available_Data_For_Write>
 80a3e8e:	2800      	cmp	r0, #0
 80a3e90:	dc01      	bgt.n	80a3e96 <_ZN9USBSerial5writeEh+0x14>
 80a3e92:	7c60      	ldrb	r0, [r4, #17]
 80a3e94:	b128      	cbz	r0, 80a3ea2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3e96:	4629      	mov	r1, r5
 80a3e98:	7c20      	ldrb	r0, [r4, #16]
 80a3e9a:	f7ff f877 	bl	80a2f8c <HAL_USB_USART_Send_Data>
 80a3e9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3ea2:	bd38      	pop	{r3, r4, r5, pc}

080a3ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3ea4:	b510      	push	{r4, lr}
 80a3ea6:	4604      	mov	r4, r0
 80a3ea8:	2300      	movs	r3, #0
 80a3eaa:	6063      	str	r3, [r4, #4]
 80a3eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3eb0:	60a3      	str	r3, [r4, #8]
 80a3eb2:	4b05      	ldr	r3, [pc, #20]	; (80a3ec8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3eb4:	4608      	mov	r0, r1
 80a3eb6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3eb8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3eba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3ebc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3ebe:	4611      	mov	r1, r2
 80a3ec0:	f7ff f83c 	bl	80a2f3c <HAL_USB_USART_Init>
}
 80a3ec4:	4620      	mov	r0, r4
 80a3ec6:	bd10      	pop	{r4, pc}
 80a3ec8:	080a5af0 	.word	0x080a5af0

080a3ecc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3ecc:	2200      	movs	r2, #0
 80a3ece:	7c00      	ldrb	r0, [r0, #16]
 80a3ed0:	f7ff b83c 	b.w	80a2f4c <HAL_USB_USART_Begin>

080a3ed4 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a3ed4:	7c00      	ldrb	r0, [r0, #16]
 80a3ed6:	f7ff b869 	b.w	80a2fac <HAL_USB_USART_Is_Enabled>

080a3eda <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a3eda:	f7ff bffb 	b.w	80a3ed4 <_ZN9USBSerial9isEnabledEv>
	...

080a3ee0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3ee0:	b510      	push	{r4, lr}
 80a3ee2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3ee4:	2214      	movs	r2, #20
 80a3ee6:	2100      	movs	r1, #0
 80a3ee8:	f001 fb29 	bl	80a553e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3eec:	4b05      	ldr	r3, [pc, #20]	; (80a3f04 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3eee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3ef0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3ef2:	4b05      	ldr	r3, [pc, #20]	; (80a3f08 <_Z19acquireSerialBufferv+0x28>)
 80a3ef4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3ef6:	f240 1301 	movw	r3, #257	; 0x101
 80a3efa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3efc:	2381      	movs	r3, #129	; 0x81
 80a3efe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3f00:	bd10      	pop	{r4, pc}
 80a3f02:	bf00      	nop
 80a3f04:	200003d5 	.word	0x200003d5
 80a3f08:	20000354 	.word	0x20000354

080a3f0c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3f0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3f0e:	4d0e      	ldr	r5, [pc, #56]	; (80a3f48 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3f10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3f12:	a801      	add	r0, sp, #4
 80a3f14:	f7ff ffe4 	bl	80a3ee0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3f18:	6829      	ldr	r1, [r5, #0]
 80a3f1a:	f011 0401 	ands.w	r4, r1, #1
 80a3f1e:	d110      	bne.n	80a3f42 <_Z16_fetch_usbserialv+0x36>
 80a3f20:	4628      	mov	r0, r5
 80a3f22:	f7fc f8c0 	bl	80a00a6 <__cxa_guard_acquire>
 80a3f26:	b160      	cbz	r0, 80a3f42 <_Z16_fetch_usbserialv+0x36>
 80a3f28:	aa01      	add	r2, sp, #4
 80a3f2a:	4621      	mov	r1, r4
 80a3f2c:	4807      	ldr	r0, [pc, #28]	; (80a3f4c <_Z16_fetch_usbserialv+0x40>)
 80a3f2e:	f7ff ffb9 	bl	80a3ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3f32:	4628      	mov	r0, r5
 80a3f34:	f7fc f8bc 	bl	80a00b0 <__cxa_guard_release>
 80a3f38:	4a05      	ldr	r2, [pc, #20]	; (80a3f50 <_Z16_fetch_usbserialv+0x44>)
 80a3f3a:	4906      	ldr	r1, [pc, #24]	; (80a3f54 <_Z16_fetch_usbserialv+0x48>)
 80a3f3c:	4803      	ldr	r0, [pc, #12]	; (80a3f4c <_Z16_fetch_usbserialv+0x40>)
 80a3f3e:	f000 f9eb 	bl	80a4318 <__aeabi_atexit>
	return _usbserial;
}
 80a3f42:	4802      	ldr	r0, [pc, #8]	; (80a3f4c <_Z16_fetch_usbserialv+0x40>)
 80a3f44:	b007      	add	sp, #28
 80a3f46:	bd30      	pop	{r4, r5, pc}
 80a3f48:	20000350 	.word	0x20000350
 80a3f4c:	200004d8 	.word	0x200004d8
 80a3f50:	20000088 	.word	0x20000088
 80a3f54:	080a3e25 	.word	0x080a3e25

080a3f58 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3f58:	b510      	push	{r4, lr}
 80a3f5a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3f5c:	2214      	movs	r2, #20
 80a3f5e:	2100      	movs	r1, #0
 80a3f60:	f001 faed 	bl	80a553e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3f64:	4b05      	ldr	r3, [pc, #20]	; (80a3f7c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3f66:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3f68:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3f6a:	4b05      	ldr	r3, [pc, #20]	; (80a3f80 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3f6c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3f6e:	f240 1301 	movw	r3, #257	; 0x101
 80a3f72:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3f74:	2381      	movs	r3, #129	; 0x81
 80a3f76:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3f78:	bd10      	pop	{r4, pc}
 80a3f7a:	bf00      	nop
 80a3f7c:	20000588 	.word	0x20000588
 80a3f80:	200004f0 	.word	0x200004f0

080a3f84 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3f84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3f86:	4c0e      	ldr	r4, [pc, #56]	; (80a3fc0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3f88:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3f8a:	a801      	add	r0, sp, #4
 80a3f8c:	f7ff ffe4 	bl	80a3f58 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3f90:	6823      	ldr	r3, [r4, #0]
 80a3f92:	07db      	lsls	r3, r3, #31
 80a3f94:	d410      	bmi.n	80a3fb8 <_Z17_fetch_usbserial1v+0x34>
 80a3f96:	4620      	mov	r0, r4
 80a3f98:	f7fc f885 	bl	80a00a6 <__cxa_guard_acquire>
 80a3f9c:	b160      	cbz	r0, 80a3fb8 <_Z17_fetch_usbserial1v+0x34>
 80a3f9e:	aa01      	add	r2, sp, #4
 80a3fa0:	2101      	movs	r1, #1
 80a3fa2:	4808      	ldr	r0, [pc, #32]	; (80a3fc4 <_Z17_fetch_usbserial1v+0x40>)
 80a3fa4:	f7ff ff7e 	bl	80a3ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3fa8:	4620      	mov	r0, r4
 80a3faa:	f7fc f881 	bl	80a00b0 <__cxa_guard_release>
 80a3fae:	4a06      	ldr	r2, [pc, #24]	; (80a3fc8 <_Z17_fetch_usbserial1v+0x44>)
 80a3fb0:	4906      	ldr	r1, [pc, #24]	; (80a3fcc <_Z17_fetch_usbserial1v+0x48>)
 80a3fb2:	4804      	ldr	r0, [pc, #16]	; (80a3fc4 <_Z17_fetch_usbserial1v+0x40>)
 80a3fb4:	f000 f9b0 	bl	80a4318 <__aeabi_atexit>
  return _usbserial1;
}
 80a3fb8:	4802      	ldr	r0, [pc, #8]	; (80a3fc4 <_Z17_fetch_usbserial1v+0x40>)
 80a3fba:	b006      	add	sp, #24
 80a3fbc:	bd10      	pop	{r4, pc}
 80a3fbe:	bf00      	nop
 80a3fc0:	200004ec 	.word	0x200004ec
 80a3fc4:	20000574 	.word	0x20000574
 80a3fc8:	20000088 	.word	0x20000088
 80a3fcc:	080a3e25 	.word	0x080a3e25

080a3fd0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3fd0:	2200      	movs	r2, #0
 80a3fd2:	4611      	mov	r1, r2
 80a3fd4:	6840      	ldr	r0, [r0, #4]
 80a3fd6:	f7ff b84d 	b.w	80a3074 <network_ready>

080a3fda <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3fdc:	4616      	mov	r6, r2
 80a3fde:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3fe0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3fe2:	460f      	mov	r7, r1
 80a3fe4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3fe6:	2100      	movs	r1, #0
 80a3fe8:	a803      	add	r0, sp, #12
 80a3fea:	f001 faa8 	bl	80a553e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3fee:	4630      	mov	r0, r6
 80a3ff0:	f001 fb1a 	bl	80a5628 <strlen>
 80a3ff4:	2500      	movs	r5, #0
 80a3ff6:	9500      	str	r5, [sp, #0]
 80a3ff8:	b281      	uxth	r1, r0
 80a3ffa:	687b      	ldr	r3, [r7, #4]
 80a3ffc:	aa03      	add	r2, sp, #12
 80a3ffe:	4630      	mov	r0, r6
 80a4000:	f7fe ffdc 	bl	80a2fbc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4004:	b120      	cbz	r0, 80a4010 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4006:	4629      	mov	r1, r5
 80a4008:	4620      	mov	r0, r4
 80a400a:	f7ff f937 	bl	80a327c <_ZN9IPAddressC1Em>
 80a400e:	e003      	b.n	80a4018 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a4010:	a903      	add	r1, sp, #12
 80a4012:	4620      	mov	r0, r4
 80a4014:	f7ff f920 	bl	80a3258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4018:	4620      	mov	r0, r4
 80a401a:	b009      	add	sp, #36	; 0x24
 80a401c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a401e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a401e:	2200      	movs	r2, #0
 80a4020:	4611      	mov	r1, r2
 80a4022:	6840      	ldr	r0, [r0, #4]
 80a4024:	f7ff b846 	b.w	80a30b4 <network_listening>

080a4028 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4028:	2200      	movs	r2, #0
 80a402a:	4611      	mov	r1, r2
 80a402c:	6840      	ldr	r0, [r0, #4]
 80a402e:	f7ff b851 	b.w	80a30d4 <network_get_listen_timeout>

080a4032 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a4032:	2200      	movs	r2, #0
 80a4034:	6840      	ldr	r0, [r0, #4]
 80a4036:	f7ff b845 	b.w	80a30c4 <network_set_listen_timeout>

080a403a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a403a:	2200      	movs	r2, #0
 80a403c:	f081 0101 	eor.w	r1, r1, #1
 80a4040:	6840      	ldr	r0, [r0, #4]
 80a4042:	f7ff b82f 	b.w	80a30a4 <network_listen>

080a4046 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a4046:	2300      	movs	r3, #0
 80a4048:	461a      	mov	r2, r3
 80a404a:	4619      	mov	r1, r3
 80a404c:	6840      	ldr	r0, [r0, #4]
 80a404e:	f7ff b821 	b.w	80a3094 <network_off>

080a4052 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a4052:	2300      	movs	r3, #0
 80a4054:	461a      	mov	r2, r3
 80a4056:	4619      	mov	r1, r3
 80a4058:	6840      	ldr	r0, [r0, #4]
 80a405a:	f7ff b813 	b.w	80a3084 <network_on>

080a405e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a405e:	2200      	movs	r2, #0
 80a4060:	4611      	mov	r1, r2
 80a4062:	6840      	ldr	r0, [r0, #4]
 80a4064:	f7fe bff6 	b.w	80a3054 <network_connecting>

080a4068 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4068:	2200      	movs	r2, #0
 80a406a:	2102      	movs	r1, #2
 80a406c:	6840      	ldr	r0, [r0, #4]
 80a406e:	f7fe bff9 	b.w	80a3064 <network_disconnect>

080a4072 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a4072:	2300      	movs	r3, #0
 80a4074:	461a      	mov	r2, r3
 80a4076:	6840      	ldr	r0, [r0, #4]
 80a4078:	f7fe bfe4 	b.w	80a3044 <network_connect>

080a407c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a407c:	4b02      	ldr	r3, [pc, #8]	; (80a4088 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a407e:	2204      	movs	r2, #4
 80a4080:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a4082:	4a02      	ldr	r2, [pc, #8]	; (80a408c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4084:	601a      	str	r2, [r3, #0]
 80a4086:	4770      	bx	lr
 80a4088:	2000068c 	.word	0x2000068c
 80a408c:	080a5b20 	.word	0x080a5b20

080a4090 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a4090:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a4092:	4b14      	ldr	r3, [pc, #80]	; (80a40e4 <serialEventRun+0x54>)
 80a4094:	b133      	cbz	r3, 80a40a4 <serialEventRun+0x14>
 80a4096:	f7ff ff39 	bl	80a3f0c <_Z16_fetch_usbserialv>
 80a409a:	6803      	ldr	r3, [r0, #0]
 80a409c:	691b      	ldr	r3, [r3, #16]
 80a409e:	4798      	blx	r3
 80a40a0:	2800      	cmp	r0, #0
 80a40a2:	dc16      	bgt.n	80a40d2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a40a4:	4b10      	ldr	r3, [pc, #64]	; (80a40e8 <serialEventRun+0x58>)
 80a40a6:	b133      	cbz	r3, 80a40b6 <serialEventRun+0x26>
 80a40a8:	f7ff fe94 	bl	80a3dd4 <_Z22__fetch_global_Serial1v>
 80a40ac:	6803      	ldr	r3, [r0, #0]
 80a40ae:	691b      	ldr	r3, [r3, #16]
 80a40b0:	4798      	blx	r3
 80a40b2:	2800      	cmp	r0, #0
 80a40b4:	dc10      	bgt.n	80a40d8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a40b6:	4b0d      	ldr	r3, [pc, #52]	; (80a40ec <serialEventRun+0x5c>)
 80a40b8:	b10b      	cbz	r3, 80a40be <serialEventRun+0x2e>
 80a40ba:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a40be:	4b0c      	ldr	r3, [pc, #48]	; (80a40f0 <serialEventRun+0x60>)
 80a40c0:	b17b      	cbz	r3, 80a40e2 <serialEventRun+0x52>
 80a40c2:	f7ff ff5f 	bl	80a3f84 <_Z17_fetch_usbserial1v>
 80a40c6:	6803      	ldr	r3, [r0, #0]
 80a40c8:	691b      	ldr	r3, [r3, #16]
 80a40ca:	4798      	blx	r3
 80a40cc:	2800      	cmp	r0, #0
 80a40ce:	dc06      	bgt.n	80a40de <serialEventRun+0x4e>
 80a40d0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a40d2:	f3af 8000 	nop.w
 80a40d6:	e7e5      	b.n	80a40a4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a40d8:	f3af 8000 	nop.w
 80a40dc:	e7eb      	b.n	80a40b6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a40de:	f3af 8000 	nop.w
 80a40e2:	bd08      	pop	{r3, pc}
	...

080a40f4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a40f4:	b508      	push	{r3, lr}
	serialEventRun();
 80a40f6:	f7ff ffcb 	bl	80a4090 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a40fa:	f7fe fded 	bl	80a2cd8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a40fe:	4b01      	ldr	r3, [pc, #4]	; (80a4104 <_post_loop+0x10>)
 80a4100:	6018      	str	r0, [r3, #0]
 80a4102:	bd08      	pop	{r3, pc}
 80a4104:	2000069c 	.word	0x2000069c

080a4108 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4108:	4802      	ldr	r0, [pc, #8]	; (80a4114 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a410a:	4a03      	ldr	r2, [pc, #12]	; (80a4118 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a410c:	4903      	ldr	r1, [pc, #12]	; (80a411c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a410e:	1a12      	subs	r2, r2, r0
 80a4110:	f001 ba0a 	b.w	80a5528 <memcpy>
 80a4114:	40024000 	.word	0x40024000
 80a4118:	40024004 	.word	0x40024004
 80a411c:	080a5c00 	.word	0x080a5c00

080a4120 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4120:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4122:	2300      	movs	r3, #0
 80a4124:	9300      	str	r3, [sp, #0]
 80a4126:	461a      	mov	r2, r3
 80a4128:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a412c:	f7fe ff70 	bl	80a3010 <system_ctrl_set_result>
}
 80a4130:	b003      	add	sp, #12
 80a4132:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4138 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a4138:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a413a:	8843      	ldrh	r3, [r0, #2]
 80a413c:	2b0a      	cmp	r3, #10
 80a413e:	d008      	beq.n	80a4152 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4140:	2b50      	cmp	r3, #80	; 0x50
 80a4142:	d109      	bne.n	80a4158 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a4144:	4b09      	ldr	r3, [pc, #36]	; (80a416c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4146:	681b      	ldr	r3, [r3, #0]
 80a4148:	b13b      	cbz	r3, 80a415a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a414a:	b003      	add	sp, #12
 80a414c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a4150:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a4152:	f7ff ffe5 	bl	80a4120 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a4156:	e006      	b.n	80a4166 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4158:	2300      	movs	r3, #0
 80a415a:	9300      	str	r3, [sp, #0]
 80a415c:	461a      	mov	r2, r3
 80a415e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4162:	f7fe ff55 	bl	80a3010 <system_ctrl_set_result>
        break;
    }
}
 80a4166:	b003      	add	sp, #12
 80a4168:	f85d fb04 	ldr.w	pc, [sp], #4
 80a416c:	20000694 	.word	0x20000694

080a4170 <module_user_init_hook>:

void module_user_init_hook()
{
 80a4170:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4172:	4c10      	ldr	r4, [pc, #64]	; (80a41b4 <module_user_init_hook+0x44>)
 80a4174:	4d10      	ldr	r5, [pc, #64]	; (80a41b8 <module_user_init_hook+0x48>)
 80a4176:	6823      	ldr	r3, [r4, #0]
 80a4178:	42ab      	cmp	r3, r5
 80a417a:	4b10      	ldr	r3, [pc, #64]	; (80a41bc <module_user_init_hook+0x4c>)
 80a417c:	bf0c      	ite	eq
 80a417e:	2201      	moveq	r2, #1
 80a4180:	2200      	movne	r2, #0
 80a4182:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4184:	d002      	beq.n	80a418c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a4186:	f7ff ffbf 	bl	80a4108 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a418a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a418c:	f7fe fd94 	bl	80a2cb8 <HAL_RNG_GetRandomNumber>
 80a4190:	4604      	mov	r4, r0
    srand(seed);
 80a4192:	f001 f9dd 	bl	80a5550 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4196:	4b0a      	ldr	r3, [pc, #40]	; (80a41c0 <module_user_init_hook+0x50>)
 80a4198:	b113      	cbz	r3, 80a41a0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a419a:	4620      	mov	r0, r4
 80a419c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a41a0:	2100      	movs	r1, #0
 80a41a2:	4807      	ldr	r0, [pc, #28]	; (80a41c0 <module_user_init_hook+0x50>)
 80a41a4:	f7fe ff3e 	bl	80a3024 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a41a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a41ac:	2100      	movs	r1, #0
 80a41ae:	4805      	ldr	r0, [pc, #20]	; (80a41c4 <module_user_init_hook+0x54>)
 80a41b0:	f7fe bf24 	b.w	80a2ffc <system_ctrl_set_app_request_handler>
 80a41b4:	40024000 	.word	0x40024000
 80a41b8:	9a271c1e 	.word	0x9a271c1e
 80a41bc:	20000698 	.word	0x20000698
 80a41c0:	00000000 	.word	0x00000000
 80a41c4:	080a4139 	.word	0x080a4139

080a41c8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a41c8:	b510      	push	{r4, lr}
 80a41ca:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a41cc:	480f      	ldr	r0, [pc, #60]	; (80a420c <pinAvailable+0x44>)
 80a41ce:	f7ff fb0d 	bl	80a37ec <_ZN8SPIClass9isEnabledEv>
 80a41d2:	b128      	cbz	r0, 80a41e0 <pinAvailable+0x18>
 80a41d4:	f1a4 030d 	sub.w	r3, r4, #13
 80a41d8:	2b02      	cmp	r3, #2
 80a41da:	d801      	bhi.n	80a41e0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a41dc:	2000      	movs	r0, #0
 80a41de:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a41e0:	f000 f840 	bl	80a4264 <_Z19__fetch_global_Wirev>
 80a41e4:	f7ff f80d 	bl	80a3202 <_ZN7TwoWire9isEnabledEv>
 80a41e8:	b108      	cbz	r0, 80a41ee <pinAvailable+0x26>
 80a41ea:	2c01      	cmp	r4, #1
 80a41ec:	d9f6      	bls.n	80a41dc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a41ee:	f7ff fdf1 	bl	80a3dd4 <_Z22__fetch_global_Serial1v>
 80a41f2:	f7ff fdeb 	bl	80a3dcc <_ZN11USARTSerial9isEnabledEv>
 80a41f6:	b118      	cbz	r0, 80a4200 <pinAvailable+0x38>
 80a41f8:	f1a4 0312 	sub.w	r3, r4, #18
 80a41fc:	2b01      	cmp	r3, #1
 80a41fe:	d9ed      	bls.n	80a41dc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a4200:	2c17      	cmp	r4, #23
 80a4202:	bf8c      	ite	hi
 80a4204:	2000      	movhi	r0, #0
 80a4206:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4208:	bd10      	pop	{r4, pc}
 80a420a:	bf00      	nop
 80a420c:	200006d0 	.word	0x200006d0

080a4210 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4210:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a4212:	b538      	push	{r3, r4, r5, lr}
 80a4214:	4604      	mov	r4, r0
 80a4216:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4218:	d80a      	bhi.n	80a4230 <pinMode+0x20>
 80a421a:	29ff      	cmp	r1, #255	; 0xff
 80a421c:	d008      	beq.n	80a4230 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a421e:	f7ff ffd3 	bl	80a41c8 <pinAvailable>
 80a4222:	b128      	cbz	r0, 80a4230 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4224:	4629      	mov	r1, r5
 80a4226:	4620      	mov	r0, r4
}
 80a4228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a422c:	f7fe bd64 	b.w	80a2cf8 <HAL_Pin_Mode>
 80a4230:	bd38      	pop	{r3, r4, r5, pc}

080a4232 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a4232:	b538      	push	{r3, r4, r5, lr}
 80a4234:	4604      	mov	r4, r0
 80a4236:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4238:	f7fe fd66 	bl	80a2d08 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a423c:	28ff      	cmp	r0, #255	; 0xff
 80a423e:	d010      	beq.n	80a4262 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a4240:	2806      	cmp	r0, #6
 80a4242:	d804      	bhi.n	80a424e <digitalWrite+0x1c>
 80a4244:	234d      	movs	r3, #77	; 0x4d
 80a4246:	fa23 f000 	lsr.w	r0, r3, r0
 80a424a:	07c3      	lsls	r3, r0, #31
 80a424c:	d409      	bmi.n	80a4262 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a424e:	4620      	mov	r0, r4
 80a4250:	f7ff ffba 	bl	80a41c8 <pinAvailable>
 80a4254:	b128      	cbz	r0, 80a4262 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4256:	4629      	mov	r1, r5
 80a4258:	4620      	mov	r0, r4
}
 80a425a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a425e:	f7fe bd5b 	b.w	80a2d18 <HAL_GPIO_Write>
 80a4262:	bd38      	pop	{r3, r4, r5, pc}

080a4264 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a4264:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a4266:	4d0b      	ldr	r5, [pc, #44]	; (80a4294 <_Z19__fetch_global_Wirev+0x30>)
 80a4268:	6829      	ldr	r1, [r5, #0]
 80a426a:	f011 0401 	ands.w	r4, r1, #1
 80a426e:	d10f      	bne.n	80a4290 <_Z19__fetch_global_Wirev+0x2c>
 80a4270:	4628      	mov	r0, r5
 80a4272:	f7fb ff18 	bl	80a00a6 <__cxa_guard_acquire>
 80a4276:	b158      	cbz	r0, 80a4290 <_Z19__fetch_global_Wirev+0x2c>
 80a4278:	4621      	mov	r1, r4
 80a427a:	4807      	ldr	r0, [pc, #28]	; (80a4298 <_Z19__fetch_global_Wirev+0x34>)
 80a427c:	f7fe ff92 	bl	80a31a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a4280:	4628      	mov	r0, r5
 80a4282:	f7fb ff15 	bl	80a00b0 <__cxa_guard_release>
 80a4286:	4a05      	ldr	r2, [pc, #20]	; (80a429c <_Z19__fetch_global_Wirev+0x38>)
 80a4288:	4905      	ldr	r1, [pc, #20]	; (80a42a0 <_Z19__fetch_global_Wirev+0x3c>)
 80a428a:	4803      	ldr	r0, [pc, #12]	; (80a4298 <_Z19__fetch_global_Wirev+0x34>)
 80a428c:	f000 f844 	bl	80a4318 <__aeabi_atexit>
	return wire;
}
 80a4290:	4801      	ldr	r0, [pc, #4]	; (80a4298 <_Z19__fetch_global_Wirev+0x34>)
 80a4292:	bd38      	pop	{r3, r4, r5, pc}
 80a4294:	200006a0 	.word	0x200006a0
 80a4298:	200006a4 	.word	0x200006a4
 80a429c:	20000088 	.word	0x20000088
 80a42a0:	080a314d 	.word	0x080a314d

080a42a4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a42a4:	b513      	push	{r0, r1, r4, lr}
 80a42a6:	4c08      	ldr	r4, [pc, #32]	; (80a42c8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a42a8:	2300      	movs	r3, #0
 80a42aa:	461a      	mov	r2, r3
 80a42ac:	4619      	mov	r1, r3
 80a42ae:	9300      	str	r3, [sp, #0]
 80a42b0:	4620      	mov	r0, r4
 80a42b2:	f7fe fff9 	bl	80a32a8 <_ZN9IPAddressC1Ehhhh>
 80a42b6:	4620      	mov	r0, r4
 80a42b8:	4a04      	ldr	r2, [pc, #16]	; (80a42cc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a42ba:	4905      	ldr	r1, [pc, #20]	; (80a42d0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a42bc:	b002      	add	sp, #8
 80a42be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a42c2:	f000 b829 	b.w	80a4318 <__aeabi_atexit>
 80a42c6:	bf00      	nop
 80a42c8:	200006b8 	.word	0x200006b8
 80a42cc:	20000088 	.word	0x20000088
 80a42d0:	080a00b7 	.word	0x080a00b7

080a42d4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a42d4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a42d6:	4c0c      	ldr	r4, [pc, #48]	; (80a4308 <_GLOBAL__sub_I_SPI+0x34>)
 80a42d8:	4e0c      	ldr	r6, [pc, #48]	; (80a430c <_GLOBAL__sub_I_SPI+0x38>)
 80a42da:	4d0d      	ldr	r5, [pc, #52]	; (80a4310 <_GLOBAL__sub_I_SPI+0x3c>)
 80a42dc:	2100      	movs	r1, #0
 80a42de:	4620      	mov	r0, r4
 80a42e0:	f7ff fa04 	bl	80a36ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a42e4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a42e6:	4c0b      	ldr	r4, [pc, #44]	; (80a4314 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a42e8:	4632      	mov	r2, r6
 80a42ea:	4629      	mov	r1, r5
 80a42ec:	f000 f814 	bl	80a4318 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a42f0:	2101      	movs	r1, #1
 80a42f2:	4620      	mov	r0, r4
 80a42f4:	f7ff f9fa 	bl	80a36ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a42f8:	4632      	mov	r2, r6
 80a42fa:	4629      	mov	r1, r5
 80a42fc:	4620      	mov	r0, r4
 80a42fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a4302:	f000 b809 	b.w	80a4318 <__aeabi_atexit>
 80a4306:	bf00      	nop
 80a4308:	200006d0 	.word	0x200006d0
 80a430c:	20000088 	.word	0x20000088
 80a4310:	080a36dd 	.word	0x080a36dd
 80a4314:	200006e0 	.word	0x200006e0

080a4318 <__aeabi_atexit>:
 80a4318:	460b      	mov	r3, r1
 80a431a:	4601      	mov	r1, r0
 80a431c:	4618      	mov	r0, r3
 80a431e:	f001 b8f5 	b.w	80a550c <__cxa_atexit>

080a4322 <_ZdlPvj>:
 80a4322:	f7fb bebe 	b.w	80a00a2 <_ZdlPv>
	...

080a4328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4328:	4b24      	ldr	r3, [pc, #144]	; (80a43bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a432a:	681a      	ldr	r2, [r3, #0]
 80a432c:	07d0      	lsls	r0, r2, #31
 80a432e:	bf5c      	itt	pl
 80a4330:	2201      	movpl	r2, #1
 80a4332:	601a      	strpl	r2, [r3, #0]
 80a4334:	4b22      	ldr	r3, [pc, #136]	; (80a43c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4336:	681a      	ldr	r2, [r3, #0]
 80a4338:	07d1      	lsls	r1, r2, #31
 80a433a:	bf5c      	itt	pl
 80a433c:	2201      	movpl	r2, #1
 80a433e:	601a      	strpl	r2, [r3, #0]
 80a4340:	4b20      	ldr	r3, [pc, #128]	; (80a43c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4342:	681a      	ldr	r2, [r3, #0]
 80a4344:	07d2      	lsls	r2, r2, #31
 80a4346:	bf5c      	itt	pl
 80a4348:	2201      	movpl	r2, #1
 80a434a:	601a      	strpl	r2, [r3, #0]
 80a434c:	4b1e      	ldr	r3, [pc, #120]	; (80a43c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a434e:	681a      	ldr	r2, [r3, #0]
 80a4350:	07d0      	lsls	r0, r2, #31
 80a4352:	bf5c      	itt	pl
 80a4354:	2201      	movpl	r2, #1
 80a4356:	601a      	strpl	r2, [r3, #0]
 80a4358:	4b1c      	ldr	r3, [pc, #112]	; (80a43cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a435a:	681a      	ldr	r2, [r3, #0]
 80a435c:	07d1      	lsls	r1, r2, #31
 80a435e:	bf5c      	itt	pl
 80a4360:	2201      	movpl	r2, #1
 80a4362:	601a      	strpl	r2, [r3, #0]
 80a4364:	4b1a      	ldr	r3, [pc, #104]	; (80a43d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4366:	681a      	ldr	r2, [r3, #0]
 80a4368:	07d2      	lsls	r2, r2, #31
 80a436a:	bf5c      	itt	pl
 80a436c:	2201      	movpl	r2, #1
 80a436e:	601a      	strpl	r2, [r3, #0]
 80a4370:	4b18      	ldr	r3, [pc, #96]	; (80a43d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4372:	681a      	ldr	r2, [r3, #0]
 80a4374:	07d0      	lsls	r0, r2, #31
 80a4376:	bf5c      	itt	pl
 80a4378:	2201      	movpl	r2, #1
 80a437a:	601a      	strpl	r2, [r3, #0]
 80a437c:	4b16      	ldr	r3, [pc, #88]	; (80a43d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a437e:	681a      	ldr	r2, [r3, #0]
 80a4380:	07d1      	lsls	r1, r2, #31
 80a4382:	bf5c      	itt	pl
 80a4384:	2201      	movpl	r2, #1
 80a4386:	601a      	strpl	r2, [r3, #0]
 80a4388:	4b14      	ldr	r3, [pc, #80]	; (80a43dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a438a:	681a      	ldr	r2, [r3, #0]
 80a438c:	07d2      	lsls	r2, r2, #31
 80a438e:	bf5c      	itt	pl
 80a4390:	2201      	movpl	r2, #1
 80a4392:	601a      	strpl	r2, [r3, #0]
 80a4394:	4b12      	ldr	r3, [pc, #72]	; (80a43e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4396:	681a      	ldr	r2, [r3, #0]
 80a4398:	07d0      	lsls	r0, r2, #31
 80a439a:	bf5c      	itt	pl
 80a439c:	2201      	movpl	r2, #1
 80a439e:	601a      	strpl	r2, [r3, #0]
 80a43a0:	4b10      	ldr	r3, [pc, #64]	; (80a43e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a43a2:	681a      	ldr	r2, [r3, #0]
 80a43a4:	07d1      	lsls	r1, r2, #31
 80a43a6:	bf5c      	itt	pl
 80a43a8:	2201      	movpl	r2, #1
 80a43aa:	601a      	strpl	r2, [r3, #0]
 80a43ac:	4b0e      	ldr	r3, [pc, #56]	; (80a43e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a43ae:	681a      	ldr	r2, [r3, #0]
 80a43b0:	07d2      	lsls	r2, r2, #31
 80a43b2:	bf5c      	itt	pl
 80a43b4:	2201      	movpl	r2, #1
 80a43b6:	601a      	strpl	r2, [r3, #0]
 80a43b8:	4770      	bx	lr
 80a43ba:	bf00      	nop
 80a43bc:	2000071c 	.word	0x2000071c
 80a43c0:	20000718 	.word	0x20000718
 80a43c4:	20000714 	.word	0x20000714
 80a43c8:	20000710 	.word	0x20000710
 80a43cc:	2000070c 	.word	0x2000070c
 80a43d0:	20000708 	.word	0x20000708
 80a43d4:	20000704 	.word	0x20000704
 80a43d8:	20000700 	.word	0x20000700
 80a43dc:	200006fc 	.word	0x200006fc
 80a43e0:	200006f8 	.word	0x200006f8
 80a43e4:	200006f4 	.word	0x200006f4
 80a43e8:	200006f0 	.word	0x200006f0

080a43ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a43ec:	4b18      	ldr	r3, [pc, #96]	; (80a4450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a43ee:	681a      	ldr	r2, [r3, #0]
 80a43f0:	07d1      	lsls	r1, r2, #31
 80a43f2:	bf5c      	itt	pl
 80a43f4:	2201      	movpl	r2, #1
 80a43f6:	601a      	strpl	r2, [r3, #0]
 80a43f8:	4b16      	ldr	r3, [pc, #88]	; (80a4454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a43fa:	681a      	ldr	r2, [r3, #0]
 80a43fc:	07d2      	lsls	r2, r2, #31
 80a43fe:	bf5c      	itt	pl
 80a4400:	2201      	movpl	r2, #1
 80a4402:	601a      	strpl	r2, [r3, #0]
 80a4404:	4b14      	ldr	r3, [pc, #80]	; (80a4458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4406:	681a      	ldr	r2, [r3, #0]
 80a4408:	07d0      	lsls	r0, r2, #31
 80a440a:	bf5c      	itt	pl
 80a440c:	2201      	movpl	r2, #1
 80a440e:	601a      	strpl	r2, [r3, #0]
 80a4410:	4b12      	ldr	r3, [pc, #72]	; (80a445c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4412:	681a      	ldr	r2, [r3, #0]
 80a4414:	07d1      	lsls	r1, r2, #31
 80a4416:	bf5c      	itt	pl
 80a4418:	2201      	movpl	r2, #1
 80a441a:	601a      	strpl	r2, [r3, #0]
 80a441c:	4b10      	ldr	r3, [pc, #64]	; (80a4460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a441e:	681a      	ldr	r2, [r3, #0]
 80a4420:	07d2      	lsls	r2, r2, #31
 80a4422:	bf5c      	itt	pl
 80a4424:	2201      	movpl	r2, #1
 80a4426:	601a      	strpl	r2, [r3, #0]
 80a4428:	4b0e      	ldr	r3, [pc, #56]	; (80a4464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a442a:	681a      	ldr	r2, [r3, #0]
 80a442c:	07d0      	lsls	r0, r2, #31
 80a442e:	bf5c      	itt	pl
 80a4430:	2201      	movpl	r2, #1
 80a4432:	601a      	strpl	r2, [r3, #0]
 80a4434:	4b0c      	ldr	r3, [pc, #48]	; (80a4468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4436:	681a      	ldr	r2, [r3, #0]
 80a4438:	07d1      	lsls	r1, r2, #31
 80a443a:	bf5c      	itt	pl
 80a443c:	2201      	movpl	r2, #1
 80a443e:	601a      	strpl	r2, [r3, #0]
 80a4440:	4b0a      	ldr	r3, [pc, #40]	; (80a446c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4442:	681a      	ldr	r2, [r3, #0]
 80a4444:	07d2      	lsls	r2, r2, #31
 80a4446:	bf5c      	itt	pl
 80a4448:	2201      	movpl	r2, #1
 80a444a:	601a      	strpl	r2, [r3, #0]
 80a444c:	4770      	bx	lr
 80a444e:	bf00      	nop
 80a4450:	2000073c 	.word	0x2000073c
 80a4454:	20000738 	.word	0x20000738
 80a4458:	20000734 	.word	0x20000734
 80a445c:	20000730 	.word	0x20000730
 80a4460:	2000072c 	.word	0x2000072c
 80a4464:	20000728 	.word	0x20000728
 80a4468:	20000724 	.word	0x20000724
 80a446c:	20000720 	.word	0x20000720

080a4470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4470:	4b18      	ldr	r3, [pc, #96]	; (80a44d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4472:	681a      	ldr	r2, [r3, #0]
 80a4474:	07d1      	lsls	r1, r2, #31
 80a4476:	bf5c      	itt	pl
 80a4478:	2201      	movpl	r2, #1
 80a447a:	601a      	strpl	r2, [r3, #0]
 80a447c:	4b16      	ldr	r3, [pc, #88]	; (80a44d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a447e:	681a      	ldr	r2, [r3, #0]
 80a4480:	07d2      	lsls	r2, r2, #31
 80a4482:	bf5c      	itt	pl
 80a4484:	2201      	movpl	r2, #1
 80a4486:	601a      	strpl	r2, [r3, #0]
 80a4488:	4b14      	ldr	r3, [pc, #80]	; (80a44dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a448a:	681a      	ldr	r2, [r3, #0]
 80a448c:	07d0      	lsls	r0, r2, #31
 80a448e:	bf5c      	itt	pl
 80a4490:	2201      	movpl	r2, #1
 80a4492:	601a      	strpl	r2, [r3, #0]
 80a4494:	4b12      	ldr	r3, [pc, #72]	; (80a44e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4496:	681a      	ldr	r2, [r3, #0]
 80a4498:	07d1      	lsls	r1, r2, #31
 80a449a:	bf5c      	itt	pl
 80a449c:	2201      	movpl	r2, #1
 80a449e:	601a      	strpl	r2, [r3, #0]
 80a44a0:	4b10      	ldr	r3, [pc, #64]	; (80a44e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a44a2:	681a      	ldr	r2, [r3, #0]
 80a44a4:	07d2      	lsls	r2, r2, #31
 80a44a6:	bf5c      	itt	pl
 80a44a8:	2201      	movpl	r2, #1
 80a44aa:	601a      	strpl	r2, [r3, #0]
 80a44ac:	4b0e      	ldr	r3, [pc, #56]	; (80a44e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a44ae:	681a      	ldr	r2, [r3, #0]
 80a44b0:	07d0      	lsls	r0, r2, #31
 80a44b2:	bf5c      	itt	pl
 80a44b4:	2201      	movpl	r2, #1
 80a44b6:	601a      	strpl	r2, [r3, #0]
 80a44b8:	4b0c      	ldr	r3, [pc, #48]	; (80a44ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a44ba:	681a      	ldr	r2, [r3, #0]
 80a44bc:	07d1      	lsls	r1, r2, #31
 80a44be:	bf5c      	itt	pl
 80a44c0:	2201      	movpl	r2, #1
 80a44c2:	601a      	strpl	r2, [r3, #0]
 80a44c4:	4b0a      	ldr	r3, [pc, #40]	; (80a44f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a44c6:	681a      	ldr	r2, [r3, #0]
 80a44c8:	07d2      	lsls	r2, r2, #31
 80a44ca:	bf5c      	itt	pl
 80a44cc:	2201      	movpl	r2, #1
 80a44ce:	601a      	strpl	r2, [r3, #0]
 80a44d0:	4770      	bx	lr
 80a44d2:	bf00      	nop
 80a44d4:	2000075c 	.word	0x2000075c
 80a44d8:	20000758 	.word	0x20000758
 80a44dc:	20000754 	.word	0x20000754
 80a44e0:	20000750 	.word	0x20000750
 80a44e4:	2000074c 	.word	0x2000074c
 80a44e8:	20000748 	.word	0x20000748
 80a44ec:	20000744 	.word	0x20000744
 80a44f0:	20000740 	.word	0x20000740

080a44f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a44f4:	4b24      	ldr	r3, [pc, #144]	; (80a4588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a44f6:	681a      	ldr	r2, [r3, #0]
 80a44f8:	07d0      	lsls	r0, r2, #31
 80a44fa:	bf5c      	itt	pl
 80a44fc:	2201      	movpl	r2, #1
 80a44fe:	601a      	strpl	r2, [r3, #0]
 80a4500:	4b22      	ldr	r3, [pc, #136]	; (80a458c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4502:	681a      	ldr	r2, [r3, #0]
 80a4504:	07d1      	lsls	r1, r2, #31
 80a4506:	bf5c      	itt	pl
 80a4508:	2201      	movpl	r2, #1
 80a450a:	601a      	strpl	r2, [r3, #0]
 80a450c:	4b20      	ldr	r3, [pc, #128]	; (80a4590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a450e:	681a      	ldr	r2, [r3, #0]
 80a4510:	07d2      	lsls	r2, r2, #31
 80a4512:	bf5c      	itt	pl
 80a4514:	2201      	movpl	r2, #1
 80a4516:	601a      	strpl	r2, [r3, #0]
 80a4518:	4b1e      	ldr	r3, [pc, #120]	; (80a4594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a451a:	681a      	ldr	r2, [r3, #0]
 80a451c:	07d0      	lsls	r0, r2, #31
 80a451e:	bf5c      	itt	pl
 80a4520:	2201      	movpl	r2, #1
 80a4522:	601a      	strpl	r2, [r3, #0]
 80a4524:	4b1c      	ldr	r3, [pc, #112]	; (80a4598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4526:	681a      	ldr	r2, [r3, #0]
 80a4528:	07d1      	lsls	r1, r2, #31
 80a452a:	bf5c      	itt	pl
 80a452c:	2201      	movpl	r2, #1
 80a452e:	601a      	strpl	r2, [r3, #0]
 80a4530:	4b1a      	ldr	r3, [pc, #104]	; (80a459c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4532:	681a      	ldr	r2, [r3, #0]
 80a4534:	07d2      	lsls	r2, r2, #31
 80a4536:	bf5c      	itt	pl
 80a4538:	2201      	movpl	r2, #1
 80a453a:	601a      	strpl	r2, [r3, #0]
 80a453c:	4b18      	ldr	r3, [pc, #96]	; (80a45a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a453e:	681a      	ldr	r2, [r3, #0]
 80a4540:	07d0      	lsls	r0, r2, #31
 80a4542:	bf5c      	itt	pl
 80a4544:	2201      	movpl	r2, #1
 80a4546:	601a      	strpl	r2, [r3, #0]
 80a4548:	4b16      	ldr	r3, [pc, #88]	; (80a45a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a454a:	681a      	ldr	r2, [r3, #0]
 80a454c:	07d1      	lsls	r1, r2, #31
 80a454e:	bf5c      	itt	pl
 80a4550:	2201      	movpl	r2, #1
 80a4552:	601a      	strpl	r2, [r3, #0]
 80a4554:	4b14      	ldr	r3, [pc, #80]	; (80a45a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4556:	681a      	ldr	r2, [r3, #0]
 80a4558:	07d2      	lsls	r2, r2, #31
 80a455a:	bf5c      	itt	pl
 80a455c:	2201      	movpl	r2, #1
 80a455e:	601a      	strpl	r2, [r3, #0]
 80a4560:	4b12      	ldr	r3, [pc, #72]	; (80a45ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a4562:	681a      	ldr	r2, [r3, #0]
 80a4564:	07d0      	lsls	r0, r2, #31
 80a4566:	bf5c      	itt	pl
 80a4568:	2201      	movpl	r2, #1
 80a456a:	601a      	strpl	r2, [r3, #0]
 80a456c:	4b10      	ldr	r3, [pc, #64]	; (80a45b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a456e:	681a      	ldr	r2, [r3, #0]
 80a4570:	07d1      	lsls	r1, r2, #31
 80a4572:	bf5c      	itt	pl
 80a4574:	2201      	movpl	r2, #1
 80a4576:	601a      	strpl	r2, [r3, #0]
 80a4578:	4b0e      	ldr	r3, [pc, #56]	; (80a45b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a457a:	681a      	ldr	r2, [r3, #0]
 80a457c:	07d2      	lsls	r2, r2, #31
 80a457e:	bf5c      	itt	pl
 80a4580:	2201      	movpl	r2, #1
 80a4582:	601a      	strpl	r2, [r3, #0]
 80a4584:	4770      	bx	lr
 80a4586:	bf00      	nop
 80a4588:	2000078c 	.word	0x2000078c
 80a458c:	20000788 	.word	0x20000788
 80a4590:	20000784 	.word	0x20000784
 80a4594:	20000780 	.word	0x20000780
 80a4598:	2000077c 	.word	0x2000077c
 80a459c:	20000778 	.word	0x20000778
 80a45a0:	20000774 	.word	0x20000774
 80a45a4:	20000770 	.word	0x20000770
 80a45a8:	2000076c 	.word	0x2000076c
 80a45ac:	20000768 	.word	0x20000768
 80a45b0:	20000764 	.word	0x20000764
 80a45b4:	20000760 	.word	0x20000760

080a45b8 <__aeabi_drsub>:
 80a45b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a45bc:	e002      	b.n	80a45c4 <__adddf3>
 80a45be:	bf00      	nop

080a45c0 <__aeabi_dsub>:
 80a45c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a45c4 <__adddf3>:
 80a45c4:	b530      	push	{r4, r5, lr}
 80a45c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a45ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a45ce:	ea94 0f05 	teq	r4, r5
 80a45d2:	bf08      	it	eq
 80a45d4:	ea90 0f02 	teqeq	r0, r2
 80a45d8:	bf1f      	itttt	ne
 80a45da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a45de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a45e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a45e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a45ea:	f000 80e2 	beq.w	80a47b2 <__adddf3+0x1ee>
 80a45ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a45f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a45f6:	bfb8      	it	lt
 80a45f8:	426d      	neglt	r5, r5
 80a45fa:	dd0c      	ble.n	80a4616 <__adddf3+0x52>
 80a45fc:	442c      	add	r4, r5
 80a45fe:	ea80 0202 	eor.w	r2, r0, r2
 80a4602:	ea81 0303 	eor.w	r3, r1, r3
 80a4606:	ea82 0000 	eor.w	r0, r2, r0
 80a460a:	ea83 0101 	eor.w	r1, r3, r1
 80a460e:	ea80 0202 	eor.w	r2, r0, r2
 80a4612:	ea81 0303 	eor.w	r3, r1, r3
 80a4616:	2d36      	cmp	r5, #54	; 0x36
 80a4618:	bf88      	it	hi
 80a461a:	bd30      	pophi	{r4, r5, pc}
 80a461c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4620:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4624:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4628:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a462c:	d002      	beq.n	80a4634 <__adddf3+0x70>
 80a462e:	4240      	negs	r0, r0
 80a4630:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4634:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4638:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a463c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4640:	d002      	beq.n	80a4648 <__adddf3+0x84>
 80a4642:	4252      	negs	r2, r2
 80a4644:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4648:	ea94 0f05 	teq	r4, r5
 80a464c:	f000 80a7 	beq.w	80a479e <__adddf3+0x1da>
 80a4650:	f1a4 0401 	sub.w	r4, r4, #1
 80a4654:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4658:	db0d      	blt.n	80a4676 <__adddf3+0xb2>
 80a465a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a465e:	fa22 f205 	lsr.w	r2, r2, r5
 80a4662:	1880      	adds	r0, r0, r2
 80a4664:	f141 0100 	adc.w	r1, r1, #0
 80a4668:	fa03 f20e 	lsl.w	r2, r3, lr
 80a466c:	1880      	adds	r0, r0, r2
 80a466e:	fa43 f305 	asr.w	r3, r3, r5
 80a4672:	4159      	adcs	r1, r3
 80a4674:	e00e      	b.n	80a4694 <__adddf3+0xd0>
 80a4676:	f1a5 0520 	sub.w	r5, r5, #32
 80a467a:	f10e 0e20 	add.w	lr, lr, #32
 80a467e:	2a01      	cmp	r2, #1
 80a4680:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4684:	bf28      	it	cs
 80a4686:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a468a:	fa43 f305 	asr.w	r3, r3, r5
 80a468e:	18c0      	adds	r0, r0, r3
 80a4690:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4694:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4698:	d507      	bpl.n	80a46aa <__adddf3+0xe6>
 80a469a:	f04f 0e00 	mov.w	lr, #0
 80a469e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a46a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a46a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a46aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a46ae:	d31b      	bcc.n	80a46e8 <__adddf3+0x124>
 80a46b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a46b4:	d30c      	bcc.n	80a46d0 <__adddf3+0x10c>
 80a46b6:	0849      	lsrs	r1, r1, #1
 80a46b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a46bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a46c0:	f104 0401 	add.w	r4, r4, #1
 80a46c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a46c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a46cc:	f080 809a 	bcs.w	80a4804 <__adddf3+0x240>
 80a46d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a46d4:	bf08      	it	eq
 80a46d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a46da:	f150 0000 	adcs.w	r0, r0, #0
 80a46de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a46e2:	ea41 0105 	orr.w	r1, r1, r5
 80a46e6:	bd30      	pop	{r4, r5, pc}
 80a46e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a46ec:	4140      	adcs	r0, r0
 80a46ee:	eb41 0101 	adc.w	r1, r1, r1
 80a46f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a46f6:	f1a4 0401 	sub.w	r4, r4, #1
 80a46fa:	d1e9      	bne.n	80a46d0 <__adddf3+0x10c>
 80a46fc:	f091 0f00 	teq	r1, #0
 80a4700:	bf04      	itt	eq
 80a4702:	4601      	moveq	r1, r0
 80a4704:	2000      	moveq	r0, #0
 80a4706:	fab1 f381 	clz	r3, r1
 80a470a:	bf08      	it	eq
 80a470c:	3320      	addeq	r3, #32
 80a470e:	f1a3 030b 	sub.w	r3, r3, #11
 80a4712:	f1b3 0220 	subs.w	r2, r3, #32
 80a4716:	da0c      	bge.n	80a4732 <__adddf3+0x16e>
 80a4718:	320c      	adds	r2, #12
 80a471a:	dd08      	ble.n	80a472e <__adddf3+0x16a>
 80a471c:	f102 0c14 	add.w	ip, r2, #20
 80a4720:	f1c2 020c 	rsb	r2, r2, #12
 80a4724:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4728:	fa21 f102 	lsr.w	r1, r1, r2
 80a472c:	e00c      	b.n	80a4748 <__adddf3+0x184>
 80a472e:	f102 0214 	add.w	r2, r2, #20
 80a4732:	bfd8      	it	le
 80a4734:	f1c2 0c20 	rsble	ip, r2, #32
 80a4738:	fa01 f102 	lsl.w	r1, r1, r2
 80a473c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4740:	bfdc      	itt	le
 80a4742:	ea41 010c 	orrle.w	r1, r1, ip
 80a4746:	4090      	lslle	r0, r2
 80a4748:	1ae4      	subs	r4, r4, r3
 80a474a:	bfa2      	ittt	ge
 80a474c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4750:	4329      	orrge	r1, r5
 80a4752:	bd30      	popge	{r4, r5, pc}
 80a4754:	ea6f 0404 	mvn.w	r4, r4
 80a4758:	3c1f      	subs	r4, #31
 80a475a:	da1c      	bge.n	80a4796 <__adddf3+0x1d2>
 80a475c:	340c      	adds	r4, #12
 80a475e:	dc0e      	bgt.n	80a477e <__adddf3+0x1ba>
 80a4760:	f104 0414 	add.w	r4, r4, #20
 80a4764:	f1c4 0220 	rsb	r2, r4, #32
 80a4768:	fa20 f004 	lsr.w	r0, r0, r4
 80a476c:	fa01 f302 	lsl.w	r3, r1, r2
 80a4770:	ea40 0003 	orr.w	r0, r0, r3
 80a4774:	fa21 f304 	lsr.w	r3, r1, r4
 80a4778:	ea45 0103 	orr.w	r1, r5, r3
 80a477c:	bd30      	pop	{r4, r5, pc}
 80a477e:	f1c4 040c 	rsb	r4, r4, #12
 80a4782:	f1c4 0220 	rsb	r2, r4, #32
 80a4786:	fa20 f002 	lsr.w	r0, r0, r2
 80a478a:	fa01 f304 	lsl.w	r3, r1, r4
 80a478e:	ea40 0003 	orr.w	r0, r0, r3
 80a4792:	4629      	mov	r1, r5
 80a4794:	bd30      	pop	{r4, r5, pc}
 80a4796:	fa21 f004 	lsr.w	r0, r1, r4
 80a479a:	4629      	mov	r1, r5
 80a479c:	bd30      	pop	{r4, r5, pc}
 80a479e:	f094 0f00 	teq	r4, #0
 80a47a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a47a6:	bf06      	itte	eq
 80a47a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a47ac:	3401      	addeq	r4, #1
 80a47ae:	3d01      	subne	r5, #1
 80a47b0:	e74e      	b.n	80a4650 <__adddf3+0x8c>
 80a47b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a47b6:	bf18      	it	ne
 80a47b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a47bc:	d029      	beq.n	80a4812 <__adddf3+0x24e>
 80a47be:	ea94 0f05 	teq	r4, r5
 80a47c2:	bf08      	it	eq
 80a47c4:	ea90 0f02 	teqeq	r0, r2
 80a47c8:	d005      	beq.n	80a47d6 <__adddf3+0x212>
 80a47ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80a47ce:	bf04      	itt	eq
 80a47d0:	4619      	moveq	r1, r3
 80a47d2:	4610      	moveq	r0, r2
 80a47d4:	bd30      	pop	{r4, r5, pc}
 80a47d6:	ea91 0f03 	teq	r1, r3
 80a47da:	bf1e      	ittt	ne
 80a47dc:	2100      	movne	r1, #0
 80a47de:	2000      	movne	r0, #0
 80a47e0:	bd30      	popne	{r4, r5, pc}
 80a47e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a47e6:	d105      	bne.n	80a47f4 <__adddf3+0x230>
 80a47e8:	0040      	lsls	r0, r0, #1
 80a47ea:	4149      	adcs	r1, r1
 80a47ec:	bf28      	it	cs
 80a47ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a47f2:	bd30      	pop	{r4, r5, pc}
 80a47f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a47f8:	bf3c      	itt	cc
 80a47fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a47fe:	bd30      	popcc	{r4, r5, pc}
 80a4800:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4804:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a480c:	f04f 0000 	mov.w	r0, #0
 80a4810:	bd30      	pop	{r4, r5, pc}
 80a4812:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4816:	bf1a      	itte	ne
 80a4818:	4619      	movne	r1, r3
 80a481a:	4610      	movne	r0, r2
 80a481c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4820:	bf1c      	itt	ne
 80a4822:	460b      	movne	r3, r1
 80a4824:	4602      	movne	r2, r0
 80a4826:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a482a:	bf06      	itte	eq
 80a482c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4830:	ea91 0f03 	teqeq	r1, r3
 80a4834:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4838:	bd30      	pop	{r4, r5, pc}
 80a483a:	bf00      	nop

080a483c <__aeabi_ui2d>:
 80a483c:	f090 0f00 	teq	r0, #0
 80a4840:	bf04      	itt	eq
 80a4842:	2100      	moveq	r1, #0
 80a4844:	4770      	bxeq	lr
 80a4846:	b530      	push	{r4, r5, lr}
 80a4848:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a484c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4850:	f04f 0500 	mov.w	r5, #0
 80a4854:	f04f 0100 	mov.w	r1, #0
 80a4858:	e750      	b.n	80a46fc <__adddf3+0x138>
 80a485a:	bf00      	nop

080a485c <__aeabi_i2d>:
 80a485c:	f090 0f00 	teq	r0, #0
 80a4860:	bf04      	itt	eq
 80a4862:	2100      	moveq	r1, #0
 80a4864:	4770      	bxeq	lr
 80a4866:	b530      	push	{r4, r5, lr}
 80a4868:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a486c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4870:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4874:	bf48      	it	mi
 80a4876:	4240      	negmi	r0, r0
 80a4878:	f04f 0100 	mov.w	r1, #0
 80a487c:	e73e      	b.n	80a46fc <__adddf3+0x138>
 80a487e:	bf00      	nop

080a4880 <__aeabi_f2d>:
 80a4880:	0042      	lsls	r2, r0, #1
 80a4882:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4886:	ea4f 0131 	mov.w	r1, r1, rrx
 80a488a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a488e:	bf1f      	itttt	ne
 80a4890:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4894:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4898:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a489c:	4770      	bxne	lr
 80a489e:	f092 0f00 	teq	r2, #0
 80a48a2:	bf14      	ite	ne
 80a48a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a48a8:	4770      	bxeq	lr
 80a48aa:	b530      	push	{r4, r5, lr}
 80a48ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a48b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a48b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a48b8:	e720      	b.n	80a46fc <__adddf3+0x138>
 80a48ba:	bf00      	nop

080a48bc <__aeabi_ul2d>:
 80a48bc:	ea50 0201 	orrs.w	r2, r0, r1
 80a48c0:	bf08      	it	eq
 80a48c2:	4770      	bxeq	lr
 80a48c4:	b530      	push	{r4, r5, lr}
 80a48c6:	f04f 0500 	mov.w	r5, #0
 80a48ca:	e00a      	b.n	80a48e2 <__aeabi_l2d+0x16>

080a48cc <__aeabi_l2d>:
 80a48cc:	ea50 0201 	orrs.w	r2, r0, r1
 80a48d0:	bf08      	it	eq
 80a48d2:	4770      	bxeq	lr
 80a48d4:	b530      	push	{r4, r5, lr}
 80a48d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a48da:	d502      	bpl.n	80a48e2 <__aeabi_l2d+0x16>
 80a48dc:	4240      	negs	r0, r0
 80a48de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a48e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a48e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a48ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a48ee:	f43f aedc 	beq.w	80a46aa <__adddf3+0xe6>
 80a48f2:	f04f 0203 	mov.w	r2, #3
 80a48f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a48fa:	bf18      	it	ne
 80a48fc:	3203      	addne	r2, #3
 80a48fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4902:	bf18      	it	ne
 80a4904:	3203      	addne	r2, #3
 80a4906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a490a:	f1c2 0320 	rsb	r3, r2, #32
 80a490e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4912:	fa20 f002 	lsr.w	r0, r0, r2
 80a4916:	fa01 fe03 	lsl.w	lr, r1, r3
 80a491a:	ea40 000e 	orr.w	r0, r0, lr
 80a491e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4922:	4414      	add	r4, r2
 80a4924:	e6c1      	b.n	80a46aa <__adddf3+0xe6>
 80a4926:	bf00      	nop

080a4928 <__aeabi_dmul>:
 80a4928:	b570      	push	{r4, r5, r6, lr}
 80a492a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a492e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4936:	bf1d      	ittte	ne
 80a4938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a493c:	ea94 0f0c 	teqne	r4, ip
 80a4940:	ea95 0f0c 	teqne	r5, ip
 80a4944:	f000 f8de 	bleq	80a4b04 <__aeabi_dmul+0x1dc>
 80a4948:	442c      	add	r4, r5
 80a494a:	ea81 0603 	eor.w	r6, r1, r3
 80a494e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a495a:	bf18      	it	ne
 80a495c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4968:	d038      	beq.n	80a49dc <__aeabi_dmul+0xb4>
 80a496a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a496e:	f04f 0500 	mov.w	r5, #0
 80a4972:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a497a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a497e:	f04f 0600 	mov.w	r6, #0
 80a4982:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4986:	f09c 0f00 	teq	ip, #0
 80a498a:	bf18      	it	ne
 80a498c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a499c:	d204      	bcs.n	80a49a8 <__aeabi_dmul+0x80>
 80a499e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a49a2:	416d      	adcs	r5, r5
 80a49a4:	eb46 0606 	adc.w	r6, r6, r6
 80a49a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a49ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a49b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a49b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a49b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a49bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a49c0:	bf88      	it	hi
 80a49c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a49c6:	d81e      	bhi.n	80a4a06 <__aeabi_dmul+0xde>
 80a49c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a49cc:	bf08      	it	eq
 80a49ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a49d2:	f150 0000 	adcs.w	r0, r0, #0
 80a49d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a49da:	bd70      	pop	{r4, r5, r6, pc}
 80a49dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a49e0:	ea46 0101 	orr.w	r1, r6, r1
 80a49e4:	ea40 0002 	orr.w	r0, r0, r2
 80a49e8:	ea81 0103 	eor.w	r1, r1, r3
 80a49ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a49f0:	bfc2      	ittt	gt
 80a49f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a49f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a49fa:	bd70      	popgt	{r4, r5, r6, pc}
 80a49fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4a00:	f04f 0e00 	mov.w	lr, #0
 80a4a04:	3c01      	subs	r4, #1
 80a4a06:	f300 80ab 	bgt.w	80a4b60 <__aeabi_dmul+0x238>
 80a4a0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4a0e:	bfde      	ittt	le
 80a4a10:	2000      	movle	r0, #0
 80a4a12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4a16:	bd70      	pople	{r4, r5, r6, pc}
 80a4a18:	f1c4 0400 	rsb	r4, r4, #0
 80a4a1c:	3c20      	subs	r4, #32
 80a4a1e:	da35      	bge.n	80a4a8c <__aeabi_dmul+0x164>
 80a4a20:	340c      	adds	r4, #12
 80a4a22:	dc1b      	bgt.n	80a4a5c <__aeabi_dmul+0x134>
 80a4a24:	f104 0414 	add.w	r4, r4, #20
 80a4a28:	f1c4 0520 	rsb	r5, r4, #32
 80a4a2c:	fa00 f305 	lsl.w	r3, r0, r5
 80a4a30:	fa20 f004 	lsr.w	r0, r0, r4
 80a4a34:	fa01 f205 	lsl.w	r2, r1, r5
 80a4a38:	ea40 0002 	orr.w	r0, r0, r2
 80a4a3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4a48:	fa21 f604 	lsr.w	r6, r1, r4
 80a4a4c:	eb42 0106 	adc.w	r1, r2, r6
 80a4a50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4a54:	bf08      	it	eq
 80a4a56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4a5a:	bd70      	pop	{r4, r5, r6, pc}
 80a4a5c:	f1c4 040c 	rsb	r4, r4, #12
 80a4a60:	f1c4 0520 	rsb	r5, r4, #32
 80a4a64:	fa00 f304 	lsl.w	r3, r0, r4
 80a4a68:	fa20 f005 	lsr.w	r0, r0, r5
 80a4a6c:	fa01 f204 	lsl.w	r2, r1, r4
 80a4a70:	ea40 0002 	orr.w	r0, r0, r2
 80a4a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4a78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4a7c:	f141 0100 	adc.w	r1, r1, #0
 80a4a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4a84:	bf08      	it	eq
 80a4a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4a8a:	bd70      	pop	{r4, r5, r6, pc}
 80a4a8c:	f1c4 0520 	rsb	r5, r4, #32
 80a4a90:	fa00 f205 	lsl.w	r2, r0, r5
 80a4a94:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4a98:	fa20 f304 	lsr.w	r3, r0, r4
 80a4a9c:	fa01 f205 	lsl.w	r2, r1, r5
 80a4aa0:	ea43 0302 	orr.w	r3, r3, r2
 80a4aa4:	fa21 f004 	lsr.w	r0, r1, r4
 80a4aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4aac:	fa21 f204 	lsr.w	r2, r1, r4
 80a4ab0:	ea20 0002 	bic.w	r0, r0, r2
 80a4ab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4abc:	bf08      	it	eq
 80a4abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4ac2:	bd70      	pop	{r4, r5, r6, pc}
 80a4ac4:	f094 0f00 	teq	r4, #0
 80a4ac8:	d10f      	bne.n	80a4aea <__aeabi_dmul+0x1c2>
 80a4aca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4ace:	0040      	lsls	r0, r0, #1
 80a4ad0:	eb41 0101 	adc.w	r1, r1, r1
 80a4ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4ad8:	bf08      	it	eq
 80a4ada:	3c01      	subeq	r4, #1
 80a4adc:	d0f7      	beq.n	80a4ace <__aeabi_dmul+0x1a6>
 80a4ade:	ea41 0106 	orr.w	r1, r1, r6
 80a4ae2:	f095 0f00 	teq	r5, #0
 80a4ae6:	bf18      	it	ne
 80a4ae8:	4770      	bxne	lr
 80a4aea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4aee:	0052      	lsls	r2, r2, #1
 80a4af0:	eb43 0303 	adc.w	r3, r3, r3
 80a4af4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4af8:	bf08      	it	eq
 80a4afa:	3d01      	subeq	r5, #1
 80a4afc:	d0f7      	beq.n	80a4aee <__aeabi_dmul+0x1c6>
 80a4afe:	ea43 0306 	orr.w	r3, r3, r6
 80a4b02:	4770      	bx	lr
 80a4b04:	ea94 0f0c 	teq	r4, ip
 80a4b08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4b0c:	bf18      	it	ne
 80a4b0e:	ea95 0f0c 	teqne	r5, ip
 80a4b12:	d00c      	beq.n	80a4b2e <__aeabi_dmul+0x206>
 80a4b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4b18:	bf18      	it	ne
 80a4b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4b1e:	d1d1      	bne.n	80a4ac4 <__aeabi_dmul+0x19c>
 80a4b20:	ea81 0103 	eor.w	r1, r1, r3
 80a4b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4b28:	f04f 0000 	mov.w	r0, #0
 80a4b2c:	bd70      	pop	{r4, r5, r6, pc}
 80a4b2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4b32:	bf06      	itte	eq
 80a4b34:	4610      	moveq	r0, r2
 80a4b36:	4619      	moveq	r1, r3
 80a4b38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4b3c:	d019      	beq.n	80a4b72 <__aeabi_dmul+0x24a>
 80a4b3e:	ea94 0f0c 	teq	r4, ip
 80a4b42:	d102      	bne.n	80a4b4a <__aeabi_dmul+0x222>
 80a4b44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4b48:	d113      	bne.n	80a4b72 <__aeabi_dmul+0x24a>
 80a4b4a:	ea95 0f0c 	teq	r5, ip
 80a4b4e:	d105      	bne.n	80a4b5c <__aeabi_dmul+0x234>
 80a4b50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4b54:	bf1c      	itt	ne
 80a4b56:	4610      	movne	r0, r2
 80a4b58:	4619      	movne	r1, r3
 80a4b5a:	d10a      	bne.n	80a4b72 <__aeabi_dmul+0x24a>
 80a4b5c:	ea81 0103 	eor.w	r1, r1, r3
 80a4b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4b64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4b68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4b6c:	f04f 0000 	mov.w	r0, #0
 80a4b70:	bd70      	pop	{r4, r5, r6, pc}
 80a4b72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4b76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4b7a:	bd70      	pop	{r4, r5, r6, pc}

080a4b7c <__aeabi_ddiv>:
 80a4b7c:	b570      	push	{r4, r5, r6, lr}
 80a4b7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4b82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4b86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4b8a:	bf1d      	ittte	ne
 80a4b8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4b90:	ea94 0f0c 	teqne	r4, ip
 80a4b94:	ea95 0f0c 	teqne	r5, ip
 80a4b98:	f000 f8a7 	bleq	80a4cea <__aeabi_ddiv+0x16e>
 80a4b9c:	eba4 0405 	sub.w	r4, r4, r5
 80a4ba0:	ea81 0e03 	eor.w	lr, r1, r3
 80a4ba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4ba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4bac:	f000 8088 	beq.w	80a4cc0 <__aeabi_ddiv+0x144>
 80a4bb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4bb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4bb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4bbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4bc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4bc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4bc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4bcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4bd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4bd4:	429d      	cmp	r5, r3
 80a4bd6:	bf08      	it	eq
 80a4bd8:	4296      	cmpeq	r6, r2
 80a4bda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4bde:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4be2:	d202      	bcs.n	80a4bea <__aeabi_ddiv+0x6e>
 80a4be4:	085b      	lsrs	r3, r3, #1
 80a4be6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4bea:	1ab6      	subs	r6, r6, r2
 80a4bec:	eb65 0503 	sbc.w	r5, r5, r3
 80a4bf0:	085b      	lsrs	r3, r3, #1
 80a4bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4bf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4bfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4bfe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4c02:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4c06:	bf22      	ittt	cs
 80a4c08:	1ab6      	subcs	r6, r6, r2
 80a4c0a:	4675      	movcs	r5, lr
 80a4c0c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4c10:	085b      	lsrs	r3, r3, #1
 80a4c12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4c16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4c1e:	bf22      	ittt	cs
 80a4c20:	1ab6      	subcs	r6, r6, r2
 80a4c22:	4675      	movcs	r5, lr
 80a4c24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4c28:	085b      	lsrs	r3, r3, #1
 80a4c2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4c2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4c32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4c36:	bf22      	ittt	cs
 80a4c38:	1ab6      	subcs	r6, r6, r2
 80a4c3a:	4675      	movcs	r5, lr
 80a4c3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4c40:	085b      	lsrs	r3, r3, #1
 80a4c42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4c46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4c4e:	bf22      	ittt	cs
 80a4c50:	1ab6      	subcs	r6, r6, r2
 80a4c52:	4675      	movcs	r5, lr
 80a4c54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4c58:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4c5c:	d018      	beq.n	80a4c90 <__aeabi_ddiv+0x114>
 80a4c5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4c62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4c66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4c6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4c6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4c72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4c76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4c7a:	d1c0      	bne.n	80a4bfe <__aeabi_ddiv+0x82>
 80a4c7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4c80:	d10b      	bne.n	80a4c9a <__aeabi_ddiv+0x11e>
 80a4c82:	ea41 0100 	orr.w	r1, r1, r0
 80a4c86:	f04f 0000 	mov.w	r0, #0
 80a4c8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4c8e:	e7b6      	b.n	80a4bfe <__aeabi_ddiv+0x82>
 80a4c90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4c94:	bf04      	itt	eq
 80a4c96:	4301      	orreq	r1, r0
 80a4c98:	2000      	moveq	r0, #0
 80a4c9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4c9e:	bf88      	it	hi
 80a4ca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4ca4:	f63f aeaf 	bhi.w	80a4a06 <__aeabi_dmul+0xde>
 80a4ca8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4cac:	bf04      	itt	eq
 80a4cae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4cb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4cb6:	f150 0000 	adcs.w	r0, r0, #0
 80a4cba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4cbe:	bd70      	pop	{r4, r5, r6, pc}
 80a4cc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4cc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4cc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4ccc:	bfc2      	ittt	gt
 80a4cce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4cd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4cd6:	bd70      	popgt	{r4, r5, r6, pc}
 80a4cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4cdc:	f04f 0e00 	mov.w	lr, #0
 80a4ce0:	3c01      	subs	r4, #1
 80a4ce2:	e690      	b.n	80a4a06 <__aeabi_dmul+0xde>
 80a4ce4:	ea45 0e06 	orr.w	lr, r5, r6
 80a4ce8:	e68d      	b.n	80a4a06 <__aeabi_dmul+0xde>
 80a4cea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4cee:	ea94 0f0c 	teq	r4, ip
 80a4cf2:	bf08      	it	eq
 80a4cf4:	ea95 0f0c 	teqeq	r5, ip
 80a4cf8:	f43f af3b 	beq.w	80a4b72 <__aeabi_dmul+0x24a>
 80a4cfc:	ea94 0f0c 	teq	r4, ip
 80a4d00:	d10a      	bne.n	80a4d18 <__aeabi_ddiv+0x19c>
 80a4d02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4d06:	f47f af34 	bne.w	80a4b72 <__aeabi_dmul+0x24a>
 80a4d0a:	ea95 0f0c 	teq	r5, ip
 80a4d0e:	f47f af25 	bne.w	80a4b5c <__aeabi_dmul+0x234>
 80a4d12:	4610      	mov	r0, r2
 80a4d14:	4619      	mov	r1, r3
 80a4d16:	e72c      	b.n	80a4b72 <__aeabi_dmul+0x24a>
 80a4d18:	ea95 0f0c 	teq	r5, ip
 80a4d1c:	d106      	bne.n	80a4d2c <__aeabi_ddiv+0x1b0>
 80a4d1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4d22:	f43f aefd 	beq.w	80a4b20 <__aeabi_dmul+0x1f8>
 80a4d26:	4610      	mov	r0, r2
 80a4d28:	4619      	mov	r1, r3
 80a4d2a:	e722      	b.n	80a4b72 <__aeabi_dmul+0x24a>
 80a4d2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4d30:	bf18      	it	ne
 80a4d32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4d36:	f47f aec5 	bne.w	80a4ac4 <__aeabi_dmul+0x19c>
 80a4d3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4d3e:	f47f af0d 	bne.w	80a4b5c <__aeabi_dmul+0x234>
 80a4d42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4d46:	f47f aeeb 	bne.w	80a4b20 <__aeabi_dmul+0x1f8>
 80a4d4a:	e712      	b.n	80a4b72 <__aeabi_dmul+0x24a>

080a4d4c <__gedf2>:
 80a4d4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4d50:	e006      	b.n	80a4d60 <__cmpdf2+0x4>
 80a4d52:	bf00      	nop

080a4d54 <__ledf2>:
 80a4d54:	f04f 0c01 	mov.w	ip, #1
 80a4d58:	e002      	b.n	80a4d60 <__cmpdf2+0x4>
 80a4d5a:	bf00      	nop

080a4d5c <__cmpdf2>:
 80a4d5c:	f04f 0c01 	mov.w	ip, #1
 80a4d60:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4d64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4d70:	bf18      	it	ne
 80a4d72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4d76:	d01b      	beq.n	80a4db0 <__cmpdf2+0x54>
 80a4d78:	b001      	add	sp, #4
 80a4d7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4d7e:	bf0c      	ite	eq
 80a4d80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4d84:	ea91 0f03 	teqne	r1, r3
 80a4d88:	bf02      	ittt	eq
 80a4d8a:	ea90 0f02 	teqeq	r0, r2
 80a4d8e:	2000      	moveq	r0, #0
 80a4d90:	4770      	bxeq	lr
 80a4d92:	f110 0f00 	cmn.w	r0, #0
 80a4d96:	ea91 0f03 	teq	r1, r3
 80a4d9a:	bf58      	it	pl
 80a4d9c:	4299      	cmppl	r1, r3
 80a4d9e:	bf08      	it	eq
 80a4da0:	4290      	cmpeq	r0, r2
 80a4da2:	bf2c      	ite	cs
 80a4da4:	17d8      	asrcs	r0, r3, #31
 80a4da6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4daa:	f040 0001 	orr.w	r0, r0, #1
 80a4dae:	4770      	bx	lr
 80a4db0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4db8:	d102      	bne.n	80a4dc0 <__cmpdf2+0x64>
 80a4dba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4dbe:	d107      	bne.n	80a4dd0 <__cmpdf2+0x74>
 80a4dc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4dc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4dc8:	d1d6      	bne.n	80a4d78 <__cmpdf2+0x1c>
 80a4dca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4dce:	d0d3      	beq.n	80a4d78 <__cmpdf2+0x1c>
 80a4dd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4dd4:	4770      	bx	lr
 80a4dd6:	bf00      	nop

080a4dd8 <__aeabi_cdrcmple>:
 80a4dd8:	4684      	mov	ip, r0
 80a4dda:	4610      	mov	r0, r2
 80a4ddc:	4662      	mov	r2, ip
 80a4dde:	468c      	mov	ip, r1
 80a4de0:	4619      	mov	r1, r3
 80a4de2:	4663      	mov	r3, ip
 80a4de4:	e000      	b.n	80a4de8 <__aeabi_cdcmpeq>
 80a4de6:	bf00      	nop

080a4de8 <__aeabi_cdcmpeq>:
 80a4de8:	b501      	push	{r0, lr}
 80a4dea:	f7ff ffb7 	bl	80a4d5c <__cmpdf2>
 80a4dee:	2800      	cmp	r0, #0
 80a4df0:	bf48      	it	mi
 80a4df2:	f110 0f00 	cmnmi.w	r0, #0
 80a4df6:	bd01      	pop	{r0, pc}

080a4df8 <__aeabi_dcmpeq>:
 80a4df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4dfc:	f7ff fff4 	bl	80a4de8 <__aeabi_cdcmpeq>
 80a4e00:	bf0c      	ite	eq
 80a4e02:	2001      	moveq	r0, #1
 80a4e04:	2000      	movne	r0, #0
 80a4e06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e0a:	bf00      	nop

080a4e0c <__aeabi_dcmplt>:
 80a4e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4e10:	f7ff ffea 	bl	80a4de8 <__aeabi_cdcmpeq>
 80a4e14:	bf34      	ite	cc
 80a4e16:	2001      	movcc	r0, #1
 80a4e18:	2000      	movcs	r0, #0
 80a4e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e1e:	bf00      	nop

080a4e20 <__aeabi_dcmple>:
 80a4e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4e24:	f7ff ffe0 	bl	80a4de8 <__aeabi_cdcmpeq>
 80a4e28:	bf94      	ite	ls
 80a4e2a:	2001      	movls	r0, #1
 80a4e2c:	2000      	movhi	r0, #0
 80a4e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e32:	bf00      	nop

080a4e34 <__aeabi_dcmpge>:
 80a4e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4e38:	f7ff ffce 	bl	80a4dd8 <__aeabi_cdrcmple>
 80a4e3c:	bf94      	ite	ls
 80a4e3e:	2001      	movls	r0, #1
 80a4e40:	2000      	movhi	r0, #0
 80a4e42:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e46:	bf00      	nop

080a4e48 <__aeabi_dcmpgt>:
 80a4e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4e4c:	f7ff ffc4 	bl	80a4dd8 <__aeabi_cdrcmple>
 80a4e50:	bf34      	ite	cc
 80a4e52:	2001      	movcc	r0, #1
 80a4e54:	2000      	movcs	r0, #0
 80a4e56:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e5a:	bf00      	nop

080a4e5c <__aeabi_dcmpun>:
 80a4e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4e64:	d102      	bne.n	80a4e6c <__aeabi_dcmpun+0x10>
 80a4e66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4e6a:	d10a      	bne.n	80a4e82 <__aeabi_dcmpun+0x26>
 80a4e6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4e74:	d102      	bne.n	80a4e7c <__aeabi_dcmpun+0x20>
 80a4e76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4e7a:	d102      	bne.n	80a4e82 <__aeabi_dcmpun+0x26>
 80a4e7c:	f04f 0000 	mov.w	r0, #0
 80a4e80:	4770      	bx	lr
 80a4e82:	f04f 0001 	mov.w	r0, #1
 80a4e86:	4770      	bx	lr

080a4e88 <__aeabi_d2iz>:
 80a4e88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4e8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4e90:	d215      	bcs.n	80a4ebe <__aeabi_d2iz+0x36>
 80a4e92:	d511      	bpl.n	80a4eb8 <__aeabi_d2iz+0x30>
 80a4e94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4e98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4e9c:	d912      	bls.n	80a4ec4 <__aeabi_d2iz+0x3c>
 80a4e9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4ea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4eaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4eae:	fa23 f002 	lsr.w	r0, r3, r2
 80a4eb2:	bf18      	it	ne
 80a4eb4:	4240      	negne	r0, r0
 80a4eb6:	4770      	bx	lr
 80a4eb8:	f04f 0000 	mov.w	r0, #0
 80a4ebc:	4770      	bx	lr
 80a4ebe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4ec2:	d105      	bne.n	80a4ed0 <__aeabi_d2iz+0x48>
 80a4ec4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4ec8:	bf08      	it	eq
 80a4eca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4ece:	4770      	bx	lr
 80a4ed0:	f04f 0000 	mov.w	r0, #0
 80a4ed4:	4770      	bx	lr
 80a4ed6:	bf00      	nop

080a4ed8 <__aeabi_d2uiz>:
 80a4ed8:	004a      	lsls	r2, r1, #1
 80a4eda:	d211      	bcs.n	80a4f00 <__aeabi_d2uiz+0x28>
 80a4edc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4ee0:	d211      	bcs.n	80a4f06 <__aeabi_d2uiz+0x2e>
 80a4ee2:	d50d      	bpl.n	80a4f00 <__aeabi_d2uiz+0x28>
 80a4ee4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4ee8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4eec:	d40e      	bmi.n	80a4f0c <__aeabi_d2uiz+0x34>
 80a4eee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4ef6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4efa:	fa23 f002 	lsr.w	r0, r3, r2
 80a4efe:	4770      	bx	lr
 80a4f00:	f04f 0000 	mov.w	r0, #0
 80a4f04:	4770      	bx	lr
 80a4f06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4f0a:	d102      	bne.n	80a4f12 <__aeabi_d2uiz+0x3a>
 80a4f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4f10:	4770      	bx	lr
 80a4f12:	f04f 0000 	mov.w	r0, #0
 80a4f16:	4770      	bx	lr

080a4f18 <__aeabi_frsub>:
 80a4f18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4f1c:	e002      	b.n	80a4f24 <__addsf3>
 80a4f1e:	bf00      	nop

080a4f20 <__aeabi_fsub>:
 80a4f20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4f24 <__addsf3>:
 80a4f24:	0042      	lsls	r2, r0, #1
 80a4f26:	bf1f      	itttt	ne
 80a4f28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4f2c:	ea92 0f03 	teqne	r2, r3
 80a4f30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4f34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4f38:	d06a      	beq.n	80a5010 <__addsf3+0xec>
 80a4f3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4f3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4f42:	bfc1      	itttt	gt
 80a4f44:	18d2      	addgt	r2, r2, r3
 80a4f46:	4041      	eorgt	r1, r0
 80a4f48:	4048      	eorgt	r0, r1
 80a4f4a:	4041      	eorgt	r1, r0
 80a4f4c:	bfb8      	it	lt
 80a4f4e:	425b      	neglt	r3, r3
 80a4f50:	2b19      	cmp	r3, #25
 80a4f52:	bf88      	it	hi
 80a4f54:	4770      	bxhi	lr
 80a4f56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4f5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4f62:	bf18      	it	ne
 80a4f64:	4240      	negne	r0, r0
 80a4f66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4f6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4f6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4f72:	bf18      	it	ne
 80a4f74:	4249      	negne	r1, r1
 80a4f76:	ea92 0f03 	teq	r2, r3
 80a4f7a:	d03f      	beq.n	80a4ffc <__addsf3+0xd8>
 80a4f7c:	f1a2 0201 	sub.w	r2, r2, #1
 80a4f80:	fa41 fc03 	asr.w	ip, r1, r3
 80a4f84:	eb10 000c 	adds.w	r0, r0, ip
 80a4f88:	f1c3 0320 	rsb	r3, r3, #32
 80a4f8c:	fa01 f103 	lsl.w	r1, r1, r3
 80a4f90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4f94:	d502      	bpl.n	80a4f9c <__addsf3+0x78>
 80a4f96:	4249      	negs	r1, r1
 80a4f98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4f9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4fa0:	d313      	bcc.n	80a4fca <__addsf3+0xa6>
 80a4fa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4fa6:	d306      	bcc.n	80a4fb6 <__addsf3+0x92>
 80a4fa8:	0840      	lsrs	r0, r0, #1
 80a4faa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4fae:	f102 0201 	add.w	r2, r2, #1
 80a4fb2:	2afe      	cmp	r2, #254	; 0xfe
 80a4fb4:	d251      	bcs.n	80a505a <__addsf3+0x136>
 80a4fb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4fba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4fbe:	bf08      	it	eq
 80a4fc0:	f020 0001 	biceq.w	r0, r0, #1
 80a4fc4:	ea40 0003 	orr.w	r0, r0, r3
 80a4fc8:	4770      	bx	lr
 80a4fca:	0049      	lsls	r1, r1, #1
 80a4fcc:	eb40 0000 	adc.w	r0, r0, r0
 80a4fd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4fd4:	f1a2 0201 	sub.w	r2, r2, #1
 80a4fd8:	d1ed      	bne.n	80a4fb6 <__addsf3+0x92>
 80a4fda:	fab0 fc80 	clz	ip, r0
 80a4fde:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4fe2:	ebb2 020c 	subs.w	r2, r2, ip
 80a4fe6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4fea:	bfaa      	itet	ge
 80a4fec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4ff0:	4252      	neglt	r2, r2
 80a4ff2:	4318      	orrge	r0, r3
 80a4ff4:	bfbc      	itt	lt
 80a4ff6:	40d0      	lsrlt	r0, r2
 80a4ff8:	4318      	orrlt	r0, r3
 80a4ffa:	4770      	bx	lr
 80a4ffc:	f092 0f00 	teq	r2, #0
 80a5000:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5004:	bf06      	itte	eq
 80a5006:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a500a:	3201      	addeq	r2, #1
 80a500c:	3b01      	subne	r3, #1
 80a500e:	e7b5      	b.n	80a4f7c <__addsf3+0x58>
 80a5010:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5018:	bf18      	it	ne
 80a501a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a501e:	d021      	beq.n	80a5064 <__addsf3+0x140>
 80a5020:	ea92 0f03 	teq	r2, r3
 80a5024:	d004      	beq.n	80a5030 <__addsf3+0x10c>
 80a5026:	f092 0f00 	teq	r2, #0
 80a502a:	bf08      	it	eq
 80a502c:	4608      	moveq	r0, r1
 80a502e:	4770      	bx	lr
 80a5030:	ea90 0f01 	teq	r0, r1
 80a5034:	bf1c      	itt	ne
 80a5036:	2000      	movne	r0, #0
 80a5038:	4770      	bxne	lr
 80a503a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a503e:	d104      	bne.n	80a504a <__addsf3+0x126>
 80a5040:	0040      	lsls	r0, r0, #1
 80a5042:	bf28      	it	cs
 80a5044:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5048:	4770      	bx	lr
 80a504a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a504e:	bf3c      	itt	cc
 80a5050:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5054:	4770      	bxcc	lr
 80a5056:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a505a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a505e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5062:	4770      	bx	lr
 80a5064:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5068:	bf16      	itet	ne
 80a506a:	4608      	movne	r0, r1
 80a506c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5070:	4601      	movne	r1, r0
 80a5072:	0242      	lsls	r2, r0, #9
 80a5074:	bf06      	itte	eq
 80a5076:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a507a:	ea90 0f01 	teqeq	r0, r1
 80a507e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5082:	4770      	bx	lr

080a5084 <__aeabi_ui2f>:
 80a5084:	f04f 0300 	mov.w	r3, #0
 80a5088:	e004      	b.n	80a5094 <__aeabi_i2f+0x8>
 80a508a:	bf00      	nop

080a508c <__aeabi_i2f>:
 80a508c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5090:	bf48      	it	mi
 80a5092:	4240      	negmi	r0, r0
 80a5094:	ea5f 0c00 	movs.w	ip, r0
 80a5098:	bf08      	it	eq
 80a509a:	4770      	bxeq	lr
 80a509c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a50a0:	4601      	mov	r1, r0
 80a50a2:	f04f 0000 	mov.w	r0, #0
 80a50a6:	e01c      	b.n	80a50e2 <__aeabi_l2f+0x2a>

080a50a8 <__aeabi_ul2f>:
 80a50a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a50ac:	bf08      	it	eq
 80a50ae:	4770      	bxeq	lr
 80a50b0:	f04f 0300 	mov.w	r3, #0
 80a50b4:	e00a      	b.n	80a50cc <__aeabi_l2f+0x14>
 80a50b6:	bf00      	nop

080a50b8 <__aeabi_l2f>:
 80a50b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a50bc:	bf08      	it	eq
 80a50be:	4770      	bxeq	lr
 80a50c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a50c4:	d502      	bpl.n	80a50cc <__aeabi_l2f+0x14>
 80a50c6:	4240      	negs	r0, r0
 80a50c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a50cc:	ea5f 0c01 	movs.w	ip, r1
 80a50d0:	bf02      	ittt	eq
 80a50d2:	4684      	moveq	ip, r0
 80a50d4:	4601      	moveq	r1, r0
 80a50d6:	2000      	moveq	r0, #0
 80a50d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a50dc:	bf08      	it	eq
 80a50de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a50e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a50e6:	fabc f28c 	clz	r2, ip
 80a50ea:	3a08      	subs	r2, #8
 80a50ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a50f0:	db10      	blt.n	80a5114 <__aeabi_l2f+0x5c>
 80a50f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a50f6:	4463      	add	r3, ip
 80a50f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a50fc:	f1c2 0220 	rsb	r2, r2, #32
 80a5100:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5104:	fa20 f202 	lsr.w	r2, r0, r2
 80a5108:	eb43 0002 	adc.w	r0, r3, r2
 80a510c:	bf08      	it	eq
 80a510e:	f020 0001 	biceq.w	r0, r0, #1
 80a5112:	4770      	bx	lr
 80a5114:	f102 0220 	add.w	r2, r2, #32
 80a5118:	fa01 fc02 	lsl.w	ip, r1, r2
 80a511c:	f1c2 0220 	rsb	r2, r2, #32
 80a5120:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5124:	fa21 f202 	lsr.w	r2, r1, r2
 80a5128:	eb43 0002 	adc.w	r0, r3, r2
 80a512c:	bf08      	it	eq
 80a512e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5132:	4770      	bx	lr

080a5134 <__aeabi_fmul>:
 80a5134:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5138:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a513c:	bf1e      	ittt	ne
 80a513e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5142:	ea92 0f0c 	teqne	r2, ip
 80a5146:	ea93 0f0c 	teqne	r3, ip
 80a514a:	d06f      	beq.n	80a522c <__aeabi_fmul+0xf8>
 80a514c:	441a      	add	r2, r3
 80a514e:	ea80 0c01 	eor.w	ip, r0, r1
 80a5152:	0240      	lsls	r0, r0, #9
 80a5154:	bf18      	it	ne
 80a5156:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a515a:	d01e      	beq.n	80a519a <__aeabi_fmul+0x66>
 80a515c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5160:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5164:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5168:	fba0 3101 	umull	r3, r1, r0, r1
 80a516c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5170:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5174:	bf3e      	ittt	cc
 80a5176:	0049      	lslcc	r1, r1, #1
 80a5178:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a517c:	005b      	lslcc	r3, r3, #1
 80a517e:	ea40 0001 	orr.w	r0, r0, r1
 80a5182:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5186:	2afd      	cmp	r2, #253	; 0xfd
 80a5188:	d81d      	bhi.n	80a51c6 <__aeabi_fmul+0x92>
 80a518a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a518e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5192:	bf08      	it	eq
 80a5194:	f020 0001 	biceq.w	r0, r0, #1
 80a5198:	4770      	bx	lr
 80a519a:	f090 0f00 	teq	r0, #0
 80a519e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a51a2:	bf08      	it	eq
 80a51a4:	0249      	lsleq	r1, r1, #9
 80a51a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a51aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a51ae:	3a7f      	subs	r2, #127	; 0x7f
 80a51b0:	bfc2      	ittt	gt
 80a51b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a51b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a51ba:	4770      	bxgt	lr
 80a51bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a51c0:	f04f 0300 	mov.w	r3, #0
 80a51c4:	3a01      	subs	r2, #1
 80a51c6:	dc5d      	bgt.n	80a5284 <__aeabi_fmul+0x150>
 80a51c8:	f112 0f19 	cmn.w	r2, #25
 80a51cc:	bfdc      	itt	le
 80a51ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a51d2:	4770      	bxle	lr
 80a51d4:	f1c2 0200 	rsb	r2, r2, #0
 80a51d8:	0041      	lsls	r1, r0, #1
 80a51da:	fa21 f102 	lsr.w	r1, r1, r2
 80a51de:	f1c2 0220 	rsb	r2, r2, #32
 80a51e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a51e6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a51ea:	f140 0000 	adc.w	r0, r0, #0
 80a51ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a51f2:	bf08      	it	eq
 80a51f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a51f8:	4770      	bx	lr
 80a51fa:	f092 0f00 	teq	r2, #0
 80a51fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5202:	bf02      	ittt	eq
 80a5204:	0040      	lsleq	r0, r0, #1
 80a5206:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a520a:	3a01      	subeq	r2, #1
 80a520c:	d0f9      	beq.n	80a5202 <__aeabi_fmul+0xce>
 80a520e:	ea40 000c 	orr.w	r0, r0, ip
 80a5212:	f093 0f00 	teq	r3, #0
 80a5216:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a521a:	bf02      	ittt	eq
 80a521c:	0049      	lsleq	r1, r1, #1
 80a521e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5222:	3b01      	subeq	r3, #1
 80a5224:	d0f9      	beq.n	80a521a <__aeabi_fmul+0xe6>
 80a5226:	ea41 010c 	orr.w	r1, r1, ip
 80a522a:	e78f      	b.n	80a514c <__aeabi_fmul+0x18>
 80a522c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5230:	ea92 0f0c 	teq	r2, ip
 80a5234:	bf18      	it	ne
 80a5236:	ea93 0f0c 	teqne	r3, ip
 80a523a:	d00a      	beq.n	80a5252 <__aeabi_fmul+0x11e>
 80a523c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5240:	bf18      	it	ne
 80a5242:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5246:	d1d8      	bne.n	80a51fa <__aeabi_fmul+0xc6>
 80a5248:	ea80 0001 	eor.w	r0, r0, r1
 80a524c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5250:	4770      	bx	lr
 80a5252:	f090 0f00 	teq	r0, #0
 80a5256:	bf17      	itett	ne
 80a5258:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a525c:	4608      	moveq	r0, r1
 80a525e:	f091 0f00 	teqne	r1, #0
 80a5262:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5266:	d014      	beq.n	80a5292 <__aeabi_fmul+0x15e>
 80a5268:	ea92 0f0c 	teq	r2, ip
 80a526c:	d101      	bne.n	80a5272 <__aeabi_fmul+0x13e>
 80a526e:	0242      	lsls	r2, r0, #9
 80a5270:	d10f      	bne.n	80a5292 <__aeabi_fmul+0x15e>
 80a5272:	ea93 0f0c 	teq	r3, ip
 80a5276:	d103      	bne.n	80a5280 <__aeabi_fmul+0x14c>
 80a5278:	024b      	lsls	r3, r1, #9
 80a527a:	bf18      	it	ne
 80a527c:	4608      	movne	r0, r1
 80a527e:	d108      	bne.n	80a5292 <__aeabi_fmul+0x15e>
 80a5280:	ea80 0001 	eor.w	r0, r0, r1
 80a5284:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5288:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a528c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5290:	4770      	bx	lr
 80a5292:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5296:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a529a:	4770      	bx	lr

080a529c <__aeabi_fdiv>:
 80a529c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a52a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a52a4:	bf1e      	ittt	ne
 80a52a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a52aa:	ea92 0f0c 	teqne	r2, ip
 80a52ae:	ea93 0f0c 	teqne	r3, ip
 80a52b2:	d069      	beq.n	80a5388 <__aeabi_fdiv+0xec>
 80a52b4:	eba2 0203 	sub.w	r2, r2, r3
 80a52b8:	ea80 0c01 	eor.w	ip, r0, r1
 80a52bc:	0249      	lsls	r1, r1, #9
 80a52be:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a52c2:	d037      	beq.n	80a5334 <__aeabi_fdiv+0x98>
 80a52c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a52c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a52cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a52d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a52d4:	428b      	cmp	r3, r1
 80a52d6:	bf38      	it	cc
 80a52d8:	005b      	lslcc	r3, r3, #1
 80a52da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a52de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a52e2:	428b      	cmp	r3, r1
 80a52e4:	bf24      	itt	cs
 80a52e6:	1a5b      	subcs	r3, r3, r1
 80a52e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a52ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a52f0:	bf24      	itt	cs
 80a52f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a52f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a52fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a52fe:	bf24      	itt	cs
 80a5300:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5304:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5308:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a530c:	bf24      	itt	cs
 80a530e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5312:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5316:	011b      	lsls	r3, r3, #4
 80a5318:	bf18      	it	ne
 80a531a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a531e:	d1e0      	bne.n	80a52e2 <__aeabi_fdiv+0x46>
 80a5320:	2afd      	cmp	r2, #253	; 0xfd
 80a5322:	f63f af50 	bhi.w	80a51c6 <__aeabi_fmul+0x92>
 80a5326:	428b      	cmp	r3, r1
 80a5328:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a532c:	bf08      	it	eq
 80a532e:	f020 0001 	biceq.w	r0, r0, #1
 80a5332:	4770      	bx	lr
 80a5334:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5338:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a533c:	327f      	adds	r2, #127	; 0x7f
 80a533e:	bfc2      	ittt	gt
 80a5340:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5344:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5348:	4770      	bxgt	lr
 80a534a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a534e:	f04f 0300 	mov.w	r3, #0
 80a5352:	3a01      	subs	r2, #1
 80a5354:	e737      	b.n	80a51c6 <__aeabi_fmul+0x92>
 80a5356:	f092 0f00 	teq	r2, #0
 80a535a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a535e:	bf02      	ittt	eq
 80a5360:	0040      	lsleq	r0, r0, #1
 80a5362:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5366:	3a01      	subeq	r2, #1
 80a5368:	d0f9      	beq.n	80a535e <__aeabi_fdiv+0xc2>
 80a536a:	ea40 000c 	orr.w	r0, r0, ip
 80a536e:	f093 0f00 	teq	r3, #0
 80a5372:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5376:	bf02      	ittt	eq
 80a5378:	0049      	lsleq	r1, r1, #1
 80a537a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a537e:	3b01      	subeq	r3, #1
 80a5380:	d0f9      	beq.n	80a5376 <__aeabi_fdiv+0xda>
 80a5382:	ea41 010c 	orr.w	r1, r1, ip
 80a5386:	e795      	b.n	80a52b4 <__aeabi_fdiv+0x18>
 80a5388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a538c:	ea92 0f0c 	teq	r2, ip
 80a5390:	d108      	bne.n	80a53a4 <__aeabi_fdiv+0x108>
 80a5392:	0242      	lsls	r2, r0, #9
 80a5394:	f47f af7d 	bne.w	80a5292 <__aeabi_fmul+0x15e>
 80a5398:	ea93 0f0c 	teq	r3, ip
 80a539c:	f47f af70 	bne.w	80a5280 <__aeabi_fmul+0x14c>
 80a53a0:	4608      	mov	r0, r1
 80a53a2:	e776      	b.n	80a5292 <__aeabi_fmul+0x15e>
 80a53a4:	ea93 0f0c 	teq	r3, ip
 80a53a8:	d104      	bne.n	80a53b4 <__aeabi_fdiv+0x118>
 80a53aa:	024b      	lsls	r3, r1, #9
 80a53ac:	f43f af4c 	beq.w	80a5248 <__aeabi_fmul+0x114>
 80a53b0:	4608      	mov	r0, r1
 80a53b2:	e76e      	b.n	80a5292 <__aeabi_fmul+0x15e>
 80a53b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a53b8:	bf18      	it	ne
 80a53ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a53be:	d1ca      	bne.n	80a5356 <__aeabi_fdiv+0xba>
 80a53c0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a53c4:	f47f af5c 	bne.w	80a5280 <__aeabi_fmul+0x14c>
 80a53c8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a53cc:	f47f af3c 	bne.w	80a5248 <__aeabi_fmul+0x114>
 80a53d0:	e75f      	b.n	80a5292 <__aeabi_fmul+0x15e>
 80a53d2:	bf00      	nop

080a53d4 <__gesf2>:
 80a53d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a53d8:	e006      	b.n	80a53e8 <__cmpsf2+0x4>
 80a53da:	bf00      	nop

080a53dc <__lesf2>:
 80a53dc:	f04f 0c01 	mov.w	ip, #1
 80a53e0:	e002      	b.n	80a53e8 <__cmpsf2+0x4>
 80a53e2:	bf00      	nop

080a53e4 <__cmpsf2>:
 80a53e4:	f04f 0c01 	mov.w	ip, #1
 80a53e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a53ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a53f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a53f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a53f8:	bf18      	it	ne
 80a53fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a53fe:	d011      	beq.n	80a5424 <__cmpsf2+0x40>
 80a5400:	b001      	add	sp, #4
 80a5402:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5406:	bf18      	it	ne
 80a5408:	ea90 0f01 	teqne	r0, r1
 80a540c:	bf58      	it	pl
 80a540e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5412:	bf88      	it	hi
 80a5414:	17c8      	asrhi	r0, r1, #31
 80a5416:	bf38      	it	cc
 80a5418:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a541c:	bf18      	it	ne
 80a541e:	f040 0001 	orrne.w	r0, r0, #1
 80a5422:	4770      	bx	lr
 80a5424:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5428:	d102      	bne.n	80a5430 <__cmpsf2+0x4c>
 80a542a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a542e:	d105      	bne.n	80a543c <__cmpsf2+0x58>
 80a5430:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5434:	d1e4      	bne.n	80a5400 <__cmpsf2+0x1c>
 80a5436:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a543a:	d0e1      	beq.n	80a5400 <__cmpsf2+0x1c>
 80a543c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5440:	4770      	bx	lr
 80a5442:	bf00      	nop

080a5444 <__aeabi_cfrcmple>:
 80a5444:	4684      	mov	ip, r0
 80a5446:	4608      	mov	r0, r1
 80a5448:	4661      	mov	r1, ip
 80a544a:	e7ff      	b.n	80a544c <__aeabi_cfcmpeq>

080a544c <__aeabi_cfcmpeq>:
 80a544c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a544e:	f7ff ffc9 	bl	80a53e4 <__cmpsf2>
 80a5452:	2800      	cmp	r0, #0
 80a5454:	bf48      	it	mi
 80a5456:	f110 0f00 	cmnmi.w	r0, #0
 80a545a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a545c <__aeabi_fcmpeq>:
 80a545c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5460:	f7ff fff4 	bl	80a544c <__aeabi_cfcmpeq>
 80a5464:	bf0c      	ite	eq
 80a5466:	2001      	moveq	r0, #1
 80a5468:	2000      	movne	r0, #0
 80a546a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a546e:	bf00      	nop

080a5470 <__aeabi_fcmplt>:
 80a5470:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5474:	f7ff ffea 	bl	80a544c <__aeabi_cfcmpeq>
 80a5478:	bf34      	ite	cc
 80a547a:	2001      	movcc	r0, #1
 80a547c:	2000      	movcs	r0, #0
 80a547e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5482:	bf00      	nop

080a5484 <__aeabi_fcmple>:
 80a5484:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5488:	f7ff ffe0 	bl	80a544c <__aeabi_cfcmpeq>
 80a548c:	bf94      	ite	ls
 80a548e:	2001      	movls	r0, #1
 80a5490:	2000      	movhi	r0, #0
 80a5492:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5496:	bf00      	nop

080a5498 <__aeabi_fcmpge>:
 80a5498:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a549c:	f7ff ffd2 	bl	80a5444 <__aeabi_cfrcmple>
 80a54a0:	bf94      	ite	ls
 80a54a2:	2001      	movls	r0, #1
 80a54a4:	2000      	movhi	r0, #0
 80a54a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54aa:	bf00      	nop

080a54ac <__aeabi_fcmpgt>:
 80a54ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a54b0:	f7ff ffc8 	bl	80a5444 <__aeabi_cfrcmple>
 80a54b4:	bf34      	ite	cc
 80a54b6:	2001      	movcc	r0, #1
 80a54b8:	2000      	movcs	r0, #0
 80a54ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54be:	bf00      	nop

080a54c0 <__aeabi_f2iz>:
 80a54c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a54c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a54c8:	d30f      	bcc.n	80a54ea <__aeabi_f2iz+0x2a>
 80a54ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a54ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a54d2:	d90d      	bls.n	80a54f0 <__aeabi_f2iz+0x30>
 80a54d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a54d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a54dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a54e0:	fa23 f002 	lsr.w	r0, r3, r2
 80a54e4:	bf18      	it	ne
 80a54e6:	4240      	negne	r0, r0
 80a54e8:	4770      	bx	lr
 80a54ea:	f04f 0000 	mov.w	r0, #0
 80a54ee:	4770      	bx	lr
 80a54f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a54f4:	d101      	bne.n	80a54fa <__aeabi_f2iz+0x3a>
 80a54f6:	0242      	lsls	r2, r0, #9
 80a54f8:	d105      	bne.n	80a5506 <__aeabi_f2iz+0x46>
 80a54fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a54fe:	bf08      	it	eq
 80a5500:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5504:	4770      	bx	lr
 80a5506:	f04f 0000 	mov.w	r0, #0
 80a550a:	4770      	bx	lr

080a550c <__cxa_atexit>:
 80a550c:	b510      	push	{r4, lr}
 80a550e:	4c05      	ldr	r4, [pc, #20]	; (80a5524 <__cxa_atexit+0x18>)
 80a5510:	4613      	mov	r3, r2
 80a5512:	b12c      	cbz	r4, 80a5520 <__cxa_atexit+0x14>
 80a5514:	460a      	mov	r2, r1
 80a5516:	4601      	mov	r1, r0
 80a5518:	2002      	movs	r0, #2
 80a551a:	f3af 8000 	nop.w
 80a551e:	bd10      	pop	{r4, pc}
 80a5520:	4620      	mov	r0, r4
 80a5522:	bd10      	pop	{r4, pc}
 80a5524:	00000000 	.word	0x00000000

080a5528 <memcpy>:
 80a5528:	b510      	push	{r4, lr}
 80a552a:	1e43      	subs	r3, r0, #1
 80a552c:	440a      	add	r2, r1
 80a552e:	4291      	cmp	r1, r2
 80a5530:	d004      	beq.n	80a553c <memcpy+0x14>
 80a5532:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5536:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a553a:	e7f8      	b.n	80a552e <memcpy+0x6>
 80a553c:	bd10      	pop	{r4, pc}

080a553e <memset>:
 80a553e:	4603      	mov	r3, r0
 80a5540:	4402      	add	r2, r0
 80a5542:	4293      	cmp	r3, r2
 80a5544:	d002      	beq.n	80a554c <memset+0xe>
 80a5546:	f803 1b01 	strb.w	r1, [r3], #1
 80a554a:	e7fa      	b.n	80a5542 <memset+0x4>
 80a554c:	4770      	bx	lr
	...

080a5550 <srand>:
 80a5550:	b538      	push	{r3, r4, r5, lr}
 80a5552:	4b12      	ldr	r3, [pc, #72]	; (80a559c <srand+0x4c>)
 80a5554:	4605      	mov	r5, r0
 80a5556:	681c      	ldr	r4, [r3, #0]
 80a5558:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a555a:	b9d3      	cbnz	r3, 80a5592 <srand+0x42>
 80a555c:	2018      	movs	r0, #24
 80a555e:	f7fd fdd1 	bl	80a3104 <malloc>
 80a5562:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5566:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5568:	8003      	strh	r3, [r0, #0]
 80a556a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a556e:	8043      	strh	r3, [r0, #2]
 80a5570:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5574:	8083      	strh	r3, [r0, #4]
 80a5576:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a557a:	80c3      	strh	r3, [r0, #6]
 80a557c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5580:	8103      	strh	r3, [r0, #8]
 80a5582:	2305      	movs	r3, #5
 80a5584:	8143      	strh	r3, [r0, #10]
 80a5586:	230b      	movs	r3, #11
 80a5588:	8183      	strh	r3, [r0, #12]
 80a558a:	2201      	movs	r2, #1
 80a558c:	2300      	movs	r3, #0
 80a558e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5594:	2200      	movs	r2, #0
 80a5596:	611d      	str	r5, [r3, #16]
 80a5598:	615a      	str	r2, [r3, #20]
 80a559a:	bd38      	pop	{r3, r4, r5, pc}
 80a559c:	20000084 	.word	0x20000084

080a55a0 <rand>:
 80a55a0:	4b19      	ldr	r3, [pc, #100]	; (80a5608 <rand+0x68>)
 80a55a2:	b510      	push	{r4, lr}
 80a55a4:	681c      	ldr	r4, [r3, #0]
 80a55a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a55a8:	b9d3      	cbnz	r3, 80a55e0 <rand+0x40>
 80a55aa:	2018      	movs	r0, #24
 80a55ac:	f7fd fdaa 	bl	80a3104 <malloc>
 80a55b0:	f243 330e 	movw	r3, #13070	; 0x330e
 80a55b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80a55b6:	8003      	strh	r3, [r0, #0]
 80a55b8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a55bc:	8043      	strh	r3, [r0, #2]
 80a55be:	f241 2334 	movw	r3, #4660	; 0x1234
 80a55c2:	8083      	strh	r3, [r0, #4]
 80a55c4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a55c8:	80c3      	strh	r3, [r0, #6]
 80a55ca:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a55ce:	8103      	strh	r3, [r0, #8]
 80a55d0:	2305      	movs	r3, #5
 80a55d2:	8143      	strh	r3, [r0, #10]
 80a55d4:	230b      	movs	r3, #11
 80a55d6:	8183      	strh	r3, [r0, #12]
 80a55d8:	2201      	movs	r2, #1
 80a55da:	2300      	movs	r3, #0
 80a55dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a55e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a55e2:	4c0a      	ldr	r4, [pc, #40]	; (80a560c <rand+0x6c>)
 80a55e4:	690b      	ldr	r3, [r1, #16]
 80a55e6:	6948      	ldr	r0, [r1, #20]
 80a55e8:	435c      	muls	r4, r3
 80a55ea:	4a09      	ldr	r2, [pc, #36]	; (80a5610 <rand+0x70>)
 80a55ec:	fb02 4000 	mla	r0, r2, r0, r4
 80a55f0:	fba3 2302 	umull	r2, r3, r3, r2
 80a55f4:	3201      	adds	r2, #1
 80a55f6:	4403      	add	r3, r0
 80a55f8:	f143 0300 	adc.w	r3, r3, #0
 80a55fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a5600:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a5604:	bd10      	pop	{r4, pc}
 80a5606:	bf00      	nop
 80a5608:	20000084 	.word	0x20000084
 80a560c:	5851f42d 	.word	0x5851f42d
 80a5610:	4c957f2d 	.word	0x4c957f2d

080a5614 <strcmp>:
 80a5614:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5618:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a561c:	2a01      	cmp	r2, #1
 80a561e:	bf28      	it	cs
 80a5620:	429a      	cmpcs	r2, r3
 80a5622:	d0f7      	beq.n	80a5614 <strcmp>
 80a5624:	1ad0      	subs	r0, r2, r3
 80a5626:	4770      	bx	lr

080a5628 <strlen>:
 80a5628:	4603      	mov	r3, r0
 80a562a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a562e:	2a00      	cmp	r2, #0
 80a5630:	d1fb      	bne.n	80a562a <strlen+0x2>
 80a5632:	1a18      	subs	r0, r3, r0
 80a5634:	3801      	subs	r0, #1
 80a5636:	4770      	bx	lr

080a5638 <dynalib_user>:
 80a5638:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a5648:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a5658:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a5668:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a5678:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a5688:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a5698:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a56a8:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a56b8:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a56c8:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a56d8:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a56e8:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a56f8:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a5708:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a5718:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a5728:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a5738:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a5748:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a5758:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a5768:	4853 6600 756c 5878 3a20 0020 6c66 7875     SH.fluxX : .flux
 80a5778:	2059 203a 6600 756c 5a78 3a20 0020 6f54     Y : .fluxZ : .To
 80a5788:	6174 206c 6f6d 6576 656d 746e 203a 5300     tal movement: .S
 80a5798:	6570 6465 6c20 6d69 7469 3a20 0020 5453     peed limit : .ST
 80a57a8:	4c49 004c 4f4d 4556 5400 4f52 4255 454c     ILL.MOVE.TROUBLE
 80a57b8:	4320 554f 544e 3a20 203a 6300 7568 6b6e      COUNT :: .chunk
 80a57c8:	3a20 203a 5600 4c41 3a3a 0020 3a20 203a      :: .VAL:: . :: 
 80a57d8:	0020 494c 5453 4e45 4e49 2d47 2d2d 2d2d      .LISTENING-----
 80a57e8:	2d2d 2d2d 2d2d 2d2d 2d2d 7200 6365 6965     ----------.recei
 80a57f8:	6976 676e 6d20 7365 6173 6567 2d00 2d2d     ving message.---
 80a5808:	6e69 7720 6968 656c 2d2d 002d 4150 5352     in while---.PARS
 80a5818:	4e49 0047 7473 6c69 006c 6d2f 766f 0065     ING.still./move.
 80a5828:	554e 5f4d 494c 494d 2d54 3a2d 5500 2d50     NUM_LIMIT--:.UP-
 80a5838:	3a2d 4400 574f 2d4e 3a2d 4500 444e 4620     -:.DOWN--:.END F
 80a5848:	5249 5453 4c20 4f4f 0050 494c 494d 2d54     IRST LOOP.LIMIT-
 80a5858:	002d 4f44 4e57 2d2d 5300 4345 4e4f 2044     -.DOWN--.SECOND 
 80a5868:	4f4c 504f 5200 6465 4700 6572 6e65 4200     LOOP.Red.Green.B
 80a5878:	756c 0065                                   lue.

080a587c <CSWTCH.57>:
 80a587c:	0020 0000 0040 0000 0060 0000                ...@...`...

080a5888 <CSWTCH.215>:
 80a5888:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a5898:	0050 0000 2d0a 2d2d 002d 0000               P....----...

080a58a4 <_ZTV7TwoWire>:
	...
 80a58ac:	314d 080a 3197 080a 316f 080a 314f 080a     M1...1..o1..O1..
 80a58bc:	3177 080a 317f 080a 3187 080a 318f 080a     w1...1...1...1..

080a58cc <_ZTV9IPAddress>:
	...
 80a58d4:	320b 080a 00b7 080a 00d9 080a 6162 6475     .2..........baud
 80a58e4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a58f4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a5904:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a5914:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a5924:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a5934:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a5944:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a5954:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a5964:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a5974:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a5984:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a5994:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a59a4:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a59b4:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a59c4 <_ZTVN5spark12NetworkClassE>:
	...
 80a59cc:	32e9 080a 32f3 080a 32fd 080a 3307 080a     .2...2...2...3..
 80a59dc:	3311 080a 331d 080a 3329 080a 3335 080a     .3...3..)3..53..
 80a59ec:	333d 080a 3347 080a 3351 080a 616e 006e     =3..G3..Q3..nan.
 80a59fc:	766f 0066 6e69 0066                         ovf.inf.

080a5a04 <_ZTV8SPIClass>:
	...
 80a5a0c:	36dd 080a 36df 080a                         .6...6..

080a5a14 <_ZL14clock_divisors>:
 80a5a14:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a5a24:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a5a34:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a5a44:	0000 0000                                   ....

080a5a48 <_ZTV3UDP>:
	...
 80a5a50:	00b9 080a 00e7 080a 3937 080a 3a57 080a     ........79..W:..
 80a5a60:	392f 080a 394d 080a 396b 080a 3985 080a     /9..M9..k9...9..
 80a5a70:	39a7 080a 39f1 080a 3a13 080a 3ba9 080a     .9...9...:...;..
 80a5a80:	3abd 080a 3919 080a 3cb9 080a 3b25 080a     .:...9...<..%;..
 80a5a90:	3be1 080a 3ce7 080a 3a81 080a 3925 080a     .;...<...:..%9..
 80a5aa0:	3b89 080a 392b 080a 3987 080a fff0 ffff     .;..+9...9......
 80a5ab0:	0000 0000 399f 080a                         .....9..

080a5ab8 <_ZTV11USARTSerial>:
	...
 80a5ac0:	3d1f 080a 3d6f 080a 3d7d 080a 33cd 080a     .=..o=..}=...3..
 80a5ad0:	3d33 080a 3d55 080a 3d41 080a 3d69 080a     3=..U=..A=..i=..
 80a5ae0:	3d21 080a 3d25 080a                         !=..%=..

080a5ae8 <_ZTV9USBSerial>:
	...
 80a5af0:	3e25 080a 3e75 080a 3e83 080a 33cd 080a     %>..u>...>...3..
 80a5b00:	3e61 080a 3e27 080a 3e3d 080a 3e6f 080a     a>..'>..=>..o>..
 80a5b10:	3e53 080a 3e21 080a                         S>..!>..

080a5b18 <_ZTVN5spark9WiFiClassE>:
	...
 80a5b20:	4073 080a 4069 080a 405f 080a 3fd1 080a     s@..i@.._@...?..
 80a5b30:	4053 080a 4047 080a 403b 080a 4033 080a     S@..G@..;@..3@..
 80a5b40:	4029 080a 401f 080a 3fdb 080a               )@...@...?..

080a5b4c <__sf_fake_stdin>:
	...

080a5b6c <__sf_fake_stdout>:
	...

080a5b8c <__sf_fake_stderr>:
	...
 80a5bac:	0043                                        C.

080a5bae <link_const_variable_data_end>:
	...

080a5bb0 <link_constructors_location>:
 80a5bb0:	080a0a4d 	.word	0x080a0a4d
 80a5bb4:	080a0b29 	.word	0x080a0b29
 80a5bb8:	080a1531 	.word	0x080a1531
 80a5bbc:	080a2869 	.word	0x080a2869
 80a5bc0:	080a2ae9 	.word	0x080a2ae9
 80a5bc4:	080a2ca3 	.word	0x080a2ca3
 80a5bc8:	080a32d9 	.word	0x080a32d9
 80a5bcc:	080a33b9 	.word	0x080a33b9
 80a5bd0:	080a36c1 	.word	0x080a36c1
 80a5bd4:	080a38ed 	.word	0x080a38ed
 80a5bd8:	080a3905 	.word	0x080a3905
 80a5bdc:	080a407d 	.word	0x080a407d
 80a5be0:	080a42a5 	.word	0x080a42a5
 80a5be4:	080a42d5 	.word	0x080a42d5
 80a5be8:	080a4329 	.word	0x080a4329
 80a5bec:	080a43ed 	.word	0x080a43ed
 80a5bf0:	080a4471 	.word	0x080a4471
 80a5bf4:	080a44f5 	.word	0x080a44f5

080a5bf8 <link_constructors_end>:
	...
