
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.1-rc.1/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021c4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a21e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a21e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006e0  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2250  080a2250  00022250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2278  080a2278  00022278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c57f7  00000000  00000000  0002227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000121e4  00000000  00000000  000e7a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019326  00000000  00000000  000f9c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002438  00000000  00000000  00112f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038c8  00000000  00000000  001153b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028e42  00000000  00000000  00118c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002affb  00000000  00000000  00141abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aaa22  00000000  00000000  0016caba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c748  00000000  00000000  002174dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fddb 	bl	80a1be8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fde0 	bl	80a1bfe <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a21e4 	.word	0x080a21e4
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000074c 	.word	0x2000074c
 80a0058:	2000074c 	.word	0x2000074c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb91 	bl	80a1784 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a218c 	.word	0x080a218c
 80a0084:	080a21d4 	.word	0x080a21d4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8af 	bl	80a01f0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bb37 	b.w	80a1708 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bce1 	b.w	80a0a60 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bce7 	b.w	80a0a70 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f000 ffa0 	bl	80a1004 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f001 f8d5 	bl	80a1274 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a202c 	.word	0x080a202c

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 fc2c 	bl	80a1936 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 fc22 	bl	80a1936 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
// the number of steps of the motor and the pins it's
// attached to
Stepper stepper(STEPS, A1, A2, A3, A4);
// Stepper stepperRgith(STEPS, D3, D4, D5, D6);
// setup() runs once, when the device is first turned on.
void setup() {
 80a00f8:	b570      	push	{r4, r5, r6, lr}
  pinMode(D7, OUTPUT);
 80a00fa:	2101      	movs	r1, #1
// the number of steps of the motor and the pins it's
// attached to
Stepper stepper(STEPS, A1, A2, A3, A4);
// Stepper stepperRgith(STEPS, D3, D4, D5, D6);
// setup() runs once, when the device is first turned on.
void setup() {
 80a00fc:	b096      	sub	sp, #88	; 0x58
  pinMode(D7, OUTPUT);
 80a00fe:	2007      	movs	r0, #7
 80a0100:	f001 fb90 	bl	80a1824 <pinMode>
  digitalWrite(D7, LOW);
 80a0104:	2100      	movs	r1, #0
 80a0106:	2007      	movs	r0, #7
 80a0108:	f001 fb9d 	bl	80a1846 <digitalWrite>
  for(int i = 0; i < PIXEL_COUNT; i++){
    pixels[i] = true;
 80a010c:	4a31      	ldr	r2, [pc, #196]	; (80a01d4 <setup+0xdc>)
// Stepper stepperRgith(STEPS, D3, D4, D5, D6);
// setup() runs once, when the device is first turned on.
void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a010e:	2300      	movs	r3, #0
    pixels[i] = true;
 80a0110:	2101      	movs	r1, #1
 80a0112:	5499      	strb	r1, [r3, r2]
// Stepper stepperRgith(STEPS, D3, D4, D5, D6);
// setup() runs once, when the device is first turned on.
void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a0114:	3301      	adds	r3, #1
 80a0116:	2b14      	cmp	r3, #20
 80a0118:	d1fb      	bne.n	80a0112 <setup+0x1a>
    pixels[i] = true;
  }

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a011a:	f001 fa01 	bl	80a1520 <_Z16_fetch_usbserialv>
 80a011e:	f001 f9e6 	bl	80a14ee <_ZN9USBSerialcvbEv>
 80a0122:	2800      	cmp	r0, #0
 80a0124:	d0f9      	beq.n	80a011a <setup+0x22>
 80a0126:	4c2c      	ldr	r4, [pc, #176]	; (80a01d8 <setup+0xe0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0128:	2300      	movs	r3, #0
 80a012a:	461a      	mov	r2, r3
 80a012c:	4619      	mov	r1, r3
 80a012e:	6860      	ldr	r0, [r4, #4]
 80a0130:	f000 fc36 	bl	80a09a0 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0134:	2200      	movs	r2, #0
 80a0136:	4611      	mov	r1, r2
 80a0138:	6860      	ldr	r0, [r4, #4]
 80a013a:	4d27      	ldr	r5, [pc, #156]	; (80a01d8 <setup+0xe0>)
 80a013c:	f000 fc48 	bl	80a09d0 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a0140:	2800      	cmp	r0, #0
 80a0142:	d0f7      	beq.n	80a0134 <setup+0x3c>
  Serial.println("Setup");
 80a0144:	f001 f9ec 	bl	80a1520 <_Z16_fetch_usbserialv>
 80a0148:	4924      	ldr	r1, [pc, #144]	; (80a01dc <setup+0xe4>)
 80a014a:	f000 fe0a 	bl	80a0d62 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a014e:	4b24      	ldr	r3, [pc, #144]	; (80a01e0 <setup+0xe8>)
 80a0150:	2200      	movs	r2, #0
 80a0152:	8819      	ldrh	r1, [r3, #0]
 80a0154:	4823      	ldr	r0, [pc, #140]	; (80a01e4 <setup+0xec>)
 80a0156:	f000 ff30 	bl	80a0fba <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a015a:	2300      	movs	r3, #0
 80a015c:	4619      	mov	r1, r3
 80a015e:	4a22      	ldr	r2, [pc, #136]	; (80a01e8 <setup+0xf0>)
 80a0160:	6868      	ldr	r0, [r5, #4]
 80a0162:	f000 fc6d 	bl	80a0a40 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a0166:	f001 f9db 	bl	80a1520 <_Z16_fetch_usbserialv>
 80a016a:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a016c:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a016e:	2240      	movs	r2, #64	; 0x40
 80a0170:	2100      	movs	r1, #0
 80a0172:	a806      	add	r0, sp, #24
 80a0174:	f001 fd43 	bl	80a1bfe <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0178:	2340      	movs	r3, #64	; 0x40
 80a017a:	aa06      	add	r2, sp, #24
 80a017c:	4621      	mov	r1, r4
 80a017e:	9400      	str	r4, [sp, #0]
 80a0180:	6868      	ldr	r0, [r5, #4]
 80a0182:	f000 fc65 	bl	80a0a50 <network_get_hostname>
        return String(buf);
 80a0186:	a906      	add	r1, sp, #24
 80a0188:	a802      	add	r0, sp, #8
 80a018a:	f000 fea5 	bl	80a0ed8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a018e:	9902      	ldr	r1, [sp, #8]
 80a0190:	4630      	mov	r0, r6
 80a0192:	f000 fde6 	bl	80a0d62 <_ZN5Print7printlnEPKc>
 80a0196:	a802      	add	r0, sp, #8
 80a0198:	f000 fe57 	bl	80a0e4a <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP()); 
 80a019c:	f001 f9c0 	bl	80a1520 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01a0:	4622      	mov	r2, r4
 80a01a2:	4606      	mov	r6, r0
 80a01a4:	4621      	mov	r1, r4
 80a01a6:	6868      	ldr	r0, [r5, #4]
 80a01a8:	f000 fbf2 	bl	80a0990 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01ac:	1c81      	adds	r1, r0, #2
 80a01ae:	a806      	add	r0, sp, #24
 80a01b0:	f000 fce2 	bl	80a0b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01b4:	a906      	add	r1, sp, #24
 80a01b6:	4630      	mov	r0, r6
 80a01b8:	f000 fddd 	bl	80a0d76 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a01bc:	f001 f9b0 	bl	80a1520 <_Z16_fetch_usbserialv>
 80a01c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01c4:	f001 f98c 	bl	80a14e0 <_ZN9USBSerial5beginEl>
  // updateTimer.SetCallback(OnTimer);

  // strip.setBrightness(BRIGHTNESS);
  // strip.begin();
  // strip.show();
    stepper.setSpeed(20);
 80a01c8:	2114      	movs	r1, #20
 80a01ca:	4808      	ldr	r0, [pc, #32]	; (80a01ec <setup+0xf4>)
 80a01cc:	f000 f95a 	bl	80a0484 <_ZN7Stepper8setSpeedEl>
  }
 80a01d0:	b016      	add	sp, #88	; 0x58
 80a01d2:	bd70      	pop	{r4, r5, r6, pc}
 80a01d4:	2000014a 	.word	0x2000014a
 80a01d8:	20000648 	.word	0x20000648
 80a01dc:	080a1d8c 	.word	0x080a1d8c
 80a01e0:	20000000 	.word	0x20000000
 80a01e4:	20000160 	.word	0x20000160
 80a01e8:	080a1d92 	.word	0x080a1d92
 80a01ec:	20000118 	.word	0x20000118

080a01f0 <loop>:
//   }
// }
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // Serial.println("Forward");
  stepper.step(STEPS);
 80a01f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a01f4:	4801      	ldr	r0, [pc, #4]	; (80a01fc <loop+0xc>)
 80a01f6:	f000 ba15 	b.w	80a0624 <_ZN7Stepper4stepEi>
 80a01fa:	bf00      	nop
 80a01fc:	20000118 	.word	0x20000118

080a0200 <_GLOBAL__sub_I_SystemMode>:
// Fill the dots one after the other with a color
void colorWipe(uint8_t wait) {
// fadeIn(wait, 255,128,0);
fadeOut(wait, 255,128,0);
fadeIn(wait, 255,128,0);
}
 80a0200:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0202:	f000 fa77 	bl	80a06f4 <HAL_Pin_Map>
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"
#include "simple-OSC.h"

SYSTEM_THREAD(ENABLED);
 80a0206:	2100      	movs	r1, #0
 80a0208:	2001      	movs	r0, #1
 80a020a:	f000 fb9d 	bl	80a0948 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a020e:	4b1f      	ldr	r3, [pc, #124]	; (80a028c <_GLOBAL__sub_I_SystemMode+0x8c>)
 80a0210:	2200      	movs	r2, #0
 80a0212:	701a      	strb	r2, [r3, #0]
 80a0214:	805a      	strh	r2, [r3, #2]
 80a0216:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a021a:	4d1d      	ldr	r5, [pc, #116]	; (80a0290 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a021c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a021e:	2002      	movs	r0, #2
 80a0220:	f000 fb8a 	bl	80a0938 <set_system_mode>
 80a0224:	4c1b      	ldr	r4, [pc, #108]	; (80a0294 <_GLOBAL__sub_I_SystemMode+0x94>)
 80a0226:	4628      	mov	r0, r5
 80a0228:	f000 fc98 	bl	80a0b5c <_ZN9IPAddressC1Ev>
 80a022c:	4628      	mov	r0, r5
int port;
UDP udp;
 80a022e:	4d1a      	ldr	r5, [pc, #104]	; (80a0298 <_GLOBAL__sub_I_SystemMode+0x98>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0230:	4622      	mov	r2, r4
 80a0232:	491a      	ldr	r1, [pc, #104]	; (80a029c <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a0234:	f001 fb7a 	bl	80a192c <__aeabi_atexit>
int port;
UDP udp;
 80a0238:	4628      	mov	r0, r5
 80a023a:	f000 fffd 	bl	80a1238 <_ZN3UDPC1Ev>
 80a023e:	4622      	mov	r2, r4
 80a0240:	4917      	ldr	r1, [pc, #92]	; (80a02a0 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a0242:	4628      	mov	r0, r5
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0244:	4d17      	ldr	r5, [pc, #92]	; (80a02a4 <_GLOBAL__sub_I_SystemMode+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0246:	f001 fb71 	bl	80a192c <__aeabi_atexit>
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a024a:	2302      	movs	r3, #2
 80a024c:	461a      	mov	r2, r3
 80a024e:	2114      	movs	r1, #20
 80a0250:	4628      	mov	r0, r5
 80a0252:	f000 f8da 	bl	80a040a <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0256:	4622      	mov	r2, r4
 80a0258:	4913      	ldr	r1, [pc, #76]	; (80a02a8 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a025a:	4628      	mov	r0, r5
 80a025c:	f001 fb66 	bl	80a192c <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a0260:	4812      	ldr	r0, [pc, #72]	; (80a02ac <_GLOBAL__sub_I_SystemMode+0xac>)
 80a0262:	f000 f887 	bl	80a0374 <_ZN7LSM9DS1C1Ev>

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
 80a0266:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80a026a:	4811      	ldr	r0, [pc, #68]	; (80a02b0 <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a026c:	f000 f82a 	bl	80a02c4 <_ZN20SparkCorePolledTimerC1Em>
#define STEPS 300
 
// create an instance of the stepper class, specifying
// the number of steps of the motor and the pins it's
// attached to
Stepper stepper(STEPS, A1, A2, A3, A4);
 80a0270:	220d      	movs	r2, #13
 80a0272:	230e      	movs	r3, #14
 80a0274:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0278:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a027c:	230c      	movs	r3, #12
 80a027e:	220b      	movs	r2, #11
 80a0280:	480c      	ldr	r0, [pc, #48]	; (80a02b4 <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a0282:	f000 f8dd 	bl	80a0440 <_ZN7StepperC1Eiiiii>
// Fill the dots one after the other with a color
void colorWipe(uint8_t wait) {
// fadeIn(wait, 255,128,0);
fadeOut(wait, 255,128,0);
fadeIn(wait, 255,128,0);
}
 80a0286:	b003      	add	sp, #12
 80a0288:	bd30      	pop	{r4, r5, pc}
 80a028a:	bf00      	nop
 80a028c:	20000144 	.word	0x20000144
 80a0290:	2000007c 	.word	0x2000007c
 80a0294:	2000006c 	.word	0x2000006c
 80a0298:	20000160 	.word	0x20000160
 80a029c:	080a00b3 	.word	0x080a00b3
 80a02a0:	080a00b5 	.word	0x080a00b5
 80a02a4:	200001ac 	.word	0x200001ac
 80a02a8:	080a0387 	.word	0x080a0387
 80a02ac:	20000094 	.word	0x20000094
 80a02b0:	20000070 	.word	0x20000070
 80a02b4:	20000118 	.word	0x20000118

080a02b8 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a02b8:	b510      	push	{r4, lr}
 80a02ba:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a02bc:	f000 fa12 	bl	80a06e4 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a02c0:	6020      	str	r0, [r4, #0]
 80a02c2:	bd10      	pop	{r4, pc}

080a02c4 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a02c4:	b538      	push	{r3, r4, r5, lr}
 80a02c6:	4604      	mov	r4, r0
 80a02c8:	460d      	mov	r5, r1
    Reset();
 80a02ca:	f7ff fff5 	bl	80a02b8 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a02ce:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a02d0:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a02d2:	60a3      	str	r3, [r4, #8]
}
 80a02d4:	4620      	mov	r0, r4
 80a02d6:	bd38      	pop	{r3, r4, r5, pc}

080a02d8 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a02d8:	f000 ba0c 	b.w	80a06f4 <HAL_Pin_Map>

080a02dc <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a02dc:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a02de:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a02e0:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a02e2:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a02e4:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a02e6:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a02e8:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a02ea:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a02ec:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a02ee:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a02f0:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a02f2:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a02f4:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a02f6:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a02f8:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a02fc:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a02fe:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0300:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a0302:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0304:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0306:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0308:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a030a:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a030c:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a030e:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0310:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a0312:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0314:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0318:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a031a:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a031c:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a031e:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0320:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a0322:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0324:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0326:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0328:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a032a:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a032c:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a032e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a0332:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0334:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0338:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a033c:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a033e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0342:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0346:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a034a:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a034c:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a034e:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0350:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0352:	6565      	str	r5, [r4, #84]	; 0x54
 80a0354:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0358:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a035c:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0360:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0364:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0368:	d1f0      	bne.n	80a034c <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a036a:	f04f 0300 	mov.w	r3, #0
 80a036e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0372:	bd30      	pop	{r4, r5, pc}

080a0374 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0374:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0376:	231e      	movs	r3, #30
 80a0378:	226b      	movs	r2, #107	; 0x6b
 80a037a:	2101      	movs	r1, #1
 80a037c:	f7ff ffae 	bl	80a02dc <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0380:	bd10      	pop	{r4, pc}

080a0382 <_GLOBAL__sub_I_magSensitivity>:
 80a0382:	f000 b9b7 	b.w	80a06f4 <HAL_Pin_Map>

080a0386 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0386:	b510      	push	{r4, lr}
 80a0388:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a038a:	68c0      	ldr	r0, [r0, #12]
 80a038c:	b108      	cbz	r0, 80a0392 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a038e:	f000 fb6f 	bl	80a0a70 <free>
  if (begun) pinMode(pin, INPUT);
 80a0392:	7823      	ldrb	r3, [r4, #0]
 80a0394:	b11b      	cbz	r3, 80a039e <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0396:	2100      	movs	r1, #0
 80a0398:	79e0      	ldrb	r0, [r4, #7]
 80a039a:	f001 fa43 	bl	80a1824 <pinMode>
}
 80a039e:	4620      	mov	r0, r4
 80a03a0:	bd10      	pop	{r4, pc}

080a03a2 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a2:	b538      	push	{r3, r4, r5, lr}
 80a03a4:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a6:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a8:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a03aa:	b108      	cbz	r0, 80a03b0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a03ac:	f000 fb60 	bl	80a0a70 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a03b0:	79a3      	ldrb	r3, [r4, #6]
 80a03b2:	2b06      	cmp	r3, #6
 80a03b4:	bf0c      	ite	eq
 80a03b6:	2004      	moveq	r0, #4
 80a03b8:	2003      	movne	r0, #3
 80a03ba:	4368      	muls	r0, r5
 80a03bc:	b280      	uxth	r0, r0
 80a03be:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a03c0:	f000 fb4e 	bl	80a0a60 <malloc>
 80a03c4:	60e0      	str	r0, [r4, #12]
 80a03c6:	b128      	cbz	r0, 80a03d4 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a03c8:	88a2      	ldrh	r2, [r4, #4]
 80a03ca:	2100      	movs	r1, #0
 80a03cc:	f001 fc17 	bl	80a1bfe <memset>
    numLEDs = n;
 80a03d0:	8065      	strh	r5, [r4, #2]
 80a03d2:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a03d4:	80a0      	strh	r0, [r4, #4]
 80a03d6:	8060      	strh	r0, [r4, #2]
 80a03d8:	bd38      	pop	{r3, r4, r5, pc}

080a03da <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03da:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03dc:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03de:	4605      	mov	r5, r0
 80a03e0:	460c      	mov	r4, r1
    if (begun) {
 80a03e2:	b11b      	cbz	r3, 80a03ec <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03e4:	2100      	movs	r1, #0
 80a03e6:	79c0      	ldrb	r0, [r0, #7]
 80a03e8:	f001 fa1c 	bl	80a1824 <pinMode>
    }
    pin = p;
    if (begun) {
 80a03ec:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a03ee:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a03f0:	b153      	cbz	r3, 80a0408 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a03f2:	b2a4      	uxth	r4, r4
 80a03f4:	4620      	mov	r0, r4
 80a03f6:	2101      	movs	r1, #1
 80a03f8:	f001 fa14 	bl	80a1824 <pinMode>
        digitalWrite(p, LOW);
 80a03fc:	4620      	mov	r0, r4
    }
}
 80a03fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0402:	2100      	movs	r1, #0
 80a0404:	f001 ba1f 	b.w	80a1846 <digitalWrite>
 80a0408:	bd38      	pop	{r3, r4, r5, pc}

080a040a <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a040a:	b570      	push	{r4, r5, r6, lr}
 80a040c:	4604      	mov	r4, r0
 80a040e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0410:	2500      	movs	r5, #0
 80a0412:	7183      	strb	r3, [r0, #6]
 80a0414:	7005      	strb	r5, [r0, #0]
 80a0416:	7205      	strb	r5, [r0, #8]
 80a0418:	60c5      	str	r5, [r0, #12]
 80a041a:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a041c:	f7ff ffc1 	bl	80a03a2 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0420:	4620      	mov	r0, r4
 80a0422:	4631      	mov	r1, r6
 80a0424:	f7ff ffd9 	bl	80a03da <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0428:	4620      	mov	r0, r4
 80a042a:	bd70      	pop	{r4, r5, r6, pc}

080a042c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a042c:	b508      	push	{r3, lr}
 80a042e:	f000 f961 	bl	80a06f4 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0432:	f000 f95f 	bl	80a06f4 <HAL_Pin_Map>
 80a0436:	4b01      	ldr	r3, [pc, #4]	; (80a043c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a0438:	6018      	str	r0, [r3, #0]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	200001c0 	.word	0x200001c0

080a0440 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 80a0440:	b538      	push	{r3, r4, r5, lr}
 80a0442:	4604      	mov	r4, r0
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
 80a0444:	6183      	str	r3, [r0, #24]
  this->motor_pin_3 = motor_pin_3;
 80a0446:	9b04      	ldr	r3, [sp, #16]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a0448:	2500      	movs	r5, #0
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
 80a044a:	61c3      	str	r3, [r0, #28]
  this->motor_pin_4 = motor_pin_4;
 80a044c:	9b05      	ldr	r3, [sp, #20]
  this->direction = 0;      // motor direction
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80a044e:	6142      	str	r2, [r0, #20]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;
 80a0450:	6203      	str	r3, [r0, #32]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a0452:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
 80a0454:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80a0456:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80a0458:	6081      	str	r1, [r0, #8]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 80a045a:	b290      	uxth	r0, r2
 80a045c:	2101      	movs	r1, #1
 80a045e:	f001 f9e1 	bl	80a1824 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
 80a0462:	8b20      	ldrh	r0, [r4, #24]
 80a0464:	2101      	movs	r1, #1
 80a0466:	f001 f9dd 	bl	80a1824 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
 80a046a:	8ba0      	ldrh	r0, [r4, #28]
 80a046c:	2101      	movs	r1, #1
 80a046e:	f001 f9d9 	bl	80a1824 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
 80a0472:	8c20      	ldrh	r0, [r4, #32]
 80a0474:	2101      	movs	r1, #1
 80a0476:	f001 f9d5 	bl	80a1824 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a047a:	2304      	movs	r3, #4
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80a047c:	6265      	str	r5, [r4, #36]	; 0x24

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a047e:	60e3      	str	r3, [r4, #12]
}
 80a0480:	4620      	mov	r0, r4
 80a0482:	bd38      	pop	{r3, r4, r5, pc}

080a0484 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 80a0484:	6882      	ldr	r2, [r0, #8]
 80a0486:	4b03      	ldr	r3, [pc, #12]	; (80a0494 <_ZN7Stepper8setSpeedEl+0x10>)
 80a0488:	fb93 f3f2 	sdiv	r3, r3, r2
 80a048c:	fb93 f1f1 	sdiv	r1, r3, r1
 80a0490:	6041      	str	r1, [r0, #4]
 80a0492:	4770      	bx	lr
 80a0494:	03938700 	.word	0x03938700

080a0498 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a0498:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
 80a049a:	68c3      	ldr	r3, [r0, #12]

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a049c:	4604      	mov	r4, r0
  if (this->pin_count == 2) {
 80a049e:	2b02      	cmp	r3, #2

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a04a0:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
 80a04a2:	d117      	bne.n	80a04d4 <_ZN7Stepper9stepMotorEi+0x3c>
    switch (thisStep) {
 80a04a4:	2903      	cmp	r1, #3
 80a04a6:	d815      	bhi.n	80a04d4 <_ZN7Stepper9stepMotorEi+0x3c>
 80a04a8:	e8df f001 	tbb	[pc, r1]
 80a04ac:	0c0a0402 	.word	0x0c0a0402
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
 80a04b0:	2100      	movs	r1, #0
 80a04b2:	e000      	b.n	80a04b6 <_ZN7Stepper9stepMotorEi+0x1e>
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
 80a04b4:	2101      	movs	r1, #1
 80a04b6:	8aa0      	ldrh	r0, [r4, #20]
 80a04b8:	f001 f9c5 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a04bc:	2101      	movs	r1, #1
 80a04be:	e006      	b.n	80a04ce <_ZN7Stepper9stepMotorEi+0x36>
      break;
      case 2:  // 10
        digitalWrite(motor_pin_1, HIGH);
 80a04c0:	2101      	movs	r1, #1
 80a04c2:	e000      	b.n	80a04c6 <_ZN7Stepper9stepMotorEi+0x2e>
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
 80a04c4:	2100      	movs	r1, #0
 80a04c6:	8aa0      	ldrh	r0, [r4, #20]
 80a04c8:	f001 f9bd 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a04cc:	2100      	movs	r1, #0
 80a04ce:	8b20      	ldrh	r0, [r4, #24]
 80a04d0:	f001 f9b9 	bl	80a1846 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
 80a04d4:	68e3      	ldr	r3, [r4, #12]
 80a04d6:	2b04      	cmp	r3, #4
 80a04d8:	d12f      	bne.n	80a053a <_ZN7Stepper9stepMotorEi+0xa2>
    switch (thisStep) {
 80a04da:	2d03      	cmp	r5, #3
 80a04dc:	d82d      	bhi.n	80a053a <_ZN7Stepper9stepMotorEi+0xa2>
 80a04de:	e8df f005 	tbb	[pc, r5]
 80a04e2:	0802      	.short	0x0802
 80a04e4:	1c16      	.short	0x1c16
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 80a04e6:	2101      	movs	r1, #1
 80a04e8:	8aa0      	ldrh	r0, [r4, #20]
 80a04ea:	f001 f9ac 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a04ee:	2100      	movs	r1, #0
 80a04f0:	e004      	b.n	80a04fc <_ZN7Stepper9stepMotorEi+0x64>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
 80a04f2:	2100      	movs	r1, #0
 80a04f4:	8aa0      	ldrh	r0, [r4, #20]
 80a04f6:	f001 f9a6 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a04fa:	2101      	movs	r1, #1
 80a04fc:	8b20      	ldrh	r0, [r4, #24]
 80a04fe:	f001 f9a2 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a0502:	2101      	movs	r1, #1
 80a0504:	8ba0      	ldrh	r0, [r4, #28]
 80a0506:	f001 f99e 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a050a:	2100      	movs	r1, #0
 80a050c:	e012      	b.n	80a0534 <_ZN7Stepper9stepMotorEi+0x9c>
      break;
      case 2:  //0101
        digitalWrite(motor_pin_1, LOW);
 80a050e:	2100      	movs	r1, #0
 80a0510:	8aa0      	ldrh	r0, [r4, #20]
 80a0512:	f001 f998 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0516:	2101      	movs	r1, #1
 80a0518:	e004      	b.n	80a0524 <_ZN7Stepper9stepMotorEi+0x8c>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
 80a051a:	2101      	movs	r1, #1
 80a051c:	8aa0      	ldrh	r0, [r4, #20]
 80a051e:	f001 f992 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0522:	2100      	movs	r1, #0
 80a0524:	8b20      	ldrh	r0, [r4, #24]
 80a0526:	f001 f98e 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a052a:	2100      	movs	r1, #0
 80a052c:	8ba0      	ldrh	r0, [r4, #28]
 80a052e:	f001 f98a 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a0532:	2101      	movs	r1, #1
 80a0534:	8c20      	ldrh	r0, [r4, #32]
 80a0536:	f001 f986 	bl	80a1846 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
 80a053a:	68e3      	ldr	r3, [r4, #12]
 80a053c:	2b05      	cmp	r3, #5
 80a053e:	d170      	bne.n	80a0622 <_ZN7Stepper9stepMotorEi+0x18a>
    switch (thisStep) {
 80a0540:	2d09      	cmp	r5, #9
 80a0542:	d86e      	bhi.n	80a0622 <_ZN7Stepper9stepMotorEi+0x18a>
 80a0544:	e8df f005 	tbb	[pc, r5]
 80a0548:	23150b05 	.word	0x23150b05
 80a054c:	43352b25 	.word	0x43352b25
 80a0550:	5755      	.short	0x5755
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
 80a0552:	2100      	movs	r1, #0
 80a0554:	8aa0      	ldrh	r0, [r4, #20]
 80a0556:	f001 f976 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a055a:	2101      	movs	r1, #1
 80a055c:	e050      	b.n	80a0600 <_ZN7Stepper9stepMotorEi+0x168>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 1:  // 01001
        digitalWrite(motor_pin_1, LOW);
 80a055e:	2100      	movs	r1, #0
 80a0560:	8aa0      	ldrh	r0, [r4, #20]
 80a0562:	f001 f970 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0566:	2101      	movs	r1, #1
 80a0568:	8b20      	ldrh	r0, [r4, #24]
 80a056a:	f001 f96c 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a056e:	2100      	movs	r1, #0
 80a0570:	e04a      	b.n	80a0608 <_ZN7Stepper9stepMotorEi+0x170>
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 2:  // 01011
        digitalWrite(motor_pin_1, LOW);
 80a0572:	2100      	movs	r1, #0
 80a0574:	8aa0      	ldrh	r0, [r4, #20]
 80a0576:	f001 f966 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a057a:	2101      	movs	r1, #1
 80a057c:	8b20      	ldrh	r0, [r4, #24]
 80a057e:	f001 f962 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a0582:	2100      	movs	r1, #0
 80a0584:	8ba0      	ldrh	r0, [r4, #28]
 80a0586:	f001 f95e 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a058a:	2101      	movs	r1, #1
 80a058c:	e040      	b.n	80a0610 <_ZN7Stepper9stepMotorEi+0x178>
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 3:  // 01010
        digitalWrite(motor_pin_1, LOW);
 80a058e:	2100      	movs	r1, #0
 80a0590:	e000      	b.n	80a0594 <_ZN7Stepper9stepMotorEi+0xfc>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 4:  // 11010
        digitalWrite(motor_pin_1, HIGH);
 80a0592:	2101      	movs	r1, #1
 80a0594:	8aa0      	ldrh	r0, [r4, #20]
 80a0596:	f001 f956 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a059a:	2101      	movs	r1, #1
 80a059c:	e004      	b.n	80a05a8 <_ZN7Stepper9stepMotorEi+0x110>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 5:  // 10010
        digitalWrite(motor_pin_1, HIGH);
 80a059e:	2101      	movs	r1, #1
 80a05a0:	8aa0      	ldrh	r0, [r4, #20]
 80a05a2:	f001 f950 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a05a6:	2100      	movs	r1, #0
 80a05a8:	8b20      	ldrh	r0, [r4, #24]
 80a05aa:	f001 f94c 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a05ae:	2100      	movs	r1, #0
 80a05b0:	e008      	b.n	80a05c4 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 6:  // 10110
        digitalWrite(motor_pin_1, HIGH);
 80a05b2:	2101      	movs	r1, #1
 80a05b4:	8aa0      	ldrh	r0, [r4, #20]
 80a05b6:	f001 f946 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a05ba:	2100      	movs	r1, #0
 80a05bc:	8b20      	ldrh	r0, [r4, #24]
 80a05be:	f001 f942 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a05c2:	2101      	movs	r1, #1
 80a05c4:	8ba0      	ldrh	r0, [r4, #28]
 80a05c6:	f001 f93e 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a05ca:	2101      	movs	r1, #1
 80a05cc:	e00c      	b.n	80a05e8 <_ZN7Stepper9stepMotorEi+0x150>
        digitalWrite(motor_pin_5, LOW);
        break;
      case 7:  // 10100
        digitalWrite(motor_pin_1, HIGH);
 80a05ce:	2101      	movs	r1, #1
 80a05d0:	8aa0      	ldrh	r0, [r4, #20]
 80a05d2:	f001 f938 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a05d6:	2100      	movs	r1, #0
 80a05d8:	8b20      	ldrh	r0, [r4, #24]
 80a05da:	f001 f934 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a05de:	2101      	movs	r1, #1
 80a05e0:	8ba0      	ldrh	r0, [r4, #28]
 80a05e2:	f001 f930 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a05e6:	2100      	movs	r1, #0
 80a05e8:	8c20      	ldrh	r0, [r4, #32]
 80a05ea:	f001 f92c 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
 80a05ee:	2100      	movs	r1, #0
 80a05f0:	e012      	b.n	80a0618 <_ZN7Stepper9stepMotorEi+0x180>
        break;
      case 8:  // 10101
        digitalWrite(motor_pin_1, HIGH);
 80a05f2:	2101      	movs	r1, #1
 80a05f4:	e000      	b.n	80a05f8 <_ZN7Stepper9stepMotorEi+0x160>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
 80a05f6:	2100      	movs	r1, #0
 80a05f8:	8aa0      	ldrh	r0, [r4, #20]
 80a05fa:	f001 f924 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a05fe:	2100      	movs	r1, #0
 80a0600:	8b20      	ldrh	r0, [r4, #24]
 80a0602:	f001 f920 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a0606:	2101      	movs	r1, #1
 80a0608:	8ba0      	ldrh	r0, [r4, #28]
 80a060a:	f001 f91c 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a060e:	2100      	movs	r1, #0
 80a0610:	8c20      	ldrh	r0, [r4, #32]
 80a0612:	f001 f918 	bl	80a1846 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
 80a0616:	2101      	movs	r1, #1
 80a0618:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
 80a061a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
 80a061e:	f001 b912 	b.w	80a1846 <digitalWrite>
 80a0622:	bd38      	pop	{r3, r4, r5, pc}

080a0624 <_ZN7Stepper4stepEi>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a0624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int steps_left = abs(steps_to_move);  // how many steps to take

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a0626:	2900      	cmp	r1, #0
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a0628:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a062c:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a062e:	eba5 75e1 	sub.w	r5, r5, r1, asr #31

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a0632:	dd01      	ble.n	80a0638 <_ZN7Stepper4stepEi+0x14>
 80a0634:	2301      	movs	r3, #1
 80a0636:	e001      	b.n	80a063c <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
 80a0638:	d001      	beq.n	80a063e <_ZN7Stepper4stepEi+0x1a>
 80a063a:	2300      	movs	r3, #0
 80a063c:	6023      	str	r3, [r4, #0]
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
          this->step_number = 0;
 80a063e:	2700      	movs	r7, #0
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
        stepMotor(this->step_number % 10);
 80a0640:	260a      	movs	r6, #10
  if (steps_to_move > 0) { this->direction = 1; }
  if (steps_to_move < 0) { this->direction = 0; }


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80a0642:	2d00      	cmp	r5, #0
 80a0644:	d02f      	beq.n	80a06a6 <_ZN7Stepper4stepEi+0x82>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0646:	f000 f845 	bl	80a06d4 <HAL_Timer_Get_Micro_Seconds>
  {
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
 80a064a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a064c:	6862      	ldr	r2, [r4, #4]
 80a064e:	1ac3      	subs	r3, r0, r3
 80a0650:	4293      	cmp	r3, r2
 80a0652:	d3f6      	bcc.n	80a0642 <_ZN7Stepper4stepEi+0x1e>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a0654:	6823      	ldr	r3, [r4, #0]
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80a0656:	62a0      	str	r0, [r4, #40]	; 0x28
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a0658:	2b01      	cmp	r3, #1
 80a065a:	6923      	ldr	r3, [r4, #16]
 80a065c:	d106      	bne.n	80a066c <_ZN7Stepper4stepEi+0x48>
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
 80a065e:	68a2      	ldr	r2, [r4, #8]
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a0660:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
 80a0662:	4293      	cmp	r3, r2
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a0664:	6123      	str	r3, [r4, #16]
        if (this->step_number == this->number_of_steps) {
 80a0666:	d107      	bne.n	80a0678 <_ZN7Stepper4stepEi+0x54>
          this->step_number = 0;
 80a0668:	6127      	str	r7, [r4, #16]
 80a066a:	e005      	b.n	80a0678 <_ZN7Stepper4stepEi+0x54>
        }
      }
      else
      {
        if (this->step_number == 0) {
 80a066c:	b90b      	cbnz	r3, 80a0672 <_ZN7Stepper4stepEi+0x4e>
          this->step_number = this->number_of_steps;
 80a066e:	68a3      	ldr	r3, [r4, #8]
 80a0670:	6123      	str	r3, [r4, #16]
        }
        this->step_number--;
 80a0672:	6923      	ldr	r3, [r4, #16]
 80a0674:	3b01      	subs	r3, #1
 80a0676:	6123      	str	r3, [r4, #16]
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a0678:	68e3      	ldr	r3, [r4, #12]
          this->step_number = this->number_of_steps;
        }
        this->step_number--;
      }
      // decrement the steps left:
      steps_left--;
 80a067a:	3d01      	subs	r5, #1
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a067c:	2b05      	cmp	r3, #5
 80a067e:	6923      	ldr	r3, [r4, #16]
 80a0680:	d104      	bne.n	80a068c <_ZN7Stepper4stepEi+0x68>
        stepMotor(this->step_number % 10);
 80a0682:	fb93 f1f6 	sdiv	r1, r3, r6
 80a0686:	fb06 3111 	mls	r1, r6, r1, r3
 80a068a:	e008      	b.n	80a069e <_ZN7Stepper4stepEi+0x7a>
      else
        stepMotor(this->step_number % 4);
 80a068c:	4906      	ldr	r1, [pc, #24]	; (80a06a8 <_ZN7Stepper4stepEi+0x84>)
 80a068e:	4019      	ands	r1, r3
 80a0690:	2900      	cmp	r1, #0
 80a0692:	bfbe      	ittt	lt
 80a0694:	f101 31ff 	addlt.w	r1, r1, #4294967295	; 0xffffffff
 80a0698:	f061 0103 	ornlt	r1, r1, #3
 80a069c:	3101      	addlt	r1, #1
 80a069e:	4620      	mov	r0, r4
 80a06a0:	f7ff fefa 	bl	80a0498 <_ZN7Stepper9stepMotorEi>
 80a06a4:	e7cd      	b.n	80a0642 <_ZN7Stepper4stepEi+0x1e>
 80a06a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a06a8:	80000003 	.word	0x80000003

080a06ac <_GLOBAL__sub_I__ZN7StepperC2Eiii>:
 80a06ac:	f000 b822 	b.w	80a06f4 <HAL_Pin_Map>

080a06b0 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a06b0:	f000 b820 	b.w	80a06f4 <HAL_Pin_Map>

080a06b4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <os_mutex_create+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601d0 	.word	0x080601d0

080a06c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	685b      	ldr	r3, [r3, #4]
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	0806019c 	.word	0x0806019c

080a06d4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	691b      	ldr	r3, [r3, #16]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	0806019c 	.word	0x0806019c

080a06e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	695b      	ldr	r3, [r3, #20]
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	0806019c 	.word	0x0806019c

080a06f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <HAL_Pin_Map+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	681b      	ldr	r3, [r3, #0]
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601b0 	.word	0x080601b0

080a0704 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <HAL_Pin_Mode+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	689b      	ldr	r3, [r3, #8]
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601b0 	.word	0x080601b0

080a0714 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <HAL_Get_Pin_Mode+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	68db      	ldr	r3, [r3, #12]
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601b0 	.word	0x080601b0

080a0724 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <HAL_GPIO_Write+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	691b      	ldr	r3, [r3, #16]
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601b0 	.word	0x080601b0

080a0734 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <HAL_I2C_Write_Data+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601ac 	.word	0x080601ac

080a0744 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <HAL_I2C_Available_Data+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601ac 	.word	0x080601ac

080a0754 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <HAL_I2C_Read_Data+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601ac 	.word	0x080601ac

080a0764 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <HAL_I2C_Peek_Data+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601ac 	.word	0x080601ac

080a0774 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b02      	ldr	r3, [pc, #8]	; (80a0780 <HAL_I2C_Flush_Data+0xc>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a077c:	9301      	str	r3, [sp, #4]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	080601ac 	.word	0x080601ac

080a0784 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <HAL_I2C_Is_Enabled+0xc>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a078c:	9301      	str	r3, [sp, #4]
 80a078e:	bd08      	pop	{r3, pc}
 80a0790:	080601ac 	.word	0x080601ac

080a0794 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b03      	ldr	r3, [pc, #12]	; (80a07a4 <HAL_I2C_Init+0x10>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a079e:	9301      	str	r3, [sp, #4]
 80a07a0:	bd08      	pop	{r3, pc}
 80a07a2:	0000      	.short	0x0000
 80a07a4:	080601ac 	.word	0x080601ac

080a07a8 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <socket_handle_valid+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	685b      	ldr	r3, [r3, #4]
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601bc 	.word	0x080601bc

080a07b8 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <socket_create+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	689b      	ldr	r3, [r3, #8]
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601bc 	.word	0x080601bc

080a07c8 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <socket_receivefrom+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	695b      	ldr	r3, [r3, #20]
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601bc 	.word	0x080601bc

080a07d8 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <socket_sendto+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	69db      	ldr	r3, [r3, #28]
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601bc 	.word	0x080601bc

080a07e8 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <socket_close+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6a1b      	ldr	r3, [r3, #32]
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601bc 	.word	0x080601bc

080a07f8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <socket_handle_invalid+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601bc 	.word	0x080601bc

080a0808 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <HAL_SPI_Init+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	69db      	ldr	r3, [r3, #28]
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601b4 	.word	0x080601b4

080a0818 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <HAL_SPI_Is_Enabled+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6a1b      	ldr	r3, [r3, #32]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601b4 	.word	0x080601b4

080a0828 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <HAL_USART_Init+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	699b      	ldr	r3, [r3, #24]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c4 	.word	0x080601c4

080a0838 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <HAL_USART_Write_Data+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601c4 	.word	0x080601c4

080a0848 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <HAL_USART_Available_Data+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c4 	.word	0x080601c4

080a0858 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <HAL_USART_Read_Data+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c4 	.word	0x080601c4

080a0868 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <HAL_USART_Peek_Data+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601c4 	.word	0x080601c4

080a0878 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <HAL_USART_Flush_Data+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601c4 	.word	0x080601c4

080a0888 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_USART_Is_Enabled+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601c4 	.word	0x080601c4

080a0898 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c4 	.word	0x080601c4

080a08a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <HAL_USB_USART_Init+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	681b      	ldr	r3, [r3, #0]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601d8 	.word	0x080601d8

080a08b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <HAL_USB_USART_Begin+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	685b      	ldr	r3, [r3, #4]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601d8 	.word	0x080601d8

080a08c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <HAL_USB_USART_Available_Data+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	691b      	ldr	r3, [r3, #16]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601d8 	.word	0x080601d8

080a08d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	695b      	ldr	r3, [r3, #20]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601d8 	.word	0x080601d8

080a08e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <HAL_USB_USART_Receive_Data+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	699b      	ldr	r3, [r3, #24]
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601d8 	.word	0x080601d8

080a08f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <HAL_USB_USART_Send_Data+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	69db      	ldr	r3, [r3, #28]
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601d8 	.word	0x080601d8

080a0908 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <HAL_USB_USART_Flush_Data+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6a1b      	ldr	r3, [r3, #32]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601d8 	.word	0x080601d8

080a0918 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <HAL_USB_USART_Is_Enabled+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601d8 	.word	0x080601d8

080a0928 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <inet_gethostbyname+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c0 	.word	0x080601c0

080a0938 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <set_system_mode+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	685b      	ldr	r3, [r3, #4]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601a4 	.word	0x080601a4

080a0948 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <system_thread_set_state+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601a4 	.word	0x080601a4

080a0958 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b03      	ldr	r3, [pc, #12]	; (80a0968 <system_ctrl_set_app_request_handler+0x10>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0962:	9301      	str	r3, [sp, #4]
 80a0964:	bd08      	pop	{r3, pc}
 80a0966:	0000      	.short	0x0000
 80a0968:	080601a4 	.word	0x080601a4

080a096c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b03      	ldr	r3, [pc, #12]	; (80a097c <system_ctrl_set_result+0x10>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0976:	9301      	str	r3, [sp, #4]
 80a0978:	bd08      	pop	{r3, pc}
 80a097a:	0000      	.short	0x0000
 80a097c:	080601a4 	.word	0x080601a4

080a0980 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601cc 	.word	0x080601cc

080a0990 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <network_config+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	681b      	ldr	r3, [r3, #0]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601c8 	.word	0x080601c8

080a09a0 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <network_connect+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	685b      	ldr	r3, [r3, #4]
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601c8 	.word	0x080601c8

080a09b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <network_connecting+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	689b      	ldr	r3, [r3, #8]
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c8 	.word	0x080601c8

080a09c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <network_disconnect+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	68db      	ldr	r3, [r3, #12]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601c8 	.word	0x080601c8

080a09d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <network_ready+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	691b      	ldr	r3, [r3, #16]
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601c8 	.word	0x080601c8

080a09e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <network_on+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	695b      	ldr	r3, [r3, #20]
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601c8 	.word	0x080601c8

080a09f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <network_off+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	699b      	ldr	r3, [r3, #24]
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601c8 	.word	0x080601c8

080a0a00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <network_listen+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	69db      	ldr	r3, [r3, #28]
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601c8 	.word	0x080601c8

080a0a10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <network_listening+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6a1b      	ldr	r3, [r3, #32]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601c8 	.word	0x080601c8

080a0a20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <network_set_listen_timeout+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601c8 	.word	0x080601c8

080a0a30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <network_get_listen_timeout+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601c8 	.word	0x080601c8

080a0a40 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <network_set_hostname+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601c8 	.word	0x080601c8

080a0a50 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <network_get_hostname+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601c8 	.word	0x080601c8

080a0a60 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <malloc+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	681b      	ldr	r3, [r3, #0]
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601a0 	.word	0x080601a0

080a0a70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <free+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	685b      	ldr	r3, [r3, #4]
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601a0 	.word	0x080601a0

080a0a80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <realloc+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	689b      	ldr	r3, [r3, #8]
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601a0 	.word	0x080601a0

080a0a90 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a90:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a92:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a94:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0a96:	b113      	cbz	r3, 80a0a9e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a98:	2203      	movs	r2, #3
 80a0a9a:	4601      	mov	r1, r0
 80a0a9c:	4798      	blx	r3
    }
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	bd10      	pop	{r4, pc}

080a0aa2 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0aa2:	4770      	bx	lr

080a0aa4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0aa6:	4606      	mov	r6, r0
 80a0aa8:	4615      	mov	r5, r2
 80a0aaa:	460c      	mov	r4, r1
 80a0aac:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0aae:	42bc      	cmp	r4, r7
 80a0ab0:	d006      	beq.n	80a0ac0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0ab2:	6833      	ldr	r3, [r6, #0]
 80a0ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0ab8:	689b      	ldr	r3, [r3, #8]
 80a0aba:	4630      	mov	r0, r6
 80a0abc:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0abe:	e7f6      	b.n	80a0aae <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0ac0:	4628      	mov	r0, r5
 80a0ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ac4 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0ac4:	2200      	movs	r2, #0
 80a0ac6:	7c00      	ldrb	r0, [r0, #16]
 80a0ac8:	f7ff be34 	b.w	80a0734 <HAL_I2C_Write_Data>

080a0acc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0acc:	2100      	movs	r1, #0
 80a0ace:	7c00      	ldrb	r0, [r0, #16]
 80a0ad0:	f7ff be38 	b.w	80a0744 <HAL_I2C_Available_Data>

080a0ad4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0ad4:	2100      	movs	r1, #0
 80a0ad6:	7c00      	ldrb	r0, [r0, #16]
 80a0ad8:	f7ff be3c 	b.w	80a0754 <HAL_I2C_Read_Data>

080a0adc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0adc:	2100      	movs	r1, #0
 80a0ade:	7c00      	ldrb	r0, [r0, #16]
 80a0ae0:	f7ff be40 	b.w	80a0764 <HAL_I2C_Peek_Data>

080a0ae4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0ae4:	2100      	movs	r1, #0
 80a0ae6:	7c00      	ldrb	r0, [r0, #16]
 80a0ae8:	f7ff be44 	b.w	80a0774 <HAL_I2C_Flush_Data>

080a0aec <_ZN7TwoWireD0Ev>:
 80a0aec:	b510      	push	{r4, lr}
 80a0aee:	4604      	mov	r4, r0
 80a0af0:	2114      	movs	r1, #20
 80a0af2:	f000 ff20 	bl	80a1936 <_ZdlPvj>
 80a0af6:	4620      	mov	r0, r4
 80a0af8:	bd10      	pop	{r4, pc}
	...

080a0afc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0afc:	b510      	push	{r4, lr}
 80a0afe:	4604      	mov	r4, r0
 80a0b00:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0b06:	60a3      	str	r3, [r4, #8]
 80a0b08:	4b04      	ldr	r3, [pc, #16]	; (80a0b1c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0b0a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0b0c:	7420      	strb	r0, [r4, #16]
 80a0b0e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0b10:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0b12:	f7ff fe3f 	bl	80a0794 <HAL_I2C_Init>

}
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	bd10      	pop	{r4, pc}
 80a0b1a:	bf00      	nop
 80a0b1c:	080a1e9c 	.word	0x080a1e9c

080a0b20 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0b20:	2100      	movs	r1, #0
 80a0b22:	7c00      	ldrb	r0, [r0, #16]
 80a0b24:	f7ff be2e 	b.w	80a0784 <HAL_I2C_Is_Enabled>

080a0b28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b2a:	460f      	mov	r7, r1
 80a0b2c:	f100 0608 	add.w	r6, r0, #8
 80a0b30:	1d05      	adds	r5, r0, #4
 80a0b32:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0b38:	220a      	movs	r2, #10
 80a0b3a:	4638      	mov	r0, r7
 80a0b3c:	f000 f94f 	bl	80a0dde <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b40:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b42:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b44:	d007      	beq.n	80a0b56 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0b46:	2c00      	cmp	r4, #0
 80a0b48:	d0f4      	beq.n	80a0b34 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0b4a:	212e      	movs	r1, #46	; 0x2e
 80a0b4c:	4638      	mov	r0, r7
 80a0b4e:	f000 f8f3 	bl	80a0d38 <_ZN5Print5printEc>
 80a0b52:	4404      	add	r4, r0
 80a0b54:	e7ee      	b.n	80a0b34 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0b5c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0b5c:	b510      	push	{r4, lr}
 80a0b5e:	4604      	mov	r4, r0
 80a0b60:	4b04      	ldr	r3, [pc, #16]	; (80a0b74 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0b62:	2211      	movs	r2, #17
 80a0b64:	f840 3b04 	str.w	r3, [r0], #4
 80a0b68:	2100      	movs	r1, #0
 80a0b6a:	f001 f848 	bl	80a1bfe <memset>
{
    clear();
}
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	bd10      	pop	{r4, pc}
 80a0b72:	bf00      	nop
 80a0b74:	080a1ec4 	.word	0x080a1ec4

080a0b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0b78:	4603      	mov	r3, r0
 80a0b7a:	4a07      	ldr	r2, [pc, #28]	; (80a0b98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0b7c:	b510      	push	{r4, lr}
 80a0b7e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0b82:	f101 0210 	add.w	r2, r1, #16
 80a0b86:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0b8a:	4291      	cmp	r1, r2
 80a0b8c:	f843 4b04 	str.w	r4, [r3], #4
 80a0b90:	d1f9      	bne.n	80a0b86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0b92:	780a      	ldrb	r2, [r1, #0]
 80a0b94:	701a      	strb	r2, [r3, #0]
}
 80a0b96:	bd10      	pop	{r4, pc}
 80a0b98:	080a1ec4 	.word	0x080a1ec4

080a0b9c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b9c:	4a02      	ldr	r2, [pc, #8]	; (80a0ba8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0b9e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0ba0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0ba2:	2204      	movs	r2, #4
 80a0ba4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0ba6:	4770      	bx	lr
 80a0ba8:	080a1ec4 	.word	0x080a1ec4

080a0bac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0bac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0bae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0bb2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0bb6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0bba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0bbe:	2304      	movs	r3, #4
 80a0bc0:	6041      	str	r1, [r0, #4]
 80a0bc2:	7503      	strb	r3, [r0, #20]
 80a0bc4:	bd10      	pop	{r4, pc}
	...

080a0bc8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0bca:	4d04      	ldr	r5, [pc, #16]	; (80a0bdc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0bcc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0bce:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0bd2:	9500      	str	r5, [sp, #0]
 80a0bd4:	f7ff ffea 	bl	80a0bac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0bd8:	b003      	add	sp, #12
 80a0bda:	bd30      	pop	{r4, r5, pc}
 80a0bdc:	080a1ec4 	.word	0x080a1ec4

080a0be0 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0be2:	780d      	ldrb	r5, [r1, #0]
 80a0be4:	788b      	ldrb	r3, [r1, #2]
 80a0be6:	784a      	ldrb	r2, [r1, #1]
 80a0be8:	78c9      	ldrb	r1, [r1, #3]
 80a0bea:	9100      	str	r1, [sp, #0]
 80a0bec:	4629      	mov	r1, r5
 80a0bee:	f7ff ffdd 	bl	80a0bac <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0bf2:	b003      	add	sp, #12
 80a0bf4:	bd30      	pop	{r4, r5, pc}
	...

080a0bf8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0bf8:	4a01      	ldr	r2, [pc, #4]	; (80a0c00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0bfa:	4b02      	ldr	r3, [pc, #8]	; (80a0c04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0bfc:	601a      	str	r2, [r3, #0]
 80a0bfe:	4770      	bx	lr
 80a0c00:	080a1f46 	.word	0x080a1f46
 80a0c04:	200001c4 	.word	0x200001c4

080a0c08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0c08:	2300      	movs	r3, #0
 80a0c0a:	461a      	mov	r2, r3
 80a0c0c:	6840      	ldr	r0, [r0, #4]
 80a0c0e:	f7ff bec7 	b.w	80a09a0 <network_connect>

080a0c12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0c12:	2200      	movs	r2, #0
 80a0c14:	2102      	movs	r1, #2
 80a0c16:	6840      	ldr	r0, [r0, #4]
 80a0c18:	f7ff bed2 	b.w	80a09c0 <network_disconnect>

080a0c1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0c1c:	2200      	movs	r2, #0
 80a0c1e:	4611      	mov	r1, r2
 80a0c20:	6840      	ldr	r0, [r0, #4]
 80a0c22:	f7ff bec5 	b.w	80a09b0 <network_connecting>

080a0c26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0c26:	2200      	movs	r2, #0
 80a0c28:	4611      	mov	r1, r2
 80a0c2a:	6840      	ldr	r0, [r0, #4]
 80a0c2c:	f7ff bed0 	b.w	80a09d0 <network_ready>

080a0c30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0c30:	2300      	movs	r3, #0
 80a0c32:	461a      	mov	r2, r3
 80a0c34:	4619      	mov	r1, r3
 80a0c36:	6840      	ldr	r0, [r0, #4]
 80a0c38:	f7ff bed2 	b.w	80a09e0 <network_on>

080a0c3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0c3c:	2300      	movs	r3, #0
 80a0c3e:	461a      	mov	r2, r3
 80a0c40:	4619      	mov	r1, r3
 80a0c42:	6840      	ldr	r0, [r0, #4]
 80a0c44:	f7ff bed4 	b.w	80a09f0 <network_off>

080a0c48 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0c48:	2200      	movs	r2, #0
 80a0c4a:	f081 0101 	eor.w	r1, r1, #1
 80a0c4e:	6840      	ldr	r0, [r0, #4]
 80a0c50:	f7ff bed6 	b.w	80a0a00 <network_listen>

080a0c54 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0c54:	2200      	movs	r2, #0
 80a0c56:	6840      	ldr	r0, [r0, #4]
 80a0c58:	f7ff bee2 	b.w	80a0a20 <network_set_listen_timeout>

080a0c5c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0c5c:	2200      	movs	r2, #0
 80a0c5e:	4611      	mov	r1, r2
 80a0c60:	6840      	ldr	r0, [r0, #4]
 80a0c62:	f7ff bee5 	b.w	80a0a30 <network_get_listen_timeout>

080a0c66 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0c66:	2200      	movs	r2, #0
 80a0c68:	4611      	mov	r1, r2
 80a0c6a:	6840      	ldr	r0, [r0, #4]
 80a0c6c:	f7ff bed0 	b.w	80a0a10 <network_listening>

080a0c70 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0c70:	b570      	push	{r4, r5, r6, lr}
 80a0c72:	4616      	mov	r6, r2
 80a0c74:	b08e      	sub	sp, #56	; 0x38
 80a0c76:	4604      	mov	r4, r0
    IPAddress addr;
 80a0c78:	a808      	add	r0, sp, #32
 80a0c7a:	f7ff ff6f 	bl	80a0b5c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0c7e:	2211      	movs	r2, #17
 80a0c80:	2100      	movs	r1, #0
 80a0c82:	a803      	add	r0, sp, #12
 80a0c84:	f000 ffbb 	bl	80a1bfe <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c88:	4630      	mov	r0, r6
 80a0c8a:	f000 ffe9 	bl	80a1c60 <strlen>
 80a0c8e:	2500      	movs	r5, #0
 80a0c90:	4b0a      	ldr	r3, [pc, #40]	; (80a0cbc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0c92:	9500      	str	r5, [sp, #0]
 80a0c94:	b281      	uxth	r1, r0
 80a0c96:	685b      	ldr	r3, [r3, #4]
 80a0c98:	aa03      	add	r2, sp, #12
 80a0c9a:	4630      	mov	r0, r6
 80a0c9c:	f7ff fe44 	bl	80a0928 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ca0:	b120      	cbz	r0, 80a0cac <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0ca2:	4629      	mov	r1, r5
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	f7ff ff79 	bl	80a0b9c <_ZN9IPAddressC1Em>
 80a0caa:	e003      	b.n	80a0cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0cac:	a903      	add	r1, sp, #12
 80a0cae:	4620      	mov	r0, r4
 80a0cb0:	f7ff ff62 	bl	80a0b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	b00e      	add	sp, #56	; 0x38
 80a0cb8:	bd70      	pop	{r4, r5, r6, pc}
 80a0cba:	bf00      	nop
 80a0cbc:	20000648 	.word	0x20000648

080a0cc0 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0cc0:	4b03      	ldr	r3, [pc, #12]	; (80a0cd0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0cc2:	4a04      	ldr	r2, [pc, #16]	; (80a0cd4 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0cc4:	2804      	cmp	r0, #4
 80a0cc6:	bf0c      	ite	eq
 80a0cc8:	4610      	moveq	r0, r2
 80a0cca:	4618      	movne	r0, r3
 80a0ccc:	4770      	bx	lr
 80a0cce:	bf00      	nop
 80a0cd0:	200001c8 	.word	0x200001c8
 80a0cd4:	20000648 	.word	0x20000648

080a0cd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0cd8:	4b02      	ldr	r3, [pc, #8]	; (80a0ce4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0cda:	4a03      	ldr	r2, [pc, #12]	; (80a0ce8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0cdc:	601a      	str	r2, [r3, #0]
 80a0cde:	2200      	movs	r2, #0
 80a0ce0:	605a      	str	r2, [r3, #4]
 80a0ce2:	4770      	bx	lr
 80a0ce4:	200001c8 	.word	0x200001c8
 80a0ce8:	080a1fbc 	.word	0x080a1fbc

080a0cec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cee:	4606      	mov	r6, r0
 80a0cf0:	460d      	mov	r5, r1
 80a0cf2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0cf4:	2400      	movs	r4, #0
  while (size--) {
 80a0cf6:	42bd      	cmp	r5, r7
 80a0cf8:	d00c      	beq.n	80a0d14 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0cfa:	6833      	ldr	r3, [r6, #0]
 80a0cfc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0d00:	689b      	ldr	r3, [r3, #8]
 80a0d02:	4630      	mov	r0, r6
 80a0d04:	4798      	blx	r3
     if (chunk>=0)
 80a0d06:	2800      	cmp	r0, #0
 80a0d08:	db01      	blt.n	80a0d0e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0d0a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0d0c:	e7f3      	b.n	80a0cf6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0d0e:	2c00      	cmp	r4, #0
 80a0d10:	bf08      	it	eq
 80a0d12:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d18 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0d18:	b570      	push	{r4, r5, r6, lr}
 80a0d1a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0d1c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0d1e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0d20:	b149      	cbz	r1, 80a0d36 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0d22:	f000 ff9d 	bl	80a1c60 <strlen>
 80a0d26:	682b      	ldr	r3, [r5, #0]
 80a0d28:	4602      	mov	r2, r0
 80a0d2a:	4621      	mov	r1, r4
 80a0d2c:	4628      	mov	r0, r5
    }
 80a0d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0d32:	68db      	ldr	r3, [r3, #12]
 80a0d34:	4718      	bx	r3
    }
 80a0d36:	bd70      	pop	{r4, r5, r6, pc}

080a0d38 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0d38:	6803      	ldr	r3, [r0, #0]
 80a0d3a:	689b      	ldr	r3, [r3, #8]
 80a0d3c:	4718      	bx	r3

080a0d3e <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a0d3e:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a0d40:	680a      	ldr	r2, [r1, #0]
 80a0d42:	4601      	mov	r1, r0
 80a0d44:	6812      	ldr	r2, [r2, #0]
 80a0d46:	4618      	mov	r0, r3
 80a0d48:	4710      	bx	r2

080a0d4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0d4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0d4c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0d4e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0d50:	f7ff fff2 	bl	80a0d38 <_ZN5Print5printEc>
  n += print('\n');
 80a0d54:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0d56:	4604      	mov	r4, r0
  n += print('\n');
 80a0d58:	4628      	mov	r0, r5
 80a0d5a:	f7ff ffed 	bl	80a0d38 <_ZN5Print5printEc>
  return n;
}
 80a0d5e:	4420      	add	r0, r4
 80a0d60:	bd38      	pop	{r3, r4, r5, pc}

080a0d62 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0d62:	b538      	push	{r3, r4, r5, lr}
 80a0d64:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0d66:	f7ff ffd7 	bl	80a0d18 <_ZN5Print5writeEPKc>
 80a0d6a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0d6c:	4628      	mov	r0, r5
 80a0d6e:	f7ff ffec 	bl	80a0d4a <_ZN5Print7printlnEv>
  return n;
}
 80a0d72:	4420      	add	r0, r4
 80a0d74:	bd38      	pop	{r3, r4, r5, pc}

080a0d76 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0d76:	b538      	push	{r3, r4, r5, lr}
 80a0d78:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0d7a:	f7ff ffe0 	bl	80a0d3e <_ZN5Print5printERK9Printable>
 80a0d7e:	4604      	mov	r4, r0
   n += println();
 80a0d80:	4628      	mov	r0, r5
 80a0d82:	f7ff ffe2 	bl	80a0d4a <_ZN5Print7printlnEv>
   return n;
 }
 80a0d86:	4420      	add	r0, r4
 80a0d88:	bd38      	pop	{r3, r4, r5, pc}

080a0d8a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0d8a:	2a01      	cmp	r2, #1
 80a0d8c:	bf98      	it	ls
 80a0d8e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0d90:	b530      	push	{r4, r5, lr}
 80a0d92:	460b      	mov	r3, r1
 80a0d94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0d96:	2100      	movs	r1, #0
 80a0d98:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0d9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0da0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0da4:	fb05 3312 	mls	r3, r5, r2, r3
 80a0da8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0daa:	2b09      	cmp	r3, #9
 80a0dac:	bf94      	ite	ls
 80a0dae:	3330      	addls	r3, #48	; 0x30
 80a0db0:	3337      	addhi	r3, #55	; 0x37
 80a0db2:	b2db      	uxtb	r3, r3
 80a0db4:	4621      	mov	r1, r4
 80a0db6:	f804 3901 	strb.w	r3, [r4], #-1
 80a0dba:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0dbc:	2d00      	cmp	r5, #0
 80a0dbe:	d1ef      	bne.n	80a0da0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0dc0:	f7ff ffaa 	bl	80a0d18 <_ZN5Print5writeEPKc>
}
 80a0dc4:	b00b      	add	sp, #44	; 0x2c
 80a0dc6:	bd30      	pop	{r4, r5, pc}

080a0dc8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0dc8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0dca:	b922      	cbnz	r2, 80a0dd6 <_ZN5Print5printEmi+0xe>
 80a0dcc:	6803      	ldr	r3, [r0, #0]
 80a0dce:	b2c9      	uxtb	r1, r1
 80a0dd0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0dd2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0dd4:	4718      	bx	r3
  else return printNumber(n, base);
 80a0dd6:	b2d2      	uxtb	r2, r2
}
 80a0dd8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0dda:	f7ff bfd6 	b.w	80a0d8a <_ZN5Print11printNumberEmh>

080a0dde <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0dde:	f7ff bff3 	b.w	80a0dc8 <_ZN5Print5printEmi>

080a0de2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0de2:	b510      	push	{r4, lr}
 80a0de4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0de6:	f7ff fe53 	bl	80a0a90 <_ZNSt14_Function_baseD1Ev>
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	bd10      	pop	{r4, pc}
	...

080a0df0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0df0:	4803      	ldr	r0, [pc, #12]	; (80a0e00 <_GLOBAL__sub_I_RGB+0x10>)
 80a0df2:	2300      	movs	r3, #0
 80a0df4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0df6:	4a03      	ldr	r2, [pc, #12]	; (80a0e04 <_GLOBAL__sub_I_RGB+0x14>)
 80a0df8:	4903      	ldr	r1, [pc, #12]	; (80a0e08 <_GLOBAL__sub_I_RGB+0x18>)
 80a0dfa:	f000 bd97 	b.w	80a192c <__aeabi_atexit>
 80a0dfe:	bf00      	nop
 80a0e00:	200001d0 	.word	0x200001d0
 80a0e04:	2000006c 	.word	0x2000006c
 80a0e08:	080a0de3 	.word	0x080a0de3

080a0e0c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0e0c:	4770      	bx	lr

080a0e0e <_ZN8SPIClassD0Ev>:
 80a0e0e:	b510      	push	{r4, lr}
 80a0e10:	4604      	mov	r4, r0
 80a0e12:	2110      	movs	r1, #16
 80a0e14:	f000 fd8f 	bl	80a1936 <_ZdlPvj>
 80a0e18:	4620      	mov	r0, r4
 80a0e1a:	bd10      	pop	{r4, pc}

080a0e1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0e1c:	b570      	push	{r4, r5, r6, lr}
 80a0e1e:	4604      	mov	r4, r0
 80a0e20:	460e      	mov	r6, r1
 80a0e22:	4b07      	ldr	r3, [pc, #28]	; (80a0e40 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0e24:	2500      	movs	r5, #0
 80a0e26:	6003      	str	r3, [r0, #0]
 80a0e28:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0e2c:	f7ff fc42 	bl	80a06b4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0e30:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0e32:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0e34:	f7ff fce8 	bl	80a0808 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0e38:	60a5      	str	r5, [r4, #8]
}
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	bd70      	pop	{r4, r5, r6, pc}
 80a0e3e:	bf00      	nop
 80a0e40:	080a1ff0 	.word	0x080a1ff0

080a0e44 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0e44:	7900      	ldrb	r0, [r0, #4]
 80a0e46:	f7ff bce7 	b.w	80a0818 <HAL_SPI_Is_Enabled>

080a0e4a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0e4a:	b510      	push	{r4, lr}
 80a0e4c:	4604      	mov	r4, r0
{
	free(buffer);
 80a0e4e:	6800      	ldr	r0, [r0, #0]
 80a0e50:	f7ff fe0e 	bl	80a0a70 <free>
}
 80a0e54:	4620      	mov	r0, r4
 80a0e56:	bd10      	pop	{r4, pc}

080a0e58 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0e58:	b510      	push	{r4, lr}
 80a0e5a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0e5c:	6800      	ldr	r0, [r0, #0]
 80a0e5e:	b108      	cbz	r0, 80a0e64 <_ZN6String10invalidateEv+0xc>
 80a0e60:	f7ff fe06 	bl	80a0a70 <free>
	buffer = NULL;
 80a0e64:	2300      	movs	r3, #0
 80a0e66:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0e68:	60a3      	str	r3, [r4, #8]
 80a0e6a:	6063      	str	r3, [r4, #4]
 80a0e6c:	bd10      	pop	{r4, pc}

080a0e6e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0e6e:	b538      	push	{r3, r4, r5, lr}
 80a0e70:	4604      	mov	r4, r0
 80a0e72:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0e74:	6800      	ldr	r0, [r0, #0]
 80a0e76:	3101      	adds	r1, #1
 80a0e78:	f7ff fe02 	bl	80a0a80 <realloc>
	if (newbuffer) {
 80a0e7c:	b110      	cbz	r0, 80a0e84 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0e7e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0e82:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0e84:	bd38      	pop	{r3, r4, r5, pc}

080a0e86 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0e86:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0e88:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0e8a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0e8c:	b113      	cbz	r3, 80a0e94 <_ZN6String7reserveEj+0xe>
 80a0e8e:	6843      	ldr	r3, [r0, #4]
 80a0e90:	428b      	cmp	r3, r1
 80a0e92:	d207      	bcs.n	80a0ea4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	f7ff ffea 	bl	80a0e6e <_ZN6String12changeBufferEj>
 80a0e9a:	b120      	cbz	r0, 80a0ea6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0e9c:	68a3      	ldr	r3, [r4, #8]
 80a0e9e:	b90b      	cbnz	r3, 80a0ea4 <_ZN6String7reserveEj+0x1e>
 80a0ea0:	6822      	ldr	r2, [r4, #0]
 80a0ea2:	7013      	strb	r3, [r2, #0]
 80a0ea4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0ea6:	bd10      	pop	{r4, pc}

080a0ea8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0ea8:	b570      	push	{r4, r5, r6, lr}
 80a0eaa:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0eac:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0eae:	4604      	mov	r4, r0
 80a0eb0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0eb2:	f7ff ffe8 	bl	80a0e86 <_ZN6String7reserveEj>
 80a0eb6:	b918      	cbnz	r0, 80a0ec0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	f7ff ffcd 	bl	80a0e58 <_ZN6String10invalidateEv>
		return *this;
 80a0ebe:	e009      	b.n	80a0ed4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0ec0:	462a      	mov	r2, r5
 80a0ec2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0ec4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0ec6:	6820      	ldr	r0, [r4, #0]
 80a0ec8:	f000 fe8e 	bl	80a1be8 <memcpy>
	buffer[len] = 0;
 80a0ecc:	6822      	ldr	r2, [r4, #0]
 80a0ece:	68a3      	ldr	r3, [r4, #8]
 80a0ed0:	2100      	movs	r1, #0
 80a0ed2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0ed4:	4620      	mov	r0, r4
 80a0ed6:	bd70      	pop	{r4, r5, r6, pc}

080a0ed8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0ed8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0eda:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0edc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0ede:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0ee0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0ee2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0ee4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0ee6:	460d      	mov	r5, r1
 80a0ee8:	b139      	cbz	r1, 80a0efa <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0eea:	4608      	mov	r0, r1
 80a0eec:	f000 feb8 	bl	80a1c60 <strlen>
 80a0ef0:	4629      	mov	r1, r5
 80a0ef2:	4602      	mov	r2, r0
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	f7ff ffd7 	bl	80a0ea8 <_ZN6String4copyEPKcj>
}
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0f00 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0f04:	4b03      	ldr	r3, [pc, #12]	; (80a0f14 <_GLOBAL__sub_I_System+0x14>)
 80a0f06:	2000      	movs	r0, #0
 80a0f08:	7018      	strb	r0, [r3, #0]
 80a0f0a:	8058      	strh	r0, [r3, #2]
 80a0f0c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0f0e:	f7ff bd13 	b.w	80a0938 <set_system_mode>
 80a0f12:	bf00      	nop
 80a0f14:	200001e0 	.word	0x200001e0

080a0f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0f18:	4b02      	ldr	r3, [pc, #8]	; (80a0f24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0f1a:	681a      	ldr	r2, [r3, #0]
 80a0f1c:	4b02      	ldr	r3, [pc, #8]	; (80a0f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0f1e:	601a      	str	r2, [r3, #0]
 80a0f20:	4770      	bx	lr
 80a0f22:	bf00      	nop
 80a0f24:	20000004 	.word	0x20000004
 80a0f28:	200001e8 	.word	0x200001e8

080a0f2c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0f2c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0f2e:	6804      	ldr	r4, [r0, #0]
 80a0f30:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0f32:	46a4      	mov	ip, r4
    }
 80a0f34:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0f36:	4760      	bx	ip

080a0f38 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0f38:	6803      	ldr	r3, [r0, #0]
 80a0f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0f3c:	4718      	bx	r3

080a0f3e <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0f3e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0f40:	4770      	bx	lr

080a0f42 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0f42:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0f44:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0f46:	1a10      	subs	r0, r2, r0
 80a0f48:	4770      	bx	lr

080a0f4a <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0f4a:	b513      	push	{r0, r1, r4, lr}
 80a0f4c:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0f4e:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0f50:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0f54:	68d4      	ldr	r4, [r2, #12]
 80a0f56:	4619      	mov	r1, r3
 80a0f58:	2201      	movs	r2, #1
 80a0f5a:	47a0      	blx	r4
}
 80a0f5c:	b002      	add	sp, #8
 80a0f5e:	bd10      	pop	{r4, pc}

080a0f60 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0f60:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0f62:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0f64:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0f66:	691b      	ldr	r3, [r3, #16]
 80a0f68:	4798      	blx	r3
 80a0f6a:	b128      	cbz	r0, 80a0f78 <_ZN3UDP4readEv+0x18>
 80a0f6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0f6e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0f70:	1c59      	adds	r1, r3, #1
 80a0f72:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0f74:	5cd0      	ldrb	r0, [r2, r3]
 80a0f76:	bd10      	pop	{r4, pc}
 80a0f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0f7c:	bd10      	pop	{r4, pc}

080a0f7e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0f7e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0f80:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0f82:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0f84:	691b      	ldr	r3, [r3, #16]
 80a0f86:	4798      	blx	r3
 80a0f88:	b118      	cbz	r0, 80a0f92 <_ZN3UDP4peekEv+0x14>
 80a0f8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0f8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0f8e:	5cd0      	ldrb	r0, [r2, r3]
 80a0f90:	bd10      	pop	{r4, pc}
 80a0f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0f96:	bd10      	pop	{r4, pc}

080a0f98 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0f98:	4770      	bx	lr

080a0f9a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0f9a:	4603      	mov	r3, r0
 80a0f9c:	4608      	mov	r0, r1
 80a0f9e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0fa0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0fa2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0fa4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0fa6:	6803      	ldr	r3, [r0, #0]
 80a0fa8:	1a52      	subs	r2, r2, r1
 80a0faa:	68db      	ldr	r3, [r3, #12]
 80a0fac:	4421      	add	r1, r4
}
 80a0fae:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0fb0:	4718      	bx	r3

080a0fb2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0fb2:	f1a0 0010 	sub.w	r0, r0, #16
 80a0fb6:	f7ff bff0 	b.w	80a0f9a <_ZNK3UDP7printToER5Print>

080a0fba <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0fbc:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0fbe:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0fc0:	460f      	mov	r7, r1
 80a0fc2:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0fc4:	f7ff fe7c 	bl	80a0cc0 <_ZN5spark12NetworkClass4fromEm>
 80a0fc8:	6803      	ldr	r3, [r0, #0]
 80a0fca:	68db      	ldr	r3, [r3, #12]
 80a0fcc:	4798      	blx	r3
 80a0fce:	b1b8      	cbz	r0, 80a1000 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0fd0:	2102      	movs	r1, #2
 80a0fd2:	463b      	mov	r3, r7
 80a0fd4:	2211      	movs	r2, #17
 80a0fd6:	4608      	mov	r0, r1
 80a0fd8:	9600      	str	r6, [sp, #0]
 80a0fda:	f7ff fbed 	bl	80a07b8 <socket_create>
 80a0fde:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0fe0:	f7ff fbe2 	bl	80a07a8 <socket_handle_valid>
 80a0fe4:	4604      	mov	r4, r0
 80a0fe6:	b130      	cbz	r0, 80a0ff6 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0fe8:	2300      	movs	r3, #0
 80a0fea:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0fec:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0fee:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0ff0:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0ff2:	2001      	movs	r0, #1
 80a0ff4:	e004      	b.n	80a1000 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0ff6:	682b      	ldr	r3, [r5, #0]
 80a0ff8:	4628      	mov	r0, r5
 80a0ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ffc:	4798      	blx	r3
            bound = false;
 80a0ffe:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1000:	b003      	add	sp, #12
 80a1002:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1004 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1004:	b538      	push	{r3, r4, r5, lr}
 80a1006:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1008:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a100a:	f7ff fbf5 	bl	80a07f8 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a100e:	4285      	cmp	r5, r0
 80a1010:	d002      	beq.n	80a1018 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1012:	6960      	ldr	r0, [r4, #20]
 80a1014:	f7ff fbe8 	bl	80a07e8 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1018:	f7ff fbee 	bl	80a07f8 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a101c:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a101e:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1020:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1022:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1024:	bd38      	pop	{r3, r4, r5, pc}

080a1026 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1026:	b530      	push	{r4, r5, lr}
 80a1028:	b087      	sub	sp, #28
 80a102a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a102e:	2502      	movs	r5, #2
 80a1030:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1034:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1038:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a103a:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a103c:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1040:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1044:	799c      	ldrb	r4, [r3, #6]
 80a1046:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a104a:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a104c:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a104e:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1052:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1056:	2310      	movs	r3, #16
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	ab02      	add	r3, sp, #8
 80a105c:	9300      	str	r3, [sp, #0]
 80a105e:	6940      	ldr	r0, [r0, #20]
 80a1060:	2300      	movs	r3, #0
 80a1062:	f7ff fbb9 	bl	80a07d8 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1066:	b007      	add	sp, #28
 80a1068:	bd30      	pop	{r4, r5, pc}

080a106a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a106a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a106c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a106e:	4605      	mov	r5, r0
 80a1070:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1072:	b113      	cbz	r3, 80a107a <_ZN3UDP5writeEPKhj+0x10>
 80a1074:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1076:	1a24      	subs	r4, r4, r0
 80a1078:	e000      	b.n	80a107c <_ZN3UDP5writeEPKhj+0x12>
 80a107a:	461c      	mov	r4, r3
 80a107c:	4294      	cmp	r4, r2
 80a107e:	bf28      	it	cs
 80a1080:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1082:	4418      	add	r0, r3
 80a1084:	4622      	mov	r2, r4
 80a1086:	f000 fdaf 	bl	80a1be8 <memcpy>
    _offset += size;
 80a108a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a108c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a108e:	4423      	add	r3, r4
 80a1090:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1092:	bd38      	pop	{r3, r4, r5, pc}

080a1094 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1094:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1096:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1098:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a109a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a109c:	460e      	mov	r6, r1
 80a109e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a10a0:	4798      	blx	r3
 80a10a2:	b188      	cbz	r0, 80a10c8 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a10a4:	6823      	ldr	r3, [r4, #0]
 80a10a6:	4620      	mov	r0, r4
 80a10a8:	691b      	ldr	r3, [r3, #16]
 80a10aa:	4798      	blx	r3
 80a10ac:	4285      	cmp	r5, r0
 80a10ae:	bfa8      	it	ge
 80a10b0:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a10b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a10b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a10b6:	462a      	mov	r2, r5
 80a10b8:	4419      	add	r1, r3
 80a10ba:	4630      	mov	r0, r6
 80a10bc:	f000 fd94 	bl	80a1be8 <memcpy>
      _offset += read;
 80a10c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a10c2:	442b      	add	r3, r5
 80a10c4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a10c6:	e001      	b.n	80a10cc <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a10c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a10cc:	4628      	mov	r0, r5
 80a10ce:	bd70      	pop	{r4, r5, r6, pc}

080a10d0 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a10d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a10d2:	4604      	mov	r4, r0
 80a10d4:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a10d6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a10d8:	460d      	mov	r5, r1
 80a10da:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a10dc:	f7ff fdf0 	bl	80a0cc0 <_ZN5spark12NetworkClass4fromEm>
 80a10e0:	6803      	ldr	r3, [r0, #0]
 80a10e2:	68db      	ldr	r3, [r3, #12]
 80a10e4:	4798      	blx	r3
 80a10e6:	b310      	cbz	r0, 80a112e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a10e8:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a10ea:	f7ff fb85 	bl	80a07f8 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a10ee:	4287      	cmp	r7, r0
 80a10f0:	d01d      	beq.n	80a112e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a10f2:	b1e5      	cbz	r5, 80a112e <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a10f4:	ab08      	add	r3, sp, #32
 80a10f6:	2210      	movs	r2, #16
 80a10f8:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a10fc:	9301      	str	r3, [sp, #4]
 80a10fe:	eb0d 0302 	add.w	r3, sp, r2
 80a1102:	9300      	str	r3, [sp, #0]
 80a1104:	4629      	mov	r1, r5
 80a1106:	2300      	movs	r3, #0
 80a1108:	4632      	mov	r2, r6
 80a110a:	6960      	ldr	r0, [r4, #20]
 80a110c:	f7ff fb5c 	bl	80a07c8 <socket_receivefrom>
        if (ret >= 0)
 80a1110:	1e05      	subs	r5, r0, #0
 80a1112:	db0e      	blt.n	80a1132 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1114:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1118:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a111c:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a111e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1122:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1124:	f104 001c 	add.w	r0, r4, #28
 80a1128:	f7ff fd5a 	bl	80a0be0 <_ZN9IPAddressaSEPKh>
 80a112c:	e001      	b.n	80a1132 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a112e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1132:	4628      	mov	r0, r5
 80a1134:	b009      	add	sp, #36	; 0x24
 80a1136:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1138 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a113c:	4606      	mov	r6, r0
 80a113e:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1140:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1142:	460d      	mov	r5, r1
 80a1144:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1146:	f7ff fdbb 	bl	80a0cc0 <_ZN5spark12NetworkClass4fromEm>
 80a114a:	6803      	ldr	r3, [r0, #0]
 80a114c:	68db      	ldr	r3, [r3, #12]
 80a114e:	4798      	blx	r3
 80a1150:	b1f8      	cbz	r0, 80a1192 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1152:	4628      	mov	r0, r5
 80a1154:	f000 fd84 	bl	80a1c60 <strlen>
 80a1158:	2400      	movs	r4, #0
 80a115a:	b281      	uxth	r1, r0
 80a115c:	9400      	str	r4, [sp, #0]
 80a115e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1160:	aa03      	add	r2, sp, #12
 80a1162:	4628      	mov	r0, r5
 80a1164:	f7ff fbe0 	bl	80a0928 <inet_gethostbyname>
 80a1168:	b990      	cbnz	r0, 80a1190 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a116a:	a903      	add	r1, sp, #12
 80a116c:	a808      	add	r0, sp, #32
 80a116e:	f7ff fd03 	bl	80a0b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1172:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1174:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1176:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1178:	4b07      	ldr	r3, [pc, #28]	; (80a1198 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a117a:	ad09      	add	r5, sp, #36	; 0x24
 80a117c:	930e      	str	r3, [sp, #56]	; 0x38
 80a117e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1182:	682b      	ldr	r3, [r5, #0]
 80a1184:	4642      	mov	r2, r8
 80a1186:	7023      	strb	r3, [r4, #0]
 80a1188:	a90e      	add	r1, sp, #56	; 0x38
 80a118a:	4630      	mov	r0, r6
 80a118c:	47b8      	blx	r7
 80a118e:	e000      	b.n	80a1192 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1190:	4620      	mov	r0, r4
}
 80a1192:	b014      	add	sp, #80	; 0x50
 80a1194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1198:	080a1ec4 	.word	0x080a1ec4

080a119c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a119c:	b570      	push	{r4, r5, r6, lr}
 80a119e:	4604      	mov	r4, r0
 80a11a0:	4606      	mov	r6, r0
 80a11a2:	4b05      	ldr	r3, [pc, #20]	; (80a11b8 <_ZN3UDP8remoteIPEv+0x1c>)
 80a11a4:	f101 0520 	add.w	r5, r1, #32
 80a11a8:	f844 3b04 	str.w	r3, [r4], #4
 80a11ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a11ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a11b0:	682b      	ldr	r3, [r5, #0]
 80a11b2:	4630      	mov	r0, r6
 80a11b4:	7023      	strb	r3, [r4, #0]
 80a11b6:	bd70      	pop	{r4, r5, r6, pc}
 80a11b8:	080a1ec4 	.word	0x080a1ec4

080a11bc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a11bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11be:	4694      	mov	ip, r2
 80a11c0:	468e      	mov	lr, r1
 80a11c2:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a11c4:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a11c6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a11c8:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a11ca:	4a09      	ldr	r2, [pc, #36]	; (80a11f0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a11cc:	ac03      	add	r4, sp, #12
 80a11ce:	1d1d      	adds	r5, r3, #4
 80a11d0:	9202      	str	r2, [sp, #8]
 80a11d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a11d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a11d6:	682b      	ldr	r3, [r5, #0]
 80a11d8:	4662      	mov	r2, ip
 80a11da:	7023      	strb	r3, [r4, #0]
 80a11dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a11e0:	4671      	mov	r1, lr
 80a11e2:	9300      	str	r3, [sp, #0]
 80a11e4:	4630      	mov	r0, r6
 80a11e6:	ab02      	add	r3, sp, #8
 80a11e8:	47b8      	blx	r7
    }
 80a11ea:	b009      	add	sp, #36	; 0x24
 80a11ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a11ee:	bf00      	nop
 80a11f0:	080a1ec4 	.word	0x080a1ec4

080a11f4 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a11f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11f6:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a11f8:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a11fa:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a11fc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a11fe:	4b0d      	ldr	r3, [pc, #52]	; (80a1234 <_ZN3UDP9endPacketEv+0x40>)
 80a1200:	ad03      	add	r5, sp, #12
 80a1202:	f100 0620 	add.w	r6, r0, #32
 80a1206:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a120a:	9302      	str	r3, [sp, #8]
 80a120c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1210:	6833      	ldr	r3, [r6, #0]
 80a1212:	4672      	mov	r2, lr
 80a1214:	702b      	strb	r3, [r5, #0]
 80a1216:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1218:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a121a:	9300      	str	r3, [sp, #0]
 80a121c:	4620      	mov	r0, r4
 80a121e:	ab02      	add	r3, sp, #8
 80a1220:	47b8      	blx	r7
 80a1222:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1224:	6823      	ldr	r3, [r4, #0]
 80a1226:	4620      	mov	r0, r4
 80a1228:	69db      	ldr	r3, [r3, #28]
 80a122a:	4798      	blx	r3
    return result;
}
 80a122c:	4628      	mov	r0, r5
 80a122e:	b009      	add	sp, #36	; 0x24
 80a1230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1232:	bf00      	nop
 80a1234:	080a1ec4 	.word	0x080a1ec4

080a1238 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1238:	b538      	push	{r3, r4, r5, lr}
 80a123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a123e:	6083      	str	r3, [r0, #8]
 80a1240:	4b0b      	ldr	r3, [pc, #44]	; (80a1270 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1242:	2500      	movs	r5, #0
 80a1244:	f103 0208 	add.w	r2, r3, #8
 80a1248:	336c      	adds	r3, #108	; 0x6c
 80a124a:	6002      	str	r2, [r0, #0]
 80a124c:	6103      	str	r3, [r0, #16]
 80a124e:	6045      	str	r5, [r0, #4]
 80a1250:	4604      	mov	r4, r0
 80a1252:	f7ff fad1 	bl	80a07f8 <socket_handle_invalid>
 80a1256:	6160      	str	r0, [r4, #20]
 80a1258:	f104 001c 	add.w	r0, r4, #28
 80a125c:	f7ff fc7e 	bl	80a0b5c <_ZN9IPAddressC1Ev>
 80a1260:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1264:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1266:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1268:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a126a:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a126c:	4620      	mov	r0, r4
 80a126e:	bd38      	pop	{r3, r4, r5, pc}
 80a1270:	080a2024 	.word	0x080a2024

080a1274 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1274:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1276:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a127a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a127c:	b123      	cbz	r3, 80a1288 <_ZN3UDP13releaseBufferEv+0x14>
 80a127e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1280:	b110      	cbz	r0, 80a1288 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1282:	2101      	movs	r1, #1
 80a1284:	f000 fb57 	bl	80a1936 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1288:	2300      	movs	r3, #0
 80a128a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a128c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1290:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1292:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1294:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1296:	bd10      	pop	{r4, pc}

080a1298 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1298:	b570      	push	{r4, r5, r6, lr}
 80a129a:	4604      	mov	r4, r0
 80a129c:	4616      	mov	r6, r2
 80a129e:	460d      	mov	r5, r1
    releaseBuffer();
 80a12a0:	f7ff ffe8 	bl	80a1274 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a12a4:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a12a6:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a12a8:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a12aa:	b93e      	cbnz	r6, 80a12bc <_ZN3UDP9setBufferEjPh+0x24>
 80a12ac:	b135      	cbz	r5, 80a12bc <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a12ae:	4628      	mov	r0, r5
 80a12b0:	f7fe fef3 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a12b4:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a12b6:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a12b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a12bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a12be:	b103      	cbz	r3, 80a12c2 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a12c0:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a12c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a12c4:	3000      	adds	r0, #0
 80a12c6:	bf18      	it	ne
 80a12c8:	2001      	movne	r0, #1
 80a12ca:	bd70      	pop	{r4, r5, r6, pc}

080a12cc <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a12cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12ce:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a12d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a12d2:	4605      	mov	r5, r0
 80a12d4:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a12d6:	b91a      	cbnz	r2, 80a12e0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a12d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a12da:	b109      	cbz	r1, 80a12e0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a12dc:	f7ff ffdc 	bl	80a1298 <_ZN3UDP9setBufferEjPh>
 80a12e0:	f105 0620 	add.w	r6, r5, #32
 80a12e4:	3404      	adds	r4, #4
 80a12e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a12e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a12ea:	6823      	ldr	r3, [r4, #0]
 80a12ec:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a12ee:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a12f0:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a12f2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a12f4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a12f6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a12f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12fa <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a12fa:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a12fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a12fe:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a1300:	b91a      	cbnz	r2, 80a130a <_ZN3UDP11parsePacketEm+0x10>
 80a1302:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1304:	b109      	cbz	r1, 80a130a <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a1306:	f7ff ffc7 	bl	80a1298 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a130a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a130c:	2300      	movs	r3, #0
 80a130e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1310:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1312:	b141      	cbz	r1, 80a1326 <_ZN3UDP11parsePacketEm+0x2c>
 80a1314:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1316:	b132      	cbz	r2, 80a1326 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a1318:	6820      	ldr	r0, [r4, #0]
 80a131a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a131c:	4620      	mov	r0, r4
 80a131e:	47a8      	blx	r5
        if (result>0) {
 80a1320:	2800      	cmp	r0, #0
            _total = result;
 80a1322:	bfc8      	it	gt
 80a1324:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a1326:	6823      	ldr	r3, [r4, #0]
 80a1328:	4620      	mov	r0, r4
}
 80a132a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a132e:	691b      	ldr	r3, [r3, #16]
 80a1330:	4718      	bx	r3

080a1332 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1332:	4770      	bx	lr

080a1334 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1334:	7441      	strb	r1, [r0, #17]
 80a1336:	4770      	bx	lr

080a1338 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1338:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a133a:	7c00      	ldrb	r0, [r0, #16]
 80a133c:	f7ff faac 	bl	80a0898 <HAL_USART_Available_Data_For_Write>
}
 80a1340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1344:	bd08      	pop	{r3, pc}

080a1346 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1346:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1348:	7c00      	ldrb	r0, [r0, #16]
 80a134a:	f7ff fa7d 	bl	80a0848 <HAL_USART_Available_Data>
}
 80a134e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1352:	bd08      	pop	{r3, pc}

080a1354 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1354:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1356:	7c00      	ldrb	r0, [r0, #16]
 80a1358:	f7ff fa86 	bl	80a0868 <HAL_USART_Peek_Data>
}
 80a135c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1360:	bf28      	it	cs
 80a1362:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1366:	bd08      	pop	{r3, pc}

080a1368 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1368:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a136a:	7c00      	ldrb	r0, [r0, #16]
 80a136c:	f7ff fa74 	bl	80a0858 <HAL_USART_Read_Data>
}
 80a1370:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1374:	bf28      	it	cs
 80a1376:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a137a:	bd08      	pop	{r3, pc}

080a137c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a137c:	7c00      	ldrb	r0, [r0, #16]
 80a137e:	f7ff ba7b 	b.w	80a0878 <HAL_USART_Flush_Data>

080a1382 <_ZN11USARTSerialD0Ev>:
 80a1382:	b510      	push	{r4, lr}
 80a1384:	4604      	mov	r4, r0
 80a1386:	2114      	movs	r1, #20
 80a1388:	f000 fad5 	bl	80a1936 <_ZdlPvj>
 80a138c:	4620      	mov	r0, r4
 80a138e:	bd10      	pop	{r4, pc}

080a1390 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1390:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1392:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1394:	4604      	mov	r4, r0
 80a1396:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1398:	b925      	cbnz	r5, 80a13a4 <_ZN11USARTSerial5writeEh+0x14>
 80a139a:	7c00      	ldrb	r0, [r0, #16]
 80a139c:	f7ff fa7c 	bl	80a0898 <HAL_USART_Available_Data_For_Write>
 80a13a0:	2800      	cmp	r0, #0
 80a13a2:	dd05      	ble.n	80a13b0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13a4:	4631      	mov	r1, r6
 80a13a6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a13a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a13ac:	f7ff ba44 	b.w	80a0838 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a13b0:	4628      	mov	r0, r5
 80a13b2:	bd70      	pop	{r4, r5, r6, pc}

080a13b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a13b4:	b510      	push	{r4, lr}
 80a13b6:	4604      	mov	r4, r0
 80a13b8:	4608      	mov	r0, r1
 80a13ba:	4611      	mov	r1, r2
 80a13bc:	2200      	movs	r2, #0
 80a13be:	6062      	str	r2, [r4, #4]
 80a13c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a13c4:	60a2      	str	r2, [r4, #8]
 80a13c6:	4a05      	ldr	r2, [pc, #20]	; (80a13dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a13c8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a13ca:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a13cc:	2201      	movs	r2, #1
 80a13ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a13d0:	461a      	mov	r2, r3
 80a13d2:	f7ff fa29 	bl	80a0828 <HAL_USART_Init>
}
 80a13d6:	4620      	mov	r0, r4
 80a13d8:	bd10      	pop	{r4, pc}
 80a13da:	bf00      	nop
 80a13dc:	080a209c 	.word	0x080a209c

080a13e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a13e0:	7c00      	ldrb	r0, [r0, #16]
 80a13e2:	f7ff ba51 	b.w	80a0888 <HAL_USART_Is_Enabled>
	...

080a13e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a13e8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a13ea:	4d0c      	ldr	r5, [pc, #48]	; (80a141c <_Z22__fetch_global_Serial1v+0x34>)
 80a13ec:	6829      	ldr	r1, [r5, #0]
 80a13ee:	f011 0401 	ands.w	r4, r1, #1
 80a13f2:	d111      	bne.n	80a1418 <_Z22__fetch_global_Serial1v+0x30>
 80a13f4:	4628      	mov	r0, r5
 80a13f6:	f7fe fe54 	bl	80a00a2 <__cxa_guard_acquire>
 80a13fa:	b168      	cbz	r0, 80a1418 <_Z22__fetch_global_Serial1v+0x30>
 80a13fc:	4a08      	ldr	r2, [pc, #32]	; (80a1420 <_Z22__fetch_global_Serial1v+0x38>)
 80a13fe:	4621      	mov	r1, r4
 80a1400:	4b08      	ldr	r3, [pc, #32]	; (80a1424 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1402:	4809      	ldr	r0, [pc, #36]	; (80a1428 <_Z22__fetch_global_Serial1v+0x40>)
 80a1404:	f7ff ffd6 	bl	80a13b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1408:	4628      	mov	r0, r5
 80a140a:	f7fe fe4f 	bl	80a00ac <__cxa_guard_release>
 80a140e:	4a07      	ldr	r2, [pc, #28]	; (80a142c <_Z22__fetch_global_Serial1v+0x44>)
 80a1410:	4907      	ldr	r1, [pc, #28]	; (80a1430 <_Z22__fetch_global_Serial1v+0x48>)
 80a1412:	4805      	ldr	r0, [pc, #20]	; (80a1428 <_Z22__fetch_global_Serial1v+0x40>)
 80a1414:	f000 fa8a 	bl	80a192c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1418:	4803      	ldr	r0, [pc, #12]	; (80a1428 <_Z22__fetch_global_Serial1v+0x40>)
 80a141a:	bd38      	pop	{r3, r4, r5, pc}
 80a141c:	20000284 	.word	0x20000284
 80a1420:	20000288 	.word	0x20000288
 80a1424:	20000200 	.word	0x20000200
 80a1428:	200001ec 	.word	0x200001ec
 80a142c:	2000006c 	.word	0x2000006c
 80a1430:	080a1333 	.word	0x080a1333

080a1434 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1434:	7441      	strb	r1, [r0, #17]
 80a1436:	4770      	bx	lr

080a1438 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1438:	4770      	bx	lr

080a143a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a143a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a143c:	2100      	movs	r1, #0
 80a143e:	7c00      	ldrb	r0, [r0, #16]
 80a1440:	f7ff fa52 	bl	80a08e8 <HAL_USB_USART_Receive_Data>
}
 80a1444:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1448:	bf28      	it	cs
 80a144a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a144e:	bd08      	pop	{r3, pc}

080a1450 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1450:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1452:	2101      	movs	r1, #1
 80a1454:	7c00      	ldrb	r0, [r0, #16]
 80a1456:	f7ff fa47 	bl	80a08e8 <HAL_USB_USART_Receive_Data>
}
 80a145a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a145e:	bf28      	it	cs
 80a1460:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1464:	bd08      	pop	{r3, pc}

080a1466 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1466:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1468:	7c00      	ldrb	r0, [r0, #16]
 80a146a:	f7ff fa35 	bl	80a08d8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a146e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1472:	bd08      	pop	{r3, pc}

080a1474 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1474:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1476:	7c00      	ldrb	r0, [r0, #16]
 80a1478:	f7ff fa26 	bl	80a08c8 <HAL_USB_USART_Available_Data>
}
 80a147c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1480:	bd08      	pop	{r3, pc}

080a1482 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1482:	7c00      	ldrb	r0, [r0, #16]
 80a1484:	f7ff ba40 	b.w	80a0908 <HAL_USB_USART_Flush_Data>

080a1488 <_ZN9USBSerialD0Ev>:
 80a1488:	b510      	push	{r4, lr}
 80a148a:	4604      	mov	r4, r0
 80a148c:	2114      	movs	r1, #20
 80a148e:	f000 fa52 	bl	80a1936 <_ZdlPvj>
 80a1492:	4620      	mov	r0, r4
 80a1494:	bd10      	pop	{r4, pc}

080a1496 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1496:	b538      	push	{r3, r4, r5, lr}
 80a1498:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a149a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a149c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a149e:	f7ff fa1b 	bl	80a08d8 <HAL_USB_USART_Available_Data_For_Write>
 80a14a2:	2800      	cmp	r0, #0
 80a14a4:	dc01      	bgt.n	80a14aa <_ZN9USBSerial5writeEh+0x14>
 80a14a6:	7c60      	ldrb	r0, [r4, #17]
 80a14a8:	b128      	cbz	r0, 80a14b6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a14aa:	4629      	mov	r1, r5
 80a14ac:	7c20      	ldrb	r0, [r4, #16]
 80a14ae:	f7ff fa23 	bl	80a08f8 <HAL_USB_USART_Send_Data>
 80a14b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a14b6:	bd38      	pop	{r3, r4, r5, pc}

080a14b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a14b8:	b510      	push	{r4, lr}
 80a14ba:	4604      	mov	r4, r0
 80a14bc:	2300      	movs	r3, #0
 80a14be:	6063      	str	r3, [r4, #4]
 80a14c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14c4:	60a3      	str	r3, [r4, #8]
 80a14c6:	4b05      	ldr	r3, [pc, #20]	; (80a14dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a14c8:	4608      	mov	r0, r1
 80a14ca:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a14cc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a14ce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a14d0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a14d2:	4611      	mov	r1, r2
 80a14d4:	f7ff f9e8 	bl	80a08a8 <HAL_USB_USART_Init>
}
 80a14d8:	4620      	mov	r0, r4
 80a14da:	bd10      	pop	{r4, pc}
 80a14dc:	080a20cc 	.word	0x080a20cc

080a14e0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a14e0:	2200      	movs	r2, #0
 80a14e2:	7c00      	ldrb	r0, [r0, #16]
 80a14e4:	f7ff b9e8 	b.w	80a08b8 <HAL_USB_USART_Begin>

080a14e8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a14e8:	7c00      	ldrb	r0, [r0, #16]
 80a14ea:	f7ff ba15 	b.w	80a0918 <HAL_USB_USART_Is_Enabled>

080a14ee <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a14ee:	f7ff bffb 	b.w	80a14e8 <_ZN9USBSerial9isEnabledEv>
	...

080a14f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a14f4:	b510      	push	{r4, lr}
 80a14f6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a14f8:	2214      	movs	r2, #20
 80a14fa:	2100      	movs	r1, #0
 80a14fc:	f000 fb7f 	bl	80a1bfe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1500:	4b05      	ldr	r3, [pc, #20]	; (80a1518 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1502:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1504:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1506:	4b05      	ldr	r3, [pc, #20]	; (80a151c <_Z19acquireSerialBufferv+0x28>)
 80a1508:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a150a:	f240 1301 	movw	r3, #257	; 0x101
 80a150e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1510:	2381      	movs	r3, #129	; 0x81
 80a1512:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1514:	bd10      	pop	{r4, pc}
 80a1516:	bf00      	nop
 80a1518:	20000391 	.word	0x20000391
 80a151c:	20000310 	.word	0x20000310

080a1520 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1520:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1522:	4d0e      	ldr	r5, [pc, #56]	; (80a155c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1524:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1526:	a801      	add	r0, sp, #4
 80a1528:	f7ff ffe4 	bl	80a14f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a152c:	6829      	ldr	r1, [r5, #0]
 80a152e:	f011 0401 	ands.w	r4, r1, #1
 80a1532:	d110      	bne.n	80a1556 <_Z16_fetch_usbserialv+0x36>
 80a1534:	4628      	mov	r0, r5
 80a1536:	f7fe fdb4 	bl	80a00a2 <__cxa_guard_acquire>
 80a153a:	b160      	cbz	r0, 80a1556 <_Z16_fetch_usbserialv+0x36>
 80a153c:	aa01      	add	r2, sp, #4
 80a153e:	4621      	mov	r1, r4
 80a1540:	4807      	ldr	r0, [pc, #28]	; (80a1560 <_Z16_fetch_usbserialv+0x40>)
 80a1542:	f7ff ffb9 	bl	80a14b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1546:	4628      	mov	r0, r5
 80a1548:	f7fe fdb0 	bl	80a00ac <__cxa_guard_release>
 80a154c:	4a05      	ldr	r2, [pc, #20]	; (80a1564 <_Z16_fetch_usbserialv+0x44>)
 80a154e:	4906      	ldr	r1, [pc, #24]	; (80a1568 <_Z16_fetch_usbserialv+0x48>)
 80a1550:	4803      	ldr	r0, [pc, #12]	; (80a1560 <_Z16_fetch_usbserialv+0x40>)
 80a1552:	f000 f9eb 	bl	80a192c <__aeabi_atexit>
	return _usbserial;
}
 80a1556:	4802      	ldr	r0, [pc, #8]	; (80a1560 <_Z16_fetch_usbserialv+0x40>)
 80a1558:	b007      	add	sp, #28
 80a155a:	bd30      	pop	{r4, r5, pc}
 80a155c:	2000030c 	.word	0x2000030c
 80a1560:	20000494 	.word	0x20000494
 80a1564:	2000006c 	.word	0x2000006c
 80a1568:	080a1439 	.word	0x080a1439

080a156c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a156c:	b510      	push	{r4, lr}
 80a156e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1570:	2214      	movs	r2, #20
 80a1572:	2100      	movs	r1, #0
 80a1574:	f000 fb43 	bl	80a1bfe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1578:	4b05      	ldr	r3, [pc, #20]	; (80a1590 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a157a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a157c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a157e:	4b05      	ldr	r3, [pc, #20]	; (80a1594 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1580:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1582:	f240 1301 	movw	r3, #257	; 0x101
 80a1586:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1588:	2381      	movs	r3, #129	; 0x81
 80a158a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a158c:	bd10      	pop	{r4, pc}
 80a158e:	bf00      	nop
 80a1590:	20000544 	.word	0x20000544
 80a1594:	200004ac 	.word	0x200004ac

080a1598 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1598:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a159a:	4c0e      	ldr	r4, [pc, #56]	; (80a15d4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a159c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a159e:	a801      	add	r0, sp, #4
 80a15a0:	f7ff ffe4 	bl	80a156c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15a4:	6823      	ldr	r3, [r4, #0]
 80a15a6:	07db      	lsls	r3, r3, #31
 80a15a8:	d410      	bmi.n	80a15cc <_Z17_fetch_usbserial1v+0x34>
 80a15aa:	4620      	mov	r0, r4
 80a15ac:	f7fe fd79 	bl	80a00a2 <__cxa_guard_acquire>
 80a15b0:	b160      	cbz	r0, 80a15cc <_Z17_fetch_usbserial1v+0x34>
 80a15b2:	aa01      	add	r2, sp, #4
 80a15b4:	2101      	movs	r1, #1
 80a15b6:	4808      	ldr	r0, [pc, #32]	; (80a15d8 <_Z17_fetch_usbserial1v+0x40>)
 80a15b8:	f7ff ff7e 	bl	80a14b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15bc:	4620      	mov	r0, r4
 80a15be:	f7fe fd75 	bl	80a00ac <__cxa_guard_release>
 80a15c2:	4a06      	ldr	r2, [pc, #24]	; (80a15dc <_Z17_fetch_usbserial1v+0x44>)
 80a15c4:	4906      	ldr	r1, [pc, #24]	; (80a15e0 <_Z17_fetch_usbserial1v+0x48>)
 80a15c6:	4804      	ldr	r0, [pc, #16]	; (80a15d8 <_Z17_fetch_usbserial1v+0x40>)
 80a15c8:	f000 f9b0 	bl	80a192c <__aeabi_atexit>
  return _usbserial1;
}
 80a15cc:	4802      	ldr	r0, [pc, #8]	; (80a15d8 <_Z17_fetch_usbserial1v+0x40>)
 80a15ce:	b006      	add	sp, #24
 80a15d0:	bd10      	pop	{r4, pc}
 80a15d2:	bf00      	nop
 80a15d4:	200004a8 	.word	0x200004a8
 80a15d8:	20000530 	.word	0x20000530
 80a15dc:	2000006c 	.word	0x2000006c
 80a15e0:	080a1439 	.word	0x080a1439

080a15e4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a15e4:	2200      	movs	r2, #0
 80a15e6:	4611      	mov	r1, r2
 80a15e8:	6840      	ldr	r0, [r0, #4]
 80a15ea:	f7ff b9f1 	b.w	80a09d0 <network_ready>

080a15ee <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a15ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a15f0:	4616      	mov	r6, r2
 80a15f2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a15f4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a15f6:	460f      	mov	r7, r1
 80a15f8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a15fa:	2100      	movs	r1, #0
 80a15fc:	a803      	add	r0, sp, #12
 80a15fe:	f000 fafe 	bl	80a1bfe <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1602:	4630      	mov	r0, r6
 80a1604:	f000 fb2c 	bl	80a1c60 <strlen>
 80a1608:	2500      	movs	r5, #0
 80a160a:	9500      	str	r5, [sp, #0]
 80a160c:	b281      	uxth	r1, r0
 80a160e:	687b      	ldr	r3, [r7, #4]
 80a1610:	aa03      	add	r2, sp, #12
 80a1612:	4630      	mov	r0, r6
 80a1614:	f7ff f988 	bl	80a0928 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1618:	b120      	cbz	r0, 80a1624 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a161a:	4629      	mov	r1, r5
 80a161c:	4620      	mov	r0, r4
 80a161e:	f7ff fabd 	bl	80a0b9c <_ZN9IPAddressC1Em>
 80a1622:	e003      	b.n	80a162c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1624:	a903      	add	r1, sp, #12
 80a1626:	4620      	mov	r0, r4
 80a1628:	f7ff faa6 	bl	80a0b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a162c:	4620      	mov	r0, r4
 80a162e:	b009      	add	sp, #36	; 0x24
 80a1630:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1632 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1632:	2200      	movs	r2, #0
 80a1634:	4611      	mov	r1, r2
 80a1636:	6840      	ldr	r0, [r0, #4]
 80a1638:	f7ff b9ea 	b.w	80a0a10 <network_listening>

080a163c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a163c:	2200      	movs	r2, #0
 80a163e:	4611      	mov	r1, r2
 80a1640:	6840      	ldr	r0, [r0, #4]
 80a1642:	f7ff b9f5 	b.w	80a0a30 <network_get_listen_timeout>

080a1646 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1646:	2200      	movs	r2, #0
 80a1648:	6840      	ldr	r0, [r0, #4]
 80a164a:	f7ff b9e9 	b.w	80a0a20 <network_set_listen_timeout>

080a164e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a164e:	2200      	movs	r2, #0
 80a1650:	f081 0101 	eor.w	r1, r1, #1
 80a1654:	6840      	ldr	r0, [r0, #4]
 80a1656:	f7ff b9d3 	b.w	80a0a00 <network_listen>

080a165a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a165a:	2300      	movs	r3, #0
 80a165c:	461a      	mov	r2, r3
 80a165e:	4619      	mov	r1, r3
 80a1660:	6840      	ldr	r0, [r0, #4]
 80a1662:	f7ff b9c5 	b.w	80a09f0 <network_off>

080a1666 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1666:	2300      	movs	r3, #0
 80a1668:	461a      	mov	r2, r3
 80a166a:	4619      	mov	r1, r3
 80a166c:	6840      	ldr	r0, [r0, #4]
 80a166e:	f7ff b9b7 	b.w	80a09e0 <network_on>

080a1672 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1672:	2200      	movs	r2, #0
 80a1674:	4611      	mov	r1, r2
 80a1676:	6840      	ldr	r0, [r0, #4]
 80a1678:	f7ff b99a 	b.w	80a09b0 <network_connecting>

080a167c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a167c:	2200      	movs	r2, #0
 80a167e:	2102      	movs	r1, #2
 80a1680:	6840      	ldr	r0, [r0, #4]
 80a1682:	f7ff b99d 	b.w	80a09c0 <network_disconnect>

080a1686 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1686:	2300      	movs	r3, #0
 80a1688:	461a      	mov	r2, r3
 80a168a:	6840      	ldr	r0, [r0, #4]
 80a168c:	f7ff b988 	b.w	80a09a0 <network_connect>

080a1690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1690:	4b02      	ldr	r3, [pc, #8]	; (80a169c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1692:	2204      	movs	r2, #4
 80a1694:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1696:	4a02      	ldr	r2, [pc, #8]	; (80a16a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1698:	601a      	str	r2, [r3, #0]
 80a169a:	4770      	bx	lr
 80a169c:	20000648 	.word	0x20000648
 80a16a0:	080a20fc 	.word	0x080a20fc

080a16a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a16a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a16a6:	4b14      	ldr	r3, [pc, #80]	; (80a16f8 <serialEventRun+0x54>)
 80a16a8:	b133      	cbz	r3, 80a16b8 <serialEventRun+0x14>
 80a16aa:	f7ff ff39 	bl	80a1520 <_Z16_fetch_usbserialv>
 80a16ae:	6803      	ldr	r3, [r0, #0]
 80a16b0:	691b      	ldr	r3, [r3, #16]
 80a16b2:	4798      	blx	r3
 80a16b4:	2800      	cmp	r0, #0
 80a16b6:	dc16      	bgt.n	80a16e6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a16b8:	4b10      	ldr	r3, [pc, #64]	; (80a16fc <serialEventRun+0x58>)
 80a16ba:	b133      	cbz	r3, 80a16ca <serialEventRun+0x26>
 80a16bc:	f7ff fe94 	bl	80a13e8 <_Z22__fetch_global_Serial1v>
 80a16c0:	6803      	ldr	r3, [r0, #0]
 80a16c2:	691b      	ldr	r3, [r3, #16]
 80a16c4:	4798      	blx	r3
 80a16c6:	2800      	cmp	r0, #0
 80a16c8:	dc10      	bgt.n	80a16ec <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a16ca:	4b0d      	ldr	r3, [pc, #52]	; (80a1700 <serialEventRun+0x5c>)
 80a16cc:	b10b      	cbz	r3, 80a16d2 <serialEventRun+0x2e>
 80a16ce:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a16d2:	4b0c      	ldr	r3, [pc, #48]	; (80a1704 <serialEventRun+0x60>)
 80a16d4:	b17b      	cbz	r3, 80a16f6 <serialEventRun+0x52>
 80a16d6:	f7ff ff5f 	bl	80a1598 <_Z17_fetch_usbserial1v>
 80a16da:	6803      	ldr	r3, [r0, #0]
 80a16dc:	691b      	ldr	r3, [r3, #16]
 80a16de:	4798      	blx	r3
 80a16e0:	2800      	cmp	r0, #0
 80a16e2:	dc06      	bgt.n	80a16f2 <serialEventRun+0x4e>
 80a16e4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a16e6:	f3af 8000 	nop.w
 80a16ea:	e7e5      	b.n	80a16b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a16ec:	f3af 8000 	nop.w
 80a16f0:	e7eb      	b.n	80a16ca <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a16f2:	f3af 8000 	nop.w
 80a16f6:	bd08      	pop	{r3, pc}
	...

080a1708 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1708:	b508      	push	{r3, lr}
	serialEventRun();
 80a170a:	f7ff ffcb 	bl	80a16a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a170e:	f7fe ffe9 	bl	80a06e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1712:	4b01      	ldr	r3, [pc, #4]	; (80a1718 <_post_loop+0x10>)
 80a1714:	6018      	str	r0, [r3, #0]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	20000658 	.word	0x20000658

080a171c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a171c:	4802      	ldr	r0, [pc, #8]	; (80a1728 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a171e:	4a03      	ldr	r2, [pc, #12]	; (80a172c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1720:	4903      	ldr	r1, [pc, #12]	; (80a1730 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1722:	1a12      	subs	r2, r2, r0
 80a1724:	f000 ba60 	b.w	80a1be8 <memcpy>
 80a1728:	40024000 	.word	0x40024000
 80a172c:	40024004 	.word	0x40024004
 80a1730:	080a21e0 	.word	0x080a21e0

080a1734 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1734:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1736:	2300      	movs	r3, #0
 80a1738:	9300      	str	r3, [sp, #0]
 80a173a:	461a      	mov	r2, r3
 80a173c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1740:	f7ff f914 	bl	80a096c <system_ctrl_set_result>
}
 80a1744:	b003      	add	sp, #12
 80a1746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a174c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a174c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a174e:	8843      	ldrh	r3, [r0, #2]
 80a1750:	2b0a      	cmp	r3, #10
 80a1752:	d008      	beq.n	80a1766 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1754:	2b50      	cmp	r3, #80	; 0x50
 80a1756:	d109      	bne.n	80a176c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1758:	4b09      	ldr	r3, [pc, #36]	; (80a1780 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a175a:	681b      	ldr	r3, [r3, #0]
 80a175c:	b13b      	cbz	r3, 80a176e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a175e:	b003      	add	sp, #12
 80a1760:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1764:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1766:	f7ff ffe5 	bl	80a1734 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a176a:	e006      	b.n	80a177a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a176c:	2300      	movs	r3, #0
 80a176e:	9300      	str	r3, [sp, #0]
 80a1770:	461a      	mov	r2, r3
 80a1772:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1776:	f7ff f8f9 	bl	80a096c <system_ctrl_set_result>
        break;
    }
}
 80a177a:	b003      	add	sp, #12
 80a177c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1780:	20000650 	.word	0x20000650

080a1784 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1784:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1786:	4c10      	ldr	r4, [pc, #64]	; (80a17c8 <module_user_init_hook+0x44>)
 80a1788:	4d10      	ldr	r5, [pc, #64]	; (80a17cc <module_user_init_hook+0x48>)
 80a178a:	6823      	ldr	r3, [r4, #0]
 80a178c:	42ab      	cmp	r3, r5
 80a178e:	4b10      	ldr	r3, [pc, #64]	; (80a17d0 <module_user_init_hook+0x4c>)
 80a1790:	bf0c      	ite	eq
 80a1792:	2201      	moveq	r2, #1
 80a1794:	2200      	movne	r2, #0
 80a1796:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1798:	d002      	beq.n	80a17a0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a179a:	f7ff ffbf 	bl	80a171c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a179e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a17a0:	f7fe ff90 	bl	80a06c4 <HAL_RNG_GetRandomNumber>
 80a17a4:	4604      	mov	r4, r0
    srand(seed);
 80a17a6:	f000 fa33 	bl	80a1c10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a17aa:	4b0a      	ldr	r3, [pc, #40]	; (80a17d4 <module_user_init_hook+0x50>)
 80a17ac:	b113      	cbz	r3, 80a17b4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a17ae:	4620      	mov	r0, r4
 80a17b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a17b4:	2100      	movs	r1, #0
 80a17b6:	4807      	ldr	r0, [pc, #28]	; (80a17d4 <module_user_init_hook+0x50>)
 80a17b8:	f7ff f8e2 	bl	80a0980 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a17bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a17c0:	2100      	movs	r1, #0
 80a17c2:	4805      	ldr	r0, [pc, #20]	; (80a17d8 <module_user_init_hook+0x54>)
 80a17c4:	f7ff b8c8 	b.w	80a0958 <system_ctrl_set_app_request_handler>
 80a17c8:	40024000 	.word	0x40024000
 80a17cc:	9a271c1e 	.word	0x9a271c1e
 80a17d0:	20000654 	.word	0x20000654
 80a17d4:	00000000 	.word	0x00000000
 80a17d8:	080a174d 	.word	0x080a174d

080a17dc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a17dc:	b510      	push	{r4, lr}
 80a17de:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a17e0:	480f      	ldr	r0, [pc, #60]	; (80a1820 <pinAvailable+0x44>)
 80a17e2:	f7ff fb2f 	bl	80a0e44 <_ZN8SPIClass9isEnabledEv>
 80a17e6:	b128      	cbz	r0, 80a17f4 <pinAvailable+0x18>
 80a17e8:	f1a4 030d 	sub.w	r3, r4, #13
 80a17ec:	2b02      	cmp	r3, #2
 80a17ee:	d801      	bhi.n	80a17f4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a17f0:	2000      	movs	r0, #0
 80a17f2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a17f4:	f000 f840 	bl	80a1878 <_Z19__fetch_global_Wirev>
 80a17f8:	f7ff f992 	bl	80a0b20 <_ZN7TwoWire9isEnabledEv>
 80a17fc:	b108      	cbz	r0, 80a1802 <pinAvailable+0x26>
 80a17fe:	2c01      	cmp	r4, #1
 80a1800:	d9f6      	bls.n	80a17f0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1802:	f7ff fdf1 	bl	80a13e8 <_Z22__fetch_global_Serial1v>
 80a1806:	f7ff fdeb 	bl	80a13e0 <_ZN11USARTSerial9isEnabledEv>
 80a180a:	b118      	cbz	r0, 80a1814 <pinAvailable+0x38>
 80a180c:	f1a4 0312 	sub.w	r3, r4, #18
 80a1810:	2b01      	cmp	r3, #1
 80a1812:	d9ed      	bls.n	80a17f0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1814:	2c17      	cmp	r4, #23
 80a1816:	bf8c      	ite	hi
 80a1818:	2000      	movhi	r0, #0
 80a181a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a181c:	bd10      	pop	{r4, pc}
 80a181e:	bf00      	nop
 80a1820:	2000068c 	.word	0x2000068c

080a1824 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1824:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1826:	b538      	push	{r3, r4, r5, lr}
 80a1828:	4604      	mov	r4, r0
 80a182a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a182c:	d80a      	bhi.n	80a1844 <pinMode+0x20>
 80a182e:	29ff      	cmp	r1, #255	; 0xff
 80a1830:	d008      	beq.n	80a1844 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1832:	f7ff ffd3 	bl	80a17dc <pinAvailable>
 80a1836:	b128      	cbz	r0, 80a1844 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1838:	4629      	mov	r1, r5
 80a183a:	4620      	mov	r0, r4
}
 80a183c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1840:	f7fe bf60 	b.w	80a0704 <HAL_Pin_Mode>
 80a1844:	bd38      	pop	{r3, r4, r5, pc}

080a1846 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1846:	b538      	push	{r3, r4, r5, lr}
 80a1848:	4604      	mov	r4, r0
 80a184a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a184c:	f7fe ff62 	bl	80a0714 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1850:	28ff      	cmp	r0, #255	; 0xff
 80a1852:	d010      	beq.n	80a1876 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1854:	2806      	cmp	r0, #6
 80a1856:	d804      	bhi.n	80a1862 <digitalWrite+0x1c>
 80a1858:	234d      	movs	r3, #77	; 0x4d
 80a185a:	fa23 f000 	lsr.w	r0, r3, r0
 80a185e:	07c3      	lsls	r3, r0, #31
 80a1860:	d409      	bmi.n	80a1876 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1862:	4620      	mov	r0, r4
 80a1864:	f7ff ffba 	bl	80a17dc <pinAvailable>
 80a1868:	b128      	cbz	r0, 80a1876 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a186a:	4629      	mov	r1, r5
 80a186c:	4620      	mov	r0, r4
}
 80a186e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1872:	f7fe bf57 	b.w	80a0724 <HAL_GPIO_Write>
 80a1876:	bd38      	pop	{r3, r4, r5, pc}

080a1878 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1878:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a187a:	4d0b      	ldr	r5, [pc, #44]	; (80a18a8 <_Z19__fetch_global_Wirev+0x30>)
 80a187c:	6829      	ldr	r1, [r5, #0]
 80a187e:	f011 0401 	ands.w	r4, r1, #1
 80a1882:	d10f      	bne.n	80a18a4 <_Z19__fetch_global_Wirev+0x2c>
 80a1884:	4628      	mov	r0, r5
 80a1886:	f7fe fc0c 	bl	80a00a2 <__cxa_guard_acquire>
 80a188a:	b158      	cbz	r0, 80a18a4 <_Z19__fetch_global_Wirev+0x2c>
 80a188c:	4621      	mov	r1, r4
 80a188e:	4807      	ldr	r0, [pc, #28]	; (80a18ac <_Z19__fetch_global_Wirev+0x34>)
 80a1890:	f7ff f934 	bl	80a0afc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1894:	4628      	mov	r0, r5
 80a1896:	f7fe fc09 	bl	80a00ac <__cxa_guard_release>
 80a189a:	4a05      	ldr	r2, [pc, #20]	; (80a18b0 <_Z19__fetch_global_Wirev+0x38>)
 80a189c:	4905      	ldr	r1, [pc, #20]	; (80a18b4 <_Z19__fetch_global_Wirev+0x3c>)
 80a189e:	4803      	ldr	r0, [pc, #12]	; (80a18ac <_Z19__fetch_global_Wirev+0x34>)
 80a18a0:	f000 f844 	bl	80a192c <__aeabi_atexit>
	return wire;
}
 80a18a4:	4801      	ldr	r0, [pc, #4]	; (80a18ac <_Z19__fetch_global_Wirev+0x34>)
 80a18a6:	bd38      	pop	{r3, r4, r5, pc}
 80a18a8:	2000065c 	.word	0x2000065c
 80a18ac:	20000660 	.word	0x20000660
 80a18b0:	2000006c 	.word	0x2000006c
 80a18b4:	080a0aa3 	.word	0x080a0aa3

080a18b8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a18b8:	b513      	push	{r0, r1, r4, lr}
 80a18ba:	4c08      	ldr	r4, [pc, #32]	; (80a18dc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a18bc:	2300      	movs	r3, #0
 80a18be:	461a      	mov	r2, r3
 80a18c0:	4619      	mov	r1, r3
 80a18c2:	9300      	str	r3, [sp, #0]
 80a18c4:	4620      	mov	r0, r4
 80a18c6:	f7ff f97f 	bl	80a0bc8 <_ZN9IPAddressC1Ehhhh>
 80a18ca:	4620      	mov	r0, r4
 80a18cc:	4a04      	ldr	r2, [pc, #16]	; (80a18e0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a18ce:	4905      	ldr	r1, [pc, #20]	; (80a18e4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a18d0:	b002      	add	sp, #8
 80a18d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a18d6:	f000 b829 	b.w	80a192c <__aeabi_atexit>
 80a18da:	bf00      	nop
 80a18dc:	20000674 	.word	0x20000674
 80a18e0:	2000006c 	.word	0x2000006c
 80a18e4:	080a00b3 	.word	0x080a00b3

080a18e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a18e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a18ea:	4c0c      	ldr	r4, [pc, #48]	; (80a191c <_GLOBAL__sub_I_SPI+0x34>)
 80a18ec:	4e0c      	ldr	r6, [pc, #48]	; (80a1920 <_GLOBAL__sub_I_SPI+0x38>)
 80a18ee:	4d0d      	ldr	r5, [pc, #52]	; (80a1924 <_GLOBAL__sub_I_SPI+0x3c>)
 80a18f0:	2100      	movs	r1, #0
 80a18f2:	4620      	mov	r0, r4
 80a18f4:	f7ff fa92 	bl	80a0e1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a18f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a18fa:	4c0b      	ldr	r4, [pc, #44]	; (80a1928 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a18fc:	4632      	mov	r2, r6
 80a18fe:	4629      	mov	r1, r5
 80a1900:	f000 f814 	bl	80a192c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1904:	2101      	movs	r1, #1
 80a1906:	4620      	mov	r0, r4
 80a1908:	f7ff fa88 	bl	80a0e1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a190c:	4632      	mov	r2, r6
 80a190e:	4629      	mov	r1, r5
 80a1910:	4620      	mov	r0, r4
 80a1912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1916:	f000 b809 	b.w	80a192c <__aeabi_atexit>
 80a191a:	bf00      	nop
 80a191c:	2000068c 	.word	0x2000068c
 80a1920:	2000006c 	.word	0x2000006c
 80a1924:	080a0e0d 	.word	0x080a0e0d
 80a1928:	2000069c 	.word	0x2000069c

080a192c <__aeabi_atexit>:
 80a192c:	460b      	mov	r3, r1
 80a192e:	4601      	mov	r1, r0
 80a1930:	4618      	mov	r0, r3
 80a1932:	f000 b94b 	b.w	80a1bcc <__cxa_atexit>

080a1936 <_ZdlPvj>:
 80a1936:	f7fe bbb2 	b.w	80a009e <_ZdlPv>
	...

080a193c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a193c:	4b24      	ldr	r3, [pc, #144]	; (80a19d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d0      	lsls	r0, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4b22      	ldr	r3, [pc, #136]	; (80a19d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a194a:	681a      	ldr	r2, [r3, #0]
 80a194c:	07d1      	lsls	r1, r2, #31
 80a194e:	bf5c      	itt	pl
 80a1950:	2201      	movpl	r2, #1
 80a1952:	601a      	strpl	r2, [r3, #0]
 80a1954:	4b20      	ldr	r3, [pc, #128]	; (80a19d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1956:	681a      	ldr	r2, [r3, #0]
 80a1958:	07d2      	lsls	r2, r2, #31
 80a195a:	bf5c      	itt	pl
 80a195c:	2201      	movpl	r2, #1
 80a195e:	601a      	strpl	r2, [r3, #0]
 80a1960:	4b1e      	ldr	r3, [pc, #120]	; (80a19dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1962:	681a      	ldr	r2, [r3, #0]
 80a1964:	07d0      	lsls	r0, r2, #31
 80a1966:	bf5c      	itt	pl
 80a1968:	2201      	movpl	r2, #1
 80a196a:	601a      	strpl	r2, [r3, #0]
 80a196c:	4b1c      	ldr	r3, [pc, #112]	; (80a19e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a196e:	681a      	ldr	r2, [r3, #0]
 80a1970:	07d1      	lsls	r1, r2, #31
 80a1972:	bf5c      	itt	pl
 80a1974:	2201      	movpl	r2, #1
 80a1976:	601a      	strpl	r2, [r3, #0]
 80a1978:	4b1a      	ldr	r3, [pc, #104]	; (80a19e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a197a:	681a      	ldr	r2, [r3, #0]
 80a197c:	07d2      	lsls	r2, r2, #31
 80a197e:	bf5c      	itt	pl
 80a1980:	2201      	movpl	r2, #1
 80a1982:	601a      	strpl	r2, [r3, #0]
 80a1984:	4b18      	ldr	r3, [pc, #96]	; (80a19e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1986:	681a      	ldr	r2, [r3, #0]
 80a1988:	07d0      	lsls	r0, r2, #31
 80a198a:	bf5c      	itt	pl
 80a198c:	2201      	movpl	r2, #1
 80a198e:	601a      	strpl	r2, [r3, #0]
 80a1990:	4b16      	ldr	r3, [pc, #88]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1992:	681a      	ldr	r2, [r3, #0]
 80a1994:	07d1      	lsls	r1, r2, #31
 80a1996:	bf5c      	itt	pl
 80a1998:	2201      	movpl	r2, #1
 80a199a:	601a      	strpl	r2, [r3, #0]
 80a199c:	4b14      	ldr	r3, [pc, #80]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a199e:	681a      	ldr	r2, [r3, #0]
 80a19a0:	07d2      	lsls	r2, r2, #31
 80a19a2:	bf5c      	itt	pl
 80a19a4:	2201      	movpl	r2, #1
 80a19a6:	601a      	strpl	r2, [r3, #0]
 80a19a8:	4b12      	ldr	r3, [pc, #72]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a19aa:	681a      	ldr	r2, [r3, #0]
 80a19ac:	07d0      	lsls	r0, r2, #31
 80a19ae:	bf5c      	itt	pl
 80a19b0:	2201      	movpl	r2, #1
 80a19b2:	601a      	strpl	r2, [r3, #0]
 80a19b4:	4b10      	ldr	r3, [pc, #64]	; (80a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a19b6:	681a      	ldr	r2, [r3, #0]
 80a19b8:	07d1      	lsls	r1, r2, #31
 80a19ba:	bf5c      	itt	pl
 80a19bc:	2201      	movpl	r2, #1
 80a19be:	601a      	strpl	r2, [r3, #0]
 80a19c0:	4b0e      	ldr	r3, [pc, #56]	; (80a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a19c2:	681a      	ldr	r2, [r3, #0]
 80a19c4:	07d2      	lsls	r2, r2, #31
 80a19c6:	bf5c      	itt	pl
 80a19c8:	2201      	movpl	r2, #1
 80a19ca:	601a      	strpl	r2, [r3, #0]
 80a19cc:	4770      	bx	lr
 80a19ce:	bf00      	nop
 80a19d0:	200006d8 	.word	0x200006d8
 80a19d4:	200006d4 	.word	0x200006d4
 80a19d8:	200006d0 	.word	0x200006d0
 80a19dc:	200006cc 	.word	0x200006cc
 80a19e0:	200006c8 	.word	0x200006c8
 80a19e4:	200006c4 	.word	0x200006c4
 80a19e8:	200006c0 	.word	0x200006c0
 80a19ec:	200006bc 	.word	0x200006bc
 80a19f0:	200006b8 	.word	0x200006b8
 80a19f4:	200006b4 	.word	0x200006b4
 80a19f8:	200006b0 	.word	0x200006b0
 80a19fc:	200006ac 	.word	0x200006ac

080a1a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a00:	4b18      	ldr	r3, [pc, #96]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a02:	681a      	ldr	r2, [r3, #0]
 80a1a04:	07d1      	lsls	r1, r2, #31
 80a1a06:	bf5c      	itt	pl
 80a1a08:	2201      	movpl	r2, #1
 80a1a0a:	601a      	strpl	r2, [r3, #0]
 80a1a0c:	4b16      	ldr	r3, [pc, #88]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a0e:	681a      	ldr	r2, [r3, #0]
 80a1a10:	07d2      	lsls	r2, r2, #31
 80a1a12:	bf5c      	itt	pl
 80a1a14:	2201      	movpl	r2, #1
 80a1a16:	601a      	strpl	r2, [r3, #0]
 80a1a18:	4b14      	ldr	r3, [pc, #80]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a1a:	681a      	ldr	r2, [r3, #0]
 80a1a1c:	07d0      	lsls	r0, r2, #31
 80a1a1e:	bf5c      	itt	pl
 80a1a20:	2201      	movpl	r2, #1
 80a1a22:	601a      	strpl	r2, [r3, #0]
 80a1a24:	4b12      	ldr	r3, [pc, #72]	; (80a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a26:	681a      	ldr	r2, [r3, #0]
 80a1a28:	07d1      	lsls	r1, r2, #31
 80a1a2a:	bf5c      	itt	pl
 80a1a2c:	2201      	movpl	r2, #1
 80a1a2e:	601a      	strpl	r2, [r3, #0]
 80a1a30:	4b10      	ldr	r3, [pc, #64]	; (80a1a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a32:	681a      	ldr	r2, [r3, #0]
 80a1a34:	07d2      	lsls	r2, r2, #31
 80a1a36:	bf5c      	itt	pl
 80a1a38:	2201      	movpl	r2, #1
 80a1a3a:	601a      	strpl	r2, [r3, #0]
 80a1a3c:	4b0e      	ldr	r3, [pc, #56]	; (80a1a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a3e:	681a      	ldr	r2, [r3, #0]
 80a1a40:	07d0      	lsls	r0, r2, #31
 80a1a42:	bf5c      	itt	pl
 80a1a44:	2201      	movpl	r2, #1
 80a1a46:	601a      	strpl	r2, [r3, #0]
 80a1a48:	4b0c      	ldr	r3, [pc, #48]	; (80a1a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a4a:	681a      	ldr	r2, [r3, #0]
 80a1a4c:	07d1      	lsls	r1, r2, #31
 80a1a4e:	bf5c      	itt	pl
 80a1a50:	2201      	movpl	r2, #1
 80a1a52:	601a      	strpl	r2, [r3, #0]
 80a1a54:	4b0a      	ldr	r3, [pc, #40]	; (80a1a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a56:	681a      	ldr	r2, [r3, #0]
 80a1a58:	07d2      	lsls	r2, r2, #31
 80a1a5a:	bf5c      	itt	pl
 80a1a5c:	2201      	movpl	r2, #1
 80a1a5e:	601a      	strpl	r2, [r3, #0]
 80a1a60:	4770      	bx	lr
 80a1a62:	bf00      	nop
 80a1a64:	200006f8 	.word	0x200006f8
 80a1a68:	200006f4 	.word	0x200006f4
 80a1a6c:	200006f0 	.word	0x200006f0
 80a1a70:	200006ec 	.word	0x200006ec
 80a1a74:	200006e8 	.word	0x200006e8
 80a1a78:	200006e4 	.word	0x200006e4
 80a1a7c:	200006e0 	.word	0x200006e0
 80a1a80:	200006dc 	.word	0x200006dc

080a1a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a84:	4b18      	ldr	r3, [pc, #96]	; (80a1ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a86:	681a      	ldr	r2, [r3, #0]
 80a1a88:	07d1      	lsls	r1, r2, #31
 80a1a8a:	bf5c      	itt	pl
 80a1a8c:	2201      	movpl	r2, #1
 80a1a8e:	601a      	strpl	r2, [r3, #0]
 80a1a90:	4b16      	ldr	r3, [pc, #88]	; (80a1aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a92:	681a      	ldr	r2, [r3, #0]
 80a1a94:	07d2      	lsls	r2, r2, #31
 80a1a96:	bf5c      	itt	pl
 80a1a98:	2201      	movpl	r2, #1
 80a1a9a:	601a      	strpl	r2, [r3, #0]
 80a1a9c:	4b14      	ldr	r3, [pc, #80]	; (80a1af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a9e:	681a      	ldr	r2, [r3, #0]
 80a1aa0:	07d0      	lsls	r0, r2, #31
 80a1aa2:	bf5c      	itt	pl
 80a1aa4:	2201      	movpl	r2, #1
 80a1aa6:	601a      	strpl	r2, [r3, #0]
 80a1aa8:	4b12      	ldr	r3, [pc, #72]	; (80a1af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1aaa:	681a      	ldr	r2, [r3, #0]
 80a1aac:	07d1      	lsls	r1, r2, #31
 80a1aae:	bf5c      	itt	pl
 80a1ab0:	2201      	movpl	r2, #1
 80a1ab2:	601a      	strpl	r2, [r3, #0]
 80a1ab4:	4b10      	ldr	r3, [pc, #64]	; (80a1af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1ab6:	681a      	ldr	r2, [r3, #0]
 80a1ab8:	07d2      	lsls	r2, r2, #31
 80a1aba:	bf5c      	itt	pl
 80a1abc:	2201      	movpl	r2, #1
 80a1abe:	601a      	strpl	r2, [r3, #0]
 80a1ac0:	4b0e      	ldr	r3, [pc, #56]	; (80a1afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1ac2:	681a      	ldr	r2, [r3, #0]
 80a1ac4:	07d0      	lsls	r0, r2, #31
 80a1ac6:	bf5c      	itt	pl
 80a1ac8:	2201      	movpl	r2, #1
 80a1aca:	601a      	strpl	r2, [r3, #0]
 80a1acc:	4b0c      	ldr	r3, [pc, #48]	; (80a1b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1ace:	681a      	ldr	r2, [r3, #0]
 80a1ad0:	07d1      	lsls	r1, r2, #31
 80a1ad2:	bf5c      	itt	pl
 80a1ad4:	2201      	movpl	r2, #1
 80a1ad6:	601a      	strpl	r2, [r3, #0]
 80a1ad8:	4b0a      	ldr	r3, [pc, #40]	; (80a1b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1ada:	681a      	ldr	r2, [r3, #0]
 80a1adc:	07d2      	lsls	r2, r2, #31
 80a1ade:	bf5c      	itt	pl
 80a1ae0:	2201      	movpl	r2, #1
 80a1ae2:	601a      	strpl	r2, [r3, #0]
 80a1ae4:	4770      	bx	lr
 80a1ae6:	bf00      	nop
 80a1ae8:	20000718 	.word	0x20000718
 80a1aec:	20000714 	.word	0x20000714
 80a1af0:	20000710 	.word	0x20000710
 80a1af4:	2000070c 	.word	0x2000070c
 80a1af8:	20000708 	.word	0x20000708
 80a1afc:	20000704 	.word	0x20000704
 80a1b00:	20000700 	.word	0x20000700
 80a1b04:	200006fc 	.word	0x200006fc

080a1b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b08:	4b24      	ldr	r3, [pc, #144]	; (80a1b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b0a:	681a      	ldr	r2, [r3, #0]
 80a1b0c:	07d0      	lsls	r0, r2, #31
 80a1b0e:	bf5c      	itt	pl
 80a1b10:	2201      	movpl	r2, #1
 80a1b12:	601a      	strpl	r2, [r3, #0]
 80a1b14:	4b22      	ldr	r3, [pc, #136]	; (80a1ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b16:	681a      	ldr	r2, [r3, #0]
 80a1b18:	07d1      	lsls	r1, r2, #31
 80a1b1a:	bf5c      	itt	pl
 80a1b1c:	2201      	movpl	r2, #1
 80a1b1e:	601a      	strpl	r2, [r3, #0]
 80a1b20:	4b20      	ldr	r3, [pc, #128]	; (80a1ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b22:	681a      	ldr	r2, [r3, #0]
 80a1b24:	07d2      	lsls	r2, r2, #31
 80a1b26:	bf5c      	itt	pl
 80a1b28:	2201      	movpl	r2, #1
 80a1b2a:	601a      	strpl	r2, [r3, #0]
 80a1b2c:	4b1e      	ldr	r3, [pc, #120]	; (80a1ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b2e:	681a      	ldr	r2, [r3, #0]
 80a1b30:	07d0      	lsls	r0, r2, #31
 80a1b32:	bf5c      	itt	pl
 80a1b34:	2201      	movpl	r2, #1
 80a1b36:	601a      	strpl	r2, [r3, #0]
 80a1b38:	4b1c      	ldr	r3, [pc, #112]	; (80a1bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b3a:	681a      	ldr	r2, [r3, #0]
 80a1b3c:	07d1      	lsls	r1, r2, #31
 80a1b3e:	bf5c      	itt	pl
 80a1b40:	2201      	movpl	r2, #1
 80a1b42:	601a      	strpl	r2, [r3, #0]
 80a1b44:	4b1a      	ldr	r3, [pc, #104]	; (80a1bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b46:	681a      	ldr	r2, [r3, #0]
 80a1b48:	07d2      	lsls	r2, r2, #31
 80a1b4a:	bf5c      	itt	pl
 80a1b4c:	2201      	movpl	r2, #1
 80a1b4e:	601a      	strpl	r2, [r3, #0]
 80a1b50:	4b18      	ldr	r3, [pc, #96]	; (80a1bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b52:	681a      	ldr	r2, [r3, #0]
 80a1b54:	07d0      	lsls	r0, r2, #31
 80a1b56:	bf5c      	itt	pl
 80a1b58:	2201      	movpl	r2, #1
 80a1b5a:	601a      	strpl	r2, [r3, #0]
 80a1b5c:	4b16      	ldr	r3, [pc, #88]	; (80a1bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b5e:	681a      	ldr	r2, [r3, #0]
 80a1b60:	07d1      	lsls	r1, r2, #31
 80a1b62:	bf5c      	itt	pl
 80a1b64:	2201      	movpl	r2, #1
 80a1b66:	601a      	strpl	r2, [r3, #0]
 80a1b68:	4b14      	ldr	r3, [pc, #80]	; (80a1bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1b6a:	681a      	ldr	r2, [r3, #0]
 80a1b6c:	07d2      	lsls	r2, r2, #31
 80a1b6e:	bf5c      	itt	pl
 80a1b70:	2201      	movpl	r2, #1
 80a1b72:	601a      	strpl	r2, [r3, #0]
 80a1b74:	4b12      	ldr	r3, [pc, #72]	; (80a1bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1b76:	681a      	ldr	r2, [r3, #0]
 80a1b78:	07d0      	lsls	r0, r2, #31
 80a1b7a:	bf5c      	itt	pl
 80a1b7c:	2201      	movpl	r2, #1
 80a1b7e:	601a      	strpl	r2, [r3, #0]
 80a1b80:	4b10      	ldr	r3, [pc, #64]	; (80a1bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1b82:	681a      	ldr	r2, [r3, #0]
 80a1b84:	07d1      	lsls	r1, r2, #31
 80a1b86:	bf5c      	itt	pl
 80a1b88:	2201      	movpl	r2, #1
 80a1b8a:	601a      	strpl	r2, [r3, #0]
 80a1b8c:	4b0e      	ldr	r3, [pc, #56]	; (80a1bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1b8e:	681a      	ldr	r2, [r3, #0]
 80a1b90:	07d2      	lsls	r2, r2, #31
 80a1b92:	bf5c      	itt	pl
 80a1b94:	2201      	movpl	r2, #1
 80a1b96:	601a      	strpl	r2, [r3, #0]
 80a1b98:	4770      	bx	lr
 80a1b9a:	bf00      	nop
 80a1b9c:	20000748 	.word	0x20000748
 80a1ba0:	20000744 	.word	0x20000744
 80a1ba4:	20000740 	.word	0x20000740
 80a1ba8:	2000073c 	.word	0x2000073c
 80a1bac:	20000738 	.word	0x20000738
 80a1bb0:	20000734 	.word	0x20000734
 80a1bb4:	20000730 	.word	0x20000730
 80a1bb8:	2000072c 	.word	0x2000072c
 80a1bbc:	20000728 	.word	0x20000728
 80a1bc0:	20000724 	.word	0x20000724
 80a1bc4:	20000720 	.word	0x20000720
 80a1bc8:	2000071c 	.word	0x2000071c

080a1bcc <__cxa_atexit>:
 80a1bcc:	b510      	push	{r4, lr}
 80a1bce:	4c05      	ldr	r4, [pc, #20]	; (80a1be4 <__cxa_atexit+0x18>)
 80a1bd0:	4613      	mov	r3, r2
 80a1bd2:	b12c      	cbz	r4, 80a1be0 <__cxa_atexit+0x14>
 80a1bd4:	460a      	mov	r2, r1
 80a1bd6:	4601      	mov	r1, r0
 80a1bd8:	2002      	movs	r0, #2
 80a1bda:	f3af 8000 	nop.w
 80a1bde:	bd10      	pop	{r4, pc}
 80a1be0:	4620      	mov	r0, r4
 80a1be2:	bd10      	pop	{r4, pc}
 80a1be4:	00000000 	.word	0x00000000

080a1be8 <memcpy>:
 80a1be8:	b510      	push	{r4, lr}
 80a1bea:	1e43      	subs	r3, r0, #1
 80a1bec:	440a      	add	r2, r1
 80a1bee:	4291      	cmp	r1, r2
 80a1bf0:	d004      	beq.n	80a1bfc <memcpy+0x14>
 80a1bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1bfa:	e7f8      	b.n	80a1bee <memcpy+0x6>
 80a1bfc:	bd10      	pop	{r4, pc}

080a1bfe <memset>:
 80a1bfe:	4603      	mov	r3, r0
 80a1c00:	4402      	add	r2, r0
 80a1c02:	4293      	cmp	r3, r2
 80a1c04:	d002      	beq.n	80a1c0c <memset+0xe>
 80a1c06:	f803 1b01 	strb.w	r1, [r3], #1
 80a1c0a:	e7fa      	b.n	80a1c02 <memset+0x4>
 80a1c0c:	4770      	bx	lr
	...

080a1c10 <srand>:
 80a1c10:	b538      	push	{r3, r4, r5, lr}
 80a1c12:	4b12      	ldr	r3, [pc, #72]	; (80a1c5c <srand+0x4c>)
 80a1c14:	4605      	mov	r5, r0
 80a1c16:	681c      	ldr	r4, [r3, #0]
 80a1c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1c1a:	b9d3      	cbnz	r3, 80a1c52 <srand+0x42>
 80a1c1c:	2018      	movs	r0, #24
 80a1c1e:	f7fe ff1f 	bl	80a0a60 <malloc>
 80a1c22:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1c26:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1c28:	8003      	strh	r3, [r0, #0]
 80a1c2a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1c2e:	8043      	strh	r3, [r0, #2]
 80a1c30:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1c34:	8083      	strh	r3, [r0, #4]
 80a1c36:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1c3a:	80c3      	strh	r3, [r0, #6]
 80a1c3c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1c40:	8103      	strh	r3, [r0, #8]
 80a1c42:	2305      	movs	r3, #5
 80a1c44:	8143      	strh	r3, [r0, #10]
 80a1c46:	230b      	movs	r3, #11
 80a1c48:	8183      	strh	r3, [r0, #12]
 80a1c4a:	2201      	movs	r2, #1
 80a1c4c:	2300      	movs	r3, #0
 80a1c4e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1c52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1c54:	2200      	movs	r2, #0
 80a1c56:	611d      	str	r5, [r3, #16]
 80a1c58:	615a      	str	r2, [r3, #20]
 80a1c5a:	bd38      	pop	{r3, r4, r5, pc}
 80a1c5c:	20000068 	.word	0x20000068

080a1c60 <strlen>:
 80a1c60:	4603      	mov	r3, r0
 80a1c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1c66:	2a00      	cmp	r2, #0
 80a1c68:	d1fb      	bne.n	80a1c62 <strlen+0x2>
 80a1c6a:	1a18      	subs	r0, r3, r0
 80a1c6c:	3801      	subs	r0, #1
 80a1c6e:	4770      	bx	lr

080a1c70 <dynalib_user>:
 80a1c70:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1c80:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a1c90:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a1ca0:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a1cb0:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a1cc0:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a1cd0:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a1ce0:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a1cf0:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a1d00:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a1d10:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a1d20:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a1d30:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a1d40:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a1d50:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a1d60:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a1d70:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a1d80:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a1d90:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a1da0:	4853 5400 746f 6c61 6d20 766f 6d65 6e65     SH.Total movemen
 80a1db0:	3a74 0020 7053 6565 2064 696c 696d 2074     t: .Speed limit 
 80a1dc0:	203a 4900 204e 4843 4345 204b 414d 4354     : .IN CHECK MATC
 80a1dd0:	2048 3a3a 0020 5453 4c49 004c 4f4d 4556     H :: .STILL.MOVE
 80a1de0:	6600 756c 5878 3a20 0020 6c66 7875 2059     .fluxX : .fluxY 
 80a1df0:	203a 6600 756c 5a78 3a20 0020 5254 554f     : .fluxZ : .TROU
 80a1e00:	4c42 2045 4f43 4e55 2054 3a3a 0020 6863     BLE COUNT :: .ch
 80a1e10:	6e75 206b 3a3a 0020 4156 3a4c 203a 2000     unk :: .VAL:: . 
 80a1e20:	3a3a 2020 4c00 5349 4554 494e 474e 2d2d     ::  .LISTENING--
 80a1e30:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d 6572     -------------.re
 80a1e40:	6563 7669 6e69 2067 656d 7373 6761 0065     ceiving message.
 80a1e50:	2d2d 692d 206e 6877 6c69 2d65 2d2d 5000     ---in while---.P
 80a1e60:	5241 4953 474e 7300 6974 6c6c 2f00 6f6d     ARSING.still./mo
 80a1e70:	6576 6c00 6769 746e 6968 676e 7400 7275     ve.lignthing.tur
 80a1e80:	696e 676e 6f20 6666 6300 6568 6b63 756e     ning off.checknu
 80a1e90:	006d 0000                                   m...

080a1e94 <_ZTV7TwoWire>:
	...
 80a1e9c:	0aa3 080a 0aed 080a 0ac5 080a 0aa5 080a     ................
 80a1eac:	0acd 080a 0ad5 080a 0add 080a 0ae5 080a     ................

080a1ebc <_ZTV9IPAddress>:
	...
 80a1ec4:	0b29 080a 00b3 080a 00d5 080a 6162 6475     )...........baud
 80a1ed4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1ee4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1ef4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1f04:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1f14:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1f24:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1f34:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1f44:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1f54:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1f64:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1f74:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a1f84:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a1f94:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a1fa4:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a1fb4 <_ZTVN5spark12NetworkClassE>:
	...
 80a1fbc:	0c09 080a 0c13 080a 0c1d 080a 0c27 080a     ............'...
 80a1fcc:	0c31 080a 0c3d 080a 0c49 080a 0c55 080a     1...=...I...U...
 80a1fdc:	0c5d 080a 0c67 080a 0c71 080a               ]...g...q...

080a1fe8 <_ZTV8SPIClass>:
	...
 80a1ff0:	0e0d 080a 0e0f 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2000:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2010:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2020:	0000 0000                                   ....

080a2024 <_ZTV3UDP>:
	...
 80a202c:	00b5 080a 00e3 080a 0f4b 080a 106b 080a     ........K...k...
 80a203c:	0f43 080a 0f61 080a 0f7f 080a 0f99 080a     C...a...........
 80a204c:	0fbb 080a 1005 080a 1027 080a 11bd 080a     ........'.......
 80a205c:	10d1 080a 0f2d 080a 12cd 080a 1139 080a     ....-.......9...
 80a206c:	11f5 080a 12fb 080a 1095 080a 0f39 080a     ............9...
 80a207c:	119d 080a 0f3f 080a 0f9b 080a fff0 ffff     ....?...........
 80a208c:	0000 0000 0fb3 080a                         ........

080a2094 <_ZTV11USARTSerial>:
	...
 80a209c:	1333 080a 1383 080a 1391 080a 0ced 080a     3...............
 80a20ac:	1347 080a 1369 080a 1355 080a 137d 080a     G...i...U...}...
 80a20bc:	1335 080a 1339 080a                         5...9...

080a20c4 <_ZTV9USBSerial>:
	...
 80a20cc:	1439 080a 1489 080a 1497 080a 0ced 080a     9...............
 80a20dc:	1475 080a 143b 080a 1451 080a 1483 080a     u...;...Q.......
 80a20ec:	1467 080a 1435 080a                         g...5...

080a20f4 <_ZTVN5spark9WiFiClassE>:
	...
 80a20fc:	1687 080a 167d 080a 1673 080a 15e5 080a     ....}...s.......
 80a210c:	1667 080a 165b 080a 164f 080a 1647 080a     g...[...O...G...
 80a211c:	163d 080a 1633 080a 15ef 080a               =...3.......

080a2128 <__sf_fake_stdin>:
	...

080a2148 <__sf_fake_stdout>:
	...

080a2168 <__sf_fake_stderr>:
	...
 80a2188:	0043                                        C.

080a218a <link_const_variable_data_end>:
	...

080a218c <link_constructors_location>:
 80a218c:	080a0201 	.word	0x080a0201
 80a2190:	080a02d9 	.word	0x080a02d9
 80a2194:	080a0383 	.word	0x080a0383
 80a2198:	080a042d 	.word	0x080a042d
 80a219c:	080a06ad 	.word	0x080a06ad
 80a21a0:	080a06b1 	.word	0x080a06b1
 80a21a4:	080a0bf9 	.word	0x080a0bf9
 80a21a8:	080a0cd9 	.word	0x080a0cd9
 80a21ac:	080a0df1 	.word	0x080a0df1
 80a21b0:	080a0f01 	.word	0x080a0f01
 80a21b4:	080a0f19 	.word	0x080a0f19
 80a21b8:	080a1691 	.word	0x080a1691
 80a21bc:	080a18b9 	.word	0x080a18b9
 80a21c0:	080a18e9 	.word	0x080a18e9
 80a21c4:	080a193d 	.word	0x080a193d
 80a21c8:	080a1a01 	.word	0x080a1a01
 80a21cc:	080a1a85 	.word	0x080a1a85
 80a21d0:	080a1b09 	.word	0x080a1b09

080a21d4 <link_constructors_end>:
	...
