
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.1-rc.1/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005644  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5660  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  20000000  080a5664  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006f4  2000009c  2000009c  0004009c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5700  080a5700  00035700  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5728  080a5728  00035728  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bd073  00000000  00000000  0003572c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000114ac  00000000  00000000  000f279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001880e  00000000  00000000  00103c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023a8  00000000  00000000  0011c459  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000037e0  00000000  00000000  0011e801  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026def  00000000  00000000  00121fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000288fb  00000000  00000000  00148dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a781c  00000000  00000000  001716cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c58c  00000000  00000000  00218ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 ffe9 	bl	80a5004 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 ffee 	bl	80a501a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a5664 	.word	0x080a5664
 80a004c:	2000009c 	.word	0x2000009c
 80a0050:	2000009c 	.word	0x2000009c
 80a0054:	20000790 	.word	0x20000790
 80a0058:	20000790 	.word	0x20000790

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fdf5 	bl	80a3c4c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a561c 	.word	0x080a561c
 80a0084:	080a565c 	.word	0x080a565c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b904 	b.w	80a0294 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fc93 	bl	80a09b8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bd9b 	b.w	80a3bd0 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f002 bdcd 	b.w	80a2c38 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 bdd3 	b.w	80a2c48 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f003 fa04 	bl	80a34cc <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f003 fb39 	bl	80a373c <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a54bc 	.word	0x080a54bc

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f003 fe90 	bl	80a3dfe <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f003 fe86 	bl	80a3dfe <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}

080a00f6 <_Z10setupMotorPiiii>:
#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
bool pixels[PIXEL_COUNT];
int pixelPointer;
void setupMotor(int motorPinsArray[], int enable, int step, int direction){
 80a00f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a00fa:	4616      	mov	r6, r2
 80a00fc:	461f      	mov	r7, r3
 80a00fe:	4604      	mov	r4, r0
 80a0100:	460d      	mov	r5, r1
  pinMode(enable, OUTPUT); //Enable
 80a0102:	fa1f f881 	uxth.w	r8, r1
 80a0106:	4640      	mov	r0, r8
 80a0108:	2101      	movs	r1, #1
 80a010a:	f003 fdef 	bl	80a3cec <pinMode>
  pinMode(step, OUTPUT); //Step
 80a010e:	2101      	movs	r1, #1
 80a0110:	b2b0      	uxth	r0, r6
 80a0112:	f003 fdeb 	bl	80a3cec <pinMode>
  pinMode(direction, OUTPUT); //Direction
 80a0116:	2101      	movs	r1, #1
 80a0118:	b2b8      	uxth	r0, r7
 80a011a:	f003 fde7 	bl	80a3cec <pinMode>

  digitalWrite(enable, LOW);
 80a011e:	2100      	movs	r1, #0
 80a0120:	4640      	mov	r0, r8
 80a0122:	f003 fdf4 	bl	80a3d0e <digitalWrite>

  motorPinsArray[0]= direction;
 80a0126:	6027      	str	r7, [r4, #0]
  motorPinsArray[1]= step;
 80a0128:	6066      	str	r6, [r4, #4]
  motorPinsArray[2]= enable;
 80a012a:	60a5      	str	r5, [r4, #8]
 80a012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0130 <_Z15calibrateSensorv>:
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
}

void calibrateSensor(){
 80a0130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0134:	f003 fc58 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0138:	4929      	ldr	r1, [pc, #164]	; (80a01e0 <_Z15calibrateSensorv+0xb0>)
 80a013a:	f002 ff07 	bl	80a2f4c <_ZN5Print5printEPKc>
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
 80a013e:	4e29      	ldr	r6, [pc, #164]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0140:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80a01f4 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a0144:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80a01f8 <_Z15calibrateSensorv+0xc8>
  Serial.println("Calibration finished");
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0148:	2564      	movs	r5, #100	; 0x64
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
 80a014a:	4826      	ldr	r0, [pc, #152]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a014c:	f000 ff43 	bl	80a0fd6 <_ZN7LSM9DS114accelAvailableEv>
 80a0150:	b110      	cbz	r0, 80a0158 <_Z15calibrateSensorv+0x28>
    {
      imu.readAccel();
 80a0152:	4824      	ldr	r0, [pc, #144]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a0154:	f001 f80a 	bl	80a116c <_ZN7LSM9DS19readAccelEv>
    }
    refX += imu.calcAccel(imu.ax);
 80a0158:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a015c:	4821      	ldr	r0, [pc, #132]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a015e:	f000 fce6 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
 80a0162:	4601      	mov	r1, r0
 80a0164:	f8db 0000 	ldr.w	r0, [fp]
 80a0168:	f004 fc4a 	bl	80a4a00 <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a016c:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0170:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a0174:	481b      	ldr	r0, [pc, #108]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a0176:	f000 fcda 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
 80a017a:	4601      	mov	r1, r0
 80a017c:	f8da 0000 	ldr.w	r0, [sl]
 80a0180:	f004 fc3e 	bl	80a4a00 <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a0184:	4c18      	ldr	r4, [pc, #96]	; (80a01e8 <_Z15calibrateSensorv+0xb8>)
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a0186:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a018a:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a018e:	4815      	ldr	r0, [pc, #84]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a0190:	f000 fccd 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
 80a0194:	6821      	ldr	r1, [r4, #0]
 80a0196:	f004 fc33 	bl	80a4a00 <__addsf3>
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a019a:	3d01      	subs	r5, #1
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a019c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a01f4 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a01a0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a01f8 <_Z15calibrateSensorv+0xc8>
    refZ += imu.calcAccel(imu.az);
 80a01a4:	4607      	mov	r7, r0
 80a01a6:	6020      	str	r0, [r4, #0]
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a01a8:	d1cf      	bne.n	80a014a <_Z15calibrateSensorv+0x1a>
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a01aa:	f8d9 0000 	ldr.w	r0, [r9]
 80a01ae:	490f      	ldr	r1, [pc, #60]	; (80a01ec <_Z15calibrateSensorv+0xbc>)
 80a01b0:	f004 fde2 	bl	80a4d78 <__aeabi_fdiv>
  refY = refY / count;
 80a01b4:	490d      	ldr	r1, [pc, #52]	; (80a01ec <_Z15calibrateSensorv+0xbc>)
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a01b6:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / count;
 80a01ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a01be:	f004 fddb 	bl	80a4d78 <__aeabi_fdiv>
  refZ = refZ / count; 
 80a01c2:	490a      	ldr	r1, [pc, #40]	; (80a01ec <_Z15calibrateSensorv+0xbc>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
 80a01c4:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / count; 
 80a01c8:	4638      	mov	r0, r7
 80a01ca:	f004 fdd5 	bl	80a4d78 <__aeabi_fdiv>
 80a01ce:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a01d0:	f003 fc0a 	bl	80a39e8 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a01d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
 80a01d8:	4905      	ldr	r1, [pc, #20]	; (80a01f0 <_Z15calibrateSensorv+0xc0>)
 80a01da:	f002 bed0 	b.w	80a2f7e <_ZN5Print7printlnEPKc>
 80a01de:	bf00      	nop
 80a01e0:	080a5114 	.word	0x080a5114
 80a01e4:	200000e8 	.word	0x200000e8
 80a01e8:	2000018c 	.word	0x2000018c
 80a01ec:	42c80000 	.word	0x42c80000
 80a01f0:	080a512d 	.word	0x080a512d
 80a01f4:	20000184 	.word	0x20000184
 80a01f8:	20000188 	.word	0x20000188

080a01fc <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a01fc:	b538      	push	{r3, r4, r5, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01fe:	4c1c      	ldr	r4, [pc, #112]	; (80a0270 <_Z8setupImuv+0x74>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a0200:	231e      	movs	r3, #30
 80a0202:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0204:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a0206:	4a1b      	ldr	r2, [pc, #108]	; (80a0274 <_Z8setupImuv+0x78>)
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0208:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a020a:	4b1b      	ldr	r3, [pc, #108]	; (80a0278 <_Z8setupImuv+0x7c>)
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a020c:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a020e:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a0210:	4b1a      	ldr	r3, [pc, #104]	; (80a027c <_Z8setupImuv+0x80>)
 80a0212:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0216:	4620      	mov	r0, r4
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a0218:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a021a:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a021c:	f000 ff03 	bl	80a1026 <_ZN7LSM9DS15beginEv>
 80a0220:	b978      	cbnz	r0, 80a0242 <_Z8setupImuv+0x46>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a0222:	f003 fbe1 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0226:	4916      	ldr	r1, [pc, #88]	; (80a0280 <_Z8setupImuv+0x84>)
 80a0228:	f002 fea9 	bl	80a2f7e <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a022c:	f003 fbdc 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0230:	4914      	ldr	r1, [pc, #80]	; (80a0284 <_Z8setupImuv+0x88>)
 80a0232:	f002 fea4 	bl	80a2f7e <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a0236:	f003 fbd7 	bl	80a39e8 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a023a:	4913      	ldr	r1, [pc, #76]	; (80a0288 <_Z8setupImuv+0x8c>)
 80a023c:	f002 fe9f 	bl	80a2f7e <_ZN5Print7printlnEPKc>
 80a0240:	e7fe      	b.n	80a0240 <_Z8setupImuv+0x44>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a0242:	f003 fbd1 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0246:	4911      	ldr	r1, [pc, #68]	; (80a028c <_Z8setupImuv+0x90>)
 80a0248:	f002 fe99 	bl	80a2f7e <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a024c:	4629      	mov	r1, r5
 80a024e:	4620      	mov	r0, r4
 80a0250:	f000 ffee 	bl	80a1230 <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a0254:	4629      	mov	r1, r5
 80a0256:	4620      	mov	r0, r4
 80a0258:	f001 f8b6 	bl	80a13c8 <_ZN7LSM9DS112calibrateMagEb>
  calibrateSensor();
 80a025c:	f7ff ff68 	bl	80a0130 <_Z15calibrateSensorv>
  Serial.println("Calibration finished");
 80a0260:	f003 fbc2 	bl	80a39e8 <_Z16_fetch_usbserialv>
}
 80a0264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
 80a0268:	4909      	ldr	r1, [pc, #36]	; (80a0290 <_Z8setupImuv+0x94>)
 80a026a:	f002 be88 	b.w	80a2f7e <_ZN5Print7printlnEPKc>
 80a026e:	bf00      	nop
 80a0270:	200000e8 	.word	0x200000e8
 80a0274:	40a00000 	.word	0x40a00000
 80a0278:	200000c8 	.word	0x200000c8
 80a027c:	200000c4 	.word	0x200000c4
 80a0280:	080a5132 	.word	0x080a5132
 80a0284:	080a5156 	.word	0x080a5156
 80a0288:	080a516b 	.word	0x080a516b
 80a028c:	080a51f3 	.word	0x080a51f3
 80a0290:	080a5207 	.word	0x080a5207

080a0294 <setup>:

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0294:	b570      	push	{r4, r5, r6, lr}
  
  for(int i = 0; i < PIXEL_COUNT; i++){
    pixels[i] = true;
 80a0296:	4b41      	ldr	r3, [pc, #260]	; (80a039c <setup+0x108>)
 80a0298:	2201      	movs	r2, #1
 80a029a:	701a      	strb	r2, [r3, #0]
 80a029c:	705a      	strb	r2, [r3, #1]
 80a029e:	709a      	strb	r2, [r3, #2]
 80a02a0:	70da      	strb	r2, [r3, #3]
 80a02a2:	711a      	strb	r2, [r3, #4]
  }
   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a02a4:	493e      	ldr	r1, [pc, #248]	; (80a03a0 <setup+0x10c>)
 80a02a6:	4b3f      	ldr	r3, [pc, #252]	; (80a03a4 <setup+0x110>)
 80a02a8:	4a3f      	ldr	r2, [pc, #252]	; (80a03a8 <setup+0x114>)
 80a02aa:	681b      	ldr	r3, [r3, #0]
 80a02ac:	6812      	ldr	r2, [r2, #0]
 80a02ae:	6809      	ldr	r1, [r1, #0]
 80a02b0:	483e      	ldr	r0, [pc, #248]	; (80a03ac <setup+0x118>)

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a02b2:	b096      	sub	sp, #88	; 0x58
  
  for(int i = 0; i < PIXEL_COUNT; i++){
    pixels[i] = true;
  }
   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a02b4:	f7ff ff1f 	bl	80a00f6 <_Z10setupMotorPiiii>
  setupMotor(leftShoulderMotors, enableLeft, stepLeft, directionLeft);
 80a02b8:	4b3d      	ldr	r3, [pc, #244]	; (80a03b0 <setup+0x11c>)
 80a02ba:	4a3e      	ldr	r2, [pc, #248]	; (80a03b4 <setup+0x120>)
 80a02bc:	493e      	ldr	r1, [pc, #248]	; (80a03b8 <setup+0x124>)
 80a02be:	681b      	ldr	r3, [r3, #0]
 80a02c0:	6812      	ldr	r2, [r2, #0]
 80a02c2:	6809      	ldr	r1, [r1, #0]
 80a02c4:	483d      	ldr	r0, [pc, #244]	; (80a03bc <setup+0x128>)
 80a02c6:	f7ff ff16 	bl	80a00f6 <_Z10setupMotorPiiii>
  // setupMotorRight();
  

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a02ca:	f003 fb8d 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a02ce:	f003 fb72 	bl	80a39b6 <_ZN9USBSerialcvbEv>
 80a02d2:	2800      	cmp	r0, #0
 80a02d4:	d0f9      	beq.n	80a02ca <setup+0x36>
 80a02d6:	4c3a      	ldr	r4, [pc, #232]	; (80a03c0 <setup+0x12c>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a02d8:	2300      	movs	r3, #0
 80a02da:	461a      	mov	r2, r3
 80a02dc:	4619      	mov	r1, r3
 80a02de:	6860      	ldr	r0, [r4, #4]
 80a02e0:	f002 fc4a 	bl	80a2b78 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a02e4:	2200      	movs	r2, #0
 80a02e6:	4611      	mov	r1, r2
 80a02e8:	6860      	ldr	r0, [r4, #4]
 80a02ea:	4d35      	ldr	r5, [pc, #212]	; (80a03c0 <setup+0x12c>)
 80a02ec:	f002 fc5c 	bl	80a2ba8 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a02f0:	2800      	cmp	r0, #0
 80a02f2:	d0f7      	beq.n	80a02e4 <setup+0x50>
  Serial.println("Setup");
 80a02f4:	f003 fb78 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a02f8:	4932      	ldr	r1, [pc, #200]	; (80a03c4 <setup+0x130>)
 80a02fa:	f002 fe40 	bl	80a2f7e <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a02fe:	4b32      	ldr	r3, [pc, #200]	; (80a03c8 <setup+0x134>)
 80a0300:	2200      	movs	r2, #0
 80a0302:	8819      	ldrh	r1, [r3, #0]
 80a0304:	4831      	ldr	r0, [pc, #196]	; (80a03cc <setup+0x138>)
 80a0306:	f003 f8bc 	bl	80a3482 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a030a:	2300      	movs	r3, #0
 80a030c:	4619      	mov	r1, r3
 80a030e:	4a30      	ldr	r2, [pc, #192]	; (80a03d0 <setup+0x13c>)
 80a0310:	6868      	ldr	r0, [r5, #4]
 80a0312:	f002 fc81 	bl	80a2c18 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a0316:	f003 fb67 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a031a:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a031c:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a031e:	2240      	movs	r2, #64	; 0x40
 80a0320:	2100      	movs	r1, #0
 80a0322:	a806      	add	r0, sp, #24
 80a0324:	f004 fe79 	bl	80a501a <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0328:	2340      	movs	r3, #64	; 0x40
 80a032a:	aa06      	add	r2, sp, #24
 80a032c:	4621      	mov	r1, r4
 80a032e:	9400      	str	r4, [sp, #0]
 80a0330:	6868      	ldr	r0, [r5, #4]
 80a0332:	f002 fc79 	bl	80a2c28 <network_get_hostname>
        return String(buf);
 80a0336:	a906      	add	r1, sp, #24
 80a0338:	a802      	add	r0, sp, #8
 80a033a:	f003 f831 	bl	80a33a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a033e:	9902      	ldr	r1, [sp, #8]
 80a0340:	4630      	mov	r0, r6
 80a0342:	f002 fe1c 	bl	80a2f7e <_ZN5Print7printlnEPKc>
 80a0346:	a802      	add	r0, sp, #8
 80a0348:	f002 ffe3 	bl	80a3312 <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a034c:	f003 fb4c 	bl	80a39e8 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0350:	4622      	mov	r2, r4
 80a0352:	4606      	mov	r6, r0
 80a0354:	4621      	mov	r1, r4
 80a0356:	6868      	ldr	r0, [r5, #4]
 80a0358:	f002 fc06 	bl	80a2b68 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a035c:	1c81      	adds	r1, r0, #2
 80a035e:	a806      	add	r0, sp, #24
 80a0360:	f002 fd14 	bl	80a2d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0364:	a906      	add	r1, sp, #24
 80a0366:	4630      	mov	r0, r6
 80a0368:	f002 fe13 	bl	80a2f92 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a036c:	f003 fb3c 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0370:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0374:	f003 fb18 	bl	80a39a8 <_ZN9USBSerial5beginEl>
    iVx = 0;
    iVy = 0;
    iVz = 0;

    setupImu();
 80a0378:	f7ff ff40 	bl	80a01fc <_Z8setupImuv>
    
  
  updateTimer.SetCallback(OnTimer);
 80a037c:	4915      	ldr	r1, [pc, #84]	; (80a03d4 <setup+0x140>)
 80a037e:	4816      	ldr	r0, [pc, #88]	; (80a03d8 <setup+0x144>)
 80a0380:	f000 fb7e 	bl	80a0a80 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>

    strip.setBrightness(BRIGHTNESS);
 80a0384:	2132      	movs	r1, #50	; 0x32
 80a0386:	4815      	ldr	r0, [pc, #84]	; (80a03dc <setup+0x148>)
 80a0388:	f002 f9f7 	bl	80a277a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a038c:	4813      	ldr	r0, [pc, #76]	; (80a03dc <setup+0x148>)
 80a038e:	f001 f8ab 	bl	80a14e8 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0392:	4812      	ldr	r0, [pc, #72]	; (80a03dc <setup+0x148>)
 80a0394:	f001 f8de 	bl	80a1554 <_ZN17Adafruit_NeoPixel4showEv>
  }
 80a0398:	b016      	add	sp, #88	; 0x58
 80a039a:	bd70      	pop	{r4, r5, r6, pc}
 80a039c:	2000019c 	.word	0x2000019c
 80a03a0:	2000001c 	.word	0x2000001c
 80a03a4:	20000010 	.word	0x20000010
 80a03a8:	20000020 	.word	0x20000020
 80a03ac:	200000a0 	.word	0x200000a0
 80a03b0:	20000014 	.word	0x20000014
 80a03b4:	20000018 	.word	0x20000018
 80a03b8:	20000004 	.word	0x20000004
 80a03bc:	2000016c 	.word	0x2000016c
 80a03c0:	2000068c 	.word	0x2000068c
 80a03c4:	080a521c 	.word	0x080a521c
 80a03c8:	20000008 	.word	0x20000008
 80a03cc:	200001a4 	.word	0x200001a4
 80a03d0:	080a5222 	.word	0x080a5222
 80a03d4:	080a0631 	.word	0x080a0631
 80a03d8:	200000ac 	.word	0x200000ac
 80a03dc:	200001f0 	.word	0x200001f0

080a03e0 <_Z10checkSpeedv>:
     fluxZ = 0;

}

//-----------------------//-----------------------//-----------------------//-----------------------IMU
boolean checkSpeed(){
 80a03e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  float total = fluxX + fluxY + fluxZ;
 80a03e4:	4e23      	ldr	r6, [pc, #140]	; (80a0474 <_Z10checkSpeedv+0x94>)
 80a03e6:	4d24      	ldr	r5, [pc, #144]	; (80a0478 <_Z10checkSpeedv+0x98>)
 80a03e8:	4c24      	ldr	r4, [pc, #144]	; (80a047c <_Z10checkSpeedv+0x9c>)
 80a03ea:	6829      	ldr	r1, [r5, #0]
 80a03ec:	6830      	ldr	r0, [r6, #0]
 80a03ee:	f004 fb07 	bl	80a4a00 <__addsf3>
 80a03f2:	6821      	ldr	r1, [r4, #0]
 80a03f4:	f004 fb04 	bl	80a4a00 <__addsf3>
 80a03f8:	4607      	mov	r7, r0
  Serial.print("Total movement: ");
 80a03fa:	f003 faf5 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a03fe:	4920      	ldr	r1, [pc, #128]	; (80a0480 <_Z10checkSpeedv+0xa0>)
 80a0400:	f002 fda4 	bl	80a2f4c <_ZN5Print5printEPKc>
  Serial.println(total);
 80a0404:	f003 faf0 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0408:	4680      	mov	r8, r0
 80a040a:	4638      	mov	r0, r7
 80a040c:	f003 ffa6 	bl	80a435c <__aeabi_f2d>
 80a0410:	2302      	movs	r3, #2
 80a0412:	4602      	mov	r2, r0
 80a0414:	9300      	str	r3, [sp, #0]
 80a0416:	4640      	mov	r0, r8
 80a0418:	460b      	mov	r3, r1
  Serial.print("Speed limit : ");
  Serial.println(speedLimit);
 80a041a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a0488 <_Z10checkSpeedv+0xa8>

//-----------------------//-----------------------//-----------------------//-----------------------IMU
boolean checkSpeed(){
  float total = fluxX + fluxY + fluxZ;
  Serial.print("Total movement: ");
  Serial.println(total);
 80a041e:	f002 fecb 	bl	80a31b8 <_ZN5Print7printlnEdi>
  Serial.print("Speed limit : ");
 80a0422:	f003 fae1 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0426:	4917      	ldr	r1, [pc, #92]	; (80a0484 <_Z10checkSpeedv+0xa4>)
 80a0428:	f002 fd90 	bl	80a2f4c <_ZN5Print5printEPKc>
  Serial.println(speedLimit);
 80a042c:	f003 fadc 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0430:	f8d8 1000 	ldr.w	r1, [r8]
 80a0434:	220a      	movs	r2, #10
 80a0436:	f002 fe06 	bl	80a3046 <_ZN5Print7printlnEii>
  if((total) < speedLimit){
 80a043a:	f8d8 0000 	ldr.w	r0, [r8]
 80a043e:	f004 fb93 	bl	80a4b68 <__aeabi_i2f>
 80a0442:	4680      	mov	r8, r0
 80a0444:	4601      	mov	r1, r0
 80a0446:	4638      	mov	r0, r7
 80a0448:	f004 fd80 	bl	80a4f4c <__aeabi_fcmplt>
 80a044c:	b128      	cbz	r0, 80a045a <_Z10checkSpeedv+0x7a>
      fluxX = 0;
 80a044e:	2300      	movs	r3, #0
 80a0450:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a0452:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a0454:	6023      	str	r3, [r4, #0]
     total = 0;
    return true;
 80a0456:	2001      	movs	r0, #1
 80a0458:	e009      	b.n	80a046e <_Z10checkSpeedv+0x8e>
  }else if(total >= speedLimit){
 80a045a:	4641      	mov	r1, r8
 80a045c:	4638      	mov	r0, r7
 80a045e:	f004 fd89 	bl	80a4f74 <__aeabi_fcmpge>
 80a0462:	b120      	cbz	r0, 80a046e <_Z10checkSpeedv+0x8e>
      fluxX = 0;
 80a0464:	2300      	movs	r3, #0
 80a0466:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a0468:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a046a:	6023      	str	r3, [r4, #0]
     total = 0;
    return false;
 80a046c:	2000      	movs	r0, #0
  }

}
 80a046e:	b002      	add	sp, #8
 80a0470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0474:	20000178 	.word	0x20000178
 80a0478:	2000017c 	.word	0x2000017c
 80a047c:	20000180 	.word	0x20000180
 80a0480:	080a526f 	.word	0x080a526f
 80a0484:	080a5280 	.word	0x080a5280
 80a0488:	2000000c 	.word	0x2000000c

080a048c <_Z12getMouvementv>:
void getMouvement(){
 80a048c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
 80a0490:	4a39      	ldr	r2, [pc, #228]	; (80a0578 <_Z12getMouvementv+0xec>)
  }

}
void getMouvement(){
//    reset values
    dX = 0;
 80a0492:	4f3a      	ldr	r7, [pc, #232]	; (80a057c <_Z12getMouvementv+0xf0>)
    dY = 0;
 80a0494:	4e3a      	ldr	r6, [pc, #232]	; (80a0580 <_Z12getMouvementv+0xf4>)
    dZ = 0;
 80a0496:	4d3b      	ldr	r5, [pc, #236]	; (80a0584 <_Z12getMouvementv+0xf8>)
  }

}
void getMouvement(){
//    reset values
    dX = 0;
 80a0498:	2300      	movs	r3, #0
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
 80a049a:	4c3b      	ldr	r4, [pc, #236]	; (80a0588 <_Z12getMouvementv+0xfc>)
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a049c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80a0594 <_Z12getMouvementv+0x108>
 80a04a0:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80a0598 <_Z12getMouvementv+0x10c>
  }

}
void getMouvement(){
//    reset values
    dX = 0;
 80a04a4:	603b      	str	r3, [r7, #0]
    dY = 0;
 80a04a6:	6033      	str	r3, [r6, #0]
    dZ = 0;
 80a04a8:	602b      	str	r3, [r5, #0]
    avMvmt = 0;
 80a04aa:	6013      	str	r3, [r2, #0]
 80a04ac:	f04f 0864 	mov.w	r8, #100	; 0x64


    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
 80a04b0:	4835      	ldr	r0, [pc, #212]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a04b2:	f000 fd90 	bl	80a0fd6 <_ZN7LSM9DS114accelAvailableEv>
 80a04b6:	b110      	cbz	r0, 80a04be <_Z12getMouvementv+0x32>
    {
      imu.readAccel();
 80a04b8:	4833      	ldr	r0, [pc, #204]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a04ba:	f000 fe57 	bl	80a116c <_ZN7LSM9DS19readAccelEv>
    }
    dX=imu.calcAccel(imu.ax);
 80a04be:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a04c2:	4831      	ldr	r0, [pc, #196]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a04c4:	f000 fb33 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
    dY=imu.calcAccel(imu.ay);
 80a04c8:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
 80a04cc:	6038      	str	r0, [r7, #0]
    dY=imu.calcAccel(imu.ay);
 80a04ce:	482e      	ldr	r0, [pc, #184]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a04d0:	f000 fb2d 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
    dZ=imu.calcAccel(imu.az);
 80a04d4:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
 80a04d8:	6030      	str	r0, [r6, #0]
    dZ=imu.calcAccel(imu.az);
 80a04da:	482b      	ldr	r0, [pc, #172]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a04dc:	f000 fb27 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a04e0:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);
 80a04e4:	6028      	str	r0, [r5, #0]

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a04e6:	4828      	ldr	r0, [pc, #160]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a04e8:	f000 fb21 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
 80a04ec:	f8db 1000 	ldr.w	r1, [fp]
 80a04f0:	f004 fa84 	bl	80a49fc <__aeabi_fsub>
 80a04f4:	f004 fd52 	bl	80a4f9c <__aeabi_f2iz>
 80a04f8:	2800      	cmp	r0, #0
 80a04fa:	bfb8      	it	lt
 80a04fc:	4240      	neglt	r0, r0
 80a04fe:	f004 fb33 	bl	80a4b68 <__aeabi_i2f>
 80a0502:	f8da 1000 	ldr.w	r1, [sl]
 80a0506:	f004 fa7b 	bl	80a4a00 <__addsf3>
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a050a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a050e:	f8ca 0000 	str.w	r0, [sl]
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a0512:	481d      	ldr	r0, [pc, #116]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a0514:	f000 fb0b 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
 80a0518:	4b1c      	ldr	r3, [pc, #112]	; (80a058c <_Z12getMouvementv+0x100>)
 80a051a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80a059c <_Z12getMouvementv+0x110>
 80a051e:	6819      	ldr	r1, [r3, #0]
 80a0520:	f004 fa6c 	bl	80a49fc <__aeabi_fsub>
 80a0524:	f004 fd3a 	bl	80a4f9c <__aeabi_f2iz>
 80a0528:	2800      	cmp	r0, #0
 80a052a:	bfb8      	it	lt
 80a052c:	4240      	neglt	r0, r0
 80a052e:	f004 fb1b 	bl	80a4b68 <__aeabi_i2f>
 80a0532:	f8d9 1000 	ldr.w	r1, [r9]
 80a0536:	f004 fa63 	bl	80a4a00 <__addsf3>
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a053a:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a053e:	f8c9 0000 	str.w	r0, [r9]
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a0542:	4811      	ldr	r0, [pc, #68]	; (80a0588 <_Z12getMouvementv+0xfc>)
 80a0544:	f000 faf3 	bl	80a0b2e <_ZN7LSM9DS19calcAccelEs>
 80a0548:	4b11      	ldr	r3, [pc, #68]	; (80a0590 <_Z12getMouvementv+0x104>)
 80a054a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a05a0 <_Z12getMouvementv+0x114>
 80a054e:	6819      	ldr	r1, [r3, #0]
 80a0550:	f004 fa54 	bl	80a49fc <__aeabi_fsub>
 80a0554:	f004 fd22 	bl	80a4f9c <__aeabi_f2iz>
 80a0558:	2800      	cmp	r0, #0
 80a055a:	bfb8      	it	lt
 80a055c:	4240      	neglt	r0, r0
 80a055e:	f004 fb03 	bl	80a4b68 <__aeabi_i2f>
 80a0562:	f8d9 1000 	ldr.w	r1, [r9]
 80a0566:	f004 fa4b 	bl	80a4a00 <__addsf3>
    dY = 0;
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
 80a056a:	f1b8 0801 	subs.w	r8, r8, #1
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a056e:	f8c9 0000 	str.w	r0, [r9]
    dY = 0;
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
 80a0572:	d19d      	bne.n	80a04b0 <_Z12getMouvementv+0x24>
    // if (avMvmt > lossThreshold && pixelPointer >= 0){
    // //   pixels[pixelPointer] = 0;
    //   pixelPointer--;
    // }
    
}
 80a0574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0578:	200000c0 	.word	0x200000c0
 80a057c:	200000b8 	.word	0x200000b8
 80a0580:	20000198 	.word	0x20000198
 80a0584:	200000bc 	.word	0x200000bc
 80a0588:	200000e8 	.word	0x200000e8
 80a058c:	20000188 	.word	0x20000188
 80a0590:	2000018c 	.word	0x2000018c
 80a0594:	20000178 	.word	0x20000178
 80a0598:	20000184 	.word	0x20000184
 80a059c:	2000017c 	.word	0x2000017c
 80a05a0:	20000180 	.word	0x20000180

080a05a4 <_Z9printMvmtv>:
void printMvmt(){
 80a05a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Serial.print(dZ);
    // Serial.print(" av: ");
    // Serial.print(avMvmt);
    // Serial.println(" ");

    Serial.print("fluxX : ");
 80a05a6:	f003 fa1f 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a05aa:	491b      	ldr	r1, [pc, #108]	; (80a0618 <_Z9printMvmtv+0x74>)
 80a05ac:	f002 fcce 	bl	80a2f4c <_ZN5Print5printEPKc>
    Serial.println(fluxX);
 80a05b0:	f003 fa1a 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a05b4:	4b19      	ldr	r3, [pc, #100]	; (80a061c <_Z9printMvmtv+0x78>)
 80a05b6:	4605      	mov	r5, r0
 80a05b8:	6818      	ldr	r0, [r3, #0]
 80a05ba:	f003 fecf 	bl	80a435c <__aeabi_f2d>
 80a05be:	2402      	movs	r4, #2
 80a05c0:	4602      	mov	r2, r0
 80a05c2:	460b      	mov	r3, r1
 80a05c4:	9400      	str	r4, [sp, #0]
 80a05c6:	4628      	mov	r0, r5
 80a05c8:	f002 fdf6 	bl	80a31b8 <_ZN5Print7printlnEdi>
    Serial.print("fluxY : ");
 80a05cc:	f003 fa0c 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a05d0:	4913      	ldr	r1, [pc, #76]	; (80a0620 <_Z9printMvmtv+0x7c>)
 80a05d2:	f002 fcbb 	bl	80a2f4c <_ZN5Print5printEPKc>
    Serial.println(fluxY);
 80a05d6:	f003 fa07 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a05da:	4b12      	ldr	r3, [pc, #72]	; (80a0624 <_Z9printMvmtv+0x80>)
 80a05dc:	4605      	mov	r5, r0
 80a05de:	6818      	ldr	r0, [r3, #0]
 80a05e0:	f003 febc 	bl	80a435c <__aeabi_f2d>
 80a05e4:	9400      	str	r4, [sp, #0]
 80a05e6:	4602      	mov	r2, r0
 80a05e8:	460b      	mov	r3, r1
 80a05ea:	4628      	mov	r0, r5
 80a05ec:	f002 fde4 	bl	80a31b8 <_ZN5Print7printlnEdi>
    Serial.print("fluxZ : ");
 80a05f0:	f003 f9fa 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a05f4:	490c      	ldr	r1, [pc, #48]	; (80a0628 <_Z9printMvmtv+0x84>)
 80a05f6:	f002 fca9 	bl	80a2f4c <_ZN5Print5printEPKc>
    Serial.println(fluxZ);
 80a05fa:	f003 f9f5 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a05fe:	4b0b      	ldr	r3, [pc, #44]	; (80a062c <_Z9printMvmtv+0x88>)
 80a0600:	4605      	mov	r5, r0
 80a0602:	6818      	ldr	r0, [r3, #0]
 80a0604:	f003 feaa 	bl	80a435c <__aeabi_f2d>
 80a0608:	9400      	str	r4, [sp, #0]
 80a060a:	4602      	mov	r2, r0
 80a060c:	460b      	mov	r3, r1
 80a060e:	4628      	mov	r0, r5
 80a0610:	f002 fdd2 	bl	80a31b8 <_ZN5Print7printlnEdi>
}
 80a0614:	b003      	add	sp, #12
 80a0616:	bd30      	pop	{r4, r5, pc}
 80a0618:	080a528f 	.word	0x080a528f
 80a061c:	20000178 	.word	0x20000178
 80a0620:	080a5298 	.word	0x080a5298
 80a0624:	2000017c 	.word	0x2000017c
 80a0628:	080a52a1 	.word	0x080a52a1
 80a062c:	20000180 	.word	0x20000180

080a0630 <_Z7OnTimerv>:
  delay(wait);
}

//-----------------------//-----------------------//-----------------------//-----------------------MOTORS

void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a0630:	b508      	push	{r3, lr}
  printMvmt();
 80a0632:	f7ff ffb7 	bl	80a05a4 <_Z9printMvmtv>
  checkSpeed();
 80a0636:	f7ff fed3 	bl	80a03e0 <_Z10checkSpeedv>
     fluxX = 0;
 80a063a:	4a04      	ldr	r2, [pc, #16]	; (80a064c <_Z7OnTimerv+0x1c>)
 80a063c:	2300      	movs	r3, #0
 80a063e:	6013      	str	r3, [r2, #0]
     fluxY = 0;
 80a0640:	4a03      	ldr	r2, [pc, #12]	; (80a0650 <_Z7OnTimerv+0x20>)
 80a0642:	6013      	str	r3, [r2, #0]
     fluxZ = 0;
 80a0644:	4a03      	ldr	r2, [pc, #12]	; (80a0654 <_Z7OnTimerv+0x24>)
 80a0646:	6013      	str	r3, [r2, #0]
 80a0648:	bd08      	pop	{r3, pc}
 80a064a:	bf00      	nop
 80a064c:	20000178 	.word	0x20000178
 80a0650:	2000017c 	.word	0x2000017c
 80a0654:	20000180 	.word	0x20000180

080a0658 <_Z5Wheelh>:
//-----------------------//-----------------------//-----------------------//-----------------------NEOPIXELS

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
 80a0658:	43c0      	mvns	r0, r0
 80a065a:	b2c0      	uxtb	r0, r0
  if(WheelPos < 85) {
 80a065c:	2854      	cmp	r0, #84	; 0x54
 80a065e:	d80a      	bhi.n	80a0676 <_Z5Wheelh+0x1e>
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3,0);
 80a0660:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a0664:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a0668:	3801      	subs	r0, #1
 80a066a:	2300      	movs	r3, #0
 80a066c:	b2d2      	uxtb	r2, r2
 80a066e:	4619      	mov	r1, r3
 80a0670:	b2c0      	uxtb	r0, r0
 80a0672:	f002 b879 	b.w	80a2768 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  if(WheelPos < 170) {
 80a0676:	28a9      	cmp	r0, #169	; 0xa9
 80a0678:	d80c      	bhi.n	80a0694 <_Z5Wheelh+0x3c>
    WheelPos -= 85;
 80a067a:	3855      	subs	r0, #85	; 0x55
 80a067c:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3,0);
 80a067e:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a0682:	3a01      	subs	r2, #1
 80a0684:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0688:	2300      	movs	r3, #0
 80a068a:	b2d2      	uxtb	r2, r2
 80a068c:	b2c9      	uxtb	r1, r1
 80a068e:	4618      	mov	r0, r3
 80a0690:	f002 b86a 	b.w	80a2768 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  WheelPos -= 170;
 80a0694:	3056      	adds	r0, #86	; 0x56
 80a0696:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0,0);
 80a0698:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a069c:	3901      	subs	r1, #1
 80a069e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a06a2:	2300      	movs	r3, #0
 80a06a4:	461a      	mov	r2, r3
 80a06a6:	b2c9      	uxtb	r1, r1
 80a06a8:	b2c0      	uxtb	r0, r0
 80a06aa:	f002 b85d 	b.w	80a2768 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
	...

080a06b0 <_Z7troublev>:
}

bool checkComplete(){
 
}
void trouble(){
 80a06b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06b4:	b083      	sub	sp, #12
  

  int delayIn = 10;
  int delayOut = 0;
  
    if(troubleCount == 0){
 80a06b6:	4e81      	ldr	r6, [pc, #516]	; (80a08bc <_Z7troublev+0x20c>)
}

bool checkComplete(){
 
}
void trouble(){
 80a06b8:	af00      	add	r7, sp, #0
  

  int delayIn = 10;
  int delayOut = 0;
  
    if(troubleCount == 0){
 80a06ba:	6833      	ldr	r3, [r6, #0]
 80a06bc:	b963      	cbnz	r3, 80a06d8 <_Z7troublev+0x28>
      chunk = strip.numPixels()/4;
 80a06be:	4880      	ldr	r0, [pc, #512]	; (80a08c0 <_Z7troublev+0x210>)
 80a06c0:	f002 f859 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
      wait = 100;
 80a06c4:	4b7f      	ldr	r3, [pc, #508]	; (80a08c4 <_Z7troublev+0x214>)
 80a06c6:	2264      	movs	r2, #100	; 0x64

  int delayIn = 10;
  int delayOut = 0;
  
    if(troubleCount == 0){
      chunk = strip.numPixels()/4;
 80a06c8:	f3c0 048f 	ubfx	r4, r0, #2, #16
      wait = 100;
 80a06cc:	601a      	str	r2, [r3, #0]
      delayIn = 3;
      delayOut = 10;
 80a06ce:	f04f 0a0a 	mov.w	sl, #10
  int delayOut = 0;
  
    if(troubleCount == 0){
      chunk = strip.numPixels()/4;
      wait = 100;
      delayIn = 3;
 80a06d2:	f04f 0803 	mov.w	r8, #3
 80a06d6:	e035      	b.n	80a0744 <_Z7troublev+0x94>
      delayOut = 10;
  }else if(troubleCount == 1){
 80a06d8:	2b01      	cmp	r3, #1
 80a06da:	d10f      	bne.n	80a06fc <_Z7troublev+0x4c>
    chunk = strip.numPixels()/3;
 80a06dc:	4878      	ldr	r0, [pc, #480]	; (80a08c0 <_Z7troublev+0x210>)
 80a06de:	f002 f84a 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a06e2:	2403      	movs	r4, #3
 80a06e4:	fbb0 f0f4 	udiv	r0, r0, r4
    wait = 500;
 80a06e8:	4b76      	ldr	r3, [pc, #472]	; (80a08c4 <_Z7troublev+0x214>)
 80a06ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
      chunk = strip.numPixels()/4;
      wait = 100;
      delayIn = 3;
      delayOut = 10;
  }else if(troubleCount == 1){
    chunk = strip.numPixels()/3;
 80a06ee:	b284      	uxth	r4, r0
    wait = 500;
 80a06f0:	601a      	str	r2, [r3, #0]
    delayIn = 6;
      delayOut = 8;
 80a06f2:	f04f 0a08 	mov.w	sl, #8
      delayIn = 3;
      delayOut = 10;
  }else if(troubleCount == 1){
    chunk = strip.numPixels()/3;
    wait = 500;
    delayIn = 6;
 80a06f6:	f04f 0806 	mov.w	r8, #6
 80a06fa:	e023      	b.n	80a0744 <_Z7troublev+0x94>
      delayOut = 8;
  }else if(troubleCount ==2){
 80a06fc:	2b02      	cmp	r3, #2
 80a06fe:	d10d      	bne.n	80a071c <_Z7troublev+0x6c>
      chunk = strip.numPixels()/2;
 80a0700:	486f      	ldr	r0, [pc, #444]	; (80a08c0 <_Z7troublev+0x210>)
 80a0702:	f002 f838 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
      wait = 1000;
 80a0706:	4b6f      	ldr	r3, [pc, #444]	; (80a08c4 <_Z7troublev+0x214>)
 80a0708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    chunk = strip.numPixels()/3;
    wait = 500;
    delayIn = 6;
      delayOut = 8;
  }else if(troubleCount ==2){
      chunk = strip.numPixels()/2;
 80a070c:	f3c0 044f 	ubfx	r4, r0, #1, #16
      wait = 1000;
 80a0710:	601a      	str	r2, [r3, #0]
      delayIn = 8;
       delayOut = 4;
 80a0712:	f04f 0a04 	mov.w	sl, #4
    delayIn = 6;
      delayOut = 8;
  }else if(troubleCount ==2){
      chunk = strip.numPixels()/2;
      wait = 1000;
      delayIn = 8;
 80a0716:	f04f 0808 	mov.w	r8, #8
 80a071a:	e013      	b.n	80a0744 <_Z7troublev+0x94>
       delayOut = 4;
  }else if(troubleCount == 3){
 80a071c:	2b03      	cmp	r3, #3
 80a071e:	d10c      	bne.n	80a073a <_Z7troublev+0x8a>
chunk = strip.numPixels();
 80a0720:	4867      	ldr	r0, [pc, #412]	; (80a08c0 <_Z7troublev+0x210>)
 80a0722:	f002 f828 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
wait = 2000;
 80a0726:	4b67      	ldr	r3, [pc, #412]	; (80a08c4 <_Z7troublev+0x214>)
 80a0728:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
      chunk = strip.numPixels()/2;
      wait = 1000;
      delayIn = 8;
       delayOut = 4;
  }else if(troubleCount == 3){
chunk = strip.numPixels();
 80a072c:	4604      	mov	r4, r0
wait = 2000;
 80a072e:	601a      	str	r2, [r3, #0]
 delayIn = 10;
       delayOut = 0;
 80a0730:	f04f 0a00 	mov.w	sl, #0
      delayIn = 8;
       delayOut = 4;
  }else if(troubleCount == 3){
chunk = strip.numPixels();
wait = 2000;
 delayIn = 10;
 80a0734:	f04f 080a 	mov.w	r8, #10
 80a0738:	e004      	b.n	80a0744 <_Z7troublev+0x94>

  int chunk = 0;
  

  int delayIn = 10;
  int delayOut = 0;
 80a073a:	f04f 0a00 	mov.w	sl, #0
  
  bool complete = false;
  bool checkNum = true;
  int val = -1;

  int chunk = 0;
 80a073e:	4654      	mov	r4, sl
  

  int delayIn = 10;
 80a0740:	f04f 080a 	mov.w	r8, #10



  }

int randomNumList[chunk];
 80a0744:	00a3      	lsls	r3, r4, #2
 80a0746:	f103 020a 	add.w	r2, r3, #10
 80a074a:	f022 0207 	bic.w	r2, r2, #7
 80a074e:	ebad 0d02 	sub.w	sp, sp, r2
 80a0752:	46e9      	mov	r9, sp
 80a0754:	466a      	mov	r2, sp
 80a0756:	446b      	add	r3, sp
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
    randomNumList[k] = -1;
 80a0758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a075c:	4293      	cmp	r3, r2
 80a075e:	d002      	beq.n	80a0766 <_Z7troublev+0xb6>
    randomNumList[k] = -1;
 80a0760:	f842 1b04 	str.w	r1, [r2], #4

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a0764:	e7fa      	b.n	80a075c <_Z7troublev+0xac>
    randomNumList[k] = -1;
  }

    Serial.print("TROUBLE COUNT :: ");
 80a0766:	f003 f93f 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a076a:	4957      	ldr	r1, [pc, #348]	; (80a08c8 <_Z7troublev+0x218>)
 80a076c:	f002 fbee 	bl	80a2f4c <_ZN5Print5printEPKc>
    Serial.println(troubleCount);
 80a0770:	f003 f93a 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0774:	220a      	movs	r2, #10
 80a0776:	6831      	ldr	r1, [r6, #0]
 80a0778:	f002 fc65 	bl	80a3046 <_ZN5Print7printlnEii>
 80a077c:	2300      	movs	r3, #0
 80a077e:	607b      	str	r3, [r7, #4]
 80a0780:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

    for(uint16_t i=0; i<chunk; i++) {
 80a0784:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80a0788:	455c      	cmp	r4, fp
 80a078a:	dd5a      	ble.n	80a0842 <_Z7troublev+0x192>
       Serial.print("chunk :: ");
 80a078c:	f003 f92c 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0790:	494e      	ldr	r1, [pc, #312]	; (80a08cc <_Z7troublev+0x21c>)
 80a0792:	f002 fbdb 	bl	80a2f4c <_ZN5Print5printEPKc>
    Serial.println(chunk);
 80a0796:	f003 f927 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a079a:	220a      	movs	r2, #10
 80a079c:	4621      	mov	r1, r4
 80a079e:	f002 fc52 	bl	80a3046 <_ZN5Print7printlnEii>
     while(checkNum){
        checkNum = false;
        //int nRandonNumber = rand()%((nMax+1)-nMin) + nMin;
        val = (rand() % ((strip.numPixels())));
 80a07a2:	f004 fc6b 	bl	80a507c <rand>
 80a07a6:	4605      	mov	r5, r0
 80a07a8:	4845      	ldr	r0, [pc, #276]	; (80a08c0 <_Z7troublev+0x210>)
 80a07aa:	f001 ffe4 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a07ae:	fb95 f3f0 	sdiv	r3, r5, r0
 80a07b2:	fb03 5510 	mls	r5, r3, r0, r5
        Serial.print("VAL:: ");
 80a07b6:	f003 f917 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a07ba:	4945      	ldr	r1, [pc, #276]	; (80a08d0 <_Z7troublev+0x220>)
 80a07bc:	f002 fbc6 	bl	80a2f4c <_ZN5Print5printEPKc>
        Serial.println(val);
 80a07c0:	f003 f912 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a07c4:	220a      	movs	r2, #10
 80a07c6:	4629      	mov	r1, r5
 80a07c8:	f002 fc3d 	bl	80a3046 <_ZN5Print7printlnEii>
        for(int k = 0; k < chunk; k++){
 80a07cc:	2200      	movs	r2, #0

    for(uint16_t i=0; i<chunk; i++) {
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
        checkNum = false;
 80a07ce:	4613      	mov	r3, r2
        //int nRandonNumber = rand()%((nMax+1)-nMin) + nMin;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
          if(randomNumList[k] == val){
 80a07d0:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
        checkNum = false;
        //int nRandonNumber = rand()%((nMax+1)-nMin) + nMin;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a07d4:	3201      	adds	r2, #1
          if(randomNumList[k] == val){
            checkNum = true;
 80a07d6:	428d      	cmp	r5, r1
 80a07d8:	bf08      	it	eq
 80a07da:	2301      	moveq	r3, #1
        checkNum = false;
        //int nRandonNumber = rand()%((nMax+1)-nMin) + nMin;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a07dc:	4294      	cmp	r4, r2
 80a07de:	dcf7      	bgt.n	80a07d0 <_Z7troublev+0x120>
    Serial.println(troubleCount);

    for(uint16_t i=0; i<chunk; i++) {
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
 80a07e0:	2b00      	cmp	r3, #0
 80a07e2:	d1de      	bne.n	80a07a2 <_Z7troublev+0xf2>
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
 80a07e4:	b2da      	uxtb	r2, r3
 80a07e6:	21ff      	movs	r1, #255	; 0xff
 80a07e8:	4610      	mov	r0, r2
 80a07ea:	603b      	str	r3, [r7, #0]
 80a07ec:	f001 ffb7 	bl	80a275e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a07f0:	b2a9      	uxth	r1, r5
 80a07f2:	4602      	mov	r2, r0
 80a07f4:	4832      	ldr	r0, [pc, #200]	; (80a08c0 <_Z7troublev+0x210>)
 80a07f6:	f001 ff67 	bl	80a26c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          randomNumList[i] = val;
          delay(delayOut);
 80a07fa:	4650      	mov	r0, sl
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
 80a07fc:	f849 502b 	str.w	r5, [r9, fp, lsl #2]
          delay(delayOut);
 80a0800:	f002 fa32 	bl	80a2c68 <delay>
          pixels[val] = false;
 80a0804:	4b33      	ldr	r3, [pc, #204]	; (80a08d4 <_Z7troublev+0x224>)
 80a0806:	2200      	movs	r2, #0
          strip.show();
 80a0808:	482d      	ldr	r0, [pc, #180]	; (80a08c0 <_Z7troublev+0x210>)
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
 80a080a:	555a      	strb	r2, [r3, r5]
          strip.show();
 80a080c:	f000 fea2 	bl	80a1554 <_ZN17Adafruit_NeoPixel4showEv>
            checkNum = true;
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
 80a0810:	683b      	ldr	r3, [r7, #0]
 80a0812:	3301      	adds	r3, #1
 80a0814:	2bff      	cmp	r3, #255	; 0xff
 80a0816:	d1e5      	bne.n	80a07e4 <_Z7troublev+0x134>
          pixels[val] = false;
          strip.show();
      }
    // delay(wait);

    Serial.print(i);
 80a0818:	f003 f8e6 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a081c:	220a      	movs	r2, #10
 80a081e:	4659      	mov	r1, fp
 80a0820:	f002 fc0f 	bl	80a3042 <_ZN5Print5printEii>
       Serial.print(" ::  ");
 80a0824:	f003 f8e0 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0828:	492b      	ldr	r1, [pc, #172]	; (80a08d8 <_Z7troublev+0x228>)
 80a082a:	f002 fb8f 	bl	80a2f4c <_ZN5Print5printEPKc>
       Serial.println(val);
 80a082e:	f003 f8db 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a0832:	220a      	movs	r2, #10
 80a0834:	4629      	mov	r1, r5
 80a0836:	f002 fc06 	bl	80a3046 <_ZN5Print7printlnEii>
 80a083a:	687b      	ldr	r3, [r7, #4]
 80a083c:	3301      	adds	r3, #1
 80a083e:	607b      	str	r3, [r7, #4]
  }

    Serial.print("TROUBLE COUNT :: ");
    Serial.println(troubleCount);

    for(uint16_t i=0; i<chunk; i++) {
 80a0840:	e7a0      	b.n	80a0784 <_Z7troublev+0xd4>
    Serial.print(i);
       Serial.print(" ::  ");
       Serial.println(val);
    }

if(troubleCount==3){
 80a0842:	6833      	ldr	r3, [r6, #0]
 80a0844:	2b03      	cmp	r3, #3
 80a0846:	d103      	bne.n	80a0850 <_Z7troublev+0x1a0>
  delay(5000);
 80a0848:	f241 3088 	movw	r0, #5000	; 0x1388
 80a084c:	f002 fa0c 	bl	80a2c68 <delay>
}
    if(checkSpeed()==1){
 80a0850:	f7ff fdc6 	bl	80a03e0 <_Z10checkSpeedv>
 80a0854:	b350      	cbz	r0, 80a08ac <_Z7troublev+0x1fc>
 80a0856:	f04f 0b00 	mov.w	fp, #0
      for(uint16_t i=0; i<chunk; i++) {
 80a085a:	fa1f f38b 	uxth.w	r3, fp
 80a085e:	429c      	cmp	r4, r3
 80a0860:	607b      	str	r3, [r7, #4]
 80a0862:	dd23      	ble.n	80a08ac <_Z7troublev+0x1fc>
 80a0864:	f04f 0aff 	mov.w	sl, #255	; 0xff
          for(int k = 255; k >=0 ; k--){
              strip.setPixelColor(randomNumList[i], strip.Color(k, 255, k));
 80a0868:	687b      	ldr	r3, [r7, #4]
 80a086a:	fa5f f28a 	uxtb.w	r2, sl
 80a086e:	f839 3023 	ldrh.w	r3, [r9, r3, lsl #2]
 80a0872:	21ff      	movs	r1, #255	; 0xff
 80a0874:	4610      	mov	r0, r2
 80a0876:	603b      	str	r3, [r7, #0]
 80a0878:	f001 ff71 	bl	80a275e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a087c:	683b      	ldr	r3, [r7, #0]
 80a087e:	4602      	mov	r2, r0
 80a0880:	4619      	mov	r1, r3
 80a0882:	480f      	ldr	r0, [pc, #60]	; (80a08c0 <_Z7troublev+0x210>)
 80a0884:	f001 ff20 	bl	80a26c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
              delay(10);
 80a0888:	200a      	movs	r0, #10
 80a088a:	f002 f9ed 	bl	80a2c68 <delay>
              pixels[val] = true;
 80a088e:	4a11      	ldr	r2, [pc, #68]	; (80a08d4 <_Z7troublev+0x224>)
 80a0890:	2301      	movs	r3, #1
              strip.show();
 80a0892:	480b      	ldr	r0, [pc, #44]	; (80a08c0 <_Z7troublev+0x210>)
    if(checkSpeed()==1){
      for(uint16_t i=0; i<chunk; i++) {
          for(int k = 255; k >=0 ; k--){
              strip.setPixelColor(randomNumList[i], strip.Color(k, 255, k));
              delay(10);
              pixels[val] = true;
 80a0894:	5553      	strb	r3, [r2, r5]
              strip.show();
 80a0896:	f000 fe5d 	bl	80a1554 <_ZN17Adafruit_NeoPixel4showEv>
if(troubleCount==3){
  delay(5000);
}
    if(checkSpeed()==1){
      for(uint16_t i=0; i<chunk; i++) {
          for(int k = 255; k >=0 ; k--){
 80a089a:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 80a089e:	d2e3      	bcs.n	80a0868 <_Z7troublev+0x1b8>
              strip.setPixelColor(randomNumList[i], strip.Color(k, 255, k));
              delay(10);
              pixels[val] = true;
              strip.show();
          }
        delay(delayIn);
 80a08a0:	4640      	mov	r0, r8
 80a08a2:	f002 f9e1 	bl	80a2c68 <delay>
 80a08a6:	f10b 0b01 	add.w	fp, fp, #1

if(troubleCount==3){
  delay(5000);
}
    if(checkSpeed()==1){
      for(uint16_t i=0; i<chunk; i++) {
 80a08aa:	e7d6      	b.n	80a085a <_Z7troublev+0x1aa>
        break;
      }
    }

  complete= true;
troubleCount++;
 80a08ac:	6833      	ldr	r3, [r6, #0]
  }
}
 80a08ae:	370c      	adds	r7, #12
        break;
      }
    }

  complete= true;
troubleCount++;
 80a08b0:	3301      	adds	r3, #1
 80a08b2:	6033      	str	r3, [r6, #0]
  }
}
 80a08b4:	46bd      	mov	sp, r7
 80a08b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a08ba:	bf00      	nop
 80a08bc:	200000e4 	.word	0x200000e4
 80a08c0:	200001f0 	.word	0x200001f0
 80a08c4:	20000000 	.word	0x20000000
 80a08c8:	080a52aa 	.word	0x080a52aa
 80a08cc:	080a52bc 	.word	0x080a52bc
 80a08d0:	080a52c6 	.word	0x080a52c6
 80a08d4:	2000019c 	.word	0x2000019c
 80a08d8:	080a52cd 	.word	0x080a52cd

080a08dc <_Z11healthyWavehii>:
}
uint8_t blue(uint32_t c) {
  return (c);
}

void healthyWave(uint8_t wait, int rainbowLoops, int whiteLoops) {
 80a08dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a08e0:	2400      	movs	r4, #0
}
uint8_t blue(uint32_t c) {
  return (c);
}

void healthyWave(uint8_t wait, int rainbowLoops, int whiteLoops) {
 80a08e2:	4681      	mov	r9, r0
 80a08e4:	4688      	mov	r8, r1
  
  float fadeMax = 100.0;
  int fadeVal = 0;
 80a08e6:	4625      	mov	r5, r4
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a08e8:	4544      	cmp	r4, r8
 80a08ea:	da56      	bge.n	80a099a <_Z11healthyWavehii+0xbe>
    getMouvement();
 80a08ec:	f7ff fdce 	bl	80a048c <_Z12getMouvementv>
  
     if(checkSpeed() == 0){
 80a08f0:	f7ff fd76 	bl	80a03e0 <_Z10checkSpeedv>
 80a08f4:	b908      	cbnz	r0, 80a08fa <_Z11healthyWavehii+0x1e>
       trouble();
 80a08f6:	f7ff fedb 	bl	80a06b0 <_Z7troublev>
}

void healthyWave(uint8_t wait, int rainbowLoops, int whiteLoops) {
  
  float fadeMax = 100.0;
  int fadeVal = 0;
 80a08fa:	2600      	movs	r6, #0
 80a08fc:	2700      	movs	r7, #0
  
     if(checkSpeed() == 0){
       trouble();
     }
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a08fe:	482a      	ldr	r0, [pc, #168]	; (80a09a8 <_Z11healthyWavehii+0xcc>)
 80a0900:	f001 ff39 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0904:	4287      	cmp	r7, r0
 80a0906:	da26      	bge.n	80a0956 <_Z11healthyWavehii+0x7a>
        wheelVal = Wheel(((i * 256 / strip.numPixels()) + j) & 255);
 80a0908:	4827      	ldr	r0, [pc, #156]	; (80a09a8 <_Z11healthyWavehii+0xcc>)
 80a090a:	f001 ff34 	bl	80a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a090e:	023b      	lsls	r3, r7, #8
 80a0910:	fb93 f0f0 	sdiv	r0, r3, r0
 80a0914:	4430      	add	r0, r6
 80a0916:	b2c0      	uxtb	r0, r0
 80a0918:	f7ff fe9e 	bl	80a0658 <_Z5Wheelh>
        redVal = red(wheelVal) * float(fadeVal/fadeMax);
        greenVal = green(wheelVal) * float(fadeVal/fadeMax);
        blueVal = blue(wheelVal) * float(fadeVal/fadeMax);


        strip.setPixelColor( i, strip.Color( redVal, 255, 0 ) );
 80a091c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a0920:	f004 f922 	bl	80a4b68 <__aeabi_i2f>
 80a0924:	4682      	mov	sl, r0
 80a0926:	4628      	mov	r0, r5
 80a0928:	f004 f91e 	bl	80a4b68 <__aeabi_i2f>
 80a092c:	491f      	ldr	r1, [pc, #124]	; (80a09ac <_Z11healthyWavehii+0xd0>)
 80a092e:	f004 fa23 	bl	80a4d78 <__aeabi_fdiv>
 80a0932:	4601      	mov	r1, r0
 80a0934:	4650      	mov	r0, sl
 80a0936:	f004 f96b 	bl	80a4c10 <__aeabi_fmul>
 80a093a:	f004 fb2f 	bl	80a4f9c <__aeabi_f2iz>
 80a093e:	2200      	movs	r2, #0
 80a0940:	21ff      	movs	r1, #255	; 0xff
 80a0942:	b2c0      	uxtb	r0, r0
 80a0944:	f001 ff0b 	bl	80a275e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0948:	b2b9      	uxth	r1, r7
 80a094a:	4602      	mov	r2, r0
 80a094c:	4816      	ldr	r0, [pc, #88]	; (80a09a8 <_Z11healthyWavehii+0xcc>)
 80a094e:	f001 febb 	bl	80a26c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  
     if(checkSpeed() == 0){
       trouble();
     }
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a0952:	3701      	adds	r7, #1
 80a0954:	e7d3      	b.n	80a08fe <_Z11healthyWavehii+0x22>

        strip.setPixelColor( i, strip.Color( redVal, 255, 0 ) );
      }

      // First loop, fade in!
      if(k == 0 && fadeVal < fadeMax-1) {
 80a0956:	b944      	cbnz	r4, 80a096a <_Z11healthyWavehii+0x8e>
 80a0958:	4628      	mov	r0, r5
 80a095a:	f004 f905 	bl	80a4b68 <__aeabi_i2f>
 80a095e:	4914      	ldr	r1, [pc, #80]	; (80a09b0 <_Z11healthyWavehii+0xd4>)
 80a0960:	f004 faf4 	bl	80a4f4c <__aeabi_fcmplt>
 80a0964:	b108      	cbz	r0, 80a096a <_Z11healthyWavehii+0x8e>
        fadeVal++;
 80a0966:	3501      	adds	r5, #1
 80a0968:	e00b      	b.n	80a0982 <_Z11healthyWavehii+0xa6>
      }
      // Last loop, fade out!
      else if(k == rainbowLoops - 1 && j > 255 - fadeMax ) {
 80a096a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80a096e:	429c      	cmp	r4, r3
 80a0970:	d107      	bne.n	80a0982 <_Z11healthyWavehii+0xa6>
 80a0972:	4630      	mov	r0, r6
 80a0974:	f004 f8f8 	bl	80a4b68 <__aeabi_i2f>
 80a0978:	490e      	ldr	r1, [pc, #56]	; (80a09b4 <_Z11healthyWavehii+0xd8>)
 80a097a:	f004 fb05 	bl	80a4f88 <__aeabi_fcmpgt>
 80a097e:	b100      	cbz	r0, 80a0982 <_Z11healthyWavehii+0xa6>
        fadeVal--;
 80a0980:	3d01      	subs	r5, #1
      }

      strip.show();
 80a0982:	4809      	ldr	r0, [pc, #36]	; (80a09a8 <_Z11healthyWavehii+0xcc>)
 80a0984:	f000 fde6 	bl	80a1554 <_ZN17Adafruit_NeoPixel4showEv>
    getMouvement();
  
     if(checkSpeed() == 0){
       trouble();
     }
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
 80a0988:	3601      	adds	r6, #1
      else if(k == rainbowLoops - 1 && j > 255 - fadeMax ) {
        fadeVal--;
      }

      strip.show();
      delay(wait);
 80a098a:	4648      	mov	r0, r9
 80a098c:	f002 f96c 	bl	80a2c68 <delay>
    getMouvement();
  
     if(checkSpeed() == 0){
       trouble();
     }
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
 80a0990:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80a0994:	d1b2      	bne.n	80a08fc <_Z11healthyWavehii+0x20>
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a0996:	3401      	adds	r4, #1
 80a0998:	e7a6      	b.n	80a08e8 <_Z11healthyWavehii+0xc>
      strip.show();
      delay(wait);
    }
  }

  delay(500);
 80a099a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a099e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      strip.show();
      delay(wait);
    }
  }

  delay(500);
 80a09a2:	f002 b961 	b.w	80a2c68 <delay>
 80a09a6:	bf00      	nop
 80a09a8:	200001f0 	.word	0x200001f0
 80a09ac:	42c80000 	.word	0x42c80000
 80a09b0:	42c60000 	.word	0x42c60000
 80a09b4:	431b0000 	.word	0x431b0000

080a09b8 <loop>:
*/
// setValuesAccordingToState('L');

//NEOPIXELS
//CORRECT CYCLE !!!!
  healthyWave(10,10,1);
 80a09b8:	210a      	movs	r1, #10
 80a09ba:	2201      	movs	r2, #1
 80a09bc:	4608      	mov	r0, r1
 80a09be:	f7ff bf8d 	b.w	80a08dc <_Z11healthyWavehii>
	...

080a09c4 <_GLOBAL__sub_I_SystemMode>:
// Fill the dots one after the other with a color
void colorWipe(uint8_t wait) {
// fadeIn(wait, 255,128,0);
fadeOut(wait, 255,128,0);
fadeIn(wait, 255,128,0);
}
 80a09c4:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a09c6:	f001 ff29 	bl	80a281c <HAL_Pin_Map>
#include "LSM9DS1_Types.h"
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"

SYSTEM_THREAD(ENABLED);
 80a09ca:	2100      	movs	r1, #0
 80a09cc:	2001      	movs	r0, #1
 80a09ce:	f002 f8a7 	bl	80a2b20 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a09d2:	4b19      	ldr	r3, [pc, #100]	; (80a0a38 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a09d4:	2200      	movs	r2, #0
 80a09d6:	701a      	strb	r2, [r3, #0]
 80a09d8:	805a      	strh	r2, [r3, #2]
 80a09da:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a09de:	4d17      	ldr	r5, [pc, #92]	; (80a0a3c <_GLOBAL__sub_I_SystemMode+0x78>)
 80a09e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a09e2:	2002      	movs	r0, #2
 80a09e4:	f002 f88c 	bl	80a2b00 <set_system_mode>
 80a09e8:	4c15      	ldr	r4, [pc, #84]	; (80a0a40 <_GLOBAL__sub_I_SystemMode+0x7c>)
 80a09ea:	4628      	mov	r0, r5
 80a09ec:	f002 f9c0 	bl	80a2d70 <_ZN9IPAddressC1Ev>
 80a09f0:	4628      	mov	r0, r5
int port;
UDP udp;
 80a09f2:	4d14      	ldr	r5, [pc, #80]	; (80a0a44 <_GLOBAL__sub_I_SystemMode+0x80>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a09f4:	4622      	mov	r2, r4
 80a09f6:	4914      	ldr	r1, [pc, #80]	; (80a0a48 <_GLOBAL__sub_I_SystemMode+0x84>)
 80a09f8:	f003 f9fc 	bl	80a3df4 <__aeabi_atexit>
int port;
UDP udp;
 80a09fc:	4628      	mov	r0, r5
 80a09fe:	f002 fe7f 	bl	80a3700 <_ZN3UDPC1Ev>
 80a0a02:	4622      	mov	r2, r4
 80a0a04:	4911      	ldr	r1, [pc, #68]	; (80a0a4c <_GLOBAL__sub_I_SystemMode+0x88>)
 80a0a06:	4628      	mov	r0, r5
#define PIXEL_PIN D2
#define PIXEL_COUNT 5
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0a08:	4d11      	ldr	r5, [pc, #68]	; (80a0a50 <_GLOBAL__sub_I_SystemMode+0x8c>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0a0a:	f003 f9f3 	bl	80a3df4 <__aeabi_atexit>
#define PIXEL_PIN D2
#define PIXEL_COUNT 5
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0a0e:	2302      	movs	r3, #2
 80a0a10:	461a      	mov	r2, r3
 80a0a12:	2105      	movs	r1, #5
 80a0a14:	4628      	mov	r0, r5
 80a0a16:	f000 fd8c 	bl	80a1532 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0a1a:	4622      	mov	r2, r4
 80a0a1c:	490d      	ldr	r1, [pc, #52]	; (80a0a54 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a0a1e:	4628      	mov	r0, r5
 80a0a20:	f003 f9e8 	bl	80a3df4 <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a0a24:	480c      	ldr	r0, [pc, #48]	; (80a0a58 <_GLOBAL__sub_I_SystemMode+0x94>)
 80a0a26:	f000 f87b 	bl	80a0b20 <_ZN7LSM9DS1C1Ev>
// Fill the dots one after the other with a color
void colorWipe(uint8_t wait) {
// fadeIn(wait, 255,128,0);
fadeOut(wait, 255,128,0);
fadeIn(wait, 255,128,0);
}
 80a0a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a0a2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0a32:	480a      	ldr	r0, [pc, #40]	; (80a0a5c <_GLOBAL__sub_I_SystemMode+0x98>)
 80a0a34:	f000 b81a 	b.w	80a0a6c <_ZN20SparkCorePolledTimerC1Em>
 80a0a38:	20000190 	.word	0x20000190
 80a0a3c:	200000cc 	.word	0x200000cc
 80a0a40:	2000009c 	.word	0x2000009c
 80a0a44:	200001a4 	.word	0x200001a4
 80a0a48:	080a00b3 	.word	0x080a00b3
 80a0a4c:	080a00b5 	.word	0x080a00b5
 80a0a50:	200001f0 	.word	0x200001f0
 80a0a54:	080a1495 	.word	0x080a1495
 80a0a58:	200000e8 	.word	0x200000e8
 80a0a5c:	200000ac 	.word	0x200000ac

080a0a60 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0a60:	b510      	push	{r4, lr}
 80a0a62:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0a64:	f001 fed2 	bl	80a280c <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a0a68:	6020      	str	r0, [r4, #0]
 80a0a6a:	bd10      	pop	{r4, pc}

080a0a6c <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a0a6c:	b538      	push	{r3, r4, r5, lr}
 80a0a6e:	4604      	mov	r4, r0
 80a0a70:	460d      	mov	r5, r1
    Reset();
 80a0a72:	f7ff fff5 	bl	80a0a60 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0a76:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a0a78:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0a7a:	60a3      	str	r3, [r4, #8]
}
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	bd38      	pop	{r3, r4, r5, pc}

080a0a80 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a0a80:	6081      	str	r1, [r0, #8]
 80a0a82:	4770      	bx	lr

080a0a84 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0a84:	f001 beca 	b.w	80a281c <HAL_Pin_Map>

080a0a88 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0a88:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0a8a:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a0a8c:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a0a8e:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0a90:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0a92:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0a94:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0a96:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0a98:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0a9a:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0a9c:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0a9e:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0aa0:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0aa2:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0aa4:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0aa8:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0aaa:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0aac:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a0aae:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0ab0:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0ab2:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0ab4:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0ab6:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0ab8:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0aba:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0abc:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a0abe:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0ac0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0ac4:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0ac6:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0ac8:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0aca:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0acc:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a0ace:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0ad0:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0ad2:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0ad4:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0ad6:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0ad8:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0ada:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a0ade:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0ae0:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0ae4:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0ae8:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a0aea:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0aee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0af2:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0af6:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0af8:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a0afa:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0afc:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0afe:	6565      	str	r5, [r4, #84]	; 0x54
 80a0b00:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0b04:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0b08:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0b0c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0b10:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0b14:	d1f0      	bne.n	80a0af8 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0b16:	f04f 0300 	mov.w	r3, #0
 80a0b1a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0b1e:	bd30      	pop	{r4, r5, pc}

080a0b20 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0b20:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0b22:	231e      	movs	r3, #30
 80a0b24:	226b      	movs	r2, #107	; 0x6b
 80a0b26:	2101      	movs	r1, #1
 80a0b28:	f7ff ffae 	bl	80a0a88 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0b2c:	bd10      	pop	{r4, pc}

080a0b2e <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a0b2e:	b510      	push	{r4, lr}
 80a0b30:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0b32:	4608      	mov	r0, r1
 80a0b34:	f004 f818 	bl	80a4b68 <__aeabi_i2f>
 80a0b38:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a0b3a:	f004 f869 	bl	80a4c10 <__aeabi_fmul>
}
 80a0b3e:	bd10      	pop	{r4, pc}

080a0b40 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a0b40:	b510      	push	{r4, lr}
 80a0b42:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0b44:	88c0      	ldrh	r0, [r0, #6]
 80a0b46:	f004 f80b 	bl	80a4b60 <__aeabi_ui2f>
 80a0b4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0b4e:	f004 f85f 	bl	80a4c10 <__aeabi_fmul>
 80a0b52:	6760      	str	r0, [r4, #116]	; 0x74
 80a0b54:	bd10      	pop	{r4, pc}

080a0b56 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0b56:	b510      	push	{r4, lr}
 80a0b58:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0b5a:	7dc0      	ldrb	r0, [r0, #23]
 80a0b5c:	f004 f800 	bl	80a4b60 <__aeabi_ui2f>
 80a0b60:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0b64:	f004 f854 	bl	80a4c10 <__aeabi_fmul>
 80a0b68:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0b6a:	bd10      	pop	{r4, pc}

080a0b6c <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0b6c:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0b70:	3b04      	subs	r3, #4
 80a0b72:	2b0c      	cmp	r3, #12
 80a0b74:	d814      	bhi.n	80a0ba0 <_ZN7LSM9DS18calcmResEv+0x34>
 80a0b76:	e8df f003 	tbb	[pc, r3]
 80a0b7a:	1307      	.short	0x1307
 80a0b7c:	130a1313 	.word	0x130a1313
 80a0b80:	130d1313 	.word	0x130d1313
 80a0b84:	1313      	.short	0x1313
 80a0b86:	10          	.byte	0x10
 80a0b87:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0b88:	4b06      	ldr	r3, [pc, #24]	; (80a0ba4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0b8a:	681b      	ldr	r3, [r3, #0]
 80a0b8c:	e007      	b.n	80a0b9e <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a0b8e:	4b05      	ldr	r3, [pc, #20]	; (80a0ba4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0b90:	685b      	ldr	r3, [r3, #4]
 80a0b92:	e004      	b.n	80a0b9e <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0b94:	4b03      	ldr	r3, [pc, #12]	; (80a0ba4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0b96:	689b      	ldr	r3, [r3, #8]
 80a0b98:	e001      	b.n	80a0b9e <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0b9c:	68db      	ldr	r3, [r3, #12]
 80a0b9e:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a0ba0:	4770      	bx	lr
 80a0ba2:	bf00      	nop
 80a0ba4:	20000024 	.word	0x20000024

080a0ba8 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0ba8:	88c3      	ldrh	r3, [r0, #6]
 80a0baa:	2bf5      	cmp	r3, #245	; 0xf5
 80a0bac:	d007      	beq.n	80a0bbe <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0bae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0bb2:	d004      	beq.n	80a0bbe <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0bb4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0bb8:	bf1c      	itt	ne
 80a0bba:	23f5      	movne	r3, #245	; 0xf5
 80a0bbc:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a0bbe:	7dc2      	ldrb	r2, [r0, #23]
 80a0bc0:	2a10      	cmp	r2, #16
 80a0bc2:	d803      	bhi.n	80a0bcc <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0bc4:	4b08      	ldr	r3, [pc, #32]	; (80a0be8 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0bc6:	40d3      	lsrs	r3, r2
 80a0bc8:	07da      	lsls	r2, r3, #31
 80a0bca:	d401      	bmi.n	80a0bd0 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0bcc:	2302      	movs	r3, #2
 80a0bce:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0bd0:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0bd4:	2a10      	cmp	r2, #16
 80a0bd6:	d803      	bhi.n	80a0be0 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0bd8:	4b04      	ldr	r3, [pc, #16]	; (80a0bec <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0bda:	40d3      	lsrs	r3, r2
 80a0bdc:	07db      	lsls	r3, r3, #31
 80a0bde:	d402      	bmi.n	80a0be6 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0be0:	2304      	movs	r3, #4
 80a0be2:	f880 3020 	strb.w	r3, [r0, #32]
 80a0be6:	4770      	bx	lr
 80a0be8:	00010114 	.word	0x00010114
 80a0bec:	00011110 	.word	0x00011110

080a0bf0 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0bf0:	b510      	push	{r4, lr}
 80a0bf2:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0bf4:	2101      	movs	r1, #1
 80a0bf6:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a0bfa:	f003 f877 	bl	80a3cec <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a0bfe:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0c02:	2101      	movs	r1, #1
 80a0c04:	f003 f883 	bl	80a3d0e <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0c08:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a0c0c:	2101      	movs	r1, #1
 80a0c0e:	f003 f86d 	bl	80a3cec <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0c12:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a0c16:	4c0a      	ldr	r4, [pc, #40]	; (80a0c40 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a0c18:	2101      	movs	r1, #1
 80a0c1a:	f003 f878 	bl	80a3d0e <digitalWrite>
	
	SPI.begin();
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	f002 fb08 	bl	80a3234 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	2108      	movs	r1, #8
 80a0c28:	f002 fb56 	bl	80a32d8 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a0c2c:	4620      	mov	r0, r4
 80a0c2e:	2101      	movs	r1, #1
 80a0c30:	f002 fb05 	bl	80a323e <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0c34:	4620      	mov	r0, r4
}
 80a0c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0c3a:	2100      	movs	r1, #0
 80a0c3c:	f002 bb02 	b.w	80a3244 <_ZN8SPIClass11setDataModeEh>
 80a0c40:	200006d0 	.word	0x200006d0

080a0c44 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0c46:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0c48:	4617      	mov	r7, r2
 80a0c4a:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0c4c:	4d09      	ldr	r5, [pc, #36]	; (80a0c74 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a0c4e:	4620      	mov	r0, r4
 80a0c50:	2100      	movs	r1, #0
 80a0c52:	f003 f85c 	bl	80a3d0e <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0c56:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0c5a:	4628      	mov	r0, r5
 80a0c5c:	f002 fb50 	bl	80a3300 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0c60:	4631      	mov	r1, r6
 80a0c62:	4628      	mov	r0, r5
 80a0c64:	f002 fb4c 	bl	80a3300 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0c68:	4620      	mov	r0, r4
}
 80a0c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0c6e:	2101      	movs	r1, #1
 80a0c70:	f003 b84d 	b.w	80a3d0e <digitalWrite>
 80a0c74:	200006d0 	.word	0x200006d0

080a0c78 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c7a:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0c7c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0c80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0c84:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0c86:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0c8a:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0c8e:	d103      	bne.n	80a0c98 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0c90:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0c92:	bf88      	it	hi
 80a0c94:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0c98:	b28c      	uxth	r4, r1
 80a0c9a:	4620      	mov	r0, r4
 80a0c9c:	2100      	movs	r1, #0
 80a0c9e:	f003 f836 	bl	80a3d0e <digitalWrite>
	SPI.transfer(rAddress);
 80a0ca2:	4629      	mov	r1, r5
 80a0ca4:	4809      	ldr	r0, [pc, #36]	; (80a0ccc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0ca6:	f002 fb2b 	bl	80a3300 <_ZN8SPIClass8transferEh>
 80a0caa:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0cac:	1bab      	subs	r3, r5, r6
 80a0cae:	429f      	cmp	r7, r3
 80a0cb0:	dd06      	ble.n	80a0cc0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a0cb2:	2100      	movs	r1, #0
 80a0cb4:	4805      	ldr	r0, [pc, #20]	; (80a0ccc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0cb6:	f002 fb23 	bl	80a3300 <_ZN8SPIClass8transferEh>
 80a0cba:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a0cbe:	e7f5      	b.n	80a0cac <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0cc0:	4620      	mov	r0, r4
 80a0cc2:	2101      	movs	r1, #1
 80a0cc4:	f003 f823 	bl	80a3d0e <digitalWrite>
	
	return 1;
}
 80a0cc8:	2001      	movs	r0, #1
 80a0cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0ccc:	200006d0 	.word	0x200006d0

080a0cd0 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0cd2:	2301      	movs	r3, #1
 80a0cd4:	9300      	str	r3, [sp, #0]
 80a0cd6:	f10d 030f 	add.w	r3, sp, #15
 80a0cda:	f7ff ffcd 	bl	80a0c78 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a0cde:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0ce2:	b005      	add	sp, #20
 80a0ce4:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ce8 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0ce8:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a0cea:	f003 f829 	bl	80a3d40 <_Z19__fetch_global_Wirev>
}
 80a0cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0cf2:	f002 b803 	b.w	80a2cfc <_ZN7TwoWire5beginEv>

080a0cf6 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0cf6:	b570      	push	{r4, r5, r6, lr}
 80a0cf8:	460e      	mov	r6, r1
 80a0cfa:	4615      	mov	r5, r2
 80a0cfc:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0cfe:	f003 f81f 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0d02:	4631      	mov	r1, r6
 80a0d04:	f002 f80c 	bl	80a2d20 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0d08:	f003 f81a 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0d0c:	6803      	ldr	r3, [r0, #0]
 80a0d0e:	4629      	mov	r1, r5
 80a0d10:	689b      	ldr	r3, [r3, #8]
 80a0d12:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0d14:	f003 f814 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0d18:	6803      	ldr	r3, [r0, #0]
 80a0d1a:	4621      	mov	r1, r4
 80a0d1c:	689a      	ldr	r2, [r3, #8]
 80a0d1e:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0d20:	f003 f80e 	bl	80a3d40 <_Z19__fetch_global_Wirev>
}
 80a0d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0d28:	f002 b802 	b.w	80a2d30 <_ZN7TwoWire15endTransmissionEv>

080a0d2c <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0d2c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0d2e:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0d30:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0d32:	2a01      	cmp	r2, #1
 80a0d34:	d105      	bne.n	80a0d42 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0d36:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0d38:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0d3a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0d3e:	f7ff bfda 	b.w	80a0cf6 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0d42:	b92a      	cbnz	r2, 80a0d50 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0d44:	460a      	mov	r2, r1
}
 80a0d46:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0d48:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0d4c:	f7ff bf7a 	b.w	80a0c44 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0d50:	bc10      	pop	{r4}
 80a0d52:	4770      	bx	lr

080a0d54 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0d54:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0d56:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0d58:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0d5a:	b113      	cbz	r3, 80a0d62 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0d5c:	7a03      	ldrb	r3, [r0, #8]
 80a0d5e:	015b      	lsls	r3, r3, #5
 80a0d60:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0d62:	88e2      	ldrh	r2, [r4, #6]
 80a0d64:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0d68:	d005      	beq.n	80a0d76 <_ZN7LSM9DS18initGyroEv+0x22>
 80a0d6a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0d6e:	d104      	bne.n	80a0d7a <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0d70:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0d74:	e001      	b.n	80a0d7a <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0d76:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0d7a:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0d7c:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0d7e:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0d82:	431a      	orrs	r2, r3
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	f7ff ffd1 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0d8a:	2200      	movs	r2, #0
 80a0d8c:	2111      	movs	r1, #17
 80a0d8e:	4620      	mov	r0, r4
 80a0d90:	f7ff ffcc 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0d94:	7aa3      	ldrb	r3, [r4, #10]
 80a0d96:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0d98:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0d9a:	bf14      	ite	ne
 80a0d9c:	2280      	movne	r2, #128	; 0x80
 80a0d9e:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0da0:	b12b      	cbz	r3, 80a0dae <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0da2:	7b23      	ldrb	r3, [r4, #12]
 80a0da4:	f003 030f 	and.w	r3, r3, #15
 80a0da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0dac:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a0dae:	2112      	movs	r1, #18
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	f7ff ffbb 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0db6:	7ce3      	ldrb	r3, [r4, #19]
 80a0db8:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0dba:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0dbc:	bf0c      	ite	eq
 80a0dbe:	2200      	moveq	r2, #0
 80a0dc0:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0dc2:	b113      	cbz	r3, 80a0dca <_ZN7LSM9DS18initGyroEv+0x76>
 80a0dc4:	f042 0210 	orr.w	r2, r2, #16
 80a0dc8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0dca:	7c63      	ldrb	r3, [r4, #17]
 80a0dcc:	b10b      	cbz	r3, 80a0dd2 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a0dce:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0dd2:	7d23      	ldrb	r3, [r4, #20]
 80a0dd4:	b10b      	cbz	r3, 80a0dda <_ZN7LSM9DS18initGyroEv+0x86>
 80a0dd6:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0dda:	211e      	movs	r1, #30
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	f7ff ffa5 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0de2:	7b63      	ldrb	r3, [r4, #13]
 80a0de4:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0de6:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0de8:	bf0c      	ite	eq
 80a0dea:	2200      	moveq	r2, #0
 80a0dec:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0dee:	b113      	cbz	r3, 80a0df6 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0df0:	f042 0210 	orr.w	r2, r2, #16
 80a0df4:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0df6:	7be3      	ldrb	r3, [r4, #15]
 80a0df8:	b10b      	cbz	r3, 80a0dfe <_ZN7LSM9DS18initGyroEv+0xaa>
 80a0dfa:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0dfe:	4620      	mov	r0, r4
}
 80a0e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0e04:	2113      	movs	r1, #19
 80a0e06:	f7ff bf91 	b.w	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>

080a0e0a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a0e0a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0e0c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0e0e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0e10:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0e12:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0e14:	bf0c      	ite	eq
 80a0e16:	2200      	moveq	r2, #0
 80a0e18:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0e1a:	b113      	cbz	r3, 80a0e22 <_ZN7LSM9DS19initAccelEv+0x18>
 80a0e1c:	f042 0210 	orr.w	r2, r2, #16
 80a0e20:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0e22:	7e63      	ldrb	r3, [r4, #25]
 80a0e24:	b10b      	cbz	r3, 80a0e2a <_ZN7LSM9DS19initAccelEv+0x20>
 80a0e26:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a0e2a:	211f      	movs	r1, #31
 80a0e2c:	4620      	mov	r0, r4
 80a0e2e:	f7ff ff7d 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0e32:	7da2      	ldrb	r2, [r4, #22]
 80a0e34:	b112      	cbz	r2, 80a0e3c <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0e36:	7e22      	ldrb	r2, [r4, #24]
 80a0e38:	0152      	lsls	r2, r2, #5
 80a0e3a:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0e3c:	7de3      	ldrb	r3, [r4, #23]
 80a0e3e:	2b08      	cmp	r3, #8
 80a0e40:	d006      	beq.n	80a0e50 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0e42:	2b10      	cmp	r3, #16
 80a0e44:	d007      	beq.n	80a0e56 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0e46:	2b04      	cmp	r3, #4
 80a0e48:	d107      	bne.n	80a0e5a <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0e4a:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0e4e:	e004      	b.n	80a0e5a <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0e50:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0e54:	e001      	b.n	80a0e5a <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0e56:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0e5a:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0e5e:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0e60:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0e62:	bfa2      	ittt	ge
 80a0e64:	f003 0303 	andge.w	r3, r3, #3
 80a0e68:	431a      	orrge	r2, r3
 80a0e6a:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	f7ff ff5c 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0e74:	7f62      	ldrb	r2, [r4, #29]
 80a0e76:	b12a      	cbz	r2, 80a0e84 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0e78:	7fa2      	ldrb	r2, [r4, #30]
 80a0e7a:	0152      	lsls	r2, r2, #5
 80a0e7c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0e84:	4620      	mov	r0, r4
}
 80a0e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0e8a:	2121      	movs	r1, #33	; 0x21
 80a0e8c:	f7ff bf4e 	b.w	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>

080a0e90 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0e90:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0e92:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0e94:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0e96:	2a01      	cmp	r2, #1
 80a0e98:	d105      	bne.n	80a0ea6 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0e9a:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0e9c:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0e9e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0ea2:	f7ff bf28 	b.w	80a0cf6 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0ea6:	b92a      	cbnz	r2, 80a0eb4 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0ea8:	460a      	mov	r2, r1
}
 80a0eaa:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0eac:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0eb0:	f7ff bec8 	b.w	80a0c44 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0eb4:	bc10      	pop	{r4}
 80a0eb6:	4770      	bx	lr

080a0eb8 <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0eb8:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0eba:	b570      	push	{r4, r5, r6, lr}
 80a0ebc:	4606      	mov	r6, r0
 80a0ebe:	460c      	mov	r4, r1
 80a0ec0:	4615      	mov	r5, r2
	if (axis > 2)
 80a0ec2:	d810      	bhi.n	80a0ee6 <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0ec4:	0049      	lsls	r1, r1, #1
 80a0ec6:	3105      	adds	r1, #5
 80a0ec8:	b2d2      	uxtb	r2, r2
 80a0eca:	b2c9      	uxtb	r1, r1
 80a0ecc:	f7ff ffe0 	bl	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0ed0:	1ce1      	adds	r1, r4, #3
 80a0ed2:	0049      	lsls	r1, r1, #1
 80a0ed4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0ed8:	4630      	mov	r0, r6
}
 80a0eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0ede:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0ee2:	f7ff bfd5 	b.w	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
 80a0ee6:	bd70      	pop	{r4, r5, r6, pc}

080a0ee8 <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a0ee8:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0eea:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0eee:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0ef0:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0ef2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0ef6:	bf08      	it	eq
 80a0ef8:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0efa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a0efe:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0f02:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0f06:	bf18      	it	ne
 80a0f08:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0f0a:	009b      	lsls	r3, r3, #2
 80a0f0c:	f003 031c 	and.w	r3, r3, #28
 80a0f10:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0f12:	431a      	orrs	r2, r3
 80a0f14:	2120      	movs	r1, #32
 80a0f16:	f7ff ffbb 	bl	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
 80a0f1a:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0f1e:	4620      	mov	r0, r4
 80a0f20:	3b08      	subs	r3, #8
 80a0f22:	b2db      	uxtb	r3, r3
 80a0f24:	2b08      	cmp	r3, #8
 80a0f26:	bf96      	itet	ls
 80a0f28:	4a12      	ldrls	r2, [pc, #72]	; (80a0f74 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a0f2a:	2200      	movhi	r2, #0
 80a0f2c:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0f2e:	2121      	movs	r1, #33	; 0x21
 80a0f30:	f7ff ffae 	bl	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0f34:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0f38:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0f3a:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0f3c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0f40:	bf0c      	ite	eq
 80a0f42:	2200      	moveq	r2, #0
 80a0f44:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0f46:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0f4a:	431a      	orrs	r2, r3
 80a0f4c:	2122      	movs	r1, #34	; 0x22
 80a0f4e:	f7ff ff9f 	bl	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0f52:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	0092      	lsls	r2, r2, #2
 80a0f5a:	f002 020c 	and.w	r2, r2, #12
 80a0f5e:	2123      	movs	r1, #35	; 0x23
 80a0f60:	f7ff ff96 	bl	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0f64:	4620      	mov	r0, r4
}
 80a0f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0f6a:	2200      	movs	r2, #0
 80a0f6c:	2124      	movs	r1, #36	; 0x24
 80a0f6e:	f7ff bf8f 	b.w	80a0e90 <_ZN7LSM9DS110mWriteByteEhh>
 80a0f72:	bf00      	nop
 80a0f74:	080a52f2 	.word	0x080a52f2

080a0f78 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0f78:	b538      	push	{r3, r4, r5, lr}
 80a0f7a:	460c      	mov	r4, r1
 80a0f7c:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0f7e:	f002 fedf 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0f82:	4621      	mov	r1, r4
 80a0f84:	f001 fecc 	bl	80a2d20 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0f88:	f002 feda 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0f8c:	6803      	ldr	r3, [r0, #0]
 80a0f8e:	4629      	mov	r1, r5
 80a0f90:	689b      	ldr	r3, [r3, #8]
 80a0f92:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0f94:	f002 fed4 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0f98:	2100      	movs	r1, #0
 80a0f9a:	f001 fec5 	bl	80a2d28 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0f9e:	f002 fecf 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0fa2:	2201      	movs	r2, #1
 80a0fa4:	4621      	mov	r1, r4
 80a0fa6:	f001 feb8 	bl	80a2d1a <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0faa:	f002 fec9 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a0fae:	6803      	ldr	r3, [r0, #0]
 80a0fb0:	695b      	ldr	r3, [r3, #20]
 80a0fb2:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0fb4:	b2c0      	uxtb	r0, r0
 80a0fb6:	bd38      	pop	{r3, r4, r5, pc}

080a0fb8 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0fb8:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0fba:	7801      	ldrb	r1, [r0, #0]
 80a0fbc:	2901      	cmp	r1, #1
 80a0fbe:	d103      	bne.n	80a0fc8 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0fc0:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0fc4:	f7ff bfd8 	b.w	80a0f78 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0fc8:	b919      	cbnz	r1, 80a0fd2 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0fca:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0fce:	f7ff be7f 	b.w	80a0cd0 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0fd2:	2000      	movs	r0, #0
 80a0fd4:	4770      	bx	lr

080a0fd6 <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a0fd6:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a0fd8:	2127      	movs	r1, #39	; 0x27
 80a0fda:	f7ff ffed 	bl	80a0fb8 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a0fde:	f000 0001 	and.w	r0, r0, #1
 80a0fe2:	bd08      	pop	{r3, pc}

080a0fe4 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0fe4:	b538      	push	{r3, r4, r5, lr}
 80a0fe6:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0fe8:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0fea:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0fec:	f7ff ffe4 	bl	80a0fb8 <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a0ff0:	b11d      	cbz	r5, 80a0ffa <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a0ff2:	f040 0202 	orr.w	r2, r0, #2
 80a0ff6:	b2d2      	uxtb	r2, r2
 80a0ff8:	e001      	b.n	80a0ffe <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a0ffa:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a0ffe:	4620      	mov	r0, r4
}
 80a1000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a1004:	2123      	movs	r1, #35	; 0x23
 80a1006:	f7ff be91 	b.w	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>

080a100a <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a100a:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a100c:	7801      	ldrb	r1, [r0, #0]
 80a100e:	2901      	cmp	r1, #1
 80a1010:	d103      	bne.n	80a101a <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a1012:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1016:	f7ff bfaf 	b.w	80a0f78 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a101a:	b919      	cbnz	r1, 80a1024 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a101c:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1020:	f7ff be56 	b.w	80a0cd0 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a1024:	4770      	bx	lr

080a1026 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a1026:	b538      	push	{r3, r4, r5, lr}
 80a1028:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a102a:	7843      	ldrb	r3, [r0, #1]
 80a102c:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a1030:	7883      	ldrb	r3, [r0, #2]
 80a1032:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a1036:	f7ff fdb7 	bl	80a0ba8 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a103a:	f7ff fd81 	bl	80a0b40 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a103e:	4620      	mov	r0, r4
 80a1040:	f7ff fd94 	bl	80a0b6c <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a1044:	4620      	mov	r0, r4
 80a1046:	f7ff fd86 	bl	80a0b56 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a104a:	7823      	ldrb	r3, [r4, #0]
 80a104c:	2b01      	cmp	r3, #1
 80a104e:	d103      	bne.n	80a1058 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a1050:	4620      	mov	r0, r4
 80a1052:	f7ff fe49 	bl	80a0ce8 <_ZN7LSM9DS17initI2CEv>
 80a1056:	e003      	b.n	80a1060 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a1058:	b913      	cbnz	r3, 80a1060 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a105a:	4620      	mov	r0, r4
 80a105c:	f7ff fdc8 	bl	80a0bf0 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a1060:	210f      	movs	r1, #15
 80a1062:	4620      	mov	r0, r4
 80a1064:	f7ff ffd1 	bl	80a100a <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a1068:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a106a:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a106c:	4620      	mov	r0, r4
 80a106e:	f7ff ffa3 	bl	80a0fb8 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a1072:	f646 033d 	movw	r3, #26685	; 0x683d
 80a1076:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a107a:	b205      	sxth	r5, r0
 80a107c:	429d      	cmp	r5, r3
 80a107e:	d10a      	bne.n	80a1096 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a1080:	4620      	mov	r0, r4
 80a1082:	f7ff fe67 	bl	80a0d54 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a1086:	4620      	mov	r0, r4
 80a1088:	f7ff febf 	bl	80a0e0a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a108c:	4620      	mov	r0, r4
 80a108e:	f7ff ff2b 	bl	80a0ee8 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a1092:	4628      	mov	r0, r5
 80a1094:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a1096:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a1098:	bd38      	pop	{r3, r4, r5, pc}

080a109a <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a109a:	b510      	push	{r4, lr}
 80a109c:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a109e:	2127      	movs	r1, #39	; 0x27
 80a10a0:	f7ff ffb3 	bl	80a100a <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a10a4:	2101      	movs	r1, #1
 80a10a6:	40a1      	lsls	r1, r4
 80a10a8:	4008      	ands	r0, r1
 80a10aa:	4120      	asrs	r0, r4
}
 80a10ac:	b2c0      	uxtb	r0, r0
 80a10ae:	bd10      	pop	{r4, pc}

080a10b0 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a10b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a10b4:	4690      	mov	r8, r2
 80a10b6:	460c      	mov	r4, r1
 80a10b8:	461d      	mov	r5, r3
 80a10ba:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a10be:	f001 fba5 	bl	80a280c <HAL_Timer_Get_Milli_Seconds>
 80a10c2:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a10c4:	f002 fe3c 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a10c8:	4621      	mov	r1, r4
 80a10ca:	f001 fe29 	bl	80a2d20 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a10ce:	f002 fe37 	bl	80a3d40 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a10d2:	6803      	ldr	r3, [r0, #0]
 80a10d4:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a10d8:	689b      	ldr	r3, [r3, #8]
 80a10da:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a10dc:	f002 fe30 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a10e0:	2100      	movs	r1, #0
 80a10e2:	f001 fe21 	bl	80a2d28 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a10e6:	f002 fe2b 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a10ea:	4621      	mov	r1, r4
 80a10ec:	4632      	mov	r2, r6
 80a10ee:	f001 fe14 	bl	80a2d1a <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a10f2:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a10f4:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a10f8:	42b4      	cmp	r4, r6
 80a10fa:	da1a      	bge.n	80a1132 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a10fc:	f002 fe20 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a1100:	6803      	ldr	r3, [r0, #0]
 80a1102:	691b      	ldr	r3, [r3, #16]
 80a1104:	4798      	blx	r3
 80a1106:	b140      	cbz	r0, 80a111a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a1108:	f002 fe1a 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a110c:	6803      	ldr	r3, [r0, #0]
 80a110e:	f104 0801 	add.w	r8, r4, #1
 80a1112:	695b      	ldr	r3, [r3, #20]
 80a1114:	4798      	blx	r3
 80a1116:	5528      	strb	r0, [r5, r4]
 80a1118:	4644      	mov	r4, r8
 80a111a:	f001 fb77 	bl	80a280c <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a111e:	42b8      	cmp	r0, r7
 80a1120:	d9ea      	bls.n	80a10f8 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a1122:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a1124:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a1126:	1b62      	subs	r2, r4, r5
 80a1128:	4296      	cmp	r6, r2
 80a112a:	dd05      	ble.n	80a1138 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a112c:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a1130:	e7f9      	b.n	80a1126 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a1132:	2001      	movs	r0, #1
 80a1134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a1138:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a113e <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a113e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1140:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1142:	7801      	ldrb	r1, [r0, #0]
 80a1144:	2901      	cmp	r1, #1
 80a1146:	d107      	bne.n	80a1158 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a1148:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a114c:	9300      	str	r3, [sp, #0]
 80a114e:	4613      	mov	r3, r2
 80a1150:	462a      	mov	r2, r5
 80a1152:	f7ff ffad 	bl	80a10b0 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a1156:	e007      	b.n	80a1168 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1158:	b931      	cbnz	r1, 80a1168 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a115a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a115e:	9300      	str	r3, [sp, #0]
 80a1160:	4613      	mov	r3, r2
 80a1162:	462a      	mov	r2, r5
 80a1164:	f7ff fd88 	bl	80a0c78 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a1168:	b003      	add	sp, #12
 80a116a:	bd30      	pop	{r4, r5, pc}

080a116c <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a116c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a116e:	2306      	movs	r3, #6
 80a1170:	466a      	mov	r2, sp
 80a1172:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a1174:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a1176:	f7ff ffe2 	bl	80a113e <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a117a:	b330      	cbz	r0, 80a11ca <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a117c:	f89d 3000 	ldrb.w	r3, [sp]
 80a1180:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1184:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a1188:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a118c:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a1190:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1194:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a1198:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a119c:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a119e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a11a2:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a11a6:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a11a8:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a11aa:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a11ac:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a11ae:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a11b0:	b15d      	cbz	r5, 80a11ca <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a11b2:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a11b6:	1b49      	subs	r1, r1, r5
 80a11b8:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a11ba:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a11be:	1a52      	subs	r2, r2, r1
 80a11c0:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a11c2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a11c6:	1a9b      	subs	r3, r3, r2
 80a11c8:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a11ca:	b003      	add	sp, #12
 80a11cc:	bd30      	pop	{r4, r5, pc}

080a11ce <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a11ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a11d0:	2306      	movs	r3, #6
 80a11d2:	466a      	mov	r2, sp
 80a11d4:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a11d6:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a11d8:	f7ff ffb1 	bl	80a113e <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a11dc:	b330      	cbz	r0, 80a122c <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a11de:	f89d 3000 	ldrb.w	r3, [sp]
 80a11e2:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a11e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a11ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a11ee:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a11f2:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a11f6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a11fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a11fe:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1200:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a1204:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1208:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a120a:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a120c:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a120e:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1210:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a1212:	b15d      	cbz	r5, 80a122c <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a1214:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a1218:	1b49      	subs	r1, r1, r5
 80a121a:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a121c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a1220:	1a52      	subs	r2, r2, r1
 80a1222:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a1224:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a1228:	1a9b      	subs	r3, r3, r2
 80a122a:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a122c:	b003      	add	sp, #12
 80a122e:	bd30      	pop	{r4, r5, pc}

080a1230 <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a1230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1234:	4604      	mov	r4, r0
 80a1236:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a1238:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a123a:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a123c:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a123e:	9304      	str	r3, [sp, #16]
 80a1240:	9305      	str	r3, [sp, #20]
 80a1242:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a1244:	9307      	str	r3, [sp, #28]
 80a1246:	9308      	str	r3, [sp, #32]
 80a1248:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a124a:	f7ff fecb 	bl	80a0fe4 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a124e:	223f      	movs	r2, #63	; 0x3f
 80a1250:	212e      	movs	r1, #46	; 0x2e
 80a1252:	4620      	mov	r0, r4
 80a1254:	f7ff fd6a 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a1258:	212f      	movs	r1, #47	; 0x2f
 80a125a:	4620      	mov	r0, r4
 80a125c:	f7ff feac 	bl	80a0fb8 <_ZN7LSM9DS110xgReadByteEh>
 80a1260:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a1264:	2e1e      	cmp	r6, #30
 80a1266:	d9f7      	bls.n	80a1258 <_ZN7LSM9DS19calibrateEb+0x28>
 80a1268:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a126a:	42b7      	cmp	r7, r6
 80a126c:	da32      	bge.n	80a12d4 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a126e:	4620      	mov	r0, r4
 80a1270:	f7ff ffad 	bl	80a11ce <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a1274:	9a07      	ldr	r2, [sp, #28]
 80a1276:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a127a:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a127c:	4413      	add	r3, r2
 80a127e:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a1280:	9a08      	ldr	r2, [sp, #32]
 80a1282:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a1286:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a1288:	4413      	add	r3, r2
 80a128a:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a128c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a128e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a1292:	4413      	add	r3, r2
 80a1294:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a1296:	f7ff ff69 	bl	80a116c <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a129a:	9a04      	ldr	r2, [sp, #16]
 80a129c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a12a0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a12a2:	4413      	add	r3, r2
 80a12a4:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a12a6:	9a05      	ldr	r2, [sp, #20]
 80a12a8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a12ac:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a12b0:	4413      	add	r3, r2
 80a12b2:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a12b4:	f003 f852 	bl	80a435c <__aeabi_f2d>
 80a12b8:	4602      	mov	r2, r0
 80a12ba:	460b      	mov	r3, r1
 80a12bc:	2000      	movs	r0, #0
 80a12be:	4926      	ldr	r1, [pc, #152]	; (80a1358 <_ZN7LSM9DS19calibrateEb+0x128>)
 80a12c0:	f003 f9ca 	bl	80a4658 <__aeabi_ddiv>
 80a12c4:	f003 fb4e 	bl	80a4964 <__aeabi_d2iz>
 80a12c8:	b200      	sxth	r0, r0
 80a12ca:	1a2d      	subs	r5, r5, r0
 80a12cc:	9806      	ldr	r0, [sp, #24]
 80a12ce:	4405      	add	r5, r0
 80a12d0:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a12d2:	e7ca      	b.n	80a126a <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a12d4:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a12d8:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a12dc:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a12e0:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a12e4:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a12e8:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a12ec:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a12ee:	a907      	add	r1, sp, #28
 80a12f0:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a12f4:	fb90 f0f6 	sdiv	r0, r0, r6
 80a12f8:	b200      	sxth	r0, r0
 80a12fa:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a12fe:	9202      	str	r2, [sp, #8]
 80a1300:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a1302:	f003 fc31 	bl	80a4b68 <__aeabi_i2f>
 80a1306:	4659      	mov	r1, fp
 80a1308:	f003 fc82 	bl	80a4c10 <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a130c:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a130e:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a1312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a1316:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a1318:	fb90 f0f6 	sdiv	r0, r0, r6
 80a131c:	b200      	sxth	r0, r0
 80a131e:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a1322:	f003 fc21 	bl	80a4b68 <__aeabi_i2f>
 80a1326:	4651      	mov	r1, sl
 80a1328:	f003 fc72 	bl	80a4c10 <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a132c:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a132e:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a1332:	9a02      	ldr	r2, [sp, #8]
 80a1334:	d1db      	bne.n	80a12ee <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a1336:	2100      	movs	r1, #0
 80a1338:	4620      	mov	r0, r4
 80a133a:	f7ff fe53 	bl	80a0fe4 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a133e:	2200      	movs	r2, #0
 80a1340:	212e      	movs	r1, #46	; 0x2e
 80a1342:	4620      	mov	r0, r4
 80a1344:	f7ff fcf2 	bl	80a0d2c <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a1348:	9b01      	ldr	r3, [sp, #4]
 80a134a:	b113      	cbz	r3, 80a1352 <_ZN7LSM9DS19calibrateEb+0x122>
 80a134c:	2301      	movs	r3, #1
 80a134e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a1352:	b00b      	add	sp, #44	; 0x2c
 80a1354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1358:	3ff00000 	.word	0x3ff00000

080a135c <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a135c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a135e:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1360:	7801      	ldrb	r1, [r0, #0]
 80a1362:	2901      	cmp	r1, #1
 80a1364:	d107      	bne.n	80a1376 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a1366:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a136a:	9300      	str	r3, [sp, #0]
 80a136c:	4613      	mov	r3, r2
 80a136e:	462a      	mov	r2, r5
 80a1370:	f7ff fe9e 	bl	80a10b0 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a1374:	e007      	b.n	80a1386 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1376:	b931      	cbnz	r1, 80a1386 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a1378:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a137c:	9300      	str	r3, [sp, #0]
 80a137e:	4613      	mov	r3, r2
 80a1380:	462a      	mov	r2, r5
 80a1382:	f7ff fc79 	bl	80a0c78 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a1386:	b003      	add	sp, #12
 80a1388:	bd30      	pop	{r4, r5, pc}

080a138a <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a138a:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a138c:	2306      	movs	r3, #6
 80a138e:	466a      	mov	r2, sp
 80a1390:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a1392:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a1394:	f7ff ffe2 	bl	80a135c <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a1398:	b1a0      	cbz	r0, 80a13c4 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a139a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a139e:	f89d 3000 	ldrb.w	r3, [sp]
 80a13a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a13a6:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a13a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a13ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a13b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a13b4:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a13b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a13ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a13be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a13c2:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a13c4:	b002      	add	sp, #8
 80a13c6:	bd10      	pop	{r4, pc}

080a13c8 <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a13c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a13cc:	4605      	mov	r5, r0
 80a13ce:	468a      	mov	sl, r1
 80a13d0:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a13d2:	2300      	movs	r3, #0
 80a13d4:	f8ad 3000 	strh.w	r3, [sp]
 80a13d8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a13dc:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a13e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a13e4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a13e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a13ec:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a13ee:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a13f0:	2103      	movs	r1, #3
 80a13f2:	4628      	mov	r0, r5
 80a13f4:	f7ff fe51 	bl	80a109a <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a13f8:	2800      	cmp	r0, #0
 80a13fa:	d0f9      	beq.n	80a13f0 <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a13fc:	4628      	mov	r0, r5
 80a13fe:	f7ff ffc4 	bl	80a138a <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a1402:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a1404:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a1408:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a140a:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a140e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a1410:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a1414:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a1416:	aa04      	add	r2, sp, #16
 80a1418:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a141c:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a1420:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a1422:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a1426:	bfb8      	it	lt
 80a1428:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a142c:	4291      	cmp	r1, r2
 80a142e:	bfc8      	it	gt
 80a1430:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a1434:	3301      	adds	r3, #1
 80a1436:	2b03      	cmp	r3, #3
 80a1438:	d1ed      	bne.n	80a1416 <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a143a:	3c01      	subs	r4, #1
 80a143c:	d1d8      	bne.n	80a13f0 <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a143e:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a1442:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a1446:	f04f 0b02 	mov.w	fp, #2
 80a144a:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a144e:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a1452:	441e      	add	r6, r3
 80a1454:	fb96 f6fb 	sdiv	r6, r6, fp
 80a1458:	b236      	sxth	r6, r6
 80a145a:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a145e:	4630      	mov	r0, r6
 80a1460:	f003 fb82 	bl	80a4b68 <__aeabi_i2f>
 80a1464:	4601      	mov	r1, r0
 80a1466:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a1468:	f003 fbd2 	bl	80a4c10 <__aeabi_fmul>
 80a146c:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a1470:	f1ba 0f00 	cmp.w	sl, #0
 80a1474:	d004      	beq.n	80a1480 <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a1476:	4632      	mov	r2, r6
 80a1478:	b2e1      	uxtb	r1, r4
 80a147a:	4628      	mov	r0, r5
 80a147c:	f7ff fd1c 	bl	80a0eb8 <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a1480:	3401      	adds	r4, #1
 80a1482:	2c03      	cmp	r4, #3
 80a1484:	d1e1      	bne.n	80a144a <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a1486:	b007      	add	sp, #28
 80a1488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a148c <_GLOBAL__sub_I_magSensitivity>:
 80a148c:	f001 b9c6 	b.w	80a281c <HAL_Pin_Map>

080a1490 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a1490:	f001 b9b4 	b.w	80a27fc <HAL_Timer_Get_Micro_Seconds>

080a1494 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a1494:	b510      	push	{r4, lr}
 80a1496:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a1498:	68c0      	ldr	r0, [r0, #12]
 80a149a:	b108      	cbz	r0, 80a14a0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a149c:	f001 fbd4 	bl	80a2c48 <free>
  if (begun) pinMode(pin, INPUT);
 80a14a0:	7823      	ldrb	r3, [r4, #0]
 80a14a2:	b11b      	cbz	r3, 80a14ac <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a14a4:	2100      	movs	r1, #0
 80a14a6:	79e0      	ldrb	r0, [r4, #7]
 80a14a8:	f002 fc20 	bl	80a3cec <pinMode>
}
 80a14ac:	4620      	mov	r0, r4
 80a14ae:	bd10      	pop	{r4, pc}

080a14b0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a14b0:	b538      	push	{r3, r4, r5, lr}
 80a14b2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a14b4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a14b6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a14b8:	b108      	cbz	r0, 80a14be <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a14ba:	f001 fbc5 	bl	80a2c48 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a14be:	79a3      	ldrb	r3, [r4, #6]
 80a14c0:	2b06      	cmp	r3, #6
 80a14c2:	bf0c      	ite	eq
 80a14c4:	2004      	moveq	r0, #4
 80a14c6:	2003      	movne	r0, #3
 80a14c8:	4368      	muls	r0, r5
 80a14ca:	b280      	uxth	r0, r0
 80a14cc:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a14ce:	f001 fbb3 	bl	80a2c38 <malloc>
 80a14d2:	60e0      	str	r0, [r4, #12]
 80a14d4:	b128      	cbz	r0, 80a14e2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a14d6:	88a2      	ldrh	r2, [r4, #4]
 80a14d8:	2100      	movs	r1, #0
 80a14da:	f003 fd9e 	bl	80a501a <memset>
    numLEDs = n;
 80a14de:	8065      	strh	r5, [r4, #2]
 80a14e0:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a14e2:	80a0      	strh	r0, [r4, #4]
 80a14e4:	8060      	strh	r0, [r4, #2]
 80a14e6:	bd38      	pop	{r3, r4, r5, pc}

080a14e8 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a14e8:	b510      	push	{r4, lr}
 80a14ea:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a14ec:	2101      	movs	r1, #1
 80a14ee:	79c0      	ldrb	r0, [r0, #7]
 80a14f0:	f002 fbfc 	bl	80a3cec <pinMode>
  digitalWrite(pin, LOW);
 80a14f4:	2100      	movs	r1, #0
 80a14f6:	79e0      	ldrb	r0, [r4, #7]
 80a14f8:	f002 fc09 	bl	80a3d0e <digitalWrite>
  begun = true;
 80a14fc:	2301      	movs	r3, #1
 80a14fe:	7023      	strb	r3, [r4, #0]
 80a1500:	bd10      	pop	{r4, pc}

080a1502 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1502:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a1504:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1506:	4605      	mov	r5, r0
 80a1508:	460c      	mov	r4, r1
    if (begun) {
 80a150a:	b11b      	cbz	r3, 80a1514 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a150c:	2100      	movs	r1, #0
 80a150e:	79c0      	ldrb	r0, [r0, #7]
 80a1510:	f002 fbec 	bl	80a3cec <pinMode>
    }
    pin = p;
    if (begun) {
 80a1514:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a1516:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a1518:	b153      	cbz	r3, 80a1530 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a151a:	b2a4      	uxth	r4, r4
 80a151c:	4620      	mov	r0, r4
 80a151e:	2101      	movs	r1, #1
 80a1520:	f002 fbe4 	bl	80a3cec <pinMode>
        digitalWrite(p, LOW);
 80a1524:	4620      	mov	r0, r4
    }
}
 80a1526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a152a:	2100      	movs	r1, #0
 80a152c:	f002 bbef 	b.w	80a3d0e <digitalWrite>
 80a1530:	bd38      	pop	{r3, r4, r5, pc}

080a1532 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a1532:	b570      	push	{r4, r5, r6, lr}
 80a1534:	4604      	mov	r4, r0
 80a1536:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a1538:	2500      	movs	r5, #0
 80a153a:	7183      	strb	r3, [r0, #6]
 80a153c:	7005      	strb	r5, [r0, #0]
 80a153e:	7205      	strb	r5, [r0, #8]
 80a1540:	60c5      	str	r5, [r0, #12]
 80a1542:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a1544:	f7ff ffb4 	bl	80a14b0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a1548:	4620      	mov	r0, r4
 80a154a:	4631      	mov	r1, r6
 80a154c:	f7ff ffd9 	bl	80a1502 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a1550:	4620      	mov	r0, r4
 80a1552:	bd70      	pop	{r4, r5, r6, pc}

080a1554 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a1554:	68c3      	ldr	r3, [r0, #12]
 80a1556:	2b00      	cmp	r3, #0
 80a1558:	f000 858e 	beq.w	80a2078 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1560:	4604      	mov	r4, r0
 80a1562:	7983      	ldrb	r3, [r0, #6]
 80a1564:	b086      	sub	sp, #24
 80a1566:	3b02      	subs	r3, #2
 80a1568:	b2db      	uxtb	r3, r3
 80a156a:	2b04      	cmp	r3, #4
 80a156c:	bf96      	itet	ls
 80a156e:	4a29      	ldrls	r2, [pc, #164]	; (80a1614 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a1570:	2532      	movhi	r5, #50	; 0x32
 80a1572:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a1576:	f7ff ff8b 	bl	80a1490 <micros>
 80a157a:	6923      	ldr	r3, [r4, #16]
 80a157c:	1ac0      	subs	r0, r0, r3
 80a157e:	42a8      	cmp	r0, r5
 80a1580:	d3f9      	bcc.n	80a1576 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a1582:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1584:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a1586:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1588:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a158a:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a158e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1592:	f000 8272 	beq.w	80a1a7a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a1596:	2907      	cmp	r1, #7
 80a1598:	f000 826f 	beq.w	80a1a7a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a159c:	2906      	cmp	r1, #6
 80a159e:	f000 8432 	beq.w	80a1e06 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a15a2:	2905      	cmp	r1, #5
 80a15a4:	f000 83ab 	beq.w	80a1cfe <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a15a8:	2908      	cmp	r1, #8
 80a15aa:	f000 83a8 	beq.w	80a1cfe <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a15ae:	2900      	cmp	r1, #0
 80a15b0:	f040 8563 	bne.w	80a207a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a15b4:	4a18      	ldr	r2, [pc, #96]	; (80a1618 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a15b6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a15ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15be:	b29b      	uxth	r3, r3
 80a15c0:	2b00      	cmp	r3, #0
 80a15c2:	f000 8395 	beq.w	80a1cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a15c6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a15c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15cc:	f10e 0503 	add.w	r5, lr, #3
 80a15d0:	3b03      	subs	r3, #3
 80a15d2:	b29b      	uxth	r3, r3
 80a15d4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a15d8:	f89e 3000 	ldrb.w	r3, [lr]
 80a15dc:	b2db      	uxtb	r3, r3
 80a15de:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a15e2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a15e6:	b2db      	uxtb	r3, r3
 80a15e8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a15ec:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a15f0:	b2db      	uxtb	r3, r3
 80a15f2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a15f6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a15fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a15fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1602:	021b      	lsls	r3, r3, #8
 80a1604:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1608:	4303      	orrs	r3, r0
 80a160a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a160c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a1610:	e11b      	b.n	80a184a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a1612:	bf00      	nop
 80a1614:	080a52fc 	.word	0x080a52fc
 80a1618:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a161c:	4600      	mov	r0, r0
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a1724:	79e3      	ldrb	r3, [r4, #7]
 80a1726:	6810      	ldr	r0, [r2, #0]
 80a1728:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a172c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1730:	88bf      	ldrh	r7, [r7, #4]
 80a1732:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1736:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1738:	4600      	mov	r0, r0
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1832:	9b04      	ldr	r3, [sp, #16]
 80a1834:	085b      	lsrs	r3, r3, #1
 80a1836:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1838:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a183c:	3301      	adds	r3, #1
 80a183e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1840:	2b17      	cmp	r3, #23
 80a1842:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1846:	f200 82db 	bhi.w	80a1e00 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a184a:	79e3      	ldrb	r3, [r4, #7]
 80a184c:	6810      	ldr	r0, [r2, #0]
 80a184e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1852:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1856:	88bf      	ldrh	r7, [r7, #4]
 80a1858:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a185c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a185e:	9803      	ldr	r0, [sp, #12]
 80a1860:	9b04      	ldr	r3, [sp, #16]
 80a1862:	4218      	tst	r0, r3
 80a1864:	f47f aeda 	bne.w	80a161c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1868:	4600      	mov	r0, r0
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a18ba:	79e3      	ldrb	r3, [r4, #7]
 80a18bc:	6810      	ldr	r0, [r2, #0]
 80a18be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18c2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18c6:	88bf      	ldrh	r7, [r7, #4]
 80a18c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18cc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a18ce:	4600      	mov	r0, r0
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	e6db      	b.n	80a1832 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a7e:	4a17      	ldr	r2, [pc, #92]	; (80a1adc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a1a80:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a1a82:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1a86:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a88:	2b00      	cmp	r3, #0
 80a1a8a:	f000 8131 	beq.w	80a1cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1a8e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1a90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a94:	f10e 0103 	add.w	r1, lr, #3
 80a1a98:	3b03      	subs	r3, #3
 80a1a9a:	b29b      	uxth	r3, r3
 80a1a9c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1aa0:	f89e 3000 	ldrb.w	r3, [lr]
 80a1aa4:	b2db      	uxtb	r3, r3
 80a1aa6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1aaa:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1aae:	b2db      	uxtb	r3, r3
 80a1ab0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1ab4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1ab8:	b2db      	uxtb	r3, r3
 80a1aba:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1abe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1ac2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1ac6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a1aca:	0200      	lsls	r0, r0, #8
 80a1acc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a1ad0:	433b      	orrs	r3, r7
 80a1ad2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1ad4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1ad8:	e080      	b.n	80a1bdc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a1ada:	bf00      	nop
 80a1adc:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1ae0:	4600      	mov	r0, r0
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1b7a:	79e3      	ldrb	r3, [r4, #7]
 80a1b7c:	6810      	ldr	r0, [r2, #0]
 80a1b7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b82:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b86:	88bf      	ldrh	r7, [r7, #4]
 80a1b88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b8c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b8e:	4600      	mov	r0, r0
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1bc4:	9b04      	ldr	r3, [sp, #16]
 80a1bc6:	085b      	lsrs	r3, r3, #1
 80a1bc8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1bca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1bce:	3301      	adds	r3, #1
 80a1bd0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1bd2:	2b17      	cmp	r3, #23
 80a1bd4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1bd8:	f200 8083 	bhi.w	80a1ce2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1bdc:	79e3      	ldrb	r3, [r4, #7]
 80a1bde:	6810      	ldr	r0, [r2, #0]
 80a1be0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1be4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1be8:	88bf      	ldrh	r7, [r7, #4]
 80a1bea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1bee:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1bf0:	9803      	ldr	r0, [sp, #12]
 80a1bf2:	9b04      	ldr	r3, [sp, #16]
 80a1bf4:	4218      	tst	r0, r3
 80a1bf6:	f47f af73 	bne.w	80a1ae0 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1bfa:	4600      	mov	r0, r0
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a1c22:	79e3      	ldrb	r3, [r4, #7]
 80a1c24:	6810      	ldr	r0, [r2, #0]
 80a1c26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c2a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c2e:	88bf      	ldrh	r7, [r7, #4]
 80a1c30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c34:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c36:	4600      	mov	r0, r0
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	e770      	b.n	80a1bc4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1ce2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1ce6:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1ce8:	b29b      	uxth	r3, r3
 80a1cea:	2b00      	cmp	r3, #0
 80a1cec:	f47f aecf 	bne.w	80a1a8e <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1cf0:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1cf2:	f7ff fbcd 	bl	80a1490 <micros>
 80a1cf6:	6120      	str	r0, [r4, #16]
}
 80a1cf8:	b006      	add	sp, #24
 80a1cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1cfe:	4b5e      	ldr	r3, [pc, #376]	; (80a1e78 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1d00:	4a5e      	ldr	r2, [pc, #376]	; (80a1e7c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1d02:	4618      	mov	r0, r3
 80a1d04:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1d06:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1d0a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1d0c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1d10:	b292      	uxth	r2, r2
 80a1d12:	2a00      	cmp	r2, #0
 80a1d14:	d0ec      	beq.n	80a1cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1d16:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1d1a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1d1e:	f10e 0503 	add.w	r5, lr, #3
 80a1d22:	3a03      	subs	r2, #3
 80a1d24:	b292      	uxth	r2, r2
 80a1d26:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1d2a:	f89e 2000 	ldrb.w	r2, [lr]
 80a1d2e:	b2d2      	uxtb	r2, r2
 80a1d30:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1d34:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1d38:	b2d2      	uxtb	r2, r2
 80a1d3a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1d3e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a1d42:	b2d2      	uxtb	r2, r2
 80a1d44:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1d48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1d4c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1d50:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1d54:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1d58:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1d5c:	ea42 020c 	orr.w	r2, r2, ip
 80a1d60:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1d62:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1d66:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1d68:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1d6a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1d6e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1d72:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1d76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1d7a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1d7c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1d80:	9e03      	ldr	r6, [sp, #12]
 80a1d82:	9a04      	ldr	r2, [sp, #16]
 80a1d84:	4216      	tst	r6, r2
 80a1d86:	d023      	beq.n	80a1dd0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1d88:	685a      	ldr	r2, [r3, #4]
 80a1d8a:	9e05      	ldr	r6, [sp, #20]
 80a1d8c:	1b92      	subs	r2, r2, r6
 80a1d8e:	2a4f      	cmp	r2, #79	; 0x4f
 80a1d90:	d9fa      	bls.n	80a1d88 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1d92:	79e2      	ldrb	r2, [r4, #7]
 80a1d94:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1d98:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1d9c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1da0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1da4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1da8:	6842      	ldr	r2, [r0, #4]
 80a1daa:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1dac:	685a      	ldr	r2, [r3, #4]
 80a1dae:	9e05      	ldr	r6, [sp, #20]
 80a1db0:	1b92      	subs	r2, r2, r6
 80a1db2:	2a07      	cmp	r2, #7
 80a1db4:	d9fa      	bls.n	80a1dac <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1db6:	9a04      	ldr	r2, [sp, #16]
 80a1db8:	0852      	lsrs	r2, r2, #1
 80a1dba:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1dbc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1dc0:	3201      	adds	r2, #1
 80a1dc2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1dc4:	2a17      	cmp	r2, #23
 80a1dc6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1dca:	d9cc      	bls.n	80a1d66 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1dcc:	46ae      	mov	lr, r5
 80a1dce:	e79d      	b.n	80a1d0c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1dd0:	685a      	ldr	r2, [r3, #4]
 80a1dd2:	9e05      	ldr	r6, [sp, #20]
 80a1dd4:	1b92      	subs	r2, r2, r6
 80a1dd6:	2a18      	cmp	r2, #24
 80a1dd8:	d9fa      	bls.n	80a1dd0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1dda:	79e2      	ldrb	r2, [r4, #7]
 80a1ddc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1de0:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1de4:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1de8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1dec:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1df0:	6842      	ldr	r2, [r0, #4]
 80a1df2:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1df4:	685a      	ldr	r2, [r3, #4]
 80a1df6:	9e05      	ldr	r6, [sp, #20]
 80a1df8:	1b92      	subs	r2, r2, r6
 80a1dfa:	2a45      	cmp	r2, #69	; 0x45
 80a1dfc:	d9fa      	bls.n	80a1df4 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1dfe:	e7da      	b.n	80a1db6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1e00:	46ae      	mov	lr, r5
 80a1e02:	f7ff bbda 	b.w	80a15ba <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1e06:	4a1d      	ldr	r2, [pc, #116]	; (80a1e7c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1e08:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1e0c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1e0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1e12:	b29b      	uxth	r3, r3
 80a1e14:	2b00      	cmp	r3, #0
 80a1e16:	f43f af6b 	beq.w	80a1cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1e1a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1e1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1e20:	f10e 0104 	add.w	r1, lr, #4
 80a1e24:	3b04      	subs	r3, #4
 80a1e26:	b29b      	uxth	r3, r3
 80a1e28:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1e2c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1e30:	b2db      	uxtb	r3, r3
 80a1e32:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1e36:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1e3a:	b2db      	uxtb	r3, r3
 80a1e3c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1e40:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1e44:	b2db      	uxtb	r3, r3
 80a1e46:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1e4a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1e4e:	b2db      	uxtb	r3, r3
 80a1e50:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1e58:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1e5c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1e60:	043f      	lsls	r7, r7, #16
 80a1e62:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1e66:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1e6a:	4303      	orrs	r3, r0
 80a1e6c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1e70:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1e72:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1e76:	e07e      	b.n	80a1f76 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1e78:	e0001000 	.word	0xe0001000
 80a1e7c:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1e80:	4600      	mov	r0, r0
 80a1e82:	bf00      	nop
 80a1e84:	bf00      	nop
 80a1e86:	bf00      	nop
 80a1e88:	bf00      	nop
 80a1e8a:	bf00      	nop
 80a1e8c:	bf00      	nop
 80a1e8e:	bf00      	nop
 80a1e90:	bf00      	nop
 80a1e92:	bf00      	nop
 80a1e94:	bf00      	nop
 80a1e96:	bf00      	nop
 80a1e98:	bf00      	nop
 80a1e9a:	bf00      	nop
 80a1e9c:	bf00      	nop
 80a1e9e:	bf00      	nop
 80a1ea0:	bf00      	nop
 80a1ea2:	bf00      	nop
 80a1ea4:	bf00      	nop
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
 80a1eb4:	bf00      	nop
 80a1eb6:	bf00      	nop
 80a1eb8:	bf00      	nop
 80a1eba:	bf00      	nop
 80a1ebc:	bf00      	nop
 80a1ebe:	bf00      	nop
 80a1ec0:	bf00      	nop
 80a1ec2:	bf00      	nop
 80a1ec4:	bf00      	nop
 80a1ec6:	bf00      	nop
 80a1ec8:	bf00      	nop
 80a1eca:	bf00      	nop
 80a1ecc:	bf00      	nop
 80a1ece:	bf00      	nop
 80a1ed0:	bf00      	nop
 80a1ed2:	bf00      	nop
 80a1ed4:	bf00      	nop
 80a1ed6:	bf00      	nop
 80a1ed8:	bf00      	nop
 80a1eda:	bf00      	nop
 80a1edc:	bf00      	nop
 80a1ede:	bf00      	nop
 80a1ee0:	bf00      	nop
 80a1ee2:	bf00      	nop
 80a1ee4:	bf00      	nop
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1eee:	79e3      	ldrb	r3, [r4, #7]
 80a1ef0:	6810      	ldr	r0, [r2, #0]
 80a1ef2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1ef6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1efa:	88bf      	ldrh	r7, [r7, #4]
 80a1efc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1f00:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1f02:	4600      	mov	r0, r0
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
 80a1f10:	bf00      	nop
 80a1f12:	bf00      	nop
 80a1f14:	bf00      	nop
 80a1f16:	bf00      	nop
 80a1f18:	bf00      	nop
 80a1f1a:	bf00      	nop
 80a1f1c:	bf00      	nop
 80a1f1e:	bf00      	nop
 80a1f20:	bf00      	nop
 80a1f22:	bf00      	nop
 80a1f24:	bf00      	nop
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1f60:	9b04      	ldr	r3, [sp, #16]
 80a1f62:	085b      	lsrs	r3, r3, #1
 80a1f64:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1f66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1f6a:	3301      	adds	r3, #1
 80a1f6c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1f6e:	2b1f      	cmp	r3, #31
 80a1f70:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1f74:	d87e      	bhi.n	80a2074 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1f76:	79e3      	ldrb	r3, [r4, #7]
 80a1f78:	6810      	ldr	r0, [r2, #0]
 80a1f7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1f7e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1f82:	88bf      	ldrh	r7, [r7, #4]
 80a1f84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1f88:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1f8a:	9803      	ldr	r0, [sp, #12]
 80a1f8c:	9b04      	ldr	r3, [sp, #16]
 80a1f8e:	4218      	tst	r0, r3
 80a1f90:	f47f af76 	bne.w	80a1e80 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1f94:	4600      	mov	r0, r0
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1fbc:	79e3      	ldrb	r3, [r4, #7]
 80a1fbe:	6810      	ldr	r0, [r2, #0]
 80a1fc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1fc4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1fc8:	88bf      	ldrh	r7, [r7, #4]
 80a1fca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1fce:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1fd0:	4600      	mov	r0, r0
 80a1fd2:	bf00      	nop
 80a1fd4:	bf00      	nop
 80a1fd6:	bf00      	nop
 80a1fd8:	bf00      	nop
 80a1fda:	bf00      	nop
 80a1fdc:	bf00      	nop
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
 80a2004:	bf00      	nop
 80a2006:	bf00      	nop
 80a2008:	bf00      	nop
 80a200a:	bf00      	nop
 80a200c:	bf00      	nop
 80a200e:	bf00      	nop
 80a2010:	bf00      	nop
 80a2012:	bf00      	nop
 80a2014:	bf00      	nop
 80a2016:	bf00      	nop
 80a2018:	bf00      	nop
 80a201a:	bf00      	nop
 80a201c:	bf00      	nop
 80a201e:	bf00      	nop
 80a2020:	bf00      	nop
 80a2022:	bf00      	nop
 80a2024:	bf00      	nop
 80a2026:	bf00      	nop
 80a2028:	bf00      	nop
 80a202a:	bf00      	nop
 80a202c:	bf00      	nop
 80a202e:	bf00      	nop
 80a2030:	bf00      	nop
 80a2032:	bf00      	nop
 80a2034:	bf00      	nop
 80a2036:	bf00      	nop
 80a2038:	bf00      	nop
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	bf00      	nop
 80a204c:	bf00      	nop
 80a204e:	bf00      	nop
 80a2050:	bf00      	nop
 80a2052:	bf00      	nop
 80a2054:	bf00      	nop
 80a2056:	bf00      	nop
 80a2058:	bf00      	nop
 80a205a:	bf00      	nop
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
 80a2060:	bf00      	nop
 80a2062:	bf00      	nop
 80a2064:	bf00      	nop
 80a2066:	bf00      	nop
 80a2068:	bf00      	nop
 80a206a:	bf00      	nop
 80a206c:	bf00      	nop
 80a206e:	bf00      	nop
 80a2070:	bf00      	nop
 80a2072:	e775      	b.n	80a1f60 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a2074:	468e      	mov	lr, r1
 80a2076:	e6ca      	b.n	80a1e0e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a2078:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a207a:	2903      	cmp	r1, #3
 80a207c:	f000 812e 	beq.w	80a22dc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2080:	4a1e      	ldr	r2, [pc, #120]	; (80a20fc <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a2082:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2086:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2088:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a208c:	b29b      	uxth	r3, r3
 80a208e:	2b00      	cmp	r3, #0
 80a2090:	f43f ae2e 	beq.w	80a1cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a2094:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2096:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a209a:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a209c:	3b03      	subs	r3, #3
 80a209e:	b29b      	uxth	r3, r3
 80a20a0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a20a4:	f89e 3000 	ldrb.w	r3, [lr]
 80a20a8:	f10e 0103 	add.w	r1, lr, #3
 80a20ac:	b2db      	uxtb	r3, r3
 80a20ae:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a20b2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a20b6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a20ba:	b2db      	uxtb	r3, r3
 80a20bc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a20c0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a20c4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a20c8:	b2db      	uxtb	r3, r3
 80a20ca:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a20ce:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a20d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a20d6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a20da:	021b      	lsls	r3, r3, #8
 80a20dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a20e0:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a20e4:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a20e8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a20ec:	433b      	orrs	r3, r7
 80a20ee:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a20f0:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a20f4:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a20f8:	e07d      	b.n	80a21f6 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a20fa:	bf00      	nop
 80a20fc:	20000204 	.word	0x20000204
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a2100:	9b04      	ldr	r3, [sp, #16]
 80a2102:	085b      	lsrs	r3, r3, #1
 80a2104:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2106:	4600      	mov	r0, r0
 80a2108:	bf00      	nop
 80a210a:	bf00      	nop
 80a210c:	bf00      	nop
 80a210e:	bf00      	nop
 80a2110:	bf00      	nop
 80a2112:	bf00      	nop
 80a2114:	bf00      	nop
 80a2116:	bf00      	nop
 80a2118:	bf00      	nop
 80a211a:	bf00      	nop
 80a211c:	bf00      	nop
 80a211e:	bf00      	nop
 80a2120:	bf00      	nop
 80a2122:	bf00      	nop
 80a2124:	bf00      	nop
 80a2126:	bf00      	nop
 80a2128:	bf00      	nop
 80a212a:	bf00      	nop
 80a212c:	bf00      	nop
 80a212e:	bf00      	nop
 80a2130:	bf00      	nop
 80a2132:	bf00      	nop
 80a2134:	bf00      	nop
 80a2136:	bf00      	nop
 80a2138:	bf00      	nop
 80a213a:	bf00      	nop
 80a213c:	bf00      	nop
 80a213e:	bf00      	nop
 80a2140:	bf00      	nop
 80a2142:	bf00      	nop
 80a2144:	bf00      	nop
 80a2146:	bf00      	nop
 80a2148:	bf00      	nop
 80a214a:	bf00      	nop
 80a214c:	bf00      	nop
 80a214e:	bf00      	nop
 80a2150:	bf00      	nop
 80a2152:	bf00      	nop
 80a2154:	bf00      	nop
 80a2156:	bf00      	nop
 80a2158:	bf00      	nop
 80a215a:	bf00      	nop
 80a215c:	bf00      	nop
 80a215e:	bf00      	nop
 80a2160:	bf00      	nop
 80a2162:	bf00      	nop
 80a2164:	bf00      	nop
 80a2166:	bf00      	nop
 80a2168:	bf00      	nop
 80a216a:	bf00      	nop
 80a216c:	bf00      	nop
 80a216e:	bf00      	nop
 80a2170:	bf00      	nop
 80a2172:	bf00      	nop
 80a2174:	bf00      	nop
 80a2176:	bf00      	nop
 80a2178:	bf00      	nop
 80a217a:	bf00      	nop
 80a217c:	bf00      	nop
 80a217e:	bf00      	nop
 80a2180:	bf00      	nop
 80a2182:	bf00      	nop
 80a2184:	bf00      	nop
 80a2186:	bf00      	nop
 80a2188:	bf00      	nop
 80a218a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a218c:	79e0      	ldrb	r0, [r4, #7]
 80a218e:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a2190:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2194:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a2198:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a219c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a21a0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a21a4:	3301      	adds	r3, #1
 80a21a6:	b2db      	uxtb	r3, r3
 80a21a8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a21ac:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a21b0:	4600      	mov	r0, r0
 80a21b2:	bf00      	nop
 80a21b4:	bf00      	nop
 80a21b6:	bf00      	nop
 80a21b8:	bf00      	nop
 80a21ba:	bf00      	nop
 80a21bc:	bf00      	nop
 80a21be:	bf00      	nop
 80a21c0:	bf00      	nop
 80a21c2:	bf00      	nop
 80a21c4:	bf00      	nop
 80a21c6:	bf00      	nop
 80a21c8:	bf00      	nop
 80a21ca:	bf00      	nop
 80a21cc:	bf00      	nop
 80a21ce:	bf00      	nop
 80a21d0:	bf00      	nop
 80a21d2:	bf00      	nop
 80a21d4:	bf00      	nop
 80a21d6:	bf00      	nop
 80a21d8:	bf00      	nop
          if(j==24) break;
 80a21da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a21de:	2b18      	cmp	r3, #24
 80a21e0:	d07a      	beq.n	80a22d8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a21e2:	79e3      	ldrb	r3, [r4, #7]
 80a21e4:	6810      	ldr	r0, [r2, #0]
 80a21e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a21ea:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a21ee:	88bf      	ldrh	r7, [r7, #4]
 80a21f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a21f4:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a21f6:	9803      	ldr	r0, [sp, #12]
 80a21f8:	9b04      	ldr	r3, [sp, #16]
 80a21fa:	4218      	tst	r0, r3
 80a21fc:	d180      	bne.n	80a2100 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a21fe:	4600      	mov	r0, r0
 80a2200:	bf00      	nop
 80a2202:	bf00      	nop
 80a2204:	bf00      	nop
 80a2206:	bf00      	nop
 80a2208:	bf00      	nop
 80a220a:	bf00      	nop
 80a220c:	bf00      	nop
 80a220e:	bf00      	nop
 80a2210:	bf00      	nop
 80a2212:	bf00      	nop
 80a2214:	bf00      	nop
 80a2216:	bf00      	nop
 80a2218:	bf00      	nop
 80a221a:	bf00      	nop
 80a221c:	bf00      	nop
 80a221e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a2220:	79e3      	ldrb	r3, [r4, #7]
 80a2222:	6810      	ldr	r0, [r2, #0]
 80a2224:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2228:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a222c:	88bf      	ldrh	r7, [r7, #4]
 80a222e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2232:	831f      	strh	r7, [r3, #24]
          j++;
 80a2234:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2238:	3301      	adds	r3, #1
 80a223a:	b2db      	uxtb	r3, r3
 80a223c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a2240:	9b04      	ldr	r3, [sp, #16]
 80a2242:	085b      	lsrs	r3, r3, #1
 80a2244:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2246:	4600      	mov	r0, r0
 80a2248:	bf00      	nop
 80a224a:	bf00      	nop
 80a224c:	bf00      	nop
 80a224e:	bf00      	nop
 80a2250:	bf00      	nop
 80a2252:	bf00      	nop
 80a2254:	bf00      	nop
 80a2256:	bf00      	nop
 80a2258:	bf00      	nop
 80a225a:	bf00      	nop
 80a225c:	bf00      	nop
 80a225e:	bf00      	nop
 80a2260:	bf00      	nop
 80a2262:	bf00      	nop
 80a2264:	bf00      	nop
 80a2266:	bf00      	nop
 80a2268:	bf00      	nop
 80a226a:	bf00      	nop
 80a226c:	bf00      	nop
 80a226e:	bf00      	nop
 80a2270:	bf00      	nop
 80a2272:	bf00      	nop
 80a2274:	bf00      	nop
 80a2276:	bf00      	nop
 80a2278:	bf00      	nop
 80a227a:	bf00      	nop
 80a227c:	bf00      	nop
 80a227e:	bf00      	nop
 80a2280:	bf00      	nop
 80a2282:	bf00      	nop
 80a2284:	bf00      	nop
 80a2286:	bf00      	nop
 80a2288:	bf00      	nop
 80a228a:	bf00      	nop
 80a228c:	bf00      	nop
 80a228e:	bf00      	nop
 80a2290:	bf00      	nop
 80a2292:	bf00      	nop
 80a2294:	bf00      	nop
 80a2296:	bf00      	nop
 80a2298:	bf00      	nop
 80a229a:	bf00      	nop
 80a229c:	bf00      	nop
 80a229e:	bf00      	nop
 80a22a0:	bf00      	nop
 80a22a2:	bf00      	nop
 80a22a4:	bf00      	nop
 80a22a6:	bf00      	nop
 80a22a8:	bf00      	nop
 80a22aa:	bf00      	nop
 80a22ac:	bf00      	nop
 80a22ae:	bf00      	nop
 80a22b0:	bf00      	nop
 80a22b2:	bf00      	nop
 80a22b4:	bf00      	nop
 80a22b6:	bf00      	nop
 80a22b8:	bf00      	nop
 80a22ba:	bf00      	nop
 80a22bc:	bf00      	nop
 80a22be:	bf00      	nop
 80a22c0:	bf00      	nop
 80a22c2:	bf00      	nop
 80a22c4:	bf00      	nop
 80a22c6:	bf00      	nop
 80a22c8:	bf00      	nop
 80a22ca:	bf00      	nop
 80a22cc:	bf00      	nop
 80a22ce:	bf00      	nop
          if(j==24) break;
 80a22d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a22d4:	2b18      	cmp	r3, #24
 80a22d6:	d184      	bne.n	80a21e2 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a22d8:	468e      	mov	lr, r1
 80a22da:	e6d5      	b.n	80a2088 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a22dc:	4a17      	ldr	r2, [pc, #92]	; (80a233c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a22de:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a22e2:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a22e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a22e8:	b29b      	uxth	r3, r3
 80a22ea:	2b00      	cmp	r3, #0
 80a22ec:	f43f ad00 	beq.w	80a1cf0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a22f0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a22f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a22f6:	f10e 0103 	add.w	r1, lr, #3
 80a22fa:	3b03      	subs	r3, #3
 80a22fc:	b29b      	uxth	r3, r3
 80a22fe:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2302:	f89e 3000 	ldrb.w	r3, [lr]
 80a2306:	b2db      	uxtb	r3, r3
 80a2308:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a230c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a2310:	b2db      	uxtb	r3, r3
 80a2312:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a2316:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a231a:	b2db      	uxtb	r3, r3
 80a231c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2320:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2324:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2328:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a232c:	021b      	lsls	r3, r3, #8
 80a232e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2332:	4303      	orrs	r3, r0
 80a2334:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2336:	f88d 6005 	strb.w	r6, [sp, #5]
 80a233a:	e0e0      	b.n	80a24fe <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a233c:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2340:	4600      	mov	r0, r0
 80a2342:	bf00      	nop
 80a2344:	bf00      	nop
 80a2346:	bf00      	nop
 80a2348:	bf00      	nop
 80a234a:	bf00      	nop
 80a234c:	bf00      	nop
 80a234e:	bf00      	nop
 80a2350:	bf00      	nop
 80a2352:	bf00      	nop
 80a2354:	bf00      	nop
 80a2356:	bf00      	nop
 80a2358:	bf00      	nop
 80a235a:	bf00      	nop
 80a235c:	bf00      	nop
 80a235e:	bf00      	nop
 80a2360:	bf00      	nop
 80a2362:	bf00      	nop
 80a2364:	bf00      	nop
 80a2366:	bf00      	nop
 80a2368:	bf00      	nop
 80a236a:	bf00      	nop
 80a236c:	bf00      	nop
 80a236e:	bf00      	nop
 80a2370:	bf00      	nop
 80a2372:	bf00      	nop
 80a2374:	bf00      	nop
 80a2376:	bf00      	nop
 80a2378:	bf00      	nop
 80a237a:	bf00      	nop
 80a237c:	bf00      	nop
 80a237e:	bf00      	nop
 80a2380:	bf00      	nop
 80a2382:	bf00      	nop
 80a2384:	bf00      	nop
 80a2386:	bf00      	nop
 80a2388:	bf00      	nop
 80a238a:	bf00      	nop
 80a238c:	bf00      	nop
 80a238e:	bf00      	nop
 80a2390:	bf00      	nop
 80a2392:	bf00      	nop
 80a2394:	bf00      	nop
 80a2396:	bf00      	nop
 80a2398:	bf00      	nop
 80a239a:	bf00      	nop
 80a239c:	bf00      	nop
 80a239e:	bf00      	nop
 80a23a0:	bf00      	nop
 80a23a2:	bf00      	nop
 80a23a4:	bf00      	nop
 80a23a6:	bf00      	nop
 80a23a8:	bf00      	nop
 80a23aa:	bf00      	nop
 80a23ac:	bf00      	nop
 80a23ae:	bf00      	nop
 80a23b0:	bf00      	nop
 80a23b2:	bf00      	nop
 80a23b4:	bf00      	nop
 80a23b6:	bf00      	nop
 80a23b8:	bf00      	nop
 80a23ba:	bf00      	nop
 80a23bc:	bf00      	nop
 80a23be:	bf00      	nop
 80a23c0:	bf00      	nop
 80a23c2:	bf00      	nop
 80a23c4:	bf00      	nop
 80a23c6:	bf00      	nop
 80a23c8:	bf00      	nop
 80a23ca:	bf00      	nop
 80a23cc:	bf00      	nop
 80a23ce:	bf00      	nop
 80a23d0:	bf00      	nop
 80a23d2:	bf00      	nop
 80a23d4:	bf00      	nop
 80a23d6:	bf00      	nop
 80a23d8:	bf00      	nop
 80a23da:	bf00      	nop
 80a23dc:	bf00      	nop
 80a23de:	bf00      	nop
 80a23e0:	bf00      	nop
 80a23e2:	bf00      	nop
 80a23e4:	bf00      	nop
 80a23e6:	bf00      	nop
 80a23e8:	bf00      	nop
 80a23ea:	bf00      	nop
 80a23ec:	bf00      	nop
 80a23ee:	bf00      	nop
 80a23f0:	bf00      	nop
 80a23f2:	bf00      	nop
 80a23f4:	bf00      	nop
 80a23f6:	bf00      	nop
 80a23f8:	bf00      	nop
 80a23fa:	bf00      	nop
 80a23fc:	bf00      	nop
 80a23fe:	bf00      	nop
 80a2400:	bf00      	nop
 80a2402:	bf00      	nop
 80a2404:	bf00      	nop
 80a2406:	bf00      	nop
 80a2408:	bf00      	nop
 80a240a:	bf00      	nop
 80a240c:	bf00      	nop
 80a240e:	bf00      	nop
 80a2410:	bf00      	nop
 80a2412:	bf00      	nop
 80a2414:	bf00      	nop
 80a2416:	bf00      	nop
 80a2418:	bf00      	nop
 80a241a:	bf00      	nop
 80a241c:	bf00      	nop
 80a241e:	bf00      	nop
 80a2420:	bf00      	nop
 80a2422:	bf00      	nop
 80a2424:	bf00      	nop
 80a2426:	bf00      	nop
 80a2428:	bf00      	nop
 80a242a:	bf00      	nop
 80a242c:	bf00      	nop
 80a242e:	bf00      	nop
 80a2430:	bf00      	nop
 80a2432:	bf00      	nop
 80a2434:	bf00      	nop
 80a2436:	bf00      	nop
 80a2438:	bf00      	nop
 80a243a:	bf00      	nop
 80a243c:	bf00      	nop
 80a243e:	bf00      	nop
 80a2440:	bf00      	nop
 80a2442:	bf00      	nop
 80a2444:	bf00      	nop
 80a2446:	bf00      	nop
 80a2448:	bf00      	nop
 80a244a:	bf00      	nop
 80a244c:	bf00      	nop
 80a244e:	bf00      	nop
 80a2450:	bf00      	nop
 80a2452:	bf00      	nop
 80a2454:	bf00      	nop
 80a2456:	bf00      	nop
 80a2458:	bf00      	nop
 80a245a:	bf00      	nop
 80a245c:	bf00      	nop
 80a245e:	bf00      	nop
 80a2460:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a2462:	79e3      	ldrb	r3, [r4, #7]
 80a2464:	6810      	ldr	r0, [r2, #0]
 80a2466:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a246a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a246e:	88bf      	ldrh	r7, [r7, #4]
 80a2470:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2474:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2476:	4600      	mov	r0, r0
 80a2478:	bf00      	nop
 80a247a:	bf00      	nop
 80a247c:	bf00      	nop
 80a247e:	bf00      	nop
 80a2480:	bf00      	nop
 80a2482:	bf00      	nop
 80a2484:	bf00      	nop
 80a2486:	bf00      	nop
 80a2488:	bf00      	nop
 80a248a:	bf00      	nop
 80a248c:	bf00      	nop
 80a248e:	bf00      	nop
 80a2490:	bf00      	nop
 80a2492:	bf00      	nop
 80a2494:	bf00      	nop
 80a2496:	bf00      	nop
 80a2498:	bf00      	nop
 80a249a:	bf00      	nop
 80a249c:	bf00      	nop
 80a249e:	bf00      	nop
 80a24a0:	bf00      	nop
 80a24a2:	bf00      	nop
 80a24a4:	bf00      	nop
 80a24a6:	bf00      	nop
 80a24a8:	bf00      	nop
 80a24aa:	bf00      	nop
 80a24ac:	bf00      	nop
 80a24ae:	bf00      	nop
 80a24b0:	bf00      	nop
 80a24b2:	bf00      	nop
 80a24b4:	bf00      	nop
 80a24b6:	bf00      	nop
 80a24b8:	bf00      	nop
 80a24ba:	bf00      	nop
 80a24bc:	bf00      	nop
 80a24be:	bf00      	nop
 80a24c0:	bf00      	nop
 80a24c2:	bf00      	nop
 80a24c4:	bf00      	nop
 80a24c6:	bf00      	nop
 80a24c8:	bf00      	nop
 80a24ca:	bf00      	nop
 80a24cc:	bf00      	nop
 80a24ce:	bf00      	nop
 80a24d0:	bf00      	nop
 80a24d2:	bf00      	nop
 80a24d4:	bf00      	nop
 80a24d6:	bf00      	nop
 80a24d8:	bf00      	nop
 80a24da:	bf00      	nop
 80a24dc:	bf00      	nop
 80a24de:	bf00      	nop
 80a24e0:	bf00      	nop
 80a24e2:	bf00      	nop
 80a24e4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a24e6:	9b04      	ldr	r3, [sp, #16]
 80a24e8:	085b      	lsrs	r3, r3, #1
 80a24ea:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a24ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a24f0:	3301      	adds	r3, #1
 80a24f2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a24f4:	2b17      	cmp	r3, #23
 80a24f6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a24fa:	f200 80e3 	bhi.w	80a26c4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a24fe:	79e3      	ldrb	r3, [r4, #7]
 80a2500:	6810      	ldr	r0, [r2, #0]
 80a2502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2506:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a250a:	88bf      	ldrh	r7, [r7, #4]
 80a250c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2510:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2512:	9803      	ldr	r0, [sp, #12]
 80a2514:	9b04      	ldr	r3, [sp, #16]
 80a2516:	4218      	tst	r0, r3
 80a2518:	f47f af12 	bne.w	80a2340 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a251c:	4600      	mov	r0, r0
 80a251e:	bf00      	nop
 80a2520:	bf00      	nop
 80a2522:	bf00      	nop
 80a2524:	bf00      	nop
 80a2526:	bf00      	nop
 80a2528:	bf00      	nop
 80a252a:	bf00      	nop
 80a252c:	bf00      	nop
 80a252e:	bf00      	nop
 80a2530:	bf00      	nop
 80a2532:	bf00      	nop
 80a2534:	bf00      	nop
 80a2536:	bf00      	nop
 80a2538:	bf00      	nop
 80a253a:	bf00      	nop
 80a253c:	bf00      	nop
 80a253e:	bf00      	nop
 80a2540:	bf00      	nop
 80a2542:	bf00      	nop
 80a2544:	bf00      	nop
 80a2546:	bf00      	nop
 80a2548:	bf00      	nop
 80a254a:	bf00      	nop
 80a254c:	bf00      	nop
 80a254e:	bf00      	nop
 80a2550:	bf00      	nop
 80a2552:	bf00      	nop
 80a2554:	bf00      	nop
 80a2556:	bf00      	nop
 80a2558:	bf00      	nop
 80a255a:	bf00      	nop
 80a255c:	bf00      	nop
 80a255e:	bf00      	nop
 80a2560:	bf00      	nop
 80a2562:	bf00      	nop
 80a2564:	bf00      	nop
 80a2566:	bf00      	nop
 80a2568:	bf00      	nop
 80a256a:	bf00      	nop
 80a256c:	bf00      	nop
 80a256e:	bf00      	nop
 80a2570:	bf00      	nop
 80a2572:	bf00      	nop
 80a2574:	bf00      	nop
 80a2576:	bf00      	nop
 80a2578:	bf00      	nop
 80a257a:	bf00      	nop
 80a257c:	bf00      	nop
 80a257e:	bf00      	nop
 80a2580:	bf00      	nop
 80a2582:	bf00      	nop
 80a2584:	bf00      	nop
 80a2586:	bf00      	nop
 80a2588:	bf00      	nop
 80a258a:	bf00      	nop
 80a258c:	bf00      	nop
 80a258e:	bf00      	nop
 80a2590:	bf00      	nop
 80a2592:	bf00      	nop
 80a2594:	bf00      	nop
 80a2596:	bf00      	nop
 80a2598:	bf00      	nop
 80a259a:	bf00      	nop
 80a259c:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a259e:	79e3      	ldrb	r3, [r4, #7]
 80a25a0:	6810      	ldr	r0, [r2, #0]
 80a25a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a25a6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a25aa:	88bf      	ldrh	r7, [r7, #4]
 80a25ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a25b0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a25b2:	4600      	mov	r0, r0
 80a25b4:	bf00      	nop
 80a25b6:	bf00      	nop
 80a25b8:	bf00      	nop
 80a25ba:	bf00      	nop
 80a25bc:	bf00      	nop
 80a25be:	bf00      	nop
 80a25c0:	bf00      	nop
 80a25c2:	bf00      	nop
 80a25c4:	bf00      	nop
 80a25c6:	bf00      	nop
 80a25c8:	bf00      	nop
 80a25ca:	bf00      	nop
 80a25cc:	bf00      	nop
 80a25ce:	bf00      	nop
 80a25d0:	bf00      	nop
 80a25d2:	bf00      	nop
 80a25d4:	bf00      	nop
 80a25d6:	bf00      	nop
 80a25d8:	bf00      	nop
 80a25da:	bf00      	nop
 80a25dc:	bf00      	nop
 80a25de:	bf00      	nop
 80a25e0:	bf00      	nop
 80a25e2:	bf00      	nop
 80a25e4:	bf00      	nop
 80a25e6:	bf00      	nop
 80a25e8:	bf00      	nop
 80a25ea:	bf00      	nop
 80a25ec:	bf00      	nop
 80a25ee:	bf00      	nop
 80a25f0:	bf00      	nop
 80a25f2:	bf00      	nop
 80a25f4:	bf00      	nop
 80a25f6:	bf00      	nop
 80a25f8:	bf00      	nop
 80a25fa:	bf00      	nop
 80a25fc:	bf00      	nop
 80a25fe:	bf00      	nop
 80a2600:	bf00      	nop
 80a2602:	bf00      	nop
 80a2604:	bf00      	nop
 80a2606:	bf00      	nop
 80a2608:	bf00      	nop
 80a260a:	bf00      	nop
 80a260c:	bf00      	nop
 80a260e:	bf00      	nop
 80a2610:	bf00      	nop
 80a2612:	bf00      	nop
 80a2614:	bf00      	nop
 80a2616:	bf00      	nop
 80a2618:	bf00      	nop
 80a261a:	bf00      	nop
 80a261c:	bf00      	nop
 80a261e:	bf00      	nop
 80a2620:	bf00      	nop
 80a2622:	bf00      	nop
 80a2624:	bf00      	nop
 80a2626:	bf00      	nop
 80a2628:	bf00      	nop
 80a262a:	bf00      	nop
 80a262c:	bf00      	nop
 80a262e:	bf00      	nop
 80a2630:	bf00      	nop
 80a2632:	bf00      	nop
 80a2634:	bf00      	nop
 80a2636:	bf00      	nop
 80a2638:	bf00      	nop
 80a263a:	bf00      	nop
 80a263c:	bf00      	nop
 80a263e:	bf00      	nop
 80a2640:	bf00      	nop
 80a2642:	bf00      	nop
 80a2644:	bf00      	nop
 80a2646:	bf00      	nop
 80a2648:	bf00      	nop
 80a264a:	bf00      	nop
 80a264c:	bf00      	nop
 80a264e:	bf00      	nop
 80a2650:	bf00      	nop
 80a2652:	bf00      	nop
 80a2654:	bf00      	nop
 80a2656:	bf00      	nop
 80a2658:	bf00      	nop
 80a265a:	bf00      	nop
 80a265c:	bf00      	nop
 80a265e:	bf00      	nop
 80a2660:	bf00      	nop
 80a2662:	bf00      	nop
 80a2664:	bf00      	nop
 80a2666:	bf00      	nop
 80a2668:	bf00      	nop
 80a266a:	bf00      	nop
 80a266c:	bf00      	nop
 80a266e:	bf00      	nop
 80a2670:	bf00      	nop
 80a2672:	bf00      	nop
 80a2674:	bf00      	nop
 80a2676:	bf00      	nop
 80a2678:	bf00      	nop
 80a267a:	bf00      	nop
 80a267c:	bf00      	nop
 80a267e:	bf00      	nop
 80a2680:	bf00      	nop
 80a2682:	bf00      	nop
 80a2684:	bf00      	nop
 80a2686:	bf00      	nop
 80a2688:	bf00      	nop
 80a268a:	bf00      	nop
 80a268c:	bf00      	nop
 80a268e:	bf00      	nop
 80a2690:	bf00      	nop
 80a2692:	bf00      	nop
 80a2694:	bf00      	nop
 80a2696:	bf00      	nop
 80a2698:	bf00      	nop
 80a269a:	bf00      	nop
 80a269c:	bf00      	nop
 80a269e:	bf00      	nop
 80a26a0:	bf00      	nop
 80a26a2:	bf00      	nop
 80a26a4:	bf00      	nop
 80a26a6:	bf00      	nop
 80a26a8:	bf00      	nop
 80a26aa:	bf00      	nop
 80a26ac:	bf00      	nop
 80a26ae:	bf00      	nop
 80a26b0:	bf00      	nop
 80a26b2:	bf00      	nop
 80a26b4:	bf00      	nop
 80a26b6:	bf00      	nop
 80a26b8:	bf00      	nop
 80a26ba:	bf00      	nop
 80a26bc:	bf00      	nop
 80a26be:	bf00      	nop
 80a26c0:	bf00      	nop
 80a26c2:	e710      	b.n	80a24e6 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a26c4:	468e      	mov	lr, r1
 80a26c6:	e60d      	b.n	80a22e4 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a26c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a26c8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a26ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a26cc:	428b      	cmp	r3, r1
 80a26ce:	d945      	bls.n	80a275c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a26d0:	7a05      	ldrb	r5, [r0, #8]
 80a26d2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a26d6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a26da:	b2d6      	uxtb	r6, r2
 80a26dc:	b145      	cbz	r5, 80a26f0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a26de:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a26e0:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a26e2:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a26e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a26e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a26ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a26f0:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a26f4:	68c7      	ldr	r7, [r0, #12]
 80a26f6:	f1bc 0f06 	cmp.w	ip, #6
 80a26fa:	bf0c      	ite	eq
 80a26fc:	2504      	moveq	r5, #4
 80a26fe:	2503      	movne	r5, #3
 80a2700:	4369      	muls	r1, r5
 80a2702:	f1bc 0f08 	cmp.w	ip, #8
 80a2706:	eb07 0501 	add.w	r5, r7, r1
 80a270a:	d824      	bhi.n	80a2756 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a270c:	f04f 0e01 	mov.w	lr, #1
 80a2710:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a2714:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a2718:	d10c      	bne.n	80a2734 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a271a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a271e:	d10d      	bne.n	80a273c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a2720:	f01e 0f10 	tst.w	lr, #16
 80a2724:	d017      	beq.n	80a2756 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a2726:	2bff      	cmp	r3, #255	; 0xff
 80a2728:	bf08      	it	eq
 80a272a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a272c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a272e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a2730:	70ac      	strb	r4, [r5, #2]
        } break;
 80a2732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2734:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a2736:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a2738:	70ae      	strb	r6, [r5, #2]
        } break;
 80a273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a273c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a273e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a2740:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2742:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2744:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2746:	b90b      	cbnz	r3, 80a274c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2748:	b2d2      	uxtb	r2, r2
 80a274a:	e002      	b.n	80a2752 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a274c:	435a      	muls	r2, r3
 80a274e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a2752:	70ea      	strb	r2, [r5, #3]
        } break;
 80a2754:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a2756:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a2758:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a275a:	70ae      	strb	r6, [r5, #2]
 80a275c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a275e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a275e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a2762:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a2766:	4770      	bx	lr

080a2768 <_ZN17Adafruit_NeoPixel5ColorEhhhh>:

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a2768:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80a276c:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
}
 80a2770:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a2774:	4770      	bx	lr

080a2776 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a2776:	8840      	ldrh	r0, [r0, #2]
 80a2778:	4770      	bx	lr

080a277a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a277a:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a277c:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a277e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a2780:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a2782:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a2784:	d01e      	beq.n	80a27c4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a2786:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2788:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a278c:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a278e:	d00c      	beq.n	80a27aa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2790:	29ff      	cmp	r1, #255	; 0xff
 80a2792:	bf0f      	iteee	eq
 80a2794:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a2798:	0211      	lslne	r1, r2, #8
 80a279a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a279e:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a27a2:	bf0c      	ite	eq
 80a27a4:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a27a8:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a27aa:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a27ac:	1b29      	subs	r1, r5, r4
 80a27ae:	8886      	ldrh	r6, [r0, #4]
 80a27b0:	b289      	uxth	r1, r1
 80a27b2:	428e      	cmp	r6, r1
 80a27b4:	d905      	bls.n	80a27c2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a27b6:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a27b8:	4359      	muls	r1, r3
 80a27ba:	1209      	asrs	r1, r1, #8
 80a27bc:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a27c0:	e7f4      	b.n	80a27ac <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a27c2:	7202      	strb	r2, [r0, #8]
 80a27c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a27c8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a27c8:	b508      	push	{r3, lr}
 80a27ca:	f000 f827 	bl	80a281c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a27ce:	f000 f825 	bl	80a281c <HAL_Pin_Map>
 80a27d2:	4b01      	ldr	r3, [pc, #4]	; (80a27d8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a27d4:	6018      	str	r0, [r3, #0]
 80a27d6:	bd08      	pop	{r3, pc}
 80a27d8:	20000204 	.word	0x20000204

080a27dc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a27dc:	b508      	push	{r3, lr}
 80a27de:	4b02      	ldr	r3, [pc, #8]	; (80a27e8 <os_mutex_create+0xc>)
 80a27e0:	681b      	ldr	r3, [r3, #0]
 80a27e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a27e4:	9301      	str	r3, [sp, #4]
 80a27e6:	bd08      	pop	{r3, pc}
 80a27e8:	080601d0 	.word	0x080601d0

080a27ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a27ec:	b508      	push	{r3, lr}
 80a27ee:	4b02      	ldr	r3, [pc, #8]	; (80a27f8 <HAL_RNG_GetRandomNumber+0xc>)
 80a27f0:	681b      	ldr	r3, [r3, #0]
 80a27f2:	685b      	ldr	r3, [r3, #4]
 80a27f4:	9301      	str	r3, [sp, #4]
 80a27f6:	bd08      	pop	{r3, pc}
 80a27f8:	0806019c 	.word	0x0806019c

080a27fc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a27fc:	b508      	push	{r3, lr}
 80a27fe:	4b02      	ldr	r3, [pc, #8]	; (80a2808 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2800:	681b      	ldr	r3, [r3, #0]
 80a2802:	691b      	ldr	r3, [r3, #16]
 80a2804:	9301      	str	r3, [sp, #4]
 80a2806:	bd08      	pop	{r3, pc}
 80a2808:	0806019c 	.word	0x0806019c

080a280c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a280c:	b508      	push	{r3, lr}
 80a280e:	4b02      	ldr	r3, [pc, #8]	; (80a2818 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2810:	681b      	ldr	r3, [r3, #0]
 80a2812:	695b      	ldr	r3, [r3, #20]
 80a2814:	9301      	str	r3, [sp, #4]
 80a2816:	bd08      	pop	{r3, pc}
 80a2818:	0806019c 	.word	0x0806019c

080a281c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a281c:	b508      	push	{r3, lr}
 80a281e:	4b02      	ldr	r3, [pc, #8]	; (80a2828 <HAL_Pin_Map+0xc>)
 80a2820:	681b      	ldr	r3, [r3, #0]
 80a2822:	681b      	ldr	r3, [r3, #0]
 80a2824:	9301      	str	r3, [sp, #4]
 80a2826:	bd08      	pop	{r3, pc}
 80a2828:	080601b0 	.word	0x080601b0

080a282c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a282c:	b508      	push	{r3, lr}
 80a282e:	4b02      	ldr	r3, [pc, #8]	; (80a2838 <HAL_Pin_Mode+0xc>)
 80a2830:	681b      	ldr	r3, [r3, #0]
 80a2832:	689b      	ldr	r3, [r3, #8]
 80a2834:	9301      	str	r3, [sp, #4]
 80a2836:	bd08      	pop	{r3, pc}
 80a2838:	080601b0 	.word	0x080601b0

080a283c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a283c:	b508      	push	{r3, lr}
 80a283e:	4b02      	ldr	r3, [pc, #8]	; (80a2848 <HAL_Get_Pin_Mode+0xc>)
 80a2840:	681b      	ldr	r3, [r3, #0]
 80a2842:	68db      	ldr	r3, [r3, #12]
 80a2844:	9301      	str	r3, [sp, #4]
 80a2846:	bd08      	pop	{r3, pc}
 80a2848:	080601b0 	.word	0x080601b0

080a284c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a284c:	b508      	push	{r3, lr}
 80a284e:	4b02      	ldr	r3, [pc, #8]	; (80a2858 <HAL_GPIO_Write+0xc>)
 80a2850:	681b      	ldr	r3, [r3, #0]
 80a2852:	691b      	ldr	r3, [r3, #16]
 80a2854:	9301      	str	r3, [sp, #4]
 80a2856:	bd08      	pop	{r3, pc}
 80a2858:	080601b0 	.word	0x080601b0

080a285c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a285c:	b508      	push	{r3, lr}
 80a285e:	4b02      	ldr	r3, [pc, #8]	; (80a2868 <HAL_I2C_Begin+0xc>)
 80a2860:	681b      	ldr	r3, [r3, #0]
 80a2862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2864:	9301      	str	r3, [sp, #4]
 80a2866:	bd08      	pop	{r3, pc}
 80a2868:	080601ac 	.word	0x080601ac

080a286c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a286c:	b508      	push	{r3, lr}
 80a286e:	4b02      	ldr	r3, [pc, #8]	; (80a2878 <HAL_I2C_Request_Data+0xc>)
 80a2870:	681b      	ldr	r3, [r3, #0]
 80a2872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2874:	9301      	str	r3, [sp, #4]
 80a2876:	bd08      	pop	{r3, pc}
 80a2878:	080601ac 	.word	0x080601ac

080a287c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a287c:	b508      	push	{r3, lr}
 80a287e:	4b02      	ldr	r3, [pc, #8]	; (80a2888 <HAL_I2C_Begin_Transmission+0xc>)
 80a2880:	681b      	ldr	r3, [r3, #0]
 80a2882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2884:	9301      	str	r3, [sp, #4]
 80a2886:	bd08      	pop	{r3, pc}
 80a2888:	080601ac 	.word	0x080601ac

080a288c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a288c:	b508      	push	{r3, lr}
 80a288e:	4b02      	ldr	r3, [pc, #8]	; (80a2898 <HAL_I2C_End_Transmission+0xc>)
 80a2890:	681b      	ldr	r3, [r3, #0]
 80a2892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2894:	9301      	str	r3, [sp, #4]
 80a2896:	bd08      	pop	{r3, pc}
 80a2898:	080601ac 	.word	0x080601ac

080a289c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a289c:	b508      	push	{r3, lr}
 80a289e:	4b02      	ldr	r3, [pc, #8]	; (80a28a8 <HAL_I2C_Write_Data+0xc>)
 80a28a0:	681b      	ldr	r3, [r3, #0]
 80a28a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a28a4:	9301      	str	r3, [sp, #4]
 80a28a6:	bd08      	pop	{r3, pc}
 80a28a8:	080601ac 	.word	0x080601ac

080a28ac <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a28ac:	b508      	push	{r3, lr}
 80a28ae:	4b02      	ldr	r3, [pc, #8]	; (80a28b8 <HAL_I2C_Available_Data+0xc>)
 80a28b0:	681b      	ldr	r3, [r3, #0]
 80a28b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a28b4:	9301      	str	r3, [sp, #4]
 80a28b6:	bd08      	pop	{r3, pc}
 80a28b8:	080601ac 	.word	0x080601ac

080a28bc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a28bc:	b508      	push	{r3, lr}
 80a28be:	4b02      	ldr	r3, [pc, #8]	; (80a28c8 <HAL_I2C_Read_Data+0xc>)
 80a28c0:	681b      	ldr	r3, [r3, #0]
 80a28c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a28c4:	9301      	str	r3, [sp, #4]
 80a28c6:	bd08      	pop	{r3, pc}
 80a28c8:	080601ac 	.word	0x080601ac

080a28cc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a28cc:	b508      	push	{r3, lr}
 80a28ce:	4b02      	ldr	r3, [pc, #8]	; (80a28d8 <HAL_I2C_Peek_Data+0xc>)
 80a28d0:	681b      	ldr	r3, [r3, #0]
 80a28d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a28d4:	9301      	str	r3, [sp, #4]
 80a28d6:	bd08      	pop	{r3, pc}
 80a28d8:	080601ac 	.word	0x080601ac

080a28dc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a28dc:	b508      	push	{r3, lr}
 80a28de:	4b02      	ldr	r3, [pc, #8]	; (80a28e8 <HAL_I2C_Flush_Data+0xc>)
 80a28e0:	681b      	ldr	r3, [r3, #0]
 80a28e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a28e4:	9301      	str	r3, [sp, #4]
 80a28e6:	bd08      	pop	{r3, pc}
 80a28e8:	080601ac 	.word	0x080601ac

080a28ec <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a28ec:	b508      	push	{r3, lr}
 80a28ee:	4b02      	ldr	r3, [pc, #8]	; (80a28f8 <HAL_I2C_Is_Enabled+0xc>)
 80a28f0:	681b      	ldr	r3, [r3, #0]
 80a28f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a28f4:	9301      	str	r3, [sp, #4]
 80a28f6:	bd08      	pop	{r3, pc}
 80a28f8:	080601ac 	.word	0x080601ac

080a28fc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a28fc:	b508      	push	{r3, lr}
 80a28fe:	4b03      	ldr	r3, [pc, #12]	; (80a290c <HAL_I2C_Init+0x10>)
 80a2900:	681b      	ldr	r3, [r3, #0]
 80a2902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2906:	9301      	str	r3, [sp, #4]
 80a2908:	bd08      	pop	{r3, pc}
 80a290a:	0000      	.short	0x0000
 80a290c:	080601ac 	.word	0x080601ac

080a2910 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2910:	b508      	push	{r3, lr}
 80a2912:	4b02      	ldr	r3, [pc, #8]	; (80a291c <socket_handle_valid+0xc>)
 80a2914:	681b      	ldr	r3, [r3, #0]
 80a2916:	685b      	ldr	r3, [r3, #4]
 80a2918:	9301      	str	r3, [sp, #4]
 80a291a:	bd08      	pop	{r3, pc}
 80a291c:	080601bc 	.word	0x080601bc

080a2920 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2920:	b508      	push	{r3, lr}
 80a2922:	4b02      	ldr	r3, [pc, #8]	; (80a292c <socket_create+0xc>)
 80a2924:	681b      	ldr	r3, [r3, #0]
 80a2926:	689b      	ldr	r3, [r3, #8]
 80a2928:	9301      	str	r3, [sp, #4]
 80a292a:	bd08      	pop	{r3, pc}
 80a292c:	080601bc 	.word	0x080601bc

080a2930 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a2930:	b508      	push	{r3, lr}
 80a2932:	4b02      	ldr	r3, [pc, #8]	; (80a293c <socket_receivefrom+0xc>)
 80a2934:	681b      	ldr	r3, [r3, #0]
 80a2936:	695b      	ldr	r3, [r3, #20]
 80a2938:	9301      	str	r3, [sp, #4]
 80a293a:	bd08      	pop	{r3, pc}
 80a293c:	080601bc 	.word	0x080601bc

080a2940 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a2940:	b508      	push	{r3, lr}
 80a2942:	4b02      	ldr	r3, [pc, #8]	; (80a294c <socket_sendto+0xc>)
 80a2944:	681b      	ldr	r3, [r3, #0]
 80a2946:	69db      	ldr	r3, [r3, #28]
 80a2948:	9301      	str	r3, [sp, #4]
 80a294a:	bd08      	pop	{r3, pc}
 80a294c:	080601bc 	.word	0x080601bc

080a2950 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2950:	b508      	push	{r3, lr}
 80a2952:	4b02      	ldr	r3, [pc, #8]	; (80a295c <socket_close+0xc>)
 80a2954:	681b      	ldr	r3, [r3, #0]
 80a2956:	6a1b      	ldr	r3, [r3, #32]
 80a2958:	9301      	str	r3, [sp, #4]
 80a295a:	bd08      	pop	{r3, pc}
 80a295c:	080601bc 	.word	0x080601bc

080a2960 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2960:	b508      	push	{r3, lr}
 80a2962:	4b02      	ldr	r3, [pc, #8]	; (80a296c <socket_handle_invalid+0xc>)
 80a2964:	681b      	ldr	r3, [r3, #0]
 80a2966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2968:	9301      	str	r3, [sp, #4]
 80a296a:	bd08      	pop	{r3, pc}
 80a296c:	080601bc 	.word	0x080601bc

080a2970 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2970:	b508      	push	{r3, lr}
 80a2972:	4b02      	ldr	r3, [pc, #8]	; (80a297c <HAL_SPI_Begin+0xc>)
 80a2974:	681b      	ldr	r3, [r3, #0]
 80a2976:	681b      	ldr	r3, [r3, #0]
 80a2978:	9301      	str	r3, [sp, #4]
 80a297a:	bd08      	pop	{r3, pc}
 80a297c:	080601b4 	.word	0x080601b4

080a2980 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2980:	b508      	push	{r3, lr}
 80a2982:	4b02      	ldr	r3, [pc, #8]	; (80a298c <HAL_SPI_Set_Bit_Order+0xc>)
 80a2984:	681b      	ldr	r3, [r3, #0]
 80a2986:	689b      	ldr	r3, [r3, #8]
 80a2988:	9301      	str	r3, [sp, #4]
 80a298a:	bd08      	pop	{r3, pc}
 80a298c:	080601b4 	.word	0x080601b4

080a2990 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a2990:	b508      	push	{r3, lr}
 80a2992:	4b02      	ldr	r3, [pc, #8]	; (80a299c <HAL_SPI_Set_Data_Mode+0xc>)
 80a2994:	681b      	ldr	r3, [r3, #0]
 80a2996:	68db      	ldr	r3, [r3, #12]
 80a2998:	9301      	str	r3, [sp, #4]
 80a299a:	bd08      	pop	{r3, pc}
 80a299c:	080601b4 	.word	0x080601b4

080a29a0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a29a0:	b508      	push	{r3, lr}
 80a29a2:	4b02      	ldr	r3, [pc, #8]	; (80a29ac <HAL_SPI_Set_Clock_Divider+0xc>)
 80a29a4:	681b      	ldr	r3, [r3, #0]
 80a29a6:	691b      	ldr	r3, [r3, #16]
 80a29a8:	9301      	str	r3, [sp, #4]
 80a29aa:	bd08      	pop	{r3, pc}
 80a29ac:	080601b4 	.word	0x080601b4

080a29b0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a29b0:	b508      	push	{r3, lr}
 80a29b2:	4b02      	ldr	r3, [pc, #8]	; (80a29bc <HAL_SPI_Send_Receive_Data+0xc>)
 80a29b4:	681b      	ldr	r3, [r3, #0]
 80a29b6:	695b      	ldr	r3, [r3, #20]
 80a29b8:	9301      	str	r3, [sp, #4]
 80a29ba:	bd08      	pop	{r3, pc}
 80a29bc:	080601b4 	.word	0x080601b4

080a29c0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a29c0:	b508      	push	{r3, lr}
 80a29c2:	4b02      	ldr	r3, [pc, #8]	; (80a29cc <HAL_SPI_Init+0xc>)
 80a29c4:	681b      	ldr	r3, [r3, #0]
 80a29c6:	69db      	ldr	r3, [r3, #28]
 80a29c8:	9301      	str	r3, [sp, #4]
 80a29ca:	bd08      	pop	{r3, pc}
 80a29cc:	080601b4 	.word	0x080601b4

080a29d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a29d0:	b508      	push	{r3, lr}
 80a29d2:	4b02      	ldr	r3, [pc, #8]	; (80a29dc <HAL_SPI_Is_Enabled+0xc>)
 80a29d4:	681b      	ldr	r3, [r3, #0]
 80a29d6:	6a1b      	ldr	r3, [r3, #32]
 80a29d8:	9301      	str	r3, [sp, #4]
 80a29da:	bd08      	pop	{r3, pc}
 80a29dc:	080601b4 	.word	0x080601b4

080a29e0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a29e0:	b508      	push	{r3, lr}
 80a29e2:	4b02      	ldr	r3, [pc, #8]	; (80a29ec <HAL_SPI_Info+0xc>)
 80a29e4:	681b      	ldr	r3, [r3, #0]
 80a29e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a29e8:	9301      	str	r3, [sp, #4]
 80a29ea:	bd08      	pop	{r3, pc}
 80a29ec:	080601b4 	.word	0x080601b4

080a29f0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a29f0:	b508      	push	{r3, lr}
 80a29f2:	4b02      	ldr	r3, [pc, #8]	; (80a29fc <HAL_USART_Init+0xc>)
 80a29f4:	681b      	ldr	r3, [r3, #0]
 80a29f6:	699b      	ldr	r3, [r3, #24]
 80a29f8:	9301      	str	r3, [sp, #4]
 80a29fa:	bd08      	pop	{r3, pc}
 80a29fc:	080601c4 	.word	0x080601c4

080a2a00 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2a00:	b508      	push	{r3, lr}
 80a2a02:	4b02      	ldr	r3, [pc, #8]	; (80a2a0c <HAL_USART_Write_Data+0xc>)
 80a2a04:	681b      	ldr	r3, [r3, #0]
 80a2a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2a08:	9301      	str	r3, [sp, #4]
 80a2a0a:	bd08      	pop	{r3, pc}
 80a2a0c:	080601c4 	.word	0x080601c4

080a2a10 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2a10:	b508      	push	{r3, lr}
 80a2a12:	4b02      	ldr	r3, [pc, #8]	; (80a2a1c <HAL_USART_Available_Data+0xc>)
 80a2a14:	681b      	ldr	r3, [r3, #0]
 80a2a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2a18:	9301      	str	r3, [sp, #4]
 80a2a1a:	bd08      	pop	{r3, pc}
 80a2a1c:	080601c4 	.word	0x080601c4

080a2a20 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2a20:	b508      	push	{r3, lr}
 80a2a22:	4b02      	ldr	r3, [pc, #8]	; (80a2a2c <HAL_USART_Read_Data+0xc>)
 80a2a24:	681b      	ldr	r3, [r3, #0]
 80a2a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2a28:	9301      	str	r3, [sp, #4]
 80a2a2a:	bd08      	pop	{r3, pc}
 80a2a2c:	080601c4 	.word	0x080601c4

080a2a30 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2a30:	b508      	push	{r3, lr}
 80a2a32:	4b02      	ldr	r3, [pc, #8]	; (80a2a3c <HAL_USART_Peek_Data+0xc>)
 80a2a34:	681b      	ldr	r3, [r3, #0]
 80a2a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2a38:	9301      	str	r3, [sp, #4]
 80a2a3a:	bd08      	pop	{r3, pc}
 80a2a3c:	080601c4 	.word	0x080601c4

080a2a40 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2a40:	b508      	push	{r3, lr}
 80a2a42:	4b02      	ldr	r3, [pc, #8]	; (80a2a4c <HAL_USART_Flush_Data+0xc>)
 80a2a44:	681b      	ldr	r3, [r3, #0]
 80a2a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2a48:	9301      	str	r3, [sp, #4]
 80a2a4a:	bd08      	pop	{r3, pc}
 80a2a4c:	080601c4 	.word	0x080601c4

080a2a50 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2a50:	b508      	push	{r3, lr}
 80a2a52:	4b02      	ldr	r3, [pc, #8]	; (80a2a5c <HAL_USART_Is_Enabled+0xc>)
 80a2a54:	681b      	ldr	r3, [r3, #0]
 80a2a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2a58:	9301      	str	r3, [sp, #4]
 80a2a5a:	bd08      	pop	{r3, pc}
 80a2a5c:	080601c4 	.word	0x080601c4

080a2a60 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2a60:	b508      	push	{r3, lr}
 80a2a62:	4b02      	ldr	r3, [pc, #8]	; (80a2a6c <HAL_USART_Available_Data_For_Write+0xc>)
 80a2a64:	681b      	ldr	r3, [r3, #0]
 80a2a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2a68:	9301      	str	r3, [sp, #4]
 80a2a6a:	bd08      	pop	{r3, pc}
 80a2a6c:	080601c4 	.word	0x080601c4

080a2a70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2a70:	b508      	push	{r3, lr}
 80a2a72:	4b02      	ldr	r3, [pc, #8]	; (80a2a7c <HAL_USB_USART_Init+0xc>)
 80a2a74:	681b      	ldr	r3, [r3, #0]
 80a2a76:	681b      	ldr	r3, [r3, #0]
 80a2a78:	9301      	str	r3, [sp, #4]
 80a2a7a:	bd08      	pop	{r3, pc}
 80a2a7c:	080601d8 	.word	0x080601d8

080a2a80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2a80:	b508      	push	{r3, lr}
 80a2a82:	4b02      	ldr	r3, [pc, #8]	; (80a2a8c <HAL_USB_USART_Begin+0xc>)
 80a2a84:	681b      	ldr	r3, [r3, #0]
 80a2a86:	685b      	ldr	r3, [r3, #4]
 80a2a88:	9301      	str	r3, [sp, #4]
 80a2a8a:	bd08      	pop	{r3, pc}
 80a2a8c:	080601d8 	.word	0x080601d8

080a2a90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2a90:	b508      	push	{r3, lr}
 80a2a92:	4b02      	ldr	r3, [pc, #8]	; (80a2a9c <HAL_USB_USART_Available_Data+0xc>)
 80a2a94:	681b      	ldr	r3, [r3, #0]
 80a2a96:	691b      	ldr	r3, [r3, #16]
 80a2a98:	9301      	str	r3, [sp, #4]
 80a2a9a:	bd08      	pop	{r3, pc}
 80a2a9c:	080601d8 	.word	0x080601d8

080a2aa0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2aa0:	b508      	push	{r3, lr}
 80a2aa2:	4b02      	ldr	r3, [pc, #8]	; (80a2aac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2aa4:	681b      	ldr	r3, [r3, #0]
 80a2aa6:	695b      	ldr	r3, [r3, #20]
 80a2aa8:	9301      	str	r3, [sp, #4]
 80a2aaa:	bd08      	pop	{r3, pc}
 80a2aac:	080601d8 	.word	0x080601d8

080a2ab0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2ab0:	b508      	push	{r3, lr}
 80a2ab2:	4b02      	ldr	r3, [pc, #8]	; (80a2abc <HAL_USB_USART_Receive_Data+0xc>)
 80a2ab4:	681b      	ldr	r3, [r3, #0]
 80a2ab6:	699b      	ldr	r3, [r3, #24]
 80a2ab8:	9301      	str	r3, [sp, #4]
 80a2aba:	bd08      	pop	{r3, pc}
 80a2abc:	080601d8 	.word	0x080601d8

080a2ac0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2ac0:	b508      	push	{r3, lr}
 80a2ac2:	4b02      	ldr	r3, [pc, #8]	; (80a2acc <HAL_USB_USART_Send_Data+0xc>)
 80a2ac4:	681b      	ldr	r3, [r3, #0]
 80a2ac6:	69db      	ldr	r3, [r3, #28]
 80a2ac8:	9301      	str	r3, [sp, #4]
 80a2aca:	bd08      	pop	{r3, pc}
 80a2acc:	080601d8 	.word	0x080601d8

080a2ad0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2ad0:	b508      	push	{r3, lr}
 80a2ad2:	4b02      	ldr	r3, [pc, #8]	; (80a2adc <HAL_USB_USART_Flush_Data+0xc>)
 80a2ad4:	681b      	ldr	r3, [r3, #0]
 80a2ad6:	6a1b      	ldr	r3, [r3, #32]
 80a2ad8:	9301      	str	r3, [sp, #4]
 80a2ada:	bd08      	pop	{r3, pc}
 80a2adc:	080601d8 	.word	0x080601d8

080a2ae0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a2ae0:	b508      	push	{r3, lr}
 80a2ae2:	4b02      	ldr	r3, [pc, #8]	; (80a2aec <HAL_USB_USART_Is_Enabled+0xc>)
 80a2ae4:	681b      	ldr	r3, [r3, #0]
 80a2ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2ae8:	9301      	str	r3, [sp, #4]
 80a2aea:	bd08      	pop	{r3, pc}
 80a2aec:	080601d8 	.word	0x080601d8

080a2af0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2af0:	b508      	push	{r3, lr}
 80a2af2:	4b02      	ldr	r3, [pc, #8]	; (80a2afc <inet_gethostbyname+0xc>)
 80a2af4:	681b      	ldr	r3, [r3, #0]
 80a2af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2af8:	9301      	str	r3, [sp, #4]
 80a2afa:	bd08      	pop	{r3, pc}
 80a2afc:	080601c0 	.word	0x080601c0

080a2b00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2b00:	b508      	push	{r3, lr}
 80a2b02:	4b02      	ldr	r3, [pc, #8]	; (80a2b0c <set_system_mode+0xc>)
 80a2b04:	681b      	ldr	r3, [r3, #0]
 80a2b06:	685b      	ldr	r3, [r3, #4]
 80a2b08:	9301      	str	r3, [sp, #4]
 80a2b0a:	bd08      	pop	{r3, pc}
 80a2b0c:	080601a4 	.word	0x080601a4

080a2b10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2b10:	b508      	push	{r3, lr}
 80a2b12:	4b02      	ldr	r3, [pc, #8]	; (80a2b1c <system_delay_ms+0xc>)
 80a2b14:	681b      	ldr	r3, [r3, #0]
 80a2b16:	695b      	ldr	r3, [r3, #20]
 80a2b18:	9301      	str	r3, [sp, #4]
 80a2b1a:	bd08      	pop	{r3, pc}
 80a2b1c:	080601a4 	.word	0x080601a4

080a2b20 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2b20:	b508      	push	{r3, lr}
 80a2b22:	4b02      	ldr	r3, [pc, #8]	; (80a2b2c <system_thread_set_state+0xc>)
 80a2b24:	681b      	ldr	r3, [r3, #0]
 80a2b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2b28:	9301      	str	r3, [sp, #4]
 80a2b2a:	bd08      	pop	{r3, pc}
 80a2b2c:	080601a4 	.word	0x080601a4

080a2b30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2b30:	b508      	push	{r3, lr}
 80a2b32:	4b03      	ldr	r3, [pc, #12]	; (80a2b40 <system_ctrl_set_app_request_handler+0x10>)
 80a2b34:	681b      	ldr	r3, [r3, #0]
 80a2b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2b3a:	9301      	str	r3, [sp, #4]
 80a2b3c:	bd08      	pop	{r3, pc}
 80a2b3e:	0000      	.short	0x0000
 80a2b40:	080601a4 	.word	0x080601a4

080a2b44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2b44:	b508      	push	{r3, lr}
 80a2b46:	4b03      	ldr	r3, [pc, #12]	; (80a2b54 <system_ctrl_set_result+0x10>)
 80a2b48:	681b      	ldr	r3, [r3, #0]
 80a2b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2b4e:	9301      	str	r3, [sp, #4]
 80a2b50:	bd08      	pop	{r3, pc}
 80a2b52:	0000      	.short	0x0000
 80a2b54:	080601a4 	.word	0x080601a4

080a2b58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2b58:	b508      	push	{r3, lr}
 80a2b5a:	4b02      	ldr	r3, [pc, #8]	; (80a2b64 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2b5c:	681b      	ldr	r3, [r3, #0]
 80a2b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2b60:	9301      	str	r3, [sp, #4]
 80a2b62:	bd08      	pop	{r3, pc}
 80a2b64:	080601cc 	.word	0x080601cc

080a2b68 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a2b68:	b508      	push	{r3, lr}
 80a2b6a:	4b02      	ldr	r3, [pc, #8]	; (80a2b74 <network_config+0xc>)
 80a2b6c:	681b      	ldr	r3, [r3, #0]
 80a2b6e:	681b      	ldr	r3, [r3, #0]
 80a2b70:	9301      	str	r3, [sp, #4]
 80a2b72:	bd08      	pop	{r3, pc}
 80a2b74:	080601c8 	.word	0x080601c8

080a2b78 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2b78:	b508      	push	{r3, lr}
 80a2b7a:	4b02      	ldr	r3, [pc, #8]	; (80a2b84 <network_connect+0xc>)
 80a2b7c:	681b      	ldr	r3, [r3, #0]
 80a2b7e:	685b      	ldr	r3, [r3, #4]
 80a2b80:	9301      	str	r3, [sp, #4]
 80a2b82:	bd08      	pop	{r3, pc}
 80a2b84:	080601c8 	.word	0x080601c8

080a2b88 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2b88:	b508      	push	{r3, lr}
 80a2b8a:	4b02      	ldr	r3, [pc, #8]	; (80a2b94 <network_connecting+0xc>)
 80a2b8c:	681b      	ldr	r3, [r3, #0]
 80a2b8e:	689b      	ldr	r3, [r3, #8]
 80a2b90:	9301      	str	r3, [sp, #4]
 80a2b92:	bd08      	pop	{r3, pc}
 80a2b94:	080601c8 	.word	0x080601c8

080a2b98 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2b98:	b508      	push	{r3, lr}
 80a2b9a:	4b02      	ldr	r3, [pc, #8]	; (80a2ba4 <network_disconnect+0xc>)
 80a2b9c:	681b      	ldr	r3, [r3, #0]
 80a2b9e:	68db      	ldr	r3, [r3, #12]
 80a2ba0:	9301      	str	r3, [sp, #4]
 80a2ba2:	bd08      	pop	{r3, pc}
 80a2ba4:	080601c8 	.word	0x080601c8

080a2ba8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2ba8:	b508      	push	{r3, lr}
 80a2baa:	4b02      	ldr	r3, [pc, #8]	; (80a2bb4 <network_ready+0xc>)
 80a2bac:	681b      	ldr	r3, [r3, #0]
 80a2bae:	691b      	ldr	r3, [r3, #16]
 80a2bb0:	9301      	str	r3, [sp, #4]
 80a2bb2:	bd08      	pop	{r3, pc}
 80a2bb4:	080601c8 	.word	0x080601c8

080a2bb8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2bb8:	b508      	push	{r3, lr}
 80a2bba:	4b02      	ldr	r3, [pc, #8]	; (80a2bc4 <network_on+0xc>)
 80a2bbc:	681b      	ldr	r3, [r3, #0]
 80a2bbe:	695b      	ldr	r3, [r3, #20]
 80a2bc0:	9301      	str	r3, [sp, #4]
 80a2bc2:	bd08      	pop	{r3, pc}
 80a2bc4:	080601c8 	.word	0x080601c8

080a2bc8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2bc8:	b508      	push	{r3, lr}
 80a2bca:	4b02      	ldr	r3, [pc, #8]	; (80a2bd4 <network_off+0xc>)
 80a2bcc:	681b      	ldr	r3, [r3, #0]
 80a2bce:	699b      	ldr	r3, [r3, #24]
 80a2bd0:	9301      	str	r3, [sp, #4]
 80a2bd2:	bd08      	pop	{r3, pc}
 80a2bd4:	080601c8 	.word	0x080601c8

080a2bd8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2bd8:	b508      	push	{r3, lr}
 80a2bda:	4b02      	ldr	r3, [pc, #8]	; (80a2be4 <network_listen+0xc>)
 80a2bdc:	681b      	ldr	r3, [r3, #0]
 80a2bde:	69db      	ldr	r3, [r3, #28]
 80a2be0:	9301      	str	r3, [sp, #4]
 80a2be2:	bd08      	pop	{r3, pc}
 80a2be4:	080601c8 	.word	0x080601c8

080a2be8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2be8:	b508      	push	{r3, lr}
 80a2bea:	4b02      	ldr	r3, [pc, #8]	; (80a2bf4 <network_listening+0xc>)
 80a2bec:	681b      	ldr	r3, [r3, #0]
 80a2bee:	6a1b      	ldr	r3, [r3, #32]
 80a2bf0:	9301      	str	r3, [sp, #4]
 80a2bf2:	bd08      	pop	{r3, pc}
 80a2bf4:	080601c8 	.word	0x080601c8

080a2bf8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2bf8:	b508      	push	{r3, lr}
 80a2bfa:	4b02      	ldr	r3, [pc, #8]	; (80a2c04 <network_set_listen_timeout+0xc>)
 80a2bfc:	681b      	ldr	r3, [r3, #0]
 80a2bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2c00:	9301      	str	r3, [sp, #4]
 80a2c02:	bd08      	pop	{r3, pc}
 80a2c04:	080601c8 	.word	0x080601c8

080a2c08 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2c08:	b508      	push	{r3, lr}
 80a2c0a:	4b02      	ldr	r3, [pc, #8]	; (80a2c14 <network_get_listen_timeout+0xc>)
 80a2c0c:	681b      	ldr	r3, [r3, #0]
 80a2c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2c10:	9301      	str	r3, [sp, #4]
 80a2c12:	bd08      	pop	{r3, pc}
 80a2c14:	080601c8 	.word	0x080601c8

080a2c18 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a2c18:	b508      	push	{r3, lr}
 80a2c1a:	4b02      	ldr	r3, [pc, #8]	; (80a2c24 <network_set_hostname+0xc>)
 80a2c1c:	681b      	ldr	r3, [r3, #0]
 80a2c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2c20:	9301      	str	r3, [sp, #4]
 80a2c22:	bd08      	pop	{r3, pc}
 80a2c24:	080601c8 	.word	0x080601c8

080a2c28 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a2c28:	b508      	push	{r3, lr}
 80a2c2a:	4b02      	ldr	r3, [pc, #8]	; (80a2c34 <network_get_hostname+0xc>)
 80a2c2c:	681b      	ldr	r3, [r3, #0]
 80a2c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2c30:	9301      	str	r3, [sp, #4]
 80a2c32:	bd08      	pop	{r3, pc}
 80a2c34:	080601c8 	.word	0x080601c8

080a2c38 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2c38:	b508      	push	{r3, lr}
 80a2c3a:	4b02      	ldr	r3, [pc, #8]	; (80a2c44 <malloc+0xc>)
 80a2c3c:	681b      	ldr	r3, [r3, #0]
 80a2c3e:	681b      	ldr	r3, [r3, #0]
 80a2c40:	9301      	str	r3, [sp, #4]
 80a2c42:	bd08      	pop	{r3, pc}
 80a2c44:	080601a0 	.word	0x080601a0

080a2c48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2c48:	b508      	push	{r3, lr}
 80a2c4a:	4b02      	ldr	r3, [pc, #8]	; (80a2c54 <free+0xc>)
 80a2c4c:	681b      	ldr	r3, [r3, #0]
 80a2c4e:	685b      	ldr	r3, [r3, #4]
 80a2c50:	9301      	str	r3, [sp, #4]
 80a2c52:	bd08      	pop	{r3, pc}
 80a2c54:	080601a0 	.word	0x080601a0

080a2c58 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2c58:	b508      	push	{r3, lr}
 80a2c5a:	4b02      	ldr	r3, [pc, #8]	; (80a2c64 <realloc+0xc>)
 80a2c5c:	681b      	ldr	r3, [r3, #0]
 80a2c5e:	689b      	ldr	r3, [r3, #8]
 80a2c60:	9301      	str	r3, [sp, #4]
 80a2c62:	bd08      	pop	{r3, pc}
 80a2c64:	080601a0 	.word	0x080601a0

080a2c68 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2c68:	2100      	movs	r1, #0
 80a2c6a:	f7ff bf51 	b.w	80a2b10 <system_delay_ms>

080a2c6e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2c6e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2c70:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2c72:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2c74:	b113      	cbz	r3, 80a2c7c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2c76:	2203      	movs	r2, #3
 80a2c78:	4601      	mov	r1, r0
 80a2c7a:	4798      	blx	r3
    }
 80a2c7c:	4620      	mov	r0, r4
 80a2c7e:	bd10      	pop	{r4, pc}

080a2c80 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2c80:	4770      	bx	lr

080a2c82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c84:	4606      	mov	r6, r0
 80a2c86:	4615      	mov	r5, r2
 80a2c88:	460c      	mov	r4, r1
 80a2c8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2c8c:	42bc      	cmp	r4, r7
 80a2c8e:	d006      	beq.n	80a2c9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2c90:	6833      	ldr	r3, [r6, #0]
 80a2c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2c96:	689b      	ldr	r3, [r3, #8]
 80a2c98:	4630      	mov	r0, r6
 80a2c9a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2c9c:	e7f6      	b.n	80a2c8c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2c9e:	4628      	mov	r0, r5
 80a2ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2ca2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2ca2:	2200      	movs	r2, #0
 80a2ca4:	7c00      	ldrb	r0, [r0, #16]
 80a2ca6:	f7ff bdf9 	b.w	80a289c <HAL_I2C_Write_Data>

080a2caa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2caa:	2100      	movs	r1, #0
 80a2cac:	7c00      	ldrb	r0, [r0, #16]
 80a2cae:	f7ff bdfd 	b.w	80a28ac <HAL_I2C_Available_Data>

080a2cb2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2cb2:	2100      	movs	r1, #0
 80a2cb4:	7c00      	ldrb	r0, [r0, #16]
 80a2cb6:	f7ff be01 	b.w	80a28bc <HAL_I2C_Read_Data>

080a2cba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2cba:	2100      	movs	r1, #0
 80a2cbc:	7c00      	ldrb	r0, [r0, #16]
 80a2cbe:	f7ff be05 	b.w	80a28cc <HAL_I2C_Peek_Data>

080a2cc2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2cc2:	2100      	movs	r1, #0
 80a2cc4:	7c00      	ldrb	r0, [r0, #16]
 80a2cc6:	f7ff be09 	b.w	80a28dc <HAL_I2C_Flush_Data>

080a2cca <_ZN7TwoWireD0Ev>:
 80a2cca:	b510      	push	{r4, lr}
 80a2ccc:	4604      	mov	r4, r0
 80a2cce:	2114      	movs	r1, #20
 80a2cd0:	f001 f895 	bl	80a3dfe <_ZdlPvj>
 80a2cd4:	4620      	mov	r0, r4
 80a2cd6:	bd10      	pop	{r4, pc}

080a2cd8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2cd8:	b510      	push	{r4, lr}
 80a2cda:	4604      	mov	r4, r0
 80a2cdc:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2ce2:	60a3      	str	r3, [r4, #8]
 80a2ce4:	4b04      	ldr	r3, [pc, #16]	; (80a2cf8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2ce6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2ce8:	7420      	strb	r0, [r4, #16]
 80a2cea:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2cec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2cee:	f7ff fe05 	bl	80a28fc <HAL_I2C_Init>

}
 80a2cf2:	4620      	mov	r0, r4
 80a2cf4:	bd10      	pop	{r4, pc}
 80a2cf6:	bf00      	nop
 80a2cf8:	080a5318 	.word	0x080a5318

080a2cfc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2cfc:	2300      	movs	r3, #0
 80a2cfe:	461a      	mov	r2, r3
 80a2d00:	4619      	mov	r1, r3
 80a2d02:	7c00      	ldrb	r0, [r0, #16]
 80a2d04:	f7ff bdaa 	b.w	80a285c <HAL_I2C_Begin>

080a2d08 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2d08:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2d0a:	2400      	movs	r4, #0
 80a2d0c:	7c00      	ldrb	r0, [r0, #16]
 80a2d0e:	9400      	str	r4, [sp, #0]
 80a2d10:	f7ff fdac 	bl	80a286c <HAL_I2C_Request_Data>
  return result;
}
 80a2d14:	b2c0      	uxtb	r0, r0
 80a2d16:	b002      	add	sp, #8
 80a2d18:	bd10      	pop	{r4, pc}

080a2d1a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2d1a:	2301      	movs	r3, #1
 80a2d1c:	f7ff bff4 	b.w	80a2d08 <_ZN7TwoWire11requestFromEhhh>

080a2d20 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2d20:	2200      	movs	r2, #0
 80a2d22:	7c00      	ldrb	r0, [r0, #16]
 80a2d24:	f7ff bdaa 	b.w	80a287c <HAL_I2C_Begin_Transmission>

080a2d28 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2d28:	2200      	movs	r2, #0
 80a2d2a:	7c00      	ldrb	r0, [r0, #16]
 80a2d2c:	f7ff bdae 	b.w	80a288c <HAL_I2C_End_Transmission>

080a2d30 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2d30:	2101      	movs	r1, #1
 80a2d32:	f7ff bff9 	b.w	80a2d28 <_ZN7TwoWire15endTransmissionEh>

080a2d36 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2d36:	2100      	movs	r1, #0
 80a2d38:	7c00      	ldrb	r0, [r0, #16]
 80a2d3a:	f7ff bdd7 	b.w	80a28ec <HAL_I2C_Is_Enabled>

080a2d3e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d40:	460f      	mov	r7, r1
 80a2d42:	f100 0608 	add.w	r6, r0, #8
 80a2d46:	1d05      	adds	r5, r0, #4
 80a2d48:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2d4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2d4e:	220a      	movs	r2, #10
 80a2d50:	4638      	mov	r0, r7
 80a2d52:	f000 f952 	bl	80a2ffa <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2d56:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2d58:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2d5a:	d007      	beq.n	80a2d6c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2d5c:	2c00      	cmp	r4, #0
 80a2d5e:	d0f4      	beq.n	80a2d4a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2d60:	212e      	movs	r1, #46	; 0x2e
 80a2d62:	4638      	mov	r0, r7
 80a2d64:	f000 f8f6 	bl	80a2f54 <_ZN5Print5printEc>
 80a2d68:	4404      	add	r4, r0
 80a2d6a:	e7ee      	b.n	80a2d4a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2d6c:	4620      	mov	r0, r4
 80a2d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2d70 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2d70:	b510      	push	{r4, lr}
 80a2d72:	4604      	mov	r4, r0
 80a2d74:	4b04      	ldr	r3, [pc, #16]	; (80a2d88 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2d76:	2211      	movs	r2, #17
 80a2d78:	f840 3b04 	str.w	r3, [r0], #4
 80a2d7c:	2100      	movs	r1, #0
 80a2d7e:	f002 f94c 	bl	80a501a <memset>
{
    clear();
}
 80a2d82:	4620      	mov	r0, r4
 80a2d84:	bd10      	pop	{r4, pc}
 80a2d86:	bf00      	nop
 80a2d88:	080a5340 	.word	0x080a5340

080a2d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2d8c:	4603      	mov	r3, r0
 80a2d8e:	4a07      	ldr	r2, [pc, #28]	; (80a2dac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2d90:	b510      	push	{r4, lr}
 80a2d92:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2d96:	f101 0210 	add.w	r2, r1, #16
 80a2d9a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2d9e:	4291      	cmp	r1, r2
 80a2da0:	f843 4b04 	str.w	r4, [r3], #4
 80a2da4:	d1f9      	bne.n	80a2d9a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2da6:	780a      	ldrb	r2, [r1, #0]
 80a2da8:	701a      	strb	r2, [r3, #0]
}
 80a2daa:	bd10      	pop	{r4, pc}
 80a2dac:	080a5340 	.word	0x080a5340

080a2db0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2db0:	4a02      	ldr	r2, [pc, #8]	; (80a2dbc <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2db2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2db4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2db6:	2204      	movs	r2, #4
 80a2db8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2dba:	4770      	bx	lr
 80a2dbc:	080a5340 	.word	0x080a5340

080a2dc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2dc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2dc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2dc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2dca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2dce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2dd2:	2304      	movs	r3, #4
 80a2dd4:	6041      	str	r1, [r0, #4]
 80a2dd6:	7503      	strb	r3, [r0, #20]
 80a2dd8:	bd10      	pop	{r4, pc}
	...

080a2ddc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2dde:	4d04      	ldr	r5, [pc, #16]	; (80a2df0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2de0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2de2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2de6:	9500      	str	r5, [sp, #0]
 80a2de8:	f7ff ffea 	bl	80a2dc0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2dec:	b003      	add	sp, #12
 80a2dee:	bd30      	pop	{r4, r5, pc}
 80a2df0:	080a5340 	.word	0x080a5340

080a2df4 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a2df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a2df6:	780d      	ldrb	r5, [r1, #0]
 80a2df8:	788b      	ldrb	r3, [r1, #2]
 80a2dfa:	784a      	ldrb	r2, [r1, #1]
 80a2dfc:	78c9      	ldrb	r1, [r1, #3]
 80a2dfe:	9100      	str	r1, [sp, #0]
 80a2e00:	4629      	mov	r1, r5
 80a2e02:	f7ff ffdd 	bl	80a2dc0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a2e06:	b003      	add	sp, #12
 80a2e08:	bd30      	pop	{r4, r5, pc}
	...

080a2e0c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2e0c:	4a01      	ldr	r2, [pc, #4]	; (80a2e14 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2e0e:	4b02      	ldr	r3, [pc, #8]	; (80a2e18 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2e10:	601a      	str	r2, [r3, #0]
 80a2e12:	4770      	bx	lr
 80a2e14:	080a53c2 	.word	0x080a53c2
 80a2e18:	20000208 	.word	0x20000208

080a2e1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2e1c:	2300      	movs	r3, #0
 80a2e1e:	461a      	mov	r2, r3
 80a2e20:	6840      	ldr	r0, [r0, #4]
 80a2e22:	f7ff bea9 	b.w	80a2b78 <network_connect>

080a2e26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2e26:	2200      	movs	r2, #0
 80a2e28:	2102      	movs	r1, #2
 80a2e2a:	6840      	ldr	r0, [r0, #4]
 80a2e2c:	f7ff beb4 	b.w	80a2b98 <network_disconnect>

080a2e30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2e30:	2200      	movs	r2, #0
 80a2e32:	4611      	mov	r1, r2
 80a2e34:	6840      	ldr	r0, [r0, #4]
 80a2e36:	f7ff bea7 	b.w	80a2b88 <network_connecting>

080a2e3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2e3a:	2200      	movs	r2, #0
 80a2e3c:	4611      	mov	r1, r2
 80a2e3e:	6840      	ldr	r0, [r0, #4]
 80a2e40:	f7ff beb2 	b.w	80a2ba8 <network_ready>

080a2e44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2e44:	2300      	movs	r3, #0
 80a2e46:	461a      	mov	r2, r3
 80a2e48:	4619      	mov	r1, r3
 80a2e4a:	6840      	ldr	r0, [r0, #4]
 80a2e4c:	f7ff beb4 	b.w	80a2bb8 <network_on>

080a2e50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2e50:	2300      	movs	r3, #0
 80a2e52:	461a      	mov	r2, r3
 80a2e54:	4619      	mov	r1, r3
 80a2e56:	6840      	ldr	r0, [r0, #4]
 80a2e58:	f7ff beb6 	b.w	80a2bc8 <network_off>

080a2e5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2e5c:	2200      	movs	r2, #0
 80a2e5e:	f081 0101 	eor.w	r1, r1, #1
 80a2e62:	6840      	ldr	r0, [r0, #4]
 80a2e64:	f7ff beb8 	b.w	80a2bd8 <network_listen>

080a2e68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2e68:	2200      	movs	r2, #0
 80a2e6a:	6840      	ldr	r0, [r0, #4]
 80a2e6c:	f7ff bec4 	b.w	80a2bf8 <network_set_listen_timeout>

080a2e70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2e70:	2200      	movs	r2, #0
 80a2e72:	4611      	mov	r1, r2
 80a2e74:	6840      	ldr	r0, [r0, #4]
 80a2e76:	f7ff bec7 	b.w	80a2c08 <network_get_listen_timeout>

080a2e7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2e7a:	2200      	movs	r2, #0
 80a2e7c:	4611      	mov	r1, r2
 80a2e7e:	6840      	ldr	r0, [r0, #4]
 80a2e80:	f7ff beb2 	b.w	80a2be8 <network_listening>

080a2e84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2e84:	b570      	push	{r4, r5, r6, lr}
 80a2e86:	4616      	mov	r6, r2
 80a2e88:	b08e      	sub	sp, #56	; 0x38
 80a2e8a:	4604      	mov	r4, r0
    IPAddress addr;
 80a2e8c:	a808      	add	r0, sp, #32
 80a2e8e:	f7ff ff6f 	bl	80a2d70 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2e92:	2211      	movs	r2, #17
 80a2e94:	2100      	movs	r1, #0
 80a2e96:	a803      	add	r0, sp, #12
 80a2e98:	f002 f8bf 	bl	80a501a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2e9c:	4630      	mov	r0, r6
 80a2e9e:	f002 f927 	bl	80a50f0 <strlen>
 80a2ea2:	2500      	movs	r5, #0
 80a2ea4:	4b0a      	ldr	r3, [pc, #40]	; (80a2ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2ea6:	9500      	str	r5, [sp, #0]
 80a2ea8:	b281      	uxth	r1, r0
 80a2eaa:	685b      	ldr	r3, [r3, #4]
 80a2eac:	aa03      	add	r2, sp, #12
 80a2eae:	4630      	mov	r0, r6
 80a2eb0:	f7ff fe1e 	bl	80a2af0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2eb4:	b120      	cbz	r0, 80a2ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2eb6:	4629      	mov	r1, r5
 80a2eb8:	4620      	mov	r0, r4
 80a2eba:	f7ff ff79 	bl	80a2db0 <_ZN9IPAddressC1Em>
 80a2ebe:	e003      	b.n	80a2ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2ec0:	a903      	add	r1, sp, #12
 80a2ec2:	4620      	mov	r0, r4
 80a2ec4:	f7ff ff62 	bl	80a2d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2ec8:	4620      	mov	r0, r4
 80a2eca:	b00e      	add	sp, #56	; 0x38
 80a2ecc:	bd70      	pop	{r4, r5, r6, pc}
 80a2ece:	bf00      	nop
 80a2ed0:	2000068c 	.word	0x2000068c

080a2ed4 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2ed4:	4b03      	ldr	r3, [pc, #12]	; (80a2ee4 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2ed6:	4a04      	ldr	r2, [pc, #16]	; (80a2ee8 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2ed8:	2804      	cmp	r0, #4
 80a2eda:	bf0c      	ite	eq
 80a2edc:	4610      	moveq	r0, r2
 80a2ede:	4618      	movne	r0, r3
 80a2ee0:	4770      	bx	lr
 80a2ee2:	bf00      	nop
 80a2ee4:	2000020c 	.word	0x2000020c
 80a2ee8:	2000068c 	.word	0x2000068c

080a2eec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2eec:	4b02      	ldr	r3, [pc, #8]	; (80a2ef8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2eee:	4a03      	ldr	r2, [pc, #12]	; (80a2efc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2ef0:	601a      	str	r2, [r3, #0]
 80a2ef2:	2200      	movs	r2, #0
 80a2ef4:	605a      	str	r2, [r3, #4]
 80a2ef6:	4770      	bx	lr
 80a2ef8:	2000020c 	.word	0x2000020c
 80a2efc:	080a5438 	.word	0x080a5438

080a2f00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f02:	4606      	mov	r6, r0
 80a2f04:	460d      	mov	r5, r1
 80a2f06:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2f08:	2400      	movs	r4, #0
  while (size--) {
 80a2f0a:	42bd      	cmp	r5, r7
 80a2f0c:	d00c      	beq.n	80a2f28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2f0e:	6833      	ldr	r3, [r6, #0]
 80a2f10:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2f14:	689b      	ldr	r3, [r3, #8]
 80a2f16:	4630      	mov	r0, r6
 80a2f18:	4798      	blx	r3
     if (chunk>=0)
 80a2f1a:	2800      	cmp	r0, #0
 80a2f1c:	db01      	blt.n	80a2f22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2f1e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2f20:	e7f3      	b.n	80a2f0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2f22:	2c00      	cmp	r4, #0
 80a2f24:	bf08      	it	eq
 80a2f26:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2f28:	4620      	mov	r0, r4
 80a2f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2f2c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2f2c:	b570      	push	{r4, r5, r6, lr}
 80a2f2e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2f30:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2f32:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2f34:	b149      	cbz	r1, 80a2f4a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2f36:	f002 f8db 	bl	80a50f0 <strlen>
 80a2f3a:	682b      	ldr	r3, [r5, #0]
 80a2f3c:	4602      	mov	r2, r0
 80a2f3e:	4621      	mov	r1, r4
 80a2f40:	4628      	mov	r0, r5
    }
 80a2f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2f46:	68db      	ldr	r3, [r3, #12]
 80a2f48:	4718      	bx	r3
    }
 80a2f4a:	bd70      	pop	{r4, r5, r6, pc}

080a2f4c <_ZN5Print5printEPKc>:
 80a2f4c:	b508      	push	{r3, lr}
 80a2f4e:	f7ff ffed 	bl	80a2f2c <_ZN5Print5writeEPKc>
 80a2f52:	bd08      	pop	{r3, pc}

080a2f54 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2f54:	6803      	ldr	r3, [r0, #0]
 80a2f56:	689b      	ldr	r3, [r3, #8]
 80a2f58:	4718      	bx	r3

080a2f5a <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a2f5a:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a2f5c:	680a      	ldr	r2, [r1, #0]
 80a2f5e:	4601      	mov	r1, r0
 80a2f60:	6812      	ldr	r2, [r2, #0]
 80a2f62:	4618      	mov	r0, r3
 80a2f64:	4710      	bx	r2

080a2f66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2f66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2f68:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2f6a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2f6c:	f7ff fff2 	bl	80a2f54 <_ZN5Print5printEc>
  n += print('\n');
 80a2f70:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2f72:	4604      	mov	r4, r0
  n += print('\n');
 80a2f74:	4628      	mov	r0, r5
 80a2f76:	f7ff ffed 	bl	80a2f54 <_ZN5Print5printEc>
  return n;
}
 80a2f7a:	4420      	add	r0, r4
 80a2f7c:	bd38      	pop	{r3, r4, r5, pc}

080a2f7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2f7e:	b538      	push	{r3, r4, r5, lr}
 80a2f80:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2f82:	f7ff ffd3 	bl	80a2f2c <_ZN5Print5writeEPKc>
 80a2f86:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2f88:	4628      	mov	r0, r5
 80a2f8a:	f7ff ffec 	bl	80a2f66 <_ZN5Print7printlnEv>
  return n;
}
 80a2f8e:	4420      	add	r0, r4
 80a2f90:	bd38      	pop	{r3, r4, r5, pc}

080a2f92 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a2f92:	b538      	push	{r3, r4, r5, lr}
 80a2f94:	4605      	mov	r5, r0
   size_t n = print(x);
 80a2f96:	f7ff ffe0 	bl	80a2f5a <_ZN5Print5printERK9Printable>
 80a2f9a:	4604      	mov	r4, r0
   n += println();
 80a2f9c:	4628      	mov	r0, r5
 80a2f9e:	f7ff ffe2 	bl	80a2f66 <_ZN5Print7printlnEv>
   return n;
 }
 80a2fa2:	4420      	add	r0, r4
 80a2fa4:	bd38      	pop	{r3, r4, r5, pc}

080a2fa6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2fa6:	2a01      	cmp	r2, #1
 80a2fa8:	bf98      	it	ls
 80a2faa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2fac:	b530      	push	{r4, r5, lr}
 80a2fae:	460b      	mov	r3, r1
 80a2fb0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2fb2:	2100      	movs	r1, #0
 80a2fb4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2fb8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2fbc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2fc0:	fb05 3312 	mls	r3, r5, r2, r3
 80a2fc4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2fc6:	2b09      	cmp	r3, #9
 80a2fc8:	bf94      	ite	ls
 80a2fca:	3330      	addls	r3, #48	; 0x30
 80a2fcc:	3337      	addhi	r3, #55	; 0x37
 80a2fce:	b2db      	uxtb	r3, r3
 80a2fd0:	4621      	mov	r1, r4
 80a2fd2:	f804 3901 	strb.w	r3, [r4], #-1
 80a2fd6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2fd8:	2d00      	cmp	r5, #0
 80a2fda:	d1ef      	bne.n	80a2fbc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2fdc:	f7ff ffa6 	bl	80a2f2c <_ZN5Print5writeEPKc>
}
 80a2fe0:	b00b      	add	sp, #44	; 0x2c
 80a2fe2:	bd30      	pop	{r4, r5, pc}

080a2fe4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2fe4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2fe6:	b922      	cbnz	r2, 80a2ff2 <_ZN5Print5printEmi+0xe>
 80a2fe8:	6803      	ldr	r3, [r0, #0]
 80a2fea:	b2c9      	uxtb	r1, r1
 80a2fec:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2fee:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2ff0:	4718      	bx	r3
  else return printNumber(n, base);
 80a2ff2:	b2d2      	uxtb	r2, r2
}
 80a2ff4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2ff6:	f7ff bfd6 	b.w	80a2fa6 <_ZN5Print11printNumberEmh>

080a2ffa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2ffa:	f7ff bff3 	b.w	80a2fe4 <_ZN5Print5printEmi>

080a2ffe <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3002:	4607      	mov	r7, r0
 80a3004:	460e      	mov	r6, r1
  if (base == 0) {
 80a3006:	4615      	mov	r5, r2
 80a3008:	b92a      	cbnz	r2, 80a3016 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a300a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a300e:	6803      	ldr	r3, [r0, #0]
 80a3010:	b2c9      	uxtb	r1, r1
 80a3012:	689b      	ldr	r3, [r3, #8]
 80a3014:	4718      	bx	r3
  } else if (base == 10) {
 80a3016:	2a0a      	cmp	r2, #10
 80a3018:	d102      	bne.n	80a3020 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a301a:	2900      	cmp	r1, #0
 80a301c:	da01      	bge.n	80a3022 <_ZN5Print5printEli+0x24>
 80a301e:	e004      	b.n	80a302a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3020:	b2d2      	uxtb	r2, r2
  }
}
 80a3022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3026:	f7ff bfbe 	b.w	80a2fa6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a302a:	212d      	movs	r1, #45	; 0x2d
 80a302c:	f7ff ff92 	bl	80a2f54 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3030:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3032:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3034:	4271      	negs	r1, r6
 80a3036:	4638      	mov	r0, r7
 80a3038:	f7ff ffb5 	bl	80a2fa6 <_ZN5Print11printNumberEmh>
 80a303c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a303e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3042 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3042:	f7ff bfdc 	b.w	80a2ffe <_ZN5Print5printEli>

080a3046 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a3046:	b538      	push	{r3, r4, r5, lr}
 80a3048:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a304a:	f7ff ffd8 	bl	80a2ffe <_ZN5Print5printEli>
 80a304e:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3050:	4628      	mov	r0, r5
 80a3052:	f7ff ff88 	bl	80a2f66 <_ZN5Print7printlnEv>
  return n;
}
 80a3056:	4420      	add	r0, r4
 80a3058:	bd38      	pop	{r3, r4, r5, pc}
	...

080a305c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3060:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3062:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3064:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3066:	4617      	mov	r7, r2
 80a3068:	461e      	mov	r6, r3
 80a306a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a306e:	f001 fc63 	bl	80a4938 <__aeabi_dcmpun>
 80a3072:	b108      	cbz	r0, 80a3078 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3074:	4947      	ldr	r1, [pc, #284]	; (80a3194 <_ZN5Print10printFloatEdh+0x138>)
 80a3076:	e012      	b.n	80a309e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3078:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a307c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3080:	4b45      	ldr	r3, [pc, #276]	; (80a3198 <_ZN5Print10printFloatEdh+0x13c>)
 80a3082:	4638      	mov	r0, r7
 80a3084:	4621      	mov	r1, r4
 80a3086:	f001 fc57 	bl	80a4938 <__aeabi_dcmpun>
 80a308a:	b968      	cbnz	r0, 80a30a8 <_ZN5Print10printFloatEdh+0x4c>
 80a308c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3090:	4b41      	ldr	r3, [pc, #260]	; (80a3198 <_ZN5Print10printFloatEdh+0x13c>)
 80a3092:	4638      	mov	r0, r7
 80a3094:	4621      	mov	r1, r4
 80a3096:	f001 fc31 	bl	80a48fc <__aeabi_dcmple>
 80a309a:	b928      	cbnz	r0, 80a30a8 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a309c:	493f      	ldr	r1, [pc, #252]	; (80a319c <_ZN5Print10printFloatEdh+0x140>)
 80a309e:	4640      	mov	r0, r8
 80a30a0:	f7ff ff44 	bl	80a2f2c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a30a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a30a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a30ac:	4b3c      	ldr	r3, [pc, #240]	; (80a31a0 <_ZN5Print10printFloatEdh+0x144>)
 80a30ae:	4638      	mov	r0, r7
 80a30b0:	4631      	mov	r1, r6
 80a30b2:	f001 fc37 	bl	80a4924 <__aeabi_dcmpgt>
 80a30b6:	b108      	cbz	r0, 80a30bc <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a30b8:	493a      	ldr	r1, [pc, #232]	; (80a31a4 <_ZN5Print10printFloatEdh+0x148>)
 80a30ba:	e7f0      	b.n	80a309e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a30bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a30c0:	4b39      	ldr	r3, [pc, #228]	; (80a31a8 <_ZN5Print10printFloatEdh+0x14c>)
 80a30c2:	4638      	mov	r0, r7
 80a30c4:	4631      	mov	r1, r6
 80a30c6:	f001 fc0f 	bl	80a48e8 <__aeabi_dcmplt>
 80a30ca:	2800      	cmp	r0, #0
 80a30cc:	d1f4      	bne.n	80a30b8 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a30ce:	2200      	movs	r2, #0
 80a30d0:	2300      	movs	r3, #0
 80a30d2:	4638      	mov	r0, r7
 80a30d4:	4631      	mov	r1, r6
 80a30d6:	f001 fc07 	bl	80a48e8 <__aeabi_dcmplt>
 80a30da:	b138      	cbz	r0, 80a30ec <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a30dc:	212d      	movs	r1, #45	; 0x2d
 80a30de:	4640      	mov	r0, r8
 80a30e0:	f7ff ff38 	bl	80a2f54 <_ZN5Print5printEc>
     number = -number;
 80a30e4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a30e8:	4604      	mov	r4, r0
 80a30ea:	e000      	b.n	80a30ee <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a30ec:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a30ee:	492f      	ldr	r1, [pc, #188]	; (80a31ac <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a30f0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a30f4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a30f6:	fa5f f389 	uxtb.w	r3, r9
 80a30fa:	429d      	cmp	r5, r3
 80a30fc:	d906      	bls.n	80a310c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a30fe:	2200      	movs	r2, #0
 80a3100:	4b2b      	ldr	r3, [pc, #172]	; (80a31b0 <_ZN5Print10printFloatEdh+0x154>)
 80a3102:	f001 faa9 	bl	80a4658 <__aeabi_ddiv>
 80a3106:	f109 0901 	add.w	r9, r9, #1
 80a310a:	e7f4      	b.n	80a30f6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a310c:	463a      	mov	r2, r7
 80a310e:	4633      	mov	r3, r6
 80a3110:	f000 ffc6 	bl	80a40a0 <__adddf3>
 80a3114:	460f      	mov	r7, r1
 80a3116:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3118:	f001 fc4c 	bl	80a49b4 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a311c:	220a      	movs	r2, #10
 80a311e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3120:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3122:	4640      	mov	r0, r8
 80a3124:	f7ff ff3f 	bl	80a2fa6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3128:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a312a:	b37d      	cbz	r5, 80a318c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a312c:	4648      	mov	r0, r9
 80a312e:	f001 f8f3 	bl	80a4318 <__aeabi_ui2d>
 80a3132:	4602      	mov	r2, r0
 80a3134:	460b      	mov	r3, r1
 80a3136:	4630      	mov	r0, r6
 80a3138:	4639      	mov	r1, r7
 80a313a:	f000 ffaf 	bl	80a409c <__aeabi_dsub>
 80a313e:	4606      	mov	r6, r0
 80a3140:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3142:	4640      	mov	r0, r8
 80a3144:	491b      	ldr	r1, [pc, #108]	; (80a31b4 <_ZN5Print10printFloatEdh+0x158>)
 80a3146:	f7ff fef1 	bl	80a2f2c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a314a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a314c:	4b18      	ldr	r3, [pc, #96]	; (80a31b0 <_ZN5Print10printFloatEdh+0x154>)
 80a314e:	2200      	movs	r2, #0
 80a3150:	4630      	mov	r0, r6
 80a3152:	4639      	mov	r1, r7
 80a3154:	f001 f956 	bl	80a4404 <__aeabi_dmul>
 80a3158:	460f      	mov	r7, r1
 80a315a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a315c:	f001 fc02 	bl	80a4964 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3160:	220a      	movs	r2, #10
 80a3162:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a3164:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3166:	4640      	mov	r0, r8
 80a3168:	f7ff ff49 	bl	80a2ffe <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a316c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a316e:	4648      	mov	r0, r9
 80a3170:	f001 f8e2 	bl	80a4338 <__aeabi_i2d>
 80a3174:	4602      	mov	r2, r0
 80a3176:	460b      	mov	r3, r1
 80a3178:	4630      	mov	r0, r6
 80a317a:	4639      	mov	r1, r7
 80a317c:	f000 ff8e 	bl	80a409c <__aeabi_dsub>
 80a3180:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3182:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a3186:	4606      	mov	r6, r0
 80a3188:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a318a:	d1df      	bne.n	80a314c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a318c:	4620      	mov	r0, r4
 80a318e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3192:	bf00      	nop
 80a3194:	080a5464 	.word	0x080a5464
 80a3198:	7fefffff 	.word	0x7fefffff
 80a319c:	080a546c 	.word	0x080a546c
 80a31a0:	41efffff 	.word	0x41efffff
 80a31a4:	080a5468 	.word	0x080a5468
 80a31a8:	c1efffff 	.word	0xc1efffff
 80a31ac:	3fe00000 	.word	0x3fe00000
 80a31b0:	40240000 	.word	0x40240000
 80a31b4:	080a5154 	.word	0x080a5154

080a31b8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a31b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a31ba:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a31be:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a31c0:	9100      	str	r1, [sp, #0]
 80a31c2:	f7ff ff4b 	bl	80a305c <_ZN5Print10printFloatEdh>
 80a31c6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a31c8:	4628      	mov	r0, r5
 80a31ca:	f7ff fecc 	bl	80a2f66 <_ZN5Print7printlnEv>
  return n;
}
 80a31ce:	4420      	add	r0, r4
 80a31d0:	b003      	add	sp, #12
 80a31d2:	bd30      	pop	{r4, r5, pc}

080a31d4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a31d4:	b510      	push	{r4, lr}
 80a31d6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a31d8:	f7ff fd49 	bl	80a2c6e <_ZNSt14_Function_baseD1Ev>
 80a31dc:	4620      	mov	r0, r4
 80a31de:	bd10      	pop	{r4, pc}

080a31e0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a31e0:	4803      	ldr	r0, [pc, #12]	; (80a31f0 <_GLOBAL__sub_I_RGB+0x10>)
 80a31e2:	2300      	movs	r3, #0
 80a31e4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a31e6:	4a03      	ldr	r2, [pc, #12]	; (80a31f4 <_GLOBAL__sub_I_RGB+0x14>)
 80a31e8:	4903      	ldr	r1, [pc, #12]	; (80a31f8 <_GLOBAL__sub_I_RGB+0x18>)
 80a31ea:	f000 be03 	b.w	80a3df4 <__aeabi_atexit>
 80a31ee:	bf00      	nop
 80a31f0:	20000214 	.word	0x20000214
 80a31f4:	2000009c 	.word	0x2000009c
 80a31f8:	080a31d5 	.word	0x080a31d5

080a31fc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a31fc:	4770      	bx	lr

080a31fe <_ZN8SPIClassD0Ev>:
 80a31fe:	b510      	push	{r4, lr}
 80a3200:	4604      	mov	r4, r0
 80a3202:	2110      	movs	r1, #16
 80a3204:	f000 fdfb 	bl	80a3dfe <_ZdlPvj>
 80a3208:	4620      	mov	r0, r4
 80a320a:	bd10      	pop	{r4, pc}

080a320c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a320c:	b570      	push	{r4, r5, r6, lr}
 80a320e:	4604      	mov	r4, r0
 80a3210:	460e      	mov	r6, r1
 80a3212:	4b07      	ldr	r3, [pc, #28]	; (80a3230 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a3214:	2500      	movs	r5, #0
 80a3216:	6003      	str	r3, [r0, #0]
 80a3218:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a321c:	f7ff fade 	bl	80a27dc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a3220:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a3222:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a3224:	f7ff fbcc 	bl	80a29c0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3228:	60a5      	str	r5, [r4, #8]
}
 80a322a:	4620      	mov	r0, r4
 80a322c:	bd70      	pop	{r4, r5, r6, pc}
 80a322e:	bf00      	nop
 80a3230:	080a5478 	.word	0x080a5478

080a3234 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a3234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a3238:	7900      	ldrb	r0, [r0, #4]
 80a323a:	f7ff bb99 	b.w	80a2970 <HAL_SPI_Begin>

080a323e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a323e:	7900      	ldrb	r0, [r0, #4]
 80a3240:	f7ff bb9e 	b.w	80a2980 <HAL_SPI_Set_Bit_Order>

080a3244 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a3244:	7900      	ldrb	r0, [r0, #4]
 80a3246:	f7ff bba3 	b.w	80a2990 <HAL_SPI_Set_Data_Mode>
	...

080a324c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a324c:	4a05      	ldr	r2, [pc, #20]	; (80a3264 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a324e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a3250:	5c99      	ldrb	r1, [r3, r2]
 80a3252:	4281      	cmp	r1, r0
 80a3254:	d002      	beq.n	80a325c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a3256:	3301      	adds	r3, #1
 80a3258:	2b08      	cmp	r3, #8
 80a325a:	d1f9      	bne.n	80a3250 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a325c:	1c58      	adds	r0, r3, #1
}
 80a325e:	b2c0      	uxtb	r0, r0
 80a3260:	4770      	bx	lr
 80a3262:	bf00      	nop
 80a3264:	080a5480 	.word	0x080a5480

080a3268 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a3268:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a326a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a326c:	6018      	str	r0, [r3, #0]
 80a326e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a3270:	6818      	ldr	r0, [r3, #0]
 80a3272:	b2e5      	uxtb	r5, r4
 80a3274:	4288      	cmp	r0, r1
 80a3276:	d906      	bls.n	80a3286 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a3278:	3401      	adds	r4, #1
 80a327a:	2c08      	cmp	r4, #8
 80a327c:	d002      	beq.n	80a3284 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a327e:	0840      	lsrs	r0, r0, #1
 80a3280:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a3282:	e7f5      	b.n	80a3270 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a3284:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a3286:	4b02      	ldr	r3, [pc, #8]	; (80a3290 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a3288:	5d5b      	ldrb	r3, [r3, r5]
 80a328a:	7013      	strb	r3, [r2, #0]
 80a328c:	bd30      	pop	{r4, r5, pc}
 80a328e:	bf00      	nop
 80a3290:	080a5480 	.word	0x080a5480

080a3294 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a3294:	b570      	push	{r4, r5, r6, lr}
 80a3296:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a3298:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a329c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a329e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a32a0:	2214      	movs	r2, #20
 80a32a2:	2100      	movs	r1, #0
 80a32a4:	a803      	add	r0, sp, #12
 80a32a6:	f001 feb8 	bl	80a501a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a32aa:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a32ac:	a903      	add	r1, sp, #12
 80a32ae:	4630      	mov	r0, r6
 80a32b0:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a32b2:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a32b6:	f7ff fb93 	bl	80a29e0 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a32ba:	ab02      	add	r3, sp, #8
 80a32bc:	f10d 0207 	add.w	r2, sp, #7
 80a32c0:	4629      	mov	r1, r5
 80a32c2:	9804      	ldr	r0, [sp, #16]
 80a32c4:	f7ff ffd0 	bl	80a3268 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a32c8:	7920      	ldrb	r0, [r4, #4]
 80a32ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a32ce:	f7ff fb67 	bl	80a29a0 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a32d2:	9802      	ldr	r0, [sp, #8]
 80a32d4:	b008      	add	sp, #32
 80a32d6:	bd70      	pop	{r4, r5, r6, pc}

080a32d8 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a32d8:	b538      	push	{r3, r4, r5, lr}
 80a32da:	4604      	mov	r4, r0
    if (dividerReference)
 80a32dc:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a32de:	4608      	mov	r0, r1
    if (dividerReference)
 80a32e0:	b14d      	cbz	r5, 80a32f6 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a32e2:	f7ff ffb3 	bl	80a324c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a32e6:	2201      	movs	r2, #1
 80a32e8:	fa25 f100 	lsr.w	r1, r5, r0
 80a32ec:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a32ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a32f2:	f7ff bfcf 	b.w	80a3294 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a32f6:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a32f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a32fc:	f7ff bb50 	b.w	80a29a0 <HAL_SPI_Set_Clock_Divider>

080a3300 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3300:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a3302:	7900      	ldrb	r0, [r0, #4]
 80a3304:	f7ff fb54 	bl	80a29b0 <HAL_SPI_Send_Receive_Data>
}
 80a3308:	b2c0      	uxtb	r0, r0
 80a330a:	bd08      	pop	{r3, pc}

080a330c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a330c:	7900      	ldrb	r0, [r0, #4]
 80a330e:	f7ff bb5f 	b.w	80a29d0 <HAL_SPI_Is_Enabled>

080a3312 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a3312:	b510      	push	{r4, lr}
 80a3314:	4604      	mov	r4, r0
{
	free(buffer);
 80a3316:	6800      	ldr	r0, [r0, #0]
 80a3318:	f7ff fc96 	bl	80a2c48 <free>
}
 80a331c:	4620      	mov	r0, r4
 80a331e:	bd10      	pop	{r4, pc}

080a3320 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3320:	b510      	push	{r4, lr}
 80a3322:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3324:	6800      	ldr	r0, [r0, #0]
 80a3326:	b108      	cbz	r0, 80a332c <_ZN6String10invalidateEv+0xc>
 80a3328:	f7ff fc8e 	bl	80a2c48 <free>
	buffer = NULL;
 80a332c:	2300      	movs	r3, #0
 80a332e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3330:	60a3      	str	r3, [r4, #8]
 80a3332:	6063      	str	r3, [r4, #4]
 80a3334:	bd10      	pop	{r4, pc}

080a3336 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3336:	b538      	push	{r3, r4, r5, lr}
 80a3338:	4604      	mov	r4, r0
 80a333a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a333c:	6800      	ldr	r0, [r0, #0]
 80a333e:	3101      	adds	r1, #1
 80a3340:	f7ff fc8a 	bl	80a2c58 <realloc>
	if (newbuffer) {
 80a3344:	b110      	cbz	r0, 80a334c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3346:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a334a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a334c:	bd38      	pop	{r3, r4, r5, pc}

080a334e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a334e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3350:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3352:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3354:	b113      	cbz	r3, 80a335c <_ZN6String7reserveEj+0xe>
 80a3356:	6843      	ldr	r3, [r0, #4]
 80a3358:	428b      	cmp	r3, r1
 80a335a:	d207      	bcs.n	80a336c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a335c:	4620      	mov	r0, r4
 80a335e:	f7ff ffea 	bl	80a3336 <_ZN6String12changeBufferEj>
 80a3362:	b120      	cbz	r0, 80a336e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3364:	68a3      	ldr	r3, [r4, #8]
 80a3366:	b90b      	cbnz	r3, 80a336c <_ZN6String7reserveEj+0x1e>
 80a3368:	6822      	ldr	r2, [r4, #0]
 80a336a:	7013      	strb	r3, [r2, #0]
 80a336c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a336e:	bd10      	pop	{r4, pc}

080a3370 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3370:	b570      	push	{r4, r5, r6, lr}
 80a3372:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3374:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3376:	4604      	mov	r4, r0
 80a3378:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a337a:	f7ff ffe8 	bl	80a334e <_ZN6String7reserveEj>
 80a337e:	b918      	cbnz	r0, 80a3388 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3380:	4620      	mov	r0, r4
 80a3382:	f7ff ffcd 	bl	80a3320 <_ZN6String10invalidateEv>
		return *this;
 80a3386:	e009      	b.n	80a339c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3388:	462a      	mov	r2, r5
 80a338a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a338c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a338e:	6820      	ldr	r0, [r4, #0]
 80a3390:	f001 fe38 	bl	80a5004 <memcpy>
	buffer[len] = 0;
 80a3394:	6822      	ldr	r2, [r4, #0]
 80a3396:	68a3      	ldr	r3, [r4, #8]
 80a3398:	2100      	movs	r1, #0
 80a339a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a339c:	4620      	mov	r0, r4
 80a339e:	bd70      	pop	{r4, r5, r6, pc}

080a33a0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a33a0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a33a2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a33a4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a33a6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a33a8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a33aa:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a33ac:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a33ae:	460d      	mov	r5, r1
 80a33b0:	b139      	cbz	r1, 80a33c2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a33b2:	4608      	mov	r0, r1
 80a33b4:	f001 fe9c 	bl	80a50f0 <strlen>
 80a33b8:	4629      	mov	r1, r5
 80a33ba:	4602      	mov	r2, r0
 80a33bc:	4620      	mov	r0, r4
 80a33be:	f7ff ffd7 	bl	80a3370 <_ZN6String4copyEPKcj>
}
 80a33c2:	4620      	mov	r0, r4
 80a33c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a33c8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a33c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a33cc:	4b03      	ldr	r3, [pc, #12]	; (80a33dc <_GLOBAL__sub_I_System+0x14>)
 80a33ce:	2000      	movs	r0, #0
 80a33d0:	7018      	strb	r0, [r3, #0]
 80a33d2:	8058      	strh	r0, [r3, #2]
 80a33d4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a33d6:	f7ff bb93 	b.w	80a2b00 <set_system_mode>
 80a33da:	bf00      	nop
 80a33dc:	20000224 	.word	0x20000224

080a33e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a33e0:	4b02      	ldr	r3, [pc, #8]	; (80a33ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a33e2:	681a      	ldr	r2, [r3, #0]
 80a33e4:	4b02      	ldr	r3, [pc, #8]	; (80a33f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a33e6:	601a      	str	r2, [r3, #0]
 80a33e8:	4770      	bx	lr
 80a33ea:	bf00      	nop
 80a33ec:	20000034 	.word	0x20000034
 80a33f0:	2000022c 	.word	0x2000022c

080a33f4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a33f4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a33f6:	6804      	ldr	r4, [r0, #0]
 80a33f8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a33fa:	46a4      	mov	ip, r4
    }
 80a33fc:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a33fe:	4760      	bx	ip

080a3400 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a3400:	6803      	ldr	r3, [r0, #0]
 80a3402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3404:	4718      	bx	r3

080a3406 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a3406:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a3408:	4770      	bx	lr

080a340a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a340a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a340c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a340e:	1a10      	subs	r0, r2, r0
 80a3410:	4770      	bx	lr

080a3412 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a3412:	b513      	push	{r0, r1, r4, lr}
 80a3414:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a3416:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a3418:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a341c:	68d4      	ldr	r4, [r2, #12]
 80a341e:	4619      	mov	r1, r3
 80a3420:	2201      	movs	r2, #1
 80a3422:	47a0      	blx	r4
}
 80a3424:	b002      	add	sp, #8
 80a3426:	bd10      	pop	{r4, pc}

080a3428 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a3428:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a342a:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a342c:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a342e:	691b      	ldr	r3, [r3, #16]
 80a3430:	4798      	blx	r3
 80a3432:	b128      	cbz	r0, 80a3440 <_ZN3UDP4readEv+0x18>
 80a3434:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3438:	1c59      	adds	r1, r3, #1
 80a343a:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a343c:	5cd0      	ldrb	r0, [r2, r3]
 80a343e:	bd10      	pop	{r4, pc}
 80a3440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3444:	bd10      	pop	{r4, pc}

080a3446 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a3446:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a3448:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a344a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a344c:	691b      	ldr	r3, [r3, #16]
 80a344e:	4798      	blx	r3
 80a3450:	b118      	cbz	r0, 80a345a <_ZN3UDP4peekEv+0x14>
 80a3452:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3454:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3456:	5cd0      	ldrb	r0, [r2, r3]
 80a3458:	bd10      	pop	{r4, pc}
 80a345a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a345e:	bd10      	pop	{r4, pc}

080a3460 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a3460:	4770      	bx	lr

080a3462 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a3462:	4603      	mov	r3, r0
 80a3464:	4608      	mov	r0, r1
 80a3466:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a3468:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a346a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a346c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a346e:	6803      	ldr	r3, [r0, #0]
 80a3470:	1a52      	subs	r2, r2, r1
 80a3472:	68db      	ldr	r3, [r3, #12]
 80a3474:	4421      	add	r1, r4
}
 80a3476:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a3478:	4718      	bx	r3

080a347a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a347a:	f1a0 0010 	sub.w	r0, r0, #16
 80a347e:	f7ff bff0 	b.w	80a3462 <_ZNK3UDP7printToER5Print>

080a3482 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a3482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a3484:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a3486:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a3488:	460f      	mov	r7, r1
 80a348a:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a348c:	f7ff fd22 	bl	80a2ed4 <_ZN5spark12NetworkClass4fromEm>
 80a3490:	6803      	ldr	r3, [r0, #0]
 80a3492:	68db      	ldr	r3, [r3, #12]
 80a3494:	4798      	blx	r3
 80a3496:	b1b8      	cbz	r0, 80a34c8 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a3498:	2102      	movs	r1, #2
 80a349a:	463b      	mov	r3, r7
 80a349c:	2211      	movs	r2, #17
 80a349e:	4608      	mov	r0, r1
 80a34a0:	9600      	str	r6, [sp, #0]
 80a34a2:	f7ff fa3d 	bl	80a2920 <socket_create>
 80a34a6:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a34a8:	f7ff fa32 	bl	80a2910 <socket_handle_valid>
 80a34ac:	4604      	mov	r4, r0
 80a34ae:	b130      	cbz	r0, 80a34be <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a34b0:	2300      	movs	r3, #0
 80a34b2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a34b4:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a34b6:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a34b8:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a34ba:	2001      	movs	r0, #1
 80a34bc:	e004      	b.n	80a34c8 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a34be:	682b      	ldr	r3, [r5, #0]
 80a34c0:	4628      	mov	r0, r5
 80a34c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a34c4:	4798      	blx	r3
            bound = false;
 80a34c6:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a34c8:	b003      	add	sp, #12
 80a34ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a34cc <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a34cc:	b538      	push	{r3, r4, r5, lr}
 80a34ce:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a34d0:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a34d2:	f7ff fa45 	bl	80a2960 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a34d6:	4285      	cmp	r5, r0
 80a34d8:	d002      	beq.n	80a34e0 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a34da:	6960      	ldr	r0, [r4, #20]
 80a34dc:	f7ff fa38 	bl	80a2950 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a34e0:	f7ff fa3e 	bl	80a2960 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a34e4:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a34e6:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a34e8:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a34ea:	8723      	strh	r3, [r4, #56]	; 0x38
 80a34ec:	bd38      	pop	{r3, r4, r5, pc}

080a34ee <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a34ee:	b530      	push	{r4, r5, lr}
 80a34f0:	b087      	sub	sp, #28
 80a34f2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a34f6:	2502      	movs	r5, #2
 80a34f8:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a34fc:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3500:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a3502:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3504:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a3508:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a350c:	799c      	ldrb	r4, [r3, #6]
 80a350e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3512:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3514:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3516:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a351a:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a351e:	2310      	movs	r3, #16
 80a3520:	9301      	str	r3, [sp, #4]
 80a3522:	ab02      	add	r3, sp, #8
 80a3524:	9300      	str	r3, [sp, #0]
 80a3526:	6940      	ldr	r0, [r0, #20]
 80a3528:	2300      	movs	r3, #0
 80a352a:	f7ff fa09 	bl	80a2940 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a352e:	b007      	add	sp, #28
 80a3530:	bd30      	pop	{r4, r5, pc}

080a3532 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3532:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3534:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3536:	4605      	mov	r5, r0
 80a3538:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a353a:	b113      	cbz	r3, 80a3542 <_ZN3UDP5writeEPKhj+0x10>
 80a353c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a353e:	1a24      	subs	r4, r4, r0
 80a3540:	e000      	b.n	80a3544 <_ZN3UDP5writeEPKhj+0x12>
 80a3542:	461c      	mov	r4, r3
 80a3544:	4294      	cmp	r4, r2
 80a3546:	bf28      	it	cs
 80a3548:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a354a:	4418      	add	r0, r3
 80a354c:	4622      	mov	r2, r4
 80a354e:	f001 fd59 	bl	80a5004 <memcpy>
    _offset += size;
 80a3552:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3554:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a3556:	4423      	add	r3, r4
 80a3558:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a355a:	bd38      	pop	{r3, r4, r5, pc}

080a355c <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a355c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a355e:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3560:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a3562:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3564:	460e      	mov	r6, r1
 80a3566:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a3568:	4798      	blx	r3
 80a356a:	b188      	cbz	r0, 80a3590 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a356c:	6823      	ldr	r3, [r4, #0]
 80a356e:	4620      	mov	r0, r4
 80a3570:	691b      	ldr	r3, [r3, #16]
 80a3572:	4798      	blx	r3
 80a3574:	4285      	cmp	r5, r0
 80a3576:	bfa8      	it	ge
 80a3578:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a357a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a357c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a357e:	462a      	mov	r2, r5
 80a3580:	4419      	add	r1, r3
 80a3582:	4630      	mov	r0, r6
 80a3584:	f001 fd3e 	bl	80a5004 <memcpy>
      _offset += read;
 80a3588:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a358a:	442b      	add	r3, r5
 80a358c:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a358e:	e001      	b.n	80a3594 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a3590:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a3594:	4628      	mov	r0, r5
 80a3596:	bd70      	pop	{r4, r5, r6, pc}

080a3598 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3598:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a359a:	4604      	mov	r4, r0
 80a359c:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a359e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a35a0:	460d      	mov	r5, r1
 80a35a2:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a35a4:	f7ff fc96 	bl	80a2ed4 <_ZN5spark12NetworkClass4fromEm>
 80a35a8:	6803      	ldr	r3, [r0, #0]
 80a35aa:	68db      	ldr	r3, [r3, #12]
 80a35ac:	4798      	blx	r3
 80a35ae:	b310      	cbz	r0, 80a35f6 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a35b0:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a35b2:	f7ff f9d5 	bl	80a2960 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a35b6:	4287      	cmp	r7, r0
 80a35b8:	d01d      	beq.n	80a35f6 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a35ba:	b1e5      	cbz	r5, 80a35f6 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a35bc:	ab08      	add	r3, sp, #32
 80a35be:	2210      	movs	r2, #16
 80a35c0:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a35c4:	9301      	str	r3, [sp, #4]
 80a35c6:	eb0d 0302 	add.w	r3, sp, r2
 80a35ca:	9300      	str	r3, [sp, #0]
 80a35cc:	4629      	mov	r1, r5
 80a35ce:	2300      	movs	r3, #0
 80a35d0:	4632      	mov	r2, r6
 80a35d2:	6960      	ldr	r0, [r4, #20]
 80a35d4:	f7ff f9ac 	bl	80a2930 <socket_receivefrom>
        if (ret >= 0)
 80a35d8:	1e05      	subs	r5, r0, #0
 80a35da:	db0e      	blt.n	80a35fa <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a35dc:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a35e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a35e4:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a35e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a35ea:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a35ec:	f104 001c 	add.w	r0, r4, #28
 80a35f0:	f7ff fc00 	bl	80a2df4 <_ZN9IPAddressaSEPKh>
 80a35f4:	e001      	b.n	80a35fa <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a35f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a35fa:	4628      	mov	r0, r5
 80a35fc:	b009      	add	sp, #36	; 0x24
 80a35fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3600 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a3600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3604:	4606      	mov	r6, r0
 80a3606:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a3608:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a360a:	460d      	mov	r5, r1
 80a360c:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a360e:	f7ff fc61 	bl	80a2ed4 <_ZN5spark12NetworkClass4fromEm>
 80a3612:	6803      	ldr	r3, [r0, #0]
 80a3614:	68db      	ldr	r3, [r3, #12]
 80a3616:	4798      	blx	r3
 80a3618:	b1f8      	cbz	r0, 80a365a <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a361a:	4628      	mov	r0, r5
 80a361c:	f001 fd68 	bl	80a50f0 <strlen>
 80a3620:	2400      	movs	r4, #0
 80a3622:	b281      	uxth	r1, r0
 80a3624:	9400      	str	r4, [sp, #0]
 80a3626:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a3628:	aa03      	add	r2, sp, #12
 80a362a:	4628      	mov	r0, r5
 80a362c:	f7ff fa60 	bl	80a2af0 <inet_gethostbyname>
 80a3630:	b990      	cbnz	r0, 80a3658 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a3632:	a903      	add	r1, sp, #12
 80a3634:	a808      	add	r0, sp, #32
 80a3636:	f7ff fba9 	bl	80a2d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a363a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a363c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a363e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a3640:	4b07      	ldr	r3, [pc, #28]	; (80a3660 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a3642:	ad09      	add	r5, sp, #36	; 0x24
 80a3644:	930e      	str	r3, [sp, #56]	; 0x38
 80a3646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a364a:	682b      	ldr	r3, [r5, #0]
 80a364c:	4642      	mov	r2, r8
 80a364e:	7023      	strb	r3, [r4, #0]
 80a3650:	a90e      	add	r1, sp, #56	; 0x38
 80a3652:	4630      	mov	r0, r6
 80a3654:	47b8      	blx	r7
 80a3656:	e000      	b.n	80a365a <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a3658:	4620      	mov	r0, r4
}
 80a365a:	b014      	add	sp, #80	; 0x50
 80a365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3660:	080a5340 	.word	0x080a5340

080a3664 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a3664:	b570      	push	{r4, r5, r6, lr}
 80a3666:	4604      	mov	r4, r0
 80a3668:	4606      	mov	r6, r0
 80a366a:	4b05      	ldr	r3, [pc, #20]	; (80a3680 <_ZN3UDP8remoteIPEv+0x1c>)
 80a366c:	f101 0520 	add.w	r5, r1, #32
 80a3670:	f844 3b04 	str.w	r3, [r4], #4
 80a3674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3678:	682b      	ldr	r3, [r5, #0]
 80a367a:	4630      	mov	r0, r6
 80a367c:	7023      	strb	r3, [r4, #0]
 80a367e:	bd70      	pop	{r4, r5, r6, pc}
 80a3680:	080a5340 	.word	0x080a5340

080a3684 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3684:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3686:	4694      	mov	ip, r2
 80a3688:	468e      	mov	lr, r1
 80a368a:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a368c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a368e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3690:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a3692:	4a09      	ldr	r2, [pc, #36]	; (80a36b8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a3694:	ac03      	add	r4, sp, #12
 80a3696:	1d1d      	adds	r5, r3, #4
 80a3698:	9202      	str	r2, [sp, #8]
 80a369a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a369c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a369e:	682b      	ldr	r3, [r5, #0]
 80a36a0:	4662      	mov	r2, ip
 80a36a2:	7023      	strb	r3, [r4, #0]
 80a36a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a36a8:	4671      	mov	r1, lr
 80a36aa:	9300      	str	r3, [sp, #0]
 80a36ac:	4630      	mov	r0, r6
 80a36ae:	ab02      	add	r3, sp, #8
 80a36b0:	47b8      	blx	r7
    }
 80a36b2:	b009      	add	sp, #36	; 0x24
 80a36b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a36b6:	bf00      	nop
 80a36b8:	080a5340 	.word	0x080a5340

080a36bc <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a36be:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a36c0:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a36c2:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a36c4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a36c6:	4b0d      	ldr	r3, [pc, #52]	; (80a36fc <_ZN3UDP9endPacketEv+0x40>)
 80a36c8:	ad03      	add	r5, sp, #12
 80a36ca:	f100 0620 	add.w	r6, r0, #32
 80a36ce:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a36d2:	9302      	str	r3, [sp, #8]
 80a36d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a36d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a36d8:	6833      	ldr	r3, [r6, #0]
 80a36da:	4672      	mov	r2, lr
 80a36dc:	702b      	strb	r3, [r5, #0]
 80a36de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a36e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a36e2:	9300      	str	r3, [sp, #0]
 80a36e4:	4620      	mov	r0, r4
 80a36e6:	ab02      	add	r3, sp, #8
 80a36e8:	47b8      	blx	r7
 80a36ea:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a36ec:	6823      	ldr	r3, [r4, #0]
 80a36ee:	4620      	mov	r0, r4
 80a36f0:	69db      	ldr	r3, [r3, #28]
 80a36f2:	4798      	blx	r3
    return result;
}
 80a36f4:	4628      	mov	r0, r5
 80a36f6:	b009      	add	sp, #36	; 0x24
 80a36f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a36fa:	bf00      	nop
 80a36fc:	080a5340 	.word	0x080a5340

080a3700 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a3700:	b538      	push	{r3, r4, r5, lr}
 80a3702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3706:	6083      	str	r3, [r0, #8]
 80a3708:	4b0b      	ldr	r3, [pc, #44]	; (80a3738 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a370a:	2500      	movs	r5, #0
 80a370c:	f103 0208 	add.w	r2, r3, #8
 80a3710:	336c      	adds	r3, #108	; 0x6c
 80a3712:	6002      	str	r2, [r0, #0]
 80a3714:	6103      	str	r3, [r0, #16]
 80a3716:	6045      	str	r5, [r0, #4]
 80a3718:	4604      	mov	r4, r0
 80a371a:	f7ff f921 	bl	80a2960 <socket_handle_invalid>
 80a371e:	6160      	str	r0, [r4, #20]
 80a3720:	f104 001c 	add.w	r0, r4, #28
 80a3724:	f7ff fb24 	bl	80a2d70 <_ZN9IPAddressC1Ev>
 80a3728:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a372c:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a372e:	8725      	strh	r5, [r4, #56]	; 0x38
 80a3730:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a3732:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a3734:	4620      	mov	r0, r4
 80a3736:	bd38      	pop	{r3, r4, r5, pc}
 80a3738:	080a54b4 	.word	0x080a54b4

080a373c <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a373c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a373e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3742:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a3744:	b123      	cbz	r3, 80a3750 <_ZN3UDP13releaseBufferEv+0x14>
 80a3746:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a3748:	b110      	cbz	r0, 80a3750 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a374a:	2101      	movs	r1, #1
 80a374c:	f000 fb57 	bl	80a3dfe <_ZdlPvj>
    }
    _buffer = NULL;
 80a3750:	2300      	movs	r3, #0
 80a3752:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a3754:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a3758:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a375a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a375c:	8723      	strh	r3, [r4, #56]	; 0x38
 80a375e:	bd10      	pop	{r4, pc}

080a3760 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a3760:	b570      	push	{r4, r5, r6, lr}
 80a3762:	4604      	mov	r4, r0
 80a3764:	4616      	mov	r6, r2
 80a3766:	460d      	mov	r5, r1
    releaseBuffer();
 80a3768:	f7ff ffe8 	bl	80a373c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a376c:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a376e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a3770:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a3772:	b93e      	cbnz	r6, 80a3784 <_ZN3UDP9setBufferEjPh+0x24>
 80a3774:	b135      	cbz	r5, 80a3784 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a3776:	4628      	mov	r0, r5
 80a3778:	f7fc fc8f 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a377c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a377e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a3780:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a3784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3786:	b103      	cbz	r3, 80a378a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a3788:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a378a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a378c:	3000      	adds	r0, #0
 80a378e:	bf18      	it	ne
 80a3790:	2001      	movne	r0, #1
 80a3792:	bd70      	pop	{r4, r5, r6, pc}

080a3794 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3796:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3798:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a379a:	4605      	mov	r5, r0
 80a379c:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a379e:	b91a      	cbnz	r2, 80a37a8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a37a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a37a2:	b109      	cbz	r1, 80a37a8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a37a4:	f7ff ffdc 	bl	80a3760 <_ZN3UDP9setBufferEjPh>
 80a37a8:	f105 0620 	add.w	r6, r5, #32
 80a37ac:	3404      	adds	r4, #4
 80a37ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a37b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a37b2:	6823      	ldr	r3, [r4, #0]
 80a37b4:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a37b6:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a37b8:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a37ba:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a37bc:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a37be:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a37c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a37c2 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a37c2:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a37c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a37c6:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a37c8:	b91a      	cbnz	r2, 80a37d2 <_ZN3UDP11parsePacketEm+0x10>
 80a37ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a37cc:	b109      	cbz	r1, 80a37d2 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a37ce:	f7ff ffc7 	bl	80a3760 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a37d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a37d4:	2300      	movs	r3, #0
 80a37d6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a37d8:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a37da:	b141      	cbz	r1, 80a37ee <_ZN3UDP11parsePacketEm+0x2c>
 80a37dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a37de:	b132      	cbz	r2, 80a37ee <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a37e0:	6820      	ldr	r0, [r4, #0]
 80a37e2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a37e4:	4620      	mov	r0, r4
 80a37e6:	47a8      	blx	r5
        if (result>0) {
 80a37e8:	2800      	cmp	r0, #0
            _total = result;
 80a37ea:	bfc8      	it	gt
 80a37ec:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a37ee:	6823      	ldr	r3, [r4, #0]
 80a37f0:	4620      	mov	r0, r4
}
 80a37f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a37f6:	691b      	ldr	r3, [r3, #16]
 80a37f8:	4718      	bx	r3

080a37fa <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a37fa:	4770      	bx	lr

080a37fc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a37fc:	7441      	strb	r1, [r0, #17]
 80a37fe:	4770      	bx	lr

080a3800 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a3800:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a3802:	7c00      	ldrb	r0, [r0, #16]
 80a3804:	f7ff f92c 	bl	80a2a60 <HAL_USART_Available_Data_For_Write>
}
 80a3808:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a380c:	bd08      	pop	{r3, pc}

080a380e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a380e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3810:	7c00      	ldrb	r0, [r0, #16]
 80a3812:	f7ff f8fd 	bl	80a2a10 <HAL_USART_Available_Data>
}
 80a3816:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a381a:	bd08      	pop	{r3, pc}

080a381c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a381c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a381e:	7c00      	ldrb	r0, [r0, #16]
 80a3820:	f7ff f906 	bl	80a2a30 <HAL_USART_Peek_Data>
}
 80a3824:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3828:	bf28      	it	cs
 80a382a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a382e:	bd08      	pop	{r3, pc}

080a3830 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3830:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3832:	7c00      	ldrb	r0, [r0, #16]
 80a3834:	f7ff f8f4 	bl	80a2a20 <HAL_USART_Read_Data>
}
 80a3838:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a383c:	bf28      	it	cs
 80a383e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3842:	bd08      	pop	{r3, pc}

080a3844 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3844:	7c00      	ldrb	r0, [r0, #16]
 80a3846:	f7ff b8fb 	b.w	80a2a40 <HAL_USART_Flush_Data>

080a384a <_ZN11USARTSerialD0Ev>:
 80a384a:	b510      	push	{r4, lr}
 80a384c:	4604      	mov	r4, r0
 80a384e:	2114      	movs	r1, #20
 80a3850:	f000 fad5 	bl	80a3dfe <_ZdlPvj>
 80a3854:	4620      	mov	r0, r4
 80a3856:	bd10      	pop	{r4, pc}

080a3858 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3858:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a385a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a385c:	4604      	mov	r4, r0
 80a385e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3860:	b925      	cbnz	r5, 80a386c <_ZN11USARTSerial5writeEh+0x14>
 80a3862:	7c00      	ldrb	r0, [r0, #16]
 80a3864:	f7ff f8fc 	bl	80a2a60 <HAL_USART_Available_Data_For_Write>
 80a3868:	2800      	cmp	r0, #0
 80a386a:	dd05      	ble.n	80a3878 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a386c:	4631      	mov	r1, r6
 80a386e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3874:	f7ff b8c4 	b.w	80a2a00 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3878:	4628      	mov	r0, r5
 80a387a:	bd70      	pop	{r4, r5, r6, pc}

080a387c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a387c:	b510      	push	{r4, lr}
 80a387e:	4604      	mov	r4, r0
 80a3880:	4608      	mov	r0, r1
 80a3882:	4611      	mov	r1, r2
 80a3884:	2200      	movs	r2, #0
 80a3886:	6062      	str	r2, [r4, #4]
 80a3888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a388c:	60a2      	str	r2, [r4, #8]
 80a388e:	4a05      	ldr	r2, [pc, #20]	; (80a38a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3890:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3892:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3894:	2201      	movs	r2, #1
 80a3896:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3898:	461a      	mov	r2, r3
 80a389a:	f7ff f8a9 	bl	80a29f0 <HAL_USART_Init>
}
 80a389e:	4620      	mov	r0, r4
 80a38a0:	bd10      	pop	{r4, pc}
 80a38a2:	bf00      	nop
 80a38a4:	080a552c 	.word	0x080a552c

080a38a8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a38a8:	7c00      	ldrb	r0, [r0, #16]
 80a38aa:	f7ff b8d1 	b.w	80a2a50 <HAL_USART_Is_Enabled>
	...

080a38b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a38b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a38b2:	4d0c      	ldr	r5, [pc, #48]	; (80a38e4 <_Z22__fetch_global_Serial1v+0x34>)
 80a38b4:	6829      	ldr	r1, [r5, #0]
 80a38b6:	f011 0401 	ands.w	r4, r1, #1
 80a38ba:	d111      	bne.n	80a38e0 <_Z22__fetch_global_Serial1v+0x30>
 80a38bc:	4628      	mov	r0, r5
 80a38be:	f7fc fbf0 	bl	80a00a2 <__cxa_guard_acquire>
 80a38c2:	b168      	cbz	r0, 80a38e0 <_Z22__fetch_global_Serial1v+0x30>
 80a38c4:	4a08      	ldr	r2, [pc, #32]	; (80a38e8 <_Z22__fetch_global_Serial1v+0x38>)
 80a38c6:	4621      	mov	r1, r4
 80a38c8:	4b08      	ldr	r3, [pc, #32]	; (80a38ec <_Z22__fetch_global_Serial1v+0x3c>)
 80a38ca:	4809      	ldr	r0, [pc, #36]	; (80a38f0 <_Z22__fetch_global_Serial1v+0x40>)
 80a38cc:	f7ff ffd6 	bl	80a387c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a38d0:	4628      	mov	r0, r5
 80a38d2:	f7fc fbeb 	bl	80a00ac <__cxa_guard_release>
 80a38d6:	4a07      	ldr	r2, [pc, #28]	; (80a38f4 <_Z22__fetch_global_Serial1v+0x44>)
 80a38d8:	4907      	ldr	r1, [pc, #28]	; (80a38f8 <_Z22__fetch_global_Serial1v+0x48>)
 80a38da:	4805      	ldr	r0, [pc, #20]	; (80a38f0 <_Z22__fetch_global_Serial1v+0x40>)
 80a38dc:	f000 fa8a 	bl	80a3df4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a38e0:	4803      	ldr	r0, [pc, #12]	; (80a38f0 <_Z22__fetch_global_Serial1v+0x40>)
 80a38e2:	bd38      	pop	{r3, r4, r5, pc}
 80a38e4:	200002c8 	.word	0x200002c8
 80a38e8:	200002cc 	.word	0x200002cc
 80a38ec:	20000244 	.word	0x20000244
 80a38f0:	20000230 	.word	0x20000230
 80a38f4:	2000009c 	.word	0x2000009c
 80a38f8:	080a37fb 	.word	0x080a37fb

080a38fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a38fc:	7441      	strb	r1, [r0, #17]
 80a38fe:	4770      	bx	lr

080a3900 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3900:	4770      	bx	lr

080a3902 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3902:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3904:	2100      	movs	r1, #0
 80a3906:	7c00      	ldrb	r0, [r0, #16]
 80a3908:	f7ff f8d2 	bl	80a2ab0 <HAL_USB_USART_Receive_Data>
}
 80a390c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3910:	bf28      	it	cs
 80a3912:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3916:	bd08      	pop	{r3, pc}

080a3918 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3918:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a391a:	2101      	movs	r1, #1
 80a391c:	7c00      	ldrb	r0, [r0, #16]
 80a391e:	f7ff f8c7 	bl	80a2ab0 <HAL_USB_USART_Receive_Data>
}
 80a3922:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3926:	bf28      	it	cs
 80a3928:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a392c:	bd08      	pop	{r3, pc}

080a392e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a392e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3930:	7c00      	ldrb	r0, [r0, #16]
 80a3932:	f7ff f8b5 	bl	80a2aa0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3936:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a393a:	bd08      	pop	{r3, pc}

080a393c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a393c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a393e:	7c00      	ldrb	r0, [r0, #16]
 80a3940:	f7ff f8a6 	bl	80a2a90 <HAL_USB_USART_Available_Data>
}
 80a3944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3948:	bd08      	pop	{r3, pc}

080a394a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a394a:	7c00      	ldrb	r0, [r0, #16]
 80a394c:	f7ff b8c0 	b.w	80a2ad0 <HAL_USB_USART_Flush_Data>

080a3950 <_ZN9USBSerialD0Ev>:
 80a3950:	b510      	push	{r4, lr}
 80a3952:	4604      	mov	r4, r0
 80a3954:	2114      	movs	r1, #20
 80a3956:	f000 fa52 	bl	80a3dfe <_ZdlPvj>
 80a395a:	4620      	mov	r0, r4
 80a395c:	bd10      	pop	{r4, pc}

080a395e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a395e:	b538      	push	{r3, r4, r5, lr}
 80a3960:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3962:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3964:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3966:	f7ff f89b 	bl	80a2aa0 <HAL_USB_USART_Available_Data_For_Write>
 80a396a:	2800      	cmp	r0, #0
 80a396c:	dc01      	bgt.n	80a3972 <_ZN9USBSerial5writeEh+0x14>
 80a396e:	7c60      	ldrb	r0, [r4, #17]
 80a3970:	b128      	cbz	r0, 80a397e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3972:	4629      	mov	r1, r5
 80a3974:	7c20      	ldrb	r0, [r4, #16]
 80a3976:	f7ff f8a3 	bl	80a2ac0 <HAL_USB_USART_Send_Data>
 80a397a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a397e:	bd38      	pop	{r3, r4, r5, pc}

080a3980 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3980:	b510      	push	{r4, lr}
 80a3982:	4604      	mov	r4, r0
 80a3984:	2300      	movs	r3, #0
 80a3986:	6063      	str	r3, [r4, #4]
 80a3988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a398c:	60a3      	str	r3, [r4, #8]
 80a398e:	4b05      	ldr	r3, [pc, #20]	; (80a39a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3990:	4608      	mov	r0, r1
 80a3992:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3994:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3996:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3998:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a399a:	4611      	mov	r1, r2
 80a399c:	f7ff f868 	bl	80a2a70 <HAL_USB_USART_Init>
}
 80a39a0:	4620      	mov	r0, r4
 80a39a2:	bd10      	pop	{r4, pc}
 80a39a4:	080a555c 	.word	0x080a555c

080a39a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a39a8:	2200      	movs	r2, #0
 80a39aa:	7c00      	ldrb	r0, [r0, #16]
 80a39ac:	f7ff b868 	b.w	80a2a80 <HAL_USB_USART_Begin>

080a39b0 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a39b0:	7c00      	ldrb	r0, [r0, #16]
 80a39b2:	f7ff b895 	b.w	80a2ae0 <HAL_USB_USART_Is_Enabled>

080a39b6 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a39b6:	f7ff bffb 	b.w	80a39b0 <_ZN9USBSerial9isEnabledEv>
	...

080a39bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a39bc:	b510      	push	{r4, lr}
 80a39be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a39c0:	2214      	movs	r2, #20
 80a39c2:	2100      	movs	r1, #0
 80a39c4:	f001 fb29 	bl	80a501a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a39c8:	4b05      	ldr	r3, [pc, #20]	; (80a39e0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a39ca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a39cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a39ce:	4b05      	ldr	r3, [pc, #20]	; (80a39e4 <_Z19acquireSerialBufferv+0x28>)
 80a39d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a39d2:	f240 1301 	movw	r3, #257	; 0x101
 80a39d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a39d8:	2381      	movs	r3, #129	; 0x81
 80a39da:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a39dc:	bd10      	pop	{r4, pc}
 80a39de:	bf00      	nop
 80a39e0:	200003d5 	.word	0x200003d5
 80a39e4:	20000354 	.word	0x20000354

080a39e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a39e8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a39ea:	4d0e      	ldr	r5, [pc, #56]	; (80a3a24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a39ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a39ee:	a801      	add	r0, sp, #4
 80a39f0:	f7ff ffe4 	bl	80a39bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a39f4:	6829      	ldr	r1, [r5, #0]
 80a39f6:	f011 0401 	ands.w	r4, r1, #1
 80a39fa:	d110      	bne.n	80a3a1e <_Z16_fetch_usbserialv+0x36>
 80a39fc:	4628      	mov	r0, r5
 80a39fe:	f7fc fb50 	bl	80a00a2 <__cxa_guard_acquire>
 80a3a02:	b160      	cbz	r0, 80a3a1e <_Z16_fetch_usbserialv+0x36>
 80a3a04:	aa01      	add	r2, sp, #4
 80a3a06:	4621      	mov	r1, r4
 80a3a08:	4807      	ldr	r0, [pc, #28]	; (80a3a28 <_Z16_fetch_usbserialv+0x40>)
 80a3a0a:	f7ff ffb9 	bl	80a3980 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3a0e:	4628      	mov	r0, r5
 80a3a10:	f7fc fb4c 	bl	80a00ac <__cxa_guard_release>
 80a3a14:	4a05      	ldr	r2, [pc, #20]	; (80a3a2c <_Z16_fetch_usbserialv+0x44>)
 80a3a16:	4906      	ldr	r1, [pc, #24]	; (80a3a30 <_Z16_fetch_usbserialv+0x48>)
 80a3a18:	4803      	ldr	r0, [pc, #12]	; (80a3a28 <_Z16_fetch_usbserialv+0x40>)
 80a3a1a:	f000 f9eb 	bl	80a3df4 <__aeabi_atexit>
	return _usbserial;
}
 80a3a1e:	4802      	ldr	r0, [pc, #8]	; (80a3a28 <_Z16_fetch_usbserialv+0x40>)
 80a3a20:	b007      	add	sp, #28
 80a3a22:	bd30      	pop	{r4, r5, pc}
 80a3a24:	20000350 	.word	0x20000350
 80a3a28:	200004d8 	.word	0x200004d8
 80a3a2c:	2000009c 	.word	0x2000009c
 80a3a30:	080a3901 	.word	0x080a3901

080a3a34 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3a34:	b510      	push	{r4, lr}
 80a3a36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3a38:	2214      	movs	r2, #20
 80a3a3a:	2100      	movs	r1, #0
 80a3a3c:	f001 faed 	bl	80a501a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3a40:	4b05      	ldr	r3, [pc, #20]	; (80a3a58 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3a42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3a44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3a46:	4b05      	ldr	r3, [pc, #20]	; (80a3a5c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3a48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3a4a:	f240 1301 	movw	r3, #257	; 0x101
 80a3a4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3a50:	2381      	movs	r3, #129	; 0x81
 80a3a52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3a54:	bd10      	pop	{r4, pc}
 80a3a56:	bf00      	nop
 80a3a58:	20000588 	.word	0x20000588
 80a3a5c:	200004f0 	.word	0x200004f0

080a3a60 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3a60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3a62:	4c0e      	ldr	r4, [pc, #56]	; (80a3a9c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3a64:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3a66:	a801      	add	r0, sp, #4
 80a3a68:	f7ff ffe4 	bl	80a3a34 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3a6c:	6823      	ldr	r3, [r4, #0]
 80a3a6e:	07db      	lsls	r3, r3, #31
 80a3a70:	d410      	bmi.n	80a3a94 <_Z17_fetch_usbserial1v+0x34>
 80a3a72:	4620      	mov	r0, r4
 80a3a74:	f7fc fb15 	bl	80a00a2 <__cxa_guard_acquire>
 80a3a78:	b160      	cbz	r0, 80a3a94 <_Z17_fetch_usbserial1v+0x34>
 80a3a7a:	aa01      	add	r2, sp, #4
 80a3a7c:	2101      	movs	r1, #1
 80a3a7e:	4808      	ldr	r0, [pc, #32]	; (80a3aa0 <_Z17_fetch_usbserial1v+0x40>)
 80a3a80:	f7ff ff7e 	bl	80a3980 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3a84:	4620      	mov	r0, r4
 80a3a86:	f7fc fb11 	bl	80a00ac <__cxa_guard_release>
 80a3a8a:	4a06      	ldr	r2, [pc, #24]	; (80a3aa4 <_Z17_fetch_usbserial1v+0x44>)
 80a3a8c:	4906      	ldr	r1, [pc, #24]	; (80a3aa8 <_Z17_fetch_usbserial1v+0x48>)
 80a3a8e:	4804      	ldr	r0, [pc, #16]	; (80a3aa0 <_Z17_fetch_usbserial1v+0x40>)
 80a3a90:	f000 f9b0 	bl	80a3df4 <__aeabi_atexit>
  return _usbserial1;
}
 80a3a94:	4802      	ldr	r0, [pc, #8]	; (80a3aa0 <_Z17_fetch_usbserial1v+0x40>)
 80a3a96:	b006      	add	sp, #24
 80a3a98:	bd10      	pop	{r4, pc}
 80a3a9a:	bf00      	nop
 80a3a9c:	200004ec 	.word	0x200004ec
 80a3aa0:	20000574 	.word	0x20000574
 80a3aa4:	2000009c 	.word	0x2000009c
 80a3aa8:	080a3901 	.word	0x080a3901

080a3aac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3aac:	2200      	movs	r2, #0
 80a3aae:	4611      	mov	r1, r2
 80a3ab0:	6840      	ldr	r0, [r0, #4]
 80a3ab2:	f7ff b879 	b.w	80a2ba8 <network_ready>

080a3ab6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3ab8:	4616      	mov	r6, r2
 80a3aba:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3abc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3abe:	460f      	mov	r7, r1
 80a3ac0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3ac2:	2100      	movs	r1, #0
 80a3ac4:	a803      	add	r0, sp, #12
 80a3ac6:	f001 faa8 	bl	80a501a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3aca:	4630      	mov	r0, r6
 80a3acc:	f001 fb10 	bl	80a50f0 <strlen>
 80a3ad0:	2500      	movs	r5, #0
 80a3ad2:	9500      	str	r5, [sp, #0]
 80a3ad4:	b281      	uxth	r1, r0
 80a3ad6:	687b      	ldr	r3, [r7, #4]
 80a3ad8:	aa03      	add	r2, sp, #12
 80a3ada:	4630      	mov	r0, r6
 80a3adc:	f7ff f808 	bl	80a2af0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3ae0:	b120      	cbz	r0, 80a3aec <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3ae2:	4629      	mov	r1, r5
 80a3ae4:	4620      	mov	r0, r4
 80a3ae6:	f7ff f963 	bl	80a2db0 <_ZN9IPAddressC1Em>
 80a3aea:	e003      	b.n	80a3af4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3aec:	a903      	add	r1, sp, #12
 80a3aee:	4620      	mov	r0, r4
 80a3af0:	f7ff f94c 	bl	80a2d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3af4:	4620      	mov	r0, r4
 80a3af6:	b009      	add	sp, #36	; 0x24
 80a3af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3afa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3afa:	2200      	movs	r2, #0
 80a3afc:	4611      	mov	r1, r2
 80a3afe:	6840      	ldr	r0, [r0, #4]
 80a3b00:	f7ff b872 	b.w	80a2be8 <network_listening>

080a3b04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3b04:	2200      	movs	r2, #0
 80a3b06:	4611      	mov	r1, r2
 80a3b08:	6840      	ldr	r0, [r0, #4]
 80a3b0a:	f7ff b87d 	b.w	80a2c08 <network_get_listen_timeout>

080a3b0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3b0e:	2200      	movs	r2, #0
 80a3b10:	6840      	ldr	r0, [r0, #4]
 80a3b12:	f7ff b871 	b.w	80a2bf8 <network_set_listen_timeout>

080a3b16 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3b16:	2200      	movs	r2, #0
 80a3b18:	f081 0101 	eor.w	r1, r1, #1
 80a3b1c:	6840      	ldr	r0, [r0, #4]
 80a3b1e:	f7ff b85b 	b.w	80a2bd8 <network_listen>

080a3b22 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3b22:	2300      	movs	r3, #0
 80a3b24:	461a      	mov	r2, r3
 80a3b26:	4619      	mov	r1, r3
 80a3b28:	6840      	ldr	r0, [r0, #4]
 80a3b2a:	f7ff b84d 	b.w	80a2bc8 <network_off>

080a3b2e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3b2e:	2300      	movs	r3, #0
 80a3b30:	461a      	mov	r2, r3
 80a3b32:	4619      	mov	r1, r3
 80a3b34:	6840      	ldr	r0, [r0, #4]
 80a3b36:	f7ff b83f 	b.w	80a2bb8 <network_on>

080a3b3a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3b3a:	2200      	movs	r2, #0
 80a3b3c:	4611      	mov	r1, r2
 80a3b3e:	6840      	ldr	r0, [r0, #4]
 80a3b40:	f7ff b822 	b.w	80a2b88 <network_connecting>

080a3b44 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3b44:	2200      	movs	r2, #0
 80a3b46:	2102      	movs	r1, #2
 80a3b48:	6840      	ldr	r0, [r0, #4]
 80a3b4a:	f7ff b825 	b.w	80a2b98 <network_disconnect>

080a3b4e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3b4e:	2300      	movs	r3, #0
 80a3b50:	461a      	mov	r2, r3
 80a3b52:	6840      	ldr	r0, [r0, #4]
 80a3b54:	f7ff b810 	b.w	80a2b78 <network_connect>

080a3b58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3b58:	4b02      	ldr	r3, [pc, #8]	; (80a3b64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3b5a:	2204      	movs	r2, #4
 80a3b5c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3b5e:	4a02      	ldr	r2, [pc, #8]	; (80a3b68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3b60:	601a      	str	r2, [r3, #0]
 80a3b62:	4770      	bx	lr
 80a3b64:	2000068c 	.word	0x2000068c
 80a3b68:	080a558c 	.word	0x080a558c

080a3b6c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3b6c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3b6e:	4b14      	ldr	r3, [pc, #80]	; (80a3bc0 <serialEventRun+0x54>)
 80a3b70:	b133      	cbz	r3, 80a3b80 <serialEventRun+0x14>
 80a3b72:	f7ff ff39 	bl	80a39e8 <_Z16_fetch_usbserialv>
 80a3b76:	6803      	ldr	r3, [r0, #0]
 80a3b78:	691b      	ldr	r3, [r3, #16]
 80a3b7a:	4798      	blx	r3
 80a3b7c:	2800      	cmp	r0, #0
 80a3b7e:	dc16      	bgt.n	80a3bae <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3b80:	4b10      	ldr	r3, [pc, #64]	; (80a3bc4 <serialEventRun+0x58>)
 80a3b82:	b133      	cbz	r3, 80a3b92 <serialEventRun+0x26>
 80a3b84:	f7ff fe94 	bl	80a38b0 <_Z22__fetch_global_Serial1v>
 80a3b88:	6803      	ldr	r3, [r0, #0]
 80a3b8a:	691b      	ldr	r3, [r3, #16]
 80a3b8c:	4798      	blx	r3
 80a3b8e:	2800      	cmp	r0, #0
 80a3b90:	dc10      	bgt.n	80a3bb4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3b92:	4b0d      	ldr	r3, [pc, #52]	; (80a3bc8 <serialEventRun+0x5c>)
 80a3b94:	b10b      	cbz	r3, 80a3b9a <serialEventRun+0x2e>
 80a3b96:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3b9a:	4b0c      	ldr	r3, [pc, #48]	; (80a3bcc <serialEventRun+0x60>)
 80a3b9c:	b17b      	cbz	r3, 80a3bbe <serialEventRun+0x52>
 80a3b9e:	f7ff ff5f 	bl	80a3a60 <_Z17_fetch_usbserial1v>
 80a3ba2:	6803      	ldr	r3, [r0, #0]
 80a3ba4:	691b      	ldr	r3, [r3, #16]
 80a3ba6:	4798      	blx	r3
 80a3ba8:	2800      	cmp	r0, #0
 80a3baa:	dc06      	bgt.n	80a3bba <serialEventRun+0x4e>
 80a3bac:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3bae:	f3af 8000 	nop.w
 80a3bb2:	e7e5      	b.n	80a3b80 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3bb4:	f3af 8000 	nop.w
 80a3bb8:	e7eb      	b.n	80a3b92 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a3bba:	f3af 8000 	nop.w
 80a3bbe:	bd08      	pop	{r3, pc}
	...

080a3bd0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3bd0:	b508      	push	{r3, lr}
	serialEventRun();
 80a3bd2:	f7ff ffcb 	bl	80a3b6c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3bd6:	f7fe fe19 	bl	80a280c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3bda:	4b01      	ldr	r3, [pc, #4]	; (80a3be0 <_post_loop+0x10>)
 80a3bdc:	6018      	str	r0, [r3, #0]
 80a3bde:	bd08      	pop	{r3, pc}
 80a3be0:	2000069c 	.word	0x2000069c

080a3be4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3be4:	4802      	ldr	r0, [pc, #8]	; (80a3bf0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3be6:	4a03      	ldr	r2, [pc, #12]	; (80a3bf4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3be8:	4903      	ldr	r1, [pc, #12]	; (80a3bf8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3bea:	1a12      	subs	r2, r2, r0
 80a3bec:	f001 ba0a 	b.w	80a5004 <memcpy>
 80a3bf0:	40024000 	.word	0x40024000
 80a3bf4:	40024004 	.word	0x40024004
 80a3bf8:	080a5660 	.word	0x080a5660

080a3bfc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3bfc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3bfe:	2300      	movs	r3, #0
 80a3c00:	9300      	str	r3, [sp, #0]
 80a3c02:	461a      	mov	r2, r3
 80a3c04:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3c08:	f7fe ff9c 	bl	80a2b44 <system_ctrl_set_result>
}
 80a3c0c:	b003      	add	sp, #12
 80a3c0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3c14 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3c14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3c16:	8843      	ldrh	r3, [r0, #2]
 80a3c18:	2b0a      	cmp	r3, #10
 80a3c1a:	d008      	beq.n	80a3c2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3c1c:	2b50      	cmp	r3, #80	; 0x50
 80a3c1e:	d109      	bne.n	80a3c34 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3c20:	4b09      	ldr	r3, [pc, #36]	; (80a3c48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3c22:	681b      	ldr	r3, [r3, #0]
 80a3c24:	b13b      	cbz	r3, 80a3c36 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3c26:	b003      	add	sp, #12
 80a3c28:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3c2c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3c2e:	f7ff ffe5 	bl	80a3bfc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3c32:	e006      	b.n	80a3c42 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3c34:	2300      	movs	r3, #0
 80a3c36:	9300      	str	r3, [sp, #0]
 80a3c38:	461a      	mov	r2, r3
 80a3c3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3c3e:	f7fe ff81 	bl	80a2b44 <system_ctrl_set_result>
        break;
    }
}
 80a3c42:	b003      	add	sp, #12
 80a3c44:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3c48:	20000694 	.word	0x20000694

080a3c4c <module_user_init_hook>:

void module_user_init_hook()
{
 80a3c4c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3c4e:	4c10      	ldr	r4, [pc, #64]	; (80a3c90 <module_user_init_hook+0x44>)
 80a3c50:	4d10      	ldr	r5, [pc, #64]	; (80a3c94 <module_user_init_hook+0x48>)
 80a3c52:	6823      	ldr	r3, [r4, #0]
 80a3c54:	42ab      	cmp	r3, r5
 80a3c56:	4b10      	ldr	r3, [pc, #64]	; (80a3c98 <module_user_init_hook+0x4c>)
 80a3c58:	bf0c      	ite	eq
 80a3c5a:	2201      	moveq	r2, #1
 80a3c5c:	2200      	movne	r2, #0
 80a3c5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3c60:	d002      	beq.n	80a3c68 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3c62:	f7ff ffbf 	bl	80a3be4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3c66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3c68:	f7fe fdc0 	bl	80a27ec <HAL_RNG_GetRandomNumber>
 80a3c6c:	4604      	mov	r4, r0
    srand(seed);
 80a3c6e:	f001 f9dd 	bl	80a502c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3c72:	4b0a      	ldr	r3, [pc, #40]	; (80a3c9c <module_user_init_hook+0x50>)
 80a3c74:	b113      	cbz	r3, 80a3c7c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3c76:	4620      	mov	r0, r4
 80a3c78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3c7c:	2100      	movs	r1, #0
 80a3c7e:	4807      	ldr	r0, [pc, #28]	; (80a3c9c <module_user_init_hook+0x50>)
 80a3c80:	f7fe ff6a 	bl	80a2b58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3c88:	2100      	movs	r1, #0
 80a3c8a:	4805      	ldr	r0, [pc, #20]	; (80a3ca0 <module_user_init_hook+0x54>)
 80a3c8c:	f7fe bf50 	b.w	80a2b30 <system_ctrl_set_app_request_handler>
 80a3c90:	40024000 	.word	0x40024000
 80a3c94:	9a271c1e 	.word	0x9a271c1e
 80a3c98:	20000698 	.word	0x20000698
 80a3c9c:	00000000 	.word	0x00000000
 80a3ca0:	080a3c15 	.word	0x080a3c15

080a3ca4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3ca4:	b510      	push	{r4, lr}
 80a3ca6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3ca8:	480f      	ldr	r0, [pc, #60]	; (80a3ce8 <pinAvailable+0x44>)
 80a3caa:	f7ff fb2f 	bl	80a330c <_ZN8SPIClass9isEnabledEv>
 80a3cae:	b128      	cbz	r0, 80a3cbc <pinAvailable+0x18>
 80a3cb0:	f1a4 030d 	sub.w	r3, r4, #13
 80a3cb4:	2b02      	cmp	r3, #2
 80a3cb6:	d801      	bhi.n	80a3cbc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3cb8:	2000      	movs	r0, #0
 80a3cba:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3cbc:	f000 f840 	bl	80a3d40 <_Z19__fetch_global_Wirev>
 80a3cc0:	f7ff f839 	bl	80a2d36 <_ZN7TwoWire9isEnabledEv>
 80a3cc4:	b108      	cbz	r0, 80a3cca <pinAvailable+0x26>
 80a3cc6:	2c01      	cmp	r4, #1
 80a3cc8:	d9f6      	bls.n	80a3cb8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3cca:	f7ff fdf1 	bl	80a38b0 <_Z22__fetch_global_Serial1v>
 80a3cce:	f7ff fdeb 	bl	80a38a8 <_ZN11USARTSerial9isEnabledEv>
 80a3cd2:	b118      	cbz	r0, 80a3cdc <pinAvailable+0x38>
 80a3cd4:	f1a4 0312 	sub.w	r3, r4, #18
 80a3cd8:	2b01      	cmp	r3, #1
 80a3cda:	d9ed      	bls.n	80a3cb8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3cdc:	2c17      	cmp	r4, #23
 80a3cde:	bf8c      	ite	hi
 80a3ce0:	2000      	movhi	r0, #0
 80a3ce2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3ce4:	bd10      	pop	{r4, pc}
 80a3ce6:	bf00      	nop
 80a3ce8:	200006d0 	.word	0x200006d0

080a3cec <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3cec:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3cee:	b538      	push	{r3, r4, r5, lr}
 80a3cf0:	4604      	mov	r4, r0
 80a3cf2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3cf4:	d80a      	bhi.n	80a3d0c <pinMode+0x20>
 80a3cf6:	29ff      	cmp	r1, #255	; 0xff
 80a3cf8:	d008      	beq.n	80a3d0c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3cfa:	f7ff ffd3 	bl	80a3ca4 <pinAvailable>
 80a3cfe:	b128      	cbz	r0, 80a3d0c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3d00:	4629      	mov	r1, r5
 80a3d02:	4620      	mov	r0, r4
}
 80a3d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3d08:	f7fe bd90 	b.w	80a282c <HAL_Pin_Mode>
 80a3d0c:	bd38      	pop	{r3, r4, r5, pc}

080a3d0e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3d0e:	b538      	push	{r3, r4, r5, lr}
 80a3d10:	4604      	mov	r4, r0
 80a3d12:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3d14:	f7fe fd92 	bl	80a283c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3d18:	28ff      	cmp	r0, #255	; 0xff
 80a3d1a:	d010      	beq.n	80a3d3e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3d1c:	2806      	cmp	r0, #6
 80a3d1e:	d804      	bhi.n	80a3d2a <digitalWrite+0x1c>
 80a3d20:	234d      	movs	r3, #77	; 0x4d
 80a3d22:	fa23 f000 	lsr.w	r0, r3, r0
 80a3d26:	07c3      	lsls	r3, r0, #31
 80a3d28:	d409      	bmi.n	80a3d3e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3d2a:	4620      	mov	r0, r4
 80a3d2c:	f7ff ffba 	bl	80a3ca4 <pinAvailable>
 80a3d30:	b128      	cbz	r0, 80a3d3e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3d32:	4629      	mov	r1, r5
 80a3d34:	4620      	mov	r0, r4
}
 80a3d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3d3a:	f7fe bd87 	b.w	80a284c <HAL_GPIO_Write>
 80a3d3e:	bd38      	pop	{r3, r4, r5, pc}

080a3d40 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3d40:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3d42:	4d0b      	ldr	r5, [pc, #44]	; (80a3d70 <_Z19__fetch_global_Wirev+0x30>)
 80a3d44:	6829      	ldr	r1, [r5, #0]
 80a3d46:	f011 0401 	ands.w	r4, r1, #1
 80a3d4a:	d10f      	bne.n	80a3d6c <_Z19__fetch_global_Wirev+0x2c>
 80a3d4c:	4628      	mov	r0, r5
 80a3d4e:	f7fc f9a8 	bl	80a00a2 <__cxa_guard_acquire>
 80a3d52:	b158      	cbz	r0, 80a3d6c <_Z19__fetch_global_Wirev+0x2c>
 80a3d54:	4621      	mov	r1, r4
 80a3d56:	4807      	ldr	r0, [pc, #28]	; (80a3d74 <_Z19__fetch_global_Wirev+0x34>)
 80a3d58:	f7fe ffbe 	bl	80a2cd8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3d5c:	4628      	mov	r0, r5
 80a3d5e:	f7fc f9a5 	bl	80a00ac <__cxa_guard_release>
 80a3d62:	4a05      	ldr	r2, [pc, #20]	; (80a3d78 <_Z19__fetch_global_Wirev+0x38>)
 80a3d64:	4905      	ldr	r1, [pc, #20]	; (80a3d7c <_Z19__fetch_global_Wirev+0x3c>)
 80a3d66:	4803      	ldr	r0, [pc, #12]	; (80a3d74 <_Z19__fetch_global_Wirev+0x34>)
 80a3d68:	f000 f844 	bl	80a3df4 <__aeabi_atexit>
	return wire;
}
 80a3d6c:	4801      	ldr	r0, [pc, #4]	; (80a3d74 <_Z19__fetch_global_Wirev+0x34>)
 80a3d6e:	bd38      	pop	{r3, r4, r5, pc}
 80a3d70:	200006a0 	.word	0x200006a0
 80a3d74:	200006a4 	.word	0x200006a4
 80a3d78:	2000009c 	.word	0x2000009c
 80a3d7c:	080a2c81 	.word	0x080a2c81

080a3d80 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3d80:	b513      	push	{r0, r1, r4, lr}
 80a3d82:	4c08      	ldr	r4, [pc, #32]	; (80a3da4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3d84:	2300      	movs	r3, #0
 80a3d86:	461a      	mov	r2, r3
 80a3d88:	4619      	mov	r1, r3
 80a3d8a:	9300      	str	r3, [sp, #0]
 80a3d8c:	4620      	mov	r0, r4
 80a3d8e:	f7ff f825 	bl	80a2ddc <_ZN9IPAddressC1Ehhhh>
 80a3d92:	4620      	mov	r0, r4
 80a3d94:	4a04      	ldr	r2, [pc, #16]	; (80a3da8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3d96:	4905      	ldr	r1, [pc, #20]	; (80a3dac <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3d98:	b002      	add	sp, #8
 80a3d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3d9e:	f000 b829 	b.w	80a3df4 <__aeabi_atexit>
 80a3da2:	bf00      	nop
 80a3da4:	200006b8 	.word	0x200006b8
 80a3da8:	2000009c 	.word	0x2000009c
 80a3dac:	080a00b3 	.word	0x080a00b3

080a3db0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3db0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3db2:	4c0c      	ldr	r4, [pc, #48]	; (80a3de4 <_GLOBAL__sub_I_SPI+0x34>)
 80a3db4:	4e0c      	ldr	r6, [pc, #48]	; (80a3de8 <_GLOBAL__sub_I_SPI+0x38>)
 80a3db6:	4d0d      	ldr	r5, [pc, #52]	; (80a3dec <_GLOBAL__sub_I_SPI+0x3c>)
 80a3db8:	2100      	movs	r1, #0
 80a3dba:	4620      	mov	r0, r4
 80a3dbc:	f7ff fa26 	bl	80a320c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3dc0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3dc2:	4c0b      	ldr	r4, [pc, #44]	; (80a3df0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3dc4:	4632      	mov	r2, r6
 80a3dc6:	4629      	mov	r1, r5
 80a3dc8:	f000 f814 	bl	80a3df4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3dcc:	2101      	movs	r1, #1
 80a3dce:	4620      	mov	r0, r4
 80a3dd0:	f7ff fa1c 	bl	80a320c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3dd4:	4632      	mov	r2, r6
 80a3dd6:	4629      	mov	r1, r5
 80a3dd8:	4620      	mov	r0, r4
 80a3dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3dde:	f000 b809 	b.w	80a3df4 <__aeabi_atexit>
 80a3de2:	bf00      	nop
 80a3de4:	200006d0 	.word	0x200006d0
 80a3de8:	2000009c 	.word	0x2000009c
 80a3dec:	080a31fd 	.word	0x080a31fd
 80a3df0:	200006e0 	.word	0x200006e0

080a3df4 <__aeabi_atexit>:
 80a3df4:	460b      	mov	r3, r1
 80a3df6:	4601      	mov	r1, r0
 80a3df8:	4618      	mov	r0, r3
 80a3dfa:	f001 b8f5 	b.w	80a4fe8 <__cxa_atexit>

080a3dfe <_ZdlPvj>:
 80a3dfe:	f7fc b94e 	b.w	80a009e <_ZdlPv>
	...

080a3e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3e04:	4b24      	ldr	r3, [pc, #144]	; (80a3e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3e06:	681a      	ldr	r2, [r3, #0]
 80a3e08:	07d0      	lsls	r0, r2, #31
 80a3e0a:	bf5c      	itt	pl
 80a3e0c:	2201      	movpl	r2, #1
 80a3e0e:	601a      	strpl	r2, [r3, #0]
 80a3e10:	4b22      	ldr	r3, [pc, #136]	; (80a3e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3e12:	681a      	ldr	r2, [r3, #0]
 80a3e14:	07d1      	lsls	r1, r2, #31
 80a3e16:	bf5c      	itt	pl
 80a3e18:	2201      	movpl	r2, #1
 80a3e1a:	601a      	strpl	r2, [r3, #0]
 80a3e1c:	4b20      	ldr	r3, [pc, #128]	; (80a3ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3e1e:	681a      	ldr	r2, [r3, #0]
 80a3e20:	07d2      	lsls	r2, r2, #31
 80a3e22:	bf5c      	itt	pl
 80a3e24:	2201      	movpl	r2, #1
 80a3e26:	601a      	strpl	r2, [r3, #0]
 80a3e28:	4b1e      	ldr	r3, [pc, #120]	; (80a3ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3e2a:	681a      	ldr	r2, [r3, #0]
 80a3e2c:	07d0      	lsls	r0, r2, #31
 80a3e2e:	bf5c      	itt	pl
 80a3e30:	2201      	movpl	r2, #1
 80a3e32:	601a      	strpl	r2, [r3, #0]
 80a3e34:	4b1c      	ldr	r3, [pc, #112]	; (80a3ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3e36:	681a      	ldr	r2, [r3, #0]
 80a3e38:	07d1      	lsls	r1, r2, #31
 80a3e3a:	bf5c      	itt	pl
 80a3e3c:	2201      	movpl	r2, #1
 80a3e3e:	601a      	strpl	r2, [r3, #0]
 80a3e40:	4b1a      	ldr	r3, [pc, #104]	; (80a3eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3e42:	681a      	ldr	r2, [r3, #0]
 80a3e44:	07d2      	lsls	r2, r2, #31
 80a3e46:	bf5c      	itt	pl
 80a3e48:	2201      	movpl	r2, #1
 80a3e4a:	601a      	strpl	r2, [r3, #0]
 80a3e4c:	4b18      	ldr	r3, [pc, #96]	; (80a3eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3e4e:	681a      	ldr	r2, [r3, #0]
 80a3e50:	07d0      	lsls	r0, r2, #31
 80a3e52:	bf5c      	itt	pl
 80a3e54:	2201      	movpl	r2, #1
 80a3e56:	601a      	strpl	r2, [r3, #0]
 80a3e58:	4b16      	ldr	r3, [pc, #88]	; (80a3eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3e5a:	681a      	ldr	r2, [r3, #0]
 80a3e5c:	07d1      	lsls	r1, r2, #31
 80a3e5e:	bf5c      	itt	pl
 80a3e60:	2201      	movpl	r2, #1
 80a3e62:	601a      	strpl	r2, [r3, #0]
 80a3e64:	4b14      	ldr	r3, [pc, #80]	; (80a3eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3e66:	681a      	ldr	r2, [r3, #0]
 80a3e68:	07d2      	lsls	r2, r2, #31
 80a3e6a:	bf5c      	itt	pl
 80a3e6c:	2201      	movpl	r2, #1
 80a3e6e:	601a      	strpl	r2, [r3, #0]
 80a3e70:	4b12      	ldr	r3, [pc, #72]	; (80a3ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3e72:	681a      	ldr	r2, [r3, #0]
 80a3e74:	07d0      	lsls	r0, r2, #31
 80a3e76:	bf5c      	itt	pl
 80a3e78:	2201      	movpl	r2, #1
 80a3e7a:	601a      	strpl	r2, [r3, #0]
 80a3e7c:	4b10      	ldr	r3, [pc, #64]	; (80a3ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3e7e:	681a      	ldr	r2, [r3, #0]
 80a3e80:	07d1      	lsls	r1, r2, #31
 80a3e82:	bf5c      	itt	pl
 80a3e84:	2201      	movpl	r2, #1
 80a3e86:	601a      	strpl	r2, [r3, #0]
 80a3e88:	4b0e      	ldr	r3, [pc, #56]	; (80a3ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3e8a:	681a      	ldr	r2, [r3, #0]
 80a3e8c:	07d2      	lsls	r2, r2, #31
 80a3e8e:	bf5c      	itt	pl
 80a3e90:	2201      	movpl	r2, #1
 80a3e92:	601a      	strpl	r2, [r3, #0]
 80a3e94:	4770      	bx	lr
 80a3e96:	bf00      	nop
 80a3e98:	2000071c 	.word	0x2000071c
 80a3e9c:	20000718 	.word	0x20000718
 80a3ea0:	20000714 	.word	0x20000714
 80a3ea4:	20000710 	.word	0x20000710
 80a3ea8:	2000070c 	.word	0x2000070c
 80a3eac:	20000708 	.word	0x20000708
 80a3eb0:	20000704 	.word	0x20000704
 80a3eb4:	20000700 	.word	0x20000700
 80a3eb8:	200006fc 	.word	0x200006fc
 80a3ebc:	200006f8 	.word	0x200006f8
 80a3ec0:	200006f4 	.word	0x200006f4
 80a3ec4:	200006f0 	.word	0x200006f0

080a3ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3ec8:	4b18      	ldr	r3, [pc, #96]	; (80a3f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3eca:	681a      	ldr	r2, [r3, #0]
 80a3ecc:	07d1      	lsls	r1, r2, #31
 80a3ece:	bf5c      	itt	pl
 80a3ed0:	2201      	movpl	r2, #1
 80a3ed2:	601a      	strpl	r2, [r3, #0]
 80a3ed4:	4b16      	ldr	r3, [pc, #88]	; (80a3f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3ed6:	681a      	ldr	r2, [r3, #0]
 80a3ed8:	07d2      	lsls	r2, r2, #31
 80a3eda:	bf5c      	itt	pl
 80a3edc:	2201      	movpl	r2, #1
 80a3ede:	601a      	strpl	r2, [r3, #0]
 80a3ee0:	4b14      	ldr	r3, [pc, #80]	; (80a3f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3ee2:	681a      	ldr	r2, [r3, #0]
 80a3ee4:	07d0      	lsls	r0, r2, #31
 80a3ee6:	bf5c      	itt	pl
 80a3ee8:	2201      	movpl	r2, #1
 80a3eea:	601a      	strpl	r2, [r3, #0]
 80a3eec:	4b12      	ldr	r3, [pc, #72]	; (80a3f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3eee:	681a      	ldr	r2, [r3, #0]
 80a3ef0:	07d1      	lsls	r1, r2, #31
 80a3ef2:	bf5c      	itt	pl
 80a3ef4:	2201      	movpl	r2, #1
 80a3ef6:	601a      	strpl	r2, [r3, #0]
 80a3ef8:	4b10      	ldr	r3, [pc, #64]	; (80a3f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3efa:	681a      	ldr	r2, [r3, #0]
 80a3efc:	07d2      	lsls	r2, r2, #31
 80a3efe:	bf5c      	itt	pl
 80a3f00:	2201      	movpl	r2, #1
 80a3f02:	601a      	strpl	r2, [r3, #0]
 80a3f04:	4b0e      	ldr	r3, [pc, #56]	; (80a3f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3f06:	681a      	ldr	r2, [r3, #0]
 80a3f08:	07d0      	lsls	r0, r2, #31
 80a3f0a:	bf5c      	itt	pl
 80a3f0c:	2201      	movpl	r2, #1
 80a3f0e:	601a      	strpl	r2, [r3, #0]
 80a3f10:	4b0c      	ldr	r3, [pc, #48]	; (80a3f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3f12:	681a      	ldr	r2, [r3, #0]
 80a3f14:	07d1      	lsls	r1, r2, #31
 80a3f16:	bf5c      	itt	pl
 80a3f18:	2201      	movpl	r2, #1
 80a3f1a:	601a      	strpl	r2, [r3, #0]
 80a3f1c:	4b0a      	ldr	r3, [pc, #40]	; (80a3f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3f1e:	681a      	ldr	r2, [r3, #0]
 80a3f20:	07d2      	lsls	r2, r2, #31
 80a3f22:	bf5c      	itt	pl
 80a3f24:	2201      	movpl	r2, #1
 80a3f26:	601a      	strpl	r2, [r3, #0]
 80a3f28:	4770      	bx	lr
 80a3f2a:	bf00      	nop
 80a3f2c:	2000073c 	.word	0x2000073c
 80a3f30:	20000738 	.word	0x20000738
 80a3f34:	20000734 	.word	0x20000734
 80a3f38:	20000730 	.word	0x20000730
 80a3f3c:	2000072c 	.word	0x2000072c
 80a3f40:	20000728 	.word	0x20000728
 80a3f44:	20000724 	.word	0x20000724
 80a3f48:	20000720 	.word	0x20000720

080a3f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3f4c:	4b18      	ldr	r3, [pc, #96]	; (80a3fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3f4e:	681a      	ldr	r2, [r3, #0]
 80a3f50:	07d1      	lsls	r1, r2, #31
 80a3f52:	bf5c      	itt	pl
 80a3f54:	2201      	movpl	r2, #1
 80a3f56:	601a      	strpl	r2, [r3, #0]
 80a3f58:	4b16      	ldr	r3, [pc, #88]	; (80a3fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3f5a:	681a      	ldr	r2, [r3, #0]
 80a3f5c:	07d2      	lsls	r2, r2, #31
 80a3f5e:	bf5c      	itt	pl
 80a3f60:	2201      	movpl	r2, #1
 80a3f62:	601a      	strpl	r2, [r3, #0]
 80a3f64:	4b14      	ldr	r3, [pc, #80]	; (80a3fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3f66:	681a      	ldr	r2, [r3, #0]
 80a3f68:	07d0      	lsls	r0, r2, #31
 80a3f6a:	bf5c      	itt	pl
 80a3f6c:	2201      	movpl	r2, #1
 80a3f6e:	601a      	strpl	r2, [r3, #0]
 80a3f70:	4b12      	ldr	r3, [pc, #72]	; (80a3fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3f72:	681a      	ldr	r2, [r3, #0]
 80a3f74:	07d1      	lsls	r1, r2, #31
 80a3f76:	bf5c      	itt	pl
 80a3f78:	2201      	movpl	r2, #1
 80a3f7a:	601a      	strpl	r2, [r3, #0]
 80a3f7c:	4b10      	ldr	r3, [pc, #64]	; (80a3fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3f7e:	681a      	ldr	r2, [r3, #0]
 80a3f80:	07d2      	lsls	r2, r2, #31
 80a3f82:	bf5c      	itt	pl
 80a3f84:	2201      	movpl	r2, #1
 80a3f86:	601a      	strpl	r2, [r3, #0]
 80a3f88:	4b0e      	ldr	r3, [pc, #56]	; (80a3fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3f8a:	681a      	ldr	r2, [r3, #0]
 80a3f8c:	07d0      	lsls	r0, r2, #31
 80a3f8e:	bf5c      	itt	pl
 80a3f90:	2201      	movpl	r2, #1
 80a3f92:	601a      	strpl	r2, [r3, #0]
 80a3f94:	4b0c      	ldr	r3, [pc, #48]	; (80a3fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3f96:	681a      	ldr	r2, [r3, #0]
 80a3f98:	07d1      	lsls	r1, r2, #31
 80a3f9a:	bf5c      	itt	pl
 80a3f9c:	2201      	movpl	r2, #1
 80a3f9e:	601a      	strpl	r2, [r3, #0]
 80a3fa0:	4b0a      	ldr	r3, [pc, #40]	; (80a3fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3fa2:	681a      	ldr	r2, [r3, #0]
 80a3fa4:	07d2      	lsls	r2, r2, #31
 80a3fa6:	bf5c      	itt	pl
 80a3fa8:	2201      	movpl	r2, #1
 80a3faa:	601a      	strpl	r2, [r3, #0]
 80a3fac:	4770      	bx	lr
 80a3fae:	bf00      	nop
 80a3fb0:	2000075c 	.word	0x2000075c
 80a3fb4:	20000758 	.word	0x20000758
 80a3fb8:	20000754 	.word	0x20000754
 80a3fbc:	20000750 	.word	0x20000750
 80a3fc0:	2000074c 	.word	0x2000074c
 80a3fc4:	20000748 	.word	0x20000748
 80a3fc8:	20000744 	.word	0x20000744
 80a3fcc:	20000740 	.word	0x20000740

080a3fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3fd0:	4b24      	ldr	r3, [pc, #144]	; (80a4064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3fd2:	681a      	ldr	r2, [r3, #0]
 80a3fd4:	07d0      	lsls	r0, r2, #31
 80a3fd6:	bf5c      	itt	pl
 80a3fd8:	2201      	movpl	r2, #1
 80a3fda:	601a      	strpl	r2, [r3, #0]
 80a3fdc:	4b22      	ldr	r3, [pc, #136]	; (80a4068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3fde:	681a      	ldr	r2, [r3, #0]
 80a3fe0:	07d1      	lsls	r1, r2, #31
 80a3fe2:	bf5c      	itt	pl
 80a3fe4:	2201      	movpl	r2, #1
 80a3fe6:	601a      	strpl	r2, [r3, #0]
 80a3fe8:	4b20      	ldr	r3, [pc, #128]	; (80a406c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3fea:	681a      	ldr	r2, [r3, #0]
 80a3fec:	07d2      	lsls	r2, r2, #31
 80a3fee:	bf5c      	itt	pl
 80a3ff0:	2201      	movpl	r2, #1
 80a3ff2:	601a      	strpl	r2, [r3, #0]
 80a3ff4:	4b1e      	ldr	r3, [pc, #120]	; (80a4070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3ff6:	681a      	ldr	r2, [r3, #0]
 80a3ff8:	07d0      	lsls	r0, r2, #31
 80a3ffa:	bf5c      	itt	pl
 80a3ffc:	2201      	movpl	r2, #1
 80a3ffe:	601a      	strpl	r2, [r3, #0]
 80a4000:	4b1c      	ldr	r3, [pc, #112]	; (80a4074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4002:	681a      	ldr	r2, [r3, #0]
 80a4004:	07d1      	lsls	r1, r2, #31
 80a4006:	bf5c      	itt	pl
 80a4008:	2201      	movpl	r2, #1
 80a400a:	601a      	strpl	r2, [r3, #0]
 80a400c:	4b1a      	ldr	r3, [pc, #104]	; (80a4078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a400e:	681a      	ldr	r2, [r3, #0]
 80a4010:	07d2      	lsls	r2, r2, #31
 80a4012:	bf5c      	itt	pl
 80a4014:	2201      	movpl	r2, #1
 80a4016:	601a      	strpl	r2, [r3, #0]
 80a4018:	4b18      	ldr	r3, [pc, #96]	; (80a407c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a401a:	681a      	ldr	r2, [r3, #0]
 80a401c:	07d0      	lsls	r0, r2, #31
 80a401e:	bf5c      	itt	pl
 80a4020:	2201      	movpl	r2, #1
 80a4022:	601a      	strpl	r2, [r3, #0]
 80a4024:	4b16      	ldr	r3, [pc, #88]	; (80a4080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4026:	681a      	ldr	r2, [r3, #0]
 80a4028:	07d1      	lsls	r1, r2, #31
 80a402a:	bf5c      	itt	pl
 80a402c:	2201      	movpl	r2, #1
 80a402e:	601a      	strpl	r2, [r3, #0]
 80a4030:	4b14      	ldr	r3, [pc, #80]	; (80a4084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4032:	681a      	ldr	r2, [r3, #0]
 80a4034:	07d2      	lsls	r2, r2, #31
 80a4036:	bf5c      	itt	pl
 80a4038:	2201      	movpl	r2, #1
 80a403a:	601a      	strpl	r2, [r3, #0]
 80a403c:	4b12      	ldr	r3, [pc, #72]	; (80a4088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a403e:	681a      	ldr	r2, [r3, #0]
 80a4040:	07d0      	lsls	r0, r2, #31
 80a4042:	bf5c      	itt	pl
 80a4044:	2201      	movpl	r2, #1
 80a4046:	601a      	strpl	r2, [r3, #0]
 80a4048:	4b10      	ldr	r3, [pc, #64]	; (80a408c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a404a:	681a      	ldr	r2, [r3, #0]
 80a404c:	07d1      	lsls	r1, r2, #31
 80a404e:	bf5c      	itt	pl
 80a4050:	2201      	movpl	r2, #1
 80a4052:	601a      	strpl	r2, [r3, #0]
 80a4054:	4b0e      	ldr	r3, [pc, #56]	; (80a4090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4056:	681a      	ldr	r2, [r3, #0]
 80a4058:	07d2      	lsls	r2, r2, #31
 80a405a:	bf5c      	itt	pl
 80a405c:	2201      	movpl	r2, #1
 80a405e:	601a      	strpl	r2, [r3, #0]
 80a4060:	4770      	bx	lr
 80a4062:	bf00      	nop
 80a4064:	2000078c 	.word	0x2000078c
 80a4068:	20000788 	.word	0x20000788
 80a406c:	20000784 	.word	0x20000784
 80a4070:	20000780 	.word	0x20000780
 80a4074:	2000077c 	.word	0x2000077c
 80a4078:	20000778 	.word	0x20000778
 80a407c:	20000774 	.word	0x20000774
 80a4080:	20000770 	.word	0x20000770
 80a4084:	2000076c 	.word	0x2000076c
 80a4088:	20000768 	.word	0x20000768
 80a408c:	20000764 	.word	0x20000764
 80a4090:	20000760 	.word	0x20000760

080a4094 <__aeabi_drsub>:
 80a4094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4098:	e002      	b.n	80a40a0 <__adddf3>
 80a409a:	bf00      	nop

080a409c <__aeabi_dsub>:
 80a409c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a40a0 <__adddf3>:
 80a40a0:	b530      	push	{r4, r5, lr}
 80a40a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a40a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a40aa:	ea94 0f05 	teq	r4, r5
 80a40ae:	bf08      	it	eq
 80a40b0:	ea90 0f02 	teqeq	r0, r2
 80a40b4:	bf1f      	itttt	ne
 80a40b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a40ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a40be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a40c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a40c6:	f000 80e2 	beq.w	80a428e <__adddf3+0x1ee>
 80a40ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a40ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a40d2:	bfb8      	it	lt
 80a40d4:	426d      	neglt	r5, r5
 80a40d6:	dd0c      	ble.n	80a40f2 <__adddf3+0x52>
 80a40d8:	442c      	add	r4, r5
 80a40da:	ea80 0202 	eor.w	r2, r0, r2
 80a40de:	ea81 0303 	eor.w	r3, r1, r3
 80a40e2:	ea82 0000 	eor.w	r0, r2, r0
 80a40e6:	ea83 0101 	eor.w	r1, r3, r1
 80a40ea:	ea80 0202 	eor.w	r2, r0, r2
 80a40ee:	ea81 0303 	eor.w	r3, r1, r3
 80a40f2:	2d36      	cmp	r5, #54	; 0x36
 80a40f4:	bf88      	it	hi
 80a40f6:	bd30      	pophi	{r4, r5, pc}
 80a40f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a40fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4100:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4108:	d002      	beq.n	80a4110 <__adddf3+0x70>
 80a410a:	4240      	negs	r0, r0
 80a410c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4110:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4114:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a411c:	d002      	beq.n	80a4124 <__adddf3+0x84>
 80a411e:	4252      	negs	r2, r2
 80a4120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4124:	ea94 0f05 	teq	r4, r5
 80a4128:	f000 80a7 	beq.w	80a427a <__adddf3+0x1da>
 80a412c:	f1a4 0401 	sub.w	r4, r4, #1
 80a4130:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4134:	db0d      	blt.n	80a4152 <__adddf3+0xb2>
 80a4136:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a413a:	fa22 f205 	lsr.w	r2, r2, r5
 80a413e:	1880      	adds	r0, r0, r2
 80a4140:	f141 0100 	adc.w	r1, r1, #0
 80a4144:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4148:	1880      	adds	r0, r0, r2
 80a414a:	fa43 f305 	asr.w	r3, r3, r5
 80a414e:	4159      	adcs	r1, r3
 80a4150:	e00e      	b.n	80a4170 <__adddf3+0xd0>
 80a4152:	f1a5 0520 	sub.w	r5, r5, #32
 80a4156:	f10e 0e20 	add.w	lr, lr, #32
 80a415a:	2a01      	cmp	r2, #1
 80a415c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4160:	bf28      	it	cs
 80a4162:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4166:	fa43 f305 	asr.w	r3, r3, r5
 80a416a:	18c0      	adds	r0, r0, r3
 80a416c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4174:	d507      	bpl.n	80a4186 <__adddf3+0xe6>
 80a4176:	f04f 0e00 	mov.w	lr, #0
 80a417a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a417e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4182:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4186:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a418a:	d31b      	bcc.n	80a41c4 <__adddf3+0x124>
 80a418c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4190:	d30c      	bcc.n	80a41ac <__adddf3+0x10c>
 80a4192:	0849      	lsrs	r1, r1, #1
 80a4194:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4198:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a419c:	f104 0401 	add.w	r4, r4, #1
 80a41a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a41a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a41a8:	f080 809a 	bcs.w	80a42e0 <__adddf3+0x240>
 80a41ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a41b0:	bf08      	it	eq
 80a41b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a41b6:	f150 0000 	adcs.w	r0, r0, #0
 80a41ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a41be:	ea41 0105 	orr.w	r1, r1, r5
 80a41c2:	bd30      	pop	{r4, r5, pc}
 80a41c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a41c8:	4140      	adcs	r0, r0
 80a41ca:	eb41 0101 	adc.w	r1, r1, r1
 80a41ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a41d2:	f1a4 0401 	sub.w	r4, r4, #1
 80a41d6:	d1e9      	bne.n	80a41ac <__adddf3+0x10c>
 80a41d8:	f091 0f00 	teq	r1, #0
 80a41dc:	bf04      	itt	eq
 80a41de:	4601      	moveq	r1, r0
 80a41e0:	2000      	moveq	r0, #0
 80a41e2:	fab1 f381 	clz	r3, r1
 80a41e6:	bf08      	it	eq
 80a41e8:	3320      	addeq	r3, #32
 80a41ea:	f1a3 030b 	sub.w	r3, r3, #11
 80a41ee:	f1b3 0220 	subs.w	r2, r3, #32
 80a41f2:	da0c      	bge.n	80a420e <__adddf3+0x16e>
 80a41f4:	320c      	adds	r2, #12
 80a41f6:	dd08      	ble.n	80a420a <__adddf3+0x16a>
 80a41f8:	f102 0c14 	add.w	ip, r2, #20
 80a41fc:	f1c2 020c 	rsb	r2, r2, #12
 80a4200:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4204:	fa21 f102 	lsr.w	r1, r1, r2
 80a4208:	e00c      	b.n	80a4224 <__adddf3+0x184>
 80a420a:	f102 0214 	add.w	r2, r2, #20
 80a420e:	bfd8      	it	le
 80a4210:	f1c2 0c20 	rsble	ip, r2, #32
 80a4214:	fa01 f102 	lsl.w	r1, r1, r2
 80a4218:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a421c:	bfdc      	itt	le
 80a421e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4222:	4090      	lslle	r0, r2
 80a4224:	1ae4      	subs	r4, r4, r3
 80a4226:	bfa2      	ittt	ge
 80a4228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a422c:	4329      	orrge	r1, r5
 80a422e:	bd30      	popge	{r4, r5, pc}
 80a4230:	ea6f 0404 	mvn.w	r4, r4
 80a4234:	3c1f      	subs	r4, #31
 80a4236:	da1c      	bge.n	80a4272 <__adddf3+0x1d2>
 80a4238:	340c      	adds	r4, #12
 80a423a:	dc0e      	bgt.n	80a425a <__adddf3+0x1ba>
 80a423c:	f104 0414 	add.w	r4, r4, #20
 80a4240:	f1c4 0220 	rsb	r2, r4, #32
 80a4244:	fa20 f004 	lsr.w	r0, r0, r4
 80a4248:	fa01 f302 	lsl.w	r3, r1, r2
 80a424c:	ea40 0003 	orr.w	r0, r0, r3
 80a4250:	fa21 f304 	lsr.w	r3, r1, r4
 80a4254:	ea45 0103 	orr.w	r1, r5, r3
 80a4258:	bd30      	pop	{r4, r5, pc}
 80a425a:	f1c4 040c 	rsb	r4, r4, #12
 80a425e:	f1c4 0220 	rsb	r2, r4, #32
 80a4262:	fa20 f002 	lsr.w	r0, r0, r2
 80a4266:	fa01 f304 	lsl.w	r3, r1, r4
 80a426a:	ea40 0003 	orr.w	r0, r0, r3
 80a426e:	4629      	mov	r1, r5
 80a4270:	bd30      	pop	{r4, r5, pc}
 80a4272:	fa21 f004 	lsr.w	r0, r1, r4
 80a4276:	4629      	mov	r1, r5
 80a4278:	bd30      	pop	{r4, r5, pc}
 80a427a:	f094 0f00 	teq	r4, #0
 80a427e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4282:	bf06      	itte	eq
 80a4284:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4288:	3401      	addeq	r4, #1
 80a428a:	3d01      	subne	r5, #1
 80a428c:	e74e      	b.n	80a412c <__adddf3+0x8c>
 80a428e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4292:	bf18      	it	ne
 80a4294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4298:	d029      	beq.n	80a42ee <__adddf3+0x24e>
 80a429a:	ea94 0f05 	teq	r4, r5
 80a429e:	bf08      	it	eq
 80a42a0:	ea90 0f02 	teqeq	r0, r2
 80a42a4:	d005      	beq.n	80a42b2 <__adddf3+0x212>
 80a42a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a42aa:	bf04      	itt	eq
 80a42ac:	4619      	moveq	r1, r3
 80a42ae:	4610      	moveq	r0, r2
 80a42b0:	bd30      	pop	{r4, r5, pc}
 80a42b2:	ea91 0f03 	teq	r1, r3
 80a42b6:	bf1e      	ittt	ne
 80a42b8:	2100      	movne	r1, #0
 80a42ba:	2000      	movne	r0, #0
 80a42bc:	bd30      	popne	{r4, r5, pc}
 80a42be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a42c2:	d105      	bne.n	80a42d0 <__adddf3+0x230>
 80a42c4:	0040      	lsls	r0, r0, #1
 80a42c6:	4149      	adcs	r1, r1
 80a42c8:	bf28      	it	cs
 80a42ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a42ce:	bd30      	pop	{r4, r5, pc}
 80a42d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a42d4:	bf3c      	itt	cc
 80a42d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a42da:	bd30      	popcc	{r4, r5, pc}
 80a42dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a42e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a42e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a42e8:	f04f 0000 	mov.w	r0, #0
 80a42ec:	bd30      	pop	{r4, r5, pc}
 80a42ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a42f2:	bf1a      	itte	ne
 80a42f4:	4619      	movne	r1, r3
 80a42f6:	4610      	movne	r0, r2
 80a42f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a42fc:	bf1c      	itt	ne
 80a42fe:	460b      	movne	r3, r1
 80a4300:	4602      	movne	r2, r0
 80a4302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4306:	bf06      	itte	eq
 80a4308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a430c:	ea91 0f03 	teqeq	r1, r3
 80a4310:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4314:	bd30      	pop	{r4, r5, pc}
 80a4316:	bf00      	nop

080a4318 <__aeabi_ui2d>:
 80a4318:	f090 0f00 	teq	r0, #0
 80a431c:	bf04      	itt	eq
 80a431e:	2100      	moveq	r1, #0
 80a4320:	4770      	bxeq	lr
 80a4322:	b530      	push	{r4, r5, lr}
 80a4324:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4328:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a432c:	f04f 0500 	mov.w	r5, #0
 80a4330:	f04f 0100 	mov.w	r1, #0
 80a4334:	e750      	b.n	80a41d8 <__adddf3+0x138>
 80a4336:	bf00      	nop

080a4338 <__aeabi_i2d>:
 80a4338:	f090 0f00 	teq	r0, #0
 80a433c:	bf04      	itt	eq
 80a433e:	2100      	moveq	r1, #0
 80a4340:	4770      	bxeq	lr
 80a4342:	b530      	push	{r4, r5, lr}
 80a4344:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4348:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a434c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4350:	bf48      	it	mi
 80a4352:	4240      	negmi	r0, r0
 80a4354:	f04f 0100 	mov.w	r1, #0
 80a4358:	e73e      	b.n	80a41d8 <__adddf3+0x138>
 80a435a:	bf00      	nop

080a435c <__aeabi_f2d>:
 80a435c:	0042      	lsls	r2, r0, #1
 80a435e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4362:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4366:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a436a:	bf1f      	itttt	ne
 80a436c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4374:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4378:	4770      	bxne	lr
 80a437a:	f092 0f00 	teq	r2, #0
 80a437e:	bf14      	ite	ne
 80a4380:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4384:	4770      	bxeq	lr
 80a4386:	b530      	push	{r4, r5, lr}
 80a4388:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a438c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4394:	e720      	b.n	80a41d8 <__adddf3+0x138>
 80a4396:	bf00      	nop

080a4398 <__aeabi_ul2d>:
 80a4398:	ea50 0201 	orrs.w	r2, r0, r1
 80a439c:	bf08      	it	eq
 80a439e:	4770      	bxeq	lr
 80a43a0:	b530      	push	{r4, r5, lr}
 80a43a2:	f04f 0500 	mov.w	r5, #0
 80a43a6:	e00a      	b.n	80a43be <__aeabi_l2d+0x16>

080a43a8 <__aeabi_l2d>:
 80a43a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a43ac:	bf08      	it	eq
 80a43ae:	4770      	bxeq	lr
 80a43b0:	b530      	push	{r4, r5, lr}
 80a43b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a43b6:	d502      	bpl.n	80a43be <__aeabi_l2d+0x16>
 80a43b8:	4240      	negs	r0, r0
 80a43ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a43be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a43c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a43c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a43ca:	f43f aedc 	beq.w	80a4186 <__adddf3+0xe6>
 80a43ce:	f04f 0203 	mov.w	r2, #3
 80a43d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a43d6:	bf18      	it	ne
 80a43d8:	3203      	addne	r2, #3
 80a43da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a43de:	bf18      	it	ne
 80a43e0:	3203      	addne	r2, #3
 80a43e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a43e6:	f1c2 0320 	rsb	r3, r2, #32
 80a43ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80a43ee:	fa20 f002 	lsr.w	r0, r0, r2
 80a43f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a43f6:	ea40 000e 	orr.w	r0, r0, lr
 80a43fa:	fa21 f102 	lsr.w	r1, r1, r2
 80a43fe:	4414      	add	r4, r2
 80a4400:	e6c1      	b.n	80a4186 <__adddf3+0xe6>
 80a4402:	bf00      	nop

080a4404 <__aeabi_dmul>:
 80a4404:	b570      	push	{r4, r5, r6, lr}
 80a4406:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a440a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a440e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4412:	bf1d      	ittte	ne
 80a4414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4418:	ea94 0f0c 	teqne	r4, ip
 80a441c:	ea95 0f0c 	teqne	r5, ip
 80a4420:	f000 f8de 	bleq	80a45e0 <__aeabi_dmul+0x1dc>
 80a4424:	442c      	add	r4, r5
 80a4426:	ea81 0603 	eor.w	r6, r1, r3
 80a442a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a442e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4432:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4436:	bf18      	it	ne
 80a4438:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a443c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4444:	d038      	beq.n	80a44b8 <__aeabi_dmul+0xb4>
 80a4446:	fba0 ce02 	umull	ip, lr, r0, r2
 80a444a:	f04f 0500 	mov.w	r5, #0
 80a444e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4452:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4456:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a445a:	f04f 0600 	mov.w	r6, #0
 80a445e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4462:	f09c 0f00 	teq	ip, #0
 80a4466:	bf18      	it	ne
 80a4468:	f04e 0e01 	orrne.w	lr, lr, #1
 80a446c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4470:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4474:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4478:	d204      	bcs.n	80a4484 <__aeabi_dmul+0x80>
 80a447a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a447e:	416d      	adcs	r5, r5
 80a4480:	eb46 0606 	adc.w	r6, r6, r6
 80a4484:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4488:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a448c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4490:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4494:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4498:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a449c:	bf88      	it	hi
 80a449e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a44a2:	d81e      	bhi.n	80a44e2 <__aeabi_dmul+0xde>
 80a44a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a44a8:	bf08      	it	eq
 80a44aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a44ae:	f150 0000 	adcs.w	r0, r0, #0
 80a44b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a44b6:	bd70      	pop	{r4, r5, r6, pc}
 80a44b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a44bc:	ea46 0101 	orr.w	r1, r6, r1
 80a44c0:	ea40 0002 	orr.w	r0, r0, r2
 80a44c4:	ea81 0103 	eor.w	r1, r1, r3
 80a44c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a44cc:	bfc2      	ittt	gt
 80a44ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a44d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a44d6:	bd70      	popgt	{r4, r5, r6, pc}
 80a44d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a44dc:	f04f 0e00 	mov.w	lr, #0
 80a44e0:	3c01      	subs	r4, #1
 80a44e2:	f300 80ab 	bgt.w	80a463c <__aeabi_dmul+0x238>
 80a44e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a44ea:	bfde      	ittt	le
 80a44ec:	2000      	movle	r0, #0
 80a44ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a44f2:	bd70      	pople	{r4, r5, r6, pc}
 80a44f4:	f1c4 0400 	rsb	r4, r4, #0
 80a44f8:	3c20      	subs	r4, #32
 80a44fa:	da35      	bge.n	80a4568 <__aeabi_dmul+0x164>
 80a44fc:	340c      	adds	r4, #12
 80a44fe:	dc1b      	bgt.n	80a4538 <__aeabi_dmul+0x134>
 80a4500:	f104 0414 	add.w	r4, r4, #20
 80a4504:	f1c4 0520 	rsb	r5, r4, #32
 80a4508:	fa00 f305 	lsl.w	r3, r0, r5
 80a450c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4510:	fa01 f205 	lsl.w	r2, r1, r5
 80a4514:	ea40 0002 	orr.w	r0, r0, r2
 80a4518:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a451c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4520:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4524:	fa21 f604 	lsr.w	r6, r1, r4
 80a4528:	eb42 0106 	adc.w	r1, r2, r6
 80a452c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4530:	bf08      	it	eq
 80a4532:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4536:	bd70      	pop	{r4, r5, r6, pc}
 80a4538:	f1c4 040c 	rsb	r4, r4, #12
 80a453c:	f1c4 0520 	rsb	r5, r4, #32
 80a4540:	fa00 f304 	lsl.w	r3, r0, r4
 80a4544:	fa20 f005 	lsr.w	r0, r0, r5
 80a4548:	fa01 f204 	lsl.w	r2, r1, r4
 80a454c:	ea40 0002 	orr.w	r0, r0, r2
 80a4550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4554:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4558:	f141 0100 	adc.w	r1, r1, #0
 80a455c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4560:	bf08      	it	eq
 80a4562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4566:	bd70      	pop	{r4, r5, r6, pc}
 80a4568:	f1c4 0520 	rsb	r5, r4, #32
 80a456c:	fa00 f205 	lsl.w	r2, r0, r5
 80a4570:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4574:	fa20 f304 	lsr.w	r3, r0, r4
 80a4578:	fa01 f205 	lsl.w	r2, r1, r5
 80a457c:	ea43 0302 	orr.w	r3, r3, r2
 80a4580:	fa21 f004 	lsr.w	r0, r1, r4
 80a4584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4588:	fa21 f204 	lsr.w	r2, r1, r4
 80a458c:	ea20 0002 	bic.w	r0, r0, r2
 80a4590:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4594:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4598:	bf08      	it	eq
 80a459a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a459e:	bd70      	pop	{r4, r5, r6, pc}
 80a45a0:	f094 0f00 	teq	r4, #0
 80a45a4:	d10f      	bne.n	80a45c6 <__aeabi_dmul+0x1c2>
 80a45a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a45aa:	0040      	lsls	r0, r0, #1
 80a45ac:	eb41 0101 	adc.w	r1, r1, r1
 80a45b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a45b4:	bf08      	it	eq
 80a45b6:	3c01      	subeq	r4, #1
 80a45b8:	d0f7      	beq.n	80a45aa <__aeabi_dmul+0x1a6>
 80a45ba:	ea41 0106 	orr.w	r1, r1, r6
 80a45be:	f095 0f00 	teq	r5, #0
 80a45c2:	bf18      	it	ne
 80a45c4:	4770      	bxne	lr
 80a45c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a45ca:	0052      	lsls	r2, r2, #1
 80a45cc:	eb43 0303 	adc.w	r3, r3, r3
 80a45d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a45d4:	bf08      	it	eq
 80a45d6:	3d01      	subeq	r5, #1
 80a45d8:	d0f7      	beq.n	80a45ca <__aeabi_dmul+0x1c6>
 80a45da:	ea43 0306 	orr.w	r3, r3, r6
 80a45de:	4770      	bx	lr
 80a45e0:	ea94 0f0c 	teq	r4, ip
 80a45e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a45e8:	bf18      	it	ne
 80a45ea:	ea95 0f0c 	teqne	r5, ip
 80a45ee:	d00c      	beq.n	80a460a <__aeabi_dmul+0x206>
 80a45f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a45f4:	bf18      	it	ne
 80a45f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a45fa:	d1d1      	bne.n	80a45a0 <__aeabi_dmul+0x19c>
 80a45fc:	ea81 0103 	eor.w	r1, r1, r3
 80a4600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4604:	f04f 0000 	mov.w	r0, #0
 80a4608:	bd70      	pop	{r4, r5, r6, pc}
 80a460a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a460e:	bf06      	itte	eq
 80a4610:	4610      	moveq	r0, r2
 80a4612:	4619      	moveq	r1, r3
 80a4614:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4618:	d019      	beq.n	80a464e <__aeabi_dmul+0x24a>
 80a461a:	ea94 0f0c 	teq	r4, ip
 80a461e:	d102      	bne.n	80a4626 <__aeabi_dmul+0x222>
 80a4620:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4624:	d113      	bne.n	80a464e <__aeabi_dmul+0x24a>
 80a4626:	ea95 0f0c 	teq	r5, ip
 80a462a:	d105      	bne.n	80a4638 <__aeabi_dmul+0x234>
 80a462c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4630:	bf1c      	itt	ne
 80a4632:	4610      	movne	r0, r2
 80a4634:	4619      	movne	r1, r3
 80a4636:	d10a      	bne.n	80a464e <__aeabi_dmul+0x24a>
 80a4638:	ea81 0103 	eor.w	r1, r1, r3
 80a463c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4640:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4648:	f04f 0000 	mov.w	r0, #0
 80a464c:	bd70      	pop	{r4, r5, r6, pc}
 80a464e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4652:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4656:	bd70      	pop	{r4, r5, r6, pc}

080a4658 <__aeabi_ddiv>:
 80a4658:	b570      	push	{r4, r5, r6, lr}
 80a465a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a465e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4666:	bf1d      	ittte	ne
 80a4668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a466c:	ea94 0f0c 	teqne	r4, ip
 80a4670:	ea95 0f0c 	teqne	r5, ip
 80a4674:	f000 f8a7 	bleq	80a47c6 <__aeabi_ddiv+0x16e>
 80a4678:	eba4 0405 	sub.w	r4, r4, r5
 80a467c:	ea81 0e03 	eor.w	lr, r1, r3
 80a4680:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4684:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4688:	f000 8088 	beq.w	80a479c <__aeabi_ddiv+0x144>
 80a468c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4690:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4694:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4698:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a469c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a46a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a46a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a46a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a46ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a46b0:	429d      	cmp	r5, r3
 80a46b2:	bf08      	it	eq
 80a46b4:	4296      	cmpeq	r6, r2
 80a46b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a46ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a46be:	d202      	bcs.n	80a46c6 <__aeabi_ddiv+0x6e>
 80a46c0:	085b      	lsrs	r3, r3, #1
 80a46c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46c6:	1ab6      	subs	r6, r6, r2
 80a46c8:	eb65 0503 	sbc.w	r5, r5, r3
 80a46cc:	085b      	lsrs	r3, r3, #1
 80a46ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a46d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a46da:	ebb6 0e02 	subs.w	lr, r6, r2
 80a46de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a46e2:	bf22      	ittt	cs
 80a46e4:	1ab6      	subcs	r6, r6, r2
 80a46e6:	4675      	movcs	r5, lr
 80a46e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a46ec:	085b      	lsrs	r3, r3, #1
 80a46ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a46f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a46fa:	bf22      	ittt	cs
 80a46fc:	1ab6      	subcs	r6, r6, r2
 80a46fe:	4675      	movcs	r5, lr
 80a4700:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4704:	085b      	lsrs	r3, r3, #1
 80a4706:	ea4f 0232 	mov.w	r2, r2, rrx
 80a470a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a470e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4712:	bf22      	ittt	cs
 80a4714:	1ab6      	subcs	r6, r6, r2
 80a4716:	4675      	movcs	r5, lr
 80a4718:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a471c:	085b      	lsrs	r3, r3, #1
 80a471e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4722:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4726:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a472a:	bf22      	ittt	cs
 80a472c:	1ab6      	subcs	r6, r6, r2
 80a472e:	4675      	movcs	r5, lr
 80a4730:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4734:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4738:	d018      	beq.n	80a476c <__aeabi_ddiv+0x114>
 80a473a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a473e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4742:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4746:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a474a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a474e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4752:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4756:	d1c0      	bne.n	80a46da <__aeabi_ddiv+0x82>
 80a4758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a475c:	d10b      	bne.n	80a4776 <__aeabi_ddiv+0x11e>
 80a475e:	ea41 0100 	orr.w	r1, r1, r0
 80a4762:	f04f 0000 	mov.w	r0, #0
 80a4766:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a476a:	e7b6      	b.n	80a46da <__aeabi_ddiv+0x82>
 80a476c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4770:	bf04      	itt	eq
 80a4772:	4301      	orreq	r1, r0
 80a4774:	2000      	moveq	r0, #0
 80a4776:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a477a:	bf88      	it	hi
 80a477c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4780:	f63f aeaf 	bhi.w	80a44e2 <__aeabi_dmul+0xde>
 80a4784:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4788:	bf04      	itt	eq
 80a478a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a478e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4792:	f150 0000 	adcs.w	r0, r0, #0
 80a4796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a479a:	bd70      	pop	{r4, r5, r6, pc}
 80a479c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a47a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a47a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a47a8:	bfc2      	ittt	gt
 80a47aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a47ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a47b2:	bd70      	popgt	{r4, r5, r6, pc}
 80a47b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a47b8:	f04f 0e00 	mov.w	lr, #0
 80a47bc:	3c01      	subs	r4, #1
 80a47be:	e690      	b.n	80a44e2 <__aeabi_dmul+0xde>
 80a47c0:	ea45 0e06 	orr.w	lr, r5, r6
 80a47c4:	e68d      	b.n	80a44e2 <__aeabi_dmul+0xde>
 80a47c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a47ca:	ea94 0f0c 	teq	r4, ip
 80a47ce:	bf08      	it	eq
 80a47d0:	ea95 0f0c 	teqeq	r5, ip
 80a47d4:	f43f af3b 	beq.w	80a464e <__aeabi_dmul+0x24a>
 80a47d8:	ea94 0f0c 	teq	r4, ip
 80a47dc:	d10a      	bne.n	80a47f4 <__aeabi_ddiv+0x19c>
 80a47de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a47e2:	f47f af34 	bne.w	80a464e <__aeabi_dmul+0x24a>
 80a47e6:	ea95 0f0c 	teq	r5, ip
 80a47ea:	f47f af25 	bne.w	80a4638 <__aeabi_dmul+0x234>
 80a47ee:	4610      	mov	r0, r2
 80a47f0:	4619      	mov	r1, r3
 80a47f2:	e72c      	b.n	80a464e <__aeabi_dmul+0x24a>
 80a47f4:	ea95 0f0c 	teq	r5, ip
 80a47f8:	d106      	bne.n	80a4808 <__aeabi_ddiv+0x1b0>
 80a47fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a47fe:	f43f aefd 	beq.w	80a45fc <__aeabi_dmul+0x1f8>
 80a4802:	4610      	mov	r0, r2
 80a4804:	4619      	mov	r1, r3
 80a4806:	e722      	b.n	80a464e <__aeabi_dmul+0x24a>
 80a4808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a480c:	bf18      	it	ne
 80a480e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4812:	f47f aec5 	bne.w	80a45a0 <__aeabi_dmul+0x19c>
 80a4816:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a481a:	f47f af0d 	bne.w	80a4638 <__aeabi_dmul+0x234>
 80a481e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4822:	f47f aeeb 	bne.w	80a45fc <__aeabi_dmul+0x1f8>
 80a4826:	e712      	b.n	80a464e <__aeabi_dmul+0x24a>

080a4828 <__gedf2>:
 80a4828:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a482c:	e006      	b.n	80a483c <__cmpdf2+0x4>
 80a482e:	bf00      	nop

080a4830 <__ledf2>:
 80a4830:	f04f 0c01 	mov.w	ip, #1
 80a4834:	e002      	b.n	80a483c <__cmpdf2+0x4>
 80a4836:	bf00      	nop

080a4838 <__cmpdf2>:
 80a4838:	f04f 0c01 	mov.w	ip, #1
 80a483c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a484c:	bf18      	it	ne
 80a484e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4852:	d01b      	beq.n	80a488c <__cmpdf2+0x54>
 80a4854:	b001      	add	sp, #4
 80a4856:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a485a:	bf0c      	ite	eq
 80a485c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4860:	ea91 0f03 	teqne	r1, r3
 80a4864:	bf02      	ittt	eq
 80a4866:	ea90 0f02 	teqeq	r0, r2
 80a486a:	2000      	moveq	r0, #0
 80a486c:	4770      	bxeq	lr
 80a486e:	f110 0f00 	cmn.w	r0, #0
 80a4872:	ea91 0f03 	teq	r1, r3
 80a4876:	bf58      	it	pl
 80a4878:	4299      	cmppl	r1, r3
 80a487a:	bf08      	it	eq
 80a487c:	4290      	cmpeq	r0, r2
 80a487e:	bf2c      	ite	cs
 80a4880:	17d8      	asrcs	r0, r3, #31
 80a4882:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4886:	f040 0001 	orr.w	r0, r0, #1
 80a488a:	4770      	bx	lr
 80a488c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4894:	d102      	bne.n	80a489c <__cmpdf2+0x64>
 80a4896:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a489a:	d107      	bne.n	80a48ac <__cmpdf2+0x74>
 80a489c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a48a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a48a4:	d1d6      	bne.n	80a4854 <__cmpdf2+0x1c>
 80a48a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a48aa:	d0d3      	beq.n	80a4854 <__cmpdf2+0x1c>
 80a48ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a48b0:	4770      	bx	lr
 80a48b2:	bf00      	nop

080a48b4 <__aeabi_cdrcmple>:
 80a48b4:	4684      	mov	ip, r0
 80a48b6:	4610      	mov	r0, r2
 80a48b8:	4662      	mov	r2, ip
 80a48ba:	468c      	mov	ip, r1
 80a48bc:	4619      	mov	r1, r3
 80a48be:	4663      	mov	r3, ip
 80a48c0:	e000      	b.n	80a48c4 <__aeabi_cdcmpeq>
 80a48c2:	bf00      	nop

080a48c4 <__aeabi_cdcmpeq>:
 80a48c4:	b501      	push	{r0, lr}
 80a48c6:	f7ff ffb7 	bl	80a4838 <__cmpdf2>
 80a48ca:	2800      	cmp	r0, #0
 80a48cc:	bf48      	it	mi
 80a48ce:	f110 0f00 	cmnmi.w	r0, #0
 80a48d2:	bd01      	pop	{r0, pc}

080a48d4 <__aeabi_dcmpeq>:
 80a48d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48d8:	f7ff fff4 	bl	80a48c4 <__aeabi_cdcmpeq>
 80a48dc:	bf0c      	ite	eq
 80a48de:	2001      	moveq	r0, #1
 80a48e0:	2000      	movne	r0, #0
 80a48e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48e6:	bf00      	nop

080a48e8 <__aeabi_dcmplt>:
 80a48e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48ec:	f7ff ffea 	bl	80a48c4 <__aeabi_cdcmpeq>
 80a48f0:	bf34      	ite	cc
 80a48f2:	2001      	movcc	r0, #1
 80a48f4:	2000      	movcs	r0, #0
 80a48f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48fa:	bf00      	nop

080a48fc <__aeabi_dcmple>:
 80a48fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4900:	f7ff ffe0 	bl	80a48c4 <__aeabi_cdcmpeq>
 80a4904:	bf94      	ite	ls
 80a4906:	2001      	movls	r0, #1
 80a4908:	2000      	movhi	r0, #0
 80a490a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a490e:	bf00      	nop

080a4910 <__aeabi_dcmpge>:
 80a4910:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4914:	f7ff ffce 	bl	80a48b4 <__aeabi_cdrcmple>
 80a4918:	bf94      	ite	ls
 80a491a:	2001      	movls	r0, #1
 80a491c:	2000      	movhi	r0, #0
 80a491e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4922:	bf00      	nop

080a4924 <__aeabi_dcmpgt>:
 80a4924:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4928:	f7ff ffc4 	bl	80a48b4 <__aeabi_cdrcmple>
 80a492c:	bf34      	ite	cc
 80a492e:	2001      	movcc	r0, #1
 80a4930:	2000      	movcs	r0, #0
 80a4932:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4936:	bf00      	nop

080a4938 <__aeabi_dcmpun>:
 80a4938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a493c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4940:	d102      	bne.n	80a4948 <__aeabi_dcmpun+0x10>
 80a4942:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4946:	d10a      	bne.n	80a495e <__aeabi_dcmpun+0x26>
 80a4948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a494c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4950:	d102      	bne.n	80a4958 <__aeabi_dcmpun+0x20>
 80a4952:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4956:	d102      	bne.n	80a495e <__aeabi_dcmpun+0x26>
 80a4958:	f04f 0000 	mov.w	r0, #0
 80a495c:	4770      	bx	lr
 80a495e:	f04f 0001 	mov.w	r0, #1
 80a4962:	4770      	bx	lr

080a4964 <__aeabi_d2iz>:
 80a4964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a496c:	d215      	bcs.n	80a499a <__aeabi_d2iz+0x36>
 80a496e:	d511      	bpl.n	80a4994 <__aeabi_d2iz+0x30>
 80a4970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4978:	d912      	bls.n	80a49a0 <__aeabi_d2iz+0x3c>
 80a497a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a497e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a498a:	fa23 f002 	lsr.w	r0, r3, r2
 80a498e:	bf18      	it	ne
 80a4990:	4240      	negne	r0, r0
 80a4992:	4770      	bx	lr
 80a4994:	f04f 0000 	mov.w	r0, #0
 80a4998:	4770      	bx	lr
 80a499a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a499e:	d105      	bne.n	80a49ac <__aeabi_d2iz+0x48>
 80a49a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a49a4:	bf08      	it	eq
 80a49a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a49aa:	4770      	bx	lr
 80a49ac:	f04f 0000 	mov.w	r0, #0
 80a49b0:	4770      	bx	lr
 80a49b2:	bf00      	nop

080a49b4 <__aeabi_d2uiz>:
 80a49b4:	004a      	lsls	r2, r1, #1
 80a49b6:	d211      	bcs.n	80a49dc <__aeabi_d2uiz+0x28>
 80a49b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a49bc:	d211      	bcs.n	80a49e2 <__aeabi_d2uiz+0x2e>
 80a49be:	d50d      	bpl.n	80a49dc <__aeabi_d2uiz+0x28>
 80a49c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a49c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a49c8:	d40e      	bmi.n	80a49e8 <__aeabi_d2uiz+0x34>
 80a49ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a49ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a49d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a49d6:	fa23 f002 	lsr.w	r0, r3, r2
 80a49da:	4770      	bx	lr
 80a49dc:	f04f 0000 	mov.w	r0, #0
 80a49e0:	4770      	bx	lr
 80a49e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a49e6:	d102      	bne.n	80a49ee <__aeabi_d2uiz+0x3a>
 80a49e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a49ec:	4770      	bx	lr
 80a49ee:	f04f 0000 	mov.w	r0, #0
 80a49f2:	4770      	bx	lr

080a49f4 <__aeabi_frsub>:
 80a49f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a49f8:	e002      	b.n	80a4a00 <__addsf3>
 80a49fa:	bf00      	nop

080a49fc <__aeabi_fsub>:
 80a49fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4a00 <__addsf3>:
 80a4a00:	0042      	lsls	r2, r0, #1
 80a4a02:	bf1f      	itttt	ne
 80a4a04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4a08:	ea92 0f03 	teqne	r2, r3
 80a4a0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4a10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4a14:	d06a      	beq.n	80a4aec <__addsf3+0xec>
 80a4a16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4a1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4a1e:	bfc1      	itttt	gt
 80a4a20:	18d2      	addgt	r2, r2, r3
 80a4a22:	4041      	eorgt	r1, r0
 80a4a24:	4048      	eorgt	r0, r1
 80a4a26:	4041      	eorgt	r1, r0
 80a4a28:	bfb8      	it	lt
 80a4a2a:	425b      	neglt	r3, r3
 80a4a2c:	2b19      	cmp	r3, #25
 80a4a2e:	bf88      	it	hi
 80a4a30:	4770      	bxhi	lr
 80a4a32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4a36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4a3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4a3e:	bf18      	it	ne
 80a4a40:	4240      	negne	r0, r0
 80a4a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4a46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4a4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4a4e:	bf18      	it	ne
 80a4a50:	4249      	negne	r1, r1
 80a4a52:	ea92 0f03 	teq	r2, r3
 80a4a56:	d03f      	beq.n	80a4ad8 <__addsf3+0xd8>
 80a4a58:	f1a2 0201 	sub.w	r2, r2, #1
 80a4a5c:	fa41 fc03 	asr.w	ip, r1, r3
 80a4a60:	eb10 000c 	adds.w	r0, r0, ip
 80a4a64:	f1c3 0320 	rsb	r3, r3, #32
 80a4a68:	fa01 f103 	lsl.w	r1, r1, r3
 80a4a6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4a70:	d502      	bpl.n	80a4a78 <__addsf3+0x78>
 80a4a72:	4249      	negs	r1, r1
 80a4a74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4a78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4a7c:	d313      	bcc.n	80a4aa6 <__addsf3+0xa6>
 80a4a7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4a82:	d306      	bcc.n	80a4a92 <__addsf3+0x92>
 80a4a84:	0840      	lsrs	r0, r0, #1
 80a4a86:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4a8a:	f102 0201 	add.w	r2, r2, #1
 80a4a8e:	2afe      	cmp	r2, #254	; 0xfe
 80a4a90:	d251      	bcs.n	80a4b36 <__addsf3+0x136>
 80a4a92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4a96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4a9a:	bf08      	it	eq
 80a4a9c:	f020 0001 	biceq.w	r0, r0, #1
 80a4aa0:	ea40 0003 	orr.w	r0, r0, r3
 80a4aa4:	4770      	bx	lr
 80a4aa6:	0049      	lsls	r1, r1, #1
 80a4aa8:	eb40 0000 	adc.w	r0, r0, r0
 80a4aac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4ab0:	f1a2 0201 	sub.w	r2, r2, #1
 80a4ab4:	d1ed      	bne.n	80a4a92 <__addsf3+0x92>
 80a4ab6:	fab0 fc80 	clz	ip, r0
 80a4aba:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4abe:	ebb2 020c 	subs.w	r2, r2, ip
 80a4ac2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4ac6:	bfaa      	itet	ge
 80a4ac8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4acc:	4252      	neglt	r2, r2
 80a4ace:	4318      	orrge	r0, r3
 80a4ad0:	bfbc      	itt	lt
 80a4ad2:	40d0      	lsrlt	r0, r2
 80a4ad4:	4318      	orrlt	r0, r3
 80a4ad6:	4770      	bx	lr
 80a4ad8:	f092 0f00 	teq	r2, #0
 80a4adc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4ae0:	bf06      	itte	eq
 80a4ae2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4ae6:	3201      	addeq	r2, #1
 80a4ae8:	3b01      	subne	r3, #1
 80a4aea:	e7b5      	b.n	80a4a58 <__addsf3+0x58>
 80a4aec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4af0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4af4:	bf18      	it	ne
 80a4af6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4afa:	d021      	beq.n	80a4b40 <__addsf3+0x140>
 80a4afc:	ea92 0f03 	teq	r2, r3
 80a4b00:	d004      	beq.n	80a4b0c <__addsf3+0x10c>
 80a4b02:	f092 0f00 	teq	r2, #0
 80a4b06:	bf08      	it	eq
 80a4b08:	4608      	moveq	r0, r1
 80a4b0a:	4770      	bx	lr
 80a4b0c:	ea90 0f01 	teq	r0, r1
 80a4b10:	bf1c      	itt	ne
 80a4b12:	2000      	movne	r0, #0
 80a4b14:	4770      	bxne	lr
 80a4b16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4b1a:	d104      	bne.n	80a4b26 <__addsf3+0x126>
 80a4b1c:	0040      	lsls	r0, r0, #1
 80a4b1e:	bf28      	it	cs
 80a4b20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4b24:	4770      	bx	lr
 80a4b26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4b2a:	bf3c      	itt	cc
 80a4b2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4b30:	4770      	bxcc	lr
 80a4b32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4b36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4b3e:	4770      	bx	lr
 80a4b40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4b44:	bf16      	itet	ne
 80a4b46:	4608      	movne	r0, r1
 80a4b48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4b4c:	4601      	movne	r1, r0
 80a4b4e:	0242      	lsls	r2, r0, #9
 80a4b50:	bf06      	itte	eq
 80a4b52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4b56:	ea90 0f01 	teqeq	r0, r1
 80a4b5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4b5e:	4770      	bx	lr

080a4b60 <__aeabi_ui2f>:
 80a4b60:	f04f 0300 	mov.w	r3, #0
 80a4b64:	e004      	b.n	80a4b70 <__aeabi_i2f+0x8>
 80a4b66:	bf00      	nop

080a4b68 <__aeabi_i2f>:
 80a4b68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4b6c:	bf48      	it	mi
 80a4b6e:	4240      	negmi	r0, r0
 80a4b70:	ea5f 0c00 	movs.w	ip, r0
 80a4b74:	bf08      	it	eq
 80a4b76:	4770      	bxeq	lr
 80a4b78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4b7c:	4601      	mov	r1, r0
 80a4b7e:	f04f 0000 	mov.w	r0, #0
 80a4b82:	e01c      	b.n	80a4bbe <__aeabi_l2f+0x2a>

080a4b84 <__aeabi_ul2f>:
 80a4b84:	ea50 0201 	orrs.w	r2, r0, r1
 80a4b88:	bf08      	it	eq
 80a4b8a:	4770      	bxeq	lr
 80a4b8c:	f04f 0300 	mov.w	r3, #0
 80a4b90:	e00a      	b.n	80a4ba8 <__aeabi_l2f+0x14>
 80a4b92:	bf00      	nop

080a4b94 <__aeabi_l2f>:
 80a4b94:	ea50 0201 	orrs.w	r2, r0, r1
 80a4b98:	bf08      	it	eq
 80a4b9a:	4770      	bxeq	lr
 80a4b9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4ba0:	d502      	bpl.n	80a4ba8 <__aeabi_l2f+0x14>
 80a4ba2:	4240      	negs	r0, r0
 80a4ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4ba8:	ea5f 0c01 	movs.w	ip, r1
 80a4bac:	bf02      	ittt	eq
 80a4bae:	4684      	moveq	ip, r0
 80a4bb0:	4601      	moveq	r1, r0
 80a4bb2:	2000      	moveq	r0, #0
 80a4bb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4bb8:	bf08      	it	eq
 80a4bba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4bbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4bc2:	fabc f28c 	clz	r2, ip
 80a4bc6:	3a08      	subs	r2, #8
 80a4bc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4bcc:	db10      	blt.n	80a4bf0 <__aeabi_l2f+0x5c>
 80a4bce:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4bd2:	4463      	add	r3, ip
 80a4bd4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4bd8:	f1c2 0220 	rsb	r2, r2, #32
 80a4bdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4be0:	fa20 f202 	lsr.w	r2, r0, r2
 80a4be4:	eb43 0002 	adc.w	r0, r3, r2
 80a4be8:	bf08      	it	eq
 80a4bea:	f020 0001 	biceq.w	r0, r0, #1
 80a4bee:	4770      	bx	lr
 80a4bf0:	f102 0220 	add.w	r2, r2, #32
 80a4bf4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4bf8:	f1c2 0220 	rsb	r2, r2, #32
 80a4bfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4c00:	fa21 f202 	lsr.w	r2, r1, r2
 80a4c04:	eb43 0002 	adc.w	r0, r3, r2
 80a4c08:	bf08      	it	eq
 80a4c0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4c0e:	4770      	bx	lr

080a4c10 <__aeabi_fmul>:
 80a4c10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4c14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4c18:	bf1e      	ittt	ne
 80a4c1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4c1e:	ea92 0f0c 	teqne	r2, ip
 80a4c22:	ea93 0f0c 	teqne	r3, ip
 80a4c26:	d06f      	beq.n	80a4d08 <__aeabi_fmul+0xf8>
 80a4c28:	441a      	add	r2, r3
 80a4c2a:	ea80 0c01 	eor.w	ip, r0, r1
 80a4c2e:	0240      	lsls	r0, r0, #9
 80a4c30:	bf18      	it	ne
 80a4c32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4c36:	d01e      	beq.n	80a4c76 <__aeabi_fmul+0x66>
 80a4c38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4c3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4c40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4c44:	fba0 3101 	umull	r3, r1, r0, r1
 80a4c48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4c4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4c50:	bf3e      	ittt	cc
 80a4c52:	0049      	lslcc	r1, r1, #1
 80a4c54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4c58:	005b      	lslcc	r3, r3, #1
 80a4c5a:	ea40 0001 	orr.w	r0, r0, r1
 80a4c5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4c62:	2afd      	cmp	r2, #253	; 0xfd
 80a4c64:	d81d      	bhi.n	80a4ca2 <__aeabi_fmul+0x92>
 80a4c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4c6e:	bf08      	it	eq
 80a4c70:	f020 0001 	biceq.w	r0, r0, #1
 80a4c74:	4770      	bx	lr
 80a4c76:	f090 0f00 	teq	r0, #0
 80a4c7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4c7e:	bf08      	it	eq
 80a4c80:	0249      	lsleq	r1, r1, #9
 80a4c82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4c86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4c8a:	3a7f      	subs	r2, #127	; 0x7f
 80a4c8c:	bfc2      	ittt	gt
 80a4c8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4c92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4c96:	4770      	bxgt	lr
 80a4c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c9c:	f04f 0300 	mov.w	r3, #0
 80a4ca0:	3a01      	subs	r2, #1
 80a4ca2:	dc5d      	bgt.n	80a4d60 <__aeabi_fmul+0x150>
 80a4ca4:	f112 0f19 	cmn.w	r2, #25
 80a4ca8:	bfdc      	itt	le
 80a4caa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4cae:	4770      	bxle	lr
 80a4cb0:	f1c2 0200 	rsb	r2, r2, #0
 80a4cb4:	0041      	lsls	r1, r0, #1
 80a4cb6:	fa21 f102 	lsr.w	r1, r1, r2
 80a4cba:	f1c2 0220 	rsb	r2, r2, #32
 80a4cbe:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4cc2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4cc6:	f140 0000 	adc.w	r0, r0, #0
 80a4cca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4cce:	bf08      	it	eq
 80a4cd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4cd4:	4770      	bx	lr
 80a4cd6:	f092 0f00 	teq	r2, #0
 80a4cda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4cde:	bf02      	ittt	eq
 80a4ce0:	0040      	lsleq	r0, r0, #1
 80a4ce2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4ce6:	3a01      	subeq	r2, #1
 80a4ce8:	d0f9      	beq.n	80a4cde <__aeabi_fmul+0xce>
 80a4cea:	ea40 000c 	orr.w	r0, r0, ip
 80a4cee:	f093 0f00 	teq	r3, #0
 80a4cf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4cf6:	bf02      	ittt	eq
 80a4cf8:	0049      	lsleq	r1, r1, #1
 80a4cfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4cfe:	3b01      	subeq	r3, #1
 80a4d00:	d0f9      	beq.n	80a4cf6 <__aeabi_fmul+0xe6>
 80a4d02:	ea41 010c 	orr.w	r1, r1, ip
 80a4d06:	e78f      	b.n	80a4c28 <__aeabi_fmul+0x18>
 80a4d08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4d0c:	ea92 0f0c 	teq	r2, ip
 80a4d10:	bf18      	it	ne
 80a4d12:	ea93 0f0c 	teqne	r3, ip
 80a4d16:	d00a      	beq.n	80a4d2e <__aeabi_fmul+0x11e>
 80a4d18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4d1c:	bf18      	it	ne
 80a4d1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4d22:	d1d8      	bne.n	80a4cd6 <__aeabi_fmul+0xc6>
 80a4d24:	ea80 0001 	eor.w	r0, r0, r1
 80a4d28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4d2c:	4770      	bx	lr
 80a4d2e:	f090 0f00 	teq	r0, #0
 80a4d32:	bf17      	itett	ne
 80a4d34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4d38:	4608      	moveq	r0, r1
 80a4d3a:	f091 0f00 	teqne	r1, #0
 80a4d3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4d42:	d014      	beq.n	80a4d6e <__aeabi_fmul+0x15e>
 80a4d44:	ea92 0f0c 	teq	r2, ip
 80a4d48:	d101      	bne.n	80a4d4e <__aeabi_fmul+0x13e>
 80a4d4a:	0242      	lsls	r2, r0, #9
 80a4d4c:	d10f      	bne.n	80a4d6e <__aeabi_fmul+0x15e>
 80a4d4e:	ea93 0f0c 	teq	r3, ip
 80a4d52:	d103      	bne.n	80a4d5c <__aeabi_fmul+0x14c>
 80a4d54:	024b      	lsls	r3, r1, #9
 80a4d56:	bf18      	it	ne
 80a4d58:	4608      	movne	r0, r1
 80a4d5a:	d108      	bne.n	80a4d6e <__aeabi_fmul+0x15e>
 80a4d5c:	ea80 0001 	eor.w	r0, r0, r1
 80a4d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4d64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4d6c:	4770      	bx	lr
 80a4d6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4d72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4d76:	4770      	bx	lr

080a4d78 <__aeabi_fdiv>:
 80a4d78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4d7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4d80:	bf1e      	ittt	ne
 80a4d82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4d86:	ea92 0f0c 	teqne	r2, ip
 80a4d8a:	ea93 0f0c 	teqne	r3, ip
 80a4d8e:	d069      	beq.n	80a4e64 <__aeabi_fdiv+0xec>
 80a4d90:	eba2 0203 	sub.w	r2, r2, r3
 80a4d94:	ea80 0c01 	eor.w	ip, r0, r1
 80a4d98:	0249      	lsls	r1, r1, #9
 80a4d9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4d9e:	d037      	beq.n	80a4e10 <__aeabi_fdiv+0x98>
 80a4da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4da4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4da8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4db0:	428b      	cmp	r3, r1
 80a4db2:	bf38      	it	cc
 80a4db4:	005b      	lslcc	r3, r3, #1
 80a4db6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4dba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4dbe:	428b      	cmp	r3, r1
 80a4dc0:	bf24      	itt	cs
 80a4dc2:	1a5b      	subcs	r3, r3, r1
 80a4dc4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4dc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4dcc:	bf24      	itt	cs
 80a4dce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4dd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4dd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4dda:	bf24      	itt	cs
 80a4ddc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4de0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4de4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4de8:	bf24      	itt	cs
 80a4dea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4dee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4df2:	011b      	lsls	r3, r3, #4
 80a4df4:	bf18      	it	ne
 80a4df6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4dfa:	d1e0      	bne.n	80a4dbe <__aeabi_fdiv+0x46>
 80a4dfc:	2afd      	cmp	r2, #253	; 0xfd
 80a4dfe:	f63f af50 	bhi.w	80a4ca2 <__aeabi_fmul+0x92>
 80a4e02:	428b      	cmp	r3, r1
 80a4e04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4e08:	bf08      	it	eq
 80a4e0a:	f020 0001 	biceq.w	r0, r0, #1
 80a4e0e:	4770      	bx	lr
 80a4e10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4e14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4e18:	327f      	adds	r2, #127	; 0x7f
 80a4e1a:	bfc2      	ittt	gt
 80a4e1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4e20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4e24:	4770      	bxgt	lr
 80a4e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4e2a:	f04f 0300 	mov.w	r3, #0
 80a4e2e:	3a01      	subs	r2, #1
 80a4e30:	e737      	b.n	80a4ca2 <__aeabi_fmul+0x92>
 80a4e32:	f092 0f00 	teq	r2, #0
 80a4e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4e3a:	bf02      	ittt	eq
 80a4e3c:	0040      	lsleq	r0, r0, #1
 80a4e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4e42:	3a01      	subeq	r2, #1
 80a4e44:	d0f9      	beq.n	80a4e3a <__aeabi_fdiv+0xc2>
 80a4e46:	ea40 000c 	orr.w	r0, r0, ip
 80a4e4a:	f093 0f00 	teq	r3, #0
 80a4e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4e52:	bf02      	ittt	eq
 80a4e54:	0049      	lsleq	r1, r1, #1
 80a4e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4e5a:	3b01      	subeq	r3, #1
 80a4e5c:	d0f9      	beq.n	80a4e52 <__aeabi_fdiv+0xda>
 80a4e5e:	ea41 010c 	orr.w	r1, r1, ip
 80a4e62:	e795      	b.n	80a4d90 <__aeabi_fdiv+0x18>
 80a4e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4e68:	ea92 0f0c 	teq	r2, ip
 80a4e6c:	d108      	bne.n	80a4e80 <__aeabi_fdiv+0x108>
 80a4e6e:	0242      	lsls	r2, r0, #9
 80a4e70:	f47f af7d 	bne.w	80a4d6e <__aeabi_fmul+0x15e>
 80a4e74:	ea93 0f0c 	teq	r3, ip
 80a4e78:	f47f af70 	bne.w	80a4d5c <__aeabi_fmul+0x14c>
 80a4e7c:	4608      	mov	r0, r1
 80a4e7e:	e776      	b.n	80a4d6e <__aeabi_fmul+0x15e>
 80a4e80:	ea93 0f0c 	teq	r3, ip
 80a4e84:	d104      	bne.n	80a4e90 <__aeabi_fdiv+0x118>
 80a4e86:	024b      	lsls	r3, r1, #9
 80a4e88:	f43f af4c 	beq.w	80a4d24 <__aeabi_fmul+0x114>
 80a4e8c:	4608      	mov	r0, r1
 80a4e8e:	e76e      	b.n	80a4d6e <__aeabi_fmul+0x15e>
 80a4e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4e94:	bf18      	it	ne
 80a4e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4e9a:	d1ca      	bne.n	80a4e32 <__aeabi_fdiv+0xba>
 80a4e9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4ea0:	f47f af5c 	bne.w	80a4d5c <__aeabi_fmul+0x14c>
 80a4ea4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4ea8:	f47f af3c 	bne.w	80a4d24 <__aeabi_fmul+0x114>
 80a4eac:	e75f      	b.n	80a4d6e <__aeabi_fmul+0x15e>
 80a4eae:	bf00      	nop

080a4eb0 <__gesf2>:
 80a4eb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4eb4:	e006      	b.n	80a4ec4 <__cmpsf2+0x4>
 80a4eb6:	bf00      	nop

080a4eb8 <__lesf2>:
 80a4eb8:	f04f 0c01 	mov.w	ip, #1
 80a4ebc:	e002      	b.n	80a4ec4 <__cmpsf2+0x4>
 80a4ebe:	bf00      	nop

080a4ec0 <__cmpsf2>:
 80a4ec0:	f04f 0c01 	mov.w	ip, #1
 80a4ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4ed4:	bf18      	it	ne
 80a4ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4eda:	d011      	beq.n	80a4f00 <__cmpsf2+0x40>
 80a4edc:	b001      	add	sp, #4
 80a4ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4ee2:	bf18      	it	ne
 80a4ee4:	ea90 0f01 	teqne	r0, r1
 80a4ee8:	bf58      	it	pl
 80a4eea:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4eee:	bf88      	it	hi
 80a4ef0:	17c8      	asrhi	r0, r1, #31
 80a4ef2:	bf38      	it	cc
 80a4ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4ef8:	bf18      	it	ne
 80a4efa:	f040 0001 	orrne.w	r0, r0, #1
 80a4efe:	4770      	bx	lr
 80a4f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4f04:	d102      	bne.n	80a4f0c <__cmpsf2+0x4c>
 80a4f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4f0a:	d105      	bne.n	80a4f18 <__cmpsf2+0x58>
 80a4f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4f10:	d1e4      	bne.n	80a4edc <__cmpsf2+0x1c>
 80a4f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4f16:	d0e1      	beq.n	80a4edc <__cmpsf2+0x1c>
 80a4f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4f1c:	4770      	bx	lr
 80a4f1e:	bf00      	nop

080a4f20 <__aeabi_cfrcmple>:
 80a4f20:	4684      	mov	ip, r0
 80a4f22:	4608      	mov	r0, r1
 80a4f24:	4661      	mov	r1, ip
 80a4f26:	e7ff      	b.n	80a4f28 <__aeabi_cfcmpeq>

080a4f28 <__aeabi_cfcmpeq>:
 80a4f28:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4f2a:	f7ff ffc9 	bl	80a4ec0 <__cmpsf2>
 80a4f2e:	2800      	cmp	r0, #0
 80a4f30:	bf48      	it	mi
 80a4f32:	f110 0f00 	cmnmi.w	r0, #0
 80a4f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4f38 <__aeabi_fcmpeq>:
 80a4f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f3c:	f7ff fff4 	bl	80a4f28 <__aeabi_cfcmpeq>
 80a4f40:	bf0c      	ite	eq
 80a4f42:	2001      	moveq	r0, #1
 80a4f44:	2000      	movne	r0, #0
 80a4f46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f4a:	bf00      	nop

080a4f4c <__aeabi_fcmplt>:
 80a4f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f50:	f7ff ffea 	bl	80a4f28 <__aeabi_cfcmpeq>
 80a4f54:	bf34      	ite	cc
 80a4f56:	2001      	movcc	r0, #1
 80a4f58:	2000      	movcs	r0, #0
 80a4f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f5e:	bf00      	nop

080a4f60 <__aeabi_fcmple>:
 80a4f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f64:	f7ff ffe0 	bl	80a4f28 <__aeabi_cfcmpeq>
 80a4f68:	bf94      	ite	ls
 80a4f6a:	2001      	movls	r0, #1
 80a4f6c:	2000      	movhi	r0, #0
 80a4f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f72:	bf00      	nop

080a4f74 <__aeabi_fcmpge>:
 80a4f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f78:	f7ff ffd2 	bl	80a4f20 <__aeabi_cfrcmple>
 80a4f7c:	bf94      	ite	ls
 80a4f7e:	2001      	movls	r0, #1
 80a4f80:	2000      	movhi	r0, #0
 80a4f82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f86:	bf00      	nop

080a4f88 <__aeabi_fcmpgt>:
 80a4f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f8c:	f7ff ffc8 	bl	80a4f20 <__aeabi_cfrcmple>
 80a4f90:	bf34      	ite	cc
 80a4f92:	2001      	movcc	r0, #1
 80a4f94:	2000      	movcs	r0, #0
 80a4f96:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f9a:	bf00      	nop

080a4f9c <__aeabi_f2iz>:
 80a4f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4fa4:	d30f      	bcc.n	80a4fc6 <__aeabi_f2iz+0x2a>
 80a4fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a4fae:	d90d      	bls.n	80a4fcc <__aeabi_f2iz+0x30>
 80a4fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4fb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4fbc:	fa23 f002 	lsr.w	r0, r3, r2
 80a4fc0:	bf18      	it	ne
 80a4fc2:	4240      	negne	r0, r0
 80a4fc4:	4770      	bx	lr
 80a4fc6:	f04f 0000 	mov.w	r0, #0
 80a4fca:	4770      	bx	lr
 80a4fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a4fd0:	d101      	bne.n	80a4fd6 <__aeabi_f2iz+0x3a>
 80a4fd2:	0242      	lsls	r2, r0, #9
 80a4fd4:	d105      	bne.n	80a4fe2 <__aeabi_f2iz+0x46>
 80a4fd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4fda:	bf08      	it	eq
 80a4fdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4fe0:	4770      	bx	lr
 80a4fe2:	f04f 0000 	mov.w	r0, #0
 80a4fe6:	4770      	bx	lr

080a4fe8 <__cxa_atexit>:
 80a4fe8:	b510      	push	{r4, lr}
 80a4fea:	4c05      	ldr	r4, [pc, #20]	; (80a5000 <__cxa_atexit+0x18>)
 80a4fec:	4613      	mov	r3, r2
 80a4fee:	b12c      	cbz	r4, 80a4ffc <__cxa_atexit+0x14>
 80a4ff0:	460a      	mov	r2, r1
 80a4ff2:	4601      	mov	r1, r0
 80a4ff4:	2002      	movs	r0, #2
 80a4ff6:	f3af 8000 	nop.w
 80a4ffa:	bd10      	pop	{r4, pc}
 80a4ffc:	4620      	mov	r0, r4
 80a4ffe:	bd10      	pop	{r4, pc}
 80a5000:	00000000 	.word	0x00000000

080a5004 <memcpy>:
 80a5004:	b510      	push	{r4, lr}
 80a5006:	1e43      	subs	r3, r0, #1
 80a5008:	440a      	add	r2, r1
 80a500a:	4291      	cmp	r1, r2
 80a500c:	d004      	beq.n	80a5018 <memcpy+0x14>
 80a500e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5012:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5016:	e7f8      	b.n	80a500a <memcpy+0x6>
 80a5018:	bd10      	pop	{r4, pc}

080a501a <memset>:
 80a501a:	4603      	mov	r3, r0
 80a501c:	4402      	add	r2, r0
 80a501e:	4293      	cmp	r3, r2
 80a5020:	d002      	beq.n	80a5028 <memset+0xe>
 80a5022:	f803 1b01 	strb.w	r1, [r3], #1
 80a5026:	e7fa      	b.n	80a501e <memset+0x4>
 80a5028:	4770      	bx	lr
	...

080a502c <srand>:
 80a502c:	b538      	push	{r3, r4, r5, lr}
 80a502e:	4b12      	ldr	r3, [pc, #72]	; (80a5078 <srand+0x4c>)
 80a5030:	4605      	mov	r5, r0
 80a5032:	681c      	ldr	r4, [r3, #0]
 80a5034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5036:	b9d3      	cbnz	r3, 80a506e <srand+0x42>
 80a5038:	2018      	movs	r0, #24
 80a503a:	f7fd fdfd 	bl	80a2c38 <malloc>
 80a503e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5042:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5044:	8003      	strh	r3, [r0, #0]
 80a5046:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a504a:	8043      	strh	r3, [r0, #2]
 80a504c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5050:	8083      	strh	r3, [r0, #4]
 80a5052:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5056:	80c3      	strh	r3, [r0, #6]
 80a5058:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a505c:	8103      	strh	r3, [r0, #8]
 80a505e:	2305      	movs	r3, #5
 80a5060:	8143      	strh	r3, [r0, #10]
 80a5062:	230b      	movs	r3, #11
 80a5064:	8183      	strh	r3, [r0, #12]
 80a5066:	2201      	movs	r2, #1
 80a5068:	2300      	movs	r3, #0
 80a506a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a506e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5070:	2200      	movs	r2, #0
 80a5072:	611d      	str	r5, [r3, #16]
 80a5074:	615a      	str	r2, [r3, #20]
 80a5076:	bd38      	pop	{r3, r4, r5, pc}
 80a5078:	20000098 	.word	0x20000098

080a507c <rand>:
 80a507c:	4b19      	ldr	r3, [pc, #100]	; (80a50e4 <rand+0x68>)
 80a507e:	b510      	push	{r4, lr}
 80a5080:	681c      	ldr	r4, [r3, #0]
 80a5082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5084:	b9d3      	cbnz	r3, 80a50bc <rand+0x40>
 80a5086:	2018      	movs	r0, #24
 80a5088:	f7fd fdd6 	bl	80a2c38 <malloc>
 80a508c:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5090:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5092:	8003      	strh	r3, [r0, #0]
 80a5094:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5098:	8043      	strh	r3, [r0, #2]
 80a509a:	f241 2334 	movw	r3, #4660	; 0x1234
 80a509e:	8083      	strh	r3, [r0, #4]
 80a50a0:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a50a4:	80c3      	strh	r3, [r0, #6]
 80a50a6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a50aa:	8103      	strh	r3, [r0, #8]
 80a50ac:	2305      	movs	r3, #5
 80a50ae:	8143      	strh	r3, [r0, #10]
 80a50b0:	230b      	movs	r3, #11
 80a50b2:	8183      	strh	r3, [r0, #12]
 80a50b4:	2201      	movs	r2, #1
 80a50b6:	2300      	movs	r3, #0
 80a50b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a50bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a50be:	4c0a      	ldr	r4, [pc, #40]	; (80a50e8 <rand+0x6c>)
 80a50c0:	690b      	ldr	r3, [r1, #16]
 80a50c2:	6948      	ldr	r0, [r1, #20]
 80a50c4:	435c      	muls	r4, r3
 80a50c6:	4a09      	ldr	r2, [pc, #36]	; (80a50ec <rand+0x70>)
 80a50c8:	fb02 4000 	mla	r0, r2, r0, r4
 80a50cc:	fba3 2302 	umull	r2, r3, r3, r2
 80a50d0:	3201      	adds	r2, #1
 80a50d2:	4403      	add	r3, r0
 80a50d4:	f143 0300 	adc.w	r3, r3, #0
 80a50d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a50dc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a50e0:	bd10      	pop	{r4, pc}
 80a50e2:	bf00      	nop
 80a50e4:	20000098 	.word	0x20000098
 80a50e8:	5851f42d 	.word	0x5851f42d
 80a50ec:	4c957f2d 	.word	0x4c957f2d

080a50f0 <strlen>:
 80a50f0:	4603      	mov	r3, r0
 80a50f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a50f6:	2a00      	cmp	r2, #0
 80a50f8:	d1fb      	bne.n	80a50f2 <strlen+0x2>
 80a50fa:	1a18      	subs	r0, r3, r0
 80a50fc:	3801      	subs	r0, #1
 80a50fe:	4770      	bx	lr

080a5100 <dynalib_user>:
 80a5100:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a5110:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a5120:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a5130:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a5140:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a5150:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a5160:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a5170:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a5180:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a5190:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a51a0:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a51b0:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a51c0:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a51d0:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a51e0:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a51f0:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a5200:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a5210:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a5220:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a5230:	4853 5300 4554 2050 4952 4847 2054 4f53     SH.STEP RIGHT SO
 80a5240:	4f4c 5300 4554 2050 454c 5446 5320 4c4f     LO.STEP LEFT SOL
 80a5250:	004f 5453 5045 5220 4749 5448 4420 4f55     O.STEP RIGHT DUO
 80a5260:	5300 4554 2050 454c 5446 4420 4f55 5400     .STEP LEFT DUO.T
 80a5270:	746f 6c61 6d20 766f 6d65 6e65 3a74 0020     otal movement: .
 80a5280:	7053 6565 2064 696c 696d 2074 203a 6600     Speed limit : .f
 80a5290:	756c 5878 3a20 0020 6c66 7875 2059 203a     luxX : .fluxY : 
 80a52a0:	6600 756c 5a78 3a20 0020 5254 554f 4c42     .fluxZ : .TROUBL
 80a52b0:	2045 4f43 4e55 2054 3a3a 0020 6863 6e75     E COUNT :: .chun
 80a52c0:	206b 3a3a 0020 4156 3a4c 203a 2000 3a3a     k :: .VAL:: . ::
 80a52d0:	2020 6c00 6769 746e 6968 676e 7400 7275       .lignthing.tur
 80a52e0:	696e 676e 6f20 6666 6300 6568 6b63 756e     ning off.checknu
 80a52f0:	006d                                        m.

080a52f2 <CSWTCH.57>:
 80a52f2:	0020 0000 0040 0000 0060                     ...@...`.

080a52fc <CSWTCH.215>:
 80a52fc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a530c:	0050 0000                                   P...

080a5310 <_ZTV7TwoWire>:
	...
 80a5318:	2c81 080a 2ccb 080a 2ca3 080a 2c83 080a     .,...,...,...,..
 80a5328:	2cab 080a 2cb3 080a 2cbb 080a 2cc3 080a     .,...,...,...,..

080a5338 <_ZTV9IPAddress>:
	...
 80a5340:	2d3f 080a 00b3 080a 00d5 080a 6162 6475     ?-..........baud
 80a5350:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a5360:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a5370:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a5380:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a5390:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a53a0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a53b0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a53c0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a53d0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a53e0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a53f0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a5400:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a5410:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a5420:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a5430 <_ZTVN5spark12NetworkClassE>:
	...
 80a5438:	2e1d 080a 2e27 080a 2e31 080a 2e3b 080a     ....'...1...;...
 80a5448:	2e45 080a 2e51 080a 2e5d 080a 2e69 080a     E...Q...]...i...
 80a5458:	2e71 080a 2e7b 080a 2e85 080a 616e 006e     q...{.......nan.
 80a5468:	766f 0066 6e69 0066                         ovf.inf.

080a5470 <_ZTV8SPIClass>:
	...
 80a5478:	31fd 080a 31ff 080a                         .1...1..

080a5480 <_ZL14clock_divisors>:
 80a5480:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a5490:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a54a0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a54b0:	0000 0000                                   ....

080a54b4 <_ZTV3UDP>:
	...
 80a54bc:	00b5 080a 00e3 080a 3413 080a 3533 080a     .........4..35..
 80a54cc:	340b 080a 3429 080a 3447 080a 3461 080a     .4..)4..G4..a4..
 80a54dc:	3483 080a 34cd 080a 34ef 080a 3685 080a     .4...4...4...6..
 80a54ec:	3599 080a 33f5 080a 3795 080a 3601 080a     .5...3...7...6..
 80a54fc:	36bd 080a 37c3 080a 355d 080a 3401 080a     .6...7..]5...4..
 80a550c:	3665 080a 3407 080a 3463 080a fff0 ffff     e6...4..c4......
 80a551c:	0000 0000 347b 080a                         ....{4..

080a5524 <_ZTV11USARTSerial>:
	...
 80a552c:	37fb 080a 384b 080a 3859 080a 2f01 080a     .7..K8..Y8.../..
 80a553c:	380f 080a 3831 080a 381d 080a 3845 080a     .8..18...8..E8..
 80a554c:	37fd 080a 3801 080a                         .7...8..

080a5554 <_ZTV9USBSerial>:
	...
 80a555c:	3901 080a 3951 080a 395f 080a 2f01 080a     .9..Q9.._9.../..
 80a556c:	393d 080a 3903 080a 3919 080a 394b 080a     =9...9...9..K9..
 80a557c:	392f 080a 38fd 080a                         /9...8..

080a5584 <_ZTVN5spark9WiFiClassE>:
	...
 80a558c:	3b4f 080a 3b45 080a 3b3b 080a 3aad 080a     O;..E;..;;...:..
 80a559c:	3b2f 080a 3b23 080a 3b17 080a 3b0f 080a     /;..#;...;...;..
 80a55ac:	3b05 080a 3afb 080a 3ab7 080a               .;...:...:..

080a55b8 <__sf_fake_stdin>:
	...

080a55d8 <__sf_fake_stdout>:
	...

080a55f8 <__sf_fake_stderr>:
	...
 80a5618:	0043                                        C.

080a561a <link_const_variable_data_end>:
	...

080a561c <link_constructors_location>:
 80a561c:	080a09c5 	.word	0x080a09c5
 80a5620:	080a0a85 	.word	0x080a0a85
 80a5624:	080a148d 	.word	0x080a148d
 80a5628:	080a27c9 	.word	0x080a27c9
 80a562c:	080a2e0d 	.word	0x080a2e0d
 80a5630:	080a2eed 	.word	0x080a2eed
 80a5634:	080a31e1 	.word	0x080a31e1
 80a5638:	080a33c9 	.word	0x080a33c9
 80a563c:	080a33e1 	.word	0x080a33e1
 80a5640:	080a3b59 	.word	0x080a3b59
 80a5644:	080a3d81 	.word	0x080a3d81
 80a5648:	080a3db1 	.word	0x080a3db1
 80a564c:	080a3e05 	.word	0x080a3e05
 80a5650:	080a3ec9 	.word	0x080a3ec9
 80a5654:	080a3f4d 	.word	0x080a3f4d
 80a5658:	080a3fd1 	.word	0x080a3fd1

080a565c <link_constructors_end>:
 80a565c:	00000000 	.word	0x00000000
