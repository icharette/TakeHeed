
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.1-rc.1/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007570  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a7590  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a7594  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000708  20000088  20000088  00040088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a761c  080a761c  0003761c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a7644  080a7644  00037644  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cb0e9  00000000  00000000  00037648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012afd  00000000  00000000  00102731  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001963c  00000000  00000000  0011522e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002488  00000000  00000000  0012e86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003918  00000000  00000000  00130cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a0f6  00000000  00000000  0013460a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c809  00000000  00000000  0015e700  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aabaa  00000000  00000000  0018af09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000caa4  00000000  00000000  00235ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fe47 	bl	80a6cc4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fe4c 	bl	80a6cda <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a7594 	.word	0x080a7594
 80a0050:	20000088 	.word	0x20000088
 80a0054:	20000088 	.word	0x20000088
 80a0058:	20000790 	.word	0x20000790
 80a005c:	20000790 	.word	0x20000790

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 f91b 	bl	80a429c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a753c 	.word	0x080a753c
 80a0088:	080a7584 	.word	0x080a7584

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8e8 	b.w	80a0260 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fd15 	bl	80a0ac0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f004 b8c1 	b.w	80a4220 <_post_loop>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f003 b8c7 	b.w	80a3230 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f003 b8cd 	b.w	80a3240 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b6:	4770      	bx	lr

080a00b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <_ZN3UDPD1Ev+0x1c>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	3364      	adds	r3, #100	; 0x64
 80a00c2:	6103      	str	r3, [r0, #16]
 80a00c4:	f003 fd2a 	bl	80a3b1c <_ZN3UDP4stopEv>
 80a00c8:	4620      	mov	r0, r4
 80a00ca:	f003 fe5f 	bl	80a3d8c <_ZN3UDP13releaseBufferEv>
 80a00ce:	4620      	mov	r0, r4
 80a00d0:	bd10      	pop	{r4, pc}
 80a00d2:	bf00      	nop
 80a00d4:	080a7204 	.word	0x080a7204

080a00d8 <_ZN9IPAddressD0Ev>:
 80a00d8:	b510      	push	{r4, lr}
 80a00da:	4604      	mov	r4, r0
 80a00dc:	2118      	movs	r1, #24
 80a00de:	f004 f9b6 	bl	80a444e <_ZdlPvj>
 80a00e2:	4620      	mov	r0, r4
 80a00e4:	bd10      	pop	{r4, pc}

080a00e6 <_ZN3UDPD0Ev>:
 80a00e6:	b510      	push	{r4, lr}
 80a00e8:	4604      	mov	r4, r0
 80a00ea:	f7ff ffe5 	bl	80a00b8 <_ZN3UDPD1Ev>
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	214c      	movs	r1, #76	; 0x4c
 80a00f2:	f004 f9ac 	bl	80a444e <_ZdlPvj>
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	bd10      	pop	{r4, pc}
	...

080a00fc <_Z15calibrateSensorv>:
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
}

void calibrateSensor(){
 80a00fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0100:	f003 ff9a 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0104:	4927      	ldr	r1, [pc, #156]	; (80a01a4 <_Z15calibrateSensorv+0xa8>)
 80a0106:	f003 fa1d 	bl	80a3544 <_ZN5Print5printEPKc>
  for(int i = 0; i < count; i++){
      imu.readAccel();
 80a010a:	4e27      	ldr	r6, [pc, #156]	; (80a01a8 <_Z15calibrateSensorv+0xac>)

    refX += imu.calcAccel(imu.ax);
 80a010c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80a01b8 <_Z15calibrateSensorv+0xbc>
    refY += imu.calcAccel(imu.ay);
 80a0110:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80a01bc <_Z15calibrateSensorv+0xc0>
  Serial.println("Calibration finished");
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0114:	2564      	movs	r5, #100	; 0x64
  for(int i = 0; i < count; i++){
      imu.readAccel();
 80a0116:	4824      	ldr	r0, [pc, #144]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a0118:	f001 f8c0 	bl	80a129c <_ZN7LSM9DS19readAccelEv>

    refX += imu.calcAccel(imu.ax);
 80a011c:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a0120:	4821      	ldr	r0, [pc, #132]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a0122:	f000 fd9c 	bl	80a0c5e <_ZN7LSM9DS19calcAccelEs>
 80a0126:	4601      	mov	r1, r0
 80a0128:	f8db 0000 	ldr.w	r0, [fp]
 80a012c:	f006 fac8 	bl	80a66c0 <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a0130:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
 80a0134:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a0138:	481b      	ldr	r0, [pc, #108]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a013a:	f000 fd90 	bl	80a0c5e <_ZN7LSM9DS19calcAccelEs>
 80a013e:	4601      	mov	r1, r0
 80a0140:	f8da 0000 	ldr.w	r0, [sl]
 80a0144:	f006 fabc 	bl	80a66c0 <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a0148:	4c18      	ldr	r4, [pc, #96]	; (80a01ac <_Z15calibrateSensorv+0xb0>)
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a014a:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a014e:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a0152:	4815      	ldr	r0, [pc, #84]	; (80a01a8 <_Z15calibrateSensorv+0xac>)
 80a0154:	f000 fd83 	bl	80a0c5e <_ZN7LSM9DS19calcAccelEs>
 80a0158:	6821      	ldr	r1, [r4, #0]
 80a015a:	f006 fab1 	bl	80a66c0 <__addsf3>
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a015e:	3d01      	subs	r5, #1
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
 80a0160:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a01b8 <_Z15calibrateSensorv+0xbc>
    refY += imu.calcAccel(imu.ay);
 80a0164:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a01bc <_Z15calibrateSensorv+0xc0>
    refZ += imu.calcAccel(imu.az);
 80a0168:	4607      	mov	r7, r0
 80a016a:	6020      	str	r0, [r4, #0]
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a016c:	d1d3      	bne.n	80a0116 <_Z15calibrateSensorv+0x1a>

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a016e:	f8d9 0000 	ldr.w	r0, [r9]
 80a0172:	490f      	ldr	r1, [pc, #60]	; (80a01b0 <_Z15calibrateSensorv+0xb4>)
 80a0174:	f006 fc60 	bl	80a6a38 <__aeabi_fdiv>
  refY = refY / count;
 80a0178:	490d      	ldr	r1, [pc, #52]	; (80a01b0 <_Z15calibrateSensorv+0xb4>)

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a017a:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / count;
 80a017e:	f8d8 0000 	ldr.w	r0, [r8]
 80a0182:	f006 fc59 	bl	80a6a38 <__aeabi_fdiv>
  refZ = refZ / count; 
 80a0186:	490a      	ldr	r1, [pc, #40]	; (80a01b0 <_Z15calibrateSensorv+0xb4>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
 80a0188:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / count; 
 80a018c:	4638      	mov	r0, r7
 80a018e:	f006 fc53 	bl	80a6a38 <__aeabi_fdiv>
 80a0192:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a0194:	f003 ff50 	bl	80a4038 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a0198:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
 80a019c:	4905      	ldr	r1, [pc, #20]	; (80a01b4 <_Z15calibrateSensorv+0xb8>)
 80a019e:	f003 b9ea 	b.w	80a3576 <_ZN5Print7printlnEPKc>
 80a01a2:	bf00      	nop
 80a01a4:	080a6de8 	.word	0x080a6de8
 80a01a8:	200000b8 	.word	0x200000b8
 80a01ac:	2000017c 	.word	0x2000017c
 80a01b0:	42c80000 	.word	0x42c80000
 80a01b4:	080a6e01 	.word	0x080a6e01
 80a01b8:	20000174 	.word	0x20000174
 80a01bc:	20000178 	.word	0x20000178

080a01c0 <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a01c0:	b538      	push	{r3, r4, r5, lr}


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01c2:	4c1e      	ldr	r4, [pc, #120]	; (80a023c <_Z8setupImuv+0x7c>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a01c4:	231e      	movs	r3, #30
 80a01c6:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01c8:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a01ca:	4a1d      	ldr	r2, [pc, #116]	; (80a0240 <_Z8setupImuv+0x80>)
void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01cc:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a01ce:	4b1d      	ldr	r3, [pc, #116]	; (80a0244 <_Z8setupImuv+0x84>)
const int16_t K3 = 446;

void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01d0:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a01d2:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a01d4:	4b1c      	ldr	r3, [pc, #112]	; (80a0248 <_Z8setupImuv+0x88>)
 80a01d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

  if (!imu.begin())
 80a01da:	4620      	mov	r0, r4
const int16_t K3 = 446;

void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01dc:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a01de:	601a      	str	r2, [r3, #0]

  if (!imu.begin())
 80a01e0:	f000 ffb9 	bl	80a1156 <_ZN7LSM9DS15beginEv>
 80a01e4:	b998      	cbnz	r0, 80a020e <_Z8setupImuv+0x4e>
  {
    digitalWrite(D7, HIGH);
 80a01e6:	4629      	mov	r1, r5
 80a01e8:	2007      	movs	r0, #7
 80a01ea:	f004 f8b8 	bl	80a435e <digitalWrite>
    Serial.println("Failed to communicate with LSM9DS1.");
 80a01ee:	f003 ff23 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a01f2:	4916      	ldr	r1, [pc, #88]	; (80a024c <_Z8setupImuv+0x8c>)
 80a01f4:	f003 f9bf 	bl	80a3576 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a01f8:	f003 ff1e 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a01fc:	4914      	ldr	r1, [pc, #80]	; (80a0250 <_Z8setupImuv+0x90>)
 80a01fe:	f003 f9ba 	bl	80a3576 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a0202:	f003 ff19 	bl	80a4038 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0206:	4913      	ldr	r1, [pc, #76]	; (80a0254 <_Z8setupImuv+0x94>)
 80a0208:	f003 f9b5 	bl	80a3576 <_ZN5Print7printlnEPKc>
 80a020c:	e7fe      	b.n	80a020c <_Z8setupImuv+0x4c>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a020e:	f003 ff13 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0212:	4911      	ldr	r1, [pc, #68]	; (80a0258 <_Z8setupImuv+0x98>)
 80a0214:	f003 f9af 	bl	80a3576 <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a0218:	4629      	mov	r1, r5
 80a021a:	4620      	mov	r0, r4
 80a021c:	f001 f8a0 	bl	80a1360 <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a0220:	4629      	mov	r1, r5
 80a0222:	4620      	mov	r0, r4
 80a0224:	f001 f968 	bl	80a14f8 <_ZN7LSM9DS112calibrateMagEb>
  calibrateSensor();
 80a0228:	f7ff ff68 	bl	80a00fc <_Z15calibrateSensorv>
  Serial.println("Calibration finished");
 80a022c:	f003 ff04 	bl	80a4038 <_Z16_fetch_usbserialv>
}
 80a0230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
 80a0234:	4909      	ldr	r1, [pc, #36]	; (80a025c <_Z8setupImuv+0x9c>)
 80a0236:	f003 b99e 	b.w	80a3576 <_ZN5Print7printlnEPKc>
 80a023a:	bf00      	nop
 80a023c:	200000b8 	.word	0x200000b8
 80a0240:	40a00000 	.word	0x40a00000
 80a0244:	20000098 	.word	0x20000098
 80a0248:	2000016c 	.word	0x2000016c
 80a024c:	080a6e06 	.word	0x080a6e06
 80a0250:	080a6e2a 	.word	0x080a6e2a
 80a0254:	080a6e3f 	.word	0x080a6e3f
 80a0258:	080a6ec7 	.word	0x080a6ec7
 80a025c:	080a6edb 	.word	0x080a6edb

080a0260 <setup>:
 
Stepper stepper(STEPS, A1, A2, A3, A4);

bool onlyMotor = true;

void setup() {
 80a0260:	b570      	push	{r4, r5, r6, lr}
  pinMode(D7, OUTPUT);
 80a0262:	2101      	movs	r1, #1
 
Stepper stepper(STEPS, A1, A2, A3, A4);

bool onlyMotor = true;

void setup() {
 80a0264:	b096      	sub	sp, #88	; 0x58
  pinMode(D7, OUTPUT);
 80a0266:	2007      	movs	r0, #7
 80a0268:	f004 f868 	bl	80a433c <pinMode>
  digitalWrite(D7, LOW);
 80a026c:	2100      	movs	r1, #0
 80a026e:	2007      	movs	r0, #7
 80a0270:	f004 f875 	bl	80a435e <digitalWrite>
  for(int i = 0; i < PIXEL_COUNT; i++){
    pixels[i] = true;
 80a0274:	4a3a      	ldr	r2, [pc, #232]	; (80a0360 <setup+0x100>)
bool onlyMotor = true;

void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a0276:	2300      	movs	r3, #0
    pixels[i] = true;
 80a0278:	2101      	movs	r1, #1
 80a027a:	5499      	strb	r1, [r3, r2]
bool onlyMotor = true;

void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a027c:	3301      	adds	r3, #1
 80a027e:	2b18      	cmp	r3, #24
 80a0280:	d1fb      	bne.n	80a027a <setup+0x1a>
    pixels[i] = true;
  }

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0282:	f003 fed9 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0286:	f003 febe 	bl	80a4006 <_ZN9USBSerialcvbEv>
 80a028a:	2800      	cmp	r0, #0
 80a028c:	d0f9      	beq.n	80a0282 <setup+0x22>
 80a028e:	4c35      	ldr	r4, [pc, #212]	; (80a0364 <setup+0x104>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0290:	2300      	movs	r3, #0
 80a0292:	461a      	mov	r2, r3
 80a0294:	4619      	mov	r1, r3
 80a0296:	6860      	ldr	r0, [r4, #4]
 80a0298:	f002 ff6a 	bl	80a3170 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a029c:	2200      	movs	r2, #0
 80a029e:	4611      	mov	r1, r2
 80a02a0:	6860      	ldr	r0, [r4, #4]
 80a02a2:	4d30      	ldr	r5, [pc, #192]	; (80a0364 <setup+0x104>)
 80a02a4:	f002 ff7c 	bl	80a31a0 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a02a8:	2800      	cmp	r0, #0
 80a02aa:	d0f7      	beq.n	80a029c <setup+0x3c>
  Serial.println("Setup");
 80a02ac:	f003 fec4 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a02b0:	492d      	ldr	r1, [pc, #180]	; (80a0368 <setup+0x108>)
 80a02b2:	f003 f960 	bl	80a3576 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a02b6:	4b2d      	ldr	r3, [pc, #180]	; (80a036c <setup+0x10c>)
 80a02b8:	2200      	movs	r2, #0
 80a02ba:	8819      	ldrh	r1, [r3, #0]
 80a02bc:	482c      	ldr	r0, [pc, #176]	; (80a0370 <setup+0x110>)
 80a02be:	f003 fc08 	bl	80a3ad2 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a02c2:	2300      	movs	r3, #0
 80a02c4:	4619      	mov	r1, r3
 80a02c6:	4a2b      	ldr	r2, [pc, #172]	; (80a0374 <setup+0x114>)
 80a02c8:	6868      	ldr	r0, [r5, #4]
 80a02ca:	f002 ffa1 	bl	80a3210 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a02ce:	f003 feb3 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a02d2:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02d4:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a02d6:	2240      	movs	r2, #64	; 0x40
 80a02d8:	2100      	movs	r1, #0
 80a02da:	a806      	add	r0, sp, #24
 80a02dc:	f006 fcfd 	bl	80a6cda <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02e0:	2340      	movs	r3, #64	; 0x40
 80a02e2:	aa06      	add	r2, sp, #24
 80a02e4:	4621      	mov	r1, r4
 80a02e6:	9400      	str	r4, [sp, #0]
 80a02e8:	6868      	ldr	r0, [r5, #4]
 80a02ea:	f002 ff99 	bl	80a3220 <network_get_hostname>
        return String(buf);
 80a02ee:	a906      	add	r1, sp, #24
 80a02f0:	a802      	add	r0, sp, #8
 80a02f2:	f003 fb5b 	bl	80a39ac <_ZN6StringC1EPK19__FlashStringHelper>
 80a02f6:	9902      	ldr	r1, [sp, #8]
 80a02f8:	4630      	mov	r0, r6
 80a02fa:	f003 f93c 	bl	80a3576 <_ZN5Print7printlnEPKc>
 80a02fe:	a802      	add	r0, sp, #8
 80a0300:	f003 fb0d 	bl	80a391e <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP()); 
 80a0304:	f003 fe98 	bl	80a4038 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0308:	4622      	mov	r2, r4
 80a030a:	4621      	mov	r1, r4
 80a030c:	4606      	mov	r6, r0
 80a030e:	6868      	ldr	r0, [r5, #4]
 80a0310:	f002 ff26 	bl	80a3160 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0314:	1c81      	adds	r1, r0, #2
 80a0316:	a806      	add	r0, sp, #24
 80a0318:	f003 f834 	bl	80a3384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a031c:	a906      	add	r1, sp, #24
 80a031e:	4630      	mov	r0, r6
 80a0320:	f003 f93d 	bl	80a359e <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a0324:	f003 fe88 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0328:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a032c:	f003 fe64 	bl	80a3ff8 <_ZN9USBSerial5beginEl>
    iVx = 0;
    iVy = 0;
    iVz = 0;

    if(!onlyMotor)setupImu();
 80a0330:	4b11      	ldr	r3, [pc, #68]	; (80a0378 <setup+0x118>)
 80a0332:	781a      	ldrb	r2, [r3, #0]
 80a0334:	461c      	mov	r4, r3
 80a0336:	b90a      	cbnz	r2, 80a033c <setup+0xdc>
 80a0338:	f7ff ff42 	bl	80a01c0 <_Z8setupImuv>
    
  
  if(!onlyMotor)updateTimer.SetCallback(OnTimer);
 80a033c:	7823      	ldrb	r3, [r4, #0]
 80a033e:	b91b      	cbnz	r3, 80a0348 <setup+0xe8>
 80a0340:	490e      	ldr	r1, [pc, #56]	; (80a037c <setup+0x11c>)
 80a0342:	480f      	ldr	r0, [pc, #60]	; (80a0380 <setup+0x120>)
 80a0344:	f000 fc34 	bl	80a0bb0 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>

  strip.setBrightness(BRIGHTNESS);
 80a0348:	2132      	movs	r1, #50	; 0x32
 80a034a:	480e      	ldr	r0, [pc, #56]	; (80a0384 <setup+0x124>)
 80a034c:	f002 faf7 	bl	80a293e <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a0350:	480c      	ldr	r0, [pc, #48]	; (80a0384 <setup+0x124>)
 80a0352:	f001 f961 	bl	80a1618 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0356:	480b      	ldr	r0, [pc, #44]	; (80a0384 <setup+0x124>)
 80a0358:	f001 f994 	bl	80a1684 <_ZN17Adafruit_NeoPixel4showEv>
  // stepper.setSpeed(20);
  }
 80a035c:	b016      	add	sp, #88	; 0x58
 80a035e:	bd70      	pop	{r4, r5, r6, pc}
 80a0360:	20000186 	.word	0x20000186
 80a0364:	2000068c 	.word	0x2000068c
 80a0368:	080a6ef0 	.word	0x080a6ef0
 80a036c:	20000004 	.word	0x20000004
 80a0370:	200001a4 	.word	0x200001a4
 80a0374:	080a6ef6 	.word	0x080a6ef6
 80a0378:	20000000 	.word	0x20000000
 80a037c:	080a0799 	.word	0x080a0799
 80a0380:	2000008c 	.word	0x2000008c
 80a0384:	200001f0 	.word	0x200001f0

080a0388 <_Z12getMouvementv>:

//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


//-----------------------//-----------------------//-----------------------//-----------------------IMU
void getMouvement(){
 80a0388:	b538      	push	{r3, r4, r5, lr}

    if ( imu.accelAvailable() )
 80a038a:	4824      	ldr	r0, [pc, #144]	; (80a041c <_Z12getMouvementv+0x94>)
 80a038c:	f000 febb 	bl	80a1106 <_ZN7LSM9DS114accelAvailableEv>
 80a0390:	4c22      	ldr	r4, [pc, #136]	; (80a041c <_Z12getMouvementv+0x94>)
 80a0392:	b110      	cbz	r0, 80a039a <_Z12getMouvementv+0x12>
    {
      imu.readAccel();
 80a0394:	4620      	mov	r0, r4
 80a0396:	f000 ff81 	bl	80a129c <_ZN7LSM9DS19readAccelEv>
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a039a:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a039e:	481f      	ldr	r0, [pc, #124]	; (80a041c <_Z12getMouvementv+0x94>)
 80a03a0:	f000 fc5d 	bl	80a0c5e <_ZN7LSM9DS19calcAccelEs>
 80a03a4:	4b1e      	ldr	r3, [pc, #120]	; (80a0420 <_Z12getMouvementv+0x98>)
 80a03a6:	4d1f      	ldr	r5, [pc, #124]	; (80a0424 <_Z12getMouvementv+0x9c>)
 80a03a8:	6819      	ldr	r1, [r3, #0]
 80a03aa:	f006 f987 	bl	80a66bc <__aeabi_fsub>
 80a03ae:	f006 fc55 	bl	80a6c5c <__aeabi_f2iz>
 80a03b2:	2800      	cmp	r0, #0
 80a03b4:	bfb8      	it	lt
 80a03b6:	4240      	neglt	r0, r0
 80a03b8:	f006 fa36 	bl	80a6828 <__aeabi_i2f>
 80a03bc:	6829      	ldr	r1, [r5, #0]
 80a03be:	f006 f97f 	bl	80a66c0 <__addsf3>
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03c2:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a03c6:	6028      	str	r0, [r5, #0]
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03c8:	4814      	ldr	r0, [pc, #80]	; (80a041c <_Z12getMouvementv+0x94>)
 80a03ca:	f000 fc48 	bl	80a0c5e <_ZN7LSM9DS19calcAccelEs>
 80a03ce:	4b16      	ldr	r3, [pc, #88]	; (80a0428 <_Z12getMouvementv+0xa0>)
 80a03d0:	4d16      	ldr	r5, [pc, #88]	; (80a042c <_Z12getMouvementv+0xa4>)
 80a03d2:	6819      	ldr	r1, [r3, #0]
 80a03d4:	f006 f972 	bl	80a66bc <__aeabi_fsub>
 80a03d8:	f006 fc40 	bl	80a6c5c <__aeabi_f2iz>
 80a03dc:	2800      	cmp	r0, #0
 80a03de:	bfb8      	it	lt
 80a03e0:	4240      	neglt	r0, r0
 80a03e2:	f006 fa21 	bl	80a6828 <__aeabi_i2f>
 80a03e6:	6829      	ldr	r1, [r5, #0]
 80a03e8:	f006 f96a 	bl	80a66c0 <__addsf3>
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a03ec:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    {
      imu.readAccel();
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03f0:	6028      	str	r0, [r5, #0]
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a03f2:	480a      	ldr	r0, [pc, #40]	; (80a041c <_Z12getMouvementv+0x94>)
 80a03f4:	f000 fc33 	bl	80a0c5e <_ZN7LSM9DS19calcAccelEs>
 80a03f8:	4b0d      	ldr	r3, [pc, #52]	; (80a0430 <_Z12getMouvementv+0xa8>)
 80a03fa:	4c0e      	ldr	r4, [pc, #56]	; (80a0434 <_Z12getMouvementv+0xac>)
 80a03fc:	6819      	ldr	r1, [r3, #0]
 80a03fe:	f006 f95d 	bl	80a66bc <__aeabi_fsub>
 80a0402:	f006 fc2b 	bl	80a6c5c <__aeabi_f2iz>
 80a0406:	2800      	cmp	r0, #0
 80a0408:	bfb8      	it	lt
 80a040a:	4240      	neglt	r0, r0
 80a040c:	f006 fa0c 	bl	80a6828 <__aeabi_i2f>
 80a0410:	6821      	ldr	r1, [r4, #0]
 80a0412:	f006 f955 	bl	80a66c0 <__addsf3>
 80a0416:	6020      	str	r0, [r4, #0]
 80a0418:	bd38      	pop	{r3, r4, r5, pc}
 80a041a:	bf00      	nop
 80a041c:	200000b8 	.word	0x200000b8
 80a0420:	20000174 	.word	0x20000174
 80a0424:	20000168 	.word	0x20000168
 80a0428:	20000178 	.word	0x20000178
 80a042c:	200001a0 	.word	0x200001a0
 80a0430:	2000017c 	.word	0x2000017c
 80a0434:	20000170 	.word	0x20000170

080a0438 <_Z10checkSpeedv>:
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
}

boolean checkSpeed(){
 80a0438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  float total = fluxX + fluxY + fluxZ;
 80a043c:	4e23      	ldr	r6, [pc, #140]	; (80a04cc <_Z10checkSpeedv+0x94>)
 80a043e:	4d24      	ldr	r5, [pc, #144]	; (80a04d0 <_Z10checkSpeedv+0x98>)
 80a0440:	4c24      	ldr	r4, [pc, #144]	; (80a04d4 <_Z10checkSpeedv+0x9c>)
 80a0442:	6829      	ldr	r1, [r5, #0]
 80a0444:	6830      	ldr	r0, [r6, #0]
 80a0446:	f006 f93b 	bl	80a66c0 <__addsf3>
 80a044a:	6821      	ldr	r1, [r4, #0]
 80a044c:	f006 f938 	bl	80a66c0 <__addsf3>
 80a0450:	4607      	mov	r7, r0
  Serial.print("Total movement: ");
 80a0452:	f003 fdf1 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0456:	4920      	ldr	r1, [pc, #128]	; (80a04d8 <_Z10checkSpeedv+0xa0>)
 80a0458:	f003 f874 	bl	80a3544 <_ZN5Print5printEPKc>
  Serial.println(total);
 80a045c:	f003 fdec 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0460:	4680      	mov	r8, r0
 80a0462:	4638      	mov	r0, r7
 80a0464:	f005 fdda 	bl	80a601c <__aeabi_f2d>
 80a0468:	2302      	movs	r3, #2
 80a046a:	4602      	mov	r2, r0
 80a046c:	9300      	str	r3, [sp, #0]
 80a046e:	4640      	mov	r0, r8
 80a0470:	460b      	mov	r3, r1
  Serial.print("Speed limit : ");
  Serial.println(speedLimit);
 80a0472:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a04e0 <_Z10checkSpeedv+0xa8>
}

boolean checkSpeed(){
  float total = fluxX + fluxY + fluxZ;
  Serial.print("Total movement: ");
  Serial.println(total);
 80a0476:	f003 f9a5 	bl	80a37c4 <_ZN5Print7printlnEdi>
  Serial.print("Speed limit : ");
 80a047a:	f003 fddd 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a047e:	4917      	ldr	r1, [pc, #92]	; (80a04dc <_Z10checkSpeedv+0xa4>)
 80a0480:	f003 f860 	bl	80a3544 <_ZN5Print5printEPKc>
  Serial.println(speedLimit);
 80a0484:	f003 fdd8 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0488:	f8d8 1000 	ldr.w	r1, [r8]
 80a048c:	220a      	movs	r2, #10
 80a048e:	f003 f8e0 	bl	80a3652 <_ZN5Print7printlnEii>
  if((total) < speedLimit){
 80a0492:	f8d8 0000 	ldr.w	r0, [r8]
 80a0496:	f006 f9c7 	bl	80a6828 <__aeabi_i2f>
 80a049a:	4680      	mov	r8, r0
 80a049c:	4601      	mov	r1, r0
 80a049e:	4638      	mov	r0, r7
 80a04a0:	f006 fbb4 	bl	80a6c0c <__aeabi_fcmplt>
 80a04a4:	b128      	cbz	r0, 80a04b2 <_Z10checkSpeedv+0x7a>
      fluxX = 0;
 80a04a6:	2300      	movs	r3, #0
 80a04a8:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a04aa:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a04ac:	6023      	str	r3, [r4, #0]
     total = 0;
    return true;
 80a04ae:	2001      	movs	r0, #1
 80a04b0:	e009      	b.n	80a04c6 <_Z10checkSpeedv+0x8e>
  }else if(total >= speedLimit){
 80a04b2:	4641      	mov	r1, r8
 80a04b4:	4638      	mov	r0, r7
 80a04b6:	f006 fbbd 	bl	80a6c34 <__aeabi_fcmpge>
 80a04ba:	b120      	cbz	r0, 80a04c6 <_Z10checkSpeedv+0x8e>
      fluxX = 0;
 80a04bc:	2300      	movs	r3, #0
 80a04be:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a04c0:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a04c2:	6023      	str	r3, [r4, #0]
     total = 0;
    return false;
 80a04c4:	2000      	movs	r0, #0
  }

}
 80a04c6:	b002      	add	sp, #8
 80a04c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a04cc:	20000168 	.word	0x20000168
 80a04d0:	200001a0 	.word	0x200001a0
 80a04d4:	20000170 	.word	0x20000170
 80a04d8:	080a6f22 	.word	0x080a6f22
 80a04dc:	080a6f33 	.word	0x080a6f33
 80a04e0:	20000008 	.word	0x20000008

080a04e4 <_Z10checkMatchb>:
checkMatch(false);
}

boolean match = true;

void checkMatch(bool alge){
 80a04e4:	b510      	push	{r4, lr}
 80a04e6:	4c09      	ldr	r4, [pc, #36]	; (80a050c <_Z10checkMatchb+0x28>)
  if(alge && checkSpeed()){
 80a04e8:	b110      	cbz	r0, 80a04f0 <_Z10checkMatchb+0xc>
 80a04ea:	f7ff ffa5 	bl	80a0438 <_Z10checkSpeedv>
 80a04ee:	b948      	cbnz	r0, 80a0504 <_Z10checkMatchb+0x20>
    match =  true;
  }else{
    match = false;
 80a04f0:	2300      	movs	r3, #0
 80a04f2:	7023      	strb	r3, [r4, #0]
  }
    Serial.println(match);
 80a04f4:	f003 fda0 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a04f8:	7821      	ldrb	r1, [r4, #0]
 80a04fa:	220a      	movs	r2, #10
}
 80a04fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(alge && checkSpeed()){
    match =  true;
  }else{
    match = false;
  }
    Serial.println(match);
 80a0500:	f003 b8a7 	b.w	80a3652 <_ZN5Print7printlnEii>

boolean match = true;

void checkMatch(bool alge){
  if(alge && checkSpeed()){
    match =  true;
 80a0504:	2301      	movs	r3, #1
 80a0506:	7023      	strb	r3, [r4, #0]
 80a0508:	e7f4      	b.n	80a04f4 <_Z10checkMatchb+0x10>
 80a050a:	bf00      	nop
 80a050c:	2000000c 	.word	0x2000000c

080a0510 <_Z5STILLR10OSCMessage>:
          trouble();
        }
      }
}

void STILL(OSCMessage &inMessag){
 80a0510:	b508      	push	{r3, lr}
  Serial.println("STILL");
 80a0512:	f003 fd91 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0516:	4904      	ldr	r1, [pc, #16]	; (80a0528 <_Z5STILLR10OSCMessage+0x18>)
 80a0518:	f003 f82d 	bl	80a3576 <_ZN5Print7printlnEPKc>
checkMatch(true);
}
 80a051c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      }
}

void STILL(OSCMessage &inMessag){
  Serial.println("STILL");
checkMatch(true);
 80a0520:	2001      	movs	r0, #1
 80a0522:	f7ff bfdf 	b.w	80a04e4 <_Z10checkMatchb>
 80a0526:	bf00      	nop
 80a0528:	080a6f42 	.word	0x080a6f42

080a052c <_Z4MOVER10OSCMessage>:
}

void MOVE(OSCMessage &inMessag){
 80a052c:	b508      	push	{r3, lr}
  Serial.println("MOVE");
 80a052e:	f003 fd83 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0532:	4904      	ldr	r1, [pc, #16]	; (80a0544 <_Z4MOVER10OSCMessage+0x18>)
 80a0534:	f003 f81f 	bl	80a3576 <_ZN5Print7printlnEPKc>
checkMatch(false);
}
 80a0538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
checkMatch(true);
}

void MOVE(OSCMessage &inMessag){
  Serial.println("MOVE");
checkMatch(false);
 80a053c:	2000      	movs	r0, #0
 80a053e:	f7ff bfd1 	b.w	80a04e4 <_Z10checkMatchb>
 80a0542:	bf00      	nop
 80a0544:	080a6f48 	.word	0x080a6f48

080a0548 <_Z7troublev>:

  // delay(500);
}

//generates behavior state of coral in distress
void trouble(){
 80a0548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a054c:	b085      	sub	sp, #20
  int delayIn = 10;
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
 80a054e:	4e89      	ldr	r6, [pc, #548]	; (80a0774 <_Z7troublev+0x22c>)

  // delay(500);
}

//generates behavior state of coral in distress
void trouble(){
 80a0550:	af00      	add	r7, sp, #0
  int delayIn = 10;
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
 80a0552:	6833      	ldr	r3, [r6, #0]
 80a0554:	b95b      	cbnz	r3, 80a056e <_Z7troublev+0x26>
      chunk = strip.numPixels()/4;
 80a0556:	4888      	ldr	r0, [pc, #544]	; (80a0778 <_Z7troublev+0x230>)
 80a0558:	f002 f9ef 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
      wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a055c:	2132      	movs	r1, #50	; 0x32
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
      chunk = strip.numPixels()/4;
 80a055e:	f3c0 048f 	ubfx	r4, r0, #2, #16
      wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a0562:	4886      	ldr	r0, [pc, #536]	; (80a077c <_Z7troublev+0x234>)
 80a0564:	f002 fa42 	bl	80a29ec <_ZN7Stepper8setSpeedEl>
      stepper.step(STEPS);
 80a0568:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a056c:	e023      	b.n	80a05b6 <_Z7troublev+0x6e>
  }else if(troubleCount == 1){
 80a056e:	2b01      	cmp	r3, #1
 80a0570:	d108      	bne.n	80a0584 <_Z7troublev+0x3c>
    chunk = strip.numPixels()/3;
 80a0572:	4881      	ldr	r0, [pc, #516]	; (80a0778 <_Z7troublev+0x230>)
 80a0574:	f002 f9e1 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0578:	2403      	movs	r4, #3
 80a057a:	fbb0 f0f4 	udiv	r0, r0, r4
         wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a057e:	2132      	movs	r1, #50	; 0x32
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
      stepper.step(STEPS);
  }else if(troubleCount == 1){
    chunk = strip.numPixels()/3;
 80a0580:	b284      	uxth	r4, r0
 80a0582:	e014      	b.n	80a05ae <_Z7troublev+0x66>
         wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
       stepper.step(-STEPS);
  }else if(troubleCount ==2){
 80a0584:	2b02      	cmp	r3, #2
 80a0586:	d10b      	bne.n	80a05a0 <_Z7troublev+0x58>
      chunk = strip.numPixels()/2;
 80a0588:	487b      	ldr	r0, [pc, #492]	; (80a0778 <_Z7troublev+0x230>)
 80a058a:	f002 f9d6 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(40);
 80a058e:	2128      	movs	r1, #40	; 0x28
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
       stepper.step(-STEPS);
  }else if(troubleCount ==2){
      chunk = strip.numPixels()/2;
 80a0590:	f3c0 044f 	ubfx	r4, r0, #1, #16
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(40);
 80a0594:	4879      	ldr	r0, [pc, #484]	; (80a077c <_Z7troublev+0x234>)
 80a0596:	f002 fa29 	bl	80a29ec <_ZN7Stepper8setSpeedEl>
        stepper.step(STEPS);
 80a059a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a059e:	e00a      	b.n	80a05b6 <_Z7troublev+0x6e>
  }else if(troubleCount == 3){
 80a05a0:	2b03      	cmp	r3, #3
 80a05a2:	d112      	bne.n	80a05ca <_Z7troublev+0x82>
      chunk = strip.numPixels();
 80a05a4:	4874      	ldr	r0, [pc, #464]	; (80a0778 <_Z7troublev+0x230>)
 80a05a6:	f002 f9c8 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a05aa:	4604      	mov	r4, r0
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(30);
 80a05ac:	211e      	movs	r1, #30
 80a05ae:	4873      	ldr	r0, [pc, #460]	; (80a077c <_Z7troublev+0x234>)
 80a05b0:	f002 fa1c 	bl	80a29ec <_ZN7Stepper8setSpeedEl>
       stepper.step(-STEPS);
 80a05b4:	4972      	ldr	r1, [pc, #456]	; (80a0780 <_Z7troublev+0x238>)
 80a05b6:	4871      	ldr	r0, [pc, #452]	; (80a077c <_Z7troublev+0x234>)
        stepper.step(STEPS);
  }else if(troubleCount == 3){
      chunk = strip.numPixels();
           wait = 50;
      delayIn = 5;
      delayOut = 5;
 80a05b8:	f04f 0905 	mov.w	r9, #5
      stepper.setSpeed(30);
       stepper.step(-STEPS);
 80a05bc:	f002 fae6 	bl	80a2b8c <_ZN7Stepper4stepEi>
      delayOut = 5;
      stepper.setSpeed(40);
        stepper.step(STEPS);
  }else if(troubleCount == 3){
      chunk = strip.numPixels();
           wait = 50;
 80a05c0:	f04f 0a32 	mov.w	sl, #50	; 0x32
      delayIn = 5;
 80a05c4:	f8c7 900c 	str.w	r9, [r7, #12]
 80a05c8:	e006      	b.n	80a05d8 <_Z7troublev+0x90>
//how many LED to bleach in the LED strip
  int chunk = 0;
  

  int delayIn = 10;
  int delayOut = 0;
 80a05ca:	f04f 0900 	mov.w	r9, #0
  bool complete = false;
  bool checkNum = true;
  int val = -1;

//how many LED to bleach in the LED strip
  int chunk = 0;
 80a05ce:	464c      	mov	r4, r9
  

  int delayIn = 10;
  int delayOut = 0;

  int wait=10;
 80a05d0:	f04f 0a0a 	mov.w	sl, #10

//how many LED to bleach in the LED strip
  int chunk = 0;
  

  int delayIn = 10;
 80a05d4:	f8c7 a00c 	str.w	sl, [r7, #12]
      stepper.setSpeed(30);
       stepper.step(-STEPS);

  }

int randomNumList[chunk];
 80a05d8:	00a3      	lsls	r3, r4, #2
 80a05da:	f103 020a 	add.w	r2, r3, #10
 80a05de:	f022 0207 	bic.w	r2, r2, #7
 80a05e2:	ebad 0d02 	sub.w	sp, sp, r2
 80a05e6:	46e8      	mov	r8, sp
 80a05e8:	466a      	mov	r2, sp
 80a05ea:	446b      	add	r3, sp
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
    randomNumList[k] = -1;
 80a05ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a05f0:	4293      	cmp	r3, r2
 80a05f2:	d002      	beq.n	80a05fa <_Z7troublev+0xb2>
    randomNumList[k] = -1;
 80a05f4:	f842 1b04 	str.w	r1, [r2], #4

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a05f8:	e7fa      	b.n	80a05f0 <_Z7troublev+0xa8>
    randomNumList[k] = -1;
  }

    Serial.print("TROUBLE COUNT :: ");
 80a05fa:	f003 fd1d 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a05fe:	4961      	ldr	r1, [pc, #388]	; (80a0784 <_Z7troublev+0x23c>)
 80a0600:	f002 ffa0 	bl	80a3544 <_ZN5Print5printEPKc>
    Serial.println(troubleCount);
 80a0604:	f003 fd18 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0608:	220a      	movs	r2, #10
 80a060a:	6831      	ldr	r1, [r6, #0]
 80a060c:	f003 f821 	bl	80a3652 <_ZN5Print7printlnEii>
 80a0610:	2300      	movs	r3, #0
 80a0612:	60bb      	str	r3, [r7, #8]
 80a0614:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

    for(uint16_t i=0; i<chunk; i++) {
 80a0618:	f8b7 b008 	ldrh.w	fp, [r7, #8]
 80a061c:	455c      	cmp	r4, fp
 80a061e:	dd5f      	ble.n	80a06e0 <_Z7troublev+0x198>
      getMouvement();
 80a0620:	f7ff feb2 	bl	80a0388 <_Z12getMouvementv>
       Serial.print("chunk :: ");
 80a0624:	f003 fd08 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0628:	4957      	ldr	r1, [pc, #348]	; (80a0788 <_Z7troublev+0x240>)
 80a062a:	f002 ff8b 	bl	80a3544 <_ZN5Print5printEPKc>
    Serial.println(chunk);
 80a062e:	f003 fd03 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0632:	220a      	movs	r2, #10
 80a0634:	4621      	mov	r1, r4
 80a0636:	f003 f80c 	bl	80a3652 <_ZN5Print7printlnEii>
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
 80a063a:	f006 fb7f 	bl	80a6d3c <rand>
 80a063e:	4605      	mov	r5, r0
 80a0640:	484d      	ldr	r0, [pc, #308]	; (80a0778 <_Z7troublev+0x230>)
 80a0642:	f002 f97a 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0646:	fb95 f3f0 	sdiv	r3, r5, r0
 80a064a:	fb03 5510 	mls	r5, r3, r0, r5
        Serial.print("VAL:: ");
 80a064e:	f003 fcf3 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0652:	494e      	ldr	r1, [pc, #312]	; (80a078c <_Z7troublev+0x244>)
 80a0654:	f002 ff76 	bl	80a3544 <_ZN5Print5printEPKc>
        Serial.println(val);
 80a0658:	f003 fcee 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a065c:	220a      	movs	r2, #10
 80a065e:	4629      	mov	r1, r5
 80a0660:	f002 fff7 	bl	80a3652 <_ZN5Print7printlnEii>
        for(int k = 0; k < chunk; k++){
 80a0664:	2200      	movs	r2, #0
    for(uint16_t i=0; i<chunk; i++) {
      getMouvement();
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
        checkNum = false;
 80a0666:	4613      	mov	r3, r2
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
          if(randomNumList[k] == val){
 80a0668:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a066c:	3201      	adds	r2, #1
          if(randomNumList[k] == val){
            checkNum = true;
 80a066e:	428d      	cmp	r5, r1
 80a0670:	bf08      	it	eq
 80a0672:	2301      	moveq	r3, #1
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a0674:	4294      	cmp	r4, r2
 80a0676:	dcf7      	bgt.n	80a0668 <_Z7troublev+0x120>

    for(uint16_t i=0; i<chunk; i++) {
      getMouvement();
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
 80a0678:	2b00      	cmp	r3, #0
 80a067a:	d1de      	bne.n	80a063a <_Z7troublev+0xf2>
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
 80a067c:	b2da      	uxtb	r2, r3
 80a067e:	21ff      	movs	r1, #255	; 0xff
 80a0680:	4610      	mov	r0, r2
 80a0682:	607b      	str	r3, [r7, #4]
 80a0684:	f002 f954 	bl	80a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0688:	b2a9      	uxth	r1, r5
 80a068a:	4602      	mov	r2, r0
 80a068c:	483a      	ldr	r0, [pc, #232]	; (80a0778 <_Z7troublev+0x230>)
 80a068e:	f002 f8e2 	bl	80a2856 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          randomNumList[i] = val;
          delay(delayOut);
 80a0692:	4648      	mov	r0, r9
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
 80a0694:	f848 502b 	str.w	r5, [r8, fp, lsl #2]
          delay(delayOut);
 80a0698:	f002 fde2 	bl	80a3260 <delay>
          pixels[val] = false;
 80a069c:	4b3c      	ldr	r3, [pc, #240]	; (80a0790 <_Z7troublev+0x248>)
 80a069e:	2200      	movs	r2, #0
          strip.show();
 80a06a0:	4835      	ldr	r0, [pc, #212]	; (80a0778 <_Z7troublev+0x230>)
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
 80a06a2:	555a      	strb	r2, [r3, r5]
          strip.show();
 80a06a4:	f000 ffee 	bl	80a1684 <_ZN17Adafruit_NeoPixel4showEv>
            checkNum = true;
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
 80a06a8:	687b      	ldr	r3, [r7, #4]
 80a06aa:	3301      	adds	r3, #1
 80a06ac:	2bff      	cmp	r3, #255	; 0xff
 80a06ae:	d1e5      	bne.n	80a067c <_Z7troublev+0x134>
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
          strip.show();
      }
    delay(wait);
 80a06b0:	4650      	mov	r0, sl
 80a06b2:	f002 fdd5 	bl	80a3260 <delay>

    Serial.print(i);
 80a06b6:	f003 fcbf 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a06ba:	220a      	movs	r2, #10
 80a06bc:	4659      	mov	r1, fp
 80a06be:	f002 ffc6 	bl	80a364e <_ZN5Print5printEii>
       Serial.print(" ::  ");
 80a06c2:	f003 fcb9 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a06c6:	4933      	ldr	r1, [pc, #204]	; (80a0794 <_Z7troublev+0x24c>)
 80a06c8:	f002 ff3c 	bl	80a3544 <_ZN5Print5printEPKc>
       Serial.println(val);
 80a06cc:	f003 fcb4 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a06d0:	220a      	movs	r2, #10
 80a06d2:	4629      	mov	r1, r5
 80a06d4:	f002 ffbd 	bl	80a3652 <_ZN5Print7printlnEii>
 80a06d8:	68bb      	ldr	r3, [r7, #8]
 80a06da:	3301      	adds	r3, #1
 80a06dc:	60bb      	str	r3, [r7, #8]
  }

    Serial.print("TROUBLE COUNT :: ");
    Serial.println(troubleCount);

    for(uint16_t i=0; i<chunk; i++) {
 80a06de:	e79b      	b.n	80a0618 <_Z7troublev+0xd0>
    Serial.print(i);
       Serial.print(" ::  ");
       Serial.println(val);
    }

if(troubleCount==3){
 80a06e0:	6833      	ldr	r3, [r6, #0]
 80a06e2:	2b03      	cmp	r3, #3
 80a06e4:	d106      	bne.n	80a06f4 <_Z7troublev+0x1ac>
  delay(5000);
 80a06e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80a06ea:	f002 fdb9 	bl	80a3260 <delay>
  troubleCount = 0; 
 80a06ee:	4b21      	ldr	r3, [pc, #132]	; (80a0774 <_Z7troublev+0x22c>)
 80a06f0:	2200      	movs	r2, #0
 80a06f2:	601a      	str	r2, [r3, #0]
}

    if(checkSpeed()){
 80a06f4:	f7ff fea0 	bl	80a0438 <_Z10checkSpeedv>
 80a06f8:	b3a0      	cbz	r0, 80a0764 <_Z7troublev+0x21c>
      stepper.setSpeed(50);
 80a06fa:	2132      	movs	r1, #50	; 0x32
 80a06fc:	481f      	ldr	r0, [pc, #124]	; (80a077c <_Z7troublev+0x234>)
 80a06fe:	f002 f975 	bl	80a29ec <_ZN7Stepper8setSpeedEl>
        stepper.step(STEPS);
 80a0702:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0706:	481d      	ldr	r0, [pc, #116]	; (80a077c <_Z7troublev+0x234>)
 80a0708:	f002 fa40 	bl	80a2b8c <_ZN7Stepper4stepEi>
 80a070c:	f04f 0a00 	mov.w	sl, #0

      for(uint16_t i=0; i<chunk; i++) {
 80a0710:	fa1f fb8a 	uxth.w	fp, sl
 80a0714:	455c      	cmp	r4, fp
 80a0716:	dd22      	ble.n	80a075e <_Z7troublev+0x216>
 80a0718:	f04f 09ff 	mov.w	r9, #255	; 0xff
          for(int k = 255; k >=0 ; k--){
              strip.setPixelColor(randomNumList[i], strip.Color(k, 255, k));
 80a071c:	fa5f f289 	uxtb.w	r2, r9
 80a0720:	f838 302b 	ldrh.w	r3, [r8, fp, lsl #2]
 80a0724:	21ff      	movs	r1, #255	; 0xff
 80a0726:	4610      	mov	r0, r2
 80a0728:	60bb      	str	r3, [r7, #8]
 80a072a:	f002 f901 	bl	80a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a072e:	68bb      	ldr	r3, [r7, #8]
 80a0730:	4602      	mov	r2, r0
 80a0732:	4619      	mov	r1, r3
 80a0734:	4810      	ldr	r0, [pc, #64]	; (80a0778 <_Z7troublev+0x230>)
 80a0736:	f002 f88e 	bl	80a2856 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
              delay(10);
 80a073a:	200a      	movs	r0, #10
 80a073c:	f002 fd90 	bl	80a3260 <delay>
strip.show();
 80a0740:	480d      	ldr	r0, [pc, #52]	; (80a0778 <_Z7troublev+0x230>)
 80a0742:	f000 ff9f 	bl	80a1684 <_ZN17Adafruit_NeoPixel4showEv>
    if(checkSpeed()){
      stepper.setSpeed(50);
        stepper.step(STEPS);

      for(uint16_t i=0; i<chunk; i++) {
          for(int k = 255; k >=0 ; k--){
 80a0746:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80a074a:	d2e7      	bcs.n	80a071c <_Z7troublev+0x1d4>
    //           strip.setPixelColor(randomNumList[i], curr_r, curr_g, curr_b);
    //           delay(10);


    //   }
              pixels[val] = true;
 80a074c:	4a10      	ldr	r2, [pc, #64]	; (80a0790 <_Z7troublev+0x248>)
 80a074e:	2301      	movs	r3, #1
              strip.show();
 80a0750:	4809      	ldr	r0, [pc, #36]	; (80a0778 <_Z7troublev+0x230>)
    //           strip.setPixelColor(randomNumList[i], curr_r, curr_g, curr_b);
    //           delay(10);


    //   }
              pixels[val] = true;
 80a0752:	5553      	strb	r3, [r2, r5]
 80a0754:	f10a 0a01 	add.w	sl, sl, #1
              strip.show();
 80a0758:	f000 ff94 	bl	80a1684 <_ZN17Adafruit_NeoPixel4showEv>

    if(checkSpeed()){
      stepper.setSpeed(50);
        stepper.step(STEPS);

      for(uint16_t i=0; i<chunk; i++) {
 80a075c:	e7d8      	b.n	80a0710 <_Z7troublev+0x1c8>

    //   }
              pixels[val] = true;
              strip.show();
          }
        delay(delayIn);
 80a075e:	68f8      	ldr	r0, [r7, #12]
 80a0760:	f002 fd7e 	bl	80a3260 <delay>
        break;
      }
    }

  complete= true;
  troubleCount++;
 80a0764:	6833      	ldr	r3, [r6, #0]
  }

//   if(complete){
// healthyWave(10,10,1);
//   }
}
 80a0766:	3714      	adds	r7, #20
        break;
      }
    }

  complete= true;
  troubleCount++;
 80a0768:	3301      	adds	r3, #1
 80a076a:	6033      	str	r3, [r6, #0]
  }

//   if(complete){
// healthyWave(10,10,1);
//   }
}
 80a076c:	46bd      	mov	sp, r7
 80a076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0772:	bf00      	nop
 80a0774:	200000b4 	.word	0x200000b4
 80a0778:	200001f0 	.word	0x200001f0
 80a077c:	2000013c 	.word	0x2000013c
 80a0780:	fffffed4 	.word	0xfffffed4
 80a0784:	080a6f4d 	.word	0x080a6f4d
 80a0788:	080a6f5f 	.word	0x080a6f5f
 80a078c:	080a6f69 	.word	0x080a6f69
 80a0790:	20000186 	.word	0x20000186
 80a0794:	080a6f70 	.word	0x080a6f70

080a0798 <_Z7OnTimerv>:


//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a0798:	b530      	push	{r4, r5, lr}
 80a079a:	b097      	sub	sp, #92	; 0x5c
    int size = 0;
     OSCMessage inMessage;
 80a079c:	a801      	add	r0, sp, #4
 80a079e:	f002 fa43 	bl	80a2c28 <_ZN10OSCMessageC1Ev>
      
      Serial.println("LISTENING---------------");
 80a07a2:	f003 fc49 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a07a6:	4923      	ldr	r1, [pc, #140]	; (80a0834 <_Z7OnTimerv+0x9c>)
 80a07a8:	f002 fee5 	bl	80a3576 <_ZN5Print7printlnEPKc>
       
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
 80a07ac:	2100      	movs	r1, #0
 80a07ae:	4822      	ldr	r0, [pc, #136]	; (80a0838 <_Z7OnTimerv+0xa0>)
 80a07b0:	f003 fb2f 	bl	80a3e12 <_ZN3UDP11parsePacketEm>
 80a07b4:	1e04      	subs	r4, r0, #0
 80a07b6:	dd32      	ble.n	80a081e <_Z7OnTimerv+0x86>
        Serial.println("receiving message");
 80a07b8:	f003 fc3e 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a07bc:	491f      	ldr	r1, [pc, #124]	; (80a083c <_Z7OnTimerv+0xa4>)
 80a07be:	f002 feda 	bl	80a3576 <_ZN5Print7printlnEPKc>

        char c;
        while(size--){
 80a07c2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a07c6:	d312      	bcc.n	80a07ee <_Z7OnTimerv+0x56>
          Serial.println("---in while---");
 80a07c8:	f003 fc36 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a07cc:	491c      	ldr	r1, [pc, #112]	; (80a0840 <_Z7OnTimerv+0xa8>)
 80a07ce:	f002 fed2 	bl	80a3576 <_ZN5Print7printlnEPKc>
          c=udp.read();
 80a07d2:	4819      	ldr	r0, [pc, #100]	; (80a0838 <_Z7OnTimerv+0xa0>)
 80a07d4:	f003 f950 	bl	80a3a78 <_ZN3UDP4readEv>
 80a07d8:	b2c5      	uxtb	r5, r0
          Serial.println(c);
 80a07da:	f003 fc2d 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a07de:	4629      	mov	r1, r5
 80a07e0:	f002 fed3 	bl	80a358a <_ZN5Print7printlnEc>
          inMessage.fill(c);
 80a07e4:	4629      	mov	r1, r5
 80a07e6:	a801      	add	r0, sp, #4
 80a07e8:	f002 fa59 	bl	80a2c9e <_ZN10OSCMessage4fillEc>
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
        Serial.println("receiving message");

        char c;
        while(size--){
 80a07ec:	e7e9      	b.n	80a07c2 <_Z7OnTimerv+0x2a>
          Serial.println(c);
          inMessage.fill(c);
          
        }

        if(inMessage.parse()){
 80a07ee:	a801      	add	r0, sp, #4
 80a07f0:	f002 fa64 	bl	80a2cbc <_ZN10OSCMessage5parseEv>
 80a07f4:	b170      	cbz	r0, 80a0814 <_Z7OnTimerv+0x7c>

        Serial.println("PARSING");
 80a07f6:	f003 fc1f 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a07fa:	4912      	ldr	r1, [pc, #72]	; (80a0844 <_Z7OnTimerv+0xac>)
 80a07fc:	f002 febb 	bl	80a3576 <_ZN5Print7printlnEPKc>

          inMessage.route("still", STILL);
 80a0800:	4a11      	ldr	r2, [pc, #68]	; (80a0848 <_Z7OnTimerv+0xb0>)
 80a0802:	4912      	ldr	r1, [pc, #72]	; (80a084c <_Z7OnTimerv+0xb4>)
 80a0804:	a801      	add	r0, sp, #4
 80a0806:	f002 fad5 	bl	80a2db4 <_ZN10OSCMessage5routeEPKcPFvRS_E>
          inMessage.route("/move", MOVE);
 80a080a:	4a11      	ldr	r2, [pc, #68]	; (80a0850 <_Z7OnTimerv+0xb8>)
 80a080c:	4911      	ldr	r1, [pc, #68]	; (80a0854 <_Z7OnTimerv+0xbc>)
 80a080e:	a801      	add	r0, sp, #4
 80a0810:	f002 fad0 	bl	80a2db4 <_ZN10OSCMessage5routeEPKcPFvRS_E>
        }
        Serial.println();
 80a0814:	f003 fc10 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0818:	f002 fea1 	bl	80a355e <_ZN5Print7printlnEv>
 80a081c:	e004      	b.n	80a0828 <_Z7OnTimerv+0x90>
      }else{
        if(!checkSpeed()){
 80a081e:	f7ff fe0b 	bl	80a0438 <_Z10checkSpeedv>
 80a0822:	b908      	cbnz	r0, 80a0828 <_Z7OnTimerv+0x90>
          trouble();
 80a0824:	f7ff fe90 	bl	80a0548 <_Z7troublev>
//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


void OnTimer(void) {  //Handler for the timer, will be called automatically
    int size = 0;
     OSCMessage inMessage;
 80a0828:	a801      	add	r0, sp, #4
 80a082a:	f002 fa1b 	bl	80a2c64 <_ZN10OSCMessageD1Ev>
      }else{
        if(!checkSpeed()){
          trouble();
        }
      }
}
 80a082e:	b017      	add	sp, #92	; 0x5c
 80a0830:	bd30      	pop	{r4, r5, pc}
 80a0832:	bf00      	nop
 80a0834:	080a6f76 	.word	0x080a6f76
 80a0838:	200001a4 	.word	0x200001a4
 80a083c:	080a6f8f 	.word	0x080a6f8f
 80a0840:	080a6fa1 	.word	0x080a6fa1
 80a0844:	080a6fb0 	.word	0x080a6fb0
 80a0848:	080a0511 	.word	0x080a0511
 80a084c:	080a6fb8 	.word	0x080a6fb8
 80a0850:	080a052d 	.word	0x080a052d
 80a0854:	080a6fbe 	.word	0x080a6fbe

080a0858 <_Z14sectionSqueezeiii>:
      strip.setPixelColor(valUP, colorUP);
    // }
   
  }
}
void sectionSqueeze(int numLimit, int down, int up) {
 80a0858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a085c:	4682      	mov	sl, r0
 80a085e:	b087      	sub	sp, #28

  int valUP;
  int valDOWN;
  int numHalfPixels=strip.numPixels()/2;
 80a0860:	4843      	ldr	r0, [pc, #268]	; (80a0970 <_Z14sectionSqueezeiii+0x118>)
      strip.setPixelColor(valUP, colorUP);
    // }
   
  }
}
void sectionSqueeze(int numLimit, int down, int up) {
 80a0862:	4614      	mov	r4, r2
 80a0864:	460d      	mov	r5, r1

  int valUP;
  int valDOWN;
  int numHalfPixels=strip.numPixels()/2;
 80a0866:	f002 f868 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a086a:	f3c0 0b4f 	ubfx	fp, r0, #1, #16
   Serial.print("NUM_LIMIT--:");
 80a086e:	f003 fbe3 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0872:	4940      	ldr	r1, [pc, #256]	; (80a0974 <_Z14sectionSqueezeiii+0x11c>)
 80a0874:	f002 fe66 	bl	80a3544 <_ZN5Print5printEPKc>
  Serial.println(numLimit);
 80a0878:	f003 fbde 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a087c:	220a      	movs	r2, #10
 80a087e:	4651      	mov	r1, sl
 80a0880:	f002 fee7 	bl	80a3652 <_ZN5Print7printlnEii>
   Serial.print("UP--:");
 80a0884:	f003 fbd8 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0888:	493b      	ldr	r1, [pc, #236]	; (80a0978 <_Z14sectionSqueezeiii+0x120>)
 80a088a:	f002 fe5b 	bl	80a3544 <_ZN5Print5printEPKc>
  Serial.println(up);
 80a088e:	f003 fbd3 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0892:	220a      	movs	r2, #10
 80a0894:	4621      	mov	r1, r4
 80a0896:	f002 fedc 	bl	80a3652 <_ZN5Print7printlnEii>
  
  Serial.print("DOWN--:");
 80a089a:	f003 fbcd 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a089e:	4937      	ldr	r1, [pc, #220]	; (80a097c <_Z14sectionSqueezeiii+0x124>)
 80a08a0:	f002 fe50 	bl	80a3544 <_ZN5Print5printEPKc>
  Serial.println(down);
 80a08a4:	f003 fbc8 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a08a8:	220a      	movs	r2, #10
 80a08aa:	4629      	mov	r1, r5
 80a08ac:	f002 fed1 	bl	80a3652 <_ZN5Print7printlnEii>
  uint32_t colorBlue = strip.Color(0,0,255);
 80a08b0:	2100      	movs	r1, #0
 80a08b2:	22ff      	movs	r2, #255	; 0xff
 80a08b4:	4608      	mov	r0, r1
 80a08b6:	f002 f83b 	bl	80a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  uint32_t colorPink = strip.Color(255,0,255);
 80a08ba:	22ff      	movs	r2, #255	; 0xff
 80a08bc:	2100      	movs	r1, #0
 80a08be:	4610      	mov	r0, r2
 80a08c0:	f002 f836 	bl	80a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  uint32_t colorOFF = strip.Color(0,0,0);
 80a08c4:	2200      	movs	r2, #0
 80a08c6:	4611      	mov	r1, r2
 80a08c8:	4610      	mov	r0, r2
 80a08ca:	f002 f831 	bl	80a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>
    }else{
      // for(int i = 0; i < 255; i++){
        // colorBlue = strip.Color(0,0,i);
        // colorPink = strip.Color(i,0,i);

        if(step>numLimit/2){
 80a08ce:	2302      	movs	r3, #2
 80a08d0:	fb9a f3f3 	sdiv	r3, sl, r3
 80a08d4:	9304      	str	r3, [sp, #16]
          colorStep=colorBlue;
          colorStepRed=0;
          colorStepGreen=0;
          colorStepBlue=255;
        }else if(step>numLimit/4){
 80a08d6:	2304      	movs	r3, #4
 80a08d8:	fb9a f3f3 	sdiv	r3, sl, r3
  
  Serial.print("DOWN--:");
  Serial.println(down);
  uint32_t colorBlue = strip.Color(0,0,255);
  uint32_t colorPink = strip.Color(255,0,255);
  uint32_t colorOFF = strip.Color(0,0,0);
 80a08dc:	9002      	str	r0, [sp, #8]
        if(step>numLimit/2){
          colorStep=colorBlue;
          colorStepRed=0;
          colorStepGreen=0;
          colorStepBlue=255;
        }else if(step>numLimit/4){
 80a08de:	9305      	str	r3, [sp, #20]
  uint32_t colorStep;
  int colorStepRed;
  int colorStepGreen;
  int colorStepBlue;
int jump = 100;
  for(int step = 0; step < numLimit; step++){
 80a08e0:	f04f 0800 	mov.w	r8, #0

  uint32_t colorStep;
  int colorStepRed;
  int colorStepGreen;
  int colorStepBlue;
int jump = 100;
 80a08e4:	2664      	movs	r6, #100	; 0x64
  for(int step = 0; step < numLimit; step++){
 80a08e6:	45d0      	cmp	r8, sl
 80a08e8:	da3f      	bge.n	80a096a <_Z14sectionSqueezeiii+0x112>
 
    float pulseCounter = 0;
    int SCALE = 50;
    float pulseSpeed = 0.1;

    if(valUP<numHalfPixels){
 80a08ea:	45a3      	cmp	fp, r4
 80a08ec:	dd05      	ble.n	80a08fa <_Z14sectionSqueezeiii+0xa2>
      strip.setPixelColor(valUP, colorOFF); 
 80a08ee:	9a02      	ldr	r2, [sp, #8]
 80a08f0:	b2a1      	uxth	r1, r4
 80a08f2:	481f      	ldr	r0, [pc, #124]	; (80a0970 <_Z14sectionSqueezeiii+0x118>)
 80a08f4:	f001 ffaf 	bl	80a2856 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a08f8:	e032      	b.n	80a0960 <_Z14sectionSqueezeiii+0x108>
    }else if(valDOWN>numHalfPixels){
 80a08fa:	45ab      	cmp	fp, r5
 80a08fc:	da05      	bge.n	80a090a <_Z14sectionSqueezeiii+0xb2>
      strip.setPixelColor(valDOWN, colorOFF); 
 80a08fe:	9a02      	ldr	r2, [sp, #8]
 80a0900:	b2a9      	uxth	r1, r5
 80a0902:	481b      	ldr	r0, [pc, #108]	; (80a0970 <_Z14sectionSqueezeiii+0x118>)
 80a0904:	f001 ffa7 	bl	80a2856 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a0908:	e02a      	b.n	80a0960 <_Z14sectionSqueezeiii+0x108>
    }else{
      // for(int i = 0; i < 255; i++){
        // colorBlue = strip.Color(0,0,i);
        // colorPink = strip.Color(i,0,i);

        if(step>numLimit/2){
 80a090a:	9b04      	ldr	r3, [sp, #16]
 80a090c:	4598      	cmp	r8, r3
 80a090e:	dc09      	bgt.n	80a0924 <_Z14sectionSqueezeiii+0xcc>
          colorStepGreen=255;
          colorStepBlue=255;
        }else{
          colorStep=colorPink;
          colorStepRed=255;
          colorStepGreen=0;
 80a0910:	9b05      	ldr	r3, [sp, #20]
 80a0912:	4598      	cmp	r8, r3
 80a0914:	bfcb      	itete	gt
 80a0916:	27ff      	movgt	r7, #255	; 0xff
 80a0918:	2700      	movle	r7, #0
 80a091a:	f04f 0900 	movgt.w	r9, #0
 80a091e:	f04f 09ff 	movle.w	r9, #255	; 0xff
 80a0922:	e001      	b.n	80a0928 <_Z14sectionSqueezeiii+0xd0>
        // colorPink = strip.Color(i,0,i);

        if(step>numLimit/2){
          colorStep=colorBlue;
          colorStepRed=0;
          colorStepGreen=0;
 80a0924:	2700      	movs	r7, #0
        // colorBlue = strip.Color(0,0,i);
        // colorPink = strip.Color(i,0,i);

        if(step>numLimit/2){
          colorStep=colorBlue;
          colorStepRed=0;
 80a0926:	46b9      	mov	r9, r7
          colorStepBlue=255;
        }
        // delay(5);
       // strip.setPixelColor(valDOWN, colorStep); 
     //   strip.setPixelColor(valUP, colorStep);
     if(jump<255){
 80a0928:	2efe      	cmp	r6, #254	; 0xfe
jump+=10;
 80a092a:	bfd4      	ite	le
 80a092c:	360a      	addle	r6, #10
     }else{
jump-=10;
 80a092e:	3e0a      	subgt	r6, #10
     }
        strip.setColorDimmed(valUP, colorStepRed, colorStepGreen, colorStepBlue,jump );
 80a0930:	b2f3      	uxtb	r3, r6
 80a0932:	fa5f f989 	uxtb.w	r9, r9
 80a0936:	b2ff      	uxtb	r7, r7
 80a0938:	9303      	str	r3, [sp, #12]
 80a093a:	9301      	str	r3, [sp, #4]
 80a093c:	23ff      	movs	r3, #255	; 0xff
 80a093e:	9300      	str	r3, [sp, #0]
 80a0940:	464a      	mov	r2, r9
 80a0942:	463b      	mov	r3, r7
 80a0944:	b2a1      	uxth	r1, r4
 80a0946:	480a      	ldr	r0, [pc, #40]	; (80a0970 <_Z14sectionSqueezeiii+0x118>)
 80a0948:	f001 ffe2 	bl	80a2910 <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh>
        strip.setColorDimmed(valDOWN, colorStepRed, colorStepGreen, colorStepBlue, jump);
 80a094c:	9b03      	ldr	r3, [sp, #12]
 80a094e:	464a      	mov	r2, r9
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	23ff      	movs	r3, #255	; 0xff
 80a0954:	9300      	str	r3, [sp, #0]
 80a0956:	b2a9      	uxth	r1, r5
 80a0958:	463b      	mov	r3, r7
 80a095a:	4805      	ldr	r0, [pc, #20]	; (80a0970 <_Z14sectionSqueezeiii+0x118>)
 80a095c:	f001 ffd8 	bl	80a2910 <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh>
  uint32_t colorStep;
  int colorStepRed;
  int colorStepGreen;
  int colorStepBlue;
int jump = 100;
  for(int step = 0; step < numLimit; step++){
 80a0960:	f108 0801 	add.w	r8, r8, #1
 80a0964:	3d01      	subs	r5, #1
 80a0966:	3401      	adds	r4, #1
 80a0968:	e7bd      	b.n	80a08e6 <_Z14sectionSqueezeiii+0x8e>
      //  delay(tan(pulseCounter)*SCALE);
      //       pulseCounter += pulseSpeed;
    }
   
  }
}
 80a096a:	b007      	add	sp, #28
 80a096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0970:	200001f0 	.word	0x200001f0
 80a0974:	080a6fc4 	.word	0x080a6fc4
 80a0978:	080a6fd1 	.word	0x080a6fd1
 80a097c:	080a6fd7 	.word	0x080a6fd7

080a0980 <_Z12theaterChasemi>:
  for(int i = 0; i < 255; i++){
   
  }
}
void theaterChase(uint32_t color, int wait)
{
 80a0980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  int limit = 20;

  int numHalfPixels=strip.numPixels()/2;
 80a0984:	4846      	ldr	r0, [pc, #280]	; (80a0aa0 <_Z12theaterChasemi+0x120>)
 80a0986:	f001 ffd8 	bl	80a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>
  int numLimit = numHalfPixels-limit;
  int stretch = numHalfPixels;
  int up = numHalfPixels-limit;
  int down = numHalfPixels+limit;
 80a098a:	2514      	movs	r5, #20
void theaterChase(uint32_t color, int wait)
{
  
  int limit = 20;

  int numHalfPixels=strip.numPixels()/2;
 80a098c:	f3c0 044f 	ubfx	r4, r0, #1, #16
  int numLimit = numHalfPixels-limit;
  int stretch = numHalfPixels;
  int up = numHalfPixels-limit;
  int down = numHalfPixels+limit;

  float pulseCounter = 0;
 80a0990:	2600      	movs	r6, #0
 80a0992:	ebc5 0804 	rsb	r8, r5, r4
 80a0996:	192f      	adds	r7, r5, r4
  int SCALE = 1000;
  float pulseSpeed = 0.05;

    for (; down > stretch; down--)
 80a0998:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80a099c:	d336      	bcc.n	80a0a0c <_Z12theaterChasemi+0x8c>
    {     
            strip.clear(); //   Set all pixels in RAM to 0 (off)
 80a099e:	4840      	ldr	r0, [pc, #256]	; (80a0aa0 <_Z12theaterChasemi+0x120>)
 80a09a0:	f001 fff3 	bl	80a298a <_ZN17Adafruit_NeoPixel5clearEv>
            sectionSqueeze(limit,down,up);
 80a09a4:	4642      	mov	r2, r8
 80a09a6:	4639      	mov	r1, r7
 80a09a8:	2014      	movs	r0, #20
 80a09aa:	f7ff ff55 	bl	80a0858 <_Z14sectionSqueezeiii>
            strip.setPixelColor(up+3, color);
            */


            up++;
            strip.show(); // Update strip with new contents
 80a09ae:	483c      	ldr	r0, [pc, #240]	; (80a0aa0 <_Z12theaterChasemi+0x120>)
 80a09b0:	f000 fe68 	bl	80a1684 <_ZN17Adafruit_NeoPixel4showEv>
            delay(sin(pulseCounter)*SCALE);
 80a09b4:	4630      	mov	r0, r6
 80a09b6:	f005 fb31 	bl	80a601c <__aeabi_f2d>
 80a09ba:	4680      	mov	r8, r0
 80a09bc:	4689      	mov	r9, r1
 80a09be:	f003 fe91 	bl	80a46e4 <sin>
 80a09c2:	2200      	movs	r2, #0
 80a09c4:	4b37      	ldr	r3, [pc, #220]	; (80a0aa4 <_Z12theaterChasemi+0x124>)
 80a09c6:	f005 fb7d 	bl	80a60c4 <__aeabi_dmul>
 80a09ca:	f005 fe53 	bl	80a6674 <__aeabi_d2uiz>
 80a09ce:	f002 fc47 	bl	80a3260 <delay>
            Serial.print("SIN-----");
 80a09d2:	f003 fb31 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a09d6:	4934      	ldr	r1, [pc, #208]	; (80a0aa8 <_Z12theaterChasemi+0x128>)
 80a09d8:	f002 fdb4 	bl	80a3544 <_ZN5Print5printEPKc>
            Serial.println(tan(pulseCounter)*SCALE);
 80a09dc:	f003 fb2c 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a09e0:	4649      	mov	r1, r9
 80a09e2:	4607      	mov	r7, r0
 80a09e4:	4640      	mov	r0, r8
 80a09e6:	f003 fec5 	bl	80a4774 <tan>
 80a09ea:	2200      	movs	r2, #0
 80a09ec:	4b2d      	ldr	r3, [pc, #180]	; (80a0aa4 <_Z12theaterChasemi+0x124>)
 80a09ee:	f005 fb69 	bl	80a60c4 <__aeabi_dmul>
 80a09f2:	2302      	movs	r3, #2
 80a09f4:	4602      	mov	r2, r0
 80a09f6:	9300      	str	r3, [sp, #0]
 80a09f8:	4638      	mov	r0, r7
 80a09fa:	460b      	mov	r3, r1
 80a09fc:	f002 fee2 	bl	80a37c4 <_ZN5Print7printlnEdi>
            pulseCounter += pulseSpeed;
 80a0a00:	4630      	mov	r0, r6
 80a0a02:	492a      	ldr	r1, [pc, #168]	; (80a0aac <_Z12theaterChasemi+0x12c>)
 80a0a04:	f005 fe5c 	bl	80a66c0 <__addsf3>
 80a0a08:	4606      	mov	r6, r0

  float pulseCounter = 0;
  int SCALE = 1000;
  float pulseSpeed = 0.05;

    for (; down > stretch; down--)
 80a0a0a:	e7c2      	b.n	80a0992 <_Z12theaterChasemi+0x12>
           // delay(wait*=0.8);  // Pause for a moment
        // }
    }
pulseCounter = 0;
    //wait = 1000;
      Serial.println("END FIRST LOOP");
 80a0a0c:	f003 fb14 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0a10:	4927      	ldr	r1, [pc, #156]	; (80a0ab0 <_Z12theaterChasemi+0x130>)
 80a0a12:	f002 fdb0 	bl	80a3576 <_ZN5Print7printlnEPKc>
      Serial.print("LIMIT--");
 80a0a16:	f003 fb0f 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0a1a:	4926      	ldr	r1, [pc, #152]	; (80a0ab4 <_Z12theaterChasemi+0x134>)
 80a0a1c:	f002 fd92 	bl	80a3544 <_ZN5Print5printEPKc>
      Serial.println(limit);
 80a0a20:	f003 fb0a 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0a24:	220a      	movs	r2, #10
 80a0a26:	2114      	movs	r1, #20
 80a0a28:	f002 fe13 	bl	80a3652 <_ZN5Print7printlnEii>
        Serial.print("DOWN--");
 80a0a2c:	f003 fb04 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0a30:	4921      	ldr	r1, [pc, #132]	; (80a0ab8 <_Z12theaterChasemi+0x138>)
 80a0a32:	f002 fd87 	bl	80a3544 <_ZN5Print5printEPKc>
      Serial.println(down);
 80a0a36:	f003 faff 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0a3a:	220a      	movs	r2, #10
 80a0a3c:	4621      	mov	r1, r4
 80a0a3e:	f002 fe08 	bl	80a3652 <_ZN5Print7printlnEii>
 80a0a42:	2500      	movs	r5, #0
            Serial.println(tan(pulseCounter)*SCALE);
            pulseCounter += pulseSpeed;
           // delay(wait*=0.8);  // Pause for a moment
        // }
    }
pulseCounter = 0;
 80a0a44:	2600      	movs	r6, #0
 80a0a46:	ebc5 0804 	rsb	r8, r5, r4
 80a0a4a:	192f      	adds	r7, r5, r4
 80a0a4c:	3501      	adds	r5, #1
      Serial.println("END FIRST LOOP");
      Serial.print("LIMIT--");
      Serial.println(limit);
        Serial.print("DOWN--");
      Serial.println(down);
    for (; down<numHalfPixels+limit; down++)
 80a0a4e:	2d15      	cmp	r5, #21
 80a0a50:	d022      	beq.n	80a0a98 <_Z12theaterChasemi+0x118>
    { 
      Serial.println("SECOND LOOP");
 80a0a52:	f003 faf1 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a0a56:	4919      	ldr	r1, [pc, #100]	; (80a0abc <_Z12theaterChasemi+0x13c>)
 80a0a58:	f002 fd8d 	bl	80a3576 <_ZN5Print7printlnEPKc>
            strip.clear(); //   Set all pixels in RAM to 0 (off)
 80a0a5c:	4810      	ldr	r0, [pc, #64]	; (80a0aa0 <_Z12theaterChasemi+0x120>)
 80a0a5e:	f001 ff94 	bl	80a298a <_ZN17Adafruit_NeoPixel5clearEv>
            sectionSqueeze(limit,down,up);
 80a0a62:	4642      	mov	r2, r8
 80a0a64:	4639      	mov	r1, r7
 80a0a66:	2014      	movs	r0, #20
 80a0a68:	f7ff fef6 	bl	80a0858 <_Z14sectionSqueezeiii>
            strip.setPixelColor(j+1, strip.Color(0,0,255));
            strip.setPixelColor(j+2, color);
            strip.setPixelColor(j+3, color);
            */
            up--;
            strip.show(); // Update strip with new contents
 80a0a6c:	480c      	ldr	r0, [pc, #48]	; (80a0aa0 <_Z12theaterChasemi+0x120>)
 80a0a6e:	f000 fe09 	bl	80a1684 <_ZN17Adafruit_NeoPixel4showEv>
            delay(sin(pulseCounter)*SCALE);
 80a0a72:	4630      	mov	r0, r6
 80a0a74:	f005 fad2 	bl	80a601c <__aeabi_f2d>
 80a0a78:	f003 fe34 	bl	80a46e4 <sin>
 80a0a7c:	2200      	movs	r2, #0
 80a0a7e:	4b09      	ldr	r3, [pc, #36]	; (80a0aa4 <_Z12theaterChasemi+0x124>)
 80a0a80:	f005 fb20 	bl	80a60c4 <__aeabi_dmul>
 80a0a84:	f005 fdf6 	bl	80a6674 <__aeabi_d2uiz>
 80a0a88:	f002 fbea 	bl	80a3260 <delay>
            pulseCounter += pulseSpeed;
 80a0a8c:	4630      	mov	r0, r6
 80a0a8e:	4907      	ldr	r1, [pc, #28]	; (80a0aac <_Z12theaterChasemi+0x12c>)
 80a0a90:	f005 fe16 	bl	80a66c0 <__addsf3>
 80a0a94:	4606      	mov	r6, r0
      Serial.println("END FIRST LOOP");
      Serial.print("LIMIT--");
      Serial.println(limit);
        Serial.print("DOWN--");
      Serial.println(down);
    for (; down<numHalfPixels+limit; down++)
 80a0a96:	e7d6      	b.n	80a0a46 <_Z12theaterChasemi+0xc6>
            delay(sin(pulseCounter)*SCALE);
            pulseCounter += pulseSpeed;
           //delay(wait*=0.8); // Pause for a moment
    }

}
 80a0a98:	b003      	add	sp, #12
 80a0a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0a9e:	bf00      	nop
 80a0aa0:	200001f0 	.word	0x200001f0
 80a0aa4:	408f4000 	.word	0x408f4000
 80a0aa8:	080a6fdf 	.word	0x080a6fdf
 80a0aac:	3d4ccccd 	.word	0x3d4ccccd
 80a0ab0:	080a6fe8 	.word	0x080a6fe8
 80a0ab4:	080a6ff7 	.word	0x080a6ff7
 80a0ab8:	080a6fff 	.word	0x080a6fff
 80a0abc:	080a7006 	.word	0x080a7006

080a0ac0 <loop>:
/////---------------------------------------------------------------- SETUP



//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
 80a0ac0:	b508      	push	{r3, lr}
// healthyWave(500,3,3);

// testCase(0); //motors
// testCase(1); //leds
theaterChase(strip.Color(255,0,0),1000);
 80a0ac2:	2200      	movs	r2, #0
 80a0ac4:	4611      	mov	r1, r2
 80a0ac6:	20ff      	movs	r0, #255	; 0xff
 80a0ac8:	f001 ff32 	bl	80a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>
// theaterChase(strip.Color(255,0,255),100);
//-->IMPORTANT: only set boolean onlyMotor to false when using next testcase
// testCase(2); //IMU
}
 80a0acc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void loop() {
// healthyWave(500,3,3);

// testCase(0); //motors
// testCase(1); //leds
theaterChase(strip.Color(255,0,0),1000);
 80a0ad0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0ad4:	f7ff bf54 	b.w	80a0980 <_Z12theaterChasemi>

080a0ad8 <_GLOBAL__sub_I_SystemMode>:
      j++;

      delay(_wait);
    }
  }
}
 80a0ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0ada:	f002 f99b 	bl	80a2e14 <HAL_Pin_Map>
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"
#include "simple-OSC.h"

SYSTEM_THREAD(ENABLED);
 80a0ade:	2100      	movs	r1, #0
 80a0ae0:	2001      	movs	r0, #1
 80a0ae2:	f002 fb19 	bl	80a3118 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0ae6:	4b1f      	ldr	r3, [pc, #124]	; (80a0b64 <_GLOBAL__sub_I_SystemMode+0x8c>)
 80a0ae8:	2200      	movs	r2, #0
 80a0aea:	701a      	strb	r2, [r3, #0]
 80a0aec:	805a      	strh	r2, [r3, #2]
 80a0aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0af2:	4d1d      	ldr	r5, [pc, #116]	; (80a0b68 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a0af4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0af6:	2002      	movs	r0, #2
 80a0af8:	f002 fafe 	bl	80a30f8 <set_system_mode>
 80a0afc:	4c1b      	ldr	r4, [pc, #108]	; (80a0b6c <_GLOBAL__sub_I_SystemMode+0x94>)
 80a0afe:	4628      	mov	r0, r5
 80a0b00:	f002 fc32 	bl	80a3368 <_ZN9IPAddressC1Ev>
 80a0b04:	4628      	mov	r0, r5
int port;
UDP udp;
 80a0b06:	4d1a      	ldr	r5, [pc, #104]	; (80a0b70 <_GLOBAL__sub_I_SystemMode+0x98>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0b08:	4622      	mov	r2, r4
 80a0b0a:	491a      	ldr	r1, [pc, #104]	; (80a0b74 <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a0b0c:	f003 fc9a 	bl	80a4444 <__aeabi_atexit>
int port;
UDP udp;
 80a0b10:	4628      	mov	r0, r5
 80a0b12:	f003 f91d 	bl	80a3d50 <_ZN3UDPC1Ev>
 80a0b16:	4622      	mov	r2, r4
 80a0b18:	4917      	ldr	r1, [pc, #92]	; (80a0b78 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a0b1a:	4628      	mov	r0, r5
#define PIXEL_COUNT 24
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0b1c:	4d17      	ldr	r5, [pc, #92]	; (80a0b7c <_GLOBAL__sub_I_SystemMode+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0b1e:	f003 fc91 	bl	80a4444 <__aeabi_atexit>
#define PIXEL_COUNT 24
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0b22:	2302      	movs	r3, #2
 80a0b24:	461a      	mov	r2, r3
 80a0b26:	2118      	movs	r1, #24
 80a0b28:	4628      	mov	r0, r5
 80a0b2a:	f000 fd9a 	bl	80a1662 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0b2e:	4622      	mov	r2, r4
 80a0b30:	4913      	ldr	r1, [pc, #76]	; (80a0b80 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a0b32:	4628      	mov	r0, r5
 80a0b34:	f003 fc86 	bl	80a4444 <__aeabi_atexit>
}


/////---------------------------------------------------------------- IMU

LSM9DS1 imu;
 80a0b38:	4812      	ldr	r0, [pc, #72]	; (80a0b84 <_GLOBAL__sub_I_SystemMode+0xac>)
 80a0b3a:	f000 f889 	bl	80a0c50 <_ZN7LSM9DS1C1Ev>
#define PRINT_SPEED 250 // 250 ms between prints

// a declination to get a more accurate heading. 
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
 80a0b3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80a0b42:	4811      	ldr	r0, [pc, #68]	; (80a0b88 <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a0b44:	f000 f82a 	bl	80a0b9c <_ZN20SparkCorePolledTimerC1Em>
   //new driver motor motorTesting
#include "Stepper.h"
 
#define STEPS 300
 
Stepper stepper(STEPS, A1, A2, A3, A4);
 80a0b48:	220d      	movs	r2, #13
 80a0b4a:	230e      	movs	r3, #14
 80a0b4c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0b50:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0b54:	230c      	movs	r3, #12
 80a0b56:	220b      	movs	r2, #11
 80a0b58:	480c      	ldr	r0, [pc, #48]	; (80a0b8c <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a0b5a:	f001 ff25 	bl	80a29a8 <_ZN7StepperC1Eiiiii>
      j++;

      delay(_wait);
    }
  }
}
 80a0b5e:	b003      	add	sp, #12
 80a0b60:	bd30      	pop	{r4, r5, pc}
 80a0b62:	bf00      	nop
 80a0b64:	20000180 	.word	0x20000180
 80a0b68:	2000009c 	.word	0x2000009c
 80a0b6c:	20000088 	.word	0x20000088
 80a0b70:	200001a4 	.word	0x200001a4
 80a0b74:	080a00b7 	.word	0x080a00b7
 80a0b78:	080a00b9 	.word	0x080a00b9
 80a0b7c:	200001f0 	.word	0x200001f0
 80a0b80:	080a15c5 	.word	0x080a15c5
 80a0b84:	200000b8 	.word	0x200000b8
 80a0b88:	2000008c 	.word	0x2000008c
 80a0b8c:	2000013c 	.word	0x2000013c

080a0b90 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0b90:	b510      	push	{r4, lr}
 80a0b92:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b94:	f002 f936 	bl	80a2e04 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a0b98:	6020      	str	r0, [r4, #0]
 80a0b9a:	bd10      	pop	{r4, pc}

080a0b9c <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a0b9c:	b538      	push	{r3, r4, r5, lr}
 80a0b9e:	4604      	mov	r4, r0
 80a0ba0:	460d      	mov	r5, r1
    Reset();
 80a0ba2:	f7ff fff5 	bl	80a0b90 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0ba6:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a0ba8:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0baa:	60a3      	str	r3, [r4, #8]
}
 80a0bac:	4620      	mov	r0, r4
 80a0bae:	bd38      	pop	{r3, r4, r5, pc}

080a0bb0 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a0bb0:	6081      	str	r1, [r0, #8]
 80a0bb2:	4770      	bx	lr

080a0bb4 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0bb4:	f002 b92e 	b.w	80a2e14 <HAL_Pin_Map>

080a0bb8 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0bb8:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0bba:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a0bbc:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a0bbe:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0bc0:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0bc2:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0bc4:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0bc6:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0bc8:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0bca:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0bcc:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0bce:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0bd0:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0bd2:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0bd4:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0bd8:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0bda:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0bdc:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a0bde:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0be0:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0be2:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0be4:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0be6:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0be8:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0bea:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0bec:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a0bee:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0bf0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0bf4:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0bf6:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0bf8:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0bfa:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0bfc:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a0bfe:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0c00:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0c02:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0c04:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0c06:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0c08:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0c0a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a0c0e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0c10:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0c14:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0c18:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a0c1a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0c1e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0c22:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0c26:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0c28:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a0c2a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0c2c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0c2e:	6565      	str	r5, [r4, #84]	; 0x54
 80a0c30:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0c34:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0c38:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0c3c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0c40:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0c44:	d1f0      	bne.n	80a0c28 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0c46:	f04f 0300 	mov.w	r3, #0
 80a0c4a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0c4e:	bd30      	pop	{r4, r5, pc}

080a0c50 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0c50:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0c52:	231e      	movs	r3, #30
 80a0c54:	226b      	movs	r2, #107	; 0x6b
 80a0c56:	2101      	movs	r1, #1
 80a0c58:	f7ff ffae 	bl	80a0bb8 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0c5c:	bd10      	pop	{r4, pc}

080a0c5e <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a0c5e:	b510      	push	{r4, lr}
 80a0c60:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0c62:	4608      	mov	r0, r1
 80a0c64:	f005 fde0 	bl	80a6828 <__aeabi_i2f>
 80a0c68:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a0c6a:	f005 fe31 	bl	80a68d0 <__aeabi_fmul>
}
 80a0c6e:	bd10      	pop	{r4, pc}

080a0c70 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a0c70:	b510      	push	{r4, lr}
 80a0c72:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0c74:	88c0      	ldrh	r0, [r0, #6]
 80a0c76:	f005 fdd3 	bl	80a6820 <__aeabi_ui2f>
 80a0c7a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0c7e:	f005 fe27 	bl	80a68d0 <__aeabi_fmul>
 80a0c82:	6760      	str	r0, [r4, #116]	; 0x74
 80a0c84:	bd10      	pop	{r4, pc}

080a0c86 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0c86:	b510      	push	{r4, lr}
 80a0c88:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0c8a:	7dc0      	ldrb	r0, [r0, #23]
 80a0c8c:	f005 fdc8 	bl	80a6820 <__aeabi_ui2f>
 80a0c90:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0c94:	f005 fe1c 	bl	80a68d0 <__aeabi_fmul>
 80a0c98:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0c9a:	bd10      	pop	{r4, pc}

080a0c9c <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0c9c:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0ca0:	3b04      	subs	r3, #4
 80a0ca2:	2b0c      	cmp	r3, #12
 80a0ca4:	d814      	bhi.n	80a0cd0 <_ZN7LSM9DS18calcmResEv+0x34>
 80a0ca6:	e8df f003 	tbb	[pc, r3]
 80a0caa:	1307      	.short	0x1307
 80a0cac:	130a1313 	.word	0x130a1313
 80a0cb0:	130d1313 	.word	0x130d1313
 80a0cb4:	1313      	.short	0x1313
 80a0cb6:	10          	.byte	0x10
 80a0cb7:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0cb8:	4b06      	ldr	r3, [pc, #24]	; (80a0cd4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0cba:	681b      	ldr	r3, [r3, #0]
 80a0cbc:	e007      	b.n	80a0cce <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a0cbe:	4b05      	ldr	r3, [pc, #20]	; (80a0cd4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0cc0:	685b      	ldr	r3, [r3, #4]
 80a0cc2:	e004      	b.n	80a0cce <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0cc4:	4b03      	ldr	r3, [pc, #12]	; (80a0cd4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0cc6:	689b      	ldr	r3, [r3, #8]
 80a0cc8:	e001      	b.n	80a0cce <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0cca:	4b02      	ldr	r3, [pc, #8]	; (80a0cd4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0ccc:	68db      	ldr	r3, [r3, #12]
 80a0cce:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a0cd0:	4770      	bx	lr
 80a0cd2:	bf00      	nop
 80a0cd4:	20000010 	.word	0x20000010

080a0cd8 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0cd8:	88c3      	ldrh	r3, [r0, #6]
 80a0cda:	2bf5      	cmp	r3, #245	; 0xf5
 80a0cdc:	d007      	beq.n	80a0cee <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0ce2:	d004      	beq.n	80a0cee <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0ce4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0ce8:	bf1c      	itt	ne
 80a0cea:	23f5      	movne	r3, #245	; 0xf5
 80a0cec:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a0cee:	7dc2      	ldrb	r2, [r0, #23]
 80a0cf0:	2a10      	cmp	r2, #16
 80a0cf2:	d803      	bhi.n	80a0cfc <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0cf4:	4b08      	ldr	r3, [pc, #32]	; (80a0d18 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0cf6:	40d3      	lsrs	r3, r2
 80a0cf8:	07da      	lsls	r2, r3, #31
 80a0cfa:	d401      	bmi.n	80a0d00 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0cfc:	2302      	movs	r3, #2
 80a0cfe:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0d00:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0d04:	2a10      	cmp	r2, #16
 80a0d06:	d803      	bhi.n	80a0d10 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0d08:	4b04      	ldr	r3, [pc, #16]	; (80a0d1c <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0d0a:	40d3      	lsrs	r3, r2
 80a0d0c:	07db      	lsls	r3, r3, #31
 80a0d0e:	d402      	bmi.n	80a0d16 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0d10:	2304      	movs	r3, #4
 80a0d12:	f880 3020 	strb.w	r3, [r0, #32]
 80a0d16:	4770      	bx	lr
 80a0d18:	00010114 	.word	0x00010114
 80a0d1c:	00011110 	.word	0x00011110

080a0d20 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0d20:	b510      	push	{r4, lr}
 80a0d22:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0d24:	2101      	movs	r1, #1
 80a0d26:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a0d2a:	f003 fb07 	bl	80a433c <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a0d2e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0d32:	2101      	movs	r1, #1
 80a0d34:	f003 fb13 	bl	80a435e <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0d38:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a0d3c:	2101      	movs	r1, #1
 80a0d3e:	f003 fafd 	bl	80a433c <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0d42:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a0d46:	4c0a      	ldr	r4, [pc, #40]	; (80a0d70 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a0d48:	2101      	movs	r1, #1
 80a0d4a:	f003 fb08 	bl	80a435e <digitalWrite>
	
	SPI.begin();
 80a0d4e:	4620      	mov	r0, r4
 80a0d50:	f002 fd76 	bl	80a3840 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0d54:	4620      	mov	r0, r4
 80a0d56:	2108      	movs	r1, #8
 80a0d58:	f002 fdc4 	bl	80a38e4 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a0d5c:	4620      	mov	r0, r4
 80a0d5e:	2101      	movs	r1, #1
 80a0d60:	f002 fd73 	bl	80a384a <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0d64:	4620      	mov	r0, r4
}
 80a0d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0d6a:	2100      	movs	r1, #0
 80a0d6c:	f002 bd70 	b.w	80a3850 <_ZN8SPIClass11setDataModeEh>
 80a0d70:	200006d0 	.word	0x200006d0

080a0d74 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0d76:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0d78:	4617      	mov	r7, r2
 80a0d7a:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0d7c:	4d09      	ldr	r5, [pc, #36]	; (80a0da4 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a0d7e:	4620      	mov	r0, r4
 80a0d80:	2100      	movs	r1, #0
 80a0d82:	f003 faec 	bl	80a435e <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0d86:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0d8a:	4628      	mov	r0, r5
 80a0d8c:	f002 fdbe 	bl	80a390c <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0d90:	4631      	mov	r1, r6
 80a0d92:	4628      	mov	r0, r5
 80a0d94:	f002 fdba 	bl	80a390c <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0d98:	4620      	mov	r0, r4
}
 80a0d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0d9e:	2101      	movs	r1, #1
 80a0da0:	f003 badd 	b.w	80a435e <digitalWrite>
 80a0da4:	200006d0 	.word	0x200006d0

080a0da8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0daa:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0dac:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0db0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0db4:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0db6:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0dba:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0dbe:	d103      	bne.n	80a0dc8 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0dc0:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0dc2:	bf88      	it	hi
 80a0dc4:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0dc8:	b28c      	uxth	r4, r1
 80a0dca:	4620      	mov	r0, r4
 80a0dcc:	2100      	movs	r1, #0
 80a0dce:	f003 fac6 	bl	80a435e <digitalWrite>
	SPI.transfer(rAddress);
 80a0dd2:	4629      	mov	r1, r5
 80a0dd4:	4809      	ldr	r0, [pc, #36]	; (80a0dfc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0dd6:	f002 fd99 	bl	80a390c <_ZN8SPIClass8transferEh>
 80a0dda:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0ddc:	1bab      	subs	r3, r5, r6
 80a0dde:	429f      	cmp	r7, r3
 80a0de0:	dd06      	ble.n	80a0df0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a0de2:	2100      	movs	r1, #0
 80a0de4:	4805      	ldr	r0, [pc, #20]	; (80a0dfc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0de6:	f002 fd91 	bl	80a390c <_ZN8SPIClass8transferEh>
 80a0dea:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a0dee:	e7f5      	b.n	80a0ddc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0df0:	4620      	mov	r0, r4
 80a0df2:	2101      	movs	r1, #1
 80a0df4:	f003 fab3 	bl	80a435e <digitalWrite>
	
	return 1;
}
 80a0df8:	2001      	movs	r0, #1
 80a0dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0dfc:	200006d0 	.word	0x200006d0

080a0e00 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0e02:	2301      	movs	r3, #1
 80a0e04:	9300      	str	r3, [sp, #0]
 80a0e06:	f10d 030f 	add.w	r3, sp, #15
 80a0e0a:	f7ff ffcd 	bl	80a0da8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a0e0e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0e12:	b005      	add	sp, #20
 80a0e14:	f85d fb04 	ldr.w	pc, [sp], #4

080a0e18 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0e18:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a0e1a:	f003 fab9 	bl	80a4390 <_Z19__fetch_global_Wirev>
}
 80a0e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0e22:	f002 ba67 	b.w	80a32f4 <_ZN7TwoWire5beginEv>

080a0e26 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0e26:	b570      	push	{r4, r5, r6, lr}
 80a0e28:	460e      	mov	r6, r1
 80a0e2a:	4615      	mov	r5, r2
 80a0e2c:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0e2e:	f003 faaf 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a0e32:	4631      	mov	r1, r6
 80a0e34:	f002 fa70 	bl	80a3318 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0e38:	f003 faaa 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a0e3c:	6803      	ldr	r3, [r0, #0]
 80a0e3e:	4629      	mov	r1, r5
 80a0e40:	689b      	ldr	r3, [r3, #8]
 80a0e42:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0e44:	f003 faa4 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a0e48:	6803      	ldr	r3, [r0, #0]
 80a0e4a:	4621      	mov	r1, r4
 80a0e4c:	689a      	ldr	r2, [r3, #8]
 80a0e4e:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0e50:	f003 fa9e 	bl	80a4390 <_Z19__fetch_global_Wirev>
}
 80a0e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0e58:	f002 ba66 	b.w	80a3328 <_ZN7TwoWire15endTransmissionEv>

080a0e5c <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0e5c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0e5e:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0e60:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0e62:	2a01      	cmp	r2, #1
 80a0e64:	d105      	bne.n	80a0e72 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0e66:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0e68:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0e6a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0e6e:	f7ff bfda 	b.w	80a0e26 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0e72:	b92a      	cbnz	r2, 80a0e80 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0e74:	460a      	mov	r2, r1
}
 80a0e76:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0e78:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0e7c:	f7ff bf7a 	b.w	80a0d74 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0e80:	bc10      	pop	{r4}
 80a0e82:	4770      	bx	lr

080a0e84 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0e84:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0e86:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0e88:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0e8a:	b113      	cbz	r3, 80a0e92 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0e8c:	7a03      	ldrb	r3, [r0, #8]
 80a0e8e:	015b      	lsls	r3, r3, #5
 80a0e90:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0e92:	88e2      	ldrh	r2, [r4, #6]
 80a0e94:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0e98:	d005      	beq.n	80a0ea6 <_ZN7LSM9DS18initGyroEv+0x22>
 80a0e9a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0e9e:	d104      	bne.n	80a0eaa <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0ea0:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0ea4:	e001      	b.n	80a0eaa <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0ea6:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0eaa:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0eac:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0eae:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0eb2:	431a      	orrs	r2, r3
 80a0eb4:	4620      	mov	r0, r4
 80a0eb6:	f7ff ffd1 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0eba:	2200      	movs	r2, #0
 80a0ebc:	2111      	movs	r1, #17
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	f7ff ffcc 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0ec4:	7aa3      	ldrb	r3, [r4, #10]
 80a0ec6:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0ec8:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0eca:	bf14      	ite	ne
 80a0ecc:	2280      	movne	r2, #128	; 0x80
 80a0ece:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0ed0:	b12b      	cbz	r3, 80a0ede <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0ed2:	7b23      	ldrb	r3, [r4, #12]
 80a0ed4:	f003 030f 	and.w	r3, r3, #15
 80a0ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0edc:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a0ede:	2112      	movs	r1, #18
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	f7ff ffbb 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0ee6:	7ce3      	ldrb	r3, [r4, #19]
 80a0ee8:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0eea:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0eec:	bf0c      	ite	eq
 80a0eee:	2200      	moveq	r2, #0
 80a0ef0:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0ef2:	b113      	cbz	r3, 80a0efa <_ZN7LSM9DS18initGyroEv+0x76>
 80a0ef4:	f042 0210 	orr.w	r2, r2, #16
 80a0ef8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0efa:	7c63      	ldrb	r3, [r4, #17]
 80a0efc:	b10b      	cbz	r3, 80a0f02 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a0efe:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0f02:	7d23      	ldrb	r3, [r4, #20]
 80a0f04:	b10b      	cbz	r3, 80a0f0a <_ZN7LSM9DS18initGyroEv+0x86>
 80a0f06:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0f0a:	211e      	movs	r1, #30
 80a0f0c:	4620      	mov	r0, r4
 80a0f0e:	f7ff ffa5 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0f12:	7b63      	ldrb	r3, [r4, #13]
 80a0f14:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0f16:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0f18:	bf0c      	ite	eq
 80a0f1a:	2200      	moveq	r2, #0
 80a0f1c:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0f1e:	b113      	cbz	r3, 80a0f26 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0f20:	f042 0210 	orr.w	r2, r2, #16
 80a0f24:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0f26:	7be3      	ldrb	r3, [r4, #15]
 80a0f28:	b10b      	cbz	r3, 80a0f2e <_ZN7LSM9DS18initGyroEv+0xaa>
 80a0f2a:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0f2e:	4620      	mov	r0, r4
}
 80a0f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0f34:	2113      	movs	r1, #19
 80a0f36:	f7ff bf91 	b.w	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>

080a0f3a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a0f3a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0f3c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0f3e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0f40:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0f42:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0f44:	bf0c      	ite	eq
 80a0f46:	2200      	moveq	r2, #0
 80a0f48:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0f4a:	b113      	cbz	r3, 80a0f52 <_ZN7LSM9DS19initAccelEv+0x18>
 80a0f4c:	f042 0210 	orr.w	r2, r2, #16
 80a0f50:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0f52:	7e63      	ldrb	r3, [r4, #25]
 80a0f54:	b10b      	cbz	r3, 80a0f5a <_ZN7LSM9DS19initAccelEv+0x20>
 80a0f56:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a0f5a:	211f      	movs	r1, #31
 80a0f5c:	4620      	mov	r0, r4
 80a0f5e:	f7ff ff7d 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0f62:	7da2      	ldrb	r2, [r4, #22]
 80a0f64:	b112      	cbz	r2, 80a0f6c <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0f66:	7e22      	ldrb	r2, [r4, #24]
 80a0f68:	0152      	lsls	r2, r2, #5
 80a0f6a:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0f6c:	7de3      	ldrb	r3, [r4, #23]
 80a0f6e:	2b08      	cmp	r3, #8
 80a0f70:	d006      	beq.n	80a0f80 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0f72:	2b10      	cmp	r3, #16
 80a0f74:	d007      	beq.n	80a0f86 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0f76:	2b04      	cmp	r3, #4
 80a0f78:	d107      	bne.n	80a0f8a <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0f7a:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0f7e:	e004      	b.n	80a0f8a <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0f80:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0f84:	e001      	b.n	80a0f8a <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0f86:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0f8a:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0f8e:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0f90:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0f92:	bfa2      	ittt	ge
 80a0f94:	f003 0303 	andge.w	r3, r3, #3
 80a0f98:	431a      	orrge	r2, r3
 80a0f9a:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0f9e:	4620      	mov	r0, r4
 80a0fa0:	f7ff ff5c 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0fa4:	7f62      	ldrb	r2, [r4, #29]
 80a0fa6:	b12a      	cbz	r2, 80a0fb4 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0fa8:	7fa2      	ldrb	r2, [r4, #30]
 80a0faa:	0152      	lsls	r2, r2, #5
 80a0fac:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0fb4:	4620      	mov	r0, r4
}
 80a0fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0fba:	2121      	movs	r1, #33	; 0x21
 80a0fbc:	f7ff bf4e 	b.w	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>

080a0fc0 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0fc0:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0fc2:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0fc4:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0fc6:	2a01      	cmp	r2, #1
 80a0fc8:	d105      	bne.n	80a0fd6 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0fca:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0fcc:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0fce:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0fd2:	f7ff bf28 	b.w	80a0e26 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0fd6:	b92a      	cbnz	r2, 80a0fe4 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0fd8:	460a      	mov	r2, r1
}
 80a0fda:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0fdc:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0fe0:	f7ff bec8 	b.w	80a0d74 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0fe4:	bc10      	pop	{r4}
 80a0fe6:	4770      	bx	lr

080a0fe8 <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0fe8:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0fea:	b570      	push	{r4, r5, r6, lr}
 80a0fec:	4606      	mov	r6, r0
 80a0fee:	460c      	mov	r4, r1
 80a0ff0:	4615      	mov	r5, r2
	if (axis > 2)
 80a0ff2:	d810      	bhi.n	80a1016 <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0ff4:	0049      	lsls	r1, r1, #1
 80a0ff6:	3105      	adds	r1, #5
 80a0ff8:	b2d2      	uxtb	r2, r2
 80a0ffa:	b2c9      	uxtb	r1, r1
 80a0ffc:	f7ff ffe0 	bl	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a1000:	1ce1      	adds	r1, r4, #3
 80a1002:	0049      	lsls	r1, r1, #1
 80a1004:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a1008:	4630      	mov	r0, r6
}
 80a100a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a100e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a1012:	f7ff bfd5 	b.w	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
 80a1016:	bd70      	pop	{r4, r5, r6, pc}

080a1018 <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a1018:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a101a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a101e:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1020:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a1022:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1026:	bf08      	it	eq
 80a1028:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a102a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a102e:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a1032:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1036:	bf18      	it	ne
 80a1038:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a103a:	009b      	lsls	r3, r3, #2
 80a103c:	f003 031c 	and.w	r3, r3, #28
 80a1040:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a1042:	431a      	orrs	r2, r3
 80a1044:	2120      	movs	r1, #32
 80a1046:	f7ff ffbb 	bl	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
 80a104a:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a104e:	4620      	mov	r0, r4
 80a1050:	3b08      	subs	r3, #8
 80a1052:	b2db      	uxtb	r3, r3
 80a1054:	2b08      	cmp	r3, #8
 80a1056:	bf96      	itet	ls
 80a1058:	4a12      	ldrls	r2, [pc, #72]	; (80a10a4 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a105a:	2200      	movhi	r2, #0
 80a105c:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a105e:	2121      	movs	r1, #33	; 0x21
 80a1060:	f7ff ffae 	bl	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a1064:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a1068:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a106a:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a106c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a1070:	bf0c      	ite	eq
 80a1072:	2200      	moveq	r2, #0
 80a1074:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a1076:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a107a:	431a      	orrs	r2, r3
 80a107c:	2122      	movs	r1, #34	; 0x22
 80a107e:	f7ff ff9f 	bl	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a1082:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a1086:	4620      	mov	r0, r4
 80a1088:	0092      	lsls	r2, r2, #2
 80a108a:	f002 020c 	and.w	r2, r2, #12
 80a108e:	2123      	movs	r1, #35	; 0x23
 80a1090:	f7ff ff96 	bl	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a1094:	4620      	mov	r0, r4
}
 80a1096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a109a:	2200      	movs	r2, #0
 80a109c:	2124      	movs	r1, #36	; 0x24
 80a109e:	f7ff bf8f 	b.w	80a0fc0 <_ZN7LSM9DS110mWriteByteEhh>
 80a10a2:	bf00      	nop
 80a10a4:	080a7021 	.word	0x080a7021

080a10a8 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a10a8:	b538      	push	{r3, r4, r5, lr}
 80a10aa:	460c      	mov	r4, r1
 80a10ac:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a10ae:	f003 f96f 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a10b2:	4621      	mov	r1, r4
 80a10b4:	f002 f930 	bl	80a3318 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a10b8:	f003 f96a 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a10bc:	6803      	ldr	r3, [r0, #0]
 80a10be:	4629      	mov	r1, r5
 80a10c0:	689b      	ldr	r3, [r3, #8]
 80a10c2:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a10c4:	f003 f964 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a10c8:	2100      	movs	r1, #0
 80a10ca:	f002 f929 	bl	80a3320 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a10ce:	f003 f95f 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a10d2:	2201      	movs	r2, #1
 80a10d4:	4621      	mov	r1, r4
 80a10d6:	f002 f91c 	bl	80a3312 <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a10da:	f003 f959 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a10de:	6803      	ldr	r3, [r0, #0]
 80a10e0:	695b      	ldr	r3, [r3, #20]
 80a10e2:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a10e4:	b2c0      	uxtb	r0, r0
 80a10e6:	bd38      	pop	{r3, r4, r5, pc}

080a10e8 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a10e8:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a10ea:	7801      	ldrb	r1, [r0, #0]
 80a10ec:	2901      	cmp	r1, #1
 80a10ee:	d103      	bne.n	80a10f8 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a10f0:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a10f4:	f7ff bfd8 	b.w	80a10a8 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a10f8:	b919      	cbnz	r1, 80a1102 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a10fa:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a10fe:	f7ff be7f 	b.w	80a0e00 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a1102:	2000      	movs	r0, #0
 80a1104:	4770      	bx	lr

080a1106 <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a1106:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a1108:	2127      	movs	r1, #39	; 0x27
 80a110a:	f7ff ffed 	bl	80a10e8 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a110e:	f000 0001 	and.w	r0, r0, #1
 80a1112:	bd08      	pop	{r3, pc}

080a1114 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a1114:	b538      	push	{r3, r4, r5, lr}
 80a1116:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a1118:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a111a:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a111c:	f7ff ffe4 	bl	80a10e8 <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a1120:	b11d      	cbz	r5, 80a112a <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a1122:	f040 0202 	orr.w	r2, r0, #2
 80a1126:	b2d2      	uxtb	r2, r2
 80a1128:	e001      	b.n	80a112e <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a112a:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a112e:	4620      	mov	r0, r4
}
 80a1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a1134:	2123      	movs	r1, #35	; 0x23
 80a1136:	f7ff be91 	b.w	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>

080a113a <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a113a:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a113c:	7801      	ldrb	r1, [r0, #0]
 80a113e:	2901      	cmp	r1, #1
 80a1140:	d103      	bne.n	80a114a <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a1142:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1146:	f7ff bfaf 	b.w	80a10a8 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a114a:	b919      	cbnz	r1, 80a1154 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a114c:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1150:	f7ff be56 	b.w	80a0e00 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a1154:	4770      	bx	lr

080a1156 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a1156:	b538      	push	{r3, r4, r5, lr}
 80a1158:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a115a:	7843      	ldrb	r3, [r0, #1]
 80a115c:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a1160:	7883      	ldrb	r3, [r0, #2]
 80a1162:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a1166:	f7ff fdb7 	bl	80a0cd8 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a116a:	f7ff fd81 	bl	80a0c70 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a116e:	4620      	mov	r0, r4
 80a1170:	f7ff fd94 	bl	80a0c9c <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a1174:	4620      	mov	r0, r4
 80a1176:	f7ff fd86 	bl	80a0c86 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a117a:	7823      	ldrb	r3, [r4, #0]
 80a117c:	2b01      	cmp	r3, #1
 80a117e:	d103      	bne.n	80a1188 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a1180:	4620      	mov	r0, r4
 80a1182:	f7ff fe49 	bl	80a0e18 <_ZN7LSM9DS17initI2CEv>
 80a1186:	e003      	b.n	80a1190 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a1188:	b913      	cbnz	r3, 80a1190 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a118a:	4620      	mov	r0, r4
 80a118c:	f7ff fdc8 	bl	80a0d20 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a1190:	210f      	movs	r1, #15
 80a1192:	4620      	mov	r0, r4
 80a1194:	f7ff ffd1 	bl	80a113a <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a1198:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a119a:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a119c:	4620      	mov	r0, r4
 80a119e:	f7ff ffa3 	bl	80a10e8 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a11a2:	f646 033d 	movw	r3, #26685	; 0x683d
 80a11a6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a11aa:	b205      	sxth	r5, r0
 80a11ac:	429d      	cmp	r5, r3
 80a11ae:	d10a      	bne.n	80a11c6 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a11b0:	4620      	mov	r0, r4
 80a11b2:	f7ff fe67 	bl	80a0e84 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	f7ff febf 	bl	80a0f3a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a11bc:	4620      	mov	r0, r4
 80a11be:	f7ff ff2b 	bl	80a1018 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a11c2:	4628      	mov	r0, r5
 80a11c4:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a11c6:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a11c8:	bd38      	pop	{r3, r4, r5, pc}

080a11ca <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a11ca:	b510      	push	{r4, lr}
 80a11cc:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a11ce:	2127      	movs	r1, #39	; 0x27
 80a11d0:	f7ff ffb3 	bl	80a113a <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a11d4:	2101      	movs	r1, #1
 80a11d6:	40a1      	lsls	r1, r4
 80a11d8:	4008      	ands	r0, r1
 80a11da:	4120      	asrs	r0, r4
}
 80a11dc:	b2c0      	uxtb	r0, r0
 80a11de:	bd10      	pop	{r4, pc}

080a11e0 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a11e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a11e4:	4690      	mov	r8, r2
 80a11e6:	460c      	mov	r4, r1
 80a11e8:	461d      	mov	r5, r3
 80a11ea:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a11ee:	f001 fe09 	bl	80a2e04 <HAL_Timer_Get_Milli_Seconds>
 80a11f2:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a11f4:	f003 f8cc 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a11f8:	4621      	mov	r1, r4
 80a11fa:	f002 f88d 	bl	80a3318 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a11fe:	f003 f8c7 	bl	80a4390 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1202:	6803      	ldr	r3, [r0, #0]
 80a1204:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a1208:	689b      	ldr	r3, [r3, #8]
 80a120a:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a120c:	f003 f8c0 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a1210:	2100      	movs	r1, #0
 80a1212:	f002 f885 	bl	80a3320 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a1216:	f003 f8bb 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a121a:	4621      	mov	r1, r4
 80a121c:	4632      	mov	r2, r6
 80a121e:	f002 f878 	bl	80a3312 <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a1222:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a1224:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a1228:	42b4      	cmp	r4, r6
 80a122a:	da1a      	bge.n	80a1262 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a122c:	f003 f8b0 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a1230:	6803      	ldr	r3, [r0, #0]
 80a1232:	691b      	ldr	r3, [r3, #16]
 80a1234:	4798      	blx	r3
 80a1236:	b140      	cbz	r0, 80a124a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a1238:	f003 f8aa 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a123c:	6803      	ldr	r3, [r0, #0]
 80a123e:	f104 0801 	add.w	r8, r4, #1
 80a1242:	695b      	ldr	r3, [r3, #20]
 80a1244:	4798      	blx	r3
 80a1246:	5528      	strb	r0, [r5, r4]
 80a1248:	4644      	mov	r4, r8
 80a124a:	f001 fddb 	bl	80a2e04 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a124e:	42b8      	cmp	r0, r7
 80a1250:	d9ea      	bls.n	80a1228 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a1252:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a1254:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a1256:	1b62      	subs	r2, r4, r5
 80a1258:	4296      	cmp	r6, r2
 80a125a:	dd05      	ble.n	80a1268 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a125c:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a1260:	e7f9      	b.n	80a1256 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a1262:	2001      	movs	r0, #1
 80a1264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a1268:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a126e <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a126e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1270:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1272:	7801      	ldrb	r1, [r0, #0]
 80a1274:	2901      	cmp	r1, #1
 80a1276:	d107      	bne.n	80a1288 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a1278:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a127c:	9300      	str	r3, [sp, #0]
 80a127e:	4613      	mov	r3, r2
 80a1280:	462a      	mov	r2, r5
 80a1282:	f7ff ffad 	bl	80a11e0 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a1286:	e007      	b.n	80a1298 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1288:	b931      	cbnz	r1, 80a1298 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a128a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a128e:	9300      	str	r3, [sp, #0]
 80a1290:	4613      	mov	r3, r2
 80a1292:	462a      	mov	r2, r5
 80a1294:	f7ff fd88 	bl	80a0da8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a1298:	b003      	add	sp, #12
 80a129a:	bd30      	pop	{r4, r5, pc}

080a129c <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a129c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a129e:	2306      	movs	r3, #6
 80a12a0:	466a      	mov	r2, sp
 80a12a2:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a12a4:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a12a6:	f7ff ffe2 	bl	80a126e <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a12aa:	b330      	cbz	r0, 80a12fa <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a12ac:	f89d 3000 	ldrb.w	r3, [sp]
 80a12b0:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a12b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a12b8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a12bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a12c0:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a12c4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a12c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a12cc:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a12ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a12d2:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a12d6:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a12d8:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a12da:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a12dc:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a12de:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a12e0:	b15d      	cbz	r5, 80a12fa <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a12e2:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a12e6:	1b49      	subs	r1, r1, r5
 80a12e8:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a12ea:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a12ee:	1a52      	subs	r2, r2, r1
 80a12f0:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a12f2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a12f6:	1a9b      	subs	r3, r3, r2
 80a12f8:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a12fa:	b003      	add	sp, #12
 80a12fc:	bd30      	pop	{r4, r5, pc}

080a12fe <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a12fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a1300:	2306      	movs	r3, #6
 80a1302:	466a      	mov	r2, sp
 80a1304:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a1306:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a1308:	f7ff ffb1 	bl	80a126e <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a130c:	b330      	cbz	r0, 80a135c <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a130e:	f89d 3000 	ldrb.w	r3, [sp]
 80a1312:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1316:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a131a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a131e:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1322:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1326:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a132a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a132e:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1330:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a1334:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1338:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a133a:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a133c:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a133e:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1340:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a1342:	b15d      	cbz	r5, 80a135c <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a1344:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a1348:	1b49      	subs	r1, r1, r5
 80a134a:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a134c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a1350:	1a52      	subs	r2, r2, r1
 80a1352:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a1354:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a1358:	1a9b      	subs	r3, r3, r2
 80a135a:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a135c:	b003      	add	sp, #12
 80a135e:	bd30      	pop	{r4, r5, pc}

080a1360 <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a1360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1364:	4604      	mov	r4, r0
 80a1366:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a1368:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a136a:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a136c:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a136e:	9304      	str	r3, [sp, #16]
 80a1370:	9305      	str	r3, [sp, #20]
 80a1372:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a1374:	9307      	str	r3, [sp, #28]
 80a1376:	9308      	str	r3, [sp, #32]
 80a1378:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a137a:	f7ff fecb 	bl	80a1114 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a137e:	223f      	movs	r2, #63	; 0x3f
 80a1380:	212e      	movs	r1, #46	; 0x2e
 80a1382:	4620      	mov	r0, r4
 80a1384:	f7ff fd6a 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a1388:	212f      	movs	r1, #47	; 0x2f
 80a138a:	4620      	mov	r0, r4
 80a138c:	f7ff feac 	bl	80a10e8 <_ZN7LSM9DS110xgReadByteEh>
 80a1390:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a1394:	2e1e      	cmp	r6, #30
 80a1396:	d9f7      	bls.n	80a1388 <_ZN7LSM9DS19calibrateEb+0x28>
 80a1398:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a139a:	42b7      	cmp	r7, r6
 80a139c:	da32      	bge.n	80a1404 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a139e:	4620      	mov	r0, r4
 80a13a0:	f7ff ffad 	bl	80a12fe <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a13a4:	9a07      	ldr	r2, [sp, #28]
 80a13a6:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a13aa:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a13ac:	4413      	add	r3, r2
 80a13ae:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a13b0:	9a08      	ldr	r2, [sp, #32]
 80a13b2:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a13b6:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a13b8:	4413      	add	r3, r2
 80a13ba:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a13bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a13be:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a13c2:	4413      	add	r3, r2
 80a13c4:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a13c6:	f7ff ff69 	bl	80a129c <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a13ca:	9a04      	ldr	r2, [sp, #16]
 80a13cc:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a13d0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a13d2:	4413      	add	r3, r2
 80a13d4:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a13d6:	9a05      	ldr	r2, [sp, #20]
 80a13d8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a13dc:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a13e0:	4413      	add	r3, r2
 80a13e2:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a13e4:	f004 fe1a 	bl	80a601c <__aeabi_f2d>
 80a13e8:	4602      	mov	r2, r0
 80a13ea:	460b      	mov	r3, r1
 80a13ec:	2000      	movs	r0, #0
 80a13ee:	4926      	ldr	r1, [pc, #152]	; (80a1488 <_ZN7LSM9DS19calibrateEb+0x128>)
 80a13f0:	f004 ff92 	bl	80a6318 <__aeabi_ddiv>
 80a13f4:	f005 f916 	bl	80a6624 <__aeabi_d2iz>
 80a13f8:	b200      	sxth	r0, r0
 80a13fa:	1a2d      	subs	r5, r5, r0
 80a13fc:	9806      	ldr	r0, [sp, #24]
 80a13fe:	4405      	add	r5, r0
 80a1400:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a1402:	e7ca      	b.n	80a139a <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a1404:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a1408:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a140c:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a1410:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a1414:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a1418:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a141c:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a141e:	a907      	add	r1, sp, #28
 80a1420:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a1424:	fb90 f0f6 	sdiv	r0, r0, r6
 80a1428:	b200      	sxth	r0, r0
 80a142a:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a142e:	9202      	str	r2, [sp, #8]
 80a1430:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a1432:	f005 f9f9 	bl	80a6828 <__aeabi_i2f>
 80a1436:	4659      	mov	r1, fp
 80a1438:	f005 fa4a 	bl	80a68d0 <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a143c:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a143e:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a1442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a1446:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a1448:	fb90 f0f6 	sdiv	r0, r0, r6
 80a144c:	b200      	sxth	r0, r0
 80a144e:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a1452:	f005 f9e9 	bl	80a6828 <__aeabi_i2f>
 80a1456:	4651      	mov	r1, sl
 80a1458:	f005 fa3a 	bl	80a68d0 <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a145c:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a145e:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a1462:	9a02      	ldr	r2, [sp, #8]
 80a1464:	d1db      	bne.n	80a141e <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a1466:	2100      	movs	r1, #0
 80a1468:	4620      	mov	r0, r4
 80a146a:	f7ff fe53 	bl	80a1114 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a146e:	2200      	movs	r2, #0
 80a1470:	212e      	movs	r1, #46	; 0x2e
 80a1472:	4620      	mov	r0, r4
 80a1474:	f7ff fcf2 	bl	80a0e5c <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a1478:	9b01      	ldr	r3, [sp, #4]
 80a147a:	b113      	cbz	r3, 80a1482 <_ZN7LSM9DS19calibrateEb+0x122>
 80a147c:	2301      	movs	r3, #1
 80a147e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a1482:	b00b      	add	sp, #44	; 0x2c
 80a1484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1488:	3ff00000 	.word	0x3ff00000

080a148c <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a148c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a148e:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1490:	7801      	ldrb	r1, [r0, #0]
 80a1492:	2901      	cmp	r1, #1
 80a1494:	d107      	bne.n	80a14a6 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a1496:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a149a:	9300      	str	r3, [sp, #0]
 80a149c:	4613      	mov	r3, r2
 80a149e:	462a      	mov	r2, r5
 80a14a0:	f7ff fe9e 	bl	80a11e0 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a14a4:	e007      	b.n	80a14b6 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a14a6:	b931      	cbnz	r1, 80a14b6 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a14a8:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a14ac:	9300      	str	r3, [sp, #0]
 80a14ae:	4613      	mov	r3, r2
 80a14b0:	462a      	mov	r2, r5
 80a14b2:	f7ff fc79 	bl	80a0da8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a14b6:	b003      	add	sp, #12
 80a14b8:	bd30      	pop	{r4, r5, pc}

080a14ba <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a14ba:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a14bc:	2306      	movs	r3, #6
 80a14be:	466a      	mov	r2, sp
 80a14c0:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a14c2:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a14c4:	f7ff ffe2 	bl	80a148c <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a14c8:	b1a0      	cbz	r0, 80a14f4 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a14ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a14ce:	f89d 3000 	ldrb.w	r3, [sp]
 80a14d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a14d6:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a14d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a14dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a14e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a14e4:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a14e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a14ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a14ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a14f2:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a14f4:	b002      	add	sp, #8
 80a14f6:	bd10      	pop	{r4, pc}

080a14f8 <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a14f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14fc:	4605      	mov	r5, r0
 80a14fe:	468a      	mov	sl, r1
 80a1500:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a1502:	2300      	movs	r3, #0
 80a1504:	f8ad 3000 	strh.w	r3, [sp]
 80a1508:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a150c:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a1510:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a1514:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a1518:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a151c:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a151e:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a1520:	2103      	movs	r1, #3
 80a1522:	4628      	mov	r0, r5
 80a1524:	f7ff fe51 	bl	80a11ca <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a1528:	2800      	cmp	r0, #0
 80a152a:	d0f9      	beq.n	80a1520 <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a152c:	4628      	mov	r0, r5
 80a152e:	f7ff ffc4 	bl	80a14ba <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a1532:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a1534:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a1538:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a153a:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a153e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a1540:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a1544:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a1546:	aa04      	add	r2, sp, #16
 80a1548:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a154c:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a1550:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a1552:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a1556:	bfb8      	it	lt
 80a1558:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a155c:	4291      	cmp	r1, r2
 80a155e:	bfc8      	it	gt
 80a1560:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a1564:	3301      	adds	r3, #1
 80a1566:	2b03      	cmp	r3, #3
 80a1568:	d1ed      	bne.n	80a1546 <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a156a:	3c01      	subs	r4, #1
 80a156c:	d1d8      	bne.n	80a1520 <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a156e:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a1572:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a1576:	f04f 0b02 	mov.w	fp, #2
 80a157a:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a157e:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a1582:	441e      	add	r6, r3
 80a1584:	fb96 f6fb 	sdiv	r6, r6, fp
 80a1588:	b236      	sxth	r6, r6
 80a158a:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a158e:	4630      	mov	r0, r6
 80a1590:	f005 f94a 	bl	80a6828 <__aeabi_i2f>
 80a1594:	4601      	mov	r1, r0
 80a1596:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a1598:	f005 f99a 	bl	80a68d0 <__aeabi_fmul>
 80a159c:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a15a0:	f1ba 0f00 	cmp.w	sl, #0
 80a15a4:	d004      	beq.n	80a15b0 <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a15a6:	4632      	mov	r2, r6
 80a15a8:	b2e1      	uxtb	r1, r4
 80a15aa:	4628      	mov	r0, r5
 80a15ac:	f7ff fd1c 	bl	80a0fe8 <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a15b0:	3401      	adds	r4, #1
 80a15b2:	2c03      	cmp	r4, #3
 80a15b4:	d1e1      	bne.n	80a157a <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a15b6:	b007      	add	sp, #28
 80a15b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a15bc <_GLOBAL__sub_I_magSensitivity>:
 80a15bc:	f001 bc2a 	b.w	80a2e14 <HAL_Pin_Map>

080a15c0 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a15c0:	f001 bc18 	b.w	80a2df4 <HAL_Timer_Get_Micro_Seconds>

080a15c4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a15c4:	b510      	push	{r4, lr}
 80a15c6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a15c8:	68c0      	ldr	r0, [r0, #12]
 80a15ca:	b108      	cbz	r0, 80a15d0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a15cc:	f001 fe38 	bl	80a3240 <free>
  if (begun) pinMode(pin, INPUT);
 80a15d0:	7823      	ldrb	r3, [r4, #0]
 80a15d2:	b11b      	cbz	r3, 80a15dc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a15d4:	2100      	movs	r1, #0
 80a15d6:	79e0      	ldrb	r0, [r4, #7]
 80a15d8:	f002 feb0 	bl	80a433c <pinMode>
}
 80a15dc:	4620      	mov	r0, r4
 80a15de:	bd10      	pop	{r4, pc}

080a15e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a15e0:	b538      	push	{r3, r4, r5, lr}
 80a15e2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a15e4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a15e6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a15e8:	b108      	cbz	r0, 80a15ee <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a15ea:	f001 fe29 	bl	80a3240 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a15ee:	79a3      	ldrb	r3, [r4, #6]
 80a15f0:	2b06      	cmp	r3, #6
 80a15f2:	bf0c      	ite	eq
 80a15f4:	2004      	moveq	r0, #4
 80a15f6:	2003      	movne	r0, #3
 80a15f8:	4368      	muls	r0, r5
 80a15fa:	b280      	uxth	r0, r0
 80a15fc:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a15fe:	f001 fe17 	bl	80a3230 <malloc>
 80a1602:	60e0      	str	r0, [r4, #12]
 80a1604:	b128      	cbz	r0, 80a1612 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a1606:	88a2      	ldrh	r2, [r4, #4]
 80a1608:	2100      	movs	r1, #0
 80a160a:	f005 fb66 	bl	80a6cda <memset>
    numLEDs = n;
 80a160e:	8065      	strh	r5, [r4, #2]
 80a1610:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a1612:	80a0      	strh	r0, [r4, #4]
 80a1614:	8060      	strh	r0, [r4, #2]
 80a1616:	bd38      	pop	{r3, r4, r5, pc}

080a1618 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a1618:	b510      	push	{r4, lr}
 80a161a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a161c:	2101      	movs	r1, #1
 80a161e:	79c0      	ldrb	r0, [r0, #7]
 80a1620:	f002 fe8c 	bl	80a433c <pinMode>
  digitalWrite(pin, LOW);
 80a1624:	2100      	movs	r1, #0
 80a1626:	79e0      	ldrb	r0, [r4, #7]
 80a1628:	f002 fe99 	bl	80a435e <digitalWrite>
  begun = true;
 80a162c:	2301      	movs	r3, #1
 80a162e:	7023      	strb	r3, [r4, #0]
 80a1630:	bd10      	pop	{r4, pc}

080a1632 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1632:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a1634:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1636:	4605      	mov	r5, r0
 80a1638:	460c      	mov	r4, r1
    if (begun) {
 80a163a:	b11b      	cbz	r3, 80a1644 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a163c:	2100      	movs	r1, #0
 80a163e:	79c0      	ldrb	r0, [r0, #7]
 80a1640:	f002 fe7c 	bl	80a433c <pinMode>
    }
    pin = p;
    if (begun) {
 80a1644:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a1646:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a1648:	b153      	cbz	r3, 80a1660 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a164a:	b2a4      	uxth	r4, r4
 80a164c:	4620      	mov	r0, r4
 80a164e:	2101      	movs	r1, #1
 80a1650:	f002 fe74 	bl	80a433c <pinMode>
        digitalWrite(p, LOW);
 80a1654:	4620      	mov	r0, r4
    }
}
 80a1656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a165a:	2100      	movs	r1, #0
 80a165c:	f002 be7f 	b.w	80a435e <digitalWrite>
 80a1660:	bd38      	pop	{r3, r4, r5, pc}

080a1662 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a1662:	b570      	push	{r4, r5, r6, lr}
 80a1664:	4604      	mov	r4, r0
 80a1666:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a1668:	2500      	movs	r5, #0
 80a166a:	7183      	strb	r3, [r0, #6]
 80a166c:	7005      	strb	r5, [r0, #0]
 80a166e:	7205      	strb	r5, [r0, #8]
 80a1670:	60c5      	str	r5, [r0, #12]
 80a1672:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a1674:	f7ff ffb4 	bl	80a15e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a1678:	4620      	mov	r0, r4
 80a167a:	4631      	mov	r1, r6
 80a167c:	f7ff ffd9 	bl	80a1632 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a1680:	4620      	mov	r0, r4
 80a1682:	bd70      	pop	{r4, r5, r6, pc}

080a1684 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a1684:	68c3      	ldr	r3, [r0, #12]
 80a1686:	2b00      	cmp	r3, #0
 80a1688:	f000 858e 	beq.w	80a21a8 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1690:	4604      	mov	r4, r0
 80a1692:	7983      	ldrb	r3, [r0, #6]
 80a1694:	b086      	sub	sp, #24
 80a1696:	3b02      	subs	r3, #2
 80a1698:	b2db      	uxtb	r3, r3
 80a169a:	2b04      	cmp	r3, #4
 80a169c:	bf96      	itet	ls
 80a169e:	4a29      	ldrls	r2, [pc, #164]	; (80a1744 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a16a0:	2532      	movhi	r5, #50	; 0x32
 80a16a2:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a16a6:	f7ff ff8b 	bl	80a15c0 <micros>
 80a16aa:	6923      	ldr	r3, [r4, #16]
 80a16ac:	1ac0      	subs	r0, r0, r3
 80a16ae:	42a8      	cmp	r0, r5
 80a16b0:	d3f9      	bcc.n	80a16a6 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a16b2:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a16b4:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a16b6:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a16b8:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a16ba:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a16be:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a16c2:	f000 8272 	beq.w	80a1baa <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a16c6:	2907      	cmp	r1, #7
 80a16c8:	f000 826f 	beq.w	80a1baa <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a16cc:	2906      	cmp	r1, #6
 80a16ce:	f000 8432 	beq.w	80a1f36 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a16d2:	2905      	cmp	r1, #5
 80a16d4:	f000 83ab 	beq.w	80a1e2e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a16d8:	2908      	cmp	r1, #8
 80a16da:	f000 83a8 	beq.w	80a1e2e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a16de:	2900      	cmp	r1, #0
 80a16e0:	f040 8563 	bne.w	80a21aa <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a16e4:	4a18      	ldr	r2, [pc, #96]	; (80a1748 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a16e6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16ee:	b29b      	uxth	r3, r3
 80a16f0:	2b00      	cmp	r3, #0
 80a16f2:	f000 8395 	beq.w	80a1e20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a16f6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16fc:	f10e 0503 	add.w	r5, lr, #3
 80a1700:	3b03      	subs	r3, #3
 80a1702:	b29b      	uxth	r3, r3
 80a1704:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1708:	f89e 3000 	ldrb.w	r3, [lr]
 80a170c:	b2db      	uxtb	r3, r3
 80a170e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1712:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1716:	b2db      	uxtb	r3, r3
 80a1718:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a171c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1720:	b2db      	uxtb	r3, r3
 80a1722:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1726:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a172a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a172e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1732:	021b      	lsls	r3, r3, #8
 80a1734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1738:	4303      	orrs	r3, r0
 80a173a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a173c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a1740:	e11b      	b.n	80a197a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a1742:	bf00      	nop
 80a1744:	080a702c 	.word	0x080a702c
 80a1748:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a174c:	4600      	mov	r0, r0
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a1854:	79e3      	ldrb	r3, [r4, #7]
 80a1856:	6810      	ldr	r0, [r2, #0]
 80a1858:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a185c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1860:	88bf      	ldrh	r7, [r7, #4]
 80a1862:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1866:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1868:	4600      	mov	r0, r0
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1962:	9b04      	ldr	r3, [sp, #16]
 80a1964:	085b      	lsrs	r3, r3, #1
 80a1966:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1968:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a196c:	3301      	adds	r3, #1
 80a196e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1970:	2b17      	cmp	r3, #23
 80a1972:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1976:	f200 82db 	bhi.w	80a1f30 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a197a:	79e3      	ldrb	r3, [r4, #7]
 80a197c:	6810      	ldr	r0, [r2, #0]
 80a197e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1982:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1986:	88bf      	ldrh	r7, [r7, #4]
 80a1988:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a198c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a198e:	9803      	ldr	r0, [sp, #12]
 80a1990:	9b04      	ldr	r3, [sp, #16]
 80a1992:	4218      	tst	r0, r3
 80a1994:	f47f aeda 	bne.w	80a174c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1998:	4600      	mov	r0, r0
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a19ea:	79e3      	ldrb	r3, [r4, #7]
 80a19ec:	6810      	ldr	r0, [r2, #0]
 80a19ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a19f6:	88bf      	ldrh	r7, [r7, #4]
 80a19f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a19fc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a19fe:	4600      	mov	r0, r0
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	e6db      	b.n	80a1962 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1baa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1bae:	4a17      	ldr	r2, [pc, #92]	; (80a1c0c <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a1bb0:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a1bb2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1bb6:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1bb8:	2b00      	cmp	r3, #0
 80a1bba:	f000 8131 	beq.w	80a1e20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1bbe:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1bc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1bc4:	f10e 0103 	add.w	r1, lr, #3
 80a1bc8:	3b03      	subs	r3, #3
 80a1bca:	b29b      	uxth	r3, r3
 80a1bcc:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1bd0:	f89e 3000 	ldrb.w	r3, [lr]
 80a1bd4:	b2db      	uxtb	r3, r3
 80a1bd6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1bda:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1bde:	b2db      	uxtb	r3, r3
 80a1be0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1be4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1be8:	b2db      	uxtb	r3, r3
 80a1bea:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1bee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1bf2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1bf6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a1bfa:	0200      	lsls	r0, r0, #8
 80a1bfc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a1c00:	433b      	orrs	r3, r7
 80a1c02:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1c04:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1c08:	e080      	b.n	80a1d0c <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a1c0a:	bf00      	nop
 80a1c0c:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c10:	4600      	mov	r0, r0
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1caa:	79e3      	ldrb	r3, [r4, #7]
 80a1cac:	6810      	ldr	r0, [r2, #0]
 80a1cae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1cb2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1cb6:	88bf      	ldrh	r7, [r7, #4]
 80a1cb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1cbc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1cbe:	4600      	mov	r0, r0
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1cf4:	9b04      	ldr	r3, [sp, #16]
 80a1cf6:	085b      	lsrs	r3, r3, #1
 80a1cf8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1cfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1cfe:	3301      	adds	r3, #1
 80a1d00:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1d02:	2b17      	cmp	r3, #23
 80a1d04:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1d08:	f200 8083 	bhi.w	80a1e12 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1d0c:	79e3      	ldrb	r3, [r4, #7]
 80a1d0e:	6810      	ldr	r0, [r2, #0]
 80a1d10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1d14:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1d18:	88bf      	ldrh	r7, [r7, #4]
 80a1d1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1d1e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1d20:	9803      	ldr	r0, [sp, #12]
 80a1d22:	9b04      	ldr	r3, [sp, #16]
 80a1d24:	4218      	tst	r0, r3
 80a1d26:	f47f af73 	bne.w	80a1c10 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1d2a:	4600      	mov	r0, r0
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a1d52:	79e3      	ldrb	r3, [r4, #7]
 80a1d54:	6810      	ldr	r0, [r2, #0]
 80a1d56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1d5a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1d5e:	88bf      	ldrh	r7, [r7, #4]
 80a1d60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1d64:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1d66:	4600      	mov	r0, r0
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	bf00      	nop
 80a1d86:	bf00      	nop
 80a1d88:	bf00      	nop
 80a1d8a:	bf00      	nop
 80a1d8c:	bf00      	nop
 80a1d8e:	bf00      	nop
 80a1d90:	bf00      	nop
 80a1d92:	bf00      	nop
 80a1d94:	bf00      	nop
 80a1d96:	bf00      	nop
 80a1d98:	bf00      	nop
 80a1d9a:	bf00      	nop
 80a1d9c:	bf00      	nop
 80a1d9e:	bf00      	nop
 80a1da0:	bf00      	nop
 80a1da2:	bf00      	nop
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
 80a1dc4:	bf00      	nop
 80a1dc6:	bf00      	nop
 80a1dc8:	bf00      	nop
 80a1dca:	bf00      	nop
 80a1dcc:	bf00      	nop
 80a1dce:	bf00      	nop
 80a1dd0:	bf00      	nop
 80a1dd2:	bf00      	nop
 80a1dd4:	bf00      	nop
 80a1dd6:	bf00      	nop
 80a1dd8:	bf00      	nop
 80a1dda:	bf00      	nop
 80a1ddc:	bf00      	nop
 80a1dde:	bf00      	nop
 80a1de0:	bf00      	nop
 80a1de2:	bf00      	nop
 80a1de4:	bf00      	nop
 80a1de6:	bf00      	nop
 80a1de8:	bf00      	nop
 80a1dea:	bf00      	nop
 80a1dec:	bf00      	nop
 80a1dee:	bf00      	nop
 80a1df0:	bf00      	nop
 80a1df2:	bf00      	nop
 80a1df4:	bf00      	nop
 80a1df6:	bf00      	nop
 80a1df8:	bf00      	nop
 80a1dfa:	bf00      	nop
 80a1dfc:	bf00      	nop
 80a1dfe:	bf00      	nop
 80a1e00:	bf00      	nop
 80a1e02:	bf00      	nop
 80a1e04:	bf00      	nop
 80a1e06:	bf00      	nop
 80a1e08:	bf00      	nop
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	e770      	b.n	80a1cf4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1e12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1e16:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1e18:	b29b      	uxth	r3, r3
 80a1e1a:	2b00      	cmp	r3, #0
 80a1e1c:	f47f aecf 	bne.w	80a1bbe <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1e20:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1e22:	f7ff fbcd 	bl	80a15c0 <micros>
 80a1e26:	6120      	str	r0, [r4, #16]
}
 80a1e28:	b006      	add	sp, #24
 80a1e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1e2e:	4b5e      	ldr	r3, [pc, #376]	; (80a1fa8 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1e30:	4a5e      	ldr	r2, [pc, #376]	; (80a1fac <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1e32:	4618      	mov	r0, r3
 80a1e34:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1e36:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1e3a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1e3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1e40:	b292      	uxth	r2, r2
 80a1e42:	2a00      	cmp	r2, #0
 80a1e44:	d0ec      	beq.n	80a1e20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1e46:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1e4a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1e4e:	f10e 0503 	add.w	r5, lr, #3
 80a1e52:	3a03      	subs	r2, #3
 80a1e54:	b292      	uxth	r2, r2
 80a1e56:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1e5a:	f89e 2000 	ldrb.w	r2, [lr]
 80a1e5e:	b2d2      	uxtb	r2, r2
 80a1e60:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1e64:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1e68:	b2d2      	uxtb	r2, r2
 80a1e6a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1e6e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a1e72:	b2d2      	uxtb	r2, r2
 80a1e74:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1e78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1e7c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1e80:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1e84:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1e88:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1e8c:	ea42 020c 	orr.w	r2, r2, ip
 80a1e90:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1e92:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1e96:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1e98:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1e9a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1e9e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1ea2:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1ea6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1eaa:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1eac:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1eb0:	9e03      	ldr	r6, [sp, #12]
 80a1eb2:	9a04      	ldr	r2, [sp, #16]
 80a1eb4:	4216      	tst	r6, r2
 80a1eb6:	d023      	beq.n	80a1f00 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1eb8:	685a      	ldr	r2, [r3, #4]
 80a1eba:	9e05      	ldr	r6, [sp, #20]
 80a1ebc:	1b92      	subs	r2, r2, r6
 80a1ebe:	2a4f      	cmp	r2, #79	; 0x4f
 80a1ec0:	d9fa      	bls.n	80a1eb8 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1ec2:	79e2      	ldrb	r2, [r4, #7]
 80a1ec4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1ec8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1ecc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1ed0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1ed4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1ed8:	6842      	ldr	r2, [r0, #4]
 80a1eda:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1edc:	685a      	ldr	r2, [r3, #4]
 80a1ede:	9e05      	ldr	r6, [sp, #20]
 80a1ee0:	1b92      	subs	r2, r2, r6
 80a1ee2:	2a07      	cmp	r2, #7
 80a1ee4:	d9fa      	bls.n	80a1edc <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1ee6:	9a04      	ldr	r2, [sp, #16]
 80a1ee8:	0852      	lsrs	r2, r2, #1
 80a1eea:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1eec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1ef0:	3201      	adds	r2, #1
 80a1ef2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1ef4:	2a17      	cmp	r2, #23
 80a1ef6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1efa:	d9cc      	bls.n	80a1e96 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1efc:	46ae      	mov	lr, r5
 80a1efe:	e79d      	b.n	80a1e3c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1f00:	685a      	ldr	r2, [r3, #4]
 80a1f02:	9e05      	ldr	r6, [sp, #20]
 80a1f04:	1b92      	subs	r2, r2, r6
 80a1f06:	2a18      	cmp	r2, #24
 80a1f08:	d9fa      	bls.n	80a1f00 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1f0a:	79e2      	ldrb	r2, [r4, #7]
 80a1f0c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1f10:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1f14:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1f18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1f1c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1f20:	6842      	ldr	r2, [r0, #4]
 80a1f22:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1f24:	685a      	ldr	r2, [r3, #4]
 80a1f26:	9e05      	ldr	r6, [sp, #20]
 80a1f28:	1b92      	subs	r2, r2, r6
 80a1f2a:	2a45      	cmp	r2, #69	; 0x45
 80a1f2c:	d9fa      	bls.n	80a1f24 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1f2e:	e7da      	b.n	80a1ee6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1f30:	46ae      	mov	lr, r5
 80a1f32:	f7ff bbda 	b.w	80a16ea <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1f36:	4a1d      	ldr	r2, [pc, #116]	; (80a1fac <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1f38:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1f3c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1f3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1f42:	b29b      	uxth	r3, r3
 80a1f44:	2b00      	cmp	r3, #0
 80a1f46:	f43f af6b 	beq.w	80a1e20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1f4a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1f4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1f50:	f10e 0104 	add.w	r1, lr, #4
 80a1f54:	3b04      	subs	r3, #4
 80a1f56:	b29b      	uxth	r3, r3
 80a1f58:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1f5c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1f60:	b2db      	uxtb	r3, r3
 80a1f62:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1f66:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1f6a:	b2db      	uxtb	r3, r3
 80a1f6c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1f70:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1f74:	b2db      	uxtb	r3, r3
 80a1f76:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1f7a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1f7e:	b2db      	uxtb	r3, r3
 80a1f80:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1f88:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1f8c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1f90:	043f      	lsls	r7, r7, #16
 80a1f92:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1f96:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1f9a:	4303      	orrs	r3, r0
 80a1f9c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1fa0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1fa2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1fa6:	e07e      	b.n	80a20a6 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1fa8:	e0001000 	.word	0xe0001000
 80a1fac:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1fb0:	4600      	mov	r0, r0
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
 80a1fbc:	bf00      	nop
 80a1fbe:	bf00      	nop
 80a1fc0:	bf00      	nop
 80a1fc2:	bf00      	nop
 80a1fc4:	bf00      	nop
 80a1fc6:	bf00      	nop
 80a1fc8:	bf00      	nop
 80a1fca:	bf00      	nop
 80a1fcc:	bf00      	nop
 80a1fce:	bf00      	nop
 80a1fd0:	bf00      	nop
 80a1fd2:	bf00      	nop
 80a1fd4:	bf00      	nop
 80a1fd6:	bf00      	nop
 80a1fd8:	bf00      	nop
 80a1fda:	bf00      	nop
 80a1fdc:	bf00      	nop
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
 80a2004:	bf00      	nop
 80a2006:	bf00      	nop
 80a2008:	bf00      	nop
 80a200a:	bf00      	nop
 80a200c:	bf00      	nop
 80a200e:	bf00      	nop
 80a2010:	bf00      	nop
 80a2012:	bf00      	nop
 80a2014:	bf00      	nop
 80a2016:	bf00      	nop
 80a2018:	bf00      	nop
 80a201a:	bf00      	nop
 80a201c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a201e:	79e3      	ldrb	r3, [r4, #7]
 80a2020:	6810      	ldr	r0, [r2, #0]
 80a2022:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2026:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a202a:	88bf      	ldrh	r7, [r7, #4]
 80a202c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2030:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2032:	4600      	mov	r0, r0
 80a2034:	bf00      	nop
 80a2036:	bf00      	nop
 80a2038:	bf00      	nop
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	bf00      	nop
 80a204c:	bf00      	nop
 80a204e:	bf00      	nop
 80a2050:	bf00      	nop
 80a2052:	bf00      	nop
 80a2054:	bf00      	nop
 80a2056:	bf00      	nop
 80a2058:	bf00      	nop
 80a205a:	bf00      	nop
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
 80a2060:	bf00      	nop
 80a2062:	bf00      	nop
 80a2064:	bf00      	nop
 80a2066:	bf00      	nop
 80a2068:	bf00      	nop
 80a206a:	bf00      	nop
 80a206c:	bf00      	nop
 80a206e:	bf00      	nop
 80a2070:	bf00      	nop
 80a2072:	bf00      	nop
 80a2074:	bf00      	nop
 80a2076:	bf00      	nop
 80a2078:	bf00      	nop
 80a207a:	bf00      	nop
 80a207c:	bf00      	nop
 80a207e:	bf00      	nop
 80a2080:	bf00      	nop
 80a2082:	bf00      	nop
 80a2084:	bf00      	nop
 80a2086:	bf00      	nop
 80a2088:	bf00      	nop
 80a208a:	bf00      	nop
 80a208c:	bf00      	nop
 80a208e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2090:	9b04      	ldr	r3, [sp, #16]
 80a2092:	085b      	lsrs	r3, r3, #1
 80a2094:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a2096:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a209a:	3301      	adds	r3, #1
 80a209c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a209e:	2b1f      	cmp	r3, #31
 80a20a0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a20a4:	d87e      	bhi.n	80a21a4 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a20a6:	79e3      	ldrb	r3, [r4, #7]
 80a20a8:	6810      	ldr	r0, [r2, #0]
 80a20aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a20ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a20b2:	88bf      	ldrh	r7, [r7, #4]
 80a20b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a20b8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a20ba:	9803      	ldr	r0, [sp, #12]
 80a20bc:	9b04      	ldr	r3, [sp, #16]
 80a20be:	4218      	tst	r0, r3
 80a20c0:	f47f af76 	bne.w	80a1fb0 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a20c4:	4600      	mov	r0, r0
 80a20c6:	bf00      	nop
 80a20c8:	bf00      	nop
 80a20ca:	bf00      	nop
 80a20cc:	bf00      	nop
 80a20ce:	bf00      	nop
 80a20d0:	bf00      	nop
 80a20d2:	bf00      	nop
 80a20d4:	bf00      	nop
 80a20d6:	bf00      	nop
 80a20d8:	bf00      	nop
 80a20da:	bf00      	nop
 80a20dc:	bf00      	nop
 80a20de:	bf00      	nop
 80a20e0:	bf00      	nop
 80a20e2:	bf00      	nop
 80a20e4:	bf00      	nop
 80a20e6:	bf00      	nop
 80a20e8:	bf00      	nop
 80a20ea:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a20ec:	79e3      	ldrb	r3, [r4, #7]
 80a20ee:	6810      	ldr	r0, [r2, #0]
 80a20f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a20f4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a20f8:	88bf      	ldrh	r7, [r7, #4]
 80a20fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a20fe:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2100:	4600      	mov	r0, r0
 80a2102:	bf00      	nop
 80a2104:	bf00      	nop
 80a2106:	bf00      	nop
 80a2108:	bf00      	nop
 80a210a:	bf00      	nop
 80a210c:	bf00      	nop
 80a210e:	bf00      	nop
 80a2110:	bf00      	nop
 80a2112:	bf00      	nop
 80a2114:	bf00      	nop
 80a2116:	bf00      	nop
 80a2118:	bf00      	nop
 80a211a:	bf00      	nop
 80a211c:	bf00      	nop
 80a211e:	bf00      	nop
 80a2120:	bf00      	nop
 80a2122:	bf00      	nop
 80a2124:	bf00      	nop
 80a2126:	bf00      	nop
 80a2128:	bf00      	nop
 80a212a:	bf00      	nop
 80a212c:	bf00      	nop
 80a212e:	bf00      	nop
 80a2130:	bf00      	nop
 80a2132:	bf00      	nop
 80a2134:	bf00      	nop
 80a2136:	bf00      	nop
 80a2138:	bf00      	nop
 80a213a:	bf00      	nop
 80a213c:	bf00      	nop
 80a213e:	bf00      	nop
 80a2140:	bf00      	nop
 80a2142:	bf00      	nop
 80a2144:	bf00      	nop
 80a2146:	bf00      	nop
 80a2148:	bf00      	nop
 80a214a:	bf00      	nop
 80a214c:	bf00      	nop
 80a214e:	bf00      	nop
 80a2150:	bf00      	nop
 80a2152:	bf00      	nop
 80a2154:	bf00      	nop
 80a2156:	bf00      	nop
 80a2158:	bf00      	nop
 80a215a:	bf00      	nop
 80a215c:	bf00      	nop
 80a215e:	bf00      	nop
 80a2160:	bf00      	nop
 80a2162:	bf00      	nop
 80a2164:	bf00      	nop
 80a2166:	bf00      	nop
 80a2168:	bf00      	nop
 80a216a:	bf00      	nop
 80a216c:	bf00      	nop
 80a216e:	bf00      	nop
 80a2170:	bf00      	nop
 80a2172:	bf00      	nop
 80a2174:	bf00      	nop
 80a2176:	bf00      	nop
 80a2178:	bf00      	nop
 80a217a:	bf00      	nop
 80a217c:	bf00      	nop
 80a217e:	bf00      	nop
 80a2180:	bf00      	nop
 80a2182:	bf00      	nop
 80a2184:	bf00      	nop
 80a2186:	bf00      	nop
 80a2188:	bf00      	nop
 80a218a:	bf00      	nop
 80a218c:	bf00      	nop
 80a218e:	bf00      	nop
 80a2190:	bf00      	nop
 80a2192:	bf00      	nop
 80a2194:	bf00      	nop
 80a2196:	bf00      	nop
 80a2198:	bf00      	nop
 80a219a:	bf00      	nop
 80a219c:	bf00      	nop
 80a219e:	bf00      	nop
 80a21a0:	bf00      	nop
 80a21a2:	e775      	b.n	80a2090 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a21a4:	468e      	mov	lr, r1
 80a21a6:	e6ca      	b.n	80a1f3e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a21a8:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a21aa:	2903      	cmp	r1, #3
 80a21ac:	f000 812e 	beq.w	80a240c <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a21b0:	4a1e      	ldr	r2, [pc, #120]	; (80a222c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a21b2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a21b6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a21b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a21bc:	b29b      	uxth	r3, r3
 80a21be:	2b00      	cmp	r3, #0
 80a21c0:	f43f ae2e 	beq.w	80a1e20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a21c4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a21c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a21ca:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a21cc:	3b03      	subs	r3, #3
 80a21ce:	b29b      	uxth	r3, r3
 80a21d0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a21d4:	f89e 3000 	ldrb.w	r3, [lr]
 80a21d8:	f10e 0103 	add.w	r1, lr, #3
 80a21dc:	b2db      	uxtb	r3, r3
 80a21de:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a21e2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a21e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a21ea:	b2db      	uxtb	r3, r3
 80a21ec:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a21f0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a21f4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a21f8:	b2db      	uxtb	r3, r3
 80a21fa:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a21fe:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2202:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2206:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a220a:	021b      	lsls	r3, r3, #8
 80a220c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2210:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2214:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a2218:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a221c:	433b      	orrs	r3, r7
 80a221e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2220:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a2224:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a2228:	e07d      	b.n	80a2326 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a222a:	bf00      	nop
 80a222c:	20000204 	.word	0x20000204
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a2230:	9b04      	ldr	r3, [sp, #16]
 80a2232:	085b      	lsrs	r3, r3, #1
 80a2234:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2236:	4600      	mov	r0, r0
 80a2238:	bf00      	nop
 80a223a:	bf00      	nop
 80a223c:	bf00      	nop
 80a223e:	bf00      	nop
 80a2240:	bf00      	nop
 80a2242:	bf00      	nop
 80a2244:	bf00      	nop
 80a2246:	bf00      	nop
 80a2248:	bf00      	nop
 80a224a:	bf00      	nop
 80a224c:	bf00      	nop
 80a224e:	bf00      	nop
 80a2250:	bf00      	nop
 80a2252:	bf00      	nop
 80a2254:	bf00      	nop
 80a2256:	bf00      	nop
 80a2258:	bf00      	nop
 80a225a:	bf00      	nop
 80a225c:	bf00      	nop
 80a225e:	bf00      	nop
 80a2260:	bf00      	nop
 80a2262:	bf00      	nop
 80a2264:	bf00      	nop
 80a2266:	bf00      	nop
 80a2268:	bf00      	nop
 80a226a:	bf00      	nop
 80a226c:	bf00      	nop
 80a226e:	bf00      	nop
 80a2270:	bf00      	nop
 80a2272:	bf00      	nop
 80a2274:	bf00      	nop
 80a2276:	bf00      	nop
 80a2278:	bf00      	nop
 80a227a:	bf00      	nop
 80a227c:	bf00      	nop
 80a227e:	bf00      	nop
 80a2280:	bf00      	nop
 80a2282:	bf00      	nop
 80a2284:	bf00      	nop
 80a2286:	bf00      	nop
 80a2288:	bf00      	nop
 80a228a:	bf00      	nop
 80a228c:	bf00      	nop
 80a228e:	bf00      	nop
 80a2290:	bf00      	nop
 80a2292:	bf00      	nop
 80a2294:	bf00      	nop
 80a2296:	bf00      	nop
 80a2298:	bf00      	nop
 80a229a:	bf00      	nop
 80a229c:	bf00      	nop
 80a229e:	bf00      	nop
 80a22a0:	bf00      	nop
 80a22a2:	bf00      	nop
 80a22a4:	bf00      	nop
 80a22a6:	bf00      	nop
 80a22a8:	bf00      	nop
 80a22aa:	bf00      	nop
 80a22ac:	bf00      	nop
 80a22ae:	bf00      	nop
 80a22b0:	bf00      	nop
 80a22b2:	bf00      	nop
 80a22b4:	bf00      	nop
 80a22b6:	bf00      	nop
 80a22b8:	bf00      	nop
 80a22ba:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a22bc:	79e0      	ldrb	r0, [r4, #7]
 80a22be:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a22c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a22c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a22c8:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a22cc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a22d0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a22d4:	3301      	adds	r3, #1
 80a22d6:	b2db      	uxtb	r3, r3
 80a22d8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a22dc:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a22e0:	4600      	mov	r0, r0
 80a22e2:	bf00      	nop
 80a22e4:	bf00      	nop
 80a22e6:	bf00      	nop
 80a22e8:	bf00      	nop
 80a22ea:	bf00      	nop
 80a22ec:	bf00      	nop
 80a22ee:	bf00      	nop
 80a22f0:	bf00      	nop
 80a22f2:	bf00      	nop
 80a22f4:	bf00      	nop
 80a22f6:	bf00      	nop
 80a22f8:	bf00      	nop
 80a22fa:	bf00      	nop
 80a22fc:	bf00      	nop
 80a22fe:	bf00      	nop
 80a2300:	bf00      	nop
 80a2302:	bf00      	nop
 80a2304:	bf00      	nop
 80a2306:	bf00      	nop
 80a2308:	bf00      	nop
          if(j==24) break;
 80a230a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a230e:	2b18      	cmp	r3, #24
 80a2310:	d07a      	beq.n	80a2408 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a2312:	79e3      	ldrb	r3, [r4, #7]
 80a2314:	6810      	ldr	r0, [r2, #0]
 80a2316:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a231a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a231e:	88bf      	ldrh	r7, [r7, #4]
 80a2320:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2324:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a2326:	9803      	ldr	r0, [sp, #12]
 80a2328:	9b04      	ldr	r3, [sp, #16]
 80a232a:	4218      	tst	r0, r3
 80a232c:	d180      	bne.n	80a2230 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a232e:	4600      	mov	r0, r0
 80a2330:	bf00      	nop
 80a2332:	bf00      	nop
 80a2334:	bf00      	nop
 80a2336:	bf00      	nop
 80a2338:	bf00      	nop
 80a233a:	bf00      	nop
 80a233c:	bf00      	nop
 80a233e:	bf00      	nop
 80a2340:	bf00      	nop
 80a2342:	bf00      	nop
 80a2344:	bf00      	nop
 80a2346:	bf00      	nop
 80a2348:	bf00      	nop
 80a234a:	bf00      	nop
 80a234c:	bf00      	nop
 80a234e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a2350:	79e3      	ldrb	r3, [r4, #7]
 80a2352:	6810      	ldr	r0, [r2, #0]
 80a2354:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2358:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a235c:	88bf      	ldrh	r7, [r7, #4]
 80a235e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2362:	831f      	strh	r7, [r3, #24]
          j++;
 80a2364:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2368:	3301      	adds	r3, #1
 80a236a:	b2db      	uxtb	r3, r3
 80a236c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a2370:	9b04      	ldr	r3, [sp, #16]
 80a2372:	085b      	lsrs	r3, r3, #1
 80a2374:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2376:	4600      	mov	r0, r0
 80a2378:	bf00      	nop
 80a237a:	bf00      	nop
 80a237c:	bf00      	nop
 80a237e:	bf00      	nop
 80a2380:	bf00      	nop
 80a2382:	bf00      	nop
 80a2384:	bf00      	nop
 80a2386:	bf00      	nop
 80a2388:	bf00      	nop
 80a238a:	bf00      	nop
 80a238c:	bf00      	nop
 80a238e:	bf00      	nop
 80a2390:	bf00      	nop
 80a2392:	bf00      	nop
 80a2394:	bf00      	nop
 80a2396:	bf00      	nop
 80a2398:	bf00      	nop
 80a239a:	bf00      	nop
 80a239c:	bf00      	nop
 80a239e:	bf00      	nop
 80a23a0:	bf00      	nop
 80a23a2:	bf00      	nop
 80a23a4:	bf00      	nop
 80a23a6:	bf00      	nop
 80a23a8:	bf00      	nop
 80a23aa:	bf00      	nop
 80a23ac:	bf00      	nop
 80a23ae:	bf00      	nop
 80a23b0:	bf00      	nop
 80a23b2:	bf00      	nop
 80a23b4:	bf00      	nop
 80a23b6:	bf00      	nop
 80a23b8:	bf00      	nop
 80a23ba:	bf00      	nop
 80a23bc:	bf00      	nop
 80a23be:	bf00      	nop
 80a23c0:	bf00      	nop
 80a23c2:	bf00      	nop
 80a23c4:	bf00      	nop
 80a23c6:	bf00      	nop
 80a23c8:	bf00      	nop
 80a23ca:	bf00      	nop
 80a23cc:	bf00      	nop
 80a23ce:	bf00      	nop
 80a23d0:	bf00      	nop
 80a23d2:	bf00      	nop
 80a23d4:	bf00      	nop
 80a23d6:	bf00      	nop
 80a23d8:	bf00      	nop
 80a23da:	bf00      	nop
 80a23dc:	bf00      	nop
 80a23de:	bf00      	nop
 80a23e0:	bf00      	nop
 80a23e2:	bf00      	nop
 80a23e4:	bf00      	nop
 80a23e6:	bf00      	nop
 80a23e8:	bf00      	nop
 80a23ea:	bf00      	nop
 80a23ec:	bf00      	nop
 80a23ee:	bf00      	nop
 80a23f0:	bf00      	nop
 80a23f2:	bf00      	nop
 80a23f4:	bf00      	nop
 80a23f6:	bf00      	nop
 80a23f8:	bf00      	nop
 80a23fa:	bf00      	nop
 80a23fc:	bf00      	nop
 80a23fe:	bf00      	nop
          if(j==24) break;
 80a2400:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2404:	2b18      	cmp	r3, #24
 80a2406:	d184      	bne.n	80a2312 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a2408:	468e      	mov	lr, r1
 80a240a:	e6d5      	b.n	80a21b8 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a240c:	4a17      	ldr	r2, [pc, #92]	; (80a246c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a240e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2412:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2414:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2418:	b29b      	uxth	r3, r3
 80a241a:	2b00      	cmp	r3, #0
 80a241c:	f43f ad00 	beq.w	80a1e20 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a2420:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2422:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2426:	f10e 0103 	add.w	r1, lr, #3
 80a242a:	3b03      	subs	r3, #3
 80a242c:	b29b      	uxth	r3, r3
 80a242e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2432:	f89e 3000 	ldrb.w	r3, [lr]
 80a2436:	b2db      	uxtb	r3, r3
 80a2438:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a243c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a2440:	b2db      	uxtb	r3, r3
 80a2442:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a2446:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a244a:	b2db      	uxtb	r3, r3
 80a244c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2450:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2454:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2458:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a245c:	021b      	lsls	r3, r3, #8
 80a245e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2462:	4303      	orrs	r3, r0
 80a2464:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2466:	f88d 6005 	strb.w	r6, [sp, #5]
 80a246a:	e0e0      	b.n	80a262e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a246c:	20000204 	.word	0x20000204
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2470:	4600      	mov	r0, r0
 80a2472:	bf00      	nop
 80a2474:	bf00      	nop
 80a2476:	bf00      	nop
 80a2478:	bf00      	nop
 80a247a:	bf00      	nop
 80a247c:	bf00      	nop
 80a247e:	bf00      	nop
 80a2480:	bf00      	nop
 80a2482:	bf00      	nop
 80a2484:	bf00      	nop
 80a2486:	bf00      	nop
 80a2488:	bf00      	nop
 80a248a:	bf00      	nop
 80a248c:	bf00      	nop
 80a248e:	bf00      	nop
 80a2490:	bf00      	nop
 80a2492:	bf00      	nop
 80a2494:	bf00      	nop
 80a2496:	bf00      	nop
 80a2498:	bf00      	nop
 80a249a:	bf00      	nop
 80a249c:	bf00      	nop
 80a249e:	bf00      	nop
 80a24a0:	bf00      	nop
 80a24a2:	bf00      	nop
 80a24a4:	bf00      	nop
 80a24a6:	bf00      	nop
 80a24a8:	bf00      	nop
 80a24aa:	bf00      	nop
 80a24ac:	bf00      	nop
 80a24ae:	bf00      	nop
 80a24b0:	bf00      	nop
 80a24b2:	bf00      	nop
 80a24b4:	bf00      	nop
 80a24b6:	bf00      	nop
 80a24b8:	bf00      	nop
 80a24ba:	bf00      	nop
 80a24bc:	bf00      	nop
 80a24be:	bf00      	nop
 80a24c0:	bf00      	nop
 80a24c2:	bf00      	nop
 80a24c4:	bf00      	nop
 80a24c6:	bf00      	nop
 80a24c8:	bf00      	nop
 80a24ca:	bf00      	nop
 80a24cc:	bf00      	nop
 80a24ce:	bf00      	nop
 80a24d0:	bf00      	nop
 80a24d2:	bf00      	nop
 80a24d4:	bf00      	nop
 80a24d6:	bf00      	nop
 80a24d8:	bf00      	nop
 80a24da:	bf00      	nop
 80a24dc:	bf00      	nop
 80a24de:	bf00      	nop
 80a24e0:	bf00      	nop
 80a24e2:	bf00      	nop
 80a24e4:	bf00      	nop
 80a24e6:	bf00      	nop
 80a24e8:	bf00      	nop
 80a24ea:	bf00      	nop
 80a24ec:	bf00      	nop
 80a24ee:	bf00      	nop
 80a24f0:	bf00      	nop
 80a24f2:	bf00      	nop
 80a24f4:	bf00      	nop
 80a24f6:	bf00      	nop
 80a24f8:	bf00      	nop
 80a24fa:	bf00      	nop
 80a24fc:	bf00      	nop
 80a24fe:	bf00      	nop
 80a2500:	bf00      	nop
 80a2502:	bf00      	nop
 80a2504:	bf00      	nop
 80a2506:	bf00      	nop
 80a2508:	bf00      	nop
 80a250a:	bf00      	nop
 80a250c:	bf00      	nop
 80a250e:	bf00      	nop
 80a2510:	bf00      	nop
 80a2512:	bf00      	nop
 80a2514:	bf00      	nop
 80a2516:	bf00      	nop
 80a2518:	bf00      	nop
 80a251a:	bf00      	nop
 80a251c:	bf00      	nop
 80a251e:	bf00      	nop
 80a2520:	bf00      	nop
 80a2522:	bf00      	nop
 80a2524:	bf00      	nop
 80a2526:	bf00      	nop
 80a2528:	bf00      	nop
 80a252a:	bf00      	nop
 80a252c:	bf00      	nop
 80a252e:	bf00      	nop
 80a2530:	bf00      	nop
 80a2532:	bf00      	nop
 80a2534:	bf00      	nop
 80a2536:	bf00      	nop
 80a2538:	bf00      	nop
 80a253a:	bf00      	nop
 80a253c:	bf00      	nop
 80a253e:	bf00      	nop
 80a2540:	bf00      	nop
 80a2542:	bf00      	nop
 80a2544:	bf00      	nop
 80a2546:	bf00      	nop
 80a2548:	bf00      	nop
 80a254a:	bf00      	nop
 80a254c:	bf00      	nop
 80a254e:	bf00      	nop
 80a2550:	bf00      	nop
 80a2552:	bf00      	nop
 80a2554:	bf00      	nop
 80a2556:	bf00      	nop
 80a2558:	bf00      	nop
 80a255a:	bf00      	nop
 80a255c:	bf00      	nop
 80a255e:	bf00      	nop
 80a2560:	bf00      	nop
 80a2562:	bf00      	nop
 80a2564:	bf00      	nop
 80a2566:	bf00      	nop
 80a2568:	bf00      	nop
 80a256a:	bf00      	nop
 80a256c:	bf00      	nop
 80a256e:	bf00      	nop
 80a2570:	bf00      	nop
 80a2572:	bf00      	nop
 80a2574:	bf00      	nop
 80a2576:	bf00      	nop
 80a2578:	bf00      	nop
 80a257a:	bf00      	nop
 80a257c:	bf00      	nop
 80a257e:	bf00      	nop
 80a2580:	bf00      	nop
 80a2582:	bf00      	nop
 80a2584:	bf00      	nop
 80a2586:	bf00      	nop
 80a2588:	bf00      	nop
 80a258a:	bf00      	nop
 80a258c:	bf00      	nop
 80a258e:	bf00      	nop
 80a2590:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a2592:	79e3      	ldrb	r3, [r4, #7]
 80a2594:	6810      	ldr	r0, [r2, #0]
 80a2596:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a259a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a259e:	88bf      	ldrh	r7, [r7, #4]
 80a25a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a25a4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a25a6:	4600      	mov	r0, r0
 80a25a8:	bf00      	nop
 80a25aa:	bf00      	nop
 80a25ac:	bf00      	nop
 80a25ae:	bf00      	nop
 80a25b0:	bf00      	nop
 80a25b2:	bf00      	nop
 80a25b4:	bf00      	nop
 80a25b6:	bf00      	nop
 80a25b8:	bf00      	nop
 80a25ba:	bf00      	nop
 80a25bc:	bf00      	nop
 80a25be:	bf00      	nop
 80a25c0:	bf00      	nop
 80a25c2:	bf00      	nop
 80a25c4:	bf00      	nop
 80a25c6:	bf00      	nop
 80a25c8:	bf00      	nop
 80a25ca:	bf00      	nop
 80a25cc:	bf00      	nop
 80a25ce:	bf00      	nop
 80a25d0:	bf00      	nop
 80a25d2:	bf00      	nop
 80a25d4:	bf00      	nop
 80a25d6:	bf00      	nop
 80a25d8:	bf00      	nop
 80a25da:	bf00      	nop
 80a25dc:	bf00      	nop
 80a25de:	bf00      	nop
 80a25e0:	bf00      	nop
 80a25e2:	bf00      	nop
 80a25e4:	bf00      	nop
 80a25e6:	bf00      	nop
 80a25e8:	bf00      	nop
 80a25ea:	bf00      	nop
 80a25ec:	bf00      	nop
 80a25ee:	bf00      	nop
 80a25f0:	bf00      	nop
 80a25f2:	bf00      	nop
 80a25f4:	bf00      	nop
 80a25f6:	bf00      	nop
 80a25f8:	bf00      	nop
 80a25fa:	bf00      	nop
 80a25fc:	bf00      	nop
 80a25fe:	bf00      	nop
 80a2600:	bf00      	nop
 80a2602:	bf00      	nop
 80a2604:	bf00      	nop
 80a2606:	bf00      	nop
 80a2608:	bf00      	nop
 80a260a:	bf00      	nop
 80a260c:	bf00      	nop
 80a260e:	bf00      	nop
 80a2610:	bf00      	nop
 80a2612:	bf00      	nop
 80a2614:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2616:	9b04      	ldr	r3, [sp, #16]
 80a2618:	085b      	lsrs	r3, r3, #1
 80a261a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a261c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2620:	3301      	adds	r3, #1
 80a2622:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a2624:	2b17      	cmp	r3, #23
 80a2626:	f88d 3005 	strb.w	r3, [sp, #5]
 80a262a:	f200 80e3 	bhi.w	80a27f4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a262e:	79e3      	ldrb	r3, [r4, #7]
 80a2630:	6810      	ldr	r0, [r2, #0]
 80a2632:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2636:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a263a:	88bf      	ldrh	r7, [r7, #4]
 80a263c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2640:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2642:	9803      	ldr	r0, [sp, #12]
 80a2644:	9b04      	ldr	r3, [sp, #16]
 80a2646:	4218      	tst	r0, r3
 80a2648:	f47f af12 	bne.w	80a2470 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a264c:	4600      	mov	r0, r0
 80a264e:	bf00      	nop
 80a2650:	bf00      	nop
 80a2652:	bf00      	nop
 80a2654:	bf00      	nop
 80a2656:	bf00      	nop
 80a2658:	bf00      	nop
 80a265a:	bf00      	nop
 80a265c:	bf00      	nop
 80a265e:	bf00      	nop
 80a2660:	bf00      	nop
 80a2662:	bf00      	nop
 80a2664:	bf00      	nop
 80a2666:	bf00      	nop
 80a2668:	bf00      	nop
 80a266a:	bf00      	nop
 80a266c:	bf00      	nop
 80a266e:	bf00      	nop
 80a2670:	bf00      	nop
 80a2672:	bf00      	nop
 80a2674:	bf00      	nop
 80a2676:	bf00      	nop
 80a2678:	bf00      	nop
 80a267a:	bf00      	nop
 80a267c:	bf00      	nop
 80a267e:	bf00      	nop
 80a2680:	bf00      	nop
 80a2682:	bf00      	nop
 80a2684:	bf00      	nop
 80a2686:	bf00      	nop
 80a2688:	bf00      	nop
 80a268a:	bf00      	nop
 80a268c:	bf00      	nop
 80a268e:	bf00      	nop
 80a2690:	bf00      	nop
 80a2692:	bf00      	nop
 80a2694:	bf00      	nop
 80a2696:	bf00      	nop
 80a2698:	bf00      	nop
 80a269a:	bf00      	nop
 80a269c:	bf00      	nop
 80a269e:	bf00      	nop
 80a26a0:	bf00      	nop
 80a26a2:	bf00      	nop
 80a26a4:	bf00      	nop
 80a26a6:	bf00      	nop
 80a26a8:	bf00      	nop
 80a26aa:	bf00      	nop
 80a26ac:	bf00      	nop
 80a26ae:	bf00      	nop
 80a26b0:	bf00      	nop
 80a26b2:	bf00      	nop
 80a26b4:	bf00      	nop
 80a26b6:	bf00      	nop
 80a26b8:	bf00      	nop
 80a26ba:	bf00      	nop
 80a26bc:	bf00      	nop
 80a26be:	bf00      	nop
 80a26c0:	bf00      	nop
 80a26c2:	bf00      	nop
 80a26c4:	bf00      	nop
 80a26c6:	bf00      	nop
 80a26c8:	bf00      	nop
 80a26ca:	bf00      	nop
 80a26cc:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a26ce:	79e3      	ldrb	r3, [r4, #7]
 80a26d0:	6810      	ldr	r0, [r2, #0]
 80a26d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a26d6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a26da:	88bf      	ldrh	r7, [r7, #4]
 80a26dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a26e0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a26e2:	4600      	mov	r0, r0
 80a26e4:	bf00      	nop
 80a26e6:	bf00      	nop
 80a26e8:	bf00      	nop
 80a26ea:	bf00      	nop
 80a26ec:	bf00      	nop
 80a26ee:	bf00      	nop
 80a26f0:	bf00      	nop
 80a26f2:	bf00      	nop
 80a26f4:	bf00      	nop
 80a26f6:	bf00      	nop
 80a26f8:	bf00      	nop
 80a26fa:	bf00      	nop
 80a26fc:	bf00      	nop
 80a26fe:	bf00      	nop
 80a2700:	bf00      	nop
 80a2702:	bf00      	nop
 80a2704:	bf00      	nop
 80a2706:	bf00      	nop
 80a2708:	bf00      	nop
 80a270a:	bf00      	nop
 80a270c:	bf00      	nop
 80a270e:	bf00      	nop
 80a2710:	bf00      	nop
 80a2712:	bf00      	nop
 80a2714:	bf00      	nop
 80a2716:	bf00      	nop
 80a2718:	bf00      	nop
 80a271a:	bf00      	nop
 80a271c:	bf00      	nop
 80a271e:	bf00      	nop
 80a2720:	bf00      	nop
 80a2722:	bf00      	nop
 80a2724:	bf00      	nop
 80a2726:	bf00      	nop
 80a2728:	bf00      	nop
 80a272a:	bf00      	nop
 80a272c:	bf00      	nop
 80a272e:	bf00      	nop
 80a2730:	bf00      	nop
 80a2732:	bf00      	nop
 80a2734:	bf00      	nop
 80a2736:	bf00      	nop
 80a2738:	bf00      	nop
 80a273a:	bf00      	nop
 80a273c:	bf00      	nop
 80a273e:	bf00      	nop
 80a2740:	bf00      	nop
 80a2742:	bf00      	nop
 80a2744:	bf00      	nop
 80a2746:	bf00      	nop
 80a2748:	bf00      	nop
 80a274a:	bf00      	nop
 80a274c:	bf00      	nop
 80a274e:	bf00      	nop
 80a2750:	bf00      	nop
 80a2752:	bf00      	nop
 80a2754:	bf00      	nop
 80a2756:	bf00      	nop
 80a2758:	bf00      	nop
 80a275a:	bf00      	nop
 80a275c:	bf00      	nop
 80a275e:	bf00      	nop
 80a2760:	bf00      	nop
 80a2762:	bf00      	nop
 80a2764:	bf00      	nop
 80a2766:	bf00      	nop
 80a2768:	bf00      	nop
 80a276a:	bf00      	nop
 80a276c:	bf00      	nop
 80a276e:	bf00      	nop
 80a2770:	bf00      	nop
 80a2772:	bf00      	nop
 80a2774:	bf00      	nop
 80a2776:	bf00      	nop
 80a2778:	bf00      	nop
 80a277a:	bf00      	nop
 80a277c:	bf00      	nop
 80a277e:	bf00      	nop
 80a2780:	bf00      	nop
 80a2782:	bf00      	nop
 80a2784:	bf00      	nop
 80a2786:	bf00      	nop
 80a2788:	bf00      	nop
 80a278a:	bf00      	nop
 80a278c:	bf00      	nop
 80a278e:	bf00      	nop
 80a2790:	bf00      	nop
 80a2792:	bf00      	nop
 80a2794:	bf00      	nop
 80a2796:	bf00      	nop
 80a2798:	bf00      	nop
 80a279a:	bf00      	nop
 80a279c:	bf00      	nop
 80a279e:	bf00      	nop
 80a27a0:	bf00      	nop
 80a27a2:	bf00      	nop
 80a27a4:	bf00      	nop
 80a27a6:	bf00      	nop
 80a27a8:	bf00      	nop
 80a27aa:	bf00      	nop
 80a27ac:	bf00      	nop
 80a27ae:	bf00      	nop
 80a27b0:	bf00      	nop
 80a27b2:	bf00      	nop
 80a27b4:	bf00      	nop
 80a27b6:	bf00      	nop
 80a27b8:	bf00      	nop
 80a27ba:	bf00      	nop
 80a27bc:	bf00      	nop
 80a27be:	bf00      	nop
 80a27c0:	bf00      	nop
 80a27c2:	bf00      	nop
 80a27c4:	bf00      	nop
 80a27c6:	bf00      	nop
 80a27c8:	bf00      	nop
 80a27ca:	bf00      	nop
 80a27cc:	bf00      	nop
 80a27ce:	bf00      	nop
 80a27d0:	bf00      	nop
 80a27d2:	bf00      	nop
 80a27d4:	bf00      	nop
 80a27d6:	bf00      	nop
 80a27d8:	bf00      	nop
 80a27da:	bf00      	nop
 80a27dc:	bf00      	nop
 80a27de:	bf00      	nop
 80a27e0:	bf00      	nop
 80a27e2:	bf00      	nop
 80a27e4:	bf00      	nop
 80a27e6:	bf00      	nop
 80a27e8:	bf00      	nop
 80a27ea:	bf00      	nop
 80a27ec:	bf00      	nop
 80a27ee:	bf00      	nop
 80a27f0:	bf00      	nop
 80a27f2:	e710      	b.n	80a2616 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a27f4:	468e      	mov	lr, r1
 80a27f6:	e60d      	b.n	80a2414 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a27f8 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a27f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a27fa:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a27fc:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a2800:	428c      	cmp	r4, r1
 80a2802:	d927      	bls.n	80a2854 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a2804:	7a04      	ldrb	r4, [r0, #8]
 80a2806:	b144      	cbz	r4, 80a281a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a2808:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a280a:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a280c:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a280e:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a2812:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a2816:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a281a:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a281c:	68c6      	ldr	r6, [r0, #12]
 80a281e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2822:	2f08      	cmp	r7, #8
 80a2824:	eb06 0401 	add.w	r4, r6, r1
 80a2828:	d811      	bhi.n	80a284e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a282a:	2001      	movs	r0, #1
 80a282c:	40b8      	lsls	r0, r7
 80a282e:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a2832:	d108      	bne.n	80a2846 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a2834:	06c0      	lsls	r0, r0, #27
 80a2836:	d50a      	bpl.n	80a284e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a2838:	2aff      	cmp	r2, #255	; 0xff
 80a283a:	bf08      	it	eq
 80a283c:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a283e:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a2840:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a2842:	70a3      	strb	r3, [r4, #2]
 80a2844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2846:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a2848:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a284a:	70a5      	strb	r5, [r4, #2]
 80a284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a284e:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a2850:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a2852:	70a5      	strb	r5, [r4, #2]
 80a2854:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2856 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a2856:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a2858:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a285a:	428b      	cmp	r3, r1
 80a285c:	d945      	bls.n	80a28ea <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a285e:	7a05      	ldrb	r5, [r0, #8]
 80a2860:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a2864:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a2868:	b2d6      	uxtb	r6, r2
 80a286a:	b145      	cbz	r5, 80a287e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a286c:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a286e:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a2870:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a2872:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a2876:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a287a:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a287e:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a2882:	68c7      	ldr	r7, [r0, #12]
 80a2884:	f1bc 0f06 	cmp.w	ip, #6
 80a2888:	bf0c      	ite	eq
 80a288a:	2504      	moveq	r5, #4
 80a288c:	2503      	movne	r5, #3
 80a288e:	4369      	muls	r1, r5
 80a2890:	f1bc 0f08 	cmp.w	ip, #8
 80a2894:	eb07 0501 	add.w	r5, r7, r1
 80a2898:	d824      	bhi.n	80a28e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a289a:	f04f 0e01 	mov.w	lr, #1
 80a289e:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a28a2:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a28a6:	d10c      	bne.n	80a28c2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a28a8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a28ac:	d10d      	bne.n	80a28ca <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a28ae:	f01e 0f10 	tst.w	lr, #16
 80a28b2:	d017      	beq.n	80a28e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a28b4:	2bff      	cmp	r3, #255	; 0xff
 80a28b6:	bf08      	it	eq
 80a28b8:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a28ba:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a28bc:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a28be:	70ac      	strb	r4, [r5, #2]
        } break;
 80a28c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a28c2:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a28c4:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a28c6:	70ae      	strb	r6, [r5, #2]
        } break;
 80a28c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a28ca:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a28cc:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a28ce:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a28d0:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a28d2:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a28d4:	b90b      	cbnz	r3, 80a28da <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a28d6:	b2d2      	uxtb	r2, r2
 80a28d8:	e002      	b.n	80a28e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a28da:	435a      	muls	r2, r3
 80a28dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a28e0:	70ea      	strb	r2, [r5, #3]
        } break;
 80a28e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a28e4:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a28e6:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a28e8:	70ae      	strb	r6, [r5, #2]
 80a28ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a28ec <_ZN17Adafruit_NeoPixel14setColorScaledEthhhh>:

void Adafruit_NeoPixel::setColor(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aWhite) {
  return setPixelColor(aLedNumber, (uint8_t) aRed, (uint8_t) aGreen, (uint8_t) aBlue, (uint8_t) aWhite);
}

void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aScaling) {
 80a28ec:	b430      	push	{r4, r5}
 80a28ee:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80a28f2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    }
  }
}

void Adafruit_NeoPixel::setColor(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue) {
  return setPixelColor(aLedNumber, (uint8_t) aRed, (uint8_t) aGreen, (uint8_t) aBlue);
 80a28f6:	4363      	muls	r3, r4
 80a28f8:	4362      	muls	r2, r4
 80a28fa:	436c      	muls	r4, r5
 80a28fc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80a2900:	9402      	str	r4, [sp, #8]
 80a2902:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80a2906:	f3c2 2207 	ubfx	r2, r2, #8, #8
}

void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aScaling) {
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8);
}
 80a290a:	bc30      	pop	{r4, r5}
    }
  }
}

void Adafruit_NeoPixel::setColor(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue) {
  return setPixelColor(aLedNumber, (uint8_t) aRed, (uint8_t) aGreen, (uint8_t) aBlue);
 80a290c:	f7ff bf74 	b.w	80a27f8 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>

080a2910 <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh>:
void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aWhite, byte aScaling) {
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8, (aWhite*aScaling)>>8);
}

void Adafruit_NeoPixel::setColorDimmed(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aBrightness) {
 80a2910:	b470      	push	{r4, r5, r6}
 80a2912:	f89d 4010 	ldrb.w	r4, [sp, #16]
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, brightnessToPWM(aBrightness));
 80a2916:	4e05      	ldr	r6, [pc, #20]	; (80a292c <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh+0x1c>)
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, aWhite, brightnessToPWM(aBrightness));
}

byte Adafruit_NeoPixel::brightnessToPWM(byte aBrightness) {
  static const byte pwmLevels[16] = { 0, 1, 2, 3, 4, 6, 8, 12, 23, 36, 48, 70, 95, 135, 190, 255 };
  return pwmLevels[aBrightness>>4];
 80a2918:	1124      	asrs	r4, r4, #4
void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aWhite, byte aScaling) {
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8, (aWhite*aScaling)>>8);
}

void Adafruit_NeoPixel::setColorDimmed(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aBrightness) {
 80a291a:	f89d 500c 	ldrb.w	r5, [sp, #12]
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, brightnessToPWM(aBrightness));
 80a291e:	5d34      	ldrb	r4, [r6, r4]
 80a2920:	9503      	str	r5, [sp, #12]
 80a2922:	9404      	str	r4, [sp, #16]
}
 80a2924:	bc70      	pop	{r4, r5, r6}
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8, (aWhite*aScaling)>>8);
}

void Adafruit_NeoPixel::setColorDimmed(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aBrightness) {
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, brightnessToPWM(aBrightness));
 80a2926:	f7ff bfe1 	b.w	80a28ec <_ZN17Adafruit_NeoPixel14setColorScaledEthhhh>
 80a292a:	bf00      	nop
 80a292c:	080a7040 	.word	0x080a7040

080a2930 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a2930:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a2934:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a2938:	4770      	bx	lr

080a293a <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a293a:	8840      	ldrh	r0, [r0, #2]
 80a293c:	4770      	bx	lr

080a293e <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a293e:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a2940:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2942:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a2944:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a2946:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a2948:	d01e      	beq.n	80a2988 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a294a:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a294c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2950:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2952:	d00c      	beq.n	80a296e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2954:	29ff      	cmp	r1, #255	; 0xff
 80a2956:	bf0f      	iteee	eq
 80a2958:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a295c:	0211      	lslne	r1, r2, #8
 80a295e:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a2962:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2966:	bf0c      	ite	eq
 80a2968:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a296c:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a296e:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2970:	1b29      	subs	r1, r5, r4
 80a2972:	8886      	ldrh	r6, [r0, #4]
 80a2974:	b289      	uxth	r1, r1
 80a2976:	428e      	cmp	r6, r1
 80a2978:	d905      	bls.n	80a2986 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a297a:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a297c:	4359      	muls	r1, r3
 80a297e:	1209      	asrs	r1, r1, #8
 80a2980:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2984:	e7f4      	b.n	80a2970 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a2986:	7202      	strb	r2, [r0, #8]
 80a2988:	bd70      	pop	{r4, r5, r6, pc}

080a298a <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
 80a298a:	8882      	ldrh	r2, [r0, #4]
 80a298c:	2100      	movs	r1, #0
 80a298e:	68c0      	ldr	r0, [r0, #12]
 80a2990:	f004 b9a3 	b.w	80a6cda <memset>

080a2994 <_GLOBAL__sub_I_PIN_MAP2>:
}
 80a2994:	b508      	push	{r3, lr}
 80a2996:	f000 fa3d 	bl	80a2e14 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a299a:	f000 fa3b 	bl	80a2e14 <HAL_Pin_Map>
 80a299e:	4b01      	ldr	r3, [pc, #4]	; (80a29a4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a29a0:	6018      	str	r0, [r3, #0]
 80a29a2:	bd08      	pop	{r3, pc}
 80a29a4:	20000204 	.word	0x20000204

080a29a8 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 80a29a8:	b538      	push	{r3, r4, r5, lr}
 80a29aa:	4604      	mov	r4, r0
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
 80a29ac:	6183      	str	r3, [r0, #24]
  this->motor_pin_3 = motor_pin_3;
 80a29ae:	9b04      	ldr	r3, [sp, #16]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a29b0:	2500      	movs	r5, #0
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
 80a29b2:	61c3      	str	r3, [r0, #28]
  this->motor_pin_4 = motor_pin_4;
 80a29b4:	9b05      	ldr	r3, [sp, #20]
  this->direction = 0;      // motor direction
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80a29b6:	6142      	str	r2, [r0, #20]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;
 80a29b8:	6203      	str	r3, [r0, #32]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a29ba:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
 80a29bc:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80a29be:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80a29c0:	6081      	str	r1, [r0, #8]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 80a29c2:	b290      	uxth	r0, r2
 80a29c4:	2101      	movs	r1, #1
 80a29c6:	f001 fcb9 	bl	80a433c <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
 80a29ca:	8b20      	ldrh	r0, [r4, #24]
 80a29cc:	2101      	movs	r1, #1
 80a29ce:	f001 fcb5 	bl	80a433c <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
 80a29d2:	8ba0      	ldrh	r0, [r4, #28]
 80a29d4:	2101      	movs	r1, #1
 80a29d6:	f001 fcb1 	bl	80a433c <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
 80a29da:	8c20      	ldrh	r0, [r4, #32]
 80a29dc:	2101      	movs	r1, #1
 80a29de:	f001 fcad 	bl	80a433c <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a29e2:	2304      	movs	r3, #4
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80a29e4:	6265      	str	r5, [r4, #36]	; 0x24

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a29e6:	60e3      	str	r3, [r4, #12]
}
 80a29e8:	4620      	mov	r0, r4
 80a29ea:	bd38      	pop	{r3, r4, r5, pc}

080a29ec <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 80a29ec:	6882      	ldr	r2, [r0, #8]
 80a29ee:	4b03      	ldr	r3, [pc, #12]	; (80a29fc <_ZN7Stepper8setSpeedEl+0x10>)
 80a29f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a29f4:	fb93 f1f1 	sdiv	r1, r3, r1
 80a29f8:	6041      	str	r1, [r0, #4]
 80a29fa:	4770      	bx	lr
 80a29fc:	03938700 	.word	0x03938700

080a2a00 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a2a00:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
 80a2a02:	68c3      	ldr	r3, [r0, #12]

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a2a04:	4604      	mov	r4, r0
  if (this->pin_count == 2) {
 80a2a06:	2b02      	cmp	r3, #2

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a2a08:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
 80a2a0a:	d117      	bne.n	80a2a3c <_ZN7Stepper9stepMotorEi+0x3c>
    switch (thisStep) {
 80a2a0c:	2903      	cmp	r1, #3
 80a2a0e:	d815      	bhi.n	80a2a3c <_ZN7Stepper9stepMotorEi+0x3c>
 80a2a10:	e8df f001 	tbb	[pc, r1]
 80a2a14:	0c0a0402 	.word	0x0c0a0402
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
 80a2a18:	2100      	movs	r1, #0
 80a2a1a:	e000      	b.n	80a2a1e <_ZN7Stepper9stepMotorEi+0x1e>
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
 80a2a1c:	2101      	movs	r1, #1
 80a2a1e:	8aa0      	ldrh	r0, [r4, #20]
 80a2a20:	f001 fc9d 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2a24:	2101      	movs	r1, #1
 80a2a26:	e006      	b.n	80a2a36 <_ZN7Stepper9stepMotorEi+0x36>
      break;
      case 2:  // 10
        digitalWrite(motor_pin_1, HIGH);
 80a2a28:	2101      	movs	r1, #1
 80a2a2a:	e000      	b.n	80a2a2e <_ZN7Stepper9stepMotorEi+0x2e>
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
 80a2a2c:	2100      	movs	r1, #0
 80a2a2e:	8aa0      	ldrh	r0, [r4, #20]
 80a2a30:	f001 fc95 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2a34:	2100      	movs	r1, #0
 80a2a36:	8b20      	ldrh	r0, [r4, #24]
 80a2a38:	f001 fc91 	bl	80a435e <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
 80a2a3c:	68e3      	ldr	r3, [r4, #12]
 80a2a3e:	2b04      	cmp	r3, #4
 80a2a40:	d12f      	bne.n	80a2aa2 <_ZN7Stepper9stepMotorEi+0xa2>
    switch (thisStep) {
 80a2a42:	2d03      	cmp	r5, #3
 80a2a44:	d82d      	bhi.n	80a2aa2 <_ZN7Stepper9stepMotorEi+0xa2>
 80a2a46:	e8df f005 	tbb	[pc, r5]
 80a2a4a:	0802      	.short	0x0802
 80a2a4c:	1c16      	.short	0x1c16
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 80a2a4e:	2101      	movs	r1, #1
 80a2a50:	8aa0      	ldrh	r0, [r4, #20]
 80a2a52:	f001 fc84 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2a56:	2100      	movs	r1, #0
 80a2a58:	e004      	b.n	80a2a64 <_ZN7Stepper9stepMotorEi+0x64>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
 80a2a5a:	2100      	movs	r1, #0
 80a2a5c:	8aa0      	ldrh	r0, [r4, #20]
 80a2a5e:	f001 fc7e 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2a62:	2101      	movs	r1, #1
 80a2a64:	8b20      	ldrh	r0, [r4, #24]
 80a2a66:	f001 fc7a 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a2a6a:	2101      	movs	r1, #1
 80a2a6c:	8ba0      	ldrh	r0, [r4, #28]
 80a2a6e:	f001 fc76 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a2a72:	2100      	movs	r1, #0
 80a2a74:	e012      	b.n	80a2a9c <_ZN7Stepper9stepMotorEi+0x9c>
      break;
      case 2:  //0101
        digitalWrite(motor_pin_1, LOW);
 80a2a76:	2100      	movs	r1, #0
 80a2a78:	8aa0      	ldrh	r0, [r4, #20]
 80a2a7a:	f001 fc70 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2a7e:	2101      	movs	r1, #1
 80a2a80:	e004      	b.n	80a2a8c <_ZN7Stepper9stepMotorEi+0x8c>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
 80a2a82:	2101      	movs	r1, #1
 80a2a84:	8aa0      	ldrh	r0, [r4, #20]
 80a2a86:	f001 fc6a 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2a8a:	2100      	movs	r1, #0
 80a2a8c:	8b20      	ldrh	r0, [r4, #24]
 80a2a8e:	f001 fc66 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a2a92:	2100      	movs	r1, #0
 80a2a94:	8ba0      	ldrh	r0, [r4, #28]
 80a2a96:	f001 fc62 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a2a9a:	2101      	movs	r1, #1
 80a2a9c:	8c20      	ldrh	r0, [r4, #32]
 80a2a9e:	f001 fc5e 	bl	80a435e <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
 80a2aa2:	68e3      	ldr	r3, [r4, #12]
 80a2aa4:	2b05      	cmp	r3, #5
 80a2aa6:	d170      	bne.n	80a2b8a <_ZN7Stepper9stepMotorEi+0x18a>
    switch (thisStep) {
 80a2aa8:	2d09      	cmp	r5, #9
 80a2aaa:	d86e      	bhi.n	80a2b8a <_ZN7Stepper9stepMotorEi+0x18a>
 80a2aac:	e8df f005 	tbb	[pc, r5]
 80a2ab0:	23150b05 	.word	0x23150b05
 80a2ab4:	43352b25 	.word	0x43352b25
 80a2ab8:	5755      	.short	0x5755
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
 80a2aba:	2100      	movs	r1, #0
 80a2abc:	8aa0      	ldrh	r0, [r4, #20]
 80a2abe:	f001 fc4e 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2ac2:	2101      	movs	r1, #1
 80a2ac4:	e050      	b.n	80a2b68 <_ZN7Stepper9stepMotorEi+0x168>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 1:  // 01001
        digitalWrite(motor_pin_1, LOW);
 80a2ac6:	2100      	movs	r1, #0
 80a2ac8:	8aa0      	ldrh	r0, [r4, #20]
 80a2aca:	f001 fc48 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2ace:	2101      	movs	r1, #1
 80a2ad0:	8b20      	ldrh	r0, [r4, #24]
 80a2ad2:	f001 fc44 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a2ad6:	2100      	movs	r1, #0
 80a2ad8:	e04a      	b.n	80a2b70 <_ZN7Stepper9stepMotorEi+0x170>
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 2:  // 01011
        digitalWrite(motor_pin_1, LOW);
 80a2ada:	2100      	movs	r1, #0
 80a2adc:	8aa0      	ldrh	r0, [r4, #20]
 80a2ade:	f001 fc3e 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2ae2:	2101      	movs	r1, #1
 80a2ae4:	8b20      	ldrh	r0, [r4, #24]
 80a2ae6:	f001 fc3a 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a2aea:	2100      	movs	r1, #0
 80a2aec:	8ba0      	ldrh	r0, [r4, #28]
 80a2aee:	f001 fc36 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a2af2:	2101      	movs	r1, #1
 80a2af4:	e040      	b.n	80a2b78 <_ZN7Stepper9stepMotorEi+0x178>
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 3:  // 01010
        digitalWrite(motor_pin_1, LOW);
 80a2af6:	2100      	movs	r1, #0
 80a2af8:	e000      	b.n	80a2afc <_ZN7Stepper9stepMotorEi+0xfc>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 4:  // 11010
        digitalWrite(motor_pin_1, HIGH);
 80a2afa:	2101      	movs	r1, #1
 80a2afc:	8aa0      	ldrh	r0, [r4, #20]
 80a2afe:	f001 fc2e 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2b02:	2101      	movs	r1, #1
 80a2b04:	e004      	b.n	80a2b10 <_ZN7Stepper9stepMotorEi+0x110>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 5:  // 10010
        digitalWrite(motor_pin_1, HIGH);
 80a2b06:	2101      	movs	r1, #1
 80a2b08:	8aa0      	ldrh	r0, [r4, #20]
 80a2b0a:	f001 fc28 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2b0e:	2100      	movs	r1, #0
 80a2b10:	8b20      	ldrh	r0, [r4, #24]
 80a2b12:	f001 fc24 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a2b16:	2100      	movs	r1, #0
 80a2b18:	e008      	b.n	80a2b2c <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 6:  // 10110
        digitalWrite(motor_pin_1, HIGH);
 80a2b1a:	2101      	movs	r1, #1
 80a2b1c:	8aa0      	ldrh	r0, [r4, #20]
 80a2b1e:	f001 fc1e 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2b22:	2100      	movs	r1, #0
 80a2b24:	8b20      	ldrh	r0, [r4, #24]
 80a2b26:	f001 fc1a 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a2b2a:	2101      	movs	r1, #1
 80a2b2c:	8ba0      	ldrh	r0, [r4, #28]
 80a2b2e:	f001 fc16 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a2b32:	2101      	movs	r1, #1
 80a2b34:	e00c      	b.n	80a2b50 <_ZN7Stepper9stepMotorEi+0x150>
        digitalWrite(motor_pin_5, LOW);
        break;
      case 7:  // 10100
        digitalWrite(motor_pin_1, HIGH);
 80a2b36:	2101      	movs	r1, #1
 80a2b38:	8aa0      	ldrh	r0, [r4, #20]
 80a2b3a:	f001 fc10 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2b3e:	2100      	movs	r1, #0
 80a2b40:	8b20      	ldrh	r0, [r4, #24]
 80a2b42:	f001 fc0c 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a2b46:	2101      	movs	r1, #1
 80a2b48:	8ba0      	ldrh	r0, [r4, #28]
 80a2b4a:	f001 fc08 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a2b4e:	2100      	movs	r1, #0
 80a2b50:	8c20      	ldrh	r0, [r4, #32]
 80a2b52:	f001 fc04 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
 80a2b56:	2100      	movs	r1, #0
 80a2b58:	e012      	b.n	80a2b80 <_ZN7Stepper9stepMotorEi+0x180>
        break;
      case 8:  // 10101
        digitalWrite(motor_pin_1, HIGH);
 80a2b5a:	2101      	movs	r1, #1
 80a2b5c:	e000      	b.n	80a2b60 <_ZN7Stepper9stepMotorEi+0x160>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
 80a2b5e:	2100      	movs	r1, #0
 80a2b60:	8aa0      	ldrh	r0, [r4, #20]
 80a2b62:	f001 fbfc 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2b66:	2100      	movs	r1, #0
 80a2b68:	8b20      	ldrh	r0, [r4, #24]
 80a2b6a:	f001 fbf8 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a2b6e:	2101      	movs	r1, #1
 80a2b70:	8ba0      	ldrh	r0, [r4, #28]
 80a2b72:	f001 fbf4 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a2b76:	2100      	movs	r1, #0
 80a2b78:	8c20      	ldrh	r0, [r4, #32]
 80a2b7a:	f001 fbf0 	bl	80a435e <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
 80a2b7e:	2101      	movs	r1, #1
 80a2b80:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
 80a2b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
 80a2b86:	f001 bbea 	b.w	80a435e <digitalWrite>
 80a2b8a:	bd38      	pop	{r3, r4, r5, pc}

080a2b8c <_ZN7Stepper4stepEi>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a2b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int steps_left = abs(steps_to_move);  // how many steps to take

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a2b8e:	2900      	cmp	r1, #0
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a2b90:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a2b94:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a2b96:	eba5 75e1 	sub.w	r5, r5, r1, asr #31

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a2b9a:	dd01      	ble.n	80a2ba0 <_ZN7Stepper4stepEi+0x14>
 80a2b9c:	2301      	movs	r3, #1
 80a2b9e:	e001      	b.n	80a2ba4 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
 80a2ba0:	d001      	beq.n	80a2ba6 <_ZN7Stepper4stepEi+0x1a>
 80a2ba2:	2300      	movs	r3, #0
 80a2ba4:	6023      	str	r3, [r4, #0]
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
          this->step_number = 0;
 80a2ba6:	2700      	movs	r7, #0
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
        stepMotor(this->step_number % 10);
 80a2ba8:	260a      	movs	r6, #10
  if (steps_to_move > 0) { this->direction = 1; }
  if (steps_to_move < 0) { this->direction = 0; }


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80a2baa:	2d00      	cmp	r5, #0
 80a2bac:	d02f      	beq.n	80a2c0e <_ZN7Stepper4stepEi+0x82>
 80a2bae:	f000 f921 	bl	80a2df4 <HAL_Timer_Get_Micro_Seconds>
  {
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
 80a2bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a2bb4:	6862      	ldr	r2, [r4, #4]
 80a2bb6:	1ac3      	subs	r3, r0, r3
 80a2bb8:	4293      	cmp	r3, r2
 80a2bba:	d3f6      	bcc.n	80a2baa <_ZN7Stepper4stepEi+0x1e>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a2bbc:	6823      	ldr	r3, [r4, #0]
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80a2bbe:	62a0      	str	r0, [r4, #40]	; 0x28
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a2bc0:	2b01      	cmp	r3, #1
 80a2bc2:	6923      	ldr	r3, [r4, #16]
 80a2bc4:	d106      	bne.n	80a2bd4 <_ZN7Stepper4stepEi+0x48>
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
 80a2bc6:	68a2      	ldr	r2, [r4, #8]
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a2bc8:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
 80a2bca:	4293      	cmp	r3, r2
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a2bcc:	6123      	str	r3, [r4, #16]
        if (this->step_number == this->number_of_steps) {
 80a2bce:	d107      	bne.n	80a2be0 <_ZN7Stepper4stepEi+0x54>
          this->step_number = 0;
 80a2bd0:	6127      	str	r7, [r4, #16]
 80a2bd2:	e005      	b.n	80a2be0 <_ZN7Stepper4stepEi+0x54>
        }
      }
      else
      {
        if (this->step_number == 0) {
 80a2bd4:	b90b      	cbnz	r3, 80a2bda <_ZN7Stepper4stepEi+0x4e>
          this->step_number = this->number_of_steps;
 80a2bd6:	68a3      	ldr	r3, [r4, #8]
 80a2bd8:	6123      	str	r3, [r4, #16]
        }
        this->step_number--;
 80a2bda:	6923      	ldr	r3, [r4, #16]
 80a2bdc:	3b01      	subs	r3, #1
 80a2bde:	6123      	str	r3, [r4, #16]
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a2be0:	68e3      	ldr	r3, [r4, #12]
          this->step_number = this->number_of_steps;
        }
        this->step_number--;
      }
      // decrement the steps left:
      steps_left--;
 80a2be2:	3d01      	subs	r5, #1
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a2be4:	2b05      	cmp	r3, #5
 80a2be6:	6923      	ldr	r3, [r4, #16]
 80a2be8:	d104      	bne.n	80a2bf4 <_ZN7Stepper4stepEi+0x68>
        stepMotor(this->step_number % 10);
 80a2bea:	fb93 f1f6 	sdiv	r1, r3, r6
 80a2bee:	fb06 3111 	mls	r1, r6, r1, r3
 80a2bf2:	e008      	b.n	80a2c06 <_ZN7Stepper4stepEi+0x7a>
      else
        stepMotor(this->step_number % 4);
 80a2bf4:	4906      	ldr	r1, [pc, #24]	; (80a2c10 <_ZN7Stepper4stepEi+0x84>)
 80a2bf6:	4019      	ands	r1, r3
 80a2bf8:	2900      	cmp	r1, #0
 80a2bfa:	bfbe      	ittt	lt
 80a2bfc:	f101 31ff 	addlt.w	r1, r1, #4294967295	; 0xffffffff
 80a2c00:	f061 0103 	ornlt	r1, r1, #3
 80a2c04:	3101      	addlt	r1, #1
 80a2c06:	4620      	mov	r0, r4
 80a2c08:	f7ff fefa 	bl	80a2a00 <_ZN7Stepper9stepMotorEi>
 80a2c0c:	e7cd      	b.n	80a2baa <_ZN7Stepper4stepEi+0x1e>
 80a2c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2c10:	80000003 	.word	0x80000003

080a2c14 <_GLOBAL__sub_I__ZN7StepperC2Eiii>:
 80a2c14:	f000 b8fe 	b.w	80a2e14 <HAL_Pin_Map>

080a2c18 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a2c18:	2300      	movs	r3, #0
 80a2c1a:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a2c1c:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a2c1e:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a2c20:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a2c22:	6503      	str	r3, [r0, #80]	; 0x50
 80a2c24:	4770      	bx	lr
	...

080a2c28 <_ZN10OSCMessageC1Ev>:
#include "simple-OSC.h"

OSCMessage::OSCMessage()
 80a2c28:	b538      	push	{r3, r4, r5, lr}
 80a2c2a:	4604      	mov	r4, r0
 80a2c2c:	4d0c      	ldr	r5, [pc, #48]	; (80a2c60 <_ZN10OSCMessageC1Ev+0x38>)
 80a2c2e:	3008      	adds	r0, #8
 80a2c30:	4629      	mov	r1, r5
 80a2c32:	f000 febb 	bl	80a39ac <_ZN6StringC1EPK19__FlashStringHelper>
 80a2c36:	4629      	mov	r1, r5
 80a2c38:	f104 0018 	add.w	r0, r4, #24
 80a2c3c:	f000 feb6 	bl	80a39ac <_ZN6StringC1EPK19__FlashStringHelper>
 80a2c40:	4629      	mov	r1, r5
 80a2c42:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a2c46:	f000 feb1 	bl	80a39ac <_ZN6StringC1EPK19__FlashStringHelper>
 80a2c4a:	4629      	mov	r1, r5
 80a2c4c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a2c50:	f000 feac 	bl	80a39ac <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a2c54:	4620      	mov	r0, r4
 80a2c56:	f7ff ffdf 	bl	80a2c18 <_ZN10OSCMessage12setupMessageEv>
}
 80a2c5a:	4620      	mov	r0, r4
 80a2c5c:	bd38      	pop	{r3, r4, r5, pc}
 80a2c5e:	bf00      	nop
 80a2c60:	080a713e 	.word	0x080a713e

080a2c64 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a2c64:	b510      	push	{r4, lr}
 80a2c66:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a2c68:	6800      	ldr	r0, [r0, #0]
 80a2c6a:	f000 fae9 	bl	80a3240 <free>
    free(inputDatas);
 80a2c6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2c70:	f000 fae6 	bl	80a3240 <free>
    free(outputDatas);
 80a2c74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a2c76:	f000 fae3 	bl	80a3240 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a2c7a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a2c7e:	f000 fe4e 	bl	80a391e <_ZN6StringD1Ev>
 80a2c82:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a2c86:	f000 fe4a 	bl	80a391e <_ZN6StringD1Ev>
 80a2c8a:	f104 0018 	add.w	r0, r4, #24
 80a2c8e:	f000 fe46 	bl	80a391e <_ZN6StringD1Ev>
 80a2c92:	f104 0008 	add.w	r0, r4, #8
 80a2c96:	f000 fe42 	bl	80a391e <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a2c9a:	4620      	mov	r0, r4
 80a2c9c:	bd10      	pop	{r4, pc}

080a2c9e <_ZN10OSCMessage4fillEc>:

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a2c9e:	b538      	push	{r3, r4, r5, lr}
 80a2ca0:	460d      	mov	r5, r1
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a2ca2:	6841      	ldr	r1, [r0, #4]
    free(outputDatas);
}

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a2ca4:	4604      	mov	r4, r0
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a2ca6:	3101      	adds	r1, #1
 80a2ca8:	6800      	ldr	r0, [r0, #0]
 80a2caa:	f000 fad1 	bl	80a3250 <realloc>
 80a2cae:	6020      	str	r0, [r4, #0]
    if (incomingBuffer != NULL)
 80a2cb0:	b118      	cbz	r0, 80a2cba <_ZN10OSCMessage4fillEc+0x1c>
    {
        incomingBuffer[incomingBufferSize++] = incomingByte;
 80a2cb2:	6863      	ldr	r3, [r4, #4]
 80a2cb4:	1c5a      	adds	r2, r3, #1
 80a2cb6:	6062      	str	r2, [r4, #4]
 80a2cb8:	54c5      	strb	r5, [r0, r3]
 80a2cba:	bd38      	pop	{r3, r4, r5, pc}

080a2cbc <_ZN10OSCMessage5parseEv>:
    }
}

bool OSCMessage::parse()
{
 80a2cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2cc4:	4606      	mov	r6, r0
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
    int dataLocation = -1;
 80a2cc6:	4614      	mov	r4, r2

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
 80a2cc8:	4691      	mov	r9, r2
}

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
 80a2cca:	4690      	mov	r8, r2
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a2ccc:	b083      	sub	sp, #12
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
 80a2cce:	f100 0b18 	add.w	fp, r0, #24
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a2cd2:	af00      	add	r7, sp, #0
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a2cd4:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a2cd8:	1c55      	adds	r5, r2, #1
 80a2cda:	45aa      	cmp	sl, r5
 80a2cdc:	dd61      	ble.n	80a2da2 <_ZN10OSCMessage5parseEv+0xe6>
    {
        if (incomingBuffer[i] == 44)
 80a2cde:	6831      	ldr	r1, [r6, #0]
 80a2ce0:	5d4b      	ldrb	r3, [r1, r5]
 80a2ce2:	2b2c      	cmp	r3, #44	; 0x2c
 80a2ce4:	d110      	bne.n	80a2d08 <_ZN10OSCMessage5parseEv+0x4c>
        {
            char charAddress[i-1];
            memcpy(charAddress,incomingBuffer,i-1);
            inputAddress = charAddress;
            addressLocation = i;
 80a2ce6:	46e8      	mov	r8, sp
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
    {
        if (incomingBuffer[i] == 44)
        {
            char charAddress[i-1];
 80a2ce8:	1dd3      	adds	r3, r2, #7
 80a2cea:	f023 0307 	bic.w	r3, r3, #7
 80a2cee:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charAddress,incomingBuffer,i-1);
 80a2cf2:	4668      	mov	r0, sp
 80a2cf4:	f003 ffe6 	bl	80a6cc4 <memcpy>
            inputAddress = charAddress;
 80a2cf8:	4669      	mov	r1, sp
 80a2cfa:	f106 0008 	add.w	r0, r6, #8
 80a2cfe:	f000 fe68 	bl	80a39d2 <_ZN6StringaSEPKc>
 80a2d02:	46c5      	mov	sp, r8
 80a2d04:	46a8      	mov	r8, r5
 80a2d06:	e04a      	b.n	80a2d9e <_ZN10OSCMessage5parseEv+0xe2>
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
 80a2d08:	f1b8 0f00 	cmp.w	r8, #0
 80a2d0c:	dd47      	ble.n	80a2d9e <_ZN10OSCMessage5parseEv+0xe2>
 80a2d0e:	b9bb      	cbnz	r3, 80a2d40 <_ZN10OSCMessage5parseEv+0x84>
 80a2d10:	f1b9 0f00 	cmp.w	r9, #0
 80a2d14:	da14      	bge.n	80a2d40 <_ZN10OSCMessage5parseEv+0x84>
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
            typesLocation = i;
 80a2d16:	46e9      	mov	r9, sp
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
 80a2d18:	ebc8 0305 	rsb	r3, r8, r5
 80a2d1c:	3306      	adds	r3, #6
 80a2d1e:	f023 0307 	bic.w	r3, r3, #7
 80a2d22:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
 80a2d26:	f108 0301 	add.w	r3, r8, #1
 80a2d2a:	4419      	add	r1, r3
 80a2d2c:	4668      	mov	r0, sp
 80a2d2e:	f003 ffc9 	bl	80a6cc4 <memcpy>
            inputTypes = charTypes;
 80a2d32:	4669      	mov	r1, sp
 80a2d34:	4658      	mov	r0, fp
 80a2d36:	f000 fe4c 	bl	80a39d2 <_ZN6StringaSEPKc>
 80a2d3a:	46cd      	mov	sp, r9
            typesLocation = i;
 80a2d3c:	46a9      	mov	r9, r5
 80a2d3e:	e02e      	b.n	80a2d9e <_ZN10OSCMessage5parseEv+0xe2>
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
 80a2d40:	f1b9 0f00 	cmp.w	r9, #0
 80a2d44:	dd2b      	ble.n	80a2d9e <_ZN10OSCMessage5parseEv+0xe2>
 80a2d46:	2c00      	cmp	r4, #0
 80a2d48:	da28      	bge.n	80a2d9c <_ZN10OSCMessage5parseEv+0xe0>
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a2d4a:	ebc8 0009 	rsb	r0, r8, r9
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a2d4e:	2304      	movs	r3, #4
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a2d50:	1e44      	subs	r4, r0, #1
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a2d52:	fb90 f0f3 	sdiv	r0, r0, r3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a2d56:	2800      	cmp	r0, #0
 80a2d58:	db06      	blt.n	80a2d68 <_ZN10OSCMessage5parseEv+0xac>
 80a2d5a:	f003 f94d 	bl	80a5ff8 <__aeabi_i2d>
 80a2d5e:	2200      	movs	r2, #0
 80a2d60:	4b13      	ldr	r3, [pc, #76]	; (80a2db0 <_ZN10OSCMessage5parseEv+0xf4>)
 80a2d62:	f002 fffd 	bl	80a5d60 <__adddf3>
 80a2d66:	e005      	b.n	80a2d74 <_ZN10OSCMessage5parseEv+0xb8>
 80a2d68:	f003 f946 	bl	80a5ff8 <__aeabi_i2d>
 80a2d6c:	2200      	movs	r2, #0
 80a2d6e:	4b10      	ldr	r3, [pc, #64]	; (80a2db0 <_ZN10OSCMessage5parseEv+0xf4>)
 80a2d70:	f002 fff4 	bl	80a5d5c <__aeabi_dsub>
 80a2d74:	f003 fc56 	bl	80a6624 <__aeabi_d2iz>
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
 80a2d78:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 80a2d7c:	3403      	adds	r4, #3
 80a2d7e:	444c      	add	r4, r9
            inputDatas = (char *) malloc ( datasSize );
 80a2d80:	ebc4 020a 	rsb	r2, r4, sl
 80a2d84:	4610      	mov	r0, r2
 80a2d86:	607a      	str	r2, [r7, #4]
 80a2d88:	f000 fa52 	bl	80a3230 <malloc>
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a2d8c:	6831      	ldr	r1, [r6, #0]
            int typesCount = typesLocation - addressLocation - 1;
            int bitCount = 4*round((typesCount+1)/4)+3;
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
            inputDatas = (char *) malloc ( datasSize );
 80a2d8e:	62b0      	str	r0, [r6, #40]	; 0x28
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a2d90:	4421      	add	r1, r4
 80a2d92:	687a      	ldr	r2, [r7, #4]
 80a2d94:	f003 ff96 	bl	80a6cc4 <memcpy>
 80a2d98:	4654      	mov	r4, sl
 80a2d9a:	e000      	b.n	80a2d9e <_ZN10OSCMessage5parseEv+0xe2>
             Serial.println();
             }
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
 80a2d9c:	d103      	bne.n	80a2da6 <_ZN10OSCMessage5parseEv+0xea>
 80a2d9e:	462a      	mov	r2, r5
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a2da0:	e798      	b.n	80a2cd4 <_ZN10OSCMessage5parseEv+0x18>
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
        }
    }
    return false;
 80a2da2:	2000      	movs	r0, #0
 80a2da4:	e000      	b.n	80a2da8 <_ZN10OSCMessage5parseEv+0xec>
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
 80a2da6:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80a2da8:	370c      	adds	r7, #12
 80a2daa:	46bd      	mov	sp, r7
 80a2dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2db0:	3fe00000 	.word	0x3fe00000

080a2db4 <_ZN10OSCMessage5routeEPKcPFvRS_E>:

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
 80a2db4:	b570      	push	{r4, r5, r6, lr}
 80a2db6:	4604      	mov	r4, r0
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2db8:	3008      	adds	r0, #8
 80a2dba:	4615      	mov	r5, r2
 80a2dbc:	f000 fe1a 	bl	80a39f4 <_ZNK6String6equalsEPKc>
    if( inputAddress == pattern)
 80a2dc0:	b120      	cbz	r0, 80a2dcc <_ZN10OSCMessage5routeEPKcPFvRS_E+0x18>
    {
        callback(*this);
 80a2dc2:	4620      	mov	r0, r4
 80a2dc4:	462b      	mov	r3, r5
    }
}
 80a2dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
    if( inputAddress == pattern)
    {
        callback(*this);
 80a2dca:	4718      	bx	r3
 80a2dcc:	bd70      	pop	{r4, r5, r6, pc}

080a2dce <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a2dce:	f000 b821 	b.w	80a2e14 <HAL_Pin_Map>
	...

080a2dd4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2dd4:	b508      	push	{r3, lr}
 80a2dd6:	4b02      	ldr	r3, [pc, #8]	; (80a2de0 <os_mutex_create+0xc>)
 80a2dd8:	681b      	ldr	r3, [r3, #0]
 80a2dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ddc:	9301      	str	r3, [sp, #4]
 80a2dde:	bd08      	pop	{r3, pc}
 80a2de0:	080601d0 	.word	0x080601d0

080a2de4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2de4:	b508      	push	{r3, lr}
 80a2de6:	4b02      	ldr	r3, [pc, #8]	; (80a2df0 <HAL_RNG_GetRandomNumber+0xc>)
 80a2de8:	681b      	ldr	r3, [r3, #0]
 80a2dea:	685b      	ldr	r3, [r3, #4]
 80a2dec:	9301      	str	r3, [sp, #4]
 80a2dee:	bd08      	pop	{r3, pc}
 80a2df0:	0806019c 	.word	0x0806019c

080a2df4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2df4:	b508      	push	{r3, lr}
 80a2df6:	4b02      	ldr	r3, [pc, #8]	; (80a2e00 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2df8:	681b      	ldr	r3, [r3, #0]
 80a2dfa:	691b      	ldr	r3, [r3, #16]
 80a2dfc:	9301      	str	r3, [sp, #4]
 80a2dfe:	bd08      	pop	{r3, pc}
 80a2e00:	0806019c 	.word	0x0806019c

080a2e04 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2e04:	b508      	push	{r3, lr}
 80a2e06:	4b02      	ldr	r3, [pc, #8]	; (80a2e10 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2e08:	681b      	ldr	r3, [r3, #0]
 80a2e0a:	695b      	ldr	r3, [r3, #20]
 80a2e0c:	9301      	str	r3, [sp, #4]
 80a2e0e:	bd08      	pop	{r3, pc}
 80a2e10:	0806019c 	.word	0x0806019c

080a2e14 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2e14:	b508      	push	{r3, lr}
 80a2e16:	4b02      	ldr	r3, [pc, #8]	; (80a2e20 <HAL_Pin_Map+0xc>)
 80a2e18:	681b      	ldr	r3, [r3, #0]
 80a2e1a:	681b      	ldr	r3, [r3, #0]
 80a2e1c:	9301      	str	r3, [sp, #4]
 80a2e1e:	bd08      	pop	{r3, pc}
 80a2e20:	080601b0 	.word	0x080601b0

080a2e24 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2e24:	b508      	push	{r3, lr}
 80a2e26:	4b02      	ldr	r3, [pc, #8]	; (80a2e30 <HAL_Pin_Mode+0xc>)
 80a2e28:	681b      	ldr	r3, [r3, #0]
 80a2e2a:	689b      	ldr	r3, [r3, #8]
 80a2e2c:	9301      	str	r3, [sp, #4]
 80a2e2e:	bd08      	pop	{r3, pc}
 80a2e30:	080601b0 	.word	0x080601b0

080a2e34 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2e34:	b508      	push	{r3, lr}
 80a2e36:	4b02      	ldr	r3, [pc, #8]	; (80a2e40 <HAL_Get_Pin_Mode+0xc>)
 80a2e38:	681b      	ldr	r3, [r3, #0]
 80a2e3a:	68db      	ldr	r3, [r3, #12]
 80a2e3c:	9301      	str	r3, [sp, #4]
 80a2e3e:	bd08      	pop	{r3, pc}
 80a2e40:	080601b0 	.word	0x080601b0

080a2e44 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2e44:	b508      	push	{r3, lr}
 80a2e46:	4b02      	ldr	r3, [pc, #8]	; (80a2e50 <HAL_GPIO_Write+0xc>)
 80a2e48:	681b      	ldr	r3, [r3, #0]
 80a2e4a:	691b      	ldr	r3, [r3, #16]
 80a2e4c:	9301      	str	r3, [sp, #4]
 80a2e4e:	bd08      	pop	{r3, pc}
 80a2e50:	080601b0 	.word	0x080601b0

080a2e54 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2e54:	b508      	push	{r3, lr}
 80a2e56:	4b02      	ldr	r3, [pc, #8]	; (80a2e60 <HAL_I2C_Begin+0xc>)
 80a2e58:	681b      	ldr	r3, [r3, #0]
 80a2e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2e5c:	9301      	str	r3, [sp, #4]
 80a2e5e:	bd08      	pop	{r3, pc}
 80a2e60:	080601ac 	.word	0x080601ac

080a2e64 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2e64:	b508      	push	{r3, lr}
 80a2e66:	4b02      	ldr	r3, [pc, #8]	; (80a2e70 <HAL_I2C_Request_Data+0xc>)
 80a2e68:	681b      	ldr	r3, [r3, #0]
 80a2e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2e6c:	9301      	str	r3, [sp, #4]
 80a2e6e:	bd08      	pop	{r3, pc}
 80a2e70:	080601ac 	.word	0x080601ac

080a2e74 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2e74:	b508      	push	{r3, lr}
 80a2e76:	4b02      	ldr	r3, [pc, #8]	; (80a2e80 <HAL_I2C_Begin_Transmission+0xc>)
 80a2e78:	681b      	ldr	r3, [r3, #0]
 80a2e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2e7c:	9301      	str	r3, [sp, #4]
 80a2e7e:	bd08      	pop	{r3, pc}
 80a2e80:	080601ac 	.word	0x080601ac

080a2e84 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2e84:	b508      	push	{r3, lr}
 80a2e86:	4b02      	ldr	r3, [pc, #8]	; (80a2e90 <HAL_I2C_End_Transmission+0xc>)
 80a2e88:	681b      	ldr	r3, [r3, #0]
 80a2e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2e8c:	9301      	str	r3, [sp, #4]
 80a2e8e:	bd08      	pop	{r3, pc}
 80a2e90:	080601ac 	.word	0x080601ac

080a2e94 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2e94:	b508      	push	{r3, lr}
 80a2e96:	4b02      	ldr	r3, [pc, #8]	; (80a2ea0 <HAL_I2C_Write_Data+0xc>)
 80a2e98:	681b      	ldr	r3, [r3, #0]
 80a2e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2e9c:	9301      	str	r3, [sp, #4]
 80a2e9e:	bd08      	pop	{r3, pc}
 80a2ea0:	080601ac 	.word	0x080601ac

080a2ea4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2ea4:	b508      	push	{r3, lr}
 80a2ea6:	4b02      	ldr	r3, [pc, #8]	; (80a2eb0 <HAL_I2C_Available_Data+0xc>)
 80a2ea8:	681b      	ldr	r3, [r3, #0]
 80a2eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2eac:	9301      	str	r3, [sp, #4]
 80a2eae:	bd08      	pop	{r3, pc}
 80a2eb0:	080601ac 	.word	0x080601ac

080a2eb4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2eb4:	b508      	push	{r3, lr}
 80a2eb6:	4b02      	ldr	r3, [pc, #8]	; (80a2ec0 <HAL_I2C_Read_Data+0xc>)
 80a2eb8:	681b      	ldr	r3, [r3, #0]
 80a2eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2ebc:	9301      	str	r3, [sp, #4]
 80a2ebe:	bd08      	pop	{r3, pc}
 80a2ec0:	080601ac 	.word	0x080601ac

080a2ec4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2ec4:	b508      	push	{r3, lr}
 80a2ec6:	4b02      	ldr	r3, [pc, #8]	; (80a2ed0 <HAL_I2C_Peek_Data+0xc>)
 80a2ec8:	681b      	ldr	r3, [r3, #0]
 80a2eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2ecc:	9301      	str	r3, [sp, #4]
 80a2ece:	bd08      	pop	{r3, pc}
 80a2ed0:	080601ac 	.word	0x080601ac

080a2ed4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2ed4:	b508      	push	{r3, lr}
 80a2ed6:	4b02      	ldr	r3, [pc, #8]	; (80a2ee0 <HAL_I2C_Flush_Data+0xc>)
 80a2ed8:	681b      	ldr	r3, [r3, #0]
 80a2eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2edc:	9301      	str	r3, [sp, #4]
 80a2ede:	bd08      	pop	{r3, pc}
 80a2ee0:	080601ac 	.word	0x080601ac

080a2ee4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2ee4:	b508      	push	{r3, lr}
 80a2ee6:	4b02      	ldr	r3, [pc, #8]	; (80a2ef0 <HAL_I2C_Is_Enabled+0xc>)
 80a2ee8:	681b      	ldr	r3, [r3, #0]
 80a2eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2eec:	9301      	str	r3, [sp, #4]
 80a2eee:	bd08      	pop	{r3, pc}
 80a2ef0:	080601ac 	.word	0x080601ac

080a2ef4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2ef4:	b508      	push	{r3, lr}
 80a2ef6:	4b03      	ldr	r3, [pc, #12]	; (80a2f04 <HAL_I2C_Init+0x10>)
 80a2ef8:	681b      	ldr	r3, [r3, #0]
 80a2efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2efe:	9301      	str	r3, [sp, #4]
 80a2f00:	bd08      	pop	{r3, pc}
 80a2f02:	0000      	.short	0x0000
 80a2f04:	080601ac 	.word	0x080601ac

080a2f08 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2f08:	b508      	push	{r3, lr}
 80a2f0a:	4b02      	ldr	r3, [pc, #8]	; (80a2f14 <socket_handle_valid+0xc>)
 80a2f0c:	681b      	ldr	r3, [r3, #0]
 80a2f0e:	685b      	ldr	r3, [r3, #4]
 80a2f10:	9301      	str	r3, [sp, #4]
 80a2f12:	bd08      	pop	{r3, pc}
 80a2f14:	080601bc 	.word	0x080601bc

080a2f18 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2f18:	b508      	push	{r3, lr}
 80a2f1a:	4b02      	ldr	r3, [pc, #8]	; (80a2f24 <socket_create+0xc>)
 80a2f1c:	681b      	ldr	r3, [r3, #0]
 80a2f1e:	689b      	ldr	r3, [r3, #8]
 80a2f20:	9301      	str	r3, [sp, #4]
 80a2f22:	bd08      	pop	{r3, pc}
 80a2f24:	080601bc 	.word	0x080601bc

080a2f28 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a2f28:	b508      	push	{r3, lr}
 80a2f2a:	4b02      	ldr	r3, [pc, #8]	; (80a2f34 <socket_receivefrom+0xc>)
 80a2f2c:	681b      	ldr	r3, [r3, #0]
 80a2f2e:	695b      	ldr	r3, [r3, #20]
 80a2f30:	9301      	str	r3, [sp, #4]
 80a2f32:	bd08      	pop	{r3, pc}
 80a2f34:	080601bc 	.word	0x080601bc

080a2f38 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a2f38:	b508      	push	{r3, lr}
 80a2f3a:	4b02      	ldr	r3, [pc, #8]	; (80a2f44 <socket_sendto+0xc>)
 80a2f3c:	681b      	ldr	r3, [r3, #0]
 80a2f3e:	69db      	ldr	r3, [r3, #28]
 80a2f40:	9301      	str	r3, [sp, #4]
 80a2f42:	bd08      	pop	{r3, pc}
 80a2f44:	080601bc 	.word	0x080601bc

080a2f48 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2f48:	b508      	push	{r3, lr}
 80a2f4a:	4b02      	ldr	r3, [pc, #8]	; (80a2f54 <socket_close+0xc>)
 80a2f4c:	681b      	ldr	r3, [r3, #0]
 80a2f4e:	6a1b      	ldr	r3, [r3, #32]
 80a2f50:	9301      	str	r3, [sp, #4]
 80a2f52:	bd08      	pop	{r3, pc}
 80a2f54:	080601bc 	.word	0x080601bc

080a2f58 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2f58:	b508      	push	{r3, lr}
 80a2f5a:	4b02      	ldr	r3, [pc, #8]	; (80a2f64 <socket_handle_invalid+0xc>)
 80a2f5c:	681b      	ldr	r3, [r3, #0]
 80a2f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2f60:	9301      	str	r3, [sp, #4]
 80a2f62:	bd08      	pop	{r3, pc}
 80a2f64:	080601bc 	.word	0x080601bc

080a2f68 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2f68:	b508      	push	{r3, lr}
 80a2f6a:	4b02      	ldr	r3, [pc, #8]	; (80a2f74 <HAL_SPI_Begin+0xc>)
 80a2f6c:	681b      	ldr	r3, [r3, #0]
 80a2f6e:	681b      	ldr	r3, [r3, #0]
 80a2f70:	9301      	str	r3, [sp, #4]
 80a2f72:	bd08      	pop	{r3, pc}
 80a2f74:	080601b4 	.word	0x080601b4

080a2f78 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2f78:	b508      	push	{r3, lr}
 80a2f7a:	4b02      	ldr	r3, [pc, #8]	; (80a2f84 <HAL_SPI_Set_Bit_Order+0xc>)
 80a2f7c:	681b      	ldr	r3, [r3, #0]
 80a2f7e:	689b      	ldr	r3, [r3, #8]
 80a2f80:	9301      	str	r3, [sp, #4]
 80a2f82:	bd08      	pop	{r3, pc}
 80a2f84:	080601b4 	.word	0x080601b4

080a2f88 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a2f88:	b508      	push	{r3, lr}
 80a2f8a:	4b02      	ldr	r3, [pc, #8]	; (80a2f94 <HAL_SPI_Set_Data_Mode+0xc>)
 80a2f8c:	681b      	ldr	r3, [r3, #0]
 80a2f8e:	68db      	ldr	r3, [r3, #12]
 80a2f90:	9301      	str	r3, [sp, #4]
 80a2f92:	bd08      	pop	{r3, pc}
 80a2f94:	080601b4 	.word	0x080601b4

080a2f98 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a2f98:	b508      	push	{r3, lr}
 80a2f9a:	4b02      	ldr	r3, [pc, #8]	; (80a2fa4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a2f9c:	681b      	ldr	r3, [r3, #0]
 80a2f9e:	691b      	ldr	r3, [r3, #16]
 80a2fa0:	9301      	str	r3, [sp, #4]
 80a2fa2:	bd08      	pop	{r3, pc}
 80a2fa4:	080601b4 	.word	0x080601b4

080a2fa8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2fa8:	b508      	push	{r3, lr}
 80a2faa:	4b02      	ldr	r3, [pc, #8]	; (80a2fb4 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2fac:	681b      	ldr	r3, [r3, #0]
 80a2fae:	695b      	ldr	r3, [r3, #20]
 80a2fb0:	9301      	str	r3, [sp, #4]
 80a2fb2:	bd08      	pop	{r3, pc}
 80a2fb4:	080601b4 	.word	0x080601b4

080a2fb8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2fb8:	b508      	push	{r3, lr}
 80a2fba:	4b02      	ldr	r3, [pc, #8]	; (80a2fc4 <HAL_SPI_Init+0xc>)
 80a2fbc:	681b      	ldr	r3, [r3, #0]
 80a2fbe:	69db      	ldr	r3, [r3, #28]
 80a2fc0:	9301      	str	r3, [sp, #4]
 80a2fc2:	bd08      	pop	{r3, pc}
 80a2fc4:	080601b4 	.word	0x080601b4

080a2fc8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2fc8:	b508      	push	{r3, lr}
 80a2fca:	4b02      	ldr	r3, [pc, #8]	; (80a2fd4 <HAL_SPI_Is_Enabled+0xc>)
 80a2fcc:	681b      	ldr	r3, [r3, #0]
 80a2fce:	6a1b      	ldr	r3, [r3, #32]
 80a2fd0:	9301      	str	r3, [sp, #4]
 80a2fd2:	bd08      	pop	{r3, pc}
 80a2fd4:	080601b4 	.word	0x080601b4

080a2fd8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a2fd8:	b508      	push	{r3, lr}
 80a2fda:	4b02      	ldr	r3, [pc, #8]	; (80a2fe4 <HAL_SPI_Info+0xc>)
 80a2fdc:	681b      	ldr	r3, [r3, #0]
 80a2fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2fe0:	9301      	str	r3, [sp, #4]
 80a2fe2:	bd08      	pop	{r3, pc}
 80a2fe4:	080601b4 	.word	0x080601b4

080a2fe8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2fe8:	b508      	push	{r3, lr}
 80a2fea:	4b02      	ldr	r3, [pc, #8]	; (80a2ff4 <HAL_USART_Init+0xc>)
 80a2fec:	681b      	ldr	r3, [r3, #0]
 80a2fee:	699b      	ldr	r3, [r3, #24]
 80a2ff0:	9301      	str	r3, [sp, #4]
 80a2ff2:	bd08      	pop	{r3, pc}
 80a2ff4:	080601c4 	.word	0x080601c4

080a2ff8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2ff8:	b508      	push	{r3, lr}
 80a2ffa:	4b02      	ldr	r3, [pc, #8]	; (80a3004 <HAL_USART_Write_Data+0xc>)
 80a2ffc:	681b      	ldr	r3, [r3, #0]
 80a2ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3000:	9301      	str	r3, [sp, #4]
 80a3002:	bd08      	pop	{r3, pc}
 80a3004:	080601c4 	.word	0x080601c4

080a3008 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a3008:	b508      	push	{r3, lr}
 80a300a:	4b02      	ldr	r3, [pc, #8]	; (80a3014 <HAL_USART_Available_Data+0xc>)
 80a300c:	681b      	ldr	r3, [r3, #0]
 80a300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3010:	9301      	str	r3, [sp, #4]
 80a3012:	bd08      	pop	{r3, pc}
 80a3014:	080601c4 	.word	0x080601c4

080a3018 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3018:	b508      	push	{r3, lr}
 80a301a:	4b02      	ldr	r3, [pc, #8]	; (80a3024 <HAL_USART_Read_Data+0xc>)
 80a301c:	681b      	ldr	r3, [r3, #0]
 80a301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3020:	9301      	str	r3, [sp, #4]
 80a3022:	bd08      	pop	{r3, pc}
 80a3024:	080601c4 	.word	0x080601c4

080a3028 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a3028:	b508      	push	{r3, lr}
 80a302a:	4b02      	ldr	r3, [pc, #8]	; (80a3034 <HAL_USART_Peek_Data+0xc>)
 80a302c:	681b      	ldr	r3, [r3, #0]
 80a302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3030:	9301      	str	r3, [sp, #4]
 80a3032:	bd08      	pop	{r3, pc}
 80a3034:	080601c4 	.word	0x080601c4

080a3038 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a3038:	b508      	push	{r3, lr}
 80a303a:	4b02      	ldr	r3, [pc, #8]	; (80a3044 <HAL_USART_Flush_Data+0xc>)
 80a303c:	681b      	ldr	r3, [r3, #0]
 80a303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3040:	9301      	str	r3, [sp, #4]
 80a3042:	bd08      	pop	{r3, pc}
 80a3044:	080601c4 	.word	0x080601c4

080a3048 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a3048:	b508      	push	{r3, lr}
 80a304a:	4b02      	ldr	r3, [pc, #8]	; (80a3054 <HAL_USART_Is_Enabled+0xc>)
 80a304c:	681b      	ldr	r3, [r3, #0]
 80a304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3050:	9301      	str	r3, [sp, #4]
 80a3052:	bd08      	pop	{r3, pc}
 80a3054:	080601c4 	.word	0x080601c4

080a3058 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a3058:	b508      	push	{r3, lr}
 80a305a:	4b02      	ldr	r3, [pc, #8]	; (80a3064 <HAL_USART_Available_Data_For_Write+0xc>)
 80a305c:	681b      	ldr	r3, [r3, #0]
 80a305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3060:	9301      	str	r3, [sp, #4]
 80a3062:	bd08      	pop	{r3, pc}
 80a3064:	080601c4 	.word	0x080601c4

080a3068 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3068:	b508      	push	{r3, lr}
 80a306a:	4b02      	ldr	r3, [pc, #8]	; (80a3074 <HAL_USB_USART_Init+0xc>)
 80a306c:	681b      	ldr	r3, [r3, #0]
 80a306e:	681b      	ldr	r3, [r3, #0]
 80a3070:	9301      	str	r3, [sp, #4]
 80a3072:	bd08      	pop	{r3, pc}
 80a3074:	080601d8 	.word	0x080601d8

080a3078 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3078:	b508      	push	{r3, lr}
 80a307a:	4b02      	ldr	r3, [pc, #8]	; (80a3084 <HAL_USB_USART_Begin+0xc>)
 80a307c:	681b      	ldr	r3, [r3, #0]
 80a307e:	685b      	ldr	r3, [r3, #4]
 80a3080:	9301      	str	r3, [sp, #4]
 80a3082:	bd08      	pop	{r3, pc}
 80a3084:	080601d8 	.word	0x080601d8

080a3088 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3088:	b508      	push	{r3, lr}
 80a308a:	4b02      	ldr	r3, [pc, #8]	; (80a3094 <HAL_USB_USART_Available_Data+0xc>)
 80a308c:	681b      	ldr	r3, [r3, #0]
 80a308e:	691b      	ldr	r3, [r3, #16]
 80a3090:	9301      	str	r3, [sp, #4]
 80a3092:	bd08      	pop	{r3, pc}
 80a3094:	080601d8 	.word	0x080601d8

080a3098 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3098:	b508      	push	{r3, lr}
 80a309a:	4b02      	ldr	r3, [pc, #8]	; (80a30a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a309c:	681b      	ldr	r3, [r3, #0]
 80a309e:	695b      	ldr	r3, [r3, #20]
 80a30a0:	9301      	str	r3, [sp, #4]
 80a30a2:	bd08      	pop	{r3, pc}
 80a30a4:	080601d8 	.word	0x080601d8

080a30a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a30a8:	b508      	push	{r3, lr}
 80a30aa:	4b02      	ldr	r3, [pc, #8]	; (80a30b4 <HAL_USB_USART_Receive_Data+0xc>)
 80a30ac:	681b      	ldr	r3, [r3, #0]
 80a30ae:	699b      	ldr	r3, [r3, #24]
 80a30b0:	9301      	str	r3, [sp, #4]
 80a30b2:	bd08      	pop	{r3, pc}
 80a30b4:	080601d8 	.word	0x080601d8

080a30b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a30b8:	b508      	push	{r3, lr}
 80a30ba:	4b02      	ldr	r3, [pc, #8]	; (80a30c4 <HAL_USB_USART_Send_Data+0xc>)
 80a30bc:	681b      	ldr	r3, [r3, #0]
 80a30be:	69db      	ldr	r3, [r3, #28]
 80a30c0:	9301      	str	r3, [sp, #4]
 80a30c2:	bd08      	pop	{r3, pc}
 80a30c4:	080601d8 	.word	0x080601d8

080a30c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a30c8:	b508      	push	{r3, lr}
 80a30ca:	4b02      	ldr	r3, [pc, #8]	; (80a30d4 <HAL_USB_USART_Flush_Data+0xc>)
 80a30cc:	681b      	ldr	r3, [r3, #0]
 80a30ce:	6a1b      	ldr	r3, [r3, #32]
 80a30d0:	9301      	str	r3, [sp, #4]
 80a30d2:	bd08      	pop	{r3, pc}
 80a30d4:	080601d8 	.word	0x080601d8

080a30d8 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a30d8:	b508      	push	{r3, lr}
 80a30da:	4b02      	ldr	r3, [pc, #8]	; (80a30e4 <HAL_USB_USART_Is_Enabled+0xc>)
 80a30dc:	681b      	ldr	r3, [r3, #0]
 80a30de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a30e0:	9301      	str	r3, [sp, #4]
 80a30e2:	bd08      	pop	{r3, pc}
 80a30e4:	080601d8 	.word	0x080601d8

080a30e8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a30e8:	b508      	push	{r3, lr}
 80a30ea:	4b02      	ldr	r3, [pc, #8]	; (80a30f4 <inet_gethostbyname+0xc>)
 80a30ec:	681b      	ldr	r3, [r3, #0]
 80a30ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a30f0:	9301      	str	r3, [sp, #4]
 80a30f2:	bd08      	pop	{r3, pc}
 80a30f4:	080601c0 	.word	0x080601c0

080a30f8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a30f8:	b508      	push	{r3, lr}
 80a30fa:	4b02      	ldr	r3, [pc, #8]	; (80a3104 <set_system_mode+0xc>)
 80a30fc:	681b      	ldr	r3, [r3, #0]
 80a30fe:	685b      	ldr	r3, [r3, #4]
 80a3100:	9301      	str	r3, [sp, #4]
 80a3102:	bd08      	pop	{r3, pc}
 80a3104:	080601a4 	.word	0x080601a4

080a3108 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3108:	b508      	push	{r3, lr}
 80a310a:	4b02      	ldr	r3, [pc, #8]	; (80a3114 <system_delay_ms+0xc>)
 80a310c:	681b      	ldr	r3, [r3, #0]
 80a310e:	695b      	ldr	r3, [r3, #20]
 80a3110:	9301      	str	r3, [sp, #4]
 80a3112:	bd08      	pop	{r3, pc}
 80a3114:	080601a4 	.word	0x080601a4

080a3118 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a3118:	b508      	push	{r3, lr}
 80a311a:	4b02      	ldr	r3, [pc, #8]	; (80a3124 <system_thread_set_state+0xc>)
 80a311c:	681b      	ldr	r3, [r3, #0]
 80a311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3120:	9301      	str	r3, [sp, #4]
 80a3122:	bd08      	pop	{r3, pc}
 80a3124:	080601a4 	.word	0x080601a4

080a3128 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3128:	b508      	push	{r3, lr}
 80a312a:	4b03      	ldr	r3, [pc, #12]	; (80a3138 <system_ctrl_set_app_request_handler+0x10>)
 80a312c:	681b      	ldr	r3, [r3, #0]
 80a312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3132:	9301      	str	r3, [sp, #4]
 80a3134:	bd08      	pop	{r3, pc}
 80a3136:	0000      	.short	0x0000
 80a3138:	080601a4 	.word	0x080601a4

080a313c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a313c:	b508      	push	{r3, lr}
 80a313e:	4b03      	ldr	r3, [pc, #12]	; (80a314c <system_ctrl_set_result+0x10>)
 80a3140:	681b      	ldr	r3, [r3, #0]
 80a3142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3146:	9301      	str	r3, [sp, #4]
 80a3148:	bd08      	pop	{r3, pc}
 80a314a:	0000      	.short	0x0000
 80a314c:	080601a4 	.word	0x080601a4

080a3150 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3150:	b508      	push	{r3, lr}
 80a3152:	4b02      	ldr	r3, [pc, #8]	; (80a315c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3154:	681b      	ldr	r3, [r3, #0]
 80a3156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3158:	9301      	str	r3, [sp, #4]
 80a315a:	bd08      	pop	{r3, pc}
 80a315c:	080601cc 	.word	0x080601cc

080a3160 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a3160:	b508      	push	{r3, lr}
 80a3162:	4b02      	ldr	r3, [pc, #8]	; (80a316c <network_config+0xc>)
 80a3164:	681b      	ldr	r3, [r3, #0]
 80a3166:	681b      	ldr	r3, [r3, #0]
 80a3168:	9301      	str	r3, [sp, #4]
 80a316a:	bd08      	pop	{r3, pc}
 80a316c:	080601c8 	.word	0x080601c8

080a3170 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3170:	b508      	push	{r3, lr}
 80a3172:	4b02      	ldr	r3, [pc, #8]	; (80a317c <network_connect+0xc>)
 80a3174:	681b      	ldr	r3, [r3, #0]
 80a3176:	685b      	ldr	r3, [r3, #4]
 80a3178:	9301      	str	r3, [sp, #4]
 80a317a:	bd08      	pop	{r3, pc}
 80a317c:	080601c8 	.word	0x080601c8

080a3180 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3180:	b508      	push	{r3, lr}
 80a3182:	4b02      	ldr	r3, [pc, #8]	; (80a318c <network_connecting+0xc>)
 80a3184:	681b      	ldr	r3, [r3, #0]
 80a3186:	689b      	ldr	r3, [r3, #8]
 80a3188:	9301      	str	r3, [sp, #4]
 80a318a:	bd08      	pop	{r3, pc}
 80a318c:	080601c8 	.word	0x080601c8

080a3190 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3190:	b508      	push	{r3, lr}
 80a3192:	4b02      	ldr	r3, [pc, #8]	; (80a319c <network_disconnect+0xc>)
 80a3194:	681b      	ldr	r3, [r3, #0]
 80a3196:	68db      	ldr	r3, [r3, #12]
 80a3198:	9301      	str	r3, [sp, #4]
 80a319a:	bd08      	pop	{r3, pc}
 80a319c:	080601c8 	.word	0x080601c8

080a31a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a31a0:	b508      	push	{r3, lr}
 80a31a2:	4b02      	ldr	r3, [pc, #8]	; (80a31ac <network_ready+0xc>)
 80a31a4:	681b      	ldr	r3, [r3, #0]
 80a31a6:	691b      	ldr	r3, [r3, #16]
 80a31a8:	9301      	str	r3, [sp, #4]
 80a31aa:	bd08      	pop	{r3, pc}
 80a31ac:	080601c8 	.word	0x080601c8

080a31b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a31b0:	b508      	push	{r3, lr}
 80a31b2:	4b02      	ldr	r3, [pc, #8]	; (80a31bc <network_on+0xc>)
 80a31b4:	681b      	ldr	r3, [r3, #0]
 80a31b6:	695b      	ldr	r3, [r3, #20]
 80a31b8:	9301      	str	r3, [sp, #4]
 80a31ba:	bd08      	pop	{r3, pc}
 80a31bc:	080601c8 	.word	0x080601c8

080a31c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a31c0:	b508      	push	{r3, lr}
 80a31c2:	4b02      	ldr	r3, [pc, #8]	; (80a31cc <network_off+0xc>)
 80a31c4:	681b      	ldr	r3, [r3, #0]
 80a31c6:	699b      	ldr	r3, [r3, #24]
 80a31c8:	9301      	str	r3, [sp, #4]
 80a31ca:	bd08      	pop	{r3, pc}
 80a31cc:	080601c8 	.word	0x080601c8

080a31d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a31d0:	b508      	push	{r3, lr}
 80a31d2:	4b02      	ldr	r3, [pc, #8]	; (80a31dc <network_listen+0xc>)
 80a31d4:	681b      	ldr	r3, [r3, #0]
 80a31d6:	69db      	ldr	r3, [r3, #28]
 80a31d8:	9301      	str	r3, [sp, #4]
 80a31da:	bd08      	pop	{r3, pc}
 80a31dc:	080601c8 	.word	0x080601c8

080a31e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a31e0:	b508      	push	{r3, lr}
 80a31e2:	4b02      	ldr	r3, [pc, #8]	; (80a31ec <network_listening+0xc>)
 80a31e4:	681b      	ldr	r3, [r3, #0]
 80a31e6:	6a1b      	ldr	r3, [r3, #32]
 80a31e8:	9301      	str	r3, [sp, #4]
 80a31ea:	bd08      	pop	{r3, pc}
 80a31ec:	080601c8 	.word	0x080601c8

080a31f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a31f0:	b508      	push	{r3, lr}
 80a31f2:	4b02      	ldr	r3, [pc, #8]	; (80a31fc <network_set_listen_timeout+0xc>)
 80a31f4:	681b      	ldr	r3, [r3, #0]
 80a31f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a31f8:	9301      	str	r3, [sp, #4]
 80a31fa:	bd08      	pop	{r3, pc}
 80a31fc:	080601c8 	.word	0x080601c8

080a3200 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3200:	b508      	push	{r3, lr}
 80a3202:	4b02      	ldr	r3, [pc, #8]	; (80a320c <network_get_listen_timeout+0xc>)
 80a3204:	681b      	ldr	r3, [r3, #0]
 80a3206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3208:	9301      	str	r3, [sp, #4]
 80a320a:	bd08      	pop	{r3, pc}
 80a320c:	080601c8 	.word	0x080601c8

080a3210 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a3210:	b508      	push	{r3, lr}
 80a3212:	4b02      	ldr	r3, [pc, #8]	; (80a321c <network_set_hostname+0xc>)
 80a3214:	681b      	ldr	r3, [r3, #0]
 80a3216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3218:	9301      	str	r3, [sp, #4]
 80a321a:	bd08      	pop	{r3, pc}
 80a321c:	080601c8 	.word	0x080601c8

080a3220 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a3220:	b508      	push	{r3, lr}
 80a3222:	4b02      	ldr	r3, [pc, #8]	; (80a322c <network_get_hostname+0xc>)
 80a3224:	681b      	ldr	r3, [r3, #0]
 80a3226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3228:	9301      	str	r3, [sp, #4]
 80a322a:	bd08      	pop	{r3, pc}
 80a322c:	080601c8 	.word	0x080601c8

080a3230 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3230:	b508      	push	{r3, lr}
 80a3232:	4b02      	ldr	r3, [pc, #8]	; (80a323c <malloc+0xc>)
 80a3234:	681b      	ldr	r3, [r3, #0]
 80a3236:	681b      	ldr	r3, [r3, #0]
 80a3238:	9301      	str	r3, [sp, #4]
 80a323a:	bd08      	pop	{r3, pc}
 80a323c:	080601a0 	.word	0x080601a0

080a3240 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3240:	b508      	push	{r3, lr}
 80a3242:	4b02      	ldr	r3, [pc, #8]	; (80a324c <free+0xc>)
 80a3244:	681b      	ldr	r3, [r3, #0]
 80a3246:	685b      	ldr	r3, [r3, #4]
 80a3248:	9301      	str	r3, [sp, #4]
 80a324a:	bd08      	pop	{r3, pc}
 80a324c:	080601a0 	.word	0x080601a0

080a3250 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3250:	b508      	push	{r3, lr}
 80a3252:	4b02      	ldr	r3, [pc, #8]	; (80a325c <realloc+0xc>)
 80a3254:	681b      	ldr	r3, [r3, #0]
 80a3256:	689b      	ldr	r3, [r3, #8]
 80a3258:	9301      	str	r3, [sp, #4]
 80a325a:	bd08      	pop	{r3, pc}
 80a325c:	080601a0 	.word	0x080601a0

080a3260 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3260:	2100      	movs	r1, #0
 80a3262:	f7ff bf51 	b.w	80a3108 <system_delay_ms>

080a3266 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a3266:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a3268:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a326a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a326c:	b113      	cbz	r3, 80a3274 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a326e:	2203      	movs	r2, #3
 80a3270:	4601      	mov	r1, r0
 80a3272:	4798      	blx	r3
    }
 80a3274:	4620      	mov	r0, r4
 80a3276:	bd10      	pop	{r4, pc}

080a3278 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3278:	4770      	bx	lr

080a327a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a327a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a327c:	4606      	mov	r6, r0
 80a327e:	4615      	mov	r5, r2
 80a3280:	460c      	mov	r4, r1
 80a3282:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3284:	42bc      	cmp	r4, r7
 80a3286:	d006      	beq.n	80a3296 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3288:	6833      	ldr	r3, [r6, #0]
 80a328a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a328e:	689b      	ldr	r3, [r3, #8]
 80a3290:	4630      	mov	r0, r6
 80a3292:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3294:	e7f6      	b.n	80a3284 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3296:	4628      	mov	r0, r5
 80a3298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a329a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a329a:	2200      	movs	r2, #0
 80a329c:	7c00      	ldrb	r0, [r0, #16]
 80a329e:	f7ff bdf9 	b.w	80a2e94 <HAL_I2C_Write_Data>

080a32a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a32a2:	2100      	movs	r1, #0
 80a32a4:	7c00      	ldrb	r0, [r0, #16]
 80a32a6:	f7ff bdfd 	b.w	80a2ea4 <HAL_I2C_Available_Data>

080a32aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a32aa:	2100      	movs	r1, #0
 80a32ac:	7c00      	ldrb	r0, [r0, #16]
 80a32ae:	f7ff be01 	b.w	80a2eb4 <HAL_I2C_Read_Data>

080a32b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a32b2:	2100      	movs	r1, #0
 80a32b4:	7c00      	ldrb	r0, [r0, #16]
 80a32b6:	f7ff be05 	b.w	80a2ec4 <HAL_I2C_Peek_Data>

080a32ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a32ba:	2100      	movs	r1, #0
 80a32bc:	7c00      	ldrb	r0, [r0, #16]
 80a32be:	f7ff be09 	b.w	80a2ed4 <HAL_I2C_Flush_Data>

080a32c2 <_ZN7TwoWireD0Ev>:
 80a32c2:	b510      	push	{r4, lr}
 80a32c4:	4604      	mov	r4, r0
 80a32c6:	2114      	movs	r1, #20
 80a32c8:	f001 f8c1 	bl	80a444e <_ZdlPvj>
 80a32cc:	4620      	mov	r0, r4
 80a32ce:	bd10      	pop	{r4, pc}

080a32d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a32d0:	b510      	push	{r4, lr}
 80a32d2:	4604      	mov	r4, r0
 80a32d4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a32d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a32da:	60a3      	str	r3, [r4, #8]
 80a32dc:	4b04      	ldr	r3, [pc, #16]	; (80a32f0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a32de:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a32e0:	7420      	strb	r0, [r4, #16]
 80a32e2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a32e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a32e6:	f7ff fe05 	bl	80a2ef4 <HAL_I2C_Init>

}
 80a32ea:	4620      	mov	r0, r4
 80a32ec:	bd10      	pop	{r4, pc}
 80a32ee:	bf00      	nop
 80a32f0:	080a7060 	.word	0x080a7060

080a32f4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a32f4:	2300      	movs	r3, #0
 80a32f6:	461a      	mov	r2, r3
 80a32f8:	4619      	mov	r1, r3
 80a32fa:	7c00      	ldrb	r0, [r0, #16]
 80a32fc:	f7ff bdaa 	b.w	80a2e54 <HAL_I2C_Begin>

080a3300 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3300:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a3302:	2400      	movs	r4, #0
 80a3304:	7c00      	ldrb	r0, [r0, #16]
 80a3306:	9400      	str	r4, [sp, #0]
 80a3308:	f7ff fdac 	bl	80a2e64 <HAL_I2C_Request_Data>
  return result;
}
 80a330c:	b2c0      	uxtb	r0, r0
 80a330e:	b002      	add	sp, #8
 80a3310:	bd10      	pop	{r4, pc}

080a3312 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3312:	2301      	movs	r3, #1
 80a3314:	f7ff bff4 	b.w	80a3300 <_ZN7TwoWire11requestFromEhhh>

080a3318 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3318:	2200      	movs	r2, #0
 80a331a:	7c00      	ldrb	r0, [r0, #16]
 80a331c:	f7ff bdaa 	b.w	80a2e74 <HAL_I2C_Begin_Transmission>

080a3320 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3320:	2200      	movs	r2, #0
 80a3322:	7c00      	ldrb	r0, [r0, #16]
 80a3324:	f7ff bdae 	b.w	80a2e84 <HAL_I2C_End_Transmission>

080a3328 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3328:	2101      	movs	r1, #1
 80a332a:	f7ff bff9 	b.w	80a3320 <_ZN7TwoWire15endTransmissionEh>

080a332e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a332e:	2100      	movs	r1, #0
 80a3330:	7c00      	ldrb	r0, [r0, #16]
 80a3332:	f7ff bdd7 	b.w	80a2ee4 <HAL_I2C_Is_Enabled>

080a3336 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3338:	460f      	mov	r7, r1
 80a333a:	f100 0608 	add.w	r6, r0, #8
 80a333e:	1d05      	adds	r5, r0, #4
 80a3340:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3346:	220a      	movs	r2, #10
 80a3348:	4638      	mov	r0, r7
 80a334a:	f000 f95c 	bl	80a3606 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a334e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3350:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3352:	d007      	beq.n	80a3364 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3354:	2c00      	cmp	r4, #0
 80a3356:	d0f4      	beq.n	80a3342 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3358:	212e      	movs	r1, #46	; 0x2e
 80a335a:	4638      	mov	r0, r7
 80a335c:	f000 f8f6 	bl	80a354c <_ZN5Print5printEc>
 80a3360:	4404      	add	r4, r0
 80a3362:	e7ee      	b.n	80a3342 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3364:	4620      	mov	r0, r4
 80a3366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3368 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a3368:	b510      	push	{r4, lr}
 80a336a:	4604      	mov	r4, r0
 80a336c:	4b04      	ldr	r3, [pc, #16]	; (80a3380 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a336e:	2211      	movs	r2, #17
 80a3370:	f840 3b04 	str.w	r3, [r0], #4
 80a3374:	2100      	movs	r1, #0
 80a3376:	f003 fcb0 	bl	80a6cda <memset>
{
    clear();
}
 80a337a:	4620      	mov	r0, r4
 80a337c:	bd10      	pop	{r4, pc}
 80a337e:	bf00      	nop
 80a3380:	080a7088 	.word	0x080a7088

080a3384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3384:	4603      	mov	r3, r0
 80a3386:	4a07      	ldr	r2, [pc, #28]	; (80a33a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3388:	b510      	push	{r4, lr}
 80a338a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a338e:	f101 0210 	add.w	r2, r1, #16
 80a3392:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3396:	4291      	cmp	r1, r2
 80a3398:	f843 4b04 	str.w	r4, [r3], #4
 80a339c:	d1f9      	bne.n	80a3392 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a339e:	780a      	ldrb	r2, [r1, #0]
 80a33a0:	701a      	strb	r2, [r3, #0]
}
 80a33a2:	bd10      	pop	{r4, pc}
 80a33a4:	080a7088 	.word	0x080a7088

080a33a8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a33a8:	4a02      	ldr	r2, [pc, #8]	; (80a33b4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a33aa:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a33ac:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a33ae:	2204      	movs	r2, #4
 80a33b0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a33b2:	4770      	bx	lr
 80a33b4:	080a7088 	.word	0x080a7088

080a33b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a33b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a33ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a33be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a33c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a33c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a33ca:	2304      	movs	r3, #4
 80a33cc:	6041      	str	r1, [r0, #4]
 80a33ce:	7503      	strb	r3, [r0, #20]
 80a33d0:	bd10      	pop	{r4, pc}
	...

080a33d4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a33d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a33d6:	4d04      	ldr	r5, [pc, #16]	; (80a33e8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a33d8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a33da:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a33de:	9500      	str	r5, [sp, #0]
 80a33e0:	f7ff ffea 	bl	80a33b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a33e4:	b003      	add	sp, #12
 80a33e6:	bd30      	pop	{r4, r5, pc}
 80a33e8:	080a7088 	.word	0x080a7088

080a33ec <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a33ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a33ee:	780d      	ldrb	r5, [r1, #0]
 80a33f0:	788b      	ldrb	r3, [r1, #2]
 80a33f2:	784a      	ldrb	r2, [r1, #1]
 80a33f4:	78c9      	ldrb	r1, [r1, #3]
 80a33f6:	9100      	str	r1, [sp, #0]
 80a33f8:	4629      	mov	r1, r5
 80a33fa:	f7ff ffdd 	bl	80a33b8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a33fe:	b003      	add	sp, #12
 80a3400:	bd30      	pop	{r4, r5, pc}
	...

080a3404 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3404:	4a01      	ldr	r2, [pc, #4]	; (80a340c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3406:	4b02      	ldr	r3, [pc, #8]	; (80a3410 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3408:	601a      	str	r2, [r3, #0]
 80a340a:	4770      	bx	lr
 80a340c:	080a710a 	.word	0x080a710a
 80a3410:	20000208 	.word	0x20000208

080a3414 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3414:	2300      	movs	r3, #0
 80a3416:	461a      	mov	r2, r3
 80a3418:	6840      	ldr	r0, [r0, #4]
 80a341a:	f7ff bea9 	b.w	80a3170 <network_connect>

080a341e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a341e:	2200      	movs	r2, #0
 80a3420:	2102      	movs	r1, #2
 80a3422:	6840      	ldr	r0, [r0, #4]
 80a3424:	f7ff beb4 	b.w	80a3190 <network_disconnect>

080a3428 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3428:	2200      	movs	r2, #0
 80a342a:	4611      	mov	r1, r2
 80a342c:	6840      	ldr	r0, [r0, #4]
 80a342e:	f7ff bea7 	b.w	80a3180 <network_connecting>

080a3432 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3432:	2200      	movs	r2, #0
 80a3434:	4611      	mov	r1, r2
 80a3436:	6840      	ldr	r0, [r0, #4]
 80a3438:	f7ff beb2 	b.w	80a31a0 <network_ready>

080a343c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a343c:	2300      	movs	r3, #0
 80a343e:	461a      	mov	r2, r3
 80a3440:	4619      	mov	r1, r3
 80a3442:	6840      	ldr	r0, [r0, #4]
 80a3444:	f7ff beb4 	b.w	80a31b0 <network_on>

080a3448 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3448:	2300      	movs	r3, #0
 80a344a:	461a      	mov	r2, r3
 80a344c:	4619      	mov	r1, r3
 80a344e:	6840      	ldr	r0, [r0, #4]
 80a3450:	f7ff beb6 	b.w	80a31c0 <network_off>

080a3454 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3454:	2200      	movs	r2, #0
 80a3456:	f081 0101 	eor.w	r1, r1, #1
 80a345a:	6840      	ldr	r0, [r0, #4]
 80a345c:	f7ff beb8 	b.w	80a31d0 <network_listen>

080a3460 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3460:	2200      	movs	r2, #0
 80a3462:	6840      	ldr	r0, [r0, #4]
 80a3464:	f7ff bec4 	b.w	80a31f0 <network_set_listen_timeout>

080a3468 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3468:	2200      	movs	r2, #0
 80a346a:	4611      	mov	r1, r2
 80a346c:	6840      	ldr	r0, [r0, #4]
 80a346e:	f7ff bec7 	b.w	80a3200 <network_get_listen_timeout>

080a3472 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3472:	2200      	movs	r2, #0
 80a3474:	4611      	mov	r1, r2
 80a3476:	6840      	ldr	r0, [r0, #4]
 80a3478:	f7ff beb2 	b.w	80a31e0 <network_listening>

080a347c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a347c:	b570      	push	{r4, r5, r6, lr}
 80a347e:	4616      	mov	r6, r2
 80a3480:	b08e      	sub	sp, #56	; 0x38
 80a3482:	4604      	mov	r4, r0
    IPAddress addr;
 80a3484:	a808      	add	r0, sp, #32
 80a3486:	f7ff ff6f 	bl	80a3368 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a348a:	2211      	movs	r2, #17
 80a348c:	2100      	movs	r1, #0
 80a348e:	a803      	add	r0, sp, #12
 80a3490:	f003 fc23 	bl	80a6cda <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3494:	4630      	mov	r0, r6
 80a3496:	f003 fc95 	bl	80a6dc4 <strlen>
 80a349a:	2500      	movs	r5, #0
 80a349c:	4b0a      	ldr	r3, [pc, #40]	; (80a34c8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a349e:	9500      	str	r5, [sp, #0]
 80a34a0:	b281      	uxth	r1, r0
 80a34a2:	685b      	ldr	r3, [r3, #4]
 80a34a4:	aa03      	add	r2, sp, #12
 80a34a6:	4630      	mov	r0, r6
 80a34a8:	f7ff fe1e 	bl	80a30e8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a34ac:	b120      	cbz	r0, 80a34b8 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a34ae:	4629      	mov	r1, r5
 80a34b0:	4620      	mov	r0, r4
 80a34b2:	f7ff ff79 	bl	80a33a8 <_ZN9IPAddressC1Em>
 80a34b6:	e003      	b.n	80a34c0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a34b8:	a903      	add	r1, sp, #12
 80a34ba:	4620      	mov	r0, r4
 80a34bc:	f7ff ff62 	bl	80a3384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a34c0:	4620      	mov	r0, r4
 80a34c2:	b00e      	add	sp, #56	; 0x38
 80a34c4:	bd70      	pop	{r4, r5, r6, pc}
 80a34c6:	bf00      	nop
 80a34c8:	2000068c 	.word	0x2000068c

080a34cc <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a34cc:	4b03      	ldr	r3, [pc, #12]	; (80a34dc <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a34ce:	4a04      	ldr	r2, [pc, #16]	; (80a34e0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a34d0:	2804      	cmp	r0, #4
 80a34d2:	bf0c      	ite	eq
 80a34d4:	4610      	moveq	r0, r2
 80a34d6:	4618      	movne	r0, r3
 80a34d8:	4770      	bx	lr
 80a34da:	bf00      	nop
 80a34dc:	2000020c 	.word	0x2000020c
 80a34e0:	2000068c 	.word	0x2000068c

080a34e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a34e4:	4b02      	ldr	r3, [pc, #8]	; (80a34f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a34e6:	4a03      	ldr	r2, [pc, #12]	; (80a34f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a34e8:	601a      	str	r2, [r3, #0]
 80a34ea:	2200      	movs	r2, #0
 80a34ec:	605a      	str	r2, [r3, #4]
 80a34ee:	4770      	bx	lr
 80a34f0:	2000020c 	.word	0x2000020c
 80a34f4:	080a7180 	.word	0x080a7180

080a34f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a34f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a34fa:	4606      	mov	r6, r0
 80a34fc:	460d      	mov	r5, r1
 80a34fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3500:	2400      	movs	r4, #0
  while (size--) {
 80a3502:	42bd      	cmp	r5, r7
 80a3504:	d00c      	beq.n	80a3520 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3506:	6833      	ldr	r3, [r6, #0]
 80a3508:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a350c:	689b      	ldr	r3, [r3, #8]
 80a350e:	4630      	mov	r0, r6
 80a3510:	4798      	blx	r3
     if (chunk>=0)
 80a3512:	2800      	cmp	r0, #0
 80a3514:	db01      	blt.n	80a351a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3516:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3518:	e7f3      	b.n	80a3502 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a351a:	2c00      	cmp	r4, #0
 80a351c:	bf08      	it	eq
 80a351e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3520:	4620      	mov	r0, r4
 80a3522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3524 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3524:	b570      	push	{r4, r5, r6, lr}
 80a3526:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3528:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a352a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a352c:	b149      	cbz	r1, 80a3542 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a352e:	f003 fc49 	bl	80a6dc4 <strlen>
 80a3532:	682b      	ldr	r3, [r5, #0]
 80a3534:	4602      	mov	r2, r0
 80a3536:	4621      	mov	r1, r4
 80a3538:	4628      	mov	r0, r5
    }
 80a353a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a353e:	68db      	ldr	r3, [r3, #12]
 80a3540:	4718      	bx	r3
    }
 80a3542:	bd70      	pop	{r4, r5, r6, pc}

080a3544 <_ZN5Print5printEPKc>:
 80a3544:	b508      	push	{r3, lr}
 80a3546:	f7ff ffed 	bl	80a3524 <_ZN5Print5writeEPKc>
 80a354a:	bd08      	pop	{r3, pc}

080a354c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a354c:	6803      	ldr	r3, [r0, #0]
 80a354e:	689b      	ldr	r3, [r3, #8]
 80a3550:	4718      	bx	r3

080a3552 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a3552:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a3554:	680a      	ldr	r2, [r1, #0]
 80a3556:	4601      	mov	r1, r0
 80a3558:	6812      	ldr	r2, [r2, #0]
 80a355a:	4618      	mov	r0, r3
 80a355c:	4710      	bx	r2

080a355e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a355e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3560:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3562:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3564:	f7ff fff2 	bl	80a354c <_ZN5Print5printEc>
  n += print('\n');
 80a3568:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a356a:	4604      	mov	r4, r0
  n += print('\n');
 80a356c:	4628      	mov	r0, r5
 80a356e:	f7ff ffed 	bl	80a354c <_ZN5Print5printEc>
  return n;
}
 80a3572:	4420      	add	r0, r4
 80a3574:	bd38      	pop	{r3, r4, r5, pc}

080a3576 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3576:	b538      	push	{r3, r4, r5, lr}
 80a3578:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a357a:	f7ff ffd3 	bl	80a3524 <_ZN5Print5writeEPKc>
 80a357e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3580:	4628      	mov	r0, r5
 80a3582:	f7ff ffec 	bl	80a355e <_ZN5Print7printlnEv>
  return n;
}
 80a3586:	4420      	add	r0, r4
 80a3588:	bd38      	pop	{r3, r4, r5, pc}

080a358a <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80a358a:	b538      	push	{r3, r4, r5, lr}
 80a358c:	4605      	mov	r5, r0
  size_t n = print(c);
 80a358e:	f7ff ffdd 	bl	80a354c <_ZN5Print5printEc>
 80a3592:	4604      	mov	r4, r0
  n += println();
 80a3594:	4628      	mov	r0, r5
 80a3596:	f7ff ffe2 	bl	80a355e <_ZN5Print7printlnEv>
  return n;
}
 80a359a:	4420      	add	r0, r4
 80a359c:	bd38      	pop	{r3, r4, r5, pc}

080a359e <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a359e:	b538      	push	{r3, r4, r5, lr}
 80a35a0:	4605      	mov	r5, r0
   size_t n = print(x);
 80a35a2:	f7ff ffd6 	bl	80a3552 <_ZN5Print5printERK9Printable>
 80a35a6:	4604      	mov	r4, r0
   n += println();
 80a35a8:	4628      	mov	r0, r5
 80a35aa:	f7ff ffd8 	bl	80a355e <_ZN5Print7printlnEv>
   return n;
 }
 80a35ae:	4420      	add	r0, r4
 80a35b0:	bd38      	pop	{r3, r4, r5, pc}

080a35b2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a35b2:	2a01      	cmp	r2, #1
 80a35b4:	bf98      	it	ls
 80a35b6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a35b8:	b530      	push	{r4, r5, lr}
 80a35ba:	460b      	mov	r3, r1
 80a35bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a35be:	2100      	movs	r1, #0
 80a35c0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a35c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a35c8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a35cc:	fb05 3312 	mls	r3, r5, r2, r3
 80a35d0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a35d2:	2b09      	cmp	r3, #9
 80a35d4:	bf94      	ite	ls
 80a35d6:	3330      	addls	r3, #48	; 0x30
 80a35d8:	3337      	addhi	r3, #55	; 0x37
 80a35da:	b2db      	uxtb	r3, r3
 80a35dc:	4621      	mov	r1, r4
 80a35de:	f804 3901 	strb.w	r3, [r4], #-1
 80a35e2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a35e4:	2d00      	cmp	r5, #0
 80a35e6:	d1ef      	bne.n	80a35c8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a35e8:	f7ff ff9c 	bl	80a3524 <_ZN5Print5writeEPKc>
}
 80a35ec:	b00b      	add	sp, #44	; 0x2c
 80a35ee:	bd30      	pop	{r4, r5, pc}

080a35f0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a35f0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a35f2:	b922      	cbnz	r2, 80a35fe <_ZN5Print5printEmi+0xe>
 80a35f4:	6803      	ldr	r3, [r0, #0]
 80a35f6:	b2c9      	uxtb	r1, r1
 80a35f8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a35fa:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a35fc:	4718      	bx	r3
  else return printNumber(n, base);
 80a35fe:	b2d2      	uxtb	r2, r2
}
 80a3600:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3602:	f7ff bfd6 	b.w	80a35b2 <_ZN5Print11printNumberEmh>

080a3606 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3606:	f7ff bff3 	b.w	80a35f0 <_ZN5Print5printEmi>

080a360a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a360a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a360e:	4607      	mov	r7, r0
 80a3610:	460e      	mov	r6, r1
  if (base == 0) {
 80a3612:	4615      	mov	r5, r2
 80a3614:	b92a      	cbnz	r2, 80a3622 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a361a:	6803      	ldr	r3, [r0, #0]
 80a361c:	b2c9      	uxtb	r1, r1
 80a361e:	689b      	ldr	r3, [r3, #8]
 80a3620:	4718      	bx	r3
  } else if (base == 10) {
 80a3622:	2a0a      	cmp	r2, #10
 80a3624:	d102      	bne.n	80a362c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a3626:	2900      	cmp	r1, #0
 80a3628:	da01      	bge.n	80a362e <_ZN5Print5printEli+0x24>
 80a362a:	e004      	b.n	80a3636 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a362c:	b2d2      	uxtb	r2, r2
  }
}
 80a362e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3632:	f7ff bfbe 	b.w	80a35b2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3636:	212d      	movs	r1, #45	; 0x2d
 80a3638:	f7ff ff88 	bl	80a354c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a363c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a363e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3640:	4271      	negs	r1, r6
 80a3642:	4638      	mov	r0, r7
 80a3644:	f7ff ffb5 	bl	80a35b2 <_ZN5Print11printNumberEmh>
 80a3648:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a364e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a364e:	f7ff bfdc 	b.w	80a360a <_ZN5Print5printEli>

080a3652 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a3652:	b538      	push	{r3, r4, r5, lr}
 80a3654:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3656:	f7ff ffd8 	bl	80a360a <_ZN5Print5printEli>
 80a365a:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a365c:	4628      	mov	r0, r5
 80a365e:	f7ff ff7e 	bl	80a355e <_ZN5Print7printlnEv>
  return n;
}
 80a3662:	4420      	add	r0, r4
 80a3664:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3668 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a366c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a366e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3670:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3672:	4617      	mov	r7, r2
 80a3674:	461e      	mov	r6, r3
 80a3676:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a367a:	f002 ffbd 	bl	80a65f8 <__aeabi_dcmpun>
 80a367e:	b108      	cbz	r0, 80a3684 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3680:	4947      	ldr	r1, [pc, #284]	; (80a37a0 <_ZN5Print10printFloatEdh+0x138>)
 80a3682:	e012      	b.n	80a36aa <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3684:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a3688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a368c:	4b45      	ldr	r3, [pc, #276]	; (80a37a4 <_ZN5Print10printFloatEdh+0x13c>)
 80a368e:	4638      	mov	r0, r7
 80a3690:	4621      	mov	r1, r4
 80a3692:	f002 ffb1 	bl	80a65f8 <__aeabi_dcmpun>
 80a3696:	b968      	cbnz	r0, 80a36b4 <_ZN5Print10printFloatEdh+0x4c>
 80a3698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a369c:	4b41      	ldr	r3, [pc, #260]	; (80a37a4 <_ZN5Print10printFloatEdh+0x13c>)
 80a369e:	4638      	mov	r0, r7
 80a36a0:	4621      	mov	r1, r4
 80a36a2:	f002 ff8b 	bl	80a65bc <__aeabi_dcmple>
 80a36a6:	b928      	cbnz	r0, 80a36b4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a36a8:	493f      	ldr	r1, [pc, #252]	; (80a37a8 <_ZN5Print10printFloatEdh+0x140>)
 80a36aa:	4640      	mov	r0, r8
 80a36ac:	f7ff ff3a 	bl	80a3524 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a36b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a36b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a36b8:	4b3c      	ldr	r3, [pc, #240]	; (80a37ac <_ZN5Print10printFloatEdh+0x144>)
 80a36ba:	4638      	mov	r0, r7
 80a36bc:	4631      	mov	r1, r6
 80a36be:	f002 ff91 	bl	80a65e4 <__aeabi_dcmpgt>
 80a36c2:	b108      	cbz	r0, 80a36c8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a36c4:	493a      	ldr	r1, [pc, #232]	; (80a37b0 <_ZN5Print10printFloatEdh+0x148>)
 80a36c6:	e7f0      	b.n	80a36aa <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a36c8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a36cc:	4b39      	ldr	r3, [pc, #228]	; (80a37b4 <_ZN5Print10printFloatEdh+0x14c>)
 80a36ce:	4638      	mov	r0, r7
 80a36d0:	4631      	mov	r1, r6
 80a36d2:	f002 ff69 	bl	80a65a8 <__aeabi_dcmplt>
 80a36d6:	2800      	cmp	r0, #0
 80a36d8:	d1f4      	bne.n	80a36c4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a36da:	2200      	movs	r2, #0
 80a36dc:	2300      	movs	r3, #0
 80a36de:	4638      	mov	r0, r7
 80a36e0:	4631      	mov	r1, r6
 80a36e2:	f002 ff61 	bl	80a65a8 <__aeabi_dcmplt>
 80a36e6:	b138      	cbz	r0, 80a36f8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a36e8:	212d      	movs	r1, #45	; 0x2d
 80a36ea:	4640      	mov	r0, r8
 80a36ec:	f7ff ff2e 	bl	80a354c <_ZN5Print5printEc>
     number = -number;
 80a36f0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a36f4:	4604      	mov	r4, r0
 80a36f6:	e000      	b.n	80a36fa <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a36f8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a36fa:	492f      	ldr	r1, [pc, #188]	; (80a37b8 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a36fc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3700:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a3702:	fa5f f389 	uxtb.w	r3, r9
 80a3706:	429d      	cmp	r5, r3
 80a3708:	d906      	bls.n	80a3718 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a370a:	2200      	movs	r2, #0
 80a370c:	4b2b      	ldr	r3, [pc, #172]	; (80a37bc <_ZN5Print10printFloatEdh+0x154>)
 80a370e:	f002 fe03 	bl	80a6318 <__aeabi_ddiv>
 80a3712:	f109 0901 	add.w	r9, r9, #1
 80a3716:	e7f4      	b.n	80a3702 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a3718:	463a      	mov	r2, r7
 80a371a:	4633      	mov	r3, r6
 80a371c:	f002 fb20 	bl	80a5d60 <__adddf3>
 80a3720:	460f      	mov	r7, r1
 80a3722:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3724:	f002 ffa6 	bl	80a6674 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3728:	220a      	movs	r2, #10
 80a372a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a372c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a372e:	4640      	mov	r0, r8
 80a3730:	f7ff ff3f 	bl	80a35b2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3734:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a3736:	b37d      	cbz	r5, 80a3798 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a3738:	4648      	mov	r0, r9
 80a373a:	f002 fc4d 	bl	80a5fd8 <__aeabi_ui2d>
 80a373e:	4602      	mov	r2, r0
 80a3740:	460b      	mov	r3, r1
 80a3742:	4630      	mov	r0, r6
 80a3744:	4639      	mov	r1, r7
 80a3746:	f002 fb09 	bl	80a5d5c <__aeabi_dsub>
 80a374a:	4606      	mov	r6, r0
 80a374c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a374e:	4640      	mov	r0, r8
 80a3750:	491b      	ldr	r1, [pc, #108]	; (80a37c0 <_ZN5Print10printFloatEdh+0x158>)
 80a3752:	f7ff fee7 	bl	80a3524 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a3756:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a3758:	4b18      	ldr	r3, [pc, #96]	; (80a37bc <_ZN5Print10printFloatEdh+0x154>)
 80a375a:	2200      	movs	r2, #0
 80a375c:	4630      	mov	r0, r6
 80a375e:	4639      	mov	r1, r7
 80a3760:	f002 fcb0 	bl	80a60c4 <__aeabi_dmul>
 80a3764:	460f      	mov	r7, r1
 80a3766:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a3768:	f002 ff5c 	bl	80a6624 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a376c:	220a      	movs	r2, #10
 80a376e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a3770:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3772:	4640      	mov	r0, r8
 80a3774:	f7ff ff49 	bl	80a360a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a3778:	4404      	add	r4, r0
    remainder -= toPrint;
 80a377a:	4648      	mov	r0, r9
 80a377c:	f002 fc3c 	bl	80a5ff8 <__aeabi_i2d>
 80a3780:	4602      	mov	r2, r0
 80a3782:	460b      	mov	r3, r1
 80a3784:	4630      	mov	r0, r6
 80a3786:	4639      	mov	r1, r7
 80a3788:	f002 fae8 	bl	80a5d5c <__aeabi_dsub>
 80a378c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a378e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a3792:	4606      	mov	r6, r0
 80a3794:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3796:	d1df      	bne.n	80a3758 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3798:	4620      	mov	r0, r4
 80a379a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a379e:	bf00      	nop
 80a37a0:	080a71ac 	.word	0x080a71ac
 80a37a4:	7fefffff 	.word	0x7fefffff
 80a37a8:	080a71b4 	.word	0x080a71b4
 80a37ac:	41efffff 	.word	0x41efffff
 80a37b0:	080a71b0 	.word	0x080a71b0
 80a37b4:	c1efffff 	.word	0xc1efffff
 80a37b8:	3fe00000 	.word	0x3fe00000
 80a37bc:	40240000 	.word	0x40240000
 80a37c0:	080a6e28 	.word	0x080a6e28

080a37c4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a37c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a37c6:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a37ca:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a37cc:	9100      	str	r1, [sp, #0]
 80a37ce:	f7ff ff4b 	bl	80a3668 <_ZN5Print10printFloatEdh>
 80a37d2:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a37d4:	4628      	mov	r0, r5
 80a37d6:	f7ff fec2 	bl	80a355e <_ZN5Print7printlnEv>
  return n;
}
 80a37da:	4420      	add	r0, r4
 80a37dc:	b003      	add	sp, #12
 80a37de:	bd30      	pop	{r4, r5, pc}

080a37e0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a37e0:	b510      	push	{r4, lr}
 80a37e2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a37e4:	f7ff fd3f 	bl	80a3266 <_ZNSt14_Function_baseD1Ev>
 80a37e8:	4620      	mov	r0, r4
 80a37ea:	bd10      	pop	{r4, pc}

080a37ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a37ec:	4803      	ldr	r0, [pc, #12]	; (80a37fc <_GLOBAL__sub_I_RGB+0x10>)
 80a37ee:	2300      	movs	r3, #0
 80a37f0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a37f2:	4a03      	ldr	r2, [pc, #12]	; (80a3800 <_GLOBAL__sub_I_RGB+0x14>)
 80a37f4:	4903      	ldr	r1, [pc, #12]	; (80a3804 <_GLOBAL__sub_I_RGB+0x18>)
 80a37f6:	f000 be25 	b.w	80a4444 <__aeabi_atexit>
 80a37fa:	bf00      	nop
 80a37fc:	20000214 	.word	0x20000214
 80a3800:	20000088 	.word	0x20000088
 80a3804:	080a37e1 	.word	0x080a37e1

080a3808 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a3808:	4770      	bx	lr

080a380a <_ZN8SPIClassD0Ev>:
 80a380a:	b510      	push	{r4, lr}
 80a380c:	4604      	mov	r4, r0
 80a380e:	2110      	movs	r1, #16
 80a3810:	f000 fe1d 	bl	80a444e <_ZdlPvj>
 80a3814:	4620      	mov	r0, r4
 80a3816:	bd10      	pop	{r4, pc}

080a3818 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a3818:	b570      	push	{r4, r5, r6, lr}
 80a381a:	4604      	mov	r4, r0
 80a381c:	460e      	mov	r6, r1
 80a381e:	4b07      	ldr	r3, [pc, #28]	; (80a383c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a3820:	2500      	movs	r5, #0
 80a3822:	6003      	str	r3, [r0, #0]
 80a3824:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a3828:	f7ff fad4 	bl	80a2dd4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a382c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a382e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a3830:	f7ff fbc2 	bl	80a2fb8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3834:	60a5      	str	r5, [r4, #8]
}
 80a3836:	4620      	mov	r0, r4
 80a3838:	bd70      	pop	{r4, r5, r6, pc}
 80a383a:	bf00      	nop
 80a383c:	080a71c0 	.word	0x080a71c0

080a3840 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a3840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a3844:	7900      	ldrb	r0, [r0, #4]
 80a3846:	f7ff bb8f 	b.w	80a2f68 <HAL_SPI_Begin>

080a384a <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a384a:	7900      	ldrb	r0, [r0, #4]
 80a384c:	f7ff bb94 	b.w	80a2f78 <HAL_SPI_Set_Bit_Order>

080a3850 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a3850:	7900      	ldrb	r0, [r0, #4]
 80a3852:	f7ff bb99 	b.w	80a2f88 <HAL_SPI_Set_Data_Mode>
	...

080a3858 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a3858:	4a05      	ldr	r2, [pc, #20]	; (80a3870 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a385a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a385c:	5c99      	ldrb	r1, [r3, r2]
 80a385e:	4281      	cmp	r1, r0
 80a3860:	d002      	beq.n	80a3868 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a3862:	3301      	adds	r3, #1
 80a3864:	2b08      	cmp	r3, #8
 80a3866:	d1f9      	bne.n	80a385c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a3868:	1c58      	adds	r0, r3, #1
}
 80a386a:	b2c0      	uxtb	r0, r0
 80a386c:	4770      	bx	lr
 80a386e:	bf00      	nop
 80a3870:	080a71c8 	.word	0x080a71c8

080a3874 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a3874:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a3876:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a3878:	6018      	str	r0, [r3, #0]
 80a387a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a387c:	6818      	ldr	r0, [r3, #0]
 80a387e:	b2e5      	uxtb	r5, r4
 80a3880:	4288      	cmp	r0, r1
 80a3882:	d906      	bls.n	80a3892 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a3884:	3401      	adds	r4, #1
 80a3886:	2c08      	cmp	r4, #8
 80a3888:	d002      	beq.n	80a3890 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a388a:	0840      	lsrs	r0, r0, #1
 80a388c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a388e:	e7f5      	b.n	80a387c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a3890:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a3892:	4b02      	ldr	r3, [pc, #8]	; (80a389c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a3894:	5d5b      	ldrb	r3, [r3, r5]
 80a3896:	7013      	strb	r3, [r2, #0]
 80a3898:	bd30      	pop	{r4, r5, pc}
 80a389a:	bf00      	nop
 80a389c:	080a71c8 	.word	0x080a71c8

080a38a0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a38a0:	b570      	push	{r4, r5, r6, lr}
 80a38a2:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a38a4:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a38a8:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a38aa:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a38ac:	2214      	movs	r2, #20
 80a38ae:	2100      	movs	r1, #0
 80a38b0:	a803      	add	r0, sp, #12
 80a38b2:	f003 fa12 	bl	80a6cda <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a38b6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a38b8:	a903      	add	r1, sp, #12
 80a38ba:	4630      	mov	r0, r6
 80a38bc:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a38be:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a38c2:	f7ff fb89 	bl	80a2fd8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a38c6:	ab02      	add	r3, sp, #8
 80a38c8:	f10d 0207 	add.w	r2, sp, #7
 80a38cc:	4629      	mov	r1, r5
 80a38ce:	9804      	ldr	r0, [sp, #16]
 80a38d0:	f7ff ffd0 	bl	80a3874 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a38d4:	7920      	ldrb	r0, [r4, #4]
 80a38d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a38da:	f7ff fb5d 	bl	80a2f98 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a38de:	9802      	ldr	r0, [sp, #8]
 80a38e0:	b008      	add	sp, #32
 80a38e2:	bd70      	pop	{r4, r5, r6, pc}

080a38e4 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a38e4:	b538      	push	{r3, r4, r5, lr}
 80a38e6:	4604      	mov	r4, r0
    if (dividerReference)
 80a38e8:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a38ea:	4608      	mov	r0, r1
    if (dividerReference)
 80a38ec:	b14d      	cbz	r5, 80a3902 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a38ee:	f7ff ffb3 	bl	80a3858 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a38f2:	2201      	movs	r2, #1
 80a38f4:	fa25 f100 	lsr.w	r1, r5, r0
 80a38f8:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a38fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a38fe:	f7ff bfcf 	b.w	80a38a0 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a3902:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a3904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a3908:	f7ff bb46 	b.w	80a2f98 <HAL_SPI_Set_Clock_Divider>

080a390c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a390c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a390e:	7900      	ldrb	r0, [r0, #4]
 80a3910:	f7ff fb4a 	bl	80a2fa8 <HAL_SPI_Send_Receive_Data>
}
 80a3914:	b2c0      	uxtb	r0, r0
 80a3916:	bd08      	pop	{r3, pc}

080a3918 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a3918:	7900      	ldrb	r0, [r0, #4]
 80a391a:	f7ff bb55 	b.w	80a2fc8 <HAL_SPI_Is_Enabled>

080a391e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a391e:	b510      	push	{r4, lr}
 80a3920:	4604      	mov	r4, r0
{
	free(buffer);
 80a3922:	6800      	ldr	r0, [r0, #0]
 80a3924:	f7ff fc8c 	bl	80a3240 <free>
}
 80a3928:	4620      	mov	r0, r4
 80a392a:	bd10      	pop	{r4, pc}

080a392c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a392c:	b510      	push	{r4, lr}
 80a392e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3930:	6800      	ldr	r0, [r0, #0]
 80a3932:	b108      	cbz	r0, 80a3938 <_ZN6String10invalidateEv+0xc>
 80a3934:	f7ff fc84 	bl	80a3240 <free>
	buffer = NULL;
 80a3938:	2300      	movs	r3, #0
 80a393a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a393c:	60a3      	str	r3, [r4, #8]
 80a393e:	6063      	str	r3, [r4, #4]
 80a3940:	bd10      	pop	{r4, pc}

080a3942 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3942:	b538      	push	{r3, r4, r5, lr}
 80a3944:	4604      	mov	r4, r0
 80a3946:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3948:	6800      	ldr	r0, [r0, #0]
 80a394a:	3101      	adds	r1, #1
 80a394c:	f7ff fc80 	bl	80a3250 <realloc>
	if (newbuffer) {
 80a3950:	b110      	cbz	r0, 80a3958 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3952:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a3956:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3958:	bd38      	pop	{r3, r4, r5, pc}

080a395a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a395a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a395c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a395e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3960:	b113      	cbz	r3, 80a3968 <_ZN6String7reserveEj+0xe>
 80a3962:	6843      	ldr	r3, [r0, #4]
 80a3964:	428b      	cmp	r3, r1
 80a3966:	d207      	bcs.n	80a3978 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3968:	4620      	mov	r0, r4
 80a396a:	f7ff ffea 	bl	80a3942 <_ZN6String12changeBufferEj>
 80a396e:	b120      	cbz	r0, 80a397a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3970:	68a3      	ldr	r3, [r4, #8]
 80a3972:	b90b      	cbnz	r3, 80a3978 <_ZN6String7reserveEj+0x1e>
 80a3974:	6822      	ldr	r2, [r4, #0]
 80a3976:	7013      	strb	r3, [r2, #0]
 80a3978:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a397a:	bd10      	pop	{r4, pc}

080a397c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a397c:	b570      	push	{r4, r5, r6, lr}
 80a397e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3980:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3982:	4604      	mov	r4, r0
 80a3984:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3986:	f7ff ffe8 	bl	80a395a <_ZN6String7reserveEj>
 80a398a:	b918      	cbnz	r0, 80a3994 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a398c:	4620      	mov	r0, r4
 80a398e:	f7ff ffcd 	bl	80a392c <_ZN6String10invalidateEv>
		return *this;
 80a3992:	e009      	b.n	80a39a8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3994:	462a      	mov	r2, r5
 80a3996:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3998:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a399a:	6820      	ldr	r0, [r4, #0]
 80a399c:	f003 f992 	bl	80a6cc4 <memcpy>
	buffer[len] = 0;
 80a39a0:	6822      	ldr	r2, [r4, #0]
 80a39a2:	68a3      	ldr	r3, [r4, #8]
 80a39a4:	2100      	movs	r1, #0
 80a39a6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a39a8:	4620      	mov	r0, r4
 80a39aa:	bd70      	pop	{r4, r5, r6, pc}

080a39ac <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a39ac:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a39ae:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a39b0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a39b2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a39b4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a39b6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a39b8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a39ba:	460d      	mov	r5, r1
 80a39bc:	b139      	cbz	r1, 80a39ce <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a39be:	4608      	mov	r0, r1
 80a39c0:	f003 fa00 	bl	80a6dc4 <strlen>
 80a39c4:	4629      	mov	r1, r5
 80a39c6:	4602      	mov	r2, r0
 80a39c8:	4620      	mov	r0, r4
 80a39ca:	f7ff ffd7 	bl	80a397c <_ZN6String4copyEPKcj>
}
 80a39ce:	4620      	mov	r0, r4
 80a39d0:	bd38      	pop	{r3, r4, r5, pc}

080a39d2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a39d2:	b538      	push	{r3, r4, r5, lr}
 80a39d4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a39d6:	460c      	mov	r4, r1
 80a39d8:	b141      	cbz	r1, 80a39ec <_ZN6StringaSEPKc+0x1a>
 80a39da:	4608      	mov	r0, r1
 80a39dc:	f003 f9f2 	bl	80a6dc4 <strlen>
 80a39e0:	4621      	mov	r1, r4
 80a39e2:	4602      	mov	r2, r0
 80a39e4:	4628      	mov	r0, r5
 80a39e6:	f7ff ffc9 	bl	80a397c <_ZN6String4copyEPKcj>
 80a39ea:	e001      	b.n	80a39f0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a39ec:	f7ff ff9e 	bl	80a392c <_ZN6String10invalidateEv>

	return *this;
}
 80a39f0:	4628      	mov	r0, r5
 80a39f2:	bd38      	pop	{r3, r4, r5, pc}

080a39f4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a39f4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a39f6:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a39f8:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a39fa:	b912      	cbnz	r2, 80a3a02 <_ZNK6String6equalsEPKc+0xe>
 80a39fc:	b919      	cbnz	r1, 80a3a06 <_ZNK6String6equalsEPKc+0x12>
 80a39fe:	2001      	movs	r0, #1
 80a3a00:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3a02:	b911      	cbnz	r1, 80a3a0a <_ZNK6String6equalsEPKc+0x16>
 80a3a04:	6803      	ldr	r3, [r0, #0]
 80a3a06:	7818      	ldrb	r0, [r3, #0]
 80a3a08:	e002      	b.n	80a3a10 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a3a0a:	6800      	ldr	r0, [r0, #0]
 80a3a0c:	f003 f9d0 	bl	80a6db0 <strcmp>
 80a3a10:	fab0 f080 	clz	r0, r0
 80a3a14:	0940      	lsrs	r0, r0, #5
}
 80a3a16:	bd08      	pop	{r3, pc}

080a3a18 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a3a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a3a1c:	4b03      	ldr	r3, [pc, #12]	; (80a3a2c <_GLOBAL__sub_I_System+0x14>)
 80a3a1e:	2000      	movs	r0, #0
 80a3a20:	7018      	strb	r0, [r3, #0]
 80a3a22:	8058      	strh	r0, [r3, #2]
 80a3a24:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3a26:	f7ff bb67 	b.w	80a30f8 <set_system_mode>
 80a3a2a:	bf00      	nop
 80a3a2c:	20000224 	.word	0x20000224

080a3a30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3a30:	4b02      	ldr	r3, [pc, #8]	; (80a3a3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3a32:	681a      	ldr	r2, [r3, #0]
 80a3a34:	4b02      	ldr	r3, [pc, #8]	; (80a3a40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3a36:	601a      	str	r2, [r3, #0]
 80a3a38:	4770      	bx	lr
 80a3a3a:	bf00      	nop
 80a3a3c:	20000020 	.word	0x20000020
 80a3a40:	2000022c 	.word	0x2000022c

080a3a44 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a3a44:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a3a46:	6804      	ldr	r4, [r0, #0]
 80a3a48:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a3a4a:	46a4      	mov	ip, r4
    }
 80a3a4c:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a3a4e:	4760      	bx	ip

080a3a50 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a3a50:	6803      	ldr	r3, [r0, #0]
 80a3a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3a54:	4718      	bx	r3

080a3a56 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a3a56:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a3a58:	4770      	bx	lr

080a3a5a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a3a5a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a3a5c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a3a5e:	1a10      	subs	r0, r2, r0
 80a3a60:	4770      	bx	lr

080a3a62 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a3a62:	b513      	push	{r0, r1, r4, lr}
 80a3a64:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a3a66:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a3a68:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a3a6c:	68d4      	ldr	r4, [r2, #12]
 80a3a6e:	4619      	mov	r1, r3
 80a3a70:	2201      	movs	r2, #1
 80a3a72:	47a0      	blx	r4
}
 80a3a74:	b002      	add	sp, #8
 80a3a76:	bd10      	pop	{r4, pc}

080a3a78 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a3a78:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a3a7a:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a3a7c:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a3a7e:	691b      	ldr	r3, [r3, #16]
 80a3a80:	4798      	blx	r3
 80a3a82:	b128      	cbz	r0, 80a3a90 <_ZN3UDP4readEv+0x18>
 80a3a84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3a86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3a88:	1c59      	adds	r1, r3, #1
 80a3a8a:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a3a8c:	5cd0      	ldrb	r0, [r2, r3]
 80a3a8e:	bd10      	pop	{r4, pc}
 80a3a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3a94:	bd10      	pop	{r4, pc}

080a3a96 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a3a96:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a3a98:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a3a9a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a3a9c:	691b      	ldr	r3, [r3, #16]
 80a3a9e:	4798      	blx	r3
 80a3aa0:	b118      	cbz	r0, 80a3aaa <_ZN3UDP4peekEv+0x14>
 80a3aa2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3aa4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3aa6:	5cd0      	ldrb	r0, [r2, r3]
 80a3aa8:	bd10      	pop	{r4, pc}
 80a3aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3aae:	bd10      	pop	{r4, pc}

080a3ab0 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a3ab0:	4770      	bx	lr

080a3ab2 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a3ab2:	4603      	mov	r3, r0
 80a3ab4:	4608      	mov	r0, r1
 80a3ab6:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a3ab8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a3aba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3abc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a3abe:	6803      	ldr	r3, [r0, #0]
 80a3ac0:	1a52      	subs	r2, r2, r1
 80a3ac2:	68db      	ldr	r3, [r3, #12]
 80a3ac4:	4421      	add	r1, r4
}
 80a3ac6:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a3ac8:	4718      	bx	r3

080a3aca <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a3aca:	f1a0 0010 	sub.w	r0, r0, #16
 80a3ace:	f7ff bff0 	b.w	80a3ab2 <_ZNK3UDP7printToER5Print>

080a3ad2 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a3ad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a3ad4:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a3ad6:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a3ad8:	460f      	mov	r7, r1
 80a3ada:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a3adc:	f7ff fcf6 	bl	80a34cc <_ZN5spark12NetworkClass4fromEm>
 80a3ae0:	6803      	ldr	r3, [r0, #0]
 80a3ae2:	68db      	ldr	r3, [r3, #12]
 80a3ae4:	4798      	blx	r3
 80a3ae6:	b1b8      	cbz	r0, 80a3b18 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a3ae8:	2102      	movs	r1, #2
 80a3aea:	463b      	mov	r3, r7
 80a3aec:	2211      	movs	r2, #17
 80a3aee:	4608      	mov	r0, r1
 80a3af0:	9600      	str	r6, [sp, #0]
 80a3af2:	f7ff fa11 	bl	80a2f18 <socket_create>
 80a3af6:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a3af8:	f7ff fa06 	bl	80a2f08 <socket_handle_valid>
 80a3afc:	4604      	mov	r4, r0
 80a3afe:	b130      	cbz	r0, 80a3b0e <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b00:	2300      	movs	r3, #0
 80a3b02:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a3b04:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a3b06:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a3b08:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a3b0a:	2001      	movs	r0, #1
 80a3b0c:	e004      	b.n	80a3b18 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a3b0e:	682b      	ldr	r3, [r5, #0]
 80a3b10:	4628      	mov	r0, r5
 80a3b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3b14:	4798      	blx	r3
            bound = false;
 80a3b16:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a3b18:	b003      	add	sp, #12
 80a3b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3b1c <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a3b1c:	b538      	push	{r3, r4, r5, lr}
 80a3b1e:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a3b20:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a3b22:	f7ff fa19 	bl	80a2f58 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a3b26:	4285      	cmp	r5, r0
 80a3b28:	d002      	beq.n	80a3b30 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a3b2a:	6960      	ldr	r0, [r4, #20]
 80a3b2c:	f7ff fa0c 	bl	80a2f48 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a3b30:	f7ff fa12 	bl	80a2f58 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b34:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a3b36:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b38:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3b3a:	8723      	strh	r3, [r4, #56]	; 0x38
 80a3b3c:	bd38      	pop	{r3, r4, r5, pc}

080a3b3e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a3b3e:	b530      	push	{r4, r5, lr}
 80a3b40:	b087      	sub	sp, #28
 80a3b42:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a3b46:	2502      	movs	r5, #2
 80a3b48:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a3b4c:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3b50:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a3b52:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3b54:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a3b58:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a3b5c:	799c      	ldrb	r4, [r3, #6]
 80a3b5e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3b62:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3b64:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3b66:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3b6a:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a3b6e:	2310      	movs	r3, #16
 80a3b70:	9301      	str	r3, [sp, #4]
 80a3b72:	ab02      	add	r3, sp, #8
 80a3b74:	9300      	str	r3, [sp, #0]
 80a3b76:	6940      	ldr	r0, [r0, #20]
 80a3b78:	2300      	movs	r3, #0
 80a3b7a:	f7ff f9dd 	bl	80a2f38 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a3b7e:	b007      	add	sp, #28
 80a3b80:	bd30      	pop	{r4, r5, pc}

080a3b82 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3b82:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3b84:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3b86:	4605      	mov	r5, r0
 80a3b88:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3b8a:	b113      	cbz	r3, 80a3b92 <_ZN3UDP5writeEPKhj+0x10>
 80a3b8c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a3b8e:	1a24      	subs	r4, r4, r0
 80a3b90:	e000      	b.n	80a3b94 <_ZN3UDP5writeEPKhj+0x12>
 80a3b92:	461c      	mov	r4, r3
 80a3b94:	4294      	cmp	r4, r2
 80a3b96:	bf28      	it	cs
 80a3b98:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a3b9a:	4418      	add	r0, r3
 80a3b9c:	4622      	mov	r2, r4
 80a3b9e:	f003 f891 	bl	80a6cc4 <memcpy>
    _offset += size;
 80a3ba2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3ba4:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a3ba6:	4423      	add	r3, r4
 80a3ba8:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3baa:	bd38      	pop	{r3, r4, r5, pc}

080a3bac <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3bac:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a3bae:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3bb0:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a3bb2:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3bb4:	460e      	mov	r6, r1
 80a3bb6:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a3bb8:	4798      	blx	r3
 80a3bba:	b188      	cbz	r0, 80a3be0 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a3bbc:	6823      	ldr	r3, [r4, #0]
 80a3bbe:	4620      	mov	r0, r4
 80a3bc0:	691b      	ldr	r3, [r3, #16]
 80a3bc2:	4798      	blx	r3
 80a3bc4:	4285      	cmp	r5, r0
 80a3bc6:	bfa8      	it	ge
 80a3bc8:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a3bca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3bcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a3bce:	462a      	mov	r2, r5
 80a3bd0:	4419      	add	r1, r3
 80a3bd2:	4630      	mov	r0, r6
 80a3bd4:	f003 f876 	bl	80a6cc4 <memcpy>
      _offset += read;
 80a3bd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3bda:	442b      	add	r3, r5
 80a3bdc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a3bde:	e001      	b.n	80a3be4 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a3be0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a3be4:	4628      	mov	r0, r5
 80a3be6:	bd70      	pop	{r4, r5, r6, pc}

080a3be8 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3bea:	4604      	mov	r4, r0
 80a3bec:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3bee:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3bf0:	460d      	mov	r5, r1
 80a3bf2:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3bf4:	f7ff fc6a 	bl	80a34cc <_ZN5spark12NetworkClass4fromEm>
 80a3bf8:	6803      	ldr	r3, [r0, #0]
 80a3bfa:	68db      	ldr	r3, [r3, #12]
 80a3bfc:	4798      	blx	r3
 80a3bfe:	b310      	cbz	r0, 80a3c46 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a3c00:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a3c02:	f7ff f9a9 	bl	80a2f58 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3c06:	4287      	cmp	r7, r0
 80a3c08:	d01d      	beq.n	80a3c46 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a3c0a:	b1e5      	cbz	r5, 80a3c46 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a3c0c:	ab08      	add	r3, sp, #32
 80a3c0e:	2210      	movs	r2, #16
 80a3c10:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a3c14:	9301      	str	r3, [sp, #4]
 80a3c16:	eb0d 0302 	add.w	r3, sp, r2
 80a3c1a:	9300      	str	r3, [sp, #0]
 80a3c1c:	4629      	mov	r1, r5
 80a3c1e:	2300      	movs	r3, #0
 80a3c20:	4632      	mov	r2, r6
 80a3c22:	6960      	ldr	r0, [r4, #20]
 80a3c24:	f7ff f980 	bl	80a2f28 <socket_receivefrom>
        if (ret >= 0)
 80a3c28:	1e05      	subs	r5, r0, #0
 80a3c2a:	db0e      	blt.n	80a3c4a <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a3c2c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a3c30:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a3c34:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a3c36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a3c3a:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a3c3c:	f104 001c 	add.w	r0, r4, #28
 80a3c40:	f7ff fbd4 	bl	80a33ec <_ZN9IPAddressaSEPKh>
 80a3c44:	e001      	b.n	80a3c4a <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a3c46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a3c4a:	4628      	mov	r0, r5
 80a3c4c:	b009      	add	sp, #36	; 0x24
 80a3c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3c50 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a3c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c54:	4606      	mov	r6, r0
 80a3c56:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a3c58:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a3c5a:	460d      	mov	r5, r1
 80a3c5c:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a3c5e:	f7ff fc35 	bl	80a34cc <_ZN5spark12NetworkClass4fromEm>
 80a3c62:	6803      	ldr	r3, [r0, #0]
 80a3c64:	68db      	ldr	r3, [r3, #12]
 80a3c66:	4798      	blx	r3
 80a3c68:	b1f8      	cbz	r0, 80a3caa <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a3c6a:	4628      	mov	r0, r5
 80a3c6c:	f003 f8aa 	bl	80a6dc4 <strlen>
 80a3c70:	2400      	movs	r4, #0
 80a3c72:	b281      	uxth	r1, r0
 80a3c74:	9400      	str	r4, [sp, #0]
 80a3c76:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a3c78:	aa03      	add	r2, sp, #12
 80a3c7a:	4628      	mov	r0, r5
 80a3c7c:	f7ff fa34 	bl	80a30e8 <inet_gethostbyname>
 80a3c80:	b990      	cbnz	r0, 80a3ca8 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a3c82:	a903      	add	r1, sp, #12
 80a3c84:	a808      	add	r0, sp, #32
 80a3c86:	f7ff fb7d 	bl	80a3384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a3c8a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3c8c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a3c8e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a3c90:	4b07      	ldr	r3, [pc, #28]	; (80a3cb0 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a3c92:	ad09      	add	r5, sp, #36	; 0x24
 80a3c94:	930e      	str	r3, [sp, #56]	; 0x38
 80a3c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3c9a:	682b      	ldr	r3, [r5, #0]
 80a3c9c:	4642      	mov	r2, r8
 80a3c9e:	7023      	strb	r3, [r4, #0]
 80a3ca0:	a90e      	add	r1, sp, #56	; 0x38
 80a3ca2:	4630      	mov	r0, r6
 80a3ca4:	47b8      	blx	r7
 80a3ca6:	e000      	b.n	80a3caa <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a3ca8:	4620      	mov	r0, r4
}
 80a3caa:	b014      	add	sp, #80	; 0x50
 80a3cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3cb0:	080a7088 	.word	0x080a7088

080a3cb4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a3cb4:	b570      	push	{r4, r5, r6, lr}
 80a3cb6:	4604      	mov	r4, r0
 80a3cb8:	4606      	mov	r6, r0
 80a3cba:	4b05      	ldr	r3, [pc, #20]	; (80a3cd0 <_ZN3UDP8remoteIPEv+0x1c>)
 80a3cbc:	f101 0520 	add.w	r5, r1, #32
 80a3cc0:	f844 3b04 	str.w	r3, [r4], #4
 80a3cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3cc8:	682b      	ldr	r3, [r5, #0]
 80a3cca:	4630      	mov	r0, r6
 80a3ccc:	7023      	strb	r3, [r4, #0]
 80a3cce:	bd70      	pop	{r4, r5, r6, pc}
 80a3cd0:	080a7088 	.word	0x080a7088

080a3cd4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3cd6:	4694      	mov	ip, r2
 80a3cd8:	468e      	mov	lr, r1
 80a3cda:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3cdc:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3cde:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3ce0:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a3ce2:	4a09      	ldr	r2, [pc, #36]	; (80a3d08 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a3ce4:	ac03      	add	r4, sp, #12
 80a3ce6:	1d1d      	adds	r5, r3, #4
 80a3ce8:	9202      	str	r2, [sp, #8]
 80a3cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3cee:	682b      	ldr	r3, [r5, #0]
 80a3cf0:	4662      	mov	r2, ip
 80a3cf2:	7023      	strb	r3, [r4, #0]
 80a3cf4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a3cf8:	4671      	mov	r1, lr
 80a3cfa:	9300      	str	r3, [sp, #0]
 80a3cfc:	4630      	mov	r0, r6
 80a3cfe:	ab02      	add	r3, sp, #8
 80a3d00:	47b8      	blx	r7
    }
 80a3d02:	b009      	add	sp, #36	; 0x24
 80a3d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3d06:	bf00      	nop
 80a3d08:	080a7088 	.word	0x080a7088

080a3d0c <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a3d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3d0e:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a3d10:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a3d12:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a3d14:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a3d16:	4b0d      	ldr	r3, [pc, #52]	; (80a3d4c <_ZN3UDP9endPacketEv+0x40>)
 80a3d18:	ad03      	add	r5, sp, #12
 80a3d1a:	f100 0620 	add.w	r6, r0, #32
 80a3d1e:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a3d22:	9302      	str	r3, [sp, #8]
 80a3d24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a3d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3d28:	6833      	ldr	r3, [r6, #0]
 80a3d2a:	4672      	mov	r2, lr
 80a3d2c:	702b      	strb	r3, [r5, #0]
 80a3d2e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a3d30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a3d32:	9300      	str	r3, [sp, #0]
 80a3d34:	4620      	mov	r0, r4
 80a3d36:	ab02      	add	r3, sp, #8
 80a3d38:	47b8      	blx	r7
 80a3d3a:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a3d3c:	6823      	ldr	r3, [r4, #0]
 80a3d3e:	4620      	mov	r0, r4
 80a3d40:	69db      	ldr	r3, [r3, #28]
 80a3d42:	4798      	blx	r3
    return result;
}
 80a3d44:	4628      	mov	r0, r5
 80a3d46:	b009      	add	sp, #36	; 0x24
 80a3d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3d4a:	bf00      	nop
 80a3d4c:	080a7088 	.word	0x080a7088

080a3d50 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a3d50:	b538      	push	{r3, r4, r5, lr}
 80a3d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3d56:	6083      	str	r3, [r0, #8]
 80a3d58:	4b0b      	ldr	r3, [pc, #44]	; (80a3d88 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3d5a:	2500      	movs	r5, #0
 80a3d5c:	f103 0208 	add.w	r2, r3, #8
 80a3d60:	336c      	adds	r3, #108	; 0x6c
 80a3d62:	6002      	str	r2, [r0, #0]
 80a3d64:	6103      	str	r3, [r0, #16]
 80a3d66:	6045      	str	r5, [r0, #4]
 80a3d68:	4604      	mov	r4, r0
 80a3d6a:	f7ff f8f5 	bl	80a2f58 <socket_handle_invalid>
 80a3d6e:	6160      	str	r0, [r4, #20]
 80a3d70:	f104 001c 	add.w	r0, r4, #28
 80a3d74:	f7ff faf8 	bl	80a3368 <_ZN9IPAddressC1Ev>
 80a3d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a3d7c:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a3d7e:	8725      	strh	r5, [r4, #56]	; 0x38
 80a3d80:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a3d82:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a3d84:	4620      	mov	r0, r4
 80a3d86:	bd38      	pop	{r3, r4, r5, pc}
 80a3d88:	080a71fc 	.word	0x080a71fc

080a3d8c <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3d8c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a3d8e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3d92:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a3d94:	b123      	cbz	r3, 80a3da0 <_ZN3UDP13releaseBufferEv+0x14>
 80a3d96:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a3d98:	b110      	cbz	r0, 80a3da0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a3d9a:	2101      	movs	r1, #1
 80a3d9c:	f000 fb57 	bl	80a444e <_ZdlPvj>
    }
    _buffer = NULL;
 80a3da0:	2300      	movs	r3, #0
 80a3da2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a3da4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a3da8:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3daa:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3dac:	8723      	strh	r3, [r4, #56]	; 0x38
 80a3dae:	bd10      	pop	{r4, pc}

080a3db0 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a3db0:	b570      	push	{r4, r5, r6, lr}
 80a3db2:	4604      	mov	r4, r0
 80a3db4:	4616      	mov	r6, r2
 80a3db6:	460d      	mov	r5, r1
    releaseBuffer();
 80a3db8:	f7ff ffe8 	bl	80a3d8c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a3dbc:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a3dbe:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a3dc0:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a3dc2:	b93e      	cbnz	r6, 80a3dd4 <_ZN3UDP9setBufferEjPh+0x24>
 80a3dc4:	b135      	cbz	r5, 80a3dd4 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a3dc6:	4628      	mov	r0, r5
 80a3dc8:	f7fc f969 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a3dcc:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a3dce:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a3dd0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a3dd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3dd6:	b103      	cbz	r3, 80a3dda <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a3dd8:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a3dda:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a3ddc:	3000      	adds	r0, #0
 80a3dde:	bf18      	it	ne
 80a3de0:	2001      	movne	r0, #1
 80a3de2:	bd70      	pop	{r4, r5, r6, pc}

080a3de4 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3de6:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3de8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3dea:	4605      	mov	r5, r0
 80a3dec:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3dee:	b91a      	cbnz	r2, 80a3df8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a3df0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a3df2:	b109      	cbz	r1, 80a3df8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a3df4:	f7ff ffdc 	bl	80a3db0 <_ZN3UDP9setBufferEjPh>
 80a3df8:	f105 0620 	add.w	r6, r5, #32
 80a3dfc:	3404      	adds	r4, #4
 80a3dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3e00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3e02:	6823      	ldr	r3, [r4, #0]
 80a3e04:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3e06:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a3e08:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3e0a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a3e0c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a3e0e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a3e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3e12 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a3e12:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a3e14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a3e16:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a3e18:	b91a      	cbnz	r2, 80a3e22 <_ZN3UDP11parsePacketEm+0x10>
 80a3e1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a3e1c:	b109      	cbz	r1, 80a3e22 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a3e1e:	f7ff ffc7 	bl	80a3db0 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a3e22:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3e24:	2300      	movs	r3, #0
 80a3e26:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3e28:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a3e2a:	b141      	cbz	r1, 80a3e3e <_ZN3UDP11parsePacketEm+0x2c>
 80a3e2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a3e2e:	b132      	cbz	r2, 80a3e3e <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a3e30:	6820      	ldr	r0, [r4, #0]
 80a3e32:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a3e34:	4620      	mov	r0, r4
 80a3e36:	47a8      	blx	r5
        if (result>0) {
 80a3e38:	2800      	cmp	r0, #0
            _total = result;
 80a3e3a:	bfc8      	it	gt
 80a3e3c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a3e3e:	6823      	ldr	r3, [r4, #0]
 80a3e40:	4620      	mov	r0, r4
}
 80a3e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a3e46:	691b      	ldr	r3, [r3, #16]
 80a3e48:	4718      	bx	r3

080a3e4a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3e4a:	4770      	bx	lr

080a3e4c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3e4c:	7441      	strb	r1, [r0, #17]
 80a3e4e:	4770      	bx	lr

080a3e50 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a3e50:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a3e52:	7c00      	ldrb	r0, [r0, #16]
 80a3e54:	f7ff f900 	bl	80a3058 <HAL_USART_Available_Data_For_Write>
}
 80a3e58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3e5c:	bd08      	pop	{r3, pc}

080a3e5e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3e5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3e60:	7c00      	ldrb	r0, [r0, #16]
 80a3e62:	f7ff f8d1 	bl	80a3008 <HAL_USART_Available_Data>
}
 80a3e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3e6a:	bd08      	pop	{r3, pc}

080a3e6c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3e6c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3e6e:	7c00      	ldrb	r0, [r0, #16]
 80a3e70:	f7ff f8da 	bl	80a3028 <HAL_USART_Peek_Data>
}
 80a3e74:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3e78:	bf28      	it	cs
 80a3e7a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3e7e:	bd08      	pop	{r3, pc}

080a3e80 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3e80:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3e82:	7c00      	ldrb	r0, [r0, #16]
 80a3e84:	f7ff f8c8 	bl	80a3018 <HAL_USART_Read_Data>
}
 80a3e88:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3e8c:	bf28      	it	cs
 80a3e8e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3e92:	bd08      	pop	{r3, pc}

080a3e94 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3e94:	7c00      	ldrb	r0, [r0, #16]
 80a3e96:	f7ff b8cf 	b.w	80a3038 <HAL_USART_Flush_Data>

080a3e9a <_ZN11USARTSerialD0Ev>:
 80a3e9a:	b510      	push	{r4, lr}
 80a3e9c:	4604      	mov	r4, r0
 80a3e9e:	2114      	movs	r1, #20
 80a3ea0:	f000 fad5 	bl	80a444e <_ZdlPvj>
 80a3ea4:	4620      	mov	r0, r4
 80a3ea6:	bd10      	pop	{r4, pc}

080a3ea8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3ea8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3eaa:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3eac:	4604      	mov	r4, r0
 80a3eae:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3eb0:	b925      	cbnz	r5, 80a3ebc <_ZN11USARTSerial5writeEh+0x14>
 80a3eb2:	7c00      	ldrb	r0, [r0, #16]
 80a3eb4:	f7ff f8d0 	bl	80a3058 <HAL_USART_Available_Data_For_Write>
 80a3eb8:	2800      	cmp	r0, #0
 80a3eba:	dd05      	ble.n	80a3ec8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3ebc:	4631      	mov	r1, r6
 80a3ebe:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3ec4:	f7ff b898 	b.w	80a2ff8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3ec8:	4628      	mov	r0, r5
 80a3eca:	bd70      	pop	{r4, r5, r6, pc}

080a3ecc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3ecc:	b510      	push	{r4, lr}
 80a3ece:	4604      	mov	r4, r0
 80a3ed0:	4608      	mov	r0, r1
 80a3ed2:	4611      	mov	r1, r2
 80a3ed4:	2200      	movs	r2, #0
 80a3ed6:	6062      	str	r2, [r4, #4]
 80a3ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3edc:	60a2      	str	r2, [r4, #8]
 80a3ede:	4a05      	ldr	r2, [pc, #20]	; (80a3ef4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3ee0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3ee2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3ee4:	2201      	movs	r2, #1
 80a3ee6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3ee8:	461a      	mov	r2, r3
 80a3eea:	f7ff f87d 	bl	80a2fe8 <HAL_USART_Init>
}
 80a3eee:	4620      	mov	r0, r4
 80a3ef0:	bd10      	pop	{r4, pc}
 80a3ef2:	bf00      	nop
 80a3ef4:	080a7274 	.word	0x080a7274

080a3ef8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3ef8:	7c00      	ldrb	r0, [r0, #16]
 80a3efa:	f7ff b8a5 	b.w	80a3048 <HAL_USART_Is_Enabled>
	...

080a3f00 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3f00:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3f02:	4d0c      	ldr	r5, [pc, #48]	; (80a3f34 <_Z22__fetch_global_Serial1v+0x34>)
 80a3f04:	6829      	ldr	r1, [r5, #0]
 80a3f06:	f011 0401 	ands.w	r4, r1, #1
 80a3f0a:	d111      	bne.n	80a3f30 <_Z22__fetch_global_Serial1v+0x30>
 80a3f0c:	4628      	mov	r0, r5
 80a3f0e:	f7fc f8ca 	bl	80a00a6 <__cxa_guard_acquire>
 80a3f12:	b168      	cbz	r0, 80a3f30 <_Z22__fetch_global_Serial1v+0x30>
 80a3f14:	4a08      	ldr	r2, [pc, #32]	; (80a3f38 <_Z22__fetch_global_Serial1v+0x38>)
 80a3f16:	4621      	mov	r1, r4
 80a3f18:	4b08      	ldr	r3, [pc, #32]	; (80a3f3c <_Z22__fetch_global_Serial1v+0x3c>)
 80a3f1a:	4809      	ldr	r0, [pc, #36]	; (80a3f40 <_Z22__fetch_global_Serial1v+0x40>)
 80a3f1c:	f7ff ffd6 	bl	80a3ecc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3f20:	4628      	mov	r0, r5
 80a3f22:	f7fc f8c5 	bl	80a00b0 <__cxa_guard_release>
 80a3f26:	4a07      	ldr	r2, [pc, #28]	; (80a3f44 <_Z22__fetch_global_Serial1v+0x44>)
 80a3f28:	4907      	ldr	r1, [pc, #28]	; (80a3f48 <_Z22__fetch_global_Serial1v+0x48>)
 80a3f2a:	4805      	ldr	r0, [pc, #20]	; (80a3f40 <_Z22__fetch_global_Serial1v+0x40>)
 80a3f2c:	f000 fa8a 	bl	80a4444 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3f30:	4803      	ldr	r0, [pc, #12]	; (80a3f40 <_Z22__fetch_global_Serial1v+0x40>)
 80a3f32:	bd38      	pop	{r3, r4, r5, pc}
 80a3f34:	200002c8 	.word	0x200002c8
 80a3f38:	200002cc 	.word	0x200002cc
 80a3f3c:	20000244 	.word	0x20000244
 80a3f40:	20000230 	.word	0x20000230
 80a3f44:	20000088 	.word	0x20000088
 80a3f48:	080a3e4b 	.word	0x080a3e4b

080a3f4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3f4c:	7441      	strb	r1, [r0, #17]
 80a3f4e:	4770      	bx	lr

080a3f50 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3f50:	4770      	bx	lr

080a3f52 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3f52:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3f54:	2100      	movs	r1, #0
 80a3f56:	7c00      	ldrb	r0, [r0, #16]
 80a3f58:	f7ff f8a6 	bl	80a30a8 <HAL_USB_USART_Receive_Data>
}
 80a3f5c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3f60:	bf28      	it	cs
 80a3f62:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3f66:	bd08      	pop	{r3, pc}

080a3f68 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3f68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3f6a:	2101      	movs	r1, #1
 80a3f6c:	7c00      	ldrb	r0, [r0, #16]
 80a3f6e:	f7ff f89b 	bl	80a30a8 <HAL_USB_USART_Receive_Data>
}
 80a3f72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3f76:	bf28      	it	cs
 80a3f78:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3f7c:	bd08      	pop	{r3, pc}

080a3f7e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3f7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3f80:	7c00      	ldrb	r0, [r0, #16]
 80a3f82:	f7ff f889 	bl	80a3098 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3f86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3f8a:	bd08      	pop	{r3, pc}

080a3f8c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3f8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3f8e:	7c00      	ldrb	r0, [r0, #16]
 80a3f90:	f7ff f87a 	bl	80a3088 <HAL_USB_USART_Available_Data>
}
 80a3f94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3f98:	bd08      	pop	{r3, pc}

080a3f9a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3f9a:	7c00      	ldrb	r0, [r0, #16]
 80a3f9c:	f7ff b894 	b.w	80a30c8 <HAL_USB_USART_Flush_Data>

080a3fa0 <_ZN9USBSerialD0Ev>:
 80a3fa0:	b510      	push	{r4, lr}
 80a3fa2:	4604      	mov	r4, r0
 80a3fa4:	2114      	movs	r1, #20
 80a3fa6:	f000 fa52 	bl	80a444e <_ZdlPvj>
 80a3faa:	4620      	mov	r0, r4
 80a3fac:	bd10      	pop	{r4, pc}

080a3fae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3fae:	b538      	push	{r3, r4, r5, lr}
 80a3fb0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3fb2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3fb4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3fb6:	f7ff f86f 	bl	80a3098 <HAL_USB_USART_Available_Data_For_Write>
 80a3fba:	2800      	cmp	r0, #0
 80a3fbc:	dc01      	bgt.n	80a3fc2 <_ZN9USBSerial5writeEh+0x14>
 80a3fbe:	7c60      	ldrb	r0, [r4, #17]
 80a3fc0:	b128      	cbz	r0, 80a3fce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3fc2:	4629      	mov	r1, r5
 80a3fc4:	7c20      	ldrb	r0, [r4, #16]
 80a3fc6:	f7ff f877 	bl	80a30b8 <HAL_USB_USART_Send_Data>
 80a3fca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3fce:	bd38      	pop	{r3, r4, r5, pc}

080a3fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3fd0:	b510      	push	{r4, lr}
 80a3fd2:	4604      	mov	r4, r0
 80a3fd4:	2300      	movs	r3, #0
 80a3fd6:	6063      	str	r3, [r4, #4]
 80a3fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3fdc:	60a3      	str	r3, [r4, #8]
 80a3fde:	4b05      	ldr	r3, [pc, #20]	; (80a3ff4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3fe0:	4608      	mov	r0, r1
 80a3fe2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3fe4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3fe6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3fe8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3fea:	4611      	mov	r1, r2
 80a3fec:	f7ff f83c 	bl	80a3068 <HAL_USB_USART_Init>
}
 80a3ff0:	4620      	mov	r0, r4
 80a3ff2:	bd10      	pop	{r4, pc}
 80a3ff4:	080a72a4 	.word	0x080a72a4

080a3ff8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3ff8:	2200      	movs	r2, #0
 80a3ffa:	7c00      	ldrb	r0, [r0, #16]
 80a3ffc:	f7ff b83c 	b.w	80a3078 <HAL_USB_USART_Begin>

080a4000 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a4000:	7c00      	ldrb	r0, [r0, #16]
 80a4002:	f7ff b869 	b.w	80a30d8 <HAL_USB_USART_Is_Enabled>

080a4006 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a4006:	f7ff bffb 	b.w	80a4000 <_ZN9USBSerial9isEnabledEv>
	...

080a400c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a400c:	b510      	push	{r4, lr}
 80a400e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4010:	2214      	movs	r2, #20
 80a4012:	2100      	movs	r1, #0
 80a4014:	f002 fe61 	bl	80a6cda <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4018:	4b05      	ldr	r3, [pc, #20]	; (80a4030 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a401a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a401c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a401e:	4b05      	ldr	r3, [pc, #20]	; (80a4034 <_Z19acquireSerialBufferv+0x28>)
 80a4020:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4022:	f240 1301 	movw	r3, #257	; 0x101
 80a4026:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4028:	2381      	movs	r3, #129	; 0x81
 80a402a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a402c:	bd10      	pop	{r4, pc}
 80a402e:	bf00      	nop
 80a4030:	200003d5 	.word	0x200003d5
 80a4034:	20000354 	.word	0x20000354

080a4038 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4038:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a403a:	4d0e      	ldr	r5, [pc, #56]	; (80a4074 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a403c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a403e:	a801      	add	r0, sp, #4
 80a4040:	f7ff ffe4 	bl	80a400c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4044:	6829      	ldr	r1, [r5, #0]
 80a4046:	f011 0401 	ands.w	r4, r1, #1
 80a404a:	d110      	bne.n	80a406e <_Z16_fetch_usbserialv+0x36>
 80a404c:	4628      	mov	r0, r5
 80a404e:	f7fc f82a 	bl	80a00a6 <__cxa_guard_acquire>
 80a4052:	b160      	cbz	r0, 80a406e <_Z16_fetch_usbserialv+0x36>
 80a4054:	aa01      	add	r2, sp, #4
 80a4056:	4621      	mov	r1, r4
 80a4058:	4807      	ldr	r0, [pc, #28]	; (80a4078 <_Z16_fetch_usbserialv+0x40>)
 80a405a:	f7ff ffb9 	bl	80a3fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a405e:	4628      	mov	r0, r5
 80a4060:	f7fc f826 	bl	80a00b0 <__cxa_guard_release>
 80a4064:	4a05      	ldr	r2, [pc, #20]	; (80a407c <_Z16_fetch_usbserialv+0x44>)
 80a4066:	4906      	ldr	r1, [pc, #24]	; (80a4080 <_Z16_fetch_usbserialv+0x48>)
 80a4068:	4803      	ldr	r0, [pc, #12]	; (80a4078 <_Z16_fetch_usbserialv+0x40>)
 80a406a:	f000 f9eb 	bl	80a4444 <__aeabi_atexit>
	return _usbserial;
}
 80a406e:	4802      	ldr	r0, [pc, #8]	; (80a4078 <_Z16_fetch_usbserialv+0x40>)
 80a4070:	b007      	add	sp, #28
 80a4072:	bd30      	pop	{r4, r5, pc}
 80a4074:	20000350 	.word	0x20000350
 80a4078:	200004d8 	.word	0x200004d8
 80a407c:	20000088 	.word	0x20000088
 80a4080:	080a3f51 	.word	0x080a3f51

080a4084 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4084:	b510      	push	{r4, lr}
 80a4086:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4088:	2214      	movs	r2, #20
 80a408a:	2100      	movs	r1, #0
 80a408c:	f002 fe25 	bl	80a6cda <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4090:	4b05      	ldr	r3, [pc, #20]	; (80a40a8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4092:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4094:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a4096:	4b05      	ldr	r3, [pc, #20]	; (80a40ac <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a4098:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a409a:	f240 1301 	movw	r3, #257	; 0x101
 80a409e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a40a0:	2381      	movs	r3, #129	; 0x81
 80a40a2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a40a4:	bd10      	pop	{r4, pc}
 80a40a6:	bf00      	nop
 80a40a8:	20000588 	.word	0x20000588
 80a40ac:	200004f0 	.word	0x200004f0

080a40b0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a40b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a40b2:	4c0e      	ldr	r4, [pc, #56]	; (80a40ec <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a40b4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a40b6:	a801      	add	r0, sp, #4
 80a40b8:	f7ff ffe4 	bl	80a4084 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a40bc:	6823      	ldr	r3, [r4, #0]
 80a40be:	07db      	lsls	r3, r3, #31
 80a40c0:	d410      	bmi.n	80a40e4 <_Z17_fetch_usbserial1v+0x34>
 80a40c2:	4620      	mov	r0, r4
 80a40c4:	f7fb ffef 	bl	80a00a6 <__cxa_guard_acquire>
 80a40c8:	b160      	cbz	r0, 80a40e4 <_Z17_fetch_usbserial1v+0x34>
 80a40ca:	aa01      	add	r2, sp, #4
 80a40cc:	2101      	movs	r1, #1
 80a40ce:	4808      	ldr	r0, [pc, #32]	; (80a40f0 <_Z17_fetch_usbserial1v+0x40>)
 80a40d0:	f7ff ff7e 	bl	80a3fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a40d4:	4620      	mov	r0, r4
 80a40d6:	f7fb ffeb 	bl	80a00b0 <__cxa_guard_release>
 80a40da:	4a06      	ldr	r2, [pc, #24]	; (80a40f4 <_Z17_fetch_usbserial1v+0x44>)
 80a40dc:	4906      	ldr	r1, [pc, #24]	; (80a40f8 <_Z17_fetch_usbserial1v+0x48>)
 80a40de:	4804      	ldr	r0, [pc, #16]	; (80a40f0 <_Z17_fetch_usbserial1v+0x40>)
 80a40e0:	f000 f9b0 	bl	80a4444 <__aeabi_atexit>
  return _usbserial1;
}
 80a40e4:	4802      	ldr	r0, [pc, #8]	; (80a40f0 <_Z17_fetch_usbserial1v+0x40>)
 80a40e6:	b006      	add	sp, #24
 80a40e8:	bd10      	pop	{r4, pc}
 80a40ea:	bf00      	nop
 80a40ec:	200004ec 	.word	0x200004ec
 80a40f0:	20000574 	.word	0x20000574
 80a40f4:	20000088 	.word	0x20000088
 80a40f8:	080a3f51 	.word	0x080a3f51

080a40fc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a40fc:	2200      	movs	r2, #0
 80a40fe:	4611      	mov	r1, r2
 80a4100:	6840      	ldr	r0, [r0, #4]
 80a4102:	f7ff b84d 	b.w	80a31a0 <network_ready>

080a4106 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4106:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4108:	4616      	mov	r6, r2
 80a410a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a410c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a410e:	460f      	mov	r7, r1
 80a4110:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4112:	2100      	movs	r1, #0
 80a4114:	a803      	add	r0, sp, #12
 80a4116:	f002 fde0 	bl	80a6cda <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a411a:	4630      	mov	r0, r6
 80a411c:	f002 fe52 	bl	80a6dc4 <strlen>
 80a4120:	2500      	movs	r5, #0
 80a4122:	9500      	str	r5, [sp, #0]
 80a4124:	b281      	uxth	r1, r0
 80a4126:	687b      	ldr	r3, [r7, #4]
 80a4128:	aa03      	add	r2, sp, #12
 80a412a:	4630      	mov	r0, r6
 80a412c:	f7fe ffdc 	bl	80a30e8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4130:	b120      	cbz	r0, 80a413c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4132:	4629      	mov	r1, r5
 80a4134:	4620      	mov	r0, r4
 80a4136:	f7ff f937 	bl	80a33a8 <_ZN9IPAddressC1Em>
 80a413a:	e003      	b.n	80a4144 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a413c:	a903      	add	r1, sp, #12
 80a413e:	4620      	mov	r0, r4
 80a4140:	f7ff f920 	bl	80a3384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4144:	4620      	mov	r0, r4
 80a4146:	b009      	add	sp, #36	; 0x24
 80a4148:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a414a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a414a:	2200      	movs	r2, #0
 80a414c:	4611      	mov	r1, r2
 80a414e:	6840      	ldr	r0, [r0, #4]
 80a4150:	f7ff b846 	b.w	80a31e0 <network_listening>

080a4154 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4154:	2200      	movs	r2, #0
 80a4156:	4611      	mov	r1, r2
 80a4158:	6840      	ldr	r0, [r0, #4]
 80a415a:	f7ff b851 	b.w	80a3200 <network_get_listen_timeout>

080a415e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a415e:	2200      	movs	r2, #0
 80a4160:	6840      	ldr	r0, [r0, #4]
 80a4162:	f7ff b845 	b.w	80a31f0 <network_set_listen_timeout>

080a4166 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4166:	2200      	movs	r2, #0
 80a4168:	f081 0101 	eor.w	r1, r1, #1
 80a416c:	6840      	ldr	r0, [r0, #4]
 80a416e:	f7ff b82f 	b.w	80a31d0 <network_listen>

080a4172 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a4172:	2300      	movs	r3, #0
 80a4174:	461a      	mov	r2, r3
 80a4176:	4619      	mov	r1, r3
 80a4178:	6840      	ldr	r0, [r0, #4]
 80a417a:	f7ff b821 	b.w	80a31c0 <network_off>

080a417e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a417e:	2300      	movs	r3, #0
 80a4180:	461a      	mov	r2, r3
 80a4182:	4619      	mov	r1, r3
 80a4184:	6840      	ldr	r0, [r0, #4]
 80a4186:	f7ff b813 	b.w	80a31b0 <network_on>

080a418a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a418a:	2200      	movs	r2, #0
 80a418c:	4611      	mov	r1, r2
 80a418e:	6840      	ldr	r0, [r0, #4]
 80a4190:	f7fe bff6 	b.w	80a3180 <network_connecting>

080a4194 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4194:	2200      	movs	r2, #0
 80a4196:	2102      	movs	r1, #2
 80a4198:	6840      	ldr	r0, [r0, #4]
 80a419a:	f7fe bff9 	b.w	80a3190 <network_disconnect>

080a419e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a419e:	2300      	movs	r3, #0
 80a41a0:	461a      	mov	r2, r3
 80a41a2:	6840      	ldr	r0, [r0, #4]
 80a41a4:	f7fe bfe4 	b.w	80a3170 <network_connect>

080a41a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a41a8:	4b02      	ldr	r3, [pc, #8]	; (80a41b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a41aa:	2204      	movs	r2, #4
 80a41ac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a41ae:	4a02      	ldr	r2, [pc, #8]	; (80a41b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a41b0:	601a      	str	r2, [r3, #0]
 80a41b2:	4770      	bx	lr
 80a41b4:	2000068c 	.word	0x2000068c
 80a41b8:	080a72d4 	.word	0x080a72d4

080a41bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a41bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a41be:	4b14      	ldr	r3, [pc, #80]	; (80a4210 <serialEventRun+0x54>)
 80a41c0:	b133      	cbz	r3, 80a41d0 <serialEventRun+0x14>
 80a41c2:	f7ff ff39 	bl	80a4038 <_Z16_fetch_usbserialv>
 80a41c6:	6803      	ldr	r3, [r0, #0]
 80a41c8:	691b      	ldr	r3, [r3, #16]
 80a41ca:	4798      	blx	r3
 80a41cc:	2800      	cmp	r0, #0
 80a41ce:	dc16      	bgt.n	80a41fe <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a41d0:	4b10      	ldr	r3, [pc, #64]	; (80a4214 <serialEventRun+0x58>)
 80a41d2:	b133      	cbz	r3, 80a41e2 <serialEventRun+0x26>
 80a41d4:	f7ff fe94 	bl	80a3f00 <_Z22__fetch_global_Serial1v>
 80a41d8:	6803      	ldr	r3, [r0, #0]
 80a41da:	691b      	ldr	r3, [r3, #16]
 80a41dc:	4798      	blx	r3
 80a41de:	2800      	cmp	r0, #0
 80a41e0:	dc10      	bgt.n	80a4204 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a41e2:	4b0d      	ldr	r3, [pc, #52]	; (80a4218 <serialEventRun+0x5c>)
 80a41e4:	b10b      	cbz	r3, 80a41ea <serialEventRun+0x2e>
 80a41e6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a41ea:	4b0c      	ldr	r3, [pc, #48]	; (80a421c <serialEventRun+0x60>)
 80a41ec:	b17b      	cbz	r3, 80a420e <serialEventRun+0x52>
 80a41ee:	f7ff ff5f 	bl	80a40b0 <_Z17_fetch_usbserial1v>
 80a41f2:	6803      	ldr	r3, [r0, #0]
 80a41f4:	691b      	ldr	r3, [r3, #16]
 80a41f6:	4798      	blx	r3
 80a41f8:	2800      	cmp	r0, #0
 80a41fa:	dc06      	bgt.n	80a420a <serialEventRun+0x4e>
 80a41fc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a41fe:	f3af 8000 	nop.w
 80a4202:	e7e5      	b.n	80a41d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a4204:	f3af 8000 	nop.w
 80a4208:	e7eb      	b.n	80a41e2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a420a:	f3af 8000 	nop.w
 80a420e:	bd08      	pop	{r3, pc}
	...

080a4220 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a4220:	b508      	push	{r3, lr}
	serialEventRun();
 80a4222:	f7ff ffcb 	bl	80a41bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4226:	f7fe fded 	bl	80a2e04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a422a:	4b01      	ldr	r3, [pc, #4]	; (80a4230 <_post_loop+0x10>)
 80a422c:	6018      	str	r0, [r3, #0]
 80a422e:	bd08      	pop	{r3, pc}
 80a4230:	2000069c 	.word	0x2000069c

080a4234 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4234:	4802      	ldr	r0, [pc, #8]	; (80a4240 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a4236:	4a03      	ldr	r2, [pc, #12]	; (80a4244 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a4238:	4903      	ldr	r1, [pc, #12]	; (80a4248 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a423a:	1a12      	subs	r2, r2, r0
 80a423c:	f002 bd42 	b.w	80a6cc4 <memcpy>
 80a4240:	40024000 	.word	0x40024000
 80a4244:	40024004 	.word	0x40024004
 80a4248:	080a7590 	.word	0x080a7590

080a424c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a424c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a424e:	2300      	movs	r3, #0
 80a4250:	9300      	str	r3, [sp, #0]
 80a4252:	461a      	mov	r2, r3
 80a4254:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4258:	f7fe ff70 	bl	80a313c <system_ctrl_set_result>
}
 80a425c:	b003      	add	sp, #12
 80a425e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4264 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a4264:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4266:	8843      	ldrh	r3, [r0, #2]
 80a4268:	2b0a      	cmp	r3, #10
 80a426a:	d008      	beq.n	80a427e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a426c:	2b50      	cmp	r3, #80	; 0x50
 80a426e:	d109      	bne.n	80a4284 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a4270:	4b09      	ldr	r3, [pc, #36]	; (80a4298 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4272:	681b      	ldr	r3, [r3, #0]
 80a4274:	b13b      	cbz	r3, 80a4286 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a4276:	b003      	add	sp, #12
 80a4278:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a427c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a427e:	f7ff ffe5 	bl	80a424c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a4282:	e006      	b.n	80a4292 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4284:	2300      	movs	r3, #0
 80a4286:	9300      	str	r3, [sp, #0]
 80a4288:	461a      	mov	r2, r3
 80a428a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a428e:	f7fe ff55 	bl	80a313c <system_ctrl_set_result>
        break;
    }
}
 80a4292:	b003      	add	sp, #12
 80a4294:	f85d fb04 	ldr.w	pc, [sp], #4
 80a4298:	20000694 	.word	0x20000694

080a429c <module_user_init_hook>:

void module_user_init_hook()
{
 80a429c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a429e:	4c10      	ldr	r4, [pc, #64]	; (80a42e0 <module_user_init_hook+0x44>)
 80a42a0:	4d10      	ldr	r5, [pc, #64]	; (80a42e4 <module_user_init_hook+0x48>)
 80a42a2:	6823      	ldr	r3, [r4, #0]
 80a42a4:	42ab      	cmp	r3, r5
 80a42a6:	4b10      	ldr	r3, [pc, #64]	; (80a42e8 <module_user_init_hook+0x4c>)
 80a42a8:	bf0c      	ite	eq
 80a42aa:	2201      	moveq	r2, #1
 80a42ac:	2200      	movne	r2, #0
 80a42ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a42b0:	d002      	beq.n	80a42b8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a42b2:	f7ff ffbf 	bl	80a4234 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a42b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a42b8:	f7fe fd94 	bl	80a2de4 <HAL_RNG_GetRandomNumber>
 80a42bc:	4604      	mov	r4, r0
    srand(seed);
 80a42be:	f002 fd15 	bl	80a6cec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a42c2:	4b0a      	ldr	r3, [pc, #40]	; (80a42ec <module_user_init_hook+0x50>)
 80a42c4:	b113      	cbz	r3, 80a42cc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a42c6:	4620      	mov	r0, r4
 80a42c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a42cc:	2100      	movs	r1, #0
 80a42ce:	4807      	ldr	r0, [pc, #28]	; (80a42ec <module_user_init_hook+0x50>)
 80a42d0:	f7fe ff3e 	bl	80a3150 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a42d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a42d8:	2100      	movs	r1, #0
 80a42da:	4805      	ldr	r0, [pc, #20]	; (80a42f0 <module_user_init_hook+0x54>)
 80a42dc:	f7fe bf24 	b.w	80a3128 <system_ctrl_set_app_request_handler>
 80a42e0:	40024000 	.word	0x40024000
 80a42e4:	9a271c1e 	.word	0x9a271c1e
 80a42e8:	20000698 	.word	0x20000698
 80a42ec:	00000000 	.word	0x00000000
 80a42f0:	080a4265 	.word	0x080a4265

080a42f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a42f4:	b510      	push	{r4, lr}
 80a42f6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a42f8:	480f      	ldr	r0, [pc, #60]	; (80a4338 <pinAvailable+0x44>)
 80a42fa:	f7ff fb0d 	bl	80a3918 <_ZN8SPIClass9isEnabledEv>
 80a42fe:	b128      	cbz	r0, 80a430c <pinAvailable+0x18>
 80a4300:	f1a4 030d 	sub.w	r3, r4, #13
 80a4304:	2b02      	cmp	r3, #2
 80a4306:	d801      	bhi.n	80a430c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a4308:	2000      	movs	r0, #0
 80a430a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a430c:	f000 f840 	bl	80a4390 <_Z19__fetch_global_Wirev>
 80a4310:	f7ff f80d 	bl	80a332e <_ZN7TwoWire9isEnabledEv>
 80a4314:	b108      	cbz	r0, 80a431a <pinAvailable+0x26>
 80a4316:	2c01      	cmp	r4, #1
 80a4318:	d9f6      	bls.n	80a4308 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a431a:	f7ff fdf1 	bl	80a3f00 <_Z22__fetch_global_Serial1v>
 80a431e:	f7ff fdeb 	bl	80a3ef8 <_ZN11USARTSerial9isEnabledEv>
 80a4322:	b118      	cbz	r0, 80a432c <pinAvailable+0x38>
 80a4324:	f1a4 0312 	sub.w	r3, r4, #18
 80a4328:	2b01      	cmp	r3, #1
 80a432a:	d9ed      	bls.n	80a4308 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a432c:	2c17      	cmp	r4, #23
 80a432e:	bf8c      	ite	hi
 80a4330:	2000      	movhi	r0, #0
 80a4332:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4334:	bd10      	pop	{r4, pc}
 80a4336:	bf00      	nop
 80a4338:	200006d0 	.word	0x200006d0

080a433c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a433c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a433e:	b538      	push	{r3, r4, r5, lr}
 80a4340:	4604      	mov	r4, r0
 80a4342:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4344:	d80a      	bhi.n	80a435c <pinMode+0x20>
 80a4346:	29ff      	cmp	r1, #255	; 0xff
 80a4348:	d008      	beq.n	80a435c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a434a:	f7ff ffd3 	bl	80a42f4 <pinAvailable>
 80a434e:	b128      	cbz	r0, 80a435c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4350:	4629      	mov	r1, r5
 80a4352:	4620      	mov	r0, r4
}
 80a4354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4358:	f7fe bd64 	b.w	80a2e24 <HAL_Pin_Mode>
 80a435c:	bd38      	pop	{r3, r4, r5, pc}

080a435e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a435e:	b538      	push	{r3, r4, r5, lr}
 80a4360:	4604      	mov	r4, r0
 80a4362:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4364:	f7fe fd66 	bl	80a2e34 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4368:	28ff      	cmp	r0, #255	; 0xff
 80a436a:	d010      	beq.n	80a438e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a436c:	2806      	cmp	r0, #6
 80a436e:	d804      	bhi.n	80a437a <digitalWrite+0x1c>
 80a4370:	234d      	movs	r3, #77	; 0x4d
 80a4372:	fa23 f000 	lsr.w	r0, r3, r0
 80a4376:	07c3      	lsls	r3, r0, #31
 80a4378:	d409      	bmi.n	80a438e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a437a:	4620      	mov	r0, r4
 80a437c:	f7ff ffba 	bl	80a42f4 <pinAvailable>
 80a4380:	b128      	cbz	r0, 80a438e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4382:	4629      	mov	r1, r5
 80a4384:	4620      	mov	r0, r4
}
 80a4386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a438a:	f7fe bd5b 	b.w	80a2e44 <HAL_GPIO_Write>
 80a438e:	bd38      	pop	{r3, r4, r5, pc}

080a4390 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a4390:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a4392:	4d0b      	ldr	r5, [pc, #44]	; (80a43c0 <_Z19__fetch_global_Wirev+0x30>)
 80a4394:	6829      	ldr	r1, [r5, #0]
 80a4396:	f011 0401 	ands.w	r4, r1, #1
 80a439a:	d10f      	bne.n	80a43bc <_Z19__fetch_global_Wirev+0x2c>
 80a439c:	4628      	mov	r0, r5
 80a439e:	f7fb fe82 	bl	80a00a6 <__cxa_guard_acquire>
 80a43a2:	b158      	cbz	r0, 80a43bc <_Z19__fetch_global_Wirev+0x2c>
 80a43a4:	4621      	mov	r1, r4
 80a43a6:	4807      	ldr	r0, [pc, #28]	; (80a43c4 <_Z19__fetch_global_Wirev+0x34>)
 80a43a8:	f7fe ff92 	bl	80a32d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a43ac:	4628      	mov	r0, r5
 80a43ae:	f7fb fe7f 	bl	80a00b0 <__cxa_guard_release>
 80a43b2:	4a05      	ldr	r2, [pc, #20]	; (80a43c8 <_Z19__fetch_global_Wirev+0x38>)
 80a43b4:	4905      	ldr	r1, [pc, #20]	; (80a43cc <_Z19__fetch_global_Wirev+0x3c>)
 80a43b6:	4803      	ldr	r0, [pc, #12]	; (80a43c4 <_Z19__fetch_global_Wirev+0x34>)
 80a43b8:	f000 f844 	bl	80a4444 <__aeabi_atexit>
	return wire;
}
 80a43bc:	4801      	ldr	r0, [pc, #4]	; (80a43c4 <_Z19__fetch_global_Wirev+0x34>)
 80a43be:	bd38      	pop	{r3, r4, r5, pc}
 80a43c0:	200006a0 	.word	0x200006a0
 80a43c4:	200006a4 	.word	0x200006a4
 80a43c8:	20000088 	.word	0x20000088
 80a43cc:	080a3279 	.word	0x080a3279

080a43d0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a43d0:	b513      	push	{r0, r1, r4, lr}
 80a43d2:	4c08      	ldr	r4, [pc, #32]	; (80a43f4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a43d4:	2300      	movs	r3, #0
 80a43d6:	461a      	mov	r2, r3
 80a43d8:	4619      	mov	r1, r3
 80a43da:	9300      	str	r3, [sp, #0]
 80a43dc:	4620      	mov	r0, r4
 80a43de:	f7fe fff9 	bl	80a33d4 <_ZN9IPAddressC1Ehhhh>
 80a43e2:	4620      	mov	r0, r4
 80a43e4:	4a04      	ldr	r2, [pc, #16]	; (80a43f8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a43e6:	4905      	ldr	r1, [pc, #20]	; (80a43fc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a43e8:	b002      	add	sp, #8
 80a43ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a43ee:	f000 b829 	b.w	80a4444 <__aeabi_atexit>
 80a43f2:	bf00      	nop
 80a43f4:	200006b8 	.word	0x200006b8
 80a43f8:	20000088 	.word	0x20000088
 80a43fc:	080a00b7 	.word	0x080a00b7

080a4400 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4400:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4402:	4c0c      	ldr	r4, [pc, #48]	; (80a4434 <_GLOBAL__sub_I_SPI+0x34>)
 80a4404:	4e0c      	ldr	r6, [pc, #48]	; (80a4438 <_GLOBAL__sub_I_SPI+0x38>)
 80a4406:	4d0d      	ldr	r5, [pc, #52]	; (80a443c <_GLOBAL__sub_I_SPI+0x3c>)
 80a4408:	2100      	movs	r1, #0
 80a440a:	4620      	mov	r0, r4
 80a440c:	f7ff fa04 	bl	80a3818 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4410:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4412:	4c0b      	ldr	r4, [pc, #44]	; (80a4440 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4414:	4632      	mov	r2, r6
 80a4416:	4629      	mov	r1, r5
 80a4418:	f000 f814 	bl	80a4444 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a441c:	2101      	movs	r1, #1
 80a441e:	4620      	mov	r0, r4
 80a4420:	f7ff f9fa 	bl	80a3818 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4424:	4632      	mov	r2, r6
 80a4426:	4629      	mov	r1, r5
 80a4428:	4620      	mov	r0, r4
 80a442a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a442e:	f000 b809 	b.w	80a4444 <__aeabi_atexit>
 80a4432:	bf00      	nop
 80a4434:	200006d0 	.word	0x200006d0
 80a4438:	20000088 	.word	0x20000088
 80a443c:	080a3809 	.word	0x080a3809
 80a4440:	200006e0 	.word	0x200006e0

080a4444 <__aeabi_atexit>:
 80a4444:	460b      	mov	r3, r1
 80a4446:	4601      	mov	r1, r0
 80a4448:	4618      	mov	r0, r3
 80a444a:	f002 bc2d 	b.w	80a6ca8 <__cxa_atexit>

080a444e <_ZdlPvj>:
 80a444e:	f7fb be28 	b.w	80a00a2 <_ZdlPv>
	...

080a4454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4454:	4b24      	ldr	r3, [pc, #144]	; (80a44e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a4456:	681a      	ldr	r2, [r3, #0]
 80a4458:	07d0      	lsls	r0, r2, #31
 80a445a:	bf5c      	itt	pl
 80a445c:	2201      	movpl	r2, #1
 80a445e:	601a      	strpl	r2, [r3, #0]
 80a4460:	4b22      	ldr	r3, [pc, #136]	; (80a44ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4462:	681a      	ldr	r2, [r3, #0]
 80a4464:	07d1      	lsls	r1, r2, #31
 80a4466:	bf5c      	itt	pl
 80a4468:	2201      	movpl	r2, #1
 80a446a:	601a      	strpl	r2, [r3, #0]
 80a446c:	4b20      	ldr	r3, [pc, #128]	; (80a44f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a446e:	681a      	ldr	r2, [r3, #0]
 80a4470:	07d2      	lsls	r2, r2, #31
 80a4472:	bf5c      	itt	pl
 80a4474:	2201      	movpl	r2, #1
 80a4476:	601a      	strpl	r2, [r3, #0]
 80a4478:	4b1e      	ldr	r3, [pc, #120]	; (80a44f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a447a:	681a      	ldr	r2, [r3, #0]
 80a447c:	07d0      	lsls	r0, r2, #31
 80a447e:	bf5c      	itt	pl
 80a4480:	2201      	movpl	r2, #1
 80a4482:	601a      	strpl	r2, [r3, #0]
 80a4484:	4b1c      	ldr	r3, [pc, #112]	; (80a44f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a4486:	681a      	ldr	r2, [r3, #0]
 80a4488:	07d1      	lsls	r1, r2, #31
 80a448a:	bf5c      	itt	pl
 80a448c:	2201      	movpl	r2, #1
 80a448e:	601a      	strpl	r2, [r3, #0]
 80a4490:	4b1a      	ldr	r3, [pc, #104]	; (80a44fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4492:	681a      	ldr	r2, [r3, #0]
 80a4494:	07d2      	lsls	r2, r2, #31
 80a4496:	bf5c      	itt	pl
 80a4498:	2201      	movpl	r2, #1
 80a449a:	601a      	strpl	r2, [r3, #0]
 80a449c:	4b18      	ldr	r3, [pc, #96]	; (80a4500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a449e:	681a      	ldr	r2, [r3, #0]
 80a44a0:	07d0      	lsls	r0, r2, #31
 80a44a2:	bf5c      	itt	pl
 80a44a4:	2201      	movpl	r2, #1
 80a44a6:	601a      	strpl	r2, [r3, #0]
 80a44a8:	4b16      	ldr	r3, [pc, #88]	; (80a4504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a44aa:	681a      	ldr	r2, [r3, #0]
 80a44ac:	07d1      	lsls	r1, r2, #31
 80a44ae:	bf5c      	itt	pl
 80a44b0:	2201      	movpl	r2, #1
 80a44b2:	601a      	strpl	r2, [r3, #0]
 80a44b4:	4b14      	ldr	r3, [pc, #80]	; (80a4508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a44b6:	681a      	ldr	r2, [r3, #0]
 80a44b8:	07d2      	lsls	r2, r2, #31
 80a44ba:	bf5c      	itt	pl
 80a44bc:	2201      	movpl	r2, #1
 80a44be:	601a      	strpl	r2, [r3, #0]
 80a44c0:	4b12      	ldr	r3, [pc, #72]	; (80a450c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a44c2:	681a      	ldr	r2, [r3, #0]
 80a44c4:	07d0      	lsls	r0, r2, #31
 80a44c6:	bf5c      	itt	pl
 80a44c8:	2201      	movpl	r2, #1
 80a44ca:	601a      	strpl	r2, [r3, #0]
 80a44cc:	4b10      	ldr	r3, [pc, #64]	; (80a4510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a44ce:	681a      	ldr	r2, [r3, #0]
 80a44d0:	07d1      	lsls	r1, r2, #31
 80a44d2:	bf5c      	itt	pl
 80a44d4:	2201      	movpl	r2, #1
 80a44d6:	601a      	strpl	r2, [r3, #0]
 80a44d8:	4b0e      	ldr	r3, [pc, #56]	; (80a4514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a44da:	681a      	ldr	r2, [r3, #0]
 80a44dc:	07d2      	lsls	r2, r2, #31
 80a44de:	bf5c      	itt	pl
 80a44e0:	2201      	movpl	r2, #1
 80a44e2:	601a      	strpl	r2, [r3, #0]
 80a44e4:	4770      	bx	lr
 80a44e6:	bf00      	nop
 80a44e8:	2000071c 	.word	0x2000071c
 80a44ec:	20000718 	.word	0x20000718
 80a44f0:	20000714 	.word	0x20000714
 80a44f4:	20000710 	.word	0x20000710
 80a44f8:	2000070c 	.word	0x2000070c
 80a44fc:	20000708 	.word	0x20000708
 80a4500:	20000704 	.word	0x20000704
 80a4504:	20000700 	.word	0x20000700
 80a4508:	200006fc 	.word	0x200006fc
 80a450c:	200006f8 	.word	0x200006f8
 80a4510:	200006f4 	.word	0x200006f4
 80a4514:	200006f0 	.word	0x200006f0

080a4518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4518:	4b18      	ldr	r3, [pc, #96]	; (80a457c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a451a:	681a      	ldr	r2, [r3, #0]
 80a451c:	07d1      	lsls	r1, r2, #31
 80a451e:	bf5c      	itt	pl
 80a4520:	2201      	movpl	r2, #1
 80a4522:	601a      	strpl	r2, [r3, #0]
 80a4524:	4b16      	ldr	r3, [pc, #88]	; (80a4580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4526:	681a      	ldr	r2, [r3, #0]
 80a4528:	07d2      	lsls	r2, r2, #31
 80a452a:	bf5c      	itt	pl
 80a452c:	2201      	movpl	r2, #1
 80a452e:	601a      	strpl	r2, [r3, #0]
 80a4530:	4b14      	ldr	r3, [pc, #80]	; (80a4584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4532:	681a      	ldr	r2, [r3, #0]
 80a4534:	07d0      	lsls	r0, r2, #31
 80a4536:	bf5c      	itt	pl
 80a4538:	2201      	movpl	r2, #1
 80a453a:	601a      	strpl	r2, [r3, #0]
 80a453c:	4b12      	ldr	r3, [pc, #72]	; (80a4588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a453e:	681a      	ldr	r2, [r3, #0]
 80a4540:	07d1      	lsls	r1, r2, #31
 80a4542:	bf5c      	itt	pl
 80a4544:	2201      	movpl	r2, #1
 80a4546:	601a      	strpl	r2, [r3, #0]
 80a4548:	4b10      	ldr	r3, [pc, #64]	; (80a458c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a454a:	681a      	ldr	r2, [r3, #0]
 80a454c:	07d2      	lsls	r2, r2, #31
 80a454e:	bf5c      	itt	pl
 80a4550:	2201      	movpl	r2, #1
 80a4552:	601a      	strpl	r2, [r3, #0]
 80a4554:	4b0e      	ldr	r3, [pc, #56]	; (80a4590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4556:	681a      	ldr	r2, [r3, #0]
 80a4558:	07d0      	lsls	r0, r2, #31
 80a455a:	bf5c      	itt	pl
 80a455c:	2201      	movpl	r2, #1
 80a455e:	601a      	strpl	r2, [r3, #0]
 80a4560:	4b0c      	ldr	r3, [pc, #48]	; (80a4594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4562:	681a      	ldr	r2, [r3, #0]
 80a4564:	07d1      	lsls	r1, r2, #31
 80a4566:	bf5c      	itt	pl
 80a4568:	2201      	movpl	r2, #1
 80a456a:	601a      	strpl	r2, [r3, #0]
 80a456c:	4b0a      	ldr	r3, [pc, #40]	; (80a4598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a456e:	681a      	ldr	r2, [r3, #0]
 80a4570:	07d2      	lsls	r2, r2, #31
 80a4572:	bf5c      	itt	pl
 80a4574:	2201      	movpl	r2, #1
 80a4576:	601a      	strpl	r2, [r3, #0]
 80a4578:	4770      	bx	lr
 80a457a:	bf00      	nop
 80a457c:	2000073c 	.word	0x2000073c
 80a4580:	20000738 	.word	0x20000738
 80a4584:	20000734 	.word	0x20000734
 80a4588:	20000730 	.word	0x20000730
 80a458c:	2000072c 	.word	0x2000072c
 80a4590:	20000728 	.word	0x20000728
 80a4594:	20000724 	.word	0x20000724
 80a4598:	20000720 	.word	0x20000720

080a459c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a459c:	4b18      	ldr	r3, [pc, #96]	; (80a4600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a459e:	681a      	ldr	r2, [r3, #0]
 80a45a0:	07d1      	lsls	r1, r2, #31
 80a45a2:	bf5c      	itt	pl
 80a45a4:	2201      	movpl	r2, #1
 80a45a6:	601a      	strpl	r2, [r3, #0]
 80a45a8:	4b16      	ldr	r3, [pc, #88]	; (80a4604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a45aa:	681a      	ldr	r2, [r3, #0]
 80a45ac:	07d2      	lsls	r2, r2, #31
 80a45ae:	bf5c      	itt	pl
 80a45b0:	2201      	movpl	r2, #1
 80a45b2:	601a      	strpl	r2, [r3, #0]
 80a45b4:	4b14      	ldr	r3, [pc, #80]	; (80a4608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a45b6:	681a      	ldr	r2, [r3, #0]
 80a45b8:	07d0      	lsls	r0, r2, #31
 80a45ba:	bf5c      	itt	pl
 80a45bc:	2201      	movpl	r2, #1
 80a45be:	601a      	strpl	r2, [r3, #0]
 80a45c0:	4b12      	ldr	r3, [pc, #72]	; (80a460c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a45c2:	681a      	ldr	r2, [r3, #0]
 80a45c4:	07d1      	lsls	r1, r2, #31
 80a45c6:	bf5c      	itt	pl
 80a45c8:	2201      	movpl	r2, #1
 80a45ca:	601a      	strpl	r2, [r3, #0]
 80a45cc:	4b10      	ldr	r3, [pc, #64]	; (80a4610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a45ce:	681a      	ldr	r2, [r3, #0]
 80a45d0:	07d2      	lsls	r2, r2, #31
 80a45d2:	bf5c      	itt	pl
 80a45d4:	2201      	movpl	r2, #1
 80a45d6:	601a      	strpl	r2, [r3, #0]
 80a45d8:	4b0e      	ldr	r3, [pc, #56]	; (80a4614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a45da:	681a      	ldr	r2, [r3, #0]
 80a45dc:	07d0      	lsls	r0, r2, #31
 80a45de:	bf5c      	itt	pl
 80a45e0:	2201      	movpl	r2, #1
 80a45e2:	601a      	strpl	r2, [r3, #0]
 80a45e4:	4b0c      	ldr	r3, [pc, #48]	; (80a4618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a45e6:	681a      	ldr	r2, [r3, #0]
 80a45e8:	07d1      	lsls	r1, r2, #31
 80a45ea:	bf5c      	itt	pl
 80a45ec:	2201      	movpl	r2, #1
 80a45ee:	601a      	strpl	r2, [r3, #0]
 80a45f0:	4b0a      	ldr	r3, [pc, #40]	; (80a461c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a45f2:	681a      	ldr	r2, [r3, #0]
 80a45f4:	07d2      	lsls	r2, r2, #31
 80a45f6:	bf5c      	itt	pl
 80a45f8:	2201      	movpl	r2, #1
 80a45fa:	601a      	strpl	r2, [r3, #0]
 80a45fc:	4770      	bx	lr
 80a45fe:	bf00      	nop
 80a4600:	2000075c 	.word	0x2000075c
 80a4604:	20000758 	.word	0x20000758
 80a4608:	20000754 	.word	0x20000754
 80a460c:	20000750 	.word	0x20000750
 80a4610:	2000074c 	.word	0x2000074c
 80a4614:	20000748 	.word	0x20000748
 80a4618:	20000744 	.word	0x20000744
 80a461c:	20000740 	.word	0x20000740

080a4620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4620:	4b24      	ldr	r3, [pc, #144]	; (80a46b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4622:	681a      	ldr	r2, [r3, #0]
 80a4624:	07d0      	lsls	r0, r2, #31
 80a4626:	bf5c      	itt	pl
 80a4628:	2201      	movpl	r2, #1
 80a462a:	601a      	strpl	r2, [r3, #0]
 80a462c:	4b22      	ldr	r3, [pc, #136]	; (80a46b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a462e:	681a      	ldr	r2, [r3, #0]
 80a4630:	07d1      	lsls	r1, r2, #31
 80a4632:	bf5c      	itt	pl
 80a4634:	2201      	movpl	r2, #1
 80a4636:	601a      	strpl	r2, [r3, #0]
 80a4638:	4b20      	ldr	r3, [pc, #128]	; (80a46bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a463a:	681a      	ldr	r2, [r3, #0]
 80a463c:	07d2      	lsls	r2, r2, #31
 80a463e:	bf5c      	itt	pl
 80a4640:	2201      	movpl	r2, #1
 80a4642:	601a      	strpl	r2, [r3, #0]
 80a4644:	4b1e      	ldr	r3, [pc, #120]	; (80a46c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4646:	681a      	ldr	r2, [r3, #0]
 80a4648:	07d0      	lsls	r0, r2, #31
 80a464a:	bf5c      	itt	pl
 80a464c:	2201      	movpl	r2, #1
 80a464e:	601a      	strpl	r2, [r3, #0]
 80a4650:	4b1c      	ldr	r3, [pc, #112]	; (80a46c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4652:	681a      	ldr	r2, [r3, #0]
 80a4654:	07d1      	lsls	r1, r2, #31
 80a4656:	bf5c      	itt	pl
 80a4658:	2201      	movpl	r2, #1
 80a465a:	601a      	strpl	r2, [r3, #0]
 80a465c:	4b1a      	ldr	r3, [pc, #104]	; (80a46c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a465e:	681a      	ldr	r2, [r3, #0]
 80a4660:	07d2      	lsls	r2, r2, #31
 80a4662:	bf5c      	itt	pl
 80a4664:	2201      	movpl	r2, #1
 80a4666:	601a      	strpl	r2, [r3, #0]
 80a4668:	4b18      	ldr	r3, [pc, #96]	; (80a46cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a466a:	681a      	ldr	r2, [r3, #0]
 80a466c:	07d0      	lsls	r0, r2, #31
 80a466e:	bf5c      	itt	pl
 80a4670:	2201      	movpl	r2, #1
 80a4672:	601a      	strpl	r2, [r3, #0]
 80a4674:	4b16      	ldr	r3, [pc, #88]	; (80a46d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4676:	681a      	ldr	r2, [r3, #0]
 80a4678:	07d1      	lsls	r1, r2, #31
 80a467a:	bf5c      	itt	pl
 80a467c:	2201      	movpl	r2, #1
 80a467e:	601a      	strpl	r2, [r3, #0]
 80a4680:	4b14      	ldr	r3, [pc, #80]	; (80a46d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4682:	681a      	ldr	r2, [r3, #0]
 80a4684:	07d2      	lsls	r2, r2, #31
 80a4686:	bf5c      	itt	pl
 80a4688:	2201      	movpl	r2, #1
 80a468a:	601a      	strpl	r2, [r3, #0]
 80a468c:	4b12      	ldr	r3, [pc, #72]	; (80a46d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a468e:	681a      	ldr	r2, [r3, #0]
 80a4690:	07d0      	lsls	r0, r2, #31
 80a4692:	bf5c      	itt	pl
 80a4694:	2201      	movpl	r2, #1
 80a4696:	601a      	strpl	r2, [r3, #0]
 80a4698:	4b10      	ldr	r3, [pc, #64]	; (80a46dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a469a:	681a      	ldr	r2, [r3, #0]
 80a469c:	07d1      	lsls	r1, r2, #31
 80a469e:	bf5c      	itt	pl
 80a46a0:	2201      	movpl	r2, #1
 80a46a2:	601a      	strpl	r2, [r3, #0]
 80a46a4:	4b0e      	ldr	r3, [pc, #56]	; (80a46e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a46a6:	681a      	ldr	r2, [r3, #0]
 80a46a8:	07d2      	lsls	r2, r2, #31
 80a46aa:	bf5c      	itt	pl
 80a46ac:	2201      	movpl	r2, #1
 80a46ae:	601a      	strpl	r2, [r3, #0]
 80a46b0:	4770      	bx	lr
 80a46b2:	bf00      	nop
 80a46b4:	2000078c 	.word	0x2000078c
 80a46b8:	20000788 	.word	0x20000788
 80a46bc:	20000784 	.word	0x20000784
 80a46c0:	20000780 	.word	0x20000780
 80a46c4:	2000077c 	.word	0x2000077c
 80a46c8:	20000778 	.word	0x20000778
 80a46cc:	20000774 	.word	0x20000774
 80a46d0:	20000770 	.word	0x20000770
 80a46d4:	2000076c 	.word	0x2000076c
 80a46d8:	20000768 	.word	0x20000768
 80a46dc:	20000764 	.word	0x20000764
 80a46e0:	20000760 	.word	0x20000760

080a46e4 <sin>:
 80a46e4:	b530      	push	{r4, r5, lr}
 80a46e6:	4a21      	ldr	r2, [pc, #132]	; (80a476c <sin+0x88>)
 80a46e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a46ec:	4293      	cmp	r3, r2
 80a46ee:	b087      	sub	sp, #28
 80a46f0:	dd1b      	ble.n	80a472a <sin+0x46>
 80a46f2:	4a1f      	ldr	r2, [pc, #124]	; (80a4770 <sin+0x8c>)
 80a46f4:	4293      	cmp	r3, r2
 80a46f6:	dd05      	ble.n	80a4704 <sin+0x20>
 80a46f8:	4602      	mov	r2, r0
 80a46fa:	460b      	mov	r3, r1
 80a46fc:	f001 fb2e 	bl	80a5d5c <__aeabi_dsub>
 80a4700:	b007      	add	sp, #28
 80a4702:	bd30      	pop	{r4, r5, pc}
 80a4704:	aa02      	add	r2, sp, #8
 80a4706:	f000 f867 	bl	80a47d8 <__ieee754_rem_pio2>
 80a470a:	f000 0003 	and.w	r0, r0, #3
 80a470e:	2801      	cmp	r0, #1
 80a4710:	d01e      	beq.n	80a4750 <sin+0x6c>
 80a4712:	2802      	cmp	r0, #2
 80a4714:	d011      	beq.n	80a473a <sin+0x56>
 80a4716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a471a:	b300      	cbz	r0, 80a475e <sin+0x7a>
 80a471c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4720:	f000 fa72 	bl	80a4c08 <__kernel_cos>
 80a4724:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a4728:	e7ea      	b.n	80a4700 <sin+0x1c>
 80a472a:	2300      	movs	r3, #0
 80a472c:	9300      	str	r3, [sp, #0]
 80a472e:	2200      	movs	r2, #0
 80a4730:	2300      	movs	r3, #0
 80a4732:	f000 ff89 	bl	80a5648 <__kernel_sin>
 80a4736:	b007      	add	sp, #28
 80a4738:	bd30      	pop	{r4, r5, pc}
 80a473a:	2301      	movs	r3, #1
 80a473c:	9300      	str	r3, [sp, #0]
 80a473e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4746:	f000 ff7f 	bl	80a5648 <__kernel_sin>
 80a474a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a474e:	e7d7      	b.n	80a4700 <sin+0x1c>
 80a4750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4758:	f000 fa56 	bl	80a4c08 <__kernel_cos>
 80a475c:	e7d0      	b.n	80a4700 <sin+0x1c>
 80a475e:	2401      	movs	r4, #1
 80a4760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4764:	9400      	str	r4, [sp, #0]
 80a4766:	f000 ff6f 	bl	80a5648 <__kernel_sin>
 80a476a:	e7c9      	b.n	80a4700 <sin+0x1c>
 80a476c:	3fe921fb 	.word	0x3fe921fb
 80a4770:	7fefffff 	.word	0x7fefffff

080a4774 <tan>:
 80a4774:	b530      	push	{r4, r5, lr}
 80a4776:	4a15      	ldr	r2, [pc, #84]	; (80a47cc <tan+0x58>)
 80a4778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a477c:	4293      	cmp	r3, r2
 80a477e:	b087      	sub	sp, #28
 80a4780:	dd1b      	ble.n	80a47ba <tan+0x46>
 80a4782:	4a13      	ldr	r2, [pc, #76]	; (80a47d0 <tan+0x5c>)
 80a4784:	4293      	cmp	r3, r2
 80a4786:	dd05      	ble.n	80a4794 <tan+0x20>
 80a4788:	4602      	mov	r2, r0
 80a478a:	460b      	mov	r3, r1
 80a478c:	f001 fae6 	bl	80a5d5c <__aeabi_dsub>
 80a4790:	b007      	add	sp, #28
 80a4792:	bd30      	pop	{r4, r5, pc}
 80a4794:	aa02      	add	r2, sp, #8
 80a4796:	f000 f81f 	bl	80a47d8 <__ieee754_rem_pio2>
 80a479a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a479e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a47a2:	0040      	lsls	r0, r0, #1
 80a47a4:	f000 0002 	and.w	r0, r0, #2
 80a47a8:	f1c0 0001 	rsb	r0, r0, #1
 80a47ac:	9000      	str	r0, [sp, #0]
 80a47ae:	4629      	mov	r1, r5
 80a47b0:	4620      	mov	r0, r4
 80a47b2:	f001 f801 	bl	80a57b8 <__kernel_tan>
 80a47b6:	b007      	add	sp, #28
 80a47b8:	bd30      	pop	{r4, r5, pc}
 80a47ba:	2301      	movs	r3, #1
 80a47bc:	9300      	str	r3, [sp, #0]
 80a47be:	2200      	movs	r2, #0
 80a47c0:	2300      	movs	r3, #0
 80a47c2:	f000 fff9 	bl	80a57b8 <__kernel_tan>
 80a47c6:	b007      	add	sp, #28
 80a47c8:	bd30      	pop	{r4, r5, pc}
 80a47ca:	bf00      	nop
 80a47cc:	3fe921fb 	.word	0x3fe921fb
 80a47d0:	7fefffff 	.word	0x7fefffff
 80a47d4:	00000000 	.word	0x00000000

080a47d8 <__ieee754_rem_pio2>:
 80a47d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a47dc:	4c94      	ldr	r4, [pc, #592]	; (80a4a30 <__ieee754_rem_pio2+0x258>)
 80a47de:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a47e2:	42a7      	cmp	r7, r4
 80a47e4:	b08f      	sub	sp, #60	; 0x3c
 80a47e6:	f340 8081 	ble.w	80a48ec <__ieee754_rem_pio2+0x114>
 80a47ea:	4614      	mov	r4, r2
 80a47ec:	4a91      	ldr	r2, [pc, #580]	; (80a4a34 <__ieee754_rem_pio2+0x25c>)
 80a47ee:	460e      	mov	r6, r1
 80a47f0:	4297      	cmp	r7, r2
 80a47f2:	dc26      	bgt.n	80a4842 <__ieee754_rem_pio2+0x6a>
 80a47f4:	a384      	add	r3, pc, #528	; (adr r3, 80a4a08 <__ieee754_rem_pio2+0x230>)
 80a47f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a47fa:	2900      	cmp	r1, #0
 80a47fc:	f340 81a0 	ble.w	80a4b40 <__ieee754_rem_pio2+0x368>
 80a4800:	f001 faac 	bl	80a5d5c <__aeabi_dsub>
 80a4804:	4b8c      	ldr	r3, [pc, #560]	; (80a4a38 <__ieee754_rem_pio2+0x260>)
 80a4806:	4680      	mov	r8, r0
 80a4808:	429f      	cmp	r7, r3
 80a480a:	4689      	mov	r9, r1
 80a480c:	f000 8083 	beq.w	80a4916 <__ieee754_rem_pio2+0x13e>
 80a4810:	a37f      	add	r3, pc, #508	; (adr r3, 80a4a10 <__ieee754_rem_pio2+0x238>)
 80a4812:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4816:	f001 faa1 	bl	80a5d5c <__aeabi_dsub>
 80a481a:	4602      	mov	r2, r0
 80a481c:	460b      	mov	r3, r1
 80a481e:	4640      	mov	r0, r8
 80a4820:	e9c4 2300 	strd	r2, r3, [r4]
 80a4824:	4649      	mov	r1, r9
 80a4826:	f001 fa99 	bl	80a5d5c <__aeabi_dsub>
 80a482a:	a379      	add	r3, pc, #484	; (adr r3, 80a4a10 <__ieee754_rem_pio2+0x238>)
 80a482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4830:	f001 fa94 	bl	80a5d5c <__aeabi_dsub>
 80a4834:	2501      	movs	r5, #1
 80a4836:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a483a:	4628      	mov	r0, r5
 80a483c:	b00f      	add	sp, #60	; 0x3c
 80a483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4842:	4a7e      	ldr	r2, [pc, #504]	; (80a4a3c <__ieee754_rem_pio2+0x264>)
 80a4844:	4297      	cmp	r7, r2
 80a4846:	f340 8083 	ble.w	80a4950 <__ieee754_rem_pio2+0x178>
 80a484a:	4a7d      	ldr	r2, [pc, #500]	; (80a4a40 <__ieee754_rem_pio2+0x268>)
 80a484c:	4297      	cmp	r7, r2
 80a484e:	dc58      	bgt.n	80a4902 <__ieee754_rem_pio2+0x12a>
 80a4850:	153d      	asrs	r5, r7, #20
 80a4852:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80a4856:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 80a485a:	468b      	mov	fp, r1
 80a485c:	4682      	mov	sl, r0
 80a485e:	f001 fee1 	bl	80a6624 <__aeabi_d2iz>
 80a4862:	f001 fbc9 	bl	80a5ff8 <__aeabi_i2d>
 80a4866:	4680      	mov	r8, r0
 80a4868:	4689      	mov	r9, r1
 80a486a:	4642      	mov	r2, r8
 80a486c:	464b      	mov	r3, r9
 80a486e:	4650      	mov	r0, sl
 80a4870:	4659      	mov	r1, fp
 80a4872:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a4876:	f001 fa71 	bl	80a5d5c <__aeabi_dsub>
 80a487a:	2200      	movs	r2, #0
 80a487c:	4b71      	ldr	r3, [pc, #452]	; (80a4a44 <__ieee754_rem_pio2+0x26c>)
 80a487e:	f001 fc21 	bl	80a60c4 <__aeabi_dmul>
 80a4882:	468b      	mov	fp, r1
 80a4884:	4682      	mov	sl, r0
 80a4886:	f001 fecd 	bl	80a6624 <__aeabi_d2iz>
 80a488a:	f001 fbb5 	bl	80a5ff8 <__aeabi_i2d>
 80a488e:	4680      	mov	r8, r0
 80a4890:	4689      	mov	r9, r1
 80a4892:	4642      	mov	r2, r8
 80a4894:	464b      	mov	r3, r9
 80a4896:	4650      	mov	r0, sl
 80a4898:	4659      	mov	r1, fp
 80a489a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a489e:	f001 fa5d 	bl	80a5d5c <__aeabi_dsub>
 80a48a2:	2200      	movs	r2, #0
 80a48a4:	4b67      	ldr	r3, [pc, #412]	; (80a4a44 <__ieee754_rem_pio2+0x26c>)
 80a48a6:	f001 fc0d 	bl	80a60c4 <__aeabi_dmul>
 80a48aa:	2200      	movs	r2, #0
 80a48ac:	2300      	movs	r3, #0
 80a48ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a48b2:	f001 fe6f 	bl	80a6594 <__aeabi_dcmpeq>
 80a48b6:	2800      	cmp	r0, #0
 80a48b8:	f000 816a 	beq.w	80a4b90 <__ieee754_rem_pio2+0x3b8>
 80a48bc:	2300      	movs	r3, #0
 80a48be:	4640      	mov	r0, r8
 80a48c0:	4649      	mov	r1, r9
 80a48c2:	2200      	movs	r2, #0
 80a48c4:	f001 fe66 	bl	80a6594 <__aeabi_dcmpeq>
 80a48c8:	2800      	cmp	r0, #0
 80a48ca:	bf14      	ite	ne
 80a48cc:	2301      	movne	r3, #1
 80a48ce:	2302      	moveq	r3, #2
 80a48d0:	485d      	ldr	r0, [pc, #372]	; (80a4a48 <__ieee754_rem_pio2+0x270>)
 80a48d2:	2102      	movs	r1, #2
 80a48d4:	9001      	str	r0, [sp, #4]
 80a48d6:	9100      	str	r1, [sp, #0]
 80a48d8:	462a      	mov	r2, r5
 80a48da:	4621      	mov	r1, r4
 80a48dc:	a808      	add	r0, sp, #32
 80a48de:	f000 fab7 	bl	80a4e50 <__kernel_rem_pio2>
 80a48e2:	2e00      	cmp	r6, #0
 80a48e4:	f2c0 814a 	blt.w	80a4b7c <__ieee754_rem_pio2+0x3a4>
 80a48e8:	4605      	mov	r5, r0
 80a48ea:	e006      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a48ec:	e9c2 0100 	strd	r0, r1, [r2]
 80a48f0:	2500      	movs	r5, #0
 80a48f2:	2400      	movs	r4, #0
 80a48f4:	e9c2 4502 	strd	r4, r5, [r2, #8]
 80a48f8:	2500      	movs	r5, #0
 80a48fa:	4628      	mov	r0, r5
 80a48fc:	b00f      	add	sp, #60	; 0x3c
 80a48fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4902:	4602      	mov	r2, r0
 80a4904:	460b      	mov	r3, r1
 80a4906:	f001 fa29 	bl	80a5d5c <__aeabi_dsub>
 80a490a:	2500      	movs	r5, #0
 80a490c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a4910:	e9c4 0100 	strd	r0, r1, [r4]
 80a4914:	e7f1      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a4916:	a340      	add	r3, pc, #256	; (adr r3, 80a4a18 <__ieee754_rem_pio2+0x240>)
 80a4918:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a491c:	f001 fa1e 	bl	80a5d5c <__aeabi_dsub>
 80a4920:	a33f      	add	r3, pc, #252	; (adr r3, 80a4a20 <__ieee754_rem_pio2+0x248>)
 80a4922:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4926:	4606      	mov	r6, r0
 80a4928:	460f      	mov	r7, r1
 80a492a:	f001 fa17 	bl	80a5d5c <__aeabi_dsub>
 80a492e:	4602      	mov	r2, r0
 80a4930:	460b      	mov	r3, r1
 80a4932:	4630      	mov	r0, r6
 80a4934:	e9c4 2300 	strd	r2, r3, [r4]
 80a4938:	4639      	mov	r1, r7
 80a493a:	f001 fa0f 	bl	80a5d5c <__aeabi_dsub>
 80a493e:	a338      	add	r3, pc, #224	; (adr r3, 80a4a20 <__ieee754_rem_pio2+0x248>)
 80a4940:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4944:	f001 fa0a 	bl	80a5d5c <__aeabi_dsub>
 80a4948:	2501      	movs	r5, #1
 80a494a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a494e:	e7d4      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a4950:	f001 f8fa 	bl	80a5b48 <fabs>
 80a4954:	a334      	add	r3, pc, #208	; (adr r3, 80a4a28 <__ieee754_rem_pio2+0x250>)
 80a4956:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a495a:	4680      	mov	r8, r0
 80a495c:	4689      	mov	r9, r1
 80a495e:	f001 fbb1 	bl	80a60c4 <__aeabi_dmul>
 80a4962:	2200      	movs	r2, #0
 80a4964:	4b39      	ldr	r3, [pc, #228]	; (80a4a4c <__ieee754_rem_pio2+0x274>)
 80a4966:	f001 f9fb 	bl	80a5d60 <__adddf3>
 80a496a:	f001 fe5b 	bl	80a6624 <__aeabi_d2iz>
 80a496e:	4605      	mov	r5, r0
 80a4970:	f001 fb42 	bl	80a5ff8 <__aeabi_i2d>
 80a4974:	a324      	add	r3, pc, #144	; (adr r3, 80a4a08 <__ieee754_rem_pio2+0x230>)
 80a4976:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a497a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a497e:	f001 fba1 	bl	80a60c4 <__aeabi_dmul>
 80a4982:	4602      	mov	r2, r0
 80a4984:	460b      	mov	r3, r1
 80a4986:	4640      	mov	r0, r8
 80a4988:	4649      	mov	r1, r9
 80a498a:	f001 f9e7 	bl	80a5d5c <__aeabi_dsub>
 80a498e:	a320      	add	r3, pc, #128	; (adr r3, 80a4a10 <__ieee754_rem_pio2+0x238>)
 80a4990:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4994:	4682      	mov	sl, r0
 80a4996:	468b      	mov	fp, r1
 80a4998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a499c:	f001 fb92 	bl	80a60c4 <__aeabi_dmul>
 80a49a0:	2d1f      	cmp	r5, #31
 80a49a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a49a6:	dc55      	bgt.n	80a4a54 <__ieee754_rem_pio2+0x27c>
 80a49a8:	4b29      	ldr	r3, [pc, #164]	; (80a4a50 <__ieee754_rem_pio2+0x278>)
 80a49aa:	1e6a      	subs	r2, r5, #1
 80a49ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a49b0:	429f      	cmp	r7, r3
 80a49b2:	d04f      	beq.n	80a4a54 <__ieee754_rem_pio2+0x27c>
 80a49b4:	4602      	mov	r2, r0
 80a49b6:	460b      	mov	r3, r1
 80a49b8:	4650      	mov	r0, sl
 80a49ba:	4659      	mov	r1, fp
 80a49bc:	f001 f9ce 	bl	80a5d5c <__aeabi_dsub>
 80a49c0:	4602      	mov	r2, r0
 80a49c2:	460b      	mov	r3, r1
 80a49c4:	4681      	mov	r9, r0
 80a49c6:	4688      	mov	r8, r1
 80a49c8:	e9c4 2300 	strd	r2, r3, [r4]
 80a49cc:	464a      	mov	r2, r9
 80a49ce:	4643      	mov	r3, r8
 80a49d0:	4650      	mov	r0, sl
 80a49d2:	4659      	mov	r1, fp
 80a49d4:	f001 f9c2 	bl	80a5d5c <__aeabi_dsub>
 80a49d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a49dc:	f001 f9be 	bl	80a5d5c <__aeabi_dsub>
 80a49e0:	4602      	mov	r2, r0
 80a49e2:	460b      	mov	r3, r1
 80a49e4:	2e00      	cmp	r6, #0
 80a49e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a49ea:	da86      	bge.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a49ec:	464a      	mov	r2, r9
 80a49ee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80a49f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a49f6:	e884 000c 	stmia.w	r4, {r2, r3}
 80a49fa:	60e1      	str	r1, [r4, #12]
 80a49fc:	60a0      	str	r0, [r4, #8]
 80a49fe:	426d      	negs	r5, r5
 80a4a00:	e77b      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a4a02:	bf00      	nop
 80a4a04:	f3af 8000 	nop.w
 80a4a08:	54400000 	.word	0x54400000
 80a4a0c:	3ff921fb 	.word	0x3ff921fb
 80a4a10:	1a626331 	.word	0x1a626331
 80a4a14:	3dd0b461 	.word	0x3dd0b461
 80a4a18:	1a600000 	.word	0x1a600000
 80a4a1c:	3dd0b461 	.word	0x3dd0b461
 80a4a20:	2e037073 	.word	0x2e037073
 80a4a24:	3ba3198a 	.word	0x3ba3198a
 80a4a28:	6dc9c883 	.word	0x6dc9c883
 80a4a2c:	3fe45f30 	.word	0x3fe45f30
 80a4a30:	3fe921fb 	.word	0x3fe921fb
 80a4a34:	4002d97b 	.word	0x4002d97b
 80a4a38:	3ff921fb 	.word	0x3ff921fb
 80a4a3c:	413921fb 	.word	0x413921fb
 80a4a40:	7fefffff 	.word	0x7fefffff
 80a4a44:	41700000 	.word	0x41700000
 80a4a48:	080a7380 	.word	0x080a7380
 80a4a4c:	3fe00000 	.word	0x3fe00000
 80a4a50:	080a7300 	.word	0x080a7300
 80a4a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4a58:	4650      	mov	r0, sl
 80a4a5a:	4659      	mov	r1, fp
 80a4a5c:	f001 f97e 	bl	80a5d5c <__aeabi_dsub>
 80a4a60:	153f      	asrs	r7, r7, #20
 80a4a62:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a4a66:	1afb      	subs	r3, r7, r3
 80a4a68:	2b10      	cmp	r3, #16
 80a4a6a:	4681      	mov	r9, r0
 80a4a6c:	4688      	mov	r8, r1
 80a4a6e:	e9c4 0100 	strd	r0, r1, [r4]
 80a4a72:	ddab      	ble.n	80a49cc <__ieee754_rem_pio2+0x1f4>
 80a4a74:	a358      	add	r3, pc, #352	; (adr r3, 80a4bd8 <__ieee754_rem_pio2+0x400>)
 80a4a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4a7e:	f001 fb21 	bl	80a60c4 <__aeabi_dmul>
 80a4a82:	4680      	mov	r8, r0
 80a4a84:	4689      	mov	r9, r1
 80a4a86:	4602      	mov	r2, r0
 80a4a88:	460b      	mov	r3, r1
 80a4a8a:	4650      	mov	r0, sl
 80a4a8c:	4659      	mov	r1, fp
 80a4a8e:	f001 f965 	bl	80a5d5c <__aeabi_dsub>
 80a4a92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a4a96:	4602      	mov	r2, r0
 80a4a98:	460b      	mov	r3, r1
 80a4a9a:	4650      	mov	r0, sl
 80a4a9c:	4659      	mov	r1, fp
 80a4a9e:	f001 f95d 	bl	80a5d5c <__aeabi_dsub>
 80a4aa2:	4642      	mov	r2, r8
 80a4aa4:	464b      	mov	r3, r9
 80a4aa6:	f001 f959 	bl	80a5d5c <__aeabi_dsub>
 80a4aaa:	a34d      	add	r3, pc, #308	; (adr r3, 80a4be0 <__ieee754_rem_pio2+0x408>)
 80a4aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ab0:	4680      	mov	r8, r0
 80a4ab2:	4689      	mov	r9, r1
 80a4ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4ab8:	f001 fb04 	bl	80a60c4 <__aeabi_dmul>
 80a4abc:	4642      	mov	r2, r8
 80a4abe:	464b      	mov	r3, r9
 80a4ac0:	f001 f94c 	bl	80a5d5c <__aeabi_dsub>
 80a4ac4:	4602      	mov	r2, r0
 80a4ac6:	460b      	mov	r3, r1
 80a4ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4ad0:	f001 f944 	bl	80a5d5c <__aeabi_dsub>
 80a4ad4:	460b      	mov	r3, r1
 80a4ad6:	4602      	mov	r2, r0
 80a4ad8:	4688      	mov	r8, r1
 80a4ada:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80a4ade:	1a7f      	subs	r7, r7, r1
 80a4ae0:	2f31      	cmp	r7, #49	; 0x31
 80a4ae2:	4681      	mov	r9, r0
 80a4ae4:	e9c4 2300 	strd	r2, r3, [r4]
 80a4ae8:	dd72      	ble.n	80a4bd0 <__ieee754_rem_pio2+0x3f8>
 80a4aea:	a33f      	add	r3, pc, #252	; (adr r3, 80a4be8 <__ieee754_rem_pio2+0x410>)
 80a4aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4af4:	f001 fae6 	bl	80a60c4 <__aeabi_dmul>
 80a4af8:	4680      	mov	r8, r0
 80a4afa:	4689      	mov	r9, r1
 80a4afc:	4602      	mov	r2, r0
 80a4afe:	460b      	mov	r3, r1
 80a4b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4b04:	f001 f92a 	bl	80a5d5c <__aeabi_dsub>
 80a4b08:	4602      	mov	r2, r0
 80a4b0a:	460b      	mov	r3, r1
 80a4b0c:	4682      	mov	sl, r0
 80a4b0e:	468b      	mov	fp, r1
 80a4b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4b14:	f001 f922 	bl	80a5d5c <__aeabi_dsub>
 80a4b18:	4642      	mov	r2, r8
 80a4b1a:	464b      	mov	r3, r9
 80a4b1c:	f001 f91e 	bl	80a5d5c <__aeabi_dsub>
 80a4b20:	a333      	add	r3, pc, #204	; (adr r3, 80a4bf0 <__ieee754_rem_pio2+0x418>)
 80a4b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b26:	4680      	mov	r8, r0
 80a4b28:	4689      	mov	r9, r1
 80a4b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4b2e:	f001 fac9 	bl	80a60c4 <__aeabi_dmul>
 80a4b32:	4642      	mov	r2, r8
 80a4b34:	464b      	mov	r3, r9
 80a4b36:	f001 f911 	bl	80a5d5c <__aeabi_dsub>
 80a4b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4b3e:	e739      	b.n	80a49b4 <__ieee754_rem_pio2+0x1dc>
 80a4b40:	f001 f90e 	bl	80a5d60 <__adddf3>
 80a4b44:	4b2e      	ldr	r3, [pc, #184]	; (80a4c00 <__ieee754_rem_pio2+0x428>)
 80a4b46:	4680      	mov	r8, r0
 80a4b48:	429f      	cmp	r7, r3
 80a4b4a:	4689      	mov	r9, r1
 80a4b4c:	d022      	beq.n	80a4b94 <__ieee754_rem_pio2+0x3bc>
 80a4b4e:	a32a      	add	r3, pc, #168	; (adr r3, 80a4bf8 <__ieee754_rem_pio2+0x420>)
 80a4b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b54:	f001 f904 	bl	80a5d60 <__adddf3>
 80a4b58:	4602      	mov	r2, r0
 80a4b5a:	460b      	mov	r3, r1
 80a4b5c:	4640      	mov	r0, r8
 80a4b5e:	e9c4 2300 	strd	r2, r3, [r4]
 80a4b62:	4649      	mov	r1, r9
 80a4b64:	f001 f8fa 	bl	80a5d5c <__aeabi_dsub>
 80a4b68:	a323      	add	r3, pc, #140	; (adr r3, 80a4bf8 <__ieee754_rem_pio2+0x420>)
 80a4b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b6e:	f001 f8f7 	bl	80a5d60 <__adddf3>
 80a4b72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a4b76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a4b7a:	e6be      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a4b7c:	6862      	ldr	r2, [r4, #4]
 80a4b7e:	68e3      	ldr	r3, [r4, #12]
 80a4b80:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a4b84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a4b88:	4245      	negs	r5, r0
 80a4b8a:	6062      	str	r2, [r4, #4]
 80a4b8c:	60e3      	str	r3, [r4, #12]
 80a4b8e:	e6b4      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a4b90:	2303      	movs	r3, #3
 80a4b92:	e69d      	b.n	80a48d0 <__ieee754_rem_pio2+0xf8>
 80a4b94:	a310      	add	r3, pc, #64	; (adr r3, 80a4bd8 <__ieee754_rem_pio2+0x400>)
 80a4b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b9a:	f001 f8e1 	bl	80a5d60 <__adddf3>
 80a4b9e:	a310      	add	r3, pc, #64	; (adr r3, 80a4be0 <__ieee754_rem_pio2+0x408>)
 80a4ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ba4:	4606      	mov	r6, r0
 80a4ba6:	460f      	mov	r7, r1
 80a4ba8:	f001 f8da 	bl	80a5d60 <__adddf3>
 80a4bac:	4602      	mov	r2, r0
 80a4bae:	460b      	mov	r3, r1
 80a4bb0:	4630      	mov	r0, r6
 80a4bb2:	e9c4 2300 	strd	r2, r3, [r4]
 80a4bb6:	4639      	mov	r1, r7
 80a4bb8:	f001 f8d0 	bl	80a5d5c <__aeabi_dsub>
 80a4bbc:	a308      	add	r3, pc, #32	; (adr r3, 80a4be0 <__ieee754_rem_pio2+0x408>)
 80a4bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bc2:	f001 f8cd 	bl	80a5d60 <__adddf3>
 80a4bc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a4bca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a4bce:	e694      	b.n	80a48fa <__ieee754_rem_pio2+0x122>
 80a4bd0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80a4bd4:	e6fa      	b.n	80a49cc <__ieee754_rem_pio2+0x1f4>
 80a4bd6:	bf00      	nop
 80a4bd8:	1a600000 	.word	0x1a600000
 80a4bdc:	3dd0b461 	.word	0x3dd0b461
 80a4be0:	2e037073 	.word	0x2e037073
 80a4be4:	3ba3198a 	.word	0x3ba3198a
 80a4be8:	2e000000 	.word	0x2e000000
 80a4bec:	3ba3198a 	.word	0x3ba3198a
 80a4bf0:	252049c1 	.word	0x252049c1
 80a4bf4:	397b839a 	.word	0x397b839a
 80a4bf8:	1a626331 	.word	0x1a626331
 80a4bfc:	3dd0b461 	.word	0x3dd0b461
 80a4c00:	3ff921fb 	.word	0x3ff921fb
 80a4c04:	00000000 	.word	0x00000000

080a4c08 <__kernel_cos>:
 80a4c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4c0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a4c10:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a4c14:	b085      	sub	sp, #20
 80a4c16:	460c      	mov	r4, r1
 80a4c18:	4692      	mov	sl, r2
 80a4c1a:	469b      	mov	fp, r3
 80a4c1c:	4605      	mov	r5, r0
 80a4c1e:	da6b      	bge.n	80a4cf8 <__kernel_cos+0xf0>
 80a4c20:	f001 fd00 	bl	80a6624 <__aeabi_d2iz>
 80a4c24:	2800      	cmp	r0, #0
 80a4c26:	f000 80e7 	beq.w	80a4df8 <__kernel_cos+0x1f0>
 80a4c2a:	462a      	mov	r2, r5
 80a4c2c:	4623      	mov	r3, r4
 80a4c2e:	4628      	mov	r0, r5
 80a4c30:	4621      	mov	r1, r4
 80a4c32:	f001 fa47 	bl	80a60c4 <__aeabi_dmul>
 80a4c36:	a374      	add	r3, pc, #464	; (adr r3, 80a4e08 <__kernel_cos+0x200>)
 80a4c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c3c:	4680      	mov	r8, r0
 80a4c3e:	4689      	mov	r9, r1
 80a4c40:	f001 fa40 	bl	80a60c4 <__aeabi_dmul>
 80a4c44:	a372      	add	r3, pc, #456	; (adr r3, 80a4e10 <__kernel_cos+0x208>)
 80a4c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c4a:	f001 f889 	bl	80a5d60 <__adddf3>
 80a4c4e:	4642      	mov	r2, r8
 80a4c50:	464b      	mov	r3, r9
 80a4c52:	f001 fa37 	bl	80a60c4 <__aeabi_dmul>
 80a4c56:	a370      	add	r3, pc, #448	; (adr r3, 80a4e18 <__kernel_cos+0x210>)
 80a4c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c5c:	f001 f87e 	bl	80a5d5c <__aeabi_dsub>
 80a4c60:	4642      	mov	r2, r8
 80a4c62:	464b      	mov	r3, r9
 80a4c64:	f001 fa2e 	bl	80a60c4 <__aeabi_dmul>
 80a4c68:	a36d      	add	r3, pc, #436	; (adr r3, 80a4e20 <__kernel_cos+0x218>)
 80a4c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c6e:	f001 f877 	bl	80a5d60 <__adddf3>
 80a4c72:	4642      	mov	r2, r8
 80a4c74:	464b      	mov	r3, r9
 80a4c76:	f001 fa25 	bl	80a60c4 <__aeabi_dmul>
 80a4c7a:	a36b      	add	r3, pc, #428	; (adr r3, 80a4e28 <__kernel_cos+0x220>)
 80a4c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c80:	f001 f86c 	bl	80a5d5c <__aeabi_dsub>
 80a4c84:	4642      	mov	r2, r8
 80a4c86:	464b      	mov	r3, r9
 80a4c88:	f001 fa1c 	bl	80a60c4 <__aeabi_dmul>
 80a4c8c:	a368      	add	r3, pc, #416	; (adr r3, 80a4e30 <__kernel_cos+0x228>)
 80a4c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c92:	f001 f865 	bl	80a5d60 <__adddf3>
 80a4c96:	4642      	mov	r2, r8
 80a4c98:	464b      	mov	r3, r9
 80a4c9a:	f001 fa13 	bl	80a60c4 <__aeabi_dmul>
 80a4c9e:	e9cd 0100 	strd	r0, r1, [sp]
 80a4ca2:	2200      	movs	r2, #0
 80a4ca4:	4b64      	ldr	r3, [pc, #400]	; (80a4e38 <__kernel_cos+0x230>)
 80a4ca6:	4640      	mov	r0, r8
 80a4ca8:	4649      	mov	r1, r9
 80a4caa:	f001 fa0b 	bl	80a60c4 <__aeabi_dmul>
 80a4cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4cb2:	4606      	mov	r6, r0
 80a4cb4:	460f      	mov	r7, r1
 80a4cb6:	4640      	mov	r0, r8
 80a4cb8:	4649      	mov	r1, r9
 80a4cba:	f001 fa03 	bl	80a60c4 <__aeabi_dmul>
 80a4cbe:	4652      	mov	r2, sl
 80a4cc0:	4680      	mov	r8, r0
 80a4cc2:	4689      	mov	r9, r1
 80a4cc4:	465b      	mov	r3, fp
 80a4cc6:	4628      	mov	r0, r5
 80a4cc8:	4621      	mov	r1, r4
 80a4cca:	f001 f9fb 	bl	80a60c4 <__aeabi_dmul>
 80a4cce:	4602      	mov	r2, r0
 80a4cd0:	460b      	mov	r3, r1
 80a4cd2:	4640      	mov	r0, r8
 80a4cd4:	4649      	mov	r1, r9
 80a4cd6:	f001 f841 	bl	80a5d5c <__aeabi_dsub>
 80a4cda:	4602      	mov	r2, r0
 80a4cdc:	460b      	mov	r3, r1
 80a4cde:	4630      	mov	r0, r6
 80a4ce0:	4639      	mov	r1, r7
 80a4ce2:	f001 f83b 	bl	80a5d5c <__aeabi_dsub>
 80a4ce6:	4602      	mov	r2, r0
 80a4ce8:	460b      	mov	r3, r1
 80a4cea:	2000      	movs	r0, #0
 80a4cec:	4953      	ldr	r1, [pc, #332]	; (80a4e3c <__kernel_cos+0x234>)
 80a4cee:	f001 f835 	bl	80a5d5c <__aeabi_dsub>
 80a4cf2:	b005      	add	sp, #20
 80a4cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4cf8:	4602      	mov	r2, r0
 80a4cfa:	460b      	mov	r3, r1
 80a4cfc:	f001 f9e2 	bl	80a60c4 <__aeabi_dmul>
 80a4d00:	a341      	add	r3, pc, #260	; (adr r3, 80a4e08 <__kernel_cos+0x200>)
 80a4d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d06:	4680      	mov	r8, r0
 80a4d08:	4689      	mov	r9, r1
 80a4d0a:	f001 f9db 	bl	80a60c4 <__aeabi_dmul>
 80a4d0e:	a340      	add	r3, pc, #256	; (adr r3, 80a4e10 <__kernel_cos+0x208>)
 80a4d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d14:	f001 f824 	bl	80a5d60 <__adddf3>
 80a4d18:	4642      	mov	r2, r8
 80a4d1a:	464b      	mov	r3, r9
 80a4d1c:	f001 f9d2 	bl	80a60c4 <__aeabi_dmul>
 80a4d20:	a33d      	add	r3, pc, #244	; (adr r3, 80a4e18 <__kernel_cos+0x210>)
 80a4d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d26:	f001 f819 	bl	80a5d5c <__aeabi_dsub>
 80a4d2a:	4642      	mov	r2, r8
 80a4d2c:	464b      	mov	r3, r9
 80a4d2e:	f001 f9c9 	bl	80a60c4 <__aeabi_dmul>
 80a4d32:	a33b      	add	r3, pc, #236	; (adr r3, 80a4e20 <__kernel_cos+0x218>)
 80a4d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d38:	f001 f812 	bl	80a5d60 <__adddf3>
 80a4d3c:	4642      	mov	r2, r8
 80a4d3e:	464b      	mov	r3, r9
 80a4d40:	f001 f9c0 	bl	80a60c4 <__aeabi_dmul>
 80a4d44:	a338      	add	r3, pc, #224	; (adr r3, 80a4e28 <__kernel_cos+0x220>)
 80a4d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d4a:	f001 f807 	bl	80a5d5c <__aeabi_dsub>
 80a4d4e:	4642      	mov	r2, r8
 80a4d50:	464b      	mov	r3, r9
 80a4d52:	f001 f9b7 	bl	80a60c4 <__aeabi_dmul>
 80a4d56:	a336      	add	r3, pc, #216	; (adr r3, 80a4e30 <__kernel_cos+0x228>)
 80a4d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d5c:	f001 f800 	bl	80a5d60 <__adddf3>
 80a4d60:	464b      	mov	r3, r9
 80a4d62:	4642      	mov	r2, r8
 80a4d64:	f001 f9ae 	bl	80a60c4 <__aeabi_dmul>
 80a4d68:	4b35      	ldr	r3, [pc, #212]	; (80a4e40 <__kernel_cos+0x238>)
 80a4d6a:	e9cd 0100 	strd	r0, r1, [sp]
 80a4d6e:	429e      	cmp	r6, r3
 80a4d70:	dd97      	ble.n	80a4ca2 <__kernel_cos+0x9a>
 80a4d72:	4b34      	ldr	r3, [pc, #208]	; (80a4e44 <__kernel_cos+0x23c>)
 80a4d74:	2200      	movs	r2, #0
 80a4d76:	429e      	cmp	r6, r3
 80a4d78:	dc38      	bgt.n	80a4dec <__kernel_cos+0x1e4>
 80a4d7a:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80a4d7e:	2000      	movs	r0, #0
 80a4d80:	492e      	ldr	r1, [pc, #184]	; (80a4e3c <__kernel_cos+0x234>)
 80a4d82:	4616      	mov	r6, r2
 80a4d84:	461f      	mov	r7, r3
 80a4d86:	f000 ffe9 	bl	80a5d5c <__aeabi_dsub>
 80a4d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4d8e:	2200      	movs	r2, #0
 80a4d90:	4b29      	ldr	r3, [pc, #164]	; (80a4e38 <__kernel_cos+0x230>)
 80a4d92:	4640      	mov	r0, r8
 80a4d94:	4649      	mov	r1, r9
 80a4d96:	f001 f995 	bl	80a60c4 <__aeabi_dmul>
 80a4d9a:	4632      	mov	r2, r6
 80a4d9c:	463b      	mov	r3, r7
 80a4d9e:	f000 ffdd 	bl	80a5d5c <__aeabi_dsub>
 80a4da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4da6:	4606      	mov	r6, r0
 80a4da8:	460f      	mov	r7, r1
 80a4daa:	4640      	mov	r0, r8
 80a4dac:	4649      	mov	r1, r9
 80a4dae:	f001 f989 	bl	80a60c4 <__aeabi_dmul>
 80a4db2:	4652      	mov	r2, sl
 80a4db4:	4680      	mov	r8, r0
 80a4db6:	4689      	mov	r9, r1
 80a4db8:	465b      	mov	r3, fp
 80a4dba:	4628      	mov	r0, r5
 80a4dbc:	4621      	mov	r1, r4
 80a4dbe:	f001 f981 	bl	80a60c4 <__aeabi_dmul>
 80a4dc2:	4602      	mov	r2, r0
 80a4dc4:	460b      	mov	r3, r1
 80a4dc6:	4640      	mov	r0, r8
 80a4dc8:	4649      	mov	r1, r9
 80a4dca:	f000 ffc7 	bl	80a5d5c <__aeabi_dsub>
 80a4dce:	4602      	mov	r2, r0
 80a4dd0:	460b      	mov	r3, r1
 80a4dd2:	4630      	mov	r0, r6
 80a4dd4:	4639      	mov	r1, r7
 80a4dd6:	f000 ffc1 	bl	80a5d5c <__aeabi_dsub>
 80a4dda:	4602      	mov	r2, r0
 80a4ddc:	460b      	mov	r3, r1
 80a4dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4de2:	f000 ffbb 	bl	80a5d5c <__aeabi_dsub>
 80a4de6:	b005      	add	sp, #20
 80a4de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4dec:	4b16      	ldr	r3, [pc, #88]	; (80a4e48 <__kernel_cos+0x240>)
 80a4dee:	2600      	movs	r6, #0
 80a4df0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a4df4:	4f15      	ldr	r7, [pc, #84]	; (80a4e4c <__kernel_cos+0x244>)
 80a4df6:	e7ca      	b.n	80a4d8e <__kernel_cos+0x186>
 80a4df8:	4910      	ldr	r1, [pc, #64]	; (80a4e3c <__kernel_cos+0x234>)
 80a4dfa:	2000      	movs	r0, #0
 80a4dfc:	b005      	add	sp, #20
 80a4dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4e02:	bf00      	nop
 80a4e04:	f3af 8000 	nop.w
 80a4e08:	be8838d4 	.word	0xbe8838d4
 80a4e0c:	bda8fae9 	.word	0xbda8fae9
 80a4e10:	bdb4b1c4 	.word	0xbdb4b1c4
 80a4e14:	3e21ee9e 	.word	0x3e21ee9e
 80a4e18:	809c52ad 	.word	0x809c52ad
 80a4e1c:	3e927e4f 	.word	0x3e927e4f
 80a4e20:	19cb1590 	.word	0x19cb1590
 80a4e24:	3efa01a0 	.word	0x3efa01a0
 80a4e28:	16c15177 	.word	0x16c15177
 80a4e2c:	3f56c16c 	.word	0x3f56c16c
 80a4e30:	5555554c 	.word	0x5555554c
 80a4e34:	3fa55555 	.word	0x3fa55555
 80a4e38:	3fe00000 	.word	0x3fe00000
 80a4e3c:	3ff00000 	.word	0x3ff00000
 80a4e40:	3fd33332 	.word	0x3fd33332
 80a4e44:	3fe90000 	.word	0x3fe90000
 80a4e48:	3fe70000 	.word	0x3fe70000
 80a4e4c:	3fd20000 	.word	0x3fd20000

080a4e50 <__kernel_rem_pio2>:
 80a4e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4e54:	4c7a      	ldr	r4, [pc, #488]	; (80a5040 <__kernel_rem_pio2+0x1f0>)
 80a4e56:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 80a4e5a:	461f      	mov	r7, r3
 80a4e5c:	930c      	str	r3, [sp, #48]	; 0x30
 80a4e5e:	1ed3      	subs	r3, r2, #3
 80a4e60:	fb84 5403 	smull	r5, r4, r4, r3
 80a4e64:	17db      	asrs	r3, r3, #31
 80a4e66:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 80a4e6a:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 80a4e6c:	4c75      	ldr	r4, [pc, #468]	; (80a5044 <__kernel_rem_pio2+0x1f4>)
 80a4e6e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80a4e72:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80a4e76:	1c6b      	adds	r3, r5, #1
 80a4e78:	4626      	mov	r6, r4
 80a4e7a:	9409      	str	r4, [sp, #36]	; 0x24
 80a4e7c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a4e80:	1e7c      	subs	r4, r7, #1
 80a4e82:	950d      	str	r5, [sp, #52]	; 0x34
 80a4e84:	9402      	str	r4, [sp, #8]
 80a4e86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a4e8a:	1b2d      	subs	r5, r5, r4
 80a4e8c:	1934      	adds	r4, r6, r4
 80a4e8e:	9004      	str	r0, [sp, #16]
 80a4e90:	910a      	str	r1, [sp, #40]	; 0x28
 80a4e92:	9308      	str	r3, [sp, #32]
 80a4e94:	d416      	bmi.n	80a4ec4 <__kernel_rem_pio2+0x74>
 80a4e96:	442c      	add	r4, r5
 80a4e98:	3401      	adds	r4, #1
 80a4e9a:	ae22      	add	r6, sp, #136	; 0x88
 80a4e9c:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 80a4e9e:	e008      	b.n	80a4eb2 <__kernel_rem_pio2+0x62>
 80a4ea0:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80a4ea4:	f001 f8a8 	bl	80a5ff8 <__aeabi_i2d>
 80a4ea8:	3501      	adds	r5, #1
 80a4eaa:	42a5      	cmp	r5, r4
 80a4eac:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80a4eb0:	d008      	beq.n	80a4ec4 <__kernel_rem_pio2+0x74>
 80a4eb2:	2d00      	cmp	r5, #0
 80a4eb4:	daf4      	bge.n	80a4ea0 <__kernel_rem_pio2+0x50>
 80a4eb6:	3501      	adds	r5, #1
 80a4eb8:	2000      	movs	r0, #0
 80a4eba:	2100      	movs	r1, #0
 80a4ebc:	42a5      	cmp	r5, r4
 80a4ebe:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80a4ec2:	d1f6      	bne.n	80a4eb2 <__kernel_rem_pio2+0x62>
 80a4ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4ec6:	2b00      	cmp	r3, #0
 80a4ec8:	db31      	blt.n	80a4f2e <__kernel_rem_pio2+0xde>
 80a4eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a4ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4ece:	a974      	add	r1, sp, #464	; 0x1d0
 80a4ed0:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 80a4ed4:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80a4ed8:	9a02      	ldr	r2, [sp, #8]
 80a4eda:	a924      	add	r1, sp, #144	; 0x90
 80a4edc:	00db      	lsls	r3, r3, #3
 80a4ede:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80a4ee2:	9301      	str	r3, [sp, #4]
 80a4ee4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80a4ee8:	9b02      	ldr	r3, [sp, #8]
 80a4eea:	2b00      	cmp	r3, #0
 80a4eec:	f2c0 8190 	blt.w	80a5210 <__kernel_rem_pio2+0x3c0>
 80a4ef0:	464c      	mov	r4, r9
 80a4ef2:	9b04      	ldr	r3, [sp, #16]
 80a4ef4:	2600      	movs	r6, #0
 80a4ef6:	f1a3 0508 	sub.w	r5, r3, #8
 80a4efa:	9b01      	ldr	r3, [sp, #4]
 80a4efc:	2700      	movs	r7, #0
 80a4efe:	eb09 0803 	add.w	r8, r9, r3
 80a4f02:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a4f06:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80a4f0a:	f001 f8db 	bl	80a60c4 <__aeabi_dmul>
 80a4f0e:	4602      	mov	r2, r0
 80a4f10:	460b      	mov	r3, r1
 80a4f12:	4630      	mov	r0, r6
 80a4f14:	4639      	mov	r1, r7
 80a4f16:	f000 ff23 	bl	80a5d60 <__adddf3>
 80a4f1a:	4544      	cmp	r4, r8
 80a4f1c:	4606      	mov	r6, r0
 80a4f1e:	460f      	mov	r7, r1
 80a4f20:	d1ef      	bne.n	80a4f02 <__kernel_rem_pio2+0xb2>
 80a4f22:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80a4f26:	45da      	cmp	sl, fp
 80a4f28:	f109 0908 	add.w	r9, r9, #8
 80a4f2c:	d1dc      	bne.n	80a4ee8 <__kernel_rem_pio2+0x98>
 80a4f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4f30:	a910      	add	r1, sp, #64	; 0x40
 80a4f32:	461d      	mov	r5, r3
 80a4f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a4f38:	3b02      	subs	r3, #2
 80a4f3a:	009b      	lsls	r3, r3, #2
 80a4f3c:	1d1a      	adds	r2, r3, #4
 80a4f3e:	440a      	add	r2, r1
 80a4f40:	440b      	add	r3, r1
 80a4f42:	920f      	str	r2, [sp, #60]	; 0x3c
 80a4f44:	930e      	str	r3, [sp, #56]	; 0x38
 80a4f46:	ab9c      	add	r3, sp, #624	; 0x270
 80a4f48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a4f4c:	2d00      	cmp	r5, #0
 80a4f4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80a4f52:	dd2b      	ble.n	80a4fac <__kernel_rem_pio2+0x15c>
 80a4f54:	ab9c      	add	r3, sp, #624	; 0x270
 80a4f56:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 80a4f5a:	3ca8      	subs	r4, #168	; 0xa8
 80a4f5c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 80a4f60:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80a4f64:	2200      	movs	r2, #0
 80a4f66:	4b38      	ldr	r3, [pc, #224]	; (80a5048 <__kernel_rem_pio2+0x1f8>)
 80a4f68:	4630      	mov	r0, r6
 80a4f6a:	4639      	mov	r1, r7
 80a4f6c:	f001 f8aa 	bl	80a60c4 <__aeabi_dmul>
 80a4f70:	f001 fb58 	bl	80a6624 <__aeabi_d2iz>
 80a4f74:	f001 f840 	bl	80a5ff8 <__aeabi_i2d>
 80a4f78:	2200      	movs	r2, #0
 80a4f7a:	4b34      	ldr	r3, [pc, #208]	; (80a504c <__kernel_rem_pio2+0x1fc>)
 80a4f7c:	4680      	mov	r8, r0
 80a4f7e:	4689      	mov	r9, r1
 80a4f80:	f001 f8a0 	bl	80a60c4 <__aeabi_dmul>
 80a4f84:	4602      	mov	r2, r0
 80a4f86:	460b      	mov	r3, r1
 80a4f88:	4630      	mov	r0, r6
 80a4f8a:	4639      	mov	r1, r7
 80a4f8c:	f000 fee6 	bl	80a5d5c <__aeabi_dsub>
 80a4f90:	f001 fb48 	bl	80a6624 <__aeabi_d2iz>
 80a4f94:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80a4f98:	f84a 0f04 	str.w	r0, [sl, #4]!
 80a4f9c:	4649      	mov	r1, r9
 80a4f9e:	4640      	mov	r0, r8
 80a4fa0:	f000 fede 	bl	80a5d60 <__adddf3>
 80a4fa4:	455c      	cmp	r4, fp
 80a4fa6:	4606      	mov	r6, r0
 80a4fa8:	460f      	mov	r7, r1
 80a4faa:	d1db      	bne.n	80a4f64 <__kernel_rem_pio2+0x114>
 80a4fac:	9c08      	ldr	r4, [sp, #32]
 80a4fae:	4630      	mov	r0, r6
 80a4fb0:	4639      	mov	r1, r7
 80a4fb2:	4622      	mov	r2, r4
 80a4fb4:	f000 fe54 	bl	80a5c60 <scalbn>
 80a4fb8:	2200      	movs	r2, #0
 80a4fba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a4fbe:	4606      	mov	r6, r0
 80a4fc0:	460f      	mov	r7, r1
 80a4fc2:	f001 f87f 	bl	80a60c4 <__aeabi_dmul>
 80a4fc6:	f000 fdc3 	bl	80a5b50 <floor>
 80a4fca:	2200      	movs	r2, #0
 80a4fcc:	4b20      	ldr	r3, [pc, #128]	; (80a5050 <__kernel_rem_pio2+0x200>)
 80a4fce:	f001 f879 	bl	80a60c4 <__aeabi_dmul>
 80a4fd2:	4602      	mov	r2, r0
 80a4fd4:	460b      	mov	r3, r1
 80a4fd6:	4630      	mov	r0, r6
 80a4fd8:	4639      	mov	r1, r7
 80a4fda:	f000 febf 	bl	80a5d5c <__aeabi_dsub>
 80a4fde:	460f      	mov	r7, r1
 80a4fe0:	4606      	mov	r6, r0
 80a4fe2:	f001 fb1f 	bl	80a6624 <__aeabi_d2iz>
 80a4fe6:	4681      	mov	r9, r0
 80a4fe8:	f001 f806 	bl	80a5ff8 <__aeabi_i2d>
 80a4fec:	4602      	mov	r2, r0
 80a4fee:	460b      	mov	r3, r1
 80a4ff0:	4630      	mov	r0, r6
 80a4ff2:	4639      	mov	r1, r7
 80a4ff4:	f000 feb2 	bl	80a5d5c <__aeabi_dsub>
 80a4ff8:	2c00      	cmp	r4, #0
 80a4ffa:	4606      	mov	r6, r0
 80a4ffc:	460f      	mov	r7, r1
 80a4ffe:	f340 80ee 	ble.w	80a51de <__kernel_rem_pio2+0x38e>
 80a5002:	1e68      	subs	r0, r5, #1
 80a5004:	ab10      	add	r3, sp, #64	; 0x40
 80a5006:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a500a:	f1c4 0218 	rsb	r2, r4, #24
 80a500e:	fa43 f102 	asr.w	r1, r3, r2
 80a5012:	fa01 f202 	lsl.w	r2, r1, r2
 80a5016:	1a9b      	subs	r3, r3, r2
 80a5018:	f1c4 0817 	rsb	r8, r4, #23
 80a501c:	aa10      	add	r2, sp, #64	; 0x40
 80a501e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a5022:	4489      	add	r9, r1
 80a5024:	fa43 f808 	asr.w	r8, r3, r8
 80a5028:	f1b8 0f00 	cmp.w	r8, #0
 80a502c:	dd3d      	ble.n	80a50aa <__kernel_rem_pio2+0x25a>
 80a502e:	2d00      	cmp	r5, #0
 80a5030:	f109 0901 	add.w	r9, r9, #1
 80a5034:	f340 82d5 	ble.w	80a55e2 <__kernel_rem_pio2+0x792>
 80a5038:	2200      	movs	r2, #0
 80a503a:	4614      	mov	r4, r2
 80a503c:	a90f      	add	r1, sp, #60	; 0x3c
 80a503e:	e011      	b.n	80a5064 <__kernel_rem_pio2+0x214>
 80a5040:	2aaaaaab 	.word	0x2aaaaaab
 80a5044:	080a7488 	.word	0x080a7488
 80a5048:	3e700000 	.word	0x3e700000
 80a504c:	41700000 	.word	0x41700000
 80a5050:	40200000 	.word	0x40200000
 80a5054:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 80a5058:	b10b      	cbz	r3, 80a505e <__kernel_rem_pio2+0x20e>
 80a505a:	6008      	str	r0, [r1, #0]
 80a505c:	2401      	movs	r4, #1
 80a505e:	3201      	adds	r2, #1
 80a5060:	4295      	cmp	r5, r2
 80a5062:	dd0d      	ble.n	80a5080 <__kernel_rem_pio2+0x230>
 80a5064:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80a5068:	2c00      	cmp	r4, #0
 80a506a:	d0f3      	beq.n	80a5054 <__kernel_rem_pio2+0x204>
 80a506c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80a5070:	3201      	adds	r2, #1
 80a5072:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80a5076:	4295      	cmp	r5, r2
 80a5078:	600b      	str	r3, [r1, #0]
 80a507a:	f04f 0401 	mov.w	r4, #1
 80a507e:	dcf1      	bgt.n	80a5064 <__kernel_rem_pio2+0x214>
 80a5080:	9b08      	ldr	r3, [sp, #32]
 80a5082:	2b00      	cmp	r3, #0
 80a5084:	dd0d      	ble.n	80a50a2 <__kernel_rem_pio2+0x252>
 80a5086:	2b01      	cmp	r3, #1
 80a5088:	f000 80b1 	beq.w	80a51ee <__kernel_rem_pio2+0x39e>
 80a508c:	2b02      	cmp	r3, #2
 80a508e:	d108      	bne.n	80a50a2 <__kernel_rem_pio2+0x252>
 80a5090:	1e6a      	subs	r2, r5, #1
 80a5092:	ab10      	add	r3, sp, #64	; 0x40
 80a5094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a5098:	a910      	add	r1, sp, #64	; 0x40
 80a509a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a509e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a50a2:	f1b8 0f02 	cmp.w	r8, #2
 80a50a6:	f000 8081 	beq.w	80a51ac <__kernel_rem_pio2+0x35c>
 80a50aa:	2200      	movs	r2, #0
 80a50ac:	2300      	movs	r3, #0
 80a50ae:	4630      	mov	r0, r6
 80a50b0:	4639      	mov	r1, r7
 80a50b2:	f001 fa6f 	bl	80a6594 <__aeabi_dcmpeq>
 80a50b6:	2800      	cmp	r0, #0
 80a50b8:	f000 825d 	beq.w	80a5576 <__kernel_rem_pio2+0x726>
 80a50bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a50be:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80a50c2:	455b      	cmp	r3, fp
 80a50c4:	dc10      	bgt.n	80a50e8 <__kernel_rem_pio2+0x298>
 80a50c6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80a50ca:	aa10      	add	r2, sp, #64	; 0x40
 80a50cc:	3b01      	subs	r3, #1
 80a50ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a50d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a50d4:	2200      	movs	r2, #0
 80a50d6:	f853 1904 	ldr.w	r1, [r3], #-4
 80a50da:	4283      	cmp	r3, r0
 80a50dc:	ea42 0201 	orr.w	r2, r2, r1
 80a50e0:	d1f9      	bne.n	80a50d6 <__kernel_rem_pio2+0x286>
 80a50e2:	2a00      	cmp	r2, #0
 80a50e4:	f040 80b1 	bne.w	80a524a <__kernel_rem_pio2+0x3fa>
 80a50e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a50ea:	aa10      	add	r2, sp, #64	; 0x40
 80a50ec:	3b01      	subs	r3, #1
 80a50ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a50f2:	2b00      	cmp	r3, #0
 80a50f4:	f040 8273 	bne.w	80a55de <__kernel_rem_pio2+0x78e>
 80a50f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a50fa:	2301      	movs	r3, #1
 80a50fc:	f852 1904 	ldr.w	r1, [r2], #-4
 80a5100:	3301      	adds	r3, #1
 80a5102:	2900      	cmp	r1, #0
 80a5104:	d0fa      	beq.n	80a50fc <__kernel_rem_pio2+0x2ac>
 80a5106:	18e9      	adds	r1, r5, r3
 80a5108:	1c6a      	adds	r2, r5, #1
 80a510a:	428a      	cmp	r2, r1
 80a510c:	910b      	str	r1, [sp, #44]	; 0x2c
 80a510e:	dc4b      	bgt.n	80a51a8 <__kernel_rem_pio2+0x358>
 80a5110:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a5112:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a5114:	1851      	adds	r1, r2, r1
 80a5116:	00db      	lsls	r3, r3, #3
 80a5118:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80a511c:	9305      	str	r3, [sp, #20]
 80a511e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80a5120:	4405      	add	r5, r0
 80a5122:	3901      	subs	r1, #1
 80a5124:	00e8      	lsls	r0, r5, #3
 80a5126:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 80a512a:	ab24      	add	r3, sp, #144	; 0x90
 80a512c:	00d2      	lsls	r2, r2, #3
 80a512e:	eb03 0b00 	add.w	fp, r3, r0
 80a5132:	ab74      	add	r3, sp, #464	; 0x1d0
 80a5134:	4413      	add	r3, r2
 80a5136:	9301      	str	r3, [sp, #4]
 80a5138:	f1a2 0308 	sub.w	r3, r2, #8
 80a513c:	9006      	str	r0, [sp, #24]
 80a513e:	9307      	str	r3, [sp, #28]
 80a5140:	f04f 0900 	mov.w	r9, #0
 80a5144:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a5148:	f000 ff56 	bl	80a5ff8 <__aeabi_i2d>
 80a514c:	9b02      	ldr	r3, [sp, #8]
 80a514e:	e8eb 0102 	strd	r0, r1, [fp], #8
 80a5152:	2b00      	cmp	r3, #0
 80a5154:	f04f 0600 	mov.w	r6, #0
 80a5158:	f04f 0700 	mov.w	r7, #0
 80a515c:	db1b      	blt.n	80a5196 <__kernel_rem_pio2+0x346>
 80a515e:	9b06      	ldr	r3, [sp, #24]
 80a5160:	eb03 0409 	add.w	r4, r3, r9
 80a5164:	9b07      	ldr	r3, [sp, #28]
 80a5166:	eb09 0803 	add.w	r8, r9, r3
 80a516a:	ab24      	add	r3, sp, #144	; 0x90
 80a516c:	441c      	add	r4, r3
 80a516e:	4498      	add	r8, r3
 80a5170:	9b04      	ldr	r3, [sp, #16]
 80a5172:	f1a3 0508 	sub.w	r5, r3, #8
 80a5176:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a517a:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80a517e:	f000 ffa1 	bl	80a60c4 <__aeabi_dmul>
 80a5182:	4602      	mov	r2, r0
 80a5184:	460b      	mov	r3, r1
 80a5186:	4630      	mov	r0, r6
 80a5188:	4639      	mov	r1, r7
 80a518a:	f000 fde9 	bl	80a5d60 <__adddf3>
 80a518e:	4544      	cmp	r4, r8
 80a5190:	4606      	mov	r6, r0
 80a5192:	460f      	mov	r7, r1
 80a5194:	d1ef      	bne.n	80a5176 <__kernel_rem_pio2+0x326>
 80a5196:	9b01      	ldr	r3, [sp, #4]
 80a5198:	f109 0908 	add.w	r9, r9, #8
 80a519c:	e8e3 6702 	strd	r6, r7, [r3], #8
 80a51a0:	9301      	str	r3, [sp, #4]
 80a51a2:	9b05      	ldr	r3, [sp, #20]
 80a51a4:	4599      	cmp	r9, r3
 80a51a6:	d1cd      	bne.n	80a5144 <__kernel_rem_pio2+0x2f4>
 80a51a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a51aa:	e6cc      	b.n	80a4f46 <__kernel_rem_pio2+0xf6>
 80a51ac:	4632      	mov	r2, r6
 80a51ae:	463b      	mov	r3, r7
 80a51b0:	2000      	movs	r0, #0
 80a51b2:	49b1      	ldr	r1, [pc, #708]	; (80a5478 <__kernel_rem_pio2+0x628>)
 80a51b4:	f000 fdd2 	bl	80a5d5c <__aeabi_dsub>
 80a51b8:	4606      	mov	r6, r0
 80a51ba:	460f      	mov	r7, r1
 80a51bc:	2c00      	cmp	r4, #0
 80a51be:	f43f af74 	beq.w	80a50aa <__kernel_rem_pio2+0x25a>
 80a51c2:	9a08      	ldr	r2, [sp, #32]
 80a51c4:	2000      	movs	r0, #0
 80a51c6:	49ac      	ldr	r1, [pc, #688]	; (80a5478 <__kernel_rem_pio2+0x628>)
 80a51c8:	f000 fd4a 	bl	80a5c60 <scalbn>
 80a51cc:	4602      	mov	r2, r0
 80a51ce:	460b      	mov	r3, r1
 80a51d0:	4630      	mov	r0, r6
 80a51d2:	4639      	mov	r1, r7
 80a51d4:	f000 fdc2 	bl	80a5d5c <__aeabi_dsub>
 80a51d8:	4606      	mov	r6, r0
 80a51da:	460f      	mov	r7, r1
 80a51dc:	e765      	b.n	80a50aa <__kernel_rem_pio2+0x25a>
 80a51de:	d110      	bne.n	80a5202 <__kernel_rem_pio2+0x3b2>
 80a51e0:	1e6b      	subs	r3, r5, #1
 80a51e2:	aa10      	add	r2, sp, #64	; 0x40
 80a51e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a51e8:	ea4f 58e3 	mov.w	r8, r3, asr #23
 80a51ec:	e71c      	b.n	80a5028 <__kernel_rem_pio2+0x1d8>
 80a51ee:	1e6a      	subs	r2, r5, #1
 80a51f0:	ab10      	add	r3, sp, #64	; 0x40
 80a51f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a51f6:	a910      	add	r1, sp, #64	; 0x40
 80a51f8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a51fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a5200:	e74f      	b.n	80a50a2 <__kernel_rem_pio2+0x252>
 80a5202:	2200      	movs	r2, #0
 80a5204:	4b9d      	ldr	r3, [pc, #628]	; (80a547c <__kernel_rem_pio2+0x62c>)
 80a5206:	f001 f9e3 	bl	80a65d0 <__aeabi_dcmpge>
 80a520a:	b958      	cbnz	r0, 80a5224 <__kernel_rem_pio2+0x3d4>
 80a520c:	4680      	mov	r8, r0
 80a520e:	e74c      	b.n	80a50aa <__kernel_rem_pio2+0x25a>
 80a5210:	2600      	movs	r6, #0
 80a5212:	2700      	movs	r7, #0
 80a5214:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80a5218:	45da      	cmp	sl, fp
 80a521a:	f109 0908 	add.w	r9, r9, #8
 80a521e:	f47f ae63 	bne.w	80a4ee8 <__kernel_rem_pio2+0x98>
 80a5222:	e684      	b.n	80a4f2e <__kernel_rem_pio2+0xde>
 80a5224:	2d00      	cmp	r5, #0
 80a5226:	f109 0901 	add.w	r9, r9, #1
 80a522a:	bfc8      	it	gt
 80a522c:	f04f 0802 	movgt.w	r8, #2
 80a5230:	f73f af02 	bgt.w	80a5038 <__kernel_rem_pio2+0x1e8>
 80a5234:	4632      	mov	r2, r6
 80a5236:	463b      	mov	r3, r7
 80a5238:	2000      	movs	r0, #0
 80a523a:	498f      	ldr	r1, [pc, #572]	; (80a5478 <__kernel_rem_pio2+0x628>)
 80a523c:	f000 fd8e 	bl	80a5d5c <__aeabi_dsub>
 80a5240:	f04f 0802 	mov.w	r8, #2
 80a5244:	4606      	mov	r6, r0
 80a5246:	460f      	mov	r7, r1
 80a5248:	e72f      	b.n	80a50aa <__kernel_rem_pio2+0x25a>
 80a524a:	9a08      	ldr	r2, [sp, #32]
 80a524c:	ab10      	add	r3, sp, #64	; 0x40
 80a524e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80a5252:	3a18      	subs	r2, #24
 80a5254:	f8cd 9014 	str.w	r9, [sp, #20]
 80a5258:	f8cd 8004 	str.w	r8, [sp, #4]
 80a525c:	9208      	str	r2, [sp, #32]
 80a525e:	b96b      	cbnz	r3, 80a527c <__kernel_rem_pio2+0x42c>
 80a5260:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 80a5264:	3b01      	subs	r3, #1
 80a5266:	a910      	add	r1, sp, #64	; 0x40
 80a5268:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a526c:	f853 1904 	ldr.w	r1, [r3], #-4
 80a5270:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80a5274:	3a18      	subs	r2, #24
 80a5276:	2900      	cmp	r1, #0
 80a5278:	d0f8      	beq.n	80a526c <__kernel_rem_pio2+0x41c>
 80a527a:	9208      	str	r2, [sp, #32]
 80a527c:	9a08      	ldr	r2, [sp, #32]
 80a527e:	2000      	movs	r0, #0
 80a5280:	497d      	ldr	r1, [pc, #500]	; (80a5478 <__kernel_rem_pio2+0x628>)
 80a5282:	f000 fced 	bl	80a5c60 <scalbn>
 80a5286:	f1bb 0f00 	cmp.w	fp, #0
 80a528a:	4604      	mov	r4, r0
 80a528c:	460d      	mov	r5, r1
 80a528e:	f2c0 81b8 	blt.w	80a5602 <__kernel_rem_pio2+0x7b2>
 80a5292:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80a5296:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 80a529a:	aa10      	add	r2, sp, #64	; 0x40
 80a529c:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 80a52a0:	eb08 0903 	add.w	r9, r8, r3
 80a52a4:	9304      	str	r3, [sp, #16]
 80a52a6:	3604      	adds	r6, #4
 80a52a8:	f109 0708 	add.w	r7, r9, #8
 80a52ac:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80a52b0:	f000 fea2 	bl	80a5ff8 <__aeabi_i2d>
 80a52b4:	4622      	mov	r2, r4
 80a52b6:	462b      	mov	r3, r5
 80a52b8:	f000 ff04 	bl	80a60c4 <__aeabi_dmul>
 80a52bc:	2200      	movs	r2, #0
 80a52be:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80a52c2:	4b6f      	ldr	r3, [pc, #444]	; (80a5480 <__kernel_rem_pio2+0x630>)
 80a52c4:	4620      	mov	r0, r4
 80a52c6:	4629      	mov	r1, r5
 80a52c8:	f000 fefc 	bl	80a60c4 <__aeabi_dmul>
 80a52cc:	45b8      	cmp	r8, r7
 80a52ce:	4604      	mov	r4, r0
 80a52d0:	460d      	mov	r5, r1
 80a52d2:	d1eb      	bne.n	80a52ac <__kernel_rem_pio2+0x45c>
 80a52d4:	464b      	mov	r3, r9
 80a52d6:	f8cd b018 	str.w	fp, [sp, #24]
 80a52da:	469b      	mov	fp, r3
 80a52dc:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a52e0:	f8cd a008 	str.w	sl, [sp, #8]
 80a52e4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80a52e8:	f04f 0900 	mov.w	r9, #0
 80a52ec:	f1ba 0f00 	cmp.w	sl, #0
 80a52f0:	f2c0 8128 	blt.w	80a5544 <__kernel_rem_pio2+0x6f4>
 80a52f4:	a35e      	add	r3, pc, #376	; (adr r3, 80a5470 <__kernel_rem_pio2+0x620>)
 80a52f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a52fa:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80a5484 <__kernel_rem_pio2+0x634>
 80a52fe:	465d      	mov	r5, fp
 80a5300:	2600      	movs	r6, #0
 80a5302:	2700      	movs	r7, #0
 80a5304:	2400      	movs	r4, #0
 80a5306:	e003      	b.n	80a5310 <__kernel_rem_pio2+0x4c0>
 80a5308:	45a1      	cmp	r9, r4
 80a530a:	db10      	blt.n	80a532e <__kernel_rem_pio2+0x4de>
 80a530c:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80a5310:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80a5314:	f000 fed6 	bl	80a60c4 <__aeabi_dmul>
 80a5318:	4602      	mov	r2, r0
 80a531a:	460b      	mov	r3, r1
 80a531c:	4630      	mov	r0, r6
 80a531e:	4639      	mov	r1, r7
 80a5320:	f000 fd1e 	bl	80a5d60 <__adddf3>
 80a5324:	3401      	adds	r4, #1
 80a5326:	45a2      	cmp	sl, r4
 80a5328:	4606      	mov	r6, r0
 80a532a:	460f      	mov	r7, r1
 80a532c:	daec      	bge.n	80a5308 <__kernel_rem_pio2+0x4b8>
 80a532e:	9b02      	ldr	r3, [sp, #8]
 80a5330:	f1ab 0b08 	sub.w	fp, fp, #8
 80a5334:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a5338:	e9c3 6700 	strd	r6, r7, [r3]
 80a533c:	ab72      	add	r3, sp, #456	; 0x1c8
 80a533e:	455b      	cmp	r3, fp
 80a5340:	f109 0901 	add.w	r9, r9, #1
 80a5344:	d1d2      	bne.n	80a52ec <__kernel_rem_pio2+0x49c>
 80a5346:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80a5348:	f8dd b018 	ldr.w	fp, [sp, #24]
 80a534c:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a5350:	2b03      	cmp	r3, #3
 80a5352:	f200 8083 	bhi.w	80a545c <__kernel_rem_pio2+0x60c>
 80a5356:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a535a:	00d3      	.short	0x00d3
 80a535c:	00970097 	.word	0x00970097
 80a5360:	0004      	.short	0x0004
 80a5362:	f1bb 0f00 	cmp.w	fp, #0
 80a5366:	f340 8156 	ble.w	80a5616 <__kernel_rem_pio2+0x7c6>
 80a536a:	9b04      	ldr	r3, [sp, #16]
 80a536c:	f8cd b008 	str.w	fp, [sp, #8]
 80a5370:	4453      	add	r3, sl
 80a5372:	4698      	mov	r8, r3
 80a5374:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a5378:	46d3      	mov	fp, sl
 80a537a:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 80a537e:	4632      	mov	r2, r6
 80a5380:	463b      	mov	r3, r7
 80a5382:	4648      	mov	r0, r9
 80a5384:	4651      	mov	r1, sl
 80a5386:	f000 fceb 	bl	80a5d60 <__adddf3>
 80a538a:	4604      	mov	r4, r0
 80a538c:	460d      	mov	r5, r1
 80a538e:	4602      	mov	r2, r0
 80a5390:	460b      	mov	r3, r1
 80a5392:	4648      	mov	r0, r9
 80a5394:	4651      	mov	r1, sl
 80a5396:	f000 fce1 	bl	80a5d5c <__aeabi_dsub>
 80a539a:	4632      	mov	r2, r6
 80a539c:	463b      	mov	r3, r7
 80a539e:	f000 fcdf 	bl	80a5d60 <__adddf3>
 80a53a2:	e9c8 0100 	strd	r0, r1, [r8]
 80a53a6:	e968 4502 	strd	r4, r5, [r8, #-8]!
 80a53aa:	45c3      	cmp	fp, r8
 80a53ac:	4626      	mov	r6, r4
 80a53ae:	462f      	mov	r7, r5
 80a53b0:	d1e3      	bne.n	80a537a <__kernel_rem_pio2+0x52a>
 80a53b2:	46da      	mov	sl, fp
 80a53b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a53b8:	f1bb 0f01 	cmp.w	fp, #1
 80a53bc:	f340 812b 	ble.w	80a5616 <__kernel_rem_pio2+0x7c6>
 80a53c0:	9b04      	ldr	r3, [sp, #16]
 80a53c2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80a53c6:	4453      	add	r3, sl
 80a53c8:	4698      	mov	r8, r3
 80a53ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a53ce:	4699      	mov	r9, r3
 80a53d0:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 80a53d4:	4630      	mov	r0, r6
 80a53d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a53da:	461a      	mov	r2, r3
 80a53dc:	4639      	mov	r1, r7
 80a53de:	4623      	mov	r3, r4
 80a53e0:	f000 fcbe 	bl	80a5d60 <__adddf3>
 80a53e4:	4604      	mov	r4, r0
 80a53e6:	460d      	mov	r5, r1
 80a53e8:	4602      	mov	r2, r0
 80a53ea:	460b      	mov	r3, r1
 80a53ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a53f0:	f000 fcb4 	bl	80a5d5c <__aeabi_dsub>
 80a53f4:	4632      	mov	r2, r6
 80a53f6:	463b      	mov	r3, r7
 80a53f8:	f000 fcb2 	bl	80a5d60 <__adddf3>
 80a53fc:	e9c9 0100 	strd	r0, r1, [r9]
 80a5400:	e969 4502 	strd	r4, r5, [r9, #-8]!
 80a5404:	45cb      	cmp	fp, r9
 80a5406:	4626      	mov	r6, r4
 80a5408:	462f      	mov	r7, r5
 80a540a:	d1e1      	bne.n	80a53d0 <__kernel_rem_pio2+0x580>
 80a540c:	2300      	movs	r3, #0
 80a540e:	461d      	mov	r5, r3
 80a5410:	f108 0808 	add.w	r8, r8, #8
 80a5414:	ac50      	add	r4, sp, #320	; 0x140
 80a5416:	4618      	mov	r0, r3
 80a5418:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a541c:	4629      	mov	r1, r5
 80a541e:	f000 fc9f 	bl	80a5d60 <__adddf3>
 80a5422:	4544      	cmp	r4, r8
 80a5424:	4603      	mov	r3, r0
 80a5426:	460d      	mov	r5, r1
 80a5428:	d1f5      	bne.n	80a5416 <__kernel_rem_pio2+0x5c6>
 80a542a:	9a01      	ldr	r2, [sp, #4]
 80a542c:	2a00      	cmp	r2, #0
 80a542e:	f000 80da 	beq.w	80a55e6 <__kernel_rem_pio2+0x796>
 80a5432:	f8da 4004 	ldr.w	r4, [sl, #4]
 80a5436:	f8da 200c 	ldr.w	r2, [sl, #12]
 80a543a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a543c:	f8da 1000 	ldr.w	r1, [sl]
 80a5440:	f8da 0008 	ldr.w	r0, [sl, #8]
 80a5444:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a5448:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a544c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a5450:	617d      	str	r5, [r7, #20]
 80a5452:	613b      	str	r3, [r7, #16]
 80a5454:	607c      	str	r4, [r7, #4]
 80a5456:	60fa      	str	r2, [r7, #12]
 80a5458:	6039      	str	r1, [r7, #0]
 80a545a:	60b8      	str	r0, [r7, #8]
 80a545c:	9b05      	ldr	r3, [sp, #20]
 80a545e:	f003 0007 	and.w	r0, r3, #7
 80a5462:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a5466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a546a:	bf00      	nop
 80a546c:	f3af 8000 	nop.w
 80a5470:	40000000 	.word	0x40000000
 80a5474:	3ff921fb 	.word	0x3ff921fb
 80a5478:	3ff00000 	.word	0x3ff00000
 80a547c:	3fe00000 	.word	0x3fe00000
 80a5480:	3e700000 	.word	0x3e700000
 80a5484:	080a7498 	.word	0x080a7498
 80a5488:	2400      	movs	r4, #0
 80a548a:	4621      	mov	r1, r4
 80a548c:	9d04      	ldr	r5, [sp, #16]
 80a548e:	3508      	adds	r5, #8
 80a5490:	4455      	add	r5, sl
 80a5492:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a5496:	4620      	mov	r0, r4
 80a5498:	f000 fc62 	bl	80a5d60 <__adddf3>
 80a549c:	4555      	cmp	r5, sl
 80a549e:	4604      	mov	r4, r0
 80a54a0:	d1f7      	bne.n	80a5492 <__kernel_rem_pio2+0x642>
 80a54a2:	9b01      	ldr	r3, [sp, #4]
 80a54a4:	2b00      	cmp	r3, #0
 80a54a6:	d050      	beq.n	80a554a <__kernel_rem_pio2+0x6fa>
 80a54a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a54aa:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80a54ae:	460b      	mov	r3, r1
 80a54b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80a54b4:	e887 0030 	stmia.w	r7, {r4, r5}
 80a54b8:	4622      	mov	r2, r4
 80a54ba:	f000 fc4f 	bl	80a5d5c <__aeabi_dsub>
 80a54be:	f1bb 0f00 	cmp.w	fp, #0
 80a54c2:	4603      	mov	r3, r0
 80a54c4:	460d      	mov	r5, r1
 80a54c6:	dd0d      	ble.n	80a54e4 <__kernel_rem_pio2+0x694>
 80a54c8:	2401      	movs	r4, #1
 80a54ca:	4618      	mov	r0, r3
 80a54cc:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 80a54d0:	4629      	mov	r1, r5
 80a54d2:	f000 fc45 	bl	80a5d60 <__adddf3>
 80a54d6:	3401      	adds	r4, #1
 80a54d8:	45a3      	cmp	fp, r4
 80a54da:	4603      	mov	r3, r0
 80a54dc:	460d      	mov	r5, r1
 80a54de:	daf4      	bge.n	80a54ca <__kernel_rem_pio2+0x67a>
 80a54e0:	9a01      	ldr	r2, [sp, #4]
 80a54e2:	b10a      	cbz	r2, 80a54e8 <__kernel_rem_pio2+0x698>
 80a54e4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a54e8:	4618      	mov	r0, r3
 80a54ea:	4629      	mov	r1, r5
 80a54ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a54ee:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a54f2:	9b05      	ldr	r3, [sp, #20]
 80a54f4:	f003 0007 	and.w	r0, r3, #7
 80a54f8:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a54fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5500:	2300      	movs	r3, #0
 80a5502:	461c      	mov	r4, r3
 80a5504:	9a04      	ldr	r2, [sp, #16]
 80a5506:	3208      	adds	r2, #8
 80a5508:	4492      	add	sl, r2
 80a550a:	4618      	mov	r0, r3
 80a550c:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80a5510:	4621      	mov	r1, r4
 80a5512:	f000 fc25 	bl	80a5d60 <__adddf3>
 80a5516:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80a551a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80a551e:	4603      	mov	r3, r0
 80a5520:	460c      	mov	r4, r1
 80a5522:	d1f2      	bne.n	80a550a <__kernel_rem_pio2+0x6ba>
 80a5524:	9a01      	ldr	r2, [sp, #4]
 80a5526:	b10a      	cbz	r2, 80a552c <__kernel_rem_pio2+0x6dc>
 80a5528:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a552c:	4618      	mov	r0, r3
 80a552e:	4621      	mov	r1, r4
 80a5530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5532:	e9c3 0100 	strd	r0, r1, [r3]
 80a5536:	9b05      	ldr	r3, [sp, #20]
 80a5538:	f003 0007 	and.w	r0, r3, #7
 80a553c:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a5540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5544:	2600      	movs	r6, #0
 80a5546:	2700      	movs	r7, #0
 80a5548:	e6f1      	b.n	80a532e <__kernel_rem_pio2+0x4de>
 80a554a:	4626      	mov	r6, r4
 80a554c:	460f      	mov	r7, r1
 80a554e:	4622      	mov	r2, r4
 80a5550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a5552:	460b      	mov	r3, r1
 80a5554:	e9da 0100 	ldrd	r0, r1, [sl]
 80a5558:	e9c4 6700 	strd	r6, r7, [r4]
 80a555c:	f000 fbfe 	bl	80a5d5c <__aeabi_dsub>
 80a5560:	f1bb 0f00 	cmp.w	fp, #0
 80a5564:	4603      	mov	r3, r0
 80a5566:	460d      	mov	r5, r1
 80a5568:	dcae      	bgt.n	80a54c8 <__kernel_rem_pio2+0x678>
 80a556a:	4618      	mov	r0, r3
 80a556c:	4629      	mov	r1, r5
 80a556e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5570:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a5574:	e7bd      	b.n	80a54f2 <__kernel_rem_pio2+0x6a2>
 80a5576:	9b08      	ldr	r3, [sp, #32]
 80a5578:	4630      	mov	r0, r6
 80a557a:	425a      	negs	r2, r3
 80a557c:	4639      	mov	r1, r7
 80a557e:	f8cd 9014 	str.w	r9, [sp, #20]
 80a5582:	f8cd 8004 	str.w	r8, [sp, #4]
 80a5586:	f000 fb6b 	bl	80a5c60 <scalbn>
 80a558a:	2200      	movs	r2, #0
 80a558c:	4b2c      	ldr	r3, [pc, #176]	; (80a5640 <__kernel_rem_pio2+0x7f0>)
 80a558e:	4606      	mov	r6, r0
 80a5590:	460f      	mov	r7, r1
 80a5592:	f001 f81d 	bl	80a65d0 <__aeabi_dcmpge>
 80a5596:	2800      	cmp	r0, #0
 80a5598:	d040      	beq.n	80a561c <__kernel_rem_pio2+0x7cc>
 80a559a:	2200      	movs	r2, #0
 80a559c:	4b29      	ldr	r3, [pc, #164]	; (80a5644 <__kernel_rem_pio2+0x7f4>)
 80a559e:	4630      	mov	r0, r6
 80a55a0:	4639      	mov	r1, r7
 80a55a2:	f000 fd8f 	bl	80a60c4 <__aeabi_dmul>
 80a55a6:	f001 f83d 	bl	80a6624 <__aeabi_d2iz>
 80a55aa:	4604      	mov	r4, r0
 80a55ac:	f000 fd24 	bl	80a5ff8 <__aeabi_i2d>
 80a55b0:	2200      	movs	r2, #0
 80a55b2:	4b23      	ldr	r3, [pc, #140]	; (80a5640 <__kernel_rem_pio2+0x7f0>)
 80a55b4:	f000 fd86 	bl	80a60c4 <__aeabi_dmul>
 80a55b8:	460b      	mov	r3, r1
 80a55ba:	4602      	mov	r2, r0
 80a55bc:	4639      	mov	r1, r7
 80a55be:	4630      	mov	r0, r6
 80a55c0:	f000 fbcc 	bl	80a5d5c <__aeabi_dsub>
 80a55c4:	f001 f82e 	bl	80a6624 <__aeabi_d2iz>
 80a55c8:	9b08      	ldr	r3, [sp, #32]
 80a55ca:	f105 0b01 	add.w	fp, r5, #1
 80a55ce:	3318      	adds	r3, #24
 80a55d0:	9308      	str	r3, [sp, #32]
 80a55d2:	ab10      	add	r3, sp, #64	; 0x40
 80a55d4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a55d8:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 80a55dc:	e64e      	b.n	80a527c <__kernel_rem_pio2+0x42c>
 80a55de:	2301      	movs	r3, #1
 80a55e0:	e591      	b.n	80a5106 <__kernel_rem_pio2+0x2b6>
 80a55e2:	2400      	movs	r4, #0
 80a55e4:	e54c      	b.n	80a5080 <__kernel_rem_pio2+0x230>
 80a55e6:	4618      	mov	r0, r3
 80a55e8:	e9da 6700 	ldrd	r6, r7, [sl]
 80a55ec:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80a55f0:	4629      	mov	r1, r5
 80a55f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a55f4:	e9c5 6700 	strd	r6, r7, [r5]
 80a55f8:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80a55fc:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80a5600:	e72c      	b.n	80a545c <__kernel_rem_pio2+0x60c>
 80a5602:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80a5604:	2b03      	cmp	r3, #3
 80a5606:	f63f af29 	bhi.w	80a545c <__kernel_rem_pio2+0x60c>
 80a560a:	e8df f003 	tbb	[pc, r3]
 80a560e:	1015      	.short	0x1015
 80a5610:	0210      	.short	0x0210
 80a5612:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a5616:	2300      	movs	r3, #0
 80a5618:	461d      	mov	r5, r3
 80a561a:	e706      	b.n	80a542a <__kernel_rem_pio2+0x5da>
 80a561c:	4630      	mov	r0, r6
 80a561e:	4639      	mov	r1, r7
 80a5620:	f001 f800 	bl	80a6624 <__aeabi_d2iz>
 80a5624:	ab10      	add	r3, sp, #64	; 0x40
 80a5626:	46ab      	mov	fp, r5
 80a5628:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a562c:	e626      	b.n	80a527c <__kernel_rem_pio2+0x42c>
 80a562e:	2400      	movs	r4, #0
 80a5630:	4621      	mov	r1, r4
 80a5632:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a5636:	e734      	b.n	80a54a2 <__kernel_rem_pio2+0x652>
 80a5638:	2300      	movs	r3, #0
 80a563a:	461c      	mov	r4, r3
 80a563c:	e772      	b.n	80a5524 <__kernel_rem_pio2+0x6d4>
 80a563e:	bf00      	nop
 80a5640:	41700000 	.word	0x41700000
 80a5644:	3e700000 	.word	0x3e700000

080a5648 <__kernel_sin>:
 80a5648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a564c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a5650:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a5654:	b085      	sub	sp, #20
 80a5656:	460c      	mov	r4, r1
 80a5658:	4690      	mov	r8, r2
 80a565a:	4699      	mov	r9, r3
 80a565c:	4605      	mov	r5, r0
 80a565e:	da04      	bge.n	80a566a <__kernel_sin+0x22>
 80a5660:	f000 ffe0 	bl	80a6624 <__aeabi_d2iz>
 80a5664:	2800      	cmp	r0, #0
 80a5666:	f000 8085 	beq.w	80a5774 <__kernel_sin+0x12c>
 80a566a:	462a      	mov	r2, r5
 80a566c:	4623      	mov	r3, r4
 80a566e:	4628      	mov	r0, r5
 80a5670:	4621      	mov	r1, r4
 80a5672:	f000 fd27 	bl	80a60c4 <__aeabi_dmul>
 80a5676:	4606      	mov	r6, r0
 80a5678:	460f      	mov	r7, r1
 80a567a:	4602      	mov	r2, r0
 80a567c:	460b      	mov	r3, r1
 80a567e:	4628      	mov	r0, r5
 80a5680:	4621      	mov	r1, r4
 80a5682:	f000 fd1f 	bl	80a60c4 <__aeabi_dmul>
 80a5686:	a33e      	add	r3, pc, #248	; (adr r3, 80a5780 <__kernel_sin+0x138>)
 80a5688:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a568c:	4682      	mov	sl, r0
 80a568e:	468b      	mov	fp, r1
 80a5690:	4630      	mov	r0, r6
 80a5692:	4639      	mov	r1, r7
 80a5694:	f000 fd16 	bl	80a60c4 <__aeabi_dmul>
 80a5698:	a33b      	add	r3, pc, #236	; (adr r3, 80a5788 <__kernel_sin+0x140>)
 80a569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a569e:	f000 fb5d 	bl	80a5d5c <__aeabi_dsub>
 80a56a2:	4632      	mov	r2, r6
 80a56a4:	463b      	mov	r3, r7
 80a56a6:	f000 fd0d 	bl	80a60c4 <__aeabi_dmul>
 80a56aa:	a339      	add	r3, pc, #228	; (adr r3, 80a5790 <__kernel_sin+0x148>)
 80a56ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56b0:	f000 fb56 	bl	80a5d60 <__adddf3>
 80a56b4:	4632      	mov	r2, r6
 80a56b6:	463b      	mov	r3, r7
 80a56b8:	f000 fd04 	bl	80a60c4 <__aeabi_dmul>
 80a56bc:	a336      	add	r3, pc, #216	; (adr r3, 80a5798 <__kernel_sin+0x150>)
 80a56be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56c2:	f000 fb4b 	bl	80a5d5c <__aeabi_dsub>
 80a56c6:	4632      	mov	r2, r6
 80a56c8:	463b      	mov	r3, r7
 80a56ca:	f000 fcfb 	bl	80a60c4 <__aeabi_dmul>
 80a56ce:	a334      	add	r3, pc, #208	; (adr r3, 80a57a0 <__kernel_sin+0x158>)
 80a56d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56d4:	f000 fb44 	bl	80a5d60 <__adddf3>
 80a56d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a56da:	e9cd 0100 	strd	r0, r1, [sp]
 80a56de:	b39b      	cbz	r3, 80a5748 <__kernel_sin+0x100>
 80a56e0:	2200      	movs	r2, #0
 80a56e2:	4b33      	ldr	r3, [pc, #204]	; (80a57b0 <__kernel_sin+0x168>)
 80a56e4:	4640      	mov	r0, r8
 80a56e6:	4649      	mov	r1, r9
 80a56e8:	f000 fcec 	bl	80a60c4 <__aeabi_dmul>
 80a56ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a56f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a56f4:	4650      	mov	r0, sl
 80a56f6:	4659      	mov	r1, fp
 80a56f8:	f000 fce4 	bl	80a60c4 <__aeabi_dmul>
 80a56fc:	4602      	mov	r2, r0
 80a56fe:	460b      	mov	r3, r1
 80a5700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5704:	f000 fb2a 	bl	80a5d5c <__aeabi_dsub>
 80a5708:	4632      	mov	r2, r6
 80a570a:	463b      	mov	r3, r7
 80a570c:	f000 fcda 	bl	80a60c4 <__aeabi_dmul>
 80a5710:	4642      	mov	r2, r8
 80a5712:	464b      	mov	r3, r9
 80a5714:	f000 fb22 	bl	80a5d5c <__aeabi_dsub>
 80a5718:	a323      	add	r3, pc, #140	; (adr r3, 80a57a8 <__kernel_sin+0x160>)
 80a571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a571e:	4606      	mov	r6, r0
 80a5720:	460f      	mov	r7, r1
 80a5722:	4650      	mov	r0, sl
 80a5724:	4659      	mov	r1, fp
 80a5726:	f000 fccd 	bl	80a60c4 <__aeabi_dmul>
 80a572a:	4602      	mov	r2, r0
 80a572c:	460b      	mov	r3, r1
 80a572e:	4630      	mov	r0, r6
 80a5730:	4639      	mov	r1, r7
 80a5732:	f000 fb15 	bl	80a5d60 <__adddf3>
 80a5736:	4602      	mov	r2, r0
 80a5738:	460b      	mov	r3, r1
 80a573a:	4628      	mov	r0, r5
 80a573c:	4621      	mov	r1, r4
 80a573e:	f000 fb0d 	bl	80a5d5c <__aeabi_dsub>
 80a5742:	b005      	add	sp, #20
 80a5744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5748:	4602      	mov	r2, r0
 80a574a:	460b      	mov	r3, r1
 80a574c:	4630      	mov	r0, r6
 80a574e:	4639      	mov	r1, r7
 80a5750:	f000 fcb8 	bl	80a60c4 <__aeabi_dmul>
 80a5754:	a314      	add	r3, pc, #80	; (adr r3, 80a57a8 <__kernel_sin+0x160>)
 80a5756:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a575a:	f000 faff 	bl	80a5d5c <__aeabi_dsub>
 80a575e:	4652      	mov	r2, sl
 80a5760:	465b      	mov	r3, fp
 80a5762:	f000 fcaf 	bl	80a60c4 <__aeabi_dmul>
 80a5766:	462a      	mov	r2, r5
 80a5768:	4623      	mov	r3, r4
 80a576a:	f000 faf9 	bl	80a5d60 <__adddf3>
 80a576e:	b005      	add	sp, #20
 80a5770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5774:	4628      	mov	r0, r5
 80a5776:	4621      	mov	r1, r4
 80a5778:	b005      	add	sp, #20
 80a577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a577e:	bf00      	nop
 80a5780:	5acfd57c 	.word	0x5acfd57c
 80a5784:	3de5d93a 	.word	0x3de5d93a
 80a5788:	8a2b9ceb 	.word	0x8a2b9ceb
 80a578c:	3e5ae5e6 	.word	0x3e5ae5e6
 80a5790:	57b1fe7d 	.word	0x57b1fe7d
 80a5794:	3ec71de3 	.word	0x3ec71de3
 80a5798:	19c161d5 	.word	0x19c161d5
 80a579c:	3f2a01a0 	.word	0x3f2a01a0
 80a57a0:	1110f8a6 	.word	0x1110f8a6
 80a57a4:	3f811111 	.word	0x3f811111
 80a57a8:	55555549 	.word	0x55555549
 80a57ac:	3fc55555 	.word	0x3fc55555
 80a57b0:	3fe00000 	.word	0x3fe00000
 80a57b4:	00000000 	.word	0x00000000

080a57b8 <__kernel_tan>:
 80a57b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a57bc:	4cdc      	ldr	r4, [pc, #880]	; (80a5b30 <__kernel_tan+0x378>)
 80a57be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a57c2:	b089      	sub	sp, #36	; 0x24
 80a57c4:	42a6      	cmp	r6, r4
 80a57c6:	4689      	mov	r9, r1
 80a57c8:	9107      	str	r1, [sp, #28]
 80a57ca:	4617      	mov	r7, r2
 80a57cc:	9300      	str	r3, [sp, #0]
 80a57ce:	4680      	mov	r8, r0
 80a57d0:	dc17      	bgt.n	80a5802 <__kernel_tan+0x4a>
 80a57d2:	f000 ff27 	bl	80a6624 <__aeabi_d2iz>
 80a57d6:	bb90      	cbnz	r0, 80a583e <__kernel_tan+0x86>
 80a57d8:	4643      	mov	r3, r8
 80a57da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a57dc:	431e      	orrs	r6, r3
 80a57de:	3201      	adds	r2, #1
 80a57e0:	ea56 0302 	orrs.w	r3, r6, r2
 80a57e4:	f000 8154 	beq.w	80a5a90 <__kernel_tan+0x2d8>
 80a57e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a57ea:	2b01      	cmp	r3, #1
 80a57ec:	f000 81a8 	beq.w	80a5b40 <__kernel_tan+0x388>
 80a57f0:	4642      	mov	r2, r8
 80a57f2:	464b      	mov	r3, r9
 80a57f4:	2000      	movs	r0, #0
 80a57f6:	49cf      	ldr	r1, [pc, #828]	; (80a5b34 <__kernel_tan+0x37c>)
 80a57f8:	f000 fd8e 	bl	80a6318 <__aeabi_ddiv>
 80a57fc:	b009      	add	sp, #36	; 0x24
 80a57fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5802:	4bcd      	ldr	r3, [pc, #820]	; (80a5b38 <__kernel_tan+0x380>)
 80a5804:	429e      	cmp	r6, r3
 80a5806:	dd1a      	ble.n	80a583e <__kernel_tan+0x86>
 80a5808:	2900      	cmp	r1, #0
 80a580a:	f2c0 814c 	blt.w	80a5aa6 <__kernel_tan+0x2ee>
 80a580e:	a1aa      	add	r1, pc, #680	; (adr r1, 80a5ab8 <__kernel_tan+0x300>)
 80a5810:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5814:	4642      	mov	r2, r8
 80a5816:	464b      	mov	r3, r9
 80a5818:	f000 faa0 	bl	80a5d5c <__aeabi_dsub>
 80a581c:	4604      	mov	r4, r0
 80a581e:	460d      	mov	r5, r1
 80a5820:	a1a7      	add	r1, pc, #668	; (adr r1, 80a5ac0 <__kernel_tan+0x308>)
 80a5822:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5826:	463a      	mov	r2, r7
 80a5828:	9b00      	ldr	r3, [sp, #0]
 80a582a:	f000 fa97 	bl	80a5d5c <__aeabi_dsub>
 80a582e:	4622      	mov	r2, r4
 80a5830:	462b      	mov	r3, r5
 80a5832:	f000 fa95 	bl	80a5d60 <__adddf3>
 80a5836:	4680      	mov	r8, r0
 80a5838:	4689      	mov	r9, r1
 80a583a:	2700      	movs	r7, #0
 80a583c:	9700      	str	r7, [sp, #0]
 80a583e:	4642      	mov	r2, r8
 80a5840:	464b      	mov	r3, r9
 80a5842:	4640      	mov	r0, r8
 80a5844:	4649      	mov	r1, r9
 80a5846:	f000 fc3d 	bl	80a60c4 <__aeabi_dmul>
 80a584a:	4602      	mov	r2, r0
 80a584c:	460b      	mov	r3, r1
 80a584e:	4682      	mov	sl, r0
 80a5850:	468b      	mov	fp, r1
 80a5852:	f000 fc37 	bl	80a60c4 <__aeabi_dmul>
 80a5856:	4652      	mov	r2, sl
 80a5858:	4604      	mov	r4, r0
 80a585a:	460d      	mov	r5, r1
 80a585c:	465b      	mov	r3, fp
 80a585e:	4640      	mov	r0, r8
 80a5860:	4649      	mov	r1, r9
 80a5862:	f000 fc2f 	bl	80a60c4 <__aeabi_dmul>
 80a5866:	a398      	add	r3, pc, #608	; (adr r3, 80a5ac8 <__kernel_tan+0x310>)
 80a5868:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a586c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5870:	4620      	mov	r0, r4
 80a5872:	4629      	mov	r1, r5
 80a5874:	f000 fc26 	bl	80a60c4 <__aeabi_dmul>
 80a5878:	a395      	add	r3, pc, #596	; (adr r3, 80a5ad0 <__kernel_tan+0x318>)
 80a587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a587e:	f000 fa6f 	bl	80a5d60 <__adddf3>
 80a5882:	4622      	mov	r2, r4
 80a5884:	462b      	mov	r3, r5
 80a5886:	f000 fc1d 	bl	80a60c4 <__aeabi_dmul>
 80a588a:	a393      	add	r3, pc, #588	; (adr r3, 80a5ad8 <__kernel_tan+0x320>)
 80a588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5890:	f000 fa66 	bl	80a5d60 <__adddf3>
 80a5894:	4622      	mov	r2, r4
 80a5896:	462b      	mov	r3, r5
 80a5898:	f000 fc14 	bl	80a60c4 <__aeabi_dmul>
 80a589c:	a390      	add	r3, pc, #576	; (adr r3, 80a5ae0 <__kernel_tan+0x328>)
 80a589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58a2:	f000 fa5d 	bl	80a5d60 <__adddf3>
 80a58a6:	4622      	mov	r2, r4
 80a58a8:	462b      	mov	r3, r5
 80a58aa:	f000 fc0b 	bl	80a60c4 <__aeabi_dmul>
 80a58ae:	a38e      	add	r3, pc, #568	; (adr r3, 80a5ae8 <__kernel_tan+0x330>)
 80a58b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58b4:	f000 fa54 	bl	80a5d60 <__adddf3>
 80a58b8:	4622      	mov	r2, r4
 80a58ba:	462b      	mov	r3, r5
 80a58bc:	f000 fc02 	bl	80a60c4 <__aeabi_dmul>
 80a58c0:	a38b      	add	r3, pc, #556	; (adr r3, 80a5af0 <__kernel_tan+0x338>)
 80a58c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58c6:	f000 fa4b 	bl	80a5d60 <__adddf3>
 80a58ca:	4652      	mov	r2, sl
 80a58cc:	465b      	mov	r3, fp
 80a58ce:	f000 fbf9 	bl	80a60c4 <__aeabi_dmul>
 80a58d2:	a389      	add	r3, pc, #548	; (adr r3, 80a5af8 <__kernel_tan+0x340>)
 80a58d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a58dc:	4620      	mov	r0, r4
 80a58de:	4629      	mov	r1, r5
 80a58e0:	f000 fbf0 	bl	80a60c4 <__aeabi_dmul>
 80a58e4:	a386      	add	r3, pc, #536	; (adr r3, 80a5b00 <__kernel_tan+0x348>)
 80a58e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58ea:	f000 fa39 	bl	80a5d60 <__adddf3>
 80a58ee:	4622      	mov	r2, r4
 80a58f0:	462b      	mov	r3, r5
 80a58f2:	f000 fbe7 	bl	80a60c4 <__aeabi_dmul>
 80a58f6:	a384      	add	r3, pc, #528	; (adr r3, 80a5b08 <__kernel_tan+0x350>)
 80a58f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58fc:	f000 fa30 	bl	80a5d60 <__adddf3>
 80a5900:	4622      	mov	r2, r4
 80a5902:	462b      	mov	r3, r5
 80a5904:	f000 fbde 	bl	80a60c4 <__aeabi_dmul>
 80a5908:	a381      	add	r3, pc, #516	; (adr r3, 80a5b10 <__kernel_tan+0x358>)
 80a590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a590e:	f000 fa27 	bl	80a5d60 <__adddf3>
 80a5912:	4622      	mov	r2, r4
 80a5914:	462b      	mov	r3, r5
 80a5916:	f000 fbd5 	bl	80a60c4 <__aeabi_dmul>
 80a591a:	a37f      	add	r3, pc, #508	; (adr r3, 80a5b18 <__kernel_tan+0x360>)
 80a591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5920:	f000 fa1e 	bl	80a5d60 <__adddf3>
 80a5924:	4622      	mov	r2, r4
 80a5926:	462b      	mov	r3, r5
 80a5928:	f000 fbcc 	bl	80a60c4 <__aeabi_dmul>
 80a592c:	a37c      	add	r3, pc, #496	; (adr r3, 80a5b20 <__kernel_tan+0x368>)
 80a592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5932:	f000 fa15 	bl	80a5d60 <__adddf3>
 80a5936:	4602      	mov	r2, r0
 80a5938:	460b      	mov	r3, r1
 80a593a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a593e:	f000 fa0f 	bl	80a5d60 <__adddf3>
 80a5942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5946:	f000 fbbd 	bl	80a60c4 <__aeabi_dmul>
 80a594a:	9c00      	ldr	r4, [sp, #0]
 80a594c:	463a      	mov	r2, r7
 80a594e:	4623      	mov	r3, r4
 80a5950:	f000 fa06 	bl	80a5d60 <__adddf3>
 80a5954:	4652      	mov	r2, sl
 80a5956:	465b      	mov	r3, fp
 80a5958:	f000 fbb4 	bl	80a60c4 <__aeabi_dmul>
 80a595c:	4602      	mov	r2, r0
 80a595e:	460b      	mov	r3, r1
 80a5960:	4638      	mov	r0, r7
 80a5962:	4621      	mov	r1, r4
 80a5964:	f000 f9fc 	bl	80a5d60 <__adddf3>
 80a5968:	a36f      	add	r3, pc, #444	; (adr r3, 80a5b28 <__kernel_tan+0x370>)
 80a596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a596e:	4604      	mov	r4, r0
 80a5970:	460d      	mov	r5, r1
 80a5972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5976:	f000 fba5 	bl	80a60c4 <__aeabi_dmul>
 80a597a:	4622      	mov	r2, r4
 80a597c:	462b      	mov	r3, r5
 80a597e:	f000 f9ef 	bl	80a5d60 <__adddf3>
 80a5982:	460b      	mov	r3, r1
 80a5984:	4602      	mov	r2, r0
 80a5986:	4682      	mov	sl, r0
 80a5988:	468b      	mov	fp, r1
 80a598a:	4640      	mov	r0, r8
 80a598c:	4649      	mov	r1, r9
 80a598e:	f000 f9e7 	bl	80a5d60 <__adddf3>
 80a5992:	4b69      	ldr	r3, [pc, #420]	; (80a5b38 <__kernel_tan+0x380>)
 80a5994:	4604      	mov	r4, r0
 80a5996:	429e      	cmp	r6, r3
 80a5998:	460d      	mov	r5, r1
 80a599a:	dc39      	bgt.n	80a5a10 <__kernel_tan+0x258>
 80a599c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a599e:	2b01      	cmp	r3, #1
 80a59a0:	d033      	beq.n	80a5a0a <__kernel_tan+0x252>
 80a59a2:	4602      	mov	r2, r0
 80a59a4:	460b      	mov	r3, r1
 80a59a6:	2000      	movs	r0, #0
 80a59a8:	4962      	ldr	r1, [pc, #392]	; (80a5b34 <__kernel_tan+0x37c>)
 80a59aa:	f000 fcb5 	bl	80a6318 <__aeabi_ddiv>
 80a59ae:	460f      	mov	r7, r1
 80a59b0:	4629      	mov	r1, r5
 80a59b2:	4642      	mov	r2, r8
 80a59b4:	464b      	mov	r3, r9
 80a59b6:	4606      	mov	r6, r0
 80a59b8:	2000      	movs	r0, #0
 80a59ba:	4680      	mov	r8, r0
 80a59bc:	4689      	mov	r9, r1
 80a59be:	f000 f9cd 	bl	80a5d5c <__aeabi_dsub>
 80a59c2:	4602      	mov	r2, r0
 80a59c4:	460b      	mov	r3, r1
 80a59c6:	4650      	mov	r0, sl
 80a59c8:	4659      	mov	r1, fp
 80a59ca:	f000 f9c7 	bl	80a5d5c <__aeabi_dsub>
 80a59ce:	4642      	mov	r2, r8
 80a59d0:	463b      	mov	r3, r7
 80a59d2:	f000 fb77 	bl	80a60c4 <__aeabi_dmul>
 80a59d6:	4642      	mov	r2, r8
 80a59d8:	4682      	mov	sl, r0
 80a59da:	468b      	mov	fp, r1
 80a59dc:	463b      	mov	r3, r7
 80a59de:	4640      	mov	r0, r8
 80a59e0:	4649      	mov	r1, r9
 80a59e2:	f000 fb6f 	bl	80a60c4 <__aeabi_dmul>
 80a59e6:	2200      	movs	r2, #0
 80a59e8:	4b54      	ldr	r3, [pc, #336]	; (80a5b3c <__kernel_tan+0x384>)
 80a59ea:	f000 f9b9 	bl	80a5d60 <__adddf3>
 80a59ee:	4602      	mov	r2, r0
 80a59f0:	460b      	mov	r3, r1
 80a59f2:	4650      	mov	r0, sl
 80a59f4:	4659      	mov	r1, fp
 80a59f6:	f000 f9b3 	bl	80a5d60 <__adddf3>
 80a59fa:	4632      	mov	r2, r6
 80a59fc:	463b      	mov	r3, r7
 80a59fe:	f000 fb61 	bl	80a60c4 <__aeabi_dmul>
 80a5a02:	4642      	mov	r2, r8
 80a5a04:	463b      	mov	r3, r7
 80a5a06:	f000 f9ab 	bl	80a5d60 <__adddf3>
 80a5a0a:	b009      	add	sp, #36	; 0x24
 80a5a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5a10:	9812      	ldr	r0, [sp, #72]	; 0x48
 80a5a12:	f000 faf1 	bl	80a5ff8 <__aeabi_i2d>
 80a5a16:	4622      	mov	r2, r4
 80a5a18:	4606      	mov	r6, r0
 80a5a1a:	460f      	mov	r7, r1
 80a5a1c:	462b      	mov	r3, r5
 80a5a1e:	4620      	mov	r0, r4
 80a5a20:	4629      	mov	r1, r5
 80a5a22:	f000 fb4f 	bl	80a60c4 <__aeabi_dmul>
 80a5a26:	4632      	mov	r2, r6
 80a5a28:	e9cd 0100 	strd	r0, r1, [sp]
 80a5a2c:	463b      	mov	r3, r7
 80a5a2e:	4620      	mov	r0, r4
 80a5a30:	4629      	mov	r1, r5
 80a5a32:	f000 f995 	bl	80a5d60 <__adddf3>
 80a5a36:	4602      	mov	r2, r0
 80a5a38:	460b      	mov	r3, r1
 80a5a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5a3e:	f000 fc6b 	bl	80a6318 <__aeabi_ddiv>
 80a5a42:	4652      	mov	r2, sl
 80a5a44:	465b      	mov	r3, fp
 80a5a46:	f000 f989 	bl	80a5d5c <__aeabi_dsub>
 80a5a4a:	4602      	mov	r2, r0
 80a5a4c:	460b      	mov	r3, r1
 80a5a4e:	4640      	mov	r0, r8
 80a5a50:	4649      	mov	r1, r9
 80a5a52:	f000 f983 	bl	80a5d5c <__aeabi_dsub>
 80a5a56:	4602      	mov	r2, r0
 80a5a58:	460b      	mov	r3, r1
 80a5a5a:	f000 f981 	bl	80a5d60 <__adddf3>
 80a5a5e:	4602      	mov	r2, r0
 80a5a60:	460b      	mov	r3, r1
 80a5a62:	4630      	mov	r0, r6
 80a5a64:	4639      	mov	r1, r7
 80a5a66:	f000 f979 	bl	80a5d5c <__aeabi_dsub>
 80a5a6a:	9b07      	ldr	r3, [sp, #28]
 80a5a6c:	4604      	mov	r4, r0
 80a5a6e:	1798      	asrs	r0, r3, #30
 80a5a70:	f000 0002 	and.w	r0, r0, #2
 80a5a74:	f1c0 0001 	rsb	r0, r0, #1
 80a5a78:	460d      	mov	r5, r1
 80a5a7a:	f000 fabd 	bl	80a5ff8 <__aeabi_i2d>
 80a5a7e:	4602      	mov	r2, r0
 80a5a80:	460b      	mov	r3, r1
 80a5a82:	4620      	mov	r0, r4
 80a5a84:	4629      	mov	r1, r5
 80a5a86:	f000 fb1d 	bl	80a60c4 <__aeabi_dmul>
 80a5a8a:	b009      	add	sp, #36	; 0x24
 80a5a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5a90:	4640      	mov	r0, r8
 80a5a92:	4649      	mov	r1, r9
 80a5a94:	f000 f858 	bl	80a5b48 <fabs>
 80a5a98:	4602      	mov	r2, r0
 80a5a9a:	460b      	mov	r3, r1
 80a5a9c:	2000      	movs	r0, #0
 80a5a9e:	4927      	ldr	r1, [pc, #156]	; (80a5b3c <__kernel_tan+0x384>)
 80a5aa0:	f000 fc3a 	bl	80a6318 <__aeabi_ddiv>
 80a5aa4:	e7b1      	b.n	80a5a0a <__kernel_tan+0x252>
 80a5aa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5aaa:	4699      	mov	r9, r3
 80a5aac:	9b00      	ldr	r3, [sp, #0]
 80a5aae:	4680      	mov	r8, r0
 80a5ab0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a5ab4:	9300      	str	r3, [sp, #0]
 80a5ab6:	e6aa      	b.n	80a580e <__kernel_tan+0x56>
 80a5ab8:	54442d18 	.word	0x54442d18
 80a5abc:	3fe921fb 	.word	0x3fe921fb
 80a5ac0:	33145c07 	.word	0x33145c07
 80a5ac4:	3c81a626 	.word	0x3c81a626
 80a5ac8:	74bf7ad4 	.word	0x74bf7ad4
 80a5acc:	3efb2a70 	.word	0x3efb2a70
 80a5ad0:	32f0a7e9 	.word	0x32f0a7e9
 80a5ad4:	3f12b80f 	.word	0x3f12b80f
 80a5ad8:	1a8d1068 	.word	0x1a8d1068
 80a5adc:	3f3026f7 	.word	0x3f3026f7
 80a5ae0:	fee08315 	.word	0xfee08315
 80a5ae4:	3f57dbc8 	.word	0x3f57dbc8
 80a5ae8:	e96e8493 	.word	0xe96e8493
 80a5aec:	3f8226e3 	.word	0x3f8226e3
 80a5af0:	1bb341fe 	.word	0x1bb341fe
 80a5af4:	3faba1ba 	.word	0x3faba1ba
 80a5af8:	db605373 	.word	0xdb605373
 80a5afc:	bef375cb 	.word	0xbef375cb
 80a5b00:	a03792a6 	.word	0xa03792a6
 80a5b04:	3f147e88 	.word	0x3f147e88
 80a5b08:	f2f26501 	.word	0xf2f26501
 80a5b0c:	3f4344d8 	.word	0x3f4344d8
 80a5b10:	c9560328 	.word	0xc9560328
 80a5b14:	3f6d6d22 	.word	0x3f6d6d22
 80a5b18:	8406d637 	.word	0x8406d637
 80a5b1c:	3f9664f4 	.word	0x3f9664f4
 80a5b20:	1110fe7a 	.word	0x1110fe7a
 80a5b24:	3fc11111 	.word	0x3fc11111
 80a5b28:	55555563 	.word	0x55555563
 80a5b2c:	3fd55555 	.word	0x3fd55555
 80a5b30:	3e2fffff 	.word	0x3e2fffff
 80a5b34:	bff00000 	.word	0xbff00000
 80a5b38:	3fe59427 	.word	0x3fe59427
 80a5b3c:	3ff00000 	.word	0x3ff00000
 80a5b40:	4640      	mov	r0, r8
 80a5b42:	4649      	mov	r1, r9
 80a5b44:	e761      	b.n	80a5a0a <__kernel_tan+0x252>
 80a5b46:	bf00      	nop

080a5b48 <fabs>:
 80a5b48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5b4c:	4770      	bx	lr
 80a5b4e:	bf00      	nop

080a5b50 <floor>:
 80a5b50:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a5b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a5b58:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a5b5c:	2e13      	cmp	r6, #19
 80a5b5e:	460b      	mov	r3, r1
 80a5b60:	4604      	mov	r4, r0
 80a5b62:	460d      	mov	r5, r1
 80a5b64:	4688      	mov	r8, r1
 80a5b66:	4607      	mov	r7, r0
 80a5b68:	dc1c      	bgt.n	80a5ba4 <floor+0x54>
 80a5b6a:	2e00      	cmp	r6, #0
 80a5b6c:	db3f      	blt.n	80a5bee <floor+0x9e>
 80a5b6e:	4a3a      	ldr	r2, [pc, #232]	; (80a5c58 <floor+0x108>)
 80a5b70:	4686      	mov	lr, r0
 80a5b72:	fa42 f906 	asr.w	r9, r2, r6
 80a5b76:	ea01 0209 	and.w	r2, r1, r9
 80a5b7a:	4302      	orrs	r2, r0
 80a5b7c:	d017      	beq.n	80a5bae <floor+0x5e>
 80a5b7e:	a334      	add	r3, pc, #208	; (adr r3, 80a5c50 <floor+0x100>)
 80a5b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5b84:	f000 f8ec 	bl	80a5d60 <__adddf3>
 80a5b88:	2200      	movs	r2, #0
 80a5b8a:	2300      	movs	r3, #0
 80a5b8c:	f000 fd2a 	bl	80a65e4 <__aeabi_dcmpgt>
 80a5b90:	b120      	cbz	r0, 80a5b9c <floor+0x4c>
 80a5b92:	2d00      	cmp	r5, #0
 80a5b94:	db40      	blt.n	80a5c18 <floor+0xc8>
 80a5b96:	ea28 0509 	bic.w	r5, r8, r9
 80a5b9a:	2700      	movs	r7, #0
 80a5b9c:	4638      	mov	r0, r7
 80a5b9e:	4629      	mov	r1, r5
 80a5ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5ba4:	2e33      	cmp	r6, #51	; 0x33
 80a5ba6:	dd06      	ble.n	80a5bb6 <floor+0x66>
 80a5ba8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a5bac:	d02f      	beq.n	80a5c0e <floor+0xbe>
 80a5bae:	4620      	mov	r0, r4
 80a5bb0:	4619      	mov	r1, r3
 80a5bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5bb6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a5bba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80a5bbe:	fa29 f902 	lsr.w	r9, r9, r2
 80a5bc2:	ea10 0f09 	tst.w	r0, r9
 80a5bc6:	d0f2      	beq.n	80a5bae <floor+0x5e>
 80a5bc8:	a321      	add	r3, pc, #132	; (adr r3, 80a5c50 <floor+0x100>)
 80a5bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5bce:	f000 f8c7 	bl	80a5d60 <__adddf3>
 80a5bd2:	2200      	movs	r2, #0
 80a5bd4:	2300      	movs	r3, #0
 80a5bd6:	f000 fd05 	bl	80a65e4 <__aeabi_dcmpgt>
 80a5bda:	2800      	cmp	r0, #0
 80a5bdc:	d0de      	beq.n	80a5b9c <floor+0x4c>
 80a5bde:	2d00      	cmp	r5, #0
 80a5be0:	db20      	blt.n	80a5c24 <floor+0xd4>
 80a5be2:	4645      	mov	r5, r8
 80a5be4:	ea27 0709 	bic.w	r7, r7, r9
 80a5be8:	4638      	mov	r0, r7
 80a5bea:	4629      	mov	r1, r5
 80a5bec:	e7d8      	b.n	80a5ba0 <floor+0x50>
 80a5bee:	a318      	add	r3, pc, #96	; (adr r3, 80a5c50 <floor+0x100>)
 80a5bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5bf4:	f000 f8b4 	bl	80a5d60 <__adddf3>
 80a5bf8:	2200      	movs	r2, #0
 80a5bfa:	2300      	movs	r3, #0
 80a5bfc:	f000 fcf2 	bl	80a65e4 <__aeabi_dcmpgt>
 80a5c00:	2800      	cmp	r0, #0
 80a5c02:	d0cb      	beq.n	80a5b9c <floor+0x4c>
 80a5c04:	2d00      	cmp	r5, #0
 80a5c06:	db18      	blt.n	80a5c3a <floor+0xea>
 80a5c08:	2700      	movs	r7, #0
 80a5c0a:	463d      	mov	r5, r7
 80a5c0c:	e7c6      	b.n	80a5b9c <floor+0x4c>
 80a5c0e:	4602      	mov	r2, r0
 80a5c10:	460b      	mov	r3, r1
 80a5c12:	f000 f8a5 	bl	80a5d60 <__adddf3>
 80a5c16:	e7cc      	b.n	80a5bb2 <floor+0x62>
 80a5c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a5c1c:	fa43 f606 	asr.w	r6, r3, r6
 80a5c20:	44b0      	add	r8, r6
 80a5c22:	e7b8      	b.n	80a5b96 <floor+0x46>
 80a5c24:	2e14      	cmp	r6, #20
 80a5c26:	d010      	beq.n	80a5c4a <floor+0xfa>
 80a5c28:	2301      	movs	r3, #1
 80a5c2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a5c2e:	fa03 f606 	lsl.w	r6, r3, r6
 80a5c32:	1937      	adds	r7, r6, r4
 80a5c34:	bf28      	it	cs
 80a5c36:	4498      	addcs	r8, r3
 80a5c38:	e7d3      	b.n	80a5be2 <floor+0x92>
 80a5c3a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a5c3e:	4b07      	ldr	r3, [pc, #28]	; (80a5c5c <floor+0x10c>)
 80a5c40:	4322      	orrs	r2, r4
 80a5c42:	bf18      	it	ne
 80a5c44:	461d      	movne	r5, r3
 80a5c46:	2700      	movs	r7, #0
 80a5c48:	e7a8      	b.n	80a5b9c <floor+0x4c>
 80a5c4a:	f105 0801 	add.w	r8, r5, #1
 80a5c4e:	e7c8      	b.n	80a5be2 <floor+0x92>
 80a5c50:	8800759c 	.word	0x8800759c
 80a5c54:	7e37e43c 	.word	0x7e37e43c
 80a5c58:	000fffff 	.word	0x000fffff
 80a5c5c:	bff00000 	.word	0xbff00000

080a5c60 <scalbn>:
 80a5c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5c62:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a5c66:	4604      	mov	r4, r0
 80a5c68:	460d      	mov	r5, r1
 80a5c6a:	460b      	mov	r3, r1
 80a5c6c:	4617      	mov	r7, r2
 80a5c6e:	bb06      	cbnz	r6, 80a5cb2 <scalbn+0x52>
 80a5c70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a5c74:	4303      	orrs	r3, r0
 80a5c76:	d025      	beq.n	80a5cc4 <scalbn+0x64>
 80a5c78:	2200      	movs	r2, #0
 80a5c7a:	4b2f      	ldr	r3, [pc, #188]	; (80a5d38 <scalbn+0xd8>)
 80a5c7c:	f000 fa22 	bl	80a60c4 <__aeabi_dmul>
 80a5c80:	4a2e      	ldr	r2, [pc, #184]	; (80a5d3c <scalbn+0xdc>)
 80a5c82:	4604      	mov	r4, r0
 80a5c84:	4297      	cmp	r7, r2
 80a5c86:	460d      	mov	r5, r1
 80a5c88:	460b      	mov	r3, r1
 80a5c8a:	db2a      	blt.n	80a5ce2 <scalbn+0x82>
 80a5c8c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a5c90:	3e36      	subs	r6, #54	; 0x36
 80a5c92:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a5c96:	443e      	add	r6, r7
 80a5c98:	4296      	cmp	r6, r2
 80a5c9a:	dc28      	bgt.n	80a5cee <scalbn+0x8e>
 80a5c9c:	2e00      	cmp	r6, #0
 80a5c9e:	dd12      	ble.n	80a5cc6 <scalbn+0x66>
 80a5ca0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a5ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a5ca8:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a5cac:	4620      	mov	r0, r4
 80a5cae:	4629      	mov	r1, r5
 80a5cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5cb2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a5cb6:	4296      	cmp	r6, r2
 80a5cb8:	d1eb      	bne.n	80a5c92 <scalbn+0x32>
 80a5cba:	4602      	mov	r2, r0
 80a5cbc:	460b      	mov	r3, r1
 80a5cbe:	f000 f84f 	bl	80a5d60 <__adddf3>
 80a5cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5cc6:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a5cca:	da1d      	bge.n	80a5d08 <scalbn+0xa8>
 80a5ccc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a5cd0:	429f      	cmp	r7, r3
 80a5cd2:	dc0c      	bgt.n	80a5cee <scalbn+0x8e>
 80a5cd4:	a114      	add	r1, pc, #80	; (adr r1, 80a5d28 <scalbn+0xc8>)
 80a5cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5cda:	4622      	mov	r2, r4
 80a5cdc:	462b      	mov	r3, r5
 80a5cde:	f000 f831 	bl	80a5d44 <copysign>
 80a5ce2:	a311      	add	r3, pc, #68	; (adr r3, 80a5d28 <scalbn+0xc8>)
 80a5ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5ce8:	f000 f9ec 	bl	80a60c4 <__aeabi_dmul>
 80a5cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5cee:	4622      	mov	r2, r4
 80a5cf0:	a10f      	add	r1, pc, #60	; (adr r1, 80a5d30 <scalbn+0xd0>)
 80a5cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5cf6:	462b      	mov	r3, r5
 80a5cf8:	f000 f824 	bl	80a5d44 <copysign>
 80a5cfc:	a30c      	add	r3, pc, #48	; (adr r3, 80a5d30 <scalbn+0xd0>)
 80a5cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5d02:	f000 f9df 	bl	80a60c4 <__aeabi_dmul>
 80a5d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5d08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a5d0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a5d10:	3636      	adds	r6, #54	; 0x36
 80a5d12:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a5d16:	4620      	mov	r0, r4
 80a5d18:	4629      	mov	r1, r5
 80a5d1a:	2200      	movs	r2, #0
 80a5d1c:	4b08      	ldr	r3, [pc, #32]	; (80a5d40 <scalbn+0xe0>)
 80a5d1e:	f000 f9d1 	bl	80a60c4 <__aeabi_dmul>
 80a5d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5d24:	f3af 8000 	nop.w
 80a5d28:	c2f8f359 	.word	0xc2f8f359
 80a5d2c:	01a56e1f 	.word	0x01a56e1f
 80a5d30:	8800759c 	.word	0x8800759c
 80a5d34:	7e37e43c 	.word	0x7e37e43c
 80a5d38:	43500000 	.word	0x43500000
 80a5d3c:	ffff3cb0 	.word	0xffff3cb0
 80a5d40:	3c900000 	.word	0x3c900000

080a5d44 <copysign>:
 80a5d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a5d48:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a5d4c:	ea42 0103 	orr.w	r1, r2, r3
 80a5d50:	4770      	bx	lr
 80a5d52:	bf00      	nop

080a5d54 <__aeabi_drsub>:
 80a5d54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5d58:	e002      	b.n	80a5d60 <__adddf3>
 80a5d5a:	bf00      	nop

080a5d5c <__aeabi_dsub>:
 80a5d5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5d60 <__adddf3>:
 80a5d60:	b530      	push	{r4, r5, lr}
 80a5d62:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5d66:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5d6a:	ea94 0f05 	teq	r4, r5
 80a5d6e:	bf08      	it	eq
 80a5d70:	ea90 0f02 	teqeq	r0, r2
 80a5d74:	bf1f      	itttt	ne
 80a5d76:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5d7a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5d7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5d82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5d86:	f000 80e2 	beq.w	80a5f4e <__adddf3+0x1ee>
 80a5d8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5d8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5d92:	bfb8      	it	lt
 80a5d94:	426d      	neglt	r5, r5
 80a5d96:	dd0c      	ble.n	80a5db2 <__adddf3+0x52>
 80a5d98:	442c      	add	r4, r5
 80a5d9a:	ea80 0202 	eor.w	r2, r0, r2
 80a5d9e:	ea81 0303 	eor.w	r3, r1, r3
 80a5da2:	ea82 0000 	eor.w	r0, r2, r0
 80a5da6:	ea83 0101 	eor.w	r1, r3, r1
 80a5daa:	ea80 0202 	eor.w	r2, r0, r2
 80a5dae:	ea81 0303 	eor.w	r3, r1, r3
 80a5db2:	2d36      	cmp	r5, #54	; 0x36
 80a5db4:	bf88      	it	hi
 80a5db6:	bd30      	pophi	{r4, r5, pc}
 80a5db8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5dbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5dc0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5dc4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a5dc8:	d002      	beq.n	80a5dd0 <__adddf3+0x70>
 80a5dca:	4240      	negs	r0, r0
 80a5dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5dd0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5dd8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5ddc:	d002      	beq.n	80a5de4 <__adddf3+0x84>
 80a5dde:	4252      	negs	r2, r2
 80a5de0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5de4:	ea94 0f05 	teq	r4, r5
 80a5de8:	f000 80a7 	beq.w	80a5f3a <__adddf3+0x1da>
 80a5dec:	f1a4 0401 	sub.w	r4, r4, #1
 80a5df0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5df4:	db0d      	blt.n	80a5e12 <__adddf3+0xb2>
 80a5df6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a5dfa:	fa22 f205 	lsr.w	r2, r2, r5
 80a5dfe:	1880      	adds	r0, r0, r2
 80a5e00:	f141 0100 	adc.w	r1, r1, #0
 80a5e04:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5e08:	1880      	adds	r0, r0, r2
 80a5e0a:	fa43 f305 	asr.w	r3, r3, r5
 80a5e0e:	4159      	adcs	r1, r3
 80a5e10:	e00e      	b.n	80a5e30 <__adddf3+0xd0>
 80a5e12:	f1a5 0520 	sub.w	r5, r5, #32
 80a5e16:	f10e 0e20 	add.w	lr, lr, #32
 80a5e1a:	2a01      	cmp	r2, #1
 80a5e1c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5e20:	bf28      	it	cs
 80a5e22:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a5e26:	fa43 f305 	asr.w	r3, r3, r5
 80a5e2a:	18c0      	adds	r0, r0, r3
 80a5e2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5e30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5e34:	d507      	bpl.n	80a5e46 <__adddf3+0xe6>
 80a5e36:	f04f 0e00 	mov.w	lr, #0
 80a5e3a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a5e3e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5e42:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5e46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5e4a:	d31b      	bcc.n	80a5e84 <__adddf3+0x124>
 80a5e4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5e50:	d30c      	bcc.n	80a5e6c <__adddf3+0x10c>
 80a5e52:	0849      	lsrs	r1, r1, #1
 80a5e54:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5e58:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5e5c:	f104 0401 	add.w	r4, r4, #1
 80a5e60:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5e64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5e68:	f080 809a 	bcs.w	80a5fa0 <__adddf3+0x240>
 80a5e6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5e70:	bf08      	it	eq
 80a5e72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5e76:	f150 0000 	adcs.w	r0, r0, #0
 80a5e7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5e7e:	ea41 0105 	orr.w	r1, r1, r5
 80a5e82:	bd30      	pop	{r4, r5, pc}
 80a5e84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5e88:	4140      	adcs	r0, r0
 80a5e8a:	eb41 0101 	adc.w	r1, r1, r1
 80a5e8e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5e92:	f1a4 0401 	sub.w	r4, r4, #1
 80a5e96:	d1e9      	bne.n	80a5e6c <__adddf3+0x10c>
 80a5e98:	f091 0f00 	teq	r1, #0
 80a5e9c:	bf04      	itt	eq
 80a5e9e:	4601      	moveq	r1, r0
 80a5ea0:	2000      	moveq	r0, #0
 80a5ea2:	fab1 f381 	clz	r3, r1
 80a5ea6:	bf08      	it	eq
 80a5ea8:	3320      	addeq	r3, #32
 80a5eaa:	f1a3 030b 	sub.w	r3, r3, #11
 80a5eae:	f1b3 0220 	subs.w	r2, r3, #32
 80a5eb2:	da0c      	bge.n	80a5ece <__adddf3+0x16e>
 80a5eb4:	320c      	adds	r2, #12
 80a5eb6:	dd08      	ble.n	80a5eca <__adddf3+0x16a>
 80a5eb8:	f102 0c14 	add.w	ip, r2, #20
 80a5ebc:	f1c2 020c 	rsb	r2, r2, #12
 80a5ec0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5ec4:	fa21 f102 	lsr.w	r1, r1, r2
 80a5ec8:	e00c      	b.n	80a5ee4 <__adddf3+0x184>
 80a5eca:	f102 0214 	add.w	r2, r2, #20
 80a5ece:	bfd8      	it	le
 80a5ed0:	f1c2 0c20 	rsble	ip, r2, #32
 80a5ed4:	fa01 f102 	lsl.w	r1, r1, r2
 80a5ed8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5edc:	bfdc      	itt	le
 80a5ede:	ea41 010c 	orrle.w	r1, r1, ip
 80a5ee2:	4090      	lslle	r0, r2
 80a5ee4:	1ae4      	subs	r4, r4, r3
 80a5ee6:	bfa2      	ittt	ge
 80a5ee8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5eec:	4329      	orrge	r1, r5
 80a5eee:	bd30      	popge	{r4, r5, pc}
 80a5ef0:	ea6f 0404 	mvn.w	r4, r4
 80a5ef4:	3c1f      	subs	r4, #31
 80a5ef6:	da1c      	bge.n	80a5f32 <__adddf3+0x1d2>
 80a5ef8:	340c      	adds	r4, #12
 80a5efa:	dc0e      	bgt.n	80a5f1a <__adddf3+0x1ba>
 80a5efc:	f104 0414 	add.w	r4, r4, #20
 80a5f00:	f1c4 0220 	rsb	r2, r4, #32
 80a5f04:	fa20 f004 	lsr.w	r0, r0, r4
 80a5f08:	fa01 f302 	lsl.w	r3, r1, r2
 80a5f0c:	ea40 0003 	orr.w	r0, r0, r3
 80a5f10:	fa21 f304 	lsr.w	r3, r1, r4
 80a5f14:	ea45 0103 	orr.w	r1, r5, r3
 80a5f18:	bd30      	pop	{r4, r5, pc}
 80a5f1a:	f1c4 040c 	rsb	r4, r4, #12
 80a5f1e:	f1c4 0220 	rsb	r2, r4, #32
 80a5f22:	fa20 f002 	lsr.w	r0, r0, r2
 80a5f26:	fa01 f304 	lsl.w	r3, r1, r4
 80a5f2a:	ea40 0003 	orr.w	r0, r0, r3
 80a5f2e:	4629      	mov	r1, r5
 80a5f30:	bd30      	pop	{r4, r5, pc}
 80a5f32:	fa21 f004 	lsr.w	r0, r1, r4
 80a5f36:	4629      	mov	r1, r5
 80a5f38:	bd30      	pop	{r4, r5, pc}
 80a5f3a:	f094 0f00 	teq	r4, #0
 80a5f3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5f42:	bf06      	itte	eq
 80a5f44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5f48:	3401      	addeq	r4, #1
 80a5f4a:	3d01      	subne	r5, #1
 80a5f4c:	e74e      	b.n	80a5dec <__adddf3+0x8c>
 80a5f4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5f52:	bf18      	it	ne
 80a5f54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5f58:	d029      	beq.n	80a5fae <__adddf3+0x24e>
 80a5f5a:	ea94 0f05 	teq	r4, r5
 80a5f5e:	bf08      	it	eq
 80a5f60:	ea90 0f02 	teqeq	r0, r2
 80a5f64:	d005      	beq.n	80a5f72 <__adddf3+0x212>
 80a5f66:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5f6a:	bf04      	itt	eq
 80a5f6c:	4619      	moveq	r1, r3
 80a5f6e:	4610      	moveq	r0, r2
 80a5f70:	bd30      	pop	{r4, r5, pc}
 80a5f72:	ea91 0f03 	teq	r1, r3
 80a5f76:	bf1e      	ittt	ne
 80a5f78:	2100      	movne	r1, #0
 80a5f7a:	2000      	movne	r0, #0
 80a5f7c:	bd30      	popne	{r4, r5, pc}
 80a5f7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5f82:	d105      	bne.n	80a5f90 <__adddf3+0x230>
 80a5f84:	0040      	lsls	r0, r0, #1
 80a5f86:	4149      	adcs	r1, r1
 80a5f88:	bf28      	it	cs
 80a5f8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5f8e:	bd30      	pop	{r4, r5, pc}
 80a5f90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5f94:	bf3c      	itt	cc
 80a5f96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a5f9a:	bd30      	popcc	{r4, r5, pc}
 80a5f9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5fa0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5fa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5fa8:	f04f 0000 	mov.w	r0, #0
 80a5fac:	bd30      	pop	{r4, r5, pc}
 80a5fae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5fb2:	bf1a      	itte	ne
 80a5fb4:	4619      	movne	r1, r3
 80a5fb6:	4610      	movne	r0, r2
 80a5fb8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5fbc:	bf1c      	itt	ne
 80a5fbe:	460b      	movne	r3, r1
 80a5fc0:	4602      	movne	r2, r0
 80a5fc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5fc6:	bf06      	itte	eq
 80a5fc8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5fcc:	ea91 0f03 	teqeq	r1, r3
 80a5fd0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5fd4:	bd30      	pop	{r4, r5, pc}
 80a5fd6:	bf00      	nop

080a5fd8 <__aeabi_ui2d>:
 80a5fd8:	f090 0f00 	teq	r0, #0
 80a5fdc:	bf04      	itt	eq
 80a5fde:	2100      	moveq	r1, #0
 80a5fe0:	4770      	bxeq	lr
 80a5fe2:	b530      	push	{r4, r5, lr}
 80a5fe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5fe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5fec:	f04f 0500 	mov.w	r5, #0
 80a5ff0:	f04f 0100 	mov.w	r1, #0
 80a5ff4:	e750      	b.n	80a5e98 <__adddf3+0x138>
 80a5ff6:	bf00      	nop

080a5ff8 <__aeabi_i2d>:
 80a5ff8:	f090 0f00 	teq	r0, #0
 80a5ffc:	bf04      	itt	eq
 80a5ffe:	2100      	moveq	r1, #0
 80a6000:	4770      	bxeq	lr
 80a6002:	b530      	push	{r4, r5, lr}
 80a6004:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6008:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a600c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a6010:	bf48      	it	mi
 80a6012:	4240      	negmi	r0, r0
 80a6014:	f04f 0100 	mov.w	r1, #0
 80a6018:	e73e      	b.n	80a5e98 <__adddf3+0x138>
 80a601a:	bf00      	nop

080a601c <__aeabi_f2d>:
 80a601c:	0042      	lsls	r2, r0, #1
 80a601e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a6022:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6026:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a602a:	bf1f      	itttt	ne
 80a602c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a6030:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a6034:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a6038:	4770      	bxne	lr
 80a603a:	f092 0f00 	teq	r2, #0
 80a603e:	bf14      	ite	ne
 80a6040:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a6044:	4770      	bxeq	lr
 80a6046:	b530      	push	{r4, r5, lr}
 80a6048:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a604c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a6050:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a6054:	e720      	b.n	80a5e98 <__adddf3+0x138>
 80a6056:	bf00      	nop

080a6058 <__aeabi_ul2d>:
 80a6058:	ea50 0201 	orrs.w	r2, r0, r1
 80a605c:	bf08      	it	eq
 80a605e:	4770      	bxeq	lr
 80a6060:	b530      	push	{r4, r5, lr}
 80a6062:	f04f 0500 	mov.w	r5, #0
 80a6066:	e00a      	b.n	80a607e <__aeabi_l2d+0x16>

080a6068 <__aeabi_l2d>:
 80a6068:	ea50 0201 	orrs.w	r2, r0, r1
 80a606c:	bf08      	it	eq
 80a606e:	4770      	bxeq	lr
 80a6070:	b530      	push	{r4, r5, lr}
 80a6072:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a6076:	d502      	bpl.n	80a607e <__aeabi_l2d+0x16>
 80a6078:	4240      	negs	r0, r0
 80a607a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a607e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6082:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a6086:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a608a:	f43f aedc 	beq.w	80a5e46 <__adddf3+0xe6>
 80a608e:	f04f 0203 	mov.w	r2, #3
 80a6092:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a6096:	bf18      	it	ne
 80a6098:	3203      	addne	r2, #3
 80a609a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a609e:	bf18      	it	ne
 80a60a0:	3203      	addne	r2, #3
 80a60a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a60a6:	f1c2 0320 	rsb	r3, r2, #32
 80a60aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80a60ae:	fa20 f002 	lsr.w	r0, r0, r2
 80a60b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a60b6:	ea40 000e 	orr.w	r0, r0, lr
 80a60ba:	fa21 f102 	lsr.w	r1, r1, r2
 80a60be:	4414      	add	r4, r2
 80a60c0:	e6c1      	b.n	80a5e46 <__adddf3+0xe6>
 80a60c2:	bf00      	nop

080a60c4 <__aeabi_dmul>:
 80a60c4:	b570      	push	{r4, r5, r6, lr}
 80a60c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a60ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a60ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a60d2:	bf1d      	ittte	ne
 80a60d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a60d8:	ea94 0f0c 	teqne	r4, ip
 80a60dc:	ea95 0f0c 	teqne	r5, ip
 80a60e0:	f000 f8de 	bleq	80a62a0 <__aeabi_dmul+0x1dc>
 80a60e4:	442c      	add	r4, r5
 80a60e6:	ea81 0603 	eor.w	r6, r1, r3
 80a60ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a60ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a60f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a60f6:	bf18      	it	ne
 80a60f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a60fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a6104:	d038      	beq.n	80a6178 <__aeabi_dmul+0xb4>
 80a6106:	fba0 ce02 	umull	ip, lr, r0, r2
 80a610a:	f04f 0500 	mov.w	r5, #0
 80a610e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a6112:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a6116:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a611a:	f04f 0600 	mov.w	r6, #0
 80a611e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a6122:	f09c 0f00 	teq	ip, #0
 80a6126:	bf18      	it	ne
 80a6128:	f04e 0e01 	orrne.w	lr, lr, #1
 80a612c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a6130:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a6134:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a6138:	d204      	bcs.n	80a6144 <__aeabi_dmul+0x80>
 80a613a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a613e:	416d      	adcs	r5, r5
 80a6140:	eb46 0606 	adc.w	r6, r6, r6
 80a6144:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a6148:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a614c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a6150:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a6154:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a6158:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a615c:	bf88      	it	hi
 80a615e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6162:	d81e      	bhi.n	80a61a2 <__aeabi_dmul+0xde>
 80a6164:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a6168:	bf08      	it	eq
 80a616a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a616e:	f150 0000 	adcs.w	r0, r0, #0
 80a6172:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6176:	bd70      	pop	{r4, r5, r6, pc}
 80a6178:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a617c:	ea46 0101 	orr.w	r1, r6, r1
 80a6180:	ea40 0002 	orr.w	r0, r0, r2
 80a6184:	ea81 0103 	eor.w	r1, r1, r3
 80a6188:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a618c:	bfc2      	ittt	gt
 80a618e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6192:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6196:	bd70      	popgt	{r4, r5, r6, pc}
 80a6198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a619c:	f04f 0e00 	mov.w	lr, #0
 80a61a0:	3c01      	subs	r4, #1
 80a61a2:	f300 80ab 	bgt.w	80a62fc <__aeabi_dmul+0x238>
 80a61a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a61aa:	bfde      	ittt	le
 80a61ac:	2000      	movle	r0, #0
 80a61ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a61b2:	bd70      	pople	{r4, r5, r6, pc}
 80a61b4:	f1c4 0400 	rsb	r4, r4, #0
 80a61b8:	3c20      	subs	r4, #32
 80a61ba:	da35      	bge.n	80a6228 <__aeabi_dmul+0x164>
 80a61bc:	340c      	adds	r4, #12
 80a61be:	dc1b      	bgt.n	80a61f8 <__aeabi_dmul+0x134>
 80a61c0:	f104 0414 	add.w	r4, r4, #20
 80a61c4:	f1c4 0520 	rsb	r5, r4, #32
 80a61c8:	fa00 f305 	lsl.w	r3, r0, r5
 80a61cc:	fa20 f004 	lsr.w	r0, r0, r4
 80a61d0:	fa01 f205 	lsl.w	r2, r1, r5
 80a61d4:	ea40 0002 	orr.w	r0, r0, r2
 80a61d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a61dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a61e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a61e4:	fa21 f604 	lsr.w	r6, r1, r4
 80a61e8:	eb42 0106 	adc.w	r1, r2, r6
 80a61ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a61f0:	bf08      	it	eq
 80a61f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a61f6:	bd70      	pop	{r4, r5, r6, pc}
 80a61f8:	f1c4 040c 	rsb	r4, r4, #12
 80a61fc:	f1c4 0520 	rsb	r5, r4, #32
 80a6200:	fa00 f304 	lsl.w	r3, r0, r4
 80a6204:	fa20 f005 	lsr.w	r0, r0, r5
 80a6208:	fa01 f204 	lsl.w	r2, r1, r4
 80a620c:	ea40 0002 	orr.w	r0, r0, r2
 80a6210:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6214:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a6218:	f141 0100 	adc.w	r1, r1, #0
 80a621c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6220:	bf08      	it	eq
 80a6222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6226:	bd70      	pop	{r4, r5, r6, pc}
 80a6228:	f1c4 0520 	rsb	r5, r4, #32
 80a622c:	fa00 f205 	lsl.w	r2, r0, r5
 80a6230:	ea4e 0e02 	orr.w	lr, lr, r2
 80a6234:	fa20 f304 	lsr.w	r3, r0, r4
 80a6238:	fa01 f205 	lsl.w	r2, r1, r5
 80a623c:	ea43 0302 	orr.w	r3, r3, r2
 80a6240:	fa21 f004 	lsr.w	r0, r1, r4
 80a6244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6248:	fa21 f204 	lsr.w	r2, r1, r4
 80a624c:	ea20 0002 	bic.w	r0, r0, r2
 80a6250:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a6254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6258:	bf08      	it	eq
 80a625a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a625e:	bd70      	pop	{r4, r5, r6, pc}
 80a6260:	f094 0f00 	teq	r4, #0
 80a6264:	d10f      	bne.n	80a6286 <__aeabi_dmul+0x1c2>
 80a6266:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a626a:	0040      	lsls	r0, r0, #1
 80a626c:	eb41 0101 	adc.w	r1, r1, r1
 80a6270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6274:	bf08      	it	eq
 80a6276:	3c01      	subeq	r4, #1
 80a6278:	d0f7      	beq.n	80a626a <__aeabi_dmul+0x1a6>
 80a627a:	ea41 0106 	orr.w	r1, r1, r6
 80a627e:	f095 0f00 	teq	r5, #0
 80a6282:	bf18      	it	ne
 80a6284:	4770      	bxne	lr
 80a6286:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a628a:	0052      	lsls	r2, r2, #1
 80a628c:	eb43 0303 	adc.w	r3, r3, r3
 80a6290:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a6294:	bf08      	it	eq
 80a6296:	3d01      	subeq	r5, #1
 80a6298:	d0f7      	beq.n	80a628a <__aeabi_dmul+0x1c6>
 80a629a:	ea43 0306 	orr.w	r3, r3, r6
 80a629e:	4770      	bx	lr
 80a62a0:	ea94 0f0c 	teq	r4, ip
 80a62a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a62a8:	bf18      	it	ne
 80a62aa:	ea95 0f0c 	teqne	r5, ip
 80a62ae:	d00c      	beq.n	80a62ca <__aeabi_dmul+0x206>
 80a62b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a62b4:	bf18      	it	ne
 80a62b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a62ba:	d1d1      	bne.n	80a6260 <__aeabi_dmul+0x19c>
 80a62bc:	ea81 0103 	eor.w	r1, r1, r3
 80a62c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a62c4:	f04f 0000 	mov.w	r0, #0
 80a62c8:	bd70      	pop	{r4, r5, r6, pc}
 80a62ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a62ce:	bf06      	itte	eq
 80a62d0:	4610      	moveq	r0, r2
 80a62d2:	4619      	moveq	r1, r3
 80a62d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a62d8:	d019      	beq.n	80a630e <__aeabi_dmul+0x24a>
 80a62da:	ea94 0f0c 	teq	r4, ip
 80a62de:	d102      	bne.n	80a62e6 <__aeabi_dmul+0x222>
 80a62e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a62e4:	d113      	bne.n	80a630e <__aeabi_dmul+0x24a>
 80a62e6:	ea95 0f0c 	teq	r5, ip
 80a62ea:	d105      	bne.n	80a62f8 <__aeabi_dmul+0x234>
 80a62ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a62f0:	bf1c      	itt	ne
 80a62f2:	4610      	movne	r0, r2
 80a62f4:	4619      	movne	r1, r3
 80a62f6:	d10a      	bne.n	80a630e <__aeabi_dmul+0x24a>
 80a62f8:	ea81 0103 	eor.w	r1, r1, r3
 80a62fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6300:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a6304:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a6308:	f04f 0000 	mov.w	r0, #0
 80a630c:	bd70      	pop	{r4, r5, r6, pc}
 80a630e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a6312:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a6316:	bd70      	pop	{r4, r5, r6, pc}

080a6318 <__aeabi_ddiv>:
 80a6318:	b570      	push	{r4, r5, r6, lr}
 80a631a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a631e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a6322:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a6326:	bf1d      	ittte	ne
 80a6328:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a632c:	ea94 0f0c 	teqne	r4, ip
 80a6330:	ea95 0f0c 	teqne	r5, ip
 80a6334:	f000 f8a7 	bleq	80a6486 <__aeabi_ddiv+0x16e>
 80a6338:	eba4 0405 	sub.w	r4, r4, r5
 80a633c:	ea81 0e03 	eor.w	lr, r1, r3
 80a6340:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a6348:	f000 8088 	beq.w	80a645c <__aeabi_ddiv+0x144>
 80a634c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a6350:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a6354:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a6358:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a635c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a6360:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a6364:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a6368:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a636c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a6370:	429d      	cmp	r5, r3
 80a6372:	bf08      	it	eq
 80a6374:	4296      	cmpeq	r6, r2
 80a6376:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a637a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a637e:	d202      	bcs.n	80a6386 <__aeabi_ddiv+0x6e>
 80a6380:	085b      	lsrs	r3, r3, #1
 80a6382:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6386:	1ab6      	subs	r6, r6, r2
 80a6388:	eb65 0503 	sbc.w	r5, r5, r3
 80a638c:	085b      	lsrs	r3, r3, #1
 80a638e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6392:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a6396:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a639a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a639e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a63a2:	bf22      	ittt	cs
 80a63a4:	1ab6      	subcs	r6, r6, r2
 80a63a6:	4675      	movcs	r5, lr
 80a63a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a63ac:	085b      	lsrs	r3, r3, #1
 80a63ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a63b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a63b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a63ba:	bf22      	ittt	cs
 80a63bc:	1ab6      	subcs	r6, r6, r2
 80a63be:	4675      	movcs	r5, lr
 80a63c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a63c4:	085b      	lsrs	r3, r3, #1
 80a63c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a63ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a63ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a63d2:	bf22      	ittt	cs
 80a63d4:	1ab6      	subcs	r6, r6, r2
 80a63d6:	4675      	movcs	r5, lr
 80a63d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a63dc:	085b      	lsrs	r3, r3, #1
 80a63de:	ea4f 0232 	mov.w	r2, r2, rrx
 80a63e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a63e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a63ea:	bf22      	ittt	cs
 80a63ec:	1ab6      	subcs	r6, r6, r2
 80a63ee:	4675      	movcs	r5, lr
 80a63f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a63f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a63f8:	d018      	beq.n	80a642c <__aeabi_ddiv+0x114>
 80a63fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a63fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a6402:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a6406:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a640a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a640e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a6412:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a6416:	d1c0      	bne.n	80a639a <__aeabi_ddiv+0x82>
 80a6418:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a641c:	d10b      	bne.n	80a6436 <__aeabi_ddiv+0x11e>
 80a641e:	ea41 0100 	orr.w	r1, r1, r0
 80a6422:	f04f 0000 	mov.w	r0, #0
 80a6426:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a642a:	e7b6      	b.n	80a639a <__aeabi_ddiv+0x82>
 80a642c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6430:	bf04      	itt	eq
 80a6432:	4301      	orreq	r1, r0
 80a6434:	2000      	moveq	r0, #0
 80a6436:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a643a:	bf88      	it	hi
 80a643c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6440:	f63f aeaf 	bhi.w	80a61a2 <__aeabi_dmul+0xde>
 80a6444:	ebb5 0c03 	subs.w	ip, r5, r3
 80a6448:	bf04      	itt	eq
 80a644a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a644e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a6452:	f150 0000 	adcs.w	r0, r0, #0
 80a6456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a645a:	bd70      	pop	{r4, r5, r6, pc}
 80a645c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a6460:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a6464:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a6468:	bfc2      	ittt	gt
 80a646a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a646e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6472:	bd70      	popgt	{r4, r5, r6, pc}
 80a6474:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6478:	f04f 0e00 	mov.w	lr, #0
 80a647c:	3c01      	subs	r4, #1
 80a647e:	e690      	b.n	80a61a2 <__aeabi_dmul+0xde>
 80a6480:	ea45 0e06 	orr.w	lr, r5, r6
 80a6484:	e68d      	b.n	80a61a2 <__aeabi_dmul+0xde>
 80a6486:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a648a:	ea94 0f0c 	teq	r4, ip
 80a648e:	bf08      	it	eq
 80a6490:	ea95 0f0c 	teqeq	r5, ip
 80a6494:	f43f af3b 	beq.w	80a630e <__aeabi_dmul+0x24a>
 80a6498:	ea94 0f0c 	teq	r4, ip
 80a649c:	d10a      	bne.n	80a64b4 <__aeabi_ddiv+0x19c>
 80a649e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a64a2:	f47f af34 	bne.w	80a630e <__aeabi_dmul+0x24a>
 80a64a6:	ea95 0f0c 	teq	r5, ip
 80a64aa:	f47f af25 	bne.w	80a62f8 <__aeabi_dmul+0x234>
 80a64ae:	4610      	mov	r0, r2
 80a64b0:	4619      	mov	r1, r3
 80a64b2:	e72c      	b.n	80a630e <__aeabi_dmul+0x24a>
 80a64b4:	ea95 0f0c 	teq	r5, ip
 80a64b8:	d106      	bne.n	80a64c8 <__aeabi_ddiv+0x1b0>
 80a64ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a64be:	f43f aefd 	beq.w	80a62bc <__aeabi_dmul+0x1f8>
 80a64c2:	4610      	mov	r0, r2
 80a64c4:	4619      	mov	r1, r3
 80a64c6:	e722      	b.n	80a630e <__aeabi_dmul+0x24a>
 80a64c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a64cc:	bf18      	it	ne
 80a64ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a64d2:	f47f aec5 	bne.w	80a6260 <__aeabi_dmul+0x19c>
 80a64d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a64da:	f47f af0d 	bne.w	80a62f8 <__aeabi_dmul+0x234>
 80a64de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a64e2:	f47f aeeb 	bne.w	80a62bc <__aeabi_dmul+0x1f8>
 80a64e6:	e712      	b.n	80a630e <__aeabi_dmul+0x24a>

080a64e8 <__gedf2>:
 80a64e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a64ec:	e006      	b.n	80a64fc <__cmpdf2+0x4>
 80a64ee:	bf00      	nop

080a64f0 <__ledf2>:
 80a64f0:	f04f 0c01 	mov.w	ip, #1
 80a64f4:	e002      	b.n	80a64fc <__cmpdf2+0x4>
 80a64f6:	bf00      	nop

080a64f8 <__cmpdf2>:
 80a64f8:	f04f 0c01 	mov.w	ip, #1
 80a64fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a650c:	bf18      	it	ne
 80a650e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a6512:	d01b      	beq.n	80a654c <__cmpdf2+0x54>
 80a6514:	b001      	add	sp, #4
 80a6516:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a651a:	bf0c      	ite	eq
 80a651c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a6520:	ea91 0f03 	teqne	r1, r3
 80a6524:	bf02      	ittt	eq
 80a6526:	ea90 0f02 	teqeq	r0, r2
 80a652a:	2000      	moveq	r0, #0
 80a652c:	4770      	bxeq	lr
 80a652e:	f110 0f00 	cmn.w	r0, #0
 80a6532:	ea91 0f03 	teq	r1, r3
 80a6536:	bf58      	it	pl
 80a6538:	4299      	cmppl	r1, r3
 80a653a:	bf08      	it	eq
 80a653c:	4290      	cmpeq	r0, r2
 80a653e:	bf2c      	ite	cs
 80a6540:	17d8      	asrcs	r0, r3, #31
 80a6542:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a6546:	f040 0001 	orr.w	r0, r0, #1
 80a654a:	4770      	bx	lr
 80a654c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6554:	d102      	bne.n	80a655c <__cmpdf2+0x64>
 80a6556:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a655a:	d107      	bne.n	80a656c <__cmpdf2+0x74>
 80a655c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6564:	d1d6      	bne.n	80a6514 <__cmpdf2+0x1c>
 80a6566:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a656a:	d0d3      	beq.n	80a6514 <__cmpdf2+0x1c>
 80a656c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6570:	4770      	bx	lr
 80a6572:	bf00      	nop

080a6574 <__aeabi_cdrcmple>:
 80a6574:	4684      	mov	ip, r0
 80a6576:	4610      	mov	r0, r2
 80a6578:	4662      	mov	r2, ip
 80a657a:	468c      	mov	ip, r1
 80a657c:	4619      	mov	r1, r3
 80a657e:	4663      	mov	r3, ip
 80a6580:	e000      	b.n	80a6584 <__aeabi_cdcmpeq>
 80a6582:	bf00      	nop

080a6584 <__aeabi_cdcmpeq>:
 80a6584:	b501      	push	{r0, lr}
 80a6586:	f7ff ffb7 	bl	80a64f8 <__cmpdf2>
 80a658a:	2800      	cmp	r0, #0
 80a658c:	bf48      	it	mi
 80a658e:	f110 0f00 	cmnmi.w	r0, #0
 80a6592:	bd01      	pop	{r0, pc}

080a6594 <__aeabi_dcmpeq>:
 80a6594:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6598:	f7ff fff4 	bl	80a6584 <__aeabi_cdcmpeq>
 80a659c:	bf0c      	ite	eq
 80a659e:	2001      	moveq	r0, #1
 80a65a0:	2000      	movne	r0, #0
 80a65a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65a6:	bf00      	nop

080a65a8 <__aeabi_dcmplt>:
 80a65a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65ac:	f7ff ffea 	bl	80a6584 <__aeabi_cdcmpeq>
 80a65b0:	bf34      	ite	cc
 80a65b2:	2001      	movcc	r0, #1
 80a65b4:	2000      	movcs	r0, #0
 80a65b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65ba:	bf00      	nop

080a65bc <__aeabi_dcmple>:
 80a65bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65c0:	f7ff ffe0 	bl	80a6584 <__aeabi_cdcmpeq>
 80a65c4:	bf94      	ite	ls
 80a65c6:	2001      	movls	r0, #1
 80a65c8:	2000      	movhi	r0, #0
 80a65ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65ce:	bf00      	nop

080a65d0 <__aeabi_dcmpge>:
 80a65d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65d4:	f7ff ffce 	bl	80a6574 <__aeabi_cdrcmple>
 80a65d8:	bf94      	ite	ls
 80a65da:	2001      	movls	r0, #1
 80a65dc:	2000      	movhi	r0, #0
 80a65de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65e2:	bf00      	nop

080a65e4 <__aeabi_dcmpgt>:
 80a65e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65e8:	f7ff ffc4 	bl	80a6574 <__aeabi_cdrcmple>
 80a65ec:	bf34      	ite	cc
 80a65ee:	2001      	movcc	r0, #1
 80a65f0:	2000      	movcs	r0, #0
 80a65f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65f6:	bf00      	nop

080a65f8 <__aeabi_dcmpun>:
 80a65f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a65fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6600:	d102      	bne.n	80a6608 <__aeabi_dcmpun+0x10>
 80a6602:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a6606:	d10a      	bne.n	80a661e <__aeabi_dcmpun+0x26>
 80a6608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a660c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6610:	d102      	bne.n	80a6618 <__aeabi_dcmpun+0x20>
 80a6612:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a6616:	d102      	bne.n	80a661e <__aeabi_dcmpun+0x26>
 80a6618:	f04f 0000 	mov.w	r0, #0
 80a661c:	4770      	bx	lr
 80a661e:	f04f 0001 	mov.w	r0, #1
 80a6622:	4770      	bx	lr

080a6624 <__aeabi_d2iz>:
 80a6624:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a6628:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a662c:	d215      	bcs.n	80a665a <__aeabi_d2iz+0x36>
 80a662e:	d511      	bpl.n	80a6654 <__aeabi_d2iz+0x30>
 80a6630:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6634:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6638:	d912      	bls.n	80a6660 <__aeabi_d2iz+0x3c>
 80a663a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a663e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6642:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6646:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a664a:	fa23 f002 	lsr.w	r0, r3, r2
 80a664e:	bf18      	it	ne
 80a6650:	4240      	negne	r0, r0
 80a6652:	4770      	bx	lr
 80a6654:	f04f 0000 	mov.w	r0, #0
 80a6658:	4770      	bx	lr
 80a665a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a665e:	d105      	bne.n	80a666c <__aeabi_d2iz+0x48>
 80a6660:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a6664:	bf08      	it	eq
 80a6666:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a666a:	4770      	bx	lr
 80a666c:	f04f 0000 	mov.w	r0, #0
 80a6670:	4770      	bx	lr
 80a6672:	bf00      	nop

080a6674 <__aeabi_d2uiz>:
 80a6674:	004a      	lsls	r2, r1, #1
 80a6676:	d211      	bcs.n	80a669c <__aeabi_d2uiz+0x28>
 80a6678:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a667c:	d211      	bcs.n	80a66a2 <__aeabi_d2uiz+0x2e>
 80a667e:	d50d      	bpl.n	80a669c <__aeabi_d2uiz+0x28>
 80a6680:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6684:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6688:	d40e      	bmi.n	80a66a8 <__aeabi_d2uiz+0x34>
 80a668a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a668e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6692:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6696:	fa23 f002 	lsr.w	r0, r3, r2
 80a669a:	4770      	bx	lr
 80a669c:	f04f 0000 	mov.w	r0, #0
 80a66a0:	4770      	bx	lr
 80a66a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a66a6:	d102      	bne.n	80a66ae <__aeabi_d2uiz+0x3a>
 80a66a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a66ac:	4770      	bx	lr
 80a66ae:	f04f 0000 	mov.w	r0, #0
 80a66b2:	4770      	bx	lr

080a66b4 <__aeabi_frsub>:
 80a66b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a66b8:	e002      	b.n	80a66c0 <__addsf3>
 80a66ba:	bf00      	nop

080a66bc <__aeabi_fsub>:
 80a66bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a66c0 <__addsf3>:
 80a66c0:	0042      	lsls	r2, r0, #1
 80a66c2:	bf1f      	itttt	ne
 80a66c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a66c8:	ea92 0f03 	teqne	r2, r3
 80a66cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a66d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a66d4:	d06a      	beq.n	80a67ac <__addsf3+0xec>
 80a66d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a66da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a66de:	bfc1      	itttt	gt
 80a66e0:	18d2      	addgt	r2, r2, r3
 80a66e2:	4041      	eorgt	r1, r0
 80a66e4:	4048      	eorgt	r0, r1
 80a66e6:	4041      	eorgt	r1, r0
 80a66e8:	bfb8      	it	lt
 80a66ea:	425b      	neglt	r3, r3
 80a66ec:	2b19      	cmp	r3, #25
 80a66ee:	bf88      	it	hi
 80a66f0:	4770      	bxhi	lr
 80a66f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a66f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a66fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a66fe:	bf18      	it	ne
 80a6700:	4240      	negne	r0, r0
 80a6702:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a6706:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a670a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a670e:	bf18      	it	ne
 80a6710:	4249      	negne	r1, r1
 80a6712:	ea92 0f03 	teq	r2, r3
 80a6716:	d03f      	beq.n	80a6798 <__addsf3+0xd8>
 80a6718:	f1a2 0201 	sub.w	r2, r2, #1
 80a671c:	fa41 fc03 	asr.w	ip, r1, r3
 80a6720:	eb10 000c 	adds.w	r0, r0, ip
 80a6724:	f1c3 0320 	rsb	r3, r3, #32
 80a6728:	fa01 f103 	lsl.w	r1, r1, r3
 80a672c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6730:	d502      	bpl.n	80a6738 <__addsf3+0x78>
 80a6732:	4249      	negs	r1, r1
 80a6734:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a6738:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a673c:	d313      	bcc.n	80a6766 <__addsf3+0xa6>
 80a673e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a6742:	d306      	bcc.n	80a6752 <__addsf3+0x92>
 80a6744:	0840      	lsrs	r0, r0, #1
 80a6746:	ea4f 0131 	mov.w	r1, r1, rrx
 80a674a:	f102 0201 	add.w	r2, r2, #1
 80a674e:	2afe      	cmp	r2, #254	; 0xfe
 80a6750:	d251      	bcs.n	80a67f6 <__addsf3+0x136>
 80a6752:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a6756:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a675a:	bf08      	it	eq
 80a675c:	f020 0001 	biceq.w	r0, r0, #1
 80a6760:	ea40 0003 	orr.w	r0, r0, r3
 80a6764:	4770      	bx	lr
 80a6766:	0049      	lsls	r1, r1, #1
 80a6768:	eb40 0000 	adc.w	r0, r0, r0
 80a676c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a6770:	f1a2 0201 	sub.w	r2, r2, #1
 80a6774:	d1ed      	bne.n	80a6752 <__addsf3+0x92>
 80a6776:	fab0 fc80 	clz	ip, r0
 80a677a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a677e:	ebb2 020c 	subs.w	r2, r2, ip
 80a6782:	fa00 f00c 	lsl.w	r0, r0, ip
 80a6786:	bfaa      	itet	ge
 80a6788:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a678c:	4252      	neglt	r2, r2
 80a678e:	4318      	orrge	r0, r3
 80a6790:	bfbc      	itt	lt
 80a6792:	40d0      	lsrlt	r0, r2
 80a6794:	4318      	orrlt	r0, r3
 80a6796:	4770      	bx	lr
 80a6798:	f092 0f00 	teq	r2, #0
 80a679c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a67a0:	bf06      	itte	eq
 80a67a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a67a6:	3201      	addeq	r2, #1
 80a67a8:	3b01      	subne	r3, #1
 80a67aa:	e7b5      	b.n	80a6718 <__addsf3+0x58>
 80a67ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a67b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a67b4:	bf18      	it	ne
 80a67b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a67ba:	d021      	beq.n	80a6800 <__addsf3+0x140>
 80a67bc:	ea92 0f03 	teq	r2, r3
 80a67c0:	d004      	beq.n	80a67cc <__addsf3+0x10c>
 80a67c2:	f092 0f00 	teq	r2, #0
 80a67c6:	bf08      	it	eq
 80a67c8:	4608      	moveq	r0, r1
 80a67ca:	4770      	bx	lr
 80a67cc:	ea90 0f01 	teq	r0, r1
 80a67d0:	bf1c      	itt	ne
 80a67d2:	2000      	movne	r0, #0
 80a67d4:	4770      	bxne	lr
 80a67d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a67da:	d104      	bne.n	80a67e6 <__addsf3+0x126>
 80a67dc:	0040      	lsls	r0, r0, #1
 80a67de:	bf28      	it	cs
 80a67e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a67e4:	4770      	bx	lr
 80a67e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a67ea:	bf3c      	itt	cc
 80a67ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a67f0:	4770      	bxcc	lr
 80a67f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a67f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a67fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a67fe:	4770      	bx	lr
 80a6800:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a6804:	bf16      	itet	ne
 80a6806:	4608      	movne	r0, r1
 80a6808:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a680c:	4601      	movne	r1, r0
 80a680e:	0242      	lsls	r2, r0, #9
 80a6810:	bf06      	itte	eq
 80a6812:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a6816:	ea90 0f01 	teqeq	r0, r1
 80a681a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a681e:	4770      	bx	lr

080a6820 <__aeabi_ui2f>:
 80a6820:	f04f 0300 	mov.w	r3, #0
 80a6824:	e004      	b.n	80a6830 <__aeabi_i2f+0x8>
 80a6826:	bf00      	nop

080a6828 <__aeabi_i2f>:
 80a6828:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a682c:	bf48      	it	mi
 80a682e:	4240      	negmi	r0, r0
 80a6830:	ea5f 0c00 	movs.w	ip, r0
 80a6834:	bf08      	it	eq
 80a6836:	4770      	bxeq	lr
 80a6838:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a683c:	4601      	mov	r1, r0
 80a683e:	f04f 0000 	mov.w	r0, #0
 80a6842:	e01c      	b.n	80a687e <__aeabi_l2f+0x2a>

080a6844 <__aeabi_ul2f>:
 80a6844:	ea50 0201 	orrs.w	r2, r0, r1
 80a6848:	bf08      	it	eq
 80a684a:	4770      	bxeq	lr
 80a684c:	f04f 0300 	mov.w	r3, #0
 80a6850:	e00a      	b.n	80a6868 <__aeabi_l2f+0x14>
 80a6852:	bf00      	nop

080a6854 <__aeabi_l2f>:
 80a6854:	ea50 0201 	orrs.w	r2, r0, r1
 80a6858:	bf08      	it	eq
 80a685a:	4770      	bxeq	lr
 80a685c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6860:	d502      	bpl.n	80a6868 <__aeabi_l2f+0x14>
 80a6862:	4240      	negs	r0, r0
 80a6864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6868:	ea5f 0c01 	movs.w	ip, r1
 80a686c:	bf02      	ittt	eq
 80a686e:	4684      	moveq	ip, r0
 80a6870:	4601      	moveq	r1, r0
 80a6872:	2000      	moveq	r0, #0
 80a6874:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6878:	bf08      	it	eq
 80a687a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a687e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a6882:	fabc f28c 	clz	r2, ip
 80a6886:	3a08      	subs	r2, #8
 80a6888:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a688c:	db10      	blt.n	80a68b0 <__aeabi_l2f+0x5c>
 80a688e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6892:	4463      	add	r3, ip
 80a6894:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6898:	f1c2 0220 	rsb	r2, r2, #32
 80a689c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a68a0:	fa20 f202 	lsr.w	r2, r0, r2
 80a68a4:	eb43 0002 	adc.w	r0, r3, r2
 80a68a8:	bf08      	it	eq
 80a68aa:	f020 0001 	biceq.w	r0, r0, #1
 80a68ae:	4770      	bx	lr
 80a68b0:	f102 0220 	add.w	r2, r2, #32
 80a68b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a68b8:	f1c2 0220 	rsb	r2, r2, #32
 80a68bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a68c0:	fa21 f202 	lsr.w	r2, r1, r2
 80a68c4:	eb43 0002 	adc.w	r0, r3, r2
 80a68c8:	bf08      	it	eq
 80a68ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a68ce:	4770      	bx	lr

080a68d0 <__aeabi_fmul>:
 80a68d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a68d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a68d8:	bf1e      	ittt	ne
 80a68da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a68de:	ea92 0f0c 	teqne	r2, ip
 80a68e2:	ea93 0f0c 	teqne	r3, ip
 80a68e6:	d06f      	beq.n	80a69c8 <__aeabi_fmul+0xf8>
 80a68e8:	441a      	add	r2, r3
 80a68ea:	ea80 0c01 	eor.w	ip, r0, r1
 80a68ee:	0240      	lsls	r0, r0, #9
 80a68f0:	bf18      	it	ne
 80a68f2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a68f6:	d01e      	beq.n	80a6936 <__aeabi_fmul+0x66>
 80a68f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a68fc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a6900:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a6904:	fba0 3101 	umull	r3, r1, r0, r1
 80a6908:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a690c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a6910:	bf3e      	ittt	cc
 80a6912:	0049      	lslcc	r1, r1, #1
 80a6914:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a6918:	005b      	lslcc	r3, r3, #1
 80a691a:	ea40 0001 	orr.w	r0, r0, r1
 80a691e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a6922:	2afd      	cmp	r2, #253	; 0xfd
 80a6924:	d81d      	bhi.n	80a6962 <__aeabi_fmul+0x92>
 80a6926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a692a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a692e:	bf08      	it	eq
 80a6930:	f020 0001 	biceq.w	r0, r0, #1
 80a6934:	4770      	bx	lr
 80a6936:	f090 0f00 	teq	r0, #0
 80a693a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a693e:	bf08      	it	eq
 80a6940:	0249      	lsleq	r1, r1, #9
 80a6942:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6946:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a694a:	3a7f      	subs	r2, #127	; 0x7f
 80a694c:	bfc2      	ittt	gt
 80a694e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6952:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6956:	4770      	bxgt	lr
 80a6958:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a695c:	f04f 0300 	mov.w	r3, #0
 80a6960:	3a01      	subs	r2, #1
 80a6962:	dc5d      	bgt.n	80a6a20 <__aeabi_fmul+0x150>
 80a6964:	f112 0f19 	cmn.w	r2, #25
 80a6968:	bfdc      	itt	le
 80a696a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a696e:	4770      	bxle	lr
 80a6970:	f1c2 0200 	rsb	r2, r2, #0
 80a6974:	0041      	lsls	r1, r0, #1
 80a6976:	fa21 f102 	lsr.w	r1, r1, r2
 80a697a:	f1c2 0220 	rsb	r2, r2, #32
 80a697e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6982:	ea5f 0031 	movs.w	r0, r1, rrx
 80a6986:	f140 0000 	adc.w	r0, r0, #0
 80a698a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a698e:	bf08      	it	eq
 80a6990:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6994:	4770      	bx	lr
 80a6996:	f092 0f00 	teq	r2, #0
 80a699a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a699e:	bf02      	ittt	eq
 80a69a0:	0040      	lsleq	r0, r0, #1
 80a69a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a69a6:	3a01      	subeq	r2, #1
 80a69a8:	d0f9      	beq.n	80a699e <__aeabi_fmul+0xce>
 80a69aa:	ea40 000c 	orr.w	r0, r0, ip
 80a69ae:	f093 0f00 	teq	r3, #0
 80a69b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a69b6:	bf02      	ittt	eq
 80a69b8:	0049      	lsleq	r1, r1, #1
 80a69ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a69be:	3b01      	subeq	r3, #1
 80a69c0:	d0f9      	beq.n	80a69b6 <__aeabi_fmul+0xe6>
 80a69c2:	ea41 010c 	orr.w	r1, r1, ip
 80a69c6:	e78f      	b.n	80a68e8 <__aeabi_fmul+0x18>
 80a69c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a69cc:	ea92 0f0c 	teq	r2, ip
 80a69d0:	bf18      	it	ne
 80a69d2:	ea93 0f0c 	teqne	r3, ip
 80a69d6:	d00a      	beq.n	80a69ee <__aeabi_fmul+0x11e>
 80a69d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a69dc:	bf18      	it	ne
 80a69de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a69e2:	d1d8      	bne.n	80a6996 <__aeabi_fmul+0xc6>
 80a69e4:	ea80 0001 	eor.w	r0, r0, r1
 80a69e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a69ec:	4770      	bx	lr
 80a69ee:	f090 0f00 	teq	r0, #0
 80a69f2:	bf17      	itett	ne
 80a69f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a69f8:	4608      	moveq	r0, r1
 80a69fa:	f091 0f00 	teqne	r1, #0
 80a69fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a6a02:	d014      	beq.n	80a6a2e <__aeabi_fmul+0x15e>
 80a6a04:	ea92 0f0c 	teq	r2, ip
 80a6a08:	d101      	bne.n	80a6a0e <__aeabi_fmul+0x13e>
 80a6a0a:	0242      	lsls	r2, r0, #9
 80a6a0c:	d10f      	bne.n	80a6a2e <__aeabi_fmul+0x15e>
 80a6a0e:	ea93 0f0c 	teq	r3, ip
 80a6a12:	d103      	bne.n	80a6a1c <__aeabi_fmul+0x14c>
 80a6a14:	024b      	lsls	r3, r1, #9
 80a6a16:	bf18      	it	ne
 80a6a18:	4608      	movne	r0, r1
 80a6a1a:	d108      	bne.n	80a6a2e <__aeabi_fmul+0x15e>
 80a6a1c:	ea80 0001 	eor.w	r0, r0, r1
 80a6a20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6a24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6a28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6a2c:	4770      	bx	lr
 80a6a2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6a32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a6a36:	4770      	bx	lr

080a6a38 <__aeabi_fdiv>:
 80a6a38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6a3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6a40:	bf1e      	ittt	ne
 80a6a42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6a46:	ea92 0f0c 	teqne	r2, ip
 80a6a4a:	ea93 0f0c 	teqne	r3, ip
 80a6a4e:	d069      	beq.n	80a6b24 <__aeabi_fdiv+0xec>
 80a6a50:	eba2 0203 	sub.w	r2, r2, r3
 80a6a54:	ea80 0c01 	eor.w	ip, r0, r1
 80a6a58:	0249      	lsls	r1, r1, #9
 80a6a5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6a5e:	d037      	beq.n	80a6ad0 <__aeabi_fdiv+0x98>
 80a6a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a6a64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6a68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6a6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6a70:	428b      	cmp	r3, r1
 80a6a72:	bf38      	it	cc
 80a6a74:	005b      	lslcc	r3, r3, #1
 80a6a76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6a7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a6a7e:	428b      	cmp	r3, r1
 80a6a80:	bf24      	itt	cs
 80a6a82:	1a5b      	subcs	r3, r3, r1
 80a6a84:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6a88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6a8c:	bf24      	itt	cs
 80a6a8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a6a92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6a96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6a9a:	bf24      	itt	cs
 80a6a9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6aa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6aa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6aa8:	bf24      	itt	cs
 80a6aaa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a6aae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6ab2:	011b      	lsls	r3, r3, #4
 80a6ab4:	bf18      	it	ne
 80a6ab6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a6aba:	d1e0      	bne.n	80a6a7e <__aeabi_fdiv+0x46>
 80a6abc:	2afd      	cmp	r2, #253	; 0xfd
 80a6abe:	f63f af50 	bhi.w	80a6962 <__aeabi_fmul+0x92>
 80a6ac2:	428b      	cmp	r3, r1
 80a6ac4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6ac8:	bf08      	it	eq
 80a6aca:	f020 0001 	biceq.w	r0, r0, #1
 80a6ace:	4770      	bx	lr
 80a6ad0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6ad4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6ad8:	327f      	adds	r2, #127	; 0x7f
 80a6ada:	bfc2      	ittt	gt
 80a6adc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6ae0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6ae4:	4770      	bxgt	lr
 80a6ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6aea:	f04f 0300 	mov.w	r3, #0
 80a6aee:	3a01      	subs	r2, #1
 80a6af0:	e737      	b.n	80a6962 <__aeabi_fmul+0x92>
 80a6af2:	f092 0f00 	teq	r2, #0
 80a6af6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6afa:	bf02      	ittt	eq
 80a6afc:	0040      	lsleq	r0, r0, #1
 80a6afe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6b02:	3a01      	subeq	r2, #1
 80a6b04:	d0f9      	beq.n	80a6afa <__aeabi_fdiv+0xc2>
 80a6b06:	ea40 000c 	orr.w	r0, r0, ip
 80a6b0a:	f093 0f00 	teq	r3, #0
 80a6b0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6b12:	bf02      	ittt	eq
 80a6b14:	0049      	lsleq	r1, r1, #1
 80a6b16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6b1a:	3b01      	subeq	r3, #1
 80a6b1c:	d0f9      	beq.n	80a6b12 <__aeabi_fdiv+0xda>
 80a6b1e:	ea41 010c 	orr.w	r1, r1, ip
 80a6b22:	e795      	b.n	80a6a50 <__aeabi_fdiv+0x18>
 80a6b24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6b28:	ea92 0f0c 	teq	r2, ip
 80a6b2c:	d108      	bne.n	80a6b40 <__aeabi_fdiv+0x108>
 80a6b2e:	0242      	lsls	r2, r0, #9
 80a6b30:	f47f af7d 	bne.w	80a6a2e <__aeabi_fmul+0x15e>
 80a6b34:	ea93 0f0c 	teq	r3, ip
 80a6b38:	f47f af70 	bne.w	80a6a1c <__aeabi_fmul+0x14c>
 80a6b3c:	4608      	mov	r0, r1
 80a6b3e:	e776      	b.n	80a6a2e <__aeabi_fmul+0x15e>
 80a6b40:	ea93 0f0c 	teq	r3, ip
 80a6b44:	d104      	bne.n	80a6b50 <__aeabi_fdiv+0x118>
 80a6b46:	024b      	lsls	r3, r1, #9
 80a6b48:	f43f af4c 	beq.w	80a69e4 <__aeabi_fmul+0x114>
 80a6b4c:	4608      	mov	r0, r1
 80a6b4e:	e76e      	b.n	80a6a2e <__aeabi_fmul+0x15e>
 80a6b50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6b54:	bf18      	it	ne
 80a6b56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6b5a:	d1ca      	bne.n	80a6af2 <__aeabi_fdiv+0xba>
 80a6b5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6b60:	f47f af5c 	bne.w	80a6a1c <__aeabi_fmul+0x14c>
 80a6b64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6b68:	f47f af3c 	bne.w	80a69e4 <__aeabi_fmul+0x114>
 80a6b6c:	e75f      	b.n	80a6a2e <__aeabi_fmul+0x15e>
 80a6b6e:	bf00      	nop

080a6b70 <__gesf2>:
 80a6b70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a6b74:	e006      	b.n	80a6b84 <__cmpsf2+0x4>
 80a6b76:	bf00      	nop

080a6b78 <__lesf2>:
 80a6b78:	f04f 0c01 	mov.w	ip, #1
 80a6b7c:	e002      	b.n	80a6b84 <__cmpsf2+0x4>
 80a6b7e:	bf00      	nop

080a6b80 <__cmpsf2>:
 80a6b80:	f04f 0c01 	mov.w	ip, #1
 80a6b84:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6b88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6b94:	bf18      	it	ne
 80a6b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6b9a:	d011      	beq.n	80a6bc0 <__cmpsf2+0x40>
 80a6b9c:	b001      	add	sp, #4
 80a6b9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a6ba2:	bf18      	it	ne
 80a6ba4:	ea90 0f01 	teqne	r0, r1
 80a6ba8:	bf58      	it	pl
 80a6baa:	ebb2 0003 	subspl.w	r0, r2, r3
 80a6bae:	bf88      	it	hi
 80a6bb0:	17c8      	asrhi	r0, r1, #31
 80a6bb2:	bf38      	it	cc
 80a6bb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6bb8:	bf18      	it	ne
 80a6bba:	f040 0001 	orrne.w	r0, r0, #1
 80a6bbe:	4770      	bx	lr
 80a6bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6bc4:	d102      	bne.n	80a6bcc <__cmpsf2+0x4c>
 80a6bc6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a6bca:	d105      	bne.n	80a6bd8 <__cmpsf2+0x58>
 80a6bcc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6bd0:	d1e4      	bne.n	80a6b9c <__cmpsf2+0x1c>
 80a6bd2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a6bd6:	d0e1      	beq.n	80a6b9c <__cmpsf2+0x1c>
 80a6bd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6bdc:	4770      	bx	lr
 80a6bde:	bf00      	nop

080a6be0 <__aeabi_cfrcmple>:
 80a6be0:	4684      	mov	ip, r0
 80a6be2:	4608      	mov	r0, r1
 80a6be4:	4661      	mov	r1, ip
 80a6be6:	e7ff      	b.n	80a6be8 <__aeabi_cfcmpeq>

080a6be8 <__aeabi_cfcmpeq>:
 80a6be8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a6bea:	f7ff ffc9 	bl	80a6b80 <__cmpsf2>
 80a6bee:	2800      	cmp	r0, #0
 80a6bf0:	bf48      	it	mi
 80a6bf2:	f110 0f00 	cmnmi.w	r0, #0
 80a6bf6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a6bf8 <__aeabi_fcmpeq>:
 80a6bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6bfc:	f7ff fff4 	bl	80a6be8 <__aeabi_cfcmpeq>
 80a6c00:	bf0c      	ite	eq
 80a6c02:	2001      	moveq	r0, #1
 80a6c04:	2000      	movne	r0, #0
 80a6c06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6c0a:	bf00      	nop

080a6c0c <__aeabi_fcmplt>:
 80a6c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6c10:	f7ff ffea 	bl	80a6be8 <__aeabi_cfcmpeq>
 80a6c14:	bf34      	ite	cc
 80a6c16:	2001      	movcc	r0, #1
 80a6c18:	2000      	movcs	r0, #0
 80a6c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6c1e:	bf00      	nop

080a6c20 <__aeabi_fcmple>:
 80a6c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6c24:	f7ff ffe0 	bl	80a6be8 <__aeabi_cfcmpeq>
 80a6c28:	bf94      	ite	ls
 80a6c2a:	2001      	movls	r0, #1
 80a6c2c:	2000      	movhi	r0, #0
 80a6c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6c32:	bf00      	nop

080a6c34 <__aeabi_fcmpge>:
 80a6c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6c38:	f7ff ffd2 	bl	80a6be0 <__aeabi_cfrcmple>
 80a6c3c:	bf94      	ite	ls
 80a6c3e:	2001      	movls	r0, #1
 80a6c40:	2000      	movhi	r0, #0
 80a6c42:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6c46:	bf00      	nop

080a6c48 <__aeabi_fcmpgt>:
 80a6c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6c4c:	f7ff ffc8 	bl	80a6be0 <__aeabi_cfrcmple>
 80a6c50:	bf34      	ite	cc
 80a6c52:	2001      	movcc	r0, #1
 80a6c54:	2000      	movcs	r0, #0
 80a6c56:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6c5a:	bf00      	nop

080a6c5c <__aeabi_f2iz>:
 80a6c5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6c60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a6c64:	d30f      	bcc.n	80a6c86 <__aeabi_f2iz+0x2a>
 80a6c66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a6c6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a6c6e:	d90d      	bls.n	80a6c8c <__aeabi_f2iz+0x30>
 80a6c70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a6c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6c78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6c7c:	fa23 f002 	lsr.w	r0, r3, r2
 80a6c80:	bf18      	it	ne
 80a6c82:	4240      	negne	r0, r0
 80a6c84:	4770      	bx	lr
 80a6c86:	f04f 0000 	mov.w	r0, #0
 80a6c8a:	4770      	bx	lr
 80a6c8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6c90:	d101      	bne.n	80a6c96 <__aeabi_f2iz+0x3a>
 80a6c92:	0242      	lsls	r2, r0, #9
 80a6c94:	d105      	bne.n	80a6ca2 <__aeabi_f2iz+0x46>
 80a6c96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6c9a:	bf08      	it	eq
 80a6c9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6ca0:	4770      	bx	lr
 80a6ca2:	f04f 0000 	mov.w	r0, #0
 80a6ca6:	4770      	bx	lr

080a6ca8 <__cxa_atexit>:
 80a6ca8:	b510      	push	{r4, lr}
 80a6caa:	4c05      	ldr	r4, [pc, #20]	; (80a6cc0 <__cxa_atexit+0x18>)
 80a6cac:	4613      	mov	r3, r2
 80a6cae:	b12c      	cbz	r4, 80a6cbc <__cxa_atexit+0x14>
 80a6cb0:	460a      	mov	r2, r1
 80a6cb2:	4601      	mov	r1, r0
 80a6cb4:	2002      	movs	r0, #2
 80a6cb6:	f3af 8000 	nop.w
 80a6cba:	bd10      	pop	{r4, pc}
 80a6cbc:	4620      	mov	r0, r4
 80a6cbe:	bd10      	pop	{r4, pc}
 80a6cc0:	00000000 	.word	0x00000000

080a6cc4 <memcpy>:
 80a6cc4:	b510      	push	{r4, lr}
 80a6cc6:	1e43      	subs	r3, r0, #1
 80a6cc8:	440a      	add	r2, r1
 80a6cca:	4291      	cmp	r1, r2
 80a6ccc:	d004      	beq.n	80a6cd8 <memcpy+0x14>
 80a6cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6cd6:	e7f8      	b.n	80a6cca <memcpy+0x6>
 80a6cd8:	bd10      	pop	{r4, pc}

080a6cda <memset>:
 80a6cda:	4603      	mov	r3, r0
 80a6cdc:	4402      	add	r2, r0
 80a6cde:	4293      	cmp	r3, r2
 80a6ce0:	d002      	beq.n	80a6ce8 <memset+0xe>
 80a6ce2:	f803 1b01 	strb.w	r1, [r3], #1
 80a6ce6:	e7fa      	b.n	80a6cde <memset+0x4>
 80a6ce8:	4770      	bx	lr
	...

080a6cec <srand>:
 80a6cec:	b538      	push	{r3, r4, r5, lr}
 80a6cee:	4b12      	ldr	r3, [pc, #72]	; (80a6d38 <srand+0x4c>)
 80a6cf0:	4605      	mov	r5, r0
 80a6cf2:	681c      	ldr	r4, [r3, #0]
 80a6cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6cf6:	b9d3      	cbnz	r3, 80a6d2e <srand+0x42>
 80a6cf8:	2018      	movs	r0, #24
 80a6cfa:	f7fc fa99 	bl	80a3230 <malloc>
 80a6cfe:	f243 330e 	movw	r3, #13070	; 0x330e
 80a6d02:	63a0      	str	r0, [r4, #56]	; 0x38
 80a6d04:	8003      	strh	r3, [r0, #0]
 80a6d06:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a6d0a:	8043      	strh	r3, [r0, #2]
 80a6d0c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a6d10:	8083      	strh	r3, [r0, #4]
 80a6d12:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a6d16:	80c3      	strh	r3, [r0, #6]
 80a6d18:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a6d1c:	8103      	strh	r3, [r0, #8]
 80a6d1e:	2305      	movs	r3, #5
 80a6d20:	8143      	strh	r3, [r0, #10]
 80a6d22:	230b      	movs	r3, #11
 80a6d24:	8183      	strh	r3, [r0, #12]
 80a6d26:	2201      	movs	r2, #1
 80a6d28:	2300      	movs	r3, #0
 80a6d2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6d30:	2200      	movs	r2, #0
 80a6d32:	611d      	str	r5, [r3, #16]
 80a6d34:	615a      	str	r2, [r3, #20]
 80a6d36:	bd38      	pop	{r3, r4, r5, pc}
 80a6d38:	20000084 	.word	0x20000084

080a6d3c <rand>:
 80a6d3c:	4b19      	ldr	r3, [pc, #100]	; (80a6da4 <rand+0x68>)
 80a6d3e:	b510      	push	{r4, lr}
 80a6d40:	681c      	ldr	r4, [r3, #0]
 80a6d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6d44:	b9d3      	cbnz	r3, 80a6d7c <rand+0x40>
 80a6d46:	2018      	movs	r0, #24
 80a6d48:	f7fc fa72 	bl	80a3230 <malloc>
 80a6d4c:	f243 330e 	movw	r3, #13070	; 0x330e
 80a6d50:	63a0      	str	r0, [r4, #56]	; 0x38
 80a6d52:	8003      	strh	r3, [r0, #0]
 80a6d54:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a6d58:	8043      	strh	r3, [r0, #2]
 80a6d5a:	f241 2334 	movw	r3, #4660	; 0x1234
 80a6d5e:	8083      	strh	r3, [r0, #4]
 80a6d60:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a6d64:	80c3      	strh	r3, [r0, #6]
 80a6d66:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a6d6a:	8103      	strh	r3, [r0, #8]
 80a6d6c:	2305      	movs	r3, #5
 80a6d6e:	8143      	strh	r3, [r0, #10]
 80a6d70:	230b      	movs	r3, #11
 80a6d72:	8183      	strh	r3, [r0, #12]
 80a6d74:	2201      	movs	r2, #1
 80a6d76:	2300      	movs	r3, #0
 80a6d78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6d7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a6d7e:	4c0a      	ldr	r4, [pc, #40]	; (80a6da8 <rand+0x6c>)
 80a6d80:	690b      	ldr	r3, [r1, #16]
 80a6d82:	6948      	ldr	r0, [r1, #20]
 80a6d84:	435c      	muls	r4, r3
 80a6d86:	4a09      	ldr	r2, [pc, #36]	; (80a6dac <rand+0x70>)
 80a6d88:	fb02 4000 	mla	r0, r2, r0, r4
 80a6d8c:	fba3 2302 	umull	r2, r3, r3, r2
 80a6d90:	3201      	adds	r2, #1
 80a6d92:	4403      	add	r3, r0
 80a6d94:	f143 0300 	adc.w	r3, r3, #0
 80a6d98:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a6d9c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a6da0:	bd10      	pop	{r4, pc}
 80a6da2:	bf00      	nop
 80a6da4:	20000084 	.word	0x20000084
 80a6da8:	5851f42d 	.word	0x5851f42d
 80a6dac:	4c957f2d 	.word	0x4c957f2d

080a6db0 <strcmp>:
 80a6db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6db8:	2a01      	cmp	r2, #1
 80a6dba:	bf28      	it	cs
 80a6dbc:	429a      	cmpcs	r2, r3
 80a6dbe:	d0f7      	beq.n	80a6db0 <strcmp>
 80a6dc0:	1ad0      	subs	r0, r2, r3
 80a6dc2:	4770      	bx	lr

080a6dc4 <strlen>:
 80a6dc4:	4603      	mov	r3, r0
 80a6dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6dca:	2a00      	cmp	r2, #0
 80a6dcc:	d1fb      	bne.n	80a6dc6 <strlen+0x2>
 80a6dce:	1a18      	subs	r0, r3, r0
 80a6dd0:	3801      	subs	r0, #1
 80a6dd2:	4770      	bx	lr

080a6dd4 <dynalib_user>:
 80a6dd4:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a6de4:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a6df4:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a6e04:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a6e14:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a6e24:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a6e34:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a6e44:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a6e54:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a6e64:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a6e74:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a6e84:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a6e94:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a6ea4:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a6eb4:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a6ec4:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a6ed4:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a6ee4:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a6ef4:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a6f04:	4853 6600 756c 5878 3a20 0020 6c66 7875     SH.fluxX : .flux
 80a6f14:	2059 203a 6600 756c 5a78 3a20 0020 6f54     Y : .fluxZ : .To
 80a6f24:	6174 206c 6f6d 6576 656d 746e 203a 5300     tal movement: .S
 80a6f34:	6570 6465 6c20 6d69 7469 3a20 0020 5453     peed limit : .ST
 80a6f44:	4c49 004c 4f4d 4556 5400 4f52 4255 454c     ILL.MOVE.TROUBLE
 80a6f54:	4320 554f 544e 3a20 203a 6300 7568 6b6e      COUNT :: .chunk
 80a6f64:	3a20 203a 5600 4c41 3a3a 0020 3a20 203a      :: .VAL:: . :: 
 80a6f74:	0020 494c 5453 4e45 4e49 2d47 2d2d 2d2d      .LISTENING-----
 80a6f84:	2d2d 2d2d 2d2d 2d2d 2d2d 7200 6365 6965     ----------.recei
 80a6f94:	6976 676e 6d20 7365 6173 6567 2d00 2d2d     ving message.---
 80a6fa4:	6e69 7720 6968 656c 2d2d 002d 4150 5352     in while---.PARS
 80a6fb4:	4e49 0047 7473 6c69 006c 6d2f 766f 0065     ING.still./move.
 80a6fc4:	554e 5f4d 494c 494d 2d54 3a2d 5500 2d50     NUM_LIMIT--:.UP-
 80a6fd4:	3a2d 4400 574f 2d4e 3a2d 5300 4e49 2d2d     -:.DOWN--:.SIN--
 80a6fe4:	2d2d 002d 4e45 2044 4946 5352 2054 4f4c     ---.END FIRST LO
 80a6ff4:	504f 4c00 4d49 5449 2d2d 4400 574f 2d4e     OP.LIMIT--.DOWN-
 80a7004:	002d 4553 4f43 444e 4c20 4f4f 0050 6552     -.SECOND LOOP.Re
 80a7014:	0064 7247 6565 006e 6c42 6575 2000               d.Green.Blue.

080a7021 <CSWTCH.57>:
 80a7021:	0020 0000 0040 0000 0060 2c00                     ...@...`..

080a702c <CSWTCH.215>:
 80a702c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a703c:	0050 0000                                   P...

080a7040 <_ZZN17Adafruit_NeoPixel15brightnessToPWMEhE9pwmLevels>:
 80a7040:	0100 0302 0604 0c08 2417 4630 875f ffbe     .........$0F_...
 80a7050:	2d0a 2d2d 002d 0000                         .----...

080a7058 <_ZTV7TwoWire>:
	...
 80a7060:	3279 080a 32c3 080a 329b 080a 327b 080a     y2...2...2..{2..
 80a7070:	32a3 080a 32ab 080a 32b3 080a 32bb 080a     .2...2...2...2..

080a7080 <_ZTV9IPAddress>:
	...
 80a7088:	3337 080a 00b7 080a 00d9 080a 6162 6475     73..........baud
 80a7098:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a70a8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a70b8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a70c8:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a70d8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a70e8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a70f8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a7108:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a7118:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a7128:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a7138:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a7148:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a7158:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a7168:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a7178 <_ZTVN5spark12NetworkClassE>:
	...
 80a7180:	3415 080a 341f 080a 3429 080a 3433 080a     .4...4..)4..34..
 80a7190:	343d 080a 3449 080a 3455 080a 3461 080a     =4..I4..U4..a4..
 80a71a0:	3469 080a 3473 080a 347d 080a 616e 006e     i4..s4..}4..nan.
 80a71b0:	766f 0066 6e69 0066                         ovf.inf.

080a71b8 <_ZTV8SPIClass>:
	...
 80a71c0:	3809 080a 380b 080a                         .8...8..

080a71c8 <_ZL14clock_divisors>:
 80a71c8:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a71d8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a71e8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a71f8:	0000 0000                                   ....

080a71fc <_ZTV3UDP>:
	...
 80a7204:	00b9 080a 00e7 080a 3a63 080a 3b83 080a     ........c:...;..
 80a7214:	3a5b 080a 3a79 080a 3a97 080a 3ab1 080a     [:..y:...:...:..
 80a7224:	3ad3 080a 3b1d 080a 3b3f 080a 3cd5 080a     .:...;..?;...<..
 80a7234:	3be9 080a 3a45 080a 3de5 080a 3c51 080a     .;..E:...=..Q<..
 80a7244:	3d0d 080a 3e13 080a 3bad 080a 3a51 080a     .=...>...;..Q:..
 80a7254:	3cb5 080a 3a57 080a 3ab3 080a fff0 ffff     .<..W:...:......
 80a7264:	0000 0000 3acb 080a                         .....:..

080a726c <_ZTV11USARTSerial>:
	...
 80a7274:	3e4b 080a 3e9b 080a 3ea9 080a 34f9 080a     K>...>...>...4..
 80a7284:	3e5f 080a 3e81 080a 3e6d 080a 3e95 080a     _>...>..m>...>..
 80a7294:	3e4d 080a 3e51 080a                         M>..Q>..

080a729c <_ZTV9USBSerial>:
	...
 80a72a4:	3f51 080a 3fa1 080a 3faf 080a 34f9 080a     Q?...?...?...4..
 80a72b4:	3f8d 080a 3f53 080a 3f69 080a 3f9b 080a     .?..S?..i?...?..
 80a72c4:	3f7f 080a 3f4d 080a                         .?..M?..

080a72cc <_ZTVN5spark9WiFiClassE>:
	...
 80a72d4:	419f 080a 4195 080a 418b 080a 40fd 080a     .A...A...A...@..
 80a72e4:	417f 080a 4173 080a 4167 080a 415f 080a     .A..sA..gA.._A..
 80a72f4:	4155 080a 414b 080a 4107 080a               UA..KA...A..

080a7300 <npio2_hw>:
 80a7300:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80a7310:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80a7320:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80a7330:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80a7340:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80a7350:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80a7360:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80a7370:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080a7380 <two_over_pi>:
 80a7380:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80a7390:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80a73a0:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80a73b0:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80a73c0:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80a73d0:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80a73e0:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80a73f0:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80a7400:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80a7410:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80a7420:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80a7430:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80a7440:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80a7450:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80a7460:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80a7470:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80a7480:	e27b 0060 8c6b 00c0                         {.`.k...

080a7488 <init_jk>:
 80a7488:	0002 0000 0003 0000 0004 0000 0006 0000     ................

080a7498 <PIo2>:
 80a7498:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80a74a8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80a74b8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80a74c8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080a74d8 <__sf_fake_stdin>:
	...

080a74f8 <__sf_fake_stdout>:
	...

080a7518 <__sf_fake_stderr>:
	...
 80a7538:	0043                                        C.

080a753a <link_const_variable_data_end>:
	...

080a753c <link_constructors_location>:
 80a753c:	080a0ad9 	.word	0x080a0ad9
 80a7540:	080a0bb5 	.word	0x080a0bb5
 80a7544:	080a15bd 	.word	0x080a15bd
 80a7548:	080a2995 	.word	0x080a2995
 80a754c:	080a2c15 	.word	0x080a2c15
 80a7550:	080a2dcf 	.word	0x080a2dcf
 80a7554:	080a3405 	.word	0x080a3405
 80a7558:	080a34e5 	.word	0x080a34e5
 80a755c:	080a37ed 	.word	0x080a37ed
 80a7560:	080a3a19 	.word	0x080a3a19
 80a7564:	080a3a31 	.word	0x080a3a31
 80a7568:	080a41a9 	.word	0x080a41a9
 80a756c:	080a43d1 	.word	0x080a43d1
 80a7570:	080a4401 	.word	0x080a4401
 80a7574:	080a4455 	.word	0x080a4455
 80a7578:	080a4519 	.word	0x080a4519
 80a757c:	080a459d 	.word	0x080a459d
 80a7580:	080a4621 	.word	0x080a4621

080a7584 <link_constructors_end>:
	...
