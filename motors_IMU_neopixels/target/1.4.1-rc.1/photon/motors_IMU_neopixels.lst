
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.1-rc.1/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005a54  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5a70  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a5a74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000708  20000084  20000084  00040084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5af8  080a5af8  00035af8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5b20  080a5b20  00035b20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ca819  00000000  00000000  00035b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012ae1  00000000  00000000  0010033d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000190d4  00000000  00000000  00112e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002468  00000000  00000000  0012bef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038d0  00000000  00000000  0012e35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a0f6  00000000  00000000  00131c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c6b9  00000000  00000000  0015bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aaa64  00000000  00000000  001883d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c794  00000000  00000000  00232e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f9cd 	bl	80a53cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f9d2 	bl	80a53e2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a5a74 	.word	0x080a5a74
 80a004c:	20000084 	.word	0x20000084
 80a0050:	20000084 	.word	0x20000084
 80a0054:	2000078c 	.word	0x2000078c
 80a0058:	2000078c 	.word	0x2000078c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 ffd9 	bl	80a4014 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a5a1c 	.word	0x080a5a1c
 80a0084:	080a5a64 	.word	0x080a5a64

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8e8 	b.w	80a025c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa1d 	bl	80a04cc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bf7f 	b.w	80a3f98 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f002 bf85 	b.w	80a2fa8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 bf8b 	b.w	80a2fb8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f003 fbe8 	bl	80a3894 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f003 fd1d 	bl	80a3b04 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a58bc 	.word	0x080a58bc

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f004 f874 	bl	80a41c6 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f004 f86a 	bl	80a41c6 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <_Z15calibrateSensorv>:
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
}

void calibrateSensor(){
 80a00f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a00fc:	f003 fe58 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0100:	4927      	ldr	r1, [pc, #156]	; (80a01a0 <_Z15calibrateSensorv+0xa8>)
 80a0102:	f003 f8db 	bl	80a32bc <_ZN5Print5printEPKc>
  for(int i = 0; i < count; i++){
      imu.readAccel();
 80a0106:	4e27      	ldr	r6, [pc, #156]	; (80a01a4 <_Z15calibrateSensorv+0xac>)

    refX += imu.calcAccel(imu.ax);
 80a0108:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80a01b4 <_Z15calibrateSensorv+0xbc>
    refY += imu.calcAccel(imu.ay);
 80a010c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80a01b8 <_Z15calibrateSensorv+0xc0>
  Serial.println("Calibration finished");
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0110:	2564      	movs	r5, #100	; 0x64
  for(int i = 0; i < count; i++){
      imu.readAccel();
 80a0112:	4824      	ldr	r0, [pc, #144]	; (80a01a4 <_Z15calibrateSensorv+0xac>)
 80a0114:	f000 ffd4 	bl	80a10c0 <_ZN7LSM9DS19readAccelEv>

    refX += imu.calcAccel(imu.ax);
 80a0118:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a011c:	4821      	ldr	r0, [pc, #132]	; (80a01a4 <_Z15calibrateSensorv+0xac>)
 80a011e:	f000 fcb0 	bl	80a0a82 <_ZN7LSM9DS19calcAccelEs>
 80a0122:	4601      	mov	r1, r0
 80a0124:	f8db 0000 	ldr.w	r0, [fp]
 80a0128:	f004 fe4e 	bl	80a4dc8 <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a012c:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
 80a0130:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a0134:	481b      	ldr	r0, [pc, #108]	; (80a01a4 <_Z15calibrateSensorv+0xac>)
 80a0136:	f000 fca4 	bl	80a0a82 <_ZN7LSM9DS19calcAccelEs>
 80a013a:	4601      	mov	r1, r0
 80a013c:	f8da 0000 	ldr.w	r0, [sl]
 80a0140:	f004 fe42 	bl	80a4dc8 <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a0144:	4c18      	ldr	r4, [pc, #96]	; (80a01a8 <_Z15calibrateSensorv+0xb0>)
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a0146:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a014a:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a014e:	4815      	ldr	r0, [pc, #84]	; (80a01a4 <_Z15calibrateSensorv+0xac>)
 80a0150:	f000 fc97 	bl	80a0a82 <_ZN7LSM9DS19calcAccelEs>
 80a0154:	6821      	ldr	r1, [r4, #0]
 80a0156:	f004 fe37 	bl	80a4dc8 <__addsf3>
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a015a:	3d01      	subs	r5, #1
      imu.readAccel();

    refX += imu.calcAccel(imu.ax);
 80a015c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a01b4 <_Z15calibrateSensorv+0xbc>
    refY += imu.calcAccel(imu.ay);
 80a0160:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a01b8 <_Z15calibrateSensorv+0xc0>
    refZ += imu.calcAccel(imu.az);
 80a0164:	4607      	mov	r7, r0
 80a0166:	6020      	str	r0, [r4, #0]
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a0168:	d1d3      	bne.n	80a0112 <_Z15calibrateSensorv+0x1a>

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a016a:	f8d9 0000 	ldr.w	r0, [r9]
 80a016e:	490f      	ldr	r1, [pc, #60]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
 80a0170:	f004 ffe6 	bl	80a5140 <__aeabi_fdiv>
  refY = refY / count;
 80a0174:	490d      	ldr	r1, [pc, #52]	; (80a01ac <_Z15calibrateSensorv+0xb4>)

    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a0176:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / count;
 80a017a:	f8d8 0000 	ldr.w	r0, [r8]
 80a017e:	f004 ffdf 	bl	80a5140 <__aeabi_fdiv>
  refZ = refZ / count; 
 80a0182:	490a      	ldr	r1, [pc, #40]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
 80a0184:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / count; 
 80a0188:	4638      	mov	r0, r7
 80a018a:	f004 ffd9 	bl	80a5140 <__aeabi_fdiv>
 80a018e:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a0190:	f003 fe0e 	bl	80a3db0 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a0194:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
 80a0198:	4905      	ldr	r1, [pc, #20]	; (80a01b0 <_Z15calibrateSensorv+0xb8>)
 80a019a:	f003 b8a8 	b.w	80a32ee <_ZN5Print7printlnEPKc>
 80a019e:	bf00      	nop
 80a01a0:	080a54f0 	.word	0x080a54f0
 80a01a4:	200000b8 	.word	0x200000b8
 80a01a8:	2000017c 	.word	0x2000017c
 80a01ac:	42c80000 	.word	0x42c80000
 80a01b0:	080a5509 	.word	0x080a5509
 80a01b4:	20000174 	.word	0x20000174
 80a01b8:	20000178 	.word	0x20000178

080a01bc <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a01bc:	b538      	push	{r3, r4, r5, lr}


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01be:	4c1e      	ldr	r4, [pc, #120]	; (80a0238 <_Z8setupImuv+0x7c>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a01c0:	231e      	movs	r3, #30
 80a01c2:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01c4:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a01c6:	4a1d      	ldr	r2, [pc, #116]	; (80a023c <_Z8setupImuv+0x80>)
void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01c8:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a01ca:	4b1d      	ldr	r3, [pc, #116]	; (80a0240 <_Z8setupImuv+0x84>)
const int16_t K3 = 446;

void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01cc:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a01ce:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a01d0:	4b1c      	ldr	r3, [pc, #112]	; (80a0244 <_Z8setupImuv+0x88>)
 80a01d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

  if (!imu.begin())
 80a01d6:	4620      	mov	r0, r4
const int16_t K3 = 446;

void setupImu(){


  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01d8:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a01da:	601a      	str	r2, [r3, #0]

  if (!imu.begin())
 80a01dc:	f000 fecd 	bl	80a0f7a <_ZN7LSM9DS15beginEv>
 80a01e0:	b998      	cbnz	r0, 80a020a <_Z8setupImuv+0x4e>
  {
    digitalWrite(D7, HIGH);
 80a01e2:	4629      	mov	r1, r5
 80a01e4:	2007      	movs	r0, #7
 80a01e6:	f003 ff76 	bl	80a40d6 <digitalWrite>
    Serial.println("Failed to communicate with LSM9DS1.");
 80a01ea:	f003 fde1 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a01ee:	4916      	ldr	r1, [pc, #88]	; (80a0248 <_Z8setupImuv+0x8c>)
 80a01f0:	f003 f87d 	bl	80a32ee <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a01f4:	f003 fddc 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a01f8:	4914      	ldr	r1, [pc, #80]	; (80a024c <_Z8setupImuv+0x90>)
 80a01fa:	f003 f878 	bl	80a32ee <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a01fe:	f003 fdd7 	bl	80a3db0 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0202:	4913      	ldr	r1, [pc, #76]	; (80a0250 <_Z8setupImuv+0x94>)
 80a0204:	f003 f873 	bl	80a32ee <_ZN5Print7printlnEPKc>
 80a0208:	e7fe      	b.n	80a0208 <_Z8setupImuv+0x4c>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a020a:	f003 fdd1 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a020e:	4911      	ldr	r1, [pc, #68]	; (80a0254 <_Z8setupImuv+0x98>)
 80a0210:	f003 f86d 	bl	80a32ee <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a0214:	4629      	mov	r1, r5
 80a0216:	4620      	mov	r0, r4
 80a0218:	f000 ffb4 	bl	80a1184 <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a021c:	4629      	mov	r1, r5
 80a021e:	4620      	mov	r0, r4
 80a0220:	f001 f87c 	bl	80a131c <_ZN7LSM9DS112calibrateMagEb>
  calibrateSensor();
 80a0224:	f7ff ff68 	bl	80a00f8 <_Z15calibrateSensorv>
  Serial.println("Calibration finished");
 80a0228:	f003 fdc2 	bl	80a3db0 <_Z16_fetch_usbserialv>
}
 80a022c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
 80a0230:	4909      	ldr	r1, [pc, #36]	; (80a0258 <_Z8setupImuv+0x9c>)
 80a0232:	f003 b85c 	b.w	80a32ee <_ZN5Print7printlnEPKc>
 80a0236:	bf00      	nop
 80a0238:	200000b8 	.word	0x200000b8
 80a023c:	40a00000 	.word	0x40a00000
 80a0240:	20000098 	.word	0x20000098
 80a0244:	2000016c 	.word	0x2000016c
 80a0248:	080a550e 	.word	0x080a550e
 80a024c:	080a5532 	.word	0x080a5532
 80a0250:	080a5547 	.word	0x080a5547
 80a0254:	080a55cf 	.word	0x080a55cf
 80a0258:	080a55e3 	.word	0x080a55e3

080a025c <setup>:
 
Stepper stepper(STEPS, A1, A2, A3, A4);

bool onlyMotor = false;

void setup() {
 80a025c:	b570      	push	{r4, r5, r6, lr}
  pinMode(D7, OUTPUT);
 80a025e:	2101      	movs	r1, #1
 
Stepper stepper(STEPS, A1, A2, A3, A4);

bool onlyMotor = false;

void setup() {
 80a0260:	b096      	sub	sp, #88	; 0x58
  pinMode(D7, OUTPUT);
 80a0262:	2007      	movs	r0, #7
 80a0264:	f003 ff26 	bl	80a40b4 <pinMode>
  digitalWrite(D7, LOW);
 80a0268:	2100      	movs	r1, #0
 80a026a:	2007      	movs	r0, #7
 80a026c:	f003 ff33 	bl	80a40d6 <digitalWrite>
  for(int i = 0; i < PIXEL_COUNT; i++){
    pixels[i] = true;
 80a0270:	4a3c      	ldr	r2, [pc, #240]	; (80a0364 <setup+0x108>)
bool onlyMotor = false;

void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a0272:	2300      	movs	r3, #0
    pixels[i] = true;
 80a0274:	2101      	movs	r1, #1
 80a0276:	5499      	strb	r1, [r3, r2]
bool onlyMotor = false;

void setup() {
  pinMode(D7, OUTPUT);
  digitalWrite(D7, LOW);
  for(int i = 0; i < PIXEL_COUNT; i++){
 80a0278:	3301      	adds	r3, #1
 80a027a:	2b14      	cmp	r3, #20
 80a027c:	d1fb      	bne.n	80a0276 <setup+0x1a>
    pixels[i] = true;
  }

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a027e:	f003 fd97 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0282:	f003 fd7c 	bl	80a3d7e <_ZN9USBSerialcvbEv>
 80a0286:	2800      	cmp	r0, #0
 80a0288:	d0f9      	beq.n	80a027e <setup+0x22>
 80a028a:	4c37      	ldr	r4, [pc, #220]	; (80a0368 <setup+0x10c>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a028c:	2300      	movs	r3, #0
 80a028e:	461a      	mov	r2, r3
 80a0290:	4619      	mov	r1, r3
 80a0292:	6860      	ldr	r0, [r4, #4]
 80a0294:	f002 fe28 	bl	80a2ee8 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0298:	2200      	movs	r2, #0
 80a029a:	4611      	mov	r1, r2
 80a029c:	6860      	ldr	r0, [r4, #4]
 80a029e:	4d32      	ldr	r5, [pc, #200]	; (80a0368 <setup+0x10c>)
 80a02a0:	f002 fe3a 	bl	80a2f18 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a02a4:	2800      	cmp	r0, #0
 80a02a6:	d0f7      	beq.n	80a0298 <setup+0x3c>
  Serial.println("Setup");
 80a02a8:	f003 fd82 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a02ac:	492f      	ldr	r1, [pc, #188]	; (80a036c <setup+0x110>)
 80a02ae:	f003 f81e 	bl	80a32ee <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a02b2:	4b2f      	ldr	r3, [pc, #188]	; (80a0370 <setup+0x114>)
 80a02b4:	2200      	movs	r2, #0
 80a02b6:	8819      	ldrh	r1, [r3, #0]
 80a02b8:	482e      	ldr	r0, [pc, #184]	; (80a0374 <setup+0x118>)
 80a02ba:	f003 fac6 	bl	80a384a <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a02be:	2300      	movs	r3, #0
 80a02c0:	4619      	mov	r1, r3
 80a02c2:	4a2d      	ldr	r2, [pc, #180]	; (80a0378 <setup+0x11c>)
 80a02c4:	6868      	ldr	r0, [r5, #4]
 80a02c6:	f002 fe5f 	bl	80a2f88 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a02ca:	f003 fd71 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a02ce:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02d0:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a02d2:	2240      	movs	r2, #64	; 0x40
 80a02d4:	2100      	movs	r1, #0
 80a02d6:	a806      	add	r0, sp, #24
 80a02d8:	f005 f883 	bl	80a53e2 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02dc:	2340      	movs	r3, #64	; 0x40
 80a02de:	aa06      	add	r2, sp, #24
 80a02e0:	4621      	mov	r1, r4
 80a02e2:	9400      	str	r4, [sp, #0]
 80a02e4:	6868      	ldr	r0, [r5, #4]
 80a02e6:	f002 fe57 	bl	80a2f98 <network_get_hostname>
        return String(buf);
 80a02ea:	a906      	add	r1, sp, #24
 80a02ec:	a802      	add	r0, sp, #8
 80a02ee:	f003 fa19 	bl	80a3724 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02f2:	9902      	ldr	r1, [sp, #8]
 80a02f4:	4630      	mov	r0, r6
 80a02f6:	f002 fffa 	bl	80a32ee <_ZN5Print7printlnEPKc>
 80a02fa:	a802      	add	r0, sp, #8
 80a02fc:	f003 f9cb 	bl	80a3696 <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP()); 
 80a0300:	f003 fd56 	bl	80a3db0 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0304:	4622      	mov	r2, r4
 80a0306:	4621      	mov	r1, r4
 80a0308:	4606      	mov	r6, r0
 80a030a:	6868      	ldr	r0, [r5, #4]
 80a030c:	f002 fde4 	bl	80a2ed8 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0310:	1c81      	adds	r1, r0, #2
 80a0312:	a806      	add	r0, sp, #24
 80a0314:	f002 fef2 	bl	80a30fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0318:	a906      	add	r1, sp, #24
 80a031a:	4630      	mov	r0, r6
 80a031c:	f002 fffb 	bl	80a3316 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a0320:	f003 fd46 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0324:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0328:	f003 fd22 	bl	80a3d70 <_ZN9USBSerial5beginEl>
    iVx = 0;
    iVy = 0;
    iVz = 0;

    if(!onlyMotor)setupImu();
 80a032c:	4b13      	ldr	r3, [pc, #76]	; (80a037c <setup+0x120>)
 80a032e:	781a      	ldrb	r2, [r3, #0]
 80a0330:	461c      	mov	r4, r3
 80a0332:	b90a      	cbnz	r2, 80a0338 <setup+0xdc>
 80a0334:	f7ff ff42 	bl	80a01bc <_Z8setupImuv>
    
  
  if(!onlyMotor)updateTimer.SetCallback(OnTimer);
 80a0338:	7823      	ldrb	r3, [r4, #0]
 80a033a:	b91b      	cbnz	r3, 80a0344 <setup+0xe8>
 80a033c:	4910      	ldr	r1, [pc, #64]	; (80a0380 <setup+0x124>)
 80a033e:	4811      	ldr	r0, [pc, #68]	; (80a0384 <setup+0x128>)
 80a0340:	f000 fb48 	bl	80a09d4 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>

  strip.setBrightness(BRIGHTNESS);
 80a0344:	2132      	movs	r1, #50	; 0x32
 80a0346:	4810      	ldr	r0, [pc, #64]	; (80a0388 <setup+0x12c>)
 80a0348:	f002 f9ba 	bl	80a26c0 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a034c:	480e      	ldr	r0, [pc, #56]	; (80a0388 <setup+0x12c>)
 80a034e:	f001 f875 	bl	80a143c <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0352:	480d      	ldr	r0, [pc, #52]	; (80a0388 <setup+0x12c>)
 80a0354:	f001 f8a8 	bl	80a14a8 <_ZN17Adafruit_NeoPixel4showEv>
  stepper.setSpeed(20);
 80a0358:	2114      	movs	r1, #20
 80a035a:	480c      	ldr	r0, [pc, #48]	; (80a038c <setup+0x130>)
 80a035c:	f002 fa02 	bl	80a2764 <_ZN7Stepper8setSpeedEl>
  }
 80a0360:	b016      	add	sp, #88	; 0x58
 80a0362:	bd70      	pop	{r4, r5, r6, pc}
 80a0364:	20000186 	.word	0x20000186
 80a0368:	20000688 	.word	0x20000688
 80a036c:	080a55f8 	.word	0x080a55f8
 80a0370:	20000000 	.word	0x20000000
 80a0374:	200001a0 	.word	0x200001a0
 80a0378:	080a55fe 	.word	0x080a55fe
 80a037c:	20000094 	.word	0x20000094
 80a0380:	080a083d 	.word	0x080a083d
 80a0384:	20000088 	.word	0x20000088
 80a0388:	200001ec 	.word	0x200001ec
 80a038c:	2000013c 	.word	0x2000013c

080a0390 <_Z12getMouvementv>:

//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


//-----------------------//-----------------------//-----------------------//-----------------------IMU
void getMouvement(){
 80a0390:	b538      	push	{r3, r4, r5, lr}

    if ( imu.accelAvailable() )
 80a0392:	4824      	ldr	r0, [pc, #144]	; (80a0424 <_Z12getMouvementv+0x94>)
 80a0394:	f000 fdc9 	bl	80a0f2a <_ZN7LSM9DS114accelAvailableEv>
 80a0398:	4c22      	ldr	r4, [pc, #136]	; (80a0424 <_Z12getMouvementv+0x94>)
 80a039a:	b110      	cbz	r0, 80a03a2 <_Z12getMouvementv+0x12>
    {
      imu.readAccel();
 80a039c:	4620      	mov	r0, r4
 80a039e:	f000 fe8f 	bl	80a10c0 <_ZN7LSM9DS19readAccelEv>
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a03a2:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a03a6:	481f      	ldr	r0, [pc, #124]	; (80a0424 <_Z12getMouvementv+0x94>)
 80a03a8:	f000 fb6b 	bl	80a0a82 <_ZN7LSM9DS19calcAccelEs>
 80a03ac:	4b1e      	ldr	r3, [pc, #120]	; (80a0428 <_Z12getMouvementv+0x98>)
 80a03ae:	4d1f      	ldr	r5, [pc, #124]	; (80a042c <_Z12getMouvementv+0x9c>)
 80a03b0:	6819      	ldr	r1, [r3, #0]
 80a03b2:	f004 fd07 	bl	80a4dc4 <__aeabi_fsub>
 80a03b6:	f004 ffd5 	bl	80a5364 <__aeabi_f2iz>
 80a03ba:	2800      	cmp	r0, #0
 80a03bc:	bfb8      	it	lt
 80a03be:	4240      	neglt	r0, r0
 80a03c0:	f004 fdb6 	bl	80a4f30 <__aeabi_i2f>
 80a03c4:	6829      	ldr	r1, [r5, #0]
 80a03c6:	f004 fcff 	bl	80a4dc8 <__addsf3>
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03ca:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a03ce:	6028      	str	r0, [r5, #0]
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03d0:	4814      	ldr	r0, [pc, #80]	; (80a0424 <_Z12getMouvementv+0x94>)
 80a03d2:	f000 fb56 	bl	80a0a82 <_ZN7LSM9DS19calcAccelEs>
 80a03d6:	4b16      	ldr	r3, [pc, #88]	; (80a0430 <_Z12getMouvementv+0xa0>)
 80a03d8:	4d16      	ldr	r5, [pc, #88]	; (80a0434 <_Z12getMouvementv+0xa4>)
 80a03da:	6819      	ldr	r1, [r3, #0]
 80a03dc:	f004 fcf2 	bl	80a4dc4 <__aeabi_fsub>
 80a03e0:	f004 ffc0 	bl	80a5364 <__aeabi_f2iz>
 80a03e4:	2800      	cmp	r0, #0
 80a03e6:	bfb8      	it	lt
 80a03e8:	4240      	neglt	r0, r0
 80a03ea:	f004 fda1 	bl	80a4f30 <__aeabi_i2f>
 80a03ee:	6829      	ldr	r1, [r5, #0]
 80a03f0:	f004 fcea 	bl	80a4dc8 <__addsf3>
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a03f4:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    {
      imu.readAccel();
    }

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a03f8:	6028      	str	r0, [r5, #0]
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a03fa:	480a      	ldr	r0, [pc, #40]	; (80a0424 <_Z12getMouvementv+0x94>)
 80a03fc:	f000 fb41 	bl	80a0a82 <_ZN7LSM9DS19calcAccelEs>
 80a0400:	4b0d      	ldr	r3, [pc, #52]	; (80a0438 <_Z12getMouvementv+0xa8>)
 80a0402:	4c0e      	ldr	r4, [pc, #56]	; (80a043c <_Z12getMouvementv+0xac>)
 80a0404:	6819      	ldr	r1, [r3, #0]
 80a0406:	f004 fcdd 	bl	80a4dc4 <__aeabi_fsub>
 80a040a:	f004 ffab 	bl	80a5364 <__aeabi_f2iz>
 80a040e:	2800      	cmp	r0, #0
 80a0410:	bfb8      	it	lt
 80a0412:	4240      	neglt	r0, r0
 80a0414:	f004 fd8c 	bl	80a4f30 <__aeabi_i2f>
 80a0418:	6821      	ldr	r1, [r4, #0]
 80a041a:	f004 fcd5 	bl	80a4dc8 <__addsf3>
 80a041e:	6020      	str	r0, [r4, #0]
 80a0420:	bd38      	pop	{r3, r4, r5, pc}
 80a0422:	bf00      	nop
 80a0424:	200000b8 	.word	0x200000b8
 80a0428:	20000174 	.word	0x20000174
 80a042c:	20000168 	.word	0x20000168
 80a0430:	20000178 	.word	0x20000178
 80a0434:	2000019c 	.word	0x2000019c
 80a0438:	2000017c 	.word	0x2000017c
 80a043c:	20000170 	.word	0x20000170

080a0440 <_Z9printMvmtv>:
}

void printMvmt(){
 80a0440:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Serial.print("fluxX : ");
 80a0442:	f003 fcb5 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0446:	491b      	ldr	r1, [pc, #108]	; (80a04b4 <_Z9printMvmtv+0x74>)
 80a0448:	f002 ff38 	bl	80a32bc <_ZN5Print5printEPKc>
    Serial.println(fluxX);
 80a044c:	f003 fcb0 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0450:	4b19      	ldr	r3, [pc, #100]	; (80a04b8 <_Z9printMvmtv+0x78>)
 80a0452:	4605      	mov	r5, r0
 80a0454:	6818      	ldr	r0, [r3, #0]
 80a0456:	f004 f965 	bl	80a4724 <__aeabi_f2d>
 80a045a:	2402      	movs	r4, #2
 80a045c:	4602      	mov	r2, r0
 80a045e:	460b      	mov	r3, r1
 80a0460:	9400      	str	r4, [sp, #0]
 80a0462:	4628      	mov	r0, r5
 80a0464:	f003 f86a 	bl	80a353c <_ZN5Print7printlnEdi>
    Serial.print("fluxY : ");
 80a0468:	f003 fca2 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a046c:	4913      	ldr	r1, [pc, #76]	; (80a04bc <_Z9printMvmtv+0x7c>)
 80a046e:	f002 ff25 	bl	80a32bc <_ZN5Print5printEPKc>
    Serial.println(fluxY);
 80a0472:	f003 fc9d 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0476:	4b12      	ldr	r3, [pc, #72]	; (80a04c0 <_Z9printMvmtv+0x80>)
 80a0478:	4605      	mov	r5, r0
 80a047a:	6818      	ldr	r0, [r3, #0]
 80a047c:	f004 f952 	bl	80a4724 <__aeabi_f2d>
 80a0480:	9400      	str	r4, [sp, #0]
 80a0482:	4602      	mov	r2, r0
 80a0484:	460b      	mov	r3, r1
 80a0486:	4628      	mov	r0, r5
 80a0488:	f003 f858 	bl	80a353c <_ZN5Print7printlnEdi>
    Serial.print("fluxZ : ");
 80a048c:	f003 fc90 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0490:	490c      	ldr	r1, [pc, #48]	; (80a04c4 <_Z9printMvmtv+0x84>)
 80a0492:	f002 ff13 	bl	80a32bc <_ZN5Print5printEPKc>
    Serial.println(fluxZ);
 80a0496:	f003 fc8b 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a049a:	4b0b      	ldr	r3, [pc, #44]	; (80a04c8 <_Z9printMvmtv+0x88>)
 80a049c:	4605      	mov	r5, r0
 80a049e:	6818      	ldr	r0, [r3, #0]
 80a04a0:	f004 f940 	bl	80a4724 <__aeabi_f2d>
 80a04a4:	9400      	str	r4, [sp, #0]
 80a04a6:	4602      	mov	r2, r0
 80a04a8:	460b      	mov	r3, r1
 80a04aa:	4628      	mov	r0, r5
 80a04ac:	f003 f846 	bl	80a353c <_ZN5Print7printlnEdi>
}
 80a04b0:	b003      	add	sp, #12
 80a04b2:	bd30      	pop	{r4, r5, pc}
 80a04b4:	080a560f 	.word	0x080a560f
 80a04b8:	20000168 	.word	0x20000168
 80a04bc:	080a5618 	.word	0x080a5618
 80a04c0:	2000019c 	.word	0x2000019c
 80a04c4:	080a5621 	.word	0x080a5621
 80a04c8:	20000170 	.word	0x20000170

080a04cc <loop>:
/////---------------------------------------------------------------- SETUP



//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
 80a04cc:	b508      	push	{r3, lr}
    // 	LSM9DS1 --------- Photon
    // 	 SCL -------------- D1 (SCL)
    // 	 SDA -------------- D0 (SDA)
    // 	 VDD ------------- 3.3V
    // 	 GND ------------- GND
    getMouvement();
 80a04ce:	f7ff ff5f 	bl	80a0390 <_Z12getMouvementv>

//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {

testCase(2);
}
 80a04d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // 	 SCL -------------- D1 (SCL)
    // 	 SDA -------------- D0 (SDA)
    // 	 VDD ------------- 3.3V
    // 	 GND ------------- GND
    getMouvement();
    printMvmt();
 80a04d6:	f7ff bfb3 	b.w	80a0440 <_Z9printMvmtv>
	...

080a04dc <_Z10checkSpeedv>:
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
}

boolean checkSpeed(){
 80a04dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  float total = fluxX + fluxY + fluxZ;
 80a04e0:	4e23      	ldr	r6, [pc, #140]	; (80a0570 <_Z10checkSpeedv+0x94>)
 80a04e2:	4d24      	ldr	r5, [pc, #144]	; (80a0574 <_Z10checkSpeedv+0x98>)
 80a04e4:	4c24      	ldr	r4, [pc, #144]	; (80a0578 <_Z10checkSpeedv+0x9c>)
 80a04e6:	6829      	ldr	r1, [r5, #0]
 80a04e8:	6830      	ldr	r0, [r6, #0]
 80a04ea:	f004 fc6d 	bl	80a4dc8 <__addsf3>
 80a04ee:	6821      	ldr	r1, [r4, #0]
 80a04f0:	f004 fc6a 	bl	80a4dc8 <__addsf3>
 80a04f4:	4607      	mov	r7, r0
  Serial.print("Total movement: ");
 80a04f6:	f003 fc5b 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a04fa:	4920      	ldr	r1, [pc, #128]	; (80a057c <_Z10checkSpeedv+0xa0>)
 80a04fc:	f002 fede 	bl	80a32bc <_ZN5Print5printEPKc>
  Serial.println(total);
 80a0500:	f003 fc56 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0504:	4680      	mov	r8, r0
 80a0506:	4638      	mov	r0, r7
 80a0508:	f004 f90c 	bl	80a4724 <__aeabi_f2d>
 80a050c:	2302      	movs	r3, #2
 80a050e:	4602      	mov	r2, r0
 80a0510:	9300      	str	r3, [sp, #0]
 80a0512:	4640      	mov	r0, r8
 80a0514:	460b      	mov	r3, r1
  Serial.print("Speed limit : ");
  Serial.println(speedLimit);
 80a0516:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a0584 <_Z10checkSpeedv+0xa8>
}

boolean checkSpeed(){
  float total = fluxX + fluxY + fluxZ;
  Serial.print("Total movement: ");
  Serial.println(total);
 80a051a:	f003 f80f 	bl	80a353c <_ZN5Print7printlnEdi>
  Serial.print("Speed limit : ");
 80a051e:	f003 fc47 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0522:	4917      	ldr	r1, [pc, #92]	; (80a0580 <_Z10checkSpeedv+0xa4>)
 80a0524:	f002 feca 	bl	80a32bc <_ZN5Print5printEPKc>
  Serial.println(speedLimit);
 80a0528:	f003 fc42 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a052c:	f8d8 1000 	ldr.w	r1, [r8]
 80a0530:	220a      	movs	r2, #10
 80a0532:	f002 ff4a 	bl	80a33ca <_ZN5Print7printlnEii>
  if((total) < speedLimit){
 80a0536:	f8d8 0000 	ldr.w	r0, [r8]
 80a053a:	f004 fcf9 	bl	80a4f30 <__aeabi_i2f>
 80a053e:	4680      	mov	r8, r0
 80a0540:	4601      	mov	r1, r0
 80a0542:	4638      	mov	r0, r7
 80a0544:	f004 fee6 	bl	80a5314 <__aeabi_fcmplt>
 80a0548:	b128      	cbz	r0, 80a0556 <_Z10checkSpeedv+0x7a>
      fluxX = 0;
 80a054a:	2300      	movs	r3, #0
 80a054c:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a054e:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a0550:	6023      	str	r3, [r4, #0]
     total = 0;
    return true;
 80a0552:	2001      	movs	r0, #1
 80a0554:	e009      	b.n	80a056a <_Z10checkSpeedv+0x8e>
  }else if(total >= speedLimit){
 80a0556:	4641      	mov	r1, r8
 80a0558:	4638      	mov	r0, r7
 80a055a:	f004 feef 	bl	80a533c <__aeabi_fcmpge>
 80a055e:	b120      	cbz	r0, 80a056a <_Z10checkSpeedv+0x8e>
      fluxX = 0;
 80a0560:	2300      	movs	r3, #0
 80a0562:	6033      	str	r3, [r6, #0]
     fluxY = 0;
 80a0564:	602b      	str	r3, [r5, #0]
     fluxZ = 0;
 80a0566:	6023      	str	r3, [r4, #0]
     total = 0;
    return false;
 80a0568:	2000      	movs	r0, #0
  }

}
 80a056a:	b002      	add	sp, #8
 80a056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0570:	20000168 	.word	0x20000168
 80a0574:	2000019c 	.word	0x2000019c
 80a0578:	20000170 	.word	0x20000170
 80a057c:	080a562a 	.word	0x080a562a
 80a0580:	080a563b 	.word	0x080a563b
 80a0584:	20000004 	.word	0x20000004

080a0588 <_Z10checkMatchb>:
checkMatch(false);
}

boolean match = true;

void checkMatch(bool alge){
 80a0588:	b510      	push	{r4, lr}
 80a058a:	4c09      	ldr	r4, [pc, #36]	; (80a05b0 <_Z10checkMatchb+0x28>)
  if(alge && checkSpeed()){
 80a058c:	b110      	cbz	r0, 80a0594 <_Z10checkMatchb+0xc>
 80a058e:	f7ff ffa5 	bl	80a04dc <_Z10checkSpeedv>
 80a0592:	b948      	cbnz	r0, 80a05a8 <_Z10checkMatchb+0x20>
    match =  true;
  }else{
    match = false;
 80a0594:	2300      	movs	r3, #0
 80a0596:	7023      	strb	r3, [r4, #0]
  }
    Serial.println(match);
 80a0598:	f003 fc0a 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a059c:	7821      	ldrb	r1, [r4, #0]
 80a059e:	220a      	movs	r2, #10
}
 80a05a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(alge && checkSpeed()){
    match =  true;
  }else{
    match = false;
  }
    Serial.println(match);
 80a05a4:	f002 bf11 	b.w	80a33ca <_ZN5Print7printlnEii>

boolean match = true;

void checkMatch(bool alge){
  if(alge && checkSpeed()){
    match =  true;
 80a05a8:	2301      	movs	r3, #1
 80a05aa:	7023      	strb	r3, [r4, #0]
 80a05ac:	e7f4      	b.n	80a0598 <_Z10checkMatchb+0x10>
 80a05ae:	bf00      	nop
 80a05b0:	20000008 	.word	0x20000008

080a05b4 <_Z5STILLR10OSCMessage>:
          trouble();
        }
      }
}

void STILL(OSCMessage &inMessag){
 80a05b4:	b508      	push	{r3, lr}
  Serial.println("STILL");
 80a05b6:	f003 fbfb 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a05ba:	4904      	ldr	r1, [pc, #16]	; (80a05cc <_Z5STILLR10OSCMessage+0x18>)
 80a05bc:	f002 fe97 	bl	80a32ee <_ZN5Print7printlnEPKc>
checkMatch(true);
}
 80a05c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      }
}

void STILL(OSCMessage &inMessag){
  Serial.println("STILL");
checkMatch(true);
 80a05c4:	2001      	movs	r0, #1
 80a05c6:	f7ff bfdf 	b.w	80a0588 <_Z10checkMatchb>
 80a05ca:	bf00      	nop
 80a05cc:	080a564a 	.word	0x080a564a

080a05d0 <_Z4MOVER10OSCMessage>:
}

void MOVE(OSCMessage &inMessag){
 80a05d0:	b508      	push	{r3, lr}
  Serial.println("MOVE");
 80a05d2:	f003 fbed 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a05d6:	4904      	ldr	r1, [pc, #16]	; (80a05e8 <_Z4MOVER10OSCMessage+0x18>)
 80a05d8:	f002 fe89 	bl	80a32ee <_ZN5Print7printlnEPKc>
checkMatch(false);
}
 80a05dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
checkMatch(true);
}

void MOVE(OSCMessage &inMessag){
  Serial.println("MOVE");
checkMatch(false);
 80a05e0:	2000      	movs	r0, #0
 80a05e2:	f7ff bfd1 	b.w	80a0588 <_Z10checkMatchb>
 80a05e6:	bf00      	nop
 80a05e8:	080a5650 	.word	0x080a5650

080a05ec <_Z7troublev>:

  delay(500);
}

//generates behavior state of coral in distress
void trouble(){
 80a05ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a05f0:	b085      	sub	sp, #20
  int delayIn = 10;
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
 80a05f2:	4e89      	ldr	r6, [pc, #548]	; (80a0818 <_Z7troublev+0x22c>)

  delay(500);
}

//generates behavior state of coral in distress
void trouble(){
 80a05f4:	af00      	add	r7, sp, #0
  int delayIn = 10;
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
 80a05f6:	6833      	ldr	r3, [r6, #0]
 80a05f8:	b95b      	cbnz	r3, 80a0612 <_Z7troublev+0x26>
      chunk = strip.numPixels()/4;
 80a05fa:	4888      	ldr	r0, [pc, #544]	; (80a081c <_Z7troublev+0x230>)
 80a05fc:	f002 f85e 	bl	80a26bc <_ZNK17Adafruit_NeoPixel9numPixelsEv>
      wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a0600:	2132      	movs	r1, #50	; 0x32
  int delayOut = 0;

  int wait=10;

    if(troubleCount == 0){
      chunk = strip.numPixels()/4;
 80a0602:	f3c0 048f 	ubfx	r4, r0, #2, #16
      wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a0606:	4886      	ldr	r0, [pc, #536]	; (80a0820 <_Z7troublev+0x234>)
 80a0608:	f002 f8ac 	bl	80a2764 <_ZN7Stepper8setSpeedEl>
      stepper.step(STEPS);
 80a060c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0610:	e023      	b.n	80a065a <_Z7troublev+0x6e>
  }else if(troubleCount == 1){
 80a0612:	2b01      	cmp	r3, #1
 80a0614:	d108      	bne.n	80a0628 <_Z7troublev+0x3c>
    chunk = strip.numPixels()/3;
 80a0616:	4881      	ldr	r0, [pc, #516]	; (80a081c <_Z7troublev+0x230>)
 80a0618:	f002 f850 	bl	80a26bc <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a061c:	2403      	movs	r4, #3
 80a061e:	fbb0 f0f4 	udiv	r0, r0, r4
         wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
 80a0622:	2132      	movs	r1, #50	; 0x32
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
      stepper.step(STEPS);
  }else if(troubleCount == 1){
    chunk = strip.numPixels()/3;
 80a0624:	b284      	uxth	r4, r0
 80a0626:	e014      	b.n	80a0652 <_Z7troublev+0x66>
         wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
       stepper.step(-STEPS);
  }else if(troubleCount ==2){
 80a0628:	2b02      	cmp	r3, #2
 80a062a:	d10b      	bne.n	80a0644 <_Z7troublev+0x58>
      chunk = strip.numPixels()/2;
 80a062c:	487b      	ldr	r0, [pc, #492]	; (80a081c <_Z7troublev+0x230>)
 80a062e:	f002 f845 	bl	80a26bc <_ZNK17Adafruit_NeoPixel9numPixelsEv>
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(40);
 80a0632:	2128      	movs	r1, #40	; 0x28
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(50);
       stepper.step(-STEPS);
  }else if(troubleCount ==2){
      chunk = strip.numPixels()/2;
 80a0634:	f3c0 044f 	ubfx	r4, r0, #1, #16
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(40);
 80a0638:	4879      	ldr	r0, [pc, #484]	; (80a0820 <_Z7troublev+0x234>)
 80a063a:	f002 f893 	bl	80a2764 <_ZN7Stepper8setSpeedEl>
        stepper.step(STEPS);
 80a063e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0642:	e00a      	b.n	80a065a <_Z7troublev+0x6e>
  }else if(troubleCount == 3){
 80a0644:	2b03      	cmp	r3, #3
 80a0646:	d112      	bne.n	80a066e <_Z7troublev+0x82>
      chunk = strip.numPixels();
 80a0648:	4874      	ldr	r0, [pc, #464]	; (80a081c <_Z7troublev+0x230>)
 80a064a:	f002 f837 	bl	80a26bc <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a064e:	4604      	mov	r4, r0
           wait = 50;
      delayIn = 5;
      delayOut = 5;
      stepper.setSpeed(30);
 80a0650:	211e      	movs	r1, #30
 80a0652:	4873      	ldr	r0, [pc, #460]	; (80a0820 <_Z7troublev+0x234>)
 80a0654:	f002 f886 	bl	80a2764 <_ZN7Stepper8setSpeedEl>
       stepper.step(-STEPS);
 80a0658:	4972      	ldr	r1, [pc, #456]	; (80a0824 <_Z7troublev+0x238>)
 80a065a:	4871      	ldr	r0, [pc, #452]	; (80a0820 <_Z7troublev+0x234>)
        stepper.step(STEPS);
  }else if(troubleCount == 3){
      chunk = strip.numPixels();
           wait = 50;
      delayIn = 5;
      delayOut = 5;
 80a065c:	f04f 0905 	mov.w	r9, #5
      stepper.setSpeed(30);
       stepper.step(-STEPS);
 80a0660:	f002 f950 	bl	80a2904 <_ZN7Stepper4stepEi>
      delayOut = 5;
      stepper.setSpeed(40);
        stepper.step(STEPS);
  }else if(troubleCount == 3){
      chunk = strip.numPixels();
           wait = 50;
 80a0664:	f04f 0a32 	mov.w	sl, #50	; 0x32
      delayIn = 5;
 80a0668:	f8c7 900c 	str.w	r9, [r7, #12]
 80a066c:	e006      	b.n	80a067c <_Z7troublev+0x90>
//how many LED to bleach in the LED strip
  int chunk = 0;
  

  int delayIn = 10;
  int delayOut = 0;
 80a066e:	f04f 0900 	mov.w	r9, #0
  bool complete = false;
  bool checkNum = true;
  int val = -1;

//how many LED to bleach in the LED strip
  int chunk = 0;
 80a0672:	464c      	mov	r4, r9
  

  int delayIn = 10;
  int delayOut = 0;

  int wait=10;
 80a0674:	f04f 0a0a 	mov.w	sl, #10

//how many LED to bleach in the LED strip
  int chunk = 0;
  

  int delayIn = 10;
 80a0678:	f8c7 a00c 	str.w	sl, [r7, #12]
      stepper.setSpeed(30);
       stepper.step(-STEPS);

  }

int randomNumList[chunk];
 80a067c:	00a3      	lsls	r3, r4, #2
 80a067e:	f103 020a 	add.w	r2, r3, #10
 80a0682:	f022 0207 	bic.w	r2, r2, #7
 80a0686:	ebad 0d02 	sub.w	sp, sp, r2
 80a068a:	46e8      	mov	r8, sp
 80a068c:	466a      	mov	r2, sp
 80a068e:	446b      	add	r3, sp
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
    randomNumList[k] = -1;
 80a0690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a0694:	4293      	cmp	r3, r2
 80a0696:	d002      	beq.n	80a069e <_Z7troublev+0xb2>
    randomNumList[k] = -1;
 80a0698:	f842 1b04 	str.w	r1, [r2], #4

int randomNumList[chunk];
  while(!complete){

     //clean array
  for(int k = 0; k < chunk; k++){
 80a069c:	e7fa      	b.n	80a0694 <_Z7troublev+0xa8>
    randomNumList[k] = -1;
  }

    Serial.print("TROUBLE COUNT :: ");
 80a069e:	f003 fb87 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a06a2:	4961      	ldr	r1, [pc, #388]	; (80a0828 <_Z7troublev+0x23c>)
 80a06a4:	f002 fe0a 	bl	80a32bc <_ZN5Print5printEPKc>
    Serial.println(troubleCount);
 80a06a8:	f003 fb82 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a06ac:	220a      	movs	r2, #10
 80a06ae:	6831      	ldr	r1, [r6, #0]
 80a06b0:	f002 fe8b 	bl	80a33ca <_ZN5Print7printlnEii>
 80a06b4:	2300      	movs	r3, #0
 80a06b6:	60bb      	str	r3, [r7, #8]
 80a06b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

    for(uint16_t i=0; i<chunk; i++) {
 80a06bc:	f8b7 b008 	ldrh.w	fp, [r7, #8]
 80a06c0:	455c      	cmp	r4, fp
 80a06c2:	dd5f      	ble.n	80a0784 <_Z7troublev+0x198>
      getMouvement();
 80a06c4:	f7ff fe64 	bl	80a0390 <_Z12getMouvementv>
       Serial.print("chunk :: ");
 80a06c8:	f003 fb72 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a06cc:	4957      	ldr	r1, [pc, #348]	; (80a082c <_Z7troublev+0x240>)
 80a06ce:	f002 fdf5 	bl	80a32bc <_ZN5Print5printEPKc>
    Serial.println(chunk);
 80a06d2:	f003 fb6d 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a06d6:	220a      	movs	r2, #10
 80a06d8:	4621      	mov	r1, r4
 80a06da:	f002 fe76 	bl	80a33ca <_ZN5Print7printlnEii>
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
 80a06de:	f004 feb1 	bl	80a5444 <rand>
 80a06e2:	4605      	mov	r5, r0
 80a06e4:	484d      	ldr	r0, [pc, #308]	; (80a081c <_Z7troublev+0x230>)
 80a06e6:	f001 ffe9 	bl	80a26bc <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a06ea:	fb95 f3f0 	sdiv	r3, r5, r0
 80a06ee:	fb03 5510 	mls	r5, r3, r0, r5
        Serial.print("VAL:: ");
 80a06f2:	f003 fb5d 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a06f6:	494e      	ldr	r1, [pc, #312]	; (80a0830 <_Z7troublev+0x244>)
 80a06f8:	f002 fde0 	bl	80a32bc <_ZN5Print5printEPKc>
        Serial.println(val);
 80a06fc:	f003 fb58 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0700:	220a      	movs	r2, #10
 80a0702:	4629      	mov	r1, r5
 80a0704:	f002 fe61 	bl	80a33ca <_ZN5Print7printlnEii>
        for(int k = 0; k < chunk; k++){
 80a0708:	2200      	movs	r2, #0
    for(uint16_t i=0; i<chunk; i++) {
      getMouvement();
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
        checkNum = false;
 80a070a:	4613      	mov	r3, r2
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
          if(randomNumList[k] == val){
 80a070c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a0710:	3201      	adds	r2, #1
          if(randomNumList[k] == val){
            checkNum = true;
 80a0712:	428d      	cmp	r5, r1
 80a0714:	bf08      	it	eq
 80a0716:	2301      	moveq	r3, #1
     while(checkNum){
        checkNum = false;
        val = (rand() % ((strip.numPixels())));
        Serial.print("VAL:: ");
        Serial.println(val);
        for(int k = 0; k < chunk; k++){
 80a0718:	4294      	cmp	r4, r2
 80a071a:	dcf7      	bgt.n	80a070c <_Z7troublev+0x120>

    for(uint16_t i=0; i<chunk; i++) {
      getMouvement();
       Serial.print("chunk :: ");
    Serial.println(chunk);
     while(checkNum){
 80a071c:	2b00      	cmp	r3, #0
 80a071e:	d1de      	bne.n	80a06de <_Z7troublev+0xf2>
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
 80a0720:	b2da      	uxtb	r2, r3
 80a0722:	21ff      	movs	r1, #255	; 0xff
 80a0724:	4610      	mov	r0, r2
 80a0726:	607b      	str	r3, [r7, #4]
 80a0728:	f001 ffc3 	bl	80a26b2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a072c:	b2a9      	uxth	r1, r5
 80a072e:	4602      	mov	r2, r0
 80a0730:	483a      	ldr	r0, [pc, #232]	; (80a081c <_Z7troublev+0x230>)
 80a0732:	f001 ff73 	bl	80a261c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          randomNumList[i] = val;
          delay(delayOut);
 80a0736:	4648      	mov	r0, r9
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
 80a0738:	f848 502b 	str.w	r5, [r8, fp, lsl #2]
          delay(delayOut);
 80a073c:	f002 fc4c 	bl	80a2fd8 <delay>
          pixels[val] = false;
 80a0740:	4b3c      	ldr	r3, [pc, #240]	; (80a0834 <_Z7troublev+0x248>)
 80a0742:	2200      	movs	r2, #0
          strip.show();
 80a0744:	4835      	ldr	r0, [pc, #212]	; (80a081c <_Z7troublev+0x230>)
        checkNum = true;
      for(int k = 0; k <255 ; k++){
          strip.setPixelColor(val, strip.Color(k, 255, k));
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
 80a0746:	555a      	strb	r2, [r3, r5]
          strip.show();
 80a0748:	f000 feae 	bl	80a14a8 <_ZN17Adafruit_NeoPixel4showEv>
            checkNum = true;
          }
        }
      }
        checkNum = true;
      for(int k = 0; k <255 ; k++){
 80a074c:	687b      	ldr	r3, [r7, #4]
 80a074e:	3301      	adds	r3, #1
 80a0750:	2bff      	cmp	r3, #255	; 0xff
 80a0752:	d1e5      	bne.n	80a0720 <_Z7troublev+0x134>
          randomNumList[i] = val;
          delay(delayOut);
          pixels[val] = false;
          strip.show();
      }
    delay(wait);
 80a0754:	4650      	mov	r0, sl
 80a0756:	f002 fc3f 	bl	80a2fd8 <delay>

    Serial.print(i);
 80a075a:	f003 fb29 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a075e:	220a      	movs	r2, #10
 80a0760:	4659      	mov	r1, fp
 80a0762:	f002 fe30 	bl	80a33c6 <_ZN5Print5printEii>
       Serial.print(" ::  ");
 80a0766:	f003 fb23 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a076a:	4933      	ldr	r1, [pc, #204]	; (80a0838 <_Z7troublev+0x24c>)
 80a076c:	f002 fda6 	bl	80a32bc <_ZN5Print5printEPKc>
       Serial.println(val);
 80a0770:	f003 fb1e 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0774:	220a      	movs	r2, #10
 80a0776:	4629      	mov	r1, r5
 80a0778:	f002 fe27 	bl	80a33ca <_ZN5Print7printlnEii>
 80a077c:	68bb      	ldr	r3, [r7, #8]
 80a077e:	3301      	adds	r3, #1
 80a0780:	60bb      	str	r3, [r7, #8]
  }

    Serial.print("TROUBLE COUNT :: ");
    Serial.println(troubleCount);

    for(uint16_t i=0; i<chunk; i++) {
 80a0782:	e79b      	b.n	80a06bc <_Z7troublev+0xd0>
    Serial.print(i);
       Serial.print(" ::  ");
       Serial.println(val);
    }

if(troubleCount==3){
 80a0784:	6833      	ldr	r3, [r6, #0]
 80a0786:	2b03      	cmp	r3, #3
 80a0788:	d106      	bne.n	80a0798 <_Z7troublev+0x1ac>
  delay(5000);
 80a078a:	f241 3088 	movw	r0, #5000	; 0x1388
 80a078e:	f002 fc23 	bl	80a2fd8 <delay>
  troubleCount = 0; 
 80a0792:	4b21      	ldr	r3, [pc, #132]	; (80a0818 <_Z7troublev+0x22c>)
 80a0794:	2200      	movs	r2, #0
 80a0796:	601a      	str	r2, [r3, #0]
}

    if(checkSpeed()){
 80a0798:	f7ff fea0 	bl	80a04dc <_Z10checkSpeedv>
 80a079c:	b3a0      	cbz	r0, 80a0808 <_Z7troublev+0x21c>
      stepper.setSpeed(50);
 80a079e:	2132      	movs	r1, #50	; 0x32
 80a07a0:	481f      	ldr	r0, [pc, #124]	; (80a0820 <_Z7troublev+0x234>)
 80a07a2:	f001 ffdf 	bl	80a2764 <_ZN7Stepper8setSpeedEl>
        stepper.step(STEPS);
 80a07a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a07aa:	481d      	ldr	r0, [pc, #116]	; (80a0820 <_Z7troublev+0x234>)
 80a07ac:	f002 f8aa 	bl	80a2904 <_ZN7Stepper4stepEi>
 80a07b0:	f04f 0a00 	mov.w	sl, #0

      for(uint16_t i=0; i<chunk; i++) {
 80a07b4:	fa1f fb8a 	uxth.w	fp, sl
 80a07b8:	455c      	cmp	r4, fp
 80a07ba:	dd22      	ble.n	80a0802 <_Z7troublev+0x216>
 80a07bc:	f04f 09ff 	mov.w	r9, #255	; 0xff
          for(int k = 255; k >=0 ; k--){
              strip.setPixelColor(randomNumList[i], strip.Color(k, 255, k));
 80a07c0:	fa5f f289 	uxtb.w	r2, r9
 80a07c4:	f838 302b 	ldrh.w	r3, [r8, fp, lsl #2]
 80a07c8:	21ff      	movs	r1, #255	; 0xff
 80a07ca:	4610      	mov	r0, r2
 80a07cc:	60bb      	str	r3, [r7, #8]
 80a07ce:	f001 ff70 	bl	80a26b2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a07d2:	68bb      	ldr	r3, [r7, #8]
 80a07d4:	4602      	mov	r2, r0
 80a07d6:	4619      	mov	r1, r3
 80a07d8:	4810      	ldr	r0, [pc, #64]	; (80a081c <_Z7troublev+0x230>)
 80a07da:	f001 ff1f 	bl	80a261c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
              delay(10);
 80a07de:	200a      	movs	r0, #10
 80a07e0:	f002 fbfa 	bl	80a2fd8 <delay>
strip.show();
 80a07e4:	480d      	ldr	r0, [pc, #52]	; (80a081c <_Z7troublev+0x230>)
 80a07e6:	f000 fe5f 	bl	80a14a8 <_ZN17Adafruit_NeoPixel4showEv>
    if(checkSpeed()){
      stepper.setSpeed(50);
        stepper.step(STEPS);

      for(uint16_t i=0; i<chunk; i++) {
          for(int k = 255; k >=0 ; k--){
 80a07ea:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80a07ee:	d2e7      	bcs.n	80a07c0 <_Z7troublev+0x1d4>
    //           strip.setPixelColor(randomNumList[i], curr_r, curr_g, curr_b);
    //           delay(10);


    //   }
              pixels[val] = true;
 80a07f0:	4a10      	ldr	r2, [pc, #64]	; (80a0834 <_Z7troublev+0x248>)
 80a07f2:	2301      	movs	r3, #1
              strip.show();
 80a07f4:	4809      	ldr	r0, [pc, #36]	; (80a081c <_Z7troublev+0x230>)
    //           strip.setPixelColor(randomNumList[i], curr_r, curr_g, curr_b);
    //           delay(10);


    //   }
              pixels[val] = true;
 80a07f6:	5553      	strb	r3, [r2, r5]
 80a07f8:	f10a 0a01 	add.w	sl, sl, #1
              strip.show();
 80a07fc:	f000 fe54 	bl	80a14a8 <_ZN17Adafruit_NeoPixel4showEv>

    if(checkSpeed()){
      stepper.setSpeed(50);
        stepper.step(STEPS);

      for(uint16_t i=0; i<chunk; i++) {
 80a0800:	e7d8      	b.n	80a07b4 <_Z7troublev+0x1c8>

    //   }
              pixels[val] = true;
              strip.show();
          }
        delay(delayIn);
 80a0802:	68f8      	ldr	r0, [r7, #12]
 80a0804:	f002 fbe8 	bl	80a2fd8 <delay>
        break;
      }
    }

  complete= true;
  troubleCount++;
 80a0808:	6833      	ldr	r3, [r6, #0]
  }

//   if(complete){
// healthyWave(10,10,1);
//   }
}
 80a080a:	3714      	adds	r7, #20
        break;
      }
    }

  complete= true;
  troubleCount++;
 80a080c:	3301      	adds	r3, #1
 80a080e:	6033      	str	r3, [r6, #0]
  }

//   if(complete){
// healthyWave(10,10,1);
//   }
}
 80a0810:	46bd      	mov	sp, r7
 80a0812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0816:	bf00      	nop
 80a0818:	200000b4 	.word	0x200000b4
 80a081c:	200001ec 	.word	0x200001ec
 80a0820:	2000013c 	.word	0x2000013c
 80a0824:	fffffed4 	.word	0xfffffed4
 80a0828:	080a5655 	.word	0x080a5655
 80a082c:	080a5667 	.word	0x080a5667
 80a0830:	080a5671 	.word	0x080a5671
 80a0834:	20000186 	.word	0x20000186
 80a0838:	080a5678 	.word	0x080a5678

080a083c <_Z7OnTimerv>:


//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a083c:	b530      	push	{r4, r5, lr}
 80a083e:	b097      	sub	sp, #92	; 0x5c
    int size = 0;
     OSCMessage inMessage;
 80a0840:	a801      	add	r0, sp, #4
 80a0842:	f002 f8ad 	bl	80a29a0 <_ZN10OSCMessageC1Ev>
      
      Serial.println("LISTENING---------------");
 80a0846:	f003 fab3 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a084a:	4923      	ldr	r1, [pc, #140]	; (80a08d8 <_Z7OnTimerv+0x9c>)
 80a084c:	f002 fd4f 	bl	80a32ee <_ZN5Print7printlnEPKc>
       
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
 80a0850:	2100      	movs	r1, #0
 80a0852:	4822      	ldr	r0, [pc, #136]	; (80a08dc <_Z7OnTimerv+0xa0>)
 80a0854:	f003 f999 	bl	80a3b8a <_ZN3UDP11parsePacketEm>
 80a0858:	1e04      	subs	r4, r0, #0
 80a085a:	dd32      	ble.n	80a08c2 <_Z7OnTimerv+0x86>
        Serial.println("receiving message");
 80a085c:	f003 faa8 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0860:	491f      	ldr	r1, [pc, #124]	; (80a08e0 <_Z7OnTimerv+0xa4>)
 80a0862:	f002 fd44 	bl	80a32ee <_ZN5Print7printlnEPKc>

        char c;
        while(size--){
 80a0866:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a086a:	d312      	bcc.n	80a0892 <_Z7OnTimerv+0x56>
          Serial.println("---in while---");
 80a086c:	f003 faa0 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0870:	491c      	ldr	r1, [pc, #112]	; (80a08e4 <_Z7OnTimerv+0xa8>)
 80a0872:	f002 fd3c 	bl	80a32ee <_ZN5Print7printlnEPKc>
          c=udp.read();
 80a0876:	4819      	ldr	r0, [pc, #100]	; (80a08dc <_Z7OnTimerv+0xa0>)
 80a0878:	f002 ffba 	bl	80a37f0 <_ZN3UDP4readEv>
 80a087c:	b2c5      	uxtb	r5, r0
          Serial.println(c);
 80a087e:	f003 fa97 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a0882:	4629      	mov	r1, r5
 80a0884:	f002 fd3d 	bl	80a3302 <_ZN5Print7printlnEc>
          inMessage.fill(c);
 80a0888:	4629      	mov	r1, r5
 80a088a:	a801      	add	r0, sp, #4
 80a088c:	f002 f8c3 	bl	80a2a16 <_ZN10OSCMessage4fillEc>
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
        Serial.println("receiving message");

        char c;
        while(size--){
 80a0890:	e7e9      	b.n	80a0866 <_Z7OnTimerv+0x2a>
          Serial.println(c);
          inMessage.fill(c);
          
        }

        if(inMessage.parse()){
 80a0892:	a801      	add	r0, sp, #4
 80a0894:	f002 f8ce 	bl	80a2a34 <_ZN10OSCMessage5parseEv>
 80a0898:	b170      	cbz	r0, 80a08b8 <_Z7OnTimerv+0x7c>

        Serial.println("PARSING");
 80a089a:	f003 fa89 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a089e:	4912      	ldr	r1, [pc, #72]	; (80a08e8 <_Z7OnTimerv+0xac>)
 80a08a0:	f002 fd25 	bl	80a32ee <_ZN5Print7printlnEPKc>

          inMessage.route("still", STILL);
 80a08a4:	4a11      	ldr	r2, [pc, #68]	; (80a08ec <_Z7OnTimerv+0xb0>)
 80a08a6:	4912      	ldr	r1, [pc, #72]	; (80a08f0 <_Z7OnTimerv+0xb4>)
 80a08a8:	a801      	add	r0, sp, #4
 80a08aa:	f002 f93f 	bl	80a2b2c <_ZN10OSCMessage5routeEPKcPFvRS_E>
          inMessage.route("/move", MOVE);
 80a08ae:	4a11      	ldr	r2, [pc, #68]	; (80a08f4 <_Z7OnTimerv+0xb8>)
 80a08b0:	4911      	ldr	r1, [pc, #68]	; (80a08f8 <_Z7OnTimerv+0xbc>)
 80a08b2:	a801      	add	r0, sp, #4
 80a08b4:	f002 f93a 	bl	80a2b2c <_ZN10OSCMessage5routeEPKcPFvRS_E>
        }
        Serial.println();
 80a08b8:	f003 fa7a 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a08bc:	f002 fd0b 	bl	80a32d6 <_ZN5Print7printlnEv>
 80a08c0:	e004      	b.n	80a08cc <_Z7OnTimerv+0x90>
      }else{
        if(!checkSpeed()){
 80a08c2:	f7ff fe0b 	bl	80a04dc <_Z10checkSpeedv>
 80a08c6:	b908      	cbnz	r0, 80a08cc <_Z7OnTimerv+0x90>
          trouble();
 80a08c8:	f7ff fe90 	bl	80a05ec <_Z7troublev>
//-----------------------//-----------------------//-----------------------//-----------------------COMMUNICATION


void OnTimer(void) {  //Handler for the timer, will be called automatically
    int size = 0;
     OSCMessage inMessage;
 80a08cc:	a801      	add	r0, sp, #4
 80a08ce:	f002 f885 	bl	80a29dc <_ZN10OSCMessageD1Ev>
      }else{
        if(!checkSpeed()){
          trouble();
        }
      }
}
 80a08d2:	b017      	add	sp, #92	; 0x5c
 80a08d4:	bd30      	pop	{r4, r5, pc}
 80a08d6:	bf00      	nop
 80a08d8:	080a567e 	.word	0x080a567e
 80a08dc:	200001a0 	.word	0x200001a0
 80a08e0:	080a5697 	.word	0x080a5697
 80a08e4:	080a56a9 	.word	0x080a56a9
 80a08e8:	080a56b8 	.word	0x080a56b8
 80a08ec:	080a05b5 	.word	0x080a05b5
 80a08f0:	080a56c0 	.word	0x080a56c0
 80a08f4:	080a05d1 	.word	0x080a05d1
 80a08f8:	080a56c6 	.word	0x080a56c6

080a08fc <_GLOBAL__sub_I_SystemMode>:
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}
 80a08fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a08fe:	f002 f945 	bl	80a2b8c <HAL_Pin_Map>
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"
#include "simple-OSC.h"

SYSTEM_THREAD(ENABLED);
 80a0902:	2100      	movs	r1, #0
 80a0904:	2001      	movs	r0, #1
 80a0906:	f002 fac3 	bl	80a2e90 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a090a:	4b1f      	ldr	r3, [pc, #124]	; (80a0988 <_GLOBAL__sub_I_SystemMode+0x8c>)
 80a090c:	2200      	movs	r2, #0
 80a090e:	701a      	strb	r2, [r3, #0]
 80a0910:	805a      	strh	r2, [r3, #2]
 80a0912:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0916:	4d1d      	ldr	r5, [pc, #116]	; (80a098c <_GLOBAL__sub_I_SystemMode+0x90>)
 80a0918:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a091a:	2002      	movs	r0, #2
 80a091c:	f002 faa8 	bl	80a2e70 <set_system_mode>
 80a0920:	4c1b      	ldr	r4, [pc, #108]	; (80a0990 <_GLOBAL__sub_I_SystemMode+0x94>)
 80a0922:	4628      	mov	r0, r5
 80a0924:	f002 fbdc 	bl	80a30e0 <_ZN9IPAddressC1Ev>
 80a0928:	4628      	mov	r0, r5
int port;
UDP udp;
 80a092a:	4d1a      	ldr	r5, [pc, #104]	; (80a0994 <_GLOBAL__sub_I_SystemMode+0x98>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a092c:	4622      	mov	r2, r4
 80a092e:	491a      	ldr	r1, [pc, #104]	; (80a0998 <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a0930:	f003 fc44 	bl	80a41bc <__aeabi_atexit>
int port;
UDP udp;
 80a0934:	4628      	mov	r0, r5
 80a0936:	f003 f8c7 	bl	80a3ac8 <_ZN3UDPC1Ev>
 80a093a:	4622      	mov	r2, r4
 80a093c:	4917      	ldr	r1, [pc, #92]	; (80a099c <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a093e:	4628      	mov	r0, r5
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0940:	4d17      	ldr	r5, [pc, #92]	; (80a09a0 <_GLOBAL__sub_I_SystemMode+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0942:	f003 fc3b 	bl	80a41bc <__aeabi_atexit>
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW

#define BRIGHTNESS 50 // 0 - 255
int troubleCount = 0;
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0946:	2302      	movs	r3, #2
 80a0948:	461a      	mov	r2, r3
 80a094a:	2114      	movs	r1, #20
 80a094c:	4628      	mov	r0, r5
 80a094e:	f000 fd9a 	bl	80a1486 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0952:	4622      	mov	r2, r4
 80a0954:	4913      	ldr	r1, [pc, #76]	; (80a09a4 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a0956:	4628      	mov	r0, r5
 80a0958:	f003 fc30 	bl	80a41bc <__aeabi_atexit>
}


/////---------------------------------------------------------------- IMU

LSM9DS1 imu;
 80a095c:	4812      	ldr	r0, [pc, #72]	; (80a09a8 <_GLOBAL__sub_I_SystemMode+0xac>)
 80a095e:	f000 f889 	bl	80a0a74 <_ZN7LSM9DS1C1Ev>
#define PRINT_SPEED 250 // 250 ms between prints

// a declination to get a more accurate heading. 
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
 80a0962:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80a0966:	4811      	ldr	r0, [pc, #68]	; (80a09ac <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a0968:	f000 f82a 	bl	80a09c0 <_ZN20SparkCorePolledTimerC1Em>
   //new driver motor motorTesting
#include "Stepper.h"
 
#define STEPS 300
 
Stepper stepper(STEPS, A1, A2, A3, A4);
 80a096c:	220d      	movs	r2, #13
 80a096e:	230e      	movs	r3, #14
 80a0970:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0974:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a0978:	230c      	movs	r3, #12
 80a097a:	220b      	movs	r2, #11
 80a097c:	480c      	ldr	r0, [pc, #48]	; (80a09b0 <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a097e:	f001 fecf 	bl	80a2720 <_ZN7StepperC1Eiiiii>
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}
 80a0982:	b003      	add	sp, #12
 80a0984:	bd30      	pop	{r4, r5, pc}
 80a0986:	bf00      	nop
 80a0988:	20000180 	.word	0x20000180
 80a098c:	2000009c 	.word	0x2000009c
 80a0990:	20000084 	.word	0x20000084
 80a0994:	200001a0 	.word	0x200001a0
 80a0998:	080a00b3 	.word	0x080a00b3
 80a099c:	080a00b5 	.word	0x080a00b5
 80a09a0:	200001ec 	.word	0x200001ec
 80a09a4:	080a13e9 	.word	0x080a13e9
 80a09a8:	200000b8 	.word	0x200000b8
 80a09ac:	20000088 	.word	0x20000088
 80a09b0:	2000013c 	.word	0x2000013c

080a09b4 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a09b4:	b510      	push	{r4, lr}
 80a09b6:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a09b8:	f002 f8e0 	bl	80a2b7c <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a09bc:	6020      	str	r0, [r4, #0]
 80a09be:	bd10      	pop	{r4, pc}

080a09c0 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a09c0:	b538      	push	{r3, r4, r5, lr}
 80a09c2:	4604      	mov	r4, r0
 80a09c4:	460d      	mov	r5, r1
    Reset();
 80a09c6:	f7ff fff5 	bl	80a09b4 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a09ca:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a09cc:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a09ce:	60a3      	str	r3, [r4, #8]
}
 80a09d0:	4620      	mov	r0, r4
 80a09d2:	bd38      	pop	{r3, r4, r5, pc}

080a09d4 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a09d4:	6081      	str	r1, [r0, #8]
 80a09d6:	4770      	bx	lr

080a09d8 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a09d8:	f002 b8d8 	b.w	80a2b8c <HAL_Pin_Map>

080a09dc <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a09dc:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a09de:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a09e0:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a09e2:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a09e4:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a09e6:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a09e8:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a09ea:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a09ec:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a09ee:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a09f0:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a09f2:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a09f4:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a09f6:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a09f8:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a09fc:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a09fe:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0a00:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a0a02:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0a04:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0a06:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0a08:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0a0a:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0a0c:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0a0e:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0a10:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a0a12:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0a14:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0a18:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0a1a:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0a1c:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0a1e:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0a20:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a0a22:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0a24:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0a26:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0a28:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0a2a:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0a2c:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0a2e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a0a32:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0a34:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0a38:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0a3c:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a0a3e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0a42:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0a46:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0a4a:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0a4c:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a0a4e:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0a50:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0a52:	6565      	str	r5, [r4, #84]	; 0x54
 80a0a54:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0a58:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0a5c:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0a60:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0a64:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0a68:	d1f0      	bne.n	80a0a4c <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0a6a:	f04f 0300 	mov.w	r3, #0
 80a0a6e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0a72:	bd30      	pop	{r4, r5, pc}

080a0a74 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0a74:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0a76:	231e      	movs	r3, #30
 80a0a78:	226b      	movs	r2, #107	; 0x6b
 80a0a7a:	2101      	movs	r1, #1
 80a0a7c:	f7ff ffae 	bl	80a09dc <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0a80:	bd10      	pop	{r4, pc}

080a0a82 <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a0a82:	b510      	push	{r4, lr}
 80a0a84:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0a86:	4608      	mov	r0, r1
 80a0a88:	f004 fa52 	bl	80a4f30 <__aeabi_i2f>
 80a0a8c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a0a8e:	f004 faa3 	bl	80a4fd8 <__aeabi_fmul>
}
 80a0a92:	bd10      	pop	{r4, pc}

080a0a94 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a0a94:	b510      	push	{r4, lr}
 80a0a96:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0a98:	88c0      	ldrh	r0, [r0, #6]
 80a0a9a:	f004 fa45 	bl	80a4f28 <__aeabi_ui2f>
 80a0a9e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0aa2:	f004 fa99 	bl	80a4fd8 <__aeabi_fmul>
 80a0aa6:	6760      	str	r0, [r4, #116]	; 0x74
 80a0aa8:	bd10      	pop	{r4, pc}

080a0aaa <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0aaa:	b510      	push	{r4, lr}
 80a0aac:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0aae:	7dc0      	ldrb	r0, [r0, #23]
 80a0ab0:	f004 fa3a 	bl	80a4f28 <__aeabi_ui2f>
 80a0ab4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0ab8:	f004 fa8e 	bl	80a4fd8 <__aeabi_fmul>
 80a0abc:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0abe:	bd10      	pop	{r4, pc}

080a0ac0 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0ac0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0ac4:	3b04      	subs	r3, #4
 80a0ac6:	2b0c      	cmp	r3, #12
 80a0ac8:	d814      	bhi.n	80a0af4 <_ZN7LSM9DS18calcmResEv+0x34>
 80a0aca:	e8df f003 	tbb	[pc, r3]
 80a0ace:	1307      	.short	0x1307
 80a0ad0:	130a1313 	.word	0x130a1313
 80a0ad4:	130d1313 	.word	0x130d1313
 80a0ad8:	1313      	.short	0x1313
 80a0ada:	10          	.byte	0x10
 80a0adb:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0adc:	4b06      	ldr	r3, [pc, #24]	; (80a0af8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0ade:	681b      	ldr	r3, [r3, #0]
 80a0ae0:	e007      	b.n	80a0af2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a0ae2:	4b05      	ldr	r3, [pc, #20]	; (80a0af8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0ae4:	685b      	ldr	r3, [r3, #4]
 80a0ae6:	e004      	b.n	80a0af2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0ae8:	4b03      	ldr	r3, [pc, #12]	; (80a0af8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0aea:	689b      	ldr	r3, [r3, #8]
 80a0aec:	e001      	b.n	80a0af2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0aee:	4b02      	ldr	r3, [pc, #8]	; (80a0af8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0af0:	68db      	ldr	r3, [r3, #12]
 80a0af2:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a0af4:	4770      	bx	lr
 80a0af6:	bf00      	nop
 80a0af8:	2000000c 	.word	0x2000000c

080a0afc <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0afc:	88c3      	ldrh	r3, [r0, #6]
 80a0afe:	2bf5      	cmp	r3, #245	; 0xf5
 80a0b00:	d007      	beq.n	80a0b12 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0b02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0b06:	d004      	beq.n	80a0b12 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0b08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0b0c:	bf1c      	itt	ne
 80a0b0e:	23f5      	movne	r3, #245	; 0xf5
 80a0b10:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a0b12:	7dc2      	ldrb	r2, [r0, #23]
 80a0b14:	2a10      	cmp	r2, #16
 80a0b16:	d803      	bhi.n	80a0b20 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0b18:	4b08      	ldr	r3, [pc, #32]	; (80a0b3c <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0b1a:	40d3      	lsrs	r3, r2
 80a0b1c:	07da      	lsls	r2, r3, #31
 80a0b1e:	d401      	bmi.n	80a0b24 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0b20:	2302      	movs	r3, #2
 80a0b22:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0b24:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0b28:	2a10      	cmp	r2, #16
 80a0b2a:	d803      	bhi.n	80a0b34 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0b2c:	4b04      	ldr	r3, [pc, #16]	; (80a0b40 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0b2e:	40d3      	lsrs	r3, r2
 80a0b30:	07db      	lsls	r3, r3, #31
 80a0b32:	d402      	bmi.n	80a0b3a <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0b34:	2304      	movs	r3, #4
 80a0b36:	f880 3020 	strb.w	r3, [r0, #32]
 80a0b3a:	4770      	bx	lr
 80a0b3c:	00010114 	.word	0x00010114
 80a0b40:	00011110 	.word	0x00011110

080a0b44 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0b44:	b510      	push	{r4, lr}
 80a0b46:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0b48:	2101      	movs	r1, #1
 80a0b4a:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a0b4e:	f003 fab1 	bl	80a40b4 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a0b52:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0b56:	2101      	movs	r1, #1
 80a0b58:	f003 fabd 	bl	80a40d6 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0b5c:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a0b60:	2101      	movs	r1, #1
 80a0b62:	f003 faa7 	bl	80a40b4 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0b66:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a0b6a:	4c0a      	ldr	r4, [pc, #40]	; (80a0b94 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a0b6c:	2101      	movs	r1, #1
 80a0b6e:	f003 fab2 	bl	80a40d6 <digitalWrite>
	
	SPI.begin();
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	f002 fd20 	bl	80a35b8 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0b78:	4620      	mov	r0, r4
 80a0b7a:	2108      	movs	r1, #8
 80a0b7c:	f002 fd6e 	bl	80a365c <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a0b80:	4620      	mov	r0, r4
 80a0b82:	2101      	movs	r1, #1
 80a0b84:	f002 fd1d 	bl	80a35c2 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0b88:	4620      	mov	r0, r4
}
 80a0b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0b8e:	2100      	movs	r1, #0
 80a0b90:	f002 bd1a 	b.w	80a35c8 <_ZN8SPIClass11setDataModeEh>
 80a0b94:	200006cc 	.word	0x200006cc

080a0b98 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0b9a:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0b9c:	4617      	mov	r7, r2
 80a0b9e:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0ba0:	4d09      	ldr	r5, [pc, #36]	; (80a0bc8 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a0ba2:	4620      	mov	r0, r4
 80a0ba4:	2100      	movs	r1, #0
 80a0ba6:	f003 fa96 	bl	80a40d6 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0baa:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0bae:	4628      	mov	r0, r5
 80a0bb0:	f002 fd68 	bl	80a3684 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0bb4:	4631      	mov	r1, r6
 80a0bb6:	4628      	mov	r0, r5
 80a0bb8:	f002 fd64 	bl	80a3684 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0bbc:	4620      	mov	r0, r4
}
 80a0bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0bc2:	2101      	movs	r1, #1
 80a0bc4:	f003 ba87 	b.w	80a40d6 <digitalWrite>
 80a0bc8:	200006cc 	.word	0x200006cc

080a0bcc <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bce:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0bd0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0bd4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0bd8:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0bda:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0bde:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0be2:	d103      	bne.n	80a0bec <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0be4:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0be6:	bf88      	it	hi
 80a0be8:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0bec:	b28c      	uxth	r4, r1
 80a0bee:	4620      	mov	r0, r4
 80a0bf0:	2100      	movs	r1, #0
 80a0bf2:	f003 fa70 	bl	80a40d6 <digitalWrite>
	SPI.transfer(rAddress);
 80a0bf6:	4629      	mov	r1, r5
 80a0bf8:	4809      	ldr	r0, [pc, #36]	; (80a0c20 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0bfa:	f002 fd43 	bl	80a3684 <_ZN8SPIClass8transferEh>
 80a0bfe:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0c00:	1bab      	subs	r3, r5, r6
 80a0c02:	429f      	cmp	r7, r3
 80a0c04:	dd06      	ble.n	80a0c14 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a0c06:	2100      	movs	r1, #0
 80a0c08:	4805      	ldr	r0, [pc, #20]	; (80a0c20 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0c0a:	f002 fd3b 	bl	80a3684 <_ZN8SPIClass8transferEh>
 80a0c0e:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a0c12:	e7f5      	b.n	80a0c00 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	2101      	movs	r1, #1
 80a0c18:	f003 fa5d 	bl	80a40d6 <digitalWrite>
	
	return 1;
}
 80a0c1c:	2001      	movs	r0, #1
 80a0c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0c20:	200006cc 	.word	0x200006cc

080a0c24 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0c26:	2301      	movs	r3, #1
 80a0c28:	9300      	str	r3, [sp, #0]
 80a0c2a:	f10d 030f 	add.w	r3, sp, #15
 80a0c2e:	f7ff ffcd 	bl	80a0bcc <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a0c32:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0c36:	b005      	add	sp, #20
 80a0c38:	f85d fb04 	ldr.w	pc, [sp], #4

080a0c3c <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0c3c:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a0c3e:	f003 fa63 	bl	80a4108 <_Z19__fetch_global_Wirev>
}
 80a0c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0c46:	f002 ba11 	b.w	80a306c <_ZN7TwoWire5beginEv>

080a0c4a <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0c4a:	b570      	push	{r4, r5, r6, lr}
 80a0c4c:	460e      	mov	r6, r1
 80a0c4e:	4615      	mov	r5, r2
 80a0c50:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0c52:	f003 fa59 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0c56:	4631      	mov	r1, r6
 80a0c58:	f002 fa1a 	bl	80a3090 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0c5c:	f003 fa54 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0c60:	6803      	ldr	r3, [r0, #0]
 80a0c62:	4629      	mov	r1, r5
 80a0c64:	689b      	ldr	r3, [r3, #8]
 80a0c66:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0c68:	f003 fa4e 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0c6c:	6803      	ldr	r3, [r0, #0]
 80a0c6e:	4621      	mov	r1, r4
 80a0c70:	689a      	ldr	r2, [r3, #8]
 80a0c72:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0c74:	f003 fa48 	bl	80a4108 <_Z19__fetch_global_Wirev>
}
 80a0c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0c7c:	f002 ba10 	b.w	80a30a0 <_ZN7TwoWire15endTransmissionEv>

080a0c80 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0c80:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0c82:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0c84:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0c86:	2a01      	cmp	r2, #1
 80a0c88:	d105      	bne.n	80a0c96 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0c8a:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0c8c:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0c8e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0c92:	f7ff bfda 	b.w	80a0c4a <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0c96:	b92a      	cbnz	r2, 80a0ca4 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0c98:	460a      	mov	r2, r1
}
 80a0c9a:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0c9c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0ca0:	f7ff bf7a 	b.w	80a0b98 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0ca4:	bc10      	pop	{r4}
 80a0ca6:	4770      	bx	lr

080a0ca8 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0ca8:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0caa:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0cac:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0cae:	b113      	cbz	r3, 80a0cb6 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0cb0:	7a03      	ldrb	r3, [r0, #8]
 80a0cb2:	015b      	lsls	r3, r3, #5
 80a0cb4:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0cb6:	88e2      	ldrh	r2, [r4, #6]
 80a0cb8:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0cbc:	d005      	beq.n	80a0cca <_ZN7LSM9DS18initGyroEv+0x22>
 80a0cbe:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0cc2:	d104      	bne.n	80a0cce <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0cc4:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0cc8:	e001      	b.n	80a0cce <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0cca:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0cce:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0cd0:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0cd2:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0cd6:	431a      	orrs	r2, r3
 80a0cd8:	4620      	mov	r0, r4
 80a0cda:	f7ff ffd1 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0cde:	2200      	movs	r2, #0
 80a0ce0:	2111      	movs	r1, #17
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	f7ff ffcc 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0ce8:	7aa3      	ldrb	r3, [r4, #10]
 80a0cea:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0cec:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0cee:	bf14      	ite	ne
 80a0cf0:	2280      	movne	r2, #128	; 0x80
 80a0cf2:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0cf4:	b12b      	cbz	r3, 80a0d02 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0cf6:	7b23      	ldrb	r3, [r4, #12]
 80a0cf8:	f003 030f 	and.w	r3, r3, #15
 80a0cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0d00:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a0d02:	2112      	movs	r1, #18
 80a0d04:	4620      	mov	r0, r4
 80a0d06:	f7ff ffbb 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0d0a:	7ce3      	ldrb	r3, [r4, #19]
 80a0d0c:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0d0e:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0d10:	bf0c      	ite	eq
 80a0d12:	2200      	moveq	r2, #0
 80a0d14:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0d16:	b113      	cbz	r3, 80a0d1e <_ZN7LSM9DS18initGyroEv+0x76>
 80a0d18:	f042 0210 	orr.w	r2, r2, #16
 80a0d1c:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0d1e:	7c63      	ldrb	r3, [r4, #17]
 80a0d20:	b10b      	cbz	r3, 80a0d26 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a0d22:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0d26:	7d23      	ldrb	r3, [r4, #20]
 80a0d28:	b10b      	cbz	r3, 80a0d2e <_ZN7LSM9DS18initGyroEv+0x86>
 80a0d2a:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0d2e:	211e      	movs	r1, #30
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	f7ff ffa5 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0d36:	7b63      	ldrb	r3, [r4, #13]
 80a0d38:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0d3a:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0d3c:	bf0c      	ite	eq
 80a0d3e:	2200      	moveq	r2, #0
 80a0d40:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0d42:	b113      	cbz	r3, 80a0d4a <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0d44:	f042 0210 	orr.w	r2, r2, #16
 80a0d48:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0d4a:	7be3      	ldrb	r3, [r4, #15]
 80a0d4c:	b10b      	cbz	r3, 80a0d52 <_ZN7LSM9DS18initGyroEv+0xaa>
 80a0d4e:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0d52:	4620      	mov	r0, r4
}
 80a0d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0d58:	2113      	movs	r1, #19
 80a0d5a:	f7ff bf91 	b.w	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>

080a0d5e <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a0d5e:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0d60:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0d62:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0d64:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0d66:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0d68:	bf0c      	ite	eq
 80a0d6a:	2200      	moveq	r2, #0
 80a0d6c:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0d6e:	b113      	cbz	r3, 80a0d76 <_ZN7LSM9DS19initAccelEv+0x18>
 80a0d70:	f042 0210 	orr.w	r2, r2, #16
 80a0d74:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0d76:	7e63      	ldrb	r3, [r4, #25]
 80a0d78:	b10b      	cbz	r3, 80a0d7e <_ZN7LSM9DS19initAccelEv+0x20>
 80a0d7a:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a0d7e:	211f      	movs	r1, #31
 80a0d80:	4620      	mov	r0, r4
 80a0d82:	f7ff ff7d 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0d86:	7da2      	ldrb	r2, [r4, #22]
 80a0d88:	b112      	cbz	r2, 80a0d90 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0d8a:	7e22      	ldrb	r2, [r4, #24]
 80a0d8c:	0152      	lsls	r2, r2, #5
 80a0d8e:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0d90:	7de3      	ldrb	r3, [r4, #23]
 80a0d92:	2b08      	cmp	r3, #8
 80a0d94:	d006      	beq.n	80a0da4 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0d96:	2b10      	cmp	r3, #16
 80a0d98:	d007      	beq.n	80a0daa <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0d9a:	2b04      	cmp	r3, #4
 80a0d9c:	d107      	bne.n	80a0dae <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0d9e:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0da2:	e004      	b.n	80a0dae <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0da4:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0da8:	e001      	b.n	80a0dae <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0daa:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0dae:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0db2:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0db4:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0db6:	bfa2      	ittt	ge
 80a0db8:	f003 0303 	andge.w	r3, r3, #3
 80a0dbc:	431a      	orrge	r2, r3
 80a0dbe:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	f7ff ff5c 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0dc8:	7f62      	ldrb	r2, [r4, #29]
 80a0dca:	b12a      	cbz	r2, 80a0dd8 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0dcc:	7fa2      	ldrb	r2, [r4, #30]
 80a0dce:	0152      	lsls	r2, r2, #5
 80a0dd0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0dd8:	4620      	mov	r0, r4
}
 80a0dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0dde:	2121      	movs	r1, #33	; 0x21
 80a0de0:	f7ff bf4e 	b.w	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>

080a0de4 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0de4:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0de6:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0de8:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0dea:	2a01      	cmp	r2, #1
 80a0dec:	d105      	bne.n	80a0dfa <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0dee:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0df0:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0df2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0df6:	f7ff bf28 	b.w	80a0c4a <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0dfa:	b92a      	cbnz	r2, 80a0e08 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0dfc:	460a      	mov	r2, r1
}
 80a0dfe:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0e00:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0e04:	f7ff bec8 	b.w	80a0b98 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0e08:	bc10      	pop	{r4}
 80a0e0a:	4770      	bx	lr

080a0e0c <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0e0c:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0e0e:	b570      	push	{r4, r5, r6, lr}
 80a0e10:	4606      	mov	r6, r0
 80a0e12:	460c      	mov	r4, r1
 80a0e14:	4615      	mov	r5, r2
	if (axis > 2)
 80a0e16:	d810      	bhi.n	80a0e3a <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0e18:	0049      	lsls	r1, r1, #1
 80a0e1a:	3105      	adds	r1, #5
 80a0e1c:	b2d2      	uxtb	r2, r2
 80a0e1e:	b2c9      	uxtb	r1, r1
 80a0e20:	f7ff ffe0 	bl	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0e24:	1ce1      	adds	r1, r4, #3
 80a0e26:	0049      	lsls	r1, r1, #1
 80a0e28:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0e2c:	4630      	mov	r0, r6
}
 80a0e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0e32:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0e36:	f7ff bfd5 	b.w	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
 80a0e3a:	bd70      	pop	{r4, r5, r6, pc}

080a0e3c <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a0e3c:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0e3e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0e42:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0e44:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0e46:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0e4a:	bf08      	it	eq
 80a0e4c:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0e4e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a0e52:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0e56:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0e5a:	bf18      	it	ne
 80a0e5c:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0e5e:	009b      	lsls	r3, r3, #2
 80a0e60:	f003 031c 	and.w	r3, r3, #28
 80a0e64:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0e66:	431a      	orrs	r2, r3
 80a0e68:	2120      	movs	r1, #32
 80a0e6a:	f7ff ffbb 	bl	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
 80a0e6e:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0e72:	4620      	mov	r0, r4
 80a0e74:	3b08      	subs	r3, #8
 80a0e76:	b2db      	uxtb	r3, r3
 80a0e78:	2b08      	cmp	r3, #8
 80a0e7a:	bf96      	itet	ls
 80a0e7c:	4a12      	ldrls	r2, [pc, #72]	; (80a0ec8 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a0e7e:	2200      	movhi	r2, #0
 80a0e80:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0e82:	2121      	movs	r1, #33	; 0x21
 80a0e84:	f7ff ffae 	bl	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0e88:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0e8c:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0e8e:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0e90:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0e94:	bf0c      	ite	eq
 80a0e96:	2200      	moveq	r2, #0
 80a0e98:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0e9a:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0e9e:	431a      	orrs	r2, r3
 80a0ea0:	2122      	movs	r1, #34	; 0x22
 80a0ea2:	f7ff ff9f 	bl	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0ea6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0eaa:	4620      	mov	r0, r4
 80a0eac:	0092      	lsls	r2, r2, #2
 80a0eae:	f002 020c 	and.w	r2, r2, #12
 80a0eb2:	2123      	movs	r1, #35	; 0x23
 80a0eb4:	f7ff ff96 	bl	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0eb8:	4620      	mov	r0, r4
}
 80a0eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0ebe:	2200      	movs	r2, #0
 80a0ec0:	2124      	movs	r1, #36	; 0x24
 80a0ec2:	f7ff bf8f 	b.w	80a0de4 <_ZN7LSM9DS110mWriteByteEhh>
 80a0ec6:	bf00      	nop
 80a0ec8:	080a56ea 	.word	0x080a56ea

080a0ecc <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0ecc:	b538      	push	{r3, r4, r5, lr}
 80a0ece:	460c      	mov	r4, r1
 80a0ed0:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0ed2:	f003 f919 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0ed6:	4621      	mov	r1, r4
 80a0ed8:	f002 f8da 	bl	80a3090 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0edc:	f003 f914 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0ee0:	6803      	ldr	r3, [r0, #0]
 80a0ee2:	4629      	mov	r1, r5
 80a0ee4:	689b      	ldr	r3, [r3, #8]
 80a0ee6:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0ee8:	f003 f90e 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0eec:	2100      	movs	r1, #0
 80a0eee:	f002 f8d3 	bl	80a3098 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0ef2:	f003 f909 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0ef6:	2201      	movs	r2, #1
 80a0ef8:	4621      	mov	r1, r4
 80a0efa:	f002 f8c6 	bl	80a308a <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0efe:	f003 f903 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a0f02:	6803      	ldr	r3, [r0, #0]
 80a0f04:	695b      	ldr	r3, [r3, #20]
 80a0f06:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0f08:	b2c0      	uxtb	r0, r0
 80a0f0a:	bd38      	pop	{r3, r4, r5, pc}

080a0f0c <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0f0c:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0f0e:	7801      	ldrb	r1, [r0, #0]
 80a0f10:	2901      	cmp	r1, #1
 80a0f12:	d103      	bne.n	80a0f1c <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0f14:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0f18:	f7ff bfd8 	b.w	80a0ecc <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0f1c:	b919      	cbnz	r1, 80a0f26 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0f1e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0f22:	f7ff be7f 	b.w	80a0c24 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0f26:	2000      	movs	r0, #0
 80a0f28:	4770      	bx	lr

080a0f2a <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a0f2a:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a0f2c:	2127      	movs	r1, #39	; 0x27
 80a0f2e:	f7ff ffed 	bl	80a0f0c <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a0f32:	f000 0001 	and.w	r0, r0, #1
 80a0f36:	bd08      	pop	{r3, pc}

080a0f38 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0f38:	b538      	push	{r3, r4, r5, lr}
 80a0f3a:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0f3c:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0f3e:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0f40:	f7ff ffe4 	bl	80a0f0c <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a0f44:	b11d      	cbz	r5, 80a0f4e <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a0f46:	f040 0202 	orr.w	r2, r0, #2
 80a0f4a:	b2d2      	uxtb	r2, r2
 80a0f4c:	e001      	b.n	80a0f52 <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a0f4e:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a0f52:	4620      	mov	r0, r4
}
 80a0f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a0f58:	2123      	movs	r1, #35	; 0x23
 80a0f5a:	f7ff be91 	b.w	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>

080a0f5e <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a0f5e:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0f60:	7801      	ldrb	r1, [r0, #0]
 80a0f62:	2901      	cmp	r1, #1
 80a0f64:	d103      	bne.n	80a0f6e <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0f66:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f6a:	f7ff bfaf 	b.w	80a0ecc <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0f6e:	b919      	cbnz	r1, 80a0f78 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a0f70:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f74:	f7ff be56 	b.w	80a0c24 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0f78:	4770      	bx	lr

080a0f7a <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0f7a:	b538      	push	{r3, r4, r5, lr}
 80a0f7c:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a0f7e:	7843      	ldrb	r3, [r0, #1]
 80a0f80:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0f84:	7883      	ldrb	r3, [r0, #2]
 80a0f86:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0f8a:	f7ff fdb7 	bl	80a0afc <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a0f8e:	f7ff fd81 	bl	80a0a94 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0f92:	4620      	mov	r0, r4
 80a0f94:	f7ff fd94 	bl	80a0ac0 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0f98:	4620      	mov	r0, r4
 80a0f9a:	f7ff fd86 	bl	80a0aaa <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0f9e:	7823      	ldrb	r3, [r4, #0]
 80a0fa0:	2b01      	cmp	r3, #1
 80a0fa2:	d103      	bne.n	80a0fac <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0fa4:	4620      	mov	r0, r4
 80a0fa6:	f7ff fe49 	bl	80a0c3c <_ZN7LSM9DS17initI2CEv>
 80a0faa:	e003      	b.n	80a0fb4 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0fac:	b913      	cbnz	r3, 80a0fb4 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	f7ff fdc8 	bl	80a0b44 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0fb4:	210f      	movs	r1, #15
 80a0fb6:	4620      	mov	r0, r4
 80a0fb8:	f7ff ffd1 	bl	80a0f5e <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0fbc:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0fbe:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0fc0:	4620      	mov	r0, r4
 80a0fc2:	f7ff ffa3 	bl	80a0f0c <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0fc6:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0fca:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0fce:	b205      	sxth	r5, r0
 80a0fd0:	429d      	cmp	r5, r3
 80a0fd2:	d10a      	bne.n	80a0fea <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0fd4:	4620      	mov	r0, r4
 80a0fd6:	f7ff fe67 	bl	80a0ca8 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0fda:	4620      	mov	r0, r4
 80a0fdc:	f7ff febf 	bl	80a0d5e <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	f7ff ff2b 	bl	80a0e3c <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0fe6:	4628      	mov	r0, r5
 80a0fe8:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0fea:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0fec:	bd38      	pop	{r3, r4, r5, pc}

080a0fee <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a0fee:	b510      	push	{r4, lr}
 80a0ff0:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a0ff2:	2127      	movs	r1, #39	; 0x27
 80a0ff4:	f7ff ffb3 	bl	80a0f5e <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a0ff8:	2101      	movs	r1, #1
 80a0ffa:	40a1      	lsls	r1, r4
 80a0ffc:	4008      	ands	r0, r1
 80a0ffe:	4120      	asrs	r0, r4
}
 80a1000:	b2c0      	uxtb	r0, r0
 80a1002:	bd10      	pop	{r4, pc}

080a1004 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a1004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1008:	4690      	mov	r8, r2
 80a100a:	460c      	mov	r4, r1
 80a100c:	461d      	mov	r5, r3
 80a100e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a1012:	f001 fdb3 	bl	80a2b7c <HAL_Timer_Get_Milli_Seconds>
 80a1016:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a1018:	f003 f876 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a101c:	4621      	mov	r1, r4
 80a101e:	f002 f837 	bl	80a3090 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a1022:	f003 f871 	bl	80a4108 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1026:	6803      	ldr	r3, [r0, #0]
 80a1028:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a102c:	689b      	ldr	r3, [r3, #8]
 80a102e:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a1030:	f003 f86a 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a1034:	2100      	movs	r1, #0
 80a1036:	f002 f82f 	bl	80a3098 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a103a:	f003 f865 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a103e:	4621      	mov	r1, r4
 80a1040:	4632      	mov	r2, r6
 80a1042:	f002 f822 	bl	80a308a <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a1046:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a1048:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a104c:	42b4      	cmp	r4, r6
 80a104e:	da1a      	bge.n	80a1086 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a1050:	f003 f85a 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a1054:	6803      	ldr	r3, [r0, #0]
 80a1056:	691b      	ldr	r3, [r3, #16]
 80a1058:	4798      	blx	r3
 80a105a:	b140      	cbz	r0, 80a106e <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a105c:	f003 f854 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a1060:	6803      	ldr	r3, [r0, #0]
 80a1062:	f104 0801 	add.w	r8, r4, #1
 80a1066:	695b      	ldr	r3, [r3, #20]
 80a1068:	4798      	blx	r3
 80a106a:	5528      	strb	r0, [r5, r4]
 80a106c:	4644      	mov	r4, r8
 80a106e:	f001 fd85 	bl	80a2b7c <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a1072:	42b8      	cmp	r0, r7
 80a1074:	d9ea      	bls.n	80a104c <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a1076:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a1078:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a107a:	1b62      	subs	r2, r4, r5
 80a107c:	4296      	cmp	r6, r2
 80a107e:	dd05      	ble.n	80a108c <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a1080:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a1084:	e7f9      	b.n	80a107a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a1086:	2001      	movs	r0, #1
 80a1088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a108c:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1092 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a1092:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1094:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1096:	7801      	ldrb	r1, [r0, #0]
 80a1098:	2901      	cmp	r1, #1
 80a109a:	d107      	bne.n	80a10ac <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a109c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a10a0:	9300      	str	r3, [sp, #0]
 80a10a2:	4613      	mov	r3, r2
 80a10a4:	462a      	mov	r2, r5
 80a10a6:	f7ff ffad 	bl	80a1004 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a10aa:	e007      	b.n	80a10bc <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a10ac:	b931      	cbnz	r1, 80a10bc <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a10ae:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a10b2:	9300      	str	r3, [sp, #0]
 80a10b4:	4613      	mov	r3, r2
 80a10b6:	462a      	mov	r2, r5
 80a10b8:	f7ff fd88 	bl	80a0bcc <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a10bc:	b003      	add	sp, #12
 80a10be:	bd30      	pop	{r4, r5, pc}

080a10c0 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a10c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a10c2:	2306      	movs	r3, #6
 80a10c4:	466a      	mov	r2, sp
 80a10c6:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a10c8:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a10ca:	f7ff ffe2 	bl	80a1092 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a10ce:	b330      	cbz	r0, 80a111e <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a10d0:	f89d 3000 	ldrb.w	r3, [sp]
 80a10d4:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a10d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a10dc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a10e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a10e4:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a10e8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a10ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a10f0:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a10f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a10f6:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a10fa:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a10fc:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a10fe:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a1100:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a1102:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a1104:	b15d      	cbz	r5, 80a111e <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a1106:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a110a:	1b49      	subs	r1, r1, r5
 80a110c:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a110e:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a1112:	1a52      	subs	r2, r2, r1
 80a1114:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a1116:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a111a:	1a9b      	subs	r3, r3, r2
 80a111c:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a111e:	b003      	add	sp, #12
 80a1120:	bd30      	pop	{r4, r5, pc}

080a1122 <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a1122:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a1124:	2306      	movs	r3, #6
 80a1126:	466a      	mov	r2, sp
 80a1128:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a112a:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a112c:	f7ff ffb1 	bl	80a1092 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a1130:	b330      	cbz	r0, 80a1180 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a1132:	f89d 3000 	ldrb.w	r3, [sp]
 80a1136:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a113a:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a113e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1142:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1146:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a114a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a114e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a1152:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1154:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a1158:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a115c:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a115e:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a1160:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a1162:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a1164:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a1166:	b15d      	cbz	r5, 80a1180 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a1168:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a116c:	1b49      	subs	r1, r1, r5
 80a116e:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a1170:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a1174:	1a52      	subs	r2, r2, r1
 80a1176:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a1178:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a117c:	1a9b      	subs	r3, r3, r2
 80a117e:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a1180:	b003      	add	sp, #12
 80a1182:	bd30      	pop	{r4, r5, pc}

080a1184 <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a1184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1188:	4604      	mov	r4, r0
 80a118a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a118c:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a118e:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a1190:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a1192:	9304      	str	r3, [sp, #16]
 80a1194:	9305      	str	r3, [sp, #20]
 80a1196:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a1198:	9307      	str	r3, [sp, #28]
 80a119a:	9308      	str	r3, [sp, #32]
 80a119c:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a119e:	f7ff fecb 	bl	80a0f38 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a11a2:	223f      	movs	r2, #63	; 0x3f
 80a11a4:	212e      	movs	r1, #46	; 0x2e
 80a11a6:	4620      	mov	r0, r4
 80a11a8:	f7ff fd6a 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a11ac:	212f      	movs	r1, #47	; 0x2f
 80a11ae:	4620      	mov	r0, r4
 80a11b0:	f7ff feac 	bl	80a0f0c <_ZN7LSM9DS110xgReadByteEh>
 80a11b4:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a11b8:	2e1e      	cmp	r6, #30
 80a11ba:	d9f7      	bls.n	80a11ac <_ZN7LSM9DS19calibrateEb+0x28>
 80a11bc:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a11be:	42b7      	cmp	r7, r6
 80a11c0:	da32      	bge.n	80a1228 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a11c2:	4620      	mov	r0, r4
 80a11c4:	f7ff ffad 	bl	80a1122 <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a11c8:	9a07      	ldr	r2, [sp, #28]
 80a11ca:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a11ce:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a11d0:	4413      	add	r3, r2
 80a11d2:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a11d4:	9a08      	ldr	r2, [sp, #32]
 80a11d6:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a11da:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a11dc:	4413      	add	r3, r2
 80a11de:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a11e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a11e2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a11e6:	4413      	add	r3, r2
 80a11e8:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a11ea:	f7ff ff69 	bl	80a10c0 <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a11ee:	9a04      	ldr	r2, [sp, #16]
 80a11f0:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a11f4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a11f6:	4413      	add	r3, r2
 80a11f8:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a11fa:	9a05      	ldr	r2, [sp, #20]
 80a11fc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a1200:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a1204:	4413      	add	r3, r2
 80a1206:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a1208:	f003 fa8c 	bl	80a4724 <__aeabi_f2d>
 80a120c:	4602      	mov	r2, r0
 80a120e:	460b      	mov	r3, r1
 80a1210:	2000      	movs	r0, #0
 80a1212:	4926      	ldr	r1, [pc, #152]	; (80a12ac <_ZN7LSM9DS19calibrateEb+0x128>)
 80a1214:	f003 fc04 	bl	80a4a20 <__aeabi_ddiv>
 80a1218:	f003 fd88 	bl	80a4d2c <__aeabi_d2iz>
 80a121c:	b200      	sxth	r0, r0
 80a121e:	1a2d      	subs	r5, r5, r0
 80a1220:	9806      	ldr	r0, [sp, #24]
 80a1222:	4405      	add	r5, r0
 80a1224:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a1226:	e7ca      	b.n	80a11be <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a1228:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a122c:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a1230:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a1234:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a1238:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a123c:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a1240:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a1242:	a907      	add	r1, sp, #28
 80a1244:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a1248:	fb90 f0f6 	sdiv	r0, r0, r6
 80a124c:	b200      	sxth	r0, r0
 80a124e:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a1252:	9202      	str	r2, [sp, #8]
 80a1254:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a1256:	f003 fe6b 	bl	80a4f30 <__aeabi_i2f>
 80a125a:	4659      	mov	r1, fp
 80a125c:	f003 febc 	bl	80a4fd8 <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a1260:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a1262:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a1266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a126a:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a126c:	fb90 f0f6 	sdiv	r0, r0, r6
 80a1270:	b200      	sxth	r0, r0
 80a1272:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a1276:	f003 fe5b 	bl	80a4f30 <__aeabi_i2f>
 80a127a:	4651      	mov	r1, sl
 80a127c:	f003 feac 	bl	80a4fd8 <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a1280:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a1282:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a1286:	9a02      	ldr	r2, [sp, #8]
 80a1288:	d1db      	bne.n	80a1242 <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a128a:	2100      	movs	r1, #0
 80a128c:	4620      	mov	r0, r4
 80a128e:	f7ff fe53 	bl	80a0f38 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a1292:	2200      	movs	r2, #0
 80a1294:	212e      	movs	r1, #46	; 0x2e
 80a1296:	4620      	mov	r0, r4
 80a1298:	f7ff fcf2 	bl	80a0c80 <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a129c:	9b01      	ldr	r3, [sp, #4]
 80a129e:	b113      	cbz	r3, 80a12a6 <_ZN7LSM9DS19calibrateEb+0x122>
 80a12a0:	2301      	movs	r3, #1
 80a12a2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a12a6:	b00b      	add	sp, #44	; 0x2c
 80a12a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a12ac:	3ff00000 	.word	0x3ff00000

080a12b0 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a12b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a12b2:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a12b4:	7801      	ldrb	r1, [r0, #0]
 80a12b6:	2901      	cmp	r1, #1
 80a12b8:	d107      	bne.n	80a12ca <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a12ba:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a12be:	9300      	str	r3, [sp, #0]
 80a12c0:	4613      	mov	r3, r2
 80a12c2:	462a      	mov	r2, r5
 80a12c4:	f7ff fe9e 	bl	80a1004 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a12c8:	e007      	b.n	80a12da <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a12ca:	b931      	cbnz	r1, 80a12da <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a12cc:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a12d0:	9300      	str	r3, [sp, #0]
 80a12d2:	4613      	mov	r3, r2
 80a12d4:	462a      	mov	r2, r5
 80a12d6:	f7ff fc79 	bl	80a0bcc <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a12da:	b003      	add	sp, #12
 80a12dc:	bd30      	pop	{r4, r5, pc}

080a12de <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a12de:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a12e0:	2306      	movs	r3, #6
 80a12e2:	466a      	mov	r2, sp
 80a12e4:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a12e6:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a12e8:	f7ff ffe2 	bl	80a12b0 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a12ec:	b1a0      	cbz	r0, 80a1318 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a12ee:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a12f2:	f89d 3000 	ldrb.w	r3, [sp]
 80a12f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a12fa:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a12fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a1300:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1304:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1308:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a130a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a130e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1316:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a1318:	b002      	add	sp, #8
 80a131a:	bd10      	pop	{r4, pc}

080a131c <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1320:	4605      	mov	r5, r0
 80a1322:	468a      	mov	sl, r1
 80a1324:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a1326:	2300      	movs	r3, #0
 80a1328:	f8ad 3000 	strh.w	r3, [sp]
 80a132c:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a1330:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a1334:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a1338:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a133c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1340:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a1342:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a1344:	2103      	movs	r1, #3
 80a1346:	4628      	mov	r0, r5
 80a1348:	f7ff fe51 	bl	80a0fee <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a134c:	2800      	cmp	r0, #0
 80a134e:	d0f9      	beq.n	80a1344 <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a1350:	4628      	mov	r0, r5
 80a1352:	f7ff ffc4 	bl	80a12de <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a1356:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a1358:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a135c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a135e:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a1362:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a1364:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a1368:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a136a:	aa04      	add	r2, sp, #16
 80a136c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a1370:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a1374:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a1376:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a137a:	bfb8      	it	lt
 80a137c:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a1380:	4291      	cmp	r1, r2
 80a1382:	bfc8      	it	gt
 80a1384:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a1388:	3301      	adds	r3, #1
 80a138a:	2b03      	cmp	r3, #3
 80a138c:	d1ed      	bne.n	80a136a <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a138e:	3c01      	subs	r4, #1
 80a1390:	d1d8      	bne.n	80a1344 <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a1392:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a1396:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a139a:	f04f 0b02 	mov.w	fp, #2
 80a139e:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a13a2:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a13a6:	441e      	add	r6, r3
 80a13a8:	fb96 f6fb 	sdiv	r6, r6, fp
 80a13ac:	b236      	sxth	r6, r6
 80a13ae:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a13b2:	4630      	mov	r0, r6
 80a13b4:	f003 fdbc 	bl	80a4f30 <__aeabi_i2f>
 80a13b8:	4601      	mov	r1, r0
 80a13ba:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a13bc:	f003 fe0c 	bl	80a4fd8 <__aeabi_fmul>
 80a13c0:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a13c4:	f1ba 0f00 	cmp.w	sl, #0
 80a13c8:	d004      	beq.n	80a13d4 <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a13ca:	4632      	mov	r2, r6
 80a13cc:	b2e1      	uxtb	r1, r4
 80a13ce:	4628      	mov	r0, r5
 80a13d0:	f7ff fd1c 	bl	80a0e0c <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a13d4:	3401      	adds	r4, #1
 80a13d6:	2c03      	cmp	r4, #3
 80a13d8:	d1e1      	bne.n	80a139e <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a13da:	b007      	add	sp, #28
 80a13dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a13e0 <_GLOBAL__sub_I_magSensitivity>:
 80a13e0:	f001 bbd4 	b.w	80a2b8c <HAL_Pin_Map>

080a13e4 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a13e4:	f001 bbc2 	b.w	80a2b6c <HAL_Timer_Get_Micro_Seconds>

080a13e8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a13e8:	b510      	push	{r4, lr}
 80a13ea:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a13ec:	68c0      	ldr	r0, [r0, #12]
 80a13ee:	b108      	cbz	r0, 80a13f4 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a13f0:	f001 fde2 	bl	80a2fb8 <free>
  if (begun) pinMode(pin, INPUT);
 80a13f4:	7823      	ldrb	r3, [r4, #0]
 80a13f6:	b11b      	cbz	r3, 80a1400 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a13f8:	2100      	movs	r1, #0
 80a13fa:	79e0      	ldrb	r0, [r4, #7]
 80a13fc:	f002 fe5a 	bl	80a40b4 <pinMode>
}
 80a1400:	4620      	mov	r0, r4
 80a1402:	bd10      	pop	{r4, pc}

080a1404 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a1404:	b538      	push	{r3, r4, r5, lr}
 80a1406:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a1408:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a140a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a140c:	b108      	cbz	r0, 80a1412 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a140e:	f001 fdd3 	bl	80a2fb8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a1412:	79a3      	ldrb	r3, [r4, #6]
 80a1414:	2b06      	cmp	r3, #6
 80a1416:	bf0c      	ite	eq
 80a1418:	2004      	moveq	r0, #4
 80a141a:	2003      	movne	r0, #3
 80a141c:	4368      	muls	r0, r5
 80a141e:	b280      	uxth	r0, r0
 80a1420:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a1422:	f001 fdc1 	bl	80a2fa8 <malloc>
 80a1426:	60e0      	str	r0, [r4, #12]
 80a1428:	b128      	cbz	r0, 80a1436 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a142a:	88a2      	ldrh	r2, [r4, #4]
 80a142c:	2100      	movs	r1, #0
 80a142e:	f003 ffd8 	bl	80a53e2 <memset>
    numLEDs = n;
 80a1432:	8065      	strh	r5, [r4, #2]
 80a1434:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a1436:	80a0      	strh	r0, [r4, #4]
 80a1438:	8060      	strh	r0, [r4, #2]
 80a143a:	bd38      	pop	{r3, r4, r5, pc}

080a143c <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a143c:	b510      	push	{r4, lr}
 80a143e:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a1440:	2101      	movs	r1, #1
 80a1442:	79c0      	ldrb	r0, [r0, #7]
 80a1444:	f002 fe36 	bl	80a40b4 <pinMode>
  digitalWrite(pin, LOW);
 80a1448:	2100      	movs	r1, #0
 80a144a:	79e0      	ldrb	r0, [r4, #7]
 80a144c:	f002 fe43 	bl	80a40d6 <digitalWrite>
  begun = true;
 80a1450:	2301      	movs	r3, #1
 80a1452:	7023      	strb	r3, [r4, #0]
 80a1454:	bd10      	pop	{r4, pc}

080a1456 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a1456:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a1458:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a145a:	4605      	mov	r5, r0
 80a145c:	460c      	mov	r4, r1
    if (begun) {
 80a145e:	b11b      	cbz	r3, 80a1468 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a1460:	2100      	movs	r1, #0
 80a1462:	79c0      	ldrb	r0, [r0, #7]
 80a1464:	f002 fe26 	bl	80a40b4 <pinMode>
    }
    pin = p;
    if (begun) {
 80a1468:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a146a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a146c:	b153      	cbz	r3, 80a1484 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a146e:	b2a4      	uxth	r4, r4
 80a1470:	4620      	mov	r0, r4
 80a1472:	2101      	movs	r1, #1
 80a1474:	f002 fe1e 	bl	80a40b4 <pinMode>
        digitalWrite(p, LOW);
 80a1478:	4620      	mov	r0, r4
    }
}
 80a147a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a147e:	2100      	movs	r1, #0
 80a1480:	f002 be29 	b.w	80a40d6 <digitalWrite>
 80a1484:	bd38      	pop	{r3, r4, r5, pc}

080a1486 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a1486:	b570      	push	{r4, r5, r6, lr}
 80a1488:	4604      	mov	r4, r0
 80a148a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a148c:	2500      	movs	r5, #0
 80a148e:	7183      	strb	r3, [r0, #6]
 80a1490:	7005      	strb	r5, [r0, #0]
 80a1492:	7205      	strb	r5, [r0, #8]
 80a1494:	60c5      	str	r5, [r0, #12]
 80a1496:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a1498:	f7ff ffb4 	bl	80a1404 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a149c:	4620      	mov	r0, r4
 80a149e:	4631      	mov	r1, r6
 80a14a0:	f7ff ffd9 	bl	80a1456 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	bd70      	pop	{r4, r5, r6, pc}

080a14a8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a14a8:	68c3      	ldr	r3, [r0, #12]
 80a14aa:	2b00      	cmp	r3, #0
 80a14ac:	f000 858e 	beq.w	80a1fcc <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a14b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a14b4:	4604      	mov	r4, r0
 80a14b6:	7983      	ldrb	r3, [r0, #6]
 80a14b8:	b086      	sub	sp, #24
 80a14ba:	3b02      	subs	r3, #2
 80a14bc:	b2db      	uxtb	r3, r3
 80a14be:	2b04      	cmp	r3, #4
 80a14c0:	bf96      	itet	ls
 80a14c2:	4a29      	ldrls	r2, [pc, #164]	; (80a1568 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a14c4:	2532      	movhi	r5, #50	; 0x32
 80a14c6:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a14ca:	f7ff ff8b 	bl	80a13e4 <micros>
 80a14ce:	6923      	ldr	r3, [r4, #16]
 80a14d0:	1ac0      	subs	r0, r0, r3
 80a14d2:	42a8      	cmp	r0, r5
 80a14d4:	d3f9      	bcc.n	80a14ca <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a14d6:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a14d8:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a14da:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a14dc:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a14de:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a14e2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a14e6:	f000 8272 	beq.w	80a19ce <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a14ea:	2907      	cmp	r1, #7
 80a14ec:	f000 826f 	beq.w	80a19ce <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a14f0:	2906      	cmp	r1, #6
 80a14f2:	f000 8432 	beq.w	80a1d5a <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a14f6:	2905      	cmp	r1, #5
 80a14f8:	f000 83ab 	beq.w	80a1c52 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a14fc:	2908      	cmp	r1, #8
 80a14fe:	f000 83a8 	beq.w	80a1c52 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a1502:	2900      	cmp	r1, #0
 80a1504:	f040 8563 	bne.w	80a1fce <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a1508:	4a18      	ldr	r2, [pc, #96]	; (80a156c <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a150a:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a150e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1512:	b29b      	uxth	r3, r3
 80a1514:	2b00      	cmp	r3, #0
 80a1516:	f000 8395 	beq.w	80a1c44 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a151a:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a151c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1520:	f10e 0503 	add.w	r5, lr, #3
 80a1524:	3b03      	subs	r3, #3
 80a1526:	b29b      	uxth	r3, r3
 80a1528:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a152c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1530:	b2db      	uxtb	r3, r3
 80a1532:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1536:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a153a:	b2db      	uxtb	r3, r3
 80a153c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1540:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1544:	b2db      	uxtb	r3, r3
 80a1546:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a154a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a154e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1552:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1556:	021b      	lsls	r3, r3, #8
 80a1558:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a155c:	4303      	orrs	r3, r0
 80a155e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1560:	f88d 1005 	strb.w	r1, [sp, #5]
 80a1564:	e11b      	b.n	80a179e <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a1566:	bf00      	nop
 80a1568:	080a56f4 	.word	0x080a56f4
 80a156c:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1570:	4600      	mov	r0, r0
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a1678:	79e3      	ldrb	r3, [r4, #7]
 80a167a:	6810      	ldr	r0, [r2, #0]
 80a167c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1680:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1684:	88bf      	ldrh	r7, [r7, #4]
 80a1686:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a168a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a168c:	4600      	mov	r0, r0
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1786:	9b04      	ldr	r3, [sp, #16]
 80a1788:	085b      	lsrs	r3, r3, #1
 80a178a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a178c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1790:	3301      	adds	r3, #1
 80a1792:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1794:	2b17      	cmp	r3, #23
 80a1796:	f88d 3005 	strb.w	r3, [sp, #5]
 80a179a:	f200 82db 	bhi.w	80a1d54 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a179e:	79e3      	ldrb	r3, [r4, #7]
 80a17a0:	6810      	ldr	r0, [r2, #0]
 80a17a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17a6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17aa:	88bf      	ldrh	r7, [r7, #4]
 80a17ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17b0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a17b2:	9803      	ldr	r0, [sp, #12]
 80a17b4:	9b04      	ldr	r3, [sp, #16]
 80a17b6:	4218      	tst	r0, r3
 80a17b8:	f47f aeda 	bne.w	80a1570 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a17bc:	4600      	mov	r0, r0
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a180e:	79e3      	ldrb	r3, [r4, #7]
 80a1810:	6810      	ldr	r0, [r2, #0]
 80a1812:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1816:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a181a:	88bf      	ldrh	r7, [r7, #4]
 80a181c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1820:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1822:	4600      	mov	r0, r0
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	e6db      	b.n	80a1786 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a19ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a19d2:	4a17      	ldr	r2, [pc, #92]	; (80a1a30 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a19d4:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a19d6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a19da:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a19dc:	2b00      	cmp	r3, #0
 80a19de:	f000 8131 	beq.w	80a1c44 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a19e2:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a19e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a19e8:	f10e 0103 	add.w	r1, lr, #3
 80a19ec:	3b03      	subs	r3, #3
 80a19ee:	b29b      	uxth	r3, r3
 80a19f0:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a19f4:	f89e 3000 	ldrb.w	r3, [lr]
 80a19f8:	b2db      	uxtb	r3, r3
 80a19fa:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a19fe:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1a02:	b2db      	uxtb	r3, r3
 80a1a04:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1a08:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1a0c:	b2db      	uxtb	r3, r3
 80a1a0e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1a12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1a16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1a1a:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a1a1e:	0200      	lsls	r0, r0, #8
 80a1a20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a1a24:	433b      	orrs	r3, r7
 80a1a26:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1a28:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1a2c:	e080      	b.n	80a1b30 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a1a2e:	bf00      	nop
 80a1a30:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a34:	4600      	mov	r0, r0
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1ace:	79e3      	ldrb	r3, [r4, #7]
 80a1ad0:	6810      	ldr	r0, [r2, #0]
 80a1ad2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1ad6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1ada:	88bf      	ldrh	r7, [r7, #4]
 80a1adc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ae0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1ae2:	4600      	mov	r0, r0
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1b18:	9b04      	ldr	r3, [sp, #16]
 80a1b1a:	085b      	lsrs	r3, r3, #1
 80a1b1c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1b1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b22:	3301      	adds	r3, #1
 80a1b24:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1b26:	2b17      	cmp	r3, #23
 80a1b28:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1b2c:	f200 8083 	bhi.w	80a1c36 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1b30:	79e3      	ldrb	r3, [r4, #7]
 80a1b32:	6810      	ldr	r0, [r2, #0]
 80a1b34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b38:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b3c:	88bf      	ldrh	r7, [r7, #4]
 80a1b3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b42:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1b44:	9803      	ldr	r0, [sp, #12]
 80a1b46:	9b04      	ldr	r3, [sp, #16]
 80a1b48:	4218      	tst	r0, r3
 80a1b4a:	f47f af73 	bne.w	80a1a34 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b4e:	4600      	mov	r0, r0
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a1b76:	79e3      	ldrb	r3, [r4, #7]
 80a1b78:	6810      	ldr	r0, [r2, #0]
 80a1b7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b7e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b82:	88bf      	ldrh	r7, [r7, #4]
 80a1b84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b88:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b8a:	4600      	mov	r0, r0
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
 80a1bc4:	bf00      	nop
 80a1bc6:	bf00      	nop
 80a1bc8:	bf00      	nop
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	e770      	b.n	80a1b18 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1c36:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1c3a:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1c3c:	b29b      	uxth	r3, r3
 80a1c3e:	2b00      	cmp	r3, #0
 80a1c40:	f47f aecf 	bne.w	80a19e2 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1c44:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1c46:	f7ff fbcd 	bl	80a13e4 <micros>
 80a1c4a:	6120      	str	r0, [r4, #16]
}
 80a1c4c:	b006      	add	sp, #24
 80a1c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1c52:	4b5e      	ldr	r3, [pc, #376]	; (80a1dcc <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a1c54:	4a5e      	ldr	r2, [pc, #376]	; (80a1dd0 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1c56:	4618      	mov	r0, r3
 80a1c58:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1c5a:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1c5e:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1c60:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1c64:	b292      	uxth	r2, r2
 80a1c66:	2a00      	cmp	r2, #0
 80a1c68:	d0ec      	beq.n	80a1c44 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1c6a:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1c6e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1c72:	f10e 0503 	add.w	r5, lr, #3
 80a1c76:	3a03      	subs	r2, #3
 80a1c78:	b292      	uxth	r2, r2
 80a1c7a:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1c7e:	f89e 2000 	ldrb.w	r2, [lr]
 80a1c82:	b2d2      	uxtb	r2, r2
 80a1c84:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1c88:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1c8c:	b2d2      	uxtb	r2, r2
 80a1c8e:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1c92:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a1c96:	b2d2      	uxtb	r2, r2
 80a1c98:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1c9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1ca0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1ca4:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1ca8:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1cac:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1cb0:	ea42 020c 	orr.w	r2, r2, ip
 80a1cb4:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1cb6:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1cba:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1cbc:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1cbe:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1cc2:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1cc6:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1cca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1cce:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1cd0:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1cd4:	9e03      	ldr	r6, [sp, #12]
 80a1cd6:	9a04      	ldr	r2, [sp, #16]
 80a1cd8:	4216      	tst	r6, r2
 80a1cda:	d023      	beq.n	80a1d24 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1cdc:	685a      	ldr	r2, [r3, #4]
 80a1cde:	9e05      	ldr	r6, [sp, #20]
 80a1ce0:	1b92      	subs	r2, r2, r6
 80a1ce2:	2a4f      	cmp	r2, #79	; 0x4f
 80a1ce4:	d9fa      	bls.n	80a1cdc <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1ce6:	79e2      	ldrb	r2, [r4, #7]
 80a1ce8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1cec:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1cf0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1cf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1cf8:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1cfc:	6842      	ldr	r2, [r0, #4]
 80a1cfe:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1d00:	685a      	ldr	r2, [r3, #4]
 80a1d02:	9e05      	ldr	r6, [sp, #20]
 80a1d04:	1b92      	subs	r2, r2, r6
 80a1d06:	2a07      	cmp	r2, #7
 80a1d08:	d9fa      	bls.n	80a1d00 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1d0a:	9a04      	ldr	r2, [sp, #16]
 80a1d0c:	0852      	lsrs	r2, r2, #1
 80a1d0e:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1d10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1d14:	3201      	adds	r2, #1
 80a1d16:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1d18:	2a17      	cmp	r2, #23
 80a1d1a:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1d1e:	d9cc      	bls.n	80a1cba <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1d20:	46ae      	mov	lr, r5
 80a1d22:	e79d      	b.n	80a1c60 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1d24:	685a      	ldr	r2, [r3, #4]
 80a1d26:	9e05      	ldr	r6, [sp, #20]
 80a1d28:	1b92      	subs	r2, r2, r6
 80a1d2a:	2a18      	cmp	r2, #24
 80a1d2c:	d9fa      	bls.n	80a1d24 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1d2e:	79e2      	ldrb	r2, [r4, #7]
 80a1d30:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1d34:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1d38:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1d40:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1d44:	6842      	ldr	r2, [r0, #4]
 80a1d46:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1d48:	685a      	ldr	r2, [r3, #4]
 80a1d4a:	9e05      	ldr	r6, [sp, #20]
 80a1d4c:	1b92      	subs	r2, r2, r6
 80a1d4e:	2a45      	cmp	r2, #69	; 0x45
 80a1d50:	d9fa      	bls.n	80a1d48 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1d52:	e7da      	b.n	80a1d0a <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1d54:	46ae      	mov	lr, r5
 80a1d56:	f7ff bbda 	b.w	80a150e <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1d5a:	4a1d      	ldr	r2, [pc, #116]	; (80a1dd0 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1d5c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1d60:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1d62:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1d66:	b29b      	uxth	r3, r3
 80a1d68:	2b00      	cmp	r3, #0
 80a1d6a:	f43f af6b 	beq.w	80a1c44 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1d6e:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1d70:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1d74:	f10e 0104 	add.w	r1, lr, #4
 80a1d78:	3b04      	subs	r3, #4
 80a1d7a:	b29b      	uxth	r3, r3
 80a1d7c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1d80:	f89e 3000 	ldrb.w	r3, [lr]
 80a1d84:	b2db      	uxtb	r3, r3
 80a1d86:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1d8a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1d8e:	b2db      	uxtb	r3, r3
 80a1d90:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1d94:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1d98:	b2db      	uxtb	r3, r3
 80a1d9a:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1d9e:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1da2:	b2db      	uxtb	r3, r3
 80a1da4:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1da8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1dac:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1db0:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1db4:	043f      	lsls	r7, r7, #16
 80a1db6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1dba:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1dbe:	4303      	orrs	r3, r0
 80a1dc0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1dc4:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1dc6:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1dca:	e07e      	b.n	80a1eca <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1dcc:	e0001000 	.word	0xe0001000
 80a1dd0:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1dd4:	4600      	mov	r0, r0
 80a1dd6:	bf00      	nop
 80a1dd8:	bf00      	nop
 80a1dda:	bf00      	nop
 80a1ddc:	bf00      	nop
 80a1dde:	bf00      	nop
 80a1de0:	bf00      	nop
 80a1de2:	bf00      	nop
 80a1de4:	bf00      	nop
 80a1de6:	bf00      	nop
 80a1de8:	bf00      	nop
 80a1dea:	bf00      	nop
 80a1dec:	bf00      	nop
 80a1dee:	bf00      	nop
 80a1df0:	bf00      	nop
 80a1df2:	bf00      	nop
 80a1df4:	bf00      	nop
 80a1df6:	bf00      	nop
 80a1df8:	bf00      	nop
 80a1dfa:	bf00      	nop
 80a1dfc:	bf00      	nop
 80a1dfe:	bf00      	nop
 80a1e00:	bf00      	nop
 80a1e02:	bf00      	nop
 80a1e04:	bf00      	nop
 80a1e06:	bf00      	nop
 80a1e08:	bf00      	nop
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
 80a1e40:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1e42:	79e3      	ldrb	r3, [r4, #7]
 80a1e44:	6810      	ldr	r0, [r2, #0]
 80a1e46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e4a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e4e:	88bf      	ldrh	r7, [r7, #4]
 80a1e50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e54:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1e56:	4600      	mov	r0, r0
 80a1e58:	bf00      	nop
 80a1e5a:	bf00      	nop
 80a1e5c:	bf00      	nop
 80a1e5e:	bf00      	nop
 80a1e60:	bf00      	nop
 80a1e62:	bf00      	nop
 80a1e64:	bf00      	nop
 80a1e66:	bf00      	nop
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
 80a1e6e:	bf00      	nop
 80a1e70:	bf00      	nop
 80a1e72:	bf00      	nop
 80a1e74:	bf00      	nop
 80a1e76:	bf00      	nop
 80a1e78:	bf00      	nop
 80a1e7a:	bf00      	nop
 80a1e7c:	bf00      	nop
 80a1e7e:	bf00      	nop
 80a1e80:	bf00      	nop
 80a1e82:	bf00      	nop
 80a1e84:	bf00      	nop
 80a1e86:	bf00      	nop
 80a1e88:	bf00      	nop
 80a1e8a:	bf00      	nop
 80a1e8c:	bf00      	nop
 80a1e8e:	bf00      	nop
 80a1e90:	bf00      	nop
 80a1e92:	bf00      	nop
 80a1e94:	bf00      	nop
 80a1e96:	bf00      	nop
 80a1e98:	bf00      	nop
 80a1e9a:	bf00      	nop
 80a1e9c:	bf00      	nop
 80a1e9e:	bf00      	nop
 80a1ea0:	bf00      	nop
 80a1ea2:	bf00      	nop
 80a1ea4:	bf00      	nop
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1eb4:	9b04      	ldr	r3, [sp, #16]
 80a1eb6:	085b      	lsrs	r3, r3, #1
 80a1eb8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1eba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1ebe:	3301      	adds	r3, #1
 80a1ec0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1ec2:	2b1f      	cmp	r3, #31
 80a1ec4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1ec8:	d87e      	bhi.n	80a1fc8 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1eca:	79e3      	ldrb	r3, [r4, #7]
 80a1ecc:	6810      	ldr	r0, [r2, #0]
 80a1ece:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1ed2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1ed6:	88bf      	ldrh	r7, [r7, #4]
 80a1ed8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1edc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1ede:	9803      	ldr	r0, [sp, #12]
 80a1ee0:	9b04      	ldr	r3, [sp, #16]
 80a1ee2:	4218      	tst	r0, r3
 80a1ee4:	f47f af76 	bne.w	80a1dd4 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1ee8:	4600      	mov	r0, r0
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
 80a1ef0:	bf00      	nop
 80a1ef2:	bf00      	nop
 80a1ef4:	bf00      	nop
 80a1ef6:	bf00      	nop
 80a1ef8:	bf00      	nop
 80a1efa:	bf00      	nop
 80a1efc:	bf00      	nop
 80a1efe:	bf00      	nop
 80a1f00:	bf00      	nop
 80a1f02:	bf00      	nop
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1f10:	79e3      	ldrb	r3, [r4, #7]
 80a1f12:	6810      	ldr	r0, [r2, #0]
 80a1f14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1f18:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1f1c:	88bf      	ldrh	r7, [r7, #4]
 80a1f1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1f22:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1f24:	4600      	mov	r0, r0
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
 80a1f92:	bf00      	nop
 80a1f94:	bf00      	nop
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
 80a1fbc:	bf00      	nop
 80a1fbe:	bf00      	nop
 80a1fc0:	bf00      	nop
 80a1fc2:	bf00      	nop
 80a1fc4:	bf00      	nop
 80a1fc6:	e775      	b.n	80a1eb4 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1fc8:	468e      	mov	lr, r1
 80a1fca:	e6ca      	b.n	80a1d62 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1fcc:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1fce:	2903      	cmp	r1, #3
 80a1fd0:	f000 812e 	beq.w	80a2230 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1fd4:	4a1e      	ldr	r2, [pc, #120]	; (80a2050 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1fd6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1fda:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1fdc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1fe0:	b29b      	uxth	r3, r3
 80a1fe2:	2b00      	cmp	r3, #0
 80a1fe4:	f43f ae2e 	beq.w	80a1c44 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1fe8:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1fea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1fee:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1ff0:	3b03      	subs	r3, #3
 80a1ff2:	b29b      	uxth	r3, r3
 80a1ff4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1ff8:	f89e 3000 	ldrb.w	r3, [lr]
 80a1ffc:	f10e 0103 	add.w	r1, lr, #3
 80a2000:	b2db      	uxtb	r3, r3
 80a2002:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2006:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a200a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a200e:	b2db      	uxtb	r3, r3
 80a2010:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a2014:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2018:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a201c:	b2db      	uxtb	r3, r3
 80a201e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2022:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2026:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a202a:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a202e:	021b      	lsls	r3, r3, #8
 80a2030:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2034:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a2038:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a203c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2040:	433b      	orrs	r3, r7
 80a2042:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2044:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a2048:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a204c:	e07d      	b.n	80a214a <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a204e:	bf00      	nop
 80a2050:	20000200 	.word	0x20000200
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a2054:	9b04      	ldr	r3, [sp, #16]
 80a2056:	085b      	lsrs	r3, r3, #1
 80a2058:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a205a:	4600      	mov	r0, r0
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
 80a2060:	bf00      	nop
 80a2062:	bf00      	nop
 80a2064:	bf00      	nop
 80a2066:	bf00      	nop
 80a2068:	bf00      	nop
 80a206a:	bf00      	nop
 80a206c:	bf00      	nop
 80a206e:	bf00      	nop
 80a2070:	bf00      	nop
 80a2072:	bf00      	nop
 80a2074:	bf00      	nop
 80a2076:	bf00      	nop
 80a2078:	bf00      	nop
 80a207a:	bf00      	nop
 80a207c:	bf00      	nop
 80a207e:	bf00      	nop
 80a2080:	bf00      	nop
 80a2082:	bf00      	nop
 80a2084:	bf00      	nop
 80a2086:	bf00      	nop
 80a2088:	bf00      	nop
 80a208a:	bf00      	nop
 80a208c:	bf00      	nop
 80a208e:	bf00      	nop
 80a2090:	bf00      	nop
 80a2092:	bf00      	nop
 80a2094:	bf00      	nop
 80a2096:	bf00      	nop
 80a2098:	bf00      	nop
 80a209a:	bf00      	nop
 80a209c:	bf00      	nop
 80a209e:	bf00      	nop
 80a20a0:	bf00      	nop
 80a20a2:	bf00      	nop
 80a20a4:	bf00      	nop
 80a20a6:	bf00      	nop
 80a20a8:	bf00      	nop
 80a20aa:	bf00      	nop
 80a20ac:	bf00      	nop
 80a20ae:	bf00      	nop
 80a20b0:	bf00      	nop
 80a20b2:	bf00      	nop
 80a20b4:	bf00      	nop
 80a20b6:	bf00      	nop
 80a20b8:	bf00      	nop
 80a20ba:	bf00      	nop
 80a20bc:	bf00      	nop
 80a20be:	bf00      	nop
 80a20c0:	bf00      	nop
 80a20c2:	bf00      	nop
 80a20c4:	bf00      	nop
 80a20c6:	bf00      	nop
 80a20c8:	bf00      	nop
 80a20ca:	bf00      	nop
 80a20cc:	bf00      	nop
 80a20ce:	bf00      	nop
 80a20d0:	bf00      	nop
 80a20d2:	bf00      	nop
 80a20d4:	bf00      	nop
 80a20d6:	bf00      	nop
 80a20d8:	bf00      	nop
 80a20da:	bf00      	nop
 80a20dc:	bf00      	nop
 80a20de:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a20e0:	79e0      	ldrb	r0, [r4, #7]
 80a20e2:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a20e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a20e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a20ec:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a20f0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a20f4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a20f8:	3301      	adds	r3, #1
 80a20fa:	b2db      	uxtb	r3, r3
 80a20fc:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2100:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2104:	4600      	mov	r0, r0
 80a2106:	bf00      	nop
 80a2108:	bf00      	nop
 80a210a:	bf00      	nop
 80a210c:	bf00      	nop
 80a210e:	bf00      	nop
 80a2110:	bf00      	nop
 80a2112:	bf00      	nop
 80a2114:	bf00      	nop
 80a2116:	bf00      	nop
 80a2118:	bf00      	nop
 80a211a:	bf00      	nop
 80a211c:	bf00      	nop
 80a211e:	bf00      	nop
 80a2120:	bf00      	nop
 80a2122:	bf00      	nop
 80a2124:	bf00      	nop
 80a2126:	bf00      	nop
 80a2128:	bf00      	nop
 80a212a:	bf00      	nop
 80a212c:	bf00      	nop
          if(j==24) break;
 80a212e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2132:	2b18      	cmp	r3, #24
 80a2134:	d07a      	beq.n	80a222c <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a2136:	79e3      	ldrb	r3, [r4, #7]
 80a2138:	6810      	ldr	r0, [r2, #0]
 80a213a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a213e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2142:	88bf      	ldrh	r7, [r7, #4]
 80a2144:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2148:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a214a:	9803      	ldr	r0, [sp, #12]
 80a214c:	9b04      	ldr	r3, [sp, #16]
 80a214e:	4218      	tst	r0, r3
 80a2150:	d180      	bne.n	80a2054 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a2152:	4600      	mov	r0, r0
 80a2154:	bf00      	nop
 80a2156:	bf00      	nop
 80a2158:	bf00      	nop
 80a215a:	bf00      	nop
 80a215c:	bf00      	nop
 80a215e:	bf00      	nop
 80a2160:	bf00      	nop
 80a2162:	bf00      	nop
 80a2164:	bf00      	nop
 80a2166:	bf00      	nop
 80a2168:	bf00      	nop
 80a216a:	bf00      	nop
 80a216c:	bf00      	nop
 80a216e:	bf00      	nop
 80a2170:	bf00      	nop
 80a2172:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a2174:	79e3      	ldrb	r3, [r4, #7]
 80a2176:	6810      	ldr	r0, [r2, #0]
 80a2178:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a217c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2180:	88bf      	ldrh	r7, [r7, #4]
 80a2182:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2186:	831f      	strh	r7, [r3, #24]
          j++;
 80a2188:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a218c:	3301      	adds	r3, #1
 80a218e:	b2db      	uxtb	r3, r3
 80a2190:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a2194:	9b04      	ldr	r3, [sp, #16]
 80a2196:	085b      	lsrs	r3, r3, #1
 80a2198:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a219a:	4600      	mov	r0, r0
 80a219c:	bf00      	nop
 80a219e:	bf00      	nop
 80a21a0:	bf00      	nop
 80a21a2:	bf00      	nop
 80a21a4:	bf00      	nop
 80a21a6:	bf00      	nop
 80a21a8:	bf00      	nop
 80a21aa:	bf00      	nop
 80a21ac:	bf00      	nop
 80a21ae:	bf00      	nop
 80a21b0:	bf00      	nop
 80a21b2:	bf00      	nop
 80a21b4:	bf00      	nop
 80a21b6:	bf00      	nop
 80a21b8:	bf00      	nop
 80a21ba:	bf00      	nop
 80a21bc:	bf00      	nop
 80a21be:	bf00      	nop
 80a21c0:	bf00      	nop
 80a21c2:	bf00      	nop
 80a21c4:	bf00      	nop
 80a21c6:	bf00      	nop
 80a21c8:	bf00      	nop
 80a21ca:	bf00      	nop
 80a21cc:	bf00      	nop
 80a21ce:	bf00      	nop
 80a21d0:	bf00      	nop
 80a21d2:	bf00      	nop
 80a21d4:	bf00      	nop
 80a21d6:	bf00      	nop
 80a21d8:	bf00      	nop
 80a21da:	bf00      	nop
 80a21dc:	bf00      	nop
 80a21de:	bf00      	nop
 80a21e0:	bf00      	nop
 80a21e2:	bf00      	nop
 80a21e4:	bf00      	nop
 80a21e6:	bf00      	nop
 80a21e8:	bf00      	nop
 80a21ea:	bf00      	nop
 80a21ec:	bf00      	nop
 80a21ee:	bf00      	nop
 80a21f0:	bf00      	nop
 80a21f2:	bf00      	nop
 80a21f4:	bf00      	nop
 80a21f6:	bf00      	nop
 80a21f8:	bf00      	nop
 80a21fa:	bf00      	nop
 80a21fc:	bf00      	nop
 80a21fe:	bf00      	nop
 80a2200:	bf00      	nop
 80a2202:	bf00      	nop
 80a2204:	bf00      	nop
 80a2206:	bf00      	nop
 80a2208:	bf00      	nop
 80a220a:	bf00      	nop
 80a220c:	bf00      	nop
 80a220e:	bf00      	nop
 80a2210:	bf00      	nop
 80a2212:	bf00      	nop
 80a2214:	bf00      	nop
 80a2216:	bf00      	nop
 80a2218:	bf00      	nop
 80a221a:	bf00      	nop
 80a221c:	bf00      	nop
 80a221e:	bf00      	nop
 80a2220:	bf00      	nop
 80a2222:	bf00      	nop
          if(j==24) break;
 80a2224:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2228:	2b18      	cmp	r3, #24
 80a222a:	d184      	bne.n	80a2136 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a222c:	468e      	mov	lr, r1
 80a222e:	e6d5      	b.n	80a1fdc <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a2230:	4a17      	ldr	r2, [pc, #92]	; (80a2290 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a2232:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2236:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2238:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a223c:	b29b      	uxth	r3, r3
 80a223e:	2b00      	cmp	r3, #0
 80a2240:	f43f ad00 	beq.w	80a1c44 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a2244:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2246:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a224a:	f10e 0103 	add.w	r1, lr, #3
 80a224e:	3b03      	subs	r3, #3
 80a2250:	b29b      	uxth	r3, r3
 80a2252:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2256:	f89e 3000 	ldrb.w	r3, [lr]
 80a225a:	b2db      	uxtb	r3, r3
 80a225c:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a2260:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a2264:	b2db      	uxtb	r3, r3
 80a2266:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a226a:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a226e:	b2db      	uxtb	r3, r3
 80a2270:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2274:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2278:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a227c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a2280:	021b      	lsls	r3, r3, #8
 80a2282:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2286:	4303      	orrs	r3, r0
 80a2288:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a228a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a228e:	e0e0      	b.n	80a2452 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a2290:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2294:	4600      	mov	r0, r0
 80a2296:	bf00      	nop
 80a2298:	bf00      	nop
 80a229a:	bf00      	nop
 80a229c:	bf00      	nop
 80a229e:	bf00      	nop
 80a22a0:	bf00      	nop
 80a22a2:	bf00      	nop
 80a22a4:	bf00      	nop
 80a22a6:	bf00      	nop
 80a22a8:	bf00      	nop
 80a22aa:	bf00      	nop
 80a22ac:	bf00      	nop
 80a22ae:	bf00      	nop
 80a22b0:	bf00      	nop
 80a22b2:	bf00      	nop
 80a22b4:	bf00      	nop
 80a22b6:	bf00      	nop
 80a22b8:	bf00      	nop
 80a22ba:	bf00      	nop
 80a22bc:	bf00      	nop
 80a22be:	bf00      	nop
 80a22c0:	bf00      	nop
 80a22c2:	bf00      	nop
 80a22c4:	bf00      	nop
 80a22c6:	bf00      	nop
 80a22c8:	bf00      	nop
 80a22ca:	bf00      	nop
 80a22cc:	bf00      	nop
 80a22ce:	bf00      	nop
 80a22d0:	bf00      	nop
 80a22d2:	bf00      	nop
 80a22d4:	bf00      	nop
 80a22d6:	bf00      	nop
 80a22d8:	bf00      	nop
 80a22da:	bf00      	nop
 80a22dc:	bf00      	nop
 80a22de:	bf00      	nop
 80a22e0:	bf00      	nop
 80a22e2:	bf00      	nop
 80a22e4:	bf00      	nop
 80a22e6:	bf00      	nop
 80a22e8:	bf00      	nop
 80a22ea:	bf00      	nop
 80a22ec:	bf00      	nop
 80a22ee:	bf00      	nop
 80a22f0:	bf00      	nop
 80a22f2:	bf00      	nop
 80a22f4:	bf00      	nop
 80a22f6:	bf00      	nop
 80a22f8:	bf00      	nop
 80a22fa:	bf00      	nop
 80a22fc:	bf00      	nop
 80a22fe:	bf00      	nop
 80a2300:	bf00      	nop
 80a2302:	bf00      	nop
 80a2304:	bf00      	nop
 80a2306:	bf00      	nop
 80a2308:	bf00      	nop
 80a230a:	bf00      	nop
 80a230c:	bf00      	nop
 80a230e:	bf00      	nop
 80a2310:	bf00      	nop
 80a2312:	bf00      	nop
 80a2314:	bf00      	nop
 80a2316:	bf00      	nop
 80a2318:	bf00      	nop
 80a231a:	bf00      	nop
 80a231c:	bf00      	nop
 80a231e:	bf00      	nop
 80a2320:	bf00      	nop
 80a2322:	bf00      	nop
 80a2324:	bf00      	nop
 80a2326:	bf00      	nop
 80a2328:	bf00      	nop
 80a232a:	bf00      	nop
 80a232c:	bf00      	nop
 80a232e:	bf00      	nop
 80a2330:	bf00      	nop
 80a2332:	bf00      	nop
 80a2334:	bf00      	nop
 80a2336:	bf00      	nop
 80a2338:	bf00      	nop
 80a233a:	bf00      	nop
 80a233c:	bf00      	nop
 80a233e:	bf00      	nop
 80a2340:	bf00      	nop
 80a2342:	bf00      	nop
 80a2344:	bf00      	nop
 80a2346:	bf00      	nop
 80a2348:	bf00      	nop
 80a234a:	bf00      	nop
 80a234c:	bf00      	nop
 80a234e:	bf00      	nop
 80a2350:	bf00      	nop
 80a2352:	bf00      	nop
 80a2354:	bf00      	nop
 80a2356:	bf00      	nop
 80a2358:	bf00      	nop
 80a235a:	bf00      	nop
 80a235c:	bf00      	nop
 80a235e:	bf00      	nop
 80a2360:	bf00      	nop
 80a2362:	bf00      	nop
 80a2364:	bf00      	nop
 80a2366:	bf00      	nop
 80a2368:	bf00      	nop
 80a236a:	bf00      	nop
 80a236c:	bf00      	nop
 80a236e:	bf00      	nop
 80a2370:	bf00      	nop
 80a2372:	bf00      	nop
 80a2374:	bf00      	nop
 80a2376:	bf00      	nop
 80a2378:	bf00      	nop
 80a237a:	bf00      	nop
 80a237c:	bf00      	nop
 80a237e:	bf00      	nop
 80a2380:	bf00      	nop
 80a2382:	bf00      	nop
 80a2384:	bf00      	nop
 80a2386:	bf00      	nop
 80a2388:	bf00      	nop
 80a238a:	bf00      	nop
 80a238c:	bf00      	nop
 80a238e:	bf00      	nop
 80a2390:	bf00      	nop
 80a2392:	bf00      	nop
 80a2394:	bf00      	nop
 80a2396:	bf00      	nop
 80a2398:	bf00      	nop
 80a239a:	bf00      	nop
 80a239c:	bf00      	nop
 80a239e:	bf00      	nop
 80a23a0:	bf00      	nop
 80a23a2:	bf00      	nop
 80a23a4:	bf00      	nop
 80a23a6:	bf00      	nop
 80a23a8:	bf00      	nop
 80a23aa:	bf00      	nop
 80a23ac:	bf00      	nop
 80a23ae:	bf00      	nop
 80a23b0:	bf00      	nop
 80a23b2:	bf00      	nop
 80a23b4:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a23b6:	79e3      	ldrb	r3, [r4, #7]
 80a23b8:	6810      	ldr	r0, [r2, #0]
 80a23ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a23be:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a23c2:	88bf      	ldrh	r7, [r7, #4]
 80a23c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a23c8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a23ca:	4600      	mov	r0, r0
 80a23cc:	bf00      	nop
 80a23ce:	bf00      	nop
 80a23d0:	bf00      	nop
 80a23d2:	bf00      	nop
 80a23d4:	bf00      	nop
 80a23d6:	bf00      	nop
 80a23d8:	bf00      	nop
 80a23da:	bf00      	nop
 80a23dc:	bf00      	nop
 80a23de:	bf00      	nop
 80a23e0:	bf00      	nop
 80a23e2:	bf00      	nop
 80a23e4:	bf00      	nop
 80a23e6:	bf00      	nop
 80a23e8:	bf00      	nop
 80a23ea:	bf00      	nop
 80a23ec:	bf00      	nop
 80a23ee:	bf00      	nop
 80a23f0:	bf00      	nop
 80a23f2:	bf00      	nop
 80a23f4:	bf00      	nop
 80a23f6:	bf00      	nop
 80a23f8:	bf00      	nop
 80a23fa:	bf00      	nop
 80a23fc:	bf00      	nop
 80a23fe:	bf00      	nop
 80a2400:	bf00      	nop
 80a2402:	bf00      	nop
 80a2404:	bf00      	nop
 80a2406:	bf00      	nop
 80a2408:	bf00      	nop
 80a240a:	bf00      	nop
 80a240c:	bf00      	nop
 80a240e:	bf00      	nop
 80a2410:	bf00      	nop
 80a2412:	bf00      	nop
 80a2414:	bf00      	nop
 80a2416:	bf00      	nop
 80a2418:	bf00      	nop
 80a241a:	bf00      	nop
 80a241c:	bf00      	nop
 80a241e:	bf00      	nop
 80a2420:	bf00      	nop
 80a2422:	bf00      	nop
 80a2424:	bf00      	nop
 80a2426:	bf00      	nop
 80a2428:	bf00      	nop
 80a242a:	bf00      	nop
 80a242c:	bf00      	nop
 80a242e:	bf00      	nop
 80a2430:	bf00      	nop
 80a2432:	bf00      	nop
 80a2434:	bf00      	nop
 80a2436:	bf00      	nop
 80a2438:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a243a:	9b04      	ldr	r3, [sp, #16]
 80a243c:	085b      	lsrs	r3, r3, #1
 80a243e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2440:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2444:	3301      	adds	r3, #1
 80a2446:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a2448:	2b17      	cmp	r3, #23
 80a244a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a244e:	f200 80e3 	bhi.w	80a2618 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a2452:	79e3      	ldrb	r3, [r4, #7]
 80a2454:	6810      	ldr	r0, [r2, #0]
 80a2456:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a245a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a245e:	88bf      	ldrh	r7, [r7, #4]
 80a2460:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2464:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2466:	9803      	ldr	r0, [sp, #12]
 80a2468:	9b04      	ldr	r3, [sp, #16]
 80a246a:	4218      	tst	r0, r3
 80a246c:	f47f af12 	bne.w	80a2294 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2470:	4600      	mov	r0, r0
 80a2472:	bf00      	nop
 80a2474:	bf00      	nop
 80a2476:	bf00      	nop
 80a2478:	bf00      	nop
 80a247a:	bf00      	nop
 80a247c:	bf00      	nop
 80a247e:	bf00      	nop
 80a2480:	bf00      	nop
 80a2482:	bf00      	nop
 80a2484:	bf00      	nop
 80a2486:	bf00      	nop
 80a2488:	bf00      	nop
 80a248a:	bf00      	nop
 80a248c:	bf00      	nop
 80a248e:	bf00      	nop
 80a2490:	bf00      	nop
 80a2492:	bf00      	nop
 80a2494:	bf00      	nop
 80a2496:	bf00      	nop
 80a2498:	bf00      	nop
 80a249a:	bf00      	nop
 80a249c:	bf00      	nop
 80a249e:	bf00      	nop
 80a24a0:	bf00      	nop
 80a24a2:	bf00      	nop
 80a24a4:	bf00      	nop
 80a24a6:	bf00      	nop
 80a24a8:	bf00      	nop
 80a24aa:	bf00      	nop
 80a24ac:	bf00      	nop
 80a24ae:	bf00      	nop
 80a24b0:	bf00      	nop
 80a24b2:	bf00      	nop
 80a24b4:	bf00      	nop
 80a24b6:	bf00      	nop
 80a24b8:	bf00      	nop
 80a24ba:	bf00      	nop
 80a24bc:	bf00      	nop
 80a24be:	bf00      	nop
 80a24c0:	bf00      	nop
 80a24c2:	bf00      	nop
 80a24c4:	bf00      	nop
 80a24c6:	bf00      	nop
 80a24c8:	bf00      	nop
 80a24ca:	bf00      	nop
 80a24cc:	bf00      	nop
 80a24ce:	bf00      	nop
 80a24d0:	bf00      	nop
 80a24d2:	bf00      	nop
 80a24d4:	bf00      	nop
 80a24d6:	bf00      	nop
 80a24d8:	bf00      	nop
 80a24da:	bf00      	nop
 80a24dc:	bf00      	nop
 80a24de:	bf00      	nop
 80a24e0:	bf00      	nop
 80a24e2:	bf00      	nop
 80a24e4:	bf00      	nop
 80a24e6:	bf00      	nop
 80a24e8:	bf00      	nop
 80a24ea:	bf00      	nop
 80a24ec:	bf00      	nop
 80a24ee:	bf00      	nop
 80a24f0:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a24f2:	79e3      	ldrb	r3, [r4, #7]
 80a24f4:	6810      	ldr	r0, [r2, #0]
 80a24f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a24fa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a24fe:	88bf      	ldrh	r7, [r7, #4]
 80a2500:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2504:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2506:	4600      	mov	r0, r0
 80a2508:	bf00      	nop
 80a250a:	bf00      	nop
 80a250c:	bf00      	nop
 80a250e:	bf00      	nop
 80a2510:	bf00      	nop
 80a2512:	bf00      	nop
 80a2514:	bf00      	nop
 80a2516:	bf00      	nop
 80a2518:	bf00      	nop
 80a251a:	bf00      	nop
 80a251c:	bf00      	nop
 80a251e:	bf00      	nop
 80a2520:	bf00      	nop
 80a2522:	bf00      	nop
 80a2524:	bf00      	nop
 80a2526:	bf00      	nop
 80a2528:	bf00      	nop
 80a252a:	bf00      	nop
 80a252c:	bf00      	nop
 80a252e:	bf00      	nop
 80a2530:	bf00      	nop
 80a2532:	bf00      	nop
 80a2534:	bf00      	nop
 80a2536:	bf00      	nop
 80a2538:	bf00      	nop
 80a253a:	bf00      	nop
 80a253c:	bf00      	nop
 80a253e:	bf00      	nop
 80a2540:	bf00      	nop
 80a2542:	bf00      	nop
 80a2544:	bf00      	nop
 80a2546:	bf00      	nop
 80a2548:	bf00      	nop
 80a254a:	bf00      	nop
 80a254c:	bf00      	nop
 80a254e:	bf00      	nop
 80a2550:	bf00      	nop
 80a2552:	bf00      	nop
 80a2554:	bf00      	nop
 80a2556:	bf00      	nop
 80a2558:	bf00      	nop
 80a255a:	bf00      	nop
 80a255c:	bf00      	nop
 80a255e:	bf00      	nop
 80a2560:	bf00      	nop
 80a2562:	bf00      	nop
 80a2564:	bf00      	nop
 80a2566:	bf00      	nop
 80a2568:	bf00      	nop
 80a256a:	bf00      	nop
 80a256c:	bf00      	nop
 80a256e:	bf00      	nop
 80a2570:	bf00      	nop
 80a2572:	bf00      	nop
 80a2574:	bf00      	nop
 80a2576:	bf00      	nop
 80a2578:	bf00      	nop
 80a257a:	bf00      	nop
 80a257c:	bf00      	nop
 80a257e:	bf00      	nop
 80a2580:	bf00      	nop
 80a2582:	bf00      	nop
 80a2584:	bf00      	nop
 80a2586:	bf00      	nop
 80a2588:	bf00      	nop
 80a258a:	bf00      	nop
 80a258c:	bf00      	nop
 80a258e:	bf00      	nop
 80a2590:	bf00      	nop
 80a2592:	bf00      	nop
 80a2594:	bf00      	nop
 80a2596:	bf00      	nop
 80a2598:	bf00      	nop
 80a259a:	bf00      	nop
 80a259c:	bf00      	nop
 80a259e:	bf00      	nop
 80a25a0:	bf00      	nop
 80a25a2:	bf00      	nop
 80a25a4:	bf00      	nop
 80a25a6:	bf00      	nop
 80a25a8:	bf00      	nop
 80a25aa:	bf00      	nop
 80a25ac:	bf00      	nop
 80a25ae:	bf00      	nop
 80a25b0:	bf00      	nop
 80a25b2:	bf00      	nop
 80a25b4:	bf00      	nop
 80a25b6:	bf00      	nop
 80a25b8:	bf00      	nop
 80a25ba:	bf00      	nop
 80a25bc:	bf00      	nop
 80a25be:	bf00      	nop
 80a25c0:	bf00      	nop
 80a25c2:	bf00      	nop
 80a25c4:	bf00      	nop
 80a25c6:	bf00      	nop
 80a25c8:	bf00      	nop
 80a25ca:	bf00      	nop
 80a25cc:	bf00      	nop
 80a25ce:	bf00      	nop
 80a25d0:	bf00      	nop
 80a25d2:	bf00      	nop
 80a25d4:	bf00      	nop
 80a25d6:	bf00      	nop
 80a25d8:	bf00      	nop
 80a25da:	bf00      	nop
 80a25dc:	bf00      	nop
 80a25de:	bf00      	nop
 80a25e0:	bf00      	nop
 80a25e2:	bf00      	nop
 80a25e4:	bf00      	nop
 80a25e6:	bf00      	nop
 80a25e8:	bf00      	nop
 80a25ea:	bf00      	nop
 80a25ec:	bf00      	nop
 80a25ee:	bf00      	nop
 80a25f0:	bf00      	nop
 80a25f2:	bf00      	nop
 80a25f4:	bf00      	nop
 80a25f6:	bf00      	nop
 80a25f8:	bf00      	nop
 80a25fa:	bf00      	nop
 80a25fc:	bf00      	nop
 80a25fe:	bf00      	nop
 80a2600:	bf00      	nop
 80a2602:	bf00      	nop
 80a2604:	bf00      	nop
 80a2606:	bf00      	nop
 80a2608:	bf00      	nop
 80a260a:	bf00      	nop
 80a260c:	bf00      	nop
 80a260e:	bf00      	nop
 80a2610:	bf00      	nop
 80a2612:	bf00      	nop
 80a2614:	bf00      	nop
 80a2616:	e710      	b.n	80a243a <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a2618:	468e      	mov	lr, r1
 80a261a:	e60d      	b.n	80a2238 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a261c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a261c:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a261e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a2620:	428b      	cmp	r3, r1
 80a2622:	d945      	bls.n	80a26b0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a2624:	7a05      	ldrb	r5, [r0, #8]
 80a2626:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a262a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a262e:	b2d6      	uxtb	r6, r2
 80a2630:	b145      	cbz	r5, 80a2644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a2632:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a2634:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a2636:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a2638:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a263c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a2640:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a2644:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a2648:	68c7      	ldr	r7, [r0, #12]
 80a264a:	f1bc 0f06 	cmp.w	ip, #6
 80a264e:	bf0c      	ite	eq
 80a2650:	2504      	moveq	r5, #4
 80a2652:	2503      	movne	r5, #3
 80a2654:	4369      	muls	r1, r5
 80a2656:	f1bc 0f08 	cmp.w	ip, #8
 80a265a:	eb07 0501 	add.w	r5, r7, r1
 80a265e:	d824      	bhi.n	80a26aa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a2660:	f04f 0e01 	mov.w	lr, #1
 80a2664:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a2668:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a266c:	d10c      	bne.n	80a2688 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a266e:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a2672:	d10d      	bne.n	80a2690 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a2674:	f01e 0f10 	tst.w	lr, #16
 80a2678:	d017      	beq.n	80a26aa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a267a:	2bff      	cmp	r3, #255	; 0xff
 80a267c:	bf08      	it	eq
 80a267e:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a2680:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a2682:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a2684:	70ac      	strb	r4, [r5, #2]
        } break;
 80a2686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2688:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a268a:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a268c:	70ae      	strb	r6, [r5, #2]
        } break;
 80a268e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a2690:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a2692:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a2694:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2696:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a2698:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a269a:	b90b      	cbnz	r3, 80a26a0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a269c:	b2d2      	uxtb	r2, r2
 80a269e:	e002      	b.n	80a26a6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a26a0:	435a      	muls	r2, r3
 80a26a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a26a6:	70ea      	strb	r2, [r5, #3]
        } break;
 80a26a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a26aa:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a26ac:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a26ae:	70ae      	strb	r6, [r5, #2]
 80a26b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a26b2 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a26b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a26b6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a26ba:	4770      	bx	lr

080a26bc <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a26bc:	8840      	ldrh	r0, [r0, #2]
 80a26be:	4770      	bx	lr

080a26c0 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a26c0:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a26c2:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a26c4:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a26c6:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a26c8:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a26ca:	d01e      	beq.n	80a270a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a26cc:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a26ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a26d2:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a26d4:	d00c      	beq.n	80a26f0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a26d6:	29ff      	cmp	r1, #255	; 0xff
 80a26d8:	bf0f      	iteee	eq
 80a26da:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a26de:	0211      	lslne	r1, r2, #8
 80a26e0:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a26e4:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a26e8:	bf0c      	ite	eq
 80a26ea:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a26ee:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a26f0:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a26f2:	1b29      	subs	r1, r5, r4
 80a26f4:	8886      	ldrh	r6, [r0, #4]
 80a26f6:	b289      	uxth	r1, r1
 80a26f8:	428e      	cmp	r6, r1
 80a26fa:	d905      	bls.n	80a2708 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a26fc:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a26fe:	4359      	muls	r1, r3
 80a2700:	1209      	asrs	r1, r1, #8
 80a2702:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2706:	e7f4      	b.n	80a26f2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a2708:	7202      	strb	r2, [r0, #8]
 80a270a:	bd70      	pop	{r4, r5, r6, pc}

080a270c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a270c:	b508      	push	{r3, lr}
 80a270e:	f000 fa3d 	bl	80a2b8c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a2712:	f000 fa3b 	bl	80a2b8c <HAL_Pin_Map>
 80a2716:	4b01      	ldr	r3, [pc, #4]	; (80a271c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a2718:	6018      	str	r0, [r3, #0]
 80a271a:	bd08      	pop	{r3, pc}
 80a271c:	20000200 	.word	0x20000200

080a2720 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 80a2720:	b538      	push	{r3, r4, r5, lr}
 80a2722:	4604      	mov	r4, r0
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
 80a2724:	6183      	str	r3, [r0, #24]
  this->motor_pin_3 = motor_pin_3;
 80a2726:	9b04      	ldr	r3, [sp, #16]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a2728:	2500      	movs	r5, #0
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
 80a272a:	61c3      	str	r3, [r0, #28]
  this->motor_pin_4 = motor_pin_4;
 80a272c:	9b05      	ldr	r3, [sp, #20]
  this->direction = 0;      // motor direction
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80a272e:	6142      	str	r2, [r0, #20]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;
 80a2730:	6203      	str	r3, [r0, #32]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a2732:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
 80a2734:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80a2736:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80a2738:	6081      	str	r1, [r0, #8]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 80a273a:	b290      	uxth	r0, r2
 80a273c:	2101      	movs	r1, #1
 80a273e:	f001 fcb9 	bl	80a40b4 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
 80a2742:	8b20      	ldrh	r0, [r4, #24]
 80a2744:	2101      	movs	r1, #1
 80a2746:	f001 fcb5 	bl	80a40b4 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
 80a274a:	8ba0      	ldrh	r0, [r4, #28]
 80a274c:	2101      	movs	r1, #1
 80a274e:	f001 fcb1 	bl	80a40b4 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
 80a2752:	8c20      	ldrh	r0, [r4, #32]
 80a2754:	2101      	movs	r1, #1
 80a2756:	f001 fcad 	bl	80a40b4 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a275a:	2304      	movs	r3, #4
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80a275c:	6265      	str	r5, [r4, #36]	; 0x24

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a275e:	60e3      	str	r3, [r4, #12]
}
 80a2760:	4620      	mov	r0, r4
 80a2762:	bd38      	pop	{r3, r4, r5, pc}

080a2764 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 80a2764:	6882      	ldr	r2, [r0, #8]
 80a2766:	4b03      	ldr	r3, [pc, #12]	; (80a2774 <_ZN7Stepper8setSpeedEl+0x10>)
 80a2768:	fb93 f3f2 	sdiv	r3, r3, r2
 80a276c:	fb93 f1f1 	sdiv	r1, r3, r1
 80a2770:	6041      	str	r1, [r0, #4]
 80a2772:	4770      	bx	lr
 80a2774:	03938700 	.word	0x03938700

080a2778 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a2778:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
 80a277a:	68c3      	ldr	r3, [r0, #12]

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a277c:	4604      	mov	r4, r0
  if (this->pin_count == 2) {
 80a277e:	2b02      	cmp	r3, #2

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a2780:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
 80a2782:	d117      	bne.n	80a27b4 <_ZN7Stepper9stepMotorEi+0x3c>
    switch (thisStep) {
 80a2784:	2903      	cmp	r1, #3
 80a2786:	d815      	bhi.n	80a27b4 <_ZN7Stepper9stepMotorEi+0x3c>
 80a2788:	e8df f001 	tbb	[pc, r1]
 80a278c:	0c0a0402 	.word	0x0c0a0402
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
 80a2790:	2100      	movs	r1, #0
 80a2792:	e000      	b.n	80a2796 <_ZN7Stepper9stepMotorEi+0x1e>
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
 80a2794:	2101      	movs	r1, #1
 80a2796:	8aa0      	ldrh	r0, [r4, #20]
 80a2798:	f001 fc9d 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a279c:	2101      	movs	r1, #1
 80a279e:	e006      	b.n	80a27ae <_ZN7Stepper9stepMotorEi+0x36>
      break;
      case 2:  // 10
        digitalWrite(motor_pin_1, HIGH);
 80a27a0:	2101      	movs	r1, #1
 80a27a2:	e000      	b.n	80a27a6 <_ZN7Stepper9stepMotorEi+0x2e>
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
 80a27a4:	2100      	movs	r1, #0
 80a27a6:	8aa0      	ldrh	r0, [r4, #20]
 80a27a8:	f001 fc95 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a27ac:	2100      	movs	r1, #0
 80a27ae:	8b20      	ldrh	r0, [r4, #24]
 80a27b0:	f001 fc91 	bl	80a40d6 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
 80a27b4:	68e3      	ldr	r3, [r4, #12]
 80a27b6:	2b04      	cmp	r3, #4
 80a27b8:	d12f      	bne.n	80a281a <_ZN7Stepper9stepMotorEi+0xa2>
    switch (thisStep) {
 80a27ba:	2d03      	cmp	r5, #3
 80a27bc:	d82d      	bhi.n	80a281a <_ZN7Stepper9stepMotorEi+0xa2>
 80a27be:	e8df f005 	tbb	[pc, r5]
 80a27c2:	0802      	.short	0x0802
 80a27c4:	1c16      	.short	0x1c16
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 80a27c6:	2101      	movs	r1, #1
 80a27c8:	8aa0      	ldrh	r0, [r4, #20]
 80a27ca:	f001 fc84 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a27ce:	2100      	movs	r1, #0
 80a27d0:	e004      	b.n	80a27dc <_ZN7Stepper9stepMotorEi+0x64>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
 80a27d2:	2100      	movs	r1, #0
 80a27d4:	8aa0      	ldrh	r0, [r4, #20]
 80a27d6:	f001 fc7e 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a27da:	2101      	movs	r1, #1
 80a27dc:	8b20      	ldrh	r0, [r4, #24]
 80a27de:	f001 fc7a 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a27e2:	2101      	movs	r1, #1
 80a27e4:	8ba0      	ldrh	r0, [r4, #28]
 80a27e6:	f001 fc76 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a27ea:	2100      	movs	r1, #0
 80a27ec:	e012      	b.n	80a2814 <_ZN7Stepper9stepMotorEi+0x9c>
      break;
      case 2:  //0101
        digitalWrite(motor_pin_1, LOW);
 80a27ee:	2100      	movs	r1, #0
 80a27f0:	8aa0      	ldrh	r0, [r4, #20]
 80a27f2:	f001 fc70 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a27f6:	2101      	movs	r1, #1
 80a27f8:	e004      	b.n	80a2804 <_ZN7Stepper9stepMotorEi+0x8c>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
 80a27fa:	2101      	movs	r1, #1
 80a27fc:	8aa0      	ldrh	r0, [r4, #20]
 80a27fe:	f001 fc6a 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2802:	2100      	movs	r1, #0
 80a2804:	8b20      	ldrh	r0, [r4, #24]
 80a2806:	f001 fc66 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a280a:	2100      	movs	r1, #0
 80a280c:	8ba0      	ldrh	r0, [r4, #28]
 80a280e:	f001 fc62 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a2812:	2101      	movs	r1, #1
 80a2814:	8c20      	ldrh	r0, [r4, #32]
 80a2816:	f001 fc5e 	bl	80a40d6 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
 80a281a:	68e3      	ldr	r3, [r4, #12]
 80a281c:	2b05      	cmp	r3, #5
 80a281e:	d170      	bne.n	80a2902 <_ZN7Stepper9stepMotorEi+0x18a>
    switch (thisStep) {
 80a2820:	2d09      	cmp	r5, #9
 80a2822:	d86e      	bhi.n	80a2902 <_ZN7Stepper9stepMotorEi+0x18a>
 80a2824:	e8df f005 	tbb	[pc, r5]
 80a2828:	23150b05 	.word	0x23150b05
 80a282c:	43352b25 	.word	0x43352b25
 80a2830:	5755      	.short	0x5755
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
 80a2832:	2100      	movs	r1, #0
 80a2834:	8aa0      	ldrh	r0, [r4, #20]
 80a2836:	f001 fc4e 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a283a:	2101      	movs	r1, #1
 80a283c:	e050      	b.n	80a28e0 <_ZN7Stepper9stepMotorEi+0x168>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 1:  // 01001
        digitalWrite(motor_pin_1, LOW);
 80a283e:	2100      	movs	r1, #0
 80a2840:	8aa0      	ldrh	r0, [r4, #20]
 80a2842:	f001 fc48 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a2846:	2101      	movs	r1, #1
 80a2848:	8b20      	ldrh	r0, [r4, #24]
 80a284a:	f001 fc44 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a284e:	2100      	movs	r1, #0
 80a2850:	e04a      	b.n	80a28e8 <_ZN7Stepper9stepMotorEi+0x170>
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 2:  // 01011
        digitalWrite(motor_pin_1, LOW);
 80a2852:	2100      	movs	r1, #0
 80a2854:	8aa0      	ldrh	r0, [r4, #20]
 80a2856:	f001 fc3e 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a285a:	2101      	movs	r1, #1
 80a285c:	8b20      	ldrh	r0, [r4, #24]
 80a285e:	f001 fc3a 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a2862:	2100      	movs	r1, #0
 80a2864:	8ba0      	ldrh	r0, [r4, #28]
 80a2866:	f001 fc36 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a286a:	2101      	movs	r1, #1
 80a286c:	e040      	b.n	80a28f0 <_ZN7Stepper9stepMotorEi+0x178>
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 3:  // 01010
        digitalWrite(motor_pin_1, LOW);
 80a286e:	2100      	movs	r1, #0
 80a2870:	e000      	b.n	80a2874 <_ZN7Stepper9stepMotorEi+0xfc>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 4:  // 11010
        digitalWrite(motor_pin_1, HIGH);
 80a2872:	2101      	movs	r1, #1
 80a2874:	8aa0      	ldrh	r0, [r4, #20]
 80a2876:	f001 fc2e 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a287a:	2101      	movs	r1, #1
 80a287c:	e004      	b.n	80a2888 <_ZN7Stepper9stepMotorEi+0x110>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 5:  // 10010
        digitalWrite(motor_pin_1, HIGH);
 80a287e:	2101      	movs	r1, #1
 80a2880:	8aa0      	ldrh	r0, [r4, #20]
 80a2882:	f001 fc28 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a2886:	2100      	movs	r1, #0
 80a2888:	8b20      	ldrh	r0, [r4, #24]
 80a288a:	f001 fc24 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a288e:	2100      	movs	r1, #0
 80a2890:	e008      	b.n	80a28a4 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 6:  // 10110
        digitalWrite(motor_pin_1, HIGH);
 80a2892:	2101      	movs	r1, #1
 80a2894:	8aa0      	ldrh	r0, [r4, #20]
 80a2896:	f001 fc1e 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a289a:	2100      	movs	r1, #0
 80a289c:	8b20      	ldrh	r0, [r4, #24]
 80a289e:	f001 fc1a 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a28a2:	2101      	movs	r1, #1
 80a28a4:	8ba0      	ldrh	r0, [r4, #28]
 80a28a6:	f001 fc16 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a28aa:	2101      	movs	r1, #1
 80a28ac:	e00c      	b.n	80a28c8 <_ZN7Stepper9stepMotorEi+0x150>
        digitalWrite(motor_pin_5, LOW);
        break;
      case 7:  // 10100
        digitalWrite(motor_pin_1, HIGH);
 80a28ae:	2101      	movs	r1, #1
 80a28b0:	8aa0      	ldrh	r0, [r4, #20]
 80a28b2:	f001 fc10 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a28b6:	2100      	movs	r1, #0
 80a28b8:	8b20      	ldrh	r0, [r4, #24]
 80a28ba:	f001 fc0c 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a28be:	2101      	movs	r1, #1
 80a28c0:	8ba0      	ldrh	r0, [r4, #28]
 80a28c2:	f001 fc08 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a28c6:	2100      	movs	r1, #0
 80a28c8:	8c20      	ldrh	r0, [r4, #32]
 80a28ca:	f001 fc04 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
 80a28ce:	2100      	movs	r1, #0
 80a28d0:	e012      	b.n	80a28f8 <_ZN7Stepper9stepMotorEi+0x180>
        break;
      case 8:  // 10101
        digitalWrite(motor_pin_1, HIGH);
 80a28d2:	2101      	movs	r1, #1
 80a28d4:	e000      	b.n	80a28d8 <_ZN7Stepper9stepMotorEi+0x160>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
 80a28d6:	2100      	movs	r1, #0
 80a28d8:	8aa0      	ldrh	r0, [r4, #20]
 80a28da:	f001 fbfc 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a28de:	2100      	movs	r1, #0
 80a28e0:	8b20      	ldrh	r0, [r4, #24]
 80a28e2:	f001 fbf8 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a28e6:	2101      	movs	r1, #1
 80a28e8:	8ba0      	ldrh	r0, [r4, #28]
 80a28ea:	f001 fbf4 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a28ee:	2100      	movs	r1, #0
 80a28f0:	8c20      	ldrh	r0, [r4, #32]
 80a28f2:	f001 fbf0 	bl	80a40d6 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
 80a28f6:	2101      	movs	r1, #1
 80a28f8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
 80a28fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
 80a28fe:	f001 bbea 	b.w	80a40d6 <digitalWrite>
 80a2902:	bd38      	pop	{r3, r4, r5, pc}

080a2904 <_ZN7Stepper4stepEi>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a2904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int steps_left = abs(steps_to_move);  // how many steps to take

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a2906:	2900      	cmp	r1, #0
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a2908:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a290c:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a290e:	eba5 75e1 	sub.w	r5, r5, r1, asr #31

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a2912:	dd01      	ble.n	80a2918 <_ZN7Stepper4stepEi+0x14>
 80a2914:	2301      	movs	r3, #1
 80a2916:	e001      	b.n	80a291c <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
 80a2918:	d001      	beq.n	80a291e <_ZN7Stepper4stepEi+0x1a>
 80a291a:	2300      	movs	r3, #0
 80a291c:	6023      	str	r3, [r4, #0]
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
          this->step_number = 0;
 80a291e:	2700      	movs	r7, #0
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
        stepMotor(this->step_number % 10);
 80a2920:	260a      	movs	r6, #10
  if (steps_to_move > 0) { this->direction = 1; }
  if (steps_to_move < 0) { this->direction = 0; }


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80a2922:	2d00      	cmp	r5, #0
 80a2924:	d02f      	beq.n	80a2986 <_ZN7Stepper4stepEi+0x82>
 80a2926:	f000 f921 	bl	80a2b6c <HAL_Timer_Get_Micro_Seconds>
  {
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
 80a292a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a292c:	6862      	ldr	r2, [r4, #4]
 80a292e:	1ac3      	subs	r3, r0, r3
 80a2930:	4293      	cmp	r3, r2
 80a2932:	d3f6      	bcc.n	80a2922 <_ZN7Stepper4stepEi+0x1e>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a2934:	6823      	ldr	r3, [r4, #0]
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80a2936:	62a0      	str	r0, [r4, #40]	; 0x28
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a2938:	2b01      	cmp	r3, #1
 80a293a:	6923      	ldr	r3, [r4, #16]
 80a293c:	d106      	bne.n	80a294c <_ZN7Stepper4stepEi+0x48>
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
 80a293e:	68a2      	ldr	r2, [r4, #8]
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a2940:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
 80a2942:	4293      	cmp	r3, r2
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a2944:	6123      	str	r3, [r4, #16]
        if (this->step_number == this->number_of_steps) {
 80a2946:	d107      	bne.n	80a2958 <_ZN7Stepper4stepEi+0x54>
          this->step_number = 0;
 80a2948:	6127      	str	r7, [r4, #16]
 80a294a:	e005      	b.n	80a2958 <_ZN7Stepper4stepEi+0x54>
        }
      }
      else
      {
        if (this->step_number == 0) {
 80a294c:	b90b      	cbnz	r3, 80a2952 <_ZN7Stepper4stepEi+0x4e>
          this->step_number = this->number_of_steps;
 80a294e:	68a3      	ldr	r3, [r4, #8]
 80a2950:	6123      	str	r3, [r4, #16]
        }
        this->step_number--;
 80a2952:	6923      	ldr	r3, [r4, #16]
 80a2954:	3b01      	subs	r3, #1
 80a2956:	6123      	str	r3, [r4, #16]
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a2958:	68e3      	ldr	r3, [r4, #12]
          this->step_number = this->number_of_steps;
        }
        this->step_number--;
      }
      // decrement the steps left:
      steps_left--;
 80a295a:	3d01      	subs	r5, #1
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a295c:	2b05      	cmp	r3, #5
 80a295e:	6923      	ldr	r3, [r4, #16]
 80a2960:	d104      	bne.n	80a296c <_ZN7Stepper4stepEi+0x68>
        stepMotor(this->step_number % 10);
 80a2962:	fb93 f1f6 	sdiv	r1, r3, r6
 80a2966:	fb06 3111 	mls	r1, r6, r1, r3
 80a296a:	e008      	b.n	80a297e <_ZN7Stepper4stepEi+0x7a>
      else
        stepMotor(this->step_number % 4);
 80a296c:	4906      	ldr	r1, [pc, #24]	; (80a2988 <_ZN7Stepper4stepEi+0x84>)
 80a296e:	4019      	ands	r1, r3
 80a2970:	2900      	cmp	r1, #0
 80a2972:	bfbe      	ittt	lt
 80a2974:	f101 31ff 	addlt.w	r1, r1, #4294967295	; 0xffffffff
 80a2978:	f061 0103 	ornlt	r1, r1, #3
 80a297c:	3101      	addlt	r1, #1
 80a297e:	4620      	mov	r0, r4
 80a2980:	f7ff fefa 	bl	80a2778 <_ZN7Stepper9stepMotorEi>
 80a2984:	e7cd      	b.n	80a2922 <_ZN7Stepper4stepEi+0x1e>
 80a2986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2988:	80000003 	.word	0x80000003

080a298c <_GLOBAL__sub_I__ZN7StepperC2Eiii>:
 80a298c:	f000 b8fe 	b.w	80a2b8c <HAL_Pin_Map>

080a2990 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a2990:	2300      	movs	r3, #0
 80a2992:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a2994:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a2996:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a2998:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a299a:	6503      	str	r3, [r0, #80]	; 0x50
 80a299c:	4770      	bx	lr
	...

080a29a0 <_ZN10OSCMessageC1Ev>:
#include "simple-OSC.h"

OSCMessage::OSCMessage()
 80a29a0:	b538      	push	{r3, r4, r5, lr}
 80a29a2:	4604      	mov	r4, r0
 80a29a4:	4d0c      	ldr	r5, [pc, #48]	; (80a29d8 <_ZN10OSCMessageC1Ev+0x38>)
 80a29a6:	3008      	adds	r0, #8
 80a29a8:	4629      	mov	r1, r5
 80a29aa:	f000 febb 	bl	80a3724 <_ZN6StringC1EPK19__FlashStringHelper>
 80a29ae:	4629      	mov	r1, r5
 80a29b0:	f104 0018 	add.w	r0, r4, #24
 80a29b4:	f000 feb6 	bl	80a3724 <_ZN6StringC1EPK19__FlashStringHelper>
 80a29b8:	4629      	mov	r1, r5
 80a29ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a29be:	f000 feb1 	bl	80a3724 <_ZN6StringC1EPK19__FlashStringHelper>
 80a29c2:	4629      	mov	r1, r5
 80a29c4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a29c8:	f000 feac 	bl	80a3724 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a29cc:	4620      	mov	r0, r4
 80a29ce:	f7ff ffdf 	bl	80a2990 <_ZN10OSCMessage12setupMessageEv>
}
 80a29d2:	4620      	mov	r0, r4
 80a29d4:	bd38      	pop	{r3, r4, r5, pc}
 80a29d6:	bf00      	nop
 80a29d8:	080a57f6 	.word	0x080a57f6

080a29dc <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a29dc:	b510      	push	{r4, lr}
 80a29de:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a29e0:	6800      	ldr	r0, [r0, #0]
 80a29e2:	f000 fae9 	bl	80a2fb8 <free>
    free(inputDatas);
 80a29e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a29e8:	f000 fae6 	bl	80a2fb8 <free>
    free(outputDatas);
 80a29ec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a29ee:	f000 fae3 	bl	80a2fb8 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a29f2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a29f6:	f000 fe4e 	bl	80a3696 <_ZN6StringD1Ev>
 80a29fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a29fe:	f000 fe4a 	bl	80a3696 <_ZN6StringD1Ev>
 80a2a02:	f104 0018 	add.w	r0, r4, #24
 80a2a06:	f000 fe46 	bl	80a3696 <_ZN6StringD1Ev>
 80a2a0a:	f104 0008 	add.w	r0, r4, #8
 80a2a0e:	f000 fe42 	bl	80a3696 <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a2a12:	4620      	mov	r0, r4
 80a2a14:	bd10      	pop	{r4, pc}

080a2a16 <_ZN10OSCMessage4fillEc>:

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a2a16:	b538      	push	{r3, r4, r5, lr}
 80a2a18:	460d      	mov	r5, r1
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a2a1a:	6841      	ldr	r1, [r0, #4]
    free(outputDatas);
}

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a2a1c:	4604      	mov	r4, r0
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a2a1e:	3101      	adds	r1, #1
 80a2a20:	6800      	ldr	r0, [r0, #0]
 80a2a22:	f000 fad1 	bl	80a2fc8 <realloc>
 80a2a26:	6020      	str	r0, [r4, #0]
    if (incomingBuffer != NULL)
 80a2a28:	b118      	cbz	r0, 80a2a32 <_ZN10OSCMessage4fillEc+0x1c>
    {
        incomingBuffer[incomingBufferSize++] = incomingByte;
 80a2a2a:	6863      	ldr	r3, [r4, #4]
 80a2a2c:	1c5a      	adds	r2, r3, #1
 80a2a2e:	6062      	str	r2, [r4, #4]
 80a2a30:	54c5      	strb	r5, [r0, r3]
 80a2a32:	bd38      	pop	{r3, r4, r5, pc}

080a2a34 <_ZN10OSCMessage5parseEv>:
    }
}

bool OSCMessage::parse()
{
 80a2a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a3c:	4606      	mov	r6, r0
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
    int dataLocation = -1;
 80a2a3e:	4614      	mov	r4, r2

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
 80a2a40:	4691      	mov	r9, r2
}

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
 80a2a42:	4690      	mov	r8, r2
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a2a44:	b083      	sub	sp, #12
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
 80a2a46:	f100 0b18 	add.w	fp, r0, #24
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a2a4a:	af00      	add	r7, sp, #0
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a2a4c:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a2a50:	1c55      	adds	r5, r2, #1
 80a2a52:	45aa      	cmp	sl, r5
 80a2a54:	dd61      	ble.n	80a2b1a <_ZN10OSCMessage5parseEv+0xe6>
    {
        if (incomingBuffer[i] == 44)
 80a2a56:	6831      	ldr	r1, [r6, #0]
 80a2a58:	5d4b      	ldrb	r3, [r1, r5]
 80a2a5a:	2b2c      	cmp	r3, #44	; 0x2c
 80a2a5c:	d110      	bne.n	80a2a80 <_ZN10OSCMessage5parseEv+0x4c>
        {
            char charAddress[i-1];
            memcpy(charAddress,incomingBuffer,i-1);
            inputAddress = charAddress;
            addressLocation = i;
 80a2a5e:	46e8      	mov	r8, sp
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
    {
        if (incomingBuffer[i] == 44)
        {
            char charAddress[i-1];
 80a2a60:	1dd3      	adds	r3, r2, #7
 80a2a62:	f023 0307 	bic.w	r3, r3, #7
 80a2a66:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charAddress,incomingBuffer,i-1);
 80a2a6a:	4668      	mov	r0, sp
 80a2a6c:	f002 fcae 	bl	80a53cc <memcpy>
            inputAddress = charAddress;
 80a2a70:	4669      	mov	r1, sp
 80a2a72:	f106 0008 	add.w	r0, r6, #8
 80a2a76:	f000 fe68 	bl	80a374a <_ZN6StringaSEPKc>
 80a2a7a:	46c5      	mov	sp, r8
 80a2a7c:	46a8      	mov	r8, r5
 80a2a7e:	e04a      	b.n	80a2b16 <_ZN10OSCMessage5parseEv+0xe2>
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
 80a2a80:	f1b8 0f00 	cmp.w	r8, #0
 80a2a84:	dd47      	ble.n	80a2b16 <_ZN10OSCMessage5parseEv+0xe2>
 80a2a86:	b9bb      	cbnz	r3, 80a2ab8 <_ZN10OSCMessage5parseEv+0x84>
 80a2a88:	f1b9 0f00 	cmp.w	r9, #0
 80a2a8c:	da14      	bge.n	80a2ab8 <_ZN10OSCMessage5parseEv+0x84>
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
            typesLocation = i;
 80a2a8e:	46e9      	mov	r9, sp
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
 80a2a90:	ebc8 0305 	rsb	r3, r8, r5
 80a2a94:	3306      	adds	r3, #6
 80a2a96:	f023 0307 	bic.w	r3, r3, #7
 80a2a9a:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
 80a2a9e:	f108 0301 	add.w	r3, r8, #1
 80a2aa2:	4419      	add	r1, r3
 80a2aa4:	4668      	mov	r0, sp
 80a2aa6:	f002 fc91 	bl	80a53cc <memcpy>
            inputTypes = charTypes;
 80a2aaa:	4669      	mov	r1, sp
 80a2aac:	4658      	mov	r0, fp
 80a2aae:	f000 fe4c 	bl	80a374a <_ZN6StringaSEPKc>
 80a2ab2:	46cd      	mov	sp, r9
            typesLocation = i;
 80a2ab4:	46a9      	mov	r9, r5
 80a2ab6:	e02e      	b.n	80a2b16 <_ZN10OSCMessage5parseEv+0xe2>
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
 80a2ab8:	f1b9 0f00 	cmp.w	r9, #0
 80a2abc:	dd2b      	ble.n	80a2b16 <_ZN10OSCMessage5parseEv+0xe2>
 80a2abe:	2c00      	cmp	r4, #0
 80a2ac0:	da28      	bge.n	80a2b14 <_ZN10OSCMessage5parseEv+0xe0>
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a2ac2:	ebc8 0009 	rsb	r0, r8, r9
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a2ac6:	2304      	movs	r3, #4
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a2ac8:	1e44      	subs	r4, r0, #1
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a2aca:	fb90 f0f3 	sdiv	r0, r0, r3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a2ace:	2800      	cmp	r0, #0
 80a2ad0:	db06      	blt.n	80a2ae0 <_ZN10OSCMessage5parseEv+0xac>
 80a2ad2:	f001 fe15 	bl	80a4700 <__aeabi_i2d>
 80a2ad6:	2200      	movs	r2, #0
 80a2ad8:	4b13      	ldr	r3, [pc, #76]	; (80a2b28 <_ZN10OSCMessage5parseEv+0xf4>)
 80a2ada:	f001 fcc5 	bl	80a4468 <__adddf3>
 80a2ade:	e005      	b.n	80a2aec <_ZN10OSCMessage5parseEv+0xb8>
 80a2ae0:	f001 fe0e 	bl	80a4700 <__aeabi_i2d>
 80a2ae4:	2200      	movs	r2, #0
 80a2ae6:	4b10      	ldr	r3, [pc, #64]	; (80a2b28 <_ZN10OSCMessage5parseEv+0xf4>)
 80a2ae8:	f001 fcbc 	bl	80a4464 <__aeabi_dsub>
 80a2aec:	f002 f91e 	bl	80a4d2c <__aeabi_d2iz>
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
 80a2af0:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 80a2af4:	3403      	adds	r4, #3
 80a2af6:	444c      	add	r4, r9
            inputDatas = (char *) malloc ( datasSize );
 80a2af8:	ebc4 020a 	rsb	r2, r4, sl
 80a2afc:	4610      	mov	r0, r2
 80a2afe:	607a      	str	r2, [r7, #4]
 80a2b00:	f000 fa52 	bl	80a2fa8 <malloc>
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a2b04:	6831      	ldr	r1, [r6, #0]
            int typesCount = typesLocation - addressLocation - 1;
            int bitCount = 4*round((typesCount+1)/4)+3;
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
            inputDatas = (char *) malloc ( datasSize );
 80a2b06:	62b0      	str	r0, [r6, #40]	; 0x28
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a2b08:	4421      	add	r1, r4
 80a2b0a:	687a      	ldr	r2, [r7, #4]
 80a2b0c:	f002 fc5e 	bl	80a53cc <memcpy>
 80a2b10:	4654      	mov	r4, sl
 80a2b12:	e000      	b.n	80a2b16 <_ZN10OSCMessage5parseEv+0xe2>
             Serial.println();
             }
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
 80a2b14:	d103      	bne.n	80a2b1e <_ZN10OSCMessage5parseEv+0xea>
 80a2b16:	462a      	mov	r2, r5
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a2b18:	e798      	b.n	80a2a4c <_ZN10OSCMessage5parseEv+0x18>
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
        }
    }
    return false;
 80a2b1a:	2000      	movs	r0, #0
 80a2b1c:	e000      	b.n	80a2b20 <_ZN10OSCMessage5parseEv+0xec>
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
 80a2b1e:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80a2b20:	370c      	adds	r7, #12
 80a2b22:	46bd      	mov	sp, r7
 80a2b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b28:	3fe00000 	.word	0x3fe00000

080a2b2c <_ZN10OSCMessage5routeEPKcPFvRS_E>:

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
 80a2b2c:	b570      	push	{r4, r5, r6, lr}
 80a2b2e:	4604      	mov	r4, r0
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2b30:	3008      	adds	r0, #8
 80a2b32:	4615      	mov	r5, r2
 80a2b34:	f000 fe1a 	bl	80a376c <_ZNK6String6equalsEPKc>
    if( inputAddress == pattern)
 80a2b38:	b120      	cbz	r0, 80a2b44 <_ZN10OSCMessage5routeEPKcPFvRS_E+0x18>
    {
        callback(*this);
 80a2b3a:	4620      	mov	r0, r4
 80a2b3c:	462b      	mov	r3, r5
    }
}
 80a2b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
    if( inputAddress == pattern)
    {
        callback(*this);
 80a2b42:	4718      	bx	r3
 80a2b44:	bd70      	pop	{r4, r5, r6, pc}

080a2b46 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a2b46:	f000 b821 	b.w	80a2b8c <HAL_Pin_Map>
	...

080a2b4c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2b4c:	b508      	push	{r3, lr}
 80a2b4e:	4b02      	ldr	r3, [pc, #8]	; (80a2b58 <os_mutex_create+0xc>)
 80a2b50:	681b      	ldr	r3, [r3, #0]
 80a2b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2b54:	9301      	str	r3, [sp, #4]
 80a2b56:	bd08      	pop	{r3, pc}
 80a2b58:	080601d0 	.word	0x080601d0

080a2b5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2b5c:	b508      	push	{r3, lr}
 80a2b5e:	4b02      	ldr	r3, [pc, #8]	; (80a2b68 <HAL_RNG_GetRandomNumber+0xc>)
 80a2b60:	681b      	ldr	r3, [r3, #0]
 80a2b62:	685b      	ldr	r3, [r3, #4]
 80a2b64:	9301      	str	r3, [sp, #4]
 80a2b66:	bd08      	pop	{r3, pc}
 80a2b68:	0806019c 	.word	0x0806019c

080a2b6c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2b6c:	b508      	push	{r3, lr}
 80a2b6e:	4b02      	ldr	r3, [pc, #8]	; (80a2b78 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2b70:	681b      	ldr	r3, [r3, #0]
 80a2b72:	691b      	ldr	r3, [r3, #16]
 80a2b74:	9301      	str	r3, [sp, #4]
 80a2b76:	bd08      	pop	{r3, pc}
 80a2b78:	0806019c 	.word	0x0806019c

080a2b7c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2b7c:	b508      	push	{r3, lr}
 80a2b7e:	4b02      	ldr	r3, [pc, #8]	; (80a2b88 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2b80:	681b      	ldr	r3, [r3, #0]
 80a2b82:	695b      	ldr	r3, [r3, #20]
 80a2b84:	9301      	str	r3, [sp, #4]
 80a2b86:	bd08      	pop	{r3, pc}
 80a2b88:	0806019c 	.word	0x0806019c

080a2b8c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2b8c:	b508      	push	{r3, lr}
 80a2b8e:	4b02      	ldr	r3, [pc, #8]	; (80a2b98 <HAL_Pin_Map+0xc>)
 80a2b90:	681b      	ldr	r3, [r3, #0]
 80a2b92:	681b      	ldr	r3, [r3, #0]
 80a2b94:	9301      	str	r3, [sp, #4]
 80a2b96:	bd08      	pop	{r3, pc}
 80a2b98:	080601b0 	.word	0x080601b0

080a2b9c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2b9c:	b508      	push	{r3, lr}
 80a2b9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ba8 <HAL_Pin_Mode+0xc>)
 80a2ba0:	681b      	ldr	r3, [r3, #0]
 80a2ba2:	689b      	ldr	r3, [r3, #8]
 80a2ba4:	9301      	str	r3, [sp, #4]
 80a2ba6:	bd08      	pop	{r3, pc}
 80a2ba8:	080601b0 	.word	0x080601b0

080a2bac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2bac:	b508      	push	{r3, lr}
 80a2bae:	4b02      	ldr	r3, [pc, #8]	; (80a2bb8 <HAL_Get_Pin_Mode+0xc>)
 80a2bb0:	681b      	ldr	r3, [r3, #0]
 80a2bb2:	68db      	ldr	r3, [r3, #12]
 80a2bb4:	9301      	str	r3, [sp, #4]
 80a2bb6:	bd08      	pop	{r3, pc}
 80a2bb8:	080601b0 	.word	0x080601b0

080a2bbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2bbc:	b508      	push	{r3, lr}
 80a2bbe:	4b02      	ldr	r3, [pc, #8]	; (80a2bc8 <HAL_GPIO_Write+0xc>)
 80a2bc0:	681b      	ldr	r3, [r3, #0]
 80a2bc2:	691b      	ldr	r3, [r3, #16]
 80a2bc4:	9301      	str	r3, [sp, #4]
 80a2bc6:	bd08      	pop	{r3, pc}
 80a2bc8:	080601b0 	.word	0x080601b0

080a2bcc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2bcc:	b508      	push	{r3, lr}
 80a2bce:	4b02      	ldr	r3, [pc, #8]	; (80a2bd8 <HAL_I2C_Begin+0xc>)
 80a2bd0:	681b      	ldr	r3, [r3, #0]
 80a2bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2bd4:	9301      	str	r3, [sp, #4]
 80a2bd6:	bd08      	pop	{r3, pc}
 80a2bd8:	080601ac 	.word	0x080601ac

080a2bdc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2bdc:	b508      	push	{r3, lr}
 80a2bde:	4b02      	ldr	r3, [pc, #8]	; (80a2be8 <HAL_I2C_Request_Data+0xc>)
 80a2be0:	681b      	ldr	r3, [r3, #0]
 80a2be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2be4:	9301      	str	r3, [sp, #4]
 80a2be6:	bd08      	pop	{r3, pc}
 80a2be8:	080601ac 	.word	0x080601ac

080a2bec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2bec:	b508      	push	{r3, lr}
 80a2bee:	4b02      	ldr	r3, [pc, #8]	; (80a2bf8 <HAL_I2C_Begin_Transmission+0xc>)
 80a2bf0:	681b      	ldr	r3, [r3, #0]
 80a2bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2bf4:	9301      	str	r3, [sp, #4]
 80a2bf6:	bd08      	pop	{r3, pc}
 80a2bf8:	080601ac 	.word	0x080601ac

080a2bfc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2bfc:	b508      	push	{r3, lr}
 80a2bfe:	4b02      	ldr	r3, [pc, #8]	; (80a2c08 <HAL_I2C_End_Transmission+0xc>)
 80a2c00:	681b      	ldr	r3, [r3, #0]
 80a2c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2c04:	9301      	str	r3, [sp, #4]
 80a2c06:	bd08      	pop	{r3, pc}
 80a2c08:	080601ac 	.word	0x080601ac

080a2c0c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2c0c:	b508      	push	{r3, lr}
 80a2c0e:	4b02      	ldr	r3, [pc, #8]	; (80a2c18 <HAL_I2C_Write_Data+0xc>)
 80a2c10:	681b      	ldr	r3, [r3, #0]
 80a2c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2c14:	9301      	str	r3, [sp, #4]
 80a2c16:	bd08      	pop	{r3, pc}
 80a2c18:	080601ac 	.word	0x080601ac

080a2c1c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2c1c:	b508      	push	{r3, lr}
 80a2c1e:	4b02      	ldr	r3, [pc, #8]	; (80a2c28 <HAL_I2C_Available_Data+0xc>)
 80a2c20:	681b      	ldr	r3, [r3, #0]
 80a2c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2c24:	9301      	str	r3, [sp, #4]
 80a2c26:	bd08      	pop	{r3, pc}
 80a2c28:	080601ac 	.word	0x080601ac

080a2c2c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2c2c:	b508      	push	{r3, lr}
 80a2c2e:	4b02      	ldr	r3, [pc, #8]	; (80a2c38 <HAL_I2C_Read_Data+0xc>)
 80a2c30:	681b      	ldr	r3, [r3, #0]
 80a2c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2c34:	9301      	str	r3, [sp, #4]
 80a2c36:	bd08      	pop	{r3, pc}
 80a2c38:	080601ac 	.word	0x080601ac

080a2c3c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2c3c:	b508      	push	{r3, lr}
 80a2c3e:	4b02      	ldr	r3, [pc, #8]	; (80a2c48 <HAL_I2C_Peek_Data+0xc>)
 80a2c40:	681b      	ldr	r3, [r3, #0]
 80a2c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2c44:	9301      	str	r3, [sp, #4]
 80a2c46:	bd08      	pop	{r3, pc}
 80a2c48:	080601ac 	.word	0x080601ac

080a2c4c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2c4c:	b508      	push	{r3, lr}
 80a2c4e:	4b02      	ldr	r3, [pc, #8]	; (80a2c58 <HAL_I2C_Flush_Data+0xc>)
 80a2c50:	681b      	ldr	r3, [r3, #0]
 80a2c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2c54:	9301      	str	r3, [sp, #4]
 80a2c56:	bd08      	pop	{r3, pc}
 80a2c58:	080601ac 	.word	0x080601ac

080a2c5c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2c5c:	b508      	push	{r3, lr}
 80a2c5e:	4b02      	ldr	r3, [pc, #8]	; (80a2c68 <HAL_I2C_Is_Enabled+0xc>)
 80a2c60:	681b      	ldr	r3, [r3, #0]
 80a2c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2c64:	9301      	str	r3, [sp, #4]
 80a2c66:	bd08      	pop	{r3, pc}
 80a2c68:	080601ac 	.word	0x080601ac

080a2c6c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2c6c:	b508      	push	{r3, lr}
 80a2c6e:	4b03      	ldr	r3, [pc, #12]	; (80a2c7c <HAL_I2C_Init+0x10>)
 80a2c70:	681b      	ldr	r3, [r3, #0]
 80a2c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2c76:	9301      	str	r3, [sp, #4]
 80a2c78:	bd08      	pop	{r3, pc}
 80a2c7a:	0000      	.short	0x0000
 80a2c7c:	080601ac 	.word	0x080601ac

080a2c80 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2c80:	b508      	push	{r3, lr}
 80a2c82:	4b02      	ldr	r3, [pc, #8]	; (80a2c8c <socket_handle_valid+0xc>)
 80a2c84:	681b      	ldr	r3, [r3, #0]
 80a2c86:	685b      	ldr	r3, [r3, #4]
 80a2c88:	9301      	str	r3, [sp, #4]
 80a2c8a:	bd08      	pop	{r3, pc}
 80a2c8c:	080601bc 	.word	0x080601bc

080a2c90 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2c90:	b508      	push	{r3, lr}
 80a2c92:	4b02      	ldr	r3, [pc, #8]	; (80a2c9c <socket_create+0xc>)
 80a2c94:	681b      	ldr	r3, [r3, #0]
 80a2c96:	689b      	ldr	r3, [r3, #8]
 80a2c98:	9301      	str	r3, [sp, #4]
 80a2c9a:	bd08      	pop	{r3, pc}
 80a2c9c:	080601bc 	.word	0x080601bc

080a2ca0 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a2ca0:	b508      	push	{r3, lr}
 80a2ca2:	4b02      	ldr	r3, [pc, #8]	; (80a2cac <socket_receivefrom+0xc>)
 80a2ca4:	681b      	ldr	r3, [r3, #0]
 80a2ca6:	695b      	ldr	r3, [r3, #20]
 80a2ca8:	9301      	str	r3, [sp, #4]
 80a2caa:	bd08      	pop	{r3, pc}
 80a2cac:	080601bc 	.word	0x080601bc

080a2cb0 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a2cb0:	b508      	push	{r3, lr}
 80a2cb2:	4b02      	ldr	r3, [pc, #8]	; (80a2cbc <socket_sendto+0xc>)
 80a2cb4:	681b      	ldr	r3, [r3, #0]
 80a2cb6:	69db      	ldr	r3, [r3, #28]
 80a2cb8:	9301      	str	r3, [sp, #4]
 80a2cba:	bd08      	pop	{r3, pc}
 80a2cbc:	080601bc 	.word	0x080601bc

080a2cc0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2cc0:	b508      	push	{r3, lr}
 80a2cc2:	4b02      	ldr	r3, [pc, #8]	; (80a2ccc <socket_close+0xc>)
 80a2cc4:	681b      	ldr	r3, [r3, #0]
 80a2cc6:	6a1b      	ldr	r3, [r3, #32]
 80a2cc8:	9301      	str	r3, [sp, #4]
 80a2cca:	bd08      	pop	{r3, pc}
 80a2ccc:	080601bc 	.word	0x080601bc

080a2cd0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2cd0:	b508      	push	{r3, lr}
 80a2cd2:	4b02      	ldr	r3, [pc, #8]	; (80a2cdc <socket_handle_invalid+0xc>)
 80a2cd4:	681b      	ldr	r3, [r3, #0]
 80a2cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2cd8:	9301      	str	r3, [sp, #4]
 80a2cda:	bd08      	pop	{r3, pc}
 80a2cdc:	080601bc 	.word	0x080601bc

080a2ce0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2ce0:	b508      	push	{r3, lr}
 80a2ce2:	4b02      	ldr	r3, [pc, #8]	; (80a2cec <HAL_SPI_Begin+0xc>)
 80a2ce4:	681b      	ldr	r3, [r3, #0]
 80a2ce6:	681b      	ldr	r3, [r3, #0]
 80a2ce8:	9301      	str	r3, [sp, #4]
 80a2cea:	bd08      	pop	{r3, pc}
 80a2cec:	080601b4 	.word	0x080601b4

080a2cf0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2cf0:	b508      	push	{r3, lr}
 80a2cf2:	4b02      	ldr	r3, [pc, #8]	; (80a2cfc <HAL_SPI_Set_Bit_Order+0xc>)
 80a2cf4:	681b      	ldr	r3, [r3, #0]
 80a2cf6:	689b      	ldr	r3, [r3, #8]
 80a2cf8:	9301      	str	r3, [sp, #4]
 80a2cfa:	bd08      	pop	{r3, pc}
 80a2cfc:	080601b4 	.word	0x080601b4

080a2d00 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a2d00:	b508      	push	{r3, lr}
 80a2d02:	4b02      	ldr	r3, [pc, #8]	; (80a2d0c <HAL_SPI_Set_Data_Mode+0xc>)
 80a2d04:	681b      	ldr	r3, [r3, #0]
 80a2d06:	68db      	ldr	r3, [r3, #12]
 80a2d08:	9301      	str	r3, [sp, #4]
 80a2d0a:	bd08      	pop	{r3, pc}
 80a2d0c:	080601b4 	.word	0x080601b4

080a2d10 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a2d10:	b508      	push	{r3, lr}
 80a2d12:	4b02      	ldr	r3, [pc, #8]	; (80a2d1c <HAL_SPI_Set_Clock_Divider+0xc>)
 80a2d14:	681b      	ldr	r3, [r3, #0]
 80a2d16:	691b      	ldr	r3, [r3, #16]
 80a2d18:	9301      	str	r3, [sp, #4]
 80a2d1a:	bd08      	pop	{r3, pc}
 80a2d1c:	080601b4 	.word	0x080601b4

080a2d20 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2d20:	b508      	push	{r3, lr}
 80a2d22:	4b02      	ldr	r3, [pc, #8]	; (80a2d2c <HAL_SPI_Send_Receive_Data+0xc>)
 80a2d24:	681b      	ldr	r3, [r3, #0]
 80a2d26:	695b      	ldr	r3, [r3, #20]
 80a2d28:	9301      	str	r3, [sp, #4]
 80a2d2a:	bd08      	pop	{r3, pc}
 80a2d2c:	080601b4 	.word	0x080601b4

080a2d30 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2d30:	b508      	push	{r3, lr}
 80a2d32:	4b02      	ldr	r3, [pc, #8]	; (80a2d3c <HAL_SPI_Init+0xc>)
 80a2d34:	681b      	ldr	r3, [r3, #0]
 80a2d36:	69db      	ldr	r3, [r3, #28]
 80a2d38:	9301      	str	r3, [sp, #4]
 80a2d3a:	bd08      	pop	{r3, pc}
 80a2d3c:	080601b4 	.word	0x080601b4

080a2d40 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2d40:	b508      	push	{r3, lr}
 80a2d42:	4b02      	ldr	r3, [pc, #8]	; (80a2d4c <HAL_SPI_Is_Enabled+0xc>)
 80a2d44:	681b      	ldr	r3, [r3, #0]
 80a2d46:	6a1b      	ldr	r3, [r3, #32]
 80a2d48:	9301      	str	r3, [sp, #4]
 80a2d4a:	bd08      	pop	{r3, pc}
 80a2d4c:	080601b4 	.word	0x080601b4

080a2d50 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a2d50:	b508      	push	{r3, lr}
 80a2d52:	4b02      	ldr	r3, [pc, #8]	; (80a2d5c <HAL_SPI_Info+0xc>)
 80a2d54:	681b      	ldr	r3, [r3, #0]
 80a2d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2d58:	9301      	str	r3, [sp, #4]
 80a2d5a:	bd08      	pop	{r3, pc}
 80a2d5c:	080601b4 	.word	0x080601b4

080a2d60 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2d60:	b508      	push	{r3, lr}
 80a2d62:	4b02      	ldr	r3, [pc, #8]	; (80a2d6c <HAL_USART_Init+0xc>)
 80a2d64:	681b      	ldr	r3, [r3, #0]
 80a2d66:	699b      	ldr	r3, [r3, #24]
 80a2d68:	9301      	str	r3, [sp, #4]
 80a2d6a:	bd08      	pop	{r3, pc}
 80a2d6c:	080601c4 	.word	0x080601c4

080a2d70 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2d70:	b508      	push	{r3, lr}
 80a2d72:	4b02      	ldr	r3, [pc, #8]	; (80a2d7c <HAL_USART_Write_Data+0xc>)
 80a2d74:	681b      	ldr	r3, [r3, #0]
 80a2d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2d78:	9301      	str	r3, [sp, #4]
 80a2d7a:	bd08      	pop	{r3, pc}
 80a2d7c:	080601c4 	.word	0x080601c4

080a2d80 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2d80:	b508      	push	{r3, lr}
 80a2d82:	4b02      	ldr	r3, [pc, #8]	; (80a2d8c <HAL_USART_Available_Data+0xc>)
 80a2d84:	681b      	ldr	r3, [r3, #0]
 80a2d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2d88:	9301      	str	r3, [sp, #4]
 80a2d8a:	bd08      	pop	{r3, pc}
 80a2d8c:	080601c4 	.word	0x080601c4

080a2d90 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2d90:	b508      	push	{r3, lr}
 80a2d92:	4b02      	ldr	r3, [pc, #8]	; (80a2d9c <HAL_USART_Read_Data+0xc>)
 80a2d94:	681b      	ldr	r3, [r3, #0]
 80a2d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2d98:	9301      	str	r3, [sp, #4]
 80a2d9a:	bd08      	pop	{r3, pc}
 80a2d9c:	080601c4 	.word	0x080601c4

080a2da0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2da0:	b508      	push	{r3, lr}
 80a2da2:	4b02      	ldr	r3, [pc, #8]	; (80a2dac <HAL_USART_Peek_Data+0xc>)
 80a2da4:	681b      	ldr	r3, [r3, #0]
 80a2da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2da8:	9301      	str	r3, [sp, #4]
 80a2daa:	bd08      	pop	{r3, pc}
 80a2dac:	080601c4 	.word	0x080601c4

080a2db0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2db0:	b508      	push	{r3, lr}
 80a2db2:	4b02      	ldr	r3, [pc, #8]	; (80a2dbc <HAL_USART_Flush_Data+0xc>)
 80a2db4:	681b      	ldr	r3, [r3, #0]
 80a2db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2db8:	9301      	str	r3, [sp, #4]
 80a2dba:	bd08      	pop	{r3, pc}
 80a2dbc:	080601c4 	.word	0x080601c4

080a2dc0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2dc0:	b508      	push	{r3, lr}
 80a2dc2:	4b02      	ldr	r3, [pc, #8]	; (80a2dcc <HAL_USART_Is_Enabled+0xc>)
 80a2dc4:	681b      	ldr	r3, [r3, #0]
 80a2dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2dc8:	9301      	str	r3, [sp, #4]
 80a2dca:	bd08      	pop	{r3, pc}
 80a2dcc:	080601c4 	.word	0x080601c4

080a2dd0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2dd0:	b508      	push	{r3, lr}
 80a2dd2:	4b02      	ldr	r3, [pc, #8]	; (80a2ddc <HAL_USART_Available_Data_For_Write+0xc>)
 80a2dd4:	681b      	ldr	r3, [r3, #0]
 80a2dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2dd8:	9301      	str	r3, [sp, #4]
 80a2dda:	bd08      	pop	{r3, pc}
 80a2ddc:	080601c4 	.word	0x080601c4

080a2de0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2de0:	b508      	push	{r3, lr}
 80a2de2:	4b02      	ldr	r3, [pc, #8]	; (80a2dec <HAL_USB_USART_Init+0xc>)
 80a2de4:	681b      	ldr	r3, [r3, #0]
 80a2de6:	681b      	ldr	r3, [r3, #0]
 80a2de8:	9301      	str	r3, [sp, #4]
 80a2dea:	bd08      	pop	{r3, pc}
 80a2dec:	080601d8 	.word	0x080601d8

080a2df0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2df0:	b508      	push	{r3, lr}
 80a2df2:	4b02      	ldr	r3, [pc, #8]	; (80a2dfc <HAL_USB_USART_Begin+0xc>)
 80a2df4:	681b      	ldr	r3, [r3, #0]
 80a2df6:	685b      	ldr	r3, [r3, #4]
 80a2df8:	9301      	str	r3, [sp, #4]
 80a2dfa:	bd08      	pop	{r3, pc}
 80a2dfc:	080601d8 	.word	0x080601d8

080a2e00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2e00:	b508      	push	{r3, lr}
 80a2e02:	4b02      	ldr	r3, [pc, #8]	; (80a2e0c <HAL_USB_USART_Available_Data+0xc>)
 80a2e04:	681b      	ldr	r3, [r3, #0]
 80a2e06:	691b      	ldr	r3, [r3, #16]
 80a2e08:	9301      	str	r3, [sp, #4]
 80a2e0a:	bd08      	pop	{r3, pc}
 80a2e0c:	080601d8 	.word	0x080601d8

080a2e10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2e10:	b508      	push	{r3, lr}
 80a2e12:	4b02      	ldr	r3, [pc, #8]	; (80a2e1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2e14:	681b      	ldr	r3, [r3, #0]
 80a2e16:	695b      	ldr	r3, [r3, #20]
 80a2e18:	9301      	str	r3, [sp, #4]
 80a2e1a:	bd08      	pop	{r3, pc}
 80a2e1c:	080601d8 	.word	0x080601d8

080a2e20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2e20:	b508      	push	{r3, lr}
 80a2e22:	4b02      	ldr	r3, [pc, #8]	; (80a2e2c <HAL_USB_USART_Receive_Data+0xc>)
 80a2e24:	681b      	ldr	r3, [r3, #0]
 80a2e26:	699b      	ldr	r3, [r3, #24]
 80a2e28:	9301      	str	r3, [sp, #4]
 80a2e2a:	bd08      	pop	{r3, pc}
 80a2e2c:	080601d8 	.word	0x080601d8

080a2e30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2e30:	b508      	push	{r3, lr}
 80a2e32:	4b02      	ldr	r3, [pc, #8]	; (80a2e3c <HAL_USB_USART_Send_Data+0xc>)
 80a2e34:	681b      	ldr	r3, [r3, #0]
 80a2e36:	69db      	ldr	r3, [r3, #28]
 80a2e38:	9301      	str	r3, [sp, #4]
 80a2e3a:	bd08      	pop	{r3, pc}
 80a2e3c:	080601d8 	.word	0x080601d8

080a2e40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2e40:	b508      	push	{r3, lr}
 80a2e42:	4b02      	ldr	r3, [pc, #8]	; (80a2e4c <HAL_USB_USART_Flush_Data+0xc>)
 80a2e44:	681b      	ldr	r3, [r3, #0]
 80a2e46:	6a1b      	ldr	r3, [r3, #32]
 80a2e48:	9301      	str	r3, [sp, #4]
 80a2e4a:	bd08      	pop	{r3, pc}
 80a2e4c:	080601d8 	.word	0x080601d8

080a2e50 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a2e50:	b508      	push	{r3, lr}
 80a2e52:	4b02      	ldr	r3, [pc, #8]	; (80a2e5c <HAL_USB_USART_Is_Enabled+0xc>)
 80a2e54:	681b      	ldr	r3, [r3, #0]
 80a2e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2e58:	9301      	str	r3, [sp, #4]
 80a2e5a:	bd08      	pop	{r3, pc}
 80a2e5c:	080601d8 	.word	0x080601d8

080a2e60 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2e60:	b508      	push	{r3, lr}
 80a2e62:	4b02      	ldr	r3, [pc, #8]	; (80a2e6c <inet_gethostbyname+0xc>)
 80a2e64:	681b      	ldr	r3, [r3, #0]
 80a2e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2e68:	9301      	str	r3, [sp, #4]
 80a2e6a:	bd08      	pop	{r3, pc}
 80a2e6c:	080601c0 	.word	0x080601c0

080a2e70 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2e70:	b508      	push	{r3, lr}
 80a2e72:	4b02      	ldr	r3, [pc, #8]	; (80a2e7c <set_system_mode+0xc>)
 80a2e74:	681b      	ldr	r3, [r3, #0]
 80a2e76:	685b      	ldr	r3, [r3, #4]
 80a2e78:	9301      	str	r3, [sp, #4]
 80a2e7a:	bd08      	pop	{r3, pc}
 80a2e7c:	080601a4 	.word	0x080601a4

080a2e80 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2e80:	b508      	push	{r3, lr}
 80a2e82:	4b02      	ldr	r3, [pc, #8]	; (80a2e8c <system_delay_ms+0xc>)
 80a2e84:	681b      	ldr	r3, [r3, #0]
 80a2e86:	695b      	ldr	r3, [r3, #20]
 80a2e88:	9301      	str	r3, [sp, #4]
 80a2e8a:	bd08      	pop	{r3, pc}
 80a2e8c:	080601a4 	.word	0x080601a4

080a2e90 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2e90:	b508      	push	{r3, lr}
 80a2e92:	4b02      	ldr	r3, [pc, #8]	; (80a2e9c <system_thread_set_state+0xc>)
 80a2e94:	681b      	ldr	r3, [r3, #0]
 80a2e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2e98:	9301      	str	r3, [sp, #4]
 80a2e9a:	bd08      	pop	{r3, pc}
 80a2e9c:	080601a4 	.word	0x080601a4

080a2ea0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2ea0:	b508      	push	{r3, lr}
 80a2ea2:	4b03      	ldr	r3, [pc, #12]	; (80a2eb0 <system_ctrl_set_app_request_handler+0x10>)
 80a2ea4:	681b      	ldr	r3, [r3, #0]
 80a2ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2eaa:	9301      	str	r3, [sp, #4]
 80a2eac:	bd08      	pop	{r3, pc}
 80a2eae:	0000      	.short	0x0000
 80a2eb0:	080601a4 	.word	0x080601a4

080a2eb4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2eb4:	b508      	push	{r3, lr}
 80a2eb6:	4b03      	ldr	r3, [pc, #12]	; (80a2ec4 <system_ctrl_set_result+0x10>)
 80a2eb8:	681b      	ldr	r3, [r3, #0]
 80a2eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2ebe:	9301      	str	r3, [sp, #4]
 80a2ec0:	bd08      	pop	{r3, pc}
 80a2ec2:	0000      	.short	0x0000
 80a2ec4:	080601a4 	.word	0x080601a4

080a2ec8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2ec8:	b508      	push	{r3, lr}
 80a2eca:	4b02      	ldr	r3, [pc, #8]	; (80a2ed4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2ecc:	681b      	ldr	r3, [r3, #0]
 80a2ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2ed0:	9301      	str	r3, [sp, #4]
 80a2ed2:	bd08      	pop	{r3, pc}
 80a2ed4:	080601cc 	.word	0x080601cc

080a2ed8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a2ed8:	b508      	push	{r3, lr}
 80a2eda:	4b02      	ldr	r3, [pc, #8]	; (80a2ee4 <network_config+0xc>)
 80a2edc:	681b      	ldr	r3, [r3, #0]
 80a2ede:	681b      	ldr	r3, [r3, #0]
 80a2ee0:	9301      	str	r3, [sp, #4]
 80a2ee2:	bd08      	pop	{r3, pc}
 80a2ee4:	080601c8 	.word	0x080601c8

080a2ee8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2ee8:	b508      	push	{r3, lr}
 80a2eea:	4b02      	ldr	r3, [pc, #8]	; (80a2ef4 <network_connect+0xc>)
 80a2eec:	681b      	ldr	r3, [r3, #0]
 80a2eee:	685b      	ldr	r3, [r3, #4]
 80a2ef0:	9301      	str	r3, [sp, #4]
 80a2ef2:	bd08      	pop	{r3, pc}
 80a2ef4:	080601c8 	.word	0x080601c8

080a2ef8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2ef8:	b508      	push	{r3, lr}
 80a2efa:	4b02      	ldr	r3, [pc, #8]	; (80a2f04 <network_connecting+0xc>)
 80a2efc:	681b      	ldr	r3, [r3, #0]
 80a2efe:	689b      	ldr	r3, [r3, #8]
 80a2f00:	9301      	str	r3, [sp, #4]
 80a2f02:	bd08      	pop	{r3, pc}
 80a2f04:	080601c8 	.word	0x080601c8

080a2f08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2f08:	b508      	push	{r3, lr}
 80a2f0a:	4b02      	ldr	r3, [pc, #8]	; (80a2f14 <network_disconnect+0xc>)
 80a2f0c:	681b      	ldr	r3, [r3, #0]
 80a2f0e:	68db      	ldr	r3, [r3, #12]
 80a2f10:	9301      	str	r3, [sp, #4]
 80a2f12:	bd08      	pop	{r3, pc}
 80a2f14:	080601c8 	.word	0x080601c8

080a2f18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2f18:	b508      	push	{r3, lr}
 80a2f1a:	4b02      	ldr	r3, [pc, #8]	; (80a2f24 <network_ready+0xc>)
 80a2f1c:	681b      	ldr	r3, [r3, #0]
 80a2f1e:	691b      	ldr	r3, [r3, #16]
 80a2f20:	9301      	str	r3, [sp, #4]
 80a2f22:	bd08      	pop	{r3, pc}
 80a2f24:	080601c8 	.word	0x080601c8

080a2f28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2f28:	b508      	push	{r3, lr}
 80a2f2a:	4b02      	ldr	r3, [pc, #8]	; (80a2f34 <network_on+0xc>)
 80a2f2c:	681b      	ldr	r3, [r3, #0]
 80a2f2e:	695b      	ldr	r3, [r3, #20]
 80a2f30:	9301      	str	r3, [sp, #4]
 80a2f32:	bd08      	pop	{r3, pc}
 80a2f34:	080601c8 	.word	0x080601c8

080a2f38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2f38:	b508      	push	{r3, lr}
 80a2f3a:	4b02      	ldr	r3, [pc, #8]	; (80a2f44 <network_off+0xc>)
 80a2f3c:	681b      	ldr	r3, [r3, #0]
 80a2f3e:	699b      	ldr	r3, [r3, #24]
 80a2f40:	9301      	str	r3, [sp, #4]
 80a2f42:	bd08      	pop	{r3, pc}
 80a2f44:	080601c8 	.word	0x080601c8

080a2f48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2f48:	b508      	push	{r3, lr}
 80a2f4a:	4b02      	ldr	r3, [pc, #8]	; (80a2f54 <network_listen+0xc>)
 80a2f4c:	681b      	ldr	r3, [r3, #0]
 80a2f4e:	69db      	ldr	r3, [r3, #28]
 80a2f50:	9301      	str	r3, [sp, #4]
 80a2f52:	bd08      	pop	{r3, pc}
 80a2f54:	080601c8 	.word	0x080601c8

080a2f58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2f58:	b508      	push	{r3, lr}
 80a2f5a:	4b02      	ldr	r3, [pc, #8]	; (80a2f64 <network_listening+0xc>)
 80a2f5c:	681b      	ldr	r3, [r3, #0]
 80a2f5e:	6a1b      	ldr	r3, [r3, #32]
 80a2f60:	9301      	str	r3, [sp, #4]
 80a2f62:	bd08      	pop	{r3, pc}
 80a2f64:	080601c8 	.word	0x080601c8

080a2f68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2f68:	b508      	push	{r3, lr}
 80a2f6a:	4b02      	ldr	r3, [pc, #8]	; (80a2f74 <network_set_listen_timeout+0xc>)
 80a2f6c:	681b      	ldr	r3, [r3, #0]
 80a2f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2f70:	9301      	str	r3, [sp, #4]
 80a2f72:	bd08      	pop	{r3, pc}
 80a2f74:	080601c8 	.word	0x080601c8

080a2f78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2f78:	b508      	push	{r3, lr}
 80a2f7a:	4b02      	ldr	r3, [pc, #8]	; (80a2f84 <network_get_listen_timeout+0xc>)
 80a2f7c:	681b      	ldr	r3, [r3, #0]
 80a2f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2f80:	9301      	str	r3, [sp, #4]
 80a2f82:	bd08      	pop	{r3, pc}
 80a2f84:	080601c8 	.word	0x080601c8

080a2f88 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a2f88:	b508      	push	{r3, lr}
 80a2f8a:	4b02      	ldr	r3, [pc, #8]	; (80a2f94 <network_set_hostname+0xc>)
 80a2f8c:	681b      	ldr	r3, [r3, #0]
 80a2f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2f90:	9301      	str	r3, [sp, #4]
 80a2f92:	bd08      	pop	{r3, pc}
 80a2f94:	080601c8 	.word	0x080601c8

080a2f98 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a2f98:	b508      	push	{r3, lr}
 80a2f9a:	4b02      	ldr	r3, [pc, #8]	; (80a2fa4 <network_get_hostname+0xc>)
 80a2f9c:	681b      	ldr	r3, [r3, #0]
 80a2f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2fa0:	9301      	str	r3, [sp, #4]
 80a2fa2:	bd08      	pop	{r3, pc}
 80a2fa4:	080601c8 	.word	0x080601c8

080a2fa8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2fa8:	b508      	push	{r3, lr}
 80a2faa:	4b02      	ldr	r3, [pc, #8]	; (80a2fb4 <malloc+0xc>)
 80a2fac:	681b      	ldr	r3, [r3, #0]
 80a2fae:	681b      	ldr	r3, [r3, #0]
 80a2fb0:	9301      	str	r3, [sp, #4]
 80a2fb2:	bd08      	pop	{r3, pc}
 80a2fb4:	080601a0 	.word	0x080601a0

080a2fb8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2fb8:	b508      	push	{r3, lr}
 80a2fba:	4b02      	ldr	r3, [pc, #8]	; (80a2fc4 <free+0xc>)
 80a2fbc:	681b      	ldr	r3, [r3, #0]
 80a2fbe:	685b      	ldr	r3, [r3, #4]
 80a2fc0:	9301      	str	r3, [sp, #4]
 80a2fc2:	bd08      	pop	{r3, pc}
 80a2fc4:	080601a0 	.word	0x080601a0

080a2fc8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2fc8:	b508      	push	{r3, lr}
 80a2fca:	4b02      	ldr	r3, [pc, #8]	; (80a2fd4 <realloc+0xc>)
 80a2fcc:	681b      	ldr	r3, [r3, #0]
 80a2fce:	689b      	ldr	r3, [r3, #8]
 80a2fd0:	9301      	str	r3, [sp, #4]
 80a2fd2:	bd08      	pop	{r3, pc}
 80a2fd4:	080601a0 	.word	0x080601a0

080a2fd8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2fd8:	2100      	movs	r1, #0
 80a2fda:	f7ff bf51 	b.w	80a2e80 <system_delay_ms>

080a2fde <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2fde:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2fe0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2fe2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2fe4:	b113      	cbz	r3, 80a2fec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2fe6:	2203      	movs	r2, #3
 80a2fe8:	4601      	mov	r1, r0
 80a2fea:	4798      	blx	r3
    }
 80a2fec:	4620      	mov	r0, r4
 80a2fee:	bd10      	pop	{r4, pc}

080a2ff0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2ff0:	4770      	bx	lr

080a2ff2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ff4:	4606      	mov	r6, r0
 80a2ff6:	4615      	mov	r5, r2
 80a2ff8:	460c      	mov	r4, r1
 80a2ffa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2ffc:	42bc      	cmp	r4, r7
 80a2ffe:	d006      	beq.n	80a300e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3000:	6833      	ldr	r3, [r6, #0]
 80a3002:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3006:	689b      	ldr	r3, [r3, #8]
 80a3008:	4630      	mov	r0, r6
 80a300a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a300c:	e7f6      	b.n	80a2ffc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a300e:	4628      	mov	r0, r5
 80a3010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3012 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3012:	2200      	movs	r2, #0
 80a3014:	7c00      	ldrb	r0, [r0, #16]
 80a3016:	f7ff bdf9 	b.w	80a2c0c <HAL_I2C_Write_Data>

080a301a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a301a:	2100      	movs	r1, #0
 80a301c:	7c00      	ldrb	r0, [r0, #16]
 80a301e:	f7ff bdfd 	b.w	80a2c1c <HAL_I2C_Available_Data>

080a3022 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3022:	2100      	movs	r1, #0
 80a3024:	7c00      	ldrb	r0, [r0, #16]
 80a3026:	f7ff be01 	b.w	80a2c2c <HAL_I2C_Read_Data>

080a302a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a302a:	2100      	movs	r1, #0
 80a302c:	7c00      	ldrb	r0, [r0, #16]
 80a302e:	f7ff be05 	b.w	80a2c3c <HAL_I2C_Peek_Data>

080a3032 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3032:	2100      	movs	r1, #0
 80a3034:	7c00      	ldrb	r0, [r0, #16]
 80a3036:	f7ff be09 	b.w	80a2c4c <HAL_I2C_Flush_Data>

080a303a <_ZN7TwoWireD0Ev>:
 80a303a:	b510      	push	{r4, lr}
 80a303c:	4604      	mov	r4, r0
 80a303e:	2114      	movs	r1, #20
 80a3040:	f001 f8c1 	bl	80a41c6 <_ZdlPvj>
 80a3044:	4620      	mov	r0, r4
 80a3046:	bd10      	pop	{r4, pc}

080a3048 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3048:	b510      	push	{r4, lr}
 80a304a:	4604      	mov	r4, r0
 80a304c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a304e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3052:	60a3      	str	r3, [r4, #8]
 80a3054:	4b04      	ldr	r3, [pc, #16]	; (80a3068 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3056:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3058:	7420      	strb	r0, [r4, #16]
 80a305a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a305c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a305e:	f7ff fe05 	bl	80a2c6c <HAL_I2C_Init>

}
 80a3062:	4620      	mov	r0, r4
 80a3064:	bd10      	pop	{r4, pc}
 80a3066:	bf00      	nop
 80a3068:	080a5718 	.word	0x080a5718

080a306c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a306c:	2300      	movs	r3, #0
 80a306e:	461a      	mov	r2, r3
 80a3070:	4619      	mov	r1, r3
 80a3072:	7c00      	ldrb	r0, [r0, #16]
 80a3074:	f7ff bdaa 	b.w	80a2bcc <HAL_I2C_Begin>

080a3078 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3078:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a307a:	2400      	movs	r4, #0
 80a307c:	7c00      	ldrb	r0, [r0, #16]
 80a307e:	9400      	str	r4, [sp, #0]
 80a3080:	f7ff fdac 	bl	80a2bdc <HAL_I2C_Request_Data>
  return result;
}
 80a3084:	b2c0      	uxtb	r0, r0
 80a3086:	b002      	add	sp, #8
 80a3088:	bd10      	pop	{r4, pc}

080a308a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a308a:	2301      	movs	r3, #1
 80a308c:	f7ff bff4 	b.w	80a3078 <_ZN7TwoWire11requestFromEhhh>

080a3090 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3090:	2200      	movs	r2, #0
 80a3092:	7c00      	ldrb	r0, [r0, #16]
 80a3094:	f7ff bdaa 	b.w	80a2bec <HAL_I2C_Begin_Transmission>

080a3098 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3098:	2200      	movs	r2, #0
 80a309a:	7c00      	ldrb	r0, [r0, #16]
 80a309c:	f7ff bdae 	b.w	80a2bfc <HAL_I2C_End_Transmission>

080a30a0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a30a0:	2101      	movs	r1, #1
 80a30a2:	f7ff bff9 	b.w	80a3098 <_ZN7TwoWire15endTransmissionEh>

080a30a6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a30a6:	2100      	movs	r1, #0
 80a30a8:	7c00      	ldrb	r0, [r0, #16]
 80a30aa:	f7ff bdd7 	b.w	80a2c5c <HAL_I2C_Is_Enabled>

080a30ae <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a30ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a30b0:	460f      	mov	r7, r1
 80a30b2:	f100 0608 	add.w	r6, r0, #8
 80a30b6:	1d05      	adds	r5, r0, #4
 80a30b8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a30ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a30be:	220a      	movs	r2, #10
 80a30c0:	4638      	mov	r0, r7
 80a30c2:	f000 f95c 	bl	80a337e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a30c6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a30c8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a30ca:	d007      	beq.n	80a30dc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a30cc:	2c00      	cmp	r4, #0
 80a30ce:	d0f4      	beq.n	80a30ba <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a30d0:	212e      	movs	r1, #46	; 0x2e
 80a30d2:	4638      	mov	r0, r7
 80a30d4:	f000 f8f6 	bl	80a32c4 <_ZN5Print5printEc>
 80a30d8:	4404      	add	r4, r0
 80a30da:	e7ee      	b.n	80a30ba <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a30dc:	4620      	mov	r0, r4
 80a30de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a30e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a30e0:	b510      	push	{r4, lr}
 80a30e2:	4604      	mov	r4, r0
 80a30e4:	4b04      	ldr	r3, [pc, #16]	; (80a30f8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a30e6:	2211      	movs	r2, #17
 80a30e8:	f840 3b04 	str.w	r3, [r0], #4
 80a30ec:	2100      	movs	r1, #0
 80a30ee:	f002 f978 	bl	80a53e2 <memset>
{
    clear();
}
 80a30f2:	4620      	mov	r0, r4
 80a30f4:	bd10      	pop	{r4, pc}
 80a30f6:	bf00      	nop
 80a30f8:	080a5740 	.word	0x080a5740

080a30fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a30fc:	4603      	mov	r3, r0
 80a30fe:	4a07      	ldr	r2, [pc, #28]	; (80a311c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3100:	b510      	push	{r4, lr}
 80a3102:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a3106:	f101 0210 	add.w	r2, r1, #16
 80a310a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a310e:	4291      	cmp	r1, r2
 80a3110:	f843 4b04 	str.w	r4, [r3], #4
 80a3114:	d1f9      	bne.n	80a310a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3116:	780a      	ldrb	r2, [r1, #0]
 80a3118:	701a      	strb	r2, [r3, #0]
}
 80a311a:	bd10      	pop	{r4, pc}
 80a311c:	080a5740 	.word	0x080a5740

080a3120 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3120:	4a02      	ldr	r2, [pc, #8]	; (80a312c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a3122:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3124:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3126:	2204      	movs	r2, #4
 80a3128:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a312a:	4770      	bx	lr
 80a312c:	080a5740 	.word	0x080a5740

080a3130 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3130:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3132:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3136:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a313a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a313e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a3142:	2304      	movs	r3, #4
 80a3144:	6041      	str	r1, [r0, #4]
 80a3146:	7503      	strb	r3, [r0, #20]
 80a3148:	bd10      	pop	{r4, pc}
	...

080a314c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a314c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a314e:	4d04      	ldr	r5, [pc, #16]	; (80a3160 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3150:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3152:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3156:	9500      	str	r5, [sp, #0]
 80a3158:	f7ff ffea 	bl	80a3130 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a315c:	b003      	add	sp, #12
 80a315e:	bd30      	pop	{r4, r5, pc}
 80a3160:	080a5740 	.word	0x080a5740

080a3164 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a3164:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a3166:	780d      	ldrb	r5, [r1, #0]
 80a3168:	788b      	ldrb	r3, [r1, #2]
 80a316a:	784a      	ldrb	r2, [r1, #1]
 80a316c:	78c9      	ldrb	r1, [r1, #3]
 80a316e:	9100      	str	r1, [sp, #0]
 80a3170:	4629      	mov	r1, r5
 80a3172:	f7ff ffdd 	bl	80a3130 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a3176:	b003      	add	sp, #12
 80a3178:	bd30      	pop	{r4, r5, pc}
	...

080a317c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a317c:	4a01      	ldr	r2, [pc, #4]	; (80a3184 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a317e:	4b02      	ldr	r3, [pc, #8]	; (80a3188 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3180:	601a      	str	r2, [r3, #0]
 80a3182:	4770      	bx	lr
 80a3184:	080a57c2 	.word	0x080a57c2
 80a3188:	20000204 	.word	0x20000204

080a318c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a318c:	2300      	movs	r3, #0
 80a318e:	461a      	mov	r2, r3
 80a3190:	6840      	ldr	r0, [r0, #4]
 80a3192:	f7ff bea9 	b.w	80a2ee8 <network_connect>

080a3196 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a3196:	2200      	movs	r2, #0
 80a3198:	2102      	movs	r1, #2
 80a319a:	6840      	ldr	r0, [r0, #4]
 80a319c:	f7ff beb4 	b.w	80a2f08 <network_disconnect>

080a31a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a31a0:	2200      	movs	r2, #0
 80a31a2:	4611      	mov	r1, r2
 80a31a4:	6840      	ldr	r0, [r0, #4]
 80a31a6:	f7ff bea7 	b.w	80a2ef8 <network_connecting>

080a31aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a31aa:	2200      	movs	r2, #0
 80a31ac:	4611      	mov	r1, r2
 80a31ae:	6840      	ldr	r0, [r0, #4]
 80a31b0:	f7ff beb2 	b.w	80a2f18 <network_ready>

080a31b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a31b4:	2300      	movs	r3, #0
 80a31b6:	461a      	mov	r2, r3
 80a31b8:	4619      	mov	r1, r3
 80a31ba:	6840      	ldr	r0, [r0, #4]
 80a31bc:	f7ff beb4 	b.w	80a2f28 <network_on>

080a31c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a31c0:	2300      	movs	r3, #0
 80a31c2:	461a      	mov	r2, r3
 80a31c4:	4619      	mov	r1, r3
 80a31c6:	6840      	ldr	r0, [r0, #4]
 80a31c8:	f7ff beb6 	b.w	80a2f38 <network_off>

080a31cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a31cc:	2200      	movs	r2, #0
 80a31ce:	f081 0101 	eor.w	r1, r1, #1
 80a31d2:	6840      	ldr	r0, [r0, #4]
 80a31d4:	f7ff beb8 	b.w	80a2f48 <network_listen>

080a31d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a31d8:	2200      	movs	r2, #0
 80a31da:	6840      	ldr	r0, [r0, #4]
 80a31dc:	f7ff bec4 	b.w	80a2f68 <network_set_listen_timeout>

080a31e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a31e0:	2200      	movs	r2, #0
 80a31e2:	4611      	mov	r1, r2
 80a31e4:	6840      	ldr	r0, [r0, #4]
 80a31e6:	f7ff bec7 	b.w	80a2f78 <network_get_listen_timeout>

080a31ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a31ea:	2200      	movs	r2, #0
 80a31ec:	4611      	mov	r1, r2
 80a31ee:	6840      	ldr	r0, [r0, #4]
 80a31f0:	f7ff beb2 	b.w	80a2f58 <network_listening>

080a31f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a31f4:	b570      	push	{r4, r5, r6, lr}
 80a31f6:	4616      	mov	r6, r2
 80a31f8:	b08e      	sub	sp, #56	; 0x38
 80a31fa:	4604      	mov	r4, r0
    IPAddress addr;
 80a31fc:	a808      	add	r0, sp, #32
 80a31fe:	f7ff ff6f 	bl	80a30e0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a3202:	2211      	movs	r2, #17
 80a3204:	2100      	movs	r1, #0
 80a3206:	a803      	add	r0, sp, #12
 80a3208:	f002 f8eb 	bl	80a53e2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a320c:	4630      	mov	r0, r6
 80a320e:	f002 f95d 	bl	80a54cc <strlen>
 80a3212:	2500      	movs	r5, #0
 80a3214:	4b0a      	ldr	r3, [pc, #40]	; (80a3240 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a3216:	9500      	str	r5, [sp, #0]
 80a3218:	b281      	uxth	r1, r0
 80a321a:	685b      	ldr	r3, [r3, #4]
 80a321c:	aa03      	add	r2, sp, #12
 80a321e:	4630      	mov	r0, r6
 80a3220:	f7ff fe1e 	bl	80a2e60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3224:	b120      	cbz	r0, 80a3230 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a3226:	4629      	mov	r1, r5
 80a3228:	4620      	mov	r0, r4
 80a322a:	f7ff ff79 	bl	80a3120 <_ZN9IPAddressC1Em>
 80a322e:	e003      	b.n	80a3238 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3230:	a903      	add	r1, sp, #12
 80a3232:	4620      	mov	r0, r4
 80a3234:	f7ff ff62 	bl	80a30fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3238:	4620      	mov	r0, r4
 80a323a:	b00e      	add	sp, #56	; 0x38
 80a323c:	bd70      	pop	{r4, r5, r6, pc}
 80a323e:	bf00      	nop
 80a3240:	20000688 	.word	0x20000688

080a3244 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a3244:	4b03      	ldr	r3, [pc, #12]	; (80a3254 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a3246:	4a04      	ldr	r2, [pc, #16]	; (80a3258 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a3248:	2804      	cmp	r0, #4
 80a324a:	bf0c      	ite	eq
 80a324c:	4610      	moveq	r0, r2
 80a324e:	4618      	movne	r0, r3
 80a3250:	4770      	bx	lr
 80a3252:	bf00      	nop
 80a3254:	20000208 	.word	0x20000208
 80a3258:	20000688 	.word	0x20000688

080a325c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a325c:	4b02      	ldr	r3, [pc, #8]	; (80a3268 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a325e:	4a03      	ldr	r2, [pc, #12]	; (80a326c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3260:	601a      	str	r2, [r3, #0]
 80a3262:	2200      	movs	r2, #0
 80a3264:	605a      	str	r2, [r3, #4]
 80a3266:	4770      	bx	lr
 80a3268:	20000208 	.word	0x20000208
 80a326c:	080a5838 	.word	0x080a5838

080a3270 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3272:	4606      	mov	r6, r0
 80a3274:	460d      	mov	r5, r1
 80a3276:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3278:	2400      	movs	r4, #0
  while (size--) {
 80a327a:	42bd      	cmp	r5, r7
 80a327c:	d00c      	beq.n	80a3298 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a327e:	6833      	ldr	r3, [r6, #0]
 80a3280:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3284:	689b      	ldr	r3, [r3, #8]
 80a3286:	4630      	mov	r0, r6
 80a3288:	4798      	blx	r3
     if (chunk>=0)
 80a328a:	2800      	cmp	r0, #0
 80a328c:	db01      	blt.n	80a3292 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a328e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3290:	e7f3      	b.n	80a327a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3292:	2c00      	cmp	r4, #0
 80a3294:	bf08      	it	eq
 80a3296:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3298:	4620      	mov	r0, r4
 80a329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a329c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a329c:	b570      	push	{r4, r5, r6, lr}
 80a329e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a32a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a32a2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a32a4:	b149      	cbz	r1, 80a32ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a32a6:	f002 f911 	bl	80a54cc <strlen>
 80a32aa:	682b      	ldr	r3, [r5, #0]
 80a32ac:	4602      	mov	r2, r0
 80a32ae:	4621      	mov	r1, r4
 80a32b0:	4628      	mov	r0, r5
    }
 80a32b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a32b6:	68db      	ldr	r3, [r3, #12]
 80a32b8:	4718      	bx	r3
    }
 80a32ba:	bd70      	pop	{r4, r5, r6, pc}

080a32bc <_ZN5Print5printEPKc>:
 80a32bc:	b508      	push	{r3, lr}
 80a32be:	f7ff ffed 	bl	80a329c <_ZN5Print5writeEPKc>
 80a32c2:	bd08      	pop	{r3, pc}

080a32c4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a32c4:	6803      	ldr	r3, [r0, #0]
 80a32c6:	689b      	ldr	r3, [r3, #8]
 80a32c8:	4718      	bx	r3

080a32ca <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a32ca:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a32cc:	680a      	ldr	r2, [r1, #0]
 80a32ce:	4601      	mov	r1, r0
 80a32d0:	6812      	ldr	r2, [r2, #0]
 80a32d2:	4618      	mov	r0, r3
 80a32d4:	4710      	bx	r2

080a32d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a32d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a32d8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a32da:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a32dc:	f7ff fff2 	bl	80a32c4 <_ZN5Print5printEc>
  n += print('\n');
 80a32e0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a32e2:	4604      	mov	r4, r0
  n += print('\n');
 80a32e4:	4628      	mov	r0, r5
 80a32e6:	f7ff ffed 	bl	80a32c4 <_ZN5Print5printEc>
  return n;
}
 80a32ea:	4420      	add	r0, r4
 80a32ec:	bd38      	pop	{r3, r4, r5, pc}

080a32ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a32ee:	b538      	push	{r3, r4, r5, lr}
 80a32f0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a32f2:	f7ff ffd3 	bl	80a329c <_ZN5Print5writeEPKc>
 80a32f6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a32f8:	4628      	mov	r0, r5
 80a32fa:	f7ff ffec 	bl	80a32d6 <_ZN5Print7printlnEv>
  return n;
}
 80a32fe:	4420      	add	r0, r4
 80a3300:	bd38      	pop	{r3, r4, r5, pc}

080a3302 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80a3302:	b538      	push	{r3, r4, r5, lr}
 80a3304:	4605      	mov	r5, r0
  size_t n = print(c);
 80a3306:	f7ff ffdd 	bl	80a32c4 <_ZN5Print5printEc>
 80a330a:	4604      	mov	r4, r0
  n += println();
 80a330c:	4628      	mov	r0, r5
 80a330e:	f7ff ffe2 	bl	80a32d6 <_ZN5Print7printlnEv>
  return n;
}
 80a3312:	4420      	add	r0, r4
 80a3314:	bd38      	pop	{r3, r4, r5, pc}

080a3316 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a3316:	b538      	push	{r3, r4, r5, lr}
 80a3318:	4605      	mov	r5, r0
   size_t n = print(x);
 80a331a:	f7ff ffd6 	bl	80a32ca <_ZN5Print5printERK9Printable>
 80a331e:	4604      	mov	r4, r0
   n += println();
 80a3320:	4628      	mov	r0, r5
 80a3322:	f7ff ffd8 	bl	80a32d6 <_ZN5Print7printlnEv>
   return n;
 }
 80a3326:	4420      	add	r0, r4
 80a3328:	bd38      	pop	{r3, r4, r5, pc}

080a332a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a332a:	2a01      	cmp	r2, #1
 80a332c:	bf98      	it	ls
 80a332e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3330:	b530      	push	{r4, r5, lr}
 80a3332:	460b      	mov	r3, r1
 80a3334:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3336:	2100      	movs	r1, #0
 80a3338:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a333c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3340:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a3344:	fb05 3312 	mls	r3, r5, r2, r3
 80a3348:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a334a:	2b09      	cmp	r3, #9
 80a334c:	bf94      	ite	ls
 80a334e:	3330      	addls	r3, #48	; 0x30
 80a3350:	3337      	addhi	r3, #55	; 0x37
 80a3352:	b2db      	uxtb	r3, r3
 80a3354:	4621      	mov	r1, r4
 80a3356:	f804 3901 	strb.w	r3, [r4], #-1
 80a335a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a335c:	2d00      	cmp	r5, #0
 80a335e:	d1ef      	bne.n	80a3340 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3360:	f7ff ff9c 	bl	80a329c <_ZN5Print5writeEPKc>
}
 80a3364:	b00b      	add	sp, #44	; 0x2c
 80a3366:	bd30      	pop	{r4, r5, pc}

080a3368 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3368:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a336a:	b922      	cbnz	r2, 80a3376 <_ZN5Print5printEmi+0xe>
 80a336c:	6803      	ldr	r3, [r0, #0]
 80a336e:	b2c9      	uxtb	r1, r1
 80a3370:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3372:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3374:	4718      	bx	r3
  else return printNumber(n, base);
 80a3376:	b2d2      	uxtb	r2, r2
}
 80a3378:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a337a:	f7ff bfd6 	b.w	80a332a <_ZN5Print11printNumberEmh>

080a337e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a337e:	f7ff bff3 	b.w	80a3368 <_ZN5Print5printEmi>

080a3382 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a3382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3386:	4607      	mov	r7, r0
 80a3388:	460e      	mov	r6, r1
  if (base == 0) {
 80a338a:	4615      	mov	r5, r2
 80a338c:	b92a      	cbnz	r2, 80a339a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a338e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a3392:	6803      	ldr	r3, [r0, #0]
 80a3394:	b2c9      	uxtb	r1, r1
 80a3396:	689b      	ldr	r3, [r3, #8]
 80a3398:	4718      	bx	r3
  } else if (base == 10) {
 80a339a:	2a0a      	cmp	r2, #10
 80a339c:	d102      	bne.n	80a33a4 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a339e:	2900      	cmp	r1, #0
 80a33a0:	da01      	bge.n	80a33a6 <_ZN5Print5printEli+0x24>
 80a33a2:	e004      	b.n	80a33ae <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a33a4:	b2d2      	uxtb	r2, r2
  }
}
 80a33a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a33aa:	f7ff bfbe 	b.w	80a332a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a33ae:	212d      	movs	r1, #45	; 0x2d
 80a33b0:	f7ff ff88 	bl	80a32c4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a33b4:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a33b6:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a33b8:	4271      	negs	r1, r6
 80a33ba:	4638      	mov	r0, r7
 80a33bc:	f7ff ffb5 	bl	80a332a <_ZN5Print11printNumberEmh>
 80a33c0:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a33c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a33c6 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a33c6:	f7ff bfdc 	b.w	80a3382 <_ZN5Print5printEli>

080a33ca <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a33ca:	b538      	push	{r3, r4, r5, lr}
 80a33cc:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a33ce:	f7ff ffd8 	bl	80a3382 <_ZN5Print5printEli>
 80a33d2:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a33d4:	4628      	mov	r0, r5
 80a33d6:	f7ff ff7e 	bl	80a32d6 <_ZN5Print7printlnEv>
  return n;
}
 80a33da:	4420      	add	r0, r4
 80a33dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a33e0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a33e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a33e4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a33e6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a33e8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a33ea:	4617      	mov	r7, r2
 80a33ec:	461e      	mov	r6, r3
 80a33ee:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a33f2:	f001 fc85 	bl	80a4d00 <__aeabi_dcmpun>
 80a33f6:	b108      	cbz	r0, 80a33fc <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a33f8:	4947      	ldr	r1, [pc, #284]	; (80a3518 <_ZN5Print10printFloatEdh+0x138>)
 80a33fa:	e012      	b.n	80a3422 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a33fc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a3400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3404:	4b45      	ldr	r3, [pc, #276]	; (80a351c <_ZN5Print10printFloatEdh+0x13c>)
 80a3406:	4638      	mov	r0, r7
 80a3408:	4621      	mov	r1, r4
 80a340a:	f001 fc79 	bl	80a4d00 <__aeabi_dcmpun>
 80a340e:	b968      	cbnz	r0, 80a342c <_ZN5Print10printFloatEdh+0x4c>
 80a3410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3414:	4b41      	ldr	r3, [pc, #260]	; (80a351c <_ZN5Print10printFloatEdh+0x13c>)
 80a3416:	4638      	mov	r0, r7
 80a3418:	4621      	mov	r1, r4
 80a341a:	f001 fc53 	bl	80a4cc4 <__aeabi_dcmple>
 80a341e:	b928      	cbnz	r0, 80a342c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3420:	493f      	ldr	r1, [pc, #252]	; (80a3520 <_ZN5Print10printFloatEdh+0x140>)
 80a3422:	4640      	mov	r0, r8
 80a3424:	f7ff ff3a 	bl	80a329c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a342c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3430:	4b3c      	ldr	r3, [pc, #240]	; (80a3524 <_ZN5Print10printFloatEdh+0x144>)
 80a3432:	4638      	mov	r0, r7
 80a3434:	4631      	mov	r1, r6
 80a3436:	f001 fc59 	bl	80a4cec <__aeabi_dcmpgt>
 80a343a:	b108      	cbz	r0, 80a3440 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a343c:	493a      	ldr	r1, [pc, #232]	; (80a3528 <_ZN5Print10printFloatEdh+0x148>)
 80a343e:	e7f0      	b.n	80a3422 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a3440:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3444:	4b39      	ldr	r3, [pc, #228]	; (80a352c <_ZN5Print10printFloatEdh+0x14c>)
 80a3446:	4638      	mov	r0, r7
 80a3448:	4631      	mov	r1, r6
 80a344a:	f001 fc31 	bl	80a4cb0 <__aeabi_dcmplt>
 80a344e:	2800      	cmp	r0, #0
 80a3450:	d1f4      	bne.n	80a343c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a3452:	2200      	movs	r2, #0
 80a3454:	2300      	movs	r3, #0
 80a3456:	4638      	mov	r0, r7
 80a3458:	4631      	mov	r1, r6
 80a345a:	f001 fc29 	bl	80a4cb0 <__aeabi_dcmplt>
 80a345e:	b138      	cbz	r0, 80a3470 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a3460:	212d      	movs	r1, #45	; 0x2d
 80a3462:	4640      	mov	r0, r8
 80a3464:	f7ff ff2e 	bl	80a32c4 <_ZN5Print5printEc>
     number = -number;
 80a3468:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a346c:	4604      	mov	r4, r0
 80a346e:	e000      	b.n	80a3472 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3470:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3472:	492f      	ldr	r1, [pc, #188]	; (80a3530 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3474:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3478:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a347a:	fa5f f389 	uxtb.w	r3, r9
 80a347e:	429d      	cmp	r5, r3
 80a3480:	d906      	bls.n	80a3490 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a3482:	2200      	movs	r2, #0
 80a3484:	4b2b      	ldr	r3, [pc, #172]	; (80a3534 <_ZN5Print10printFloatEdh+0x154>)
 80a3486:	f001 facb 	bl	80a4a20 <__aeabi_ddiv>
 80a348a:	f109 0901 	add.w	r9, r9, #1
 80a348e:	e7f4      	b.n	80a347a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a3490:	463a      	mov	r2, r7
 80a3492:	4633      	mov	r3, r6
 80a3494:	f000 ffe8 	bl	80a4468 <__adddf3>
 80a3498:	460f      	mov	r7, r1
 80a349a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a349c:	f001 fc6e 	bl	80a4d7c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a34a0:	220a      	movs	r2, #10
 80a34a2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a34a4:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a34a6:	4640      	mov	r0, r8
 80a34a8:	f7ff ff3f 	bl	80a332a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a34ac:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a34ae:	b37d      	cbz	r5, 80a3510 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a34b0:	4648      	mov	r0, r9
 80a34b2:	f001 f915 	bl	80a46e0 <__aeabi_ui2d>
 80a34b6:	4602      	mov	r2, r0
 80a34b8:	460b      	mov	r3, r1
 80a34ba:	4630      	mov	r0, r6
 80a34bc:	4639      	mov	r1, r7
 80a34be:	f000 ffd1 	bl	80a4464 <__aeabi_dsub>
 80a34c2:	4606      	mov	r6, r0
 80a34c4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a34c6:	4640      	mov	r0, r8
 80a34c8:	491b      	ldr	r1, [pc, #108]	; (80a3538 <_ZN5Print10printFloatEdh+0x158>)
 80a34ca:	f7ff fee7 	bl	80a329c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a34ce:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a34d0:	4b18      	ldr	r3, [pc, #96]	; (80a3534 <_ZN5Print10printFloatEdh+0x154>)
 80a34d2:	2200      	movs	r2, #0
 80a34d4:	4630      	mov	r0, r6
 80a34d6:	4639      	mov	r1, r7
 80a34d8:	f001 f978 	bl	80a47cc <__aeabi_dmul>
 80a34dc:	460f      	mov	r7, r1
 80a34de:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a34e0:	f001 fc24 	bl	80a4d2c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a34e4:	220a      	movs	r2, #10
 80a34e6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a34e8:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a34ea:	4640      	mov	r0, r8
 80a34ec:	f7ff ff49 	bl	80a3382 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a34f0:	4404      	add	r4, r0
    remainder -= toPrint;
 80a34f2:	4648      	mov	r0, r9
 80a34f4:	f001 f904 	bl	80a4700 <__aeabi_i2d>
 80a34f8:	4602      	mov	r2, r0
 80a34fa:	460b      	mov	r3, r1
 80a34fc:	4630      	mov	r0, r6
 80a34fe:	4639      	mov	r1, r7
 80a3500:	f000 ffb0 	bl	80a4464 <__aeabi_dsub>
 80a3504:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3506:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a350a:	4606      	mov	r6, r0
 80a350c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a350e:	d1df      	bne.n	80a34d0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3510:	4620      	mov	r0, r4
 80a3512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3516:	bf00      	nop
 80a3518:	080a5864 	.word	0x080a5864
 80a351c:	7fefffff 	.word	0x7fefffff
 80a3520:	080a586c 	.word	0x080a586c
 80a3524:	41efffff 	.word	0x41efffff
 80a3528:	080a5868 	.word	0x080a5868
 80a352c:	c1efffff 	.word	0xc1efffff
 80a3530:	3fe00000 	.word	0x3fe00000
 80a3534:	40240000 	.word	0x40240000
 80a3538:	080a5530 	.word	0x080a5530

080a353c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a353e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a3542:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a3544:	9100      	str	r1, [sp, #0]
 80a3546:	f7ff ff4b 	bl	80a33e0 <_ZN5Print10printFloatEdh>
 80a354a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a354c:	4628      	mov	r0, r5
 80a354e:	f7ff fec2 	bl	80a32d6 <_ZN5Print7printlnEv>
  return n;
}
 80a3552:	4420      	add	r0, r4
 80a3554:	b003      	add	sp, #12
 80a3556:	bd30      	pop	{r4, r5, pc}

080a3558 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a3558:	b510      	push	{r4, lr}
 80a355a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a355c:	f7ff fd3f 	bl	80a2fde <_ZNSt14_Function_baseD1Ev>
 80a3560:	4620      	mov	r0, r4
 80a3562:	bd10      	pop	{r4, pc}

080a3564 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3564:	4803      	ldr	r0, [pc, #12]	; (80a3574 <_GLOBAL__sub_I_RGB+0x10>)
 80a3566:	2300      	movs	r3, #0
 80a3568:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a356a:	4a03      	ldr	r2, [pc, #12]	; (80a3578 <_GLOBAL__sub_I_RGB+0x14>)
 80a356c:	4903      	ldr	r1, [pc, #12]	; (80a357c <_GLOBAL__sub_I_RGB+0x18>)
 80a356e:	f000 be25 	b.w	80a41bc <__aeabi_atexit>
 80a3572:	bf00      	nop
 80a3574:	20000210 	.word	0x20000210
 80a3578:	20000084 	.word	0x20000084
 80a357c:	080a3559 	.word	0x080a3559

080a3580 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a3580:	4770      	bx	lr

080a3582 <_ZN8SPIClassD0Ev>:
 80a3582:	b510      	push	{r4, lr}
 80a3584:	4604      	mov	r4, r0
 80a3586:	2110      	movs	r1, #16
 80a3588:	f000 fe1d 	bl	80a41c6 <_ZdlPvj>
 80a358c:	4620      	mov	r0, r4
 80a358e:	bd10      	pop	{r4, pc}

080a3590 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a3590:	b570      	push	{r4, r5, r6, lr}
 80a3592:	4604      	mov	r4, r0
 80a3594:	460e      	mov	r6, r1
 80a3596:	4b07      	ldr	r3, [pc, #28]	; (80a35b4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a3598:	2500      	movs	r5, #0
 80a359a:	6003      	str	r3, [r0, #0]
 80a359c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a35a0:	f7ff fad4 	bl	80a2b4c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a35a4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a35a6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a35a8:	f7ff fbc2 	bl	80a2d30 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a35ac:	60a5      	str	r5, [r4, #8]
}
 80a35ae:	4620      	mov	r0, r4
 80a35b0:	bd70      	pop	{r4, r5, r6, pc}
 80a35b2:	bf00      	nop
 80a35b4:	080a5878 	.word	0x080a5878

080a35b8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a35b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a35bc:	7900      	ldrb	r0, [r0, #4]
 80a35be:	f7ff bb8f 	b.w	80a2ce0 <HAL_SPI_Begin>

080a35c2 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a35c2:	7900      	ldrb	r0, [r0, #4]
 80a35c4:	f7ff bb94 	b.w	80a2cf0 <HAL_SPI_Set_Bit_Order>

080a35c8 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a35c8:	7900      	ldrb	r0, [r0, #4]
 80a35ca:	f7ff bb99 	b.w	80a2d00 <HAL_SPI_Set_Data_Mode>
	...

080a35d0 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a35d0:	4a05      	ldr	r2, [pc, #20]	; (80a35e8 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a35d2:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a35d4:	5c99      	ldrb	r1, [r3, r2]
 80a35d6:	4281      	cmp	r1, r0
 80a35d8:	d002      	beq.n	80a35e0 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a35da:	3301      	adds	r3, #1
 80a35dc:	2b08      	cmp	r3, #8
 80a35de:	d1f9      	bne.n	80a35d4 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a35e0:	1c58      	adds	r0, r3, #1
}
 80a35e2:	b2c0      	uxtb	r0, r0
 80a35e4:	4770      	bx	lr
 80a35e6:	bf00      	nop
 80a35e8:	080a5880 	.word	0x080a5880

080a35ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a35ec:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a35ee:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a35f0:	6018      	str	r0, [r3, #0]
 80a35f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a35f4:	6818      	ldr	r0, [r3, #0]
 80a35f6:	b2e5      	uxtb	r5, r4
 80a35f8:	4288      	cmp	r0, r1
 80a35fa:	d906      	bls.n	80a360a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a35fc:	3401      	adds	r4, #1
 80a35fe:	2c08      	cmp	r4, #8
 80a3600:	d002      	beq.n	80a3608 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a3602:	0840      	lsrs	r0, r0, #1
 80a3604:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a3606:	e7f5      	b.n	80a35f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a3608:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a360a:	4b02      	ldr	r3, [pc, #8]	; (80a3614 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a360c:	5d5b      	ldrb	r3, [r3, r5]
 80a360e:	7013      	strb	r3, [r2, #0]
 80a3610:	bd30      	pop	{r4, r5, pc}
 80a3612:	bf00      	nop
 80a3614:	080a5880 	.word	0x080a5880

080a3618 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a3618:	b570      	push	{r4, r5, r6, lr}
 80a361a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a361c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a3620:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a3622:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a3624:	2214      	movs	r2, #20
 80a3626:	2100      	movs	r1, #0
 80a3628:	a803      	add	r0, sp, #12
 80a362a:	f001 feda 	bl	80a53e2 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a362e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a3630:	a903      	add	r1, sp, #12
 80a3632:	4630      	mov	r0, r6
 80a3634:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a3636:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a363a:	f7ff fb89 	bl	80a2d50 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a363e:	ab02      	add	r3, sp, #8
 80a3640:	f10d 0207 	add.w	r2, sp, #7
 80a3644:	4629      	mov	r1, r5
 80a3646:	9804      	ldr	r0, [sp, #16]
 80a3648:	f7ff ffd0 	bl	80a35ec <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a364c:	7920      	ldrb	r0, [r4, #4]
 80a364e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a3652:	f7ff fb5d 	bl	80a2d10 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a3656:	9802      	ldr	r0, [sp, #8]
 80a3658:	b008      	add	sp, #32
 80a365a:	bd70      	pop	{r4, r5, r6, pc}

080a365c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a365c:	b538      	push	{r3, r4, r5, lr}
 80a365e:	4604      	mov	r4, r0
    if (dividerReference)
 80a3660:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a3662:	4608      	mov	r0, r1
    if (dividerReference)
 80a3664:	b14d      	cbz	r5, 80a367a <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a3666:	f7ff ffb3 	bl	80a35d0 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a366a:	2201      	movs	r2, #1
 80a366c:	fa25 f100 	lsr.w	r1, r5, r0
 80a3670:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a3672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a3676:	f7ff bfcf 	b.w	80a3618 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a367a:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a367c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a3680:	f7ff bb46 	b.w	80a2d10 <HAL_SPI_Set_Clock_Divider>

080a3684 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3684:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a3686:	7900      	ldrb	r0, [r0, #4]
 80a3688:	f7ff fb4a 	bl	80a2d20 <HAL_SPI_Send_Receive_Data>
}
 80a368c:	b2c0      	uxtb	r0, r0
 80a368e:	bd08      	pop	{r3, pc}

080a3690 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a3690:	7900      	ldrb	r0, [r0, #4]
 80a3692:	f7ff bb55 	b.w	80a2d40 <HAL_SPI_Is_Enabled>

080a3696 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a3696:	b510      	push	{r4, lr}
 80a3698:	4604      	mov	r4, r0
{
	free(buffer);
 80a369a:	6800      	ldr	r0, [r0, #0]
 80a369c:	f7ff fc8c 	bl	80a2fb8 <free>
}
 80a36a0:	4620      	mov	r0, r4
 80a36a2:	bd10      	pop	{r4, pc}

080a36a4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a36a4:	b510      	push	{r4, lr}
 80a36a6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a36a8:	6800      	ldr	r0, [r0, #0]
 80a36aa:	b108      	cbz	r0, 80a36b0 <_ZN6String10invalidateEv+0xc>
 80a36ac:	f7ff fc84 	bl	80a2fb8 <free>
	buffer = NULL;
 80a36b0:	2300      	movs	r3, #0
 80a36b2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a36b4:	60a3      	str	r3, [r4, #8]
 80a36b6:	6063      	str	r3, [r4, #4]
 80a36b8:	bd10      	pop	{r4, pc}

080a36ba <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a36ba:	b538      	push	{r3, r4, r5, lr}
 80a36bc:	4604      	mov	r4, r0
 80a36be:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a36c0:	6800      	ldr	r0, [r0, #0]
 80a36c2:	3101      	adds	r1, #1
 80a36c4:	f7ff fc80 	bl	80a2fc8 <realloc>
	if (newbuffer) {
 80a36c8:	b110      	cbz	r0, 80a36d0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a36ca:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a36ce:	2001      	movs	r0, #1
	}
	return 0;
}
 80a36d0:	bd38      	pop	{r3, r4, r5, pc}

080a36d2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a36d2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a36d4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a36d6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a36d8:	b113      	cbz	r3, 80a36e0 <_ZN6String7reserveEj+0xe>
 80a36da:	6843      	ldr	r3, [r0, #4]
 80a36dc:	428b      	cmp	r3, r1
 80a36de:	d207      	bcs.n	80a36f0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a36e0:	4620      	mov	r0, r4
 80a36e2:	f7ff ffea 	bl	80a36ba <_ZN6String12changeBufferEj>
 80a36e6:	b120      	cbz	r0, 80a36f2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a36e8:	68a3      	ldr	r3, [r4, #8]
 80a36ea:	b90b      	cbnz	r3, 80a36f0 <_ZN6String7reserveEj+0x1e>
 80a36ec:	6822      	ldr	r2, [r4, #0]
 80a36ee:	7013      	strb	r3, [r2, #0]
 80a36f0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a36f2:	bd10      	pop	{r4, pc}

080a36f4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a36f4:	b570      	push	{r4, r5, r6, lr}
 80a36f6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a36f8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a36fa:	4604      	mov	r4, r0
 80a36fc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a36fe:	f7ff ffe8 	bl	80a36d2 <_ZN6String7reserveEj>
 80a3702:	b918      	cbnz	r0, 80a370c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3704:	4620      	mov	r0, r4
 80a3706:	f7ff ffcd 	bl	80a36a4 <_ZN6String10invalidateEv>
		return *this;
 80a370a:	e009      	b.n	80a3720 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a370c:	462a      	mov	r2, r5
 80a370e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3710:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3712:	6820      	ldr	r0, [r4, #0]
 80a3714:	f001 fe5a 	bl	80a53cc <memcpy>
	buffer[len] = 0;
 80a3718:	6822      	ldr	r2, [r4, #0]
 80a371a:	68a3      	ldr	r3, [r4, #8]
 80a371c:	2100      	movs	r1, #0
 80a371e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3720:	4620      	mov	r0, r4
 80a3722:	bd70      	pop	{r4, r5, r6, pc}

080a3724 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3724:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3726:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3728:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a372a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a372c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a372e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3730:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3732:	460d      	mov	r5, r1
 80a3734:	b139      	cbz	r1, 80a3746 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3736:	4608      	mov	r0, r1
 80a3738:	f001 fec8 	bl	80a54cc <strlen>
 80a373c:	4629      	mov	r1, r5
 80a373e:	4602      	mov	r2, r0
 80a3740:	4620      	mov	r0, r4
 80a3742:	f7ff ffd7 	bl	80a36f4 <_ZN6String4copyEPKcj>
}
 80a3746:	4620      	mov	r0, r4
 80a3748:	bd38      	pop	{r3, r4, r5, pc}

080a374a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a374a:	b538      	push	{r3, r4, r5, lr}
 80a374c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a374e:	460c      	mov	r4, r1
 80a3750:	b141      	cbz	r1, 80a3764 <_ZN6StringaSEPKc+0x1a>
 80a3752:	4608      	mov	r0, r1
 80a3754:	f001 feba 	bl	80a54cc <strlen>
 80a3758:	4621      	mov	r1, r4
 80a375a:	4602      	mov	r2, r0
 80a375c:	4628      	mov	r0, r5
 80a375e:	f7ff ffc9 	bl	80a36f4 <_ZN6String4copyEPKcj>
 80a3762:	e001      	b.n	80a3768 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a3764:	f7ff ff9e 	bl	80a36a4 <_ZN6String10invalidateEv>

	return *this;
}
 80a3768:	4628      	mov	r0, r5
 80a376a:	bd38      	pop	{r3, r4, r5, pc}

080a376c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a376c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a376e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3770:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3772:	b912      	cbnz	r2, 80a377a <_ZNK6String6equalsEPKc+0xe>
 80a3774:	b919      	cbnz	r1, 80a377e <_ZNK6String6equalsEPKc+0x12>
 80a3776:	2001      	movs	r0, #1
 80a3778:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a377a:	b911      	cbnz	r1, 80a3782 <_ZNK6String6equalsEPKc+0x16>
 80a377c:	6803      	ldr	r3, [r0, #0]
 80a377e:	7818      	ldrb	r0, [r3, #0]
 80a3780:	e002      	b.n	80a3788 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a3782:	6800      	ldr	r0, [r0, #0]
 80a3784:	f001 fe98 	bl	80a54b8 <strcmp>
 80a3788:	fab0 f080 	clz	r0, r0
 80a378c:	0940      	lsrs	r0, r0, #5
}
 80a378e:	bd08      	pop	{r3, pc}

080a3790 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a3790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a3794:	4b03      	ldr	r3, [pc, #12]	; (80a37a4 <_GLOBAL__sub_I_System+0x14>)
 80a3796:	2000      	movs	r0, #0
 80a3798:	7018      	strb	r0, [r3, #0]
 80a379a:	8058      	strh	r0, [r3, #2]
 80a379c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a379e:	f7ff bb67 	b.w	80a2e70 <set_system_mode>
 80a37a2:	bf00      	nop
 80a37a4:	20000220 	.word	0x20000220

080a37a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a37a8:	4b02      	ldr	r3, [pc, #8]	; (80a37b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a37aa:	681a      	ldr	r2, [r3, #0]
 80a37ac:	4b02      	ldr	r3, [pc, #8]	; (80a37b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a37ae:	601a      	str	r2, [r3, #0]
 80a37b0:	4770      	bx	lr
 80a37b2:	bf00      	nop
 80a37b4:	2000001c 	.word	0x2000001c
 80a37b8:	20000228 	.word	0x20000228

080a37bc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a37bc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a37be:	6804      	ldr	r4, [r0, #0]
 80a37c0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a37c2:	46a4      	mov	ip, r4
    }
 80a37c4:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a37c6:	4760      	bx	ip

080a37c8 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a37c8:	6803      	ldr	r3, [r0, #0]
 80a37ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a37cc:	4718      	bx	r3

080a37ce <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a37ce:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a37d0:	4770      	bx	lr

080a37d2 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a37d2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a37d4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a37d6:	1a10      	subs	r0, r2, r0
 80a37d8:	4770      	bx	lr

080a37da <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a37da:	b513      	push	{r0, r1, r4, lr}
 80a37dc:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a37de:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a37e0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a37e4:	68d4      	ldr	r4, [r2, #12]
 80a37e6:	4619      	mov	r1, r3
 80a37e8:	2201      	movs	r2, #1
 80a37ea:	47a0      	blx	r4
}
 80a37ec:	b002      	add	sp, #8
 80a37ee:	bd10      	pop	{r4, pc}

080a37f0 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a37f0:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a37f2:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a37f4:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a37f6:	691b      	ldr	r3, [r3, #16]
 80a37f8:	4798      	blx	r3
 80a37fa:	b128      	cbz	r0, 80a3808 <_ZN3UDP4readEv+0x18>
 80a37fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a37fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3800:	1c59      	adds	r1, r3, #1
 80a3802:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a3804:	5cd0      	ldrb	r0, [r2, r3]
 80a3806:	bd10      	pop	{r4, pc}
 80a3808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a380c:	bd10      	pop	{r4, pc}

080a380e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a380e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a3810:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a3812:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a3814:	691b      	ldr	r3, [r3, #16]
 80a3816:	4798      	blx	r3
 80a3818:	b118      	cbz	r0, 80a3822 <_ZN3UDP4peekEv+0x14>
 80a381a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a381c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a381e:	5cd0      	ldrb	r0, [r2, r3]
 80a3820:	bd10      	pop	{r4, pc}
 80a3822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3826:	bd10      	pop	{r4, pc}

080a3828 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a3828:	4770      	bx	lr

080a382a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a382a:	4603      	mov	r3, r0
 80a382c:	4608      	mov	r0, r1
 80a382e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a3830:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a3832:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3834:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a3836:	6803      	ldr	r3, [r0, #0]
 80a3838:	1a52      	subs	r2, r2, r1
 80a383a:	68db      	ldr	r3, [r3, #12]
 80a383c:	4421      	add	r1, r4
}
 80a383e:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a3840:	4718      	bx	r3

080a3842 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a3842:	f1a0 0010 	sub.w	r0, r0, #16
 80a3846:	f7ff bff0 	b.w	80a382a <_ZNK3UDP7printToER5Print>

080a384a <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a384a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a384c:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a384e:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a3850:	460f      	mov	r7, r1
 80a3852:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a3854:	f7ff fcf6 	bl	80a3244 <_ZN5spark12NetworkClass4fromEm>
 80a3858:	6803      	ldr	r3, [r0, #0]
 80a385a:	68db      	ldr	r3, [r3, #12]
 80a385c:	4798      	blx	r3
 80a385e:	b1b8      	cbz	r0, 80a3890 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a3860:	2102      	movs	r1, #2
 80a3862:	463b      	mov	r3, r7
 80a3864:	2211      	movs	r2, #17
 80a3866:	4608      	mov	r0, r1
 80a3868:	9600      	str	r6, [sp, #0]
 80a386a:	f7ff fa11 	bl	80a2c90 <socket_create>
 80a386e:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a3870:	f7ff fa06 	bl	80a2c80 <socket_handle_valid>
 80a3874:	4604      	mov	r4, r0
 80a3876:	b130      	cbz	r0, 80a3886 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3878:	2300      	movs	r3, #0
 80a387a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a387c:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a387e:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a3880:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a3882:	2001      	movs	r0, #1
 80a3884:	e004      	b.n	80a3890 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a3886:	682b      	ldr	r3, [r5, #0]
 80a3888:	4628      	mov	r0, r5
 80a388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a388c:	4798      	blx	r3
            bound = false;
 80a388e:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a3890:	b003      	add	sp, #12
 80a3892:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3894 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a3894:	b538      	push	{r3, r4, r5, lr}
 80a3896:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a3898:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a389a:	f7ff fa19 	bl	80a2cd0 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a389e:	4285      	cmp	r5, r0
 80a38a0:	d002      	beq.n	80a38a8 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a38a2:	6960      	ldr	r0, [r4, #20]
 80a38a4:	f7ff fa0c 	bl	80a2cc0 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a38a8:	f7ff fa12 	bl	80a2cd0 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a38ac:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a38ae:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a38b0:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a38b2:	8723      	strh	r3, [r4, #56]	; 0x38
 80a38b4:	bd38      	pop	{r3, r4, r5, pc}

080a38b6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a38b6:	b530      	push	{r4, r5, lr}
 80a38b8:	b087      	sub	sp, #28
 80a38ba:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a38be:	2502      	movs	r5, #2
 80a38c0:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a38c4:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a38c8:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a38ca:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a38cc:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a38d0:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a38d4:	799c      	ldrb	r4, [r3, #6]
 80a38d6:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a38da:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a38dc:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a38de:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a38e2:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a38e6:	2310      	movs	r3, #16
 80a38e8:	9301      	str	r3, [sp, #4]
 80a38ea:	ab02      	add	r3, sp, #8
 80a38ec:	9300      	str	r3, [sp, #0]
 80a38ee:	6940      	ldr	r0, [r0, #20]
 80a38f0:	2300      	movs	r3, #0
 80a38f2:	f7ff f9dd 	bl	80a2cb0 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a38f6:	b007      	add	sp, #28
 80a38f8:	bd30      	pop	{r4, r5, pc}

080a38fa <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a38fa:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a38fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a38fe:	4605      	mov	r5, r0
 80a3900:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3902:	b113      	cbz	r3, 80a390a <_ZN3UDP5writeEPKhj+0x10>
 80a3904:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a3906:	1a24      	subs	r4, r4, r0
 80a3908:	e000      	b.n	80a390c <_ZN3UDP5writeEPKhj+0x12>
 80a390a:	461c      	mov	r4, r3
 80a390c:	4294      	cmp	r4, r2
 80a390e:	bf28      	it	cs
 80a3910:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a3912:	4418      	add	r0, r3
 80a3914:	4622      	mov	r2, r4
 80a3916:	f001 fd59 	bl	80a53cc <memcpy>
    _offset += size;
 80a391a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a391c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a391e:	4423      	add	r3, r4
 80a3920:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3922:	bd38      	pop	{r3, r4, r5, pc}

080a3924 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3924:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a3926:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3928:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a392a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a392c:	460e      	mov	r6, r1
 80a392e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a3930:	4798      	blx	r3
 80a3932:	b188      	cbz	r0, 80a3958 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a3934:	6823      	ldr	r3, [r4, #0]
 80a3936:	4620      	mov	r0, r4
 80a3938:	691b      	ldr	r3, [r3, #16]
 80a393a:	4798      	blx	r3
 80a393c:	4285      	cmp	r5, r0
 80a393e:	bfa8      	it	ge
 80a3940:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a3942:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3944:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a3946:	462a      	mov	r2, r5
 80a3948:	4419      	add	r1, r3
 80a394a:	4630      	mov	r0, r6
 80a394c:	f001 fd3e 	bl	80a53cc <memcpy>
      _offset += read;
 80a3950:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3952:	442b      	add	r3, r5
 80a3954:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a3956:	e001      	b.n	80a395c <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a3958:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a395c:	4628      	mov	r0, r5
 80a395e:	bd70      	pop	{r4, r5, r6, pc}

080a3960 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3960:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3962:	4604      	mov	r4, r0
 80a3964:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3966:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3968:	460d      	mov	r5, r1
 80a396a:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a396c:	f7ff fc6a 	bl	80a3244 <_ZN5spark12NetworkClass4fromEm>
 80a3970:	6803      	ldr	r3, [r0, #0]
 80a3972:	68db      	ldr	r3, [r3, #12]
 80a3974:	4798      	blx	r3
 80a3976:	b310      	cbz	r0, 80a39be <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a3978:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a397a:	f7ff f9a9 	bl	80a2cd0 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a397e:	4287      	cmp	r7, r0
 80a3980:	d01d      	beq.n	80a39be <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a3982:	b1e5      	cbz	r5, 80a39be <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a3984:	ab08      	add	r3, sp, #32
 80a3986:	2210      	movs	r2, #16
 80a3988:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a398c:	9301      	str	r3, [sp, #4]
 80a398e:	eb0d 0302 	add.w	r3, sp, r2
 80a3992:	9300      	str	r3, [sp, #0]
 80a3994:	4629      	mov	r1, r5
 80a3996:	2300      	movs	r3, #0
 80a3998:	4632      	mov	r2, r6
 80a399a:	6960      	ldr	r0, [r4, #20]
 80a399c:	f7ff f980 	bl	80a2ca0 <socket_receivefrom>
        if (ret >= 0)
 80a39a0:	1e05      	subs	r5, r0, #0
 80a39a2:	db0e      	blt.n	80a39c2 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a39a4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a39a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a39ac:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a39ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a39b2:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a39b4:	f104 001c 	add.w	r0, r4, #28
 80a39b8:	f7ff fbd4 	bl	80a3164 <_ZN9IPAddressaSEPKh>
 80a39bc:	e001      	b.n	80a39c2 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a39be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a39c2:	4628      	mov	r0, r5
 80a39c4:	b009      	add	sp, #36	; 0x24
 80a39c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a39c8 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a39c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a39cc:	4606      	mov	r6, r0
 80a39ce:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a39d0:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a39d2:	460d      	mov	r5, r1
 80a39d4:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a39d6:	f7ff fc35 	bl	80a3244 <_ZN5spark12NetworkClass4fromEm>
 80a39da:	6803      	ldr	r3, [r0, #0]
 80a39dc:	68db      	ldr	r3, [r3, #12]
 80a39de:	4798      	blx	r3
 80a39e0:	b1f8      	cbz	r0, 80a3a22 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a39e2:	4628      	mov	r0, r5
 80a39e4:	f001 fd72 	bl	80a54cc <strlen>
 80a39e8:	2400      	movs	r4, #0
 80a39ea:	b281      	uxth	r1, r0
 80a39ec:	9400      	str	r4, [sp, #0]
 80a39ee:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a39f0:	aa03      	add	r2, sp, #12
 80a39f2:	4628      	mov	r0, r5
 80a39f4:	f7ff fa34 	bl	80a2e60 <inet_gethostbyname>
 80a39f8:	b990      	cbnz	r0, 80a3a20 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a39fa:	a903      	add	r1, sp, #12
 80a39fc:	a808      	add	r0, sp, #32
 80a39fe:	f7ff fb7d 	bl	80a30fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a3a02:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3a04:	ac0f      	add	r4, sp, #60	; 0x3c
 80a3a06:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a3a08:	4b07      	ldr	r3, [pc, #28]	; (80a3a28 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a3a0a:	ad09      	add	r5, sp, #36	; 0x24
 80a3a0c:	930e      	str	r3, [sp, #56]	; 0x38
 80a3a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3a12:	682b      	ldr	r3, [r5, #0]
 80a3a14:	4642      	mov	r2, r8
 80a3a16:	7023      	strb	r3, [r4, #0]
 80a3a18:	a90e      	add	r1, sp, #56	; 0x38
 80a3a1a:	4630      	mov	r0, r6
 80a3a1c:	47b8      	blx	r7
 80a3a1e:	e000      	b.n	80a3a22 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a3a20:	4620      	mov	r0, r4
}
 80a3a22:	b014      	add	sp, #80	; 0x50
 80a3a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3a28:	080a5740 	.word	0x080a5740

080a3a2c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a3a2c:	b570      	push	{r4, r5, r6, lr}
 80a3a2e:	4604      	mov	r4, r0
 80a3a30:	4606      	mov	r6, r0
 80a3a32:	4b05      	ldr	r3, [pc, #20]	; (80a3a48 <_ZN3UDP8remoteIPEv+0x1c>)
 80a3a34:	f101 0520 	add.w	r5, r1, #32
 80a3a38:	f844 3b04 	str.w	r3, [r4], #4
 80a3a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3a40:	682b      	ldr	r3, [r5, #0]
 80a3a42:	4630      	mov	r0, r6
 80a3a44:	7023      	strb	r3, [r4, #0]
 80a3a46:	bd70      	pop	{r4, r5, r6, pc}
 80a3a48:	080a5740 	.word	0x080a5740

080a3a4c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3a4e:	4694      	mov	ip, r2
 80a3a50:	468e      	mov	lr, r1
 80a3a52:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3a54:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3a56:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3a58:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a3a5a:	4a09      	ldr	r2, [pc, #36]	; (80a3a80 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a3a5c:	ac03      	add	r4, sp, #12
 80a3a5e:	1d1d      	adds	r5, r3, #4
 80a3a60:	9202      	str	r2, [sp, #8]
 80a3a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3a66:	682b      	ldr	r3, [r5, #0]
 80a3a68:	4662      	mov	r2, ip
 80a3a6a:	7023      	strb	r3, [r4, #0]
 80a3a6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a3a70:	4671      	mov	r1, lr
 80a3a72:	9300      	str	r3, [sp, #0]
 80a3a74:	4630      	mov	r0, r6
 80a3a76:	ab02      	add	r3, sp, #8
 80a3a78:	47b8      	blx	r7
    }
 80a3a7a:	b009      	add	sp, #36	; 0x24
 80a3a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3a7e:	bf00      	nop
 80a3a80:	080a5740 	.word	0x080a5740

080a3a84 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a3a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3a86:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a3a88:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a3a8a:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a3a8c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a3a8e:	4b0d      	ldr	r3, [pc, #52]	; (80a3ac4 <_ZN3UDP9endPacketEv+0x40>)
 80a3a90:	ad03      	add	r5, sp, #12
 80a3a92:	f100 0620 	add.w	r6, r0, #32
 80a3a96:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a3a9a:	9302      	str	r3, [sp, #8]
 80a3a9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a3a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3aa0:	6833      	ldr	r3, [r6, #0]
 80a3aa2:	4672      	mov	r2, lr
 80a3aa4:	702b      	strb	r3, [r5, #0]
 80a3aa6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a3aa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a3aaa:	9300      	str	r3, [sp, #0]
 80a3aac:	4620      	mov	r0, r4
 80a3aae:	ab02      	add	r3, sp, #8
 80a3ab0:	47b8      	blx	r7
 80a3ab2:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a3ab4:	6823      	ldr	r3, [r4, #0]
 80a3ab6:	4620      	mov	r0, r4
 80a3ab8:	69db      	ldr	r3, [r3, #28]
 80a3aba:	4798      	blx	r3
    return result;
}
 80a3abc:	4628      	mov	r0, r5
 80a3abe:	b009      	add	sp, #36	; 0x24
 80a3ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3ac2:	bf00      	nop
 80a3ac4:	080a5740 	.word	0x080a5740

080a3ac8 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a3ac8:	b538      	push	{r3, r4, r5, lr}
 80a3aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3ace:	6083      	str	r3, [r0, #8]
 80a3ad0:	4b0b      	ldr	r3, [pc, #44]	; (80a3b00 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3ad2:	2500      	movs	r5, #0
 80a3ad4:	f103 0208 	add.w	r2, r3, #8
 80a3ad8:	336c      	adds	r3, #108	; 0x6c
 80a3ada:	6002      	str	r2, [r0, #0]
 80a3adc:	6103      	str	r3, [r0, #16]
 80a3ade:	6045      	str	r5, [r0, #4]
 80a3ae0:	4604      	mov	r4, r0
 80a3ae2:	f7ff f8f5 	bl	80a2cd0 <socket_handle_invalid>
 80a3ae6:	6160      	str	r0, [r4, #20]
 80a3ae8:	f104 001c 	add.w	r0, r4, #28
 80a3aec:	f7ff faf8 	bl	80a30e0 <_ZN9IPAddressC1Ev>
 80a3af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a3af4:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a3af6:	8725      	strh	r5, [r4, #56]	; 0x38
 80a3af8:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a3afa:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a3afc:	4620      	mov	r0, r4
 80a3afe:	bd38      	pop	{r3, r4, r5, pc}
 80a3b00:	080a58b4 	.word	0x080a58b4

080a3b04 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3b04:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a3b06:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3b0a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a3b0c:	b123      	cbz	r3, 80a3b18 <_ZN3UDP13releaseBufferEv+0x14>
 80a3b0e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a3b10:	b110      	cbz	r0, 80a3b18 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a3b12:	2101      	movs	r1, #1
 80a3b14:	f000 fb57 	bl	80a41c6 <_ZdlPvj>
    }
    _buffer = NULL;
 80a3b18:	2300      	movs	r3, #0
 80a3b1a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a3b1c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a3b20:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b22:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3b24:	8723      	strh	r3, [r4, #56]	; 0x38
 80a3b26:	bd10      	pop	{r4, pc}

080a3b28 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a3b28:	b570      	push	{r4, r5, r6, lr}
 80a3b2a:	4604      	mov	r4, r0
 80a3b2c:	4616      	mov	r6, r2
 80a3b2e:	460d      	mov	r5, r1
    releaseBuffer();
 80a3b30:	f7ff ffe8 	bl	80a3b04 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a3b34:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a3b36:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a3b38:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a3b3a:	b93e      	cbnz	r6, 80a3b4c <_ZN3UDP9setBufferEjPh+0x24>
 80a3b3c:	b135      	cbz	r5, 80a3b4c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a3b3e:	4628      	mov	r0, r5
 80a3b40:	f7fc faab 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a3b44:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a3b46:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a3b48:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a3b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3b4e:	b103      	cbz	r3, 80a3b52 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a3b50:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a3b52:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a3b54:	3000      	adds	r0, #0
 80a3b56:	bf18      	it	ne
 80a3b58:	2001      	movne	r0, #1
 80a3b5a:	bd70      	pop	{r4, r5, r6, pc}

080a3b5c <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3b5e:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3b60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3b62:	4605      	mov	r5, r0
 80a3b64:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3b66:	b91a      	cbnz	r2, 80a3b70 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a3b68:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a3b6a:	b109      	cbz	r1, 80a3b70 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a3b6c:	f7ff ffdc 	bl	80a3b28 <_ZN3UDP9setBufferEjPh>
 80a3b70:	f105 0620 	add.w	r6, r5, #32
 80a3b74:	3404      	adds	r4, #4
 80a3b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3b78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3b7a:	6823      	ldr	r3, [r4, #0]
 80a3b7c:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b7e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a3b80:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b82:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a3b84:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a3b86:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a3b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3b8a <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a3b8a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a3b8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a3b8e:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a3b90:	b91a      	cbnz	r2, 80a3b9a <_ZN3UDP11parsePacketEm+0x10>
 80a3b92:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a3b94:	b109      	cbz	r1, 80a3b9a <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a3b96:	f7ff ffc7 	bl	80a3b28 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a3b9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3b9c:	2300      	movs	r3, #0
 80a3b9e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3ba0:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a3ba2:	b141      	cbz	r1, 80a3bb6 <_ZN3UDP11parsePacketEm+0x2c>
 80a3ba4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a3ba6:	b132      	cbz	r2, 80a3bb6 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a3ba8:	6820      	ldr	r0, [r4, #0]
 80a3baa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a3bac:	4620      	mov	r0, r4
 80a3bae:	47a8      	blx	r5
        if (result>0) {
 80a3bb0:	2800      	cmp	r0, #0
            _total = result;
 80a3bb2:	bfc8      	it	gt
 80a3bb4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a3bb6:	6823      	ldr	r3, [r4, #0]
 80a3bb8:	4620      	mov	r0, r4
}
 80a3bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a3bbe:	691b      	ldr	r3, [r3, #16]
 80a3bc0:	4718      	bx	r3

080a3bc2 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3bc2:	4770      	bx	lr

080a3bc4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3bc4:	7441      	strb	r1, [r0, #17]
 80a3bc6:	4770      	bx	lr

080a3bc8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a3bc8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a3bca:	7c00      	ldrb	r0, [r0, #16]
 80a3bcc:	f7ff f900 	bl	80a2dd0 <HAL_USART_Available_Data_For_Write>
}
 80a3bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3bd4:	bd08      	pop	{r3, pc}

080a3bd6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3bd6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3bd8:	7c00      	ldrb	r0, [r0, #16]
 80a3bda:	f7ff f8d1 	bl	80a2d80 <HAL_USART_Available_Data>
}
 80a3bde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3be2:	bd08      	pop	{r3, pc}

080a3be4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3be4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3be6:	7c00      	ldrb	r0, [r0, #16]
 80a3be8:	f7ff f8da 	bl	80a2da0 <HAL_USART_Peek_Data>
}
 80a3bec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3bf0:	bf28      	it	cs
 80a3bf2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3bf6:	bd08      	pop	{r3, pc}

080a3bf8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3bf8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3bfa:	7c00      	ldrb	r0, [r0, #16]
 80a3bfc:	f7ff f8c8 	bl	80a2d90 <HAL_USART_Read_Data>
}
 80a3c00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3c04:	bf28      	it	cs
 80a3c06:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3c0a:	bd08      	pop	{r3, pc}

080a3c0c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3c0c:	7c00      	ldrb	r0, [r0, #16]
 80a3c0e:	f7ff b8cf 	b.w	80a2db0 <HAL_USART_Flush_Data>

080a3c12 <_ZN11USARTSerialD0Ev>:
 80a3c12:	b510      	push	{r4, lr}
 80a3c14:	4604      	mov	r4, r0
 80a3c16:	2114      	movs	r1, #20
 80a3c18:	f000 fad5 	bl	80a41c6 <_ZdlPvj>
 80a3c1c:	4620      	mov	r0, r4
 80a3c1e:	bd10      	pop	{r4, pc}

080a3c20 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3c20:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3c22:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3c24:	4604      	mov	r4, r0
 80a3c26:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3c28:	b925      	cbnz	r5, 80a3c34 <_ZN11USARTSerial5writeEh+0x14>
 80a3c2a:	7c00      	ldrb	r0, [r0, #16]
 80a3c2c:	f7ff f8d0 	bl	80a2dd0 <HAL_USART_Available_Data_For_Write>
 80a3c30:	2800      	cmp	r0, #0
 80a3c32:	dd05      	ble.n	80a3c40 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3c34:	4631      	mov	r1, r6
 80a3c36:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3c3c:	f7ff b898 	b.w	80a2d70 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3c40:	4628      	mov	r0, r5
 80a3c42:	bd70      	pop	{r4, r5, r6, pc}

080a3c44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3c44:	b510      	push	{r4, lr}
 80a3c46:	4604      	mov	r4, r0
 80a3c48:	4608      	mov	r0, r1
 80a3c4a:	4611      	mov	r1, r2
 80a3c4c:	2200      	movs	r2, #0
 80a3c4e:	6062      	str	r2, [r4, #4]
 80a3c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3c54:	60a2      	str	r2, [r4, #8]
 80a3c56:	4a05      	ldr	r2, [pc, #20]	; (80a3c6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3c58:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3c5a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3c5c:	2201      	movs	r2, #1
 80a3c5e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3c60:	461a      	mov	r2, r3
 80a3c62:	f7ff f87d 	bl	80a2d60 <HAL_USART_Init>
}
 80a3c66:	4620      	mov	r0, r4
 80a3c68:	bd10      	pop	{r4, pc}
 80a3c6a:	bf00      	nop
 80a3c6c:	080a592c 	.word	0x080a592c

080a3c70 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3c70:	7c00      	ldrb	r0, [r0, #16]
 80a3c72:	f7ff b8a5 	b.w	80a2dc0 <HAL_USART_Is_Enabled>
	...

080a3c78 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3c78:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3c7a:	4d0c      	ldr	r5, [pc, #48]	; (80a3cac <_Z22__fetch_global_Serial1v+0x34>)
 80a3c7c:	6829      	ldr	r1, [r5, #0]
 80a3c7e:	f011 0401 	ands.w	r4, r1, #1
 80a3c82:	d111      	bne.n	80a3ca8 <_Z22__fetch_global_Serial1v+0x30>
 80a3c84:	4628      	mov	r0, r5
 80a3c86:	f7fc fa0c 	bl	80a00a2 <__cxa_guard_acquire>
 80a3c8a:	b168      	cbz	r0, 80a3ca8 <_Z22__fetch_global_Serial1v+0x30>
 80a3c8c:	4a08      	ldr	r2, [pc, #32]	; (80a3cb0 <_Z22__fetch_global_Serial1v+0x38>)
 80a3c8e:	4621      	mov	r1, r4
 80a3c90:	4b08      	ldr	r3, [pc, #32]	; (80a3cb4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3c92:	4809      	ldr	r0, [pc, #36]	; (80a3cb8 <_Z22__fetch_global_Serial1v+0x40>)
 80a3c94:	f7ff ffd6 	bl	80a3c44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3c98:	4628      	mov	r0, r5
 80a3c9a:	f7fc fa07 	bl	80a00ac <__cxa_guard_release>
 80a3c9e:	4a07      	ldr	r2, [pc, #28]	; (80a3cbc <_Z22__fetch_global_Serial1v+0x44>)
 80a3ca0:	4907      	ldr	r1, [pc, #28]	; (80a3cc0 <_Z22__fetch_global_Serial1v+0x48>)
 80a3ca2:	4805      	ldr	r0, [pc, #20]	; (80a3cb8 <_Z22__fetch_global_Serial1v+0x40>)
 80a3ca4:	f000 fa8a 	bl	80a41bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3ca8:	4803      	ldr	r0, [pc, #12]	; (80a3cb8 <_Z22__fetch_global_Serial1v+0x40>)
 80a3caa:	bd38      	pop	{r3, r4, r5, pc}
 80a3cac:	200002c4 	.word	0x200002c4
 80a3cb0:	200002c8 	.word	0x200002c8
 80a3cb4:	20000240 	.word	0x20000240
 80a3cb8:	2000022c 	.word	0x2000022c
 80a3cbc:	20000084 	.word	0x20000084
 80a3cc0:	080a3bc3 	.word	0x080a3bc3

080a3cc4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3cc4:	7441      	strb	r1, [r0, #17]
 80a3cc6:	4770      	bx	lr

080a3cc8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3cc8:	4770      	bx	lr

080a3cca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3cca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3ccc:	2100      	movs	r1, #0
 80a3cce:	7c00      	ldrb	r0, [r0, #16]
 80a3cd0:	f7ff f8a6 	bl	80a2e20 <HAL_USB_USART_Receive_Data>
}
 80a3cd4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3cd8:	bf28      	it	cs
 80a3cda:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3cde:	bd08      	pop	{r3, pc}

080a3ce0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3ce0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3ce2:	2101      	movs	r1, #1
 80a3ce4:	7c00      	ldrb	r0, [r0, #16]
 80a3ce6:	f7ff f89b 	bl	80a2e20 <HAL_USB_USART_Receive_Data>
}
 80a3cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3cee:	bf28      	it	cs
 80a3cf0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3cf4:	bd08      	pop	{r3, pc}

080a3cf6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3cf6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3cf8:	7c00      	ldrb	r0, [r0, #16]
 80a3cfa:	f7ff f889 	bl	80a2e10 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3cfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d02:	bd08      	pop	{r3, pc}

080a3d04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3d04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3d06:	7c00      	ldrb	r0, [r0, #16]
 80a3d08:	f7ff f87a 	bl	80a2e00 <HAL_USB_USART_Available_Data>
}
 80a3d0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d10:	bd08      	pop	{r3, pc}

080a3d12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3d12:	7c00      	ldrb	r0, [r0, #16]
 80a3d14:	f7ff b894 	b.w	80a2e40 <HAL_USB_USART_Flush_Data>

080a3d18 <_ZN9USBSerialD0Ev>:
 80a3d18:	b510      	push	{r4, lr}
 80a3d1a:	4604      	mov	r4, r0
 80a3d1c:	2114      	movs	r1, #20
 80a3d1e:	f000 fa52 	bl	80a41c6 <_ZdlPvj>
 80a3d22:	4620      	mov	r0, r4
 80a3d24:	bd10      	pop	{r4, pc}

080a3d26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3d26:	b538      	push	{r3, r4, r5, lr}
 80a3d28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3d2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3d2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3d2e:	f7ff f86f 	bl	80a2e10 <HAL_USB_USART_Available_Data_For_Write>
 80a3d32:	2800      	cmp	r0, #0
 80a3d34:	dc01      	bgt.n	80a3d3a <_ZN9USBSerial5writeEh+0x14>
 80a3d36:	7c60      	ldrb	r0, [r4, #17]
 80a3d38:	b128      	cbz	r0, 80a3d46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3d3a:	4629      	mov	r1, r5
 80a3d3c:	7c20      	ldrb	r0, [r4, #16]
 80a3d3e:	f7ff f877 	bl	80a2e30 <HAL_USB_USART_Send_Data>
 80a3d42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3d46:	bd38      	pop	{r3, r4, r5, pc}

080a3d48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3d48:	b510      	push	{r4, lr}
 80a3d4a:	4604      	mov	r4, r0
 80a3d4c:	2300      	movs	r3, #0
 80a3d4e:	6063      	str	r3, [r4, #4]
 80a3d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3d54:	60a3      	str	r3, [r4, #8]
 80a3d56:	4b05      	ldr	r3, [pc, #20]	; (80a3d6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3d58:	4608      	mov	r0, r1
 80a3d5a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3d5c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3d5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3d60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3d62:	4611      	mov	r1, r2
 80a3d64:	f7ff f83c 	bl	80a2de0 <HAL_USB_USART_Init>
}
 80a3d68:	4620      	mov	r0, r4
 80a3d6a:	bd10      	pop	{r4, pc}
 80a3d6c:	080a595c 	.word	0x080a595c

080a3d70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3d70:	2200      	movs	r2, #0
 80a3d72:	7c00      	ldrb	r0, [r0, #16]
 80a3d74:	f7ff b83c 	b.w	80a2df0 <HAL_USB_USART_Begin>

080a3d78 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a3d78:	7c00      	ldrb	r0, [r0, #16]
 80a3d7a:	f7ff b869 	b.w	80a2e50 <HAL_USB_USART_Is_Enabled>

080a3d7e <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a3d7e:	f7ff bffb 	b.w	80a3d78 <_ZN9USBSerial9isEnabledEv>
	...

080a3d84 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3d84:	b510      	push	{r4, lr}
 80a3d86:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3d88:	2214      	movs	r2, #20
 80a3d8a:	2100      	movs	r1, #0
 80a3d8c:	f001 fb29 	bl	80a53e2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3d90:	4b05      	ldr	r3, [pc, #20]	; (80a3da8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3d92:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3d94:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3d96:	4b05      	ldr	r3, [pc, #20]	; (80a3dac <_Z19acquireSerialBufferv+0x28>)
 80a3d98:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3d9a:	f240 1301 	movw	r3, #257	; 0x101
 80a3d9e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3da0:	2381      	movs	r3, #129	; 0x81
 80a3da2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3da4:	bd10      	pop	{r4, pc}
 80a3da6:	bf00      	nop
 80a3da8:	200003d1 	.word	0x200003d1
 80a3dac:	20000350 	.word	0x20000350

080a3db0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3db0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3db2:	4d0e      	ldr	r5, [pc, #56]	; (80a3dec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3db4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3db6:	a801      	add	r0, sp, #4
 80a3db8:	f7ff ffe4 	bl	80a3d84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3dbc:	6829      	ldr	r1, [r5, #0]
 80a3dbe:	f011 0401 	ands.w	r4, r1, #1
 80a3dc2:	d110      	bne.n	80a3de6 <_Z16_fetch_usbserialv+0x36>
 80a3dc4:	4628      	mov	r0, r5
 80a3dc6:	f7fc f96c 	bl	80a00a2 <__cxa_guard_acquire>
 80a3dca:	b160      	cbz	r0, 80a3de6 <_Z16_fetch_usbserialv+0x36>
 80a3dcc:	aa01      	add	r2, sp, #4
 80a3dce:	4621      	mov	r1, r4
 80a3dd0:	4807      	ldr	r0, [pc, #28]	; (80a3df0 <_Z16_fetch_usbserialv+0x40>)
 80a3dd2:	f7ff ffb9 	bl	80a3d48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3dd6:	4628      	mov	r0, r5
 80a3dd8:	f7fc f968 	bl	80a00ac <__cxa_guard_release>
 80a3ddc:	4a05      	ldr	r2, [pc, #20]	; (80a3df4 <_Z16_fetch_usbserialv+0x44>)
 80a3dde:	4906      	ldr	r1, [pc, #24]	; (80a3df8 <_Z16_fetch_usbserialv+0x48>)
 80a3de0:	4803      	ldr	r0, [pc, #12]	; (80a3df0 <_Z16_fetch_usbserialv+0x40>)
 80a3de2:	f000 f9eb 	bl	80a41bc <__aeabi_atexit>
	return _usbserial;
}
 80a3de6:	4802      	ldr	r0, [pc, #8]	; (80a3df0 <_Z16_fetch_usbserialv+0x40>)
 80a3de8:	b007      	add	sp, #28
 80a3dea:	bd30      	pop	{r4, r5, pc}
 80a3dec:	2000034c 	.word	0x2000034c
 80a3df0:	200004d4 	.word	0x200004d4
 80a3df4:	20000084 	.word	0x20000084
 80a3df8:	080a3cc9 	.word	0x080a3cc9

080a3dfc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3dfc:	b510      	push	{r4, lr}
 80a3dfe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3e00:	2214      	movs	r2, #20
 80a3e02:	2100      	movs	r1, #0
 80a3e04:	f001 faed 	bl	80a53e2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3e08:	4b05      	ldr	r3, [pc, #20]	; (80a3e20 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3e0a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3e0c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3e0e:	4b05      	ldr	r3, [pc, #20]	; (80a3e24 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3e10:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3e12:	f240 1301 	movw	r3, #257	; 0x101
 80a3e16:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3e18:	2381      	movs	r3, #129	; 0x81
 80a3e1a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3e1c:	bd10      	pop	{r4, pc}
 80a3e1e:	bf00      	nop
 80a3e20:	20000584 	.word	0x20000584
 80a3e24:	200004ec 	.word	0x200004ec

080a3e28 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3e28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3e2a:	4c0e      	ldr	r4, [pc, #56]	; (80a3e64 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3e2c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3e2e:	a801      	add	r0, sp, #4
 80a3e30:	f7ff ffe4 	bl	80a3dfc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3e34:	6823      	ldr	r3, [r4, #0]
 80a3e36:	07db      	lsls	r3, r3, #31
 80a3e38:	d410      	bmi.n	80a3e5c <_Z17_fetch_usbserial1v+0x34>
 80a3e3a:	4620      	mov	r0, r4
 80a3e3c:	f7fc f931 	bl	80a00a2 <__cxa_guard_acquire>
 80a3e40:	b160      	cbz	r0, 80a3e5c <_Z17_fetch_usbserial1v+0x34>
 80a3e42:	aa01      	add	r2, sp, #4
 80a3e44:	2101      	movs	r1, #1
 80a3e46:	4808      	ldr	r0, [pc, #32]	; (80a3e68 <_Z17_fetch_usbserial1v+0x40>)
 80a3e48:	f7ff ff7e 	bl	80a3d48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3e4c:	4620      	mov	r0, r4
 80a3e4e:	f7fc f92d 	bl	80a00ac <__cxa_guard_release>
 80a3e52:	4a06      	ldr	r2, [pc, #24]	; (80a3e6c <_Z17_fetch_usbserial1v+0x44>)
 80a3e54:	4906      	ldr	r1, [pc, #24]	; (80a3e70 <_Z17_fetch_usbserial1v+0x48>)
 80a3e56:	4804      	ldr	r0, [pc, #16]	; (80a3e68 <_Z17_fetch_usbserial1v+0x40>)
 80a3e58:	f000 f9b0 	bl	80a41bc <__aeabi_atexit>
  return _usbserial1;
}
 80a3e5c:	4802      	ldr	r0, [pc, #8]	; (80a3e68 <_Z17_fetch_usbserial1v+0x40>)
 80a3e5e:	b006      	add	sp, #24
 80a3e60:	bd10      	pop	{r4, pc}
 80a3e62:	bf00      	nop
 80a3e64:	200004e8 	.word	0x200004e8
 80a3e68:	20000570 	.word	0x20000570
 80a3e6c:	20000084 	.word	0x20000084
 80a3e70:	080a3cc9 	.word	0x080a3cc9

080a3e74 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3e74:	2200      	movs	r2, #0
 80a3e76:	4611      	mov	r1, r2
 80a3e78:	6840      	ldr	r0, [r0, #4]
 80a3e7a:	f7ff b84d 	b.w	80a2f18 <network_ready>

080a3e7e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3e80:	4616      	mov	r6, r2
 80a3e82:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3e84:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3e86:	460f      	mov	r7, r1
 80a3e88:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3e8a:	2100      	movs	r1, #0
 80a3e8c:	a803      	add	r0, sp, #12
 80a3e8e:	f001 faa8 	bl	80a53e2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3e92:	4630      	mov	r0, r6
 80a3e94:	f001 fb1a 	bl	80a54cc <strlen>
 80a3e98:	2500      	movs	r5, #0
 80a3e9a:	9500      	str	r5, [sp, #0]
 80a3e9c:	b281      	uxth	r1, r0
 80a3e9e:	687b      	ldr	r3, [r7, #4]
 80a3ea0:	aa03      	add	r2, sp, #12
 80a3ea2:	4630      	mov	r0, r6
 80a3ea4:	f7fe ffdc 	bl	80a2e60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3ea8:	b120      	cbz	r0, 80a3eb4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3eaa:	4629      	mov	r1, r5
 80a3eac:	4620      	mov	r0, r4
 80a3eae:	f7ff f937 	bl	80a3120 <_ZN9IPAddressC1Em>
 80a3eb2:	e003      	b.n	80a3ebc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3eb4:	a903      	add	r1, sp, #12
 80a3eb6:	4620      	mov	r0, r4
 80a3eb8:	f7ff f920 	bl	80a30fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3ebc:	4620      	mov	r0, r4
 80a3ebe:	b009      	add	sp, #36	; 0x24
 80a3ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3ec2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3ec2:	2200      	movs	r2, #0
 80a3ec4:	4611      	mov	r1, r2
 80a3ec6:	6840      	ldr	r0, [r0, #4]
 80a3ec8:	f7ff b846 	b.w	80a2f58 <network_listening>

080a3ecc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3ecc:	2200      	movs	r2, #0
 80a3ece:	4611      	mov	r1, r2
 80a3ed0:	6840      	ldr	r0, [r0, #4]
 80a3ed2:	f7ff b851 	b.w	80a2f78 <network_get_listen_timeout>

080a3ed6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3ed6:	2200      	movs	r2, #0
 80a3ed8:	6840      	ldr	r0, [r0, #4]
 80a3eda:	f7ff b845 	b.w	80a2f68 <network_set_listen_timeout>

080a3ede <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3ede:	2200      	movs	r2, #0
 80a3ee0:	f081 0101 	eor.w	r1, r1, #1
 80a3ee4:	6840      	ldr	r0, [r0, #4]
 80a3ee6:	f7ff b82f 	b.w	80a2f48 <network_listen>

080a3eea <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3eea:	2300      	movs	r3, #0
 80a3eec:	461a      	mov	r2, r3
 80a3eee:	4619      	mov	r1, r3
 80a3ef0:	6840      	ldr	r0, [r0, #4]
 80a3ef2:	f7ff b821 	b.w	80a2f38 <network_off>

080a3ef6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3ef6:	2300      	movs	r3, #0
 80a3ef8:	461a      	mov	r2, r3
 80a3efa:	4619      	mov	r1, r3
 80a3efc:	6840      	ldr	r0, [r0, #4]
 80a3efe:	f7ff b813 	b.w	80a2f28 <network_on>

080a3f02 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3f02:	2200      	movs	r2, #0
 80a3f04:	4611      	mov	r1, r2
 80a3f06:	6840      	ldr	r0, [r0, #4]
 80a3f08:	f7fe bff6 	b.w	80a2ef8 <network_connecting>

080a3f0c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3f0c:	2200      	movs	r2, #0
 80a3f0e:	2102      	movs	r1, #2
 80a3f10:	6840      	ldr	r0, [r0, #4]
 80a3f12:	f7fe bff9 	b.w	80a2f08 <network_disconnect>

080a3f16 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3f16:	2300      	movs	r3, #0
 80a3f18:	461a      	mov	r2, r3
 80a3f1a:	6840      	ldr	r0, [r0, #4]
 80a3f1c:	f7fe bfe4 	b.w	80a2ee8 <network_connect>

080a3f20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3f20:	4b02      	ldr	r3, [pc, #8]	; (80a3f2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3f22:	2204      	movs	r2, #4
 80a3f24:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3f26:	4a02      	ldr	r2, [pc, #8]	; (80a3f30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3f28:	601a      	str	r2, [r3, #0]
 80a3f2a:	4770      	bx	lr
 80a3f2c:	20000688 	.word	0x20000688
 80a3f30:	080a598c 	.word	0x080a598c

080a3f34 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3f34:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3f36:	4b14      	ldr	r3, [pc, #80]	; (80a3f88 <serialEventRun+0x54>)
 80a3f38:	b133      	cbz	r3, 80a3f48 <serialEventRun+0x14>
 80a3f3a:	f7ff ff39 	bl	80a3db0 <_Z16_fetch_usbserialv>
 80a3f3e:	6803      	ldr	r3, [r0, #0]
 80a3f40:	691b      	ldr	r3, [r3, #16]
 80a3f42:	4798      	blx	r3
 80a3f44:	2800      	cmp	r0, #0
 80a3f46:	dc16      	bgt.n	80a3f76 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3f48:	4b10      	ldr	r3, [pc, #64]	; (80a3f8c <serialEventRun+0x58>)
 80a3f4a:	b133      	cbz	r3, 80a3f5a <serialEventRun+0x26>
 80a3f4c:	f7ff fe94 	bl	80a3c78 <_Z22__fetch_global_Serial1v>
 80a3f50:	6803      	ldr	r3, [r0, #0]
 80a3f52:	691b      	ldr	r3, [r3, #16]
 80a3f54:	4798      	blx	r3
 80a3f56:	2800      	cmp	r0, #0
 80a3f58:	dc10      	bgt.n	80a3f7c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3f5a:	4b0d      	ldr	r3, [pc, #52]	; (80a3f90 <serialEventRun+0x5c>)
 80a3f5c:	b10b      	cbz	r3, 80a3f62 <serialEventRun+0x2e>
 80a3f5e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3f62:	4b0c      	ldr	r3, [pc, #48]	; (80a3f94 <serialEventRun+0x60>)
 80a3f64:	b17b      	cbz	r3, 80a3f86 <serialEventRun+0x52>
 80a3f66:	f7ff ff5f 	bl	80a3e28 <_Z17_fetch_usbserial1v>
 80a3f6a:	6803      	ldr	r3, [r0, #0]
 80a3f6c:	691b      	ldr	r3, [r3, #16]
 80a3f6e:	4798      	blx	r3
 80a3f70:	2800      	cmp	r0, #0
 80a3f72:	dc06      	bgt.n	80a3f82 <serialEventRun+0x4e>
 80a3f74:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3f76:	f3af 8000 	nop.w
 80a3f7a:	e7e5      	b.n	80a3f48 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3f7c:	f3af 8000 	nop.w
 80a3f80:	e7eb      	b.n	80a3f5a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a3f82:	f3af 8000 	nop.w
 80a3f86:	bd08      	pop	{r3, pc}
	...

080a3f98 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3f98:	b508      	push	{r3, lr}
	serialEventRun();
 80a3f9a:	f7ff ffcb 	bl	80a3f34 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3f9e:	f7fe fded 	bl	80a2b7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3fa2:	4b01      	ldr	r3, [pc, #4]	; (80a3fa8 <_post_loop+0x10>)
 80a3fa4:	6018      	str	r0, [r3, #0]
 80a3fa6:	bd08      	pop	{r3, pc}
 80a3fa8:	20000698 	.word	0x20000698

080a3fac <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3fac:	4802      	ldr	r0, [pc, #8]	; (80a3fb8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3fae:	4a03      	ldr	r2, [pc, #12]	; (80a3fbc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3fb0:	4903      	ldr	r1, [pc, #12]	; (80a3fc0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3fb2:	1a12      	subs	r2, r2, r0
 80a3fb4:	f001 ba0a 	b.w	80a53cc <memcpy>
 80a3fb8:	40024000 	.word	0x40024000
 80a3fbc:	40024004 	.word	0x40024004
 80a3fc0:	080a5a70 	.word	0x080a5a70

080a3fc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3fc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3fc6:	2300      	movs	r3, #0
 80a3fc8:	9300      	str	r3, [sp, #0]
 80a3fca:	461a      	mov	r2, r3
 80a3fcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3fd0:	f7fe ff70 	bl	80a2eb4 <system_ctrl_set_result>
}
 80a3fd4:	b003      	add	sp, #12
 80a3fd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3fdc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3fdc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3fde:	8843      	ldrh	r3, [r0, #2]
 80a3fe0:	2b0a      	cmp	r3, #10
 80a3fe2:	d008      	beq.n	80a3ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3fe4:	2b50      	cmp	r3, #80	; 0x50
 80a3fe6:	d109      	bne.n	80a3ffc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3fe8:	4b09      	ldr	r3, [pc, #36]	; (80a4010 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3fea:	681b      	ldr	r3, [r3, #0]
 80a3fec:	b13b      	cbz	r3, 80a3ffe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3fee:	b003      	add	sp, #12
 80a3ff0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3ff4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3ff6:	f7ff ffe5 	bl	80a3fc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3ffa:	e006      	b.n	80a400a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3ffc:	2300      	movs	r3, #0
 80a3ffe:	9300      	str	r3, [sp, #0]
 80a4000:	461a      	mov	r2, r3
 80a4002:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4006:	f7fe ff55 	bl	80a2eb4 <system_ctrl_set_result>
        break;
    }
}
 80a400a:	b003      	add	sp, #12
 80a400c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a4010:	20000690 	.word	0x20000690

080a4014 <module_user_init_hook>:

void module_user_init_hook()
{
 80a4014:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4016:	4c10      	ldr	r4, [pc, #64]	; (80a4058 <module_user_init_hook+0x44>)
 80a4018:	4d10      	ldr	r5, [pc, #64]	; (80a405c <module_user_init_hook+0x48>)
 80a401a:	6823      	ldr	r3, [r4, #0]
 80a401c:	42ab      	cmp	r3, r5
 80a401e:	4b10      	ldr	r3, [pc, #64]	; (80a4060 <module_user_init_hook+0x4c>)
 80a4020:	bf0c      	ite	eq
 80a4022:	2201      	moveq	r2, #1
 80a4024:	2200      	movne	r2, #0
 80a4026:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4028:	d002      	beq.n	80a4030 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a402a:	f7ff ffbf 	bl	80a3fac <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a402e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4030:	f7fe fd94 	bl	80a2b5c <HAL_RNG_GetRandomNumber>
 80a4034:	4604      	mov	r4, r0
    srand(seed);
 80a4036:	f001 f9dd 	bl	80a53f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a403a:	4b0a      	ldr	r3, [pc, #40]	; (80a4064 <module_user_init_hook+0x50>)
 80a403c:	b113      	cbz	r3, 80a4044 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a403e:	4620      	mov	r0, r4
 80a4040:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4044:	2100      	movs	r1, #0
 80a4046:	4807      	ldr	r0, [pc, #28]	; (80a4064 <module_user_init_hook+0x50>)
 80a4048:	f7fe ff3e 	bl	80a2ec8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4050:	2100      	movs	r1, #0
 80a4052:	4805      	ldr	r0, [pc, #20]	; (80a4068 <module_user_init_hook+0x54>)
 80a4054:	f7fe bf24 	b.w	80a2ea0 <system_ctrl_set_app_request_handler>
 80a4058:	40024000 	.word	0x40024000
 80a405c:	9a271c1e 	.word	0x9a271c1e
 80a4060:	20000694 	.word	0x20000694
 80a4064:	00000000 	.word	0x00000000
 80a4068:	080a3fdd 	.word	0x080a3fdd

080a406c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a406c:	b510      	push	{r4, lr}
 80a406e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4070:	480f      	ldr	r0, [pc, #60]	; (80a40b0 <pinAvailable+0x44>)
 80a4072:	f7ff fb0d 	bl	80a3690 <_ZN8SPIClass9isEnabledEv>
 80a4076:	b128      	cbz	r0, 80a4084 <pinAvailable+0x18>
 80a4078:	f1a4 030d 	sub.w	r3, r4, #13
 80a407c:	2b02      	cmp	r3, #2
 80a407e:	d801      	bhi.n	80a4084 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a4080:	2000      	movs	r0, #0
 80a4082:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a4084:	f000 f840 	bl	80a4108 <_Z19__fetch_global_Wirev>
 80a4088:	f7ff f80d 	bl	80a30a6 <_ZN7TwoWire9isEnabledEv>
 80a408c:	b108      	cbz	r0, 80a4092 <pinAvailable+0x26>
 80a408e:	2c01      	cmp	r4, #1
 80a4090:	d9f6      	bls.n	80a4080 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a4092:	f7ff fdf1 	bl	80a3c78 <_Z22__fetch_global_Serial1v>
 80a4096:	f7ff fdeb 	bl	80a3c70 <_ZN11USARTSerial9isEnabledEv>
 80a409a:	b118      	cbz	r0, 80a40a4 <pinAvailable+0x38>
 80a409c:	f1a4 0312 	sub.w	r3, r4, #18
 80a40a0:	2b01      	cmp	r3, #1
 80a40a2:	d9ed      	bls.n	80a4080 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a40a4:	2c17      	cmp	r4, #23
 80a40a6:	bf8c      	ite	hi
 80a40a8:	2000      	movhi	r0, #0
 80a40aa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a40ac:	bd10      	pop	{r4, pc}
 80a40ae:	bf00      	nop
 80a40b0:	200006cc 	.word	0x200006cc

080a40b4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a40b4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a40b6:	b538      	push	{r3, r4, r5, lr}
 80a40b8:	4604      	mov	r4, r0
 80a40ba:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a40bc:	d80a      	bhi.n	80a40d4 <pinMode+0x20>
 80a40be:	29ff      	cmp	r1, #255	; 0xff
 80a40c0:	d008      	beq.n	80a40d4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a40c2:	f7ff ffd3 	bl	80a406c <pinAvailable>
 80a40c6:	b128      	cbz	r0, 80a40d4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a40c8:	4629      	mov	r1, r5
 80a40ca:	4620      	mov	r0, r4
}
 80a40cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a40d0:	f7fe bd64 	b.w	80a2b9c <HAL_Pin_Mode>
 80a40d4:	bd38      	pop	{r3, r4, r5, pc}

080a40d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a40d6:	b538      	push	{r3, r4, r5, lr}
 80a40d8:	4604      	mov	r4, r0
 80a40da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a40dc:	f7fe fd66 	bl	80a2bac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a40e0:	28ff      	cmp	r0, #255	; 0xff
 80a40e2:	d010      	beq.n	80a4106 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a40e4:	2806      	cmp	r0, #6
 80a40e6:	d804      	bhi.n	80a40f2 <digitalWrite+0x1c>
 80a40e8:	234d      	movs	r3, #77	; 0x4d
 80a40ea:	fa23 f000 	lsr.w	r0, r3, r0
 80a40ee:	07c3      	lsls	r3, r0, #31
 80a40f0:	d409      	bmi.n	80a4106 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a40f2:	4620      	mov	r0, r4
 80a40f4:	f7ff ffba 	bl	80a406c <pinAvailable>
 80a40f8:	b128      	cbz	r0, 80a4106 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a40fa:	4629      	mov	r1, r5
 80a40fc:	4620      	mov	r0, r4
}
 80a40fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4102:	f7fe bd5b 	b.w	80a2bbc <HAL_GPIO_Write>
 80a4106:	bd38      	pop	{r3, r4, r5, pc}

080a4108 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a4108:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a410a:	4d0b      	ldr	r5, [pc, #44]	; (80a4138 <_Z19__fetch_global_Wirev+0x30>)
 80a410c:	6829      	ldr	r1, [r5, #0]
 80a410e:	f011 0401 	ands.w	r4, r1, #1
 80a4112:	d10f      	bne.n	80a4134 <_Z19__fetch_global_Wirev+0x2c>
 80a4114:	4628      	mov	r0, r5
 80a4116:	f7fb ffc4 	bl	80a00a2 <__cxa_guard_acquire>
 80a411a:	b158      	cbz	r0, 80a4134 <_Z19__fetch_global_Wirev+0x2c>
 80a411c:	4621      	mov	r1, r4
 80a411e:	4807      	ldr	r0, [pc, #28]	; (80a413c <_Z19__fetch_global_Wirev+0x34>)
 80a4120:	f7fe ff92 	bl	80a3048 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a4124:	4628      	mov	r0, r5
 80a4126:	f7fb ffc1 	bl	80a00ac <__cxa_guard_release>
 80a412a:	4a05      	ldr	r2, [pc, #20]	; (80a4140 <_Z19__fetch_global_Wirev+0x38>)
 80a412c:	4905      	ldr	r1, [pc, #20]	; (80a4144 <_Z19__fetch_global_Wirev+0x3c>)
 80a412e:	4803      	ldr	r0, [pc, #12]	; (80a413c <_Z19__fetch_global_Wirev+0x34>)
 80a4130:	f000 f844 	bl	80a41bc <__aeabi_atexit>
	return wire;
}
 80a4134:	4801      	ldr	r0, [pc, #4]	; (80a413c <_Z19__fetch_global_Wirev+0x34>)
 80a4136:	bd38      	pop	{r3, r4, r5, pc}
 80a4138:	2000069c 	.word	0x2000069c
 80a413c:	200006a0 	.word	0x200006a0
 80a4140:	20000084 	.word	0x20000084
 80a4144:	080a2ff1 	.word	0x080a2ff1

080a4148 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4148:	b513      	push	{r0, r1, r4, lr}
 80a414a:	4c08      	ldr	r4, [pc, #32]	; (80a416c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a414c:	2300      	movs	r3, #0
 80a414e:	461a      	mov	r2, r3
 80a4150:	4619      	mov	r1, r3
 80a4152:	9300      	str	r3, [sp, #0]
 80a4154:	4620      	mov	r0, r4
 80a4156:	f7fe fff9 	bl	80a314c <_ZN9IPAddressC1Ehhhh>
 80a415a:	4620      	mov	r0, r4
 80a415c:	4a04      	ldr	r2, [pc, #16]	; (80a4170 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a415e:	4905      	ldr	r1, [pc, #20]	; (80a4174 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4160:	b002      	add	sp, #8
 80a4162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4166:	f000 b829 	b.w	80a41bc <__aeabi_atexit>
 80a416a:	bf00      	nop
 80a416c:	200006b4 	.word	0x200006b4
 80a4170:	20000084 	.word	0x20000084
 80a4174:	080a00b3 	.word	0x080a00b3

080a4178 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4178:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a417a:	4c0c      	ldr	r4, [pc, #48]	; (80a41ac <_GLOBAL__sub_I_SPI+0x34>)
 80a417c:	4e0c      	ldr	r6, [pc, #48]	; (80a41b0 <_GLOBAL__sub_I_SPI+0x38>)
 80a417e:	4d0d      	ldr	r5, [pc, #52]	; (80a41b4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a4180:	2100      	movs	r1, #0
 80a4182:	4620      	mov	r0, r4
 80a4184:	f7ff fa04 	bl	80a3590 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4188:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a418a:	4c0b      	ldr	r4, [pc, #44]	; (80a41b8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a418c:	4632      	mov	r2, r6
 80a418e:	4629      	mov	r1, r5
 80a4190:	f000 f814 	bl	80a41bc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4194:	2101      	movs	r1, #1
 80a4196:	4620      	mov	r0, r4
 80a4198:	f7ff f9fa 	bl	80a3590 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a419c:	4632      	mov	r2, r6
 80a419e:	4629      	mov	r1, r5
 80a41a0:	4620      	mov	r0, r4
 80a41a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a41a6:	f000 b809 	b.w	80a41bc <__aeabi_atexit>
 80a41aa:	bf00      	nop
 80a41ac:	200006cc 	.word	0x200006cc
 80a41b0:	20000084 	.word	0x20000084
 80a41b4:	080a3581 	.word	0x080a3581
 80a41b8:	200006dc 	.word	0x200006dc

080a41bc <__aeabi_atexit>:
 80a41bc:	460b      	mov	r3, r1
 80a41be:	4601      	mov	r1, r0
 80a41c0:	4618      	mov	r0, r3
 80a41c2:	f001 b8f5 	b.w	80a53b0 <__cxa_atexit>

080a41c6 <_ZdlPvj>:
 80a41c6:	f7fb bf6a 	b.w	80a009e <_ZdlPv>
	...

080a41cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a41cc:	4b24      	ldr	r3, [pc, #144]	; (80a4260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a41ce:	681a      	ldr	r2, [r3, #0]
 80a41d0:	07d0      	lsls	r0, r2, #31
 80a41d2:	bf5c      	itt	pl
 80a41d4:	2201      	movpl	r2, #1
 80a41d6:	601a      	strpl	r2, [r3, #0]
 80a41d8:	4b22      	ldr	r3, [pc, #136]	; (80a4264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a41da:	681a      	ldr	r2, [r3, #0]
 80a41dc:	07d1      	lsls	r1, r2, #31
 80a41de:	bf5c      	itt	pl
 80a41e0:	2201      	movpl	r2, #1
 80a41e2:	601a      	strpl	r2, [r3, #0]
 80a41e4:	4b20      	ldr	r3, [pc, #128]	; (80a4268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a41e6:	681a      	ldr	r2, [r3, #0]
 80a41e8:	07d2      	lsls	r2, r2, #31
 80a41ea:	bf5c      	itt	pl
 80a41ec:	2201      	movpl	r2, #1
 80a41ee:	601a      	strpl	r2, [r3, #0]
 80a41f0:	4b1e      	ldr	r3, [pc, #120]	; (80a426c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a41f2:	681a      	ldr	r2, [r3, #0]
 80a41f4:	07d0      	lsls	r0, r2, #31
 80a41f6:	bf5c      	itt	pl
 80a41f8:	2201      	movpl	r2, #1
 80a41fa:	601a      	strpl	r2, [r3, #0]
 80a41fc:	4b1c      	ldr	r3, [pc, #112]	; (80a4270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a41fe:	681a      	ldr	r2, [r3, #0]
 80a4200:	07d1      	lsls	r1, r2, #31
 80a4202:	bf5c      	itt	pl
 80a4204:	2201      	movpl	r2, #1
 80a4206:	601a      	strpl	r2, [r3, #0]
 80a4208:	4b1a      	ldr	r3, [pc, #104]	; (80a4274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a420a:	681a      	ldr	r2, [r3, #0]
 80a420c:	07d2      	lsls	r2, r2, #31
 80a420e:	bf5c      	itt	pl
 80a4210:	2201      	movpl	r2, #1
 80a4212:	601a      	strpl	r2, [r3, #0]
 80a4214:	4b18      	ldr	r3, [pc, #96]	; (80a4278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4216:	681a      	ldr	r2, [r3, #0]
 80a4218:	07d0      	lsls	r0, r2, #31
 80a421a:	bf5c      	itt	pl
 80a421c:	2201      	movpl	r2, #1
 80a421e:	601a      	strpl	r2, [r3, #0]
 80a4220:	4b16      	ldr	r3, [pc, #88]	; (80a427c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4222:	681a      	ldr	r2, [r3, #0]
 80a4224:	07d1      	lsls	r1, r2, #31
 80a4226:	bf5c      	itt	pl
 80a4228:	2201      	movpl	r2, #1
 80a422a:	601a      	strpl	r2, [r3, #0]
 80a422c:	4b14      	ldr	r3, [pc, #80]	; (80a4280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a422e:	681a      	ldr	r2, [r3, #0]
 80a4230:	07d2      	lsls	r2, r2, #31
 80a4232:	bf5c      	itt	pl
 80a4234:	2201      	movpl	r2, #1
 80a4236:	601a      	strpl	r2, [r3, #0]
 80a4238:	4b12      	ldr	r3, [pc, #72]	; (80a4284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a423a:	681a      	ldr	r2, [r3, #0]
 80a423c:	07d0      	lsls	r0, r2, #31
 80a423e:	bf5c      	itt	pl
 80a4240:	2201      	movpl	r2, #1
 80a4242:	601a      	strpl	r2, [r3, #0]
 80a4244:	4b10      	ldr	r3, [pc, #64]	; (80a4288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4246:	681a      	ldr	r2, [r3, #0]
 80a4248:	07d1      	lsls	r1, r2, #31
 80a424a:	bf5c      	itt	pl
 80a424c:	2201      	movpl	r2, #1
 80a424e:	601a      	strpl	r2, [r3, #0]
 80a4250:	4b0e      	ldr	r3, [pc, #56]	; (80a428c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4252:	681a      	ldr	r2, [r3, #0]
 80a4254:	07d2      	lsls	r2, r2, #31
 80a4256:	bf5c      	itt	pl
 80a4258:	2201      	movpl	r2, #1
 80a425a:	601a      	strpl	r2, [r3, #0]
 80a425c:	4770      	bx	lr
 80a425e:	bf00      	nop
 80a4260:	20000718 	.word	0x20000718
 80a4264:	20000714 	.word	0x20000714
 80a4268:	20000710 	.word	0x20000710
 80a426c:	2000070c 	.word	0x2000070c
 80a4270:	20000708 	.word	0x20000708
 80a4274:	20000704 	.word	0x20000704
 80a4278:	20000700 	.word	0x20000700
 80a427c:	200006fc 	.word	0x200006fc
 80a4280:	200006f8 	.word	0x200006f8
 80a4284:	200006f4 	.word	0x200006f4
 80a4288:	200006f0 	.word	0x200006f0
 80a428c:	200006ec 	.word	0x200006ec

080a4290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4290:	4b18      	ldr	r3, [pc, #96]	; (80a42f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4292:	681a      	ldr	r2, [r3, #0]
 80a4294:	07d1      	lsls	r1, r2, #31
 80a4296:	bf5c      	itt	pl
 80a4298:	2201      	movpl	r2, #1
 80a429a:	601a      	strpl	r2, [r3, #0]
 80a429c:	4b16      	ldr	r3, [pc, #88]	; (80a42f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a429e:	681a      	ldr	r2, [r3, #0]
 80a42a0:	07d2      	lsls	r2, r2, #31
 80a42a2:	bf5c      	itt	pl
 80a42a4:	2201      	movpl	r2, #1
 80a42a6:	601a      	strpl	r2, [r3, #0]
 80a42a8:	4b14      	ldr	r3, [pc, #80]	; (80a42fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a42aa:	681a      	ldr	r2, [r3, #0]
 80a42ac:	07d0      	lsls	r0, r2, #31
 80a42ae:	bf5c      	itt	pl
 80a42b0:	2201      	movpl	r2, #1
 80a42b2:	601a      	strpl	r2, [r3, #0]
 80a42b4:	4b12      	ldr	r3, [pc, #72]	; (80a4300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a42b6:	681a      	ldr	r2, [r3, #0]
 80a42b8:	07d1      	lsls	r1, r2, #31
 80a42ba:	bf5c      	itt	pl
 80a42bc:	2201      	movpl	r2, #1
 80a42be:	601a      	strpl	r2, [r3, #0]
 80a42c0:	4b10      	ldr	r3, [pc, #64]	; (80a4304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a42c2:	681a      	ldr	r2, [r3, #0]
 80a42c4:	07d2      	lsls	r2, r2, #31
 80a42c6:	bf5c      	itt	pl
 80a42c8:	2201      	movpl	r2, #1
 80a42ca:	601a      	strpl	r2, [r3, #0]
 80a42cc:	4b0e      	ldr	r3, [pc, #56]	; (80a4308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a42ce:	681a      	ldr	r2, [r3, #0]
 80a42d0:	07d0      	lsls	r0, r2, #31
 80a42d2:	bf5c      	itt	pl
 80a42d4:	2201      	movpl	r2, #1
 80a42d6:	601a      	strpl	r2, [r3, #0]
 80a42d8:	4b0c      	ldr	r3, [pc, #48]	; (80a430c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a42da:	681a      	ldr	r2, [r3, #0]
 80a42dc:	07d1      	lsls	r1, r2, #31
 80a42de:	bf5c      	itt	pl
 80a42e0:	2201      	movpl	r2, #1
 80a42e2:	601a      	strpl	r2, [r3, #0]
 80a42e4:	4b0a      	ldr	r3, [pc, #40]	; (80a4310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a42e6:	681a      	ldr	r2, [r3, #0]
 80a42e8:	07d2      	lsls	r2, r2, #31
 80a42ea:	bf5c      	itt	pl
 80a42ec:	2201      	movpl	r2, #1
 80a42ee:	601a      	strpl	r2, [r3, #0]
 80a42f0:	4770      	bx	lr
 80a42f2:	bf00      	nop
 80a42f4:	20000738 	.word	0x20000738
 80a42f8:	20000734 	.word	0x20000734
 80a42fc:	20000730 	.word	0x20000730
 80a4300:	2000072c 	.word	0x2000072c
 80a4304:	20000728 	.word	0x20000728
 80a4308:	20000724 	.word	0x20000724
 80a430c:	20000720 	.word	0x20000720
 80a4310:	2000071c 	.word	0x2000071c

080a4314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4314:	4b18      	ldr	r3, [pc, #96]	; (80a4378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4316:	681a      	ldr	r2, [r3, #0]
 80a4318:	07d1      	lsls	r1, r2, #31
 80a431a:	bf5c      	itt	pl
 80a431c:	2201      	movpl	r2, #1
 80a431e:	601a      	strpl	r2, [r3, #0]
 80a4320:	4b16      	ldr	r3, [pc, #88]	; (80a437c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4322:	681a      	ldr	r2, [r3, #0]
 80a4324:	07d2      	lsls	r2, r2, #31
 80a4326:	bf5c      	itt	pl
 80a4328:	2201      	movpl	r2, #1
 80a432a:	601a      	strpl	r2, [r3, #0]
 80a432c:	4b14      	ldr	r3, [pc, #80]	; (80a4380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a432e:	681a      	ldr	r2, [r3, #0]
 80a4330:	07d0      	lsls	r0, r2, #31
 80a4332:	bf5c      	itt	pl
 80a4334:	2201      	movpl	r2, #1
 80a4336:	601a      	strpl	r2, [r3, #0]
 80a4338:	4b12      	ldr	r3, [pc, #72]	; (80a4384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a433a:	681a      	ldr	r2, [r3, #0]
 80a433c:	07d1      	lsls	r1, r2, #31
 80a433e:	bf5c      	itt	pl
 80a4340:	2201      	movpl	r2, #1
 80a4342:	601a      	strpl	r2, [r3, #0]
 80a4344:	4b10      	ldr	r3, [pc, #64]	; (80a4388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4346:	681a      	ldr	r2, [r3, #0]
 80a4348:	07d2      	lsls	r2, r2, #31
 80a434a:	bf5c      	itt	pl
 80a434c:	2201      	movpl	r2, #1
 80a434e:	601a      	strpl	r2, [r3, #0]
 80a4350:	4b0e      	ldr	r3, [pc, #56]	; (80a438c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4352:	681a      	ldr	r2, [r3, #0]
 80a4354:	07d0      	lsls	r0, r2, #31
 80a4356:	bf5c      	itt	pl
 80a4358:	2201      	movpl	r2, #1
 80a435a:	601a      	strpl	r2, [r3, #0]
 80a435c:	4b0c      	ldr	r3, [pc, #48]	; (80a4390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a435e:	681a      	ldr	r2, [r3, #0]
 80a4360:	07d1      	lsls	r1, r2, #31
 80a4362:	bf5c      	itt	pl
 80a4364:	2201      	movpl	r2, #1
 80a4366:	601a      	strpl	r2, [r3, #0]
 80a4368:	4b0a      	ldr	r3, [pc, #40]	; (80a4394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a436a:	681a      	ldr	r2, [r3, #0]
 80a436c:	07d2      	lsls	r2, r2, #31
 80a436e:	bf5c      	itt	pl
 80a4370:	2201      	movpl	r2, #1
 80a4372:	601a      	strpl	r2, [r3, #0]
 80a4374:	4770      	bx	lr
 80a4376:	bf00      	nop
 80a4378:	20000758 	.word	0x20000758
 80a437c:	20000754 	.word	0x20000754
 80a4380:	20000750 	.word	0x20000750
 80a4384:	2000074c 	.word	0x2000074c
 80a4388:	20000748 	.word	0x20000748
 80a438c:	20000744 	.word	0x20000744
 80a4390:	20000740 	.word	0x20000740
 80a4394:	2000073c 	.word	0x2000073c

080a4398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4398:	4b24      	ldr	r3, [pc, #144]	; (80a442c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a439a:	681a      	ldr	r2, [r3, #0]
 80a439c:	07d0      	lsls	r0, r2, #31
 80a439e:	bf5c      	itt	pl
 80a43a0:	2201      	movpl	r2, #1
 80a43a2:	601a      	strpl	r2, [r3, #0]
 80a43a4:	4b22      	ldr	r3, [pc, #136]	; (80a4430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a43a6:	681a      	ldr	r2, [r3, #0]
 80a43a8:	07d1      	lsls	r1, r2, #31
 80a43aa:	bf5c      	itt	pl
 80a43ac:	2201      	movpl	r2, #1
 80a43ae:	601a      	strpl	r2, [r3, #0]
 80a43b0:	4b20      	ldr	r3, [pc, #128]	; (80a4434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a43b2:	681a      	ldr	r2, [r3, #0]
 80a43b4:	07d2      	lsls	r2, r2, #31
 80a43b6:	bf5c      	itt	pl
 80a43b8:	2201      	movpl	r2, #1
 80a43ba:	601a      	strpl	r2, [r3, #0]
 80a43bc:	4b1e      	ldr	r3, [pc, #120]	; (80a4438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a43be:	681a      	ldr	r2, [r3, #0]
 80a43c0:	07d0      	lsls	r0, r2, #31
 80a43c2:	bf5c      	itt	pl
 80a43c4:	2201      	movpl	r2, #1
 80a43c6:	601a      	strpl	r2, [r3, #0]
 80a43c8:	4b1c      	ldr	r3, [pc, #112]	; (80a443c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a43ca:	681a      	ldr	r2, [r3, #0]
 80a43cc:	07d1      	lsls	r1, r2, #31
 80a43ce:	bf5c      	itt	pl
 80a43d0:	2201      	movpl	r2, #1
 80a43d2:	601a      	strpl	r2, [r3, #0]
 80a43d4:	4b1a      	ldr	r3, [pc, #104]	; (80a4440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a43d6:	681a      	ldr	r2, [r3, #0]
 80a43d8:	07d2      	lsls	r2, r2, #31
 80a43da:	bf5c      	itt	pl
 80a43dc:	2201      	movpl	r2, #1
 80a43de:	601a      	strpl	r2, [r3, #0]
 80a43e0:	4b18      	ldr	r3, [pc, #96]	; (80a4444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a43e2:	681a      	ldr	r2, [r3, #0]
 80a43e4:	07d0      	lsls	r0, r2, #31
 80a43e6:	bf5c      	itt	pl
 80a43e8:	2201      	movpl	r2, #1
 80a43ea:	601a      	strpl	r2, [r3, #0]
 80a43ec:	4b16      	ldr	r3, [pc, #88]	; (80a4448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a43ee:	681a      	ldr	r2, [r3, #0]
 80a43f0:	07d1      	lsls	r1, r2, #31
 80a43f2:	bf5c      	itt	pl
 80a43f4:	2201      	movpl	r2, #1
 80a43f6:	601a      	strpl	r2, [r3, #0]
 80a43f8:	4b14      	ldr	r3, [pc, #80]	; (80a444c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a43fa:	681a      	ldr	r2, [r3, #0]
 80a43fc:	07d2      	lsls	r2, r2, #31
 80a43fe:	bf5c      	itt	pl
 80a4400:	2201      	movpl	r2, #1
 80a4402:	601a      	strpl	r2, [r3, #0]
 80a4404:	4b12      	ldr	r3, [pc, #72]	; (80a4450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a4406:	681a      	ldr	r2, [r3, #0]
 80a4408:	07d0      	lsls	r0, r2, #31
 80a440a:	bf5c      	itt	pl
 80a440c:	2201      	movpl	r2, #1
 80a440e:	601a      	strpl	r2, [r3, #0]
 80a4410:	4b10      	ldr	r3, [pc, #64]	; (80a4454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a4412:	681a      	ldr	r2, [r3, #0]
 80a4414:	07d1      	lsls	r1, r2, #31
 80a4416:	bf5c      	itt	pl
 80a4418:	2201      	movpl	r2, #1
 80a441a:	601a      	strpl	r2, [r3, #0]
 80a441c:	4b0e      	ldr	r3, [pc, #56]	; (80a4458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a441e:	681a      	ldr	r2, [r3, #0]
 80a4420:	07d2      	lsls	r2, r2, #31
 80a4422:	bf5c      	itt	pl
 80a4424:	2201      	movpl	r2, #1
 80a4426:	601a      	strpl	r2, [r3, #0]
 80a4428:	4770      	bx	lr
 80a442a:	bf00      	nop
 80a442c:	20000788 	.word	0x20000788
 80a4430:	20000784 	.word	0x20000784
 80a4434:	20000780 	.word	0x20000780
 80a4438:	2000077c 	.word	0x2000077c
 80a443c:	20000778 	.word	0x20000778
 80a4440:	20000774 	.word	0x20000774
 80a4444:	20000770 	.word	0x20000770
 80a4448:	2000076c 	.word	0x2000076c
 80a444c:	20000768 	.word	0x20000768
 80a4450:	20000764 	.word	0x20000764
 80a4454:	20000760 	.word	0x20000760
 80a4458:	2000075c 	.word	0x2000075c

080a445c <__aeabi_drsub>:
 80a445c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4460:	e002      	b.n	80a4468 <__adddf3>
 80a4462:	bf00      	nop

080a4464 <__aeabi_dsub>:
 80a4464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4468 <__adddf3>:
 80a4468:	b530      	push	{r4, r5, lr}
 80a446a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a446e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4472:	ea94 0f05 	teq	r4, r5
 80a4476:	bf08      	it	eq
 80a4478:	ea90 0f02 	teqeq	r0, r2
 80a447c:	bf1f      	itttt	ne
 80a447e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4482:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a448a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a448e:	f000 80e2 	beq.w	80a4656 <__adddf3+0x1ee>
 80a4492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a449a:	bfb8      	it	lt
 80a449c:	426d      	neglt	r5, r5
 80a449e:	dd0c      	ble.n	80a44ba <__adddf3+0x52>
 80a44a0:	442c      	add	r4, r5
 80a44a2:	ea80 0202 	eor.w	r2, r0, r2
 80a44a6:	ea81 0303 	eor.w	r3, r1, r3
 80a44aa:	ea82 0000 	eor.w	r0, r2, r0
 80a44ae:	ea83 0101 	eor.w	r1, r3, r1
 80a44b2:	ea80 0202 	eor.w	r2, r0, r2
 80a44b6:	ea81 0303 	eor.w	r3, r1, r3
 80a44ba:	2d36      	cmp	r5, #54	; 0x36
 80a44bc:	bf88      	it	hi
 80a44be:	bd30      	pophi	{r4, r5, pc}
 80a44c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a44c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a44c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a44cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a44d0:	d002      	beq.n	80a44d8 <__adddf3+0x70>
 80a44d2:	4240      	negs	r0, r0
 80a44d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a44d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a44dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a44e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a44e4:	d002      	beq.n	80a44ec <__adddf3+0x84>
 80a44e6:	4252      	negs	r2, r2
 80a44e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a44ec:	ea94 0f05 	teq	r4, r5
 80a44f0:	f000 80a7 	beq.w	80a4642 <__adddf3+0x1da>
 80a44f4:	f1a4 0401 	sub.w	r4, r4, #1
 80a44f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a44fc:	db0d      	blt.n	80a451a <__adddf3+0xb2>
 80a44fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4502:	fa22 f205 	lsr.w	r2, r2, r5
 80a4506:	1880      	adds	r0, r0, r2
 80a4508:	f141 0100 	adc.w	r1, r1, #0
 80a450c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4510:	1880      	adds	r0, r0, r2
 80a4512:	fa43 f305 	asr.w	r3, r3, r5
 80a4516:	4159      	adcs	r1, r3
 80a4518:	e00e      	b.n	80a4538 <__adddf3+0xd0>
 80a451a:	f1a5 0520 	sub.w	r5, r5, #32
 80a451e:	f10e 0e20 	add.w	lr, lr, #32
 80a4522:	2a01      	cmp	r2, #1
 80a4524:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4528:	bf28      	it	cs
 80a452a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a452e:	fa43 f305 	asr.w	r3, r3, r5
 80a4532:	18c0      	adds	r0, r0, r3
 80a4534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a453c:	d507      	bpl.n	80a454e <__adddf3+0xe6>
 80a453e:	f04f 0e00 	mov.w	lr, #0
 80a4542:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4546:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a454a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a454e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4552:	d31b      	bcc.n	80a458c <__adddf3+0x124>
 80a4554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4558:	d30c      	bcc.n	80a4574 <__adddf3+0x10c>
 80a455a:	0849      	lsrs	r1, r1, #1
 80a455c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4564:	f104 0401 	add.w	r4, r4, #1
 80a4568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a456c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4570:	f080 809a 	bcs.w	80a46a8 <__adddf3+0x240>
 80a4574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4578:	bf08      	it	eq
 80a457a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a457e:	f150 0000 	adcs.w	r0, r0, #0
 80a4582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4586:	ea41 0105 	orr.w	r1, r1, r5
 80a458a:	bd30      	pop	{r4, r5, pc}
 80a458c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4590:	4140      	adcs	r0, r0
 80a4592:	eb41 0101 	adc.w	r1, r1, r1
 80a4596:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a459a:	f1a4 0401 	sub.w	r4, r4, #1
 80a459e:	d1e9      	bne.n	80a4574 <__adddf3+0x10c>
 80a45a0:	f091 0f00 	teq	r1, #0
 80a45a4:	bf04      	itt	eq
 80a45a6:	4601      	moveq	r1, r0
 80a45a8:	2000      	moveq	r0, #0
 80a45aa:	fab1 f381 	clz	r3, r1
 80a45ae:	bf08      	it	eq
 80a45b0:	3320      	addeq	r3, #32
 80a45b2:	f1a3 030b 	sub.w	r3, r3, #11
 80a45b6:	f1b3 0220 	subs.w	r2, r3, #32
 80a45ba:	da0c      	bge.n	80a45d6 <__adddf3+0x16e>
 80a45bc:	320c      	adds	r2, #12
 80a45be:	dd08      	ble.n	80a45d2 <__adddf3+0x16a>
 80a45c0:	f102 0c14 	add.w	ip, r2, #20
 80a45c4:	f1c2 020c 	rsb	r2, r2, #12
 80a45c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a45cc:	fa21 f102 	lsr.w	r1, r1, r2
 80a45d0:	e00c      	b.n	80a45ec <__adddf3+0x184>
 80a45d2:	f102 0214 	add.w	r2, r2, #20
 80a45d6:	bfd8      	it	le
 80a45d8:	f1c2 0c20 	rsble	ip, r2, #32
 80a45dc:	fa01 f102 	lsl.w	r1, r1, r2
 80a45e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a45e4:	bfdc      	itt	le
 80a45e6:	ea41 010c 	orrle.w	r1, r1, ip
 80a45ea:	4090      	lslle	r0, r2
 80a45ec:	1ae4      	subs	r4, r4, r3
 80a45ee:	bfa2      	ittt	ge
 80a45f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a45f4:	4329      	orrge	r1, r5
 80a45f6:	bd30      	popge	{r4, r5, pc}
 80a45f8:	ea6f 0404 	mvn.w	r4, r4
 80a45fc:	3c1f      	subs	r4, #31
 80a45fe:	da1c      	bge.n	80a463a <__adddf3+0x1d2>
 80a4600:	340c      	adds	r4, #12
 80a4602:	dc0e      	bgt.n	80a4622 <__adddf3+0x1ba>
 80a4604:	f104 0414 	add.w	r4, r4, #20
 80a4608:	f1c4 0220 	rsb	r2, r4, #32
 80a460c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4610:	fa01 f302 	lsl.w	r3, r1, r2
 80a4614:	ea40 0003 	orr.w	r0, r0, r3
 80a4618:	fa21 f304 	lsr.w	r3, r1, r4
 80a461c:	ea45 0103 	orr.w	r1, r5, r3
 80a4620:	bd30      	pop	{r4, r5, pc}
 80a4622:	f1c4 040c 	rsb	r4, r4, #12
 80a4626:	f1c4 0220 	rsb	r2, r4, #32
 80a462a:	fa20 f002 	lsr.w	r0, r0, r2
 80a462e:	fa01 f304 	lsl.w	r3, r1, r4
 80a4632:	ea40 0003 	orr.w	r0, r0, r3
 80a4636:	4629      	mov	r1, r5
 80a4638:	bd30      	pop	{r4, r5, pc}
 80a463a:	fa21 f004 	lsr.w	r0, r1, r4
 80a463e:	4629      	mov	r1, r5
 80a4640:	bd30      	pop	{r4, r5, pc}
 80a4642:	f094 0f00 	teq	r4, #0
 80a4646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a464a:	bf06      	itte	eq
 80a464c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4650:	3401      	addeq	r4, #1
 80a4652:	3d01      	subne	r5, #1
 80a4654:	e74e      	b.n	80a44f4 <__adddf3+0x8c>
 80a4656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a465a:	bf18      	it	ne
 80a465c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4660:	d029      	beq.n	80a46b6 <__adddf3+0x24e>
 80a4662:	ea94 0f05 	teq	r4, r5
 80a4666:	bf08      	it	eq
 80a4668:	ea90 0f02 	teqeq	r0, r2
 80a466c:	d005      	beq.n	80a467a <__adddf3+0x212>
 80a466e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4672:	bf04      	itt	eq
 80a4674:	4619      	moveq	r1, r3
 80a4676:	4610      	moveq	r0, r2
 80a4678:	bd30      	pop	{r4, r5, pc}
 80a467a:	ea91 0f03 	teq	r1, r3
 80a467e:	bf1e      	ittt	ne
 80a4680:	2100      	movne	r1, #0
 80a4682:	2000      	movne	r0, #0
 80a4684:	bd30      	popne	{r4, r5, pc}
 80a4686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a468a:	d105      	bne.n	80a4698 <__adddf3+0x230>
 80a468c:	0040      	lsls	r0, r0, #1
 80a468e:	4149      	adcs	r1, r1
 80a4690:	bf28      	it	cs
 80a4692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4696:	bd30      	pop	{r4, r5, pc}
 80a4698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a469c:	bf3c      	itt	cc
 80a469e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a46a2:	bd30      	popcc	{r4, r5, pc}
 80a46a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a46a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a46ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a46b0:	f04f 0000 	mov.w	r0, #0
 80a46b4:	bd30      	pop	{r4, r5, pc}
 80a46b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a46ba:	bf1a      	itte	ne
 80a46bc:	4619      	movne	r1, r3
 80a46be:	4610      	movne	r0, r2
 80a46c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a46c4:	bf1c      	itt	ne
 80a46c6:	460b      	movne	r3, r1
 80a46c8:	4602      	movne	r2, r0
 80a46ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a46ce:	bf06      	itte	eq
 80a46d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a46d4:	ea91 0f03 	teqeq	r1, r3
 80a46d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a46dc:	bd30      	pop	{r4, r5, pc}
 80a46de:	bf00      	nop

080a46e0 <__aeabi_ui2d>:
 80a46e0:	f090 0f00 	teq	r0, #0
 80a46e4:	bf04      	itt	eq
 80a46e6:	2100      	moveq	r1, #0
 80a46e8:	4770      	bxeq	lr
 80a46ea:	b530      	push	{r4, r5, lr}
 80a46ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a46f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a46f4:	f04f 0500 	mov.w	r5, #0
 80a46f8:	f04f 0100 	mov.w	r1, #0
 80a46fc:	e750      	b.n	80a45a0 <__adddf3+0x138>
 80a46fe:	bf00      	nop

080a4700 <__aeabi_i2d>:
 80a4700:	f090 0f00 	teq	r0, #0
 80a4704:	bf04      	itt	eq
 80a4706:	2100      	moveq	r1, #0
 80a4708:	4770      	bxeq	lr
 80a470a:	b530      	push	{r4, r5, lr}
 80a470c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4718:	bf48      	it	mi
 80a471a:	4240      	negmi	r0, r0
 80a471c:	f04f 0100 	mov.w	r1, #0
 80a4720:	e73e      	b.n	80a45a0 <__adddf3+0x138>
 80a4722:	bf00      	nop

080a4724 <__aeabi_f2d>:
 80a4724:	0042      	lsls	r2, r0, #1
 80a4726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a472a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a472e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4732:	bf1f      	itttt	ne
 80a4734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a473c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4740:	4770      	bxne	lr
 80a4742:	f092 0f00 	teq	r2, #0
 80a4746:	bf14      	ite	ne
 80a4748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a474c:	4770      	bxeq	lr
 80a474e:	b530      	push	{r4, r5, lr}
 80a4750:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a475c:	e720      	b.n	80a45a0 <__adddf3+0x138>
 80a475e:	bf00      	nop

080a4760 <__aeabi_ul2d>:
 80a4760:	ea50 0201 	orrs.w	r2, r0, r1
 80a4764:	bf08      	it	eq
 80a4766:	4770      	bxeq	lr
 80a4768:	b530      	push	{r4, r5, lr}
 80a476a:	f04f 0500 	mov.w	r5, #0
 80a476e:	e00a      	b.n	80a4786 <__aeabi_l2d+0x16>

080a4770 <__aeabi_l2d>:
 80a4770:	ea50 0201 	orrs.w	r2, r0, r1
 80a4774:	bf08      	it	eq
 80a4776:	4770      	bxeq	lr
 80a4778:	b530      	push	{r4, r5, lr}
 80a477a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a477e:	d502      	bpl.n	80a4786 <__aeabi_l2d+0x16>
 80a4780:	4240      	negs	r0, r0
 80a4782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a478a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a478e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4792:	f43f aedc 	beq.w	80a454e <__adddf3+0xe6>
 80a4796:	f04f 0203 	mov.w	r2, #3
 80a479a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a479e:	bf18      	it	ne
 80a47a0:	3203      	addne	r2, #3
 80a47a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a47a6:	bf18      	it	ne
 80a47a8:	3203      	addne	r2, #3
 80a47aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a47ae:	f1c2 0320 	rsb	r3, r2, #32
 80a47b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a47b6:	fa20 f002 	lsr.w	r0, r0, r2
 80a47ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80a47be:	ea40 000e 	orr.w	r0, r0, lr
 80a47c2:	fa21 f102 	lsr.w	r1, r1, r2
 80a47c6:	4414      	add	r4, r2
 80a47c8:	e6c1      	b.n	80a454e <__adddf3+0xe6>
 80a47ca:	bf00      	nop

080a47cc <__aeabi_dmul>:
 80a47cc:	b570      	push	{r4, r5, r6, lr}
 80a47ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a47d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a47d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a47da:	bf1d      	ittte	ne
 80a47dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a47e0:	ea94 0f0c 	teqne	r4, ip
 80a47e4:	ea95 0f0c 	teqne	r5, ip
 80a47e8:	f000 f8de 	bleq	80a49a8 <__aeabi_dmul+0x1dc>
 80a47ec:	442c      	add	r4, r5
 80a47ee:	ea81 0603 	eor.w	r6, r1, r3
 80a47f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a47f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a47fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a47fe:	bf18      	it	ne
 80a4800:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a480c:	d038      	beq.n	80a4880 <__aeabi_dmul+0xb4>
 80a480e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4812:	f04f 0500 	mov.w	r5, #0
 80a4816:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a481a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a481e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4822:	f04f 0600 	mov.w	r6, #0
 80a4826:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a482a:	f09c 0f00 	teq	ip, #0
 80a482e:	bf18      	it	ne
 80a4830:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4834:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4838:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a483c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4840:	d204      	bcs.n	80a484c <__aeabi_dmul+0x80>
 80a4842:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4846:	416d      	adcs	r5, r5
 80a4848:	eb46 0606 	adc.w	r6, r6, r6
 80a484c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4850:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4854:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4858:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a485c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4860:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4864:	bf88      	it	hi
 80a4866:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a486a:	d81e      	bhi.n	80a48aa <__aeabi_dmul+0xde>
 80a486c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4870:	bf08      	it	eq
 80a4872:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4876:	f150 0000 	adcs.w	r0, r0, #0
 80a487a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a487e:	bd70      	pop	{r4, r5, r6, pc}
 80a4880:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4884:	ea46 0101 	orr.w	r1, r6, r1
 80a4888:	ea40 0002 	orr.w	r0, r0, r2
 80a488c:	ea81 0103 	eor.w	r1, r1, r3
 80a4890:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4894:	bfc2      	ittt	gt
 80a4896:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a489a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a489e:	bd70      	popgt	{r4, r5, r6, pc}
 80a48a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a48a4:	f04f 0e00 	mov.w	lr, #0
 80a48a8:	3c01      	subs	r4, #1
 80a48aa:	f300 80ab 	bgt.w	80a4a04 <__aeabi_dmul+0x238>
 80a48ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a48b2:	bfde      	ittt	le
 80a48b4:	2000      	movle	r0, #0
 80a48b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a48ba:	bd70      	pople	{r4, r5, r6, pc}
 80a48bc:	f1c4 0400 	rsb	r4, r4, #0
 80a48c0:	3c20      	subs	r4, #32
 80a48c2:	da35      	bge.n	80a4930 <__aeabi_dmul+0x164>
 80a48c4:	340c      	adds	r4, #12
 80a48c6:	dc1b      	bgt.n	80a4900 <__aeabi_dmul+0x134>
 80a48c8:	f104 0414 	add.w	r4, r4, #20
 80a48cc:	f1c4 0520 	rsb	r5, r4, #32
 80a48d0:	fa00 f305 	lsl.w	r3, r0, r5
 80a48d4:	fa20 f004 	lsr.w	r0, r0, r4
 80a48d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a48dc:	ea40 0002 	orr.w	r0, r0, r2
 80a48e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a48e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a48e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a48ec:	fa21 f604 	lsr.w	r6, r1, r4
 80a48f0:	eb42 0106 	adc.w	r1, r2, r6
 80a48f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a48f8:	bf08      	it	eq
 80a48fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a48fe:	bd70      	pop	{r4, r5, r6, pc}
 80a4900:	f1c4 040c 	rsb	r4, r4, #12
 80a4904:	f1c4 0520 	rsb	r5, r4, #32
 80a4908:	fa00 f304 	lsl.w	r3, r0, r4
 80a490c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4910:	fa01 f204 	lsl.w	r2, r1, r4
 80a4914:	ea40 0002 	orr.w	r0, r0, r2
 80a4918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a491c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4920:	f141 0100 	adc.w	r1, r1, #0
 80a4924:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4928:	bf08      	it	eq
 80a492a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a492e:	bd70      	pop	{r4, r5, r6, pc}
 80a4930:	f1c4 0520 	rsb	r5, r4, #32
 80a4934:	fa00 f205 	lsl.w	r2, r0, r5
 80a4938:	ea4e 0e02 	orr.w	lr, lr, r2
 80a493c:	fa20 f304 	lsr.w	r3, r0, r4
 80a4940:	fa01 f205 	lsl.w	r2, r1, r5
 80a4944:	ea43 0302 	orr.w	r3, r3, r2
 80a4948:	fa21 f004 	lsr.w	r0, r1, r4
 80a494c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4950:	fa21 f204 	lsr.w	r2, r1, r4
 80a4954:	ea20 0002 	bic.w	r0, r0, r2
 80a4958:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a495c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4960:	bf08      	it	eq
 80a4962:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4966:	bd70      	pop	{r4, r5, r6, pc}
 80a4968:	f094 0f00 	teq	r4, #0
 80a496c:	d10f      	bne.n	80a498e <__aeabi_dmul+0x1c2>
 80a496e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4972:	0040      	lsls	r0, r0, #1
 80a4974:	eb41 0101 	adc.w	r1, r1, r1
 80a4978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a497c:	bf08      	it	eq
 80a497e:	3c01      	subeq	r4, #1
 80a4980:	d0f7      	beq.n	80a4972 <__aeabi_dmul+0x1a6>
 80a4982:	ea41 0106 	orr.w	r1, r1, r6
 80a4986:	f095 0f00 	teq	r5, #0
 80a498a:	bf18      	it	ne
 80a498c:	4770      	bxne	lr
 80a498e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4992:	0052      	lsls	r2, r2, #1
 80a4994:	eb43 0303 	adc.w	r3, r3, r3
 80a4998:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a499c:	bf08      	it	eq
 80a499e:	3d01      	subeq	r5, #1
 80a49a0:	d0f7      	beq.n	80a4992 <__aeabi_dmul+0x1c6>
 80a49a2:	ea43 0306 	orr.w	r3, r3, r6
 80a49a6:	4770      	bx	lr
 80a49a8:	ea94 0f0c 	teq	r4, ip
 80a49ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a49b0:	bf18      	it	ne
 80a49b2:	ea95 0f0c 	teqne	r5, ip
 80a49b6:	d00c      	beq.n	80a49d2 <__aeabi_dmul+0x206>
 80a49b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a49bc:	bf18      	it	ne
 80a49be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a49c2:	d1d1      	bne.n	80a4968 <__aeabi_dmul+0x19c>
 80a49c4:	ea81 0103 	eor.w	r1, r1, r3
 80a49c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a49cc:	f04f 0000 	mov.w	r0, #0
 80a49d0:	bd70      	pop	{r4, r5, r6, pc}
 80a49d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a49d6:	bf06      	itte	eq
 80a49d8:	4610      	moveq	r0, r2
 80a49da:	4619      	moveq	r1, r3
 80a49dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a49e0:	d019      	beq.n	80a4a16 <__aeabi_dmul+0x24a>
 80a49e2:	ea94 0f0c 	teq	r4, ip
 80a49e6:	d102      	bne.n	80a49ee <__aeabi_dmul+0x222>
 80a49e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a49ec:	d113      	bne.n	80a4a16 <__aeabi_dmul+0x24a>
 80a49ee:	ea95 0f0c 	teq	r5, ip
 80a49f2:	d105      	bne.n	80a4a00 <__aeabi_dmul+0x234>
 80a49f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a49f8:	bf1c      	itt	ne
 80a49fa:	4610      	movne	r0, r2
 80a49fc:	4619      	movne	r1, r3
 80a49fe:	d10a      	bne.n	80a4a16 <__aeabi_dmul+0x24a>
 80a4a00:	ea81 0103 	eor.w	r1, r1, r3
 80a4a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4a08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4a0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4a10:	f04f 0000 	mov.w	r0, #0
 80a4a14:	bd70      	pop	{r4, r5, r6, pc}
 80a4a16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4a1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4a1e:	bd70      	pop	{r4, r5, r6, pc}

080a4a20 <__aeabi_ddiv>:
 80a4a20:	b570      	push	{r4, r5, r6, lr}
 80a4a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4a2e:	bf1d      	ittte	ne
 80a4a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4a34:	ea94 0f0c 	teqne	r4, ip
 80a4a38:	ea95 0f0c 	teqne	r5, ip
 80a4a3c:	f000 f8a7 	bleq	80a4b8e <__aeabi_ddiv+0x16e>
 80a4a40:	eba4 0405 	sub.w	r4, r4, r5
 80a4a44:	ea81 0e03 	eor.w	lr, r1, r3
 80a4a48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4a4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4a50:	f000 8088 	beq.w	80a4b64 <__aeabi_ddiv+0x144>
 80a4a54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4a58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4a5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4a60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4a64:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4a68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4a6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4a70:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4a74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4a78:	429d      	cmp	r5, r3
 80a4a7a:	bf08      	it	eq
 80a4a7c:	4296      	cmpeq	r6, r2
 80a4a7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4a82:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4a86:	d202      	bcs.n	80a4a8e <__aeabi_ddiv+0x6e>
 80a4a88:	085b      	lsrs	r3, r3, #1
 80a4a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4a8e:	1ab6      	subs	r6, r6, r2
 80a4a90:	eb65 0503 	sbc.w	r5, r5, r3
 80a4a94:	085b      	lsrs	r3, r3, #1
 80a4a96:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4a9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4a9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4aa2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4aaa:	bf22      	ittt	cs
 80a4aac:	1ab6      	subcs	r6, r6, r2
 80a4aae:	4675      	movcs	r5, lr
 80a4ab0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4ab4:	085b      	lsrs	r3, r3, #1
 80a4ab6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4aba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4abe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4ac2:	bf22      	ittt	cs
 80a4ac4:	1ab6      	subcs	r6, r6, r2
 80a4ac6:	4675      	movcs	r5, lr
 80a4ac8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4acc:	085b      	lsrs	r3, r3, #1
 80a4ace:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4ad2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4ad6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4ada:	bf22      	ittt	cs
 80a4adc:	1ab6      	subcs	r6, r6, r2
 80a4ade:	4675      	movcs	r5, lr
 80a4ae0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4ae4:	085b      	lsrs	r3, r3, #1
 80a4ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4aea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4aee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4af2:	bf22      	ittt	cs
 80a4af4:	1ab6      	subcs	r6, r6, r2
 80a4af6:	4675      	movcs	r5, lr
 80a4af8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4afc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4b00:	d018      	beq.n	80a4b34 <__aeabi_ddiv+0x114>
 80a4b02:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4b06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4b0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4b0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4b12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4b16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4b1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4b1e:	d1c0      	bne.n	80a4aa2 <__aeabi_ddiv+0x82>
 80a4b20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4b24:	d10b      	bne.n	80a4b3e <__aeabi_ddiv+0x11e>
 80a4b26:	ea41 0100 	orr.w	r1, r1, r0
 80a4b2a:	f04f 0000 	mov.w	r0, #0
 80a4b2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4b32:	e7b6      	b.n	80a4aa2 <__aeabi_ddiv+0x82>
 80a4b34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4b38:	bf04      	itt	eq
 80a4b3a:	4301      	orreq	r1, r0
 80a4b3c:	2000      	moveq	r0, #0
 80a4b3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4b42:	bf88      	it	hi
 80a4b44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4b48:	f63f aeaf 	bhi.w	80a48aa <__aeabi_dmul+0xde>
 80a4b4c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4b50:	bf04      	itt	eq
 80a4b52:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4b56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4b5a:	f150 0000 	adcs.w	r0, r0, #0
 80a4b5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4b62:	bd70      	pop	{r4, r5, r6, pc}
 80a4b64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4b68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4b6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4b70:	bfc2      	ittt	gt
 80a4b72:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4b76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4b7a:	bd70      	popgt	{r4, r5, r6, pc}
 80a4b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4b80:	f04f 0e00 	mov.w	lr, #0
 80a4b84:	3c01      	subs	r4, #1
 80a4b86:	e690      	b.n	80a48aa <__aeabi_dmul+0xde>
 80a4b88:	ea45 0e06 	orr.w	lr, r5, r6
 80a4b8c:	e68d      	b.n	80a48aa <__aeabi_dmul+0xde>
 80a4b8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4b92:	ea94 0f0c 	teq	r4, ip
 80a4b96:	bf08      	it	eq
 80a4b98:	ea95 0f0c 	teqeq	r5, ip
 80a4b9c:	f43f af3b 	beq.w	80a4a16 <__aeabi_dmul+0x24a>
 80a4ba0:	ea94 0f0c 	teq	r4, ip
 80a4ba4:	d10a      	bne.n	80a4bbc <__aeabi_ddiv+0x19c>
 80a4ba6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4baa:	f47f af34 	bne.w	80a4a16 <__aeabi_dmul+0x24a>
 80a4bae:	ea95 0f0c 	teq	r5, ip
 80a4bb2:	f47f af25 	bne.w	80a4a00 <__aeabi_dmul+0x234>
 80a4bb6:	4610      	mov	r0, r2
 80a4bb8:	4619      	mov	r1, r3
 80a4bba:	e72c      	b.n	80a4a16 <__aeabi_dmul+0x24a>
 80a4bbc:	ea95 0f0c 	teq	r5, ip
 80a4bc0:	d106      	bne.n	80a4bd0 <__aeabi_ddiv+0x1b0>
 80a4bc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4bc6:	f43f aefd 	beq.w	80a49c4 <__aeabi_dmul+0x1f8>
 80a4bca:	4610      	mov	r0, r2
 80a4bcc:	4619      	mov	r1, r3
 80a4bce:	e722      	b.n	80a4a16 <__aeabi_dmul+0x24a>
 80a4bd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4bd4:	bf18      	it	ne
 80a4bd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4bda:	f47f aec5 	bne.w	80a4968 <__aeabi_dmul+0x19c>
 80a4bde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4be2:	f47f af0d 	bne.w	80a4a00 <__aeabi_dmul+0x234>
 80a4be6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4bea:	f47f aeeb 	bne.w	80a49c4 <__aeabi_dmul+0x1f8>
 80a4bee:	e712      	b.n	80a4a16 <__aeabi_dmul+0x24a>

080a4bf0 <__gedf2>:
 80a4bf0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4bf4:	e006      	b.n	80a4c04 <__cmpdf2+0x4>
 80a4bf6:	bf00      	nop

080a4bf8 <__ledf2>:
 80a4bf8:	f04f 0c01 	mov.w	ip, #1
 80a4bfc:	e002      	b.n	80a4c04 <__cmpdf2+0x4>
 80a4bfe:	bf00      	nop

080a4c00 <__cmpdf2>:
 80a4c00:	f04f 0c01 	mov.w	ip, #1
 80a4c04:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4c08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4c14:	bf18      	it	ne
 80a4c16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4c1a:	d01b      	beq.n	80a4c54 <__cmpdf2+0x54>
 80a4c1c:	b001      	add	sp, #4
 80a4c1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4c22:	bf0c      	ite	eq
 80a4c24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4c28:	ea91 0f03 	teqne	r1, r3
 80a4c2c:	bf02      	ittt	eq
 80a4c2e:	ea90 0f02 	teqeq	r0, r2
 80a4c32:	2000      	moveq	r0, #0
 80a4c34:	4770      	bxeq	lr
 80a4c36:	f110 0f00 	cmn.w	r0, #0
 80a4c3a:	ea91 0f03 	teq	r1, r3
 80a4c3e:	bf58      	it	pl
 80a4c40:	4299      	cmppl	r1, r3
 80a4c42:	bf08      	it	eq
 80a4c44:	4290      	cmpeq	r0, r2
 80a4c46:	bf2c      	ite	cs
 80a4c48:	17d8      	asrcs	r0, r3, #31
 80a4c4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4c4e:	f040 0001 	orr.w	r0, r0, #1
 80a4c52:	4770      	bx	lr
 80a4c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4c5c:	d102      	bne.n	80a4c64 <__cmpdf2+0x64>
 80a4c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4c62:	d107      	bne.n	80a4c74 <__cmpdf2+0x74>
 80a4c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4c6c:	d1d6      	bne.n	80a4c1c <__cmpdf2+0x1c>
 80a4c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4c72:	d0d3      	beq.n	80a4c1c <__cmpdf2+0x1c>
 80a4c74:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4c78:	4770      	bx	lr
 80a4c7a:	bf00      	nop

080a4c7c <__aeabi_cdrcmple>:
 80a4c7c:	4684      	mov	ip, r0
 80a4c7e:	4610      	mov	r0, r2
 80a4c80:	4662      	mov	r2, ip
 80a4c82:	468c      	mov	ip, r1
 80a4c84:	4619      	mov	r1, r3
 80a4c86:	4663      	mov	r3, ip
 80a4c88:	e000      	b.n	80a4c8c <__aeabi_cdcmpeq>
 80a4c8a:	bf00      	nop

080a4c8c <__aeabi_cdcmpeq>:
 80a4c8c:	b501      	push	{r0, lr}
 80a4c8e:	f7ff ffb7 	bl	80a4c00 <__cmpdf2>
 80a4c92:	2800      	cmp	r0, #0
 80a4c94:	bf48      	it	mi
 80a4c96:	f110 0f00 	cmnmi.w	r0, #0
 80a4c9a:	bd01      	pop	{r0, pc}

080a4c9c <__aeabi_dcmpeq>:
 80a4c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ca0:	f7ff fff4 	bl	80a4c8c <__aeabi_cdcmpeq>
 80a4ca4:	bf0c      	ite	eq
 80a4ca6:	2001      	moveq	r0, #1
 80a4ca8:	2000      	movne	r0, #0
 80a4caa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cae:	bf00      	nop

080a4cb0 <__aeabi_dcmplt>:
 80a4cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4cb4:	f7ff ffea 	bl	80a4c8c <__aeabi_cdcmpeq>
 80a4cb8:	bf34      	ite	cc
 80a4cba:	2001      	movcc	r0, #1
 80a4cbc:	2000      	movcs	r0, #0
 80a4cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cc2:	bf00      	nop

080a4cc4 <__aeabi_dcmple>:
 80a4cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4cc8:	f7ff ffe0 	bl	80a4c8c <__aeabi_cdcmpeq>
 80a4ccc:	bf94      	ite	ls
 80a4cce:	2001      	movls	r0, #1
 80a4cd0:	2000      	movhi	r0, #0
 80a4cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cd6:	bf00      	nop

080a4cd8 <__aeabi_dcmpge>:
 80a4cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4cdc:	f7ff ffce 	bl	80a4c7c <__aeabi_cdrcmple>
 80a4ce0:	bf94      	ite	ls
 80a4ce2:	2001      	movls	r0, #1
 80a4ce4:	2000      	movhi	r0, #0
 80a4ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cea:	bf00      	nop

080a4cec <__aeabi_dcmpgt>:
 80a4cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4cf0:	f7ff ffc4 	bl	80a4c7c <__aeabi_cdrcmple>
 80a4cf4:	bf34      	ite	cc
 80a4cf6:	2001      	movcc	r0, #1
 80a4cf8:	2000      	movcs	r0, #0
 80a4cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cfe:	bf00      	nop

080a4d00 <__aeabi_dcmpun>:
 80a4d00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d08:	d102      	bne.n	80a4d10 <__aeabi_dcmpun+0x10>
 80a4d0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4d0e:	d10a      	bne.n	80a4d26 <__aeabi_dcmpun+0x26>
 80a4d10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d18:	d102      	bne.n	80a4d20 <__aeabi_dcmpun+0x20>
 80a4d1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4d1e:	d102      	bne.n	80a4d26 <__aeabi_dcmpun+0x26>
 80a4d20:	f04f 0000 	mov.w	r0, #0
 80a4d24:	4770      	bx	lr
 80a4d26:	f04f 0001 	mov.w	r0, #1
 80a4d2a:	4770      	bx	lr

080a4d2c <__aeabi_d2iz>:
 80a4d2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4d30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4d34:	d215      	bcs.n	80a4d62 <__aeabi_d2iz+0x36>
 80a4d36:	d511      	bpl.n	80a4d5c <__aeabi_d2iz+0x30>
 80a4d38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4d3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4d40:	d912      	bls.n	80a4d68 <__aeabi_d2iz+0x3c>
 80a4d42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4d4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4d4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4d52:	fa23 f002 	lsr.w	r0, r3, r2
 80a4d56:	bf18      	it	ne
 80a4d58:	4240      	negne	r0, r0
 80a4d5a:	4770      	bx	lr
 80a4d5c:	f04f 0000 	mov.w	r0, #0
 80a4d60:	4770      	bx	lr
 80a4d62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4d66:	d105      	bne.n	80a4d74 <__aeabi_d2iz+0x48>
 80a4d68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4d6c:	bf08      	it	eq
 80a4d6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4d72:	4770      	bx	lr
 80a4d74:	f04f 0000 	mov.w	r0, #0
 80a4d78:	4770      	bx	lr
 80a4d7a:	bf00      	nop

080a4d7c <__aeabi_d2uiz>:
 80a4d7c:	004a      	lsls	r2, r1, #1
 80a4d7e:	d211      	bcs.n	80a4da4 <__aeabi_d2uiz+0x28>
 80a4d80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4d84:	d211      	bcs.n	80a4daa <__aeabi_d2uiz+0x2e>
 80a4d86:	d50d      	bpl.n	80a4da4 <__aeabi_d2uiz+0x28>
 80a4d88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4d8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4d90:	d40e      	bmi.n	80a4db0 <__aeabi_d2uiz+0x34>
 80a4d92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4d9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4d9e:	fa23 f002 	lsr.w	r0, r3, r2
 80a4da2:	4770      	bx	lr
 80a4da4:	f04f 0000 	mov.w	r0, #0
 80a4da8:	4770      	bx	lr
 80a4daa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4dae:	d102      	bne.n	80a4db6 <__aeabi_d2uiz+0x3a>
 80a4db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4db4:	4770      	bx	lr
 80a4db6:	f04f 0000 	mov.w	r0, #0
 80a4dba:	4770      	bx	lr

080a4dbc <__aeabi_frsub>:
 80a4dbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4dc0:	e002      	b.n	80a4dc8 <__addsf3>
 80a4dc2:	bf00      	nop

080a4dc4 <__aeabi_fsub>:
 80a4dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4dc8 <__addsf3>:
 80a4dc8:	0042      	lsls	r2, r0, #1
 80a4dca:	bf1f      	itttt	ne
 80a4dcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4dd0:	ea92 0f03 	teqne	r2, r3
 80a4dd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4dd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4ddc:	d06a      	beq.n	80a4eb4 <__addsf3+0xec>
 80a4dde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4de2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4de6:	bfc1      	itttt	gt
 80a4de8:	18d2      	addgt	r2, r2, r3
 80a4dea:	4041      	eorgt	r1, r0
 80a4dec:	4048      	eorgt	r0, r1
 80a4dee:	4041      	eorgt	r1, r0
 80a4df0:	bfb8      	it	lt
 80a4df2:	425b      	neglt	r3, r3
 80a4df4:	2b19      	cmp	r3, #25
 80a4df6:	bf88      	it	hi
 80a4df8:	4770      	bxhi	lr
 80a4dfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4e06:	bf18      	it	ne
 80a4e08:	4240      	negne	r0, r0
 80a4e0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4e0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4e12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4e16:	bf18      	it	ne
 80a4e18:	4249      	negne	r1, r1
 80a4e1a:	ea92 0f03 	teq	r2, r3
 80a4e1e:	d03f      	beq.n	80a4ea0 <__addsf3+0xd8>
 80a4e20:	f1a2 0201 	sub.w	r2, r2, #1
 80a4e24:	fa41 fc03 	asr.w	ip, r1, r3
 80a4e28:	eb10 000c 	adds.w	r0, r0, ip
 80a4e2c:	f1c3 0320 	rsb	r3, r3, #32
 80a4e30:	fa01 f103 	lsl.w	r1, r1, r3
 80a4e34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4e38:	d502      	bpl.n	80a4e40 <__addsf3+0x78>
 80a4e3a:	4249      	negs	r1, r1
 80a4e3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4e44:	d313      	bcc.n	80a4e6e <__addsf3+0xa6>
 80a4e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4e4a:	d306      	bcc.n	80a4e5a <__addsf3+0x92>
 80a4e4c:	0840      	lsrs	r0, r0, #1
 80a4e4e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4e52:	f102 0201 	add.w	r2, r2, #1
 80a4e56:	2afe      	cmp	r2, #254	; 0xfe
 80a4e58:	d251      	bcs.n	80a4efe <__addsf3+0x136>
 80a4e5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4e62:	bf08      	it	eq
 80a4e64:	f020 0001 	biceq.w	r0, r0, #1
 80a4e68:	ea40 0003 	orr.w	r0, r0, r3
 80a4e6c:	4770      	bx	lr
 80a4e6e:	0049      	lsls	r1, r1, #1
 80a4e70:	eb40 0000 	adc.w	r0, r0, r0
 80a4e74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4e78:	f1a2 0201 	sub.w	r2, r2, #1
 80a4e7c:	d1ed      	bne.n	80a4e5a <__addsf3+0x92>
 80a4e7e:	fab0 fc80 	clz	ip, r0
 80a4e82:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4e86:	ebb2 020c 	subs.w	r2, r2, ip
 80a4e8a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4e8e:	bfaa      	itet	ge
 80a4e90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4e94:	4252      	neglt	r2, r2
 80a4e96:	4318      	orrge	r0, r3
 80a4e98:	bfbc      	itt	lt
 80a4e9a:	40d0      	lsrlt	r0, r2
 80a4e9c:	4318      	orrlt	r0, r3
 80a4e9e:	4770      	bx	lr
 80a4ea0:	f092 0f00 	teq	r2, #0
 80a4ea4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4ea8:	bf06      	itte	eq
 80a4eaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4eae:	3201      	addeq	r2, #1
 80a4eb0:	3b01      	subne	r3, #1
 80a4eb2:	e7b5      	b.n	80a4e20 <__addsf3+0x58>
 80a4eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4ebc:	bf18      	it	ne
 80a4ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4ec2:	d021      	beq.n	80a4f08 <__addsf3+0x140>
 80a4ec4:	ea92 0f03 	teq	r2, r3
 80a4ec8:	d004      	beq.n	80a4ed4 <__addsf3+0x10c>
 80a4eca:	f092 0f00 	teq	r2, #0
 80a4ece:	bf08      	it	eq
 80a4ed0:	4608      	moveq	r0, r1
 80a4ed2:	4770      	bx	lr
 80a4ed4:	ea90 0f01 	teq	r0, r1
 80a4ed8:	bf1c      	itt	ne
 80a4eda:	2000      	movne	r0, #0
 80a4edc:	4770      	bxne	lr
 80a4ede:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4ee2:	d104      	bne.n	80a4eee <__addsf3+0x126>
 80a4ee4:	0040      	lsls	r0, r0, #1
 80a4ee6:	bf28      	it	cs
 80a4ee8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4eec:	4770      	bx	lr
 80a4eee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4ef2:	bf3c      	itt	cc
 80a4ef4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4ef8:	4770      	bxcc	lr
 80a4efa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4efe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4f06:	4770      	bx	lr
 80a4f08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4f0c:	bf16      	itet	ne
 80a4f0e:	4608      	movne	r0, r1
 80a4f10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4f14:	4601      	movne	r1, r0
 80a4f16:	0242      	lsls	r2, r0, #9
 80a4f18:	bf06      	itte	eq
 80a4f1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4f1e:	ea90 0f01 	teqeq	r0, r1
 80a4f22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4f26:	4770      	bx	lr

080a4f28 <__aeabi_ui2f>:
 80a4f28:	f04f 0300 	mov.w	r3, #0
 80a4f2c:	e004      	b.n	80a4f38 <__aeabi_i2f+0x8>
 80a4f2e:	bf00      	nop

080a4f30 <__aeabi_i2f>:
 80a4f30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4f34:	bf48      	it	mi
 80a4f36:	4240      	negmi	r0, r0
 80a4f38:	ea5f 0c00 	movs.w	ip, r0
 80a4f3c:	bf08      	it	eq
 80a4f3e:	4770      	bxeq	lr
 80a4f40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4f44:	4601      	mov	r1, r0
 80a4f46:	f04f 0000 	mov.w	r0, #0
 80a4f4a:	e01c      	b.n	80a4f86 <__aeabi_l2f+0x2a>

080a4f4c <__aeabi_ul2f>:
 80a4f4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4f50:	bf08      	it	eq
 80a4f52:	4770      	bxeq	lr
 80a4f54:	f04f 0300 	mov.w	r3, #0
 80a4f58:	e00a      	b.n	80a4f70 <__aeabi_l2f+0x14>
 80a4f5a:	bf00      	nop

080a4f5c <__aeabi_l2f>:
 80a4f5c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4f60:	bf08      	it	eq
 80a4f62:	4770      	bxeq	lr
 80a4f64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4f68:	d502      	bpl.n	80a4f70 <__aeabi_l2f+0x14>
 80a4f6a:	4240      	negs	r0, r0
 80a4f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4f70:	ea5f 0c01 	movs.w	ip, r1
 80a4f74:	bf02      	ittt	eq
 80a4f76:	4684      	moveq	ip, r0
 80a4f78:	4601      	moveq	r1, r0
 80a4f7a:	2000      	moveq	r0, #0
 80a4f7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4f80:	bf08      	it	eq
 80a4f82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4f86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4f8a:	fabc f28c 	clz	r2, ip
 80a4f8e:	3a08      	subs	r2, #8
 80a4f90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4f94:	db10      	blt.n	80a4fb8 <__aeabi_l2f+0x5c>
 80a4f96:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4f9a:	4463      	add	r3, ip
 80a4f9c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4fa0:	f1c2 0220 	rsb	r2, r2, #32
 80a4fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4fa8:	fa20 f202 	lsr.w	r2, r0, r2
 80a4fac:	eb43 0002 	adc.w	r0, r3, r2
 80a4fb0:	bf08      	it	eq
 80a4fb2:	f020 0001 	biceq.w	r0, r0, #1
 80a4fb6:	4770      	bx	lr
 80a4fb8:	f102 0220 	add.w	r2, r2, #32
 80a4fbc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4fc0:	f1c2 0220 	rsb	r2, r2, #32
 80a4fc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4fc8:	fa21 f202 	lsr.w	r2, r1, r2
 80a4fcc:	eb43 0002 	adc.w	r0, r3, r2
 80a4fd0:	bf08      	it	eq
 80a4fd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4fd6:	4770      	bx	lr

080a4fd8 <__aeabi_fmul>:
 80a4fd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4fdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4fe0:	bf1e      	ittt	ne
 80a4fe2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4fe6:	ea92 0f0c 	teqne	r2, ip
 80a4fea:	ea93 0f0c 	teqne	r3, ip
 80a4fee:	d06f      	beq.n	80a50d0 <__aeabi_fmul+0xf8>
 80a4ff0:	441a      	add	r2, r3
 80a4ff2:	ea80 0c01 	eor.w	ip, r0, r1
 80a4ff6:	0240      	lsls	r0, r0, #9
 80a4ff8:	bf18      	it	ne
 80a4ffa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4ffe:	d01e      	beq.n	80a503e <__aeabi_fmul+0x66>
 80a5000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5004:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5008:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a500c:	fba0 3101 	umull	r3, r1, r0, r1
 80a5010:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5014:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5018:	bf3e      	ittt	cc
 80a501a:	0049      	lslcc	r1, r1, #1
 80a501c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5020:	005b      	lslcc	r3, r3, #1
 80a5022:	ea40 0001 	orr.w	r0, r0, r1
 80a5026:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a502a:	2afd      	cmp	r2, #253	; 0xfd
 80a502c:	d81d      	bhi.n	80a506a <__aeabi_fmul+0x92>
 80a502e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5032:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5036:	bf08      	it	eq
 80a5038:	f020 0001 	biceq.w	r0, r0, #1
 80a503c:	4770      	bx	lr
 80a503e:	f090 0f00 	teq	r0, #0
 80a5042:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5046:	bf08      	it	eq
 80a5048:	0249      	lsleq	r1, r1, #9
 80a504a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a504e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5052:	3a7f      	subs	r2, #127	; 0x7f
 80a5054:	bfc2      	ittt	gt
 80a5056:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a505a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a505e:	4770      	bxgt	lr
 80a5060:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5064:	f04f 0300 	mov.w	r3, #0
 80a5068:	3a01      	subs	r2, #1
 80a506a:	dc5d      	bgt.n	80a5128 <__aeabi_fmul+0x150>
 80a506c:	f112 0f19 	cmn.w	r2, #25
 80a5070:	bfdc      	itt	le
 80a5072:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5076:	4770      	bxle	lr
 80a5078:	f1c2 0200 	rsb	r2, r2, #0
 80a507c:	0041      	lsls	r1, r0, #1
 80a507e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5082:	f1c2 0220 	rsb	r2, r2, #32
 80a5086:	fa00 fc02 	lsl.w	ip, r0, r2
 80a508a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a508e:	f140 0000 	adc.w	r0, r0, #0
 80a5092:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5096:	bf08      	it	eq
 80a5098:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a509c:	4770      	bx	lr
 80a509e:	f092 0f00 	teq	r2, #0
 80a50a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a50a6:	bf02      	ittt	eq
 80a50a8:	0040      	lsleq	r0, r0, #1
 80a50aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a50ae:	3a01      	subeq	r2, #1
 80a50b0:	d0f9      	beq.n	80a50a6 <__aeabi_fmul+0xce>
 80a50b2:	ea40 000c 	orr.w	r0, r0, ip
 80a50b6:	f093 0f00 	teq	r3, #0
 80a50ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a50be:	bf02      	ittt	eq
 80a50c0:	0049      	lsleq	r1, r1, #1
 80a50c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a50c6:	3b01      	subeq	r3, #1
 80a50c8:	d0f9      	beq.n	80a50be <__aeabi_fmul+0xe6>
 80a50ca:	ea41 010c 	orr.w	r1, r1, ip
 80a50ce:	e78f      	b.n	80a4ff0 <__aeabi_fmul+0x18>
 80a50d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a50d4:	ea92 0f0c 	teq	r2, ip
 80a50d8:	bf18      	it	ne
 80a50da:	ea93 0f0c 	teqne	r3, ip
 80a50de:	d00a      	beq.n	80a50f6 <__aeabi_fmul+0x11e>
 80a50e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a50e4:	bf18      	it	ne
 80a50e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a50ea:	d1d8      	bne.n	80a509e <__aeabi_fmul+0xc6>
 80a50ec:	ea80 0001 	eor.w	r0, r0, r1
 80a50f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a50f4:	4770      	bx	lr
 80a50f6:	f090 0f00 	teq	r0, #0
 80a50fa:	bf17      	itett	ne
 80a50fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5100:	4608      	moveq	r0, r1
 80a5102:	f091 0f00 	teqne	r1, #0
 80a5106:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a510a:	d014      	beq.n	80a5136 <__aeabi_fmul+0x15e>
 80a510c:	ea92 0f0c 	teq	r2, ip
 80a5110:	d101      	bne.n	80a5116 <__aeabi_fmul+0x13e>
 80a5112:	0242      	lsls	r2, r0, #9
 80a5114:	d10f      	bne.n	80a5136 <__aeabi_fmul+0x15e>
 80a5116:	ea93 0f0c 	teq	r3, ip
 80a511a:	d103      	bne.n	80a5124 <__aeabi_fmul+0x14c>
 80a511c:	024b      	lsls	r3, r1, #9
 80a511e:	bf18      	it	ne
 80a5120:	4608      	movne	r0, r1
 80a5122:	d108      	bne.n	80a5136 <__aeabi_fmul+0x15e>
 80a5124:	ea80 0001 	eor.w	r0, r0, r1
 80a5128:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a512c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5130:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5134:	4770      	bx	lr
 80a5136:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a513a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a513e:	4770      	bx	lr

080a5140 <__aeabi_fdiv>:
 80a5140:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5144:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5148:	bf1e      	ittt	ne
 80a514a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a514e:	ea92 0f0c 	teqne	r2, ip
 80a5152:	ea93 0f0c 	teqne	r3, ip
 80a5156:	d069      	beq.n	80a522c <__aeabi_fdiv+0xec>
 80a5158:	eba2 0203 	sub.w	r2, r2, r3
 80a515c:	ea80 0c01 	eor.w	ip, r0, r1
 80a5160:	0249      	lsls	r1, r1, #9
 80a5162:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5166:	d037      	beq.n	80a51d8 <__aeabi_fdiv+0x98>
 80a5168:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a516c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5170:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5174:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5178:	428b      	cmp	r3, r1
 80a517a:	bf38      	it	cc
 80a517c:	005b      	lslcc	r3, r3, #1
 80a517e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5182:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5186:	428b      	cmp	r3, r1
 80a5188:	bf24      	itt	cs
 80a518a:	1a5b      	subcs	r3, r3, r1
 80a518c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5190:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5194:	bf24      	itt	cs
 80a5196:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a519a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a519e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a51a2:	bf24      	itt	cs
 80a51a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a51a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a51ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a51b0:	bf24      	itt	cs
 80a51b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a51b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a51ba:	011b      	lsls	r3, r3, #4
 80a51bc:	bf18      	it	ne
 80a51be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a51c2:	d1e0      	bne.n	80a5186 <__aeabi_fdiv+0x46>
 80a51c4:	2afd      	cmp	r2, #253	; 0xfd
 80a51c6:	f63f af50 	bhi.w	80a506a <__aeabi_fmul+0x92>
 80a51ca:	428b      	cmp	r3, r1
 80a51cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a51d0:	bf08      	it	eq
 80a51d2:	f020 0001 	biceq.w	r0, r0, #1
 80a51d6:	4770      	bx	lr
 80a51d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a51dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a51e0:	327f      	adds	r2, #127	; 0x7f
 80a51e2:	bfc2      	ittt	gt
 80a51e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a51e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a51ec:	4770      	bxgt	lr
 80a51ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a51f2:	f04f 0300 	mov.w	r3, #0
 80a51f6:	3a01      	subs	r2, #1
 80a51f8:	e737      	b.n	80a506a <__aeabi_fmul+0x92>
 80a51fa:	f092 0f00 	teq	r2, #0
 80a51fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5202:	bf02      	ittt	eq
 80a5204:	0040      	lsleq	r0, r0, #1
 80a5206:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a520a:	3a01      	subeq	r2, #1
 80a520c:	d0f9      	beq.n	80a5202 <__aeabi_fdiv+0xc2>
 80a520e:	ea40 000c 	orr.w	r0, r0, ip
 80a5212:	f093 0f00 	teq	r3, #0
 80a5216:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a521a:	bf02      	ittt	eq
 80a521c:	0049      	lsleq	r1, r1, #1
 80a521e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5222:	3b01      	subeq	r3, #1
 80a5224:	d0f9      	beq.n	80a521a <__aeabi_fdiv+0xda>
 80a5226:	ea41 010c 	orr.w	r1, r1, ip
 80a522a:	e795      	b.n	80a5158 <__aeabi_fdiv+0x18>
 80a522c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5230:	ea92 0f0c 	teq	r2, ip
 80a5234:	d108      	bne.n	80a5248 <__aeabi_fdiv+0x108>
 80a5236:	0242      	lsls	r2, r0, #9
 80a5238:	f47f af7d 	bne.w	80a5136 <__aeabi_fmul+0x15e>
 80a523c:	ea93 0f0c 	teq	r3, ip
 80a5240:	f47f af70 	bne.w	80a5124 <__aeabi_fmul+0x14c>
 80a5244:	4608      	mov	r0, r1
 80a5246:	e776      	b.n	80a5136 <__aeabi_fmul+0x15e>
 80a5248:	ea93 0f0c 	teq	r3, ip
 80a524c:	d104      	bne.n	80a5258 <__aeabi_fdiv+0x118>
 80a524e:	024b      	lsls	r3, r1, #9
 80a5250:	f43f af4c 	beq.w	80a50ec <__aeabi_fmul+0x114>
 80a5254:	4608      	mov	r0, r1
 80a5256:	e76e      	b.n	80a5136 <__aeabi_fmul+0x15e>
 80a5258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a525c:	bf18      	it	ne
 80a525e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5262:	d1ca      	bne.n	80a51fa <__aeabi_fdiv+0xba>
 80a5264:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5268:	f47f af5c 	bne.w	80a5124 <__aeabi_fmul+0x14c>
 80a526c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5270:	f47f af3c 	bne.w	80a50ec <__aeabi_fmul+0x114>
 80a5274:	e75f      	b.n	80a5136 <__aeabi_fmul+0x15e>
 80a5276:	bf00      	nop

080a5278 <__gesf2>:
 80a5278:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a527c:	e006      	b.n	80a528c <__cmpsf2+0x4>
 80a527e:	bf00      	nop

080a5280 <__lesf2>:
 80a5280:	f04f 0c01 	mov.w	ip, #1
 80a5284:	e002      	b.n	80a528c <__cmpsf2+0x4>
 80a5286:	bf00      	nop

080a5288 <__cmpsf2>:
 80a5288:	f04f 0c01 	mov.w	ip, #1
 80a528c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5290:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5294:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5298:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a529c:	bf18      	it	ne
 80a529e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a52a2:	d011      	beq.n	80a52c8 <__cmpsf2+0x40>
 80a52a4:	b001      	add	sp, #4
 80a52a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a52aa:	bf18      	it	ne
 80a52ac:	ea90 0f01 	teqne	r0, r1
 80a52b0:	bf58      	it	pl
 80a52b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a52b6:	bf88      	it	hi
 80a52b8:	17c8      	asrhi	r0, r1, #31
 80a52ba:	bf38      	it	cc
 80a52bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a52c0:	bf18      	it	ne
 80a52c2:	f040 0001 	orrne.w	r0, r0, #1
 80a52c6:	4770      	bx	lr
 80a52c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a52cc:	d102      	bne.n	80a52d4 <__cmpsf2+0x4c>
 80a52ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a52d2:	d105      	bne.n	80a52e0 <__cmpsf2+0x58>
 80a52d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a52d8:	d1e4      	bne.n	80a52a4 <__cmpsf2+0x1c>
 80a52da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a52de:	d0e1      	beq.n	80a52a4 <__cmpsf2+0x1c>
 80a52e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a52e4:	4770      	bx	lr
 80a52e6:	bf00      	nop

080a52e8 <__aeabi_cfrcmple>:
 80a52e8:	4684      	mov	ip, r0
 80a52ea:	4608      	mov	r0, r1
 80a52ec:	4661      	mov	r1, ip
 80a52ee:	e7ff      	b.n	80a52f0 <__aeabi_cfcmpeq>

080a52f0 <__aeabi_cfcmpeq>:
 80a52f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a52f2:	f7ff ffc9 	bl	80a5288 <__cmpsf2>
 80a52f6:	2800      	cmp	r0, #0
 80a52f8:	bf48      	it	mi
 80a52fa:	f110 0f00 	cmnmi.w	r0, #0
 80a52fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5300 <__aeabi_fcmpeq>:
 80a5300:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5304:	f7ff fff4 	bl	80a52f0 <__aeabi_cfcmpeq>
 80a5308:	bf0c      	ite	eq
 80a530a:	2001      	moveq	r0, #1
 80a530c:	2000      	movne	r0, #0
 80a530e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5312:	bf00      	nop

080a5314 <__aeabi_fcmplt>:
 80a5314:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5318:	f7ff ffea 	bl	80a52f0 <__aeabi_cfcmpeq>
 80a531c:	bf34      	ite	cc
 80a531e:	2001      	movcc	r0, #1
 80a5320:	2000      	movcs	r0, #0
 80a5322:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5326:	bf00      	nop

080a5328 <__aeabi_fcmple>:
 80a5328:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a532c:	f7ff ffe0 	bl	80a52f0 <__aeabi_cfcmpeq>
 80a5330:	bf94      	ite	ls
 80a5332:	2001      	movls	r0, #1
 80a5334:	2000      	movhi	r0, #0
 80a5336:	f85d fb08 	ldr.w	pc, [sp], #8
 80a533a:	bf00      	nop

080a533c <__aeabi_fcmpge>:
 80a533c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5340:	f7ff ffd2 	bl	80a52e8 <__aeabi_cfrcmple>
 80a5344:	bf94      	ite	ls
 80a5346:	2001      	movls	r0, #1
 80a5348:	2000      	movhi	r0, #0
 80a534a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a534e:	bf00      	nop

080a5350 <__aeabi_fcmpgt>:
 80a5350:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5354:	f7ff ffc8 	bl	80a52e8 <__aeabi_cfrcmple>
 80a5358:	bf34      	ite	cc
 80a535a:	2001      	movcc	r0, #1
 80a535c:	2000      	movcs	r0, #0
 80a535e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5362:	bf00      	nop

080a5364 <__aeabi_f2iz>:
 80a5364:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5368:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a536c:	d30f      	bcc.n	80a538e <__aeabi_f2iz+0x2a>
 80a536e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5372:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5376:	d90d      	bls.n	80a5394 <__aeabi_f2iz+0x30>
 80a5378:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a537c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5380:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5384:	fa23 f002 	lsr.w	r0, r3, r2
 80a5388:	bf18      	it	ne
 80a538a:	4240      	negne	r0, r0
 80a538c:	4770      	bx	lr
 80a538e:	f04f 0000 	mov.w	r0, #0
 80a5392:	4770      	bx	lr
 80a5394:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5398:	d101      	bne.n	80a539e <__aeabi_f2iz+0x3a>
 80a539a:	0242      	lsls	r2, r0, #9
 80a539c:	d105      	bne.n	80a53aa <__aeabi_f2iz+0x46>
 80a539e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a53a2:	bf08      	it	eq
 80a53a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a53a8:	4770      	bx	lr
 80a53aa:	f04f 0000 	mov.w	r0, #0
 80a53ae:	4770      	bx	lr

080a53b0 <__cxa_atexit>:
 80a53b0:	b510      	push	{r4, lr}
 80a53b2:	4c05      	ldr	r4, [pc, #20]	; (80a53c8 <__cxa_atexit+0x18>)
 80a53b4:	4613      	mov	r3, r2
 80a53b6:	b12c      	cbz	r4, 80a53c4 <__cxa_atexit+0x14>
 80a53b8:	460a      	mov	r2, r1
 80a53ba:	4601      	mov	r1, r0
 80a53bc:	2002      	movs	r0, #2
 80a53be:	f3af 8000 	nop.w
 80a53c2:	bd10      	pop	{r4, pc}
 80a53c4:	4620      	mov	r0, r4
 80a53c6:	bd10      	pop	{r4, pc}
 80a53c8:	00000000 	.word	0x00000000

080a53cc <memcpy>:
 80a53cc:	b510      	push	{r4, lr}
 80a53ce:	1e43      	subs	r3, r0, #1
 80a53d0:	440a      	add	r2, r1
 80a53d2:	4291      	cmp	r1, r2
 80a53d4:	d004      	beq.n	80a53e0 <memcpy+0x14>
 80a53d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a53da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a53de:	e7f8      	b.n	80a53d2 <memcpy+0x6>
 80a53e0:	bd10      	pop	{r4, pc}

080a53e2 <memset>:
 80a53e2:	4603      	mov	r3, r0
 80a53e4:	4402      	add	r2, r0
 80a53e6:	4293      	cmp	r3, r2
 80a53e8:	d002      	beq.n	80a53f0 <memset+0xe>
 80a53ea:	f803 1b01 	strb.w	r1, [r3], #1
 80a53ee:	e7fa      	b.n	80a53e6 <memset+0x4>
 80a53f0:	4770      	bx	lr
	...

080a53f4 <srand>:
 80a53f4:	b538      	push	{r3, r4, r5, lr}
 80a53f6:	4b12      	ldr	r3, [pc, #72]	; (80a5440 <srand+0x4c>)
 80a53f8:	4605      	mov	r5, r0
 80a53fa:	681c      	ldr	r4, [r3, #0]
 80a53fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a53fe:	b9d3      	cbnz	r3, 80a5436 <srand+0x42>
 80a5400:	2018      	movs	r0, #24
 80a5402:	f7fd fdd1 	bl	80a2fa8 <malloc>
 80a5406:	f243 330e 	movw	r3, #13070	; 0x330e
 80a540a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a540c:	8003      	strh	r3, [r0, #0]
 80a540e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5412:	8043      	strh	r3, [r0, #2]
 80a5414:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5418:	8083      	strh	r3, [r0, #4]
 80a541a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a541e:	80c3      	strh	r3, [r0, #6]
 80a5420:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5424:	8103      	strh	r3, [r0, #8]
 80a5426:	2305      	movs	r3, #5
 80a5428:	8143      	strh	r3, [r0, #10]
 80a542a:	230b      	movs	r3, #11
 80a542c:	8183      	strh	r3, [r0, #12]
 80a542e:	2201      	movs	r2, #1
 80a5430:	2300      	movs	r3, #0
 80a5432:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5438:	2200      	movs	r2, #0
 80a543a:	611d      	str	r5, [r3, #16]
 80a543c:	615a      	str	r2, [r3, #20]
 80a543e:	bd38      	pop	{r3, r4, r5, pc}
 80a5440:	20000080 	.word	0x20000080

080a5444 <rand>:
 80a5444:	4b19      	ldr	r3, [pc, #100]	; (80a54ac <rand+0x68>)
 80a5446:	b510      	push	{r4, lr}
 80a5448:	681c      	ldr	r4, [r3, #0]
 80a544a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a544c:	b9d3      	cbnz	r3, 80a5484 <rand+0x40>
 80a544e:	2018      	movs	r0, #24
 80a5450:	f7fd fdaa 	bl	80a2fa8 <malloc>
 80a5454:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5458:	63a0      	str	r0, [r4, #56]	; 0x38
 80a545a:	8003      	strh	r3, [r0, #0]
 80a545c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5460:	8043      	strh	r3, [r0, #2]
 80a5462:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5466:	8083      	strh	r3, [r0, #4]
 80a5468:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a546c:	80c3      	strh	r3, [r0, #6]
 80a546e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5472:	8103      	strh	r3, [r0, #8]
 80a5474:	2305      	movs	r3, #5
 80a5476:	8143      	strh	r3, [r0, #10]
 80a5478:	230b      	movs	r3, #11
 80a547a:	8183      	strh	r3, [r0, #12]
 80a547c:	2201      	movs	r2, #1
 80a547e:	2300      	movs	r3, #0
 80a5480:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5484:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a5486:	4c0a      	ldr	r4, [pc, #40]	; (80a54b0 <rand+0x6c>)
 80a5488:	690b      	ldr	r3, [r1, #16]
 80a548a:	6948      	ldr	r0, [r1, #20]
 80a548c:	435c      	muls	r4, r3
 80a548e:	4a09      	ldr	r2, [pc, #36]	; (80a54b4 <rand+0x70>)
 80a5490:	fb02 4000 	mla	r0, r2, r0, r4
 80a5494:	fba3 2302 	umull	r2, r3, r3, r2
 80a5498:	3201      	adds	r2, #1
 80a549a:	4403      	add	r3, r0
 80a549c:	f143 0300 	adc.w	r3, r3, #0
 80a54a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a54a4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a54a8:	bd10      	pop	{r4, pc}
 80a54aa:	bf00      	nop
 80a54ac:	20000080 	.word	0x20000080
 80a54b0:	5851f42d 	.word	0x5851f42d
 80a54b4:	4c957f2d 	.word	0x4c957f2d

080a54b8 <strcmp>:
 80a54b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a54bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a54c0:	2a01      	cmp	r2, #1
 80a54c2:	bf28      	it	cs
 80a54c4:	429a      	cmpcs	r2, r3
 80a54c6:	d0f7      	beq.n	80a54b8 <strcmp>
 80a54c8:	1ad0      	subs	r0, r2, r3
 80a54ca:	4770      	bx	lr

080a54cc <strlen>:
 80a54cc:	4603      	mov	r3, r0
 80a54ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a54d2:	2a00      	cmp	r2, #0
 80a54d4:	d1fb      	bne.n	80a54ce <strlen+0x2>
 80a54d6:	1a18      	subs	r0, r3, r0
 80a54d8:	3801      	subs	r0, #1
 80a54da:	4770      	bx	lr

080a54dc <dynalib_user>:
 80a54dc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a54ec:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a54fc:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a550c:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a551c:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a552c:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a553c:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a554c:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a555c:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a556c:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a557c:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a558c:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a559c:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a55ac:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a55bc:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a55cc:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a55dc:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a55ec:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a55fc:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a560c:	4853 6600 756c 5878 3a20 0020 6c66 7875     SH.fluxX : .flux
 80a561c:	2059 203a 6600 756c 5a78 3a20 0020 6f54     Y : .fluxZ : .To
 80a562c:	6174 206c 6f6d 6576 656d 746e 203a 5300     tal movement: .S
 80a563c:	6570 6465 6c20 6d69 7469 3a20 0020 5453     peed limit : .ST
 80a564c:	4c49 004c 4f4d 4556 5400 4f52 4255 454c     ILL.MOVE.TROUBLE
 80a565c:	4320 554f 544e 3a20 203a 6300 7568 6b6e      COUNT :: .chunk
 80a566c:	3a20 203a 5600 4c41 3a3a 0020 3a20 203a      :: .VAL:: . :: 
 80a567c:	0020 494c 5453 4e45 4e49 2d47 2d2d 2d2d      .LISTENING-----
 80a568c:	2d2d 2d2d 2d2d 2d2d 2d2d 7200 6365 6965     ----------.recei
 80a569c:	6976 676e 6d20 7365 6173 6567 2d00 2d2d     ving message.---
 80a56ac:	6e69 7720 6968 656c 2d2d 002d 4150 5352     in while---.PARS
 80a56bc:	4e49 0047 7473 6c69 006c 6d2f 766f 0065     ING.still./move.
 80a56cc:	454c 2044 4e4f 4c00 4445 4f20 4646 5200     LED ON.LED OFF.R
 80a56dc:	6465 4700 6572 6e65 4200 756c 0065          ed.Green.Blue.

080a56ea <CSWTCH.57>:
 80a56ea:	0020 0000 0040 0000 0060                     ...@...`.

080a56f4 <CSWTCH.215>:
 80a56f4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a5704:	0050 0000 2d0a 2d2d 002d 0000               P....----...

080a5710 <_ZTV7TwoWire>:
	...
 80a5718:	2ff1 080a 303b 080a 3013 080a 2ff3 080a     ./..;0...0.../..
 80a5728:	301b 080a 3023 080a 302b 080a 3033 080a     .0..#0..+0..30..

080a5738 <_ZTV9IPAddress>:
	...
 80a5740:	30af 080a 00b3 080a 00d5 080a 6162 6475     .0..........baud
 80a5750:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a5760:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a5770:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a5780:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a5790:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a57a0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a57b0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a57c0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a57d0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a57e0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a57f0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a5800:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a5810:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a5820:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a5830 <_ZTVN5spark12NetworkClassE>:
	...
 80a5838:	318d 080a 3197 080a 31a1 080a 31ab 080a     .1...1...1...1..
 80a5848:	31b5 080a 31c1 080a 31cd 080a 31d9 080a     .1...1...1...1..
 80a5858:	31e1 080a 31eb 080a 31f5 080a 616e 006e     .1...1...1..nan.
 80a5868:	766f 0066 6e69 0066                         ovf.inf.

080a5870 <_ZTV8SPIClass>:
	...
 80a5878:	3581 080a 3583 080a                         .5...5..

080a5880 <_ZL14clock_divisors>:
 80a5880:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a5890:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a58a0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a58b0:	0000 0000                                   ....

080a58b4 <_ZTV3UDP>:
	...
 80a58bc:	00b5 080a 00e3 080a 37db 080a 38fb 080a     .........7...8..
 80a58cc:	37d3 080a 37f1 080a 380f 080a 3829 080a     .7...7...8..)8..
 80a58dc:	384b 080a 3895 080a 38b7 080a 3a4d 080a     K8...8...8..M:..
 80a58ec:	3961 080a 37bd 080a 3b5d 080a 39c9 080a     a9...7..];...9..
 80a58fc:	3a85 080a 3b8b 080a 3925 080a 37c9 080a     .:...;..%9...7..
 80a590c:	3a2d 080a 37cf 080a 382b 080a fff0 ffff     -:...7..+8......
 80a591c:	0000 0000 3843 080a                         ....C8..

080a5924 <_ZTV11USARTSerial>:
	...
 80a592c:	3bc3 080a 3c13 080a 3c21 080a 3271 080a     .;...<..!<..q2..
 80a593c:	3bd7 080a 3bf9 080a 3be5 080a 3c0d 080a     .;...;...;...<..
 80a594c:	3bc5 080a 3bc9 080a                         .;...;..

080a5954 <_ZTV9USBSerial>:
	...
 80a595c:	3cc9 080a 3d19 080a 3d27 080a 3271 080a     .<...=..'=..q2..
 80a596c:	3d05 080a 3ccb 080a 3ce1 080a 3d13 080a     .=...<...<...=..
 80a597c:	3cf7 080a 3cc5 080a                         .<...<..

080a5984 <_ZTVN5spark9WiFiClassE>:
	...
 80a598c:	3f17 080a 3f0d 080a 3f03 080a 3e75 080a     .?...?...?..u>..
 80a599c:	3ef7 080a 3eeb 080a 3edf 080a 3ed7 080a     .>...>...>...>..
 80a59ac:	3ecd 080a 3ec3 080a 3e7f 080a               .>...>...>..

080a59b8 <__sf_fake_stdin>:
	...

080a59d8 <__sf_fake_stdout>:
	...

080a59f8 <__sf_fake_stderr>:
	...
 80a5a18:	0043                                        C.

080a5a1a <link_const_variable_data_end>:
	...

080a5a1c <link_constructors_location>:
 80a5a1c:	080a08fd 	.word	0x080a08fd
 80a5a20:	080a09d9 	.word	0x080a09d9
 80a5a24:	080a13e1 	.word	0x080a13e1
 80a5a28:	080a270d 	.word	0x080a270d
 80a5a2c:	080a298d 	.word	0x080a298d
 80a5a30:	080a2b47 	.word	0x080a2b47
 80a5a34:	080a317d 	.word	0x080a317d
 80a5a38:	080a325d 	.word	0x080a325d
 80a5a3c:	080a3565 	.word	0x080a3565
 80a5a40:	080a3791 	.word	0x080a3791
 80a5a44:	080a37a9 	.word	0x080a37a9
 80a5a48:	080a3f21 	.word	0x080a3f21
 80a5a4c:	080a4149 	.word	0x080a4149
 80a5a50:	080a4179 	.word	0x080a4179
 80a5a54:	080a41cd 	.word	0x080a41cd
 80a5a58:	080a4291 	.word	0x080a4291
 80a5a5c:	080a4315 	.word	0x080a4315
 80a5a60:	080a4399 	.word	0x080a4399

080a5a64 <link_constructors_end>:
	...
