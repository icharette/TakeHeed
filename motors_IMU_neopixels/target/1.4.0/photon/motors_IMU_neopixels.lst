
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.0/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000050b4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a50d0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  080a50d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006e8  200000a4  200000a4  000400a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5178  080a5178  00035178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a51a0  080a51a0  000351a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b6fab  00000000  00000000  000351a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010b37  00000000  00000000  000ec14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017b74  00000000  00000000  000fcc86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002330  00000000  00000000  001147fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003710  00000000  00000000  00116b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025b1c  00000000  00000000  0011a23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026eb8  00000000  00000000  0013fd56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a75c8  00000000  00000000  00166c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c424  00000000  00000000  0020e1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 fd8f 	bl	80a4b50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fd94 	bl	80a4b66 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a50d4 	.word	0x080a50d4
 80a004c:	200000a4 	.word	0x200000a4
 80a0050:	200000a4 	.word	0x200000a4
 80a0054:	2000078c 	.word	0x2000078c
 80a0058:	2000078c 	.word	0x2000078c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fbeb 	bl	80a3838 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a508c 	.word	0x080a508c
 80a0084:	080a50cc 	.word	0x080a50cc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b904 	b.w	80a0294 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa5f 	bl	80a0550 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bb91 	b.w	80a37bc <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f002 bbd1 	b.w	80a2840 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 bbd7 	b.w	80a2850 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f002 fffa 	bl	80a30b8 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f003 f92f 	bl	80a3328 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a4f2c 	.word	0x080a4f2c

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f003 fcac 	bl	80a3a36 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f003 fca2 	bl	80a3a36 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}

080a00f6 <_Z10setupMotorPiiii>:
  rightShoulderMotors[0]= directionRight;
  rightShoulderMotors[1]= stepRight;
  rightShoulderMotors[2]= enableRight;
}

void setupMotor(int motorPinsArray[], int enable, int step, int direction){
 80a00f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a00fa:	4616      	mov	r6, r2
 80a00fc:	461f      	mov	r7, r3
 80a00fe:	4604      	mov	r4, r0
 80a0100:	460d      	mov	r5, r1
  pinMode(enable, OUTPUT); //Enable
 80a0102:	fa1f f881 	uxth.w	r8, r1
 80a0106:	4640      	mov	r0, r8
 80a0108:	2101      	movs	r1, #1
 80a010a:	f003 fbe5 	bl	80a38d8 <pinMode>
  pinMode(step, OUTPUT); //Step
 80a010e:	2101      	movs	r1, #1
 80a0110:	b2b0      	uxth	r0, r6
 80a0112:	f003 fbe1 	bl	80a38d8 <pinMode>
  pinMode(direction, OUTPUT); //Direction
 80a0116:	2101      	movs	r1, #1
 80a0118:	b2b8      	uxth	r0, r7
 80a011a:	f003 fbdd 	bl	80a38d8 <pinMode>

  digitalWrite(enable, LOW);
 80a011e:	2100      	movs	r1, #0
 80a0120:	4640      	mov	r0, r8
 80a0122:	f003 fbea 	bl	80a38fa <digitalWrite>

  motorPinsArray[0]= direction;
 80a0126:	6027      	str	r7, [r4, #0]
  motorPinsArray[1]= step;
 80a0128:	6066      	str	r6, [r4, #4]
  motorPinsArray[2]= enable;
 80a012a:	60a5      	str	r5, [r4, #8]
 80a012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0130 <_Z15calibrateSensorv>:
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
}

void calibrateSensor(){
 80a0130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0134:	f003 fa4e 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a0138:	4929      	ldr	r1, [pc, #164]	; (80a01e0 <_Z15calibrateSensorv+0xb0>)
 80a013a:	f002 fd09 	bl	80a2b50 <_ZN5Print5printEPKc>
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
 80a013e:	4e29      	ldr	r6, [pc, #164]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0140:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80a01f4 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a0144:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80a01f8 <_Z15calibrateSensorv+0xc8>
  Serial.println("Calibration finished");
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0148:	2564      	movs	r5, #100	; 0x64
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
 80a014a:	4826      	ldr	r0, [pc, #152]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a014c:	f000 fd91 	bl	80a0c72 <_ZN7LSM9DS114accelAvailableEv>
 80a0150:	b110      	cbz	r0, 80a0158 <_Z15calibrateSensorv+0x28>
    {
      imu.readAccel();
 80a0152:	4824      	ldr	r0, [pc, #144]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a0154:	f000 fe58 	bl	80a0e08 <_ZN7LSM9DS19readAccelEv>
    }
    refX += imu.calcAccel(imu.ax);
 80a0158:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a015c:	4821      	ldr	r0, [pc, #132]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a015e:	f000 fb34 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
 80a0162:	4601      	mov	r1, r0
 80a0164:	f8db 0000 	ldr.w	r0, [fp]
 80a0168:	f004 fa66 	bl	80a4638 <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a016c:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0170:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a0174:	481b      	ldr	r0, [pc, #108]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a0176:	f000 fb28 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
 80a017a:	4601      	mov	r1, r0
 80a017c:	f8da 0000 	ldr.w	r0, [sl]
 80a0180:	f004 fa5a 	bl	80a4638 <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a0184:	4c18      	ldr	r4, [pc, #96]	; (80a01e8 <_Z15calibrateSensorv+0xb8>)
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a0186:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a018a:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a018e:	4815      	ldr	r0, [pc, #84]	; (80a01e4 <_Z15calibrateSensorv+0xb4>)
 80a0190:	f000 fb1b 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
 80a0194:	6821      	ldr	r1, [r4, #0]
 80a0196:	f004 fa4f 	bl	80a4638 <__addsf3>
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a019a:	3d01      	subs	r5, #1
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a019c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a01f4 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a01a0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a01f8 <_Z15calibrateSensorv+0xc8>
    refZ += imu.calcAccel(imu.az);
 80a01a4:	4607      	mov	r7, r0
 80a01a6:	6020      	str	r0, [r4, #0]
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a01a8:	d1cf      	bne.n	80a014a <_Z15calibrateSensorv+0x1a>
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a01aa:	f8d9 0000 	ldr.w	r0, [r9]
 80a01ae:	490f      	ldr	r1, [pc, #60]	; (80a01ec <_Z15calibrateSensorv+0xbc>)
 80a01b0:	f004 fbfe 	bl	80a49b0 <__aeabi_fdiv>
  refY = refY / count;
 80a01b4:	490d      	ldr	r1, [pc, #52]	; (80a01ec <_Z15calibrateSensorv+0xbc>)
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a01b6:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / count;
 80a01ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a01be:	f004 fbf7 	bl	80a49b0 <__aeabi_fdiv>
  refZ = refZ / count; 
 80a01c2:	490a      	ldr	r1, [pc, #40]	; (80a01ec <_Z15calibrateSensorv+0xbc>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
 80a01c4:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / count; 
 80a01c8:	4638      	mov	r0, r7
 80a01ca:	f004 fbf1 	bl	80a49b0 <__aeabi_fdiv>
 80a01ce:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a01d0:	f003 fa00 	bl	80a35d4 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a01d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
 80a01d8:	4905      	ldr	r1, [pc, #20]	; (80a01f0 <_Z15calibrateSensorv+0xc0>)
 80a01da:	f002 bcd2 	b.w	80a2b82 <_ZN5Print7printlnEPKc>
 80a01de:	bf00      	nop
 80a01e0:	080a4bec 	.word	0x080a4bec
 80a01e4:	200000e8 	.word	0x200000e8
 80a01e8:	2000018c 	.word	0x2000018c
 80a01ec:	42c80000 	.word	0x42c80000
 80a01f0:	080a4c05 	.word	0x080a4c05
 80a01f4:	20000184 	.word	0x20000184
 80a01f8:	20000188 	.word	0x20000188

080a01fc <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a01fc:	b538      	push	{r3, r4, r5, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01fe:	4c1c      	ldr	r4, [pc, #112]	; (80a0270 <_Z8setupImuv+0x74>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a0200:	231e      	movs	r3, #30
 80a0202:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0204:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a0206:	4a1b      	ldr	r2, [pc, #108]	; (80a0274 <_Z8setupImuv+0x78>)
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0208:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a020a:	4b1b      	ldr	r3, [pc, #108]	; (80a0278 <_Z8setupImuv+0x7c>)
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a020c:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a020e:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a0210:	4b1a      	ldr	r3, [pc, #104]	; (80a027c <_Z8setupImuv+0x80>)
 80a0212:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0216:	4620      	mov	r0, r4
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a0218:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a021a:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a021c:	f000 fd51 	bl	80a0cc2 <_ZN7LSM9DS15beginEv>
 80a0220:	b978      	cbnz	r0, 80a0242 <_Z8setupImuv+0x46>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a0222:	f003 f9d7 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a0226:	4916      	ldr	r1, [pc, #88]	; (80a0280 <_Z8setupImuv+0x84>)
 80a0228:	f002 fcab 	bl	80a2b82 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a022c:	f003 f9d2 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a0230:	4914      	ldr	r1, [pc, #80]	; (80a0284 <_Z8setupImuv+0x88>)
 80a0232:	f002 fca6 	bl	80a2b82 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a0236:	f003 f9cd 	bl	80a35d4 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a023a:	4913      	ldr	r1, [pc, #76]	; (80a0288 <_Z8setupImuv+0x8c>)
 80a023c:	f002 fca1 	bl	80a2b82 <_ZN5Print7printlnEPKc>
 80a0240:	e7fe      	b.n	80a0240 <_Z8setupImuv+0x44>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a0242:	f003 f9c7 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a0246:	4911      	ldr	r1, [pc, #68]	; (80a028c <_Z8setupImuv+0x90>)
 80a0248:	f002 fc9b 	bl	80a2b82 <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a024c:	4629      	mov	r1, r5
 80a024e:	4620      	mov	r0, r4
 80a0250:	f000 fe3c 	bl	80a0ecc <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a0254:	4629      	mov	r1, r5
 80a0256:	4620      	mov	r0, r4
 80a0258:	f000 ff04 	bl	80a1064 <_ZN7LSM9DS112calibrateMagEb>
  calibrateSensor();
 80a025c:	f7ff ff68 	bl	80a0130 <_Z15calibrateSensorv>
  Serial.println("Calibration finished");
 80a0260:	f003 f9b8 	bl	80a35d4 <_Z16_fetch_usbserialv>
}
 80a0264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
 80a0268:	4909      	ldr	r1, [pc, #36]	; (80a0290 <_Z8setupImuv+0x94>)
 80a026a:	f002 bc8a 	b.w	80a2b82 <_ZN5Print7printlnEPKc>
 80a026e:	bf00      	nop
 80a0270:	200000e8 	.word	0x200000e8
 80a0274:	40a00000 	.word	0x40a00000
 80a0278:	200000cc 	.word	0x200000cc
 80a027c:	200000c8 	.word	0x200000c8
 80a0280:	080a4c0a 	.word	0x080a4c0a
 80a0284:	080a4c2e 	.word	0x080a4c2e
 80a0288:	080a4c43 	.word	0x080a4c43
 80a028c:	080a4ccb 	.word	0x080a4ccb
 80a0290:	080a4cdf 	.word	0x080a4cdf

080a0294 <setup>:

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0294:	b570      	push	{r4, r5, r6, lr}
  
  pinMode(mosfetSwitch, OUTPUT);
 80a0296:	4b40      	ldr	r3, [pc, #256]	; (80a0398 <setup+0x104>)

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0298:	b096      	sub	sp, #88	; 0x58
  
  pinMode(mosfetSwitch, OUTPUT);
 80a029a:	8818      	ldrh	r0, [r3, #0]
 80a029c:	2101      	movs	r1, #1
 80a029e:	f003 fb1b 	bl	80a38d8 <pinMode>
   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a02a2:	4b3e      	ldr	r3, [pc, #248]	; (80a039c <setup+0x108>)
 80a02a4:	4a3e      	ldr	r2, [pc, #248]	; (80a03a0 <setup+0x10c>)
 80a02a6:	493f      	ldr	r1, [pc, #252]	; (80a03a4 <setup+0x110>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	6812      	ldr	r2, [r2, #0]
 80a02ac:	6809      	ldr	r1, [r1, #0]
 80a02ae:	483e      	ldr	r0, [pc, #248]	; (80a03a8 <setup+0x114>)
 80a02b0:	f7ff ff21 	bl	80a00f6 <_Z10setupMotorPiiii>
  setupMotor(leftShoulderMotors, enableLeft, stepLeft, directionLeft);
 80a02b4:	4b3d      	ldr	r3, [pc, #244]	; (80a03ac <setup+0x118>)
 80a02b6:	4a3e      	ldr	r2, [pc, #248]	; (80a03b0 <setup+0x11c>)
 80a02b8:	493e      	ldr	r1, [pc, #248]	; (80a03b4 <setup+0x120>)
 80a02ba:	681b      	ldr	r3, [r3, #0]
 80a02bc:	6812      	ldr	r2, [r2, #0]
 80a02be:	6809      	ldr	r1, [r1, #0]
 80a02c0:	483d      	ldr	r0, [pc, #244]	; (80a03b8 <setup+0x124>)
 80a02c2:	f7ff ff18 	bl	80a00f6 <_Z10setupMotorPiiii>
  // setupMotorRight();
  

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a02c6:	f003 f985 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a02ca:	f003 f96a 	bl	80a35a2 <_ZN9USBSerialcvbEv>
 80a02ce:	2800      	cmp	r0, #0
 80a02d0:	d0f9      	beq.n	80a02c6 <setup+0x32>
 80a02d2:	4c3a      	ldr	r4, [pc, #232]	; (80a03bc <setup+0x128>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a02d4:	2300      	movs	r3, #0
 80a02d6:	461a      	mov	r2, r3
 80a02d8:	4619      	mov	r1, r3
 80a02da:	6860      	ldr	r0, [r4, #4]
 80a02dc:	f002 fa50 	bl	80a2780 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a02e0:	2200      	movs	r2, #0
 80a02e2:	4611      	mov	r1, r2
 80a02e4:	6860      	ldr	r0, [r4, #4]
 80a02e6:	4d35      	ldr	r5, [pc, #212]	; (80a03bc <setup+0x128>)
 80a02e8:	f002 fa62 	bl	80a27b0 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a02ec:	2800      	cmp	r0, #0
 80a02ee:	d0f7      	beq.n	80a02e0 <setup+0x4c>
  Serial.println("Setup");
 80a02f0:	f003 f970 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a02f4:	4932      	ldr	r1, [pc, #200]	; (80a03c0 <setup+0x12c>)
 80a02f6:	f002 fc44 	bl	80a2b82 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a02fa:	4b32      	ldr	r3, [pc, #200]	; (80a03c4 <setup+0x130>)
 80a02fc:	2200      	movs	r2, #0
 80a02fe:	8819      	ldrh	r1, [r3, #0]
 80a0300:	4831      	ldr	r0, [pc, #196]	; (80a03c8 <setup+0x134>)
 80a0302:	f002 feb4 	bl	80a306e <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a0306:	2300      	movs	r3, #0
 80a0308:	4619      	mov	r1, r3
 80a030a:	4a30      	ldr	r2, [pc, #192]	; (80a03cc <setup+0x138>)
 80a030c:	6868      	ldr	r0, [r5, #4]
 80a030e:	f002 fa87 	bl	80a2820 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a0312:	f003 f95f 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a0316:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0318:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a031a:	2240      	movs	r2, #64	; 0x40
 80a031c:	2100      	movs	r1, #0
 80a031e:	a806      	add	r0, sp, #24
 80a0320:	f004 fc21 	bl	80a4b66 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0324:	2340      	movs	r3, #64	; 0x40
 80a0326:	aa06      	add	r2, sp, #24
 80a0328:	4621      	mov	r1, r4
 80a032a:	9400      	str	r4, [sp, #0]
 80a032c:	6868      	ldr	r0, [r5, #4]
 80a032e:	f002 fa7f 	bl	80a2830 <network_get_hostname>
        return String(buf);
 80a0332:	a906      	add	r1, sp, #24
 80a0334:	a802      	add	r0, sp, #8
 80a0336:	f002 fe29 	bl	80a2f8c <_ZN6StringC1EPK19__FlashStringHelper>
 80a033a:	9902      	ldr	r1, [sp, #8]
 80a033c:	4630      	mov	r0, r6
 80a033e:	f002 fc20 	bl	80a2b82 <_ZN5Print7printlnEPKc>
 80a0342:	a802      	add	r0, sp, #8
 80a0344:	f002 fddb 	bl	80a2efe <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a0348:	f003 f944 	bl	80a35d4 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a034c:	4622      	mov	r2, r4
 80a034e:	4606      	mov	r6, r0
 80a0350:	4621      	mov	r1, r4
 80a0352:	6868      	ldr	r0, [r5, #4]
 80a0354:	f002 fa0c 	bl	80a2770 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0358:	1c81      	adds	r1, r0, #2
 80a035a:	a806      	add	r0, sp, #24
 80a035c:	f002 fb18 	bl	80a2990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0360:	a906      	add	r1, sp, #24
 80a0362:	4630      	mov	r0, r6
 80a0364:	f002 fc17 	bl	80a2b96 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a0368:	f003 f934 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a036c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0370:	f003 f910 	bl	80a3594 <_ZN9USBSerial5beginEl>
    iVx = 0;
    iVy = 0;
    iVz = 0;

    setupImu();
 80a0374:	f7ff ff42 	bl	80a01fc <_Z8setupImuv>
    
  updateTimer.SetCallback(OnTimer);
 80a0378:	4915      	ldr	r1, [pc, #84]	; (80a03d0 <setup+0x13c>)
 80a037a:	4816      	ldr	r0, [pc, #88]	; (80a03d4 <setup+0x140>)
 80a037c:	f000 f9ce 	bl	80a071c <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>

    strip.setBrightness(BRIGHTNESS);
 80a0380:	2132      	movs	r1, #50	; 0x32
 80a0382:	4815      	ldr	r0, [pc, #84]	; (80a03d8 <setup+0x144>)
 80a0384:	f001 ffee 	bl	80a2364 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a0388:	4813      	ldr	r0, [pc, #76]	; (80a03d8 <setup+0x144>)
 80a038a:	f000 fefb 	bl	80a1184 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a038e:	4812      	ldr	r0, [pc, #72]	; (80a03d8 <setup+0x144>)
 80a0390:	f000 ff2e 	bl	80a11f0 <_ZN17Adafruit_NeoPixel4showEv>
  }
 80a0394:	b016      	add	sp, #88	; 0x58
 80a0396:	bd70      	pop	{r4, r5, r6, pc}
 80a0398:	20000024 	.word	0x20000024
 80a039c:	20000010 	.word	0x20000010
 80a03a0:	20000028 	.word	0x20000028
 80a03a4:	2000001c 	.word	0x2000001c
 80a03a8:	200000a8 	.word	0x200000a8
 80a03ac:	20000014 	.word	0x20000014
 80a03b0:	20000018 	.word	0x20000018
 80a03b4:	20000008 	.word	0x20000008
 80a03b8:	2000016c 	.word	0x2000016c
 80a03bc:	20000688 	.word	0x20000688
 80a03c0:	080a4cf4 	.word	0x080a4cf4
 80a03c4:	2000000c 	.word	0x2000000c
 80a03c8:	200001a0 	.word	0x200001a0
 80a03cc:	080a4cfa 	.word	0x080a4cfa
 80a03d0:	080a0605 	.word	0x080a0605
 80a03d4:	200000b4 	.word	0x200000b4
 80a03d8:	200001ec 	.word	0x200001ec

080a03dc <_Z25setValuesAccordingToStatec>:

void setValuesAccordingToState(char state){
  switch(state){
 80a03dc:	2844      	cmp	r0, #68	; 0x44
 80a03de:	d015      	beq.n	80a040c <_Z25setValuesAccordingToStatec+0x30>
 80a03e0:	d802      	bhi.n	80a03e8 <_Z25setValuesAccordingToStatec+0xc>
 80a03e2:	2842      	cmp	r0, #66	; 0x42
 80a03e4:	d016      	beq.n	80a0414 <_Z25setValuesAccordingToStatec+0x38>
 80a03e6:	4770      	bx	lr
 80a03e8:	284c      	cmp	r0, #76	; 0x4c
 80a03ea:	d002      	beq.n	80a03f2 <_Z25setValuesAccordingToStatec+0x16>
 80a03ec:	2853      	cmp	r0, #83	; 0x53
 80a03ee:	d011      	beq.n	80a0414 <_Z25setValuesAccordingToStatec+0x38>
 80a03f0:	4770      	bx	lr

    //life
    case 'L':
      pace = 500;
 80a03f2:	4b0e      	ldr	r3, [pc, #56]	; (80a042c <_Z25setValuesAccordingToStatec+0x50>)
 80a03f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a03f8:	601a      	str	r2, [r3, #0]
      wait = 1000;
 80a03fa:	4b0d      	ldr	r3, [pc, #52]	; (80a0430 <_Z25setValuesAccordingToStatec+0x54>)
 80a03fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0400:	601a      	str	r2, [r3, #0]
      stepperIndexCap = 2000;
 80a0402:	4b0c      	ldr	r3, [pc, #48]	; (80a0434 <_Z25setValuesAccordingToStatec+0x58>)
 80a0404:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80a0408:	601a      	str	r2, [r3, #0]
    break;
 80a040a:	4770      	bx	lr
    break;

    //dead
    case 'D':
    //not moving
      stepperIndexCap = 0;
 80a040c:	4b09      	ldr	r3, [pc, #36]	; (80a0434 <_Z25setValuesAccordingToStatec+0x58>)
 80a040e:	2200      	movs	r2, #0
 80a0410:	601a      	str	r2, [r3, #0]
    break;
 80a0412:	4770      	bx	lr

    //symbiosis, coming back to life
    case 'S':
      pace = 2000;
 80a0414:	4a05      	ldr	r2, [pc, #20]	; (80a042c <_Z25setValuesAccordingToStatec+0x50>)
 80a0416:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80a041a:	6013      	str	r3, [r2, #0]
      wait = 1000;
 80a041c:	4a04      	ldr	r2, [pc, #16]	; (80a0430 <_Z25setValuesAccordingToStatec+0x54>)
 80a041e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0422:	6011      	str	r1, [r2, #0]
      stepperIndexCap = 2000;
 80a0424:	4a03      	ldr	r2, [pc, #12]	; (80a0434 <_Z25setValuesAccordingToStatec+0x58>)
 80a0426:	6013      	str	r3, [r2, #0]
 80a0428:	4770      	bx	lr
 80a042a:	bf00      	nop
 80a042c:	20000000 	.word	0x20000000
 80a0430:	20000004 	.word	0x20000004
 80a0434:	20000020 	.word	0x20000020

080a0438 <_Z12getMouvementv>:
    return true;
  }else{
    return false;
  }
}
void getMouvement(){
 80a0438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
 80a043c:	4a39      	ldr	r2, [pc, #228]	; (80a0524 <_Z12getMouvementv+0xec>)
    return false;
  }
}
void getMouvement(){
//    reset values
    dX = 0;
 80a043e:	4f3a      	ldr	r7, [pc, #232]	; (80a0528 <_Z12getMouvementv+0xf0>)
    dY = 0;
 80a0440:	4e3a      	ldr	r6, [pc, #232]	; (80a052c <_Z12getMouvementv+0xf4>)
    dZ = 0;
 80a0442:	4d3b      	ldr	r5, [pc, #236]	; (80a0530 <_Z12getMouvementv+0xf8>)
    return false;
  }
}
void getMouvement(){
//    reset values
    dX = 0;
 80a0444:	2300      	movs	r3, #0
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
 80a0446:	4c3b      	ldr	r4, [pc, #236]	; (80a0534 <_Z12getMouvementv+0xfc>)
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a0448:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80a0540 <_Z12getMouvementv+0x108>
 80a044c:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80a0544 <_Z12getMouvementv+0x10c>
    return false;
  }
}
void getMouvement(){
//    reset values
    dX = 0;
 80a0450:	603b      	str	r3, [r7, #0]
    dY = 0;
 80a0452:	6033      	str	r3, [r6, #0]
    dZ = 0;
 80a0454:	602b      	str	r3, [r5, #0]
    avMvmt = 0;
 80a0456:	6013      	str	r3, [r2, #0]
 80a0458:	f04f 0864 	mov.w	r8, #100	; 0x64


    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
 80a045c:	4835      	ldr	r0, [pc, #212]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a045e:	f000 fc08 	bl	80a0c72 <_ZN7LSM9DS114accelAvailableEv>
 80a0462:	b110      	cbz	r0, 80a046a <_Z12getMouvementv+0x32>
    {
      imu.readAccel();
 80a0464:	4833      	ldr	r0, [pc, #204]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a0466:	f000 fccf 	bl	80a0e08 <_ZN7LSM9DS19readAccelEv>
    }
    dX=imu.calcAccel(imu.ax);
 80a046a:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a046e:	4831      	ldr	r0, [pc, #196]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a0470:	f000 f9ab 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
    dY=imu.calcAccel(imu.ay);
 80a0474:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
 80a0478:	6038      	str	r0, [r7, #0]
    dY=imu.calcAccel(imu.ay);
 80a047a:	482e      	ldr	r0, [pc, #184]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a047c:	f000 f9a5 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
    dZ=imu.calcAccel(imu.az);
 80a0480:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
 80a0484:	6030      	str	r0, [r6, #0]
    dZ=imu.calcAccel(imu.az);
 80a0486:	482b      	ldr	r0, [pc, #172]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a0488:	f000 f99f 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a048c:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);
 80a0490:	6028      	str	r0, [r5, #0]

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a0492:	4828      	ldr	r0, [pc, #160]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a0494:	f000 f999 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
 80a0498:	f8db 1000 	ldr.w	r1, [fp]
 80a049c:	f004 f8ca 	bl	80a4634 <__aeabi_fsub>
 80a04a0:	f004 fb22 	bl	80a4ae8 <__aeabi_f2iz>
 80a04a4:	2800      	cmp	r0, #0
 80a04a6:	bfb8      	it	lt
 80a04a8:	4240      	neglt	r0, r0
 80a04aa:	f004 f979 	bl	80a47a0 <__aeabi_i2f>
 80a04ae:	f8da 1000 	ldr.w	r1, [sl]
 80a04b2:	f004 f8c1 	bl	80a4638 <__addsf3>
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a04b6:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a04ba:	f8ca 0000 	str.w	r0, [sl]
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a04be:	481d      	ldr	r0, [pc, #116]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a04c0:	f000 f983 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
 80a04c4:	4b1c      	ldr	r3, [pc, #112]	; (80a0538 <_Z12getMouvementv+0x100>)
 80a04c6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80a0548 <_Z12getMouvementv+0x110>
 80a04ca:	6819      	ldr	r1, [r3, #0]
 80a04cc:	f004 f8b2 	bl	80a4634 <__aeabi_fsub>
 80a04d0:	f004 fb0a 	bl	80a4ae8 <__aeabi_f2iz>
 80a04d4:	2800      	cmp	r0, #0
 80a04d6:	bfb8      	it	lt
 80a04d8:	4240      	neglt	r0, r0
 80a04da:	f004 f961 	bl	80a47a0 <__aeabi_i2f>
 80a04de:	f8d9 1000 	ldr.w	r1, [r9]
 80a04e2:	f004 f8a9 	bl	80a4638 <__addsf3>
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a04e6:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a04ea:	f8c9 0000 	str.w	r0, [r9]
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a04ee:	4811      	ldr	r0, [pc, #68]	; (80a0534 <_Z12getMouvementv+0xfc>)
 80a04f0:	f000 f96b 	bl	80a07ca <_ZN7LSM9DS19calcAccelEs>
 80a04f4:	4b11      	ldr	r3, [pc, #68]	; (80a053c <_Z12getMouvementv+0x104>)
 80a04f6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a054c <_Z12getMouvementv+0x114>
 80a04fa:	6819      	ldr	r1, [r3, #0]
 80a04fc:	f004 f89a 	bl	80a4634 <__aeabi_fsub>
 80a0500:	f004 faf2 	bl	80a4ae8 <__aeabi_f2iz>
 80a0504:	2800      	cmp	r0, #0
 80a0506:	bfb8      	it	lt
 80a0508:	4240      	neglt	r0, r0
 80a050a:	f004 f949 	bl	80a47a0 <__aeabi_i2f>
 80a050e:	f8d9 1000 	ldr.w	r1, [r9]
 80a0512:	f004 f891 	bl	80a4638 <__addsf3>
    dY = 0;
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
 80a0516:	f1b8 0801 	subs.w	r8, r8, #1
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a051a:	f8c9 0000 	str.w	r0, [r9]
    dY = 0;
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
 80a051e:	d19d      	bne.n	80a045c <_Z12getMouvementv+0x24>
    // if (avMvmt > lossThreshold && pixelPointer >= 0){
    // //   pixels[pixelPointer] = 0;
    //   pixelPointer--;
    // }
    
}
 80a0520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0524:	200000c4 	.word	0x200000c4
 80a0528:	200000c0 	.word	0x200000c0
 80a052c:	20000198 	.word	0x20000198
 80a0530:	2000019c 	.word	0x2000019c
 80a0534:	200000e8 	.word	0x200000e8
 80a0538:	20000188 	.word	0x20000188
 80a053c:	2000018c 	.word	0x2000018c
 80a0540:	20000178 	.word	0x20000178
 80a0544:	20000184 	.word	0x20000184
 80a0548:	2000017c 	.word	0x2000017c
 80a054c:	20000180 	.word	0x20000180

080a0550 <loop>:
      stepperIndexCap = 2000;
    break;
  }
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0550:	b508      	push	{r3, lr}
getMouvement();
 80a0552:	f7ff ff71 	bl	80a0438 <_Z12getMouvementv>
updateTimer.Update();
 80a0556:	4806      	ldr	r0, [pc, #24]	; (80a0570 <loop+0x20>)
 80a0558:	f000 f8d4 	bl	80a0704 <_ZN20SparkCorePolledTimer6UpdateEv>
//if one is too fast: keep dying

 //should this be OnTimer too?
// printMvmt();
  // The core of your code will likely live here.
analogWrite(mosfetSwitch, 255);
 80a055c:	4b05      	ldr	r3, [pc, #20]	; (80a0574 <loop+0x24>)
 80a055e:	21ff      	movs	r1, #255	; 0xff
 80a0560:	8818      	ldrh	r0, [r3, #0]
 80a0562:	f003 f9e3 	bl	80a392c <_Z11analogWritetm>
*/
setValuesAccordingToState('L');



}
 80a0566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
L: life
B: bleaching
D: dead
S: symbiosis, coming back to life
*/
setValuesAccordingToState('L');
 80a056a:	204c      	movs	r0, #76	; 0x4c
 80a056c:	f7ff bf36 	b.w	80a03dc <_Z25setValuesAccordingToStatec>
 80a0570:	200000b4 	.word	0x200000b4
 80a0574:	20000024 	.word	0x20000024

080a0578 <_Z9printMvmtv>:
    // //   pixels[pixelPointer] = 0;
    //   pixelPointer--;
    // }
    
}
void printMvmt(){
 80a0578:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Serial.print(dZ);
    // Serial.print(" av: ");
    // Serial.print(avMvmt);
    // Serial.println(" ");

        Serial.print("fluxX : ");
 80a057a:	f003 f82b 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a057e:	491b      	ldr	r1, [pc, #108]	; (80a05ec <_Z9printMvmtv+0x74>)
 80a0580:	f002 fae6 	bl	80a2b50 <_ZN5Print5printEPKc>
    Serial.println(fluxX);
 80a0584:	f003 f826 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a0588:	4b19      	ldr	r3, [pc, #100]	; (80a05f0 <_Z9printMvmtv+0x78>)
 80a058a:	4605      	mov	r5, r0
 80a058c:	6818      	ldr	r0, [r3, #0]
 80a058e:	f003 fd01 	bl	80a3f94 <__aeabi_f2d>
 80a0592:	2402      	movs	r4, #2
 80a0594:	4602      	mov	r2, r0
 80a0596:	460b      	mov	r3, r1
 80a0598:	9400      	str	r4, [sp, #0]
 80a059a:	4628      	mov	r0, r5
 80a059c:	f002 fc02 	bl	80a2da4 <_ZN5Print7printlnEdi>
    Serial.print("fluxY : ");
 80a05a0:	f003 f818 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a05a4:	4913      	ldr	r1, [pc, #76]	; (80a05f4 <_Z9printMvmtv+0x7c>)
 80a05a6:	f002 fad3 	bl	80a2b50 <_ZN5Print5printEPKc>
    Serial.println(fluxY);
 80a05aa:	f003 f813 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a05ae:	4b12      	ldr	r3, [pc, #72]	; (80a05f8 <_Z9printMvmtv+0x80>)
 80a05b0:	4605      	mov	r5, r0
 80a05b2:	6818      	ldr	r0, [r3, #0]
 80a05b4:	f003 fcee 	bl	80a3f94 <__aeabi_f2d>
 80a05b8:	9400      	str	r4, [sp, #0]
 80a05ba:	4602      	mov	r2, r0
 80a05bc:	460b      	mov	r3, r1
 80a05be:	4628      	mov	r0, r5
 80a05c0:	f002 fbf0 	bl	80a2da4 <_ZN5Print7printlnEdi>
    Serial.print("fluxZ : ");
 80a05c4:	f003 f806 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a05c8:	490c      	ldr	r1, [pc, #48]	; (80a05fc <_Z9printMvmtv+0x84>)
 80a05ca:	f002 fac1 	bl	80a2b50 <_ZN5Print5printEPKc>
    Serial.println(fluxZ);
 80a05ce:	f003 f801 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a05d2:	4b0b      	ldr	r3, [pc, #44]	; (80a0600 <_Z9printMvmtv+0x88>)
 80a05d4:	4605      	mov	r5, r0
 80a05d6:	6818      	ldr	r0, [r3, #0]
 80a05d8:	f003 fcdc 	bl	80a3f94 <__aeabi_f2d>
 80a05dc:	9400      	str	r4, [sp, #0]
 80a05de:	4602      	mov	r2, r0
 80a05e0:	460b      	mov	r3, r1
 80a05e2:	4628      	mov	r0, r5
 80a05e4:	f002 fbde 	bl	80a2da4 <_ZN5Print7printlnEdi>
}
 80a05e8:	b003      	add	sp, #12
 80a05ea:	bd30      	pop	{r4, r5, pc}
 80a05ec:	080a4d47 	.word	0x080a4d47
 80a05f0:	20000178 	.word	0x20000178
 80a05f4:	080a4d50 	.word	0x080a4d50
 80a05f8:	2000017c 	.word	0x2000017c
 80a05fc:	080a4d59 	.word	0x080a4d59
 80a0600:	20000180 	.word	0x20000180

080a0604 <_Z7OnTimerv>:
  delay(wait);
}

//-----------------------//-----------------------//-----------------------//-----------------------MOTORS

void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a0604:	b508      	push	{r3, lr}
 printMvmt();
 80a0606:	f7ff ffb7 	bl	80a0578 <_Z9printMvmtv>

     fluxX = 0;
 80a060a:	4a04      	ldr	r2, [pc, #16]	; (80a061c <_Z7OnTimerv+0x18>)
 80a060c:	2300      	movs	r3, #0
 80a060e:	6013      	str	r3, [r2, #0]
     fluxY = 0;
 80a0610:	4a03      	ldr	r2, [pc, #12]	; (80a0620 <_Z7OnTimerv+0x1c>)
 80a0612:	6013      	str	r3, [r2, #0]
     fluxZ = 0;
 80a0614:	4a03      	ldr	r2, [pc, #12]	; (80a0624 <_Z7OnTimerv+0x20>)
 80a0616:	6013      	str	r3, [r2, #0]
 80a0618:	bd08      	pop	{r3, pc}
 80a061a:	bf00      	nop
 80a061c:	20000178 	.word	0x20000178
 80a0620:	2000017c 	.word	0x2000017c
 80a0624:	20000180 	.word	0x20000180

080a0628 <_GLOBAL__sub_I_SystemMode>:
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
}
 80a0628:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a062a:	f001 feeb 	bl	80a2404 <HAL_Pin_Map>
#include "LSM9DS1_Types.h"
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"

SYSTEM_THREAD(ENABLED);
 80a062e:	2100      	movs	r1, #0
 80a0630:	2001      	movs	r0, #1
 80a0632:	f002 f879 	bl	80a2728 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0636:	4b19      	ldr	r3, [pc, #100]	; (80a069c <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0638:	2200      	movs	r2, #0
 80a063a:	701a      	strb	r2, [r3, #0]
 80a063c:	805a      	strh	r2, [r3, #2]
 80a063e:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0642:	4d17      	ldr	r5, [pc, #92]	; (80a06a0 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a0644:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0646:	2002      	movs	r0, #2
 80a0648:	f002 f866 	bl	80a2718 <set_system_mode>
 80a064c:	4c15      	ldr	r4, [pc, #84]	; (80a06a4 <_GLOBAL__sub_I_SystemMode+0x7c>)
 80a064e:	4628      	mov	r0, r5
 80a0650:	f002 f990 	bl	80a2974 <_ZN9IPAddressC1Ev>
 80a0654:	4628      	mov	r0, r5
int port;
UDP udp;
 80a0656:	4d14      	ldr	r5, [pc, #80]	; (80a06a8 <_GLOBAL__sub_I_SystemMode+0x80>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0658:	4622      	mov	r2, r4
 80a065a:	4914      	ldr	r1, [pc, #80]	; (80a06ac <_GLOBAL__sub_I_SystemMode+0x84>)
 80a065c:	f003 f9e6 	bl	80a3a2c <__aeabi_atexit>
int port;
UDP udp;
 80a0660:	4628      	mov	r0, r5
 80a0662:	f002 fe43 	bl	80a32ec <_ZN3UDPC1Ev>
 80a0666:	4622      	mov	r2, r4
 80a0668:	4911      	ldr	r1, [pc, #68]	; (80a06b0 <_GLOBAL__sub_I_SystemMode+0x88>)
 80a066a:	4628      	mov	r0, r5
#define PIXEL_PIN D2
#define PIXEL_COUNT 60
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a066c:	4d11      	ldr	r5, [pc, #68]	; (80a06b4 <_GLOBAL__sub_I_SystemMode+0x8c>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a066e:	f003 f9dd 	bl	80a3a2c <__aeabi_atexit>
#define PIXEL_PIN D2
#define PIXEL_COUNT 60
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0672:	2302      	movs	r3, #2
 80a0674:	461a      	mov	r2, r3
 80a0676:	213c      	movs	r1, #60	; 0x3c
 80a0678:	4628      	mov	r0, r5
 80a067a:	f000 fda8 	bl	80a11ce <_ZN17Adafruit_NeoPixelC1Ethh>
 80a067e:	4622      	mov	r2, r4
 80a0680:	490d      	ldr	r1, [pc, #52]	; (80a06b8 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a0682:	4628      	mov	r0, r5
 80a0684:	f003 f9d2 	bl	80a3a2c <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a0688:	480c      	ldr	r0, [pc, #48]	; (80a06bc <_GLOBAL__sub_I_SystemMode+0x94>)
 80a068a:	f000 f897 	bl	80a07bc <_ZN7LSM9DS1C1Ev>
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
}
 80a068e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a0692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0696:	480a      	ldr	r0, [pc, #40]	; (80a06c0 <_GLOBAL__sub_I_SystemMode+0x98>)
 80a0698:	f000 b81a 	b.w	80a06d0 <_ZN20SparkCorePolledTimerC1Em>
 80a069c:	20000190 	.word	0x20000190
 80a06a0:	200000d0 	.word	0x200000d0
 80a06a4:	200000a4 	.word	0x200000a4
 80a06a8:	200001a0 	.word	0x200001a0
 80a06ac:	080a00b3 	.word	0x080a00b3
 80a06b0:	080a00b5 	.word	0x080a00b5
 80a06b4:	200001ec 	.word	0x200001ec
 80a06b8:	080a1131 	.word	0x080a1131
 80a06bc:	200000e8 	.word	0x200000e8
 80a06c0:	200000b4 	.word	0x200000b4

080a06c4 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a06c4:	b510      	push	{r4, lr}
 80a06c6:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06c8:	f001 fe94 	bl	80a23f4 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a06cc:	6020      	str	r0, [r4, #0]
 80a06ce:	bd10      	pop	{r4, pc}

080a06d0 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a06d0:	b538      	push	{r3, r4, r5, lr}
 80a06d2:	4604      	mov	r4, r0
 80a06d4:	460d      	mov	r5, r1
    Reset();
 80a06d6:	f7ff fff5 	bl	80a06c4 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a06da:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a06dc:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a06de:	60a3      	str	r3, [r4, #8]
}
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	bd38      	pop	{r3, r4, r5, pc}

080a06e4 <_ZN20SparkCorePolledTimer10HasElapsedEv>:

void SparkCorePolledTimer::Reset(void){
    timeMark=millis();
}

int SparkCorePolledTimer::HasElapsed(){
 80a06e4:	b510      	push	{r4, lr}
 80a06e6:	4604      	mov	r4, r0
 80a06e8:	f001 fe84 	bl	80a23f4 <HAL_Timer_Get_Milli_Seconds>
  
    timeCurrent=millis();
    timeElapsed=timeCurrent-timeMark;  


    if(timeElapsed>=intervalMS) {
 80a06ec:	6823      	ldr	r3, [r4, #0]
 80a06ee:	1ac0      	subs	r0, r0, r3
 80a06f0:	6863      	ldr	r3, [r4, #4]
 80a06f2:	4298      	cmp	r0, r3
 80a06f4:	d304      	bcc.n	80a0700 <_ZN20SparkCorePolledTimer10HasElapsedEv+0x1c>
        Reset();
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	f7ff ffe4 	bl	80a06c4 <_ZN20SparkCorePolledTimer5ResetEv>
        result=true;
 80a06fc:	2001      	movs	r0, #1
 80a06fe:	bd10      	pop	{r4, pc}
}

int SparkCorePolledTimer::HasElapsed(){
    unsigned long timeCurrent;
    unsigned long timeElapsed;
    int result=false;
 80a0700:	2000      	movs	r0, #0
    if(timeElapsed>=intervalMS) {
        Reset();
        result=true;
    }
    return(result);  
}
 80a0702:	bd10      	pop	{r4, pc}

080a0704 <_ZN20SparkCorePolledTimer6UpdateEv>:

void SparkCorePolledTimer::Update(void){
 80a0704:	b510      	push	{r4, lr}
    if (callback!=NULL) {
 80a0706:	6883      	ldr	r3, [r0, #8]
        result=true;
    }
    return(result);  
}

void SparkCorePolledTimer::Update(void){
 80a0708:	4604      	mov	r4, r0
    if (callback!=NULL) {
 80a070a:	b133      	cbz	r3, 80a071a <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
        if(HasElapsed()) {
 80a070c:	f7ff ffea 	bl	80a06e4 <_ZN20SparkCorePolledTimer10HasElapsedEv>
 80a0710:	b118      	cbz	r0, 80a071a <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
            callback();
 80a0712:	68a3      	ldr	r3, [r4, #8]
        }
    }
}
 80a0714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SparkCorePolledTimer::Update(void){
    if (callback!=NULL) {
        if(HasElapsed()) {
            callback();
 80a0718:	4718      	bx	r3
 80a071a:	bd10      	pop	{r4, pc}

080a071c <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a071c:	6081      	str	r1, [r0, #8]
 80a071e:	4770      	bx	lr

080a0720 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0720:	f001 be70 	b.w	80a2404 <HAL_Pin_Map>

080a0724 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0724:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0726:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a0728:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a072a:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a072c:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a072e:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0730:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0732:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0734:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0736:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0738:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a073a:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a073c:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a073e:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0740:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0744:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0746:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0748:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a074a:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a074c:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a074e:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0750:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0752:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0754:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0756:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0758:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a075a:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a075c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0760:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0762:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0764:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0766:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0768:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a076a:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a076c:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a076e:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0770:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0772:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0774:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0776:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a077a:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a077c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0780:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0784:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a0786:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a078a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a078e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0792:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0794:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a0796:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0798:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a079a:	6565      	str	r5, [r4, #84]	; 0x54
 80a079c:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a07a0:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a07a4:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a07a8:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a07ac:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a07b0:	d1f0      	bne.n	80a0794 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a07b2:	f04f 0300 	mov.w	r3, #0
 80a07b6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a07ba:	bd30      	pop	{r4, r5, pc}

080a07bc <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a07bc:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a07be:	231e      	movs	r3, #30
 80a07c0:	226b      	movs	r2, #107	; 0x6b
 80a07c2:	2101      	movs	r1, #1
 80a07c4:	f7ff ffae 	bl	80a0724 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a07c8:	bd10      	pop	{r4, pc}

080a07ca <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a07ca:	b510      	push	{r4, lr}
 80a07cc:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a07ce:	4608      	mov	r0, r1
 80a07d0:	f003 ffe6 	bl	80a47a0 <__aeabi_i2f>
 80a07d4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a07d6:	f004 f837 	bl	80a4848 <__aeabi_fmul>
}
 80a07da:	bd10      	pop	{r4, pc}

080a07dc <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a07dc:	b510      	push	{r4, lr}
 80a07de:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a07e0:	88c0      	ldrh	r0, [r0, #6]
 80a07e2:	f003 ffd9 	bl	80a4798 <__aeabi_ui2f>
 80a07e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a07ea:	f004 f82d 	bl	80a4848 <__aeabi_fmul>
 80a07ee:	6760      	str	r0, [r4, #116]	; 0x74
 80a07f0:	bd10      	pop	{r4, pc}

080a07f2 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a07f2:	b510      	push	{r4, lr}
 80a07f4:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a07f6:	7dc0      	ldrb	r0, [r0, #23]
 80a07f8:	f003 ffce 	bl	80a4798 <__aeabi_ui2f>
 80a07fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0800:	f004 f822 	bl	80a4848 <__aeabi_fmul>
 80a0804:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0806:	bd10      	pop	{r4, pc}

080a0808 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0808:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a080c:	3b04      	subs	r3, #4
 80a080e:	2b0c      	cmp	r3, #12
 80a0810:	d814      	bhi.n	80a083c <_ZN7LSM9DS18calcmResEv+0x34>
 80a0812:	e8df f003 	tbb	[pc, r3]
 80a0816:	1307      	.short	0x1307
 80a0818:	130a1313 	.word	0x130a1313
 80a081c:	130d1313 	.word	0x130d1313
 80a0820:	1313      	.short	0x1313
 80a0822:	10          	.byte	0x10
 80a0823:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0824:	4b06      	ldr	r3, [pc, #24]	; (80a0840 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0826:	681b      	ldr	r3, [r3, #0]
 80a0828:	e007      	b.n	80a083a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a082a:	4b05      	ldr	r3, [pc, #20]	; (80a0840 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a082c:	685b      	ldr	r3, [r3, #4]
 80a082e:	e004      	b.n	80a083a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0830:	4b03      	ldr	r3, [pc, #12]	; (80a0840 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0832:	689b      	ldr	r3, [r3, #8]
 80a0834:	e001      	b.n	80a083a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0836:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0838:	68db      	ldr	r3, [r3, #12]
 80a083a:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a083c:	4770      	bx	lr
 80a083e:	bf00      	nop
 80a0840:	2000002c 	.word	0x2000002c

080a0844 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0844:	88c3      	ldrh	r3, [r0, #6]
 80a0846:	2bf5      	cmp	r3, #245	; 0xf5
 80a0848:	d007      	beq.n	80a085a <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a084a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a084e:	d004      	beq.n	80a085a <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0850:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0854:	bf1c      	itt	ne
 80a0856:	23f5      	movne	r3, #245	; 0xf5
 80a0858:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a085a:	7dc2      	ldrb	r2, [r0, #23]
 80a085c:	2a10      	cmp	r2, #16
 80a085e:	d803      	bhi.n	80a0868 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0860:	4b08      	ldr	r3, [pc, #32]	; (80a0884 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0862:	40d3      	lsrs	r3, r2
 80a0864:	07da      	lsls	r2, r3, #31
 80a0866:	d401      	bmi.n	80a086c <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0868:	2302      	movs	r3, #2
 80a086a:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a086c:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0870:	2a10      	cmp	r2, #16
 80a0872:	d803      	bhi.n	80a087c <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0874:	4b04      	ldr	r3, [pc, #16]	; (80a0888 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0876:	40d3      	lsrs	r3, r2
 80a0878:	07db      	lsls	r3, r3, #31
 80a087a:	d402      	bmi.n	80a0882 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a087c:	2304      	movs	r3, #4
 80a087e:	f880 3020 	strb.w	r3, [r0, #32]
 80a0882:	4770      	bx	lr
 80a0884:	00010114 	.word	0x00010114
 80a0888:	00011110 	.word	0x00011110

080a088c <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a088c:	b510      	push	{r4, lr}
 80a088e:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0890:	2101      	movs	r1, #1
 80a0892:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a0896:	f003 f81f 	bl	80a38d8 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a089a:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a089e:	2101      	movs	r1, #1
 80a08a0:	f003 f82b 	bl	80a38fa <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a08a4:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a08a8:	2101      	movs	r1, #1
 80a08aa:	f003 f815 	bl	80a38d8 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a08ae:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a08b2:	4c0a      	ldr	r4, [pc, #40]	; (80a08dc <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a08b4:	2101      	movs	r1, #1
 80a08b6:	f003 f820 	bl	80a38fa <digitalWrite>
	
	SPI.begin();
 80a08ba:	4620      	mov	r0, r4
 80a08bc:	f002 fab0 	bl	80a2e20 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a08c0:	4620      	mov	r0, r4
 80a08c2:	2108      	movs	r1, #8
 80a08c4:	f002 fafe 	bl	80a2ec4 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a08c8:	4620      	mov	r0, r4
 80a08ca:	2101      	movs	r1, #1
 80a08cc:	f002 faad 	bl	80a2e2a <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a08d0:	4620      	mov	r0, r4
}
 80a08d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a08d6:	2100      	movs	r1, #0
 80a08d8:	f002 baaa 	b.w	80a2e30 <_ZN8SPIClass11setDataModeEh>
 80a08dc:	200006cc 	.word	0x200006cc

080a08e0 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a08e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a08e2:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a08e4:	4617      	mov	r7, r2
 80a08e6:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a08e8:	4d09      	ldr	r5, [pc, #36]	; (80a0910 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a08ea:	4620      	mov	r0, r4
 80a08ec:	2100      	movs	r1, #0
 80a08ee:	f003 f804 	bl	80a38fa <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a08f2:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a08f6:	4628      	mov	r0, r5
 80a08f8:	f002 faf8 	bl	80a2eec <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a08fc:	4631      	mov	r1, r6
 80a08fe:	4628      	mov	r0, r5
 80a0900:	f002 faf4 	bl	80a2eec <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0904:	4620      	mov	r0, r4
}
 80a0906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a090a:	2101      	movs	r1, #1
 80a090c:	f002 bff5 	b.w	80a38fa <digitalWrite>
 80a0910:	200006cc 	.word	0x200006cc

080a0914 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0916:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0918:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a091c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0920:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0922:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0926:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a092a:	d103      	bne.n	80a0934 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a092c:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a092e:	bf88      	it	hi
 80a0930:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0934:	b28c      	uxth	r4, r1
 80a0936:	4620      	mov	r0, r4
 80a0938:	2100      	movs	r1, #0
 80a093a:	f002 ffde 	bl	80a38fa <digitalWrite>
	SPI.transfer(rAddress);
 80a093e:	4629      	mov	r1, r5
 80a0940:	4809      	ldr	r0, [pc, #36]	; (80a0968 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0942:	f002 fad3 	bl	80a2eec <_ZN8SPIClass8transferEh>
 80a0946:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0948:	1bab      	subs	r3, r5, r6
 80a094a:	429f      	cmp	r7, r3
 80a094c:	dd06      	ble.n	80a095c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a094e:	2100      	movs	r1, #0
 80a0950:	4805      	ldr	r0, [pc, #20]	; (80a0968 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0952:	f002 facb 	bl	80a2eec <_ZN8SPIClass8transferEh>
 80a0956:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a095a:	e7f5      	b.n	80a0948 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a095c:	4620      	mov	r0, r4
 80a095e:	2101      	movs	r1, #1
 80a0960:	f002 ffcb 	bl	80a38fa <digitalWrite>
	
	return 1;
}
 80a0964:	2001      	movs	r0, #1
 80a0966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0968:	200006cc 	.word	0x200006cc

080a096c <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a096c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a096e:	2301      	movs	r3, #1
 80a0970:	9300      	str	r3, [sp, #0]
 80a0972:	f10d 030f 	add.w	r3, sp, #15
 80a0976:	f7ff ffcd 	bl	80a0914 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a097a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a097e:	b005      	add	sp, #20
 80a0980:	f85d fb04 	ldr.w	pc, [sp], #4

080a0984 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0984:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a0986:	f002 fff7 	bl	80a3978 <_Z19__fetch_global_Wirev>
}
 80a098a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a098e:	f001 bfb7 	b.w	80a2900 <_ZN7TwoWire5beginEv>

080a0992 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0992:	b570      	push	{r4, r5, r6, lr}
 80a0994:	460e      	mov	r6, r1
 80a0996:	4615      	mov	r5, r2
 80a0998:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a099a:	f002 ffed 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a099e:	4631      	mov	r1, r6
 80a09a0:	f001 ffc0 	bl	80a2924 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a09a4:	f002 ffe8 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a09a8:	6803      	ldr	r3, [r0, #0]
 80a09aa:	4629      	mov	r1, r5
 80a09ac:	689b      	ldr	r3, [r3, #8]
 80a09ae:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a09b0:	f002 ffe2 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a09b4:	6803      	ldr	r3, [r0, #0]
 80a09b6:	4621      	mov	r1, r4
 80a09b8:	689a      	ldr	r2, [r3, #8]
 80a09ba:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a09bc:	f002 ffdc 	bl	80a3978 <_Z19__fetch_global_Wirev>
}
 80a09c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a09c4:	f001 bfb6 	b.w	80a2934 <_ZN7TwoWire15endTransmissionEv>

080a09c8 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a09c8:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a09ca:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a09cc:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a09ce:	2a01      	cmp	r2, #1
 80a09d0:	d105      	bne.n	80a09de <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a09d2:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a09d4:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a09d6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a09da:	f7ff bfda 	b.w	80a0992 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a09de:	b92a      	cbnz	r2, 80a09ec <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a09e0:	460a      	mov	r2, r1
}
 80a09e2:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a09e4:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a09e8:	f7ff bf7a 	b.w	80a08e0 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a09ec:	bc10      	pop	{r4}
 80a09ee:	4770      	bx	lr

080a09f0 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a09f0:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a09f2:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a09f4:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a09f6:	b113      	cbz	r3, 80a09fe <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a09f8:	7a03      	ldrb	r3, [r0, #8]
 80a09fa:	015b      	lsls	r3, r3, #5
 80a09fc:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a09fe:	88e2      	ldrh	r2, [r4, #6]
 80a0a00:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0a04:	d005      	beq.n	80a0a12 <_ZN7LSM9DS18initGyroEv+0x22>
 80a0a06:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0a0a:	d104      	bne.n	80a0a16 <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0a0c:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0a10:	e001      	b.n	80a0a16 <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0a12:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0a16:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0a18:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0a1a:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0a1e:	431a      	orrs	r2, r3
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	f7ff ffd1 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0a26:	2200      	movs	r2, #0
 80a0a28:	2111      	movs	r1, #17
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	f7ff ffcc 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0a30:	7aa3      	ldrb	r3, [r4, #10]
 80a0a32:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0a34:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0a36:	bf14      	ite	ne
 80a0a38:	2280      	movne	r2, #128	; 0x80
 80a0a3a:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0a3c:	b12b      	cbz	r3, 80a0a4a <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0a3e:	7b23      	ldrb	r3, [r4, #12]
 80a0a40:	f003 030f 	and.w	r3, r3, #15
 80a0a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0a48:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a0a4a:	2112      	movs	r1, #18
 80a0a4c:	4620      	mov	r0, r4
 80a0a4e:	f7ff ffbb 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0a52:	7ce3      	ldrb	r3, [r4, #19]
 80a0a54:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0a56:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0a58:	bf0c      	ite	eq
 80a0a5a:	2200      	moveq	r2, #0
 80a0a5c:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0a5e:	b113      	cbz	r3, 80a0a66 <_ZN7LSM9DS18initGyroEv+0x76>
 80a0a60:	f042 0210 	orr.w	r2, r2, #16
 80a0a64:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0a66:	7c63      	ldrb	r3, [r4, #17]
 80a0a68:	b10b      	cbz	r3, 80a0a6e <_ZN7LSM9DS18initGyroEv+0x7e>
 80a0a6a:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0a6e:	7d23      	ldrb	r3, [r4, #20]
 80a0a70:	b10b      	cbz	r3, 80a0a76 <_ZN7LSM9DS18initGyroEv+0x86>
 80a0a72:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0a76:	211e      	movs	r1, #30
 80a0a78:	4620      	mov	r0, r4
 80a0a7a:	f7ff ffa5 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0a7e:	7b63      	ldrb	r3, [r4, #13]
 80a0a80:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0a82:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0a84:	bf0c      	ite	eq
 80a0a86:	2200      	moveq	r2, #0
 80a0a88:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0a8a:	b113      	cbz	r3, 80a0a92 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0a8c:	f042 0210 	orr.w	r2, r2, #16
 80a0a90:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0a92:	7be3      	ldrb	r3, [r4, #15]
 80a0a94:	b10b      	cbz	r3, 80a0a9a <_ZN7LSM9DS18initGyroEv+0xaa>
 80a0a96:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0a9a:	4620      	mov	r0, r4
}
 80a0a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0aa0:	2113      	movs	r1, #19
 80a0aa2:	f7ff bf91 	b.w	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>

080a0aa6 <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a0aa6:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0aa8:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0aaa:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0aac:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0aae:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0ab0:	bf0c      	ite	eq
 80a0ab2:	2200      	moveq	r2, #0
 80a0ab4:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0ab6:	b113      	cbz	r3, 80a0abe <_ZN7LSM9DS19initAccelEv+0x18>
 80a0ab8:	f042 0210 	orr.w	r2, r2, #16
 80a0abc:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0abe:	7e63      	ldrb	r3, [r4, #25]
 80a0ac0:	b10b      	cbz	r3, 80a0ac6 <_ZN7LSM9DS19initAccelEv+0x20>
 80a0ac2:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a0ac6:	211f      	movs	r1, #31
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	f7ff ff7d 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0ace:	7da2      	ldrb	r2, [r4, #22]
 80a0ad0:	b112      	cbz	r2, 80a0ad8 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0ad2:	7e22      	ldrb	r2, [r4, #24]
 80a0ad4:	0152      	lsls	r2, r2, #5
 80a0ad6:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0ad8:	7de3      	ldrb	r3, [r4, #23]
 80a0ada:	2b08      	cmp	r3, #8
 80a0adc:	d006      	beq.n	80a0aec <_ZN7LSM9DS19initAccelEv+0x46>
 80a0ade:	2b10      	cmp	r3, #16
 80a0ae0:	d007      	beq.n	80a0af2 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0ae2:	2b04      	cmp	r3, #4
 80a0ae4:	d107      	bne.n	80a0af6 <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0ae6:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0aea:	e004      	b.n	80a0af6 <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0aec:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0af0:	e001      	b.n	80a0af6 <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0af2:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0af6:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0afa:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0afc:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0afe:	bfa2      	ittt	ge
 80a0b00:	f003 0303 	andge.w	r3, r3, #3
 80a0b04:	431a      	orrge	r2, r3
 80a0b06:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0b0a:	4620      	mov	r0, r4
 80a0b0c:	f7ff ff5c 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0b10:	7f62      	ldrb	r2, [r4, #29]
 80a0b12:	b12a      	cbz	r2, 80a0b20 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0b14:	7fa2      	ldrb	r2, [r4, #30]
 80a0b16:	0152      	lsls	r2, r2, #5
 80a0b18:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0b20:	4620      	mov	r0, r4
}
 80a0b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0b26:	2121      	movs	r1, #33	; 0x21
 80a0b28:	f7ff bf4e 	b.w	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>

080a0b2c <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0b2c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0b2e:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0b30:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0b32:	2a01      	cmp	r2, #1
 80a0b34:	d105      	bne.n	80a0b42 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0b36:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0b38:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0b3a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0b3e:	f7ff bf28 	b.w	80a0992 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0b42:	b92a      	cbnz	r2, 80a0b50 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0b44:	460a      	mov	r2, r1
}
 80a0b46:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0b48:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0b4c:	f7ff bec8 	b.w	80a08e0 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0b50:	bc10      	pop	{r4}
 80a0b52:	4770      	bx	lr

080a0b54 <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0b54:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0b56:	b570      	push	{r4, r5, r6, lr}
 80a0b58:	4606      	mov	r6, r0
 80a0b5a:	460c      	mov	r4, r1
 80a0b5c:	4615      	mov	r5, r2
	if (axis > 2)
 80a0b5e:	d810      	bhi.n	80a0b82 <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0b60:	0049      	lsls	r1, r1, #1
 80a0b62:	3105      	adds	r1, #5
 80a0b64:	b2d2      	uxtb	r2, r2
 80a0b66:	b2c9      	uxtb	r1, r1
 80a0b68:	f7ff ffe0 	bl	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0b6c:	1ce1      	adds	r1, r4, #3
 80a0b6e:	0049      	lsls	r1, r1, #1
 80a0b70:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0b74:	4630      	mov	r0, r6
}
 80a0b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0b7a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0b7e:	f7ff bfd5 	b.w	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
 80a0b82:	bd70      	pop	{r4, r5, r6, pc}

080a0b84 <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a0b84:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0b86:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0b8a:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0b8c:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0b8e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0b92:	bf08      	it	eq
 80a0b94:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0b96:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a0b9a:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0b9e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0ba2:	bf18      	it	ne
 80a0ba4:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0ba6:	009b      	lsls	r3, r3, #2
 80a0ba8:	f003 031c 	and.w	r3, r3, #28
 80a0bac:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0bae:	431a      	orrs	r2, r3
 80a0bb0:	2120      	movs	r1, #32
 80a0bb2:	f7ff ffbb 	bl	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
 80a0bb6:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	3b08      	subs	r3, #8
 80a0bbe:	b2db      	uxtb	r3, r3
 80a0bc0:	2b08      	cmp	r3, #8
 80a0bc2:	bf96      	itet	ls
 80a0bc4:	4a12      	ldrls	r2, [pc, #72]	; (80a0c10 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a0bc6:	2200      	movhi	r2, #0
 80a0bc8:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0bca:	2121      	movs	r1, #33	; 0x21
 80a0bcc:	f7ff ffae 	bl	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0bd0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0bd4:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0bd6:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0bd8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0bdc:	bf0c      	ite	eq
 80a0bde:	2200      	moveq	r2, #0
 80a0be0:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0be2:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0be6:	431a      	orrs	r2, r3
 80a0be8:	2122      	movs	r1, #34	; 0x22
 80a0bea:	f7ff ff9f 	bl	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0bee:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	0092      	lsls	r2, r2, #2
 80a0bf6:	f002 020c 	and.w	r2, r2, #12
 80a0bfa:	2123      	movs	r1, #35	; 0x23
 80a0bfc:	f7ff ff96 	bl	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0c00:	4620      	mov	r0, r4
}
 80a0c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0c06:	2200      	movs	r2, #0
 80a0c08:	2124      	movs	r1, #36	; 0x24
 80a0c0a:	f7ff bf8f 	b.w	80a0b2c <_ZN7LSM9DS110mWriteByteEhh>
 80a0c0e:	bf00      	nop
 80a0c10:	080a4d62 	.word	0x080a4d62

080a0c14 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0c14:	b538      	push	{r3, r4, r5, lr}
 80a0c16:	460c      	mov	r4, r1
 80a0c18:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0c1a:	f002 fead 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0c1e:	4621      	mov	r1, r4
 80a0c20:	f001 fe80 	bl	80a2924 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0c24:	f002 fea8 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0c28:	6803      	ldr	r3, [r0, #0]
 80a0c2a:	4629      	mov	r1, r5
 80a0c2c:	689b      	ldr	r3, [r3, #8]
 80a0c2e:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0c30:	f002 fea2 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0c34:	2100      	movs	r1, #0
 80a0c36:	f001 fe79 	bl	80a292c <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0c3a:	f002 fe9d 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0c3e:	2201      	movs	r2, #1
 80a0c40:	4621      	mov	r1, r4
 80a0c42:	f001 fe6c 	bl	80a291e <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0c46:	f002 fe97 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0c4a:	6803      	ldr	r3, [r0, #0]
 80a0c4c:	695b      	ldr	r3, [r3, #20]
 80a0c4e:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0c50:	b2c0      	uxtb	r0, r0
 80a0c52:	bd38      	pop	{r3, r4, r5, pc}

080a0c54 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0c54:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0c56:	7801      	ldrb	r1, [r0, #0]
 80a0c58:	2901      	cmp	r1, #1
 80a0c5a:	d103      	bne.n	80a0c64 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0c5c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0c60:	f7ff bfd8 	b.w	80a0c14 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0c64:	b919      	cbnz	r1, 80a0c6e <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0c66:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0c6a:	f7ff be7f 	b.w	80a096c <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0c6e:	2000      	movs	r0, #0
 80a0c70:	4770      	bx	lr

080a0c72 <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a0c72:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a0c74:	2127      	movs	r1, #39	; 0x27
 80a0c76:	f7ff ffed 	bl	80a0c54 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a0c7a:	f000 0001 	and.w	r0, r0, #1
 80a0c7e:	bd08      	pop	{r3, pc}

080a0c80 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0c80:	b538      	push	{r3, r4, r5, lr}
 80a0c82:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0c84:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0c86:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0c88:	f7ff ffe4 	bl	80a0c54 <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a0c8c:	b11d      	cbz	r5, 80a0c96 <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a0c8e:	f040 0202 	orr.w	r2, r0, #2
 80a0c92:	b2d2      	uxtb	r2, r2
 80a0c94:	e001      	b.n	80a0c9a <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a0c96:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a0c9a:	4620      	mov	r0, r4
}
 80a0c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a0ca0:	2123      	movs	r1, #35	; 0x23
 80a0ca2:	f7ff be91 	b.w	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>

080a0ca6 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a0ca6:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0ca8:	7801      	ldrb	r1, [r0, #0]
 80a0caa:	2901      	cmp	r1, #1
 80a0cac:	d103      	bne.n	80a0cb6 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0cae:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0cb2:	f7ff bfaf 	b.w	80a0c14 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0cb6:	b919      	cbnz	r1, 80a0cc0 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a0cb8:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0cbc:	f7ff be56 	b.w	80a096c <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0cc0:	4770      	bx	lr

080a0cc2 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0cc2:	b538      	push	{r3, r4, r5, lr}
 80a0cc4:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a0cc6:	7843      	ldrb	r3, [r0, #1]
 80a0cc8:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0ccc:	7883      	ldrb	r3, [r0, #2]
 80a0cce:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0cd2:	f7ff fdb7 	bl	80a0844 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a0cd6:	f7ff fd81 	bl	80a07dc <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	f7ff fd94 	bl	80a0808 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0ce0:	4620      	mov	r0, r4
 80a0ce2:	f7ff fd86 	bl	80a07f2 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0ce6:	7823      	ldrb	r3, [r4, #0]
 80a0ce8:	2b01      	cmp	r3, #1
 80a0cea:	d103      	bne.n	80a0cf4 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0cec:	4620      	mov	r0, r4
 80a0cee:	f7ff fe49 	bl	80a0984 <_ZN7LSM9DS17initI2CEv>
 80a0cf2:	e003      	b.n	80a0cfc <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0cf4:	b913      	cbnz	r3, 80a0cfc <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	f7ff fdc8 	bl	80a088c <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0cfc:	210f      	movs	r1, #15
 80a0cfe:	4620      	mov	r0, r4
 80a0d00:	f7ff ffd1 	bl	80a0ca6 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0d04:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0d06:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	f7ff ffa3 	bl	80a0c54 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0d0e:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0d12:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0d16:	b205      	sxth	r5, r0
 80a0d18:	429d      	cmp	r5, r3
 80a0d1a:	d10a      	bne.n	80a0d32 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0d1c:	4620      	mov	r0, r4
 80a0d1e:	f7ff fe67 	bl	80a09f0 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0d22:	4620      	mov	r0, r4
 80a0d24:	f7ff febf 	bl	80a0aa6 <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0d28:	4620      	mov	r0, r4
 80a0d2a:	f7ff ff2b 	bl	80a0b84 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0d2e:	4628      	mov	r0, r5
 80a0d30:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0d32:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0d34:	bd38      	pop	{r3, r4, r5, pc}

080a0d36 <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a0d36:	b510      	push	{r4, lr}
 80a0d38:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a0d3a:	2127      	movs	r1, #39	; 0x27
 80a0d3c:	f7ff ffb3 	bl	80a0ca6 <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a0d40:	2101      	movs	r1, #1
 80a0d42:	40a1      	lsls	r1, r4
 80a0d44:	4008      	ands	r0, r1
 80a0d46:	4120      	asrs	r0, r4
}
 80a0d48:	b2c0      	uxtb	r0, r0
 80a0d4a:	bd10      	pop	{r4, pc}

080a0d4c <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a0d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0d50:	4690      	mov	r8, r2
 80a0d52:	460c      	mov	r4, r1
 80a0d54:	461d      	mov	r5, r3
 80a0d56:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a0d5a:	f001 fb4b 	bl	80a23f4 <HAL_Timer_Get_Milli_Seconds>
 80a0d5e:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a0d60:	f002 fe0a 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0d64:	4621      	mov	r1, r4
 80a0d66:	f001 fddd 	bl	80a2924 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0d6a:	f002 fe05 	bl	80a3978 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0d6e:	6803      	ldr	r3, [r0, #0]
 80a0d70:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a0d74:	689b      	ldr	r3, [r3, #8]
 80a0d76:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0d78:	f002 fdfe 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0d7c:	2100      	movs	r1, #0
 80a0d7e:	f001 fdd5 	bl	80a292c <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0d82:	f002 fdf9 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0d86:	4621      	mov	r1, r4
 80a0d88:	4632      	mov	r2, r6
 80a0d8a:	f001 fdc8 	bl	80a291e <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0d8e:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0d90:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a0d94:	42b4      	cmp	r4, r6
 80a0d96:	da1a      	bge.n	80a0dce <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a0d98:	f002 fdee 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0d9c:	6803      	ldr	r3, [r0, #0]
 80a0d9e:	691b      	ldr	r3, [r3, #16]
 80a0da0:	4798      	blx	r3
 80a0da2:	b140      	cbz	r0, 80a0db6 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a0da4:	f002 fde8 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a0da8:	6803      	ldr	r3, [r0, #0]
 80a0daa:	f104 0801 	add.w	r8, r4, #1
 80a0dae:	695b      	ldr	r3, [r3, #20]
 80a0db0:	4798      	blx	r3
 80a0db2:	5528      	strb	r0, [r5, r4]
 80a0db4:	4644      	mov	r4, r8
 80a0db6:	f001 fb1d 	bl	80a23f4 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0dba:	42b8      	cmp	r0, r7
 80a0dbc:	d9ea      	bls.n	80a0d94 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a0dbe:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a0dc0:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0dc2:	1b62      	subs	r2, r4, r5
 80a0dc4:	4296      	cmp	r6, r2
 80a0dc6:	dd05      	ble.n	80a0dd4 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a0dc8:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0dcc:	e7f9      	b.n	80a0dc2 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a0dce:	2001      	movs	r0, #1
 80a0dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a0dd4:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a0dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0dda <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0ddc:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0dde:	7801      	ldrb	r1, [r0, #0]
 80a0de0:	2901      	cmp	r1, #1
 80a0de2:	d107      	bne.n	80a0df4 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a0de4:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0de8:	9300      	str	r3, [sp, #0]
 80a0dea:	4613      	mov	r3, r2
 80a0dec:	462a      	mov	r2, r5
 80a0dee:	f7ff ffad 	bl	80a0d4c <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0df2:	e007      	b.n	80a0e04 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0df4:	b931      	cbnz	r1, 80a0e04 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0df6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0dfa:	9300      	str	r3, [sp, #0]
 80a0dfc:	4613      	mov	r3, r2
 80a0dfe:	462a      	mov	r2, r5
 80a0e00:	f7ff fd88 	bl	80a0914 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0e04:	b003      	add	sp, #12
 80a0e06:	bd30      	pop	{r4, r5, pc}

080a0e08 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0e0a:	2306      	movs	r3, #6
 80a0e0c:	466a      	mov	r2, sp
 80a0e0e:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0e10:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0e12:	f7ff ffe2 	bl	80a0dda <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0e16:	b330      	cbz	r0, 80a0e66 <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0e18:	f89d 3000 	ldrb.w	r3, [sp]
 80a0e1c:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0e20:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0e24:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0e28:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0e2c:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0e30:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0e34:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0e38:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0e3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0e3e:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0e42:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0e44:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0e46:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0e48:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0e4a:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0e4c:	b15d      	cbz	r5, 80a0e66 <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0e4e:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a0e52:	1b49      	subs	r1, r1, r5
 80a0e54:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0e56:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0e5a:	1a52      	subs	r2, r2, r1
 80a0e5c:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0e5e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a0e62:	1a9b      	subs	r3, r3, r2
 80a0e64:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0e66:	b003      	add	sp, #12
 80a0e68:	bd30      	pop	{r4, r5, pc}

080a0e6a <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0e6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0e6c:	2306      	movs	r3, #6
 80a0e6e:	466a      	mov	r2, sp
 80a0e70:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0e72:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0e74:	f7ff ffb1 	bl	80a0dda <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0e78:	b330      	cbz	r0, 80a0ec8 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0e7a:	f89d 3000 	ldrb.w	r3, [sp]
 80a0e7e:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0e82:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0e86:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0e8a:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0e8e:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0e92:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0e96:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0e9a:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0e9c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0ea0:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0ea4:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0ea6:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0ea8:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0eaa:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0eac:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a0eae:	b15d      	cbz	r5, 80a0ec8 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a0eb0:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a0eb4:	1b49      	subs	r1, r1, r5
 80a0eb6:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a0eb8:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a0ebc:	1a52      	subs	r2, r2, r1
 80a0ebe:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a0ec0:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a0ec4:	1a9b      	subs	r3, r3, r2
 80a0ec6:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a0ec8:	b003      	add	sp, #12
 80a0eca:	bd30      	pop	{r4, r5, pc}

080a0ecc <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ed0:	4604      	mov	r4, r0
 80a0ed2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0ed4:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0ed6:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0ed8:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0eda:	9304      	str	r3, [sp, #16]
 80a0edc:	9305      	str	r3, [sp, #20]
 80a0ede:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a0ee0:	9307      	str	r3, [sp, #28]
 80a0ee2:	9308      	str	r3, [sp, #32]
 80a0ee4:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0ee6:	f7ff fecb 	bl	80a0c80 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0eea:	223f      	movs	r2, #63	; 0x3f
 80a0eec:	212e      	movs	r1, #46	; 0x2e
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	f7ff fd6a 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a0ef4:	212f      	movs	r1, #47	; 0x2f
 80a0ef6:	4620      	mov	r0, r4
 80a0ef8:	f7ff feac 	bl	80a0c54 <_ZN7LSM9DS110xgReadByteEh>
 80a0efc:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a0f00:	2e1e      	cmp	r6, #30
 80a0f02:	d9f7      	bls.n	80a0ef4 <_ZN7LSM9DS19calibrateEb+0x28>
 80a0f04:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0f06:	42b7      	cmp	r7, r6
 80a0f08:	da32      	bge.n	80a0f70 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a0f0a:	4620      	mov	r0, r4
 80a0f0c:	f7ff ffad 	bl	80a0e6a <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a0f10:	9a07      	ldr	r2, [sp, #28]
 80a0f12:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a0f16:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a0f18:	4413      	add	r3, r2
 80a0f1a:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a0f1c:	9a08      	ldr	r2, [sp, #32]
 80a0f1e:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0f22:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a0f24:	4413      	add	r3, r2
 80a0f26:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a0f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0f2a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a0f2e:	4413      	add	r3, r2
 80a0f30:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a0f32:	f7ff ff69 	bl	80a0e08 <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a0f36:	9a04      	ldr	r2, [sp, #16]
 80a0f38:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0f3c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a0f3e:	4413      	add	r3, r2
 80a0f40:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a0f42:	9a05      	ldr	r2, [sp, #20]
 80a0f44:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0f48:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a0f4c:	4413      	add	r3, r2
 80a0f4e:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0f50:	f003 f820 	bl	80a3f94 <__aeabi_f2d>
 80a0f54:	4602      	mov	r2, r0
 80a0f56:	460b      	mov	r3, r1
 80a0f58:	2000      	movs	r0, #0
 80a0f5a:	4926      	ldr	r1, [pc, #152]	; (80a0ff4 <_ZN7LSM9DS19calibrateEb+0x128>)
 80a0f5c:	f003 f998 	bl	80a4290 <__aeabi_ddiv>
 80a0f60:	f003 fb1c 	bl	80a459c <__aeabi_d2iz>
 80a0f64:	b200      	sxth	r0, r0
 80a0f66:	1a2d      	subs	r5, r5, r0
 80a0f68:	9806      	ldr	r0, [sp, #24]
 80a0f6a:	4405      	add	r5, r0
 80a0f6c:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0f6e:	e7ca      	b.n	80a0f06 <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a0f70:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0f74:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a0f78:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a0f7c:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a0f80:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a0f84:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a0f88:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a0f8a:	a907      	add	r1, sp, #28
 80a0f8c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a0f90:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0f94:	b200      	sxth	r0, r0
 80a0f96:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a0f9a:	9202      	str	r2, [sp, #8]
 80a0f9c:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0f9e:	f003 fbff 	bl	80a47a0 <__aeabi_i2f>
 80a0fa2:	4659      	mov	r1, fp
 80a0fa4:	f003 fc50 	bl	80a4848 <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0fa8:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0faa:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0fb2:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0fb4:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0fb8:	b200      	sxth	r0, r0
 80a0fba:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0fbe:	f003 fbef 	bl	80a47a0 <__aeabi_i2f>
 80a0fc2:	4651      	mov	r1, sl
 80a0fc4:	f003 fc40 	bl	80a4848 <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0fc8:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0fca:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0fce:	9a02      	ldr	r2, [sp, #8]
 80a0fd0:	d1db      	bne.n	80a0f8a <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a0fd2:	2100      	movs	r1, #0
 80a0fd4:	4620      	mov	r0, r4
 80a0fd6:	f7ff fe53 	bl	80a0c80 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0fda:	2200      	movs	r2, #0
 80a0fdc:	212e      	movs	r1, #46	; 0x2e
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	f7ff fcf2 	bl	80a09c8 <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a0fe4:	9b01      	ldr	r3, [sp, #4]
 80a0fe6:	b113      	cbz	r3, 80a0fee <_ZN7LSM9DS19calibrateEb+0x122>
 80a0fe8:	2301      	movs	r3, #1
 80a0fea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a0fee:	b00b      	add	sp, #44	; 0x2c
 80a0ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0ff4:	3ff00000 	.word	0x3ff00000

080a0ff8 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0ffa:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0ffc:	7801      	ldrb	r1, [r0, #0]
 80a0ffe:	2901      	cmp	r1, #1
 80a1000:	d107      	bne.n	80a1012 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a1002:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1006:	9300      	str	r3, [sp, #0]
 80a1008:	4613      	mov	r3, r2
 80a100a:	462a      	mov	r2, r5
 80a100c:	f7ff fe9e 	bl	80a0d4c <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a1010:	e007      	b.n	80a1022 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1012:	b931      	cbnz	r1, 80a1022 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a1014:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1018:	9300      	str	r3, [sp, #0]
 80a101a:	4613      	mov	r3, r2
 80a101c:	462a      	mov	r2, r5
 80a101e:	f7ff fc79 	bl	80a0914 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a1022:	b003      	add	sp, #12
 80a1024:	bd30      	pop	{r4, r5, pc}

080a1026 <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a1026:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a1028:	2306      	movs	r3, #6
 80a102a:	466a      	mov	r2, sp
 80a102c:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a102e:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a1030:	f7ff ffe2 	bl	80a0ff8 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a1034:	b1a0      	cbz	r0, 80a1060 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a1036:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a103a:	f89d 3000 	ldrb.w	r3, [sp]
 80a103e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1042:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a1044:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a1048:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a104c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1050:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a1052:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1056:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a105a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a105e:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a1060:	b002      	add	sp, #8
 80a1062:	bd10      	pop	{r4, pc}

080a1064 <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a1064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1068:	4605      	mov	r5, r0
 80a106a:	468a      	mov	sl, r1
 80a106c:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a106e:	2300      	movs	r3, #0
 80a1070:	f8ad 3000 	strh.w	r3, [sp]
 80a1074:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a1078:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a107c:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a1080:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a1084:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1088:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a108a:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a108c:	2103      	movs	r1, #3
 80a108e:	4628      	mov	r0, r5
 80a1090:	f7ff fe51 	bl	80a0d36 <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a1094:	2800      	cmp	r0, #0
 80a1096:	d0f9      	beq.n	80a108c <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a1098:	4628      	mov	r0, r5
 80a109a:	f7ff ffc4 	bl	80a1026 <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a109e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a10a0:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a10a4:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a10a6:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a10aa:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a10ac:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a10b0:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a10b2:	aa04      	add	r2, sp, #16
 80a10b4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a10b8:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a10bc:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a10be:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a10c2:	bfb8      	it	lt
 80a10c4:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a10c8:	4291      	cmp	r1, r2
 80a10ca:	bfc8      	it	gt
 80a10cc:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a10d0:	3301      	adds	r3, #1
 80a10d2:	2b03      	cmp	r3, #3
 80a10d4:	d1ed      	bne.n	80a10b2 <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a10d6:	3c01      	subs	r4, #1
 80a10d8:	d1d8      	bne.n	80a108c <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a10da:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a10de:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a10e2:	f04f 0b02 	mov.w	fp, #2
 80a10e6:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a10ea:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a10ee:	441e      	add	r6, r3
 80a10f0:	fb96 f6fb 	sdiv	r6, r6, fp
 80a10f4:	b236      	sxth	r6, r6
 80a10f6:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a10fa:	4630      	mov	r0, r6
 80a10fc:	f003 fb50 	bl	80a47a0 <__aeabi_i2f>
 80a1100:	4601      	mov	r1, r0
 80a1102:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a1104:	f003 fba0 	bl	80a4848 <__aeabi_fmul>
 80a1108:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a110c:	f1ba 0f00 	cmp.w	sl, #0
 80a1110:	d004      	beq.n	80a111c <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a1112:	4632      	mov	r2, r6
 80a1114:	b2e1      	uxtb	r1, r4
 80a1116:	4628      	mov	r0, r5
 80a1118:	f7ff fd1c 	bl	80a0b54 <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a111c:	3401      	adds	r4, #1
 80a111e:	2c03      	cmp	r4, #3
 80a1120:	d1e1      	bne.n	80a10e6 <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a1122:	b007      	add	sp, #28
 80a1124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1128 <_GLOBAL__sub_I_magSensitivity>:
 80a1128:	f001 b96c 	b.w	80a2404 <HAL_Pin_Map>

080a112c <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a112c:	f001 b95a 	b.w	80a23e4 <HAL_Timer_Get_Micro_Seconds>

080a1130 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a1130:	b510      	push	{r4, lr}
 80a1132:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a1134:	68c0      	ldr	r0, [r0, #12]
 80a1136:	b108      	cbz	r0, 80a113c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a1138:	f001 fb8a 	bl	80a2850 <free>
  if (begun) pinMode(pin, INPUT);
 80a113c:	7823      	ldrb	r3, [r4, #0]
 80a113e:	b11b      	cbz	r3, 80a1148 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a1140:	2100      	movs	r1, #0
 80a1142:	79e0      	ldrb	r0, [r4, #7]
 80a1144:	f002 fbc8 	bl	80a38d8 <pinMode>
}
 80a1148:	4620      	mov	r0, r4
 80a114a:	bd10      	pop	{r4, pc}

080a114c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a114c:	b538      	push	{r3, r4, r5, lr}
 80a114e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a1150:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a1152:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a1154:	b108      	cbz	r0, 80a115a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a1156:	f001 fb7b 	bl	80a2850 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a115a:	79a3      	ldrb	r3, [r4, #6]
 80a115c:	2b06      	cmp	r3, #6
 80a115e:	bf0c      	ite	eq
 80a1160:	2004      	moveq	r0, #4
 80a1162:	2003      	movne	r0, #3
 80a1164:	4368      	muls	r0, r5
 80a1166:	b280      	uxth	r0, r0
 80a1168:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a116a:	f001 fb69 	bl	80a2840 <malloc>
 80a116e:	60e0      	str	r0, [r4, #12]
 80a1170:	b128      	cbz	r0, 80a117e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a1172:	88a2      	ldrh	r2, [r4, #4]
 80a1174:	2100      	movs	r1, #0
 80a1176:	f003 fcf6 	bl	80a4b66 <memset>
    numLEDs = n;
 80a117a:	8065      	strh	r5, [r4, #2]
 80a117c:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a117e:	80a0      	strh	r0, [r4, #4]
 80a1180:	8060      	strh	r0, [r4, #2]
 80a1182:	bd38      	pop	{r3, r4, r5, pc}

080a1184 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a1184:	b510      	push	{r4, lr}
 80a1186:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a1188:	2101      	movs	r1, #1
 80a118a:	79c0      	ldrb	r0, [r0, #7]
 80a118c:	f002 fba4 	bl	80a38d8 <pinMode>
  digitalWrite(pin, LOW);
 80a1190:	2100      	movs	r1, #0
 80a1192:	79e0      	ldrb	r0, [r4, #7]
 80a1194:	f002 fbb1 	bl	80a38fa <digitalWrite>
  begun = true;
 80a1198:	2301      	movs	r3, #1
 80a119a:	7023      	strb	r3, [r4, #0]
 80a119c:	bd10      	pop	{r4, pc}

080a119e <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a119e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a11a0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a11a2:	4605      	mov	r5, r0
 80a11a4:	460c      	mov	r4, r1
    if (begun) {
 80a11a6:	b11b      	cbz	r3, 80a11b0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a11a8:	2100      	movs	r1, #0
 80a11aa:	79c0      	ldrb	r0, [r0, #7]
 80a11ac:	f002 fb94 	bl	80a38d8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a11b0:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a11b2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a11b4:	b153      	cbz	r3, 80a11cc <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a11b6:	b2a4      	uxth	r4, r4
 80a11b8:	4620      	mov	r0, r4
 80a11ba:	2101      	movs	r1, #1
 80a11bc:	f002 fb8c 	bl	80a38d8 <pinMode>
        digitalWrite(p, LOW);
 80a11c0:	4620      	mov	r0, r4
    }
}
 80a11c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a11c6:	2100      	movs	r1, #0
 80a11c8:	f002 bb97 	b.w	80a38fa <digitalWrite>
 80a11cc:	bd38      	pop	{r3, r4, r5, pc}

080a11ce <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a11ce:	b570      	push	{r4, r5, r6, lr}
 80a11d0:	4604      	mov	r4, r0
 80a11d2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a11d4:	2500      	movs	r5, #0
 80a11d6:	7183      	strb	r3, [r0, #6]
 80a11d8:	7005      	strb	r5, [r0, #0]
 80a11da:	7205      	strb	r5, [r0, #8]
 80a11dc:	60c5      	str	r5, [r0, #12]
 80a11de:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a11e0:	f7ff ffb4 	bl	80a114c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a11e4:	4620      	mov	r0, r4
 80a11e6:	4631      	mov	r1, r6
 80a11e8:	f7ff ffd9 	bl	80a119e <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a11ec:	4620      	mov	r0, r4
 80a11ee:	bd70      	pop	{r4, r5, r6, pc}

080a11f0 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a11f0:	68c3      	ldr	r3, [r0, #12]
 80a11f2:	2b00      	cmp	r3, #0
 80a11f4:	f000 858e 	beq.w	80a1d14 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a11f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a11fc:	4604      	mov	r4, r0
 80a11fe:	7983      	ldrb	r3, [r0, #6]
 80a1200:	b086      	sub	sp, #24
 80a1202:	3b02      	subs	r3, #2
 80a1204:	b2db      	uxtb	r3, r3
 80a1206:	2b04      	cmp	r3, #4
 80a1208:	bf96      	itet	ls
 80a120a:	4a29      	ldrls	r2, [pc, #164]	; (80a12b0 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a120c:	2532      	movhi	r5, #50	; 0x32
 80a120e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a1212:	f7ff ff8b 	bl	80a112c <micros>
 80a1216:	6923      	ldr	r3, [r4, #16]
 80a1218:	1ac0      	subs	r0, r0, r3
 80a121a:	42a8      	cmp	r0, r5
 80a121c:	d3f9      	bcc.n	80a1212 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a121e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1220:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a1222:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1224:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a1226:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a122a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a122e:	f000 8272 	beq.w	80a1716 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a1232:	2907      	cmp	r1, #7
 80a1234:	f000 826f 	beq.w	80a1716 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a1238:	2906      	cmp	r1, #6
 80a123a:	f000 8432 	beq.w	80a1aa2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a123e:	2905      	cmp	r1, #5
 80a1240:	f000 83ab 	beq.w	80a199a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a1244:	2908      	cmp	r1, #8
 80a1246:	f000 83a8 	beq.w	80a199a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a124a:	2900      	cmp	r1, #0
 80a124c:	f040 8563 	bne.w	80a1d16 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a1250:	4a18      	ldr	r2, [pc, #96]	; (80a12b4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1252:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1256:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a125a:	b29b      	uxth	r3, r3
 80a125c:	2b00      	cmp	r3, #0
 80a125e:	f000 8395 	beq.w	80a198c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1262:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1264:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1268:	f10e 0503 	add.w	r5, lr, #3
 80a126c:	3b03      	subs	r3, #3
 80a126e:	b29b      	uxth	r3, r3
 80a1270:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1274:	f89e 3000 	ldrb.w	r3, [lr]
 80a1278:	b2db      	uxtb	r3, r3
 80a127a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a127e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1282:	b2db      	uxtb	r3, r3
 80a1284:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1288:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a128c:	b2db      	uxtb	r3, r3
 80a128e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1292:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1296:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a129a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a129e:	021b      	lsls	r3, r3, #8
 80a12a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a12a4:	4303      	orrs	r3, r0
 80a12a6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a12a8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a12ac:	e11b      	b.n	80a14e6 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a12ae:	bf00      	nop
 80a12b0:	080a4d6c 	.word	0x080a4d6c
 80a12b4:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12b8:	4600      	mov	r0, r0
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a13c0:	79e3      	ldrb	r3, [r4, #7]
 80a13c2:	6810      	ldr	r0, [r2, #0]
 80a13c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13c8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13cc:	88bf      	ldrh	r7, [r7, #4]
 80a13ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13d2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13d4:	4600      	mov	r0, r0
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a14ce:	9b04      	ldr	r3, [sp, #16]
 80a14d0:	085b      	lsrs	r3, r3, #1
 80a14d2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a14d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a14d8:	3301      	adds	r3, #1
 80a14da:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a14dc:	2b17      	cmp	r3, #23
 80a14de:	f88d 3005 	strb.w	r3, [sp, #5]
 80a14e2:	f200 82db 	bhi.w	80a1a9c <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a14e6:	79e3      	ldrb	r3, [r4, #7]
 80a14e8:	6810      	ldr	r0, [r2, #0]
 80a14ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14ee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14f2:	88bf      	ldrh	r7, [r7, #4]
 80a14f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14f8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a14fa:	9803      	ldr	r0, [sp, #12]
 80a14fc:	9b04      	ldr	r3, [sp, #16]
 80a14fe:	4218      	tst	r0, r3
 80a1500:	f47f aeda 	bne.w	80a12b8 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1504:	4600      	mov	r0, r0
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a1556:	79e3      	ldrb	r3, [r4, #7]
 80a1558:	6810      	ldr	r0, [r2, #0]
 80a155a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a155e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1562:	88bf      	ldrh	r7, [r7, #4]
 80a1564:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1568:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a156a:	4600      	mov	r0, r0
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	e6db      	b.n	80a14ce <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1716:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a171a:	4a17      	ldr	r2, [pc, #92]	; (80a1778 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a171c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a171e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1722:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1724:	2b00      	cmp	r3, #0
 80a1726:	f000 8131 	beq.w	80a198c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a172a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a172c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1730:	f10e 0103 	add.w	r1, lr, #3
 80a1734:	3b03      	subs	r3, #3
 80a1736:	b29b      	uxth	r3, r3
 80a1738:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a173c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1740:	b2db      	uxtb	r3, r3
 80a1742:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1746:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a174a:	b2db      	uxtb	r3, r3
 80a174c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1750:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1754:	b2db      	uxtb	r3, r3
 80a1756:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a175a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a175e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1762:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a1766:	0200      	lsls	r0, r0, #8
 80a1768:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a176c:	433b      	orrs	r3, r7
 80a176e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1770:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1774:	e080      	b.n	80a1878 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a1776:	bf00      	nop
 80a1778:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a177c:	4600      	mov	r0, r0
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1816:	79e3      	ldrb	r3, [r4, #7]
 80a1818:	6810      	ldr	r0, [r2, #0]
 80a181a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a181e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1822:	88bf      	ldrh	r7, [r7, #4]
 80a1824:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1828:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a182a:	4600      	mov	r0, r0
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1860:	9b04      	ldr	r3, [sp, #16]
 80a1862:	085b      	lsrs	r3, r3, #1
 80a1864:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1866:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a186a:	3301      	adds	r3, #1
 80a186c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a186e:	2b17      	cmp	r3, #23
 80a1870:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1874:	f200 8083 	bhi.w	80a197e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1878:	79e3      	ldrb	r3, [r4, #7]
 80a187a:	6810      	ldr	r0, [r2, #0]
 80a187c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1880:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1884:	88bf      	ldrh	r7, [r7, #4]
 80a1886:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a188a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a188c:	9803      	ldr	r0, [sp, #12]
 80a188e:	9b04      	ldr	r3, [sp, #16]
 80a1890:	4218      	tst	r0, r3
 80a1892:	f47f af73 	bne.w	80a177c <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1896:	4600      	mov	r0, r0
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a18be:	79e3      	ldrb	r3, [r4, #7]
 80a18c0:	6810      	ldr	r0, [r2, #0]
 80a18c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18c6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18ca:	88bf      	ldrh	r7, [r7, #4]
 80a18cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18d0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a18d2:	4600      	mov	r0, r0
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	e770      	b.n	80a1860 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a197e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1982:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1984:	b29b      	uxth	r3, r3
 80a1986:	2b00      	cmp	r3, #0
 80a1988:	f47f aecf 	bne.w	80a172a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a198c:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a198e:	f7ff fbcd 	bl	80a112c <micros>
 80a1992:	6120      	str	r0, [r4, #16]
}
 80a1994:	b006      	add	sp, #24
 80a1996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a199a:	4b5e      	ldr	r3, [pc, #376]	; (80a1b14 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a199c:	4a5e      	ldr	r2, [pc, #376]	; (80a1b18 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a199e:	4618      	mov	r0, r3
 80a19a0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a19a2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a19a6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a19a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a19ac:	b292      	uxth	r2, r2
 80a19ae:	2a00      	cmp	r2, #0
 80a19b0:	d0ec      	beq.n	80a198c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a19b2:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a19b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a19ba:	f10e 0503 	add.w	r5, lr, #3
 80a19be:	3a03      	subs	r2, #3
 80a19c0:	b292      	uxth	r2, r2
 80a19c2:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a19c6:	f89e 2000 	ldrb.w	r2, [lr]
 80a19ca:	b2d2      	uxtb	r2, r2
 80a19cc:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a19d0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a19d4:	b2d2      	uxtb	r2, r2
 80a19d6:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a19da:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a19de:	b2d2      	uxtb	r2, r2
 80a19e0:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a19e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a19e8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a19ec:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a19f0:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a19f4:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a19f8:	ea42 020c 	orr.w	r2, r2, ip
 80a19fc:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a19fe:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1a02:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1a04:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1a06:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1a0a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1a0e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1a12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1a16:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1a18:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1a1c:	9e03      	ldr	r6, [sp, #12]
 80a1a1e:	9a04      	ldr	r2, [sp, #16]
 80a1a20:	4216      	tst	r6, r2
 80a1a22:	d023      	beq.n	80a1a6c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1a24:	685a      	ldr	r2, [r3, #4]
 80a1a26:	9e05      	ldr	r6, [sp, #20]
 80a1a28:	1b92      	subs	r2, r2, r6
 80a1a2a:	2a4f      	cmp	r2, #79	; 0x4f
 80a1a2c:	d9fa      	bls.n	80a1a24 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1a2e:	79e2      	ldrb	r2, [r4, #7]
 80a1a30:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1a34:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1a38:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1a3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1a40:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1a44:	6842      	ldr	r2, [r0, #4]
 80a1a46:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1a48:	685a      	ldr	r2, [r3, #4]
 80a1a4a:	9e05      	ldr	r6, [sp, #20]
 80a1a4c:	1b92      	subs	r2, r2, r6
 80a1a4e:	2a07      	cmp	r2, #7
 80a1a50:	d9fa      	bls.n	80a1a48 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1a52:	9a04      	ldr	r2, [sp, #16]
 80a1a54:	0852      	lsrs	r2, r2, #1
 80a1a56:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1a58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1a5c:	3201      	adds	r2, #1
 80a1a5e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1a60:	2a17      	cmp	r2, #23
 80a1a62:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1a66:	d9cc      	bls.n	80a1a02 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1a68:	46ae      	mov	lr, r5
 80a1a6a:	e79d      	b.n	80a19a8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1a6c:	685a      	ldr	r2, [r3, #4]
 80a1a6e:	9e05      	ldr	r6, [sp, #20]
 80a1a70:	1b92      	subs	r2, r2, r6
 80a1a72:	2a18      	cmp	r2, #24
 80a1a74:	d9fa      	bls.n	80a1a6c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1a76:	79e2      	ldrb	r2, [r4, #7]
 80a1a78:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1a7c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1a80:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1a84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1a88:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1a8c:	6842      	ldr	r2, [r0, #4]
 80a1a8e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1a90:	685a      	ldr	r2, [r3, #4]
 80a1a92:	9e05      	ldr	r6, [sp, #20]
 80a1a94:	1b92      	subs	r2, r2, r6
 80a1a96:	2a45      	cmp	r2, #69	; 0x45
 80a1a98:	d9fa      	bls.n	80a1a90 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a1a9a:	e7da      	b.n	80a1a52 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a1a9c:	46ae      	mov	lr, r5
 80a1a9e:	f7ff bbda 	b.w	80a1256 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a1aa2:	4a1d      	ldr	r2, [pc, #116]	; (80a1b18 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a1aa4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a1aa8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1aaa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1aae:	b29b      	uxth	r3, r3
 80a1ab0:	2b00      	cmp	r3, #0
 80a1ab2:	f43f af6b 	beq.w	80a198c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a1ab6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1ab8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1abc:	f10e 0104 	add.w	r1, lr, #4
 80a1ac0:	3b04      	subs	r3, #4
 80a1ac2:	b29b      	uxth	r3, r3
 80a1ac4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1ac8:	f89e 3000 	ldrb.w	r3, [lr]
 80a1acc:	b2db      	uxtb	r3, r3
 80a1ace:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1ad2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1ad6:	b2db      	uxtb	r3, r3
 80a1ad8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1adc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1ae0:	b2db      	uxtb	r3, r3
 80a1ae2:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1ae6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a1aea:	b2db      	uxtb	r3, r3
 80a1aec:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1af4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1af8:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1afc:	043f      	lsls	r7, r7, #16
 80a1afe:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1b02:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1b06:	4303      	orrs	r3, r0
 80a1b08:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1b0c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1b0e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1b12:	e07e      	b.n	80a1c12 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1b14:	e0001000 	.word	0xe0001000
 80a1b18:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b1c:	4600      	mov	r0, r0
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1b8a:	79e3      	ldrb	r3, [r4, #7]
 80a1b8c:	6810      	ldr	r0, [r2, #0]
 80a1b8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b92:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b96:	88bf      	ldrh	r7, [r7, #4]
 80a1b98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b9c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b9e:	4600      	mov	r0, r0
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
 80a1bc4:	bf00      	nop
 80a1bc6:	bf00      	nop
 80a1bc8:	bf00      	nop
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1bfc:	9b04      	ldr	r3, [sp, #16]
 80a1bfe:	085b      	lsrs	r3, r3, #1
 80a1c00:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1c02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1c06:	3301      	adds	r3, #1
 80a1c08:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1c0a:	2b1f      	cmp	r3, #31
 80a1c0c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1c10:	d87e      	bhi.n	80a1d10 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1c12:	79e3      	ldrb	r3, [r4, #7]
 80a1c14:	6810      	ldr	r0, [r2, #0]
 80a1c16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c1a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c1e:	88bf      	ldrh	r7, [r7, #4]
 80a1c20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c24:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1c26:	9803      	ldr	r0, [sp, #12]
 80a1c28:	9b04      	ldr	r3, [sp, #16]
 80a1c2a:	4218      	tst	r0, r3
 80a1c2c:	f47f af76 	bne.w	80a1b1c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c30:	4600      	mov	r0, r0
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1c58:	79e3      	ldrb	r3, [r4, #7]
 80a1c5a:	6810      	ldr	r0, [r2, #0]
 80a1c5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c60:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c64:	88bf      	ldrh	r7, [r7, #4]
 80a1c66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c6a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c6c:	4600      	mov	r0, r0
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	e775      	b.n	80a1bfc <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1d10:	468e      	mov	lr, r1
 80a1d12:	e6ca      	b.n	80a1aaa <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1d14:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1d16:	2903      	cmp	r1, #3
 80a1d18:	f000 812e 	beq.w	80a1f78 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d1c:	4a1e      	ldr	r2, [pc, #120]	; (80a1d98 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1d1e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1d22:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1d24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1d28:	b29b      	uxth	r3, r3
 80a1d2a:	2b00      	cmp	r3, #0
 80a1d2c:	f43f ae2e 	beq.w	80a198c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1d30:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1d32:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d36:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1d38:	3b03      	subs	r3, #3
 80a1d3a:	b29b      	uxth	r3, r3
 80a1d3c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1d40:	f89e 3000 	ldrb.w	r3, [lr]
 80a1d44:	f10e 0103 	add.w	r1, lr, #3
 80a1d48:	b2db      	uxtb	r3, r3
 80a1d4a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1d4e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d52:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1d56:	b2db      	uxtb	r3, r3
 80a1d58:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1d5c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d60:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1d64:	b2db      	uxtb	r3, r3
 80a1d66:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1d6a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1d6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d72:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1d76:	021b      	lsls	r3, r3, #8
 80a1d78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1d7c:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1d80:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1d84:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1d88:	433b      	orrs	r3, r7
 80a1d8a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1d8c:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1d90:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1d94:	e07d      	b.n	80a1e92 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1d96:	bf00      	nop
 80a1d98:	20000200 	.word	0x20000200
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1d9c:	9b04      	ldr	r3, [sp, #16]
 80a1d9e:	085b      	lsrs	r3, r3, #1
 80a1da0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1da2:	4600      	mov	r0, r0
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
 80a1dc4:	bf00      	nop
 80a1dc6:	bf00      	nop
 80a1dc8:	bf00      	nop
 80a1dca:	bf00      	nop
 80a1dcc:	bf00      	nop
 80a1dce:	bf00      	nop
 80a1dd0:	bf00      	nop
 80a1dd2:	bf00      	nop
 80a1dd4:	bf00      	nop
 80a1dd6:	bf00      	nop
 80a1dd8:	bf00      	nop
 80a1dda:	bf00      	nop
 80a1ddc:	bf00      	nop
 80a1dde:	bf00      	nop
 80a1de0:	bf00      	nop
 80a1de2:	bf00      	nop
 80a1de4:	bf00      	nop
 80a1de6:	bf00      	nop
 80a1de8:	bf00      	nop
 80a1dea:	bf00      	nop
 80a1dec:	bf00      	nop
 80a1dee:	bf00      	nop
 80a1df0:	bf00      	nop
 80a1df2:	bf00      	nop
 80a1df4:	bf00      	nop
 80a1df6:	bf00      	nop
 80a1df8:	bf00      	nop
 80a1dfa:	bf00      	nop
 80a1dfc:	bf00      	nop
 80a1dfe:	bf00      	nop
 80a1e00:	bf00      	nop
 80a1e02:	bf00      	nop
 80a1e04:	bf00      	nop
 80a1e06:	bf00      	nop
 80a1e08:	bf00      	nop
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1e28:	79e0      	ldrb	r0, [r4, #7]
 80a1e2a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1e2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1e30:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1e34:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1e38:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1e3c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1e40:	3301      	adds	r3, #1
 80a1e42:	b2db      	uxtb	r3, r3
 80a1e44:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1e48:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1e4c:	4600      	mov	r0, r0
 80a1e4e:	bf00      	nop
 80a1e50:	bf00      	nop
 80a1e52:	bf00      	nop
 80a1e54:	bf00      	nop
 80a1e56:	bf00      	nop
 80a1e58:	bf00      	nop
 80a1e5a:	bf00      	nop
 80a1e5c:	bf00      	nop
 80a1e5e:	bf00      	nop
 80a1e60:	bf00      	nop
 80a1e62:	bf00      	nop
 80a1e64:	bf00      	nop
 80a1e66:	bf00      	nop
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
 80a1e6e:	bf00      	nop
 80a1e70:	bf00      	nop
 80a1e72:	bf00      	nop
 80a1e74:	bf00      	nop
          if(j==24) break;
 80a1e76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1e7a:	2b18      	cmp	r3, #24
 80a1e7c:	d07a      	beq.n	80a1f74 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1e7e:	79e3      	ldrb	r3, [r4, #7]
 80a1e80:	6810      	ldr	r0, [r2, #0]
 80a1e82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e86:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e8a:	88bf      	ldrh	r7, [r7, #4]
 80a1e8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e90:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1e92:	9803      	ldr	r0, [sp, #12]
 80a1e94:	9b04      	ldr	r3, [sp, #16]
 80a1e96:	4218      	tst	r0, r3
 80a1e98:	d180      	bne.n	80a1d9c <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1e9a:	4600      	mov	r0, r0
 80a1e9c:	bf00      	nop
 80a1e9e:	bf00      	nop
 80a1ea0:	bf00      	nop
 80a1ea2:	bf00      	nop
 80a1ea4:	bf00      	nop
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
 80a1eb4:	bf00      	nop
 80a1eb6:	bf00      	nop
 80a1eb8:	bf00      	nop
 80a1eba:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1ebc:	79e3      	ldrb	r3, [r4, #7]
 80a1ebe:	6810      	ldr	r0, [r2, #0]
 80a1ec0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1ec4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1ec8:	88bf      	ldrh	r7, [r7, #4]
 80a1eca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ece:	831f      	strh	r7, [r3, #24]
          j++;
 80a1ed0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1ed4:	3301      	adds	r3, #1
 80a1ed6:	b2db      	uxtb	r3, r3
 80a1ed8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1edc:	9b04      	ldr	r3, [sp, #16]
 80a1ede:	085b      	lsrs	r3, r3, #1
 80a1ee0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1ee2:	4600      	mov	r0, r0
 80a1ee4:	bf00      	nop
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
 80a1ef0:	bf00      	nop
 80a1ef2:	bf00      	nop
 80a1ef4:	bf00      	nop
 80a1ef6:	bf00      	nop
 80a1ef8:	bf00      	nop
 80a1efa:	bf00      	nop
 80a1efc:	bf00      	nop
 80a1efe:	bf00      	nop
 80a1f00:	bf00      	nop
 80a1f02:	bf00      	nop
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
 80a1f10:	bf00      	nop
 80a1f12:	bf00      	nop
 80a1f14:	bf00      	nop
 80a1f16:	bf00      	nop
 80a1f18:	bf00      	nop
 80a1f1a:	bf00      	nop
 80a1f1c:	bf00      	nop
 80a1f1e:	bf00      	nop
 80a1f20:	bf00      	nop
 80a1f22:	bf00      	nop
 80a1f24:	bf00      	nop
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
          if(j==24) break;
 80a1f6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1f70:	2b18      	cmp	r3, #24
 80a1f72:	d184      	bne.n	80a1e7e <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1f74:	468e      	mov	lr, r1
 80a1f76:	e6d5      	b.n	80a1d24 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1f78:	4a17      	ldr	r2, [pc, #92]	; (80a1fd8 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1f7a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1f7e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1f80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1f84:	b29b      	uxth	r3, r3
 80a1f86:	2b00      	cmp	r3, #0
 80a1f88:	f43f ad00 	beq.w	80a198c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1f8c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1f8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1f92:	f10e 0103 	add.w	r1, lr, #3
 80a1f96:	3b03      	subs	r3, #3
 80a1f98:	b29b      	uxth	r3, r3
 80a1f9a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1f9e:	f89e 3000 	ldrb.w	r3, [lr]
 80a1fa2:	b2db      	uxtb	r3, r3
 80a1fa4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1fa8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1fac:	b2db      	uxtb	r3, r3
 80a1fae:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1fb2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1fb6:	b2db      	uxtb	r3, r3
 80a1fb8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1fbc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1fc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1fc4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1fc8:	021b      	lsls	r3, r3, #8
 80a1fca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1fce:	4303      	orrs	r3, r0
 80a1fd0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1fd2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1fd6:	e0e0      	b.n	80a219a <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1fd8:	20000200 	.word	0x20000200
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1fdc:	4600      	mov	r0, r0
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
 80a2004:	bf00      	nop
 80a2006:	bf00      	nop
 80a2008:	bf00      	nop
 80a200a:	bf00      	nop
 80a200c:	bf00      	nop
 80a200e:	bf00      	nop
 80a2010:	bf00      	nop
 80a2012:	bf00      	nop
 80a2014:	bf00      	nop
 80a2016:	bf00      	nop
 80a2018:	bf00      	nop
 80a201a:	bf00      	nop
 80a201c:	bf00      	nop
 80a201e:	bf00      	nop
 80a2020:	bf00      	nop
 80a2022:	bf00      	nop
 80a2024:	bf00      	nop
 80a2026:	bf00      	nop
 80a2028:	bf00      	nop
 80a202a:	bf00      	nop
 80a202c:	bf00      	nop
 80a202e:	bf00      	nop
 80a2030:	bf00      	nop
 80a2032:	bf00      	nop
 80a2034:	bf00      	nop
 80a2036:	bf00      	nop
 80a2038:	bf00      	nop
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	bf00      	nop
 80a204c:	bf00      	nop
 80a204e:	bf00      	nop
 80a2050:	bf00      	nop
 80a2052:	bf00      	nop
 80a2054:	bf00      	nop
 80a2056:	bf00      	nop
 80a2058:	bf00      	nop
 80a205a:	bf00      	nop
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
 80a2060:	bf00      	nop
 80a2062:	bf00      	nop
 80a2064:	bf00      	nop
 80a2066:	bf00      	nop
 80a2068:	bf00      	nop
 80a206a:	bf00      	nop
 80a206c:	bf00      	nop
 80a206e:	bf00      	nop
 80a2070:	bf00      	nop
 80a2072:	bf00      	nop
 80a2074:	bf00      	nop
 80a2076:	bf00      	nop
 80a2078:	bf00      	nop
 80a207a:	bf00      	nop
 80a207c:	bf00      	nop
 80a207e:	bf00      	nop
 80a2080:	bf00      	nop
 80a2082:	bf00      	nop
 80a2084:	bf00      	nop
 80a2086:	bf00      	nop
 80a2088:	bf00      	nop
 80a208a:	bf00      	nop
 80a208c:	bf00      	nop
 80a208e:	bf00      	nop
 80a2090:	bf00      	nop
 80a2092:	bf00      	nop
 80a2094:	bf00      	nop
 80a2096:	bf00      	nop
 80a2098:	bf00      	nop
 80a209a:	bf00      	nop
 80a209c:	bf00      	nop
 80a209e:	bf00      	nop
 80a20a0:	bf00      	nop
 80a20a2:	bf00      	nop
 80a20a4:	bf00      	nop
 80a20a6:	bf00      	nop
 80a20a8:	bf00      	nop
 80a20aa:	bf00      	nop
 80a20ac:	bf00      	nop
 80a20ae:	bf00      	nop
 80a20b0:	bf00      	nop
 80a20b2:	bf00      	nop
 80a20b4:	bf00      	nop
 80a20b6:	bf00      	nop
 80a20b8:	bf00      	nop
 80a20ba:	bf00      	nop
 80a20bc:	bf00      	nop
 80a20be:	bf00      	nop
 80a20c0:	bf00      	nop
 80a20c2:	bf00      	nop
 80a20c4:	bf00      	nop
 80a20c6:	bf00      	nop
 80a20c8:	bf00      	nop
 80a20ca:	bf00      	nop
 80a20cc:	bf00      	nop
 80a20ce:	bf00      	nop
 80a20d0:	bf00      	nop
 80a20d2:	bf00      	nop
 80a20d4:	bf00      	nop
 80a20d6:	bf00      	nop
 80a20d8:	bf00      	nop
 80a20da:	bf00      	nop
 80a20dc:	bf00      	nop
 80a20de:	bf00      	nop
 80a20e0:	bf00      	nop
 80a20e2:	bf00      	nop
 80a20e4:	bf00      	nop
 80a20e6:	bf00      	nop
 80a20e8:	bf00      	nop
 80a20ea:	bf00      	nop
 80a20ec:	bf00      	nop
 80a20ee:	bf00      	nop
 80a20f0:	bf00      	nop
 80a20f2:	bf00      	nop
 80a20f4:	bf00      	nop
 80a20f6:	bf00      	nop
 80a20f8:	bf00      	nop
 80a20fa:	bf00      	nop
 80a20fc:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a20fe:	79e3      	ldrb	r3, [r4, #7]
 80a2100:	6810      	ldr	r0, [r2, #0]
 80a2102:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2106:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a210a:	88bf      	ldrh	r7, [r7, #4]
 80a210c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2110:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2112:	4600      	mov	r0, r0
 80a2114:	bf00      	nop
 80a2116:	bf00      	nop
 80a2118:	bf00      	nop
 80a211a:	bf00      	nop
 80a211c:	bf00      	nop
 80a211e:	bf00      	nop
 80a2120:	bf00      	nop
 80a2122:	bf00      	nop
 80a2124:	bf00      	nop
 80a2126:	bf00      	nop
 80a2128:	bf00      	nop
 80a212a:	bf00      	nop
 80a212c:	bf00      	nop
 80a212e:	bf00      	nop
 80a2130:	bf00      	nop
 80a2132:	bf00      	nop
 80a2134:	bf00      	nop
 80a2136:	bf00      	nop
 80a2138:	bf00      	nop
 80a213a:	bf00      	nop
 80a213c:	bf00      	nop
 80a213e:	bf00      	nop
 80a2140:	bf00      	nop
 80a2142:	bf00      	nop
 80a2144:	bf00      	nop
 80a2146:	bf00      	nop
 80a2148:	bf00      	nop
 80a214a:	bf00      	nop
 80a214c:	bf00      	nop
 80a214e:	bf00      	nop
 80a2150:	bf00      	nop
 80a2152:	bf00      	nop
 80a2154:	bf00      	nop
 80a2156:	bf00      	nop
 80a2158:	bf00      	nop
 80a215a:	bf00      	nop
 80a215c:	bf00      	nop
 80a215e:	bf00      	nop
 80a2160:	bf00      	nop
 80a2162:	bf00      	nop
 80a2164:	bf00      	nop
 80a2166:	bf00      	nop
 80a2168:	bf00      	nop
 80a216a:	bf00      	nop
 80a216c:	bf00      	nop
 80a216e:	bf00      	nop
 80a2170:	bf00      	nop
 80a2172:	bf00      	nop
 80a2174:	bf00      	nop
 80a2176:	bf00      	nop
 80a2178:	bf00      	nop
 80a217a:	bf00      	nop
 80a217c:	bf00      	nop
 80a217e:	bf00      	nop
 80a2180:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2182:	9b04      	ldr	r3, [sp, #16]
 80a2184:	085b      	lsrs	r3, r3, #1
 80a2186:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2188:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a218c:	3301      	adds	r3, #1
 80a218e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a2190:	2b17      	cmp	r3, #23
 80a2192:	f88d 3005 	strb.w	r3, [sp, #5]
 80a2196:	f200 80e3 	bhi.w	80a2360 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a219a:	79e3      	ldrb	r3, [r4, #7]
 80a219c:	6810      	ldr	r0, [r2, #0]
 80a219e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a21a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a21a6:	88bf      	ldrh	r7, [r7, #4]
 80a21a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a21ac:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a21ae:	9803      	ldr	r0, [sp, #12]
 80a21b0:	9b04      	ldr	r3, [sp, #16]
 80a21b2:	4218      	tst	r0, r3
 80a21b4:	f47f af12 	bne.w	80a1fdc <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a21b8:	4600      	mov	r0, r0
 80a21ba:	bf00      	nop
 80a21bc:	bf00      	nop
 80a21be:	bf00      	nop
 80a21c0:	bf00      	nop
 80a21c2:	bf00      	nop
 80a21c4:	bf00      	nop
 80a21c6:	bf00      	nop
 80a21c8:	bf00      	nop
 80a21ca:	bf00      	nop
 80a21cc:	bf00      	nop
 80a21ce:	bf00      	nop
 80a21d0:	bf00      	nop
 80a21d2:	bf00      	nop
 80a21d4:	bf00      	nop
 80a21d6:	bf00      	nop
 80a21d8:	bf00      	nop
 80a21da:	bf00      	nop
 80a21dc:	bf00      	nop
 80a21de:	bf00      	nop
 80a21e0:	bf00      	nop
 80a21e2:	bf00      	nop
 80a21e4:	bf00      	nop
 80a21e6:	bf00      	nop
 80a21e8:	bf00      	nop
 80a21ea:	bf00      	nop
 80a21ec:	bf00      	nop
 80a21ee:	bf00      	nop
 80a21f0:	bf00      	nop
 80a21f2:	bf00      	nop
 80a21f4:	bf00      	nop
 80a21f6:	bf00      	nop
 80a21f8:	bf00      	nop
 80a21fa:	bf00      	nop
 80a21fc:	bf00      	nop
 80a21fe:	bf00      	nop
 80a2200:	bf00      	nop
 80a2202:	bf00      	nop
 80a2204:	bf00      	nop
 80a2206:	bf00      	nop
 80a2208:	bf00      	nop
 80a220a:	bf00      	nop
 80a220c:	bf00      	nop
 80a220e:	bf00      	nop
 80a2210:	bf00      	nop
 80a2212:	bf00      	nop
 80a2214:	bf00      	nop
 80a2216:	bf00      	nop
 80a2218:	bf00      	nop
 80a221a:	bf00      	nop
 80a221c:	bf00      	nop
 80a221e:	bf00      	nop
 80a2220:	bf00      	nop
 80a2222:	bf00      	nop
 80a2224:	bf00      	nop
 80a2226:	bf00      	nop
 80a2228:	bf00      	nop
 80a222a:	bf00      	nop
 80a222c:	bf00      	nop
 80a222e:	bf00      	nop
 80a2230:	bf00      	nop
 80a2232:	bf00      	nop
 80a2234:	bf00      	nop
 80a2236:	bf00      	nop
 80a2238:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a223a:	79e3      	ldrb	r3, [r4, #7]
 80a223c:	6810      	ldr	r0, [r2, #0]
 80a223e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2242:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2246:	88bf      	ldrh	r7, [r7, #4]
 80a2248:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a224c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a224e:	4600      	mov	r0, r0
 80a2250:	bf00      	nop
 80a2252:	bf00      	nop
 80a2254:	bf00      	nop
 80a2256:	bf00      	nop
 80a2258:	bf00      	nop
 80a225a:	bf00      	nop
 80a225c:	bf00      	nop
 80a225e:	bf00      	nop
 80a2260:	bf00      	nop
 80a2262:	bf00      	nop
 80a2264:	bf00      	nop
 80a2266:	bf00      	nop
 80a2268:	bf00      	nop
 80a226a:	bf00      	nop
 80a226c:	bf00      	nop
 80a226e:	bf00      	nop
 80a2270:	bf00      	nop
 80a2272:	bf00      	nop
 80a2274:	bf00      	nop
 80a2276:	bf00      	nop
 80a2278:	bf00      	nop
 80a227a:	bf00      	nop
 80a227c:	bf00      	nop
 80a227e:	bf00      	nop
 80a2280:	bf00      	nop
 80a2282:	bf00      	nop
 80a2284:	bf00      	nop
 80a2286:	bf00      	nop
 80a2288:	bf00      	nop
 80a228a:	bf00      	nop
 80a228c:	bf00      	nop
 80a228e:	bf00      	nop
 80a2290:	bf00      	nop
 80a2292:	bf00      	nop
 80a2294:	bf00      	nop
 80a2296:	bf00      	nop
 80a2298:	bf00      	nop
 80a229a:	bf00      	nop
 80a229c:	bf00      	nop
 80a229e:	bf00      	nop
 80a22a0:	bf00      	nop
 80a22a2:	bf00      	nop
 80a22a4:	bf00      	nop
 80a22a6:	bf00      	nop
 80a22a8:	bf00      	nop
 80a22aa:	bf00      	nop
 80a22ac:	bf00      	nop
 80a22ae:	bf00      	nop
 80a22b0:	bf00      	nop
 80a22b2:	bf00      	nop
 80a22b4:	bf00      	nop
 80a22b6:	bf00      	nop
 80a22b8:	bf00      	nop
 80a22ba:	bf00      	nop
 80a22bc:	bf00      	nop
 80a22be:	bf00      	nop
 80a22c0:	bf00      	nop
 80a22c2:	bf00      	nop
 80a22c4:	bf00      	nop
 80a22c6:	bf00      	nop
 80a22c8:	bf00      	nop
 80a22ca:	bf00      	nop
 80a22cc:	bf00      	nop
 80a22ce:	bf00      	nop
 80a22d0:	bf00      	nop
 80a22d2:	bf00      	nop
 80a22d4:	bf00      	nop
 80a22d6:	bf00      	nop
 80a22d8:	bf00      	nop
 80a22da:	bf00      	nop
 80a22dc:	bf00      	nop
 80a22de:	bf00      	nop
 80a22e0:	bf00      	nop
 80a22e2:	bf00      	nop
 80a22e4:	bf00      	nop
 80a22e6:	bf00      	nop
 80a22e8:	bf00      	nop
 80a22ea:	bf00      	nop
 80a22ec:	bf00      	nop
 80a22ee:	bf00      	nop
 80a22f0:	bf00      	nop
 80a22f2:	bf00      	nop
 80a22f4:	bf00      	nop
 80a22f6:	bf00      	nop
 80a22f8:	bf00      	nop
 80a22fa:	bf00      	nop
 80a22fc:	bf00      	nop
 80a22fe:	bf00      	nop
 80a2300:	bf00      	nop
 80a2302:	bf00      	nop
 80a2304:	bf00      	nop
 80a2306:	bf00      	nop
 80a2308:	bf00      	nop
 80a230a:	bf00      	nop
 80a230c:	bf00      	nop
 80a230e:	bf00      	nop
 80a2310:	bf00      	nop
 80a2312:	bf00      	nop
 80a2314:	bf00      	nop
 80a2316:	bf00      	nop
 80a2318:	bf00      	nop
 80a231a:	bf00      	nop
 80a231c:	bf00      	nop
 80a231e:	bf00      	nop
 80a2320:	bf00      	nop
 80a2322:	bf00      	nop
 80a2324:	bf00      	nop
 80a2326:	bf00      	nop
 80a2328:	bf00      	nop
 80a232a:	bf00      	nop
 80a232c:	bf00      	nop
 80a232e:	bf00      	nop
 80a2330:	bf00      	nop
 80a2332:	bf00      	nop
 80a2334:	bf00      	nop
 80a2336:	bf00      	nop
 80a2338:	bf00      	nop
 80a233a:	bf00      	nop
 80a233c:	bf00      	nop
 80a233e:	bf00      	nop
 80a2340:	bf00      	nop
 80a2342:	bf00      	nop
 80a2344:	bf00      	nop
 80a2346:	bf00      	nop
 80a2348:	bf00      	nop
 80a234a:	bf00      	nop
 80a234c:	bf00      	nop
 80a234e:	bf00      	nop
 80a2350:	bf00      	nop
 80a2352:	bf00      	nop
 80a2354:	bf00      	nop
 80a2356:	bf00      	nop
 80a2358:	bf00      	nop
 80a235a:	bf00      	nop
 80a235c:	bf00      	nop
 80a235e:	e710      	b.n	80a2182 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a2360:	468e      	mov	lr, r1
 80a2362:	e60d      	b.n	80a1f80 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a2364 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2364:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a2366:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2368:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a236a:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a236c:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a236e:	d01e      	beq.n	80a23ae <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a2370:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2372:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2376:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2378:	d00c      	beq.n	80a2394 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a237a:	29ff      	cmp	r1, #255	; 0xff
 80a237c:	bf0f      	iteee	eq
 80a237e:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a2382:	0211      	lslne	r1, r2, #8
 80a2384:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a2388:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a238c:	bf0c      	ite	eq
 80a238e:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a2392:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a2394:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a2396:	1b29      	subs	r1, r5, r4
 80a2398:	8886      	ldrh	r6, [r0, #4]
 80a239a:	b289      	uxth	r1, r1
 80a239c:	428e      	cmp	r6, r1
 80a239e:	d905      	bls.n	80a23ac <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a23a0:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a23a2:	4359      	muls	r1, r3
 80a23a4:	1209      	asrs	r1, r1, #8
 80a23a6:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a23aa:	e7f4      	b.n	80a2396 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a23ac:	7202      	strb	r2, [r0, #8]
 80a23ae:	bd70      	pop	{r4, r5, r6, pc}

080a23b0 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a23b0:	b508      	push	{r3, lr}
 80a23b2:	f000 f827 	bl	80a2404 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a23b6:	f000 f825 	bl	80a2404 <HAL_Pin_Map>
 80a23ba:	4b01      	ldr	r3, [pc, #4]	; (80a23c0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a23bc:	6018      	str	r0, [r3, #0]
 80a23be:	bd08      	pop	{r3, pc}
 80a23c0:	20000200 	.word	0x20000200

080a23c4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a23c4:	b508      	push	{r3, lr}
 80a23c6:	4b02      	ldr	r3, [pc, #8]	; (80a23d0 <os_mutex_create+0xc>)
 80a23c8:	681b      	ldr	r3, [r3, #0]
 80a23ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23cc:	9301      	str	r3, [sp, #4]
 80a23ce:	bd08      	pop	{r3, pc}
 80a23d0:	080601d0 	.word	0x080601d0

080a23d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a23d4:	b508      	push	{r3, lr}
 80a23d6:	4b02      	ldr	r3, [pc, #8]	; (80a23e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a23d8:	681b      	ldr	r3, [r3, #0]
 80a23da:	685b      	ldr	r3, [r3, #4]
 80a23dc:	9301      	str	r3, [sp, #4]
 80a23de:	bd08      	pop	{r3, pc}
 80a23e0:	0806019c 	.word	0x0806019c

080a23e4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a23e4:	b508      	push	{r3, lr}
 80a23e6:	4b02      	ldr	r3, [pc, #8]	; (80a23f0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a23e8:	681b      	ldr	r3, [r3, #0]
 80a23ea:	691b      	ldr	r3, [r3, #16]
 80a23ec:	9301      	str	r3, [sp, #4]
 80a23ee:	bd08      	pop	{r3, pc}
 80a23f0:	0806019c 	.word	0x0806019c

080a23f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a23f4:	b508      	push	{r3, lr}
 80a23f6:	4b02      	ldr	r3, [pc, #8]	; (80a2400 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a23f8:	681b      	ldr	r3, [r3, #0]
 80a23fa:	695b      	ldr	r3, [r3, #20]
 80a23fc:	9301      	str	r3, [sp, #4]
 80a23fe:	bd08      	pop	{r3, pc}
 80a2400:	0806019c 	.word	0x0806019c

080a2404 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2404:	b508      	push	{r3, lr}
 80a2406:	4b02      	ldr	r3, [pc, #8]	; (80a2410 <HAL_Pin_Map+0xc>)
 80a2408:	681b      	ldr	r3, [r3, #0]
 80a240a:	681b      	ldr	r3, [r3, #0]
 80a240c:	9301      	str	r3, [sp, #4]
 80a240e:	bd08      	pop	{r3, pc}
 80a2410:	080601b0 	.word	0x080601b0

080a2414 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a2414:	b508      	push	{r3, lr}
 80a2416:	4b02      	ldr	r3, [pc, #8]	; (80a2420 <HAL_Validate_Pin_Function+0xc>)
 80a2418:	681b      	ldr	r3, [r3, #0]
 80a241a:	685b      	ldr	r3, [r3, #4]
 80a241c:	9301      	str	r3, [sp, #4]
 80a241e:	bd08      	pop	{r3, pc}
 80a2420:	080601b0 	.word	0x080601b0

080a2424 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2424:	b508      	push	{r3, lr}
 80a2426:	4b02      	ldr	r3, [pc, #8]	; (80a2430 <HAL_Pin_Mode+0xc>)
 80a2428:	681b      	ldr	r3, [r3, #0]
 80a242a:	689b      	ldr	r3, [r3, #8]
 80a242c:	9301      	str	r3, [sp, #4]
 80a242e:	bd08      	pop	{r3, pc}
 80a2430:	080601b0 	.word	0x080601b0

080a2434 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2434:	b508      	push	{r3, lr}
 80a2436:	4b02      	ldr	r3, [pc, #8]	; (80a2440 <HAL_Get_Pin_Mode+0xc>)
 80a2438:	681b      	ldr	r3, [r3, #0]
 80a243a:	68db      	ldr	r3, [r3, #12]
 80a243c:	9301      	str	r3, [sp, #4]
 80a243e:	bd08      	pop	{r3, pc}
 80a2440:	080601b0 	.word	0x080601b0

080a2444 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2444:	b508      	push	{r3, lr}
 80a2446:	4b02      	ldr	r3, [pc, #8]	; (80a2450 <HAL_GPIO_Write+0xc>)
 80a2448:	681b      	ldr	r3, [r3, #0]
 80a244a:	691b      	ldr	r3, [r3, #16]
 80a244c:	9301      	str	r3, [sp, #4]
 80a244e:	bd08      	pop	{r3, pc}
 80a2450:	080601b0 	.word	0x080601b0

080a2454 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a2454:	b508      	push	{r3, lr}
 80a2456:	4b02      	ldr	r3, [pc, #8]	; (80a2460 <HAL_DAC_Write+0xc>)
 80a2458:	681b      	ldr	r3, [r3, #0]
 80a245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a245c:	9301      	str	r3, [sp, #4]
 80a245e:	bd08      	pop	{r3, pc}
 80a2460:	080601b0 	.word	0x080601b0

080a2464 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a2464:	b508      	push	{r3, lr}
 80a2466:	4b02      	ldr	r3, [pc, #8]	; (80a2470 <HAL_PWM_Write_Ext+0xc>)
 80a2468:	681b      	ldr	r3, [r3, #0]
 80a246a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a246c:	9301      	str	r3, [sp, #4]
 80a246e:	bd08      	pop	{r3, pc}
 80a2470:	080601b0 	.word	0x080601b0

080a2474 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2474:	b508      	push	{r3, lr}
 80a2476:	4b02      	ldr	r3, [pc, #8]	; (80a2480 <HAL_I2C_Begin+0xc>)
 80a2478:	681b      	ldr	r3, [r3, #0]
 80a247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a247c:	9301      	str	r3, [sp, #4]
 80a247e:	bd08      	pop	{r3, pc}
 80a2480:	080601ac 	.word	0x080601ac

080a2484 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2484:	b508      	push	{r3, lr}
 80a2486:	4b02      	ldr	r3, [pc, #8]	; (80a2490 <HAL_I2C_Request_Data+0xc>)
 80a2488:	681b      	ldr	r3, [r3, #0]
 80a248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a248c:	9301      	str	r3, [sp, #4]
 80a248e:	bd08      	pop	{r3, pc}
 80a2490:	080601ac 	.word	0x080601ac

080a2494 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2494:	b508      	push	{r3, lr}
 80a2496:	4b02      	ldr	r3, [pc, #8]	; (80a24a0 <HAL_I2C_Begin_Transmission+0xc>)
 80a2498:	681b      	ldr	r3, [r3, #0]
 80a249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a249c:	9301      	str	r3, [sp, #4]
 80a249e:	bd08      	pop	{r3, pc}
 80a24a0:	080601ac 	.word	0x080601ac

080a24a4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a24a4:	b508      	push	{r3, lr}
 80a24a6:	4b02      	ldr	r3, [pc, #8]	; (80a24b0 <HAL_I2C_End_Transmission+0xc>)
 80a24a8:	681b      	ldr	r3, [r3, #0]
 80a24aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a24ac:	9301      	str	r3, [sp, #4]
 80a24ae:	bd08      	pop	{r3, pc}
 80a24b0:	080601ac 	.word	0x080601ac

080a24b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a24b4:	b508      	push	{r3, lr}
 80a24b6:	4b02      	ldr	r3, [pc, #8]	; (80a24c0 <HAL_I2C_Write_Data+0xc>)
 80a24b8:	681b      	ldr	r3, [r3, #0]
 80a24ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a24bc:	9301      	str	r3, [sp, #4]
 80a24be:	bd08      	pop	{r3, pc}
 80a24c0:	080601ac 	.word	0x080601ac

080a24c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a24c4:	b508      	push	{r3, lr}
 80a24c6:	4b02      	ldr	r3, [pc, #8]	; (80a24d0 <HAL_I2C_Available_Data+0xc>)
 80a24c8:	681b      	ldr	r3, [r3, #0]
 80a24ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a24cc:	9301      	str	r3, [sp, #4]
 80a24ce:	bd08      	pop	{r3, pc}
 80a24d0:	080601ac 	.word	0x080601ac

080a24d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a24d4:	b508      	push	{r3, lr}
 80a24d6:	4b02      	ldr	r3, [pc, #8]	; (80a24e0 <HAL_I2C_Read_Data+0xc>)
 80a24d8:	681b      	ldr	r3, [r3, #0]
 80a24da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a24dc:	9301      	str	r3, [sp, #4]
 80a24de:	bd08      	pop	{r3, pc}
 80a24e0:	080601ac 	.word	0x080601ac

080a24e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a24e4:	b508      	push	{r3, lr}
 80a24e6:	4b02      	ldr	r3, [pc, #8]	; (80a24f0 <HAL_I2C_Peek_Data+0xc>)
 80a24e8:	681b      	ldr	r3, [r3, #0]
 80a24ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a24ec:	9301      	str	r3, [sp, #4]
 80a24ee:	bd08      	pop	{r3, pc}
 80a24f0:	080601ac 	.word	0x080601ac

080a24f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a24f4:	b508      	push	{r3, lr}
 80a24f6:	4b02      	ldr	r3, [pc, #8]	; (80a2500 <HAL_I2C_Flush_Data+0xc>)
 80a24f8:	681b      	ldr	r3, [r3, #0]
 80a24fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a24fc:	9301      	str	r3, [sp, #4]
 80a24fe:	bd08      	pop	{r3, pc}
 80a2500:	080601ac 	.word	0x080601ac

080a2504 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2504:	b508      	push	{r3, lr}
 80a2506:	4b02      	ldr	r3, [pc, #8]	; (80a2510 <HAL_I2C_Is_Enabled+0xc>)
 80a2508:	681b      	ldr	r3, [r3, #0]
 80a250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a250c:	9301      	str	r3, [sp, #4]
 80a250e:	bd08      	pop	{r3, pc}
 80a2510:	080601ac 	.word	0x080601ac

080a2514 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2514:	b508      	push	{r3, lr}
 80a2516:	4b03      	ldr	r3, [pc, #12]	; (80a2524 <HAL_I2C_Init+0x10>)
 80a2518:	681b      	ldr	r3, [r3, #0]
 80a251a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a251e:	9301      	str	r3, [sp, #4]
 80a2520:	bd08      	pop	{r3, pc}
 80a2522:	0000      	.short	0x0000
 80a2524:	080601ac 	.word	0x080601ac

080a2528 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2528:	b508      	push	{r3, lr}
 80a252a:	4b02      	ldr	r3, [pc, #8]	; (80a2534 <socket_handle_valid+0xc>)
 80a252c:	681b      	ldr	r3, [r3, #0]
 80a252e:	685b      	ldr	r3, [r3, #4]
 80a2530:	9301      	str	r3, [sp, #4]
 80a2532:	bd08      	pop	{r3, pc}
 80a2534:	080601bc 	.word	0x080601bc

080a2538 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2538:	b508      	push	{r3, lr}
 80a253a:	4b02      	ldr	r3, [pc, #8]	; (80a2544 <socket_create+0xc>)
 80a253c:	681b      	ldr	r3, [r3, #0]
 80a253e:	689b      	ldr	r3, [r3, #8]
 80a2540:	9301      	str	r3, [sp, #4]
 80a2542:	bd08      	pop	{r3, pc}
 80a2544:	080601bc 	.word	0x080601bc

080a2548 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a2548:	b508      	push	{r3, lr}
 80a254a:	4b02      	ldr	r3, [pc, #8]	; (80a2554 <socket_receivefrom+0xc>)
 80a254c:	681b      	ldr	r3, [r3, #0]
 80a254e:	695b      	ldr	r3, [r3, #20]
 80a2550:	9301      	str	r3, [sp, #4]
 80a2552:	bd08      	pop	{r3, pc}
 80a2554:	080601bc 	.word	0x080601bc

080a2558 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a2558:	b508      	push	{r3, lr}
 80a255a:	4b02      	ldr	r3, [pc, #8]	; (80a2564 <socket_sendto+0xc>)
 80a255c:	681b      	ldr	r3, [r3, #0]
 80a255e:	69db      	ldr	r3, [r3, #28]
 80a2560:	9301      	str	r3, [sp, #4]
 80a2562:	bd08      	pop	{r3, pc}
 80a2564:	080601bc 	.word	0x080601bc

080a2568 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2568:	b508      	push	{r3, lr}
 80a256a:	4b02      	ldr	r3, [pc, #8]	; (80a2574 <socket_close+0xc>)
 80a256c:	681b      	ldr	r3, [r3, #0]
 80a256e:	6a1b      	ldr	r3, [r3, #32]
 80a2570:	9301      	str	r3, [sp, #4]
 80a2572:	bd08      	pop	{r3, pc}
 80a2574:	080601bc 	.word	0x080601bc

080a2578 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2578:	b508      	push	{r3, lr}
 80a257a:	4b02      	ldr	r3, [pc, #8]	; (80a2584 <socket_handle_invalid+0xc>)
 80a257c:	681b      	ldr	r3, [r3, #0]
 80a257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2580:	9301      	str	r3, [sp, #4]
 80a2582:	bd08      	pop	{r3, pc}
 80a2584:	080601bc 	.word	0x080601bc

080a2588 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2588:	b508      	push	{r3, lr}
 80a258a:	4b02      	ldr	r3, [pc, #8]	; (80a2594 <HAL_SPI_Begin+0xc>)
 80a258c:	681b      	ldr	r3, [r3, #0]
 80a258e:	681b      	ldr	r3, [r3, #0]
 80a2590:	9301      	str	r3, [sp, #4]
 80a2592:	bd08      	pop	{r3, pc}
 80a2594:	080601b4 	.word	0x080601b4

080a2598 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2598:	b508      	push	{r3, lr}
 80a259a:	4b02      	ldr	r3, [pc, #8]	; (80a25a4 <HAL_SPI_Set_Bit_Order+0xc>)
 80a259c:	681b      	ldr	r3, [r3, #0]
 80a259e:	689b      	ldr	r3, [r3, #8]
 80a25a0:	9301      	str	r3, [sp, #4]
 80a25a2:	bd08      	pop	{r3, pc}
 80a25a4:	080601b4 	.word	0x080601b4

080a25a8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a25a8:	b508      	push	{r3, lr}
 80a25aa:	4b02      	ldr	r3, [pc, #8]	; (80a25b4 <HAL_SPI_Set_Data_Mode+0xc>)
 80a25ac:	681b      	ldr	r3, [r3, #0]
 80a25ae:	68db      	ldr	r3, [r3, #12]
 80a25b0:	9301      	str	r3, [sp, #4]
 80a25b2:	bd08      	pop	{r3, pc}
 80a25b4:	080601b4 	.word	0x080601b4

080a25b8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a25b8:	b508      	push	{r3, lr}
 80a25ba:	4b02      	ldr	r3, [pc, #8]	; (80a25c4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a25bc:	681b      	ldr	r3, [r3, #0]
 80a25be:	691b      	ldr	r3, [r3, #16]
 80a25c0:	9301      	str	r3, [sp, #4]
 80a25c2:	bd08      	pop	{r3, pc}
 80a25c4:	080601b4 	.word	0x080601b4

080a25c8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a25c8:	b508      	push	{r3, lr}
 80a25ca:	4b02      	ldr	r3, [pc, #8]	; (80a25d4 <HAL_SPI_Send_Receive_Data+0xc>)
 80a25cc:	681b      	ldr	r3, [r3, #0]
 80a25ce:	695b      	ldr	r3, [r3, #20]
 80a25d0:	9301      	str	r3, [sp, #4]
 80a25d2:	bd08      	pop	{r3, pc}
 80a25d4:	080601b4 	.word	0x080601b4

080a25d8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a25d8:	b508      	push	{r3, lr}
 80a25da:	4b02      	ldr	r3, [pc, #8]	; (80a25e4 <HAL_SPI_Init+0xc>)
 80a25dc:	681b      	ldr	r3, [r3, #0]
 80a25de:	69db      	ldr	r3, [r3, #28]
 80a25e0:	9301      	str	r3, [sp, #4]
 80a25e2:	bd08      	pop	{r3, pc}
 80a25e4:	080601b4 	.word	0x080601b4

080a25e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a25e8:	b508      	push	{r3, lr}
 80a25ea:	4b02      	ldr	r3, [pc, #8]	; (80a25f4 <HAL_SPI_Is_Enabled+0xc>)
 80a25ec:	681b      	ldr	r3, [r3, #0]
 80a25ee:	6a1b      	ldr	r3, [r3, #32]
 80a25f0:	9301      	str	r3, [sp, #4]
 80a25f2:	bd08      	pop	{r3, pc}
 80a25f4:	080601b4 	.word	0x080601b4

080a25f8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a25f8:	b508      	push	{r3, lr}
 80a25fa:	4b02      	ldr	r3, [pc, #8]	; (80a2604 <HAL_SPI_Info+0xc>)
 80a25fc:	681b      	ldr	r3, [r3, #0]
 80a25fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2600:	9301      	str	r3, [sp, #4]
 80a2602:	bd08      	pop	{r3, pc}
 80a2604:	080601b4 	.word	0x080601b4

080a2608 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2608:	b508      	push	{r3, lr}
 80a260a:	4b02      	ldr	r3, [pc, #8]	; (80a2614 <HAL_USART_Init+0xc>)
 80a260c:	681b      	ldr	r3, [r3, #0]
 80a260e:	699b      	ldr	r3, [r3, #24]
 80a2610:	9301      	str	r3, [sp, #4]
 80a2612:	bd08      	pop	{r3, pc}
 80a2614:	080601c4 	.word	0x080601c4

080a2618 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2618:	b508      	push	{r3, lr}
 80a261a:	4b02      	ldr	r3, [pc, #8]	; (80a2624 <HAL_USART_Write_Data+0xc>)
 80a261c:	681b      	ldr	r3, [r3, #0]
 80a261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2620:	9301      	str	r3, [sp, #4]
 80a2622:	bd08      	pop	{r3, pc}
 80a2624:	080601c4 	.word	0x080601c4

080a2628 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2628:	b508      	push	{r3, lr}
 80a262a:	4b02      	ldr	r3, [pc, #8]	; (80a2634 <HAL_USART_Available_Data+0xc>)
 80a262c:	681b      	ldr	r3, [r3, #0]
 80a262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2630:	9301      	str	r3, [sp, #4]
 80a2632:	bd08      	pop	{r3, pc}
 80a2634:	080601c4 	.word	0x080601c4

080a2638 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2638:	b508      	push	{r3, lr}
 80a263a:	4b02      	ldr	r3, [pc, #8]	; (80a2644 <HAL_USART_Read_Data+0xc>)
 80a263c:	681b      	ldr	r3, [r3, #0]
 80a263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2640:	9301      	str	r3, [sp, #4]
 80a2642:	bd08      	pop	{r3, pc}
 80a2644:	080601c4 	.word	0x080601c4

080a2648 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2648:	b508      	push	{r3, lr}
 80a264a:	4b02      	ldr	r3, [pc, #8]	; (80a2654 <HAL_USART_Peek_Data+0xc>)
 80a264c:	681b      	ldr	r3, [r3, #0]
 80a264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2650:	9301      	str	r3, [sp, #4]
 80a2652:	bd08      	pop	{r3, pc}
 80a2654:	080601c4 	.word	0x080601c4

080a2658 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2658:	b508      	push	{r3, lr}
 80a265a:	4b02      	ldr	r3, [pc, #8]	; (80a2664 <HAL_USART_Flush_Data+0xc>)
 80a265c:	681b      	ldr	r3, [r3, #0]
 80a265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2660:	9301      	str	r3, [sp, #4]
 80a2662:	bd08      	pop	{r3, pc}
 80a2664:	080601c4 	.word	0x080601c4

080a2668 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2668:	b508      	push	{r3, lr}
 80a266a:	4b02      	ldr	r3, [pc, #8]	; (80a2674 <HAL_USART_Is_Enabled+0xc>)
 80a266c:	681b      	ldr	r3, [r3, #0]
 80a266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2670:	9301      	str	r3, [sp, #4]
 80a2672:	bd08      	pop	{r3, pc}
 80a2674:	080601c4 	.word	0x080601c4

080a2678 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2678:	b508      	push	{r3, lr}
 80a267a:	4b02      	ldr	r3, [pc, #8]	; (80a2684 <HAL_USART_Available_Data_For_Write+0xc>)
 80a267c:	681b      	ldr	r3, [r3, #0]
 80a267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2680:	9301      	str	r3, [sp, #4]
 80a2682:	bd08      	pop	{r3, pc}
 80a2684:	080601c4 	.word	0x080601c4

080a2688 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2688:	b508      	push	{r3, lr}
 80a268a:	4b02      	ldr	r3, [pc, #8]	; (80a2694 <HAL_USB_USART_Init+0xc>)
 80a268c:	681b      	ldr	r3, [r3, #0]
 80a268e:	681b      	ldr	r3, [r3, #0]
 80a2690:	9301      	str	r3, [sp, #4]
 80a2692:	bd08      	pop	{r3, pc}
 80a2694:	080601d8 	.word	0x080601d8

080a2698 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2698:	b508      	push	{r3, lr}
 80a269a:	4b02      	ldr	r3, [pc, #8]	; (80a26a4 <HAL_USB_USART_Begin+0xc>)
 80a269c:	681b      	ldr	r3, [r3, #0]
 80a269e:	685b      	ldr	r3, [r3, #4]
 80a26a0:	9301      	str	r3, [sp, #4]
 80a26a2:	bd08      	pop	{r3, pc}
 80a26a4:	080601d8 	.word	0x080601d8

080a26a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a26a8:	b508      	push	{r3, lr}
 80a26aa:	4b02      	ldr	r3, [pc, #8]	; (80a26b4 <HAL_USB_USART_Available_Data+0xc>)
 80a26ac:	681b      	ldr	r3, [r3, #0]
 80a26ae:	691b      	ldr	r3, [r3, #16]
 80a26b0:	9301      	str	r3, [sp, #4]
 80a26b2:	bd08      	pop	{r3, pc}
 80a26b4:	080601d8 	.word	0x080601d8

080a26b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a26b8:	b508      	push	{r3, lr}
 80a26ba:	4b02      	ldr	r3, [pc, #8]	; (80a26c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a26bc:	681b      	ldr	r3, [r3, #0]
 80a26be:	695b      	ldr	r3, [r3, #20]
 80a26c0:	9301      	str	r3, [sp, #4]
 80a26c2:	bd08      	pop	{r3, pc}
 80a26c4:	080601d8 	.word	0x080601d8

080a26c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a26c8:	b508      	push	{r3, lr}
 80a26ca:	4b02      	ldr	r3, [pc, #8]	; (80a26d4 <HAL_USB_USART_Receive_Data+0xc>)
 80a26cc:	681b      	ldr	r3, [r3, #0]
 80a26ce:	699b      	ldr	r3, [r3, #24]
 80a26d0:	9301      	str	r3, [sp, #4]
 80a26d2:	bd08      	pop	{r3, pc}
 80a26d4:	080601d8 	.word	0x080601d8

080a26d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a26d8:	b508      	push	{r3, lr}
 80a26da:	4b02      	ldr	r3, [pc, #8]	; (80a26e4 <HAL_USB_USART_Send_Data+0xc>)
 80a26dc:	681b      	ldr	r3, [r3, #0]
 80a26de:	69db      	ldr	r3, [r3, #28]
 80a26e0:	9301      	str	r3, [sp, #4]
 80a26e2:	bd08      	pop	{r3, pc}
 80a26e4:	080601d8 	.word	0x080601d8

080a26e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a26e8:	b508      	push	{r3, lr}
 80a26ea:	4b02      	ldr	r3, [pc, #8]	; (80a26f4 <HAL_USB_USART_Flush_Data+0xc>)
 80a26ec:	681b      	ldr	r3, [r3, #0]
 80a26ee:	6a1b      	ldr	r3, [r3, #32]
 80a26f0:	9301      	str	r3, [sp, #4]
 80a26f2:	bd08      	pop	{r3, pc}
 80a26f4:	080601d8 	.word	0x080601d8

080a26f8 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a26f8:	b508      	push	{r3, lr}
 80a26fa:	4b02      	ldr	r3, [pc, #8]	; (80a2704 <HAL_USB_USART_Is_Enabled+0xc>)
 80a26fc:	681b      	ldr	r3, [r3, #0]
 80a26fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2700:	9301      	str	r3, [sp, #4]
 80a2702:	bd08      	pop	{r3, pc}
 80a2704:	080601d8 	.word	0x080601d8

080a2708 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2708:	b508      	push	{r3, lr}
 80a270a:	4b02      	ldr	r3, [pc, #8]	; (80a2714 <inet_gethostbyname+0xc>)
 80a270c:	681b      	ldr	r3, [r3, #0]
 80a270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2710:	9301      	str	r3, [sp, #4]
 80a2712:	bd08      	pop	{r3, pc}
 80a2714:	080601c0 	.word	0x080601c0

080a2718 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2718:	b508      	push	{r3, lr}
 80a271a:	4b02      	ldr	r3, [pc, #8]	; (80a2724 <set_system_mode+0xc>)
 80a271c:	681b      	ldr	r3, [r3, #0]
 80a271e:	685b      	ldr	r3, [r3, #4]
 80a2720:	9301      	str	r3, [sp, #4]
 80a2722:	bd08      	pop	{r3, pc}
 80a2724:	080601a4 	.word	0x080601a4

080a2728 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2728:	b508      	push	{r3, lr}
 80a272a:	4b02      	ldr	r3, [pc, #8]	; (80a2734 <system_thread_set_state+0xc>)
 80a272c:	681b      	ldr	r3, [r3, #0]
 80a272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2730:	9301      	str	r3, [sp, #4]
 80a2732:	bd08      	pop	{r3, pc}
 80a2734:	080601a4 	.word	0x080601a4

080a2738 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2738:	b508      	push	{r3, lr}
 80a273a:	4b03      	ldr	r3, [pc, #12]	; (80a2748 <system_ctrl_set_app_request_handler+0x10>)
 80a273c:	681b      	ldr	r3, [r3, #0]
 80a273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2742:	9301      	str	r3, [sp, #4]
 80a2744:	bd08      	pop	{r3, pc}
 80a2746:	0000      	.short	0x0000
 80a2748:	080601a4 	.word	0x080601a4

080a274c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a274c:	b508      	push	{r3, lr}
 80a274e:	4b03      	ldr	r3, [pc, #12]	; (80a275c <system_ctrl_set_result+0x10>)
 80a2750:	681b      	ldr	r3, [r3, #0]
 80a2752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2756:	9301      	str	r3, [sp, #4]
 80a2758:	bd08      	pop	{r3, pc}
 80a275a:	0000      	.short	0x0000
 80a275c:	080601a4 	.word	0x080601a4

080a2760 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2760:	b508      	push	{r3, lr}
 80a2762:	4b02      	ldr	r3, [pc, #8]	; (80a276c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2764:	681b      	ldr	r3, [r3, #0]
 80a2766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2768:	9301      	str	r3, [sp, #4]
 80a276a:	bd08      	pop	{r3, pc}
 80a276c:	080601cc 	.word	0x080601cc

080a2770 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a2770:	b508      	push	{r3, lr}
 80a2772:	4b02      	ldr	r3, [pc, #8]	; (80a277c <network_config+0xc>)
 80a2774:	681b      	ldr	r3, [r3, #0]
 80a2776:	681b      	ldr	r3, [r3, #0]
 80a2778:	9301      	str	r3, [sp, #4]
 80a277a:	bd08      	pop	{r3, pc}
 80a277c:	080601c8 	.word	0x080601c8

080a2780 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2780:	b508      	push	{r3, lr}
 80a2782:	4b02      	ldr	r3, [pc, #8]	; (80a278c <network_connect+0xc>)
 80a2784:	681b      	ldr	r3, [r3, #0]
 80a2786:	685b      	ldr	r3, [r3, #4]
 80a2788:	9301      	str	r3, [sp, #4]
 80a278a:	bd08      	pop	{r3, pc}
 80a278c:	080601c8 	.word	0x080601c8

080a2790 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2790:	b508      	push	{r3, lr}
 80a2792:	4b02      	ldr	r3, [pc, #8]	; (80a279c <network_connecting+0xc>)
 80a2794:	681b      	ldr	r3, [r3, #0]
 80a2796:	689b      	ldr	r3, [r3, #8]
 80a2798:	9301      	str	r3, [sp, #4]
 80a279a:	bd08      	pop	{r3, pc}
 80a279c:	080601c8 	.word	0x080601c8

080a27a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a27a0:	b508      	push	{r3, lr}
 80a27a2:	4b02      	ldr	r3, [pc, #8]	; (80a27ac <network_disconnect+0xc>)
 80a27a4:	681b      	ldr	r3, [r3, #0]
 80a27a6:	68db      	ldr	r3, [r3, #12]
 80a27a8:	9301      	str	r3, [sp, #4]
 80a27aa:	bd08      	pop	{r3, pc}
 80a27ac:	080601c8 	.word	0x080601c8

080a27b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a27b0:	b508      	push	{r3, lr}
 80a27b2:	4b02      	ldr	r3, [pc, #8]	; (80a27bc <network_ready+0xc>)
 80a27b4:	681b      	ldr	r3, [r3, #0]
 80a27b6:	691b      	ldr	r3, [r3, #16]
 80a27b8:	9301      	str	r3, [sp, #4]
 80a27ba:	bd08      	pop	{r3, pc}
 80a27bc:	080601c8 	.word	0x080601c8

080a27c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a27c0:	b508      	push	{r3, lr}
 80a27c2:	4b02      	ldr	r3, [pc, #8]	; (80a27cc <network_on+0xc>)
 80a27c4:	681b      	ldr	r3, [r3, #0]
 80a27c6:	695b      	ldr	r3, [r3, #20]
 80a27c8:	9301      	str	r3, [sp, #4]
 80a27ca:	bd08      	pop	{r3, pc}
 80a27cc:	080601c8 	.word	0x080601c8

080a27d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a27d0:	b508      	push	{r3, lr}
 80a27d2:	4b02      	ldr	r3, [pc, #8]	; (80a27dc <network_off+0xc>)
 80a27d4:	681b      	ldr	r3, [r3, #0]
 80a27d6:	699b      	ldr	r3, [r3, #24]
 80a27d8:	9301      	str	r3, [sp, #4]
 80a27da:	bd08      	pop	{r3, pc}
 80a27dc:	080601c8 	.word	0x080601c8

080a27e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a27e0:	b508      	push	{r3, lr}
 80a27e2:	4b02      	ldr	r3, [pc, #8]	; (80a27ec <network_listen+0xc>)
 80a27e4:	681b      	ldr	r3, [r3, #0]
 80a27e6:	69db      	ldr	r3, [r3, #28]
 80a27e8:	9301      	str	r3, [sp, #4]
 80a27ea:	bd08      	pop	{r3, pc}
 80a27ec:	080601c8 	.word	0x080601c8

080a27f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a27f0:	b508      	push	{r3, lr}
 80a27f2:	4b02      	ldr	r3, [pc, #8]	; (80a27fc <network_listening+0xc>)
 80a27f4:	681b      	ldr	r3, [r3, #0]
 80a27f6:	6a1b      	ldr	r3, [r3, #32]
 80a27f8:	9301      	str	r3, [sp, #4]
 80a27fa:	bd08      	pop	{r3, pc}
 80a27fc:	080601c8 	.word	0x080601c8

080a2800 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2800:	b508      	push	{r3, lr}
 80a2802:	4b02      	ldr	r3, [pc, #8]	; (80a280c <network_set_listen_timeout+0xc>)
 80a2804:	681b      	ldr	r3, [r3, #0]
 80a2806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2808:	9301      	str	r3, [sp, #4]
 80a280a:	bd08      	pop	{r3, pc}
 80a280c:	080601c8 	.word	0x080601c8

080a2810 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2810:	b508      	push	{r3, lr}
 80a2812:	4b02      	ldr	r3, [pc, #8]	; (80a281c <network_get_listen_timeout+0xc>)
 80a2814:	681b      	ldr	r3, [r3, #0]
 80a2816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2818:	9301      	str	r3, [sp, #4]
 80a281a:	bd08      	pop	{r3, pc}
 80a281c:	080601c8 	.word	0x080601c8

080a2820 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a2820:	b508      	push	{r3, lr}
 80a2822:	4b02      	ldr	r3, [pc, #8]	; (80a282c <network_set_hostname+0xc>)
 80a2824:	681b      	ldr	r3, [r3, #0]
 80a2826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2828:	9301      	str	r3, [sp, #4]
 80a282a:	bd08      	pop	{r3, pc}
 80a282c:	080601c8 	.word	0x080601c8

080a2830 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a2830:	b508      	push	{r3, lr}
 80a2832:	4b02      	ldr	r3, [pc, #8]	; (80a283c <network_get_hostname+0xc>)
 80a2834:	681b      	ldr	r3, [r3, #0]
 80a2836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2838:	9301      	str	r3, [sp, #4]
 80a283a:	bd08      	pop	{r3, pc}
 80a283c:	080601c8 	.word	0x080601c8

080a2840 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2840:	b508      	push	{r3, lr}
 80a2842:	4b02      	ldr	r3, [pc, #8]	; (80a284c <malloc+0xc>)
 80a2844:	681b      	ldr	r3, [r3, #0]
 80a2846:	681b      	ldr	r3, [r3, #0]
 80a2848:	9301      	str	r3, [sp, #4]
 80a284a:	bd08      	pop	{r3, pc}
 80a284c:	080601a0 	.word	0x080601a0

080a2850 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2850:	b508      	push	{r3, lr}
 80a2852:	4b02      	ldr	r3, [pc, #8]	; (80a285c <free+0xc>)
 80a2854:	681b      	ldr	r3, [r3, #0]
 80a2856:	685b      	ldr	r3, [r3, #4]
 80a2858:	9301      	str	r3, [sp, #4]
 80a285a:	bd08      	pop	{r3, pc}
 80a285c:	080601a0 	.word	0x080601a0

080a2860 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2860:	b508      	push	{r3, lr}
 80a2862:	4b02      	ldr	r3, [pc, #8]	; (80a286c <realloc+0xc>)
 80a2864:	681b      	ldr	r3, [r3, #0]
 80a2866:	689b      	ldr	r3, [r3, #8]
 80a2868:	9301      	str	r3, [sp, #4]
 80a286a:	bd08      	pop	{r3, pc}
 80a286c:	080601a0 	.word	0x080601a0

080a2870 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2870:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2872:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2874:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2876:	b113      	cbz	r3, 80a287e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2878:	2203      	movs	r2, #3
 80a287a:	4601      	mov	r1, r0
 80a287c:	4798      	blx	r3
    }
 80a287e:	4620      	mov	r0, r4
 80a2880:	bd10      	pop	{r4, pc}

080a2882 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2882:	4770      	bx	lr

080a2884 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2886:	4606      	mov	r6, r0
 80a2888:	4615      	mov	r5, r2
 80a288a:	460c      	mov	r4, r1
 80a288c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a288e:	42bc      	cmp	r4, r7
 80a2890:	d006      	beq.n	80a28a0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2892:	6833      	ldr	r3, [r6, #0]
 80a2894:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2898:	689b      	ldr	r3, [r3, #8]
 80a289a:	4630      	mov	r0, r6
 80a289c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a289e:	e7f6      	b.n	80a288e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a28a0:	4628      	mov	r0, r5
 80a28a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28a4 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a28a4:	2200      	movs	r2, #0
 80a28a6:	7c00      	ldrb	r0, [r0, #16]
 80a28a8:	f7ff be04 	b.w	80a24b4 <HAL_I2C_Write_Data>

080a28ac <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a28ac:	2100      	movs	r1, #0
 80a28ae:	7c00      	ldrb	r0, [r0, #16]
 80a28b0:	f7ff be08 	b.w	80a24c4 <HAL_I2C_Available_Data>

080a28b4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a28b4:	2100      	movs	r1, #0
 80a28b6:	7c00      	ldrb	r0, [r0, #16]
 80a28b8:	f7ff be0c 	b.w	80a24d4 <HAL_I2C_Read_Data>

080a28bc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a28bc:	2100      	movs	r1, #0
 80a28be:	7c00      	ldrb	r0, [r0, #16]
 80a28c0:	f7ff be10 	b.w	80a24e4 <HAL_I2C_Peek_Data>

080a28c4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a28c4:	2100      	movs	r1, #0
 80a28c6:	7c00      	ldrb	r0, [r0, #16]
 80a28c8:	f7ff be14 	b.w	80a24f4 <HAL_I2C_Flush_Data>

080a28cc <_ZN7TwoWireD0Ev>:
 80a28cc:	b510      	push	{r4, lr}
 80a28ce:	4604      	mov	r4, r0
 80a28d0:	2114      	movs	r1, #20
 80a28d2:	f001 f8b0 	bl	80a3a36 <_ZdlPvj>
 80a28d6:	4620      	mov	r0, r4
 80a28d8:	bd10      	pop	{r4, pc}
	...

080a28dc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a28dc:	b510      	push	{r4, lr}
 80a28de:	4604      	mov	r4, r0
 80a28e0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a28e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a28e6:	60a3      	str	r3, [r4, #8]
 80a28e8:	4b04      	ldr	r3, [pc, #16]	; (80a28fc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a28ea:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a28ec:	7420      	strb	r0, [r4, #16]
 80a28ee:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a28f0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a28f2:	f7ff fe0f 	bl	80a2514 <HAL_I2C_Init>

}
 80a28f6:	4620      	mov	r0, r4
 80a28f8:	bd10      	pop	{r4, pc}
 80a28fa:	bf00      	nop
 80a28fc:	080a4d88 	.word	0x080a4d88

080a2900 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2900:	2300      	movs	r3, #0
 80a2902:	461a      	mov	r2, r3
 80a2904:	4619      	mov	r1, r3
 80a2906:	7c00      	ldrb	r0, [r0, #16]
 80a2908:	f7ff bdb4 	b.w	80a2474 <HAL_I2C_Begin>

080a290c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a290c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a290e:	2400      	movs	r4, #0
 80a2910:	7c00      	ldrb	r0, [r0, #16]
 80a2912:	9400      	str	r4, [sp, #0]
 80a2914:	f7ff fdb6 	bl	80a2484 <HAL_I2C_Request_Data>
  return result;
}
 80a2918:	b2c0      	uxtb	r0, r0
 80a291a:	b002      	add	sp, #8
 80a291c:	bd10      	pop	{r4, pc}

080a291e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a291e:	2301      	movs	r3, #1
 80a2920:	f7ff bff4 	b.w	80a290c <_ZN7TwoWire11requestFromEhhh>

080a2924 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2924:	2200      	movs	r2, #0
 80a2926:	7c00      	ldrb	r0, [r0, #16]
 80a2928:	f7ff bdb4 	b.w	80a2494 <HAL_I2C_Begin_Transmission>

080a292c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a292c:	2200      	movs	r2, #0
 80a292e:	7c00      	ldrb	r0, [r0, #16]
 80a2930:	f7ff bdb8 	b.w	80a24a4 <HAL_I2C_End_Transmission>

080a2934 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2934:	2101      	movs	r1, #1
 80a2936:	f7ff bff9 	b.w	80a292c <_ZN7TwoWire15endTransmissionEh>

080a293a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a293a:	2100      	movs	r1, #0
 80a293c:	7c00      	ldrb	r0, [r0, #16]
 80a293e:	f7ff bde1 	b.w	80a2504 <HAL_I2C_Is_Enabled>

080a2942 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2944:	460f      	mov	r7, r1
 80a2946:	f100 0608 	add.w	r6, r0, #8
 80a294a:	1d05      	adds	r5, r0, #4
 80a294c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a294e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2952:	220a      	movs	r2, #10
 80a2954:	4638      	mov	r0, r7
 80a2956:	f000 f952 	bl	80a2bfe <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a295a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a295c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a295e:	d007      	beq.n	80a2970 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2960:	2c00      	cmp	r4, #0
 80a2962:	d0f4      	beq.n	80a294e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2964:	212e      	movs	r1, #46	; 0x2e
 80a2966:	4638      	mov	r0, r7
 80a2968:	f000 f8f6 	bl	80a2b58 <_ZN5Print5printEc>
 80a296c:	4404      	add	r4, r0
 80a296e:	e7ee      	b.n	80a294e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2970:	4620      	mov	r0, r4
 80a2972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2974 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2974:	b510      	push	{r4, lr}
 80a2976:	4604      	mov	r4, r0
 80a2978:	4b04      	ldr	r3, [pc, #16]	; (80a298c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a297a:	2211      	movs	r2, #17
 80a297c:	f840 3b04 	str.w	r3, [r0], #4
 80a2980:	2100      	movs	r1, #0
 80a2982:	f002 f8f0 	bl	80a4b66 <memset>
{
    clear();
}
 80a2986:	4620      	mov	r0, r4
 80a2988:	bd10      	pop	{r4, pc}
 80a298a:	bf00      	nop
 80a298c:	080a4db0 	.word	0x080a4db0

080a2990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2990:	4603      	mov	r3, r0
 80a2992:	4a07      	ldr	r2, [pc, #28]	; (80a29b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2994:	b510      	push	{r4, lr}
 80a2996:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a299a:	f101 0210 	add.w	r2, r1, #16
 80a299e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a29a2:	4291      	cmp	r1, r2
 80a29a4:	f843 4b04 	str.w	r4, [r3], #4
 80a29a8:	d1f9      	bne.n	80a299e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a29aa:	780a      	ldrb	r2, [r1, #0]
 80a29ac:	701a      	strb	r2, [r3, #0]
}
 80a29ae:	bd10      	pop	{r4, pc}
 80a29b0:	080a4db0 	.word	0x080a4db0

080a29b4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a29b4:	4a02      	ldr	r2, [pc, #8]	; (80a29c0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a29b6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a29b8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a29ba:	2204      	movs	r2, #4
 80a29bc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a29be:	4770      	bx	lr
 80a29c0:	080a4db0 	.word	0x080a4db0

080a29c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a29c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a29c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a29ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a29ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a29d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a29d6:	2304      	movs	r3, #4
 80a29d8:	6041      	str	r1, [r0, #4]
 80a29da:	7503      	strb	r3, [r0, #20]
 80a29dc:	bd10      	pop	{r4, pc}
	...

080a29e0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a29e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a29e2:	4d04      	ldr	r5, [pc, #16]	; (80a29f4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a29e4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a29e6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a29ea:	9500      	str	r5, [sp, #0]
 80a29ec:	f7ff ffea 	bl	80a29c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a29f0:	b003      	add	sp, #12
 80a29f2:	bd30      	pop	{r4, r5, pc}
 80a29f4:	080a4db0 	.word	0x080a4db0

080a29f8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a29f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a29fa:	780d      	ldrb	r5, [r1, #0]
 80a29fc:	788b      	ldrb	r3, [r1, #2]
 80a29fe:	784a      	ldrb	r2, [r1, #1]
 80a2a00:	78c9      	ldrb	r1, [r1, #3]
 80a2a02:	9100      	str	r1, [sp, #0]
 80a2a04:	4629      	mov	r1, r5
 80a2a06:	f7ff ffdd 	bl	80a29c4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a2a0a:	b003      	add	sp, #12
 80a2a0c:	bd30      	pop	{r4, r5, pc}
	...

080a2a10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2a10:	4a01      	ldr	r2, [pc, #4]	; (80a2a18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2a12:	4b02      	ldr	r3, [pc, #8]	; (80a2a1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2a14:	601a      	str	r2, [r3, #0]
 80a2a16:	4770      	bx	lr
 80a2a18:	080a4e32 	.word	0x080a4e32
 80a2a1c:	20000204 	.word	0x20000204

080a2a20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2a20:	2300      	movs	r3, #0
 80a2a22:	461a      	mov	r2, r3
 80a2a24:	6840      	ldr	r0, [r0, #4]
 80a2a26:	f7ff beab 	b.w	80a2780 <network_connect>

080a2a2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2a2a:	2200      	movs	r2, #0
 80a2a2c:	2102      	movs	r1, #2
 80a2a2e:	6840      	ldr	r0, [r0, #4]
 80a2a30:	f7ff beb6 	b.w	80a27a0 <network_disconnect>

080a2a34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2a34:	2200      	movs	r2, #0
 80a2a36:	4611      	mov	r1, r2
 80a2a38:	6840      	ldr	r0, [r0, #4]
 80a2a3a:	f7ff bea9 	b.w	80a2790 <network_connecting>

080a2a3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2a3e:	2200      	movs	r2, #0
 80a2a40:	4611      	mov	r1, r2
 80a2a42:	6840      	ldr	r0, [r0, #4]
 80a2a44:	f7ff beb4 	b.w	80a27b0 <network_ready>

080a2a48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2a48:	2300      	movs	r3, #0
 80a2a4a:	461a      	mov	r2, r3
 80a2a4c:	4619      	mov	r1, r3
 80a2a4e:	6840      	ldr	r0, [r0, #4]
 80a2a50:	f7ff beb6 	b.w	80a27c0 <network_on>

080a2a54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2a54:	2300      	movs	r3, #0
 80a2a56:	461a      	mov	r2, r3
 80a2a58:	4619      	mov	r1, r3
 80a2a5a:	6840      	ldr	r0, [r0, #4]
 80a2a5c:	f7ff beb8 	b.w	80a27d0 <network_off>

080a2a60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2a60:	2200      	movs	r2, #0
 80a2a62:	f081 0101 	eor.w	r1, r1, #1
 80a2a66:	6840      	ldr	r0, [r0, #4]
 80a2a68:	f7ff beba 	b.w	80a27e0 <network_listen>

080a2a6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2a6c:	2200      	movs	r2, #0
 80a2a6e:	6840      	ldr	r0, [r0, #4]
 80a2a70:	f7ff bec6 	b.w	80a2800 <network_set_listen_timeout>

080a2a74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2a74:	2200      	movs	r2, #0
 80a2a76:	4611      	mov	r1, r2
 80a2a78:	6840      	ldr	r0, [r0, #4]
 80a2a7a:	f7ff bec9 	b.w	80a2810 <network_get_listen_timeout>

080a2a7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2a7e:	2200      	movs	r2, #0
 80a2a80:	4611      	mov	r1, r2
 80a2a82:	6840      	ldr	r0, [r0, #4]
 80a2a84:	f7ff beb4 	b.w	80a27f0 <network_listening>

080a2a88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2a88:	b570      	push	{r4, r5, r6, lr}
 80a2a8a:	4616      	mov	r6, r2
 80a2a8c:	b08e      	sub	sp, #56	; 0x38
 80a2a8e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2a90:	a808      	add	r0, sp, #32
 80a2a92:	f7ff ff6f 	bl	80a2974 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2a96:	2211      	movs	r2, #17
 80a2a98:	2100      	movs	r1, #0
 80a2a9a:	a803      	add	r0, sp, #12
 80a2a9c:	f002 f863 	bl	80a4b66 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2aa0:	4630      	mov	r0, r6
 80a2aa2:	f002 f891 	bl	80a4bc8 <strlen>
 80a2aa6:	2500      	movs	r5, #0
 80a2aa8:	4b0a      	ldr	r3, [pc, #40]	; (80a2ad4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2aaa:	9500      	str	r5, [sp, #0]
 80a2aac:	b281      	uxth	r1, r0
 80a2aae:	685b      	ldr	r3, [r3, #4]
 80a2ab0:	aa03      	add	r2, sp, #12
 80a2ab2:	4630      	mov	r0, r6
 80a2ab4:	f7ff fe28 	bl	80a2708 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2ab8:	b120      	cbz	r0, 80a2ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2aba:	4629      	mov	r1, r5
 80a2abc:	4620      	mov	r0, r4
 80a2abe:	f7ff ff79 	bl	80a29b4 <_ZN9IPAddressC1Em>
 80a2ac2:	e003      	b.n	80a2acc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2ac4:	a903      	add	r1, sp, #12
 80a2ac6:	4620      	mov	r0, r4
 80a2ac8:	f7ff ff62 	bl	80a2990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2acc:	4620      	mov	r0, r4
 80a2ace:	b00e      	add	sp, #56	; 0x38
 80a2ad0:	bd70      	pop	{r4, r5, r6, pc}
 80a2ad2:	bf00      	nop
 80a2ad4:	20000688 	.word	0x20000688

080a2ad8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2ad8:	4b03      	ldr	r3, [pc, #12]	; (80a2ae8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2ada:	4a04      	ldr	r2, [pc, #16]	; (80a2aec <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2adc:	2804      	cmp	r0, #4
 80a2ade:	bf0c      	ite	eq
 80a2ae0:	4610      	moveq	r0, r2
 80a2ae2:	4618      	movne	r0, r3
 80a2ae4:	4770      	bx	lr
 80a2ae6:	bf00      	nop
 80a2ae8:	20000208 	.word	0x20000208
 80a2aec:	20000688 	.word	0x20000688

080a2af0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2af0:	4b02      	ldr	r3, [pc, #8]	; (80a2afc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2af2:	4a03      	ldr	r2, [pc, #12]	; (80a2b00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2af4:	601a      	str	r2, [r3, #0]
 80a2af6:	2200      	movs	r2, #0
 80a2af8:	605a      	str	r2, [r3, #4]
 80a2afa:	4770      	bx	lr
 80a2afc:	20000208 	.word	0x20000208
 80a2b00:	080a4ea8 	.word	0x080a4ea8

080a2b04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2b06:	4606      	mov	r6, r0
 80a2b08:	460d      	mov	r5, r1
 80a2b0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2b0c:	2400      	movs	r4, #0
  while (size--) {
 80a2b0e:	42bd      	cmp	r5, r7
 80a2b10:	d00c      	beq.n	80a2b2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2b12:	6833      	ldr	r3, [r6, #0]
 80a2b14:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2b18:	689b      	ldr	r3, [r3, #8]
 80a2b1a:	4630      	mov	r0, r6
 80a2b1c:	4798      	blx	r3
     if (chunk>=0)
 80a2b1e:	2800      	cmp	r0, #0
 80a2b20:	db01      	blt.n	80a2b26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2b22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2b24:	e7f3      	b.n	80a2b0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2b26:	2c00      	cmp	r4, #0
 80a2b28:	bf08      	it	eq
 80a2b2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2b2c:	4620      	mov	r0, r4
 80a2b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2b30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2b30:	b570      	push	{r4, r5, r6, lr}
 80a2b32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2b34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2b36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2b38:	b149      	cbz	r1, 80a2b4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2b3a:	f002 f845 	bl	80a4bc8 <strlen>
 80a2b3e:	682b      	ldr	r3, [r5, #0]
 80a2b40:	4602      	mov	r2, r0
 80a2b42:	4621      	mov	r1, r4
 80a2b44:	4628      	mov	r0, r5
    }
 80a2b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2b4a:	68db      	ldr	r3, [r3, #12]
 80a2b4c:	4718      	bx	r3
    }
 80a2b4e:	bd70      	pop	{r4, r5, r6, pc}

080a2b50 <_ZN5Print5printEPKc>:
 80a2b50:	b508      	push	{r3, lr}
 80a2b52:	f7ff ffed 	bl	80a2b30 <_ZN5Print5writeEPKc>
 80a2b56:	bd08      	pop	{r3, pc}

080a2b58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2b58:	6803      	ldr	r3, [r0, #0]
 80a2b5a:	689b      	ldr	r3, [r3, #8]
 80a2b5c:	4718      	bx	r3

080a2b5e <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a2b5e:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a2b60:	680a      	ldr	r2, [r1, #0]
 80a2b62:	4601      	mov	r1, r0
 80a2b64:	6812      	ldr	r2, [r2, #0]
 80a2b66:	4618      	mov	r0, r3
 80a2b68:	4710      	bx	r2

080a2b6a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2b6a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2b6c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2b6e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2b70:	f7ff fff2 	bl	80a2b58 <_ZN5Print5printEc>
  n += print('\n');
 80a2b74:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2b76:	4604      	mov	r4, r0
  n += print('\n');
 80a2b78:	4628      	mov	r0, r5
 80a2b7a:	f7ff ffed 	bl	80a2b58 <_ZN5Print5printEc>
  return n;
}
 80a2b7e:	4420      	add	r0, r4
 80a2b80:	bd38      	pop	{r3, r4, r5, pc}

080a2b82 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2b82:	b538      	push	{r3, r4, r5, lr}
 80a2b84:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2b86:	f7ff ffd3 	bl	80a2b30 <_ZN5Print5writeEPKc>
 80a2b8a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2b8c:	4628      	mov	r0, r5
 80a2b8e:	f7ff ffec 	bl	80a2b6a <_ZN5Print7printlnEv>
  return n;
}
 80a2b92:	4420      	add	r0, r4
 80a2b94:	bd38      	pop	{r3, r4, r5, pc}

080a2b96 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a2b96:	b538      	push	{r3, r4, r5, lr}
 80a2b98:	4605      	mov	r5, r0
   size_t n = print(x);
 80a2b9a:	f7ff ffe0 	bl	80a2b5e <_ZN5Print5printERK9Printable>
 80a2b9e:	4604      	mov	r4, r0
   n += println();
 80a2ba0:	4628      	mov	r0, r5
 80a2ba2:	f7ff ffe2 	bl	80a2b6a <_ZN5Print7printlnEv>
   return n;
 }
 80a2ba6:	4420      	add	r0, r4
 80a2ba8:	bd38      	pop	{r3, r4, r5, pc}

080a2baa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2baa:	2a01      	cmp	r2, #1
 80a2bac:	bf98      	it	ls
 80a2bae:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2bb0:	b530      	push	{r4, r5, lr}
 80a2bb2:	460b      	mov	r3, r1
 80a2bb4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2bb6:	2100      	movs	r1, #0
 80a2bb8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2bbc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2bc0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2bc4:	fb05 3312 	mls	r3, r5, r2, r3
 80a2bc8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2bca:	2b09      	cmp	r3, #9
 80a2bcc:	bf94      	ite	ls
 80a2bce:	3330      	addls	r3, #48	; 0x30
 80a2bd0:	3337      	addhi	r3, #55	; 0x37
 80a2bd2:	b2db      	uxtb	r3, r3
 80a2bd4:	4621      	mov	r1, r4
 80a2bd6:	f804 3901 	strb.w	r3, [r4], #-1
 80a2bda:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2bdc:	2d00      	cmp	r5, #0
 80a2bde:	d1ef      	bne.n	80a2bc0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2be0:	f7ff ffa6 	bl	80a2b30 <_ZN5Print5writeEPKc>
}
 80a2be4:	b00b      	add	sp, #44	; 0x2c
 80a2be6:	bd30      	pop	{r4, r5, pc}

080a2be8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2be8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2bea:	b922      	cbnz	r2, 80a2bf6 <_ZN5Print5printEmi+0xe>
 80a2bec:	6803      	ldr	r3, [r0, #0]
 80a2bee:	b2c9      	uxtb	r1, r1
 80a2bf0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2bf2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2bf4:	4718      	bx	r3
  else return printNumber(n, base);
 80a2bf6:	b2d2      	uxtb	r2, r2
}
 80a2bf8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2bfa:	f7ff bfd6 	b.w	80a2baa <_ZN5Print11printNumberEmh>

080a2bfe <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2bfe:	f7ff bff3 	b.w	80a2be8 <_ZN5Print5printEmi>

080a2c02 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c06:	4607      	mov	r7, r0
 80a2c08:	460e      	mov	r6, r1
  if (base == 0) {
 80a2c0a:	4615      	mov	r5, r2
 80a2c0c:	b92a      	cbnz	r2, 80a2c1a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2c12:	6803      	ldr	r3, [r0, #0]
 80a2c14:	b2c9      	uxtb	r1, r1
 80a2c16:	689b      	ldr	r3, [r3, #8]
 80a2c18:	4718      	bx	r3
  } else if (base == 10) {
 80a2c1a:	2a0a      	cmp	r2, #10
 80a2c1c:	d102      	bne.n	80a2c24 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a2c1e:	2900      	cmp	r1, #0
 80a2c20:	da01      	bge.n	80a2c26 <_ZN5Print5printEli+0x24>
 80a2c22:	e004      	b.n	80a2c2e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2c24:	b2d2      	uxtb	r2, r2
  }
}
 80a2c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2c2a:	f7ff bfbe 	b.w	80a2baa <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2c2e:	212d      	movs	r1, #45	; 0x2d
 80a2c30:	f7ff ff92 	bl	80a2b58 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a2c34:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2c36:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a2c38:	4271      	negs	r1, r6
 80a2c3a:	4638      	mov	r0, r7
 80a2c3c:	f7ff ffb5 	bl	80a2baa <_ZN5Print11printNumberEmh>
 80a2c40:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a2c48 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2c4c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2c4e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2c50:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2c52:	4617      	mov	r7, r2
 80a2c54:	461e      	mov	r6, r3
 80a2c56:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2c5a:	f001 fc89 	bl	80a4570 <__aeabi_dcmpun>
 80a2c5e:	b108      	cbz	r0, 80a2c64 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2c60:	4947      	ldr	r1, [pc, #284]	; (80a2d80 <_ZN5Print10printFloatEdh+0x138>)
 80a2c62:	e012      	b.n	80a2c8a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2c64:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a2c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2c6c:	4b45      	ldr	r3, [pc, #276]	; (80a2d84 <_ZN5Print10printFloatEdh+0x13c>)
 80a2c6e:	4638      	mov	r0, r7
 80a2c70:	4621      	mov	r1, r4
 80a2c72:	f001 fc7d 	bl	80a4570 <__aeabi_dcmpun>
 80a2c76:	b968      	cbnz	r0, 80a2c94 <_ZN5Print10printFloatEdh+0x4c>
 80a2c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2c7c:	4b41      	ldr	r3, [pc, #260]	; (80a2d84 <_ZN5Print10printFloatEdh+0x13c>)
 80a2c7e:	4638      	mov	r0, r7
 80a2c80:	4621      	mov	r1, r4
 80a2c82:	f001 fc57 	bl	80a4534 <__aeabi_dcmple>
 80a2c86:	b928      	cbnz	r0, 80a2c94 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2c88:	493f      	ldr	r1, [pc, #252]	; (80a2d88 <_ZN5Print10printFloatEdh+0x140>)
 80a2c8a:	4640      	mov	r0, r8
 80a2c8c:	f7ff ff50 	bl	80a2b30 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2c94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2c98:	4b3c      	ldr	r3, [pc, #240]	; (80a2d8c <_ZN5Print10printFloatEdh+0x144>)
 80a2c9a:	4638      	mov	r0, r7
 80a2c9c:	4631      	mov	r1, r6
 80a2c9e:	f001 fc5d 	bl	80a455c <__aeabi_dcmpgt>
 80a2ca2:	b108      	cbz	r0, 80a2ca8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2ca4:	493a      	ldr	r1, [pc, #232]	; (80a2d90 <_ZN5Print10printFloatEdh+0x148>)
 80a2ca6:	e7f0      	b.n	80a2c8a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2ca8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2cac:	4b39      	ldr	r3, [pc, #228]	; (80a2d94 <_ZN5Print10printFloatEdh+0x14c>)
 80a2cae:	4638      	mov	r0, r7
 80a2cb0:	4631      	mov	r1, r6
 80a2cb2:	f001 fc35 	bl	80a4520 <__aeabi_dcmplt>
 80a2cb6:	2800      	cmp	r0, #0
 80a2cb8:	d1f4      	bne.n	80a2ca4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a2cba:	2200      	movs	r2, #0
 80a2cbc:	2300      	movs	r3, #0
 80a2cbe:	4638      	mov	r0, r7
 80a2cc0:	4631      	mov	r1, r6
 80a2cc2:	f001 fc2d 	bl	80a4520 <__aeabi_dcmplt>
 80a2cc6:	b138      	cbz	r0, 80a2cd8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a2cc8:	212d      	movs	r1, #45	; 0x2d
 80a2cca:	4640      	mov	r0, r8
 80a2ccc:	f7ff ff44 	bl	80a2b58 <_ZN5Print5printEc>
     number = -number;
 80a2cd0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2cd4:	4604      	mov	r4, r0
 80a2cd6:	e000      	b.n	80a2cda <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2cd8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2cda:	492f      	ldr	r1, [pc, #188]	; (80a2d98 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2cdc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2ce0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2ce2:	fa5f f389 	uxtb.w	r3, r9
 80a2ce6:	429d      	cmp	r5, r3
 80a2ce8:	d906      	bls.n	80a2cf8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a2cea:	2200      	movs	r2, #0
 80a2cec:	4b2b      	ldr	r3, [pc, #172]	; (80a2d9c <_ZN5Print10printFloatEdh+0x154>)
 80a2cee:	f001 facf 	bl	80a4290 <__aeabi_ddiv>
 80a2cf2:	f109 0901 	add.w	r9, r9, #1
 80a2cf6:	e7f4      	b.n	80a2ce2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a2cf8:	463a      	mov	r2, r7
 80a2cfa:	4633      	mov	r3, r6
 80a2cfc:	f000 ffec 	bl	80a3cd8 <__adddf3>
 80a2d00:	460f      	mov	r7, r1
 80a2d02:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2d04:	f001 fc72 	bl	80a45ec <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2d08:	220a      	movs	r2, #10
 80a2d0a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2d0c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2d0e:	4640      	mov	r0, r8
 80a2d10:	f7ff ff4b 	bl	80a2baa <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2d14:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a2d16:	b37d      	cbz	r5, 80a2d78 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a2d18:	4648      	mov	r0, r9
 80a2d1a:	f001 f919 	bl	80a3f50 <__aeabi_ui2d>
 80a2d1e:	4602      	mov	r2, r0
 80a2d20:	460b      	mov	r3, r1
 80a2d22:	4630      	mov	r0, r6
 80a2d24:	4639      	mov	r1, r7
 80a2d26:	f000 ffd5 	bl	80a3cd4 <__aeabi_dsub>
 80a2d2a:	4606      	mov	r6, r0
 80a2d2c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2d2e:	4640      	mov	r0, r8
 80a2d30:	491b      	ldr	r1, [pc, #108]	; (80a2da0 <_ZN5Print10printFloatEdh+0x158>)
 80a2d32:	f7ff fefd 	bl	80a2b30 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a2d36:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a2d38:	4b18      	ldr	r3, [pc, #96]	; (80a2d9c <_ZN5Print10printFloatEdh+0x154>)
 80a2d3a:	2200      	movs	r2, #0
 80a2d3c:	4630      	mov	r0, r6
 80a2d3e:	4639      	mov	r1, r7
 80a2d40:	f001 f97c 	bl	80a403c <__aeabi_dmul>
 80a2d44:	460f      	mov	r7, r1
 80a2d46:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a2d48:	f001 fc28 	bl	80a459c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2d4c:	220a      	movs	r2, #10
 80a2d4e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a2d50:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2d52:	4640      	mov	r0, r8
 80a2d54:	f7ff ff55 	bl	80a2c02 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a2d58:	4404      	add	r4, r0
    remainder -= toPrint;
 80a2d5a:	4648      	mov	r0, r9
 80a2d5c:	f001 f908 	bl	80a3f70 <__aeabi_i2d>
 80a2d60:	4602      	mov	r2, r0
 80a2d62:	460b      	mov	r3, r1
 80a2d64:	4630      	mov	r0, r6
 80a2d66:	4639      	mov	r1, r7
 80a2d68:	f000 ffb4 	bl	80a3cd4 <__aeabi_dsub>
 80a2d6c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2d6e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a2d72:	4606      	mov	r6, r0
 80a2d74:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2d76:	d1df      	bne.n	80a2d38 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2d78:	4620      	mov	r0, r4
 80a2d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2d7e:	bf00      	nop
 80a2d80:	080a4ed4 	.word	0x080a4ed4
 80a2d84:	7fefffff 	.word	0x7fefffff
 80a2d88:	080a4edc 	.word	0x080a4edc
 80a2d8c:	41efffff 	.word	0x41efffff
 80a2d90:	080a4ed8 	.word	0x080a4ed8
 80a2d94:	c1efffff 	.word	0xc1efffff
 80a2d98:	3fe00000 	.word	0x3fe00000
 80a2d9c:	40240000 	.word	0x40240000
 80a2da0:	080a4c2c 	.word	0x080a4c2c

080a2da4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2da6:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2daa:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2dac:	9100      	str	r1, [sp, #0]
 80a2dae:	f7ff ff4b 	bl	80a2c48 <_ZN5Print10printFloatEdh>
 80a2db2:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a2db4:	4628      	mov	r0, r5
 80a2db6:	f7ff fed8 	bl	80a2b6a <_ZN5Print7printlnEv>
  return n;
}
 80a2dba:	4420      	add	r0, r4
 80a2dbc:	b003      	add	sp, #12
 80a2dbe:	bd30      	pop	{r4, r5, pc}

080a2dc0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2dc0:	b510      	push	{r4, lr}
 80a2dc2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2dc4:	f7ff fd54 	bl	80a2870 <_ZNSt14_Function_baseD1Ev>
 80a2dc8:	4620      	mov	r0, r4
 80a2dca:	bd10      	pop	{r4, pc}

080a2dcc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2dcc:	4803      	ldr	r0, [pc, #12]	; (80a2ddc <_GLOBAL__sub_I_RGB+0x10>)
 80a2dce:	2300      	movs	r3, #0
 80a2dd0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2dd2:	4a03      	ldr	r2, [pc, #12]	; (80a2de0 <_GLOBAL__sub_I_RGB+0x14>)
 80a2dd4:	4903      	ldr	r1, [pc, #12]	; (80a2de4 <_GLOBAL__sub_I_RGB+0x18>)
 80a2dd6:	f000 be29 	b.w	80a3a2c <__aeabi_atexit>
 80a2dda:	bf00      	nop
 80a2ddc:	20000210 	.word	0x20000210
 80a2de0:	200000a4 	.word	0x200000a4
 80a2de4:	080a2dc1 	.word	0x080a2dc1

080a2de8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2de8:	4770      	bx	lr

080a2dea <_ZN8SPIClassD0Ev>:
 80a2dea:	b510      	push	{r4, lr}
 80a2dec:	4604      	mov	r4, r0
 80a2dee:	2110      	movs	r1, #16
 80a2df0:	f000 fe21 	bl	80a3a36 <_ZdlPvj>
 80a2df4:	4620      	mov	r0, r4
 80a2df6:	bd10      	pop	{r4, pc}

080a2df8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2df8:	b570      	push	{r4, r5, r6, lr}
 80a2dfa:	4604      	mov	r4, r0
 80a2dfc:	460e      	mov	r6, r1
 80a2dfe:	4b07      	ldr	r3, [pc, #28]	; (80a2e1c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2e00:	2500      	movs	r5, #0
 80a2e02:	6003      	str	r3, [r0, #0]
 80a2e04:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2e08:	f7ff fadc 	bl	80a23c4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2e0c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2e0e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2e10:	f7ff fbe2 	bl	80a25d8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2e14:	60a5      	str	r5, [r4, #8]
}
 80a2e16:	4620      	mov	r0, r4
 80a2e18:	bd70      	pop	{r4, r5, r6, pc}
 80a2e1a:	bf00      	nop
 80a2e1c:	080a4ee8 	.word	0x080a4ee8

080a2e20 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2e24:	7900      	ldrb	r0, [r0, #4]
 80a2e26:	f7ff bbaf 	b.w	80a2588 <HAL_SPI_Begin>

080a2e2a <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2e2a:	7900      	ldrb	r0, [r0, #4]
 80a2e2c:	f7ff bbb4 	b.w	80a2598 <HAL_SPI_Set_Bit_Order>

080a2e30 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2e30:	7900      	ldrb	r0, [r0, #4]
 80a2e32:	f7ff bbb9 	b.w	80a25a8 <HAL_SPI_Set_Data_Mode>
	...

080a2e38 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2e38:	4a05      	ldr	r2, [pc, #20]	; (80a2e50 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a2e3a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2e3c:	5c99      	ldrb	r1, [r3, r2]
 80a2e3e:	4281      	cmp	r1, r0
 80a2e40:	d002      	beq.n	80a2e48 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a2e42:	3301      	adds	r3, #1
 80a2e44:	2b08      	cmp	r3, #8
 80a2e46:	d1f9      	bne.n	80a2e3c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a2e48:	1c58      	adds	r0, r3, #1
}
 80a2e4a:	b2c0      	uxtb	r0, r0
 80a2e4c:	4770      	bx	lr
 80a2e4e:	bf00      	nop
 80a2e50:	080a4ef0 	.word	0x080a4ef0

080a2e54 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2e54:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2e56:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2e58:	6018      	str	r0, [r3, #0]
 80a2e5a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2e5c:	6818      	ldr	r0, [r3, #0]
 80a2e5e:	b2e5      	uxtb	r5, r4
 80a2e60:	4288      	cmp	r0, r1
 80a2e62:	d906      	bls.n	80a2e72 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2e64:	3401      	adds	r4, #1
 80a2e66:	2c08      	cmp	r4, #8
 80a2e68:	d002      	beq.n	80a2e70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2e6a:	0840      	lsrs	r0, r0, #1
 80a2e6c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2e6e:	e7f5      	b.n	80a2e5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2e70:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2e72:	4b02      	ldr	r3, [pc, #8]	; (80a2e7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2e74:	5d5b      	ldrb	r3, [r3, r5]
 80a2e76:	7013      	strb	r3, [r2, #0]
 80a2e78:	bd30      	pop	{r4, r5, pc}
 80a2e7a:	bf00      	nop
 80a2e7c:	080a4ef0 	.word	0x080a4ef0

080a2e80 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2e80:	b570      	push	{r4, r5, r6, lr}
 80a2e82:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2e84:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2e88:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2e8a:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2e8c:	2214      	movs	r2, #20
 80a2e8e:	2100      	movs	r1, #0
 80a2e90:	a803      	add	r0, sp, #12
 80a2e92:	f001 fe68 	bl	80a4b66 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2e96:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2e98:	a903      	add	r1, sp, #12
 80a2e9a:	4630      	mov	r0, r6
 80a2e9c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2e9e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2ea2:	f7ff fba9 	bl	80a25f8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a2ea6:	ab02      	add	r3, sp, #8
 80a2ea8:	f10d 0207 	add.w	r2, sp, #7
 80a2eac:	4629      	mov	r1, r5
 80a2eae:	9804      	ldr	r0, [sp, #16]
 80a2eb0:	f7ff ffd0 	bl	80a2e54 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2eb4:	7920      	ldrb	r0, [r4, #4]
 80a2eb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2eba:	f7ff fb7d 	bl	80a25b8 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a2ebe:	9802      	ldr	r0, [sp, #8]
 80a2ec0:	b008      	add	sp, #32
 80a2ec2:	bd70      	pop	{r4, r5, r6, pc}

080a2ec4 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2ec4:	b538      	push	{r3, r4, r5, lr}
 80a2ec6:	4604      	mov	r4, r0
    if (dividerReference)
 80a2ec8:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2eca:	4608      	mov	r0, r1
    if (dividerReference)
 80a2ecc:	b14d      	cbz	r5, 80a2ee2 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a2ece:	f7ff ffb3 	bl	80a2e38 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2ed2:	2201      	movs	r2, #1
 80a2ed4:	fa25 f100 	lsr.w	r1, r5, r0
 80a2ed8:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a2eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2ede:	f7ff bfcf 	b.w	80a2e80 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2ee2:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a2ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2ee8:	f7ff bb66 	b.w	80a25b8 <HAL_SPI_Set_Clock_Divider>

080a2eec <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2eec:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2eee:	7900      	ldrb	r0, [r0, #4]
 80a2ef0:	f7ff fb6a 	bl	80a25c8 <HAL_SPI_Send_Receive_Data>
}
 80a2ef4:	b2c0      	uxtb	r0, r0
 80a2ef6:	bd08      	pop	{r3, pc}

080a2ef8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2ef8:	7900      	ldrb	r0, [r0, #4]
 80a2efa:	f7ff bb75 	b.w	80a25e8 <HAL_SPI_Is_Enabled>

080a2efe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2efe:	b510      	push	{r4, lr}
 80a2f00:	4604      	mov	r4, r0
{
	free(buffer);
 80a2f02:	6800      	ldr	r0, [r0, #0]
 80a2f04:	f7ff fca4 	bl	80a2850 <free>
}
 80a2f08:	4620      	mov	r0, r4
 80a2f0a:	bd10      	pop	{r4, pc}

080a2f0c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2f0c:	b510      	push	{r4, lr}
 80a2f0e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2f10:	6800      	ldr	r0, [r0, #0]
 80a2f12:	b108      	cbz	r0, 80a2f18 <_ZN6String10invalidateEv+0xc>
 80a2f14:	f7ff fc9c 	bl	80a2850 <free>
	buffer = NULL;
 80a2f18:	2300      	movs	r3, #0
 80a2f1a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2f1c:	60a3      	str	r3, [r4, #8]
 80a2f1e:	6063      	str	r3, [r4, #4]
 80a2f20:	bd10      	pop	{r4, pc}

080a2f22 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2f22:	b538      	push	{r3, r4, r5, lr}
 80a2f24:	4604      	mov	r4, r0
 80a2f26:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2f28:	6800      	ldr	r0, [r0, #0]
 80a2f2a:	3101      	adds	r1, #1
 80a2f2c:	f7ff fc98 	bl	80a2860 <realloc>
	if (newbuffer) {
 80a2f30:	b110      	cbz	r0, 80a2f38 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2f32:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2f36:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2f38:	bd38      	pop	{r3, r4, r5, pc}

080a2f3a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2f3a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2f3c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2f3e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2f40:	b113      	cbz	r3, 80a2f48 <_ZN6String7reserveEj+0xe>
 80a2f42:	6843      	ldr	r3, [r0, #4]
 80a2f44:	428b      	cmp	r3, r1
 80a2f46:	d207      	bcs.n	80a2f58 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2f48:	4620      	mov	r0, r4
 80a2f4a:	f7ff ffea 	bl	80a2f22 <_ZN6String12changeBufferEj>
 80a2f4e:	b120      	cbz	r0, 80a2f5a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2f50:	68a3      	ldr	r3, [r4, #8]
 80a2f52:	b90b      	cbnz	r3, 80a2f58 <_ZN6String7reserveEj+0x1e>
 80a2f54:	6822      	ldr	r2, [r4, #0]
 80a2f56:	7013      	strb	r3, [r2, #0]
 80a2f58:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2f5a:	bd10      	pop	{r4, pc}

080a2f5c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2f5c:	b570      	push	{r4, r5, r6, lr}
 80a2f5e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2f60:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2f62:	4604      	mov	r4, r0
 80a2f64:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2f66:	f7ff ffe8 	bl	80a2f3a <_ZN6String7reserveEj>
 80a2f6a:	b918      	cbnz	r0, 80a2f74 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2f6c:	4620      	mov	r0, r4
 80a2f6e:	f7ff ffcd 	bl	80a2f0c <_ZN6String10invalidateEv>
		return *this;
 80a2f72:	e009      	b.n	80a2f88 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2f74:	462a      	mov	r2, r5
 80a2f76:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2f78:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2f7a:	6820      	ldr	r0, [r4, #0]
 80a2f7c:	f001 fde8 	bl	80a4b50 <memcpy>
	buffer[len] = 0;
 80a2f80:	6822      	ldr	r2, [r4, #0]
 80a2f82:	68a3      	ldr	r3, [r4, #8]
 80a2f84:	2100      	movs	r1, #0
 80a2f86:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2f88:	4620      	mov	r0, r4
 80a2f8a:	bd70      	pop	{r4, r5, r6, pc}

080a2f8c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2f8c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2f8e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2f90:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2f92:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2f94:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2f96:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2f98:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2f9a:	460d      	mov	r5, r1
 80a2f9c:	b139      	cbz	r1, 80a2fae <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2f9e:	4608      	mov	r0, r1
 80a2fa0:	f001 fe12 	bl	80a4bc8 <strlen>
 80a2fa4:	4629      	mov	r1, r5
 80a2fa6:	4602      	mov	r2, r0
 80a2fa8:	4620      	mov	r0, r4
 80a2faa:	f7ff ffd7 	bl	80a2f5c <_ZN6String4copyEPKcj>
}
 80a2fae:	4620      	mov	r0, r4
 80a2fb0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2fb4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2fb8:	4b03      	ldr	r3, [pc, #12]	; (80a2fc8 <_GLOBAL__sub_I_System+0x14>)
 80a2fba:	2000      	movs	r0, #0
 80a2fbc:	7018      	strb	r0, [r3, #0]
 80a2fbe:	8058      	strh	r0, [r3, #2]
 80a2fc0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2fc2:	f7ff bba9 	b.w	80a2718 <set_system_mode>
 80a2fc6:	bf00      	nop
 80a2fc8:	20000220 	.word	0x20000220

080a2fcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2fcc:	4b02      	ldr	r3, [pc, #8]	; (80a2fd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2fce:	681a      	ldr	r2, [r3, #0]
 80a2fd0:	4b02      	ldr	r3, [pc, #8]	; (80a2fdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2fd2:	601a      	str	r2, [r3, #0]
 80a2fd4:	4770      	bx	lr
 80a2fd6:	bf00      	nop
 80a2fd8:	2000003c 	.word	0x2000003c
 80a2fdc:	20000228 	.word	0x20000228

080a2fe0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a2fe0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a2fe2:	6804      	ldr	r4, [r0, #0]
 80a2fe4:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a2fe6:	46a4      	mov	ip, r4
    }
 80a2fe8:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a2fea:	4760      	bx	ip

080a2fec <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a2fec:	6803      	ldr	r3, [r0, #0]
 80a2fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2ff0:	4718      	bx	r3

080a2ff2 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a2ff2:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a2ff4:	4770      	bx	lr

080a2ff6 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a2ff6:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a2ff8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a2ffa:	1a10      	subs	r0, r2, r0
 80a2ffc:	4770      	bx	lr

080a2ffe <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a2ffe:	b513      	push	{r0, r1, r4, lr}
 80a3000:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a3002:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a3004:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a3008:	68d4      	ldr	r4, [r2, #12]
 80a300a:	4619      	mov	r1, r3
 80a300c:	2201      	movs	r2, #1
 80a300e:	47a0      	blx	r4
}
 80a3010:	b002      	add	sp, #8
 80a3012:	bd10      	pop	{r4, pc}

080a3014 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a3014:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a3016:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a3018:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a301a:	691b      	ldr	r3, [r3, #16]
 80a301c:	4798      	blx	r3
 80a301e:	b128      	cbz	r0, 80a302c <_ZN3UDP4readEv+0x18>
 80a3020:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3022:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3024:	1c59      	adds	r1, r3, #1
 80a3026:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a3028:	5cd0      	ldrb	r0, [r2, r3]
 80a302a:	bd10      	pop	{r4, pc}
 80a302c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a3030:	bd10      	pop	{r4, pc}

080a3032 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a3032:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a3034:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a3036:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a3038:	691b      	ldr	r3, [r3, #16]
 80a303a:	4798      	blx	r3
 80a303c:	b118      	cbz	r0, 80a3046 <_ZN3UDP4peekEv+0x14>
 80a303e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3040:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a3042:	5cd0      	ldrb	r0, [r2, r3]
 80a3044:	bd10      	pop	{r4, pc}
 80a3046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a304a:	bd10      	pop	{r4, pc}

080a304c <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a304c:	4770      	bx	lr

080a304e <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a304e:	4603      	mov	r3, r0
 80a3050:	4608      	mov	r0, r1
 80a3052:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a3054:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a3056:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3058:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a305a:	6803      	ldr	r3, [r0, #0]
 80a305c:	1a52      	subs	r2, r2, r1
 80a305e:	68db      	ldr	r3, [r3, #12]
 80a3060:	4421      	add	r1, r4
}
 80a3062:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a3064:	4718      	bx	r3

080a3066 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a3066:	f1a0 0010 	sub.w	r0, r0, #16
 80a306a:	f7ff bff0 	b.w	80a304e <_ZNK3UDP7printToER5Print>

080a306e <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a306e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a3070:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a3072:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a3074:	460f      	mov	r7, r1
 80a3076:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a3078:	f7ff fd2e 	bl	80a2ad8 <_ZN5spark12NetworkClass4fromEm>
 80a307c:	6803      	ldr	r3, [r0, #0]
 80a307e:	68db      	ldr	r3, [r3, #12]
 80a3080:	4798      	blx	r3
 80a3082:	b1b8      	cbz	r0, 80a30b4 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a3084:	2102      	movs	r1, #2
 80a3086:	463b      	mov	r3, r7
 80a3088:	2211      	movs	r2, #17
 80a308a:	4608      	mov	r0, r1
 80a308c:	9600      	str	r6, [sp, #0]
 80a308e:	f7ff fa53 	bl	80a2538 <socket_create>
 80a3092:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a3094:	f7ff fa48 	bl	80a2528 <socket_handle_valid>
 80a3098:	4604      	mov	r4, r0
 80a309a:	b130      	cbz	r0, 80a30aa <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a309c:	2300      	movs	r3, #0
 80a309e:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a30a0:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a30a2:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a30a4:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a30a6:	2001      	movs	r0, #1
 80a30a8:	e004      	b.n	80a30b4 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a30aa:	682b      	ldr	r3, [r5, #0]
 80a30ac:	4628      	mov	r0, r5
 80a30ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a30b0:	4798      	blx	r3
            bound = false;
 80a30b2:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a30b4:	b003      	add	sp, #12
 80a30b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a30b8 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a30b8:	b538      	push	{r3, r4, r5, lr}
 80a30ba:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a30bc:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a30be:	f7ff fa5b 	bl	80a2578 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a30c2:	4285      	cmp	r5, r0
 80a30c4:	d002      	beq.n	80a30cc <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a30c6:	6960      	ldr	r0, [r4, #20]
 80a30c8:	f7ff fa4e 	bl	80a2568 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a30cc:	f7ff fa54 	bl	80a2578 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a30d0:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a30d2:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a30d4:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a30d6:	8723      	strh	r3, [r4, #56]	; 0x38
 80a30d8:	bd38      	pop	{r3, r4, r5, pc}

080a30da <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a30da:	b530      	push	{r4, r5, lr}
 80a30dc:	b087      	sub	sp, #28
 80a30de:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a30e2:	2502      	movs	r5, #2
 80a30e4:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a30e8:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a30ec:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a30ee:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a30f0:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a30f4:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a30f8:	799c      	ldrb	r4, [r3, #6]
 80a30fa:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a30fe:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3100:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a3102:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a3106:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a310a:	2310      	movs	r3, #16
 80a310c:	9301      	str	r3, [sp, #4]
 80a310e:	ab02      	add	r3, sp, #8
 80a3110:	9300      	str	r3, [sp, #0]
 80a3112:	6940      	ldr	r0, [r0, #20]
 80a3114:	2300      	movs	r3, #0
 80a3116:	f7ff fa1f 	bl	80a2558 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a311a:	b007      	add	sp, #28
 80a311c:	bd30      	pop	{r4, r5, pc}

080a311e <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a311e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3120:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a3122:	4605      	mov	r5, r0
 80a3124:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a3126:	b113      	cbz	r3, 80a312e <_ZN3UDP5writeEPKhj+0x10>
 80a3128:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a312a:	1a24      	subs	r4, r4, r0
 80a312c:	e000      	b.n	80a3130 <_ZN3UDP5writeEPKhj+0x12>
 80a312e:	461c      	mov	r4, r3
 80a3130:	4294      	cmp	r4, r2
 80a3132:	bf28      	it	cs
 80a3134:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a3136:	4418      	add	r0, r3
 80a3138:	4622      	mov	r2, r4
 80a313a:	f001 fd09 	bl	80a4b50 <memcpy>
    _offset += size;
 80a313e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3140:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a3142:	4423      	add	r3, r4
 80a3144:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a3146:	bd38      	pop	{r3, r4, r5, pc}

080a3148 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3148:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a314a:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a314c:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a314e:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a3150:	460e      	mov	r6, r1
 80a3152:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a3154:	4798      	blx	r3
 80a3156:	b188      	cbz	r0, 80a317c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a3158:	6823      	ldr	r3, [r4, #0]
 80a315a:	4620      	mov	r0, r4
 80a315c:	691b      	ldr	r3, [r3, #16]
 80a315e:	4798      	blx	r3
 80a3160:	4285      	cmp	r5, r0
 80a3162:	bfa8      	it	ge
 80a3164:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a3166:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3168:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a316a:	462a      	mov	r2, r5
 80a316c:	4419      	add	r1, r3
 80a316e:	4630      	mov	r0, r6
 80a3170:	f001 fcee 	bl	80a4b50 <memcpy>
      _offset += read;
 80a3174:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a3176:	442b      	add	r3, r5
 80a3178:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a317a:	e001      	b.n	80a3180 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a317c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a3180:	4628      	mov	r0, r5
 80a3182:	bd70      	pop	{r4, r5, r6, pc}

080a3184 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a3184:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3186:	4604      	mov	r4, r0
 80a3188:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a318a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a318c:	460d      	mov	r5, r1
 80a318e:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a3190:	f7ff fca2 	bl	80a2ad8 <_ZN5spark12NetworkClass4fromEm>
 80a3194:	6803      	ldr	r3, [r0, #0]
 80a3196:	68db      	ldr	r3, [r3, #12]
 80a3198:	4798      	blx	r3
 80a319a:	b310      	cbz	r0, 80a31e2 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a319c:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a319e:	f7ff f9eb 	bl	80a2578 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a31a2:	4287      	cmp	r7, r0
 80a31a4:	d01d      	beq.n	80a31e2 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a31a6:	b1e5      	cbz	r5, 80a31e2 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a31a8:	ab08      	add	r3, sp, #32
 80a31aa:	2210      	movs	r2, #16
 80a31ac:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a31b0:	9301      	str	r3, [sp, #4]
 80a31b2:	eb0d 0302 	add.w	r3, sp, r2
 80a31b6:	9300      	str	r3, [sp, #0]
 80a31b8:	4629      	mov	r1, r5
 80a31ba:	2300      	movs	r3, #0
 80a31bc:	4632      	mov	r2, r6
 80a31be:	6960      	ldr	r0, [r4, #20]
 80a31c0:	f7ff f9c2 	bl	80a2548 <socket_receivefrom>
        if (ret >= 0)
 80a31c4:	1e05      	subs	r5, r0, #0
 80a31c6:	db0e      	blt.n	80a31e6 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a31c8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a31cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a31d0:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a31d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a31d6:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a31d8:	f104 001c 	add.w	r0, r4, #28
 80a31dc:	f7ff fc0c 	bl	80a29f8 <_ZN9IPAddressaSEPKh>
 80a31e0:	e001      	b.n	80a31e6 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a31e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a31e6:	4628      	mov	r0, r5
 80a31e8:	b009      	add	sp, #36	; 0x24
 80a31ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a31ec <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a31ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a31f0:	4606      	mov	r6, r0
 80a31f2:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a31f4:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a31f6:	460d      	mov	r5, r1
 80a31f8:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a31fa:	f7ff fc6d 	bl	80a2ad8 <_ZN5spark12NetworkClass4fromEm>
 80a31fe:	6803      	ldr	r3, [r0, #0]
 80a3200:	68db      	ldr	r3, [r3, #12]
 80a3202:	4798      	blx	r3
 80a3204:	b1f8      	cbz	r0, 80a3246 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a3206:	4628      	mov	r0, r5
 80a3208:	f001 fcde 	bl	80a4bc8 <strlen>
 80a320c:	2400      	movs	r4, #0
 80a320e:	b281      	uxth	r1, r0
 80a3210:	9400      	str	r4, [sp, #0]
 80a3212:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a3214:	aa03      	add	r2, sp, #12
 80a3216:	4628      	mov	r0, r5
 80a3218:	f7ff fa76 	bl	80a2708 <inet_gethostbyname>
 80a321c:	b990      	cbnz	r0, 80a3244 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a321e:	a903      	add	r1, sp, #12
 80a3220:	a808      	add	r0, sp, #32
 80a3222:	f7ff fbb5 	bl	80a2990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a3226:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3228:	ac0f      	add	r4, sp, #60	; 0x3c
 80a322a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a322c:	4b07      	ldr	r3, [pc, #28]	; (80a324c <_ZN3UDP11beginPacketEPKct+0x60>)
 80a322e:	ad09      	add	r5, sp, #36	; 0x24
 80a3230:	930e      	str	r3, [sp, #56]	; 0x38
 80a3232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3236:	682b      	ldr	r3, [r5, #0]
 80a3238:	4642      	mov	r2, r8
 80a323a:	7023      	strb	r3, [r4, #0]
 80a323c:	a90e      	add	r1, sp, #56	; 0x38
 80a323e:	4630      	mov	r0, r6
 80a3240:	47b8      	blx	r7
 80a3242:	e000      	b.n	80a3246 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a3244:	4620      	mov	r0, r4
}
 80a3246:	b014      	add	sp, #80	; 0x50
 80a3248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a324c:	080a4db0 	.word	0x080a4db0

080a3250 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a3250:	b570      	push	{r4, r5, r6, lr}
 80a3252:	4604      	mov	r4, r0
 80a3254:	4606      	mov	r6, r0
 80a3256:	4b05      	ldr	r3, [pc, #20]	; (80a326c <_ZN3UDP8remoteIPEv+0x1c>)
 80a3258:	f101 0520 	add.w	r5, r1, #32
 80a325c:	f844 3b04 	str.w	r3, [r4], #4
 80a3260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3264:	682b      	ldr	r3, [r5, #0]
 80a3266:	4630      	mov	r0, r6
 80a3268:	7023      	strb	r3, [r4, #0]
 80a326a:	bd70      	pop	{r4, r5, r6, pc}
 80a326c:	080a4db0 	.word	0x080a4db0

080a3270 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a3270:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3272:	4694      	mov	ip, r2
 80a3274:	468e      	mov	lr, r1
 80a3276:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a3278:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a327a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a327c:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a327e:	4a09      	ldr	r2, [pc, #36]	; (80a32a4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a3280:	ac03      	add	r4, sp, #12
 80a3282:	1d1d      	adds	r5, r3, #4
 80a3284:	9202      	str	r2, [sp, #8]
 80a3286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a328a:	682b      	ldr	r3, [r5, #0]
 80a328c:	4662      	mov	r2, ip
 80a328e:	7023      	strb	r3, [r4, #0]
 80a3290:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a3294:	4671      	mov	r1, lr
 80a3296:	9300      	str	r3, [sp, #0]
 80a3298:	4630      	mov	r0, r6
 80a329a:	ab02      	add	r3, sp, #8
 80a329c:	47b8      	blx	r7
    }
 80a329e:	b009      	add	sp, #36	; 0x24
 80a32a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a32a2:	bf00      	nop
 80a32a4:	080a4db0 	.word	0x080a4db0

080a32a8 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a32a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a32aa:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a32ac:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a32ae:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a32b0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a32b2:	4b0d      	ldr	r3, [pc, #52]	; (80a32e8 <_ZN3UDP9endPacketEv+0x40>)
 80a32b4:	ad03      	add	r5, sp, #12
 80a32b6:	f100 0620 	add.w	r6, r0, #32
 80a32ba:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a32be:	9302      	str	r3, [sp, #8]
 80a32c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a32c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a32c4:	6833      	ldr	r3, [r6, #0]
 80a32c6:	4672      	mov	r2, lr
 80a32c8:	702b      	strb	r3, [r5, #0]
 80a32ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a32cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a32ce:	9300      	str	r3, [sp, #0]
 80a32d0:	4620      	mov	r0, r4
 80a32d2:	ab02      	add	r3, sp, #8
 80a32d4:	47b8      	blx	r7
 80a32d6:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a32d8:	6823      	ldr	r3, [r4, #0]
 80a32da:	4620      	mov	r0, r4
 80a32dc:	69db      	ldr	r3, [r3, #28]
 80a32de:	4798      	blx	r3
    return result;
}
 80a32e0:	4628      	mov	r0, r5
 80a32e2:	b009      	add	sp, #36	; 0x24
 80a32e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a32e6:	bf00      	nop
 80a32e8:	080a4db0 	.word	0x080a4db0

080a32ec <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a32ec:	b538      	push	{r3, r4, r5, lr}
 80a32ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a32f2:	6083      	str	r3, [r0, #8]
 80a32f4:	4b0b      	ldr	r3, [pc, #44]	; (80a3324 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a32f6:	2500      	movs	r5, #0
 80a32f8:	f103 0208 	add.w	r2, r3, #8
 80a32fc:	336c      	adds	r3, #108	; 0x6c
 80a32fe:	6002      	str	r2, [r0, #0]
 80a3300:	6103      	str	r3, [r0, #16]
 80a3302:	6045      	str	r5, [r0, #4]
 80a3304:	4604      	mov	r4, r0
 80a3306:	f7ff f937 	bl	80a2578 <socket_handle_invalid>
 80a330a:	6160      	str	r0, [r4, #20]
 80a330c:	f104 001c 	add.w	r0, r4, #28
 80a3310:	f7ff fb30 	bl	80a2974 <_ZN9IPAddressC1Ev>
 80a3314:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a3318:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a331a:	8725      	strh	r5, [r4, #56]	; 0x38
 80a331c:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a331e:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a3320:	4620      	mov	r0, r4
 80a3322:	bd38      	pop	{r3, r4, r5, pc}
 80a3324:	080a4f24 	.word	0x080a4f24

080a3328 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3328:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a332a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a332e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a3330:	b123      	cbz	r3, 80a333c <_ZN3UDP13releaseBufferEv+0x14>
 80a3332:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a3334:	b110      	cbz	r0, 80a333c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a3336:	2101      	movs	r1, #1
 80a3338:	f000 fb7d 	bl	80a3a36 <_ZdlPvj>
    }
    _buffer = NULL;
 80a333c:	2300      	movs	r3, #0
 80a333e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a3340:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a3344:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3346:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3348:	8723      	strh	r3, [r4, #56]	; 0x38
 80a334a:	bd10      	pop	{r4, pc}

080a334c <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a334c:	b570      	push	{r4, r5, r6, lr}
 80a334e:	4604      	mov	r4, r0
 80a3350:	4616      	mov	r6, r2
 80a3352:	460d      	mov	r5, r1
    releaseBuffer();
 80a3354:	f7ff ffe8 	bl	80a3328 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a3358:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a335a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a335c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a335e:	b93e      	cbnz	r6, 80a3370 <_ZN3UDP9setBufferEjPh+0x24>
 80a3360:	b135      	cbz	r5, 80a3370 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a3362:	4628      	mov	r0, r5
 80a3364:	f7fc fe99 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a3368:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a336a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a336c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a3370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3372:	b103      	cbz	r3, 80a3376 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a3374:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a3376:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a3378:	3000      	adds	r0, #0
 80a337a:	bf18      	it	ne
 80a337c:	2001      	movne	r0, #1
 80a337e:	bd70      	pop	{r4, r5, r6, pc}

080a3380 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3382:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a3384:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a3386:	4605      	mov	r5, r0
 80a3388:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a338a:	b91a      	cbnz	r2, 80a3394 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a338c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a338e:	b109      	cbz	r1, 80a3394 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a3390:	f7ff ffdc 	bl	80a334c <_ZN3UDP9setBufferEjPh>
 80a3394:	f105 0620 	add.w	r6, r5, #32
 80a3398:	3404      	adds	r4, #4
 80a339a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a339c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a339e:	6823      	ldr	r3, [r4, #0]
 80a33a0:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a33a2:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a33a4:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a33a6:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a33a8:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a33aa:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a33ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a33ae <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a33ae:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a33b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a33b2:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a33b4:	b91a      	cbnz	r2, 80a33be <_ZN3UDP11parsePacketEm+0x10>
 80a33b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a33b8:	b109      	cbz	r1, 80a33be <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a33ba:	f7ff ffc7 	bl	80a334c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a33be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a33c0:	2300      	movs	r3, #0
 80a33c2:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a33c4:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a33c6:	b141      	cbz	r1, 80a33da <_ZN3UDP11parsePacketEm+0x2c>
 80a33c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a33ca:	b132      	cbz	r2, 80a33da <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a33cc:	6820      	ldr	r0, [r4, #0]
 80a33ce:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a33d0:	4620      	mov	r0, r4
 80a33d2:	47a8      	blx	r5
        if (result>0) {
 80a33d4:	2800      	cmp	r0, #0
            _total = result;
 80a33d6:	bfc8      	it	gt
 80a33d8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a33da:	6823      	ldr	r3, [r4, #0]
 80a33dc:	4620      	mov	r0, r4
}
 80a33de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a33e2:	691b      	ldr	r3, [r3, #16]
 80a33e4:	4718      	bx	r3

080a33e6 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a33e6:	4770      	bx	lr

080a33e8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a33e8:	7441      	strb	r1, [r0, #17]
 80a33ea:	4770      	bx	lr

080a33ec <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a33ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a33ee:	7c00      	ldrb	r0, [r0, #16]
 80a33f0:	f7ff f942 	bl	80a2678 <HAL_USART_Available_Data_For_Write>
}
 80a33f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33f8:	bd08      	pop	{r3, pc}

080a33fa <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a33fa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a33fc:	7c00      	ldrb	r0, [r0, #16]
 80a33fe:	f7ff f913 	bl	80a2628 <HAL_USART_Available_Data>
}
 80a3402:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3406:	bd08      	pop	{r3, pc}

080a3408 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3408:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a340a:	7c00      	ldrb	r0, [r0, #16]
 80a340c:	f7ff f91c 	bl	80a2648 <HAL_USART_Peek_Data>
}
 80a3410:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3414:	bf28      	it	cs
 80a3416:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a341a:	bd08      	pop	{r3, pc}

080a341c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a341c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a341e:	7c00      	ldrb	r0, [r0, #16]
 80a3420:	f7ff f90a 	bl	80a2638 <HAL_USART_Read_Data>
}
 80a3424:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3428:	bf28      	it	cs
 80a342a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a342e:	bd08      	pop	{r3, pc}

080a3430 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3430:	7c00      	ldrb	r0, [r0, #16]
 80a3432:	f7ff b911 	b.w	80a2658 <HAL_USART_Flush_Data>

080a3436 <_ZN11USARTSerialD0Ev>:
 80a3436:	b510      	push	{r4, lr}
 80a3438:	4604      	mov	r4, r0
 80a343a:	2114      	movs	r1, #20
 80a343c:	f000 fafb 	bl	80a3a36 <_ZdlPvj>
 80a3440:	4620      	mov	r0, r4
 80a3442:	bd10      	pop	{r4, pc}

080a3444 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3444:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3446:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3448:	4604      	mov	r4, r0
 80a344a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a344c:	b925      	cbnz	r5, 80a3458 <_ZN11USARTSerial5writeEh+0x14>
 80a344e:	7c00      	ldrb	r0, [r0, #16]
 80a3450:	f7ff f912 	bl	80a2678 <HAL_USART_Available_Data_For_Write>
 80a3454:	2800      	cmp	r0, #0
 80a3456:	dd05      	ble.n	80a3464 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3458:	4631      	mov	r1, r6
 80a345a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a345c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3460:	f7ff b8da 	b.w	80a2618 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3464:	4628      	mov	r0, r5
 80a3466:	bd70      	pop	{r4, r5, r6, pc}

080a3468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3468:	b510      	push	{r4, lr}
 80a346a:	4604      	mov	r4, r0
 80a346c:	4608      	mov	r0, r1
 80a346e:	4611      	mov	r1, r2
 80a3470:	2200      	movs	r2, #0
 80a3472:	6062      	str	r2, [r4, #4]
 80a3474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3478:	60a2      	str	r2, [r4, #8]
 80a347a:	4a05      	ldr	r2, [pc, #20]	; (80a3490 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a347c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a347e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3480:	2201      	movs	r2, #1
 80a3482:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3484:	461a      	mov	r2, r3
 80a3486:	f7ff f8bf 	bl	80a2608 <HAL_USART_Init>
}
 80a348a:	4620      	mov	r0, r4
 80a348c:	bd10      	pop	{r4, pc}
 80a348e:	bf00      	nop
 80a3490:	080a4f9c 	.word	0x080a4f9c

080a3494 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3494:	7c00      	ldrb	r0, [r0, #16]
 80a3496:	f7ff b8e7 	b.w	80a2668 <HAL_USART_Is_Enabled>
	...

080a349c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a349c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a349e:	4d0c      	ldr	r5, [pc, #48]	; (80a34d0 <_Z22__fetch_global_Serial1v+0x34>)
 80a34a0:	6829      	ldr	r1, [r5, #0]
 80a34a2:	f011 0401 	ands.w	r4, r1, #1
 80a34a6:	d111      	bne.n	80a34cc <_Z22__fetch_global_Serial1v+0x30>
 80a34a8:	4628      	mov	r0, r5
 80a34aa:	f7fc fdfa 	bl	80a00a2 <__cxa_guard_acquire>
 80a34ae:	b168      	cbz	r0, 80a34cc <_Z22__fetch_global_Serial1v+0x30>
 80a34b0:	4a08      	ldr	r2, [pc, #32]	; (80a34d4 <_Z22__fetch_global_Serial1v+0x38>)
 80a34b2:	4621      	mov	r1, r4
 80a34b4:	4b08      	ldr	r3, [pc, #32]	; (80a34d8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a34b6:	4809      	ldr	r0, [pc, #36]	; (80a34dc <_Z22__fetch_global_Serial1v+0x40>)
 80a34b8:	f7ff ffd6 	bl	80a3468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a34bc:	4628      	mov	r0, r5
 80a34be:	f7fc fdf5 	bl	80a00ac <__cxa_guard_release>
 80a34c2:	4a07      	ldr	r2, [pc, #28]	; (80a34e0 <_Z22__fetch_global_Serial1v+0x44>)
 80a34c4:	4907      	ldr	r1, [pc, #28]	; (80a34e4 <_Z22__fetch_global_Serial1v+0x48>)
 80a34c6:	4805      	ldr	r0, [pc, #20]	; (80a34dc <_Z22__fetch_global_Serial1v+0x40>)
 80a34c8:	f000 fab0 	bl	80a3a2c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a34cc:	4803      	ldr	r0, [pc, #12]	; (80a34dc <_Z22__fetch_global_Serial1v+0x40>)
 80a34ce:	bd38      	pop	{r3, r4, r5, pc}
 80a34d0:	200002c4 	.word	0x200002c4
 80a34d4:	200002c8 	.word	0x200002c8
 80a34d8:	20000240 	.word	0x20000240
 80a34dc:	2000022c 	.word	0x2000022c
 80a34e0:	200000a4 	.word	0x200000a4
 80a34e4:	080a33e7 	.word	0x080a33e7

080a34e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a34e8:	7441      	strb	r1, [r0, #17]
 80a34ea:	4770      	bx	lr

080a34ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a34ec:	4770      	bx	lr

080a34ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a34ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a34f0:	2100      	movs	r1, #0
 80a34f2:	7c00      	ldrb	r0, [r0, #16]
 80a34f4:	f7ff f8e8 	bl	80a26c8 <HAL_USB_USART_Receive_Data>
}
 80a34f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a34fc:	bf28      	it	cs
 80a34fe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3502:	bd08      	pop	{r3, pc}

080a3504 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3504:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3506:	2101      	movs	r1, #1
 80a3508:	7c00      	ldrb	r0, [r0, #16]
 80a350a:	f7ff f8dd 	bl	80a26c8 <HAL_USB_USART_Receive_Data>
}
 80a350e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3512:	bf28      	it	cs
 80a3514:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3518:	bd08      	pop	{r3, pc}

080a351a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a351a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a351c:	7c00      	ldrb	r0, [r0, #16]
 80a351e:	f7ff f8cb 	bl	80a26b8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3522:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3526:	bd08      	pop	{r3, pc}

080a3528 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3528:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a352a:	7c00      	ldrb	r0, [r0, #16]
 80a352c:	f7ff f8bc 	bl	80a26a8 <HAL_USB_USART_Available_Data>
}
 80a3530:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3534:	bd08      	pop	{r3, pc}

080a3536 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3536:	7c00      	ldrb	r0, [r0, #16]
 80a3538:	f7ff b8d6 	b.w	80a26e8 <HAL_USB_USART_Flush_Data>

080a353c <_ZN9USBSerialD0Ev>:
 80a353c:	b510      	push	{r4, lr}
 80a353e:	4604      	mov	r4, r0
 80a3540:	2114      	movs	r1, #20
 80a3542:	f000 fa78 	bl	80a3a36 <_ZdlPvj>
 80a3546:	4620      	mov	r0, r4
 80a3548:	bd10      	pop	{r4, pc}

080a354a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a354a:	b538      	push	{r3, r4, r5, lr}
 80a354c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a354e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3550:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3552:	f7ff f8b1 	bl	80a26b8 <HAL_USB_USART_Available_Data_For_Write>
 80a3556:	2800      	cmp	r0, #0
 80a3558:	dc01      	bgt.n	80a355e <_ZN9USBSerial5writeEh+0x14>
 80a355a:	7c60      	ldrb	r0, [r4, #17]
 80a355c:	b128      	cbz	r0, 80a356a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a355e:	4629      	mov	r1, r5
 80a3560:	7c20      	ldrb	r0, [r4, #16]
 80a3562:	f7ff f8b9 	bl	80a26d8 <HAL_USB_USART_Send_Data>
 80a3566:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a356a:	bd38      	pop	{r3, r4, r5, pc}

080a356c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a356c:	b510      	push	{r4, lr}
 80a356e:	4604      	mov	r4, r0
 80a3570:	2300      	movs	r3, #0
 80a3572:	6063      	str	r3, [r4, #4]
 80a3574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3578:	60a3      	str	r3, [r4, #8]
 80a357a:	4b05      	ldr	r3, [pc, #20]	; (80a3590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a357c:	4608      	mov	r0, r1
 80a357e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3580:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3582:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3584:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3586:	4611      	mov	r1, r2
 80a3588:	f7ff f87e 	bl	80a2688 <HAL_USB_USART_Init>
}
 80a358c:	4620      	mov	r0, r4
 80a358e:	bd10      	pop	{r4, pc}
 80a3590:	080a4fcc 	.word	0x080a4fcc

080a3594 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3594:	2200      	movs	r2, #0
 80a3596:	7c00      	ldrb	r0, [r0, #16]
 80a3598:	f7ff b87e 	b.w	80a2698 <HAL_USB_USART_Begin>

080a359c <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a359c:	7c00      	ldrb	r0, [r0, #16]
 80a359e:	f7ff b8ab 	b.w	80a26f8 <HAL_USB_USART_Is_Enabled>

080a35a2 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a35a2:	f7ff bffb 	b.w	80a359c <_ZN9USBSerial9isEnabledEv>
	...

080a35a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a35a8:	b510      	push	{r4, lr}
 80a35aa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a35ac:	2214      	movs	r2, #20
 80a35ae:	2100      	movs	r1, #0
 80a35b0:	f001 fad9 	bl	80a4b66 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a35b4:	4b05      	ldr	r3, [pc, #20]	; (80a35cc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a35b6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a35b8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a35ba:	4b05      	ldr	r3, [pc, #20]	; (80a35d0 <_Z19acquireSerialBufferv+0x28>)
 80a35bc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a35be:	f240 1301 	movw	r3, #257	; 0x101
 80a35c2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a35c4:	2381      	movs	r3, #129	; 0x81
 80a35c6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a35c8:	bd10      	pop	{r4, pc}
 80a35ca:	bf00      	nop
 80a35cc:	200003d1 	.word	0x200003d1
 80a35d0:	20000350 	.word	0x20000350

080a35d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a35d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a35d6:	4d0e      	ldr	r5, [pc, #56]	; (80a3610 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a35d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a35da:	a801      	add	r0, sp, #4
 80a35dc:	f7ff ffe4 	bl	80a35a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a35e0:	6829      	ldr	r1, [r5, #0]
 80a35e2:	f011 0401 	ands.w	r4, r1, #1
 80a35e6:	d110      	bne.n	80a360a <_Z16_fetch_usbserialv+0x36>
 80a35e8:	4628      	mov	r0, r5
 80a35ea:	f7fc fd5a 	bl	80a00a2 <__cxa_guard_acquire>
 80a35ee:	b160      	cbz	r0, 80a360a <_Z16_fetch_usbserialv+0x36>
 80a35f0:	aa01      	add	r2, sp, #4
 80a35f2:	4621      	mov	r1, r4
 80a35f4:	4807      	ldr	r0, [pc, #28]	; (80a3614 <_Z16_fetch_usbserialv+0x40>)
 80a35f6:	f7ff ffb9 	bl	80a356c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a35fa:	4628      	mov	r0, r5
 80a35fc:	f7fc fd56 	bl	80a00ac <__cxa_guard_release>
 80a3600:	4a05      	ldr	r2, [pc, #20]	; (80a3618 <_Z16_fetch_usbserialv+0x44>)
 80a3602:	4906      	ldr	r1, [pc, #24]	; (80a361c <_Z16_fetch_usbserialv+0x48>)
 80a3604:	4803      	ldr	r0, [pc, #12]	; (80a3614 <_Z16_fetch_usbserialv+0x40>)
 80a3606:	f000 fa11 	bl	80a3a2c <__aeabi_atexit>
	return _usbserial;
}
 80a360a:	4802      	ldr	r0, [pc, #8]	; (80a3614 <_Z16_fetch_usbserialv+0x40>)
 80a360c:	b007      	add	sp, #28
 80a360e:	bd30      	pop	{r4, r5, pc}
 80a3610:	2000034c 	.word	0x2000034c
 80a3614:	200004d4 	.word	0x200004d4
 80a3618:	200000a4 	.word	0x200000a4
 80a361c:	080a34ed 	.word	0x080a34ed

080a3620 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3620:	b510      	push	{r4, lr}
 80a3622:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3624:	2214      	movs	r2, #20
 80a3626:	2100      	movs	r1, #0
 80a3628:	f001 fa9d 	bl	80a4b66 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a362c:	4b05      	ldr	r3, [pc, #20]	; (80a3644 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a362e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3630:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3632:	4b05      	ldr	r3, [pc, #20]	; (80a3648 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3634:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3636:	f240 1301 	movw	r3, #257	; 0x101
 80a363a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a363c:	2381      	movs	r3, #129	; 0x81
 80a363e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3640:	bd10      	pop	{r4, pc}
 80a3642:	bf00      	nop
 80a3644:	20000584 	.word	0x20000584
 80a3648:	200004ec 	.word	0x200004ec

080a364c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a364c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a364e:	4c0e      	ldr	r4, [pc, #56]	; (80a3688 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3650:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3652:	a801      	add	r0, sp, #4
 80a3654:	f7ff ffe4 	bl	80a3620 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3658:	6823      	ldr	r3, [r4, #0]
 80a365a:	07db      	lsls	r3, r3, #31
 80a365c:	d410      	bmi.n	80a3680 <_Z17_fetch_usbserial1v+0x34>
 80a365e:	4620      	mov	r0, r4
 80a3660:	f7fc fd1f 	bl	80a00a2 <__cxa_guard_acquire>
 80a3664:	b160      	cbz	r0, 80a3680 <_Z17_fetch_usbserial1v+0x34>
 80a3666:	aa01      	add	r2, sp, #4
 80a3668:	2101      	movs	r1, #1
 80a366a:	4808      	ldr	r0, [pc, #32]	; (80a368c <_Z17_fetch_usbserial1v+0x40>)
 80a366c:	f7ff ff7e 	bl	80a356c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3670:	4620      	mov	r0, r4
 80a3672:	f7fc fd1b 	bl	80a00ac <__cxa_guard_release>
 80a3676:	4a06      	ldr	r2, [pc, #24]	; (80a3690 <_Z17_fetch_usbserial1v+0x44>)
 80a3678:	4906      	ldr	r1, [pc, #24]	; (80a3694 <_Z17_fetch_usbserial1v+0x48>)
 80a367a:	4804      	ldr	r0, [pc, #16]	; (80a368c <_Z17_fetch_usbserial1v+0x40>)
 80a367c:	f000 f9d6 	bl	80a3a2c <__aeabi_atexit>
  return _usbserial1;
}
 80a3680:	4802      	ldr	r0, [pc, #8]	; (80a368c <_Z17_fetch_usbserial1v+0x40>)
 80a3682:	b006      	add	sp, #24
 80a3684:	bd10      	pop	{r4, pc}
 80a3686:	bf00      	nop
 80a3688:	200004e8 	.word	0x200004e8
 80a368c:	20000570 	.word	0x20000570
 80a3690:	200000a4 	.word	0x200000a4
 80a3694:	080a34ed 	.word	0x080a34ed

080a3698 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3698:	2200      	movs	r2, #0
 80a369a:	4611      	mov	r1, r2
 80a369c:	6840      	ldr	r0, [r0, #4]
 80a369e:	f7ff b887 	b.w	80a27b0 <network_ready>

080a36a2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a36a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a36a4:	4616      	mov	r6, r2
 80a36a6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a36a8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a36aa:	460f      	mov	r7, r1
 80a36ac:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a36ae:	2100      	movs	r1, #0
 80a36b0:	a803      	add	r0, sp, #12
 80a36b2:	f001 fa58 	bl	80a4b66 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a36b6:	4630      	mov	r0, r6
 80a36b8:	f001 fa86 	bl	80a4bc8 <strlen>
 80a36bc:	2500      	movs	r5, #0
 80a36be:	9500      	str	r5, [sp, #0]
 80a36c0:	b281      	uxth	r1, r0
 80a36c2:	687b      	ldr	r3, [r7, #4]
 80a36c4:	aa03      	add	r2, sp, #12
 80a36c6:	4630      	mov	r0, r6
 80a36c8:	f7ff f81e 	bl	80a2708 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a36cc:	b120      	cbz	r0, 80a36d8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a36ce:	4629      	mov	r1, r5
 80a36d0:	4620      	mov	r0, r4
 80a36d2:	f7ff f96f 	bl	80a29b4 <_ZN9IPAddressC1Em>
 80a36d6:	e003      	b.n	80a36e0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a36d8:	a903      	add	r1, sp, #12
 80a36da:	4620      	mov	r0, r4
 80a36dc:	f7ff f958 	bl	80a2990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a36e0:	4620      	mov	r0, r4
 80a36e2:	b009      	add	sp, #36	; 0x24
 80a36e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a36e6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a36e6:	2200      	movs	r2, #0
 80a36e8:	4611      	mov	r1, r2
 80a36ea:	6840      	ldr	r0, [r0, #4]
 80a36ec:	f7ff b880 	b.w	80a27f0 <network_listening>

080a36f0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a36f0:	2200      	movs	r2, #0
 80a36f2:	4611      	mov	r1, r2
 80a36f4:	6840      	ldr	r0, [r0, #4]
 80a36f6:	f7ff b88b 	b.w	80a2810 <network_get_listen_timeout>

080a36fa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a36fa:	2200      	movs	r2, #0
 80a36fc:	6840      	ldr	r0, [r0, #4]
 80a36fe:	f7ff b87f 	b.w	80a2800 <network_set_listen_timeout>

080a3702 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3702:	2200      	movs	r2, #0
 80a3704:	f081 0101 	eor.w	r1, r1, #1
 80a3708:	6840      	ldr	r0, [r0, #4]
 80a370a:	f7ff b869 	b.w	80a27e0 <network_listen>

080a370e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a370e:	2300      	movs	r3, #0
 80a3710:	461a      	mov	r2, r3
 80a3712:	4619      	mov	r1, r3
 80a3714:	6840      	ldr	r0, [r0, #4]
 80a3716:	f7ff b85b 	b.w	80a27d0 <network_off>

080a371a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a371a:	2300      	movs	r3, #0
 80a371c:	461a      	mov	r2, r3
 80a371e:	4619      	mov	r1, r3
 80a3720:	6840      	ldr	r0, [r0, #4]
 80a3722:	f7ff b84d 	b.w	80a27c0 <network_on>

080a3726 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3726:	2200      	movs	r2, #0
 80a3728:	4611      	mov	r1, r2
 80a372a:	6840      	ldr	r0, [r0, #4]
 80a372c:	f7ff b830 	b.w	80a2790 <network_connecting>

080a3730 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3730:	2200      	movs	r2, #0
 80a3732:	2102      	movs	r1, #2
 80a3734:	6840      	ldr	r0, [r0, #4]
 80a3736:	f7ff b833 	b.w	80a27a0 <network_disconnect>

080a373a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a373a:	2300      	movs	r3, #0
 80a373c:	461a      	mov	r2, r3
 80a373e:	6840      	ldr	r0, [r0, #4]
 80a3740:	f7ff b81e 	b.w	80a2780 <network_connect>

080a3744 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3744:	4b02      	ldr	r3, [pc, #8]	; (80a3750 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3746:	2204      	movs	r2, #4
 80a3748:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a374a:	4a02      	ldr	r2, [pc, #8]	; (80a3754 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a374c:	601a      	str	r2, [r3, #0]
 80a374e:	4770      	bx	lr
 80a3750:	20000688 	.word	0x20000688
 80a3754:	080a4ffc 	.word	0x080a4ffc

080a3758 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3758:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a375a:	4b14      	ldr	r3, [pc, #80]	; (80a37ac <serialEventRun+0x54>)
 80a375c:	b133      	cbz	r3, 80a376c <serialEventRun+0x14>
 80a375e:	f7ff ff39 	bl	80a35d4 <_Z16_fetch_usbserialv>
 80a3762:	6803      	ldr	r3, [r0, #0]
 80a3764:	691b      	ldr	r3, [r3, #16]
 80a3766:	4798      	blx	r3
 80a3768:	2800      	cmp	r0, #0
 80a376a:	dc16      	bgt.n	80a379a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a376c:	4b10      	ldr	r3, [pc, #64]	; (80a37b0 <serialEventRun+0x58>)
 80a376e:	b133      	cbz	r3, 80a377e <serialEventRun+0x26>
 80a3770:	f7ff fe94 	bl	80a349c <_Z22__fetch_global_Serial1v>
 80a3774:	6803      	ldr	r3, [r0, #0]
 80a3776:	691b      	ldr	r3, [r3, #16]
 80a3778:	4798      	blx	r3
 80a377a:	2800      	cmp	r0, #0
 80a377c:	dc10      	bgt.n	80a37a0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a377e:	4b0d      	ldr	r3, [pc, #52]	; (80a37b4 <serialEventRun+0x5c>)
 80a3780:	b10b      	cbz	r3, 80a3786 <serialEventRun+0x2e>
 80a3782:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3786:	4b0c      	ldr	r3, [pc, #48]	; (80a37b8 <serialEventRun+0x60>)
 80a3788:	b17b      	cbz	r3, 80a37aa <serialEventRun+0x52>
 80a378a:	f7ff ff5f 	bl	80a364c <_Z17_fetch_usbserial1v>
 80a378e:	6803      	ldr	r3, [r0, #0]
 80a3790:	691b      	ldr	r3, [r3, #16]
 80a3792:	4798      	blx	r3
 80a3794:	2800      	cmp	r0, #0
 80a3796:	dc06      	bgt.n	80a37a6 <serialEventRun+0x4e>
 80a3798:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a379a:	f3af 8000 	nop.w
 80a379e:	e7e5      	b.n	80a376c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a37a0:	f3af 8000 	nop.w
 80a37a4:	e7eb      	b.n	80a377e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a37a6:	f3af 8000 	nop.w
 80a37aa:	bd08      	pop	{r3, pc}
	...

080a37bc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a37bc:	b508      	push	{r3, lr}
	serialEventRun();
 80a37be:	f7ff ffcb 	bl	80a3758 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a37c2:	f7fe fe17 	bl	80a23f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a37c6:	4b01      	ldr	r3, [pc, #4]	; (80a37cc <_post_loop+0x10>)
 80a37c8:	6018      	str	r0, [r3, #0]
 80a37ca:	bd08      	pop	{r3, pc}
 80a37cc:	20000698 	.word	0x20000698

080a37d0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a37d0:	4802      	ldr	r0, [pc, #8]	; (80a37dc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a37d2:	4a03      	ldr	r2, [pc, #12]	; (80a37e0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a37d4:	4903      	ldr	r1, [pc, #12]	; (80a37e4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a37d6:	1a12      	subs	r2, r2, r0
 80a37d8:	f001 b9ba 	b.w	80a4b50 <memcpy>
 80a37dc:	40024000 	.word	0x40024000
 80a37e0:	40024004 	.word	0x40024004
 80a37e4:	080a50d0 	.word	0x080a50d0

080a37e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a37e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a37ea:	2300      	movs	r3, #0
 80a37ec:	9300      	str	r3, [sp, #0]
 80a37ee:	461a      	mov	r2, r3
 80a37f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a37f4:	f7fe ffaa 	bl	80a274c <system_ctrl_set_result>
}
 80a37f8:	b003      	add	sp, #12
 80a37fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3800 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3800:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3802:	8843      	ldrh	r3, [r0, #2]
 80a3804:	2b0a      	cmp	r3, #10
 80a3806:	d008      	beq.n	80a381a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3808:	2b50      	cmp	r3, #80	; 0x50
 80a380a:	d109      	bne.n	80a3820 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a380c:	4b09      	ldr	r3, [pc, #36]	; (80a3834 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a380e:	681b      	ldr	r3, [r3, #0]
 80a3810:	b13b      	cbz	r3, 80a3822 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3812:	b003      	add	sp, #12
 80a3814:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3818:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a381a:	f7ff ffe5 	bl	80a37e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a381e:	e006      	b.n	80a382e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3820:	2300      	movs	r3, #0
 80a3822:	9300      	str	r3, [sp, #0]
 80a3824:	461a      	mov	r2, r3
 80a3826:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a382a:	f7fe ff8f 	bl	80a274c <system_ctrl_set_result>
        break;
    }
}
 80a382e:	b003      	add	sp, #12
 80a3830:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3834:	20000690 	.word	0x20000690

080a3838 <module_user_init_hook>:

void module_user_init_hook()
{
 80a3838:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a383a:	4c10      	ldr	r4, [pc, #64]	; (80a387c <module_user_init_hook+0x44>)
 80a383c:	4d10      	ldr	r5, [pc, #64]	; (80a3880 <module_user_init_hook+0x48>)
 80a383e:	6823      	ldr	r3, [r4, #0]
 80a3840:	42ab      	cmp	r3, r5
 80a3842:	4b10      	ldr	r3, [pc, #64]	; (80a3884 <module_user_init_hook+0x4c>)
 80a3844:	bf0c      	ite	eq
 80a3846:	2201      	moveq	r2, #1
 80a3848:	2200      	movne	r2, #0
 80a384a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a384c:	d002      	beq.n	80a3854 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a384e:	f7ff ffbf 	bl	80a37d0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3852:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3854:	f7fe fdbe 	bl	80a23d4 <HAL_RNG_GetRandomNumber>
 80a3858:	4604      	mov	r4, r0
    srand(seed);
 80a385a:	f001 f98d 	bl	80a4b78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a385e:	4b0a      	ldr	r3, [pc, #40]	; (80a3888 <module_user_init_hook+0x50>)
 80a3860:	b113      	cbz	r3, 80a3868 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3862:	4620      	mov	r0, r4
 80a3864:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3868:	2100      	movs	r1, #0
 80a386a:	4807      	ldr	r0, [pc, #28]	; (80a3888 <module_user_init_hook+0x50>)
 80a386c:	f7fe ff78 	bl	80a2760 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3874:	2100      	movs	r1, #0
 80a3876:	4805      	ldr	r0, [pc, #20]	; (80a388c <module_user_init_hook+0x54>)
 80a3878:	f7fe bf5e 	b.w	80a2738 <system_ctrl_set_app_request_handler>
 80a387c:	40024000 	.word	0x40024000
 80a3880:	9a271c1e 	.word	0x9a271c1e
 80a3884:	20000694 	.word	0x20000694
 80a3888:	00000000 	.word	0x00000000
 80a388c:	080a3801 	.word	0x080a3801

080a3890 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3890:	b510      	push	{r4, lr}
 80a3892:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3894:	480f      	ldr	r0, [pc, #60]	; (80a38d4 <pinAvailable+0x44>)
 80a3896:	f7ff fb2f 	bl	80a2ef8 <_ZN8SPIClass9isEnabledEv>
 80a389a:	b128      	cbz	r0, 80a38a8 <pinAvailable+0x18>
 80a389c:	f1a4 030d 	sub.w	r3, r4, #13
 80a38a0:	2b02      	cmp	r3, #2
 80a38a2:	d801      	bhi.n	80a38a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a38a4:	2000      	movs	r0, #0
 80a38a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a38a8:	f000 f866 	bl	80a3978 <_Z19__fetch_global_Wirev>
 80a38ac:	f7ff f845 	bl	80a293a <_ZN7TwoWire9isEnabledEv>
 80a38b0:	b108      	cbz	r0, 80a38b6 <pinAvailable+0x26>
 80a38b2:	2c01      	cmp	r4, #1
 80a38b4:	d9f6      	bls.n	80a38a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a38b6:	f7ff fdf1 	bl	80a349c <_Z22__fetch_global_Serial1v>
 80a38ba:	f7ff fdeb 	bl	80a3494 <_ZN11USARTSerial9isEnabledEv>
 80a38be:	b118      	cbz	r0, 80a38c8 <pinAvailable+0x38>
 80a38c0:	f1a4 0312 	sub.w	r3, r4, #18
 80a38c4:	2b01      	cmp	r3, #1
 80a38c6:	d9ed      	bls.n	80a38a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a38c8:	2c17      	cmp	r4, #23
 80a38ca:	bf8c      	ite	hi
 80a38cc:	2000      	movhi	r0, #0
 80a38ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a38d0:	bd10      	pop	{r4, pc}
 80a38d2:	bf00      	nop
 80a38d4:	200006cc 	.word	0x200006cc

080a38d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a38d8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a38da:	b538      	push	{r3, r4, r5, lr}
 80a38dc:	4604      	mov	r4, r0
 80a38de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a38e0:	d80a      	bhi.n	80a38f8 <pinMode+0x20>
 80a38e2:	29ff      	cmp	r1, #255	; 0xff
 80a38e4:	d008      	beq.n	80a38f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a38e6:	f7ff ffd3 	bl	80a3890 <pinAvailable>
 80a38ea:	b128      	cbz	r0, 80a38f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a38ec:	4629      	mov	r1, r5
 80a38ee:	4620      	mov	r0, r4
}
 80a38f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a38f4:	f7fe bd96 	b.w	80a2424 <HAL_Pin_Mode>
 80a38f8:	bd38      	pop	{r3, r4, r5, pc}

080a38fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a38fa:	b538      	push	{r3, r4, r5, lr}
 80a38fc:	4604      	mov	r4, r0
 80a38fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3900:	f7fe fd98 	bl	80a2434 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3904:	28ff      	cmp	r0, #255	; 0xff
 80a3906:	d010      	beq.n	80a392a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3908:	2806      	cmp	r0, #6
 80a390a:	d804      	bhi.n	80a3916 <digitalWrite+0x1c>
 80a390c:	234d      	movs	r3, #77	; 0x4d
 80a390e:	fa23 f000 	lsr.w	r0, r3, r0
 80a3912:	07c3      	lsls	r3, r0, #31
 80a3914:	d409      	bmi.n	80a392a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3916:	4620      	mov	r0, r4
 80a3918:	f7ff ffba 	bl	80a3890 <pinAvailable>
 80a391c:	b128      	cbz	r0, 80a392a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a391e:	4629      	mov	r1, r5
 80a3920:	4620      	mov	r0, r4
}
 80a3922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3926:	f7fe bd8d 	b.w	80a2444 <HAL_GPIO_Write>
 80a392a:	bd38      	pop	{r3, r4, r5, pc}

080a392c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a392c:	b538      	push	{r3, r4, r5, lr}
 80a392e:	4604      	mov	r4, r0
 80a3930:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a3932:	f7ff ffad 	bl	80a3890 <pinAvailable>
 80a3936:	b1f0      	cbz	r0, 80a3976 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a3938:	2104      	movs	r1, #4
 80a393a:	4620      	mov	r0, r4
 80a393c:	f7fe fd6a 	bl	80a2414 <HAL_Validate_Pin_Function>
 80a3940:	2804      	cmp	r0, #4
 80a3942:	d105      	bne.n	80a3950 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a3944:	b2a9      	uxth	r1, r5
 80a3946:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a3948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a394c:	f7fe bd82 	b.w	80a2454 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a3950:	2102      	movs	r1, #2
 80a3952:	4620      	mov	r0, r4
 80a3954:	f7fe fd5e 	bl	80a2414 <HAL_Validate_Pin_Function>
 80a3958:	2802      	cmp	r0, #2
 80a395a:	d10c      	bne.n	80a3976 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a395c:	4620      	mov	r0, r4
 80a395e:	f7fe fd69 	bl	80a2434 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a3962:	2801      	cmp	r0, #1
 80a3964:	d001      	beq.n	80a396a <_Z11analogWritetm+0x3e>
 80a3966:	2804      	cmp	r0, #4
 80a3968:	d105      	bne.n	80a3976 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a396a:	4629      	mov	r1, r5
 80a396c:	4620      	mov	r0, r4
    }
}
 80a396e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a3972:	f7fe bd77 	b.w	80a2464 <HAL_PWM_Write_Ext>
 80a3976:	bd38      	pop	{r3, r4, r5, pc}

080a3978 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3978:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a397a:	4d0b      	ldr	r5, [pc, #44]	; (80a39a8 <_Z19__fetch_global_Wirev+0x30>)
 80a397c:	6829      	ldr	r1, [r5, #0]
 80a397e:	f011 0401 	ands.w	r4, r1, #1
 80a3982:	d10f      	bne.n	80a39a4 <_Z19__fetch_global_Wirev+0x2c>
 80a3984:	4628      	mov	r0, r5
 80a3986:	f7fc fb8c 	bl	80a00a2 <__cxa_guard_acquire>
 80a398a:	b158      	cbz	r0, 80a39a4 <_Z19__fetch_global_Wirev+0x2c>
 80a398c:	4621      	mov	r1, r4
 80a398e:	4807      	ldr	r0, [pc, #28]	; (80a39ac <_Z19__fetch_global_Wirev+0x34>)
 80a3990:	f7fe ffa4 	bl	80a28dc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3994:	4628      	mov	r0, r5
 80a3996:	f7fc fb89 	bl	80a00ac <__cxa_guard_release>
 80a399a:	4a05      	ldr	r2, [pc, #20]	; (80a39b0 <_Z19__fetch_global_Wirev+0x38>)
 80a399c:	4905      	ldr	r1, [pc, #20]	; (80a39b4 <_Z19__fetch_global_Wirev+0x3c>)
 80a399e:	4803      	ldr	r0, [pc, #12]	; (80a39ac <_Z19__fetch_global_Wirev+0x34>)
 80a39a0:	f000 f844 	bl	80a3a2c <__aeabi_atexit>
	return wire;
}
 80a39a4:	4801      	ldr	r0, [pc, #4]	; (80a39ac <_Z19__fetch_global_Wirev+0x34>)
 80a39a6:	bd38      	pop	{r3, r4, r5, pc}
 80a39a8:	2000069c 	.word	0x2000069c
 80a39ac:	200006a0 	.word	0x200006a0
 80a39b0:	200000a4 	.word	0x200000a4
 80a39b4:	080a2883 	.word	0x080a2883

080a39b8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a39b8:	b513      	push	{r0, r1, r4, lr}
 80a39ba:	4c08      	ldr	r4, [pc, #32]	; (80a39dc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a39bc:	2300      	movs	r3, #0
 80a39be:	461a      	mov	r2, r3
 80a39c0:	4619      	mov	r1, r3
 80a39c2:	9300      	str	r3, [sp, #0]
 80a39c4:	4620      	mov	r0, r4
 80a39c6:	f7ff f80b 	bl	80a29e0 <_ZN9IPAddressC1Ehhhh>
 80a39ca:	4620      	mov	r0, r4
 80a39cc:	4a04      	ldr	r2, [pc, #16]	; (80a39e0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a39ce:	4905      	ldr	r1, [pc, #20]	; (80a39e4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a39d0:	b002      	add	sp, #8
 80a39d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a39d6:	f000 b829 	b.w	80a3a2c <__aeabi_atexit>
 80a39da:	bf00      	nop
 80a39dc:	200006b4 	.word	0x200006b4
 80a39e0:	200000a4 	.word	0x200000a4
 80a39e4:	080a00b3 	.word	0x080a00b3

080a39e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a39e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a39ea:	4c0c      	ldr	r4, [pc, #48]	; (80a3a1c <_GLOBAL__sub_I_SPI+0x34>)
 80a39ec:	4e0c      	ldr	r6, [pc, #48]	; (80a3a20 <_GLOBAL__sub_I_SPI+0x38>)
 80a39ee:	4d0d      	ldr	r5, [pc, #52]	; (80a3a24 <_GLOBAL__sub_I_SPI+0x3c>)
 80a39f0:	2100      	movs	r1, #0
 80a39f2:	4620      	mov	r0, r4
 80a39f4:	f7ff fa00 	bl	80a2df8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a39f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a39fa:	4c0b      	ldr	r4, [pc, #44]	; (80a3a28 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a39fc:	4632      	mov	r2, r6
 80a39fe:	4629      	mov	r1, r5
 80a3a00:	f000 f814 	bl	80a3a2c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3a04:	2101      	movs	r1, #1
 80a3a06:	4620      	mov	r0, r4
 80a3a08:	f7ff f9f6 	bl	80a2df8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3a0c:	4632      	mov	r2, r6
 80a3a0e:	4629      	mov	r1, r5
 80a3a10:	4620      	mov	r0, r4
 80a3a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3a16:	f000 b809 	b.w	80a3a2c <__aeabi_atexit>
 80a3a1a:	bf00      	nop
 80a3a1c:	200006cc 	.word	0x200006cc
 80a3a20:	200000a4 	.word	0x200000a4
 80a3a24:	080a2de9 	.word	0x080a2de9
 80a3a28:	200006dc 	.word	0x200006dc

080a3a2c <__aeabi_atexit>:
 80a3a2c:	460b      	mov	r3, r1
 80a3a2e:	4601      	mov	r1, r0
 80a3a30:	4618      	mov	r0, r3
 80a3a32:	f001 b87f 	b.w	80a4b34 <__cxa_atexit>

080a3a36 <_ZdlPvj>:
 80a3a36:	f7fc bb32 	b.w	80a009e <_ZdlPv>
	...

080a3a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3a3c:	4b24      	ldr	r3, [pc, #144]	; (80a3ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3a3e:	681a      	ldr	r2, [r3, #0]
 80a3a40:	07d0      	lsls	r0, r2, #31
 80a3a42:	bf5c      	itt	pl
 80a3a44:	2201      	movpl	r2, #1
 80a3a46:	601a      	strpl	r2, [r3, #0]
 80a3a48:	4b22      	ldr	r3, [pc, #136]	; (80a3ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3a4a:	681a      	ldr	r2, [r3, #0]
 80a3a4c:	07d1      	lsls	r1, r2, #31
 80a3a4e:	bf5c      	itt	pl
 80a3a50:	2201      	movpl	r2, #1
 80a3a52:	601a      	strpl	r2, [r3, #0]
 80a3a54:	4b20      	ldr	r3, [pc, #128]	; (80a3ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3a56:	681a      	ldr	r2, [r3, #0]
 80a3a58:	07d2      	lsls	r2, r2, #31
 80a3a5a:	bf5c      	itt	pl
 80a3a5c:	2201      	movpl	r2, #1
 80a3a5e:	601a      	strpl	r2, [r3, #0]
 80a3a60:	4b1e      	ldr	r3, [pc, #120]	; (80a3adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3a62:	681a      	ldr	r2, [r3, #0]
 80a3a64:	07d0      	lsls	r0, r2, #31
 80a3a66:	bf5c      	itt	pl
 80a3a68:	2201      	movpl	r2, #1
 80a3a6a:	601a      	strpl	r2, [r3, #0]
 80a3a6c:	4b1c      	ldr	r3, [pc, #112]	; (80a3ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3a6e:	681a      	ldr	r2, [r3, #0]
 80a3a70:	07d1      	lsls	r1, r2, #31
 80a3a72:	bf5c      	itt	pl
 80a3a74:	2201      	movpl	r2, #1
 80a3a76:	601a      	strpl	r2, [r3, #0]
 80a3a78:	4b1a      	ldr	r3, [pc, #104]	; (80a3ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3a7a:	681a      	ldr	r2, [r3, #0]
 80a3a7c:	07d2      	lsls	r2, r2, #31
 80a3a7e:	bf5c      	itt	pl
 80a3a80:	2201      	movpl	r2, #1
 80a3a82:	601a      	strpl	r2, [r3, #0]
 80a3a84:	4b18      	ldr	r3, [pc, #96]	; (80a3ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3a86:	681a      	ldr	r2, [r3, #0]
 80a3a88:	07d0      	lsls	r0, r2, #31
 80a3a8a:	bf5c      	itt	pl
 80a3a8c:	2201      	movpl	r2, #1
 80a3a8e:	601a      	strpl	r2, [r3, #0]
 80a3a90:	4b16      	ldr	r3, [pc, #88]	; (80a3aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3a92:	681a      	ldr	r2, [r3, #0]
 80a3a94:	07d1      	lsls	r1, r2, #31
 80a3a96:	bf5c      	itt	pl
 80a3a98:	2201      	movpl	r2, #1
 80a3a9a:	601a      	strpl	r2, [r3, #0]
 80a3a9c:	4b14      	ldr	r3, [pc, #80]	; (80a3af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3a9e:	681a      	ldr	r2, [r3, #0]
 80a3aa0:	07d2      	lsls	r2, r2, #31
 80a3aa2:	bf5c      	itt	pl
 80a3aa4:	2201      	movpl	r2, #1
 80a3aa6:	601a      	strpl	r2, [r3, #0]
 80a3aa8:	4b12      	ldr	r3, [pc, #72]	; (80a3af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3aaa:	681a      	ldr	r2, [r3, #0]
 80a3aac:	07d0      	lsls	r0, r2, #31
 80a3aae:	bf5c      	itt	pl
 80a3ab0:	2201      	movpl	r2, #1
 80a3ab2:	601a      	strpl	r2, [r3, #0]
 80a3ab4:	4b10      	ldr	r3, [pc, #64]	; (80a3af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3ab6:	681a      	ldr	r2, [r3, #0]
 80a3ab8:	07d1      	lsls	r1, r2, #31
 80a3aba:	bf5c      	itt	pl
 80a3abc:	2201      	movpl	r2, #1
 80a3abe:	601a      	strpl	r2, [r3, #0]
 80a3ac0:	4b0e      	ldr	r3, [pc, #56]	; (80a3afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3ac2:	681a      	ldr	r2, [r3, #0]
 80a3ac4:	07d2      	lsls	r2, r2, #31
 80a3ac6:	bf5c      	itt	pl
 80a3ac8:	2201      	movpl	r2, #1
 80a3aca:	601a      	strpl	r2, [r3, #0]
 80a3acc:	4770      	bx	lr
 80a3ace:	bf00      	nop
 80a3ad0:	20000718 	.word	0x20000718
 80a3ad4:	20000714 	.word	0x20000714
 80a3ad8:	20000710 	.word	0x20000710
 80a3adc:	2000070c 	.word	0x2000070c
 80a3ae0:	20000708 	.word	0x20000708
 80a3ae4:	20000704 	.word	0x20000704
 80a3ae8:	20000700 	.word	0x20000700
 80a3aec:	200006fc 	.word	0x200006fc
 80a3af0:	200006f8 	.word	0x200006f8
 80a3af4:	200006f4 	.word	0x200006f4
 80a3af8:	200006f0 	.word	0x200006f0
 80a3afc:	200006ec 	.word	0x200006ec

080a3b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3b00:	4b18      	ldr	r3, [pc, #96]	; (80a3b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3b02:	681a      	ldr	r2, [r3, #0]
 80a3b04:	07d1      	lsls	r1, r2, #31
 80a3b06:	bf5c      	itt	pl
 80a3b08:	2201      	movpl	r2, #1
 80a3b0a:	601a      	strpl	r2, [r3, #0]
 80a3b0c:	4b16      	ldr	r3, [pc, #88]	; (80a3b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3b0e:	681a      	ldr	r2, [r3, #0]
 80a3b10:	07d2      	lsls	r2, r2, #31
 80a3b12:	bf5c      	itt	pl
 80a3b14:	2201      	movpl	r2, #1
 80a3b16:	601a      	strpl	r2, [r3, #0]
 80a3b18:	4b14      	ldr	r3, [pc, #80]	; (80a3b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3b1a:	681a      	ldr	r2, [r3, #0]
 80a3b1c:	07d0      	lsls	r0, r2, #31
 80a3b1e:	bf5c      	itt	pl
 80a3b20:	2201      	movpl	r2, #1
 80a3b22:	601a      	strpl	r2, [r3, #0]
 80a3b24:	4b12      	ldr	r3, [pc, #72]	; (80a3b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3b26:	681a      	ldr	r2, [r3, #0]
 80a3b28:	07d1      	lsls	r1, r2, #31
 80a3b2a:	bf5c      	itt	pl
 80a3b2c:	2201      	movpl	r2, #1
 80a3b2e:	601a      	strpl	r2, [r3, #0]
 80a3b30:	4b10      	ldr	r3, [pc, #64]	; (80a3b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3b32:	681a      	ldr	r2, [r3, #0]
 80a3b34:	07d2      	lsls	r2, r2, #31
 80a3b36:	bf5c      	itt	pl
 80a3b38:	2201      	movpl	r2, #1
 80a3b3a:	601a      	strpl	r2, [r3, #0]
 80a3b3c:	4b0e      	ldr	r3, [pc, #56]	; (80a3b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3b3e:	681a      	ldr	r2, [r3, #0]
 80a3b40:	07d0      	lsls	r0, r2, #31
 80a3b42:	bf5c      	itt	pl
 80a3b44:	2201      	movpl	r2, #1
 80a3b46:	601a      	strpl	r2, [r3, #0]
 80a3b48:	4b0c      	ldr	r3, [pc, #48]	; (80a3b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3b4a:	681a      	ldr	r2, [r3, #0]
 80a3b4c:	07d1      	lsls	r1, r2, #31
 80a3b4e:	bf5c      	itt	pl
 80a3b50:	2201      	movpl	r2, #1
 80a3b52:	601a      	strpl	r2, [r3, #0]
 80a3b54:	4b0a      	ldr	r3, [pc, #40]	; (80a3b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3b56:	681a      	ldr	r2, [r3, #0]
 80a3b58:	07d2      	lsls	r2, r2, #31
 80a3b5a:	bf5c      	itt	pl
 80a3b5c:	2201      	movpl	r2, #1
 80a3b5e:	601a      	strpl	r2, [r3, #0]
 80a3b60:	4770      	bx	lr
 80a3b62:	bf00      	nop
 80a3b64:	20000738 	.word	0x20000738
 80a3b68:	20000734 	.word	0x20000734
 80a3b6c:	20000730 	.word	0x20000730
 80a3b70:	2000072c 	.word	0x2000072c
 80a3b74:	20000728 	.word	0x20000728
 80a3b78:	20000724 	.word	0x20000724
 80a3b7c:	20000720 	.word	0x20000720
 80a3b80:	2000071c 	.word	0x2000071c

080a3b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3b84:	4b18      	ldr	r3, [pc, #96]	; (80a3be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3b86:	681a      	ldr	r2, [r3, #0]
 80a3b88:	07d1      	lsls	r1, r2, #31
 80a3b8a:	bf5c      	itt	pl
 80a3b8c:	2201      	movpl	r2, #1
 80a3b8e:	601a      	strpl	r2, [r3, #0]
 80a3b90:	4b16      	ldr	r3, [pc, #88]	; (80a3bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3b92:	681a      	ldr	r2, [r3, #0]
 80a3b94:	07d2      	lsls	r2, r2, #31
 80a3b96:	bf5c      	itt	pl
 80a3b98:	2201      	movpl	r2, #1
 80a3b9a:	601a      	strpl	r2, [r3, #0]
 80a3b9c:	4b14      	ldr	r3, [pc, #80]	; (80a3bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3b9e:	681a      	ldr	r2, [r3, #0]
 80a3ba0:	07d0      	lsls	r0, r2, #31
 80a3ba2:	bf5c      	itt	pl
 80a3ba4:	2201      	movpl	r2, #1
 80a3ba6:	601a      	strpl	r2, [r3, #0]
 80a3ba8:	4b12      	ldr	r3, [pc, #72]	; (80a3bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3baa:	681a      	ldr	r2, [r3, #0]
 80a3bac:	07d1      	lsls	r1, r2, #31
 80a3bae:	bf5c      	itt	pl
 80a3bb0:	2201      	movpl	r2, #1
 80a3bb2:	601a      	strpl	r2, [r3, #0]
 80a3bb4:	4b10      	ldr	r3, [pc, #64]	; (80a3bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3bb6:	681a      	ldr	r2, [r3, #0]
 80a3bb8:	07d2      	lsls	r2, r2, #31
 80a3bba:	bf5c      	itt	pl
 80a3bbc:	2201      	movpl	r2, #1
 80a3bbe:	601a      	strpl	r2, [r3, #0]
 80a3bc0:	4b0e      	ldr	r3, [pc, #56]	; (80a3bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3bc2:	681a      	ldr	r2, [r3, #0]
 80a3bc4:	07d0      	lsls	r0, r2, #31
 80a3bc6:	bf5c      	itt	pl
 80a3bc8:	2201      	movpl	r2, #1
 80a3bca:	601a      	strpl	r2, [r3, #0]
 80a3bcc:	4b0c      	ldr	r3, [pc, #48]	; (80a3c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3bce:	681a      	ldr	r2, [r3, #0]
 80a3bd0:	07d1      	lsls	r1, r2, #31
 80a3bd2:	bf5c      	itt	pl
 80a3bd4:	2201      	movpl	r2, #1
 80a3bd6:	601a      	strpl	r2, [r3, #0]
 80a3bd8:	4b0a      	ldr	r3, [pc, #40]	; (80a3c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3bda:	681a      	ldr	r2, [r3, #0]
 80a3bdc:	07d2      	lsls	r2, r2, #31
 80a3bde:	bf5c      	itt	pl
 80a3be0:	2201      	movpl	r2, #1
 80a3be2:	601a      	strpl	r2, [r3, #0]
 80a3be4:	4770      	bx	lr
 80a3be6:	bf00      	nop
 80a3be8:	20000758 	.word	0x20000758
 80a3bec:	20000754 	.word	0x20000754
 80a3bf0:	20000750 	.word	0x20000750
 80a3bf4:	2000074c 	.word	0x2000074c
 80a3bf8:	20000748 	.word	0x20000748
 80a3bfc:	20000744 	.word	0x20000744
 80a3c00:	20000740 	.word	0x20000740
 80a3c04:	2000073c 	.word	0x2000073c

080a3c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3c08:	4b24      	ldr	r3, [pc, #144]	; (80a3c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3c0a:	681a      	ldr	r2, [r3, #0]
 80a3c0c:	07d0      	lsls	r0, r2, #31
 80a3c0e:	bf5c      	itt	pl
 80a3c10:	2201      	movpl	r2, #1
 80a3c12:	601a      	strpl	r2, [r3, #0]
 80a3c14:	4b22      	ldr	r3, [pc, #136]	; (80a3ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3c16:	681a      	ldr	r2, [r3, #0]
 80a3c18:	07d1      	lsls	r1, r2, #31
 80a3c1a:	bf5c      	itt	pl
 80a3c1c:	2201      	movpl	r2, #1
 80a3c1e:	601a      	strpl	r2, [r3, #0]
 80a3c20:	4b20      	ldr	r3, [pc, #128]	; (80a3ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3c22:	681a      	ldr	r2, [r3, #0]
 80a3c24:	07d2      	lsls	r2, r2, #31
 80a3c26:	bf5c      	itt	pl
 80a3c28:	2201      	movpl	r2, #1
 80a3c2a:	601a      	strpl	r2, [r3, #0]
 80a3c2c:	4b1e      	ldr	r3, [pc, #120]	; (80a3ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3c2e:	681a      	ldr	r2, [r3, #0]
 80a3c30:	07d0      	lsls	r0, r2, #31
 80a3c32:	bf5c      	itt	pl
 80a3c34:	2201      	movpl	r2, #1
 80a3c36:	601a      	strpl	r2, [r3, #0]
 80a3c38:	4b1c      	ldr	r3, [pc, #112]	; (80a3cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3c3a:	681a      	ldr	r2, [r3, #0]
 80a3c3c:	07d1      	lsls	r1, r2, #31
 80a3c3e:	bf5c      	itt	pl
 80a3c40:	2201      	movpl	r2, #1
 80a3c42:	601a      	strpl	r2, [r3, #0]
 80a3c44:	4b1a      	ldr	r3, [pc, #104]	; (80a3cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3c46:	681a      	ldr	r2, [r3, #0]
 80a3c48:	07d2      	lsls	r2, r2, #31
 80a3c4a:	bf5c      	itt	pl
 80a3c4c:	2201      	movpl	r2, #1
 80a3c4e:	601a      	strpl	r2, [r3, #0]
 80a3c50:	4b18      	ldr	r3, [pc, #96]	; (80a3cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3c52:	681a      	ldr	r2, [r3, #0]
 80a3c54:	07d0      	lsls	r0, r2, #31
 80a3c56:	bf5c      	itt	pl
 80a3c58:	2201      	movpl	r2, #1
 80a3c5a:	601a      	strpl	r2, [r3, #0]
 80a3c5c:	4b16      	ldr	r3, [pc, #88]	; (80a3cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3c5e:	681a      	ldr	r2, [r3, #0]
 80a3c60:	07d1      	lsls	r1, r2, #31
 80a3c62:	bf5c      	itt	pl
 80a3c64:	2201      	movpl	r2, #1
 80a3c66:	601a      	strpl	r2, [r3, #0]
 80a3c68:	4b14      	ldr	r3, [pc, #80]	; (80a3cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3c6a:	681a      	ldr	r2, [r3, #0]
 80a3c6c:	07d2      	lsls	r2, r2, #31
 80a3c6e:	bf5c      	itt	pl
 80a3c70:	2201      	movpl	r2, #1
 80a3c72:	601a      	strpl	r2, [r3, #0]
 80a3c74:	4b12      	ldr	r3, [pc, #72]	; (80a3cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3c76:	681a      	ldr	r2, [r3, #0]
 80a3c78:	07d0      	lsls	r0, r2, #31
 80a3c7a:	bf5c      	itt	pl
 80a3c7c:	2201      	movpl	r2, #1
 80a3c7e:	601a      	strpl	r2, [r3, #0]
 80a3c80:	4b10      	ldr	r3, [pc, #64]	; (80a3cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3c82:	681a      	ldr	r2, [r3, #0]
 80a3c84:	07d1      	lsls	r1, r2, #31
 80a3c86:	bf5c      	itt	pl
 80a3c88:	2201      	movpl	r2, #1
 80a3c8a:	601a      	strpl	r2, [r3, #0]
 80a3c8c:	4b0e      	ldr	r3, [pc, #56]	; (80a3cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3c8e:	681a      	ldr	r2, [r3, #0]
 80a3c90:	07d2      	lsls	r2, r2, #31
 80a3c92:	bf5c      	itt	pl
 80a3c94:	2201      	movpl	r2, #1
 80a3c96:	601a      	strpl	r2, [r3, #0]
 80a3c98:	4770      	bx	lr
 80a3c9a:	bf00      	nop
 80a3c9c:	20000788 	.word	0x20000788
 80a3ca0:	20000784 	.word	0x20000784
 80a3ca4:	20000780 	.word	0x20000780
 80a3ca8:	2000077c 	.word	0x2000077c
 80a3cac:	20000778 	.word	0x20000778
 80a3cb0:	20000774 	.word	0x20000774
 80a3cb4:	20000770 	.word	0x20000770
 80a3cb8:	2000076c 	.word	0x2000076c
 80a3cbc:	20000768 	.word	0x20000768
 80a3cc0:	20000764 	.word	0x20000764
 80a3cc4:	20000760 	.word	0x20000760
 80a3cc8:	2000075c 	.word	0x2000075c

080a3ccc <__aeabi_drsub>:
 80a3ccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3cd0:	e002      	b.n	80a3cd8 <__adddf3>
 80a3cd2:	bf00      	nop

080a3cd4 <__aeabi_dsub>:
 80a3cd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3cd8 <__adddf3>:
 80a3cd8:	b530      	push	{r4, r5, lr}
 80a3cda:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3cde:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3ce2:	ea94 0f05 	teq	r4, r5
 80a3ce6:	bf08      	it	eq
 80a3ce8:	ea90 0f02 	teqeq	r0, r2
 80a3cec:	bf1f      	itttt	ne
 80a3cee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3cf2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3cf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3cfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3cfe:	f000 80e2 	beq.w	80a3ec6 <__adddf3+0x1ee>
 80a3d02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3d06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3d0a:	bfb8      	it	lt
 80a3d0c:	426d      	neglt	r5, r5
 80a3d0e:	dd0c      	ble.n	80a3d2a <__adddf3+0x52>
 80a3d10:	442c      	add	r4, r5
 80a3d12:	ea80 0202 	eor.w	r2, r0, r2
 80a3d16:	ea81 0303 	eor.w	r3, r1, r3
 80a3d1a:	ea82 0000 	eor.w	r0, r2, r0
 80a3d1e:	ea83 0101 	eor.w	r1, r3, r1
 80a3d22:	ea80 0202 	eor.w	r2, r0, r2
 80a3d26:	ea81 0303 	eor.w	r3, r1, r3
 80a3d2a:	2d36      	cmp	r5, #54	; 0x36
 80a3d2c:	bf88      	it	hi
 80a3d2e:	bd30      	pophi	{r4, r5, pc}
 80a3d30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3d38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3d3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3d40:	d002      	beq.n	80a3d48 <__adddf3+0x70>
 80a3d42:	4240      	negs	r0, r0
 80a3d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3d48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3d50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3d54:	d002      	beq.n	80a3d5c <__adddf3+0x84>
 80a3d56:	4252      	negs	r2, r2
 80a3d58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3d5c:	ea94 0f05 	teq	r4, r5
 80a3d60:	f000 80a7 	beq.w	80a3eb2 <__adddf3+0x1da>
 80a3d64:	f1a4 0401 	sub.w	r4, r4, #1
 80a3d68:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3d6c:	db0d      	blt.n	80a3d8a <__adddf3+0xb2>
 80a3d6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3d72:	fa22 f205 	lsr.w	r2, r2, r5
 80a3d76:	1880      	adds	r0, r0, r2
 80a3d78:	f141 0100 	adc.w	r1, r1, #0
 80a3d7c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3d80:	1880      	adds	r0, r0, r2
 80a3d82:	fa43 f305 	asr.w	r3, r3, r5
 80a3d86:	4159      	adcs	r1, r3
 80a3d88:	e00e      	b.n	80a3da8 <__adddf3+0xd0>
 80a3d8a:	f1a5 0520 	sub.w	r5, r5, #32
 80a3d8e:	f10e 0e20 	add.w	lr, lr, #32
 80a3d92:	2a01      	cmp	r2, #1
 80a3d94:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3d98:	bf28      	it	cs
 80a3d9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3d9e:	fa43 f305 	asr.w	r3, r3, r5
 80a3da2:	18c0      	adds	r0, r0, r3
 80a3da4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3dac:	d507      	bpl.n	80a3dbe <__adddf3+0xe6>
 80a3dae:	f04f 0e00 	mov.w	lr, #0
 80a3db2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3db6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3dba:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3dbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3dc2:	d31b      	bcc.n	80a3dfc <__adddf3+0x124>
 80a3dc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3dc8:	d30c      	bcc.n	80a3de4 <__adddf3+0x10c>
 80a3dca:	0849      	lsrs	r1, r1, #1
 80a3dcc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3dd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3dd4:	f104 0401 	add.w	r4, r4, #1
 80a3dd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3ddc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3de0:	f080 809a 	bcs.w	80a3f18 <__adddf3+0x240>
 80a3de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3de8:	bf08      	it	eq
 80a3dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3dee:	f150 0000 	adcs.w	r0, r0, #0
 80a3df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3df6:	ea41 0105 	orr.w	r1, r1, r5
 80a3dfa:	bd30      	pop	{r4, r5, pc}
 80a3dfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3e00:	4140      	adcs	r0, r0
 80a3e02:	eb41 0101 	adc.w	r1, r1, r1
 80a3e06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3e0a:	f1a4 0401 	sub.w	r4, r4, #1
 80a3e0e:	d1e9      	bne.n	80a3de4 <__adddf3+0x10c>
 80a3e10:	f091 0f00 	teq	r1, #0
 80a3e14:	bf04      	itt	eq
 80a3e16:	4601      	moveq	r1, r0
 80a3e18:	2000      	moveq	r0, #0
 80a3e1a:	fab1 f381 	clz	r3, r1
 80a3e1e:	bf08      	it	eq
 80a3e20:	3320      	addeq	r3, #32
 80a3e22:	f1a3 030b 	sub.w	r3, r3, #11
 80a3e26:	f1b3 0220 	subs.w	r2, r3, #32
 80a3e2a:	da0c      	bge.n	80a3e46 <__adddf3+0x16e>
 80a3e2c:	320c      	adds	r2, #12
 80a3e2e:	dd08      	ble.n	80a3e42 <__adddf3+0x16a>
 80a3e30:	f102 0c14 	add.w	ip, r2, #20
 80a3e34:	f1c2 020c 	rsb	r2, r2, #12
 80a3e38:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3e3c:	fa21 f102 	lsr.w	r1, r1, r2
 80a3e40:	e00c      	b.n	80a3e5c <__adddf3+0x184>
 80a3e42:	f102 0214 	add.w	r2, r2, #20
 80a3e46:	bfd8      	it	le
 80a3e48:	f1c2 0c20 	rsble	ip, r2, #32
 80a3e4c:	fa01 f102 	lsl.w	r1, r1, r2
 80a3e50:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3e54:	bfdc      	itt	le
 80a3e56:	ea41 010c 	orrle.w	r1, r1, ip
 80a3e5a:	4090      	lslle	r0, r2
 80a3e5c:	1ae4      	subs	r4, r4, r3
 80a3e5e:	bfa2      	ittt	ge
 80a3e60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3e64:	4329      	orrge	r1, r5
 80a3e66:	bd30      	popge	{r4, r5, pc}
 80a3e68:	ea6f 0404 	mvn.w	r4, r4
 80a3e6c:	3c1f      	subs	r4, #31
 80a3e6e:	da1c      	bge.n	80a3eaa <__adddf3+0x1d2>
 80a3e70:	340c      	adds	r4, #12
 80a3e72:	dc0e      	bgt.n	80a3e92 <__adddf3+0x1ba>
 80a3e74:	f104 0414 	add.w	r4, r4, #20
 80a3e78:	f1c4 0220 	rsb	r2, r4, #32
 80a3e7c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3e80:	fa01 f302 	lsl.w	r3, r1, r2
 80a3e84:	ea40 0003 	orr.w	r0, r0, r3
 80a3e88:	fa21 f304 	lsr.w	r3, r1, r4
 80a3e8c:	ea45 0103 	orr.w	r1, r5, r3
 80a3e90:	bd30      	pop	{r4, r5, pc}
 80a3e92:	f1c4 040c 	rsb	r4, r4, #12
 80a3e96:	f1c4 0220 	rsb	r2, r4, #32
 80a3e9a:	fa20 f002 	lsr.w	r0, r0, r2
 80a3e9e:	fa01 f304 	lsl.w	r3, r1, r4
 80a3ea2:	ea40 0003 	orr.w	r0, r0, r3
 80a3ea6:	4629      	mov	r1, r5
 80a3ea8:	bd30      	pop	{r4, r5, pc}
 80a3eaa:	fa21 f004 	lsr.w	r0, r1, r4
 80a3eae:	4629      	mov	r1, r5
 80a3eb0:	bd30      	pop	{r4, r5, pc}
 80a3eb2:	f094 0f00 	teq	r4, #0
 80a3eb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3eba:	bf06      	itte	eq
 80a3ebc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3ec0:	3401      	addeq	r4, #1
 80a3ec2:	3d01      	subne	r5, #1
 80a3ec4:	e74e      	b.n	80a3d64 <__adddf3+0x8c>
 80a3ec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3eca:	bf18      	it	ne
 80a3ecc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3ed0:	d029      	beq.n	80a3f26 <__adddf3+0x24e>
 80a3ed2:	ea94 0f05 	teq	r4, r5
 80a3ed6:	bf08      	it	eq
 80a3ed8:	ea90 0f02 	teqeq	r0, r2
 80a3edc:	d005      	beq.n	80a3eea <__adddf3+0x212>
 80a3ede:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3ee2:	bf04      	itt	eq
 80a3ee4:	4619      	moveq	r1, r3
 80a3ee6:	4610      	moveq	r0, r2
 80a3ee8:	bd30      	pop	{r4, r5, pc}
 80a3eea:	ea91 0f03 	teq	r1, r3
 80a3eee:	bf1e      	ittt	ne
 80a3ef0:	2100      	movne	r1, #0
 80a3ef2:	2000      	movne	r0, #0
 80a3ef4:	bd30      	popne	{r4, r5, pc}
 80a3ef6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3efa:	d105      	bne.n	80a3f08 <__adddf3+0x230>
 80a3efc:	0040      	lsls	r0, r0, #1
 80a3efe:	4149      	adcs	r1, r1
 80a3f00:	bf28      	it	cs
 80a3f02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3f06:	bd30      	pop	{r4, r5, pc}
 80a3f08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3f0c:	bf3c      	itt	cc
 80a3f0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3f12:	bd30      	popcc	{r4, r5, pc}
 80a3f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3f1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3f20:	f04f 0000 	mov.w	r0, #0
 80a3f24:	bd30      	pop	{r4, r5, pc}
 80a3f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3f2a:	bf1a      	itte	ne
 80a3f2c:	4619      	movne	r1, r3
 80a3f2e:	4610      	movne	r0, r2
 80a3f30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3f34:	bf1c      	itt	ne
 80a3f36:	460b      	movne	r3, r1
 80a3f38:	4602      	movne	r2, r0
 80a3f3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3f3e:	bf06      	itte	eq
 80a3f40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3f44:	ea91 0f03 	teqeq	r1, r3
 80a3f48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3f4c:	bd30      	pop	{r4, r5, pc}
 80a3f4e:	bf00      	nop

080a3f50 <__aeabi_ui2d>:
 80a3f50:	f090 0f00 	teq	r0, #0
 80a3f54:	bf04      	itt	eq
 80a3f56:	2100      	moveq	r1, #0
 80a3f58:	4770      	bxeq	lr
 80a3f5a:	b530      	push	{r4, r5, lr}
 80a3f5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f64:	f04f 0500 	mov.w	r5, #0
 80a3f68:	f04f 0100 	mov.w	r1, #0
 80a3f6c:	e750      	b.n	80a3e10 <__adddf3+0x138>
 80a3f6e:	bf00      	nop

080a3f70 <__aeabi_i2d>:
 80a3f70:	f090 0f00 	teq	r0, #0
 80a3f74:	bf04      	itt	eq
 80a3f76:	2100      	moveq	r1, #0
 80a3f78:	4770      	bxeq	lr
 80a3f7a:	b530      	push	{r4, r5, lr}
 80a3f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3f88:	bf48      	it	mi
 80a3f8a:	4240      	negmi	r0, r0
 80a3f8c:	f04f 0100 	mov.w	r1, #0
 80a3f90:	e73e      	b.n	80a3e10 <__adddf3+0x138>
 80a3f92:	bf00      	nop

080a3f94 <__aeabi_f2d>:
 80a3f94:	0042      	lsls	r2, r0, #1
 80a3f96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3f9a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3f9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3fa2:	bf1f      	itttt	ne
 80a3fa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3fac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3fb0:	4770      	bxne	lr
 80a3fb2:	f092 0f00 	teq	r2, #0
 80a3fb6:	bf14      	ite	ne
 80a3fb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3fbc:	4770      	bxeq	lr
 80a3fbe:	b530      	push	{r4, r5, lr}
 80a3fc0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3fc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3fcc:	e720      	b.n	80a3e10 <__adddf3+0x138>
 80a3fce:	bf00      	nop

080a3fd0 <__aeabi_ul2d>:
 80a3fd0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3fd4:	bf08      	it	eq
 80a3fd6:	4770      	bxeq	lr
 80a3fd8:	b530      	push	{r4, r5, lr}
 80a3fda:	f04f 0500 	mov.w	r5, #0
 80a3fde:	e00a      	b.n	80a3ff6 <__aeabi_l2d+0x16>

080a3fe0 <__aeabi_l2d>:
 80a3fe0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3fe4:	bf08      	it	eq
 80a3fe6:	4770      	bxeq	lr
 80a3fe8:	b530      	push	{r4, r5, lr}
 80a3fea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3fee:	d502      	bpl.n	80a3ff6 <__aeabi_l2d+0x16>
 80a3ff0:	4240      	negs	r0, r0
 80a3ff2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3ff6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3ffa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3ffe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4002:	f43f aedc 	beq.w	80a3dbe <__adddf3+0xe6>
 80a4006:	f04f 0203 	mov.w	r2, #3
 80a400a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a400e:	bf18      	it	ne
 80a4010:	3203      	addne	r2, #3
 80a4012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4016:	bf18      	it	ne
 80a4018:	3203      	addne	r2, #3
 80a401a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a401e:	f1c2 0320 	rsb	r3, r2, #32
 80a4022:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4026:	fa20 f002 	lsr.w	r0, r0, r2
 80a402a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a402e:	ea40 000e 	orr.w	r0, r0, lr
 80a4032:	fa21 f102 	lsr.w	r1, r1, r2
 80a4036:	4414      	add	r4, r2
 80a4038:	e6c1      	b.n	80a3dbe <__adddf3+0xe6>
 80a403a:	bf00      	nop

080a403c <__aeabi_dmul>:
 80a403c:	b570      	push	{r4, r5, r6, lr}
 80a403e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a404a:	bf1d      	ittte	ne
 80a404c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4050:	ea94 0f0c 	teqne	r4, ip
 80a4054:	ea95 0f0c 	teqne	r5, ip
 80a4058:	f000 f8de 	bleq	80a4218 <__aeabi_dmul+0x1dc>
 80a405c:	442c      	add	r4, r5
 80a405e:	ea81 0603 	eor.w	r6, r1, r3
 80a4062:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4066:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a406a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a406e:	bf18      	it	ne
 80a4070:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4074:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a407c:	d038      	beq.n	80a40f0 <__aeabi_dmul+0xb4>
 80a407e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4082:	f04f 0500 	mov.w	r5, #0
 80a4086:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a408a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a408e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4092:	f04f 0600 	mov.w	r6, #0
 80a4096:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a409a:	f09c 0f00 	teq	ip, #0
 80a409e:	bf18      	it	ne
 80a40a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a40a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a40a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a40ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a40b0:	d204      	bcs.n	80a40bc <__aeabi_dmul+0x80>
 80a40b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a40b6:	416d      	adcs	r5, r5
 80a40b8:	eb46 0606 	adc.w	r6, r6, r6
 80a40bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a40c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a40c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a40c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a40cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a40d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a40d4:	bf88      	it	hi
 80a40d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a40da:	d81e      	bhi.n	80a411a <__aeabi_dmul+0xde>
 80a40dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a40e0:	bf08      	it	eq
 80a40e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a40e6:	f150 0000 	adcs.w	r0, r0, #0
 80a40ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a40ee:	bd70      	pop	{r4, r5, r6, pc}
 80a40f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a40f4:	ea46 0101 	orr.w	r1, r6, r1
 80a40f8:	ea40 0002 	orr.w	r0, r0, r2
 80a40fc:	ea81 0103 	eor.w	r1, r1, r3
 80a4100:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4104:	bfc2      	ittt	gt
 80a4106:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a410a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a410e:	bd70      	popgt	{r4, r5, r6, pc}
 80a4110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4114:	f04f 0e00 	mov.w	lr, #0
 80a4118:	3c01      	subs	r4, #1
 80a411a:	f300 80ab 	bgt.w	80a4274 <__aeabi_dmul+0x238>
 80a411e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4122:	bfde      	ittt	le
 80a4124:	2000      	movle	r0, #0
 80a4126:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a412a:	bd70      	pople	{r4, r5, r6, pc}
 80a412c:	f1c4 0400 	rsb	r4, r4, #0
 80a4130:	3c20      	subs	r4, #32
 80a4132:	da35      	bge.n	80a41a0 <__aeabi_dmul+0x164>
 80a4134:	340c      	adds	r4, #12
 80a4136:	dc1b      	bgt.n	80a4170 <__aeabi_dmul+0x134>
 80a4138:	f104 0414 	add.w	r4, r4, #20
 80a413c:	f1c4 0520 	rsb	r5, r4, #32
 80a4140:	fa00 f305 	lsl.w	r3, r0, r5
 80a4144:	fa20 f004 	lsr.w	r0, r0, r4
 80a4148:	fa01 f205 	lsl.w	r2, r1, r5
 80a414c:	ea40 0002 	orr.w	r0, r0, r2
 80a4150:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4154:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4158:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a415c:	fa21 f604 	lsr.w	r6, r1, r4
 80a4160:	eb42 0106 	adc.w	r1, r2, r6
 80a4164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4168:	bf08      	it	eq
 80a416a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a416e:	bd70      	pop	{r4, r5, r6, pc}
 80a4170:	f1c4 040c 	rsb	r4, r4, #12
 80a4174:	f1c4 0520 	rsb	r5, r4, #32
 80a4178:	fa00 f304 	lsl.w	r3, r0, r4
 80a417c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4180:	fa01 f204 	lsl.w	r2, r1, r4
 80a4184:	ea40 0002 	orr.w	r0, r0, r2
 80a4188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a418c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4190:	f141 0100 	adc.w	r1, r1, #0
 80a4194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4198:	bf08      	it	eq
 80a419a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a419e:	bd70      	pop	{r4, r5, r6, pc}
 80a41a0:	f1c4 0520 	rsb	r5, r4, #32
 80a41a4:	fa00 f205 	lsl.w	r2, r0, r5
 80a41a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a41ac:	fa20 f304 	lsr.w	r3, r0, r4
 80a41b0:	fa01 f205 	lsl.w	r2, r1, r5
 80a41b4:	ea43 0302 	orr.w	r3, r3, r2
 80a41b8:	fa21 f004 	lsr.w	r0, r1, r4
 80a41bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a41c0:	fa21 f204 	lsr.w	r2, r1, r4
 80a41c4:	ea20 0002 	bic.w	r0, r0, r2
 80a41c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a41cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a41d0:	bf08      	it	eq
 80a41d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a41d6:	bd70      	pop	{r4, r5, r6, pc}
 80a41d8:	f094 0f00 	teq	r4, #0
 80a41dc:	d10f      	bne.n	80a41fe <__aeabi_dmul+0x1c2>
 80a41de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a41e2:	0040      	lsls	r0, r0, #1
 80a41e4:	eb41 0101 	adc.w	r1, r1, r1
 80a41e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a41ec:	bf08      	it	eq
 80a41ee:	3c01      	subeq	r4, #1
 80a41f0:	d0f7      	beq.n	80a41e2 <__aeabi_dmul+0x1a6>
 80a41f2:	ea41 0106 	orr.w	r1, r1, r6
 80a41f6:	f095 0f00 	teq	r5, #0
 80a41fa:	bf18      	it	ne
 80a41fc:	4770      	bxne	lr
 80a41fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4202:	0052      	lsls	r2, r2, #1
 80a4204:	eb43 0303 	adc.w	r3, r3, r3
 80a4208:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a420c:	bf08      	it	eq
 80a420e:	3d01      	subeq	r5, #1
 80a4210:	d0f7      	beq.n	80a4202 <__aeabi_dmul+0x1c6>
 80a4212:	ea43 0306 	orr.w	r3, r3, r6
 80a4216:	4770      	bx	lr
 80a4218:	ea94 0f0c 	teq	r4, ip
 80a421c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4220:	bf18      	it	ne
 80a4222:	ea95 0f0c 	teqne	r5, ip
 80a4226:	d00c      	beq.n	80a4242 <__aeabi_dmul+0x206>
 80a4228:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a422c:	bf18      	it	ne
 80a422e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4232:	d1d1      	bne.n	80a41d8 <__aeabi_dmul+0x19c>
 80a4234:	ea81 0103 	eor.w	r1, r1, r3
 80a4238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a423c:	f04f 0000 	mov.w	r0, #0
 80a4240:	bd70      	pop	{r4, r5, r6, pc}
 80a4242:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4246:	bf06      	itte	eq
 80a4248:	4610      	moveq	r0, r2
 80a424a:	4619      	moveq	r1, r3
 80a424c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4250:	d019      	beq.n	80a4286 <__aeabi_dmul+0x24a>
 80a4252:	ea94 0f0c 	teq	r4, ip
 80a4256:	d102      	bne.n	80a425e <__aeabi_dmul+0x222>
 80a4258:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a425c:	d113      	bne.n	80a4286 <__aeabi_dmul+0x24a>
 80a425e:	ea95 0f0c 	teq	r5, ip
 80a4262:	d105      	bne.n	80a4270 <__aeabi_dmul+0x234>
 80a4264:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4268:	bf1c      	itt	ne
 80a426a:	4610      	movne	r0, r2
 80a426c:	4619      	movne	r1, r3
 80a426e:	d10a      	bne.n	80a4286 <__aeabi_dmul+0x24a>
 80a4270:	ea81 0103 	eor.w	r1, r1, r3
 80a4274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4278:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a427c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4280:	f04f 0000 	mov.w	r0, #0
 80a4284:	bd70      	pop	{r4, r5, r6, pc}
 80a4286:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a428a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a428e:	bd70      	pop	{r4, r5, r6, pc}

080a4290 <__aeabi_ddiv>:
 80a4290:	b570      	push	{r4, r5, r6, lr}
 80a4292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a429a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a429e:	bf1d      	ittte	ne
 80a42a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a42a4:	ea94 0f0c 	teqne	r4, ip
 80a42a8:	ea95 0f0c 	teqne	r5, ip
 80a42ac:	f000 f8a7 	bleq	80a43fe <__aeabi_ddiv+0x16e>
 80a42b0:	eba4 0405 	sub.w	r4, r4, r5
 80a42b4:	ea81 0e03 	eor.w	lr, r1, r3
 80a42b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a42bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a42c0:	f000 8088 	beq.w	80a43d4 <__aeabi_ddiv+0x144>
 80a42c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a42c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a42cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a42d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a42d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a42d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a42dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a42e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a42e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a42e8:	429d      	cmp	r5, r3
 80a42ea:	bf08      	it	eq
 80a42ec:	4296      	cmpeq	r6, r2
 80a42ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a42f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a42f6:	d202      	bcs.n	80a42fe <__aeabi_ddiv+0x6e>
 80a42f8:	085b      	lsrs	r3, r3, #1
 80a42fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42fe:	1ab6      	subs	r6, r6, r2
 80a4300:	eb65 0503 	sbc.w	r5, r5, r3
 80a4304:	085b      	lsrs	r3, r3, #1
 80a4306:	ea4f 0232 	mov.w	r2, r2, rrx
 80a430a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a430e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4312:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4316:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a431a:	bf22      	ittt	cs
 80a431c:	1ab6      	subcs	r6, r6, r2
 80a431e:	4675      	movcs	r5, lr
 80a4320:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4324:	085b      	lsrs	r3, r3, #1
 80a4326:	ea4f 0232 	mov.w	r2, r2, rrx
 80a432a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a432e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4332:	bf22      	ittt	cs
 80a4334:	1ab6      	subcs	r6, r6, r2
 80a4336:	4675      	movcs	r5, lr
 80a4338:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a433c:	085b      	lsrs	r3, r3, #1
 80a433e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4342:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4346:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a434a:	bf22      	ittt	cs
 80a434c:	1ab6      	subcs	r6, r6, r2
 80a434e:	4675      	movcs	r5, lr
 80a4350:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4354:	085b      	lsrs	r3, r3, #1
 80a4356:	ea4f 0232 	mov.w	r2, r2, rrx
 80a435a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a435e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4362:	bf22      	ittt	cs
 80a4364:	1ab6      	subcs	r6, r6, r2
 80a4366:	4675      	movcs	r5, lr
 80a4368:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a436c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4370:	d018      	beq.n	80a43a4 <__aeabi_ddiv+0x114>
 80a4372:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4376:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a437a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a437e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4382:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4386:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a438a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a438e:	d1c0      	bne.n	80a4312 <__aeabi_ddiv+0x82>
 80a4390:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4394:	d10b      	bne.n	80a43ae <__aeabi_ddiv+0x11e>
 80a4396:	ea41 0100 	orr.w	r1, r1, r0
 80a439a:	f04f 0000 	mov.w	r0, #0
 80a439e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a43a2:	e7b6      	b.n	80a4312 <__aeabi_ddiv+0x82>
 80a43a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a43a8:	bf04      	itt	eq
 80a43aa:	4301      	orreq	r1, r0
 80a43ac:	2000      	moveq	r0, #0
 80a43ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a43b2:	bf88      	it	hi
 80a43b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a43b8:	f63f aeaf 	bhi.w	80a411a <__aeabi_dmul+0xde>
 80a43bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a43c0:	bf04      	itt	eq
 80a43c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a43c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a43ca:	f150 0000 	adcs.w	r0, r0, #0
 80a43ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a43d2:	bd70      	pop	{r4, r5, r6, pc}
 80a43d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a43d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a43dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a43e0:	bfc2      	ittt	gt
 80a43e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a43e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a43ea:	bd70      	popgt	{r4, r5, r6, pc}
 80a43ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a43f0:	f04f 0e00 	mov.w	lr, #0
 80a43f4:	3c01      	subs	r4, #1
 80a43f6:	e690      	b.n	80a411a <__aeabi_dmul+0xde>
 80a43f8:	ea45 0e06 	orr.w	lr, r5, r6
 80a43fc:	e68d      	b.n	80a411a <__aeabi_dmul+0xde>
 80a43fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4402:	ea94 0f0c 	teq	r4, ip
 80a4406:	bf08      	it	eq
 80a4408:	ea95 0f0c 	teqeq	r5, ip
 80a440c:	f43f af3b 	beq.w	80a4286 <__aeabi_dmul+0x24a>
 80a4410:	ea94 0f0c 	teq	r4, ip
 80a4414:	d10a      	bne.n	80a442c <__aeabi_ddiv+0x19c>
 80a4416:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a441a:	f47f af34 	bne.w	80a4286 <__aeabi_dmul+0x24a>
 80a441e:	ea95 0f0c 	teq	r5, ip
 80a4422:	f47f af25 	bne.w	80a4270 <__aeabi_dmul+0x234>
 80a4426:	4610      	mov	r0, r2
 80a4428:	4619      	mov	r1, r3
 80a442a:	e72c      	b.n	80a4286 <__aeabi_dmul+0x24a>
 80a442c:	ea95 0f0c 	teq	r5, ip
 80a4430:	d106      	bne.n	80a4440 <__aeabi_ddiv+0x1b0>
 80a4432:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4436:	f43f aefd 	beq.w	80a4234 <__aeabi_dmul+0x1f8>
 80a443a:	4610      	mov	r0, r2
 80a443c:	4619      	mov	r1, r3
 80a443e:	e722      	b.n	80a4286 <__aeabi_dmul+0x24a>
 80a4440:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4444:	bf18      	it	ne
 80a4446:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a444a:	f47f aec5 	bne.w	80a41d8 <__aeabi_dmul+0x19c>
 80a444e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4452:	f47f af0d 	bne.w	80a4270 <__aeabi_dmul+0x234>
 80a4456:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a445a:	f47f aeeb 	bne.w	80a4234 <__aeabi_dmul+0x1f8>
 80a445e:	e712      	b.n	80a4286 <__aeabi_dmul+0x24a>

080a4460 <__gedf2>:
 80a4460:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4464:	e006      	b.n	80a4474 <__cmpdf2+0x4>
 80a4466:	bf00      	nop

080a4468 <__ledf2>:
 80a4468:	f04f 0c01 	mov.w	ip, #1
 80a446c:	e002      	b.n	80a4474 <__cmpdf2+0x4>
 80a446e:	bf00      	nop

080a4470 <__cmpdf2>:
 80a4470:	f04f 0c01 	mov.w	ip, #1
 80a4474:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4478:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a447c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4484:	bf18      	it	ne
 80a4486:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a448a:	d01b      	beq.n	80a44c4 <__cmpdf2+0x54>
 80a448c:	b001      	add	sp, #4
 80a448e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4492:	bf0c      	ite	eq
 80a4494:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4498:	ea91 0f03 	teqne	r1, r3
 80a449c:	bf02      	ittt	eq
 80a449e:	ea90 0f02 	teqeq	r0, r2
 80a44a2:	2000      	moveq	r0, #0
 80a44a4:	4770      	bxeq	lr
 80a44a6:	f110 0f00 	cmn.w	r0, #0
 80a44aa:	ea91 0f03 	teq	r1, r3
 80a44ae:	bf58      	it	pl
 80a44b0:	4299      	cmppl	r1, r3
 80a44b2:	bf08      	it	eq
 80a44b4:	4290      	cmpeq	r0, r2
 80a44b6:	bf2c      	ite	cs
 80a44b8:	17d8      	asrcs	r0, r3, #31
 80a44ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a44be:	f040 0001 	orr.w	r0, r0, #1
 80a44c2:	4770      	bx	lr
 80a44c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a44c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a44cc:	d102      	bne.n	80a44d4 <__cmpdf2+0x64>
 80a44ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a44d2:	d107      	bne.n	80a44e4 <__cmpdf2+0x74>
 80a44d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a44d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a44dc:	d1d6      	bne.n	80a448c <__cmpdf2+0x1c>
 80a44de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a44e2:	d0d3      	beq.n	80a448c <__cmpdf2+0x1c>
 80a44e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a44e8:	4770      	bx	lr
 80a44ea:	bf00      	nop

080a44ec <__aeabi_cdrcmple>:
 80a44ec:	4684      	mov	ip, r0
 80a44ee:	4610      	mov	r0, r2
 80a44f0:	4662      	mov	r2, ip
 80a44f2:	468c      	mov	ip, r1
 80a44f4:	4619      	mov	r1, r3
 80a44f6:	4663      	mov	r3, ip
 80a44f8:	e000      	b.n	80a44fc <__aeabi_cdcmpeq>
 80a44fa:	bf00      	nop

080a44fc <__aeabi_cdcmpeq>:
 80a44fc:	b501      	push	{r0, lr}
 80a44fe:	f7ff ffb7 	bl	80a4470 <__cmpdf2>
 80a4502:	2800      	cmp	r0, #0
 80a4504:	bf48      	it	mi
 80a4506:	f110 0f00 	cmnmi.w	r0, #0
 80a450a:	bd01      	pop	{r0, pc}

080a450c <__aeabi_dcmpeq>:
 80a450c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4510:	f7ff fff4 	bl	80a44fc <__aeabi_cdcmpeq>
 80a4514:	bf0c      	ite	eq
 80a4516:	2001      	moveq	r0, #1
 80a4518:	2000      	movne	r0, #0
 80a451a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a451e:	bf00      	nop

080a4520 <__aeabi_dcmplt>:
 80a4520:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4524:	f7ff ffea 	bl	80a44fc <__aeabi_cdcmpeq>
 80a4528:	bf34      	ite	cc
 80a452a:	2001      	movcc	r0, #1
 80a452c:	2000      	movcs	r0, #0
 80a452e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4532:	bf00      	nop

080a4534 <__aeabi_dcmple>:
 80a4534:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4538:	f7ff ffe0 	bl	80a44fc <__aeabi_cdcmpeq>
 80a453c:	bf94      	ite	ls
 80a453e:	2001      	movls	r0, #1
 80a4540:	2000      	movhi	r0, #0
 80a4542:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4546:	bf00      	nop

080a4548 <__aeabi_dcmpge>:
 80a4548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a454c:	f7ff ffce 	bl	80a44ec <__aeabi_cdrcmple>
 80a4550:	bf94      	ite	ls
 80a4552:	2001      	movls	r0, #1
 80a4554:	2000      	movhi	r0, #0
 80a4556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a455a:	bf00      	nop

080a455c <__aeabi_dcmpgt>:
 80a455c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4560:	f7ff ffc4 	bl	80a44ec <__aeabi_cdrcmple>
 80a4564:	bf34      	ite	cc
 80a4566:	2001      	movcc	r0, #1
 80a4568:	2000      	movcs	r0, #0
 80a456a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a456e:	bf00      	nop

080a4570 <__aeabi_dcmpun>:
 80a4570:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4578:	d102      	bne.n	80a4580 <__aeabi_dcmpun+0x10>
 80a457a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a457e:	d10a      	bne.n	80a4596 <__aeabi_dcmpun+0x26>
 80a4580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4588:	d102      	bne.n	80a4590 <__aeabi_dcmpun+0x20>
 80a458a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a458e:	d102      	bne.n	80a4596 <__aeabi_dcmpun+0x26>
 80a4590:	f04f 0000 	mov.w	r0, #0
 80a4594:	4770      	bx	lr
 80a4596:	f04f 0001 	mov.w	r0, #1
 80a459a:	4770      	bx	lr

080a459c <__aeabi_d2iz>:
 80a459c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a45a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a45a4:	d215      	bcs.n	80a45d2 <__aeabi_d2iz+0x36>
 80a45a6:	d511      	bpl.n	80a45cc <__aeabi_d2iz+0x30>
 80a45a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a45ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a45b0:	d912      	bls.n	80a45d8 <__aeabi_d2iz+0x3c>
 80a45b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a45b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a45ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a45be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a45c2:	fa23 f002 	lsr.w	r0, r3, r2
 80a45c6:	bf18      	it	ne
 80a45c8:	4240      	negne	r0, r0
 80a45ca:	4770      	bx	lr
 80a45cc:	f04f 0000 	mov.w	r0, #0
 80a45d0:	4770      	bx	lr
 80a45d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a45d6:	d105      	bne.n	80a45e4 <__aeabi_d2iz+0x48>
 80a45d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a45dc:	bf08      	it	eq
 80a45de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a45e2:	4770      	bx	lr
 80a45e4:	f04f 0000 	mov.w	r0, #0
 80a45e8:	4770      	bx	lr
 80a45ea:	bf00      	nop

080a45ec <__aeabi_d2uiz>:
 80a45ec:	004a      	lsls	r2, r1, #1
 80a45ee:	d211      	bcs.n	80a4614 <__aeabi_d2uiz+0x28>
 80a45f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a45f4:	d211      	bcs.n	80a461a <__aeabi_d2uiz+0x2e>
 80a45f6:	d50d      	bpl.n	80a4614 <__aeabi_d2uiz+0x28>
 80a45f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a45fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4600:	d40e      	bmi.n	80a4620 <__aeabi_d2uiz+0x34>
 80a4602:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a460a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a460e:	fa23 f002 	lsr.w	r0, r3, r2
 80a4612:	4770      	bx	lr
 80a4614:	f04f 0000 	mov.w	r0, #0
 80a4618:	4770      	bx	lr
 80a461a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a461e:	d102      	bne.n	80a4626 <__aeabi_d2uiz+0x3a>
 80a4620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4624:	4770      	bx	lr
 80a4626:	f04f 0000 	mov.w	r0, #0
 80a462a:	4770      	bx	lr

080a462c <__aeabi_frsub>:
 80a462c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4630:	e002      	b.n	80a4638 <__addsf3>
 80a4632:	bf00      	nop

080a4634 <__aeabi_fsub>:
 80a4634:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4638 <__addsf3>:
 80a4638:	0042      	lsls	r2, r0, #1
 80a463a:	bf1f      	itttt	ne
 80a463c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4640:	ea92 0f03 	teqne	r2, r3
 80a4644:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4648:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a464c:	d06a      	beq.n	80a4724 <__addsf3+0xec>
 80a464e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4652:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4656:	bfc1      	itttt	gt
 80a4658:	18d2      	addgt	r2, r2, r3
 80a465a:	4041      	eorgt	r1, r0
 80a465c:	4048      	eorgt	r0, r1
 80a465e:	4041      	eorgt	r1, r0
 80a4660:	bfb8      	it	lt
 80a4662:	425b      	neglt	r3, r3
 80a4664:	2b19      	cmp	r3, #25
 80a4666:	bf88      	it	hi
 80a4668:	4770      	bxhi	lr
 80a466a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a466e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4672:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4676:	bf18      	it	ne
 80a4678:	4240      	negne	r0, r0
 80a467a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a467e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4682:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4686:	bf18      	it	ne
 80a4688:	4249      	negne	r1, r1
 80a468a:	ea92 0f03 	teq	r2, r3
 80a468e:	d03f      	beq.n	80a4710 <__addsf3+0xd8>
 80a4690:	f1a2 0201 	sub.w	r2, r2, #1
 80a4694:	fa41 fc03 	asr.w	ip, r1, r3
 80a4698:	eb10 000c 	adds.w	r0, r0, ip
 80a469c:	f1c3 0320 	rsb	r3, r3, #32
 80a46a0:	fa01 f103 	lsl.w	r1, r1, r3
 80a46a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a46a8:	d502      	bpl.n	80a46b0 <__addsf3+0x78>
 80a46aa:	4249      	negs	r1, r1
 80a46ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a46b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a46b4:	d313      	bcc.n	80a46de <__addsf3+0xa6>
 80a46b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a46ba:	d306      	bcc.n	80a46ca <__addsf3+0x92>
 80a46bc:	0840      	lsrs	r0, r0, #1
 80a46be:	ea4f 0131 	mov.w	r1, r1, rrx
 80a46c2:	f102 0201 	add.w	r2, r2, #1
 80a46c6:	2afe      	cmp	r2, #254	; 0xfe
 80a46c8:	d251      	bcs.n	80a476e <__addsf3+0x136>
 80a46ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a46ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a46d2:	bf08      	it	eq
 80a46d4:	f020 0001 	biceq.w	r0, r0, #1
 80a46d8:	ea40 0003 	orr.w	r0, r0, r3
 80a46dc:	4770      	bx	lr
 80a46de:	0049      	lsls	r1, r1, #1
 80a46e0:	eb40 0000 	adc.w	r0, r0, r0
 80a46e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a46e8:	f1a2 0201 	sub.w	r2, r2, #1
 80a46ec:	d1ed      	bne.n	80a46ca <__addsf3+0x92>
 80a46ee:	fab0 fc80 	clz	ip, r0
 80a46f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a46f6:	ebb2 020c 	subs.w	r2, r2, ip
 80a46fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80a46fe:	bfaa      	itet	ge
 80a4700:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4704:	4252      	neglt	r2, r2
 80a4706:	4318      	orrge	r0, r3
 80a4708:	bfbc      	itt	lt
 80a470a:	40d0      	lsrlt	r0, r2
 80a470c:	4318      	orrlt	r0, r3
 80a470e:	4770      	bx	lr
 80a4710:	f092 0f00 	teq	r2, #0
 80a4714:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4718:	bf06      	itte	eq
 80a471a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a471e:	3201      	addeq	r2, #1
 80a4720:	3b01      	subne	r3, #1
 80a4722:	e7b5      	b.n	80a4690 <__addsf3+0x58>
 80a4724:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4728:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a472c:	bf18      	it	ne
 80a472e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4732:	d021      	beq.n	80a4778 <__addsf3+0x140>
 80a4734:	ea92 0f03 	teq	r2, r3
 80a4738:	d004      	beq.n	80a4744 <__addsf3+0x10c>
 80a473a:	f092 0f00 	teq	r2, #0
 80a473e:	bf08      	it	eq
 80a4740:	4608      	moveq	r0, r1
 80a4742:	4770      	bx	lr
 80a4744:	ea90 0f01 	teq	r0, r1
 80a4748:	bf1c      	itt	ne
 80a474a:	2000      	movne	r0, #0
 80a474c:	4770      	bxne	lr
 80a474e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4752:	d104      	bne.n	80a475e <__addsf3+0x126>
 80a4754:	0040      	lsls	r0, r0, #1
 80a4756:	bf28      	it	cs
 80a4758:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a475c:	4770      	bx	lr
 80a475e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4762:	bf3c      	itt	cc
 80a4764:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4768:	4770      	bxcc	lr
 80a476a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a476e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4772:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4776:	4770      	bx	lr
 80a4778:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a477c:	bf16      	itet	ne
 80a477e:	4608      	movne	r0, r1
 80a4780:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4784:	4601      	movne	r1, r0
 80a4786:	0242      	lsls	r2, r0, #9
 80a4788:	bf06      	itte	eq
 80a478a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a478e:	ea90 0f01 	teqeq	r0, r1
 80a4792:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4796:	4770      	bx	lr

080a4798 <__aeabi_ui2f>:
 80a4798:	f04f 0300 	mov.w	r3, #0
 80a479c:	e004      	b.n	80a47a8 <__aeabi_i2f+0x8>
 80a479e:	bf00      	nop

080a47a0 <__aeabi_i2f>:
 80a47a0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a47a4:	bf48      	it	mi
 80a47a6:	4240      	negmi	r0, r0
 80a47a8:	ea5f 0c00 	movs.w	ip, r0
 80a47ac:	bf08      	it	eq
 80a47ae:	4770      	bxeq	lr
 80a47b0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a47b4:	4601      	mov	r1, r0
 80a47b6:	f04f 0000 	mov.w	r0, #0
 80a47ba:	e01c      	b.n	80a47f6 <__aeabi_l2f+0x2a>

080a47bc <__aeabi_ul2f>:
 80a47bc:	ea50 0201 	orrs.w	r2, r0, r1
 80a47c0:	bf08      	it	eq
 80a47c2:	4770      	bxeq	lr
 80a47c4:	f04f 0300 	mov.w	r3, #0
 80a47c8:	e00a      	b.n	80a47e0 <__aeabi_l2f+0x14>
 80a47ca:	bf00      	nop

080a47cc <__aeabi_l2f>:
 80a47cc:	ea50 0201 	orrs.w	r2, r0, r1
 80a47d0:	bf08      	it	eq
 80a47d2:	4770      	bxeq	lr
 80a47d4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a47d8:	d502      	bpl.n	80a47e0 <__aeabi_l2f+0x14>
 80a47da:	4240      	negs	r0, r0
 80a47dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a47e0:	ea5f 0c01 	movs.w	ip, r1
 80a47e4:	bf02      	ittt	eq
 80a47e6:	4684      	moveq	ip, r0
 80a47e8:	4601      	moveq	r1, r0
 80a47ea:	2000      	moveq	r0, #0
 80a47ec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a47f0:	bf08      	it	eq
 80a47f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a47f6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a47fa:	fabc f28c 	clz	r2, ip
 80a47fe:	3a08      	subs	r2, #8
 80a4800:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4804:	db10      	blt.n	80a4828 <__aeabi_l2f+0x5c>
 80a4806:	fa01 fc02 	lsl.w	ip, r1, r2
 80a480a:	4463      	add	r3, ip
 80a480c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4810:	f1c2 0220 	rsb	r2, r2, #32
 80a4814:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4818:	fa20 f202 	lsr.w	r2, r0, r2
 80a481c:	eb43 0002 	adc.w	r0, r3, r2
 80a4820:	bf08      	it	eq
 80a4822:	f020 0001 	biceq.w	r0, r0, #1
 80a4826:	4770      	bx	lr
 80a4828:	f102 0220 	add.w	r2, r2, #32
 80a482c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4830:	f1c2 0220 	rsb	r2, r2, #32
 80a4834:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4838:	fa21 f202 	lsr.w	r2, r1, r2
 80a483c:	eb43 0002 	adc.w	r0, r3, r2
 80a4840:	bf08      	it	eq
 80a4842:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4846:	4770      	bx	lr

080a4848 <__aeabi_fmul>:
 80a4848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a484c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4850:	bf1e      	ittt	ne
 80a4852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4856:	ea92 0f0c 	teqne	r2, ip
 80a485a:	ea93 0f0c 	teqne	r3, ip
 80a485e:	d06f      	beq.n	80a4940 <__aeabi_fmul+0xf8>
 80a4860:	441a      	add	r2, r3
 80a4862:	ea80 0c01 	eor.w	ip, r0, r1
 80a4866:	0240      	lsls	r0, r0, #9
 80a4868:	bf18      	it	ne
 80a486a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a486e:	d01e      	beq.n	80a48ae <__aeabi_fmul+0x66>
 80a4870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4874:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4878:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a487c:	fba0 3101 	umull	r3, r1, r0, r1
 80a4880:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4884:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4888:	bf3e      	ittt	cc
 80a488a:	0049      	lslcc	r1, r1, #1
 80a488c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4890:	005b      	lslcc	r3, r3, #1
 80a4892:	ea40 0001 	orr.w	r0, r0, r1
 80a4896:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a489a:	2afd      	cmp	r2, #253	; 0xfd
 80a489c:	d81d      	bhi.n	80a48da <__aeabi_fmul+0x92>
 80a489e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a48a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a48a6:	bf08      	it	eq
 80a48a8:	f020 0001 	biceq.w	r0, r0, #1
 80a48ac:	4770      	bx	lr
 80a48ae:	f090 0f00 	teq	r0, #0
 80a48b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a48b6:	bf08      	it	eq
 80a48b8:	0249      	lsleq	r1, r1, #9
 80a48ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a48be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a48c2:	3a7f      	subs	r2, #127	; 0x7f
 80a48c4:	bfc2      	ittt	gt
 80a48c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a48ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a48ce:	4770      	bxgt	lr
 80a48d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a48d4:	f04f 0300 	mov.w	r3, #0
 80a48d8:	3a01      	subs	r2, #1
 80a48da:	dc5d      	bgt.n	80a4998 <__aeabi_fmul+0x150>
 80a48dc:	f112 0f19 	cmn.w	r2, #25
 80a48e0:	bfdc      	itt	le
 80a48e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a48e6:	4770      	bxle	lr
 80a48e8:	f1c2 0200 	rsb	r2, r2, #0
 80a48ec:	0041      	lsls	r1, r0, #1
 80a48ee:	fa21 f102 	lsr.w	r1, r1, r2
 80a48f2:	f1c2 0220 	rsb	r2, r2, #32
 80a48f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a48fa:	ea5f 0031 	movs.w	r0, r1, rrx
 80a48fe:	f140 0000 	adc.w	r0, r0, #0
 80a4902:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4906:	bf08      	it	eq
 80a4908:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a490c:	4770      	bx	lr
 80a490e:	f092 0f00 	teq	r2, #0
 80a4912:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4916:	bf02      	ittt	eq
 80a4918:	0040      	lsleq	r0, r0, #1
 80a491a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a491e:	3a01      	subeq	r2, #1
 80a4920:	d0f9      	beq.n	80a4916 <__aeabi_fmul+0xce>
 80a4922:	ea40 000c 	orr.w	r0, r0, ip
 80a4926:	f093 0f00 	teq	r3, #0
 80a492a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a492e:	bf02      	ittt	eq
 80a4930:	0049      	lsleq	r1, r1, #1
 80a4932:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4936:	3b01      	subeq	r3, #1
 80a4938:	d0f9      	beq.n	80a492e <__aeabi_fmul+0xe6>
 80a493a:	ea41 010c 	orr.w	r1, r1, ip
 80a493e:	e78f      	b.n	80a4860 <__aeabi_fmul+0x18>
 80a4940:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4944:	ea92 0f0c 	teq	r2, ip
 80a4948:	bf18      	it	ne
 80a494a:	ea93 0f0c 	teqne	r3, ip
 80a494e:	d00a      	beq.n	80a4966 <__aeabi_fmul+0x11e>
 80a4950:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4954:	bf18      	it	ne
 80a4956:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a495a:	d1d8      	bne.n	80a490e <__aeabi_fmul+0xc6>
 80a495c:	ea80 0001 	eor.w	r0, r0, r1
 80a4960:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4964:	4770      	bx	lr
 80a4966:	f090 0f00 	teq	r0, #0
 80a496a:	bf17      	itett	ne
 80a496c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4970:	4608      	moveq	r0, r1
 80a4972:	f091 0f00 	teqne	r1, #0
 80a4976:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a497a:	d014      	beq.n	80a49a6 <__aeabi_fmul+0x15e>
 80a497c:	ea92 0f0c 	teq	r2, ip
 80a4980:	d101      	bne.n	80a4986 <__aeabi_fmul+0x13e>
 80a4982:	0242      	lsls	r2, r0, #9
 80a4984:	d10f      	bne.n	80a49a6 <__aeabi_fmul+0x15e>
 80a4986:	ea93 0f0c 	teq	r3, ip
 80a498a:	d103      	bne.n	80a4994 <__aeabi_fmul+0x14c>
 80a498c:	024b      	lsls	r3, r1, #9
 80a498e:	bf18      	it	ne
 80a4990:	4608      	movne	r0, r1
 80a4992:	d108      	bne.n	80a49a6 <__aeabi_fmul+0x15e>
 80a4994:	ea80 0001 	eor.w	r0, r0, r1
 80a4998:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a499c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a49a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a49a4:	4770      	bx	lr
 80a49a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a49aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a49ae:	4770      	bx	lr

080a49b0 <__aeabi_fdiv>:
 80a49b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a49b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a49b8:	bf1e      	ittt	ne
 80a49ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a49be:	ea92 0f0c 	teqne	r2, ip
 80a49c2:	ea93 0f0c 	teqne	r3, ip
 80a49c6:	d069      	beq.n	80a4a9c <__aeabi_fdiv+0xec>
 80a49c8:	eba2 0203 	sub.w	r2, r2, r3
 80a49cc:	ea80 0c01 	eor.w	ip, r0, r1
 80a49d0:	0249      	lsls	r1, r1, #9
 80a49d2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a49d6:	d037      	beq.n	80a4a48 <__aeabi_fdiv+0x98>
 80a49d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a49dc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a49e0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a49e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a49e8:	428b      	cmp	r3, r1
 80a49ea:	bf38      	it	cc
 80a49ec:	005b      	lslcc	r3, r3, #1
 80a49ee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a49f2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a49f6:	428b      	cmp	r3, r1
 80a49f8:	bf24      	itt	cs
 80a49fa:	1a5b      	subcs	r3, r3, r1
 80a49fc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4a00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4a04:	bf24      	itt	cs
 80a4a06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4a0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4a0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4a12:	bf24      	itt	cs
 80a4a14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4a18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4a1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4a20:	bf24      	itt	cs
 80a4a22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4a26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4a2a:	011b      	lsls	r3, r3, #4
 80a4a2c:	bf18      	it	ne
 80a4a2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4a32:	d1e0      	bne.n	80a49f6 <__aeabi_fdiv+0x46>
 80a4a34:	2afd      	cmp	r2, #253	; 0xfd
 80a4a36:	f63f af50 	bhi.w	80a48da <__aeabi_fmul+0x92>
 80a4a3a:	428b      	cmp	r3, r1
 80a4a3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4a40:	bf08      	it	eq
 80a4a42:	f020 0001 	biceq.w	r0, r0, #1
 80a4a46:	4770      	bx	lr
 80a4a48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4a4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4a50:	327f      	adds	r2, #127	; 0x7f
 80a4a52:	bfc2      	ittt	gt
 80a4a54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4a58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4a5c:	4770      	bxgt	lr
 80a4a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4a62:	f04f 0300 	mov.w	r3, #0
 80a4a66:	3a01      	subs	r2, #1
 80a4a68:	e737      	b.n	80a48da <__aeabi_fmul+0x92>
 80a4a6a:	f092 0f00 	teq	r2, #0
 80a4a6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4a72:	bf02      	ittt	eq
 80a4a74:	0040      	lsleq	r0, r0, #1
 80a4a76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4a7a:	3a01      	subeq	r2, #1
 80a4a7c:	d0f9      	beq.n	80a4a72 <__aeabi_fdiv+0xc2>
 80a4a7e:	ea40 000c 	orr.w	r0, r0, ip
 80a4a82:	f093 0f00 	teq	r3, #0
 80a4a86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4a8a:	bf02      	ittt	eq
 80a4a8c:	0049      	lsleq	r1, r1, #1
 80a4a8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4a92:	3b01      	subeq	r3, #1
 80a4a94:	d0f9      	beq.n	80a4a8a <__aeabi_fdiv+0xda>
 80a4a96:	ea41 010c 	orr.w	r1, r1, ip
 80a4a9a:	e795      	b.n	80a49c8 <__aeabi_fdiv+0x18>
 80a4a9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4aa0:	ea92 0f0c 	teq	r2, ip
 80a4aa4:	d108      	bne.n	80a4ab8 <__aeabi_fdiv+0x108>
 80a4aa6:	0242      	lsls	r2, r0, #9
 80a4aa8:	f47f af7d 	bne.w	80a49a6 <__aeabi_fmul+0x15e>
 80a4aac:	ea93 0f0c 	teq	r3, ip
 80a4ab0:	f47f af70 	bne.w	80a4994 <__aeabi_fmul+0x14c>
 80a4ab4:	4608      	mov	r0, r1
 80a4ab6:	e776      	b.n	80a49a6 <__aeabi_fmul+0x15e>
 80a4ab8:	ea93 0f0c 	teq	r3, ip
 80a4abc:	d104      	bne.n	80a4ac8 <__aeabi_fdiv+0x118>
 80a4abe:	024b      	lsls	r3, r1, #9
 80a4ac0:	f43f af4c 	beq.w	80a495c <__aeabi_fmul+0x114>
 80a4ac4:	4608      	mov	r0, r1
 80a4ac6:	e76e      	b.n	80a49a6 <__aeabi_fmul+0x15e>
 80a4ac8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4acc:	bf18      	it	ne
 80a4ace:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4ad2:	d1ca      	bne.n	80a4a6a <__aeabi_fdiv+0xba>
 80a4ad4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4ad8:	f47f af5c 	bne.w	80a4994 <__aeabi_fmul+0x14c>
 80a4adc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4ae0:	f47f af3c 	bne.w	80a495c <__aeabi_fmul+0x114>
 80a4ae4:	e75f      	b.n	80a49a6 <__aeabi_fmul+0x15e>
 80a4ae6:	bf00      	nop

080a4ae8 <__aeabi_f2iz>:
 80a4ae8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4aec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4af0:	d30f      	bcc.n	80a4b12 <__aeabi_f2iz+0x2a>
 80a4af2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4af6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a4afa:	d90d      	bls.n	80a4b18 <__aeabi_f2iz+0x30>
 80a4afc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4b04:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4b08:	fa23 f002 	lsr.w	r0, r3, r2
 80a4b0c:	bf18      	it	ne
 80a4b0e:	4240      	negne	r0, r0
 80a4b10:	4770      	bx	lr
 80a4b12:	f04f 0000 	mov.w	r0, #0
 80a4b16:	4770      	bx	lr
 80a4b18:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a4b1c:	d101      	bne.n	80a4b22 <__aeabi_f2iz+0x3a>
 80a4b1e:	0242      	lsls	r2, r0, #9
 80a4b20:	d105      	bne.n	80a4b2e <__aeabi_f2iz+0x46>
 80a4b22:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4b26:	bf08      	it	eq
 80a4b28:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4b2c:	4770      	bx	lr
 80a4b2e:	f04f 0000 	mov.w	r0, #0
 80a4b32:	4770      	bx	lr

080a4b34 <__cxa_atexit>:
 80a4b34:	b510      	push	{r4, lr}
 80a4b36:	4c05      	ldr	r4, [pc, #20]	; (80a4b4c <__cxa_atexit+0x18>)
 80a4b38:	4613      	mov	r3, r2
 80a4b3a:	b12c      	cbz	r4, 80a4b48 <__cxa_atexit+0x14>
 80a4b3c:	460a      	mov	r2, r1
 80a4b3e:	4601      	mov	r1, r0
 80a4b40:	2002      	movs	r0, #2
 80a4b42:	f3af 8000 	nop.w
 80a4b46:	bd10      	pop	{r4, pc}
 80a4b48:	4620      	mov	r0, r4
 80a4b4a:	bd10      	pop	{r4, pc}
 80a4b4c:	00000000 	.word	0x00000000

080a4b50 <memcpy>:
 80a4b50:	b510      	push	{r4, lr}
 80a4b52:	1e43      	subs	r3, r0, #1
 80a4b54:	440a      	add	r2, r1
 80a4b56:	4291      	cmp	r1, r2
 80a4b58:	d004      	beq.n	80a4b64 <memcpy+0x14>
 80a4b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4b62:	e7f8      	b.n	80a4b56 <memcpy+0x6>
 80a4b64:	bd10      	pop	{r4, pc}

080a4b66 <memset>:
 80a4b66:	4603      	mov	r3, r0
 80a4b68:	4402      	add	r2, r0
 80a4b6a:	4293      	cmp	r3, r2
 80a4b6c:	d002      	beq.n	80a4b74 <memset+0xe>
 80a4b6e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4b72:	e7fa      	b.n	80a4b6a <memset+0x4>
 80a4b74:	4770      	bx	lr
	...

080a4b78 <srand>:
 80a4b78:	b538      	push	{r3, r4, r5, lr}
 80a4b7a:	4b12      	ldr	r3, [pc, #72]	; (80a4bc4 <srand+0x4c>)
 80a4b7c:	4605      	mov	r5, r0
 80a4b7e:	681c      	ldr	r4, [r3, #0]
 80a4b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4b82:	b9d3      	cbnz	r3, 80a4bba <srand+0x42>
 80a4b84:	2018      	movs	r0, #24
 80a4b86:	f7fd fe5b 	bl	80a2840 <malloc>
 80a4b8a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4b8e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4b90:	8003      	strh	r3, [r0, #0]
 80a4b92:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4b96:	8043      	strh	r3, [r0, #2]
 80a4b98:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4b9c:	8083      	strh	r3, [r0, #4]
 80a4b9e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4ba2:	80c3      	strh	r3, [r0, #6]
 80a4ba4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4ba8:	8103      	strh	r3, [r0, #8]
 80a4baa:	2305      	movs	r3, #5
 80a4bac:	8143      	strh	r3, [r0, #10]
 80a4bae:	230b      	movs	r3, #11
 80a4bb0:	8183      	strh	r3, [r0, #12]
 80a4bb2:	2201      	movs	r2, #1
 80a4bb4:	2300      	movs	r3, #0
 80a4bb6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4bbc:	2200      	movs	r2, #0
 80a4bbe:	611d      	str	r5, [r3, #16]
 80a4bc0:	615a      	str	r2, [r3, #20]
 80a4bc2:	bd38      	pop	{r3, r4, r5, pc}
 80a4bc4:	200000a0 	.word	0x200000a0

080a4bc8 <strlen>:
 80a4bc8:	4603      	mov	r3, r0
 80a4bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4bce:	2a00      	cmp	r2, #0
 80a4bd0:	d1fb      	bne.n	80a4bca <strlen+0x2>
 80a4bd2:	1a18      	subs	r0, r3, r0
 80a4bd4:	3801      	subs	r0, #1
 80a4bd6:	4770      	bx	lr

080a4bd8 <dynalib_user>:
 80a4bd8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a4be8:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a4bf8:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a4c08:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a4c18:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a4c28:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a4c38:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a4c48:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a4c58:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a4c68:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a4c78:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a4c88:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a4c98:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a4ca8:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a4cb8:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a4cc8:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a4cd8:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a4ce8:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a4cf8:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a4d08:	4853 5300 4554 2050 4952 4847 2054 4f53     SH.STEP RIGHT SO
 80a4d18:	4f4c 5300 4554 2050 454c 5446 5320 4c4f     LO.STEP LEFT SOL
 80a4d28:	004f 5453 5045 5220 4749 5448 4420 4f55     O.STEP RIGHT DUO
 80a4d38:	5300 4554 2050 454c 5446 4420 4f55 6600     .STEP LEFT DUO.f
 80a4d48:	756c 5878 3a20 0020 6c66 7875 2059 203a     luxX : .fluxY : 
 80a4d58:	6600 756c 5a78 3a20 0020                    .fluxZ : .

080a4d62 <CSWTCH.57>:
 80a4d62:	0020 0000 0040 0000 0060                     ...@...`.

080a4d6c <CSWTCH.215>:
 80a4d6c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4d7c:	0050 0000                                   P...

080a4d80 <_ZTV7TwoWire>:
	...
 80a4d88:	2883 080a 28cd 080a 28a5 080a 2885 080a     .(...(...(...(..
 80a4d98:	28ad 080a 28b5 080a 28bd 080a 28c5 080a     .(...(...(...(..

080a4da8 <_ZTV9IPAddress>:
	...
 80a4db0:	2943 080a 00b3 080a 00d5 080a 6162 6475     C)..........baud
 80a4dc0:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a4dd0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a4de0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a4df0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a4e00:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a4e10:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a4e20:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a4e30:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a4e40:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a4e50:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a4e60:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a4e70:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a4e80:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a4e90:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a4ea0 <_ZTVN5spark12NetworkClassE>:
	...
 80a4ea8:	2a21 080a 2a2b 080a 2a35 080a 2a3f 080a     !*..+*..5*..?*..
 80a4eb8:	2a49 080a 2a55 080a 2a61 080a 2a6d 080a     I*..U*..a*..m*..
 80a4ec8:	2a75 080a 2a7f 080a 2a89 080a 616e 006e     u*...*...*..nan.
 80a4ed8:	766f 0066 6e69 0066                         ovf.inf.

080a4ee0 <_ZTV8SPIClass>:
	...
 80a4ee8:	2de9 080a 2deb 080a                         .-...-..

080a4ef0 <_ZL14clock_divisors>:
 80a4ef0:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a4f00:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a4f10:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a4f20:	0000 0000                                   ....

080a4f24 <_ZTV3UDP>:
	...
 80a4f2c:	00b5 080a 00e3 080a 2fff 080a 311f 080a     ........./...1..
 80a4f3c:	2ff7 080a 3015 080a 3033 080a 304d 080a     ./...0..30..M0..
 80a4f4c:	306f 080a 30b9 080a 30db 080a 3271 080a     o0...0...0..q2..
 80a4f5c:	3185 080a 2fe1 080a 3381 080a 31ed 080a     .1.../...3...1..
 80a4f6c:	32a9 080a 33af 080a 3149 080a 2fed 080a     .2...3..I1.../..
 80a4f7c:	3251 080a 2ff3 080a 304f 080a fff0 ffff     Q2.../..O0......
 80a4f8c:	0000 0000 3067 080a                         ....g0..

080a4f94 <_ZTV11USARTSerial>:
	...
 80a4f9c:	33e7 080a 3437 080a 3445 080a 2b05 080a     .3..74..E4...+..
 80a4fac:	33fb 080a 341d 080a 3409 080a 3431 080a     .3...4...4..14..
 80a4fbc:	33e9 080a 33ed 080a                         .3...3..

080a4fc4 <_ZTV9USBSerial>:
	...
 80a4fcc:	34ed 080a 353d 080a 354b 080a 2b05 080a     .4..=5..K5...+..
 80a4fdc:	3529 080a 34ef 080a 3505 080a 3537 080a     )5...4...5..75..
 80a4fec:	351b 080a 34e9 080a                         .5...4..

080a4ff4 <_ZTVN5spark9WiFiClassE>:
	...
 80a4ffc:	373b 080a 3731 080a 3727 080a 3699 080a     ;7..17..'7...6..
 80a500c:	371b 080a 370f 080a 3703 080a 36fb 080a     .7...7...7...6..
 80a501c:	36f1 080a 36e7 080a 36a3 080a               .6...6...6..

080a5028 <__sf_fake_stdin>:
	...

080a5048 <__sf_fake_stdout>:
	...

080a5068 <__sf_fake_stderr>:
	...
 80a5088:	0043                                        C.

080a508a <link_const_variable_data_end>:
	...

080a508c <link_constructors_location>:
 80a508c:	080a0629 	.word	0x080a0629
 80a5090:	080a0721 	.word	0x080a0721
 80a5094:	080a1129 	.word	0x080a1129
 80a5098:	080a23b1 	.word	0x080a23b1
 80a509c:	080a2a11 	.word	0x080a2a11
 80a50a0:	080a2af1 	.word	0x080a2af1
 80a50a4:	080a2dcd 	.word	0x080a2dcd
 80a50a8:	080a2fb5 	.word	0x080a2fb5
 80a50ac:	080a2fcd 	.word	0x080a2fcd
 80a50b0:	080a3745 	.word	0x080a3745
 80a50b4:	080a39b9 	.word	0x080a39b9
 80a50b8:	080a39e9 	.word	0x080a39e9
 80a50bc:	080a3a3d 	.word	0x080a3a3d
 80a50c0:	080a3b01 	.word	0x080a3b01
 80a50c4:	080a3b85 	.word	0x080a3b85
 80a50c8:	080a3c09 	.word	0x080a3c09

080a50cc <link_constructors_end>:
 80a50cc:	00000000 	.word	0x00000000
