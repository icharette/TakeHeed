
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU_neopixels/target/1.4.0/photon/motors_IMU_neopixels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003904  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3920  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a3924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b8  20000084  20000084  00030084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a39a8  080a39a8  000239a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a39d0  080a39d0  000239d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bcb6f  00000000  00000000  000239d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011490  00000000  00000000  000e0543  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018433  00000000  00000000  000f19d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002398  00000000  00000000  00109e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000037b0  00000000  00000000  0010c19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026dc1  00000000  00000000  0010f94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000287d1  00000000  00000000  0013670f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a76bc  00000000  00000000  0015eee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c548  00000000  00000000  0020659c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f9a5 	bl	80a337c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f9aa 	bl	80a3392 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3924 	.word	0x080a3924
 80a004c:	20000084 	.word	0x20000084
 80a0050:	20000084 	.word	0x20000084
 80a0054:	2000073c 	.word	0x2000073c
 80a0058:	2000073c 	.word	0x2000073c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fc61 	bl	80a2924 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a38e0 	.word	0x080a38e0
 80a0084:	080a3920 	.word	0x080a3920

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b852 	b.w	80a0130 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f975 	bl	80a037c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bc07 	b.w	80a28a8 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 bdaf 	b.w	80a1bfc <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bdb5 	b.w	80a1c0c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f002 f870 	bl	80a21a4 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f002 f9a5 	bl	80a2414 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a3780 	.word	0x080a3780

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f002 fcfc 	bl	80a2ad6 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f002 fcf2 	bl	80a2ad6 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}

080a00f6 <_Z10setupMotorPiiii>:
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);

void setupMotor(int motorPinsArray[], int enable, int step, int direction){
 80a00f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a00fa:	4616      	mov	r6, r2
 80a00fc:	461f      	mov	r7, r3
 80a00fe:	4604      	mov	r4, r0
 80a0100:	460d      	mov	r5, r1
  pinMode(enable, OUTPUT); //Enable
 80a0102:	fa1f f881 	uxth.w	r8, r1
 80a0106:	4640      	mov	r0, r8
 80a0108:	2101      	movs	r1, #1
 80a010a:	f002 fc5b 	bl	80a29c4 <pinMode>
  pinMode(step, OUTPUT); //Step
 80a010e:	2101      	movs	r1, #1
 80a0110:	b2b0      	uxth	r0, r6
 80a0112:	f002 fc57 	bl	80a29c4 <pinMode>
  pinMode(direction, OUTPUT); //Direction
 80a0116:	2101      	movs	r1, #1
 80a0118:	b2b8      	uxth	r0, r7
 80a011a:	f002 fc53 	bl	80a29c4 <pinMode>

  digitalWrite(enable, LOW);
 80a011e:	2100      	movs	r1, #0
 80a0120:	4640      	mov	r0, r8
 80a0122:	f002 fc60 	bl	80a29e6 <digitalWrite>

  motorPinsArray[0]= direction;
 80a0126:	6027      	str	r7, [r4, #0]
  motorPinsArray[1]= step;
 80a0128:	6066      	str	r6, [r4, #4]
  motorPinsArray[2]= enable;
 80a012a:	60a5      	str	r5, [r4, #8]
 80a012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0130 <setup>:

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0130:	b570      	push	{r4, r5, r6, lr}
  
   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a0132:	4b3b      	ldr	r3, [pc, #236]	; (80a0220 <setup+0xf0>)
 80a0134:	4a3b      	ldr	r2, [pc, #236]	; (80a0224 <setup+0xf4>)
 80a0136:	493c      	ldr	r1, [pc, #240]	; (80a0228 <setup+0xf8>)
 80a0138:	681b      	ldr	r3, [r3, #0]
 80a013a:	6812      	ldr	r2, [r2, #0]
 80a013c:	6809      	ldr	r1, [r1, #0]
 80a013e:	483b      	ldr	r0, [pc, #236]	; (80a022c <setup+0xfc>)

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0140:	b096      	sub	sp, #88	; 0x58
  
   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a0142:	f7ff ffd8 	bl	80a00f6 <_Z10setupMotorPiiii>
  setupMotor(leftShoulderMotors, enableLeft, stepLeft, directionLeft);
 80a0146:	4b3a      	ldr	r3, [pc, #232]	; (80a0230 <setup+0x100>)
 80a0148:	4a3a      	ldr	r2, [pc, #232]	; (80a0234 <setup+0x104>)
 80a014a:	493b      	ldr	r1, [pc, #236]	; (80a0238 <setup+0x108>)
 80a014c:	681b      	ldr	r3, [r3, #0]
 80a014e:	6812      	ldr	r2, [r2, #0]
 80a0150:	6809      	ldr	r1, [r1, #0]
 80a0152:	483a      	ldr	r0, [pc, #232]	; (80a023c <setup+0x10c>)
 80a0154:	f7ff ffcf 	bl	80a00f6 <_Z10setupMotorPiiii>
  // setupMotorRight();
  

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0158:	f002 fab2 	bl	80a26c0 <_Z16_fetch_usbserialv>
 80a015c:	f002 fa97 	bl	80a268e <_ZN9USBSerialcvbEv>
 80a0160:	2800      	cmp	r0, #0
 80a0162:	d0f9      	beq.n	80a0158 <setup+0x28>
 80a0164:	4c36      	ldr	r4, [pc, #216]	; (80a0240 <setup+0x110>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0166:	2300      	movs	r3, #0
 80a0168:	461a      	mov	r2, r3
 80a016a:	4619      	mov	r1, r3
 80a016c:	6860      	ldr	r0, [r4, #4]
 80a016e:	f001 fce5 	bl	80a1b3c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0172:	2200      	movs	r2, #0
 80a0174:	4611      	mov	r1, r2
 80a0176:	6860      	ldr	r0, [r4, #4]
 80a0178:	4d31      	ldr	r5, [pc, #196]	; (80a0240 <setup+0x110>)
 80a017a:	f001 fcf7 	bl	80a1b6c <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a017e:	2800      	cmp	r0, #0
 80a0180:	d0f7      	beq.n	80a0172 <setup+0x42>
  Serial.println("Setup");
 80a0182:	f002 fa9d 	bl	80a26c0 <_Z16_fetch_usbserialv>
 80a0186:	492f      	ldr	r1, [pc, #188]	; (80a0244 <setup+0x114>)
 80a0188:	f001 febb 	bl	80a1f02 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a018c:	4b2e      	ldr	r3, [pc, #184]	; (80a0248 <setup+0x118>)
 80a018e:	2200      	movs	r2, #0
 80a0190:	8819      	ldrh	r1, [r3, #0]
 80a0192:	482e      	ldr	r0, [pc, #184]	; (80a024c <setup+0x11c>)
 80a0194:	f001 ffe1 	bl	80a215a <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a0198:	2300      	movs	r3, #0
 80a019a:	4619      	mov	r1, r3
 80a019c:	4a2c      	ldr	r2, [pc, #176]	; (80a0250 <setup+0x120>)
 80a019e:	6868      	ldr	r0, [r5, #4]
 80a01a0:	f001 fd1c 	bl	80a1bdc <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a01a4:	f002 fa8c 	bl	80a26c0 <_Z16_fetch_usbserialv>
 80a01a8:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01aa:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a01ac:	2240      	movs	r2, #64	; 0x40
 80a01ae:	2100      	movs	r1, #0
 80a01b0:	a806      	add	r0, sp, #24
 80a01b2:	f003 f8ee 	bl	80a3392 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01b6:	2340      	movs	r3, #64	; 0x40
 80a01b8:	aa06      	add	r2, sp, #24
 80a01ba:	4621      	mov	r1, r4
 80a01bc:	9400      	str	r4, [sp, #0]
 80a01be:	6868      	ldr	r0, [r5, #4]
 80a01c0:	f001 fd14 	bl	80a1bec <network_get_hostname>
        return String(buf);
 80a01c4:	a906      	add	r1, sp, #24
 80a01c6:	a802      	add	r0, sp, #8
 80a01c8:	f001 ff56 	bl	80a2078 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01cc:	9902      	ldr	r1, [sp, #8]
 80a01ce:	4630      	mov	r0, r6
 80a01d0:	f001 fe97 	bl	80a1f02 <_ZN5Print7printlnEPKc>
 80a01d4:	a802      	add	r0, sp, #8
 80a01d6:	f001 ff08 	bl	80a1fea <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a01da:	f002 fa71 	bl	80a26c0 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01de:	4622      	mov	r2, r4
 80a01e0:	4606      	mov	r6, r0
 80a01e2:	4621      	mov	r1, r4
 80a01e4:	6868      	ldr	r0, [r5, #4]
 80a01e6:	f001 fca1 	bl	80a1b2c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01ea:	1c81      	adds	r1, r0, #2
 80a01ec:	a806      	add	r0, sp, #24
 80a01ee:	f001 fd93 	bl	80a1d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01f2:	a906      	add	r1, sp, #24
 80a01f4:	4630      	mov	r0, r6
 80a01f6:	f001 fe8e 	bl	80a1f16 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a01fa:	f002 fa61 	bl	80a26c0 <_Z16_fetch_usbserialv>
 80a01fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0202:	f002 fa3d 	bl	80a2680 <_ZN9USBSerial5beginEl>

  //   setupImu();
    
  // updateTimer.SetCallback(OnTimer);

    strip.setBrightness(BRIGHTNESS);
 80a0206:	2132      	movs	r1, #50	; 0x32
 80a0208:	4812      	ldr	r0, [pc, #72]	; (80a0254 <setup+0x124>)
 80a020a:	f001 fae8 	bl	80a17de <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a020e:	4811      	ldr	r0, [pc, #68]	; (80a0254 <setup+0x124>)
 80a0210:	f000 f99b 	bl	80a054a <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0214:	480f      	ldr	r0, [pc, #60]	; (80a0254 <setup+0x124>)
 80a0216:	f000 f9cf 	bl	80a05b8 <_ZN17Adafruit_NeoPixel4showEv>
  }
 80a021a:	b016      	add	sp, #88	; 0x58
 80a021c:	bd70      	pop	{r4, r5, r6, pc}
 80a021e:	bf00      	nop
 80a0220:	20000008 	.word	0x20000008
 80a0224:	20000018 	.word	0x20000018
 80a0228:	20000014 	.word	0x20000014
 80a022c:	20000088 	.word	0x20000088
 80a0230:	2000000c 	.word	0x2000000c
 80a0234:	20000010 	.word	0x20000010
 80a0238:	20000000 	.word	0x20000000
 80a023c:	2000013c 	.word	0x2000013c
 80a0240:	20000638 	.word	0x20000638
 80a0244:	080a3520 	.word	0x080a3520
 80a0248:	20000004 	.word	0x20000004
 80a024c:	20000150 	.word	0x20000150
 80a0250:	080a3526 	.word	0x080a3526
 80a0254:	2000019c 	.word	0x2000019c

080a0258 <_Z5Wheelh>:
//-----------------------//-----------------------//-----------------------//-----------------------NEOPIXELS

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
 80a0258:	43c0      	mvns	r0, r0
 80a025a:	b2c0      	uxtb	r0, r0
  if(WheelPos < 85) {
 80a025c:	2854      	cmp	r0, #84	; 0x54
 80a025e:	d80a      	bhi.n	80a0276 <_Z5Wheelh+0x1e>
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3,0);
 80a0260:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a0264:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a0268:	3801      	subs	r0, #1
 80a026a:	2300      	movs	r3, #0
 80a026c:	b2d2      	uxtb	r2, r2
 80a026e:	4619      	mov	r1, r3
 80a0270:	b2c0      	uxtb	r0, r0
 80a0272:	f001 baab 	b.w	80a17cc <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  if(WheelPos < 170) {
 80a0276:	28a9      	cmp	r0, #169	; 0xa9
 80a0278:	d80c      	bhi.n	80a0294 <_Z5Wheelh+0x3c>
    WheelPos -= 85;
 80a027a:	3855      	subs	r0, #85	; 0x55
 80a027c:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3,0);
 80a027e:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a0282:	3a01      	subs	r2, #1
 80a0284:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0288:	2300      	movs	r3, #0
 80a028a:	b2d2      	uxtb	r2, r2
 80a028c:	b2c9      	uxtb	r1, r1
 80a028e:	4618      	mov	r0, r3
 80a0290:	f001 ba9c 	b.w	80a17cc <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  WheelPos -= 170;
 80a0294:	3056      	adds	r0, #86	; 0x56
 80a0296:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0,0);
 80a0298:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a029c:	3901      	subs	r1, #1
 80a029e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a02a2:	2300      	movs	r3, #0
 80a02a4:	461a      	mov	r2, r3
 80a02a6:	b2c9      	uxtb	r1, r1
 80a02a8:	b2c0      	uxtb	r0, r0
 80a02aa:	f001 ba8f 	b.w	80a17cc <_ZN17Adafruit_NeoPixel5ColorEhhhh>
	...

080a02b0 <_Z11healthyWavehii>:
}
uint8_t blue(uint32_t c) {
  return (c);
}

void healthyWave(uint8_t wait, int rainbowLoops, int whiteLoops) {
 80a02b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a02b4:	2400      	movs	r4, #0
}
uint8_t blue(uint32_t c) {
  return (c);
}

void healthyWave(uint8_t wait, int rainbowLoops, int whiteLoops) {
 80a02b6:	4681      	mov	r9, r0
 80a02b8:	4688      	mov	r8, r1
  float fadeMax = 100.0;
  int fadeVal = 0;
 80a02ba:	4625      	mov	r5, r4
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a02bc:	4544      	cmp	r4, r8
 80a02be:	da4f      	bge.n	80a0360 <_Z11healthyWavehii+0xb0>
 80a02c0:	2600      	movs	r6, #0
 80a02c2:	2700      	movs	r7, #0
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a02c4:	4829      	ldr	r0, [pc, #164]	; (80a036c <_Z11healthyWavehii+0xbc>)
 80a02c6:	f001 fa88 	bl	80a17da <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a02ca:	4287      	cmp	r7, r0
 80a02cc:	da26      	bge.n	80a031c <_Z11healthyWavehii+0x6c>
        wheelVal = Wheel(((i * 256 / strip.numPixels()) + j) & 255);
 80a02ce:	4827      	ldr	r0, [pc, #156]	; (80a036c <_Z11healthyWavehii+0xbc>)
 80a02d0:	f001 fa83 	bl	80a17da <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a02d4:	023b      	lsls	r3, r7, #8
 80a02d6:	fb93 f0f0 	sdiv	r0, r3, r0
 80a02da:	4430      	add	r0, r6
 80a02dc:	b2c0      	uxtb	r0, r0
 80a02de:	f7ff ffbb 	bl	80a0258 <_Z5Wheelh>

        redVal = red(wheelVal) * float(fadeVal/fadeMax);
        greenVal = green(wheelVal) * float(fadeVal/fadeMax);
        blueVal = blue(wheelVal) * float(fadeVal/fadeMax);

        strip.setPixelColor( i, strip.Color( redVal, 255, 0 ) );
 80a02e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a02e6:	f002 fdfb 	bl	80a2ee0 <__aeabi_i2f>
 80a02ea:	4682      	mov	sl, r0
 80a02ec:	4628      	mov	r0, r5
 80a02ee:	f002 fdf7 	bl	80a2ee0 <__aeabi_i2f>
 80a02f2:	491f      	ldr	r1, [pc, #124]	; (80a0370 <_Z11healthyWavehii+0xc0>)
 80a02f4:	f002 fefc 	bl	80a30f0 <__aeabi_fdiv>
 80a02f8:	4601      	mov	r1, r0
 80a02fa:	4650      	mov	r0, sl
 80a02fc:	f002 fe44 	bl	80a2f88 <__aeabi_fmul>
 80a0300:	f003 f808 	bl	80a3314 <__aeabi_f2iz>
 80a0304:	2200      	movs	r2, #0
 80a0306:	21ff      	movs	r1, #255	; 0xff
 80a0308:	b2c0      	uxtb	r0, r0
 80a030a:	f001 fa5a 	bl	80a17c2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a030e:	b2b9      	uxth	r1, r7
 80a0310:	4602      	mov	r2, r0
 80a0312:	4816      	ldr	r0, [pc, #88]	; (80a036c <_Z11healthyWavehii+0xbc>)
 80a0314:	f001 fa0a 	bl	80a172c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a0318:	3701      	adds	r7, #1
 80a031a:	e7d3      	b.n	80a02c4 <_Z11healthyWavehii+0x14>

        strip.setPixelColor( i, strip.Color( redVal, 255, 0 ) );
      }

      // First loop, fade in!
      if(k == 0 && fadeVal < fadeMax-1) {
 80a031c:	b944      	cbnz	r4, 80a0330 <_Z11healthyWavehii+0x80>
 80a031e:	4628      	mov	r0, r5
 80a0320:	f002 fdde 	bl	80a2ee0 <__aeabi_i2f>
 80a0324:	4913      	ldr	r1, [pc, #76]	; (80a0374 <_Z11healthyWavehii+0xc4>)
 80a0326:	f002 ffcd 	bl	80a32c4 <__aeabi_fcmplt>
 80a032a:	b108      	cbz	r0, 80a0330 <_Z11healthyWavehii+0x80>
        fadeVal++;
 80a032c:	3501      	adds	r5, #1
 80a032e:	e00b      	b.n	80a0348 <_Z11healthyWavehii+0x98>
      }
      // Last loop, fade out!
      else if(k == rainbowLoops - 1 && j > 255 - fadeMax ) {
 80a0330:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80a0334:	429c      	cmp	r4, r3
 80a0336:	d107      	bne.n	80a0348 <_Z11healthyWavehii+0x98>
 80a0338:	4630      	mov	r0, r6
 80a033a:	f002 fdd1 	bl	80a2ee0 <__aeabi_i2f>
 80a033e:	490e      	ldr	r1, [pc, #56]	; (80a0378 <_Z11healthyWavehii+0xc8>)
 80a0340:	f002 ffde 	bl	80a3300 <__aeabi_fcmpgt>
 80a0344:	b100      	cbz	r0, 80a0348 <_Z11healthyWavehii+0x98>
        fadeVal--;
 80a0346:	3d01      	subs	r5, #1
      }

      strip.show();
 80a0348:	4808      	ldr	r0, [pc, #32]	; (80a036c <_Z11healthyWavehii+0xbc>)
 80a034a:	f000 f935 	bl	80a05b8 <_ZN17Adafruit_NeoPixel4showEv>
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
 80a034e:	3601      	adds	r6, #1
      else if(k == rainbowLoops - 1 && j > 255 - fadeMax ) {
        fadeVal--;
      }

      strip.show();
      delay(wait);
 80a0350:	4648      	mov	r0, r9
 80a0352:	f001 fc6b 	bl	80a1c2c <delay>
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
 80a0356:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80a035a:	d1b2      	bne.n	80a02c2 <_Z11healthyWavehii+0x12>
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a035c:	3401      	adds	r4, #1
 80a035e:	e7ad      	b.n	80a02bc <_Z11healthyWavehii+0xc>
      strip.show();
      delay(wait);
    }
  }

  delay(500);
 80a0360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a0364:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      strip.show();
      delay(wait);
    }
  }

  delay(500);
 80a0368:	f001 bc60 	b.w	80a1c2c <delay>
 80a036c:	2000019c 	.word	0x2000019c
 80a0370:	42c80000 	.word	0x42c80000
 80a0374:	42c60000 	.word	0x42c60000
 80a0378:	431b0000 	.word	0x431b0000

080a037c <loop>:
*/
// setValuesAccordingToState('L');

//NEOPIXELS
//CORRECT CYCLE !!!!
  healthyWave(10,10,1);
 80a037c:	210a      	movs	r1, #10
 80a037e:	2201      	movs	r2, #1
 80a0380:	4608      	mov	r0, r1
 80a0382:	f7ff bf95 	b.w	80a02b0 <_Z11healthyWavehii>
	...

080a0388 <_GLOBAL__sub_I_SystemMode>:
// Fill the dots one after the other with a color
void colorWipe(uint8_t wait) {
// fadeIn(wait, 255,128,0);
fadeOut(wait, 255,128,0);
fadeIn(wait, 255,128,0);
}
 80a0388:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a038a:	f001 fa79 	bl	80a1880 <HAL_Pin_Map>
#include "LSM9DS1_Types.h"
#include "math.h"
#include "SparkCorePolledTimer.h"
#include "neopixel.h"

SYSTEM_THREAD(ENABLED);
 80a038e:	2100      	movs	r1, #0
 80a0390:	2001      	movs	r0, #1
 80a0392:	f001 fba7 	bl	80a1ae4 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0396:	4b19      	ldr	r3, [pc, #100]	; (80a03fc <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0398:	2200      	movs	r2, #0
 80a039a:	701a      	strb	r2, [r3, #0]
 80a039c:	805a      	strh	r2, [r3, #2]
 80a039e:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a03a2:	4d17      	ldr	r5, [pc, #92]	; (80a0400 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a03a4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a03a6:	2002      	movs	r0, #2
 80a03a8:	f001 fb8c 	bl	80a1ac4 <set_system_mode>
 80a03ac:	4c15      	ldr	r4, [pc, #84]	; (80a0404 <_GLOBAL__sub_I_SystemMode+0x7c>)
 80a03ae:	4628      	mov	r0, r5
 80a03b0:	f001 fca4 	bl	80a1cfc <_ZN9IPAddressC1Ev>
 80a03b4:	4628      	mov	r0, r5
int port;
UDP udp;
 80a03b6:	4d14      	ldr	r5, [pc, #80]	; (80a0408 <_GLOBAL__sub_I_SystemMode+0x80>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a03b8:	4622      	mov	r2, r4
 80a03ba:	4914      	ldr	r1, [pc, #80]	; (80a040c <_GLOBAL__sub_I_SystemMode+0x84>)
 80a03bc:	f002 fb86 	bl	80a2acc <__aeabi_atexit>
int port;
UDP udp;
 80a03c0:	4628      	mov	r0, r5
 80a03c2:	f002 f809 	bl	80a23d8 <_ZN3UDPC1Ev>
 80a03c6:	4622      	mov	r2, r4
 80a03c8:	4911      	ldr	r1, [pc, #68]	; (80a0410 <_GLOBAL__sub_I_SystemMode+0x88>)
 80a03ca:	4628      	mov	r0, r5
#define PIXEL_PIN D2
#define PIXEL_COUNT 10
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a03cc:	4d11      	ldr	r5, [pc, #68]	; (80a0414 <_GLOBAL__sub_I_SystemMode+0x8c>)
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a03ce:	f002 fb7d 	bl	80a2acc <__aeabi_atexit>
#define PIXEL_PIN D2
#define PIXEL_COUNT 10
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a03d2:	2302      	movs	r3, #2
 80a03d4:	461a      	mov	r2, r3
 80a03d6:	210a      	movs	r1, #10
 80a03d8:	4628      	mov	r0, r5
 80a03da:	f000 f8db 	bl	80a0594 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a03de:	4622      	mov	r2, r4
 80a03e0:	490d      	ldr	r1, [pc, #52]	; (80a0418 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a03e2:	4628      	mov	r0, r5
 80a03e4:	f002 fb72 	bl	80a2acc <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a03e8:	480c      	ldr	r0, [pc, #48]	; (80a041c <_GLOBAL__sub_I_SystemMode+0x94>)
 80a03ea:	f000 f879 	bl	80a04e0 <_ZN7LSM9DS1C1Ev>
// Fill the dots one after the other with a color
void colorWipe(uint8_t wait) {
// fadeIn(wait, 255,128,0);
fadeOut(wait, 255,128,0);
fadeIn(wait, 255,128,0);
}
 80a03ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a03f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a03f6:	480a      	ldr	r0, [pc, #40]	; (80a0420 <_GLOBAL__sub_I_SystemMode+0x98>)
 80a03f8:	f000 b81a 	b.w	80a0430 <_ZN20SparkCorePolledTimerC1Em>
 80a03fc:	20000148 	.word	0x20000148
 80a0400:	200000a0 	.word	0x200000a0
 80a0404:	20000084 	.word	0x20000084
 80a0408:	20000150 	.word	0x20000150
 80a040c:	080a00b3 	.word	0x080a00b3
 80a0410:	080a00b5 	.word	0x080a00b5
 80a0414:	2000019c 	.word	0x2000019c
 80a0418:	080a04f7 	.word	0x080a04f7
 80a041c:	200000b8 	.word	0x200000b8
 80a0420:	20000094 	.word	0x20000094

080a0424 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0424:	b510      	push	{r4, lr}
 80a0426:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0428:	f001 fa22 	bl	80a1870 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a042c:	6020      	str	r0, [r4, #0]
 80a042e:	bd10      	pop	{r4, pc}

080a0430 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a0430:	b538      	push	{r3, r4, r5, lr}
 80a0432:	4604      	mov	r4, r0
 80a0434:	460d      	mov	r5, r1
    Reset();
 80a0436:	f7ff fff5 	bl	80a0424 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a043a:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a043c:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a043e:	60a3      	str	r3, [r4, #8]
}
 80a0440:	4620      	mov	r0, r4
 80a0442:	bd38      	pop	{r3, r4, r5, pc}

080a0444 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0444:	f001 ba1c 	b.w	80a1880 <HAL_Pin_Map>

080a0448 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0448:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a044a:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a044c:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a044e:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0450:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0452:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0454:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0456:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0458:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a045a:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a045c:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a045e:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0460:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0462:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0464:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0468:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a046a:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a046c:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a046e:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0470:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0472:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0474:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0476:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0478:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a047a:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a047c:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a047e:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0480:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0484:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0486:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0488:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a048a:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a048c:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a048e:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0490:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0492:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0494:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0496:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0498:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a049a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a049e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a04a0:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a04a4:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a04a8:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a04aa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a04ae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a04b2:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a04b6:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a04b8:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a04ba:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a04bc:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a04be:	6565      	str	r5, [r4, #84]	; 0x54
 80a04c0:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a04c4:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a04c8:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a04cc:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a04d0:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a04d4:	d1f0      	bne.n	80a04b8 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a04d6:	f04f 0300 	mov.w	r3, #0
 80a04da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a04de:	bd30      	pop	{r4, r5, pc}

080a04e0 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a04e0:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a04e2:	231e      	movs	r3, #30
 80a04e4:	226b      	movs	r2, #107	; 0x6b
 80a04e6:	2101      	movs	r1, #1
 80a04e8:	f7ff ffae 	bl	80a0448 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a04ec:	bd10      	pop	{r4, pc}

080a04ee <_GLOBAL__sub_I_magSensitivity>:
 80a04ee:	f001 b9c7 	b.w	80a1880 <HAL_Pin_Map>

080a04f2 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a04f2:	f001 b9b5 	b.w	80a1860 <HAL_Timer_Get_Micro_Seconds>

080a04f6 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a04f6:	b510      	push	{r4, lr}
 80a04f8:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a04fa:	68c0      	ldr	r0, [r0, #12]
 80a04fc:	b108      	cbz	r0, 80a0502 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a04fe:	f001 fb85 	bl	80a1c0c <free>
  if (begun) pinMode(pin, INPUT);
 80a0502:	7823      	ldrb	r3, [r4, #0]
 80a0504:	b11b      	cbz	r3, 80a050e <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0506:	2100      	movs	r1, #0
 80a0508:	79e0      	ldrb	r0, [r4, #7]
 80a050a:	f002 fa5b 	bl	80a29c4 <pinMode>
}
 80a050e:	4620      	mov	r0, r4
 80a0510:	bd10      	pop	{r4, pc}

080a0512 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0512:	b538      	push	{r3, r4, r5, lr}
 80a0514:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0516:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0518:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a051a:	b108      	cbz	r0, 80a0520 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a051c:	f001 fb76 	bl	80a1c0c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0520:	79a3      	ldrb	r3, [r4, #6]
 80a0522:	2b06      	cmp	r3, #6
 80a0524:	bf0c      	ite	eq
 80a0526:	2004      	moveq	r0, #4
 80a0528:	2003      	movne	r0, #3
 80a052a:	4368      	muls	r0, r5
 80a052c:	b280      	uxth	r0, r0
 80a052e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0530:	f001 fb64 	bl	80a1bfc <malloc>
 80a0534:	60e0      	str	r0, [r4, #12]
 80a0536:	b128      	cbz	r0, 80a0544 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0538:	88a2      	ldrh	r2, [r4, #4]
 80a053a:	2100      	movs	r1, #0
 80a053c:	f002 ff29 	bl	80a3392 <memset>
    numLEDs = n;
 80a0540:	8065      	strh	r5, [r4, #2]
 80a0542:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0544:	80a0      	strh	r0, [r4, #4]
 80a0546:	8060      	strh	r0, [r4, #2]
 80a0548:	bd38      	pop	{r3, r4, r5, pc}

080a054a <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a054a:	b510      	push	{r4, lr}
 80a054c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a054e:	2101      	movs	r1, #1
 80a0550:	79c0      	ldrb	r0, [r0, #7]
 80a0552:	f002 fa37 	bl	80a29c4 <pinMode>
  digitalWrite(pin, LOW);
 80a0556:	2100      	movs	r1, #0
 80a0558:	79e0      	ldrb	r0, [r4, #7]
 80a055a:	f002 fa44 	bl	80a29e6 <digitalWrite>
  begun = true;
 80a055e:	2301      	movs	r3, #1
 80a0560:	7023      	strb	r3, [r4, #0]
 80a0562:	bd10      	pop	{r4, pc}

080a0564 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0564:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0566:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0568:	4605      	mov	r5, r0
 80a056a:	460c      	mov	r4, r1
    if (begun) {
 80a056c:	b11b      	cbz	r3, 80a0576 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a056e:	2100      	movs	r1, #0
 80a0570:	79c0      	ldrb	r0, [r0, #7]
 80a0572:	f002 fa27 	bl	80a29c4 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0576:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0578:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a057a:	b153      	cbz	r3, 80a0592 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a057c:	b2a4      	uxth	r4, r4
 80a057e:	4620      	mov	r0, r4
 80a0580:	2101      	movs	r1, #1
 80a0582:	f002 fa1f 	bl	80a29c4 <pinMode>
        digitalWrite(p, LOW);
 80a0586:	4620      	mov	r0, r4
    }
}
 80a0588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a058c:	2100      	movs	r1, #0
 80a058e:	f002 ba2a 	b.w	80a29e6 <digitalWrite>
 80a0592:	bd38      	pop	{r3, r4, r5, pc}

080a0594 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0594:	b570      	push	{r4, r5, r6, lr}
 80a0596:	4604      	mov	r4, r0
 80a0598:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a059a:	2500      	movs	r5, #0
 80a059c:	7183      	strb	r3, [r0, #6]
 80a059e:	7005      	strb	r5, [r0, #0]
 80a05a0:	7205      	strb	r5, [r0, #8]
 80a05a2:	60c5      	str	r5, [r0, #12]
 80a05a4:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a05a6:	f7ff ffb4 	bl	80a0512 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a05aa:	4620      	mov	r0, r4
 80a05ac:	4631      	mov	r1, r6
 80a05ae:	f7ff ffd9 	bl	80a0564 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a05b2:	4620      	mov	r0, r4
 80a05b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a05b8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a05b8:	68c3      	ldr	r3, [r0, #12]
 80a05ba:	2b00      	cmp	r3, #0
 80a05bc:	f000 858e 	beq.w	80a10dc <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a05c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a05c4:	4604      	mov	r4, r0
 80a05c6:	7983      	ldrb	r3, [r0, #6]
 80a05c8:	b086      	sub	sp, #24
 80a05ca:	3b02      	subs	r3, #2
 80a05cc:	b2db      	uxtb	r3, r3
 80a05ce:	2b04      	cmp	r3, #4
 80a05d0:	bf96      	itet	ls
 80a05d2:	4a29      	ldrls	r2, [pc, #164]	; (80a0678 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a05d4:	2532      	movhi	r5, #50	; 0x32
 80a05d6:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a05da:	f7ff ff8a 	bl	80a04f2 <micros>
 80a05de:	6923      	ldr	r3, [r4, #16]
 80a05e0:	1ac0      	subs	r0, r0, r3
 80a05e2:	42a8      	cmp	r0, r5
 80a05e4:	d3f9      	bcc.n	80a05da <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a05e6:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a05e8:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a05ea:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a05ec:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a05ee:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a05f2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a05f6:	f000 8272 	beq.w	80a0ade <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a05fa:	2907      	cmp	r1, #7
 80a05fc:	f000 826f 	beq.w	80a0ade <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0600:	2906      	cmp	r1, #6
 80a0602:	f000 8432 	beq.w	80a0e6a <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0606:	2905      	cmp	r1, #5
 80a0608:	f000 83ab 	beq.w	80a0d62 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a060c:	2908      	cmp	r1, #8
 80a060e:	f000 83a8 	beq.w	80a0d62 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0612:	2900      	cmp	r1, #0
 80a0614:	f040 8563 	bne.w	80a10de <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0618:	4a18      	ldr	r2, [pc, #96]	; (80a067c <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a061a:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a061e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0622:	b29b      	uxth	r3, r3
 80a0624:	2b00      	cmp	r3, #0
 80a0626:	f000 8395 	beq.w	80a0d54 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a062a:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a062c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0630:	f10e 0503 	add.w	r5, lr, #3
 80a0634:	3b03      	subs	r3, #3
 80a0636:	b29b      	uxth	r3, r3
 80a0638:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a063c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0640:	b2db      	uxtb	r3, r3
 80a0642:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0646:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a064a:	b2db      	uxtb	r3, r3
 80a064c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0650:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0654:	b2db      	uxtb	r3, r3
 80a0656:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a065a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a065e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0662:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0666:	021b      	lsls	r3, r3, #8
 80a0668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a066c:	4303      	orrs	r3, r0
 80a066e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0670:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0674:	e11b      	b.n	80a08ae <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0676:	bf00      	nop
 80a0678:	080a35d4 	.word	0x080a35d4
 80a067c:	200001b0 	.word	0x200001b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0680:	4600      	mov	r0, r0
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0788:	79e3      	ldrb	r3, [r4, #7]
 80a078a:	6810      	ldr	r0, [r2, #0]
 80a078c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0790:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0794:	88bf      	ldrh	r7, [r7, #4]
 80a0796:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a079a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a079c:	4600      	mov	r0, r0
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0896:	9b04      	ldr	r3, [sp, #16]
 80a0898:	085b      	lsrs	r3, r3, #1
 80a089a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a089c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a08a0:	3301      	adds	r3, #1
 80a08a2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a08a4:	2b17      	cmp	r3, #23
 80a08a6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a08aa:	f200 82db 	bhi.w	80a0e64 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a08ae:	79e3      	ldrb	r3, [r4, #7]
 80a08b0:	6810      	ldr	r0, [r2, #0]
 80a08b2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08b6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a08ba:	88bf      	ldrh	r7, [r7, #4]
 80a08bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08c0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a08c2:	9803      	ldr	r0, [sp, #12]
 80a08c4:	9b04      	ldr	r3, [sp, #16]
 80a08c6:	4218      	tst	r0, r3
 80a08c8:	f47f aeda 	bne.w	80a0680 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a08cc:	4600      	mov	r0, r0
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a091e:	79e3      	ldrb	r3, [r4, #7]
 80a0920:	6810      	ldr	r0, [r2, #0]
 80a0922:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0926:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a092a:	88bf      	ldrh	r7, [r7, #4]
 80a092c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0930:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0932:	4600      	mov	r0, r0
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	e6db      	b.n	80a0896 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ade:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ae2:	4a17      	ldr	r2, [pc, #92]	; (80a0b40 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0ae4:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0ae6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0aea:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0aec:	2b00      	cmp	r3, #0
 80a0aee:	f000 8131 	beq.w	80a0d54 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0af2:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0af4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0af8:	f10e 0103 	add.w	r1, lr, #3
 80a0afc:	3b03      	subs	r3, #3
 80a0afe:	b29b      	uxth	r3, r3
 80a0b00:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0b04:	f89e 3000 	ldrb.w	r3, [lr]
 80a0b08:	b2db      	uxtb	r3, r3
 80a0b0a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0b0e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0b12:	b2db      	uxtb	r3, r3
 80a0b14:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b18:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0b1c:	b2db      	uxtb	r3, r3
 80a0b1e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0b26:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0b2a:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0b2e:	0200      	lsls	r0, r0, #8
 80a0b30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0b34:	433b      	orrs	r3, r7
 80a0b36:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b38:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0b3c:	e080      	b.n	80a0c40 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0b3e:	bf00      	nop
 80a0b40:	200001b0 	.word	0x200001b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b44:	4600      	mov	r0, r0
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0bde:	79e3      	ldrb	r3, [r4, #7]
 80a0be0:	6810      	ldr	r0, [r2, #0]
 80a0be2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0be6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0bea:	88bf      	ldrh	r7, [r7, #4]
 80a0bec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bf0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0bf2:	4600      	mov	r0, r0
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0c28:	9b04      	ldr	r3, [sp, #16]
 80a0c2a:	085b      	lsrs	r3, r3, #1
 80a0c2c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c32:	3301      	adds	r3, #1
 80a0c34:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c36:	2b17      	cmp	r3, #23
 80a0c38:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c3c:	f200 8083 	bhi.w	80a0d46 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0c40:	79e3      	ldrb	r3, [r4, #7]
 80a0c42:	6810      	ldr	r0, [r2, #0]
 80a0c44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c48:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c4c:	88bf      	ldrh	r7, [r7, #4]
 80a0c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c52:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c54:	9803      	ldr	r0, [sp, #12]
 80a0c56:	9b04      	ldr	r3, [sp, #16]
 80a0c58:	4218      	tst	r0, r3
 80a0c5a:	f47f af73 	bne.w	80a0b44 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c5e:	4600      	mov	r0, r0
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0c86:	79e3      	ldrb	r3, [r4, #7]
 80a0c88:	6810      	ldr	r0, [r2, #0]
 80a0c8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c8e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c92:	88bf      	ldrh	r7, [r7, #4]
 80a0c94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c98:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c9a:	4600      	mov	r0, r0
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	e770      	b.n	80a0c28 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0d4a:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d4c:	b29b      	uxth	r3, r3
 80a0d4e:	2b00      	cmp	r3, #0
 80a0d50:	f47f aecf 	bne.w	80a0af2 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0d54:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0d56:	f7ff fbcc 	bl	80a04f2 <micros>
 80a0d5a:	6120      	str	r0, [r4, #16]
}
 80a0d5c:	b006      	add	sp, #24
 80a0d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0d62:	4b5e      	ldr	r3, [pc, #376]	; (80a0edc <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0d64:	4a5e      	ldr	r2, [pc, #376]	; (80a0ee0 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0d66:	4618      	mov	r0, r3
 80a0d68:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0d6a:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0d6e:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d70:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0d74:	b292      	uxth	r2, r2
 80a0d76:	2a00      	cmp	r2, #0
 80a0d78:	d0ec      	beq.n	80a0d54 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0d7a:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0d82:	f10e 0503 	add.w	r5, lr, #3
 80a0d86:	3a03      	subs	r2, #3
 80a0d88:	b292      	uxth	r2, r2
 80a0d8a:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0d8e:	f89e 2000 	ldrb.w	r2, [lr]
 80a0d92:	b2d2      	uxtb	r2, r2
 80a0d94:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0d98:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0d9c:	b2d2      	uxtb	r2, r2
 80a0d9e:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0da2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0da6:	b2d2      	uxtb	r2, r2
 80a0da8:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0dac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0db0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0db4:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0db8:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0dbc:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0dc0:	ea42 020c 	orr.w	r2, r2, ip
 80a0dc4:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0dc6:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0dca:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0dcc:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0dce:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0dd2:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0dd6:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0dda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0dde:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0de0:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0de4:	9e03      	ldr	r6, [sp, #12]
 80a0de6:	9a04      	ldr	r2, [sp, #16]
 80a0de8:	4216      	tst	r6, r2
 80a0dea:	d023      	beq.n	80a0e34 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0dec:	685a      	ldr	r2, [r3, #4]
 80a0dee:	9e05      	ldr	r6, [sp, #20]
 80a0df0:	1b92      	subs	r2, r2, r6
 80a0df2:	2a4f      	cmp	r2, #79	; 0x4f
 80a0df4:	d9fa      	bls.n	80a0dec <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0df6:	79e2      	ldrb	r2, [r4, #7]
 80a0df8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0dfc:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0e00:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0e04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0e08:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0e0c:	6842      	ldr	r2, [r0, #4]
 80a0e0e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0e10:	685a      	ldr	r2, [r3, #4]
 80a0e12:	9e05      	ldr	r6, [sp, #20]
 80a0e14:	1b92      	subs	r2, r2, r6
 80a0e16:	2a07      	cmp	r2, #7
 80a0e18:	d9fa      	bls.n	80a0e10 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0e1a:	9a04      	ldr	r2, [sp, #16]
 80a0e1c:	0852      	lsrs	r2, r2, #1
 80a0e1e:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0e20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0e24:	3201      	adds	r2, #1
 80a0e26:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0e28:	2a17      	cmp	r2, #23
 80a0e2a:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0e2e:	d9cc      	bls.n	80a0dca <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0e30:	46ae      	mov	lr, r5
 80a0e32:	e79d      	b.n	80a0d70 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0e34:	685a      	ldr	r2, [r3, #4]
 80a0e36:	9e05      	ldr	r6, [sp, #20]
 80a0e38:	1b92      	subs	r2, r2, r6
 80a0e3a:	2a18      	cmp	r2, #24
 80a0e3c:	d9fa      	bls.n	80a0e34 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0e3e:	79e2      	ldrb	r2, [r4, #7]
 80a0e40:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0e44:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0e48:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0e4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0e50:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0e54:	6842      	ldr	r2, [r0, #4]
 80a0e56:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0e58:	685a      	ldr	r2, [r3, #4]
 80a0e5a:	9e05      	ldr	r6, [sp, #20]
 80a0e5c:	1b92      	subs	r2, r2, r6
 80a0e5e:	2a45      	cmp	r2, #69	; 0x45
 80a0e60:	d9fa      	bls.n	80a0e58 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0e62:	e7da      	b.n	80a0e1a <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0e64:	46ae      	mov	lr, r5
 80a0e66:	f7ff bbda 	b.w	80a061e <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0e6a:	4a1d      	ldr	r2, [pc, #116]	; (80a0ee0 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0e6c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0e70:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0e72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e76:	b29b      	uxth	r3, r3
 80a0e78:	2b00      	cmp	r3, #0
 80a0e7a:	f43f af6b 	beq.w	80a0d54 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0e7e:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0e80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e84:	f10e 0104 	add.w	r1, lr, #4
 80a0e88:	3b04      	subs	r3, #4
 80a0e8a:	b29b      	uxth	r3, r3
 80a0e8c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0e90:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e94:	b2db      	uxtb	r3, r3
 80a0e96:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0e9a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0e9e:	b2db      	uxtb	r3, r3
 80a0ea0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0ea4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0ea8:	b2db      	uxtb	r3, r3
 80a0eaa:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0eae:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0eb2:	b2db      	uxtb	r3, r3
 80a0eb4:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0ebc:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0ec0:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0ec4:	043f      	lsls	r7, r7, #16
 80a0ec6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0eca:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0ece:	4303      	orrs	r3, r0
 80a0ed0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0ed4:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0ed6:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0eda:	e07e      	b.n	80a0fda <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0edc:	e0001000 	.word	0xe0001000
 80a0ee0:	200001b0 	.word	0x200001b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ee4:	4600      	mov	r0, r0
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0f52:	79e3      	ldrb	r3, [r4, #7]
 80a0f54:	6810      	ldr	r0, [r2, #0]
 80a0f56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f5a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f5e:	88bf      	ldrh	r7, [r7, #4]
 80a0f60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f64:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f66:	4600      	mov	r0, r0
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0fc4:	9b04      	ldr	r3, [sp, #16]
 80a0fc6:	085b      	lsrs	r3, r3, #1
 80a0fc8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0fca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fce:	3301      	adds	r3, #1
 80a0fd0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0fd2:	2b1f      	cmp	r3, #31
 80a0fd4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0fd8:	d87e      	bhi.n	80a10d8 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0fda:	79e3      	ldrb	r3, [r4, #7]
 80a0fdc:	6810      	ldr	r0, [r2, #0]
 80a0fde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fe2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fe6:	88bf      	ldrh	r7, [r7, #4]
 80a0fe8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fec:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0fee:	9803      	ldr	r0, [sp, #12]
 80a0ff0:	9b04      	ldr	r3, [sp, #16]
 80a0ff2:	4218      	tst	r0, r3
 80a0ff4:	f47f af76 	bne.w	80a0ee4 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ff8:	4600      	mov	r0, r0
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1020:	79e3      	ldrb	r3, [r4, #7]
 80a1022:	6810      	ldr	r0, [r2, #0]
 80a1024:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1028:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a102c:	88bf      	ldrh	r7, [r7, #4]
 80a102e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1032:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1034:	4600      	mov	r0, r0
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	e775      	b.n	80a0fc4 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a10d8:	468e      	mov	lr, r1
 80a10da:	e6ca      	b.n	80a0e72 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a10dc:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a10de:	2903      	cmp	r1, #3
 80a10e0:	f000 812e 	beq.w	80a1340 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10e4:	4a1e      	ldr	r2, [pc, #120]	; (80a1160 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10e6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a10ea:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10f0:	b29b      	uxth	r3, r3
 80a10f2:	2b00      	cmp	r3, #0
 80a10f4:	f43f ae2e 	beq.w	80a0d54 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a10f8:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a10fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a10fe:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1100:	3b03      	subs	r3, #3
 80a1102:	b29b      	uxth	r3, r3
 80a1104:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1108:	f89e 3000 	ldrb.w	r3, [lr]
 80a110c:	f10e 0103 	add.w	r1, lr, #3
 80a1110:	b2db      	uxtb	r3, r3
 80a1112:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1116:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a111a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a111e:	b2db      	uxtb	r3, r3
 80a1120:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1124:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1128:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a112c:	b2db      	uxtb	r3, r3
 80a112e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1132:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1136:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a113a:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a113e:	021b      	lsls	r3, r3, #8
 80a1140:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1144:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1148:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a114c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1150:	433b      	orrs	r3, r7
 80a1152:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1154:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1158:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a115c:	e07d      	b.n	80a125a <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a115e:	bf00      	nop
 80a1160:	200001b0 	.word	0x200001b0
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1164:	9b04      	ldr	r3, [sp, #16]
 80a1166:	085b      	lsrs	r3, r3, #1
 80a1168:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a116a:	4600      	mov	r0, r0
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a11f0:	79e0      	ldrb	r0, [r4, #7]
 80a11f2:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a11f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a11f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a11fc:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1200:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1204:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1208:	3301      	adds	r3, #1
 80a120a:	b2db      	uxtb	r3, r3
 80a120c:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1210:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1214:	4600      	mov	r0, r0
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
          if(j==24) break;
 80a123e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1242:	2b18      	cmp	r3, #24
 80a1244:	d07a      	beq.n	80a133c <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1246:	79e3      	ldrb	r3, [r4, #7]
 80a1248:	6810      	ldr	r0, [r2, #0]
 80a124a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a124e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1252:	88bf      	ldrh	r7, [r7, #4]
 80a1254:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1258:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a125a:	9803      	ldr	r0, [sp, #12]
 80a125c:	9b04      	ldr	r3, [sp, #16]
 80a125e:	4218      	tst	r0, r3
 80a1260:	d180      	bne.n	80a1164 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1262:	4600      	mov	r0, r0
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1284:	79e3      	ldrb	r3, [r4, #7]
 80a1286:	6810      	ldr	r0, [r2, #0]
 80a1288:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a128c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1290:	88bf      	ldrh	r7, [r7, #4]
 80a1292:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1296:	831f      	strh	r7, [r3, #24]
          j++;
 80a1298:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a129c:	3301      	adds	r3, #1
 80a129e:	b2db      	uxtb	r3, r3
 80a12a0:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a12a4:	9b04      	ldr	r3, [sp, #16]
 80a12a6:	085b      	lsrs	r3, r3, #1
 80a12a8:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12aa:	4600      	mov	r0, r0
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
          if(j==24) break;
 80a1334:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1338:	2b18      	cmp	r3, #24
 80a133a:	d184      	bne.n	80a1246 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a133c:	468e      	mov	lr, r1
 80a133e:	e6d5      	b.n	80a10ec <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1340:	4a17      	ldr	r2, [pc, #92]	; (80a13a0 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1342:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1346:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a134c:	b29b      	uxth	r3, r3
 80a134e:	2b00      	cmp	r3, #0
 80a1350:	f43f ad00 	beq.w	80a0d54 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1354:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a135a:	f10e 0103 	add.w	r1, lr, #3
 80a135e:	3b03      	subs	r3, #3
 80a1360:	b29b      	uxth	r3, r3
 80a1362:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1366:	f89e 3000 	ldrb.w	r3, [lr]
 80a136a:	b2db      	uxtb	r3, r3
 80a136c:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1370:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1374:	b2db      	uxtb	r3, r3
 80a1376:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a137a:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a137e:	b2db      	uxtb	r3, r3
 80a1380:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1384:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1388:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a138c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1390:	021b      	lsls	r3, r3, #8
 80a1392:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1396:	4303      	orrs	r3, r0
 80a1398:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a139a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a139e:	e0e0      	b.n	80a1562 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a13a0:	200001b0 	.word	0x200001b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13a4:	4600      	mov	r0, r0
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a14c6:	79e3      	ldrb	r3, [r4, #7]
 80a14c8:	6810      	ldr	r0, [r2, #0]
 80a14ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14ce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14d2:	88bf      	ldrh	r7, [r7, #4]
 80a14d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14d8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14da:	4600      	mov	r0, r0
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a154a:	9b04      	ldr	r3, [sp, #16]
 80a154c:	085b      	lsrs	r3, r3, #1
 80a154e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1550:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1554:	3301      	adds	r3, #1
 80a1556:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1558:	2b17      	cmp	r3, #23
 80a155a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a155e:	f200 80e3 	bhi.w	80a1728 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a1562:	79e3      	ldrb	r3, [r4, #7]
 80a1564:	6810      	ldr	r0, [r2, #0]
 80a1566:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a156a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a156e:	88bf      	ldrh	r7, [r7, #4]
 80a1570:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1574:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1576:	9803      	ldr	r0, [sp, #12]
 80a1578:	9b04      	ldr	r3, [sp, #16]
 80a157a:	4218      	tst	r0, r3
 80a157c:	f47f af12 	bne.w	80a13a4 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1580:	4600      	mov	r0, r0
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1602:	79e3      	ldrb	r3, [r4, #7]
 80a1604:	6810      	ldr	r0, [r2, #0]
 80a1606:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a160a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a160e:	88bf      	ldrh	r7, [r7, #4]
 80a1610:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1614:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1616:	4600      	mov	r0, r0
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	e710      	b.n	80a154a <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1728:	468e      	mov	lr, r1
 80a172a:	e60d      	b.n	80a1348 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a172c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a172c:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a172e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1730:	428b      	cmp	r3, r1
 80a1732:	d945      	bls.n	80a17c0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1734:	7a05      	ldrb	r5, [r0, #8]
 80a1736:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a173a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a173e:	b2d6      	uxtb	r6, r2
 80a1740:	b145      	cbz	r5, 80a1754 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1742:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1744:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1746:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1748:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a174c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1750:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1754:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1758:	68c7      	ldr	r7, [r0, #12]
 80a175a:	f1bc 0f06 	cmp.w	ip, #6
 80a175e:	bf0c      	ite	eq
 80a1760:	2504      	moveq	r5, #4
 80a1762:	2503      	movne	r5, #3
 80a1764:	4369      	muls	r1, r5
 80a1766:	f1bc 0f08 	cmp.w	ip, #8
 80a176a:	eb07 0501 	add.w	r5, r7, r1
 80a176e:	d824      	bhi.n	80a17ba <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1770:	f04f 0e01 	mov.w	lr, #1
 80a1774:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1778:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a177c:	d10c      	bne.n	80a1798 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a177e:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1782:	d10d      	bne.n	80a17a0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1784:	f01e 0f10 	tst.w	lr, #16
 80a1788:	d017      	beq.n	80a17ba <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a178a:	2bff      	cmp	r3, #255	; 0xff
 80a178c:	bf08      	it	eq
 80a178e:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1790:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1792:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1794:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1798:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a179a:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a179c:	70ae      	strb	r6, [r5, #2]
        } break;
 80a179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a17a0:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a17a2:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a17a4:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a17a6:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a17a8:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a17aa:	b90b      	cbnz	r3, 80a17b0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a17ac:	b2d2      	uxtb	r2, r2
 80a17ae:	e002      	b.n	80a17b6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a17b0:	435a      	muls	r2, r3
 80a17b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a17b6:	70ea      	strb	r2, [r5, #3]
        } break;
 80a17b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a17ba:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a17bc:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a17be:	70ae      	strb	r6, [r5, #2]
 80a17c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a17c2 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a17c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a17c6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a17ca:	4770      	bx	lr

080a17cc <_ZN17Adafruit_NeoPixel5ColorEhhhh>:

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a17cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80a17d0:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
}
 80a17d4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a17d8:	4770      	bx	lr

080a17da <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a17da:	8840      	ldrh	r0, [r0, #2]
 80a17dc:	4770      	bx	lr

080a17de <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a17de:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a17e0:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a17e2:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a17e4:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a17e6:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a17e8:	d01e      	beq.n	80a1828 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a17ea:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a17ec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a17f0:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a17f2:	d00c      	beq.n	80a180e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a17f4:	29ff      	cmp	r1, #255	; 0xff
 80a17f6:	bf0f      	iteee	eq
 80a17f8:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a17fc:	0211      	lslne	r1, r2, #8
 80a17fe:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a1802:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1806:	bf0c      	ite	eq
 80a1808:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a180c:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a180e:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1810:	1b29      	subs	r1, r5, r4
 80a1812:	8886      	ldrh	r6, [r0, #4]
 80a1814:	b289      	uxth	r1, r1
 80a1816:	428e      	cmp	r6, r1
 80a1818:	d905      	bls.n	80a1826 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a181a:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a181c:	4359      	muls	r1, r3
 80a181e:	1209      	asrs	r1, r1, #8
 80a1820:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1824:	e7f4      	b.n	80a1810 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a1826:	7202      	strb	r2, [r0, #8]
 80a1828:	bd70      	pop	{r4, r5, r6, pc}
	...

080a182c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a182c:	b508      	push	{r3, lr}
 80a182e:	f000 f827 	bl	80a1880 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1832:	f000 f825 	bl	80a1880 <HAL_Pin_Map>
 80a1836:	4b01      	ldr	r3, [pc, #4]	; (80a183c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1838:	6018      	str	r0, [r3, #0]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	200001b0 	.word	0x200001b0

080a1840 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <os_mutex_create+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601d0 	.word	0x080601d0

080a1850 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <HAL_RNG_GetRandomNumber+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	685b      	ldr	r3, [r3, #4]
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	0806019c 	.word	0x0806019c

080a1860 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	691b      	ldr	r3, [r3, #16]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	0806019c 	.word	0x0806019c

080a1870 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	695b      	ldr	r3, [r3, #20]
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	0806019c 	.word	0x0806019c

080a1880 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <HAL_Pin_Map+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	681b      	ldr	r3, [r3, #0]
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601b0 	.word	0x080601b0

080a1890 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <HAL_Pin_Mode+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	689b      	ldr	r3, [r3, #8]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601b0 	.word	0x080601b0

080a18a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <HAL_Get_Pin_Mode+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	68db      	ldr	r3, [r3, #12]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601b0 	.word	0x080601b0

080a18b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <HAL_GPIO_Write+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	691b      	ldr	r3, [r3, #16]
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601b0 	.word	0x080601b0

080a18c0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <HAL_I2C_Write_Data+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601ac 	.word	0x080601ac

080a18d0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <HAL_I2C_Available_Data+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601ac 	.word	0x080601ac

080a18e0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <HAL_I2C_Read_Data+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080601ac 	.word	0x080601ac

080a18f0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <HAL_I2C_Peek_Data+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601ac 	.word	0x080601ac

080a1900 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <HAL_I2C_Flush_Data+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601ac 	.word	0x080601ac

080a1910 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <HAL_I2C_Is_Enabled+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601ac 	.word	0x080601ac

080a1920 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b03      	ldr	r3, [pc, #12]	; (80a1930 <HAL_I2C_Init+0x10>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a192a:	9301      	str	r3, [sp, #4]
 80a192c:	bd08      	pop	{r3, pc}
 80a192e:	0000      	.short	0x0000
 80a1930:	080601ac 	.word	0x080601ac

080a1934 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1934:	b508      	push	{r3, lr}
 80a1936:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <socket_handle_valid+0xc>)
 80a1938:	681b      	ldr	r3, [r3, #0]
 80a193a:	685b      	ldr	r3, [r3, #4]
 80a193c:	9301      	str	r3, [sp, #4]
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	080601bc 	.word	0x080601bc

080a1944 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1944:	b508      	push	{r3, lr}
 80a1946:	4b02      	ldr	r3, [pc, #8]	; (80a1950 <socket_create+0xc>)
 80a1948:	681b      	ldr	r3, [r3, #0]
 80a194a:	689b      	ldr	r3, [r3, #8]
 80a194c:	9301      	str	r3, [sp, #4]
 80a194e:	bd08      	pop	{r3, pc}
 80a1950:	080601bc 	.word	0x080601bc

080a1954 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b02      	ldr	r3, [pc, #8]	; (80a1960 <socket_receivefrom+0xc>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	695b      	ldr	r3, [r3, #20]
 80a195c:	9301      	str	r3, [sp, #4]
 80a195e:	bd08      	pop	{r3, pc}
 80a1960:	080601bc 	.word	0x080601bc

080a1964 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a1964:	b508      	push	{r3, lr}
 80a1966:	4b02      	ldr	r3, [pc, #8]	; (80a1970 <socket_sendto+0xc>)
 80a1968:	681b      	ldr	r3, [r3, #0]
 80a196a:	69db      	ldr	r3, [r3, #28]
 80a196c:	9301      	str	r3, [sp, #4]
 80a196e:	bd08      	pop	{r3, pc}
 80a1970:	080601bc 	.word	0x080601bc

080a1974 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <socket_close+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	6a1b      	ldr	r3, [r3, #32]
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601bc 	.word	0x080601bc

080a1984 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <socket_handle_invalid+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601bc 	.word	0x080601bc

080a1994 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <HAL_SPI_Init+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	69db      	ldr	r3, [r3, #28]
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601b4 	.word	0x080601b4

080a19a4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <HAL_SPI_Is_Enabled+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	6a1b      	ldr	r3, [r3, #32]
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601b4 	.word	0x080601b4

080a19b4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <HAL_USART_Init+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	699b      	ldr	r3, [r3, #24]
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601c4 	.word	0x080601c4

080a19c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <HAL_USART_Write_Data+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601c4 	.word	0x080601c4

080a19d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <HAL_USART_Available_Data+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601c4 	.word	0x080601c4

080a19e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <HAL_USART_Read_Data+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601c4 	.word	0x080601c4

080a19f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <HAL_USART_Peek_Data+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601c4 	.word	0x080601c4

080a1a04 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <HAL_USART_Flush_Data+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601c4 	.word	0x080601c4

080a1a14 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1a14:	b508      	push	{r3, lr}
 80a1a16:	4b02      	ldr	r3, [pc, #8]	; (80a1a20 <HAL_USART_Is_Enabled+0xc>)
 80a1a18:	681b      	ldr	r3, [r3, #0]
 80a1a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1a1c:	9301      	str	r3, [sp, #4]
 80a1a1e:	bd08      	pop	{r3, pc}
 80a1a20:	080601c4 	.word	0x080601c4

080a1a24 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1a24:	b508      	push	{r3, lr}
 80a1a26:	4b02      	ldr	r3, [pc, #8]	; (80a1a30 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1a2c:	9301      	str	r3, [sp, #4]
 80a1a2e:	bd08      	pop	{r3, pc}
 80a1a30:	080601c4 	.word	0x080601c4

080a1a34 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1a34:	b508      	push	{r3, lr}
 80a1a36:	4b02      	ldr	r3, [pc, #8]	; (80a1a40 <HAL_USB_USART_Init+0xc>)
 80a1a38:	681b      	ldr	r3, [r3, #0]
 80a1a3a:	681b      	ldr	r3, [r3, #0]
 80a1a3c:	9301      	str	r3, [sp, #4]
 80a1a3e:	bd08      	pop	{r3, pc}
 80a1a40:	080601d8 	.word	0x080601d8

080a1a44 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1a44:	b508      	push	{r3, lr}
 80a1a46:	4b02      	ldr	r3, [pc, #8]	; (80a1a50 <HAL_USB_USART_Begin+0xc>)
 80a1a48:	681b      	ldr	r3, [r3, #0]
 80a1a4a:	685b      	ldr	r3, [r3, #4]
 80a1a4c:	9301      	str	r3, [sp, #4]
 80a1a4e:	bd08      	pop	{r3, pc}
 80a1a50:	080601d8 	.word	0x080601d8

080a1a54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a54:	b508      	push	{r3, lr}
 80a1a56:	4b02      	ldr	r3, [pc, #8]	; (80a1a60 <HAL_USB_USART_Available_Data+0xc>)
 80a1a58:	681b      	ldr	r3, [r3, #0]
 80a1a5a:	691b      	ldr	r3, [r3, #16]
 80a1a5c:	9301      	str	r3, [sp, #4]
 80a1a5e:	bd08      	pop	{r3, pc}
 80a1a60:	080601d8 	.word	0x080601d8

080a1a64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1a64:	b508      	push	{r3, lr}
 80a1a66:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	695b      	ldr	r3, [r3, #20]
 80a1a6c:	9301      	str	r3, [sp, #4]
 80a1a6e:	bd08      	pop	{r3, pc}
 80a1a70:	080601d8 	.word	0x080601d8

080a1a74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <HAL_USB_USART_Receive_Data+0xc>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	699b      	ldr	r3, [r3, #24]
 80a1a7c:	9301      	str	r3, [sp, #4]
 80a1a7e:	bd08      	pop	{r3, pc}
 80a1a80:	080601d8 	.word	0x080601d8

080a1a84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a84:	b508      	push	{r3, lr}
 80a1a86:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <HAL_USB_USART_Send_Data+0xc>)
 80a1a88:	681b      	ldr	r3, [r3, #0]
 80a1a8a:	69db      	ldr	r3, [r3, #28]
 80a1a8c:	9301      	str	r3, [sp, #4]
 80a1a8e:	bd08      	pop	{r3, pc}
 80a1a90:	080601d8 	.word	0x080601d8

080a1a94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a94:	b508      	push	{r3, lr}
 80a1a96:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <HAL_USB_USART_Flush_Data+0xc>)
 80a1a98:	681b      	ldr	r3, [r3, #0]
 80a1a9a:	6a1b      	ldr	r3, [r3, #32]
 80a1a9c:	9301      	str	r3, [sp, #4]
 80a1a9e:	bd08      	pop	{r3, pc}
 80a1aa0:	080601d8 	.word	0x080601d8

080a1aa4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1aa4:	b508      	push	{r3, lr}
 80a1aa6:	4b02      	ldr	r3, [pc, #8]	; (80a1ab0 <HAL_USB_USART_Is_Enabled+0xc>)
 80a1aa8:	681b      	ldr	r3, [r3, #0]
 80a1aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1aac:	9301      	str	r3, [sp, #4]
 80a1aae:	bd08      	pop	{r3, pc}
 80a1ab0:	080601d8 	.word	0x080601d8

080a1ab4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1ab4:	b508      	push	{r3, lr}
 80a1ab6:	4b02      	ldr	r3, [pc, #8]	; (80a1ac0 <inet_gethostbyname+0xc>)
 80a1ab8:	681b      	ldr	r3, [r3, #0]
 80a1aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1abc:	9301      	str	r3, [sp, #4]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	080601c0 	.word	0x080601c0

080a1ac4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1ac4:	b508      	push	{r3, lr}
 80a1ac6:	4b02      	ldr	r3, [pc, #8]	; (80a1ad0 <set_system_mode+0xc>)
 80a1ac8:	681b      	ldr	r3, [r3, #0]
 80a1aca:	685b      	ldr	r3, [r3, #4]
 80a1acc:	9301      	str	r3, [sp, #4]
 80a1ace:	bd08      	pop	{r3, pc}
 80a1ad0:	080601a4 	.word	0x080601a4

080a1ad4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1ad4:	b508      	push	{r3, lr}
 80a1ad6:	4b02      	ldr	r3, [pc, #8]	; (80a1ae0 <system_delay_ms+0xc>)
 80a1ad8:	681b      	ldr	r3, [r3, #0]
 80a1ada:	695b      	ldr	r3, [r3, #20]
 80a1adc:	9301      	str	r3, [sp, #4]
 80a1ade:	bd08      	pop	{r3, pc}
 80a1ae0:	080601a4 	.word	0x080601a4

080a1ae4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1ae4:	b508      	push	{r3, lr}
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <system_thread_set_state+0xc>)
 80a1ae8:	681b      	ldr	r3, [r3, #0]
 80a1aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	bd08      	pop	{r3, pc}
 80a1af0:	080601a4 	.word	0x080601a4

080a1af4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1af4:	b508      	push	{r3, lr}
 80a1af6:	4b03      	ldr	r3, [pc, #12]	; (80a1b04 <system_ctrl_set_app_request_handler+0x10>)
 80a1af8:	681b      	ldr	r3, [r3, #0]
 80a1afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1afe:	9301      	str	r3, [sp, #4]
 80a1b00:	bd08      	pop	{r3, pc}
 80a1b02:	0000      	.short	0x0000
 80a1b04:	080601a4 	.word	0x080601a4

080a1b08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1b08:	b508      	push	{r3, lr}
 80a1b0a:	4b03      	ldr	r3, [pc, #12]	; (80a1b18 <system_ctrl_set_result+0x10>)
 80a1b0c:	681b      	ldr	r3, [r3, #0]
 80a1b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1b12:	9301      	str	r3, [sp, #4]
 80a1b14:	bd08      	pop	{r3, pc}
 80a1b16:	0000      	.short	0x0000
 80a1b18:	080601a4 	.word	0x080601a4

080a1b1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1b1c:	b508      	push	{r3, lr}
 80a1b1e:	4b02      	ldr	r3, [pc, #8]	; (80a1b28 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1b20:	681b      	ldr	r3, [r3, #0]
 80a1b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1b24:	9301      	str	r3, [sp, #4]
 80a1b26:	bd08      	pop	{r3, pc}
 80a1b28:	080601cc 	.word	0x080601cc

080a1b2c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a1b2c:	b508      	push	{r3, lr}
 80a1b2e:	4b02      	ldr	r3, [pc, #8]	; (80a1b38 <network_config+0xc>)
 80a1b30:	681b      	ldr	r3, [r3, #0]
 80a1b32:	681b      	ldr	r3, [r3, #0]
 80a1b34:	9301      	str	r3, [sp, #4]
 80a1b36:	bd08      	pop	{r3, pc}
 80a1b38:	080601c8 	.word	0x080601c8

080a1b3c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b3c:	b508      	push	{r3, lr}
 80a1b3e:	4b02      	ldr	r3, [pc, #8]	; (80a1b48 <network_connect+0xc>)
 80a1b40:	681b      	ldr	r3, [r3, #0]
 80a1b42:	685b      	ldr	r3, [r3, #4]
 80a1b44:	9301      	str	r3, [sp, #4]
 80a1b46:	bd08      	pop	{r3, pc}
 80a1b48:	080601c8 	.word	0x080601c8

080a1b4c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1b4c:	b508      	push	{r3, lr}
 80a1b4e:	4b02      	ldr	r3, [pc, #8]	; (80a1b58 <network_connecting+0xc>)
 80a1b50:	681b      	ldr	r3, [r3, #0]
 80a1b52:	689b      	ldr	r3, [r3, #8]
 80a1b54:	9301      	str	r3, [sp, #4]
 80a1b56:	bd08      	pop	{r3, pc}
 80a1b58:	080601c8 	.word	0x080601c8

080a1b5c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1b5c:	b508      	push	{r3, lr}
 80a1b5e:	4b02      	ldr	r3, [pc, #8]	; (80a1b68 <network_disconnect+0xc>)
 80a1b60:	681b      	ldr	r3, [r3, #0]
 80a1b62:	68db      	ldr	r3, [r3, #12]
 80a1b64:	9301      	str	r3, [sp, #4]
 80a1b66:	bd08      	pop	{r3, pc}
 80a1b68:	080601c8 	.word	0x080601c8

080a1b6c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1b6c:	b508      	push	{r3, lr}
 80a1b6e:	4b02      	ldr	r3, [pc, #8]	; (80a1b78 <network_ready+0xc>)
 80a1b70:	681b      	ldr	r3, [r3, #0]
 80a1b72:	691b      	ldr	r3, [r3, #16]
 80a1b74:	9301      	str	r3, [sp, #4]
 80a1b76:	bd08      	pop	{r3, pc}
 80a1b78:	080601c8 	.word	0x080601c8

080a1b7c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b7c:	b508      	push	{r3, lr}
 80a1b7e:	4b02      	ldr	r3, [pc, #8]	; (80a1b88 <network_on+0xc>)
 80a1b80:	681b      	ldr	r3, [r3, #0]
 80a1b82:	695b      	ldr	r3, [r3, #20]
 80a1b84:	9301      	str	r3, [sp, #4]
 80a1b86:	bd08      	pop	{r3, pc}
 80a1b88:	080601c8 	.word	0x080601c8

080a1b8c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b8c:	b508      	push	{r3, lr}
 80a1b8e:	4b02      	ldr	r3, [pc, #8]	; (80a1b98 <network_off+0xc>)
 80a1b90:	681b      	ldr	r3, [r3, #0]
 80a1b92:	699b      	ldr	r3, [r3, #24]
 80a1b94:	9301      	str	r3, [sp, #4]
 80a1b96:	bd08      	pop	{r3, pc}
 80a1b98:	080601c8 	.word	0x080601c8

080a1b9c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1b9c:	b508      	push	{r3, lr}
 80a1b9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ba8 <network_listen+0xc>)
 80a1ba0:	681b      	ldr	r3, [r3, #0]
 80a1ba2:	69db      	ldr	r3, [r3, #28]
 80a1ba4:	9301      	str	r3, [sp, #4]
 80a1ba6:	bd08      	pop	{r3, pc}
 80a1ba8:	080601c8 	.word	0x080601c8

080a1bac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1bac:	b508      	push	{r3, lr}
 80a1bae:	4b02      	ldr	r3, [pc, #8]	; (80a1bb8 <network_listening+0xc>)
 80a1bb0:	681b      	ldr	r3, [r3, #0]
 80a1bb2:	6a1b      	ldr	r3, [r3, #32]
 80a1bb4:	9301      	str	r3, [sp, #4]
 80a1bb6:	bd08      	pop	{r3, pc}
 80a1bb8:	080601c8 	.word	0x080601c8

080a1bbc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1bbc:	b508      	push	{r3, lr}
 80a1bbe:	4b02      	ldr	r3, [pc, #8]	; (80a1bc8 <network_set_listen_timeout+0xc>)
 80a1bc0:	681b      	ldr	r3, [r3, #0]
 80a1bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1bc4:	9301      	str	r3, [sp, #4]
 80a1bc6:	bd08      	pop	{r3, pc}
 80a1bc8:	080601c8 	.word	0x080601c8

080a1bcc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1bcc:	b508      	push	{r3, lr}
 80a1bce:	4b02      	ldr	r3, [pc, #8]	; (80a1bd8 <network_get_listen_timeout+0xc>)
 80a1bd0:	681b      	ldr	r3, [r3, #0]
 80a1bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1bd4:	9301      	str	r3, [sp, #4]
 80a1bd6:	bd08      	pop	{r3, pc}
 80a1bd8:	080601c8 	.word	0x080601c8

080a1bdc <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1bdc:	b508      	push	{r3, lr}
 80a1bde:	4b02      	ldr	r3, [pc, #8]	; (80a1be8 <network_set_hostname+0xc>)
 80a1be0:	681b      	ldr	r3, [r3, #0]
 80a1be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1be4:	9301      	str	r3, [sp, #4]
 80a1be6:	bd08      	pop	{r3, pc}
 80a1be8:	080601c8 	.word	0x080601c8

080a1bec <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1bec:	b508      	push	{r3, lr}
 80a1bee:	4b02      	ldr	r3, [pc, #8]	; (80a1bf8 <network_get_hostname+0xc>)
 80a1bf0:	681b      	ldr	r3, [r3, #0]
 80a1bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1bf4:	9301      	str	r3, [sp, #4]
 80a1bf6:	bd08      	pop	{r3, pc}
 80a1bf8:	080601c8 	.word	0x080601c8

080a1bfc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1bfc:	b508      	push	{r3, lr}
 80a1bfe:	4b02      	ldr	r3, [pc, #8]	; (80a1c08 <malloc+0xc>)
 80a1c00:	681b      	ldr	r3, [r3, #0]
 80a1c02:	681b      	ldr	r3, [r3, #0]
 80a1c04:	9301      	str	r3, [sp, #4]
 80a1c06:	bd08      	pop	{r3, pc}
 80a1c08:	080601a0 	.word	0x080601a0

080a1c0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1c0c:	b508      	push	{r3, lr}
 80a1c0e:	4b02      	ldr	r3, [pc, #8]	; (80a1c18 <free+0xc>)
 80a1c10:	681b      	ldr	r3, [r3, #0]
 80a1c12:	685b      	ldr	r3, [r3, #4]
 80a1c14:	9301      	str	r3, [sp, #4]
 80a1c16:	bd08      	pop	{r3, pc}
 80a1c18:	080601a0 	.word	0x080601a0

080a1c1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1c1c:	b508      	push	{r3, lr}
 80a1c1e:	4b02      	ldr	r3, [pc, #8]	; (80a1c28 <realloc+0xc>)
 80a1c20:	681b      	ldr	r3, [r3, #0]
 80a1c22:	689b      	ldr	r3, [r3, #8]
 80a1c24:	9301      	str	r3, [sp, #4]
 80a1c26:	bd08      	pop	{r3, pc}
 80a1c28:	080601a0 	.word	0x080601a0

080a1c2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1c2c:	2100      	movs	r1, #0
 80a1c2e:	f7ff bf51 	b.w	80a1ad4 <system_delay_ms>

080a1c32 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1c32:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1c34:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1c36:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1c38:	b113      	cbz	r3, 80a1c40 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1c3a:	2203      	movs	r2, #3
 80a1c3c:	4601      	mov	r1, r0
 80a1c3e:	4798      	blx	r3
    }
 80a1c40:	4620      	mov	r0, r4
 80a1c42:	bd10      	pop	{r4, pc}

080a1c44 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1c44:	4770      	bx	lr

080a1c46 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c48:	4606      	mov	r6, r0
 80a1c4a:	4615      	mov	r5, r2
 80a1c4c:	460c      	mov	r4, r1
 80a1c4e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1c50:	42bc      	cmp	r4, r7
 80a1c52:	d006      	beq.n	80a1c62 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1c54:	6833      	ldr	r3, [r6, #0]
 80a1c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1c5a:	689b      	ldr	r3, [r3, #8]
 80a1c5c:	4630      	mov	r0, r6
 80a1c5e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1c60:	e7f6      	b.n	80a1c50 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1c62:	4628      	mov	r0, r5
 80a1c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c66 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1c66:	2200      	movs	r2, #0
 80a1c68:	7c00      	ldrb	r0, [r0, #16]
 80a1c6a:	f7ff be29 	b.w	80a18c0 <HAL_I2C_Write_Data>

080a1c6e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1c6e:	2100      	movs	r1, #0
 80a1c70:	7c00      	ldrb	r0, [r0, #16]
 80a1c72:	f7ff be2d 	b.w	80a18d0 <HAL_I2C_Available_Data>

080a1c76 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1c76:	2100      	movs	r1, #0
 80a1c78:	7c00      	ldrb	r0, [r0, #16]
 80a1c7a:	f7ff be31 	b.w	80a18e0 <HAL_I2C_Read_Data>

080a1c7e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1c7e:	2100      	movs	r1, #0
 80a1c80:	7c00      	ldrb	r0, [r0, #16]
 80a1c82:	f7ff be35 	b.w	80a18f0 <HAL_I2C_Peek_Data>

080a1c86 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1c86:	2100      	movs	r1, #0
 80a1c88:	7c00      	ldrb	r0, [r0, #16]
 80a1c8a:	f7ff be39 	b.w	80a1900 <HAL_I2C_Flush_Data>

080a1c8e <_ZN7TwoWireD0Ev>:
 80a1c8e:	b510      	push	{r4, lr}
 80a1c90:	4604      	mov	r4, r0
 80a1c92:	2114      	movs	r1, #20
 80a1c94:	f000 ff1f 	bl	80a2ad6 <_ZdlPvj>
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	bd10      	pop	{r4, pc}

080a1c9c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1c9c:	b510      	push	{r4, lr}
 80a1c9e:	4604      	mov	r4, r0
 80a1ca0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1ca6:	60a3      	str	r3, [r4, #8]
 80a1ca8:	4b04      	ldr	r3, [pc, #16]	; (80a1cbc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1caa:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1cac:	7420      	strb	r0, [r4, #16]
 80a1cae:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1cb0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1cb2:	f7ff fe35 	bl	80a1920 <HAL_I2C_Init>

}
 80a1cb6:	4620      	mov	r0, r4
 80a1cb8:	bd10      	pop	{r4, pc}
 80a1cba:	bf00      	nop
 80a1cbc:	080a35f0 	.word	0x080a35f0

080a1cc0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1cc0:	2100      	movs	r1, #0
 80a1cc2:	7c00      	ldrb	r0, [r0, #16]
 80a1cc4:	f7ff be24 	b.w	80a1910 <HAL_I2C_Is_Enabled>

080a1cc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cca:	460f      	mov	r7, r1
 80a1ccc:	f100 0608 	add.w	r6, r0, #8
 80a1cd0:	1d05      	adds	r5, r0, #4
 80a1cd2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1cd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1cd8:	220a      	movs	r2, #10
 80a1cda:	4638      	mov	r0, r7
 80a1cdc:	f000 f94f 	bl	80a1f7e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ce0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1ce2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ce4:	d007      	beq.n	80a1cf6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1ce6:	2c00      	cmp	r4, #0
 80a1ce8:	d0f4      	beq.n	80a1cd4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1cea:	212e      	movs	r1, #46	; 0x2e
 80a1cec:	4638      	mov	r0, r7
 80a1cee:	f000 f8f3 	bl	80a1ed8 <_ZN5Print5printEc>
 80a1cf2:	4404      	add	r4, r0
 80a1cf4:	e7ee      	b.n	80a1cd4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1cf6:	4620      	mov	r0, r4
 80a1cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1cfc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1cfc:	b510      	push	{r4, lr}
 80a1cfe:	4604      	mov	r4, r0
 80a1d00:	4b04      	ldr	r3, [pc, #16]	; (80a1d14 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1d02:	2211      	movs	r2, #17
 80a1d04:	f840 3b04 	str.w	r3, [r0], #4
 80a1d08:	2100      	movs	r1, #0
 80a1d0a:	f001 fb42 	bl	80a3392 <memset>
{
    clear();
}
 80a1d0e:	4620      	mov	r0, r4
 80a1d10:	bd10      	pop	{r4, pc}
 80a1d12:	bf00      	nop
 80a1d14:	080a3618 	.word	0x080a3618

080a1d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1d18:	4603      	mov	r3, r0
 80a1d1a:	4a07      	ldr	r2, [pc, #28]	; (80a1d38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1d1c:	b510      	push	{r4, lr}
 80a1d1e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1d22:	f101 0210 	add.w	r2, r1, #16
 80a1d26:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1d2a:	4291      	cmp	r1, r2
 80a1d2c:	f843 4b04 	str.w	r4, [r3], #4
 80a1d30:	d1f9      	bne.n	80a1d26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1d32:	780a      	ldrb	r2, [r1, #0]
 80a1d34:	701a      	strb	r2, [r3, #0]
}
 80a1d36:	bd10      	pop	{r4, pc}
 80a1d38:	080a3618 	.word	0x080a3618

080a1d3c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d3c:	4a02      	ldr	r2, [pc, #8]	; (80a1d48 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1d3e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d40:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1d42:	2204      	movs	r2, #4
 80a1d44:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1d46:	4770      	bx	lr
 80a1d48:	080a3618 	.word	0x080a3618

080a1d4c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1d4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1d4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1d52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1d56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1d5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1d5e:	2304      	movs	r3, #4
 80a1d60:	6041      	str	r1, [r0, #4]
 80a1d62:	7503      	strb	r3, [r0, #20]
 80a1d64:	bd10      	pop	{r4, pc}
	...

080a1d68 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d6a:	4d04      	ldr	r5, [pc, #16]	; (80a1d7c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1d6c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1d6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1d72:	9500      	str	r5, [sp, #0]
 80a1d74:	f7ff ffea 	bl	80a1d4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1d78:	b003      	add	sp, #12
 80a1d7a:	bd30      	pop	{r4, r5, pc}
 80a1d7c:	080a3618 	.word	0x080a3618

080a1d80 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1d82:	780d      	ldrb	r5, [r1, #0]
 80a1d84:	788b      	ldrb	r3, [r1, #2]
 80a1d86:	784a      	ldrb	r2, [r1, #1]
 80a1d88:	78c9      	ldrb	r1, [r1, #3]
 80a1d8a:	9100      	str	r1, [sp, #0]
 80a1d8c:	4629      	mov	r1, r5
 80a1d8e:	f7ff ffdd 	bl	80a1d4c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1d92:	b003      	add	sp, #12
 80a1d94:	bd30      	pop	{r4, r5, pc}
	...

080a1d98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1d98:	4a01      	ldr	r2, [pc, #4]	; (80a1da0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1d9a:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1d9c:	601a      	str	r2, [r3, #0]
 80a1d9e:	4770      	bx	lr
 80a1da0:	080a369a 	.word	0x080a369a
 80a1da4:	200001b4 	.word	0x200001b4

080a1da8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1da8:	2300      	movs	r3, #0
 80a1daa:	461a      	mov	r2, r3
 80a1dac:	6840      	ldr	r0, [r0, #4]
 80a1dae:	f7ff bec5 	b.w	80a1b3c <network_connect>

080a1db2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1db2:	2200      	movs	r2, #0
 80a1db4:	2102      	movs	r1, #2
 80a1db6:	6840      	ldr	r0, [r0, #4]
 80a1db8:	f7ff bed0 	b.w	80a1b5c <network_disconnect>

080a1dbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1dbc:	2200      	movs	r2, #0
 80a1dbe:	4611      	mov	r1, r2
 80a1dc0:	6840      	ldr	r0, [r0, #4]
 80a1dc2:	f7ff bec3 	b.w	80a1b4c <network_connecting>

080a1dc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1dc6:	2200      	movs	r2, #0
 80a1dc8:	4611      	mov	r1, r2
 80a1dca:	6840      	ldr	r0, [r0, #4]
 80a1dcc:	f7ff bece 	b.w	80a1b6c <network_ready>

080a1dd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1dd0:	2300      	movs	r3, #0
 80a1dd2:	461a      	mov	r2, r3
 80a1dd4:	4619      	mov	r1, r3
 80a1dd6:	6840      	ldr	r0, [r0, #4]
 80a1dd8:	f7ff bed0 	b.w	80a1b7c <network_on>

080a1ddc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1ddc:	2300      	movs	r3, #0
 80a1dde:	461a      	mov	r2, r3
 80a1de0:	4619      	mov	r1, r3
 80a1de2:	6840      	ldr	r0, [r0, #4]
 80a1de4:	f7ff bed2 	b.w	80a1b8c <network_off>

080a1de8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1de8:	2200      	movs	r2, #0
 80a1dea:	f081 0101 	eor.w	r1, r1, #1
 80a1dee:	6840      	ldr	r0, [r0, #4]
 80a1df0:	f7ff bed4 	b.w	80a1b9c <network_listen>

080a1df4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1df4:	2200      	movs	r2, #0
 80a1df6:	6840      	ldr	r0, [r0, #4]
 80a1df8:	f7ff bee0 	b.w	80a1bbc <network_set_listen_timeout>

080a1dfc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1dfc:	2200      	movs	r2, #0
 80a1dfe:	4611      	mov	r1, r2
 80a1e00:	6840      	ldr	r0, [r0, #4]
 80a1e02:	f7ff bee3 	b.w	80a1bcc <network_get_listen_timeout>

080a1e06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1e06:	2200      	movs	r2, #0
 80a1e08:	4611      	mov	r1, r2
 80a1e0a:	6840      	ldr	r0, [r0, #4]
 80a1e0c:	f7ff bece 	b.w	80a1bac <network_listening>

080a1e10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1e10:	b570      	push	{r4, r5, r6, lr}
 80a1e12:	4616      	mov	r6, r2
 80a1e14:	b08e      	sub	sp, #56	; 0x38
 80a1e16:	4604      	mov	r4, r0
    IPAddress addr;
 80a1e18:	a808      	add	r0, sp, #32
 80a1e1a:	f7ff ff6f 	bl	80a1cfc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1e1e:	2211      	movs	r2, #17
 80a1e20:	2100      	movs	r1, #0
 80a1e22:	a803      	add	r0, sp, #12
 80a1e24:	f001 fab5 	bl	80a3392 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1e28:	4630      	mov	r0, r6
 80a1e2a:	f001 fae3 	bl	80a33f4 <strlen>
 80a1e2e:	2500      	movs	r5, #0
 80a1e30:	4b0a      	ldr	r3, [pc, #40]	; (80a1e5c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1e32:	9500      	str	r5, [sp, #0]
 80a1e34:	b281      	uxth	r1, r0
 80a1e36:	685b      	ldr	r3, [r3, #4]
 80a1e38:	aa03      	add	r2, sp, #12
 80a1e3a:	4630      	mov	r0, r6
 80a1e3c:	f7ff fe3a 	bl	80a1ab4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1e40:	b120      	cbz	r0, 80a1e4c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1e42:	4629      	mov	r1, r5
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	f7ff ff79 	bl	80a1d3c <_ZN9IPAddressC1Em>
 80a1e4a:	e003      	b.n	80a1e54 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1e4c:	a903      	add	r1, sp, #12
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	f7ff ff62 	bl	80a1d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1e54:	4620      	mov	r0, r4
 80a1e56:	b00e      	add	sp, #56	; 0x38
 80a1e58:	bd70      	pop	{r4, r5, r6, pc}
 80a1e5a:	bf00      	nop
 80a1e5c:	20000638 	.word	0x20000638

080a1e60 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1e60:	4b03      	ldr	r3, [pc, #12]	; (80a1e70 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1e62:	4a04      	ldr	r2, [pc, #16]	; (80a1e74 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1e64:	2804      	cmp	r0, #4
 80a1e66:	bf0c      	ite	eq
 80a1e68:	4610      	moveq	r0, r2
 80a1e6a:	4618      	movne	r0, r3
 80a1e6c:	4770      	bx	lr
 80a1e6e:	bf00      	nop
 80a1e70:	200001b8 	.word	0x200001b8
 80a1e74:	20000638 	.word	0x20000638

080a1e78 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1e78:	4b02      	ldr	r3, [pc, #8]	; (80a1e84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1e7a:	4a03      	ldr	r2, [pc, #12]	; (80a1e88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1e7c:	601a      	str	r2, [r3, #0]
 80a1e7e:	2200      	movs	r2, #0
 80a1e80:	605a      	str	r2, [r3, #4]
 80a1e82:	4770      	bx	lr
 80a1e84:	200001b8 	.word	0x200001b8
 80a1e88:	080a3710 	.word	0x080a3710

080a1e8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e8e:	4606      	mov	r6, r0
 80a1e90:	460d      	mov	r5, r1
 80a1e92:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1e94:	2400      	movs	r4, #0
  while (size--) {
 80a1e96:	42bd      	cmp	r5, r7
 80a1e98:	d00c      	beq.n	80a1eb4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1e9a:	6833      	ldr	r3, [r6, #0]
 80a1e9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1ea0:	689b      	ldr	r3, [r3, #8]
 80a1ea2:	4630      	mov	r0, r6
 80a1ea4:	4798      	blx	r3
     if (chunk>=0)
 80a1ea6:	2800      	cmp	r0, #0
 80a1ea8:	db01      	blt.n	80a1eae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1eaa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1eac:	e7f3      	b.n	80a1e96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1eae:	2c00      	cmp	r4, #0
 80a1eb0:	bf08      	it	eq
 80a1eb2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1eb4:	4620      	mov	r0, r4
 80a1eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1eb8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1eb8:	b570      	push	{r4, r5, r6, lr}
 80a1eba:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1ebc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1ebe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1ec0:	b149      	cbz	r1, 80a1ed6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1ec2:	f001 fa97 	bl	80a33f4 <strlen>
 80a1ec6:	682b      	ldr	r3, [r5, #0]
 80a1ec8:	4602      	mov	r2, r0
 80a1eca:	4621      	mov	r1, r4
 80a1ecc:	4628      	mov	r0, r5
    }
 80a1ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1ed2:	68db      	ldr	r3, [r3, #12]
 80a1ed4:	4718      	bx	r3
    }
 80a1ed6:	bd70      	pop	{r4, r5, r6, pc}

080a1ed8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1ed8:	6803      	ldr	r3, [r0, #0]
 80a1eda:	689b      	ldr	r3, [r3, #8]
 80a1edc:	4718      	bx	r3

080a1ede <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a1ede:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a1ee0:	680a      	ldr	r2, [r1, #0]
 80a1ee2:	4601      	mov	r1, r0
 80a1ee4:	6812      	ldr	r2, [r2, #0]
 80a1ee6:	4618      	mov	r0, r3
 80a1ee8:	4710      	bx	r2

080a1eea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1eea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1eec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1eee:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1ef0:	f7ff fff2 	bl	80a1ed8 <_ZN5Print5printEc>
  n += print('\n');
 80a1ef4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1ef6:	4604      	mov	r4, r0
  n += print('\n');
 80a1ef8:	4628      	mov	r0, r5
 80a1efa:	f7ff ffed 	bl	80a1ed8 <_ZN5Print5printEc>
  return n;
}
 80a1efe:	4420      	add	r0, r4
 80a1f00:	bd38      	pop	{r3, r4, r5, pc}

080a1f02 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1f02:	b538      	push	{r3, r4, r5, lr}
 80a1f04:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f06:	f7ff ffd7 	bl	80a1eb8 <_ZN5Print5writeEPKc>
 80a1f0a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1f0c:	4628      	mov	r0, r5
 80a1f0e:	f7ff ffec 	bl	80a1eea <_ZN5Print7printlnEv>
  return n;
}
 80a1f12:	4420      	add	r0, r4
 80a1f14:	bd38      	pop	{r3, r4, r5, pc}

080a1f16 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a1f16:	b538      	push	{r3, r4, r5, lr}
 80a1f18:	4605      	mov	r5, r0
   size_t n = print(x);
 80a1f1a:	f7ff ffe0 	bl	80a1ede <_ZN5Print5printERK9Printable>
 80a1f1e:	4604      	mov	r4, r0
   n += println();
 80a1f20:	4628      	mov	r0, r5
 80a1f22:	f7ff ffe2 	bl	80a1eea <_ZN5Print7printlnEv>
   return n;
 }
 80a1f26:	4420      	add	r0, r4
 80a1f28:	bd38      	pop	{r3, r4, r5, pc}

080a1f2a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1f2a:	2a01      	cmp	r2, #1
 80a1f2c:	bf98      	it	ls
 80a1f2e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1f30:	b530      	push	{r4, r5, lr}
 80a1f32:	460b      	mov	r3, r1
 80a1f34:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1f36:	2100      	movs	r1, #0
 80a1f38:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1f3c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1f40:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1f44:	fb05 3312 	mls	r3, r5, r2, r3
 80a1f48:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1f4a:	2b09      	cmp	r3, #9
 80a1f4c:	bf94      	ite	ls
 80a1f4e:	3330      	addls	r3, #48	; 0x30
 80a1f50:	3337      	addhi	r3, #55	; 0x37
 80a1f52:	b2db      	uxtb	r3, r3
 80a1f54:	4621      	mov	r1, r4
 80a1f56:	f804 3901 	strb.w	r3, [r4], #-1
 80a1f5a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1f5c:	2d00      	cmp	r5, #0
 80a1f5e:	d1ef      	bne.n	80a1f40 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1f60:	f7ff ffaa 	bl	80a1eb8 <_ZN5Print5writeEPKc>
}
 80a1f64:	b00b      	add	sp, #44	; 0x2c
 80a1f66:	bd30      	pop	{r4, r5, pc}

080a1f68 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1f68:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1f6a:	b922      	cbnz	r2, 80a1f76 <_ZN5Print5printEmi+0xe>
 80a1f6c:	6803      	ldr	r3, [r0, #0]
 80a1f6e:	b2c9      	uxtb	r1, r1
 80a1f70:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1f72:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1f74:	4718      	bx	r3
  else return printNumber(n, base);
 80a1f76:	b2d2      	uxtb	r2, r2
}
 80a1f78:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f7a:	f7ff bfd6 	b.w	80a1f2a <_ZN5Print11printNumberEmh>

080a1f7e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1f7e:	f7ff bff3 	b.w	80a1f68 <_ZN5Print5printEmi>

080a1f82 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1f82:	b510      	push	{r4, lr}
 80a1f84:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f86:	f7ff fe54 	bl	80a1c32 <_ZNSt14_Function_baseD1Ev>
 80a1f8a:	4620      	mov	r0, r4
 80a1f8c:	bd10      	pop	{r4, pc}
	...

080a1f90 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f90:	4803      	ldr	r0, [pc, #12]	; (80a1fa0 <_GLOBAL__sub_I_RGB+0x10>)
 80a1f92:	2300      	movs	r3, #0
 80a1f94:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1f96:	4a03      	ldr	r2, [pc, #12]	; (80a1fa4 <_GLOBAL__sub_I_RGB+0x14>)
 80a1f98:	4903      	ldr	r1, [pc, #12]	; (80a1fa8 <_GLOBAL__sub_I_RGB+0x18>)
 80a1f9a:	f000 bd97 	b.w	80a2acc <__aeabi_atexit>
 80a1f9e:	bf00      	nop
 80a1fa0:	200001c0 	.word	0x200001c0
 80a1fa4:	20000084 	.word	0x20000084
 80a1fa8:	080a1f83 	.word	0x080a1f83

080a1fac <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1fac:	4770      	bx	lr

080a1fae <_ZN8SPIClassD0Ev>:
 80a1fae:	b510      	push	{r4, lr}
 80a1fb0:	4604      	mov	r4, r0
 80a1fb2:	2110      	movs	r1, #16
 80a1fb4:	f000 fd8f 	bl	80a2ad6 <_ZdlPvj>
 80a1fb8:	4620      	mov	r0, r4
 80a1fba:	bd10      	pop	{r4, pc}

080a1fbc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1fbc:	b570      	push	{r4, r5, r6, lr}
 80a1fbe:	4604      	mov	r4, r0
 80a1fc0:	460e      	mov	r6, r1
 80a1fc2:	4b07      	ldr	r3, [pc, #28]	; (80a1fe0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1fc4:	2500      	movs	r5, #0
 80a1fc6:	6003      	str	r3, [r0, #0]
 80a1fc8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1fcc:	f7ff fc38 	bl	80a1840 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1fd0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1fd2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1fd4:	f7ff fcde 	bl	80a1994 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1fd8:	60a5      	str	r5, [r4, #8]
}
 80a1fda:	4620      	mov	r0, r4
 80a1fdc:	bd70      	pop	{r4, r5, r6, pc}
 80a1fde:	bf00      	nop
 80a1fe0:	080a3744 	.word	0x080a3744

080a1fe4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1fe4:	7900      	ldrb	r0, [r0, #4]
 80a1fe6:	f7ff bcdd 	b.w	80a19a4 <HAL_SPI_Is_Enabled>

080a1fea <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1fea:	b510      	push	{r4, lr}
 80a1fec:	4604      	mov	r4, r0
{
	free(buffer);
 80a1fee:	6800      	ldr	r0, [r0, #0]
 80a1ff0:	f7ff fe0c 	bl	80a1c0c <free>
}
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	bd10      	pop	{r4, pc}

080a1ff8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1ff8:	b510      	push	{r4, lr}
 80a1ffa:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1ffc:	6800      	ldr	r0, [r0, #0]
 80a1ffe:	b108      	cbz	r0, 80a2004 <_ZN6String10invalidateEv+0xc>
 80a2000:	f7ff fe04 	bl	80a1c0c <free>
	buffer = NULL;
 80a2004:	2300      	movs	r3, #0
 80a2006:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2008:	60a3      	str	r3, [r4, #8]
 80a200a:	6063      	str	r3, [r4, #4]
 80a200c:	bd10      	pop	{r4, pc}

080a200e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a200e:	b538      	push	{r3, r4, r5, lr}
 80a2010:	4604      	mov	r4, r0
 80a2012:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2014:	6800      	ldr	r0, [r0, #0]
 80a2016:	3101      	adds	r1, #1
 80a2018:	f7ff fe00 	bl	80a1c1c <realloc>
	if (newbuffer) {
 80a201c:	b110      	cbz	r0, 80a2024 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a201e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2022:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2024:	bd38      	pop	{r3, r4, r5, pc}

080a2026 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2026:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2028:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a202a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a202c:	b113      	cbz	r3, 80a2034 <_ZN6String7reserveEj+0xe>
 80a202e:	6843      	ldr	r3, [r0, #4]
 80a2030:	428b      	cmp	r3, r1
 80a2032:	d207      	bcs.n	80a2044 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2034:	4620      	mov	r0, r4
 80a2036:	f7ff ffea 	bl	80a200e <_ZN6String12changeBufferEj>
 80a203a:	b120      	cbz	r0, 80a2046 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a203c:	68a3      	ldr	r3, [r4, #8]
 80a203e:	b90b      	cbnz	r3, 80a2044 <_ZN6String7reserveEj+0x1e>
 80a2040:	6822      	ldr	r2, [r4, #0]
 80a2042:	7013      	strb	r3, [r2, #0]
 80a2044:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2046:	bd10      	pop	{r4, pc}

080a2048 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2048:	b570      	push	{r4, r5, r6, lr}
 80a204a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a204c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a204e:	4604      	mov	r4, r0
 80a2050:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2052:	f7ff ffe8 	bl	80a2026 <_ZN6String7reserveEj>
 80a2056:	b918      	cbnz	r0, 80a2060 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2058:	4620      	mov	r0, r4
 80a205a:	f7ff ffcd 	bl	80a1ff8 <_ZN6String10invalidateEv>
		return *this;
 80a205e:	e009      	b.n	80a2074 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2060:	462a      	mov	r2, r5
 80a2062:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2064:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2066:	6820      	ldr	r0, [r4, #0]
 80a2068:	f001 f988 	bl	80a337c <memcpy>
	buffer[len] = 0;
 80a206c:	6822      	ldr	r2, [r4, #0]
 80a206e:	68a3      	ldr	r3, [r4, #8]
 80a2070:	2100      	movs	r1, #0
 80a2072:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2074:	4620      	mov	r0, r4
 80a2076:	bd70      	pop	{r4, r5, r6, pc}

080a2078 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2078:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a207a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a207c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a207e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2080:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2082:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2084:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2086:	460d      	mov	r5, r1
 80a2088:	b139      	cbz	r1, 80a209a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a208a:	4608      	mov	r0, r1
 80a208c:	f001 f9b2 	bl	80a33f4 <strlen>
 80a2090:	4629      	mov	r1, r5
 80a2092:	4602      	mov	r2, r0
 80a2094:	4620      	mov	r0, r4
 80a2096:	f7ff ffd7 	bl	80a2048 <_ZN6String4copyEPKcj>
}
 80a209a:	4620      	mov	r0, r4
 80a209c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a20a0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a20a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a20a4:	4b03      	ldr	r3, [pc, #12]	; (80a20b4 <_GLOBAL__sub_I_System+0x14>)
 80a20a6:	2000      	movs	r0, #0
 80a20a8:	7018      	strb	r0, [r3, #0]
 80a20aa:	8058      	strh	r0, [r3, #2]
 80a20ac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a20ae:	f7ff bd09 	b.w	80a1ac4 <set_system_mode>
 80a20b2:	bf00      	nop
 80a20b4:	200001d0 	.word	0x200001d0

080a20b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a20b8:	4b02      	ldr	r3, [pc, #8]	; (80a20c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a20ba:	681a      	ldr	r2, [r3, #0]
 80a20bc:	4b02      	ldr	r3, [pc, #8]	; (80a20c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a20be:	601a      	str	r2, [r3, #0]
 80a20c0:	4770      	bx	lr
 80a20c2:	bf00      	nop
 80a20c4:	2000001c 	.word	0x2000001c
 80a20c8:	200001d8 	.word	0x200001d8

080a20cc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a20cc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a20ce:	6804      	ldr	r4, [r0, #0]
 80a20d0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a20d2:	46a4      	mov	ip, r4
    }
 80a20d4:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a20d6:	4760      	bx	ip

080a20d8 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a20d8:	6803      	ldr	r3, [r0, #0]
 80a20da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a20dc:	4718      	bx	r3

080a20de <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a20de:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a20e0:	4770      	bx	lr

080a20e2 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a20e2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a20e4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a20e6:	1a10      	subs	r0, r2, r0
 80a20e8:	4770      	bx	lr

080a20ea <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a20ea:	b513      	push	{r0, r1, r4, lr}
 80a20ec:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a20ee:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a20f0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a20f4:	68d4      	ldr	r4, [r2, #12]
 80a20f6:	4619      	mov	r1, r3
 80a20f8:	2201      	movs	r2, #1
 80a20fa:	47a0      	blx	r4
}
 80a20fc:	b002      	add	sp, #8
 80a20fe:	bd10      	pop	{r4, pc}

080a2100 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a2100:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a2102:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a2104:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a2106:	691b      	ldr	r3, [r3, #16]
 80a2108:	4798      	blx	r3
 80a210a:	b128      	cbz	r0, 80a2118 <_ZN3UDP4readEv+0x18>
 80a210c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a210e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a2110:	1c59      	adds	r1, r3, #1
 80a2112:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a2114:	5cd0      	ldrb	r0, [r2, r3]
 80a2116:	bd10      	pop	{r4, pc}
 80a2118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a211c:	bd10      	pop	{r4, pc}

080a211e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a211e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a2120:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a2122:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a2124:	691b      	ldr	r3, [r3, #16]
 80a2126:	4798      	blx	r3
 80a2128:	b118      	cbz	r0, 80a2132 <_ZN3UDP4peekEv+0x14>
 80a212a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a212c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a212e:	5cd0      	ldrb	r0, [r2, r3]
 80a2130:	bd10      	pop	{r4, pc}
 80a2132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2136:	bd10      	pop	{r4, pc}

080a2138 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a2138:	4770      	bx	lr

080a213a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a213a:	4603      	mov	r3, r0
 80a213c:	4608      	mov	r0, r1
 80a213e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a2140:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a2142:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2144:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a2146:	6803      	ldr	r3, [r0, #0]
 80a2148:	1a52      	subs	r2, r2, r1
 80a214a:	68db      	ldr	r3, [r3, #12]
 80a214c:	4421      	add	r1, r4
}
 80a214e:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a2150:	4718      	bx	r3

080a2152 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a2152:	f1a0 0010 	sub.w	r0, r0, #16
 80a2156:	f7ff bff0 	b.w	80a213a <_ZNK3UDP7printToER5Print>

080a215a <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a215a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a215c:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a215e:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a2160:	460f      	mov	r7, r1
 80a2162:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a2164:	f7ff fe7c 	bl	80a1e60 <_ZN5spark12NetworkClass4fromEm>
 80a2168:	6803      	ldr	r3, [r0, #0]
 80a216a:	68db      	ldr	r3, [r3, #12]
 80a216c:	4798      	blx	r3
 80a216e:	b1b8      	cbz	r0, 80a21a0 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a2170:	2102      	movs	r1, #2
 80a2172:	463b      	mov	r3, r7
 80a2174:	2211      	movs	r2, #17
 80a2176:	4608      	mov	r0, r1
 80a2178:	9600      	str	r6, [sp, #0]
 80a217a:	f7ff fbe3 	bl	80a1944 <socket_create>
 80a217e:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a2180:	f7ff fbd8 	bl	80a1934 <socket_handle_valid>
 80a2184:	4604      	mov	r4, r0
 80a2186:	b130      	cbz	r0, 80a2196 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2188:	2300      	movs	r3, #0
 80a218a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a218c:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a218e:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a2190:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a2192:	2001      	movs	r0, #1
 80a2194:	e004      	b.n	80a21a0 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a2196:	682b      	ldr	r3, [r5, #0]
 80a2198:	4628      	mov	r0, r5
 80a219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a219c:	4798      	blx	r3
            bound = false;
 80a219e:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a21a0:	b003      	add	sp, #12
 80a21a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a21a4 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a21a4:	b538      	push	{r3, r4, r5, lr}
 80a21a6:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a21a8:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a21aa:	f7ff fbeb 	bl	80a1984 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a21ae:	4285      	cmp	r5, r0
 80a21b0:	d002      	beq.n	80a21b8 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a21b2:	6960      	ldr	r0, [r4, #20]
 80a21b4:	f7ff fbde 	bl	80a1974 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a21b8:	f7ff fbe4 	bl	80a1984 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a21bc:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a21be:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a21c0:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a21c2:	8723      	strh	r3, [r4, #56]	; 0x38
 80a21c4:	bd38      	pop	{r3, r4, r5, pc}

080a21c6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a21c6:	b530      	push	{r4, r5, lr}
 80a21c8:	b087      	sub	sp, #28
 80a21ca:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a21ce:	2502      	movs	r5, #2
 80a21d0:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a21d4:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a21d8:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a21da:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a21dc:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a21e0:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a21e4:	799c      	ldrb	r4, [r3, #6]
 80a21e6:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a21ea:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a21ec:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a21ee:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a21f2:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a21f6:	2310      	movs	r3, #16
 80a21f8:	9301      	str	r3, [sp, #4]
 80a21fa:	ab02      	add	r3, sp, #8
 80a21fc:	9300      	str	r3, [sp, #0]
 80a21fe:	6940      	ldr	r0, [r0, #20]
 80a2200:	2300      	movs	r3, #0
 80a2202:	f7ff fbaf 	bl	80a1964 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a2206:	b007      	add	sp, #28
 80a2208:	bd30      	pop	{r4, r5, pc}

080a220a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a220a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a220c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a220e:	4605      	mov	r5, r0
 80a2210:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2212:	b113      	cbz	r3, 80a221a <_ZN3UDP5writeEPKhj+0x10>
 80a2214:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a2216:	1a24      	subs	r4, r4, r0
 80a2218:	e000      	b.n	80a221c <_ZN3UDP5writeEPKhj+0x12>
 80a221a:	461c      	mov	r4, r3
 80a221c:	4294      	cmp	r4, r2
 80a221e:	bf28      	it	cs
 80a2220:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a2222:	4418      	add	r0, r3
 80a2224:	4622      	mov	r2, r4
 80a2226:	f001 f8a9 	bl	80a337c <memcpy>
    _offset += size;
 80a222a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a222c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a222e:	4423      	add	r3, r4
 80a2230:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2232:	bd38      	pop	{r3, r4, r5, pc}

080a2234 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2234:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a2236:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2238:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a223a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a223c:	460e      	mov	r6, r1
 80a223e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a2240:	4798      	blx	r3
 80a2242:	b188      	cbz	r0, 80a2268 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a2244:	6823      	ldr	r3, [r4, #0]
 80a2246:	4620      	mov	r0, r4
 80a2248:	691b      	ldr	r3, [r3, #16]
 80a224a:	4798      	blx	r3
 80a224c:	4285      	cmp	r5, r0
 80a224e:	bfa8      	it	ge
 80a2250:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a2252:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2256:	462a      	mov	r2, r5
 80a2258:	4419      	add	r1, r3
 80a225a:	4630      	mov	r0, r6
 80a225c:	f001 f88e 	bl	80a337c <memcpy>
      _offset += read;
 80a2260:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2262:	442b      	add	r3, r5
 80a2264:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a2266:	e001      	b.n	80a226c <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a2268:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a226c:	4628      	mov	r0, r5
 80a226e:	bd70      	pop	{r4, r5, r6, pc}

080a2270 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2270:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2272:	4604      	mov	r4, r0
 80a2274:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2276:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2278:	460d      	mov	r5, r1
 80a227a:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a227c:	f7ff fdf0 	bl	80a1e60 <_ZN5spark12NetworkClass4fromEm>
 80a2280:	6803      	ldr	r3, [r0, #0]
 80a2282:	68db      	ldr	r3, [r3, #12]
 80a2284:	4798      	blx	r3
 80a2286:	b310      	cbz	r0, 80a22ce <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2288:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a228a:	f7ff fb7b 	bl	80a1984 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a228e:	4287      	cmp	r7, r0
 80a2290:	d01d      	beq.n	80a22ce <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2292:	b1e5      	cbz	r5, 80a22ce <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a2294:	ab08      	add	r3, sp, #32
 80a2296:	2210      	movs	r2, #16
 80a2298:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a229c:	9301      	str	r3, [sp, #4]
 80a229e:	eb0d 0302 	add.w	r3, sp, r2
 80a22a2:	9300      	str	r3, [sp, #0]
 80a22a4:	4629      	mov	r1, r5
 80a22a6:	2300      	movs	r3, #0
 80a22a8:	4632      	mov	r2, r6
 80a22aa:	6960      	ldr	r0, [r4, #20]
 80a22ac:	f7ff fb52 	bl	80a1954 <socket_receivefrom>
        if (ret >= 0)
 80a22b0:	1e05      	subs	r5, r0, #0
 80a22b2:	db0e      	blt.n	80a22d2 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a22b4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a22b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a22bc:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a22be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a22c2:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a22c4:	f104 001c 	add.w	r0, r4, #28
 80a22c8:	f7ff fd5a 	bl	80a1d80 <_ZN9IPAddressaSEPKh>
 80a22cc:	e001      	b.n	80a22d2 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a22ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a22d2:	4628      	mov	r0, r5
 80a22d4:	b009      	add	sp, #36	; 0x24
 80a22d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a22d8 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a22d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a22dc:	4606      	mov	r6, r0
 80a22de:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a22e0:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a22e2:	460d      	mov	r5, r1
 80a22e4:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a22e6:	f7ff fdbb 	bl	80a1e60 <_ZN5spark12NetworkClass4fromEm>
 80a22ea:	6803      	ldr	r3, [r0, #0]
 80a22ec:	68db      	ldr	r3, [r3, #12]
 80a22ee:	4798      	blx	r3
 80a22f0:	b1f8      	cbz	r0, 80a2332 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a22f2:	4628      	mov	r0, r5
 80a22f4:	f001 f87e 	bl	80a33f4 <strlen>
 80a22f8:	2400      	movs	r4, #0
 80a22fa:	b281      	uxth	r1, r0
 80a22fc:	9400      	str	r4, [sp, #0]
 80a22fe:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a2300:	aa03      	add	r2, sp, #12
 80a2302:	4628      	mov	r0, r5
 80a2304:	f7ff fbd6 	bl	80a1ab4 <inet_gethostbyname>
 80a2308:	b990      	cbnz	r0, 80a2330 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a230a:	a903      	add	r1, sp, #12
 80a230c:	a808      	add	r0, sp, #32
 80a230e:	f7ff fd03 	bl	80a1d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a2312:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2314:	ac0f      	add	r4, sp, #60	; 0x3c
 80a2316:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a2318:	4b07      	ldr	r3, [pc, #28]	; (80a2338 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a231a:	ad09      	add	r5, sp, #36	; 0x24
 80a231c:	930e      	str	r3, [sp, #56]	; 0x38
 80a231e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2322:	682b      	ldr	r3, [r5, #0]
 80a2324:	4642      	mov	r2, r8
 80a2326:	7023      	strb	r3, [r4, #0]
 80a2328:	a90e      	add	r1, sp, #56	; 0x38
 80a232a:	4630      	mov	r0, r6
 80a232c:	47b8      	blx	r7
 80a232e:	e000      	b.n	80a2332 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a2330:	4620      	mov	r0, r4
}
 80a2332:	b014      	add	sp, #80	; 0x50
 80a2334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2338:	080a3618 	.word	0x080a3618

080a233c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a233c:	b570      	push	{r4, r5, r6, lr}
 80a233e:	4604      	mov	r4, r0
 80a2340:	4606      	mov	r6, r0
 80a2342:	4b05      	ldr	r3, [pc, #20]	; (80a2358 <_ZN3UDP8remoteIPEv+0x1c>)
 80a2344:	f101 0520 	add.w	r5, r1, #32
 80a2348:	f844 3b04 	str.w	r3, [r4], #4
 80a234c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a234e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2350:	682b      	ldr	r3, [r5, #0]
 80a2352:	4630      	mov	r0, r6
 80a2354:	7023      	strb	r3, [r4, #0]
 80a2356:	bd70      	pop	{r4, r5, r6, pc}
 80a2358:	080a3618 	.word	0x080a3618

080a235c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a235e:	4694      	mov	ip, r2
 80a2360:	468e      	mov	lr, r1
 80a2362:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2364:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2366:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2368:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a236a:	4a09      	ldr	r2, [pc, #36]	; (80a2390 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a236c:	ac03      	add	r4, sp, #12
 80a236e:	1d1d      	adds	r5, r3, #4
 80a2370:	9202      	str	r2, [sp, #8]
 80a2372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2376:	682b      	ldr	r3, [r5, #0]
 80a2378:	4662      	mov	r2, ip
 80a237a:	7023      	strb	r3, [r4, #0]
 80a237c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a2380:	4671      	mov	r1, lr
 80a2382:	9300      	str	r3, [sp, #0]
 80a2384:	4630      	mov	r0, r6
 80a2386:	ab02      	add	r3, sp, #8
 80a2388:	47b8      	blx	r7
    }
 80a238a:	b009      	add	sp, #36	; 0x24
 80a238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a238e:	bf00      	nop
 80a2390:	080a3618 	.word	0x080a3618

080a2394 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2394:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2396:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2398:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a239a:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a239c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a239e:	4b0d      	ldr	r3, [pc, #52]	; (80a23d4 <_ZN3UDP9endPacketEv+0x40>)
 80a23a0:	ad03      	add	r5, sp, #12
 80a23a2:	f100 0620 	add.w	r6, r0, #32
 80a23a6:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a23aa:	9302      	str	r3, [sp, #8]
 80a23ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a23ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a23b0:	6833      	ldr	r3, [r6, #0]
 80a23b2:	4672      	mov	r2, lr
 80a23b4:	702b      	strb	r3, [r5, #0]
 80a23b6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a23b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a23ba:	9300      	str	r3, [sp, #0]
 80a23bc:	4620      	mov	r0, r4
 80a23be:	ab02      	add	r3, sp, #8
 80a23c0:	47b8      	blx	r7
 80a23c2:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a23c4:	6823      	ldr	r3, [r4, #0]
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	69db      	ldr	r3, [r3, #28]
 80a23ca:	4798      	blx	r3
    return result;
}
 80a23cc:	4628      	mov	r0, r5
 80a23ce:	b009      	add	sp, #36	; 0x24
 80a23d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a23d2:	bf00      	nop
 80a23d4:	080a3618 	.word	0x080a3618

080a23d8 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a23d8:	b538      	push	{r3, r4, r5, lr}
 80a23da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a23de:	6083      	str	r3, [r0, #8]
 80a23e0:	4b0b      	ldr	r3, [pc, #44]	; (80a2410 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a23e2:	2500      	movs	r5, #0
 80a23e4:	f103 0208 	add.w	r2, r3, #8
 80a23e8:	336c      	adds	r3, #108	; 0x6c
 80a23ea:	6002      	str	r2, [r0, #0]
 80a23ec:	6103      	str	r3, [r0, #16]
 80a23ee:	6045      	str	r5, [r0, #4]
 80a23f0:	4604      	mov	r4, r0
 80a23f2:	f7ff fac7 	bl	80a1984 <socket_handle_invalid>
 80a23f6:	6160      	str	r0, [r4, #20]
 80a23f8:	f104 001c 	add.w	r0, r4, #28
 80a23fc:	f7ff fc7e 	bl	80a1cfc <_ZN9IPAddressC1Ev>
 80a2400:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a2404:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a2406:	8725      	strh	r5, [r4, #56]	; 0x38
 80a2408:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a240a:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a240c:	4620      	mov	r0, r4
 80a240e:	bd38      	pop	{r3, r4, r5, pc}
 80a2410:	080a3778 	.word	0x080a3778

080a2414 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a2414:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a2416:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a241a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a241c:	b123      	cbz	r3, 80a2428 <_ZN3UDP13releaseBufferEv+0x14>
 80a241e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a2420:	b110      	cbz	r0, 80a2428 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a2422:	2101      	movs	r1, #1
 80a2424:	f000 fb57 	bl	80a2ad6 <_ZdlPvj>
    }
    _buffer = NULL;
 80a2428:	2300      	movs	r3, #0
 80a242a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a242c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a2430:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2432:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2434:	8723      	strh	r3, [r4, #56]	; 0x38
 80a2436:	bd10      	pop	{r4, pc}

080a2438 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a2438:	b570      	push	{r4, r5, r6, lr}
 80a243a:	4604      	mov	r4, r0
 80a243c:	4616      	mov	r6, r2
 80a243e:	460d      	mov	r5, r1
    releaseBuffer();
 80a2440:	f7ff ffe8 	bl	80a2414 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a2444:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a2446:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a2448:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a244a:	b93e      	cbnz	r6, 80a245c <_ZN3UDP9setBufferEjPh+0x24>
 80a244c:	b135      	cbz	r5, 80a245c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a244e:	4628      	mov	r0, r5
 80a2450:	f7fd fe23 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a2454:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a2456:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a2458:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a245c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a245e:	b103      	cbz	r3, 80a2462 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a2460:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a2462:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a2464:	3000      	adds	r0, #0
 80a2466:	bf18      	it	ne
 80a2468:	2001      	movne	r0, #1
 80a246a:	bd70      	pop	{r4, r5, r6, pc}

080a246c <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a246e:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2470:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2472:	4605      	mov	r5, r0
 80a2474:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2476:	b91a      	cbnz	r2, 80a2480 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2478:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a247a:	b109      	cbz	r1, 80a2480 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a247c:	f7ff ffdc 	bl	80a2438 <_ZN3UDP9setBufferEjPh>
 80a2480:	f105 0620 	add.w	r6, r5, #32
 80a2484:	3404      	adds	r4, #4
 80a2486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2488:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a248a:	6823      	ldr	r3, [r4, #0]
 80a248c:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a248e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a2490:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2492:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2494:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2496:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a249a <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a249a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a249c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a249e:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a24a0:	b91a      	cbnz	r2, 80a24aa <_ZN3UDP11parsePacketEm+0x10>
 80a24a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a24a4:	b109      	cbz	r1, 80a24aa <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a24a6:	f7ff ffc7 	bl	80a2438 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a24aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a24ac:	2300      	movs	r3, #0
 80a24ae:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a24b0:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a24b2:	b141      	cbz	r1, 80a24c6 <_ZN3UDP11parsePacketEm+0x2c>
 80a24b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a24b6:	b132      	cbz	r2, 80a24c6 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a24b8:	6820      	ldr	r0, [r4, #0]
 80a24ba:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a24bc:	4620      	mov	r0, r4
 80a24be:	47a8      	blx	r5
        if (result>0) {
 80a24c0:	2800      	cmp	r0, #0
            _total = result;
 80a24c2:	bfc8      	it	gt
 80a24c4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a24c6:	6823      	ldr	r3, [r4, #0]
 80a24c8:	4620      	mov	r0, r4
}
 80a24ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a24ce:	691b      	ldr	r3, [r3, #16]
 80a24d0:	4718      	bx	r3

080a24d2 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a24d2:	4770      	bx	lr

080a24d4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24d4:	7441      	strb	r1, [r0, #17]
 80a24d6:	4770      	bx	lr

080a24d8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a24d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a24da:	7c00      	ldrb	r0, [r0, #16]
 80a24dc:	f7ff faa2 	bl	80a1a24 <HAL_USART_Available_Data_For_Write>
}
 80a24e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24e4:	bd08      	pop	{r3, pc}

080a24e6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a24e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a24e8:	7c00      	ldrb	r0, [r0, #16]
 80a24ea:	f7ff fa73 	bl	80a19d4 <HAL_USART_Available_Data>
}
 80a24ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24f2:	bd08      	pop	{r3, pc}

080a24f4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a24f4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a24f6:	7c00      	ldrb	r0, [r0, #16]
 80a24f8:	f7ff fa7c 	bl	80a19f4 <HAL_USART_Peek_Data>
}
 80a24fc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2500:	bf28      	it	cs
 80a2502:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2506:	bd08      	pop	{r3, pc}

080a2508 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2508:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a250a:	7c00      	ldrb	r0, [r0, #16]
 80a250c:	f7ff fa6a 	bl	80a19e4 <HAL_USART_Read_Data>
}
 80a2510:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2514:	bf28      	it	cs
 80a2516:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a251a:	bd08      	pop	{r3, pc}

080a251c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a251c:	7c00      	ldrb	r0, [r0, #16]
 80a251e:	f7ff ba71 	b.w	80a1a04 <HAL_USART_Flush_Data>

080a2522 <_ZN11USARTSerialD0Ev>:
 80a2522:	b510      	push	{r4, lr}
 80a2524:	4604      	mov	r4, r0
 80a2526:	2114      	movs	r1, #20
 80a2528:	f000 fad5 	bl	80a2ad6 <_ZdlPvj>
 80a252c:	4620      	mov	r0, r4
 80a252e:	bd10      	pop	{r4, pc}

080a2530 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2530:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2532:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2534:	4604      	mov	r4, r0
 80a2536:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2538:	b925      	cbnz	r5, 80a2544 <_ZN11USARTSerial5writeEh+0x14>
 80a253a:	7c00      	ldrb	r0, [r0, #16]
 80a253c:	f7ff fa72 	bl	80a1a24 <HAL_USART_Available_Data_For_Write>
 80a2540:	2800      	cmp	r0, #0
 80a2542:	dd05      	ble.n	80a2550 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2544:	4631      	mov	r1, r6
 80a2546:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a254c:	f7ff ba3a 	b.w	80a19c4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2550:	4628      	mov	r0, r5
 80a2552:	bd70      	pop	{r4, r5, r6, pc}

080a2554 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2554:	b510      	push	{r4, lr}
 80a2556:	4604      	mov	r4, r0
 80a2558:	4608      	mov	r0, r1
 80a255a:	4611      	mov	r1, r2
 80a255c:	2200      	movs	r2, #0
 80a255e:	6062      	str	r2, [r4, #4]
 80a2560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2564:	60a2      	str	r2, [r4, #8]
 80a2566:	4a05      	ldr	r2, [pc, #20]	; (80a257c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2568:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a256a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a256c:	2201      	movs	r2, #1
 80a256e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2570:	461a      	mov	r2, r3
 80a2572:	f7ff fa1f 	bl	80a19b4 <HAL_USART_Init>
}
 80a2576:	4620      	mov	r0, r4
 80a2578:	bd10      	pop	{r4, pc}
 80a257a:	bf00      	nop
 80a257c:	080a37f0 	.word	0x080a37f0

080a2580 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2580:	7c00      	ldrb	r0, [r0, #16]
 80a2582:	f7ff ba47 	b.w	80a1a14 <HAL_USART_Is_Enabled>
	...

080a2588 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2588:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a258a:	4d0c      	ldr	r5, [pc, #48]	; (80a25bc <_Z22__fetch_global_Serial1v+0x34>)
 80a258c:	6829      	ldr	r1, [r5, #0]
 80a258e:	f011 0401 	ands.w	r4, r1, #1
 80a2592:	d111      	bne.n	80a25b8 <_Z22__fetch_global_Serial1v+0x30>
 80a2594:	4628      	mov	r0, r5
 80a2596:	f7fd fd84 	bl	80a00a2 <__cxa_guard_acquire>
 80a259a:	b168      	cbz	r0, 80a25b8 <_Z22__fetch_global_Serial1v+0x30>
 80a259c:	4a08      	ldr	r2, [pc, #32]	; (80a25c0 <_Z22__fetch_global_Serial1v+0x38>)
 80a259e:	4621      	mov	r1, r4
 80a25a0:	4b08      	ldr	r3, [pc, #32]	; (80a25c4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a25a2:	4809      	ldr	r0, [pc, #36]	; (80a25c8 <_Z22__fetch_global_Serial1v+0x40>)
 80a25a4:	f7ff ffd6 	bl	80a2554 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a25a8:	4628      	mov	r0, r5
 80a25aa:	f7fd fd7f 	bl	80a00ac <__cxa_guard_release>
 80a25ae:	4a07      	ldr	r2, [pc, #28]	; (80a25cc <_Z22__fetch_global_Serial1v+0x44>)
 80a25b0:	4907      	ldr	r1, [pc, #28]	; (80a25d0 <_Z22__fetch_global_Serial1v+0x48>)
 80a25b2:	4805      	ldr	r0, [pc, #20]	; (80a25c8 <_Z22__fetch_global_Serial1v+0x40>)
 80a25b4:	f000 fa8a 	bl	80a2acc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a25b8:	4803      	ldr	r0, [pc, #12]	; (80a25c8 <_Z22__fetch_global_Serial1v+0x40>)
 80a25ba:	bd38      	pop	{r3, r4, r5, pc}
 80a25bc:	20000274 	.word	0x20000274
 80a25c0:	20000278 	.word	0x20000278
 80a25c4:	200001f0 	.word	0x200001f0
 80a25c8:	200001dc 	.word	0x200001dc
 80a25cc:	20000084 	.word	0x20000084
 80a25d0:	080a24d3 	.word	0x080a24d3

080a25d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a25d4:	7441      	strb	r1, [r0, #17]
 80a25d6:	4770      	bx	lr

080a25d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a25d8:	4770      	bx	lr

080a25da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a25da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a25dc:	2100      	movs	r1, #0
 80a25de:	7c00      	ldrb	r0, [r0, #16]
 80a25e0:	f7ff fa48 	bl	80a1a74 <HAL_USB_USART_Receive_Data>
}
 80a25e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25e8:	bf28      	it	cs
 80a25ea:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a25ee:	bd08      	pop	{r3, pc}

080a25f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a25f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a25f2:	2101      	movs	r1, #1
 80a25f4:	7c00      	ldrb	r0, [r0, #16]
 80a25f6:	f7ff fa3d 	bl	80a1a74 <HAL_USB_USART_Receive_Data>
}
 80a25fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25fe:	bf28      	it	cs
 80a2600:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2604:	bd08      	pop	{r3, pc}

080a2606 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2606:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2608:	7c00      	ldrb	r0, [r0, #16]
 80a260a:	f7ff fa2b 	bl	80a1a64 <HAL_USB_USART_Available_Data_For_Write>
}
 80a260e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2612:	bd08      	pop	{r3, pc}

080a2614 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2614:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2616:	7c00      	ldrb	r0, [r0, #16]
 80a2618:	f7ff fa1c 	bl	80a1a54 <HAL_USB_USART_Available_Data>
}
 80a261c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2620:	bd08      	pop	{r3, pc}

080a2622 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2622:	7c00      	ldrb	r0, [r0, #16]
 80a2624:	f7ff ba36 	b.w	80a1a94 <HAL_USB_USART_Flush_Data>

080a2628 <_ZN9USBSerialD0Ev>:
 80a2628:	b510      	push	{r4, lr}
 80a262a:	4604      	mov	r4, r0
 80a262c:	2114      	movs	r1, #20
 80a262e:	f000 fa52 	bl	80a2ad6 <_ZdlPvj>
 80a2632:	4620      	mov	r0, r4
 80a2634:	bd10      	pop	{r4, pc}

080a2636 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2636:	b538      	push	{r3, r4, r5, lr}
 80a2638:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a263a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a263c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a263e:	f7ff fa11 	bl	80a1a64 <HAL_USB_USART_Available_Data_For_Write>
 80a2642:	2800      	cmp	r0, #0
 80a2644:	dc01      	bgt.n	80a264a <_ZN9USBSerial5writeEh+0x14>
 80a2646:	7c60      	ldrb	r0, [r4, #17]
 80a2648:	b128      	cbz	r0, 80a2656 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a264a:	4629      	mov	r1, r5
 80a264c:	7c20      	ldrb	r0, [r4, #16]
 80a264e:	f7ff fa19 	bl	80a1a84 <HAL_USB_USART_Send_Data>
 80a2652:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2656:	bd38      	pop	{r3, r4, r5, pc}

080a2658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2658:	b510      	push	{r4, lr}
 80a265a:	4604      	mov	r4, r0
 80a265c:	2300      	movs	r3, #0
 80a265e:	6063      	str	r3, [r4, #4]
 80a2660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2664:	60a3      	str	r3, [r4, #8]
 80a2666:	4b05      	ldr	r3, [pc, #20]	; (80a267c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2668:	4608      	mov	r0, r1
 80a266a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a266c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a266e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2670:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2672:	4611      	mov	r1, r2
 80a2674:	f7ff f9de 	bl	80a1a34 <HAL_USB_USART_Init>
}
 80a2678:	4620      	mov	r0, r4
 80a267a:	bd10      	pop	{r4, pc}
 80a267c:	080a3820 	.word	0x080a3820

080a2680 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2680:	2200      	movs	r2, #0
 80a2682:	7c00      	ldrb	r0, [r0, #16]
 80a2684:	f7ff b9de 	b.w	80a1a44 <HAL_USB_USART_Begin>

080a2688 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2688:	7c00      	ldrb	r0, [r0, #16]
 80a268a:	f7ff ba0b 	b.w	80a1aa4 <HAL_USB_USART_Is_Enabled>

080a268e <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a268e:	f7ff bffb 	b.w	80a2688 <_ZN9USBSerial9isEnabledEv>
	...

080a2694 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2694:	b510      	push	{r4, lr}
 80a2696:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2698:	2214      	movs	r2, #20
 80a269a:	2100      	movs	r1, #0
 80a269c:	f000 fe79 	bl	80a3392 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a26a0:	4b05      	ldr	r3, [pc, #20]	; (80a26b8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a26a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a26a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a26a6:	4b05      	ldr	r3, [pc, #20]	; (80a26bc <_Z19acquireSerialBufferv+0x28>)
 80a26a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a26aa:	f240 1301 	movw	r3, #257	; 0x101
 80a26ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a26b0:	2381      	movs	r3, #129	; 0x81
 80a26b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a26b4:	bd10      	pop	{r4, pc}
 80a26b6:	bf00      	nop
 80a26b8:	20000381 	.word	0x20000381
 80a26bc:	20000300 	.word	0x20000300

080a26c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a26c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26c2:	4d0e      	ldr	r5, [pc, #56]	; (80a26fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a26c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a26c6:	a801      	add	r0, sp, #4
 80a26c8:	f7ff ffe4 	bl	80a2694 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26cc:	6829      	ldr	r1, [r5, #0]
 80a26ce:	f011 0401 	ands.w	r4, r1, #1
 80a26d2:	d110      	bne.n	80a26f6 <_Z16_fetch_usbserialv+0x36>
 80a26d4:	4628      	mov	r0, r5
 80a26d6:	f7fd fce4 	bl	80a00a2 <__cxa_guard_acquire>
 80a26da:	b160      	cbz	r0, 80a26f6 <_Z16_fetch_usbserialv+0x36>
 80a26dc:	aa01      	add	r2, sp, #4
 80a26de:	4621      	mov	r1, r4
 80a26e0:	4807      	ldr	r0, [pc, #28]	; (80a2700 <_Z16_fetch_usbserialv+0x40>)
 80a26e2:	f7ff ffb9 	bl	80a2658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a26e6:	4628      	mov	r0, r5
 80a26e8:	f7fd fce0 	bl	80a00ac <__cxa_guard_release>
 80a26ec:	4a05      	ldr	r2, [pc, #20]	; (80a2704 <_Z16_fetch_usbserialv+0x44>)
 80a26ee:	4906      	ldr	r1, [pc, #24]	; (80a2708 <_Z16_fetch_usbserialv+0x48>)
 80a26f0:	4803      	ldr	r0, [pc, #12]	; (80a2700 <_Z16_fetch_usbserialv+0x40>)
 80a26f2:	f000 f9eb 	bl	80a2acc <__aeabi_atexit>
	return _usbserial;
}
 80a26f6:	4802      	ldr	r0, [pc, #8]	; (80a2700 <_Z16_fetch_usbserialv+0x40>)
 80a26f8:	b007      	add	sp, #28
 80a26fa:	bd30      	pop	{r4, r5, pc}
 80a26fc:	200002fc 	.word	0x200002fc
 80a2700:	20000484 	.word	0x20000484
 80a2704:	20000084 	.word	0x20000084
 80a2708:	080a25d9 	.word	0x080a25d9

080a270c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a270c:	b510      	push	{r4, lr}
 80a270e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2710:	2214      	movs	r2, #20
 80a2712:	2100      	movs	r1, #0
 80a2714:	f000 fe3d 	bl	80a3392 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2718:	4b05      	ldr	r3, [pc, #20]	; (80a2730 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a271a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a271c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a271e:	4b05      	ldr	r3, [pc, #20]	; (80a2734 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2720:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2722:	f240 1301 	movw	r3, #257	; 0x101
 80a2726:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2728:	2381      	movs	r3, #129	; 0x81
 80a272a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a272c:	bd10      	pop	{r4, pc}
 80a272e:	bf00      	nop
 80a2730:	20000534 	.word	0x20000534
 80a2734:	2000049c 	.word	0x2000049c

080a2738 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2738:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a273a:	4c0e      	ldr	r4, [pc, #56]	; (80a2774 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a273c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a273e:	a801      	add	r0, sp, #4
 80a2740:	f7ff ffe4 	bl	80a270c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2744:	6823      	ldr	r3, [r4, #0]
 80a2746:	07db      	lsls	r3, r3, #31
 80a2748:	d410      	bmi.n	80a276c <_Z17_fetch_usbserial1v+0x34>
 80a274a:	4620      	mov	r0, r4
 80a274c:	f7fd fca9 	bl	80a00a2 <__cxa_guard_acquire>
 80a2750:	b160      	cbz	r0, 80a276c <_Z17_fetch_usbserial1v+0x34>
 80a2752:	aa01      	add	r2, sp, #4
 80a2754:	2101      	movs	r1, #1
 80a2756:	4808      	ldr	r0, [pc, #32]	; (80a2778 <_Z17_fetch_usbserial1v+0x40>)
 80a2758:	f7ff ff7e 	bl	80a2658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a275c:	4620      	mov	r0, r4
 80a275e:	f7fd fca5 	bl	80a00ac <__cxa_guard_release>
 80a2762:	4a06      	ldr	r2, [pc, #24]	; (80a277c <_Z17_fetch_usbserial1v+0x44>)
 80a2764:	4906      	ldr	r1, [pc, #24]	; (80a2780 <_Z17_fetch_usbserial1v+0x48>)
 80a2766:	4804      	ldr	r0, [pc, #16]	; (80a2778 <_Z17_fetch_usbserial1v+0x40>)
 80a2768:	f000 f9b0 	bl	80a2acc <__aeabi_atexit>
  return _usbserial1;
}
 80a276c:	4802      	ldr	r0, [pc, #8]	; (80a2778 <_Z17_fetch_usbserial1v+0x40>)
 80a276e:	b006      	add	sp, #24
 80a2770:	bd10      	pop	{r4, pc}
 80a2772:	bf00      	nop
 80a2774:	20000498 	.word	0x20000498
 80a2778:	20000520 	.word	0x20000520
 80a277c:	20000084 	.word	0x20000084
 80a2780:	080a25d9 	.word	0x080a25d9

080a2784 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2784:	2200      	movs	r2, #0
 80a2786:	4611      	mov	r1, r2
 80a2788:	6840      	ldr	r0, [r0, #4]
 80a278a:	f7ff b9ef 	b.w	80a1b6c <network_ready>

080a278e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a278e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2790:	4616      	mov	r6, r2
 80a2792:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2794:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2796:	460f      	mov	r7, r1
 80a2798:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a279a:	2100      	movs	r1, #0
 80a279c:	a803      	add	r0, sp, #12
 80a279e:	f000 fdf8 	bl	80a3392 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a27a2:	4630      	mov	r0, r6
 80a27a4:	f000 fe26 	bl	80a33f4 <strlen>
 80a27a8:	2500      	movs	r5, #0
 80a27aa:	9500      	str	r5, [sp, #0]
 80a27ac:	b281      	uxth	r1, r0
 80a27ae:	687b      	ldr	r3, [r7, #4]
 80a27b0:	aa03      	add	r2, sp, #12
 80a27b2:	4630      	mov	r0, r6
 80a27b4:	f7ff f97e 	bl	80a1ab4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a27b8:	b120      	cbz	r0, 80a27c4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a27ba:	4629      	mov	r1, r5
 80a27bc:	4620      	mov	r0, r4
 80a27be:	f7ff fabd 	bl	80a1d3c <_ZN9IPAddressC1Em>
 80a27c2:	e003      	b.n	80a27cc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a27c4:	a903      	add	r1, sp, #12
 80a27c6:	4620      	mov	r0, r4
 80a27c8:	f7ff faa6 	bl	80a1d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a27cc:	4620      	mov	r0, r4
 80a27ce:	b009      	add	sp, #36	; 0x24
 80a27d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a27d2:	2200      	movs	r2, #0
 80a27d4:	4611      	mov	r1, r2
 80a27d6:	6840      	ldr	r0, [r0, #4]
 80a27d8:	f7ff b9e8 	b.w	80a1bac <network_listening>

080a27dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a27dc:	2200      	movs	r2, #0
 80a27de:	4611      	mov	r1, r2
 80a27e0:	6840      	ldr	r0, [r0, #4]
 80a27e2:	f7ff b9f3 	b.w	80a1bcc <network_get_listen_timeout>

080a27e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a27e6:	2200      	movs	r2, #0
 80a27e8:	6840      	ldr	r0, [r0, #4]
 80a27ea:	f7ff b9e7 	b.w	80a1bbc <network_set_listen_timeout>

080a27ee <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a27ee:	2200      	movs	r2, #0
 80a27f0:	f081 0101 	eor.w	r1, r1, #1
 80a27f4:	6840      	ldr	r0, [r0, #4]
 80a27f6:	f7ff b9d1 	b.w	80a1b9c <network_listen>

080a27fa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a27fa:	2300      	movs	r3, #0
 80a27fc:	461a      	mov	r2, r3
 80a27fe:	4619      	mov	r1, r3
 80a2800:	6840      	ldr	r0, [r0, #4]
 80a2802:	f7ff b9c3 	b.w	80a1b8c <network_off>

080a2806 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2806:	2300      	movs	r3, #0
 80a2808:	461a      	mov	r2, r3
 80a280a:	4619      	mov	r1, r3
 80a280c:	6840      	ldr	r0, [r0, #4]
 80a280e:	f7ff b9b5 	b.w	80a1b7c <network_on>

080a2812 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2812:	2200      	movs	r2, #0
 80a2814:	4611      	mov	r1, r2
 80a2816:	6840      	ldr	r0, [r0, #4]
 80a2818:	f7ff b998 	b.w	80a1b4c <network_connecting>

080a281c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a281c:	2200      	movs	r2, #0
 80a281e:	2102      	movs	r1, #2
 80a2820:	6840      	ldr	r0, [r0, #4]
 80a2822:	f7ff b99b 	b.w	80a1b5c <network_disconnect>

080a2826 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2826:	2300      	movs	r3, #0
 80a2828:	461a      	mov	r2, r3
 80a282a:	6840      	ldr	r0, [r0, #4]
 80a282c:	f7ff b986 	b.w	80a1b3c <network_connect>

080a2830 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2830:	4b02      	ldr	r3, [pc, #8]	; (80a283c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2832:	2204      	movs	r2, #4
 80a2834:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2836:	4a02      	ldr	r2, [pc, #8]	; (80a2840 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2838:	601a      	str	r2, [r3, #0]
 80a283a:	4770      	bx	lr
 80a283c:	20000638 	.word	0x20000638
 80a2840:	080a3850 	.word	0x080a3850

080a2844 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2844:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2846:	4b14      	ldr	r3, [pc, #80]	; (80a2898 <serialEventRun+0x54>)
 80a2848:	b133      	cbz	r3, 80a2858 <serialEventRun+0x14>
 80a284a:	f7ff ff39 	bl	80a26c0 <_Z16_fetch_usbserialv>
 80a284e:	6803      	ldr	r3, [r0, #0]
 80a2850:	691b      	ldr	r3, [r3, #16]
 80a2852:	4798      	blx	r3
 80a2854:	2800      	cmp	r0, #0
 80a2856:	dc16      	bgt.n	80a2886 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2858:	4b10      	ldr	r3, [pc, #64]	; (80a289c <serialEventRun+0x58>)
 80a285a:	b133      	cbz	r3, 80a286a <serialEventRun+0x26>
 80a285c:	f7ff fe94 	bl	80a2588 <_Z22__fetch_global_Serial1v>
 80a2860:	6803      	ldr	r3, [r0, #0]
 80a2862:	691b      	ldr	r3, [r3, #16]
 80a2864:	4798      	blx	r3
 80a2866:	2800      	cmp	r0, #0
 80a2868:	dc10      	bgt.n	80a288c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a286a:	4b0d      	ldr	r3, [pc, #52]	; (80a28a0 <serialEventRun+0x5c>)
 80a286c:	b10b      	cbz	r3, 80a2872 <serialEventRun+0x2e>
 80a286e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2872:	4b0c      	ldr	r3, [pc, #48]	; (80a28a4 <serialEventRun+0x60>)
 80a2874:	b17b      	cbz	r3, 80a2896 <serialEventRun+0x52>
 80a2876:	f7ff ff5f 	bl	80a2738 <_Z17_fetch_usbserial1v>
 80a287a:	6803      	ldr	r3, [r0, #0]
 80a287c:	691b      	ldr	r3, [r3, #16]
 80a287e:	4798      	blx	r3
 80a2880:	2800      	cmp	r0, #0
 80a2882:	dc06      	bgt.n	80a2892 <serialEventRun+0x4e>
 80a2884:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2886:	f3af 8000 	nop.w
 80a288a:	e7e5      	b.n	80a2858 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a288c:	f3af 8000 	nop.w
 80a2890:	e7eb      	b.n	80a286a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2892:	f3af 8000 	nop.w
 80a2896:	bd08      	pop	{r3, pc}
	...

080a28a8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a28a8:	b508      	push	{r3, lr}
	serialEventRun();
 80a28aa:	f7ff ffcb 	bl	80a2844 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a28ae:	f7fe ffdf 	bl	80a1870 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a28b2:	4b01      	ldr	r3, [pc, #4]	; (80a28b8 <_post_loop+0x10>)
 80a28b4:	6018      	str	r0, [r3, #0]
 80a28b6:	bd08      	pop	{r3, pc}
 80a28b8:	20000648 	.word	0x20000648

080a28bc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a28bc:	4802      	ldr	r0, [pc, #8]	; (80a28c8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a28be:	4a03      	ldr	r2, [pc, #12]	; (80a28cc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a28c0:	4903      	ldr	r1, [pc, #12]	; (80a28d0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a28c2:	1a12      	subs	r2, r2, r0
 80a28c4:	f000 bd5a 	b.w	80a337c <memcpy>
 80a28c8:	40024000 	.word	0x40024000
 80a28cc:	40024004 	.word	0x40024004
 80a28d0:	080a3920 	.word	0x080a3920

080a28d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a28d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a28d6:	2300      	movs	r3, #0
 80a28d8:	9300      	str	r3, [sp, #0]
 80a28da:	461a      	mov	r2, r3
 80a28dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a28e0:	f7ff f912 	bl	80a1b08 <system_ctrl_set_result>
}
 80a28e4:	b003      	add	sp, #12
 80a28e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a28ec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a28ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a28ee:	8843      	ldrh	r3, [r0, #2]
 80a28f0:	2b0a      	cmp	r3, #10
 80a28f2:	d008      	beq.n	80a2906 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a28f4:	2b50      	cmp	r3, #80	; 0x50
 80a28f6:	d109      	bne.n	80a290c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a28f8:	4b09      	ldr	r3, [pc, #36]	; (80a2920 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a28fa:	681b      	ldr	r3, [r3, #0]
 80a28fc:	b13b      	cbz	r3, 80a290e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a28fe:	b003      	add	sp, #12
 80a2900:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2904:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2906:	f7ff ffe5 	bl	80a28d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a290a:	e006      	b.n	80a291a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a290c:	2300      	movs	r3, #0
 80a290e:	9300      	str	r3, [sp, #0]
 80a2910:	461a      	mov	r2, r3
 80a2912:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2916:	f7ff f8f7 	bl	80a1b08 <system_ctrl_set_result>
        break;
    }
}
 80a291a:	b003      	add	sp, #12
 80a291c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2920:	20000640 	.word	0x20000640

080a2924 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2924:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2926:	4c10      	ldr	r4, [pc, #64]	; (80a2968 <module_user_init_hook+0x44>)
 80a2928:	4d10      	ldr	r5, [pc, #64]	; (80a296c <module_user_init_hook+0x48>)
 80a292a:	6823      	ldr	r3, [r4, #0]
 80a292c:	42ab      	cmp	r3, r5
 80a292e:	4b10      	ldr	r3, [pc, #64]	; (80a2970 <module_user_init_hook+0x4c>)
 80a2930:	bf0c      	ite	eq
 80a2932:	2201      	moveq	r2, #1
 80a2934:	2200      	movne	r2, #0
 80a2936:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2938:	d002      	beq.n	80a2940 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a293a:	f7ff ffbf 	bl	80a28bc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a293e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2940:	f7fe ff86 	bl	80a1850 <HAL_RNG_GetRandomNumber>
 80a2944:	4604      	mov	r4, r0
    srand(seed);
 80a2946:	f000 fd2d 	bl	80a33a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a294a:	4b0a      	ldr	r3, [pc, #40]	; (80a2974 <module_user_init_hook+0x50>)
 80a294c:	b113      	cbz	r3, 80a2954 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a294e:	4620      	mov	r0, r4
 80a2950:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2954:	2100      	movs	r1, #0
 80a2956:	4807      	ldr	r0, [pc, #28]	; (80a2974 <module_user_init_hook+0x50>)
 80a2958:	f7ff f8e0 	bl	80a1b1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a295c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2960:	2100      	movs	r1, #0
 80a2962:	4805      	ldr	r0, [pc, #20]	; (80a2978 <module_user_init_hook+0x54>)
 80a2964:	f7ff b8c6 	b.w	80a1af4 <system_ctrl_set_app_request_handler>
 80a2968:	40024000 	.word	0x40024000
 80a296c:	9a271c1e 	.word	0x9a271c1e
 80a2970:	20000644 	.word	0x20000644
 80a2974:	00000000 	.word	0x00000000
 80a2978:	080a28ed 	.word	0x080a28ed

080a297c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a297c:	b510      	push	{r4, lr}
 80a297e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2980:	480f      	ldr	r0, [pc, #60]	; (80a29c0 <pinAvailable+0x44>)
 80a2982:	f7ff fb2f 	bl	80a1fe4 <_ZN8SPIClass9isEnabledEv>
 80a2986:	b128      	cbz	r0, 80a2994 <pinAvailable+0x18>
 80a2988:	f1a4 030d 	sub.w	r3, r4, #13
 80a298c:	2b02      	cmp	r3, #2
 80a298e:	d801      	bhi.n	80a2994 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2990:	2000      	movs	r0, #0
 80a2992:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2994:	f000 f840 	bl	80a2a18 <_Z19__fetch_global_Wirev>
 80a2998:	f7ff f992 	bl	80a1cc0 <_ZN7TwoWire9isEnabledEv>
 80a299c:	b108      	cbz	r0, 80a29a2 <pinAvailable+0x26>
 80a299e:	2c01      	cmp	r4, #1
 80a29a0:	d9f6      	bls.n	80a2990 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a29a2:	f7ff fdf1 	bl	80a2588 <_Z22__fetch_global_Serial1v>
 80a29a6:	f7ff fdeb 	bl	80a2580 <_ZN11USARTSerial9isEnabledEv>
 80a29aa:	b118      	cbz	r0, 80a29b4 <pinAvailable+0x38>
 80a29ac:	f1a4 0312 	sub.w	r3, r4, #18
 80a29b0:	2b01      	cmp	r3, #1
 80a29b2:	d9ed      	bls.n	80a2990 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a29b4:	2c17      	cmp	r4, #23
 80a29b6:	bf8c      	ite	hi
 80a29b8:	2000      	movhi	r0, #0
 80a29ba:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a29bc:	bd10      	pop	{r4, pc}
 80a29be:	bf00      	nop
 80a29c0:	2000067c 	.word	0x2000067c

080a29c4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29c4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a29c6:	b538      	push	{r3, r4, r5, lr}
 80a29c8:	4604      	mov	r4, r0
 80a29ca:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29cc:	d80a      	bhi.n	80a29e4 <pinMode+0x20>
 80a29ce:	29ff      	cmp	r1, #255	; 0xff
 80a29d0:	d008      	beq.n	80a29e4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a29d2:	f7ff ffd3 	bl	80a297c <pinAvailable>
 80a29d6:	b128      	cbz	r0, 80a29e4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a29d8:	4629      	mov	r1, r5
 80a29da:	4620      	mov	r0, r4
}
 80a29dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a29e0:	f7fe bf56 	b.w	80a1890 <HAL_Pin_Mode>
 80a29e4:	bd38      	pop	{r3, r4, r5, pc}

080a29e6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a29e6:	b538      	push	{r3, r4, r5, lr}
 80a29e8:	4604      	mov	r4, r0
 80a29ea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a29ec:	f7fe ff58 	bl	80a18a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a29f0:	28ff      	cmp	r0, #255	; 0xff
 80a29f2:	d010      	beq.n	80a2a16 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a29f4:	2806      	cmp	r0, #6
 80a29f6:	d804      	bhi.n	80a2a02 <digitalWrite+0x1c>
 80a29f8:	234d      	movs	r3, #77	; 0x4d
 80a29fa:	fa23 f000 	lsr.w	r0, r3, r0
 80a29fe:	07c3      	lsls	r3, r0, #31
 80a2a00:	d409      	bmi.n	80a2a16 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2a02:	4620      	mov	r0, r4
 80a2a04:	f7ff ffba 	bl	80a297c <pinAvailable>
 80a2a08:	b128      	cbz	r0, 80a2a16 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a0a:	4629      	mov	r1, r5
 80a2a0c:	4620      	mov	r0, r4
}
 80a2a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a12:	f7fe bf4d 	b.w	80a18b0 <HAL_GPIO_Write>
 80a2a16:	bd38      	pop	{r3, r4, r5, pc}

080a2a18 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2a18:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2a1a:	4d0b      	ldr	r5, [pc, #44]	; (80a2a48 <_Z19__fetch_global_Wirev+0x30>)
 80a2a1c:	6829      	ldr	r1, [r5, #0]
 80a2a1e:	f011 0401 	ands.w	r4, r1, #1
 80a2a22:	d10f      	bne.n	80a2a44 <_Z19__fetch_global_Wirev+0x2c>
 80a2a24:	4628      	mov	r0, r5
 80a2a26:	f7fd fb3c 	bl	80a00a2 <__cxa_guard_acquire>
 80a2a2a:	b158      	cbz	r0, 80a2a44 <_Z19__fetch_global_Wirev+0x2c>
 80a2a2c:	4621      	mov	r1, r4
 80a2a2e:	4807      	ldr	r0, [pc, #28]	; (80a2a4c <_Z19__fetch_global_Wirev+0x34>)
 80a2a30:	f7ff f934 	bl	80a1c9c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2a34:	4628      	mov	r0, r5
 80a2a36:	f7fd fb39 	bl	80a00ac <__cxa_guard_release>
 80a2a3a:	4a05      	ldr	r2, [pc, #20]	; (80a2a50 <_Z19__fetch_global_Wirev+0x38>)
 80a2a3c:	4905      	ldr	r1, [pc, #20]	; (80a2a54 <_Z19__fetch_global_Wirev+0x3c>)
 80a2a3e:	4803      	ldr	r0, [pc, #12]	; (80a2a4c <_Z19__fetch_global_Wirev+0x34>)
 80a2a40:	f000 f844 	bl	80a2acc <__aeabi_atexit>
	return wire;
}
 80a2a44:	4801      	ldr	r0, [pc, #4]	; (80a2a4c <_Z19__fetch_global_Wirev+0x34>)
 80a2a46:	bd38      	pop	{r3, r4, r5, pc}
 80a2a48:	2000064c 	.word	0x2000064c
 80a2a4c:	20000650 	.word	0x20000650
 80a2a50:	20000084 	.word	0x20000084
 80a2a54:	080a1c45 	.word	0x080a1c45

080a2a58 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2a58:	b513      	push	{r0, r1, r4, lr}
 80a2a5a:	4c08      	ldr	r4, [pc, #32]	; (80a2a7c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2a5c:	2300      	movs	r3, #0
 80a2a5e:	461a      	mov	r2, r3
 80a2a60:	4619      	mov	r1, r3
 80a2a62:	9300      	str	r3, [sp, #0]
 80a2a64:	4620      	mov	r0, r4
 80a2a66:	f7ff f97f 	bl	80a1d68 <_ZN9IPAddressC1Ehhhh>
 80a2a6a:	4620      	mov	r0, r4
 80a2a6c:	4a04      	ldr	r2, [pc, #16]	; (80a2a80 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2a6e:	4905      	ldr	r1, [pc, #20]	; (80a2a84 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2a70:	b002      	add	sp, #8
 80a2a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2a76:	f000 b829 	b.w	80a2acc <__aeabi_atexit>
 80a2a7a:	bf00      	nop
 80a2a7c:	20000664 	.word	0x20000664
 80a2a80:	20000084 	.word	0x20000084
 80a2a84:	080a00b3 	.word	0x080a00b3

080a2a88 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a88:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2a8a:	4c0c      	ldr	r4, [pc, #48]	; (80a2abc <_GLOBAL__sub_I_SPI+0x34>)
 80a2a8c:	4e0c      	ldr	r6, [pc, #48]	; (80a2ac0 <_GLOBAL__sub_I_SPI+0x38>)
 80a2a8e:	4d0d      	ldr	r5, [pc, #52]	; (80a2ac4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2a90:	2100      	movs	r1, #0
 80a2a92:	4620      	mov	r0, r4
 80a2a94:	f7ff fa92 	bl	80a1fbc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2a98:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a9a:	4c0b      	ldr	r4, [pc, #44]	; (80a2ac8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2a9c:	4632      	mov	r2, r6
 80a2a9e:	4629      	mov	r1, r5
 80a2aa0:	f000 f814 	bl	80a2acc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2aa4:	2101      	movs	r1, #1
 80a2aa6:	4620      	mov	r0, r4
 80a2aa8:	f7ff fa88 	bl	80a1fbc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2aac:	4632      	mov	r2, r6
 80a2aae:	4629      	mov	r1, r5
 80a2ab0:	4620      	mov	r0, r4
 80a2ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2ab6:	f000 b809 	b.w	80a2acc <__aeabi_atexit>
 80a2aba:	bf00      	nop
 80a2abc:	2000067c 	.word	0x2000067c
 80a2ac0:	20000084 	.word	0x20000084
 80a2ac4:	080a1fad 	.word	0x080a1fad
 80a2ac8:	2000068c 	.word	0x2000068c

080a2acc <__aeabi_atexit>:
 80a2acc:	460b      	mov	r3, r1
 80a2ace:	4601      	mov	r1, r0
 80a2ad0:	4618      	mov	r0, r3
 80a2ad2:	f000 bc45 	b.w	80a3360 <__cxa_atexit>

080a2ad6 <_ZdlPvj>:
 80a2ad6:	f7fd bae2 	b.w	80a009e <_ZdlPv>
	...

080a2adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2adc:	4b24      	ldr	r3, [pc, #144]	; (80a2b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2ade:	681a      	ldr	r2, [r3, #0]
 80a2ae0:	07d0      	lsls	r0, r2, #31
 80a2ae2:	bf5c      	itt	pl
 80a2ae4:	2201      	movpl	r2, #1
 80a2ae6:	601a      	strpl	r2, [r3, #0]
 80a2ae8:	4b22      	ldr	r3, [pc, #136]	; (80a2b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2aea:	681a      	ldr	r2, [r3, #0]
 80a2aec:	07d1      	lsls	r1, r2, #31
 80a2aee:	bf5c      	itt	pl
 80a2af0:	2201      	movpl	r2, #1
 80a2af2:	601a      	strpl	r2, [r3, #0]
 80a2af4:	4b20      	ldr	r3, [pc, #128]	; (80a2b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2af6:	681a      	ldr	r2, [r3, #0]
 80a2af8:	07d2      	lsls	r2, r2, #31
 80a2afa:	bf5c      	itt	pl
 80a2afc:	2201      	movpl	r2, #1
 80a2afe:	601a      	strpl	r2, [r3, #0]
 80a2b00:	4b1e      	ldr	r3, [pc, #120]	; (80a2b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2b02:	681a      	ldr	r2, [r3, #0]
 80a2b04:	07d0      	lsls	r0, r2, #31
 80a2b06:	bf5c      	itt	pl
 80a2b08:	2201      	movpl	r2, #1
 80a2b0a:	601a      	strpl	r2, [r3, #0]
 80a2b0c:	4b1c      	ldr	r3, [pc, #112]	; (80a2b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2b0e:	681a      	ldr	r2, [r3, #0]
 80a2b10:	07d1      	lsls	r1, r2, #31
 80a2b12:	bf5c      	itt	pl
 80a2b14:	2201      	movpl	r2, #1
 80a2b16:	601a      	strpl	r2, [r3, #0]
 80a2b18:	4b1a      	ldr	r3, [pc, #104]	; (80a2b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2b1a:	681a      	ldr	r2, [r3, #0]
 80a2b1c:	07d2      	lsls	r2, r2, #31
 80a2b1e:	bf5c      	itt	pl
 80a2b20:	2201      	movpl	r2, #1
 80a2b22:	601a      	strpl	r2, [r3, #0]
 80a2b24:	4b18      	ldr	r3, [pc, #96]	; (80a2b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2b26:	681a      	ldr	r2, [r3, #0]
 80a2b28:	07d0      	lsls	r0, r2, #31
 80a2b2a:	bf5c      	itt	pl
 80a2b2c:	2201      	movpl	r2, #1
 80a2b2e:	601a      	strpl	r2, [r3, #0]
 80a2b30:	4b16      	ldr	r3, [pc, #88]	; (80a2b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2b32:	681a      	ldr	r2, [r3, #0]
 80a2b34:	07d1      	lsls	r1, r2, #31
 80a2b36:	bf5c      	itt	pl
 80a2b38:	2201      	movpl	r2, #1
 80a2b3a:	601a      	strpl	r2, [r3, #0]
 80a2b3c:	4b14      	ldr	r3, [pc, #80]	; (80a2b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2b3e:	681a      	ldr	r2, [r3, #0]
 80a2b40:	07d2      	lsls	r2, r2, #31
 80a2b42:	bf5c      	itt	pl
 80a2b44:	2201      	movpl	r2, #1
 80a2b46:	601a      	strpl	r2, [r3, #0]
 80a2b48:	4b12      	ldr	r3, [pc, #72]	; (80a2b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2b4a:	681a      	ldr	r2, [r3, #0]
 80a2b4c:	07d0      	lsls	r0, r2, #31
 80a2b4e:	bf5c      	itt	pl
 80a2b50:	2201      	movpl	r2, #1
 80a2b52:	601a      	strpl	r2, [r3, #0]
 80a2b54:	4b10      	ldr	r3, [pc, #64]	; (80a2b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2b56:	681a      	ldr	r2, [r3, #0]
 80a2b58:	07d1      	lsls	r1, r2, #31
 80a2b5a:	bf5c      	itt	pl
 80a2b5c:	2201      	movpl	r2, #1
 80a2b5e:	601a      	strpl	r2, [r3, #0]
 80a2b60:	4b0e      	ldr	r3, [pc, #56]	; (80a2b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2b62:	681a      	ldr	r2, [r3, #0]
 80a2b64:	07d2      	lsls	r2, r2, #31
 80a2b66:	bf5c      	itt	pl
 80a2b68:	2201      	movpl	r2, #1
 80a2b6a:	601a      	strpl	r2, [r3, #0]
 80a2b6c:	4770      	bx	lr
 80a2b6e:	bf00      	nop
 80a2b70:	200006c8 	.word	0x200006c8
 80a2b74:	200006c4 	.word	0x200006c4
 80a2b78:	200006c0 	.word	0x200006c0
 80a2b7c:	200006bc 	.word	0x200006bc
 80a2b80:	200006b8 	.word	0x200006b8
 80a2b84:	200006b4 	.word	0x200006b4
 80a2b88:	200006b0 	.word	0x200006b0
 80a2b8c:	200006ac 	.word	0x200006ac
 80a2b90:	200006a8 	.word	0x200006a8
 80a2b94:	200006a4 	.word	0x200006a4
 80a2b98:	200006a0 	.word	0x200006a0
 80a2b9c:	2000069c 	.word	0x2000069c

080a2ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2ba0:	4b18      	ldr	r3, [pc, #96]	; (80a2c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2ba2:	681a      	ldr	r2, [r3, #0]
 80a2ba4:	07d1      	lsls	r1, r2, #31
 80a2ba6:	bf5c      	itt	pl
 80a2ba8:	2201      	movpl	r2, #1
 80a2baa:	601a      	strpl	r2, [r3, #0]
 80a2bac:	4b16      	ldr	r3, [pc, #88]	; (80a2c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2bae:	681a      	ldr	r2, [r3, #0]
 80a2bb0:	07d2      	lsls	r2, r2, #31
 80a2bb2:	bf5c      	itt	pl
 80a2bb4:	2201      	movpl	r2, #1
 80a2bb6:	601a      	strpl	r2, [r3, #0]
 80a2bb8:	4b14      	ldr	r3, [pc, #80]	; (80a2c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2bba:	681a      	ldr	r2, [r3, #0]
 80a2bbc:	07d0      	lsls	r0, r2, #31
 80a2bbe:	bf5c      	itt	pl
 80a2bc0:	2201      	movpl	r2, #1
 80a2bc2:	601a      	strpl	r2, [r3, #0]
 80a2bc4:	4b12      	ldr	r3, [pc, #72]	; (80a2c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2bc6:	681a      	ldr	r2, [r3, #0]
 80a2bc8:	07d1      	lsls	r1, r2, #31
 80a2bca:	bf5c      	itt	pl
 80a2bcc:	2201      	movpl	r2, #1
 80a2bce:	601a      	strpl	r2, [r3, #0]
 80a2bd0:	4b10      	ldr	r3, [pc, #64]	; (80a2c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2bd2:	681a      	ldr	r2, [r3, #0]
 80a2bd4:	07d2      	lsls	r2, r2, #31
 80a2bd6:	bf5c      	itt	pl
 80a2bd8:	2201      	movpl	r2, #1
 80a2bda:	601a      	strpl	r2, [r3, #0]
 80a2bdc:	4b0e      	ldr	r3, [pc, #56]	; (80a2c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2bde:	681a      	ldr	r2, [r3, #0]
 80a2be0:	07d0      	lsls	r0, r2, #31
 80a2be2:	bf5c      	itt	pl
 80a2be4:	2201      	movpl	r2, #1
 80a2be6:	601a      	strpl	r2, [r3, #0]
 80a2be8:	4b0c      	ldr	r3, [pc, #48]	; (80a2c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2bea:	681a      	ldr	r2, [r3, #0]
 80a2bec:	07d1      	lsls	r1, r2, #31
 80a2bee:	bf5c      	itt	pl
 80a2bf0:	2201      	movpl	r2, #1
 80a2bf2:	601a      	strpl	r2, [r3, #0]
 80a2bf4:	4b0a      	ldr	r3, [pc, #40]	; (80a2c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2bf6:	681a      	ldr	r2, [r3, #0]
 80a2bf8:	07d2      	lsls	r2, r2, #31
 80a2bfa:	bf5c      	itt	pl
 80a2bfc:	2201      	movpl	r2, #1
 80a2bfe:	601a      	strpl	r2, [r3, #0]
 80a2c00:	4770      	bx	lr
 80a2c02:	bf00      	nop
 80a2c04:	200006e8 	.word	0x200006e8
 80a2c08:	200006e4 	.word	0x200006e4
 80a2c0c:	200006e0 	.word	0x200006e0
 80a2c10:	200006dc 	.word	0x200006dc
 80a2c14:	200006d8 	.word	0x200006d8
 80a2c18:	200006d4 	.word	0x200006d4
 80a2c1c:	200006d0 	.word	0x200006d0
 80a2c20:	200006cc 	.word	0x200006cc

080a2c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2c24:	4b18      	ldr	r3, [pc, #96]	; (80a2c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2c26:	681a      	ldr	r2, [r3, #0]
 80a2c28:	07d1      	lsls	r1, r2, #31
 80a2c2a:	bf5c      	itt	pl
 80a2c2c:	2201      	movpl	r2, #1
 80a2c2e:	601a      	strpl	r2, [r3, #0]
 80a2c30:	4b16      	ldr	r3, [pc, #88]	; (80a2c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c32:	681a      	ldr	r2, [r3, #0]
 80a2c34:	07d2      	lsls	r2, r2, #31
 80a2c36:	bf5c      	itt	pl
 80a2c38:	2201      	movpl	r2, #1
 80a2c3a:	601a      	strpl	r2, [r3, #0]
 80a2c3c:	4b14      	ldr	r3, [pc, #80]	; (80a2c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c3e:	681a      	ldr	r2, [r3, #0]
 80a2c40:	07d0      	lsls	r0, r2, #31
 80a2c42:	bf5c      	itt	pl
 80a2c44:	2201      	movpl	r2, #1
 80a2c46:	601a      	strpl	r2, [r3, #0]
 80a2c48:	4b12      	ldr	r3, [pc, #72]	; (80a2c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2c4a:	681a      	ldr	r2, [r3, #0]
 80a2c4c:	07d1      	lsls	r1, r2, #31
 80a2c4e:	bf5c      	itt	pl
 80a2c50:	2201      	movpl	r2, #1
 80a2c52:	601a      	strpl	r2, [r3, #0]
 80a2c54:	4b10      	ldr	r3, [pc, #64]	; (80a2c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2c56:	681a      	ldr	r2, [r3, #0]
 80a2c58:	07d2      	lsls	r2, r2, #31
 80a2c5a:	bf5c      	itt	pl
 80a2c5c:	2201      	movpl	r2, #1
 80a2c5e:	601a      	strpl	r2, [r3, #0]
 80a2c60:	4b0e      	ldr	r3, [pc, #56]	; (80a2c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2c62:	681a      	ldr	r2, [r3, #0]
 80a2c64:	07d0      	lsls	r0, r2, #31
 80a2c66:	bf5c      	itt	pl
 80a2c68:	2201      	movpl	r2, #1
 80a2c6a:	601a      	strpl	r2, [r3, #0]
 80a2c6c:	4b0c      	ldr	r3, [pc, #48]	; (80a2ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2c6e:	681a      	ldr	r2, [r3, #0]
 80a2c70:	07d1      	lsls	r1, r2, #31
 80a2c72:	bf5c      	itt	pl
 80a2c74:	2201      	movpl	r2, #1
 80a2c76:	601a      	strpl	r2, [r3, #0]
 80a2c78:	4b0a      	ldr	r3, [pc, #40]	; (80a2ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2c7a:	681a      	ldr	r2, [r3, #0]
 80a2c7c:	07d2      	lsls	r2, r2, #31
 80a2c7e:	bf5c      	itt	pl
 80a2c80:	2201      	movpl	r2, #1
 80a2c82:	601a      	strpl	r2, [r3, #0]
 80a2c84:	4770      	bx	lr
 80a2c86:	bf00      	nop
 80a2c88:	20000708 	.word	0x20000708
 80a2c8c:	20000704 	.word	0x20000704
 80a2c90:	20000700 	.word	0x20000700
 80a2c94:	200006fc 	.word	0x200006fc
 80a2c98:	200006f8 	.word	0x200006f8
 80a2c9c:	200006f4 	.word	0x200006f4
 80a2ca0:	200006f0 	.word	0x200006f0
 80a2ca4:	200006ec 	.word	0x200006ec

080a2ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2ca8:	4b24      	ldr	r3, [pc, #144]	; (80a2d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2caa:	681a      	ldr	r2, [r3, #0]
 80a2cac:	07d0      	lsls	r0, r2, #31
 80a2cae:	bf5c      	itt	pl
 80a2cb0:	2201      	movpl	r2, #1
 80a2cb2:	601a      	strpl	r2, [r3, #0]
 80a2cb4:	4b22      	ldr	r3, [pc, #136]	; (80a2d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2cb6:	681a      	ldr	r2, [r3, #0]
 80a2cb8:	07d1      	lsls	r1, r2, #31
 80a2cba:	bf5c      	itt	pl
 80a2cbc:	2201      	movpl	r2, #1
 80a2cbe:	601a      	strpl	r2, [r3, #0]
 80a2cc0:	4b20      	ldr	r3, [pc, #128]	; (80a2d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2cc2:	681a      	ldr	r2, [r3, #0]
 80a2cc4:	07d2      	lsls	r2, r2, #31
 80a2cc6:	bf5c      	itt	pl
 80a2cc8:	2201      	movpl	r2, #1
 80a2cca:	601a      	strpl	r2, [r3, #0]
 80a2ccc:	4b1e      	ldr	r3, [pc, #120]	; (80a2d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2cce:	681a      	ldr	r2, [r3, #0]
 80a2cd0:	07d0      	lsls	r0, r2, #31
 80a2cd2:	bf5c      	itt	pl
 80a2cd4:	2201      	movpl	r2, #1
 80a2cd6:	601a      	strpl	r2, [r3, #0]
 80a2cd8:	4b1c      	ldr	r3, [pc, #112]	; (80a2d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2cda:	681a      	ldr	r2, [r3, #0]
 80a2cdc:	07d1      	lsls	r1, r2, #31
 80a2cde:	bf5c      	itt	pl
 80a2ce0:	2201      	movpl	r2, #1
 80a2ce2:	601a      	strpl	r2, [r3, #0]
 80a2ce4:	4b1a      	ldr	r3, [pc, #104]	; (80a2d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2ce6:	681a      	ldr	r2, [r3, #0]
 80a2ce8:	07d2      	lsls	r2, r2, #31
 80a2cea:	bf5c      	itt	pl
 80a2cec:	2201      	movpl	r2, #1
 80a2cee:	601a      	strpl	r2, [r3, #0]
 80a2cf0:	4b18      	ldr	r3, [pc, #96]	; (80a2d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2cf2:	681a      	ldr	r2, [r3, #0]
 80a2cf4:	07d0      	lsls	r0, r2, #31
 80a2cf6:	bf5c      	itt	pl
 80a2cf8:	2201      	movpl	r2, #1
 80a2cfa:	601a      	strpl	r2, [r3, #0]
 80a2cfc:	4b16      	ldr	r3, [pc, #88]	; (80a2d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2cfe:	681a      	ldr	r2, [r3, #0]
 80a2d00:	07d1      	lsls	r1, r2, #31
 80a2d02:	bf5c      	itt	pl
 80a2d04:	2201      	movpl	r2, #1
 80a2d06:	601a      	strpl	r2, [r3, #0]
 80a2d08:	4b14      	ldr	r3, [pc, #80]	; (80a2d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2d0a:	681a      	ldr	r2, [r3, #0]
 80a2d0c:	07d2      	lsls	r2, r2, #31
 80a2d0e:	bf5c      	itt	pl
 80a2d10:	2201      	movpl	r2, #1
 80a2d12:	601a      	strpl	r2, [r3, #0]
 80a2d14:	4b12      	ldr	r3, [pc, #72]	; (80a2d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2d16:	681a      	ldr	r2, [r3, #0]
 80a2d18:	07d0      	lsls	r0, r2, #31
 80a2d1a:	bf5c      	itt	pl
 80a2d1c:	2201      	movpl	r2, #1
 80a2d1e:	601a      	strpl	r2, [r3, #0]
 80a2d20:	4b10      	ldr	r3, [pc, #64]	; (80a2d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2d22:	681a      	ldr	r2, [r3, #0]
 80a2d24:	07d1      	lsls	r1, r2, #31
 80a2d26:	bf5c      	itt	pl
 80a2d28:	2201      	movpl	r2, #1
 80a2d2a:	601a      	strpl	r2, [r3, #0]
 80a2d2c:	4b0e      	ldr	r3, [pc, #56]	; (80a2d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2d2e:	681a      	ldr	r2, [r3, #0]
 80a2d30:	07d2      	lsls	r2, r2, #31
 80a2d32:	bf5c      	itt	pl
 80a2d34:	2201      	movpl	r2, #1
 80a2d36:	601a      	strpl	r2, [r3, #0]
 80a2d38:	4770      	bx	lr
 80a2d3a:	bf00      	nop
 80a2d3c:	20000738 	.word	0x20000738
 80a2d40:	20000734 	.word	0x20000734
 80a2d44:	20000730 	.word	0x20000730
 80a2d48:	2000072c 	.word	0x2000072c
 80a2d4c:	20000728 	.word	0x20000728
 80a2d50:	20000724 	.word	0x20000724
 80a2d54:	20000720 	.word	0x20000720
 80a2d58:	2000071c 	.word	0x2000071c
 80a2d5c:	20000718 	.word	0x20000718
 80a2d60:	20000714 	.word	0x20000714
 80a2d64:	20000710 	.word	0x20000710
 80a2d68:	2000070c 	.word	0x2000070c

080a2d6c <__aeabi_frsub>:
 80a2d6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2d70:	e002      	b.n	80a2d78 <__addsf3>
 80a2d72:	bf00      	nop

080a2d74 <__aeabi_fsub>:
 80a2d74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2d78 <__addsf3>:
 80a2d78:	0042      	lsls	r2, r0, #1
 80a2d7a:	bf1f      	itttt	ne
 80a2d7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2d80:	ea92 0f03 	teqne	r2, r3
 80a2d84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2d88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2d8c:	d06a      	beq.n	80a2e64 <__addsf3+0xec>
 80a2d8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2d92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2d96:	bfc1      	itttt	gt
 80a2d98:	18d2      	addgt	r2, r2, r3
 80a2d9a:	4041      	eorgt	r1, r0
 80a2d9c:	4048      	eorgt	r0, r1
 80a2d9e:	4041      	eorgt	r1, r0
 80a2da0:	bfb8      	it	lt
 80a2da2:	425b      	neglt	r3, r3
 80a2da4:	2b19      	cmp	r3, #25
 80a2da6:	bf88      	it	hi
 80a2da8:	4770      	bxhi	lr
 80a2daa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2dae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2db2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2db6:	bf18      	it	ne
 80a2db8:	4240      	negne	r0, r0
 80a2dba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2dbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2dc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2dc6:	bf18      	it	ne
 80a2dc8:	4249      	negne	r1, r1
 80a2dca:	ea92 0f03 	teq	r2, r3
 80a2dce:	d03f      	beq.n	80a2e50 <__addsf3+0xd8>
 80a2dd0:	f1a2 0201 	sub.w	r2, r2, #1
 80a2dd4:	fa41 fc03 	asr.w	ip, r1, r3
 80a2dd8:	eb10 000c 	adds.w	r0, r0, ip
 80a2ddc:	f1c3 0320 	rsb	r3, r3, #32
 80a2de0:	fa01 f103 	lsl.w	r1, r1, r3
 80a2de4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2de8:	d502      	bpl.n	80a2df0 <__addsf3+0x78>
 80a2dea:	4249      	negs	r1, r1
 80a2dec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2df0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2df4:	d313      	bcc.n	80a2e1e <__addsf3+0xa6>
 80a2df6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2dfa:	d306      	bcc.n	80a2e0a <__addsf3+0x92>
 80a2dfc:	0840      	lsrs	r0, r0, #1
 80a2dfe:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2e02:	f102 0201 	add.w	r2, r2, #1
 80a2e06:	2afe      	cmp	r2, #254	; 0xfe
 80a2e08:	d251      	bcs.n	80a2eae <__addsf3+0x136>
 80a2e0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2e12:	bf08      	it	eq
 80a2e14:	f020 0001 	biceq.w	r0, r0, #1
 80a2e18:	ea40 0003 	orr.w	r0, r0, r3
 80a2e1c:	4770      	bx	lr
 80a2e1e:	0049      	lsls	r1, r1, #1
 80a2e20:	eb40 0000 	adc.w	r0, r0, r0
 80a2e24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2e28:	f1a2 0201 	sub.w	r2, r2, #1
 80a2e2c:	d1ed      	bne.n	80a2e0a <__addsf3+0x92>
 80a2e2e:	fab0 fc80 	clz	ip, r0
 80a2e32:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2e36:	ebb2 020c 	subs.w	r2, r2, ip
 80a2e3a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2e3e:	bfaa      	itet	ge
 80a2e40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2e44:	4252      	neglt	r2, r2
 80a2e46:	4318      	orrge	r0, r3
 80a2e48:	bfbc      	itt	lt
 80a2e4a:	40d0      	lsrlt	r0, r2
 80a2e4c:	4318      	orrlt	r0, r3
 80a2e4e:	4770      	bx	lr
 80a2e50:	f092 0f00 	teq	r2, #0
 80a2e54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2e58:	bf06      	itte	eq
 80a2e5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2e5e:	3201      	addeq	r2, #1
 80a2e60:	3b01      	subne	r3, #1
 80a2e62:	e7b5      	b.n	80a2dd0 <__addsf3+0x58>
 80a2e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e6c:	bf18      	it	ne
 80a2e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2e72:	d021      	beq.n	80a2eb8 <__addsf3+0x140>
 80a2e74:	ea92 0f03 	teq	r2, r3
 80a2e78:	d004      	beq.n	80a2e84 <__addsf3+0x10c>
 80a2e7a:	f092 0f00 	teq	r2, #0
 80a2e7e:	bf08      	it	eq
 80a2e80:	4608      	moveq	r0, r1
 80a2e82:	4770      	bx	lr
 80a2e84:	ea90 0f01 	teq	r0, r1
 80a2e88:	bf1c      	itt	ne
 80a2e8a:	2000      	movne	r0, #0
 80a2e8c:	4770      	bxne	lr
 80a2e8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2e92:	d104      	bne.n	80a2e9e <__addsf3+0x126>
 80a2e94:	0040      	lsls	r0, r0, #1
 80a2e96:	bf28      	it	cs
 80a2e98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2e9c:	4770      	bx	lr
 80a2e9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2ea2:	bf3c      	itt	cc
 80a2ea4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2ea8:	4770      	bxcc	lr
 80a2eaa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2eae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2eb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2eb6:	4770      	bx	lr
 80a2eb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2ebc:	bf16      	itet	ne
 80a2ebe:	4608      	movne	r0, r1
 80a2ec0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2ec4:	4601      	movne	r1, r0
 80a2ec6:	0242      	lsls	r2, r0, #9
 80a2ec8:	bf06      	itte	eq
 80a2eca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2ece:	ea90 0f01 	teqeq	r0, r1
 80a2ed2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2ed6:	4770      	bx	lr

080a2ed8 <__aeabi_ui2f>:
 80a2ed8:	f04f 0300 	mov.w	r3, #0
 80a2edc:	e004      	b.n	80a2ee8 <__aeabi_i2f+0x8>
 80a2ede:	bf00      	nop

080a2ee0 <__aeabi_i2f>:
 80a2ee0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2ee4:	bf48      	it	mi
 80a2ee6:	4240      	negmi	r0, r0
 80a2ee8:	ea5f 0c00 	movs.w	ip, r0
 80a2eec:	bf08      	it	eq
 80a2eee:	4770      	bxeq	lr
 80a2ef0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2ef4:	4601      	mov	r1, r0
 80a2ef6:	f04f 0000 	mov.w	r0, #0
 80a2efa:	e01c      	b.n	80a2f36 <__aeabi_l2f+0x2a>

080a2efc <__aeabi_ul2f>:
 80a2efc:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f00:	bf08      	it	eq
 80a2f02:	4770      	bxeq	lr
 80a2f04:	f04f 0300 	mov.w	r3, #0
 80a2f08:	e00a      	b.n	80a2f20 <__aeabi_l2f+0x14>
 80a2f0a:	bf00      	nop

080a2f0c <__aeabi_l2f>:
 80a2f0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f10:	bf08      	it	eq
 80a2f12:	4770      	bxeq	lr
 80a2f14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2f18:	d502      	bpl.n	80a2f20 <__aeabi_l2f+0x14>
 80a2f1a:	4240      	negs	r0, r0
 80a2f1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f20:	ea5f 0c01 	movs.w	ip, r1
 80a2f24:	bf02      	ittt	eq
 80a2f26:	4684      	moveq	ip, r0
 80a2f28:	4601      	moveq	r1, r0
 80a2f2a:	2000      	moveq	r0, #0
 80a2f2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2f30:	bf08      	it	eq
 80a2f32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2f36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2f3a:	fabc f28c 	clz	r2, ip
 80a2f3e:	3a08      	subs	r2, #8
 80a2f40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2f44:	db10      	blt.n	80a2f68 <__aeabi_l2f+0x5c>
 80a2f46:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2f4a:	4463      	add	r3, ip
 80a2f4c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2f50:	f1c2 0220 	rsb	r2, r2, #32
 80a2f54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2f58:	fa20 f202 	lsr.w	r2, r0, r2
 80a2f5c:	eb43 0002 	adc.w	r0, r3, r2
 80a2f60:	bf08      	it	eq
 80a2f62:	f020 0001 	biceq.w	r0, r0, #1
 80a2f66:	4770      	bx	lr
 80a2f68:	f102 0220 	add.w	r2, r2, #32
 80a2f6c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2f70:	f1c2 0220 	rsb	r2, r2, #32
 80a2f74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2f78:	fa21 f202 	lsr.w	r2, r1, r2
 80a2f7c:	eb43 0002 	adc.w	r0, r3, r2
 80a2f80:	bf08      	it	eq
 80a2f82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2f86:	4770      	bx	lr

080a2f88 <__aeabi_fmul>:
 80a2f88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2f8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2f90:	bf1e      	ittt	ne
 80a2f92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2f96:	ea92 0f0c 	teqne	r2, ip
 80a2f9a:	ea93 0f0c 	teqne	r3, ip
 80a2f9e:	d06f      	beq.n	80a3080 <__aeabi_fmul+0xf8>
 80a2fa0:	441a      	add	r2, r3
 80a2fa2:	ea80 0c01 	eor.w	ip, r0, r1
 80a2fa6:	0240      	lsls	r0, r0, #9
 80a2fa8:	bf18      	it	ne
 80a2faa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2fae:	d01e      	beq.n	80a2fee <__aeabi_fmul+0x66>
 80a2fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2fb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2fb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2fbc:	fba0 3101 	umull	r3, r1, r0, r1
 80a2fc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2fc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2fc8:	bf3e      	ittt	cc
 80a2fca:	0049      	lslcc	r1, r1, #1
 80a2fcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2fd0:	005b      	lslcc	r3, r3, #1
 80a2fd2:	ea40 0001 	orr.w	r0, r0, r1
 80a2fd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2fda:	2afd      	cmp	r2, #253	; 0xfd
 80a2fdc:	d81d      	bhi.n	80a301a <__aeabi_fmul+0x92>
 80a2fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2fe2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2fe6:	bf08      	it	eq
 80a2fe8:	f020 0001 	biceq.w	r0, r0, #1
 80a2fec:	4770      	bx	lr
 80a2fee:	f090 0f00 	teq	r0, #0
 80a2ff2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2ff6:	bf08      	it	eq
 80a2ff8:	0249      	lsleq	r1, r1, #9
 80a2ffa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2ffe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3002:	3a7f      	subs	r2, #127	; 0x7f
 80a3004:	bfc2      	ittt	gt
 80a3006:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a300a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a300e:	4770      	bxgt	lr
 80a3010:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3014:	f04f 0300 	mov.w	r3, #0
 80a3018:	3a01      	subs	r2, #1
 80a301a:	dc5d      	bgt.n	80a30d8 <__aeabi_fmul+0x150>
 80a301c:	f112 0f19 	cmn.w	r2, #25
 80a3020:	bfdc      	itt	le
 80a3022:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3026:	4770      	bxle	lr
 80a3028:	f1c2 0200 	rsb	r2, r2, #0
 80a302c:	0041      	lsls	r1, r0, #1
 80a302e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3032:	f1c2 0220 	rsb	r2, r2, #32
 80a3036:	fa00 fc02 	lsl.w	ip, r0, r2
 80a303a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a303e:	f140 0000 	adc.w	r0, r0, #0
 80a3042:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3046:	bf08      	it	eq
 80a3048:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a304c:	4770      	bx	lr
 80a304e:	f092 0f00 	teq	r2, #0
 80a3052:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3056:	bf02      	ittt	eq
 80a3058:	0040      	lsleq	r0, r0, #1
 80a305a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a305e:	3a01      	subeq	r2, #1
 80a3060:	d0f9      	beq.n	80a3056 <__aeabi_fmul+0xce>
 80a3062:	ea40 000c 	orr.w	r0, r0, ip
 80a3066:	f093 0f00 	teq	r3, #0
 80a306a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a306e:	bf02      	ittt	eq
 80a3070:	0049      	lsleq	r1, r1, #1
 80a3072:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3076:	3b01      	subeq	r3, #1
 80a3078:	d0f9      	beq.n	80a306e <__aeabi_fmul+0xe6>
 80a307a:	ea41 010c 	orr.w	r1, r1, ip
 80a307e:	e78f      	b.n	80a2fa0 <__aeabi_fmul+0x18>
 80a3080:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3084:	ea92 0f0c 	teq	r2, ip
 80a3088:	bf18      	it	ne
 80a308a:	ea93 0f0c 	teqne	r3, ip
 80a308e:	d00a      	beq.n	80a30a6 <__aeabi_fmul+0x11e>
 80a3090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3094:	bf18      	it	ne
 80a3096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a309a:	d1d8      	bne.n	80a304e <__aeabi_fmul+0xc6>
 80a309c:	ea80 0001 	eor.w	r0, r0, r1
 80a30a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a30a4:	4770      	bx	lr
 80a30a6:	f090 0f00 	teq	r0, #0
 80a30aa:	bf17      	itett	ne
 80a30ac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a30b0:	4608      	moveq	r0, r1
 80a30b2:	f091 0f00 	teqne	r1, #0
 80a30b6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a30ba:	d014      	beq.n	80a30e6 <__aeabi_fmul+0x15e>
 80a30bc:	ea92 0f0c 	teq	r2, ip
 80a30c0:	d101      	bne.n	80a30c6 <__aeabi_fmul+0x13e>
 80a30c2:	0242      	lsls	r2, r0, #9
 80a30c4:	d10f      	bne.n	80a30e6 <__aeabi_fmul+0x15e>
 80a30c6:	ea93 0f0c 	teq	r3, ip
 80a30ca:	d103      	bne.n	80a30d4 <__aeabi_fmul+0x14c>
 80a30cc:	024b      	lsls	r3, r1, #9
 80a30ce:	bf18      	it	ne
 80a30d0:	4608      	movne	r0, r1
 80a30d2:	d108      	bne.n	80a30e6 <__aeabi_fmul+0x15e>
 80a30d4:	ea80 0001 	eor.w	r0, r0, r1
 80a30d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a30dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a30e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a30e4:	4770      	bx	lr
 80a30e6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a30ea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a30ee:	4770      	bx	lr

080a30f0 <__aeabi_fdiv>:
 80a30f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a30f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a30f8:	bf1e      	ittt	ne
 80a30fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a30fe:	ea92 0f0c 	teqne	r2, ip
 80a3102:	ea93 0f0c 	teqne	r3, ip
 80a3106:	d069      	beq.n	80a31dc <__aeabi_fdiv+0xec>
 80a3108:	eba2 0203 	sub.w	r2, r2, r3
 80a310c:	ea80 0c01 	eor.w	ip, r0, r1
 80a3110:	0249      	lsls	r1, r1, #9
 80a3112:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3116:	d037      	beq.n	80a3188 <__aeabi_fdiv+0x98>
 80a3118:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a311c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3120:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3124:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3128:	428b      	cmp	r3, r1
 80a312a:	bf38      	it	cc
 80a312c:	005b      	lslcc	r3, r3, #1
 80a312e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3132:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3136:	428b      	cmp	r3, r1
 80a3138:	bf24      	itt	cs
 80a313a:	1a5b      	subcs	r3, r3, r1
 80a313c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3140:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3144:	bf24      	itt	cs
 80a3146:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a314a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a314e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3152:	bf24      	itt	cs
 80a3154:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3158:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a315c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3160:	bf24      	itt	cs
 80a3162:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3166:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a316a:	011b      	lsls	r3, r3, #4
 80a316c:	bf18      	it	ne
 80a316e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3172:	d1e0      	bne.n	80a3136 <__aeabi_fdiv+0x46>
 80a3174:	2afd      	cmp	r2, #253	; 0xfd
 80a3176:	f63f af50 	bhi.w	80a301a <__aeabi_fmul+0x92>
 80a317a:	428b      	cmp	r3, r1
 80a317c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3180:	bf08      	it	eq
 80a3182:	f020 0001 	biceq.w	r0, r0, #1
 80a3186:	4770      	bx	lr
 80a3188:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a318c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3190:	327f      	adds	r2, #127	; 0x7f
 80a3192:	bfc2      	ittt	gt
 80a3194:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3198:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a319c:	4770      	bxgt	lr
 80a319e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31a2:	f04f 0300 	mov.w	r3, #0
 80a31a6:	3a01      	subs	r2, #1
 80a31a8:	e737      	b.n	80a301a <__aeabi_fmul+0x92>
 80a31aa:	f092 0f00 	teq	r2, #0
 80a31ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a31b2:	bf02      	ittt	eq
 80a31b4:	0040      	lsleq	r0, r0, #1
 80a31b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a31ba:	3a01      	subeq	r2, #1
 80a31bc:	d0f9      	beq.n	80a31b2 <__aeabi_fdiv+0xc2>
 80a31be:	ea40 000c 	orr.w	r0, r0, ip
 80a31c2:	f093 0f00 	teq	r3, #0
 80a31c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a31ca:	bf02      	ittt	eq
 80a31cc:	0049      	lsleq	r1, r1, #1
 80a31ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a31d2:	3b01      	subeq	r3, #1
 80a31d4:	d0f9      	beq.n	80a31ca <__aeabi_fdiv+0xda>
 80a31d6:	ea41 010c 	orr.w	r1, r1, ip
 80a31da:	e795      	b.n	80a3108 <__aeabi_fdiv+0x18>
 80a31dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a31e0:	ea92 0f0c 	teq	r2, ip
 80a31e4:	d108      	bne.n	80a31f8 <__aeabi_fdiv+0x108>
 80a31e6:	0242      	lsls	r2, r0, #9
 80a31e8:	f47f af7d 	bne.w	80a30e6 <__aeabi_fmul+0x15e>
 80a31ec:	ea93 0f0c 	teq	r3, ip
 80a31f0:	f47f af70 	bne.w	80a30d4 <__aeabi_fmul+0x14c>
 80a31f4:	4608      	mov	r0, r1
 80a31f6:	e776      	b.n	80a30e6 <__aeabi_fmul+0x15e>
 80a31f8:	ea93 0f0c 	teq	r3, ip
 80a31fc:	d104      	bne.n	80a3208 <__aeabi_fdiv+0x118>
 80a31fe:	024b      	lsls	r3, r1, #9
 80a3200:	f43f af4c 	beq.w	80a309c <__aeabi_fmul+0x114>
 80a3204:	4608      	mov	r0, r1
 80a3206:	e76e      	b.n	80a30e6 <__aeabi_fmul+0x15e>
 80a3208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a320c:	bf18      	it	ne
 80a320e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3212:	d1ca      	bne.n	80a31aa <__aeabi_fdiv+0xba>
 80a3214:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3218:	f47f af5c 	bne.w	80a30d4 <__aeabi_fmul+0x14c>
 80a321c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3220:	f47f af3c 	bne.w	80a309c <__aeabi_fmul+0x114>
 80a3224:	e75f      	b.n	80a30e6 <__aeabi_fmul+0x15e>
 80a3226:	bf00      	nop

080a3228 <__gesf2>:
 80a3228:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a322c:	e006      	b.n	80a323c <__cmpsf2+0x4>
 80a322e:	bf00      	nop

080a3230 <__lesf2>:
 80a3230:	f04f 0c01 	mov.w	ip, #1
 80a3234:	e002      	b.n	80a323c <__cmpsf2+0x4>
 80a3236:	bf00      	nop

080a3238 <__cmpsf2>:
 80a3238:	f04f 0c01 	mov.w	ip, #1
 80a323c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3240:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a324c:	bf18      	it	ne
 80a324e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3252:	d011      	beq.n	80a3278 <__cmpsf2+0x40>
 80a3254:	b001      	add	sp, #4
 80a3256:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a325a:	bf18      	it	ne
 80a325c:	ea90 0f01 	teqne	r0, r1
 80a3260:	bf58      	it	pl
 80a3262:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3266:	bf88      	it	hi
 80a3268:	17c8      	asrhi	r0, r1, #31
 80a326a:	bf38      	it	cc
 80a326c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3270:	bf18      	it	ne
 80a3272:	f040 0001 	orrne.w	r0, r0, #1
 80a3276:	4770      	bx	lr
 80a3278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a327c:	d102      	bne.n	80a3284 <__cmpsf2+0x4c>
 80a327e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3282:	d105      	bne.n	80a3290 <__cmpsf2+0x58>
 80a3284:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3288:	d1e4      	bne.n	80a3254 <__cmpsf2+0x1c>
 80a328a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a328e:	d0e1      	beq.n	80a3254 <__cmpsf2+0x1c>
 80a3290:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3294:	4770      	bx	lr
 80a3296:	bf00      	nop

080a3298 <__aeabi_cfrcmple>:
 80a3298:	4684      	mov	ip, r0
 80a329a:	4608      	mov	r0, r1
 80a329c:	4661      	mov	r1, ip
 80a329e:	e7ff      	b.n	80a32a0 <__aeabi_cfcmpeq>

080a32a0 <__aeabi_cfcmpeq>:
 80a32a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a32a2:	f7ff ffc9 	bl	80a3238 <__cmpsf2>
 80a32a6:	2800      	cmp	r0, #0
 80a32a8:	bf48      	it	mi
 80a32aa:	f110 0f00 	cmnmi.w	r0, #0
 80a32ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a32b0 <__aeabi_fcmpeq>:
 80a32b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a32b4:	f7ff fff4 	bl	80a32a0 <__aeabi_cfcmpeq>
 80a32b8:	bf0c      	ite	eq
 80a32ba:	2001      	moveq	r0, #1
 80a32bc:	2000      	movne	r0, #0
 80a32be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a32c2:	bf00      	nop

080a32c4 <__aeabi_fcmplt>:
 80a32c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a32c8:	f7ff ffea 	bl	80a32a0 <__aeabi_cfcmpeq>
 80a32cc:	bf34      	ite	cc
 80a32ce:	2001      	movcc	r0, #1
 80a32d0:	2000      	movcs	r0, #0
 80a32d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a32d6:	bf00      	nop

080a32d8 <__aeabi_fcmple>:
 80a32d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a32dc:	f7ff ffe0 	bl	80a32a0 <__aeabi_cfcmpeq>
 80a32e0:	bf94      	ite	ls
 80a32e2:	2001      	movls	r0, #1
 80a32e4:	2000      	movhi	r0, #0
 80a32e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a32ea:	bf00      	nop

080a32ec <__aeabi_fcmpge>:
 80a32ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a32f0:	f7ff ffd2 	bl	80a3298 <__aeabi_cfrcmple>
 80a32f4:	bf94      	ite	ls
 80a32f6:	2001      	movls	r0, #1
 80a32f8:	2000      	movhi	r0, #0
 80a32fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a32fe:	bf00      	nop

080a3300 <__aeabi_fcmpgt>:
 80a3300:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3304:	f7ff ffc8 	bl	80a3298 <__aeabi_cfrcmple>
 80a3308:	bf34      	ite	cc
 80a330a:	2001      	movcc	r0, #1
 80a330c:	2000      	movcs	r0, #0
 80a330e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3312:	bf00      	nop

080a3314 <__aeabi_f2iz>:
 80a3314:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3318:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a331c:	d30f      	bcc.n	80a333e <__aeabi_f2iz+0x2a>
 80a331e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a3322:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3326:	d90d      	bls.n	80a3344 <__aeabi_f2iz+0x30>
 80a3328:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a332c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3330:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3334:	fa23 f002 	lsr.w	r0, r3, r2
 80a3338:	bf18      	it	ne
 80a333a:	4240      	negne	r0, r0
 80a333c:	4770      	bx	lr
 80a333e:	f04f 0000 	mov.w	r0, #0
 80a3342:	4770      	bx	lr
 80a3344:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3348:	d101      	bne.n	80a334e <__aeabi_f2iz+0x3a>
 80a334a:	0242      	lsls	r2, r0, #9
 80a334c:	d105      	bne.n	80a335a <__aeabi_f2iz+0x46>
 80a334e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a3352:	bf08      	it	eq
 80a3354:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3358:	4770      	bx	lr
 80a335a:	f04f 0000 	mov.w	r0, #0
 80a335e:	4770      	bx	lr

080a3360 <__cxa_atexit>:
 80a3360:	b510      	push	{r4, lr}
 80a3362:	4c05      	ldr	r4, [pc, #20]	; (80a3378 <__cxa_atexit+0x18>)
 80a3364:	4613      	mov	r3, r2
 80a3366:	b12c      	cbz	r4, 80a3374 <__cxa_atexit+0x14>
 80a3368:	460a      	mov	r2, r1
 80a336a:	4601      	mov	r1, r0
 80a336c:	2002      	movs	r0, #2
 80a336e:	f3af 8000 	nop.w
 80a3372:	bd10      	pop	{r4, pc}
 80a3374:	4620      	mov	r0, r4
 80a3376:	bd10      	pop	{r4, pc}
 80a3378:	00000000 	.word	0x00000000

080a337c <memcpy>:
 80a337c:	b510      	push	{r4, lr}
 80a337e:	1e43      	subs	r3, r0, #1
 80a3380:	440a      	add	r2, r1
 80a3382:	4291      	cmp	r1, r2
 80a3384:	d004      	beq.n	80a3390 <memcpy+0x14>
 80a3386:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a338a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a338e:	e7f8      	b.n	80a3382 <memcpy+0x6>
 80a3390:	bd10      	pop	{r4, pc}

080a3392 <memset>:
 80a3392:	4603      	mov	r3, r0
 80a3394:	4402      	add	r2, r0
 80a3396:	4293      	cmp	r3, r2
 80a3398:	d002      	beq.n	80a33a0 <memset+0xe>
 80a339a:	f803 1b01 	strb.w	r1, [r3], #1
 80a339e:	e7fa      	b.n	80a3396 <memset+0x4>
 80a33a0:	4770      	bx	lr
	...

080a33a4 <srand>:
 80a33a4:	b538      	push	{r3, r4, r5, lr}
 80a33a6:	4b12      	ldr	r3, [pc, #72]	; (80a33f0 <srand+0x4c>)
 80a33a8:	4605      	mov	r5, r0
 80a33aa:	681c      	ldr	r4, [r3, #0]
 80a33ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a33ae:	b9d3      	cbnz	r3, 80a33e6 <srand+0x42>
 80a33b0:	2018      	movs	r0, #24
 80a33b2:	f7fe fc23 	bl	80a1bfc <malloc>
 80a33b6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a33ba:	63a0      	str	r0, [r4, #56]	; 0x38
 80a33bc:	8003      	strh	r3, [r0, #0]
 80a33be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a33c2:	8043      	strh	r3, [r0, #2]
 80a33c4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a33c8:	8083      	strh	r3, [r0, #4]
 80a33ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a33ce:	80c3      	strh	r3, [r0, #6]
 80a33d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a33d4:	8103      	strh	r3, [r0, #8]
 80a33d6:	2305      	movs	r3, #5
 80a33d8:	8143      	strh	r3, [r0, #10]
 80a33da:	230b      	movs	r3, #11
 80a33dc:	8183      	strh	r3, [r0, #12]
 80a33de:	2201      	movs	r2, #1
 80a33e0:	2300      	movs	r3, #0
 80a33e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a33e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a33e8:	2200      	movs	r2, #0
 80a33ea:	611d      	str	r5, [r3, #16]
 80a33ec:	615a      	str	r2, [r3, #20]
 80a33ee:	bd38      	pop	{r3, r4, r5, pc}
 80a33f0:	20000080 	.word	0x20000080

080a33f4 <strlen>:
 80a33f4:	4603      	mov	r3, r0
 80a33f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a33fa:	2a00      	cmp	r2, #0
 80a33fc:	d1fb      	bne.n	80a33f6 <strlen+0x2>
 80a33fe:	1a18      	subs	r0, r3, r0
 80a3400:	3801      	subs	r0, #1
 80a3402:	4770      	bx	lr

080a3404 <dynalib_user>:
 80a3404:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3414:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a3424:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a3434:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a3444:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a3454:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a3464:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a3474:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a3484:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a3494:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a34a4:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a34b4:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a34c4:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a34d4:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a34e4:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a34f4:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a3504:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a3514:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a3524:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a3534:	4853 5300 4554 2050 4952 4847 2054 4f53     SH.STEP RIGHT SO
 80a3544:	4f4c 5300 4554 2050 454c 5446 5320 4c4f     LO.STEP LEFT SOL
 80a3554:	004f 5453 5045 5220 4749 5448 4420 4f55     O.STEP RIGHT DUO
 80a3564:	5300 4554 2050 454c 5446 4420 4f55 5400     .STEP LEFT DUO.T
 80a3574:	746f 6c61 6d20 766f 6d65 6e65 3a74 0020     otal movement: .
 80a3584:	7053 6565 2064 696c 696d 2074 203a 6600     Speed limit : .f
 80a3594:	756c 5878 3a20 0020 6c66 7875 2059 203a     luxX : .fluxY : 
 80a35a4:	6600 756c 5a78 3a20 0020 696c 6e67 6874     .fluxZ : .lignth
 80a35b4:	6e69 0067 3a20 203a 0020 7574 6e72 6e69     ing. ::  .turnin
 80a35c4:	2067 666f 0066 6863 6365 6e6b 6d75 0000     g off.checknum..

080a35d4 <CSWTCH.215>:
 80a35d4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a35e4:	0050 0000                                   P...

080a35e8 <_ZTV7TwoWire>:
	...
 80a35f0:	1c45 080a 1c8f 080a 1c67 080a 1c47 080a     E.......g...G...
 80a3600:	1c6f 080a 1c77 080a 1c7f 080a 1c87 080a     o...w...........

080a3610 <_ZTV9IPAddress>:
	...
 80a3618:	1cc9 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a3628:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3638:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3648:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3658:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3668:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3678:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3688:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3698:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a36a8:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a36b8:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a36c8:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a36d8:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a36e8:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a36f8:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a3708 <_ZTVN5spark12NetworkClassE>:
	...
 80a3710:	1da9 080a 1db3 080a 1dbd 080a 1dc7 080a     ................
 80a3720:	1dd1 080a 1ddd 080a 1de9 080a 1df5 080a     ................
 80a3730:	1dfd 080a 1e07 080a 1e11 080a               ............

080a373c <_ZTV8SPIClass>:
	...
 80a3744:	1fad 080a 1faf 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a3754:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3764:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3774:	0000 0000                                   ....

080a3778 <_ZTV3UDP>:
	...
 80a3780:	00b5 080a 00e3 080a 20eb 080a 220b 080a     ......... ..."..
 80a3790:	20e3 080a 2101 080a 211f 080a 2139 080a     . ...!...!..9!..
 80a37a0:	215b 080a 21a5 080a 21c7 080a 235d 080a     [!...!...!..]#..
 80a37b0:	2271 080a 20cd 080a 246d 080a 22d9 080a     q"... ..m$..."..
 80a37c0:	2395 080a 249b 080a 2235 080a 20d9 080a     .#...$..5"... ..
 80a37d0:	233d 080a 20df 080a 213b 080a fff0 ffff     =#... ..;!......
 80a37e0:	0000 0000 2153 080a                         ....S!..

080a37e8 <_ZTV11USARTSerial>:
	...
 80a37f0:	24d3 080a 2523 080a 2531 080a 1e8d 080a     .$..#%..1%......
 80a3800:	24e7 080a 2509 080a 24f5 080a 251d 080a     .$...%...$...%..
 80a3810:	24d5 080a 24d9 080a                         .$...$..

080a3818 <_ZTV9USBSerial>:
	...
 80a3820:	25d9 080a 2629 080a 2637 080a 1e8d 080a     .%..)&..7&......
 80a3830:	2615 080a 25db 080a 25f1 080a 2623 080a     .&...%...%..#&..
 80a3840:	2607 080a 25d5 080a                         .&...%..

080a3848 <_ZTVN5spark9WiFiClassE>:
	...
 80a3850:	2827 080a 281d 080a 2813 080a 2785 080a     '(...(...(...'..
 80a3860:	2807 080a 27fb 080a 27ef 080a 27e7 080a     .(...'...'...'..
 80a3870:	27dd 080a 27d3 080a 278f 080a               .'...'...'..

080a387c <__sf_fake_stdin>:
	...

080a389c <__sf_fake_stdout>:
	...

080a38bc <__sf_fake_stderr>:
	...
 80a38dc:	0043                                        C.

080a38de <link_const_variable_data_end>:
	...

080a38e0 <link_constructors_location>:
 80a38e0:	080a0389 	.word	0x080a0389
 80a38e4:	080a0445 	.word	0x080a0445
 80a38e8:	080a04ef 	.word	0x080a04ef
 80a38ec:	080a182d 	.word	0x080a182d
 80a38f0:	080a1d99 	.word	0x080a1d99
 80a38f4:	080a1e79 	.word	0x080a1e79
 80a38f8:	080a1f91 	.word	0x080a1f91
 80a38fc:	080a20a1 	.word	0x080a20a1
 80a3900:	080a20b9 	.word	0x080a20b9
 80a3904:	080a2831 	.word	0x080a2831
 80a3908:	080a2a59 	.word	0x080a2a59
 80a390c:	080a2a89 	.word	0x080a2a89
 80a3910:	080a2add 	.word	0x080a2add
 80a3914:	080a2ba1 	.word	0x080a2ba1
 80a3918:	080a2c25 	.word	0x080a2c25
 80a391c:	080a2ca9 	.word	0x080a2ca9
