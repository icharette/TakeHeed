
/Users/ninjacat/Documents/Particle/TakeHeed/receive/target/1.4.0/photon/receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002104  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2120  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005ec  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2190  080a2190  00022190  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a21b8  080a21b8  000221b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009c039  00000000  00000000  000221bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e2ab  00000000  00000000  000be1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000133ec  00000000  00000000  000cc4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d68  00000000  00000000  000df88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003080  00000000  00000000  000e15f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021e22  00000000  00000000  000e4674  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000202d1  00000000  00000000  00106496  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4c40  00000000  00000000  00126767  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b398  00000000  00000000  001cb3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fe2d 	bl	80a1c8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fe32 	bl	80a1ca2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2124 	.word	0x080a2124
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000658 	.word	0x20000658
 80a0058:	20000658 	.word	0x20000658

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa71 	bl	80a1544 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a20d8 	.word	0x080a20d8
 80a0084:	080a2114 	.word	0x080a2114

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b854 	b.w	80a0134 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8bf 	bl	80a0210 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba17 	b.w	80a14c8 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bbdf 	b.w	80a085c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bbe5 	b.w	80a086c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_Z4TESTR10OSCMessage>:
    receive();
}
//-----------------------//-----------------------//-----------------------//-----------------------SETUP

//-----------------------//-----------------------//-----------------------//-----------------------PARSED-METHODS
void TEST(OSCMessage &inMessag){
 80a00b4:	b508      	push	{r3, lr}
  Serial.println("Receiving message with object -test- and triggering TEST method.");
 80a00b6:	f001 f913 	bl	80a12e0 <_Z16_fetch_usbserialv>

}
 80a00ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}
//-----------------------//-----------------------//-----------------------//-----------------------SETUP

//-----------------------//-----------------------//-----------------------//-----------------------PARSED-METHODS
void TEST(OSCMessage &inMessag){
  Serial.println("Receiving message with object -test- and triggering TEST method.");
 80a00be:	4901      	ldr	r1, [pc, #4]	; (80a00c4 <_Z4TESTR10OSCMessage+0x10>)
 80a00c0:	f000 bd09 	b.w	80a0ad6 <_ZN5Print7printlnEPKc>
 80a00c4:	080a1d3c 	.word	0x080a1d3c

080a00c8 <_Z5STILLR10OSCMessage>:

}
void STILL(OSCMessage &inMessag){
 80a00c8:	b508      	push	{r3, lr}
  Serial.println("STILL");
 80a00ca:	f001 f909 	bl	80a12e0 <_Z16_fetch_usbserialv>

}
 80a00ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void TEST(OSCMessage &inMessag){
  Serial.println("Receiving message with object -test- and triggering TEST method.");

}
void STILL(OSCMessage &inMessag){
  Serial.println("STILL");
 80a00d2:	4901      	ldr	r1, [pc, #4]	; (80a00d8 <_Z5STILLR10OSCMessage+0x10>)
 80a00d4:	f000 bcff 	b.w	80a0ad6 <_ZN5Print7printlnEPKc>
 80a00d8:	080a1d7d 	.word	0x080a1d7d

080a00dc <_Z4MOVER10OSCMessage>:

}

void MOVE(OSCMessage &inMessag){
 80a00dc:	b508      	push	{r3, lr}
  Serial.println("MOVE");
 80a00de:	f001 f8ff 	bl	80a12e0 <_Z16_fetch_usbserialv>

}
 80a00e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("STILL");

}

void MOVE(OSCMessage &inMessag){
  Serial.println("MOVE");
 80a00e6:	4901      	ldr	r1, [pc, #4]	; (80a00ec <_Z4MOVER10OSCMessage+0x10>)
 80a00e8:	f000 bcf5 	b.w	80a0ad6 <_ZN5Print7printlnEPKc>
 80a00ec:	080a1d83 	.word	0x080a1d83

080a00f0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00f0:	b510      	push	{r4, lr}
 80a00f2:	4604      	mov	r4, r0
 80a00f4:	4b05      	ldr	r3, [pc, #20]	; (80a010c <_ZN3UDPD1Ev+0x1c>)
 80a00f6:	6003      	str	r3, [r0, #0]
 80a00f8:	3364      	adds	r3, #100	; 0x64
 80a00fa:	6103      	str	r3, [r0, #16]
 80a00fc:	f000 fe66 	bl	80a0dcc <_ZN3UDP4stopEv>
 80a0100:	4620      	mov	r0, r4
 80a0102:	f000 ff9b 	bl	80a103c <_ZN3UDP13releaseBufferEv>
 80a0106:	4620      	mov	r0, r4
 80a0108:	bd10      	pop	{r4, pc}
 80a010a:	bf00      	nop
 80a010c:	080a1f78 	.word	0x080a1f78

080a0110 <_ZN9IPAddressD0Ev>:
 80a0110:	b510      	push	{r4, lr}
 80a0112:	4604      	mov	r4, r0
 80a0114:	2118      	movs	r1, #24
 80a0116:	f001 fa80 	bl	80a161a <_ZdlPvj>
 80a011a:	4620      	mov	r0, r4
 80a011c:	bd10      	pop	{r4, pc}

080a011e <_ZN3UDPD0Ev>:
 80a011e:	b510      	push	{r4, lr}
 80a0120:	4604      	mov	r4, r0
 80a0122:	f7ff ffe5 	bl	80a00f0 <_ZN3UDPD1Ev>
 80a0126:	4620      	mov	r0, r4
 80a0128:	214c      	movs	r1, #76	; 0x4c
 80a012a:	f001 fa76 	bl	80a161a <_ZdlPvj>
 80a012e:	4620      	mov	r0, r4
 80a0130:	bd10      	pop	{r4, pc}
	...

080a0134 <setup>:
SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
void OnTimer(void);   //Prototype for timer callback method


//-----------------------//-----------------------//-----------------------//-----------------------SETUP
void setup() {
 80a0134:	b570      	push	{r4, r5, r6, lr}
 80a0136:	b096      	sub	sp, #88	; 0x58
  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0138:	f001 f8d2 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a013c:	f001 f8b7 	bl	80a12ae <_ZN9USBSerialcvbEv>
 80a0140:	2800      	cmp	r0, #0
 80a0142:	d0f9      	beq.n	80a0138 <setup+0x4>
 80a0144:	4c2b      	ldr	r4, [pc, #172]	; (80a01f4 <setup+0xc0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0146:	2300      	movs	r3, #0
 80a0148:	461a      	mov	r2, r3
 80a014a:	4619      	mov	r1, r3
 80a014c:	6860      	ldr	r0, [r4, #4]
 80a014e:	f000 fb25 	bl	80a079c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0152:	2200      	movs	r2, #0
 80a0154:	4611      	mov	r1, r2
 80a0156:	6860      	ldr	r0, [r4, #4]
 80a0158:	4d26      	ldr	r5, [pc, #152]	; (80a01f4 <setup+0xc0>)
 80a015a:	f000 fb37 	bl	80a07cc <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a015e:	2800      	cmp	r0, #0
 80a0160:	d0f7      	beq.n	80a0152 <setup+0x1e>
  Serial.println("Setup");
 80a0162:	f001 f8bd 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a0166:	4924      	ldr	r1, [pc, #144]	; (80a01f8 <setup+0xc4>)
 80a0168:	f000 fcb5 	bl	80a0ad6 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a016c:	4b23      	ldr	r3, [pc, #140]	; (80a01fc <setup+0xc8>)
 80a016e:	2200      	movs	r2, #0
 80a0170:	8819      	ldrh	r1, [r3, #0]
 80a0172:	4823      	ldr	r0, [pc, #140]	; (80a0200 <setup+0xcc>)
 80a0174:	f000 fe05 	bl	80a0d82 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a0178:	2300      	movs	r3, #0
 80a017a:	4619      	mov	r1, r3
 80a017c:	4a21      	ldr	r2, [pc, #132]	; (80a0204 <setup+0xd0>)
 80a017e:	6868      	ldr	r0, [r5, #4]
 80a0180:	f000 fb5c 	bl	80a083c <network_set_hostname>
  WiFi.setHostname("HQRouter_RECEIVE");
  Serial.println(WiFi.hostname());
 80a0184:	f001 f8ac 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a0188:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a018a:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a018c:	2240      	movs	r2, #64	; 0x40
 80a018e:	2100      	movs	r1, #0
 80a0190:	a806      	add	r0, sp, #24
 80a0192:	f001 fd86 	bl	80a1ca2 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0196:	2340      	movs	r3, #64	; 0x40
 80a0198:	aa06      	add	r2, sp, #24
 80a019a:	4621      	mov	r1, r4
 80a019c:	9400      	str	r4, [sp, #0]
 80a019e:	6868      	ldr	r0, [r5, #4]
 80a01a0:	f000 fb54 	bl	80a084c <network_get_hostname>
        return String(buf);
 80a01a4:	a906      	add	r1, sp, #24
 80a01a6:	a802      	add	r0, sp, #8
 80a01a8:	f000 fd57 	bl	80a0c5a <_ZN6StringC1EPK19__FlashStringHelper>
 80a01ac:	9902      	ldr	r1, [sp, #8]
 80a01ae:	4630      	mov	r0, r6
 80a01b0:	f000 fc91 	bl	80a0ad6 <_ZN5Print7printlnEPKc>
 80a01b4:	a802      	add	r0, sp, #8
 80a01b6:	f000 fd09 	bl	80a0bcc <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP()); 
 80a01ba:	f001 f891 	bl	80a12e0 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01be:	4622      	mov	r2, r4
 80a01c0:	4606      	mov	r6, r0
 80a01c2:	4621      	mov	r1, r4
 80a01c4:	6868      	ldr	r0, [r5, #4]
 80a01c6:	f000 fae1 	bl	80a078c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01ca:	1c81      	adds	r1, r0, #2
 80a01cc:	a806      	add	r0, sp, #24
 80a01ce:	f000 fb8d 	bl	80a08ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01d2:	a906      	add	r1, sp, #24
 80a01d4:	4630      	mov	r0, r6
 80a01d6:	f000 fc92 	bl	80a0afe <_ZN5Print7printlnERK9Printable>
  Serial.begin(9600);
 80a01da:	f001 f881 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a01de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01e2:	f001 f85d 	bl	80a12a0 <_ZN9USBSerial5beginEl>

   updateTimer.SetCallback(OnTimer);
 80a01e6:	4908      	ldr	r1, [pc, #32]	; (80a0208 <setup+0xd4>)
 80a01e8:	4808      	ldr	r0, [pc, #32]	; (80a020c <setup+0xd8>)
 80a01ea:	f000 f8e9 	bl	80a03c0 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>
  }
 80a01ee:	b016      	add	sp, #88	; 0x58
 80a01f0:	bd70      	pop	{r4, r5, r6, pc}
 80a01f2:	bf00      	nop
 80a01f4:	2000056c 	.word	0x2000056c
 80a01f8:	080a1d88 	.word	0x080a1d88
 80a01fc:	20000000 	.word	0x20000000
 80a0200:	20000084 	.word	0x20000084
 80a0204:	080a1d8e 	.word	0x080a1d8e
 80a0208:	080a02f1 	.word	0x080a02f1
 80a020c:	20000070 	.word	0x20000070

080a0210 <loop>:



//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
 updateTimer.Update();
 80a0210:	4801      	ldr	r0, [pc, #4]	; (80a0218 <loop+0x8>)
 80a0212:	f000 b8c9 	b.w	80a03a8 <_ZN20SparkCorePolledTimer6UpdateEv>
 80a0216:	bf00      	nop
 80a0218:	20000070 	.word	0x20000070

080a021c <_Z7receivev>:

//-----------------------//-----------------------//-----------------------//-----------------------LOOPING

//-----------------------//-----------------------//-----------------------//-----------------------RECEIVE

void receive(){
 80a021c:	b530      	push	{r4, r5, lr}
 80a021e:	b097      	sub	sp, #92	; 0x5c
int size = 0;
     OSCMessage inMessage;
 80a0220:	a801      	add	r0, sp, #4
 80a0222:	f000 f8d9 	bl	80a03d8 <_ZN10OSCMessageC1Ev>
      
      Serial.println("LISTENING---------------");
 80a0226:	f001 f85b 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a022a:	4925      	ldr	r1, [pc, #148]	; (80a02c0 <_Z7receivev+0xa4>)
 80a022c:	f000 fc53 	bl	80a0ad6 <_ZN5Print7printlnEPKc>
       
  // Check if data has been received
      if ((size = udp.parsePacket()) > 0) {
 80a0230:	2100      	movs	r1, #0
 80a0232:	4824      	ldr	r0, [pc, #144]	; (80a02c4 <_Z7receivev+0xa8>)
 80a0234:	f000 ff45 	bl	80a10c2 <_ZN3UDP11parsePacketEm>
 80a0238:	1e04      	subs	r4, r0, #0
 80a023a:	dd37      	ble.n	80a02ac <_Z7receivev+0x90>
        Serial.println("receiving message");
 80a023c:	f001 f850 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a0240:	4921      	ldr	r1, [pc, #132]	; (80a02c8 <_Z7receivev+0xac>)
 80a0242:	f000 fc48 	bl	80a0ad6 <_ZN5Print7printlnEPKc>

        char c;
        //printing message to console
        while(size--){
 80a0246:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a024a:	d312      	bcc.n	80a0272 <_Z7receivev+0x56>
          Serial.println("---in while---");
 80a024c:	f001 f848 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a0250:	491e      	ldr	r1, [pc, #120]	; (80a02cc <_Z7receivev+0xb0>)
 80a0252:	f000 fc40 	bl	80a0ad6 <_ZN5Print7printlnEPKc>
          c=udp.read();
 80a0256:	481b      	ldr	r0, [pc, #108]	; (80a02c4 <_Z7receivev+0xa8>)
 80a0258:	f000 fd66 	bl	80a0d28 <_ZN3UDP4readEv>
 80a025c:	b2c5      	uxtb	r5, r0
          Serial.println(c);
 80a025e:	f001 f83f 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a0262:	4629      	mov	r1, r5
 80a0264:	f000 fc41 	bl	80a0aea <_ZN5Print7printlnEc>
          inMessage.fill(c);
 80a0268:	4629      	mov	r1, r5
 80a026a:	a801      	add	r0, sp, #4
 80a026c:	f000 f8ef 	bl	80a044e <_ZN10OSCMessage4fillEc>
      if ((size = udp.parsePacket()) > 0) {
        Serial.println("receiving message");

        char c;
        //printing message to console
        while(size--){
 80a0270:	e7e9      	b.n	80a0246 <_Z7receivev+0x2a>
          Serial.println(c);
          inMessage.fill(c);
          
        }
  //if there is somtheing to parse
        if(inMessage.parse()){
 80a0272:	a801      	add	r0, sp, #4
 80a0274:	f000 f8fa 	bl	80a046c <_ZN10OSCMessage5parseEv>
 80a0278:	b198      	cbz	r0, 80a02a2 <_Z7receivev+0x86>

        Serial.println("PARSING");
 80a027a:	f001 f831 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a027e:	4914      	ldr	r1, [pc, #80]	; (80a02d0 <_Z7receivev+0xb4>)
 80a0280:	f000 fc29 	bl	80a0ad6 <_ZN5Print7printlnEPKc>
          //trigger method according to message received
          inMessage.route("test", TEST);
 80a0284:	4a13      	ldr	r2, [pc, #76]	; (80a02d4 <_Z7receivev+0xb8>)
 80a0286:	4914      	ldr	r1, [pc, #80]	; (80a02d8 <_Z7receivev+0xbc>)
 80a0288:	a801      	add	r0, sp, #4
 80a028a:	f000 f96b 	bl	80a0564 <_ZN10OSCMessage5routeEPKcPFvRS_E>
          inMessage.route("still", STILL);
 80a028e:	4a13      	ldr	r2, [pc, #76]	; (80a02dc <_Z7receivev+0xc0>)
 80a0290:	4913      	ldr	r1, [pc, #76]	; (80a02e0 <_Z7receivev+0xc4>)
 80a0292:	a801      	add	r0, sp, #4
 80a0294:	f000 f966 	bl	80a0564 <_ZN10OSCMessage5routeEPKcPFvRS_E>
          inMessage.route("/move", MOVE);
 80a0298:	4a12      	ldr	r2, [pc, #72]	; (80a02e4 <_Z7receivev+0xc8>)
 80a029a:	4913      	ldr	r1, [pc, #76]	; (80a02e8 <_Z7receivev+0xcc>)
 80a029c:	a801      	add	r0, sp, #4
 80a029e:	f000 f961 	bl	80a0564 <_ZN10OSCMessage5routeEPKcPFvRS_E>
        }
        Serial.println();
 80a02a2:	f001 f81d 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a02a6:	f000 fc0a 	bl	80a0abe <_ZN5Print7printlnEv>
 80a02aa:	e004      	b.n	80a02b6 <_Z7receivev+0x9a>
      }else{
        Serial.println("No message");
 80a02ac:	f001 f818 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a02b0:	490e      	ldr	r1, [pc, #56]	; (80a02ec <_Z7receivev+0xd0>)
 80a02b2:	f000 fc10 	bl	80a0ad6 <_ZN5Print7printlnEPKc>

//-----------------------//-----------------------//-----------------------//-----------------------RECEIVE

void receive(){
int size = 0;
     OSCMessage inMessage;
 80a02b6:	a801      	add	r0, sp, #4
 80a02b8:	f000 f8ac 	bl	80a0414 <_ZN10OSCMessageD1Ev>
        }
        Serial.println();
      }else{
        Serial.println("No message");
      }
}
 80a02bc:	b017      	add	sp, #92	; 0x5c
 80a02be:	bd30      	pop	{r4, r5, pc}
 80a02c0:	080a1d9f 	.word	0x080a1d9f
 80a02c4:	20000084 	.word	0x20000084
 80a02c8:	080a1db8 	.word	0x080a1db8
 80a02cc:	080a1dca 	.word	0x080a1dca
 80a02d0:	080a1dd9 	.word	0x080a1dd9
 80a02d4:	080a00b5 	.word	0x080a00b5
 80a02d8:	080a1de1 	.word	0x080a1de1
 80a02dc:	080a00c9 	.word	0x080a00c9
 80a02e0:	080a1de6 	.word	0x080a1de6
 80a02e4:	080a00dd 	.word	0x080a00dd
 80a02e8:	080a1dec 	.word	0x080a1dec
 80a02ec:	080a1df2 	.word	0x080a1df2

080a02f0 <_Z7OnTimerv>:
//-----------------------//-----------------------//-----------------------//-----------------------RECEIVE

//-----------------------//-----------------------//-----------------------//-----------------------ONTIMER
void OnTimer(void) {  //Handler for the timer, will be called automatically
    receive();
 80a02f0:	f7ff bf94 	b.w	80a021c <_Z7receivev>

080a02f4 <_GLOBAL__sub_I_SystemMode>:
}

void MOVE(OSCMessage &inMessag){
  Serial.println("MOVE");

}
 80a02f4:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02f6:	f000 f95d 	bl	80a05b4 <HAL_Pin_Map>
#include <Particle.h>
#include <simple-OSC.h>
#include "SparkCorePolledTimer.h"

//-----------------------//-----------------------//-----------------------//-----------------------PARTICLE
SYSTEM_THREAD(ENABLED);
 80a02fa:	2100      	movs	r1, #0
 80a02fc:	2001      	movs	r0, #1
 80a02fe:	f000 fa21 	bl	80a0744 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0302:	4b12      	ldr	r3, [pc, #72]	; (80a034c <_GLOBAL__sub_I_SystemMode+0x58>)
 80a0304:	2200      	movs	r2, #0
 80a0306:	701a      	strb	r2, [r3, #0]
 80a0308:	805a      	strh	r2, [r3, #2]
 80a030a:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

//-----------------------//-----------------------//-----------------------//-----------------------WIFI
unsigned int localPort = 8888;
IPAddress ipAddress;
 80a030e:	4c10      	ldr	r4, [pc, #64]	; (80a0350 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0310:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0312:	2002      	movs	r0, #2
 80a0314:	f000 fa0e 	bl	80a0734 <set_system_mode>
 80a0318:	4d0e      	ldr	r5, [pc, #56]	; (80a0354 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a031a:	4620      	mov	r0, r4
 80a031c:	f000 fad8 	bl	80a08d0 <_ZN9IPAddressC1Ev>
 80a0320:	4620      	mov	r0, r4
int port;
UDP udp;
 80a0322:	4c0d      	ldr	r4, [pc, #52]	; (80a0358 <_GLOBAL__sub_I_SystemMode+0x64>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

//-----------------------//-----------------------//-----------------------//-----------------------WIFI
unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0324:	462a      	mov	r2, r5
 80a0326:	490d      	ldr	r1, [pc, #52]	; (80a035c <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0328:	f001 f972 	bl	80a1610 <__aeabi_atexit>
int port;
UDP udp;
 80a032c:	4620      	mov	r0, r4
 80a032e:	f000 fe67 	bl	80a1000 <_ZN3UDPC1Ev>
 80a0332:	462a      	mov	r2, r5
 80a0334:	490a      	ldr	r1, [pc, #40]	; (80a0360 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0336:	4620      	mov	r0, r4
 80a0338:	f001 f96a 	bl	80a1610 <__aeabi_atexit>
}

void MOVE(OSCMessage &inMessag){
  Serial.println("MOVE");

}
 80a033c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
IPAddress ipAddress;
int port;
UDP udp;

//-----------------------//-----------------------//-----------------------//-----------------------HEADERS
SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
 80a0340:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80a0344:	4807      	ldr	r0, [pc, #28]	; (80a0364 <_GLOBAL__sub_I_SystemMode+0x70>)
 80a0346:	f000 b815 	b.w	80a0374 <_ZN20SparkCorePolledTimerC1Em>
 80a034a:	bf00      	nop
 80a034c:	2000007c 	.word	0x2000007c
 80a0350:	200000d0 	.word	0x200000d0
 80a0354:	2000006c 	.word	0x2000006c
 80a0358:	20000084 	.word	0x20000084
 80a035c:	080a00b3 	.word	0x080a00b3
 80a0360:	080a00f1 	.word	0x080a00f1
 80a0364:	20000070 	.word	0x20000070

080a0368 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0368:	b510      	push	{r4, lr}
 80a036a:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a036c:	f000 f91a 	bl	80a05a4 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a0370:	6020      	str	r0, [r4, #0]
 80a0372:	bd10      	pop	{r4, pc}

080a0374 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a0374:	b538      	push	{r3, r4, r5, lr}
 80a0376:	4604      	mov	r4, r0
 80a0378:	460d      	mov	r5, r1
    Reset();
 80a037a:	f7ff fff5 	bl	80a0368 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a037e:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a0380:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0382:	60a3      	str	r3, [r4, #8]
}
 80a0384:	4620      	mov	r0, r4
 80a0386:	bd38      	pop	{r3, r4, r5, pc}

080a0388 <_ZN20SparkCorePolledTimer10HasElapsedEv>:

void SparkCorePolledTimer::Reset(void){
    timeMark=millis();
}

int SparkCorePolledTimer::HasElapsed(){
 80a0388:	b510      	push	{r4, lr}
 80a038a:	4604      	mov	r4, r0
 80a038c:	f000 f90a 	bl	80a05a4 <HAL_Timer_Get_Milli_Seconds>
  
    timeCurrent=millis();
    timeElapsed=timeCurrent-timeMark;  


    if(timeElapsed>=intervalMS) {
 80a0390:	6823      	ldr	r3, [r4, #0]
 80a0392:	1ac0      	subs	r0, r0, r3
 80a0394:	6863      	ldr	r3, [r4, #4]
 80a0396:	4298      	cmp	r0, r3
 80a0398:	d304      	bcc.n	80a03a4 <_ZN20SparkCorePolledTimer10HasElapsedEv+0x1c>
        Reset();
 80a039a:	4620      	mov	r0, r4
 80a039c:	f7ff ffe4 	bl	80a0368 <_ZN20SparkCorePolledTimer5ResetEv>
        result=true;
 80a03a0:	2001      	movs	r0, #1
 80a03a2:	bd10      	pop	{r4, pc}
}

int SparkCorePolledTimer::HasElapsed(){
    unsigned long timeCurrent;
    unsigned long timeElapsed;
    int result=false;
 80a03a4:	2000      	movs	r0, #0
    if(timeElapsed>=intervalMS) {
        Reset();
        result=true;
    }
    return(result);  
}
 80a03a6:	bd10      	pop	{r4, pc}

080a03a8 <_ZN20SparkCorePolledTimer6UpdateEv>:

void SparkCorePolledTimer::Update(void){
 80a03a8:	b510      	push	{r4, lr}
    if (callback!=NULL) {
 80a03aa:	6883      	ldr	r3, [r0, #8]
        result=true;
    }
    return(result);  
}

void SparkCorePolledTimer::Update(void){
 80a03ac:	4604      	mov	r4, r0
    if (callback!=NULL) {
 80a03ae:	b133      	cbz	r3, 80a03be <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
        if(HasElapsed()) {
 80a03b0:	f7ff ffea 	bl	80a0388 <_ZN20SparkCorePolledTimer10HasElapsedEv>
 80a03b4:	b118      	cbz	r0, 80a03be <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
            callback();
 80a03b6:	68a3      	ldr	r3, [r4, #8]
        }
    }
}
 80a03b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SparkCorePolledTimer::Update(void){
    if (callback!=NULL) {
        if(HasElapsed()) {
            callback();
 80a03bc:	4718      	bx	r3
 80a03be:	bd10      	pop	{r4, pc}

080a03c0 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a03c0:	6081      	str	r1, [r0, #8]
 80a03c2:	4770      	bx	lr

080a03c4 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a03c4:	f000 b8f6 	b.w	80a05b4 <HAL_Pin_Map>

080a03c8 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a03c8:	2300      	movs	r3, #0
 80a03ca:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a03cc:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a03ce:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a03d0:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a03d2:	6503      	str	r3, [r0, #80]	; 0x50
 80a03d4:	4770      	bx	lr
	...

080a03d8 <_ZN10OSCMessageC1Ev>:
#include "simple-OSC.h"

OSCMessage::OSCMessage()
 80a03d8:	b538      	push	{r3, r4, r5, lr}
 80a03da:	4604      	mov	r4, r0
 80a03dc:	4d0c      	ldr	r5, [pc, #48]	; (80a0410 <_ZN10OSCMessageC1Ev+0x38>)
 80a03de:	3008      	adds	r0, #8
 80a03e0:	4629      	mov	r1, r5
 80a03e2:	f000 fc3a 	bl	80a0c5a <_ZN6StringC1EPK19__FlashStringHelper>
 80a03e6:	4629      	mov	r1, r5
 80a03e8:	f104 0018 	add.w	r0, r4, #24
 80a03ec:	f000 fc35 	bl	80a0c5a <_ZN6StringC1EPK19__FlashStringHelper>
 80a03f0:	4629      	mov	r1, r5
 80a03f2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a03f6:	f000 fc30 	bl	80a0c5a <_ZN6StringC1EPK19__FlashStringHelper>
 80a03fa:	4629      	mov	r1, r5
 80a03fc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0400:	f000 fc2b 	bl	80a0c5a <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a0404:	4620      	mov	r0, r4
 80a0406:	f7ff ffdf 	bl	80a03c8 <_ZN10OSCMessage12setupMessageEv>
}
 80a040a:	4620      	mov	r0, r4
 80a040c:	bd38      	pop	{r3, r4, r5, pc}
 80a040e:	bf00      	nop
 80a0410:	080a1ec6 	.word	0x080a1ec6

080a0414 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a0414:	b510      	push	{r4, lr}
 80a0416:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a0418:	6800      	ldr	r0, [r0, #0]
 80a041a:	f000 fa27 	bl	80a086c <free>
    free(inputDatas);
 80a041e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0420:	f000 fa24 	bl	80a086c <free>
    free(outputDatas);
 80a0424:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a0426:	f000 fa21 	bl	80a086c <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a042a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a042e:	f000 fbcd 	bl	80a0bcc <_ZN6StringD1Ev>
 80a0432:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a0436:	f000 fbc9 	bl	80a0bcc <_ZN6StringD1Ev>
 80a043a:	f104 0018 	add.w	r0, r4, #24
 80a043e:	f000 fbc5 	bl	80a0bcc <_ZN6StringD1Ev>
 80a0442:	f104 0008 	add.w	r0, r4, #8
 80a0446:	f000 fbc1 	bl	80a0bcc <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a044a:	4620      	mov	r0, r4
 80a044c:	bd10      	pop	{r4, pc}

080a044e <_ZN10OSCMessage4fillEc>:

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a044e:	b538      	push	{r3, r4, r5, lr}
 80a0450:	460d      	mov	r5, r1
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a0452:	6841      	ldr	r1, [r0, #4]
    free(outputDatas);
}

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a0454:	4604      	mov	r4, r0
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a0456:	3101      	adds	r1, #1
 80a0458:	6800      	ldr	r0, [r0, #0]
 80a045a:	f000 fa0f 	bl	80a087c <realloc>
 80a045e:	6020      	str	r0, [r4, #0]
    if (incomingBuffer != NULL)
 80a0460:	b118      	cbz	r0, 80a046a <_ZN10OSCMessage4fillEc+0x1c>
    {
        incomingBuffer[incomingBufferSize++] = incomingByte;
 80a0462:	6863      	ldr	r3, [r4, #4]
 80a0464:	1c5a      	adds	r2, r3, #1
 80a0466:	6062      	str	r2, [r4, #4]
 80a0468:	54c5      	strb	r5, [r0, r3]
 80a046a:	bd38      	pop	{r3, r4, r5, pc}

080a046c <_ZN10OSCMessage5parseEv>:
    }
}

bool OSCMessage::parse()
{
 80a046c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0474:	4606      	mov	r6, r0
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
    int dataLocation = -1;
 80a0476:	4614      	mov	r4, r2

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
 80a0478:	4691      	mov	r9, r2
}

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
 80a047a:	4690      	mov	r8, r2
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a047c:	b083      	sub	sp, #12
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
 80a047e:	f100 0b18 	add.w	fp, r0, #24
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a0482:	af00      	add	r7, sp, #0
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a0484:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a0488:	1c55      	adds	r5, r2, #1
 80a048a:	45aa      	cmp	sl, r5
 80a048c:	dd61      	ble.n	80a0552 <_ZN10OSCMessage5parseEv+0xe6>
    {
        if (incomingBuffer[i] == 44)
 80a048e:	6831      	ldr	r1, [r6, #0]
 80a0490:	5d4b      	ldrb	r3, [r1, r5]
 80a0492:	2b2c      	cmp	r3, #44	; 0x2c
 80a0494:	d110      	bne.n	80a04b8 <_ZN10OSCMessage5parseEv+0x4c>
        {
            char charAddress[i-1];
            memcpy(charAddress,incomingBuffer,i-1);
            inputAddress = charAddress;
            addressLocation = i;
 80a0496:	46e8      	mov	r8, sp
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
    {
        if (incomingBuffer[i] == 44)
        {
            char charAddress[i-1];
 80a0498:	1dd3      	adds	r3, r2, #7
 80a049a:	f023 0307 	bic.w	r3, r3, #7
 80a049e:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charAddress,incomingBuffer,i-1);
 80a04a2:	4668      	mov	r0, sp
 80a04a4:	f001 fbf2 	bl	80a1c8c <memcpy>
            inputAddress = charAddress;
 80a04a8:	4669      	mov	r1, sp
 80a04aa:	f106 0008 	add.w	r0, r6, #8
 80a04ae:	f000 fbe7 	bl	80a0c80 <_ZN6StringaSEPKc>
 80a04b2:	46c5      	mov	sp, r8
 80a04b4:	46a8      	mov	r8, r5
 80a04b6:	e04a      	b.n	80a054e <_ZN10OSCMessage5parseEv+0xe2>
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
 80a04b8:	f1b8 0f00 	cmp.w	r8, #0
 80a04bc:	dd47      	ble.n	80a054e <_ZN10OSCMessage5parseEv+0xe2>
 80a04be:	b9bb      	cbnz	r3, 80a04f0 <_ZN10OSCMessage5parseEv+0x84>
 80a04c0:	f1b9 0f00 	cmp.w	r9, #0
 80a04c4:	da14      	bge.n	80a04f0 <_ZN10OSCMessage5parseEv+0x84>
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
            typesLocation = i;
 80a04c6:	46e9      	mov	r9, sp
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
 80a04c8:	ebc8 0305 	rsb	r3, r8, r5
 80a04cc:	3306      	adds	r3, #6
 80a04ce:	f023 0307 	bic.w	r3, r3, #7
 80a04d2:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
 80a04d6:	f108 0301 	add.w	r3, r8, #1
 80a04da:	4419      	add	r1, r3
 80a04dc:	4668      	mov	r0, sp
 80a04de:	f001 fbd5 	bl	80a1c8c <memcpy>
            inputTypes = charTypes;
 80a04e2:	4669      	mov	r1, sp
 80a04e4:	4658      	mov	r0, fp
 80a04e6:	f000 fbcb 	bl	80a0c80 <_ZN6StringaSEPKc>
 80a04ea:	46cd      	mov	sp, r9
            typesLocation = i;
 80a04ec:	46a9      	mov	r9, r5
 80a04ee:	e02e      	b.n	80a054e <_ZN10OSCMessage5parseEv+0xe2>
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
 80a04f0:	f1b9 0f00 	cmp.w	r9, #0
 80a04f4:	dd2b      	ble.n	80a054e <_ZN10OSCMessage5parseEv+0xe2>
 80a04f6:	2c00      	cmp	r4, #0
 80a04f8:	da28      	bge.n	80a054c <_ZN10OSCMessage5parseEv+0xe0>
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a04fa:	ebc8 0009 	rsb	r0, r8, r9
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a04fe:	2304      	movs	r3, #4
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a0500:	1e44      	subs	r4, r0, #1
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a0502:	fb90 f0f3 	sdiv	r0, r0, r3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a0506:	2800      	cmp	r0, #0
 80a0508:	db06      	blt.n	80a0518 <_ZN10OSCMessage5parseEv+0xac>
 80a050a:	f001 fb23 	bl	80a1b54 <__aeabi_i2d>
 80a050e:	2200      	movs	r2, #0
 80a0510:	4b13      	ldr	r3, [pc, #76]	; (80a0560 <_ZN10OSCMessage5parseEv+0xf4>)
 80a0512:	f001 f9d3 	bl	80a18bc <__adddf3>
 80a0516:	e005      	b.n	80a0524 <_ZN10OSCMessage5parseEv+0xb8>
 80a0518:	f001 fb1c 	bl	80a1b54 <__aeabi_i2d>
 80a051c:	2200      	movs	r2, #0
 80a051e:	4b10      	ldr	r3, [pc, #64]	; (80a0560 <_ZN10OSCMessage5parseEv+0xf4>)
 80a0520:	f001 f9ca 	bl	80a18b8 <__aeabi_dsub>
 80a0524:	f001 fb7c 	bl	80a1c20 <__aeabi_d2iz>
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
 80a0528:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 80a052c:	3403      	adds	r4, #3
 80a052e:	444c      	add	r4, r9
            inputDatas = (char *) malloc ( datasSize );
 80a0530:	ebc4 020a 	rsb	r2, r4, sl
 80a0534:	4610      	mov	r0, r2
 80a0536:	607a      	str	r2, [r7, #4]
 80a0538:	f000 f990 	bl	80a085c <malloc>
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a053c:	6831      	ldr	r1, [r6, #0]
            int typesCount = typesLocation - addressLocation - 1;
            int bitCount = 4*round((typesCount+1)/4)+3;
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
            inputDatas = (char *) malloc ( datasSize );
 80a053e:	62b0      	str	r0, [r6, #40]	; 0x28
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a0540:	4421      	add	r1, r4
 80a0542:	687a      	ldr	r2, [r7, #4]
 80a0544:	f001 fba2 	bl	80a1c8c <memcpy>
 80a0548:	4654      	mov	r4, sl
 80a054a:	e000      	b.n	80a054e <_ZN10OSCMessage5parseEv+0xe2>
             Serial.println();
             }
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
 80a054c:	d103      	bne.n	80a0556 <_ZN10OSCMessage5parseEv+0xea>
 80a054e:	462a      	mov	r2, r5
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a0550:	e798      	b.n	80a0484 <_ZN10OSCMessage5parseEv+0x18>
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
        }
    }
    return false;
 80a0552:	2000      	movs	r0, #0
 80a0554:	e000      	b.n	80a0558 <_ZN10OSCMessage5parseEv+0xec>
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
 80a0556:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80a0558:	370c      	adds	r7, #12
 80a055a:	46bd      	mov	sp, r7
 80a055c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0560:	3fe00000 	.word	0x3fe00000

080a0564 <_ZN10OSCMessage5routeEPKcPFvRS_E>:

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
 80a0564:	b570      	push	{r4, r5, r6, lr}
 80a0566:	4604      	mov	r4, r0
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0568:	3008      	adds	r0, #8
 80a056a:	4615      	mov	r5, r2
 80a056c:	f000 fb99 	bl	80a0ca2 <_ZNK6String6equalsEPKc>
    if( inputAddress == pattern)
 80a0570:	b120      	cbz	r0, 80a057c <_ZN10OSCMessage5routeEPKcPFvRS_E+0x18>
    {
        callback(*this);
 80a0572:	4620      	mov	r0, r4
 80a0574:	462b      	mov	r3, r5
    }
}
 80a0576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
    if( inputAddress == pattern)
    {
        callback(*this);
 80a057a:	4718      	bx	r3
 80a057c:	bd70      	pop	{r4, r5, r6, pc}

080a057e <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a057e:	f000 b819 	b.w	80a05b4 <HAL_Pin_Map>
	...

080a0584 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <os_mutex_create+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601d0 	.word	0x080601d0

080a0594 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_RNG_GetRandomNumber+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	685b      	ldr	r3, [r3, #4]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	0806019c 	.word	0x0806019c

080a05a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	695b      	ldr	r3, [r3, #20]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	0806019c 	.word	0x0806019c

080a05b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_Pin_Map+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	681b      	ldr	r3, [r3, #0]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601b0 	.word	0x080601b0

080a05c4 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <socket_handle_valid+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	685b      	ldr	r3, [r3, #4]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601bc 	.word	0x080601bc

080a05d4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <socket_create+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	689b      	ldr	r3, [r3, #8]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601bc 	.word	0x080601bc

080a05e4 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <socket_receivefrom+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	695b      	ldr	r3, [r3, #20]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601bc 	.word	0x080601bc

080a05f4 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <socket_sendto+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	69db      	ldr	r3, [r3, #28]
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601bc 	.word	0x080601bc

080a0604 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <socket_close+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	6a1b      	ldr	r3, [r3, #32]
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601bc 	.word	0x080601bc

080a0614 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <socket_handle_invalid+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601bc 	.word	0x080601bc

080a0624 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <HAL_SPI_Init+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	69db      	ldr	r3, [r3, #28]
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601b4 	.word	0x080601b4

080a0634 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <HAL_USART_Init+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	699b      	ldr	r3, [r3, #24]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601c4 	.word	0x080601c4

080a0644 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <HAL_USART_Write_Data+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601c4 	.word	0x080601c4

080a0654 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <HAL_USART_Available_Data+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601c4 	.word	0x080601c4

080a0664 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <HAL_USART_Read_Data+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601c4 	.word	0x080601c4

080a0674 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <HAL_USART_Peek_Data+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601c4 	.word	0x080601c4

080a0684 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <HAL_USART_Flush_Data+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601c4 	.word	0x080601c4

080a0694 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601c4 	.word	0x080601c4

080a06a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <HAL_USB_USART_Init+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	681b      	ldr	r3, [r3, #0]
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601d8 	.word	0x080601d8

080a06b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_USB_USART_Begin+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	685b      	ldr	r3, [r3, #4]
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601d8 	.word	0x080601d8

080a06c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_USB_USART_Available_Data+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	691b      	ldr	r3, [r3, #16]
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601d8 	.word	0x080601d8

080a06d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	695b      	ldr	r3, [r3, #20]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601d8 	.word	0x080601d8

080a06e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <HAL_USB_USART_Receive_Data+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	699b      	ldr	r3, [r3, #24]
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601d8 	.word	0x080601d8

080a06f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <HAL_USB_USART_Send_Data+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	69db      	ldr	r3, [r3, #28]
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601d8 	.word	0x080601d8

080a0704 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <HAL_USB_USART_Flush_Data+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	6a1b      	ldr	r3, [r3, #32]
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601d8 	.word	0x080601d8

080a0714 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <HAL_USB_USART_Is_Enabled+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601d8 	.word	0x080601d8

080a0724 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <inet_gethostbyname+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601c0 	.word	0x080601c0

080a0734 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <set_system_mode+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	685b      	ldr	r3, [r3, #4]
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601a4 	.word	0x080601a4

080a0744 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <system_thread_set_state+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601a4 	.word	0x080601a4

080a0754 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b03      	ldr	r3, [pc, #12]	; (80a0764 <system_ctrl_set_app_request_handler+0x10>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a075e:	9301      	str	r3, [sp, #4]
 80a0760:	bd08      	pop	{r3, pc}
 80a0762:	0000      	.short	0x0000
 80a0764:	080601a4 	.word	0x080601a4

080a0768 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b03      	ldr	r3, [pc, #12]	; (80a0778 <system_ctrl_set_result+0x10>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0772:	9301      	str	r3, [sp, #4]
 80a0774:	bd08      	pop	{r3, pc}
 80a0776:	0000      	.short	0x0000
 80a0778:	080601a4 	.word	0x080601a4

080a077c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601cc 	.word	0x080601cc

080a078c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <network_config+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	681b      	ldr	r3, [r3, #0]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601c8 	.word	0x080601c8

080a079c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <network_connect+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	685b      	ldr	r3, [r3, #4]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601c8 	.word	0x080601c8

080a07ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <network_connecting+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	689b      	ldr	r3, [r3, #8]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601c8 	.word	0x080601c8

080a07bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <network_disconnect+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	68db      	ldr	r3, [r3, #12]
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601c8 	.word	0x080601c8

080a07cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <network_ready+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	691b      	ldr	r3, [r3, #16]
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601c8 	.word	0x080601c8

080a07dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <network_on+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	695b      	ldr	r3, [r3, #20]
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601c8 	.word	0x080601c8

080a07ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <network_off+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	699b      	ldr	r3, [r3, #24]
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601c8 	.word	0x080601c8

080a07fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <network_listen+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	69db      	ldr	r3, [r3, #28]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601c8 	.word	0x080601c8

080a080c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <network_listening+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6a1b      	ldr	r3, [r3, #32]
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601c8 	.word	0x080601c8

080a081c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <network_set_listen_timeout+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601c8 	.word	0x080601c8

080a082c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <network_get_listen_timeout+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601c8 	.word	0x080601c8

080a083c <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <network_set_hostname+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	080601c8 	.word	0x080601c8

080a084c <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a084c:	b508      	push	{r3, lr}
 80a084e:	4b02      	ldr	r3, [pc, #8]	; (80a0858 <network_get_hostname+0xc>)
 80a0850:	681b      	ldr	r3, [r3, #0]
 80a0852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0854:	9301      	str	r3, [sp, #4]
 80a0856:	bd08      	pop	{r3, pc}
 80a0858:	080601c8 	.word	0x080601c8

080a085c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <malloc+0xc>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	681b      	ldr	r3, [r3, #0]
 80a0864:	9301      	str	r3, [sp, #4]
 80a0866:	bd08      	pop	{r3, pc}
 80a0868:	080601a0 	.word	0x080601a0

080a086c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a086c:	b508      	push	{r3, lr}
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <free+0xc>)
 80a0870:	681b      	ldr	r3, [r3, #0]
 80a0872:	685b      	ldr	r3, [r3, #4]
 80a0874:	9301      	str	r3, [sp, #4]
 80a0876:	bd08      	pop	{r3, pc}
 80a0878:	080601a0 	.word	0x080601a0

080a087c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <realloc+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	689b      	ldr	r3, [r3, #8]
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601a0 	.word	0x080601a0

080a088c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a088c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a088e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0890:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0892:	b113      	cbz	r3, 80a089a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0894:	2203      	movs	r2, #3
 80a0896:	4601      	mov	r1, r0
 80a0898:	4798      	blx	r3
    }
 80a089a:	4620      	mov	r0, r4
 80a089c:	bd10      	pop	{r4, pc}

080a089e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a089e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08a0:	460f      	mov	r7, r1
 80a08a2:	f100 0608 	add.w	r6, r0, #8
 80a08a6:	1d05      	adds	r5, r0, #4
 80a08a8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a08aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a08ae:	220a      	movs	r2, #10
 80a08b0:	4638      	mov	r0, r7
 80a08b2:	f000 f958 	bl	80a0b66 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a08b6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a08b8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a08ba:	d007      	beq.n	80a08cc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a08bc:	2c00      	cmp	r4, #0
 80a08be:	d0f4      	beq.n	80a08aa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a08c0:	212e      	movs	r1, #46	; 0x2e
 80a08c2:	4638      	mov	r0, r7
 80a08c4:	f000 f8f2 	bl	80a0aac <_ZN5Print5printEc>
 80a08c8:	4404      	add	r4, r0
 80a08ca:	e7ee      	b.n	80a08aa <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a08d0:	b510      	push	{r4, lr}
 80a08d2:	4604      	mov	r4, r0
 80a08d4:	4b04      	ldr	r3, [pc, #16]	; (80a08e8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a08d6:	2211      	movs	r2, #17
 80a08d8:	f840 3b04 	str.w	r3, [r0], #4
 80a08dc:	2100      	movs	r1, #0
 80a08de:	f001 f9e0 	bl	80a1ca2 <memset>
{
    clear();
}
 80a08e2:	4620      	mov	r0, r4
 80a08e4:	bd10      	pop	{r4, pc}
 80a08e6:	bf00      	nop
 80a08e8:	080a1e10 	.word	0x080a1e10

080a08ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a08ec:	4603      	mov	r3, r0
 80a08ee:	4a07      	ldr	r2, [pc, #28]	; (80a090c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a08f0:	b510      	push	{r4, lr}
 80a08f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a08f6:	f101 0210 	add.w	r2, r1, #16
 80a08fa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a08fe:	4291      	cmp	r1, r2
 80a0900:	f843 4b04 	str.w	r4, [r3], #4
 80a0904:	d1f9      	bne.n	80a08fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0906:	780a      	ldrb	r2, [r1, #0]
 80a0908:	701a      	strb	r2, [r3, #0]
}
 80a090a:	bd10      	pop	{r4, pc}
 80a090c:	080a1e10 	.word	0x080a1e10

080a0910 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0910:	4a02      	ldr	r2, [pc, #8]	; (80a091c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0912:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0914:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0916:	2204      	movs	r2, #4
 80a0918:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a091a:	4770      	bx	lr
 80a091c:	080a1e10 	.word	0x080a1e10

080a0920 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0920:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0922:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0926:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a092a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a092e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0932:	2304      	movs	r3, #4
 80a0934:	6041      	str	r1, [r0, #4]
 80a0936:	7503      	strb	r3, [r0, #20]
 80a0938:	bd10      	pop	{r4, pc}
	...

080a093c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a093c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a093e:	4d04      	ldr	r5, [pc, #16]	; (80a0950 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0940:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0942:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0946:	9500      	str	r5, [sp, #0]
 80a0948:	f7ff ffea 	bl	80a0920 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a094c:	b003      	add	sp, #12
 80a094e:	bd30      	pop	{r4, r5, pc}
 80a0950:	080a1e10 	.word	0x080a1e10

080a0954 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0954:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0956:	780d      	ldrb	r5, [r1, #0]
 80a0958:	788b      	ldrb	r3, [r1, #2]
 80a095a:	784a      	ldrb	r2, [r1, #1]
 80a095c:	78c9      	ldrb	r1, [r1, #3]
 80a095e:	9100      	str	r1, [sp, #0]
 80a0960:	4629      	mov	r1, r5
 80a0962:	f7ff ffdd 	bl	80a0920 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0966:	b003      	add	sp, #12
 80a0968:	bd30      	pop	{r4, r5, pc}
	...

080a096c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a096c:	4a01      	ldr	r2, [pc, #4]	; (80a0974 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0970:	601a      	str	r2, [r3, #0]
 80a0972:	4770      	bx	lr
 80a0974:	080a1e92 	.word	0x080a1e92
 80a0978:	200000e8 	.word	0x200000e8

080a097c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a097c:	2300      	movs	r3, #0
 80a097e:	461a      	mov	r2, r3
 80a0980:	6840      	ldr	r0, [r0, #4]
 80a0982:	f7ff bf0b 	b.w	80a079c <network_connect>

080a0986 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0986:	2200      	movs	r2, #0
 80a0988:	2102      	movs	r1, #2
 80a098a:	6840      	ldr	r0, [r0, #4]
 80a098c:	f7ff bf16 	b.w	80a07bc <network_disconnect>

080a0990 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0990:	2200      	movs	r2, #0
 80a0992:	4611      	mov	r1, r2
 80a0994:	6840      	ldr	r0, [r0, #4]
 80a0996:	f7ff bf09 	b.w	80a07ac <network_connecting>

080a099a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a099a:	2200      	movs	r2, #0
 80a099c:	4611      	mov	r1, r2
 80a099e:	6840      	ldr	r0, [r0, #4]
 80a09a0:	f7ff bf14 	b.w	80a07cc <network_ready>

080a09a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a09a4:	2300      	movs	r3, #0
 80a09a6:	461a      	mov	r2, r3
 80a09a8:	4619      	mov	r1, r3
 80a09aa:	6840      	ldr	r0, [r0, #4]
 80a09ac:	f7ff bf16 	b.w	80a07dc <network_on>

080a09b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a09b0:	2300      	movs	r3, #0
 80a09b2:	461a      	mov	r2, r3
 80a09b4:	4619      	mov	r1, r3
 80a09b6:	6840      	ldr	r0, [r0, #4]
 80a09b8:	f7ff bf18 	b.w	80a07ec <network_off>

080a09bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a09bc:	2200      	movs	r2, #0
 80a09be:	f081 0101 	eor.w	r1, r1, #1
 80a09c2:	6840      	ldr	r0, [r0, #4]
 80a09c4:	f7ff bf1a 	b.w	80a07fc <network_listen>

080a09c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a09c8:	2200      	movs	r2, #0
 80a09ca:	6840      	ldr	r0, [r0, #4]
 80a09cc:	f7ff bf26 	b.w	80a081c <network_set_listen_timeout>

080a09d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a09d0:	2200      	movs	r2, #0
 80a09d2:	4611      	mov	r1, r2
 80a09d4:	6840      	ldr	r0, [r0, #4]
 80a09d6:	f7ff bf29 	b.w	80a082c <network_get_listen_timeout>

080a09da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a09da:	2200      	movs	r2, #0
 80a09dc:	4611      	mov	r1, r2
 80a09de:	6840      	ldr	r0, [r0, #4]
 80a09e0:	f7ff bf14 	b.w	80a080c <network_listening>

080a09e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a09e4:	b570      	push	{r4, r5, r6, lr}
 80a09e6:	4616      	mov	r6, r2
 80a09e8:	b08e      	sub	sp, #56	; 0x38
 80a09ea:	4604      	mov	r4, r0
    IPAddress addr;
 80a09ec:	a808      	add	r0, sp, #32
 80a09ee:	f7ff ff6f 	bl	80a08d0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a09f2:	2211      	movs	r2, #17
 80a09f4:	2100      	movs	r1, #0
 80a09f6:	a803      	add	r0, sp, #12
 80a09f8:	f001 f953 	bl	80a1ca2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a09fc:	4630      	mov	r0, r6
 80a09fe:	f001 f98b 	bl	80a1d18 <strlen>
 80a0a02:	2500      	movs	r5, #0
 80a0a04:	4b0a      	ldr	r3, [pc, #40]	; (80a0a30 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0a06:	9500      	str	r5, [sp, #0]
 80a0a08:	b281      	uxth	r1, r0
 80a0a0a:	685b      	ldr	r3, [r3, #4]
 80a0a0c:	aa03      	add	r2, sp, #12
 80a0a0e:	4630      	mov	r0, r6
 80a0a10:	f7ff fe88 	bl	80a0724 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0a14:	b120      	cbz	r0, 80a0a20 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0a16:	4629      	mov	r1, r5
 80a0a18:	4620      	mov	r0, r4
 80a0a1a:	f7ff ff79 	bl	80a0910 <_ZN9IPAddressC1Em>
 80a0a1e:	e003      	b.n	80a0a28 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0a20:	a903      	add	r1, sp, #12
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	f7ff ff62 	bl	80a08ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0a28:	4620      	mov	r0, r4
 80a0a2a:	b00e      	add	sp, #56	; 0x38
 80a0a2c:	bd70      	pop	{r4, r5, r6, pc}
 80a0a2e:	bf00      	nop
 80a0a30:	2000056c 	.word	0x2000056c

080a0a34 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0a34:	4b03      	ldr	r3, [pc, #12]	; (80a0a44 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0a36:	4a04      	ldr	r2, [pc, #16]	; (80a0a48 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0a38:	2804      	cmp	r0, #4
 80a0a3a:	bf0c      	ite	eq
 80a0a3c:	4610      	moveq	r0, r2
 80a0a3e:	4618      	movne	r0, r3
 80a0a40:	4770      	bx	lr
 80a0a42:	bf00      	nop
 80a0a44:	200000ec 	.word	0x200000ec
 80a0a48:	2000056c 	.word	0x2000056c

080a0a4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0a4c:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0a4e:	4a03      	ldr	r2, [pc, #12]	; (80a0a5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0a50:	601a      	str	r2, [r3, #0]
 80a0a52:	2200      	movs	r2, #0
 80a0a54:	605a      	str	r2, [r3, #4]
 80a0a56:	4770      	bx	lr
 80a0a58:	200000ec 	.word	0x200000ec
 80a0a5c:	080a1f08 	.word	0x080a1f08

080a0a60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a62:	4606      	mov	r6, r0
 80a0a64:	460d      	mov	r5, r1
 80a0a66:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0a68:	2400      	movs	r4, #0
  while (size--) {
 80a0a6a:	42bd      	cmp	r5, r7
 80a0a6c:	d00c      	beq.n	80a0a88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0a6e:	6833      	ldr	r3, [r6, #0]
 80a0a70:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a74:	689b      	ldr	r3, [r3, #8]
 80a0a76:	4630      	mov	r0, r6
 80a0a78:	4798      	blx	r3
     if (chunk>=0)
 80a0a7a:	2800      	cmp	r0, #0
 80a0a7c:	db01      	blt.n	80a0a82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0a7e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0a80:	e7f3      	b.n	80a0a6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0a82:	2c00      	cmp	r4, #0
 80a0a84:	bf08      	it	eq
 80a0a86:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0a88:	4620      	mov	r0, r4
 80a0a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0a8c:	b570      	push	{r4, r5, r6, lr}
 80a0a8e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0a90:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0a92:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0a94:	b149      	cbz	r1, 80a0aaa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0a96:	f001 f93f 	bl	80a1d18 <strlen>
 80a0a9a:	682b      	ldr	r3, [r5, #0]
 80a0a9c:	4602      	mov	r2, r0
 80a0a9e:	4621      	mov	r1, r4
 80a0aa0:	4628      	mov	r0, r5
    }
 80a0aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0aa6:	68db      	ldr	r3, [r3, #12]
 80a0aa8:	4718      	bx	r3
    }
 80a0aaa:	bd70      	pop	{r4, r5, r6, pc}

080a0aac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0aac:	6803      	ldr	r3, [r0, #0]
 80a0aae:	689b      	ldr	r3, [r3, #8]
 80a0ab0:	4718      	bx	r3

080a0ab2 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a0ab2:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a0ab4:	680a      	ldr	r2, [r1, #0]
 80a0ab6:	4601      	mov	r1, r0
 80a0ab8:	6812      	ldr	r2, [r2, #0]
 80a0aba:	4618      	mov	r0, r3
 80a0abc:	4710      	bx	r2

080a0abe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0abe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0ac0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0ac2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0ac4:	f7ff fff2 	bl	80a0aac <_ZN5Print5printEc>
  n += print('\n');
 80a0ac8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0aca:	4604      	mov	r4, r0
  n += print('\n');
 80a0acc:	4628      	mov	r0, r5
 80a0ace:	f7ff ffed 	bl	80a0aac <_ZN5Print5printEc>
  return n;
}
 80a0ad2:	4420      	add	r0, r4
 80a0ad4:	bd38      	pop	{r3, r4, r5, pc}

080a0ad6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0ad6:	b538      	push	{r3, r4, r5, lr}
 80a0ad8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0ada:	f7ff ffd7 	bl	80a0a8c <_ZN5Print5writeEPKc>
 80a0ade:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0ae0:	4628      	mov	r0, r5
 80a0ae2:	f7ff ffec 	bl	80a0abe <_ZN5Print7printlnEv>
  return n;
}
 80a0ae6:	4420      	add	r0, r4
 80a0ae8:	bd38      	pop	{r3, r4, r5, pc}

080a0aea <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80a0aea:	b538      	push	{r3, r4, r5, lr}
 80a0aec:	4605      	mov	r5, r0
  size_t n = print(c);
 80a0aee:	f7ff ffdd 	bl	80a0aac <_ZN5Print5printEc>
 80a0af2:	4604      	mov	r4, r0
  n += println();
 80a0af4:	4628      	mov	r0, r5
 80a0af6:	f7ff ffe2 	bl	80a0abe <_ZN5Print7printlnEv>
  return n;
}
 80a0afa:	4420      	add	r0, r4
 80a0afc:	bd38      	pop	{r3, r4, r5, pc}

080a0afe <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0afe:	b538      	push	{r3, r4, r5, lr}
 80a0b00:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0b02:	f7ff ffd6 	bl	80a0ab2 <_ZN5Print5printERK9Printable>
 80a0b06:	4604      	mov	r4, r0
   n += println();
 80a0b08:	4628      	mov	r0, r5
 80a0b0a:	f7ff ffd8 	bl	80a0abe <_ZN5Print7printlnEv>
   return n;
 }
 80a0b0e:	4420      	add	r0, r4
 80a0b10:	bd38      	pop	{r3, r4, r5, pc}

080a0b12 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0b12:	2a01      	cmp	r2, #1
 80a0b14:	bf98      	it	ls
 80a0b16:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0b18:	b530      	push	{r4, r5, lr}
 80a0b1a:	460b      	mov	r3, r1
 80a0b1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0b1e:	2100      	movs	r1, #0
 80a0b20:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0b24:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0b28:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0b2c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0b30:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b32:	2b09      	cmp	r3, #9
 80a0b34:	bf94      	ite	ls
 80a0b36:	3330      	addls	r3, #48	; 0x30
 80a0b38:	3337      	addhi	r3, #55	; 0x37
 80a0b3a:	b2db      	uxtb	r3, r3
 80a0b3c:	4621      	mov	r1, r4
 80a0b3e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0b42:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0b44:	2d00      	cmp	r5, #0
 80a0b46:	d1ef      	bne.n	80a0b28 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0b48:	f7ff ffa0 	bl	80a0a8c <_ZN5Print5writeEPKc>
}
 80a0b4c:	b00b      	add	sp, #44	; 0x2c
 80a0b4e:	bd30      	pop	{r4, r5, pc}

080a0b50 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0b50:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0b52:	b922      	cbnz	r2, 80a0b5e <_ZN5Print5printEmi+0xe>
 80a0b54:	6803      	ldr	r3, [r0, #0]
 80a0b56:	b2c9      	uxtb	r1, r1
 80a0b58:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0b5a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0b5c:	4718      	bx	r3
  else return printNumber(n, base);
 80a0b5e:	b2d2      	uxtb	r2, r2
}
 80a0b60:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0b62:	f7ff bfd6 	b.w	80a0b12 <_ZN5Print11printNumberEmh>

080a0b66 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0b66:	f7ff bff3 	b.w	80a0b50 <_ZN5Print5printEmi>

080a0b6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0b6a:	b510      	push	{r4, lr}
 80a0b6c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b6e:	f7ff fe8d 	bl	80a088c <_ZNSt14_Function_baseD1Ev>
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	bd10      	pop	{r4, pc}
	...

080a0b78 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b78:	4803      	ldr	r0, [pc, #12]	; (80a0b88 <_GLOBAL__sub_I_RGB+0x10>)
 80a0b7a:	2300      	movs	r3, #0
 80a0b7c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0b7e:	4a03      	ldr	r2, [pc, #12]	; (80a0b8c <_GLOBAL__sub_I_RGB+0x14>)
 80a0b80:	4903      	ldr	r1, [pc, #12]	; (80a0b90 <_GLOBAL__sub_I_RGB+0x18>)
 80a0b82:	f000 bd45 	b.w	80a1610 <__aeabi_atexit>
 80a0b86:	bf00      	nop
 80a0b88:	200000f4 	.word	0x200000f4
 80a0b8c:	2000006c 	.word	0x2000006c
 80a0b90:	080a0b6b 	.word	0x080a0b6b

080a0b94 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0b94:	4770      	bx	lr

080a0b96 <_ZN8SPIClassD0Ev>:
 80a0b96:	b510      	push	{r4, lr}
 80a0b98:	4604      	mov	r4, r0
 80a0b9a:	2110      	movs	r1, #16
 80a0b9c:	f000 fd3d 	bl	80a161a <_ZdlPvj>
 80a0ba0:	4620      	mov	r0, r4
 80a0ba2:	bd10      	pop	{r4, pc}

080a0ba4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ba4:	b570      	push	{r4, r5, r6, lr}
 80a0ba6:	4604      	mov	r4, r0
 80a0ba8:	460e      	mov	r6, r1
 80a0baa:	4b07      	ldr	r3, [pc, #28]	; (80a0bc8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0bac:	2500      	movs	r5, #0
 80a0bae:	6003      	str	r3, [r0, #0]
 80a0bb0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0bb4:	f7ff fce6 	bl	80a0584 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0bb8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0bba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0bbc:	f7ff fd32 	bl	80a0624 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0bc0:	60a5      	str	r5, [r4, #8]
}
 80a0bc2:	4620      	mov	r0, r4
 80a0bc4:	bd70      	pop	{r4, r5, r6, pc}
 80a0bc6:	bf00      	nop
 80a0bc8:	080a1f3c 	.word	0x080a1f3c

080a0bcc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0bcc:	b510      	push	{r4, lr}
 80a0bce:	4604      	mov	r4, r0
{
	free(buffer);
 80a0bd0:	6800      	ldr	r0, [r0, #0]
 80a0bd2:	f7ff fe4b 	bl	80a086c <free>
}
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	bd10      	pop	{r4, pc}

080a0bda <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0bda:	b510      	push	{r4, lr}
 80a0bdc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0bde:	6800      	ldr	r0, [r0, #0]
 80a0be0:	b108      	cbz	r0, 80a0be6 <_ZN6String10invalidateEv+0xc>
 80a0be2:	f7ff fe43 	bl	80a086c <free>
	buffer = NULL;
 80a0be6:	2300      	movs	r3, #0
 80a0be8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0bea:	60a3      	str	r3, [r4, #8]
 80a0bec:	6063      	str	r3, [r4, #4]
 80a0bee:	bd10      	pop	{r4, pc}

080a0bf0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0bf0:	b538      	push	{r3, r4, r5, lr}
 80a0bf2:	4604      	mov	r4, r0
 80a0bf4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0bf6:	6800      	ldr	r0, [r0, #0]
 80a0bf8:	3101      	adds	r1, #1
 80a0bfa:	f7ff fe3f 	bl	80a087c <realloc>
	if (newbuffer) {
 80a0bfe:	b110      	cbz	r0, 80a0c06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0c00:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0c04:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0c06:	bd38      	pop	{r3, r4, r5, pc}

080a0c08 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0c0a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0c0e:	b113      	cbz	r3, 80a0c16 <_ZN6String7reserveEj+0xe>
 80a0c10:	6843      	ldr	r3, [r0, #4]
 80a0c12:	428b      	cmp	r3, r1
 80a0c14:	d207      	bcs.n	80a0c26 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	f7ff ffea 	bl	80a0bf0 <_ZN6String12changeBufferEj>
 80a0c1c:	b120      	cbz	r0, 80a0c28 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0c1e:	68a3      	ldr	r3, [r4, #8]
 80a0c20:	b90b      	cbnz	r3, 80a0c26 <_ZN6String7reserveEj+0x1e>
 80a0c22:	6822      	ldr	r2, [r4, #0]
 80a0c24:	7013      	strb	r3, [r2, #0]
 80a0c26:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0c28:	bd10      	pop	{r4, pc}

080a0c2a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c2a:	b570      	push	{r4, r5, r6, lr}
 80a0c2c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0c2e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c30:	4604      	mov	r4, r0
 80a0c32:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0c34:	f7ff ffe8 	bl	80a0c08 <_ZN6String7reserveEj>
 80a0c38:	b918      	cbnz	r0, 80a0c42 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	f7ff ffcd 	bl	80a0bda <_ZN6String10invalidateEv>
		return *this;
 80a0c40:	e009      	b.n	80a0c56 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0c42:	462a      	mov	r2, r5
 80a0c44:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0c46:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0c48:	6820      	ldr	r0, [r4, #0]
 80a0c4a:	f001 f81f 	bl	80a1c8c <memcpy>
	buffer[len] = 0;
 80a0c4e:	6822      	ldr	r2, [r4, #0]
 80a0c50:	68a3      	ldr	r3, [r4, #8]
 80a0c52:	2100      	movs	r1, #0
 80a0c54:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0c56:	4620      	mov	r0, r4
 80a0c58:	bd70      	pop	{r4, r5, r6, pc}

080a0c5a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0c5a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0c5c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0c5e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0c60:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0c62:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0c64:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0c66:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0c68:	460d      	mov	r5, r1
 80a0c6a:	b139      	cbz	r1, 80a0c7c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0c6c:	4608      	mov	r0, r1
 80a0c6e:	f001 f853 	bl	80a1d18 <strlen>
 80a0c72:	4629      	mov	r1, r5
 80a0c74:	4602      	mov	r2, r0
 80a0c76:	4620      	mov	r0, r4
 80a0c78:	f7ff ffd7 	bl	80a0c2a <_ZN6String4copyEPKcj>
}
 80a0c7c:	4620      	mov	r0, r4
 80a0c7e:	bd38      	pop	{r3, r4, r5, pc}

080a0c80 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0c80:	b538      	push	{r3, r4, r5, lr}
 80a0c82:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0c84:	460c      	mov	r4, r1
 80a0c86:	b141      	cbz	r1, 80a0c9a <_ZN6StringaSEPKc+0x1a>
 80a0c88:	4608      	mov	r0, r1
 80a0c8a:	f001 f845 	bl	80a1d18 <strlen>
 80a0c8e:	4621      	mov	r1, r4
 80a0c90:	4602      	mov	r2, r0
 80a0c92:	4628      	mov	r0, r5
 80a0c94:	f7ff ffc9 	bl	80a0c2a <_ZN6String4copyEPKcj>
 80a0c98:	e001      	b.n	80a0c9e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0c9a:	f7ff ff9e 	bl	80a0bda <_ZN6String10invalidateEv>

	return *this;
}
 80a0c9e:	4628      	mov	r0, r5
 80a0ca0:	bd38      	pop	{r3, r4, r5, pc}

080a0ca2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0ca2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0ca4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0ca6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0ca8:	b912      	cbnz	r2, 80a0cb0 <_ZNK6String6equalsEPKc+0xe>
 80a0caa:	b919      	cbnz	r1, 80a0cb4 <_ZNK6String6equalsEPKc+0x12>
 80a0cac:	2001      	movs	r0, #1
 80a0cae:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a0cb0:	b911      	cbnz	r1, 80a0cb8 <_ZNK6String6equalsEPKc+0x16>
 80a0cb2:	6803      	ldr	r3, [r0, #0]
 80a0cb4:	7818      	ldrb	r0, [r3, #0]
 80a0cb6:	e002      	b.n	80a0cbe <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a0cb8:	6800      	ldr	r0, [r0, #0]
 80a0cba:	f001 f823 	bl	80a1d04 <strcmp>
 80a0cbe:	fab0 f080 	clz	r0, r0
 80a0cc2:	0940      	lsrs	r0, r0, #5
}
 80a0cc4:	bd08      	pop	{r3, pc}
	...

080a0cc8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0ccc:	4b03      	ldr	r3, [pc, #12]	; (80a0cdc <_GLOBAL__sub_I_System+0x14>)
 80a0cce:	2000      	movs	r0, #0
 80a0cd0:	7018      	strb	r0, [r3, #0]
 80a0cd2:	8058      	strh	r0, [r3, #2]
 80a0cd4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0cd6:	f7ff bd2d 	b.w	80a0734 <set_system_mode>
 80a0cda:	bf00      	nop
 80a0cdc:	20000104 	.word	0x20000104

080a0ce0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0ce0:	4b02      	ldr	r3, [pc, #8]	; (80a0cec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0ce2:	681a      	ldr	r2, [r3, #0]
 80a0ce4:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0ce6:	601a      	str	r2, [r3, #0]
 80a0ce8:	4770      	bx	lr
 80a0cea:	bf00      	nop
 80a0cec:	20000004 	.word	0x20000004
 80a0cf0:	2000010c 	.word	0x2000010c

080a0cf4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0cf4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0cf6:	6804      	ldr	r4, [r0, #0]
 80a0cf8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0cfa:	46a4      	mov	ip, r4
    }
 80a0cfc:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0cfe:	4760      	bx	ip

080a0d00 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0d00:	6803      	ldr	r3, [r0, #0]
 80a0d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0d04:	4718      	bx	r3

080a0d06 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0d06:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0d08:	4770      	bx	lr

080a0d0a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0d0a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0d0c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0d0e:	1a10      	subs	r0, r2, r0
 80a0d10:	4770      	bx	lr

080a0d12 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0d12:	b513      	push	{r0, r1, r4, lr}
 80a0d14:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0d16:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0d18:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0d1c:	68d4      	ldr	r4, [r2, #12]
 80a0d1e:	4619      	mov	r1, r3
 80a0d20:	2201      	movs	r2, #1
 80a0d22:	47a0      	blx	r4
}
 80a0d24:	b002      	add	sp, #8
 80a0d26:	bd10      	pop	{r4, pc}

080a0d28 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0d28:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0d2a:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0d2c:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0d2e:	691b      	ldr	r3, [r3, #16]
 80a0d30:	4798      	blx	r3
 80a0d32:	b128      	cbz	r0, 80a0d40 <_ZN3UDP4readEv+0x18>
 80a0d34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0d36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0d38:	1c59      	adds	r1, r3, #1
 80a0d3a:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0d3c:	5cd0      	ldrb	r0, [r2, r3]
 80a0d3e:	bd10      	pop	{r4, pc}
 80a0d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0d44:	bd10      	pop	{r4, pc}

080a0d46 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0d46:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0d48:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0d4a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0d4c:	691b      	ldr	r3, [r3, #16]
 80a0d4e:	4798      	blx	r3
 80a0d50:	b118      	cbz	r0, 80a0d5a <_ZN3UDP4peekEv+0x14>
 80a0d52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0d54:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0d56:	5cd0      	ldrb	r0, [r2, r3]
 80a0d58:	bd10      	pop	{r4, pc}
 80a0d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0d5e:	bd10      	pop	{r4, pc}

080a0d60 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0d60:	4770      	bx	lr

080a0d62 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0d62:	4603      	mov	r3, r0
 80a0d64:	4608      	mov	r0, r1
 80a0d66:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0d68:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0d6a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0d6c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0d6e:	6803      	ldr	r3, [r0, #0]
 80a0d70:	1a52      	subs	r2, r2, r1
 80a0d72:	68db      	ldr	r3, [r3, #12]
 80a0d74:	4421      	add	r1, r4
}
 80a0d76:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0d78:	4718      	bx	r3

080a0d7a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0d7a:	f1a0 0010 	sub.w	r0, r0, #16
 80a0d7e:	f7ff bff0 	b.w	80a0d62 <_ZNK3UDP7printToER5Print>

080a0d82 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0d84:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0d86:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0d88:	460f      	mov	r7, r1
 80a0d8a:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0d8c:	f7ff fe52 	bl	80a0a34 <_ZN5spark12NetworkClass4fromEm>
 80a0d90:	6803      	ldr	r3, [r0, #0]
 80a0d92:	68db      	ldr	r3, [r3, #12]
 80a0d94:	4798      	blx	r3
 80a0d96:	b1b8      	cbz	r0, 80a0dc8 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0d98:	2102      	movs	r1, #2
 80a0d9a:	463b      	mov	r3, r7
 80a0d9c:	2211      	movs	r2, #17
 80a0d9e:	4608      	mov	r0, r1
 80a0da0:	9600      	str	r6, [sp, #0]
 80a0da2:	f7ff fc17 	bl	80a05d4 <socket_create>
 80a0da6:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0da8:	f7ff fc0c 	bl	80a05c4 <socket_handle_valid>
 80a0dac:	4604      	mov	r4, r0
 80a0dae:	b130      	cbz	r0, 80a0dbe <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0db0:	2300      	movs	r3, #0
 80a0db2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0db4:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0db6:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0db8:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0dba:	2001      	movs	r0, #1
 80a0dbc:	e004      	b.n	80a0dc8 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0dbe:	682b      	ldr	r3, [r5, #0]
 80a0dc0:	4628      	mov	r0, r5
 80a0dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0dc4:	4798      	blx	r3
            bound = false;
 80a0dc6:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a0dc8:	b003      	add	sp, #12
 80a0dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0dcc <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a0dcc:	b538      	push	{r3, r4, r5, lr}
 80a0dce:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0dd0:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0dd2:	f7ff fc1f 	bl	80a0614 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0dd6:	4285      	cmp	r5, r0
 80a0dd8:	d002      	beq.n	80a0de0 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0dda:	6960      	ldr	r0, [r4, #20]
 80a0ddc:	f7ff fc12 	bl	80a0604 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0de0:	f7ff fc18 	bl	80a0614 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0de4:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0de6:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0de8:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0dea:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0dec:	bd38      	pop	{r3, r4, r5, pc}

080a0dee <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0dee:	b530      	push	{r4, r5, lr}
 80a0df0:	b087      	sub	sp, #28
 80a0df2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a0df6:	2502      	movs	r5, #2
 80a0df8:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a0dfc:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0e00:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0e02:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0e04:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0e08:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a0e0c:	799c      	ldrb	r4, [r3, #6]
 80a0e0e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0e12:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0e14:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0e16:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0e1a:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a0e1e:	2310      	movs	r3, #16
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	ab02      	add	r3, sp, #8
 80a0e24:	9300      	str	r3, [sp, #0]
 80a0e26:	6940      	ldr	r0, [r0, #20]
 80a0e28:	2300      	movs	r3, #0
 80a0e2a:	f7ff fbe3 	bl	80a05f4 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a0e2e:	b007      	add	sp, #28
 80a0e30:	bd30      	pop	{r4, r5, pc}

080a0e32 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0e32:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0e34:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0e36:	4605      	mov	r5, r0
 80a0e38:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0e3a:	b113      	cbz	r3, 80a0e42 <_ZN3UDP5writeEPKhj+0x10>
 80a0e3c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a0e3e:	1a24      	subs	r4, r4, r0
 80a0e40:	e000      	b.n	80a0e44 <_ZN3UDP5writeEPKhj+0x12>
 80a0e42:	461c      	mov	r4, r3
 80a0e44:	4294      	cmp	r4, r2
 80a0e46:	bf28      	it	cs
 80a0e48:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a0e4a:	4418      	add	r0, r3
 80a0e4c:	4622      	mov	r2, r4
 80a0e4e:	f000 ff1d 	bl	80a1c8c <memcpy>
    _offset += size;
 80a0e52:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0e54:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a0e56:	4423      	add	r3, r4
 80a0e58:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0e5a:	bd38      	pop	{r3, r4, r5, pc}

080a0e5c <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0e5c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a0e5e:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0e60:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a0e62:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0e64:	460e      	mov	r6, r1
 80a0e66:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a0e68:	4798      	blx	r3
 80a0e6a:	b188      	cbz	r0, 80a0e90 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a0e6c:	6823      	ldr	r3, [r4, #0]
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	691b      	ldr	r3, [r3, #16]
 80a0e72:	4798      	blx	r3
 80a0e74:	4285      	cmp	r5, r0
 80a0e76:	bfa8      	it	ge
 80a0e78:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a0e7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0e7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0e7e:	462a      	mov	r2, r5
 80a0e80:	4419      	add	r1, r3
 80a0e82:	4630      	mov	r0, r6
 80a0e84:	f000 ff02 	bl	80a1c8c <memcpy>
      _offset += read;
 80a0e88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0e8a:	442b      	add	r3, r5
 80a0e8c:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a0e8e:	e001      	b.n	80a0e94 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a0e90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a0e94:	4628      	mov	r0, r5
 80a0e96:	bd70      	pop	{r4, r5, r6, pc}

080a0e98 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e9a:	4604      	mov	r4, r0
 80a0e9c:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0e9e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0ea0:	460d      	mov	r5, r1
 80a0ea2:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0ea4:	f7ff fdc6 	bl	80a0a34 <_ZN5spark12NetworkClass4fromEm>
 80a0ea8:	6803      	ldr	r3, [r0, #0]
 80a0eaa:	68db      	ldr	r3, [r3, #12]
 80a0eac:	4798      	blx	r3
 80a0eae:	b310      	cbz	r0, 80a0ef6 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0eb0:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0eb2:	f7ff fbaf 	bl	80a0614 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0eb6:	4287      	cmp	r7, r0
 80a0eb8:	d01d      	beq.n	80a0ef6 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0eba:	b1e5      	cbz	r5, 80a0ef6 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a0ebc:	ab08      	add	r3, sp, #32
 80a0ebe:	2210      	movs	r2, #16
 80a0ec0:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a0ec4:	9301      	str	r3, [sp, #4]
 80a0ec6:	eb0d 0302 	add.w	r3, sp, r2
 80a0eca:	9300      	str	r3, [sp, #0]
 80a0ecc:	4629      	mov	r1, r5
 80a0ece:	2300      	movs	r3, #0
 80a0ed0:	4632      	mov	r2, r6
 80a0ed2:	6960      	ldr	r0, [r4, #20]
 80a0ed4:	f7ff fb86 	bl	80a05e4 <socket_receivefrom>
        if (ret >= 0)
 80a0ed8:	1e05      	subs	r5, r0, #0
 80a0eda:	db0e      	blt.n	80a0efa <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0edc:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a0ee0:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0ee4:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0ee6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0eea:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0eec:	f104 001c 	add.w	r0, r4, #28
 80a0ef0:	f7ff fd30 	bl	80a0954 <_ZN9IPAddressaSEPKh>
 80a0ef4:	e001      	b.n	80a0efa <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a0ef6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a0efa:	4628      	mov	r0, r5
 80a0efc:	b009      	add	sp, #36	; 0x24
 80a0efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f00 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0f04:	4606      	mov	r6, r0
 80a0f06:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a0f08:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0f0a:	460d      	mov	r5, r1
 80a0f0c:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a0f0e:	f7ff fd91 	bl	80a0a34 <_ZN5spark12NetworkClass4fromEm>
 80a0f12:	6803      	ldr	r3, [r0, #0]
 80a0f14:	68db      	ldr	r3, [r3, #12]
 80a0f16:	4798      	blx	r3
 80a0f18:	b1f8      	cbz	r0, 80a0f5a <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a0f1a:	4628      	mov	r0, r5
 80a0f1c:	f000 fefc 	bl	80a1d18 <strlen>
 80a0f20:	2400      	movs	r4, #0
 80a0f22:	b281      	uxth	r1, r0
 80a0f24:	9400      	str	r4, [sp, #0]
 80a0f26:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a0f28:	aa03      	add	r2, sp, #12
 80a0f2a:	4628      	mov	r0, r5
 80a0f2c:	f7ff fbfa 	bl	80a0724 <inet_gethostbyname>
 80a0f30:	b990      	cbnz	r0, 80a0f58 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a0f32:	a903      	add	r1, sp, #12
 80a0f34:	a808      	add	r0, sp, #32
 80a0f36:	f7ff fcd9 	bl	80a08ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a0f3a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0f3c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a0f3e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a0f40:	4b07      	ldr	r3, [pc, #28]	; (80a0f60 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a0f42:	ad09      	add	r5, sp, #36	; 0x24
 80a0f44:	930e      	str	r3, [sp, #56]	; 0x38
 80a0f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f4a:	682b      	ldr	r3, [r5, #0]
 80a0f4c:	4642      	mov	r2, r8
 80a0f4e:	7023      	strb	r3, [r4, #0]
 80a0f50:	a90e      	add	r1, sp, #56	; 0x38
 80a0f52:	4630      	mov	r0, r6
 80a0f54:	47b8      	blx	r7
 80a0f56:	e000      	b.n	80a0f5a <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a0f58:	4620      	mov	r0, r4
}
 80a0f5a:	b014      	add	sp, #80	; 0x50
 80a0f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0f60:	080a1e10 	.word	0x080a1e10

080a0f64 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a0f64:	b570      	push	{r4, r5, r6, lr}
 80a0f66:	4604      	mov	r4, r0
 80a0f68:	4606      	mov	r6, r0
 80a0f6a:	4b05      	ldr	r3, [pc, #20]	; (80a0f80 <_ZN3UDP8remoteIPEv+0x1c>)
 80a0f6c:	f101 0520 	add.w	r5, r1, #32
 80a0f70:	f844 3b04 	str.w	r3, [r4], #4
 80a0f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f78:	682b      	ldr	r3, [r5, #0]
 80a0f7a:	4630      	mov	r0, r6
 80a0f7c:	7023      	strb	r3, [r4, #0]
 80a0f7e:	bd70      	pop	{r4, r5, r6, pc}
 80a0f80:	080a1e10 	.word	0x080a1e10

080a0f84 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f86:	4694      	mov	ip, r2
 80a0f88:	468e      	mov	lr, r1
 80a0f8a:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0f8c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0f8e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0f90:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a0f92:	4a09      	ldr	r2, [pc, #36]	; (80a0fb8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a0f94:	ac03      	add	r4, sp, #12
 80a0f96:	1d1d      	adds	r5, r3, #4
 80a0f98:	9202      	str	r2, [sp, #8]
 80a0f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f9e:	682b      	ldr	r3, [r5, #0]
 80a0fa0:	4662      	mov	r2, ip
 80a0fa2:	7023      	strb	r3, [r4, #0]
 80a0fa4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a0fa8:	4671      	mov	r1, lr
 80a0faa:	9300      	str	r3, [sp, #0]
 80a0fac:	4630      	mov	r0, r6
 80a0fae:	ab02      	add	r3, sp, #8
 80a0fb0:	47b8      	blx	r7
    }
 80a0fb2:	b009      	add	sp, #36	; 0x24
 80a0fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0fb6:	bf00      	nop
 80a0fb8:	080a1e10 	.word	0x080a1e10

080a0fbc <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0fbe:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0fc0:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0fc2:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0fc4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a0fc6:	4b0d      	ldr	r3, [pc, #52]	; (80a0ffc <_ZN3UDP9endPacketEv+0x40>)
 80a0fc8:	ad03      	add	r5, sp, #12
 80a0fca:	f100 0620 	add.w	r6, r0, #32
 80a0fce:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a0fd2:	9302      	str	r3, [sp, #8]
 80a0fd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0fd8:	6833      	ldr	r3, [r6, #0]
 80a0fda:	4672      	mov	r2, lr
 80a0fdc:	702b      	strb	r3, [r5, #0]
 80a0fde:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a0fe0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0fe2:	9300      	str	r3, [sp, #0]
 80a0fe4:	4620      	mov	r0, r4
 80a0fe6:	ab02      	add	r3, sp, #8
 80a0fe8:	47b8      	blx	r7
 80a0fea:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a0fec:	6823      	ldr	r3, [r4, #0]
 80a0fee:	4620      	mov	r0, r4
 80a0ff0:	69db      	ldr	r3, [r3, #28]
 80a0ff2:	4798      	blx	r3
    return result;
}
 80a0ff4:	4628      	mov	r0, r5
 80a0ff6:	b009      	add	sp, #36	; 0x24
 80a0ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ffa:	bf00      	nop
 80a0ffc:	080a1e10 	.word	0x080a1e10

080a1000 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1000:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1006:	6083      	str	r3, [r0, #8]
 80a1008:	4b0b      	ldr	r3, [pc, #44]	; (80a1038 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a100a:	2500      	movs	r5, #0
 80a100c:	f103 0208 	add.w	r2, r3, #8
 80a1010:	336c      	adds	r3, #108	; 0x6c
 80a1012:	6002      	str	r2, [r0, #0]
 80a1014:	6103      	str	r3, [r0, #16]
 80a1016:	6045      	str	r5, [r0, #4]
 80a1018:	4604      	mov	r4, r0
 80a101a:	f7ff fafb 	bl	80a0614 <socket_handle_invalid>
 80a101e:	6160      	str	r0, [r4, #20]
 80a1020:	f104 001c 	add.w	r0, r4, #28
 80a1024:	f7ff fc54 	bl	80a08d0 <_ZN9IPAddressC1Ev>
 80a1028:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a102c:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a102e:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1030:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1032:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1034:	4620      	mov	r0, r4
 80a1036:	bd38      	pop	{r3, r4, r5, pc}
 80a1038:	080a1f70 	.word	0x080a1f70

080a103c <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a103c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a103e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1042:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1044:	b123      	cbz	r3, 80a1050 <_ZN3UDP13releaseBufferEv+0x14>
 80a1046:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1048:	b110      	cbz	r0, 80a1050 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a104a:	2101      	movs	r1, #1
 80a104c:	f000 fae5 	bl	80a161a <_ZdlPvj>
    }
    _buffer = NULL;
 80a1050:	2300      	movs	r3, #0
 80a1052:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1054:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1058:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a105a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a105c:	8723      	strh	r3, [r4, #56]	; 0x38
 80a105e:	bd10      	pop	{r4, pc}

080a1060 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1060:	b570      	push	{r4, r5, r6, lr}
 80a1062:	4604      	mov	r4, r0
 80a1064:	4616      	mov	r6, r2
 80a1066:	460d      	mov	r5, r1
    releaseBuffer();
 80a1068:	f7ff ffe8 	bl	80a103c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a106c:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a106e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1070:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a1072:	b93e      	cbnz	r6, 80a1084 <_ZN3UDP9setBufferEjPh+0x24>
 80a1074:	b135      	cbz	r5, 80a1084 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1076:	4628      	mov	r0, r5
 80a1078:	f7ff f80f 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a107c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a107e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1080:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1084:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1086:	b103      	cbz	r3, 80a108a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1088:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a108a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a108c:	3000      	adds	r0, #0
 80a108e:	bf18      	it	ne
 80a1090:	2001      	movne	r0, #1
 80a1092:	bd70      	pop	{r4, r5, r6, pc}

080a1094 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1096:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1098:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a109a:	4605      	mov	r5, r0
 80a109c:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a109e:	b91a      	cbnz	r2, 80a10a8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a10a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a10a2:	b109      	cbz	r1, 80a10a8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a10a4:	f7ff ffdc 	bl	80a1060 <_ZN3UDP9setBufferEjPh>
 80a10a8:	f105 0620 	add.w	r6, r5, #32
 80a10ac:	3404      	adds	r4, #4
 80a10ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a10b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a10b2:	6823      	ldr	r3, [r4, #0]
 80a10b4:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a10b6:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a10b8:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a10ba:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a10bc:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a10be:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a10c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10c2 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a10c2:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a10c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a10c6:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a10c8:	b91a      	cbnz	r2, 80a10d2 <_ZN3UDP11parsePacketEm+0x10>
 80a10ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a10cc:	b109      	cbz	r1, 80a10d2 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a10ce:	f7ff ffc7 	bl	80a1060 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a10d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a10d4:	2300      	movs	r3, #0
 80a10d6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a10d8:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a10da:	b141      	cbz	r1, 80a10ee <_ZN3UDP11parsePacketEm+0x2c>
 80a10dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a10de:	b132      	cbz	r2, 80a10ee <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a10e0:	6820      	ldr	r0, [r4, #0]
 80a10e2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a10e4:	4620      	mov	r0, r4
 80a10e6:	47a8      	blx	r5
        if (result>0) {
 80a10e8:	2800      	cmp	r0, #0
            _total = result;
 80a10ea:	bfc8      	it	gt
 80a10ec:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a10ee:	6823      	ldr	r3, [r4, #0]
 80a10f0:	4620      	mov	r0, r4
}
 80a10f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a10f6:	691b      	ldr	r3, [r3, #16]
 80a10f8:	4718      	bx	r3

080a10fa <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a10fa:	4770      	bx	lr

080a10fc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10fc:	7441      	strb	r1, [r0, #17]
 80a10fe:	4770      	bx	lr

080a1100 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1100:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1102:	7c00      	ldrb	r0, [r0, #16]
 80a1104:	f7ff fac6 	bl	80a0694 <HAL_USART_Available_Data_For_Write>
}
 80a1108:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a110c:	bd08      	pop	{r3, pc}

080a110e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a110e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1110:	7c00      	ldrb	r0, [r0, #16]
 80a1112:	f7ff fa9f 	bl	80a0654 <HAL_USART_Available_Data>
}
 80a1116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a111a:	bd08      	pop	{r3, pc}

080a111c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a111c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a111e:	7c00      	ldrb	r0, [r0, #16]
 80a1120:	f7ff faa8 	bl	80a0674 <HAL_USART_Peek_Data>
}
 80a1124:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1128:	bf28      	it	cs
 80a112a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a112e:	bd08      	pop	{r3, pc}

080a1130 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1130:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1132:	7c00      	ldrb	r0, [r0, #16]
 80a1134:	f7ff fa96 	bl	80a0664 <HAL_USART_Read_Data>
}
 80a1138:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a113c:	bf28      	it	cs
 80a113e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1142:	bd08      	pop	{r3, pc}

080a1144 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1144:	7c00      	ldrb	r0, [r0, #16]
 80a1146:	f7ff ba9d 	b.w	80a0684 <HAL_USART_Flush_Data>

080a114a <_ZN11USARTSerialD0Ev>:
 80a114a:	b510      	push	{r4, lr}
 80a114c:	4604      	mov	r4, r0
 80a114e:	2114      	movs	r1, #20
 80a1150:	f000 fa63 	bl	80a161a <_ZdlPvj>
 80a1154:	4620      	mov	r0, r4
 80a1156:	bd10      	pop	{r4, pc}

080a1158 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1158:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a115a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a115c:	4604      	mov	r4, r0
 80a115e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1160:	b925      	cbnz	r5, 80a116c <_ZN11USARTSerial5writeEh+0x14>
 80a1162:	7c00      	ldrb	r0, [r0, #16]
 80a1164:	f7ff fa96 	bl	80a0694 <HAL_USART_Available_Data_For_Write>
 80a1168:	2800      	cmp	r0, #0
 80a116a:	dd05      	ble.n	80a1178 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a116c:	4631      	mov	r1, r6
 80a116e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1174:	f7ff ba66 	b.w	80a0644 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1178:	4628      	mov	r0, r5
 80a117a:	bd70      	pop	{r4, r5, r6, pc}

080a117c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a117c:	b510      	push	{r4, lr}
 80a117e:	4604      	mov	r4, r0
 80a1180:	4608      	mov	r0, r1
 80a1182:	4611      	mov	r1, r2
 80a1184:	2200      	movs	r2, #0
 80a1186:	6062      	str	r2, [r4, #4]
 80a1188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a118c:	60a2      	str	r2, [r4, #8]
 80a118e:	4a05      	ldr	r2, [pc, #20]	; (80a11a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1190:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1192:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1194:	2201      	movs	r2, #1
 80a1196:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1198:	461a      	mov	r2, r3
 80a119a:	f7ff fa4b 	bl	80a0634 <HAL_USART_Init>
}
 80a119e:	4620      	mov	r0, r4
 80a11a0:	bd10      	pop	{r4, pc}
 80a11a2:	bf00      	nop
 80a11a4:	080a1fe8 	.word	0x080a1fe8

080a11a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a11a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a11aa:	4d0c      	ldr	r5, [pc, #48]	; (80a11dc <_Z22__fetch_global_Serial1v+0x34>)
 80a11ac:	6829      	ldr	r1, [r5, #0]
 80a11ae:	f011 0401 	ands.w	r4, r1, #1
 80a11b2:	d111      	bne.n	80a11d8 <_Z22__fetch_global_Serial1v+0x30>
 80a11b4:	4628      	mov	r0, r5
 80a11b6:	f7fe ff74 	bl	80a00a2 <__cxa_guard_acquire>
 80a11ba:	b168      	cbz	r0, 80a11d8 <_Z22__fetch_global_Serial1v+0x30>
 80a11bc:	4a08      	ldr	r2, [pc, #32]	; (80a11e0 <_Z22__fetch_global_Serial1v+0x38>)
 80a11be:	4621      	mov	r1, r4
 80a11c0:	4b08      	ldr	r3, [pc, #32]	; (80a11e4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a11c2:	4809      	ldr	r0, [pc, #36]	; (80a11e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11c4:	f7ff ffda 	bl	80a117c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a11c8:	4628      	mov	r0, r5
 80a11ca:	f7fe ff6f 	bl	80a00ac <__cxa_guard_release>
 80a11ce:	4a07      	ldr	r2, [pc, #28]	; (80a11ec <_Z22__fetch_global_Serial1v+0x44>)
 80a11d0:	4907      	ldr	r1, [pc, #28]	; (80a11f0 <_Z22__fetch_global_Serial1v+0x48>)
 80a11d2:	4805      	ldr	r0, [pc, #20]	; (80a11e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11d4:	f000 fa1c 	bl	80a1610 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a11d8:	4803      	ldr	r0, [pc, #12]	; (80a11e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11da:	bd38      	pop	{r3, r4, r5, pc}
 80a11dc:	200001a8 	.word	0x200001a8
 80a11e0:	200001ac 	.word	0x200001ac
 80a11e4:	20000124 	.word	0x20000124
 80a11e8:	20000110 	.word	0x20000110
 80a11ec:	2000006c 	.word	0x2000006c
 80a11f0:	080a10fb 	.word	0x080a10fb

080a11f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a11f4:	7441      	strb	r1, [r0, #17]
 80a11f6:	4770      	bx	lr

080a11f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a11f8:	4770      	bx	lr

080a11fa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a11fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a11fc:	2100      	movs	r1, #0
 80a11fe:	7c00      	ldrb	r0, [r0, #16]
 80a1200:	f7ff fa70 	bl	80a06e4 <HAL_USB_USART_Receive_Data>
}
 80a1204:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1208:	bf28      	it	cs
 80a120a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a120e:	bd08      	pop	{r3, pc}

080a1210 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1210:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1212:	2101      	movs	r1, #1
 80a1214:	7c00      	ldrb	r0, [r0, #16]
 80a1216:	f7ff fa65 	bl	80a06e4 <HAL_USB_USART_Receive_Data>
}
 80a121a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a121e:	bf28      	it	cs
 80a1220:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1224:	bd08      	pop	{r3, pc}

080a1226 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1226:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1228:	7c00      	ldrb	r0, [r0, #16]
 80a122a:	f7ff fa53 	bl	80a06d4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a122e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1232:	bd08      	pop	{r3, pc}

080a1234 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1234:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1236:	7c00      	ldrb	r0, [r0, #16]
 80a1238:	f7ff fa44 	bl	80a06c4 <HAL_USB_USART_Available_Data>
}
 80a123c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1240:	bd08      	pop	{r3, pc}

080a1242 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1242:	7c00      	ldrb	r0, [r0, #16]
 80a1244:	f7ff ba5e 	b.w	80a0704 <HAL_USB_USART_Flush_Data>

080a1248 <_ZN9USBSerialD0Ev>:
 80a1248:	b510      	push	{r4, lr}
 80a124a:	4604      	mov	r4, r0
 80a124c:	2114      	movs	r1, #20
 80a124e:	f000 f9e4 	bl	80a161a <_ZdlPvj>
 80a1252:	4620      	mov	r0, r4
 80a1254:	bd10      	pop	{r4, pc}

080a1256 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1256:	b538      	push	{r3, r4, r5, lr}
 80a1258:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a125a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a125c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a125e:	f7ff fa39 	bl	80a06d4 <HAL_USB_USART_Available_Data_For_Write>
 80a1262:	2800      	cmp	r0, #0
 80a1264:	dc01      	bgt.n	80a126a <_ZN9USBSerial5writeEh+0x14>
 80a1266:	7c60      	ldrb	r0, [r4, #17]
 80a1268:	b128      	cbz	r0, 80a1276 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a126a:	4629      	mov	r1, r5
 80a126c:	7c20      	ldrb	r0, [r4, #16]
 80a126e:	f7ff fa41 	bl	80a06f4 <HAL_USB_USART_Send_Data>
 80a1272:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1276:	bd38      	pop	{r3, r4, r5, pc}

080a1278 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1278:	b510      	push	{r4, lr}
 80a127a:	4604      	mov	r4, r0
 80a127c:	2300      	movs	r3, #0
 80a127e:	6063      	str	r3, [r4, #4]
 80a1280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1284:	60a3      	str	r3, [r4, #8]
 80a1286:	4b05      	ldr	r3, [pc, #20]	; (80a129c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1288:	4608      	mov	r0, r1
 80a128a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a128c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a128e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1290:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1292:	4611      	mov	r1, r2
 80a1294:	f7ff fa06 	bl	80a06a4 <HAL_USB_USART_Init>
}
 80a1298:	4620      	mov	r0, r4
 80a129a:	bd10      	pop	{r4, pc}
 80a129c:	080a2018 	.word	0x080a2018

080a12a0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a12a0:	2200      	movs	r2, #0
 80a12a2:	7c00      	ldrb	r0, [r0, #16]
 80a12a4:	f7ff ba06 	b.w	80a06b4 <HAL_USB_USART_Begin>

080a12a8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a12a8:	7c00      	ldrb	r0, [r0, #16]
 80a12aa:	f7ff ba33 	b.w	80a0714 <HAL_USB_USART_Is_Enabled>

080a12ae <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a12ae:	f7ff bffb 	b.w	80a12a8 <_ZN9USBSerial9isEnabledEv>
	...

080a12b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a12b4:	b510      	push	{r4, lr}
 80a12b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a12b8:	2214      	movs	r2, #20
 80a12ba:	2100      	movs	r1, #0
 80a12bc:	f000 fcf1 	bl	80a1ca2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12c0:	4b05      	ldr	r3, [pc, #20]	; (80a12d8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a12c2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12c4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a12c6:	4b05      	ldr	r3, [pc, #20]	; (80a12dc <_Z19acquireSerialBufferv+0x28>)
 80a12c8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a12ca:	f240 1301 	movw	r3, #257	; 0x101
 80a12ce:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a12d0:	2381      	movs	r3, #129	; 0x81
 80a12d2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a12d4:	bd10      	pop	{r4, pc}
 80a12d6:	bf00      	nop
 80a12d8:	200002b5 	.word	0x200002b5
 80a12dc:	20000234 	.word	0x20000234

080a12e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a12e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12e2:	4d0e      	ldr	r5, [pc, #56]	; (80a131c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a12e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a12e6:	a801      	add	r0, sp, #4
 80a12e8:	f7ff ffe4 	bl	80a12b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12ec:	6829      	ldr	r1, [r5, #0]
 80a12ee:	f011 0401 	ands.w	r4, r1, #1
 80a12f2:	d110      	bne.n	80a1316 <_Z16_fetch_usbserialv+0x36>
 80a12f4:	4628      	mov	r0, r5
 80a12f6:	f7fe fed4 	bl	80a00a2 <__cxa_guard_acquire>
 80a12fa:	b160      	cbz	r0, 80a1316 <_Z16_fetch_usbserialv+0x36>
 80a12fc:	aa01      	add	r2, sp, #4
 80a12fe:	4621      	mov	r1, r4
 80a1300:	4807      	ldr	r0, [pc, #28]	; (80a1320 <_Z16_fetch_usbserialv+0x40>)
 80a1302:	f7ff ffb9 	bl	80a1278 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1306:	4628      	mov	r0, r5
 80a1308:	f7fe fed0 	bl	80a00ac <__cxa_guard_release>
 80a130c:	4a05      	ldr	r2, [pc, #20]	; (80a1324 <_Z16_fetch_usbserialv+0x44>)
 80a130e:	4906      	ldr	r1, [pc, #24]	; (80a1328 <_Z16_fetch_usbserialv+0x48>)
 80a1310:	4803      	ldr	r0, [pc, #12]	; (80a1320 <_Z16_fetch_usbserialv+0x40>)
 80a1312:	f000 f97d 	bl	80a1610 <__aeabi_atexit>
	return _usbserial;
}
 80a1316:	4802      	ldr	r0, [pc, #8]	; (80a1320 <_Z16_fetch_usbserialv+0x40>)
 80a1318:	b007      	add	sp, #28
 80a131a:	bd30      	pop	{r4, r5, pc}
 80a131c:	20000230 	.word	0x20000230
 80a1320:	200003b8 	.word	0x200003b8
 80a1324:	2000006c 	.word	0x2000006c
 80a1328:	080a11f9 	.word	0x080a11f9

080a132c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a132c:	b510      	push	{r4, lr}
 80a132e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1330:	2214      	movs	r2, #20
 80a1332:	2100      	movs	r1, #0
 80a1334:	f000 fcb5 	bl	80a1ca2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1338:	4b05      	ldr	r3, [pc, #20]	; (80a1350 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a133a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a133c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a133e:	4b05      	ldr	r3, [pc, #20]	; (80a1354 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1340:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1342:	f240 1301 	movw	r3, #257	; 0x101
 80a1346:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1348:	2381      	movs	r3, #129	; 0x81
 80a134a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a134c:	bd10      	pop	{r4, pc}
 80a134e:	bf00      	nop
 80a1350:	20000468 	.word	0x20000468
 80a1354:	200003d0 	.word	0x200003d0

080a1358 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1358:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a135a:	4c0e      	ldr	r4, [pc, #56]	; (80a1394 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a135c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a135e:	a801      	add	r0, sp, #4
 80a1360:	f7ff ffe4 	bl	80a132c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1364:	6823      	ldr	r3, [r4, #0]
 80a1366:	07db      	lsls	r3, r3, #31
 80a1368:	d410      	bmi.n	80a138c <_Z17_fetch_usbserial1v+0x34>
 80a136a:	4620      	mov	r0, r4
 80a136c:	f7fe fe99 	bl	80a00a2 <__cxa_guard_acquire>
 80a1370:	b160      	cbz	r0, 80a138c <_Z17_fetch_usbserial1v+0x34>
 80a1372:	aa01      	add	r2, sp, #4
 80a1374:	2101      	movs	r1, #1
 80a1376:	4808      	ldr	r0, [pc, #32]	; (80a1398 <_Z17_fetch_usbserial1v+0x40>)
 80a1378:	f7ff ff7e 	bl	80a1278 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a137c:	4620      	mov	r0, r4
 80a137e:	f7fe fe95 	bl	80a00ac <__cxa_guard_release>
 80a1382:	4a06      	ldr	r2, [pc, #24]	; (80a139c <_Z17_fetch_usbserial1v+0x44>)
 80a1384:	4906      	ldr	r1, [pc, #24]	; (80a13a0 <_Z17_fetch_usbserial1v+0x48>)
 80a1386:	4804      	ldr	r0, [pc, #16]	; (80a1398 <_Z17_fetch_usbserial1v+0x40>)
 80a1388:	f000 f942 	bl	80a1610 <__aeabi_atexit>
  return _usbserial1;
}
 80a138c:	4802      	ldr	r0, [pc, #8]	; (80a1398 <_Z17_fetch_usbserial1v+0x40>)
 80a138e:	b006      	add	sp, #24
 80a1390:	bd10      	pop	{r4, pc}
 80a1392:	bf00      	nop
 80a1394:	200003cc 	.word	0x200003cc
 80a1398:	20000454 	.word	0x20000454
 80a139c:	2000006c 	.word	0x2000006c
 80a13a0:	080a11f9 	.word	0x080a11f9

080a13a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a13a4:	2200      	movs	r2, #0
 80a13a6:	4611      	mov	r1, r2
 80a13a8:	6840      	ldr	r0, [r0, #4]
 80a13aa:	f7ff ba0f 	b.w	80a07cc <network_ready>

080a13ae <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13b0:	4616      	mov	r6, r2
 80a13b2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a13b4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13b6:	460f      	mov	r7, r1
 80a13b8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a13ba:	2100      	movs	r1, #0
 80a13bc:	a803      	add	r0, sp, #12
 80a13be:	f000 fc70 	bl	80a1ca2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13c2:	4630      	mov	r0, r6
 80a13c4:	f000 fca8 	bl	80a1d18 <strlen>
 80a13c8:	2500      	movs	r5, #0
 80a13ca:	9500      	str	r5, [sp, #0]
 80a13cc:	b281      	uxth	r1, r0
 80a13ce:	687b      	ldr	r3, [r7, #4]
 80a13d0:	aa03      	add	r2, sp, #12
 80a13d2:	4630      	mov	r0, r6
 80a13d4:	f7ff f9a6 	bl	80a0724 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13d8:	b120      	cbz	r0, 80a13e4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a13da:	4629      	mov	r1, r5
 80a13dc:	4620      	mov	r0, r4
 80a13de:	f7ff fa97 	bl	80a0910 <_ZN9IPAddressC1Em>
 80a13e2:	e003      	b.n	80a13ec <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a13e4:	a903      	add	r1, sp, #12
 80a13e6:	4620      	mov	r0, r4
 80a13e8:	f7ff fa80 	bl	80a08ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a13ec:	4620      	mov	r0, r4
 80a13ee:	b009      	add	sp, #36	; 0x24
 80a13f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a13f2:	2200      	movs	r2, #0
 80a13f4:	4611      	mov	r1, r2
 80a13f6:	6840      	ldr	r0, [r0, #4]
 80a13f8:	f7ff ba08 	b.w	80a080c <network_listening>

080a13fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a13fc:	2200      	movs	r2, #0
 80a13fe:	4611      	mov	r1, r2
 80a1400:	6840      	ldr	r0, [r0, #4]
 80a1402:	f7ff ba13 	b.w	80a082c <network_get_listen_timeout>

080a1406 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1406:	2200      	movs	r2, #0
 80a1408:	6840      	ldr	r0, [r0, #4]
 80a140a:	f7ff ba07 	b.w	80a081c <network_set_listen_timeout>

080a140e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a140e:	2200      	movs	r2, #0
 80a1410:	f081 0101 	eor.w	r1, r1, #1
 80a1414:	6840      	ldr	r0, [r0, #4]
 80a1416:	f7ff b9f1 	b.w	80a07fc <network_listen>

080a141a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a141a:	2300      	movs	r3, #0
 80a141c:	461a      	mov	r2, r3
 80a141e:	4619      	mov	r1, r3
 80a1420:	6840      	ldr	r0, [r0, #4]
 80a1422:	f7ff b9e3 	b.w	80a07ec <network_off>

080a1426 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1426:	2300      	movs	r3, #0
 80a1428:	461a      	mov	r2, r3
 80a142a:	4619      	mov	r1, r3
 80a142c:	6840      	ldr	r0, [r0, #4]
 80a142e:	f7ff b9d5 	b.w	80a07dc <network_on>

080a1432 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1432:	2200      	movs	r2, #0
 80a1434:	4611      	mov	r1, r2
 80a1436:	6840      	ldr	r0, [r0, #4]
 80a1438:	f7ff b9b8 	b.w	80a07ac <network_connecting>

080a143c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a143c:	2200      	movs	r2, #0
 80a143e:	2102      	movs	r1, #2
 80a1440:	6840      	ldr	r0, [r0, #4]
 80a1442:	f7ff b9bb 	b.w	80a07bc <network_disconnect>

080a1446 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1446:	2300      	movs	r3, #0
 80a1448:	461a      	mov	r2, r3
 80a144a:	6840      	ldr	r0, [r0, #4]
 80a144c:	f7ff b9a6 	b.w	80a079c <network_connect>

080a1450 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1450:	4b02      	ldr	r3, [pc, #8]	; (80a145c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1452:	2204      	movs	r2, #4
 80a1454:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1456:	4a02      	ldr	r2, [pc, #8]	; (80a1460 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1458:	601a      	str	r2, [r3, #0]
 80a145a:	4770      	bx	lr
 80a145c:	2000056c 	.word	0x2000056c
 80a1460:	080a2048 	.word	0x080a2048

080a1464 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1464:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1466:	4b14      	ldr	r3, [pc, #80]	; (80a14b8 <serialEventRun+0x54>)
 80a1468:	b133      	cbz	r3, 80a1478 <serialEventRun+0x14>
 80a146a:	f7ff ff39 	bl	80a12e0 <_Z16_fetch_usbserialv>
 80a146e:	6803      	ldr	r3, [r0, #0]
 80a1470:	691b      	ldr	r3, [r3, #16]
 80a1472:	4798      	blx	r3
 80a1474:	2800      	cmp	r0, #0
 80a1476:	dc16      	bgt.n	80a14a6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1478:	4b10      	ldr	r3, [pc, #64]	; (80a14bc <serialEventRun+0x58>)
 80a147a:	b133      	cbz	r3, 80a148a <serialEventRun+0x26>
 80a147c:	f7ff fe94 	bl	80a11a8 <_Z22__fetch_global_Serial1v>
 80a1480:	6803      	ldr	r3, [r0, #0]
 80a1482:	691b      	ldr	r3, [r3, #16]
 80a1484:	4798      	blx	r3
 80a1486:	2800      	cmp	r0, #0
 80a1488:	dc10      	bgt.n	80a14ac <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a148a:	4b0d      	ldr	r3, [pc, #52]	; (80a14c0 <serialEventRun+0x5c>)
 80a148c:	b10b      	cbz	r3, 80a1492 <serialEventRun+0x2e>
 80a148e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1492:	4b0c      	ldr	r3, [pc, #48]	; (80a14c4 <serialEventRun+0x60>)
 80a1494:	b17b      	cbz	r3, 80a14b6 <serialEventRun+0x52>
 80a1496:	f7ff ff5f 	bl	80a1358 <_Z17_fetch_usbserial1v>
 80a149a:	6803      	ldr	r3, [r0, #0]
 80a149c:	691b      	ldr	r3, [r3, #16]
 80a149e:	4798      	blx	r3
 80a14a0:	2800      	cmp	r0, #0
 80a14a2:	dc06      	bgt.n	80a14b2 <serialEventRun+0x4e>
 80a14a4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a14a6:	f3af 8000 	nop.w
 80a14aa:	e7e5      	b.n	80a1478 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a14ac:	f3af 8000 	nop.w
 80a14b0:	e7eb      	b.n	80a148a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a14b2:	f3af 8000 	nop.w
 80a14b6:	bd08      	pop	{r3, pc}
	...

080a14c8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a14c8:	b508      	push	{r3, lr}
	serialEventRun();
 80a14ca:	f7ff ffcb 	bl	80a1464 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a14ce:	f7ff f869 	bl	80a05a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a14d2:	4b01      	ldr	r3, [pc, #4]	; (80a14d8 <_post_loop+0x10>)
 80a14d4:	6018      	str	r0, [r3, #0]
 80a14d6:	bd08      	pop	{r3, pc}
 80a14d8:	2000057c 	.word	0x2000057c

080a14dc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a14dc:	4802      	ldr	r0, [pc, #8]	; (80a14e8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a14de:	4a03      	ldr	r2, [pc, #12]	; (80a14ec <_Z33system_initialize_user_backup_ramv+0x10>)
 80a14e0:	4903      	ldr	r1, [pc, #12]	; (80a14f0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a14e2:	1a12      	subs	r2, r2, r0
 80a14e4:	f000 bbd2 	b.w	80a1c8c <memcpy>
 80a14e8:	40024000 	.word	0x40024000
 80a14ec:	40024004 	.word	0x40024004
 80a14f0:	080a2120 	.word	0x080a2120

080a14f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a14f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14f6:	2300      	movs	r3, #0
 80a14f8:	9300      	str	r3, [sp, #0]
 80a14fa:	461a      	mov	r2, r3
 80a14fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1500:	f7ff f932 	bl	80a0768 <system_ctrl_set_result>
}
 80a1504:	b003      	add	sp, #12
 80a1506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a150c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a150c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a150e:	8843      	ldrh	r3, [r0, #2]
 80a1510:	2b0a      	cmp	r3, #10
 80a1512:	d008      	beq.n	80a1526 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1514:	2b50      	cmp	r3, #80	; 0x50
 80a1516:	d109      	bne.n	80a152c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1518:	4b09      	ldr	r3, [pc, #36]	; (80a1540 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a151a:	681b      	ldr	r3, [r3, #0]
 80a151c:	b13b      	cbz	r3, 80a152e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a151e:	b003      	add	sp, #12
 80a1520:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1524:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1526:	f7ff ffe5 	bl	80a14f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a152a:	e006      	b.n	80a153a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a152c:	2300      	movs	r3, #0
 80a152e:	9300      	str	r3, [sp, #0]
 80a1530:	461a      	mov	r2, r3
 80a1532:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1536:	f7ff f917 	bl	80a0768 <system_ctrl_set_result>
        break;
    }
}
 80a153a:	b003      	add	sp, #12
 80a153c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1540:	20000574 	.word	0x20000574

080a1544 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1544:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1546:	4c10      	ldr	r4, [pc, #64]	; (80a1588 <module_user_init_hook+0x44>)
 80a1548:	4d10      	ldr	r5, [pc, #64]	; (80a158c <module_user_init_hook+0x48>)
 80a154a:	6823      	ldr	r3, [r4, #0]
 80a154c:	42ab      	cmp	r3, r5
 80a154e:	4b10      	ldr	r3, [pc, #64]	; (80a1590 <module_user_init_hook+0x4c>)
 80a1550:	bf0c      	ite	eq
 80a1552:	2201      	moveq	r2, #1
 80a1554:	2200      	movne	r2, #0
 80a1556:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1558:	d002      	beq.n	80a1560 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a155a:	f7ff ffbf 	bl	80a14dc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a155e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1560:	f7ff f818 	bl	80a0594 <HAL_RNG_GetRandomNumber>
 80a1564:	4604      	mov	r4, r0
    srand(seed);
 80a1566:	f000 fba5 	bl	80a1cb4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a156a:	4b0a      	ldr	r3, [pc, #40]	; (80a1594 <module_user_init_hook+0x50>)
 80a156c:	b113      	cbz	r3, 80a1574 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a156e:	4620      	mov	r0, r4
 80a1570:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1574:	2100      	movs	r1, #0
 80a1576:	4807      	ldr	r0, [pc, #28]	; (80a1594 <module_user_init_hook+0x50>)
 80a1578:	f7ff f900 	bl	80a077c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a157c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1580:	2100      	movs	r1, #0
 80a1582:	4805      	ldr	r0, [pc, #20]	; (80a1598 <module_user_init_hook+0x54>)
 80a1584:	f7ff b8e6 	b.w	80a0754 <system_ctrl_set_app_request_handler>
 80a1588:	40024000 	.word	0x40024000
 80a158c:	9a271c1e 	.word	0x9a271c1e
 80a1590:	20000578 	.word	0x20000578
 80a1594:	00000000 	.word	0x00000000
 80a1598:	080a150d 	.word	0x080a150d

080a159c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a159c:	b513      	push	{r0, r1, r4, lr}
 80a159e:	4c08      	ldr	r4, [pc, #32]	; (80a15c0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a15a0:	2300      	movs	r3, #0
 80a15a2:	461a      	mov	r2, r3
 80a15a4:	4619      	mov	r1, r3
 80a15a6:	9300      	str	r3, [sp, #0]
 80a15a8:	4620      	mov	r0, r4
 80a15aa:	f7ff f9c7 	bl	80a093c <_ZN9IPAddressC1Ehhhh>
 80a15ae:	4620      	mov	r0, r4
 80a15b0:	4a04      	ldr	r2, [pc, #16]	; (80a15c4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a15b2:	4905      	ldr	r1, [pc, #20]	; (80a15c8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a15b4:	b002      	add	sp, #8
 80a15b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a15ba:	f000 b829 	b.w	80a1610 <__aeabi_atexit>
 80a15be:	bf00      	nop
 80a15c0:	20000580 	.word	0x20000580
 80a15c4:	2000006c 	.word	0x2000006c
 80a15c8:	080a00b3 	.word	0x080a00b3

080a15cc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15cc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a15ce:	4c0c      	ldr	r4, [pc, #48]	; (80a1600 <_GLOBAL__sub_I_SPI+0x34>)
 80a15d0:	4e0c      	ldr	r6, [pc, #48]	; (80a1604 <_GLOBAL__sub_I_SPI+0x38>)
 80a15d2:	4d0d      	ldr	r5, [pc, #52]	; (80a1608 <_GLOBAL__sub_I_SPI+0x3c>)
 80a15d4:	2100      	movs	r1, #0
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	f7ff fae4 	bl	80a0ba4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a15dc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15de:	4c0b      	ldr	r4, [pc, #44]	; (80a160c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a15e0:	4632      	mov	r2, r6
 80a15e2:	4629      	mov	r1, r5
 80a15e4:	f000 f814 	bl	80a1610 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15e8:	2101      	movs	r1, #1
 80a15ea:	4620      	mov	r0, r4
 80a15ec:	f7ff fada 	bl	80a0ba4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a15f0:	4632      	mov	r2, r6
 80a15f2:	4629      	mov	r1, r5
 80a15f4:	4620      	mov	r0, r4
 80a15f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a15fa:	f000 b809 	b.w	80a1610 <__aeabi_atexit>
 80a15fe:	bf00      	nop
 80a1600:	20000598 	.word	0x20000598
 80a1604:	2000006c 	.word	0x2000006c
 80a1608:	080a0b95 	.word	0x080a0b95
 80a160c:	200005a8 	.word	0x200005a8

080a1610 <__aeabi_atexit>:
 80a1610:	460b      	mov	r3, r1
 80a1612:	4601      	mov	r1, r0
 80a1614:	4618      	mov	r0, r3
 80a1616:	f000 bb2b 	b.w	80a1c70 <__cxa_atexit>

080a161a <_ZdlPvj>:
 80a161a:	f7fe bd40 	b.w	80a009e <_ZdlPv>
	...

080a1620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1620:	4b24      	ldr	r3, [pc, #144]	; (80a16b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1622:	681a      	ldr	r2, [r3, #0]
 80a1624:	07d0      	lsls	r0, r2, #31
 80a1626:	bf5c      	itt	pl
 80a1628:	2201      	movpl	r2, #1
 80a162a:	601a      	strpl	r2, [r3, #0]
 80a162c:	4b22      	ldr	r3, [pc, #136]	; (80a16b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a162e:	681a      	ldr	r2, [r3, #0]
 80a1630:	07d1      	lsls	r1, r2, #31
 80a1632:	bf5c      	itt	pl
 80a1634:	2201      	movpl	r2, #1
 80a1636:	601a      	strpl	r2, [r3, #0]
 80a1638:	4b20      	ldr	r3, [pc, #128]	; (80a16bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a163a:	681a      	ldr	r2, [r3, #0]
 80a163c:	07d2      	lsls	r2, r2, #31
 80a163e:	bf5c      	itt	pl
 80a1640:	2201      	movpl	r2, #1
 80a1642:	601a      	strpl	r2, [r3, #0]
 80a1644:	4b1e      	ldr	r3, [pc, #120]	; (80a16c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1646:	681a      	ldr	r2, [r3, #0]
 80a1648:	07d0      	lsls	r0, r2, #31
 80a164a:	bf5c      	itt	pl
 80a164c:	2201      	movpl	r2, #1
 80a164e:	601a      	strpl	r2, [r3, #0]
 80a1650:	4b1c      	ldr	r3, [pc, #112]	; (80a16c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1652:	681a      	ldr	r2, [r3, #0]
 80a1654:	07d1      	lsls	r1, r2, #31
 80a1656:	bf5c      	itt	pl
 80a1658:	2201      	movpl	r2, #1
 80a165a:	601a      	strpl	r2, [r3, #0]
 80a165c:	4b1a      	ldr	r3, [pc, #104]	; (80a16c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a165e:	681a      	ldr	r2, [r3, #0]
 80a1660:	07d2      	lsls	r2, r2, #31
 80a1662:	bf5c      	itt	pl
 80a1664:	2201      	movpl	r2, #1
 80a1666:	601a      	strpl	r2, [r3, #0]
 80a1668:	4b18      	ldr	r3, [pc, #96]	; (80a16cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a166a:	681a      	ldr	r2, [r3, #0]
 80a166c:	07d0      	lsls	r0, r2, #31
 80a166e:	bf5c      	itt	pl
 80a1670:	2201      	movpl	r2, #1
 80a1672:	601a      	strpl	r2, [r3, #0]
 80a1674:	4b16      	ldr	r3, [pc, #88]	; (80a16d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1676:	681a      	ldr	r2, [r3, #0]
 80a1678:	07d1      	lsls	r1, r2, #31
 80a167a:	bf5c      	itt	pl
 80a167c:	2201      	movpl	r2, #1
 80a167e:	601a      	strpl	r2, [r3, #0]
 80a1680:	4b14      	ldr	r3, [pc, #80]	; (80a16d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1682:	681a      	ldr	r2, [r3, #0]
 80a1684:	07d2      	lsls	r2, r2, #31
 80a1686:	bf5c      	itt	pl
 80a1688:	2201      	movpl	r2, #1
 80a168a:	601a      	strpl	r2, [r3, #0]
 80a168c:	4b12      	ldr	r3, [pc, #72]	; (80a16d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a168e:	681a      	ldr	r2, [r3, #0]
 80a1690:	07d0      	lsls	r0, r2, #31
 80a1692:	bf5c      	itt	pl
 80a1694:	2201      	movpl	r2, #1
 80a1696:	601a      	strpl	r2, [r3, #0]
 80a1698:	4b10      	ldr	r3, [pc, #64]	; (80a16dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a169a:	681a      	ldr	r2, [r3, #0]
 80a169c:	07d1      	lsls	r1, r2, #31
 80a169e:	bf5c      	itt	pl
 80a16a0:	2201      	movpl	r2, #1
 80a16a2:	601a      	strpl	r2, [r3, #0]
 80a16a4:	4b0e      	ldr	r3, [pc, #56]	; (80a16e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a16a6:	681a      	ldr	r2, [r3, #0]
 80a16a8:	07d2      	lsls	r2, r2, #31
 80a16aa:	bf5c      	itt	pl
 80a16ac:	2201      	movpl	r2, #1
 80a16ae:	601a      	strpl	r2, [r3, #0]
 80a16b0:	4770      	bx	lr
 80a16b2:	bf00      	nop
 80a16b4:	200005e4 	.word	0x200005e4
 80a16b8:	200005e0 	.word	0x200005e0
 80a16bc:	200005dc 	.word	0x200005dc
 80a16c0:	200005d8 	.word	0x200005d8
 80a16c4:	200005d4 	.word	0x200005d4
 80a16c8:	200005d0 	.word	0x200005d0
 80a16cc:	200005cc 	.word	0x200005cc
 80a16d0:	200005c8 	.word	0x200005c8
 80a16d4:	200005c4 	.word	0x200005c4
 80a16d8:	200005c0 	.word	0x200005c0
 80a16dc:	200005bc 	.word	0x200005bc
 80a16e0:	200005b8 	.word	0x200005b8

080a16e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a16e4:	4b18      	ldr	r3, [pc, #96]	; (80a1748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a16e6:	681a      	ldr	r2, [r3, #0]
 80a16e8:	07d1      	lsls	r1, r2, #31
 80a16ea:	bf5c      	itt	pl
 80a16ec:	2201      	movpl	r2, #1
 80a16ee:	601a      	strpl	r2, [r3, #0]
 80a16f0:	4b16      	ldr	r3, [pc, #88]	; (80a174c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a16f2:	681a      	ldr	r2, [r3, #0]
 80a16f4:	07d2      	lsls	r2, r2, #31
 80a16f6:	bf5c      	itt	pl
 80a16f8:	2201      	movpl	r2, #1
 80a16fa:	601a      	strpl	r2, [r3, #0]
 80a16fc:	4b14      	ldr	r3, [pc, #80]	; (80a1750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a16fe:	681a      	ldr	r2, [r3, #0]
 80a1700:	07d0      	lsls	r0, r2, #31
 80a1702:	bf5c      	itt	pl
 80a1704:	2201      	movpl	r2, #1
 80a1706:	601a      	strpl	r2, [r3, #0]
 80a1708:	4b12      	ldr	r3, [pc, #72]	; (80a1754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a170a:	681a      	ldr	r2, [r3, #0]
 80a170c:	07d1      	lsls	r1, r2, #31
 80a170e:	bf5c      	itt	pl
 80a1710:	2201      	movpl	r2, #1
 80a1712:	601a      	strpl	r2, [r3, #0]
 80a1714:	4b10      	ldr	r3, [pc, #64]	; (80a1758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1716:	681a      	ldr	r2, [r3, #0]
 80a1718:	07d2      	lsls	r2, r2, #31
 80a171a:	bf5c      	itt	pl
 80a171c:	2201      	movpl	r2, #1
 80a171e:	601a      	strpl	r2, [r3, #0]
 80a1720:	4b0e      	ldr	r3, [pc, #56]	; (80a175c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1722:	681a      	ldr	r2, [r3, #0]
 80a1724:	07d0      	lsls	r0, r2, #31
 80a1726:	bf5c      	itt	pl
 80a1728:	2201      	movpl	r2, #1
 80a172a:	601a      	strpl	r2, [r3, #0]
 80a172c:	4b0c      	ldr	r3, [pc, #48]	; (80a1760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a172e:	681a      	ldr	r2, [r3, #0]
 80a1730:	07d1      	lsls	r1, r2, #31
 80a1732:	bf5c      	itt	pl
 80a1734:	2201      	movpl	r2, #1
 80a1736:	601a      	strpl	r2, [r3, #0]
 80a1738:	4b0a      	ldr	r3, [pc, #40]	; (80a1764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a173a:	681a      	ldr	r2, [r3, #0]
 80a173c:	07d2      	lsls	r2, r2, #31
 80a173e:	bf5c      	itt	pl
 80a1740:	2201      	movpl	r2, #1
 80a1742:	601a      	strpl	r2, [r3, #0]
 80a1744:	4770      	bx	lr
 80a1746:	bf00      	nop
 80a1748:	20000604 	.word	0x20000604
 80a174c:	20000600 	.word	0x20000600
 80a1750:	200005fc 	.word	0x200005fc
 80a1754:	200005f8 	.word	0x200005f8
 80a1758:	200005f4 	.word	0x200005f4
 80a175c:	200005f0 	.word	0x200005f0
 80a1760:	200005ec 	.word	0x200005ec
 80a1764:	200005e8 	.word	0x200005e8

080a1768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1768:	4b18      	ldr	r3, [pc, #96]	; (80a17cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d1      	lsls	r1, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b16      	ldr	r3, [pc, #88]	; (80a17d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d2      	lsls	r2, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b14      	ldr	r3, [pc, #80]	; (80a17d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d0      	lsls	r0, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b12      	ldr	r3, [pc, #72]	; (80a17d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d1      	lsls	r1, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4b10      	ldr	r3, [pc, #64]	; (80a17dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a179a:	681a      	ldr	r2, [r3, #0]
 80a179c:	07d2      	lsls	r2, r2, #31
 80a179e:	bf5c      	itt	pl
 80a17a0:	2201      	movpl	r2, #1
 80a17a2:	601a      	strpl	r2, [r3, #0]
 80a17a4:	4b0e      	ldr	r3, [pc, #56]	; (80a17e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a17a6:	681a      	ldr	r2, [r3, #0]
 80a17a8:	07d0      	lsls	r0, r2, #31
 80a17aa:	bf5c      	itt	pl
 80a17ac:	2201      	movpl	r2, #1
 80a17ae:	601a      	strpl	r2, [r3, #0]
 80a17b0:	4b0c      	ldr	r3, [pc, #48]	; (80a17e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a17b2:	681a      	ldr	r2, [r3, #0]
 80a17b4:	07d1      	lsls	r1, r2, #31
 80a17b6:	bf5c      	itt	pl
 80a17b8:	2201      	movpl	r2, #1
 80a17ba:	601a      	strpl	r2, [r3, #0]
 80a17bc:	4b0a      	ldr	r3, [pc, #40]	; (80a17e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a17be:	681a      	ldr	r2, [r3, #0]
 80a17c0:	07d2      	lsls	r2, r2, #31
 80a17c2:	bf5c      	itt	pl
 80a17c4:	2201      	movpl	r2, #1
 80a17c6:	601a      	strpl	r2, [r3, #0]
 80a17c8:	4770      	bx	lr
 80a17ca:	bf00      	nop
 80a17cc:	20000624 	.word	0x20000624
 80a17d0:	20000620 	.word	0x20000620
 80a17d4:	2000061c 	.word	0x2000061c
 80a17d8:	20000618 	.word	0x20000618
 80a17dc:	20000614 	.word	0x20000614
 80a17e0:	20000610 	.word	0x20000610
 80a17e4:	2000060c 	.word	0x2000060c
 80a17e8:	20000608 	.word	0x20000608

080a17ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a17ec:	4b24      	ldr	r3, [pc, #144]	; (80a1880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a17ee:	681a      	ldr	r2, [r3, #0]
 80a17f0:	07d0      	lsls	r0, r2, #31
 80a17f2:	bf5c      	itt	pl
 80a17f4:	2201      	movpl	r2, #1
 80a17f6:	601a      	strpl	r2, [r3, #0]
 80a17f8:	4b22      	ldr	r3, [pc, #136]	; (80a1884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a17fa:	681a      	ldr	r2, [r3, #0]
 80a17fc:	07d1      	lsls	r1, r2, #31
 80a17fe:	bf5c      	itt	pl
 80a1800:	2201      	movpl	r2, #1
 80a1802:	601a      	strpl	r2, [r3, #0]
 80a1804:	4b20      	ldr	r3, [pc, #128]	; (80a1888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1806:	681a      	ldr	r2, [r3, #0]
 80a1808:	07d2      	lsls	r2, r2, #31
 80a180a:	bf5c      	itt	pl
 80a180c:	2201      	movpl	r2, #1
 80a180e:	601a      	strpl	r2, [r3, #0]
 80a1810:	4b1e      	ldr	r3, [pc, #120]	; (80a188c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1812:	681a      	ldr	r2, [r3, #0]
 80a1814:	07d0      	lsls	r0, r2, #31
 80a1816:	bf5c      	itt	pl
 80a1818:	2201      	movpl	r2, #1
 80a181a:	601a      	strpl	r2, [r3, #0]
 80a181c:	4b1c      	ldr	r3, [pc, #112]	; (80a1890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a181e:	681a      	ldr	r2, [r3, #0]
 80a1820:	07d1      	lsls	r1, r2, #31
 80a1822:	bf5c      	itt	pl
 80a1824:	2201      	movpl	r2, #1
 80a1826:	601a      	strpl	r2, [r3, #0]
 80a1828:	4b1a      	ldr	r3, [pc, #104]	; (80a1894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a182a:	681a      	ldr	r2, [r3, #0]
 80a182c:	07d2      	lsls	r2, r2, #31
 80a182e:	bf5c      	itt	pl
 80a1830:	2201      	movpl	r2, #1
 80a1832:	601a      	strpl	r2, [r3, #0]
 80a1834:	4b18      	ldr	r3, [pc, #96]	; (80a1898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d0      	lsls	r0, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4b16      	ldr	r3, [pc, #88]	; (80a189c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d1      	lsls	r1, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4b14      	ldr	r3, [pc, #80]	; (80a18a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	07d2      	lsls	r2, r2, #31
 80a1852:	bf5c      	itt	pl
 80a1854:	2201      	movpl	r2, #1
 80a1856:	601a      	strpl	r2, [r3, #0]
 80a1858:	4b12      	ldr	r3, [pc, #72]	; (80a18a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a185a:	681a      	ldr	r2, [r3, #0]
 80a185c:	07d0      	lsls	r0, r2, #31
 80a185e:	bf5c      	itt	pl
 80a1860:	2201      	movpl	r2, #1
 80a1862:	601a      	strpl	r2, [r3, #0]
 80a1864:	4b10      	ldr	r3, [pc, #64]	; (80a18a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d1      	lsls	r1, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b0e      	ldr	r3, [pc, #56]	; (80a18ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d2      	lsls	r2, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4770      	bx	lr
 80a187e:	bf00      	nop
 80a1880:	20000654 	.word	0x20000654
 80a1884:	20000650 	.word	0x20000650
 80a1888:	2000064c 	.word	0x2000064c
 80a188c:	20000648 	.word	0x20000648
 80a1890:	20000644 	.word	0x20000644
 80a1894:	20000640 	.word	0x20000640
 80a1898:	2000063c 	.word	0x2000063c
 80a189c:	20000638 	.word	0x20000638
 80a18a0:	20000634 	.word	0x20000634
 80a18a4:	20000630 	.word	0x20000630
 80a18a8:	2000062c 	.word	0x2000062c
 80a18ac:	20000628 	.word	0x20000628

080a18b0 <__aeabi_drsub>:
 80a18b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a18b4:	e002      	b.n	80a18bc <__adddf3>
 80a18b6:	bf00      	nop

080a18b8 <__aeabi_dsub>:
 80a18b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a18bc <__adddf3>:
 80a18bc:	b530      	push	{r4, r5, lr}
 80a18be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a18c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a18c6:	ea94 0f05 	teq	r4, r5
 80a18ca:	bf08      	it	eq
 80a18cc:	ea90 0f02 	teqeq	r0, r2
 80a18d0:	bf1f      	itttt	ne
 80a18d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a18d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a18da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a18de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a18e2:	f000 80e2 	beq.w	80a1aaa <__adddf3+0x1ee>
 80a18e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a18ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a18ee:	bfb8      	it	lt
 80a18f0:	426d      	neglt	r5, r5
 80a18f2:	dd0c      	ble.n	80a190e <__adddf3+0x52>
 80a18f4:	442c      	add	r4, r5
 80a18f6:	ea80 0202 	eor.w	r2, r0, r2
 80a18fa:	ea81 0303 	eor.w	r3, r1, r3
 80a18fe:	ea82 0000 	eor.w	r0, r2, r0
 80a1902:	ea83 0101 	eor.w	r1, r3, r1
 80a1906:	ea80 0202 	eor.w	r2, r0, r2
 80a190a:	ea81 0303 	eor.w	r3, r1, r3
 80a190e:	2d36      	cmp	r5, #54	; 0x36
 80a1910:	bf88      	it	hi
 80a1912:	bd30      	pophi	{r4, r5, pc}
 80a1914:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a191c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1920:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1924:	d002      	beq.n	80a192c <__adddf3+0x70>
 80a1926:	4240      	negs	r0, r0
 80a1928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a192c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1934:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1938:	d002      	beq.n	80a1940 <__adddf3+0x84>
 80a193a:	4252      	negs	r2, r2
 80a193c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1940:	ea94 0f05 	teq	r4, r5
 80a1944:	f000 80a7 	beq.w	80a1a96 <__adddf3+0x1da>
 80a1948:	f1a4 0401 	sub.w	r4, r4, #1
 80a194c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1950:	db0d      	blt.n	80a196e <__adddf3+0xb2>
 80a1952:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1956:	fa22 f205 	lsr.w	r2, r2, r5
 80a195a:	1880      	adds	r0, r0, r2
 80a195c:	f141 0100 	adc.w	r1, r1, #0
 80a1960:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1964:	1880      	adds	r0, r0, r2
 80a1966:	fa43 f305 	asr.w	r3, r3, r5
 80a196a:	4159      	adcs	r1, r3
 80a196c:	e00e      	b.n	80a198c <__adddf3+0xd0>
 80a196e:	f1a5 0520 	sub.w	r5, r5, #32
 80a1972:	f10e 0e20 	add.w	lr, lr, #32
 80a1976:	2a01      	cmp	r2, #1
 80a1978:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a197c:	bf28      	it	cs
 80a197e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1982:	fa43 f305 	asr.w	r3, r3, r5
 80a1986:	18c0      	adds	r0, r0, r3
 80a1988:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a198c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1990:	d507      	bpl.n	80a19a2 <__adddf3+0xe6>
 80a1992:	f04f 0e00 	mov.w	lr, #0
 80a1996:	f1dc 0c00 	rsbs	ip, ip, #0
 80a199a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a199e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a19a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a19a6:	d31b      	bcc.n	80a19e0 <__adddf3+0x124>
 80a19a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a19ac:	d30c      	bcc.n	80a19c8 <__adddf3+0x10c>
 80a19ae:	0849      	lsrs	r1, r1, #1
 80a19b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a19b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a19b8:	f104 0401 	add.w	r4, r4, #1
 80a19bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a19c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a19c4:	f080 809a 	bcs.w	80a1afc <__adddf3+0x240>
 80a19c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a19cc:	bf08      	it	eq
 80a19ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a19d2:	f150 0000 	adcs.w	r0, r0, #0
 80a19d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a19da:	ea41 0105 	orr.w	r1, r1, r5
 80a19de:	bd30      	pop	{r4, r5, pc}
 80a19e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a19e4:	4140      	adcs	r0, r0
 80a19e6:	eb41 0101 	adc.w	r1, r1, r1
 80a19ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a19ee:	f1a4 0401 	sub.w	r4, r4, #1
 80a19f2:	d1e9      	bne.n	80a19c8 <__adddf3+0x10c>
 80a19f4:	f091 0f00 	teq	r1, #0
 80a19f8:	bf04      	itt	eq
 80a19fa:	4601      	moveq	r1, r0
 80a19fc:	2000      	moveq	r0, #0
 80a19fe:	fab1 f381 	clz	r3, r1
 80a1a02:	bf08      	it	eq
 80a1a04:	3320      	addeq	r3, #32
 80a1a06:	f1a3 030b 	sub.w	r3, r3, #11
 80a1a0a:	f1b3 0220 	subs.w	r2, r3, #32
 80a1a0e:	da0c      	bge.n	80a1a2a <__adddf3+0x16e>
 80a1a10:	320c      	adds	r2, #12
 80a1a12:	dd08      	ble.n	80a1a26 <__adddf3+0x16a>
 80a1a14:	f102 0c14 	add.w	ip, r2, #20
 80a1a18:	f1c2 020c 	rsb	r2, r2, #12
 80a1a1c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1a20:	fa21 f102 	lsr.w	r1, r1, r2
 80a1a24:	e00c      	b.n	80a1a40 <__adddf3+0x184>
 80a1a26:	f102 0214 	add.w	r2, r2, #20
 80a1a2a:	bfd8      	it	le
 80a1a2c:	f1c2 0c20 	rsble	ip, r2, #32
 80a1a30:	fa01 f102 	lsl.w	r1, r1, r2
 80a1a34:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1a38:	bfdc      	itt	le
 80a1a3a:	ea41 010c 	orrle.w	r1, r1, ip
 80a1a3e:	4090      	lslle	r0, r2
 80a1a40:	1ae4      	subs	r4, r4, r3
 80a1a42:	bfa2      	ittt	ge
 80a1a44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1a48:	4329      	orrge	r1, r5
 80a1a4a:	bd30      	popge	{r4, r5, pc}
 80a1a4c:	ea6f 0404 	mvn.w	r4, r4
 80a1a50:	3c1f      	subs	r4, #31
 80a1a52:	da1c      	bge.n	80a1a8e <__adddf3+0x1d2>
 80a1a54:	340c      	adds	r4, #12
 80a1a56:	dc0e      	bgt.n	80a1a76 <__adddf3+0x1ba>
 80a1a58:	f104 0414 	add.w	r4, r4, #20
 80a1a5c:	f1c4 0220 	rsb	r2, r4, #32
 80a1a60:	fa20 f004 	lsr.w	r0, r0, r4
 80a1a64:	fa01 f302 	lsl.w	r3, r1, r2
 80a1a68:	ea40 0003 	orr.w	r0, r0, r3
 80a1a6c:	fa21 f304 	lsr.w	r3, r1, r4
 80a1a70:	ea45 0103 	orr.w	r1, r5, r3
 80a1a74:	bd30      	pop	{r4, r5, pc}
 80a1a76:	f1c4 040c 	rsb	r4, r4, #12
 80a1a7a:	f1c4 0220 	rsb	r2, r4, #32
 80a1a7e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1a82:	fa01 f304 	lsl.w	r3, r1, r4
 80a1a86:	ea40 0003 	orr.w	r0, r0, r3
 80a1a8a:	4629      	mov	r1, r5
 80a1a8c:	bd30      	pop	{r4, r5, pc}
 80a1a8e:	fa21 f004 	lsr.w	r0, r1, r4
 80a1a92:	4629      	mov	r1, r5
 80a1a94:	bd30      	pop	{r4, r5, pc}
 80a1a96:	f094 0f00 	teq	r4, #0
 80a1a9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1a9e:	bf06      	itte	eq
 80a1aa0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1aa4:	3401      	addeq	r4, #1
 80a1aa6:	3d01      	subne	r5, #1
 80a1aa8:	e74e      	b.n	80a1948 <__adddf3+0x8c>
 80a1aaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1aae:	bf18      	it	ne
 80a1ab0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1ab4:	d029      	beq.n	80a1b0a <__adddf3+0x24e>
 80a1ab6:	ea94 0f05 	teq	r4, r5
 80a1aba:	bf08      	it	eq
 80a1abc:	ea90 0f02 	teqeq	r0, r2
 80a1ac0:	d005      	beq.n	80a1ace <__adddf3+0x212>
 80a1ac2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1ac6:	bf04      	itt	eq
 80a1ac8:	4619      	moveq	r1, r3
 80a1aca:	4610      	moveq	r0, r2
 80a1acc:	bd30      	pop	{r4, r5, pc}
 80a1ace:	ea91 0f03 	teq	r1, r3
 80a1ad2:	bf1e      	ittt	ne
 80a1ad4:	2100      	movne	r1, #0
 80a1ad6:	2000      	movne	r0, #0
 80a1ad8:	bd30      	popne	{r4, r5, pc}
 80a1ada:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1ade:	d105      	bne.n	80a1aec <__adddf3+0x230>
 80a1ae0:	0040      	lsls	r0, r0, #1
 80a1ae2:	4149      	adcs	r1, r1
 80a1ae4:	bf28      	it	cs
 80a1ae6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1aea:	bd30      	pop	{r4, r5, pc}
 80a1aec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1af0:	bf3c      	itt	cc
 80a1af2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1af6:	bd30      	popcc	{r4, r5, pc}
 80a1af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1afc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1b00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1b04:	f04f 0000 	mov.w	r0, #0
 80a1b08:	bd30      	pop	{r4, r5, pc}
 80a1b0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1b0e:	bf1a      	itte	ne
 80a1b10:	4619      	movne	r1, r3
 80a1b12:	4610      	movne	r0, r2
 80a1b14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1b18:	bf1c      	itt	ne
 80a1b1a:	460b      	movne	r3, r1
 80a1b1c:	4602      	movne	r2, r0
 80a1b1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1b22:	bf06      	itte	eq
 80a1b24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1b28:	ea91 0f03 	teqeq	r1, r3
 80a1b2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1b30:	bd30      	pop	{r4, r5, pc}
 80a1b32:	bf00      	nop

080a1b34 <__aeabi_ui2d>:
 80a1b34:	f090 0f00 	teq	r0, #0
 80a1b38:	bf04      	itt	eq
 80a1b3a:	2100      	moveq	r1, #0
 80a1b3c:	4770      	bxeq	lr
 80a1b3e:	b530      	push	{r4, r5, lr}
 80a1b40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1b44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1b48:	f04f 0500 	mov.w	r5, #0
 80a1b4c:	f04f 0100 	mov.w	r1, #0
 80a1b50:	e750      	b.n	80a19f4 <__adddf3+0x138>
 80a1b52:	bf00      	nop

080a1b54 <__aeabi_i2d>:
 80a1b54:	f090 0f00 	teq	r0, #0
 80a1b58:	bf04      	itt	eq
 80a1b5a:	2100      	moveq	r1, #0
 80a1b5c:	4770      	bxeq	lr
 80a1b5e:	b530      	push	{r4, r5, lr}
 80a1b60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1b64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1b68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1b6c:	bf48      	it	mi
 80a1b6e:	4240      	negmi	r0, r0
 80a1b70:	f04f 0100 	mov.w	r1, #0
 80a1b74:	e73e      	b.n	80a19f4 <__adddf3+0x138>
 80a1b76:	bf00      	nop

080a1b78 <__aeabi_f2d>:
 80a1b78:	0042      	lsls	r2, r0, #1
 80a1b7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1b82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1b86:	bf1f      	itttt	ne
 80a1b88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1b8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1b90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1b94:	4770      	bxne	lr
 80a1b96:	f092 0f00 	teq	r2, #0
 80a1b9a:	bf14      	ite	ne
 80a1b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ba0:	4770      	bxeq	lr
 80a1ba2:	b530      	push	{r4, r5, lr}
 80a1ba4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1bac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1bb0:	e720      	b.n	80a19f4 <__adddf3+0x138>
 80a1bb2:	bf00      	nop

080a1bb4 <__aeabi_ul2d>:
 80a1bb4:	ea50 0201 	orrs.w	r2, r0, r1
 80a1bb8:	bf08      	it	eq
 80a1bba:	4770      	bxeq	lr
 80a1bbc:	b530      	push	{r4, r5, lr}
 80a1bbe:	f04f 0500 	mov.w	r5, #0
 80a1bc2:	e00a      	b.n	80a1bda <__aeabi_l2d+0x16>

080a1bc4 <__aeabi_l2d>:
 80a1bc4:	ea50 0201 	orrs.w	r2, r0, r1
 80a1bc8:	bf08      	it	eq
 80a1bca:	4770      	bxeq	lr
 80a1bcc:	b530      	push	{r4, r5, lr}
 80a1bce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1bd2:	d502      	bpl.n	80a1bda <__aeabi_l2d+0x16>
 80a1bd4:	4240      	negs	r0, r0
 80a1bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1bda:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1bde:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1be2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1be6:	f43f aedc 	beq.w	80a19a2 <__adddf3+0xe6>
 80a1bea:	f04f 0203 	mov.w	r2, #3
 80a1bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1bf2:	bf18      	it	ne
 80a1bf4:	3203      	addne	r2, #3
 80a1bf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1bfa:	bf18      	it	ne
 80a1bfc:	3203      	addne	r2, #3
 80a1bfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1c02:	f1c2 0320 	rsb	r3, r2, #32
 80a1c06:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1c0a:	fa20 f002 	lsr.w	r0, r0, r2
 80a1c0e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1c12:	ea40 000e 	orr.w	r0, r0, lr
 80a1c16:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c1a:	4414      	add	r4, r2
 80a1c1c:	e6c1      	b.n	80a19a2 <__adddf3+0xe6>
 80a1c1e:	bf00      	nop

080a1c20 <__aeabi_d2iz>:
 80a1c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1c24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1c28:	d215      	bcs.n	80a1c56 <__aeabi_d2iz+0x36>
 80a1c2a:	d511      	bpl.n	80a1c50 <__aeabi_d2iz+0x30>
 80a1c2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1c30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1c34:	d912      	bls.n	80a1c5c <__aeabi_d2iz+0x3c>
 80a1c36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1c3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c46:	fa23 f002 	lsr.w	r0, r3, r2
 80a1c4a:	bf18      	it	ne
 80a1c4c:	4240      	negne	r0, r0
 80a1c4e:	4770      	bx	lr
 80a1c50:	f04f 0000 	mov.w	r0, #0
 80a1c54:	4770      	bx	lr
 80a1c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1c5a:	d105      	bne.n	80a1c68 <__aeabi_d2iz+0x48>
 80a1c5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1c60:	bf08      	it	eq
 80a1c62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1c66:	4770      	bx	lr
 80a1c68:	f04f 0000 	mov.w	r0, #0
 80a1c6c:	4770      	bx	lr
 80a1c6e:	bf00      	nop

080a1c70 <__cxa_atexit>:
 80a1c70:	b510      	push	{r4, lr}
 80a1c72:	4c05      	ldr	r4, [pc, #20]	; (80a1c88 <__cxa_atexit+0x18>)
 80a1c74:	4613      	mov	r3, r2
 80a1c76:	b12c      	cbz	r4, 80a1c84 <__cxa_atexit+0x14>
 80a1c78:	460a      	mov	r2, r1
 80a1c7a:	4601      	mov	r1, r0
 80a1c7c:	2002      	movs	r0, #2
 80a1c7e:	f3af 8000 	nop.w
 80a1c82:	bd10      	pop	{r4, pc}
 80a1c84:	4620      	mov	r0, r4
 80a1c86:	bd10      	pop	{r4, pc}
 80a1c88:	00000000 	.word	0x00000000

080a1c8c <memcpy>:
 80a1c8c:	b510      	push	{r4, lr}
 80a1c8e:	1e43      	subs	r3, r0, #1
 80a1c90:	440a      	add	r2, r1
 80a1c92:	4291      	cmp	r1, r2
 80a1c94:	d004      	beq.n	80a1ca0 <memcpy+0x14>
 80a1c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1c9e:	e7f8      	b.n	80a1c92 <memcpy+0x6>
 80a1ca0:	bd10      	pop	{r4, pc}

080a1ca2 <memset>:
 80a1ca2:	4603      	mov	r3, r0
 80a1ca4:	4402      	add	r2, r0
 80a1ca6:	4293      	cmp	r3, r2
 80a1ca8:	d002      	beq.n	80a1cb0 <memset+0xe>
 80a1caa:	f803 1b01 	strb.w	r1, [r3], #1
 80a1cae:	e7fa      	b.n	80a1ca6 <memset+0x4>
 80a1cb0:	4770      	bx	lr
	...

080a1cb4 <srand>:
 80a1cb4:	b538      	push	{r3, r4, r5, lr}
 80a1cb6:	4b12      	ldr	r3, [pc, #72]	; (80a1d00 <srand+0x4c>)
 80a1cb8:	4605      	mov	r5, r0
 80a1cba:	681c      	ldr	r4, [r3, #0]
 80a1cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1cbe:	b9d3      	cbnz	r3, 80a1cf6 <srand+0x42>
 80a1cc0:	2018      	movs	r0, #24
 80a1cc2:	f7fe fdcb 	bl	80a085c <malloc>
 80a1cc6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1cca:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1ccc:	8003      	strh	r3, [r0, #0]
 80a1cce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1cd2:	8043      	strh	r3, [r0, #2]
 80a1cd4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1cd8:	8083      	strh	r3, [r0, #4]
 80a1cda:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1cde:	80c3      	strh	r3, [r0, #6]
 80a1ce0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1ce4:	8103      	strh	r3, [r0, #8]
 80a1ce6:	2305      	movs	r3, #5
 80a1ce8:	8143      	strh	r3, [r0, #10]
 80a1cea:	230b      	movs	r3, #11
 80a1cec:	8183      	strh	r3, [r0, #12]
 80a1cee:	2201      	movs	r2, #1
 80a1cf0:	2300      	movs	r3, #0
 80a1cf2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1cf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1cf8:	2200      	movs	r2, #0
 80a1cfa:	611d      	str	r5, [r3, #16]
 80a1cfc:	615a      	str	r2, [r3, #20]
 80a1cfe:	bd38      	pop	{r3, r4, r5, pc}
 80a1d00:	20000068 	.word	0x20000068

080a1d04 <strcmp>:
 80a1d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a1d0c:	2a01      	cmp	r2, #1
 80a1d0e:	bf28      	it	cs
 80a1d10:	429a      	cmpcs	r2, r3
 80a1d12:	d0f7      	beq.n	80a1d04 <strcmp>
 80a1d14:	1ad0      	subs	r0, r2, r3
 80a1d16:	4770      	bx	lr

080a1d18 <strlen>:
 80a1d18:	4603      	mov	r3, r0
 80a1d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1d1e:	2a00      	cmp	r2, #0
 80a1d20:	d1fb      	bne.n	80a1d1a <strlen+0x2>
 80a1d22:	1a18      	subs	r0, r3, r0
 80a1d24:	3801      	subs	r0, #1
 80a1d26:	4770      	bx	lr

080a1d28 <dynalib_user>:
 80a1d28:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1d38:	0000 0000 6552 6563 7669 6e69 2067 656d     ....Receiving me
 80a1d48:	7373 6761 2065 6977 6874 6f20 6a62 6365     ssage with objec
 80a1d58:	2074 742d 7365 2d74 6120 646e 7420 6972     t -test- and tri
 80a1d68:	6767 7265 6e69 2067 4554 5453 6d20 7465     ggering TEST met
 80a1d78:	6f68 2e64 5300 4954 4c4c 4d00 564f 0045     hod..STILL.MOVE.
 80a1d88:	6553 7574 0070 5148 6f52 7475 7265 525f     Setup.HQRouter_R
 80a1d98:	4345 4945 4556 4c00 5349 4554 494e 474e     ECEIVE.LISTENING
 80a1da8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d     ---------------.
 80a1db8:	6572 6563 7669 6e69 2067 656d 7373 6761     receiving messag
 80a1dc8:	0065 2d2d 692d 206e 6877 6c69 2d65 2d2d     e.---in while---
 80a1dd8:	5000 5241 4953 474e 7400 7365 0074 7473     .PARSING.test.st
 80a1de8:	6c69 006c 6d2f 766f 0065 6f4e 6d20 7365     ill./move.No mes
 80a1df8:	6173 6567 2000 203a 0a00 2d2d 2d2d 0000     sage. : ..----..

080a1e08 <_ZTV9IPAddress>:
	...
 80a1e10:	089f 080a 00b3 080a 0111 080a 6162 6475     ............baud
 80a1e20:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1e30:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1e40:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1e50:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1e60:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1e70:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1e80:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1e90:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1ea0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1eb0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1ec0:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1ed0:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1ee0:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1ef0:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1f00 <_ZTVN5spark12NetworkClassE>:
	...
 80a1f08:	097d 080a 0987 080a 0991 080a 099b 080a     }...............
 80a1f18:	09a5 080a 09b1 080a 09bd 080a 09c9 080a     ................
 80a1f28:	09d1 080a 09db 080a 09e5 080a               ............

080a1f34 <_ZTV8SPIClass>:
	...
 80a1f3c:	0b95 080a 0b97 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1f4c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1f5c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1f6c:	0000 0000                                   ....

080a1f70 <_ZTV3UDP>:
	...
 80a1f78:	00f1 080a 011f 080a 0d13 080a 0e33 080a     ............3...
 80a1f88:	0d0b 080a 0d29 080a 0d47 080a 0d61 080a     ....)...G...a...
 80a1f98:	0d83 080a 0dcd 080a 0def 080a 0f85 080a     ................
 80a1fa8:	0e99 080a 0cf5 080a 1095 080a 0f01 080a     ................
 80a1fb8:	0fbd 080a 10c3 080a 0e5d 080a 0d01 080a     ........].......
 80a1fc8:	0f65 080a 0d07 080a 0d63 080a fff0 ffff     e.......c.......
 80a1fd8:	0000 0000 0d7b 080a                         ....{...

080a1fe0 <_ZTV11USARTSerial>:
	...
 80a1fe8:	10fb 080a 114b 080a 1159 080a 0a61 080a     ....K...Y...a...
 80a1ff8:	110f 080a 1131 080a 111d 080a 1145 080a     ....1.......E...
 80a2008:	10fd 080a 1101 080a                         ........

080a2010 <_ZTV9USBSerial>:
	...
 80a2018:	11f9 080a 1249 080a 1257 080a 0a61 080a     ....I...W...a...
 80a2028:	1235 080a 11fb 080a 1211 080a 1243 080a     5...........C...
 80a2038:	1227 080a 11f5 080a                         '.......

080a2040 <_ZTVN5spark9WiFiClassE>:
	...
 80a2048:	1447 080a 143d 080a 1433 080a 13a5 080a     G...=...3.......
 80a2058:	1427 080a 141b 080a 140f 080a 1407 080a     '...............
 80a2068:	13fd 080a 13f3 080a 13af 080a               ............

080a2074 <__sf_fake_stdin>:
	...

080a2094 <__sf_fake_stdout>:
	...

080a20b4 <__sf_fake_stderr>:
	...
 80a20d4:	0043                                        C.

080a20d6 <link_const_variable_data_end>:
	...

080a20d8 <link_constructors_location>:
 80a20d8:	080a02f5 	.word	0x080a02f5
 80a20dc:	080a03c5 	.word	0x080a03c5
 80a20e0:	080a057f 	.word	0x080a057f
 80a20e4:	080a096d 	.word	0x080a096d
 80a20e8:	080a0a4d 	.word	0x080a0a4d
 80a20ec:	080a0b79 	.word	0x080a0b79
 80a20f0:	080a0cc9 	.word	0x080a0cc9
 80a20f4:	080a0ce1 	.word	0x080a0ce1
 80a20f8:	080a1451 	.word	0x080a1451
 80a20fc:	080a159d 	.word	0x080a159d
 80a2100:	080a15cd 	.word	0x080a15cd
 80a2104:	080a1621 	.word	0x080a1621
 80a2108:	080a16e5 	.word	0x080a16e5
 80a210c:	080a1769 	.word	0x080a1769
 80a2110:	080a17ed 	.word	0x080a17ed

080a2114 <link_constructors_end>:
	...
