
/Users/ninjacat/Documents/Particle/TakeHeed/motors_IMU/target/1.4.0/photon/motors_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ec4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1ee0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a1ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006a4  20000088  20000088  00030088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1f6c  080a1f6c  00021f6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1f94  080a1f94  00021f94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b48ea  00000000  00000000  00021f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000107c8  00000000  00000000  000d6882  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001679d  00000000  00000000  000e704a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002280  00000000  00000000  000fd7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003618  00000000  00000000  000ffa67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025c3d  00000000  00000000  0010307f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000263ae  00000000  00000000  00128cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6d92  00000000  00000000  0014f06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c1a0  00000000  00000000  001f5dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fcb3 	bl	80a1998 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fcb8 	bl	80a19ae <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1ee4 	.word	0x080a1ee4
 80a004c:	20000088 	.word	0x20000088
 80a0050:	20000088 	.word	0x20000088
 80a0054:	2000072c 	.word	0x2000072c
 80a0058:	2000072c 	.word	0x2000072c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa69 	bl	80a1534 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1ea4 	.word	0x080a1ea4
 80a0084:	080a1ee0 	.word	0x080a1ee0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b852 	b.w	80a0130 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8ed 	bl	80a026c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba0f 	b.w	80a14b8 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bbb7 	b.w	80a080c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bbbd 	b.w	80a081c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f000 fe78 	bl	80a0db4 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f000 ffad 	bl	80a1024 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a1d44 	.word	0x080a1d44

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 fb04 	bl	80a16e6 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 fafa 	bl	80a16e6 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}

080a00f6 <_Z10setupMotorPiiii>:
  rightShoulderMotors[0]= directionRight;
  rightShoulderMotors[1]= stepRight;
  rightShoulderMotors[2]= enableRight;
}

void setupMotor(int motorPinsArray[], int enable, int step, int direction){
 80a00f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a00fa:	4616      	mov	r6, r2
 80a00fc:	461f      	mov	r7, r3
 80a00fe:	4604      	mov	r4, r0
 80a0100:	460d      	mov	r5, r1
  pinMode(enable, OUTPUT); //Enable
 80a0102:	fa1f f881 	uxth.w	r8, r1
 80a0106:	4640      	mov	r0, r8
 80a0108:	2101      	movs	r1, #1
 80a010a:	f001 fa63 	bl	80a15d4 <pinMode>
  pinMode(step, OUTPUT); //Step
 80a010e:	2101      	movs	r1, #1
 80a0110:	b2b0      	uxth	r0, r6
 80a0112:	f001 fa5f 	bl	80a15d4 <pinMode>
  pinMode(direction, OUTPUT); //Direction
 80a0116:	2101      	movs	r1, #1
 80a0118:	b2b8      	uxth	r0, r7
 80a011a:	f001 fa5b 	bl	80a15d4 <pinMode>

  digitalWrite(enable, LOW);
 80a011e:	2100      	movs	r1, #0
 80a0120:	4640      	mov	r0, r8
 80a0122:	f001 fa68 	bl	80a15f6 <digitalWrite>

  motorPinsArray[0]= direction;
 80a0126:	6027      	str	r7, [r4, #0]
  motorPinsArray[1]= step;
 80a0128:	6066      	str	r6, [r4, #4]
  motorPinsArray[2]= enable;
 80a012a:	60a5      	str	r5, [r4, #8]
 80a012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0130 <setup>:

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0130:	b570      	push	{r4, r5, r6, lr}
  
  pinMode(mosfetSwitch, OUTPUT);
 80a0132:	4b40      	ldr	r3, [pc, #256]	; (80a0234 <setup+0x104>)

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a0134:	b096      	sub	sp, #88	; 0x58
  
  pinMode(mosfetSwitch, OUTPUT);
 80a0136:	8818      	ldrh	r0, [r3, #0]
 80a0138:	2101      	movs	r1, #1
 80a013a:	f001 fa4b 	bl	80a15d4 <pinMode>
   //void setupMotor(int[] motorPinsArray, int enable, int step, int direction){
  setupMotor(rightShoulderMotors, enableRight, stepRight, directionRight);
 80a013e:	4b3e      	ldr	r3, [pc, #248]	; (80a0238 <setup+0x108>)
 80a0140:	4a3e      	ldr	r2, [pc, #248]	; (80a023c <setup+0x10c>)
 80a0142:	493f      	ldr	r1, [pc, #252]	; (80a0240 <setup+0x110>)
 80a0144:	681b      	ldr	r3, [r3, #0]
 80a0146:	6812      	ldr	r2, [r2, #0]
 80a0148:	6809      	ldr	r1, [r1, #0]
 80a014a:	483e      	ldr	r0, [pc, #248]	; (80a0244 <setup+0x114>)
 80a014c:	f7ff ffd3 	bl	80a00f6 <_Z10setupMotorPiiii>
  setupMotor(leftShoulderMotors, enableLeft, stepLeft, directionLeft);
 80a0150:	4b3d      	ldr	r3, [pc, #244]	; (80a0248 <setup+0x118>)
 80a0152:	4a3e      	ldr	r2, [pc, #248]	; (80a024c <setup+0x11c>)
 80a0154:	493e      	ldr	r1, [pc, #248]	; (80a0250 <setup+0x120>)
 80a0156:	681b      	ldr	r3, [r3, #0]
 80a0158:	6812      	ldr	r2, [r2, #0]
 80a015a:	6809      	ldr	r1, [r1, #0]
 80a015c:	483d      	ldr	r0, [pc, #244]	; (80a0254 <setup+0x124>)
 80a015e:	f7ff ffca 	bl	80a00f6 <_Z10setupMotorPiiii>
  

//   int enableLeft = A2;
// int stepLeft = A1;
// int directionLeft = A0;
 pinMode(6, OUTPUT); //Enable
 80a0162:	2101      	movs	r1, #1
 80a0164:	2006      	movs	r0, #6
 80a0166:	f001 fa35 	bl	80a15d4 <pinMode>
  pinMode(5, OUTPUT); //Step
 80a016a:	2101      	movs	r1, #1
 80a016c:	2005      	movs	r0, #5
 80a016e:	f001 fa31 	bl	80a15d4 <pinMode>
  pinMode(4, OUTPUT); //Direction
 80a0172:	2101      	movs	r1, #1
 80a0174:	2004      	movs	r0, #4
 80a0176:	f001 fa2d 	bl	80a15d4 <pinMode>

  digitalWrite(6,LOW);
 80a017a:	2100      	movs	r1, #0
 80a017c:	2006      	movs	r0, #6
 80a017e:	f001 fa3a 	bl	80a15f6 <digitalWrite>

  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0182:	f001 f8a5 	bl	80a12d0 <_Z16_fetch_usbserialv>
 80a0186:	f001 f88a 	bl	80a129e <_ZN9USBSerialcvbEv>
 80a018a:	2800      	cmp	r0, #0
 80a018c:	d0f9      	beq.n	80a0182 <setup+0x52>
 80a018e:	4c32      	ldr	r4, [pc, #200]	; (80a0258 <setup+0x128>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0190:	2300      	movs	r3, #0
 80a0192:	461a      	mov	r2, r3
 80a0194:	4619      	mov	r1, r3
 80a0196:	6860      	ldr	r0, [r4, #4]
 80a0198:	f000 fad8 	bl	80a074c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a019c:	2200      	movs	r2, #0
 80a019e:	4611      	mov	r1, r2
 80a01a0:	6860      	ldr	r0, [r4, #4]
 80a01a2:	4d2d      	ldr	r5, [pc, #180]	; (80a0258 <setup+0x128>)
 80a01a4:	f000 faea 	bl	80a077c <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a01a8:	2800      	cmp	r0, #0
 80a01aa:	d0f7      	beq.n	80a019c <setup+0x6c>
  Serial.println("Setup");
 80a01ac:	f001 f890 	bl	80a12d0 <_Z16_fetch_usbserialv>
 80a01b0:	492a      	ldr	r1, [pc, #168]	; (80a025c <setup+0x12c>)
 80a01b2:	f000 fcae 	bl	80a0b12 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a01b6:	4b2a      	ldr	r3, [pc, #168]	; (80a0260 <setup+0x130>)
 80a01b8:	2200      	movs	r2, #0
 80a01ba:	8819      	ldrh	r1, [r3, #0]
 80a01bc:	4829      	ldr	r0, [pc, #164]	; (80a0264 <setup+0x134>)
 80a01be:	f000 fdd4 	bl	80a0d6a <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a01c2:	2300      	movs	r3, #0
 80a01c4:	4619      	mov	r1, r3
 80a01c6:	4a28      	ldr	r2, [pc, #160]	; (80a0268 <setup+0x138>)
 80a01c8:	6868      	ldr	r0, [r5, #4]
 80a01ca:	f000 fb0f 	bl	80a07ec <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a01ce:	f001 f87f 	bl	80a12d0 <_Z16_fetch_usbserialv>
 80a01d2:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01d4:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a01d6:	2240      	movs	r2, #64	; 0x40
 80a01d8:	2100      	movs	r1, #0
 80a01da:	a806      	add	r0, sp, #24
 80a01dc:	f001 fbe7 	bl	80a19ae <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01e0:	2340      	movs	r3, #64	; 0x40
 80a01e2:	aa06      	add	r2, sp, #24
 80a01e4:	4621      	mov	r1, r4
 80a01e6:	9400      	str	r4, [sp, #0]
 80a01e8:	6868      	ldr	r0, [r5, #4]
 80a01ea:	f000 fb07 	bl	80a07fc <network_get_hostname>
        return String(buf);
 80a01ee:	a906      	add	r1, sp, #24
 80a01f0:	a802      	add	r0, sp, #8
 80a01f2:	f000 fd49 	bl	80a0c88 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01f6:	9902      	ldr	r1, [sp, #8]
 80a01f8:	4630      	mov	r0, r6
 80a01fa:	f000 fc8a 	bl	80a0b12 <_ZN5Print7printlnEPKc>
 80a01fe:	a802      	add	r0, sp, #8
 80a0200:	f000 fcfb 	bl	80a0bfa <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a0204:	f001 f864 	bl	80a12d0 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0208:	4622      	mov	r2, r4
 80a020a:	4606      	mov	r6, r0
 80a020c:	4621      	mov	r1, r4
 80a020e:	6868      	ldr	r0, [r5, #4]
 80a0210:	f000 fa94 	bl	80a073c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0214:	1c81      	adds	r1, r0, #2
 80a0216:	a806      	add	r0, sp, #24
 80a0218:	f000 fb86 	bl	80a0928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a021c:	a906      	add	r1, sp, #24
 80a021e:	4630      	mov	r0, r6
 80a0220:	f000 fc81 	bl	80a0b26 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a0224:	f001 f854 	bl	80a12d0 <_Z16_fetch_usbserialv>
 80a0228:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a022c:	f001 f830 	bl	80a1290 <_ZN9USBSerial5beginEl>
    iVz = 0;

    // setupImu();
    
  // updateTimer.SetCallback(OnTimer);
  }
 80a0230:	b016      	add	sp, #88	; 0x58
 80a0232:	bd70      	pop	{r4, r5, r6, pc}
 80a0234:	20000018 	.word	0x20000018
 80a0238:	20000008 	.word	0x20000008
 80a023c:	2000001c 	.word	0x2000001c
 80a0240:	20000014 	.word	0x20000014
 80a0244:	2000008c 	.word	0x2000008c
 80a0248:	2000000c 	.word	0x2000000c
 80a024c:	20000010 	.word	0x20000010
 80a0250:	20000000 	.word	0x20000000
 80a0254:	20000144 	.word	0x20000144
 80a0258:	20000628 	.word	0x20000628
 80a025c:	080a1b3c 	.word	0x080a1b3c
 80a0260:	20000004 	.word	0x20000004
 80a0264:	20000158 	.word	0x20000158
 80a0268:	080a1b42 	.word	0x080a1b42

080a026c <loop>:
  }
}

int Index;
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a026c:	b570      	push	{r4, r5, r6, lr}
// setValuesAccordingToState('L');

// motorTesting();
 digitalWrite(4,HIGH);

  for(Index = 0; Index < 2000; Index++)
 80a026e:	4c24      	ldr	r4, [pc, #144]	; (80a0300 <loop+0x94>)
S: symbiosis, coming back to life
*/
// setValuesAccordingToState('L');

// motorTesting();
 digitalWrite(4,HIGH);
 80a0270:	2101      	movs	r1, #1

  for(Index = 0; Index < 2000; Index++)
 80a0272:	4626      	mov	r6, r4
S: symbiosis, coming back to life
*/
// setValuesAccordingToState('L');

// motorTesting();
 digitalWrite(4,HIGH);
 80a0274:	2004      	movs	r0, #4
 80a0276:	f001 f9be 	bl	80a15f6 <digitalWrite>

  for(Index = 0; Index < 2000; Index++)
 80a027a:	2300      	movs	r3, #0
 80a027c:	6023      	str	r3, [r4, #0]
 80a027e:	6823      	ldr	r3, [r4, #0]
 80a0280:	4d1f      	ldr	r5, [pc, #124]	; (80a0300 <loop+0x94>)
 80a0282:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0286:	da13      	bge.n	80a02b0 <loop+0x44>
  {
    digitalWrite(5,HIGH);
 80a0288:	2101      	movs	r1, #1
 80a028a:	2005      	movs	r0, #5
 80a028c:	f001 f9b3 	bl	80a15f6 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0294:	f000 f8ec 	bl	80a0470 <HAL_Delay_Microseconds>
    delayMicroseconds(500);
    digitalWrite(5,LOW);
 80a0298:	2100      	movs	r1, #0
 80a029a:	2005      	movs	r0, #5
 80a029c:	f001 f9ab 	bl	80a15f6 <digitalWrite>
 80a02a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02a4:	f000 f8e4 	bl	80a0470 <HAL_Delay_Microseconds>
// setValuesAccordingToState('L');

// motorTesting();
 digitalWrite(4,HIGH);

  for(Index = 0; Index < 2000; Index++)
 80a02a8:	6833      	ldr	r3, [r6, #0]
 80a02aa:	3301      	adds	r3, #1
 80a02ac:	6033      	str	r3, [r6, #0]
 80a02ae:	e7e6      	b.n	80a027e <loop+0x12>
    digitalWrite(5,HIGH);
    delayMicroseconds(500);
    digitalWrite(5,LOW);
    delayMicroseconds(500);
  }
  delay(1000);
 80a02b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02b4:	f000 fac2 	bl	80a083c <delay>

  digitalWrite(4,LOW);
 80a02b8:	2100      	movs	r1, #0
 80a02ba:	2004      	movs	r0, #4
 80a02bc:	f001 f99b 	bl	80a15f6 <digitalWrite>

  for(Index = 0; Index < 2000; Index++)
 80a02c0:	2300      	movs	r3, #0
 80a02c2:	602b      	str	r3, [r5, #0]
 80a02c4:	6823      	ldr	r3, [r4, #0]
 80a02c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a02ca:	da12      	bge.n	80a02f2 <loop+0x86>
  {
    digitalWrite(5,HIGH);
 80a02cc:	2101      	movs	r1, #1
 80a02ce:	2005      	movs	r0, #5
 80a02d0:	f001 f991 	bl	80a15f6 <digitalWrite>
 80a02d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02d8:	f000 f8ca 	bl	80a0470 <HAL_Delay_Microseconds>
    delayMicroseconds(500);
    digitalWrite(5,LOW);
 80a02dc:	2100      	movs	r1, #0
 80a02de:	2005      	movs	r0, #5
 80a02e0:	f001 f989 	bl	80a15f6 <digitalWrite>
 80a02e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a02e8:	f000 f8c2 	bl	80a0470 <HAL_Delay_Microseconds>
  }
  delay(1000);

  digitalWrite(4,LOW);

  for(Index = 0; Index < 2000; Index++)
 80a02ec:	682b      	ldr	r3, [r5, #0]
 80a02ee:	3301      	adds	r3, #1
 80a02f0:	e7e7      	b.n	80a02c2 <loop+0x56>
    digitalWrite(5,HIGH);
    delayMicroseconds(500);
    digitalWrite(5,LOW);
    delayMicroseconds(500);
  }
  delay(1000);
 80a02f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a02f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(5,HIGH);
    delayMicroseconds(500);
    digitalWrite(5,LOW);
    delayMicroseconds(500);
  }
  delay(1000);
 80a02fa:	f000 ba9f 	b.w	80a083c <delay>
 80a02fe:	bf00      	nop
 80a0300:	200000a4 	.word	0x200000a4

080a0304 <_GLOBAL__sub_I_SystemMode>:
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
 80a0304:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0306:	f000 f8c3 	bl	80a0490 <HAL_Pin_Map>

#include "math.h"

#include "SparkCorePolledTimer.h"

SYSTEM_THREAD(ENABLED);
 80a030a:	2100      	movs	r1, #0
 80a030c:	2001      	movs	r0, #1
 80a030e:	f000 f9f1 	bl	80a06f4 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0312:	4b13      	ldr	r3, [pc, #76]	; (80a0360 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0314:	2200      	movs	r2, #0
 80a0316:	701a      	strb	r2, [r3, #0]
 80a0318:	805a      	strh	r2, [r3, #2]
 80a031a:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a031e:	4c11      	ldr	r4, [pc, #68]	; (80a0364 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0320:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0322:	2002      	movs	r0, #2
 80a0324:	f000 f9d6 	bl	80a06d4 <set_system_mode>
 80a0328:	4d0f      	ldr	r5, [pc, #60]	; (80a0368 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a032a:	4620      	mov	r0, r4
 80a032c:	f000 faee 	bl	80a090c <_ZN9IPAddressC1Ev>
 80a0330:	4620      	mov	r0, r4
int port;
UDP udp;
 80a0332:	4c0e      	ldr	r4, [pc, #56]	; (80a036c <_GLOBAL__sub_I_SystemMode+0x68>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0334:	462a      	mov	r2, r5
 80a0336:	490e      	ldr	r1, [pc, #56]	; (80a0370 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0338:	f001 f9d0 	bl	80a16dc <__aeabi_atexit>
int port;
UDP udp;
 80a033c:	4620      	mov	r0, r4
 80a033e:	f000 fe53 	bl	80a0fe8 <_ZN3UDPC1Ev>
 80a0342:	462a      	mov	r2, r5
 80a0344:	490b      	ldr	r1, [pc, #44]	; (80a0374 <_GLOBAL__sub_I_SystemMode+0x70>)
 80a0346:	4620      	mov	r0, r4
 80a0348:	f001 f9c8 	bl	80a16dc <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a034c:	480a      	ldr	r0, [pc, #40]	; (80a0378 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a034e:	f000 f875 	bl	80a043c <_ZN7LSM9DS1C1Ev>
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
 80a0352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a0356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a035a:	4808      	ldr	r0, [pc, #32]	; (80a037c <_GLOBAL__sub_I_SystemMode+0x78>)
 80a035c:	f000 b816 	b.w	80a038c <_ZN20SparkCorePolledTimerC1Em>
 80a0360:	20000150 	.word	0x20000150
 80a0364:	200000a8 	.word	0x200000a8
 80a0368:	20000088 	.word	0x20000088
 80a036c:	20000158 	.word	0x20000158
 80a0370:	080a00b3 	.word	0x080a00b3
 80a0374:	080a00b5 	.word	0x080a00b5
 80a0378:	200000c0 	.word	0x200000c0
 80a037c:	20000098 	.word	0x20000098

080a0380 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0380:	b510      	push	{r4, lr}
 80a0382:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0384:	f000 f87c 	bl	80a0480 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a0388:	6020      	str	r0, [r4, #0]
 80a038a:	bd10      	pop	{r4, pc}

080a038c <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a038c:	b538      	push	{r3, r4, r5, lr}
 80a038e:	4604      	mov	r4, r0
 80a0390:	460d      	mov	r5, r1
    Reset();
 80a0392:	f7ff fff5 	bl	80a0380 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0396:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a0398:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a039a:	60a3      	str	r3, [r4, #8]
}
 80a039c:	4620      	mov	r0, r4
 80a039e:	bd38      	pop	{r3, r4, r5, pc}

080a03a0 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a03a0:	f000 b876 	b.w	80a0490 <HAL_Pin_Map>

080a03a4 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a03a4:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a03a6:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a03a8:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a03aa:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a03ac:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a03ae:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a03b0:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a03b2:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a03b4:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a03b6:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a03b8:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a03ba:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a03bc:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a03be:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a03c0:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a03c4:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a03c6:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a03c8:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a03ca:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a03cc:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a03ce:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a03d0:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a03d2:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a03d4:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a03d6:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a03d8:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a03da:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a03dc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a03e0:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a03e2:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a03e4:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a03e6:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a03e8:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a03ea:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a03ec:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a03ee:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a03f0:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a03f2:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a03f4:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a03f6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a03fa:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a03fc:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0400:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0404:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a0406:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a040a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a040e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0412:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0414:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a0416:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0418:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a041a:	6565      	str	r5, [r4, #84]	; 0x54
 80a041c:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0420:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0424:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0428:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a042c:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0430:	d1f0      	bne.n	80a0414 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0432:	f04f 0300 	mov.w	r3, #0
 80a0436:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a043a:	bd30      	pop	{r4, r5, pc}

080a043c <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a043c:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a043e:	231e      	movs	r3, #30
 80a0440:	226b      	movs	r2, #107	; 0x6b
 80a0442:	2101      	movs	r1, #1
 80a0444:	f7ff ffae 	bl	80a03a4 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0448:	bd10      	pop	{r4, pc}

080a044a <_GLOBAL__sub_I_magSensitivity>:
 80a044a:	f000 b821 	b.w	80a0490 <HAL_Pin_Map>
	...

080a0450 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <os_mutex_create+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601d0 	.word	0x080601d0

080a0460 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <HAL_RNG_GetRandomNumber+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	685b      	ldr	r3, [r3, #4]
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	0806019c 	.word	0x0806019c

080a0470 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <HAL_Delay_Microseconds+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	68db      	ldr	r3, [r3, #12]
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	0806019c 	.word	0x0806019c

080a0480 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0480:	b508      	push	{r3, lr}
 80a0482:	4b02      	ldr	r3, [pc, #8]	; (80a048c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	695b      	ldr	r3, [r3, #20]
 80a0488:	9301      	str	r3, [sp, #4]
 80a048a:	bd08      	pop	{r3, pc}
 80a048c:	0806019c 	.word	0x0806019c

080a0490 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <HAL_Pin_Map+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	681b      	ldr	r3, [r3, #0]
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	080601b0 	.word	0x080601b0

080a04a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <HAL_Pin_Mode+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	689b      	ldr	r3, [r3, #8]
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601b0 	.word	0x080601b0

080a04b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <HAL_Get_Pin_Mode+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	68db      	ldr	r3, [r3, #12]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601b0 	.word	0x080601b0

080a04c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <HAL_GPIO_Write+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	691b      	ldr	r3, [r3, #16]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601b0 	.word	0x080601b0

080a04d0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <HAL_I2C_Write_Data+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601ac 	.word	0x080601ac

080a04e0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <HAL_I2C_Available_Data+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	080601ac 	.word	0x080601ac

080a04f0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b02      	ldr	r3, [pc, #8]	; (80a04fc <HAL_I2C_Read_Data+0xc>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a04f8:	9301      	str	r3, [sp, #4]
 80a04fa:	bd08      	pop	{r3, pc}
 80a04fc:	080601ac 	.word	0x080601ac

080a0500 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b02      	ldr	r3, [pc, #8]	; (80a050c <HAL_I2C_Peek_Data+0xc>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0508:	9301      	str	r3, [sp, #4]
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	080601ac 	.word	0x080601ac

080a0510 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <HAL_I2C_Flush_Data+0xc>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0518:	9301      	str	r3, [sp, #4]
 80a051a:	bd08      	pop	{r3, pc}
 80a051c:	080601ac 	.word	0x080601ac

080a0520 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0520:	b508      	push	{r3, lr}
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <HAL_I2C_Is_Enabled+0xc>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0528:	9301      	str	r3, [sp, #4]
 80a052a:	bd08      	pop	{r3, pc}
 80a052c:	080601ac 	.word	0x080601ac

080a0530 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0530:	b508      	push	{r3, lr}
 80a0532:	4b03      	ldr	r3, [pc, #12]	; (80a0540 <HAL_I2C_Init+0x10>)
 80a0534:	681b      	ldr	r3, [r3, #0]
 80a0536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a053a:	9301      	str	r3, [sp, #4]
 80a053c:	bd08      	pop	{r3, pc}
 80a053e:	0000      	.short	0x0000
 80a0540:	080601ac 	.word	0x080601ac

080a0544 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <socket_handle_valid+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	685b      	ldr	r3, [r3, #4]
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601bc 	.word	0x080601bc

080a0554 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <socket_create+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	689b      	ldr	r3, [r3, #8]
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601bc 	.word	0x080601bc

080a0564 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <socket_receivefrom+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	695b      	ldr	r3, [r3, #20]
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601bc 	.word	0x080601bc

080a0574 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <socket_sendto+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	69db      	ldr	r3, [r3, #28]
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601bc 	.word	0x080601bc

080a0584 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <socket_close+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6a1b      	ldr	r3, [r3, #32]
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601bc 	.word	0x080601bc

080a0594 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <socket_handle_invalid+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601bc 	.word	0x080601bc

080a05a4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_SPI_Init+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	69db      	ldr	r3, [r3, #28]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601b4 	.word	0x080601b4

080a05b4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_SPI_Is_Enabled+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	6a1b      	ldr	r3, [r3, #32]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601b4 	.word	0x080601b4

080a05c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <HAL_USART_Init+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	699b      	ldr	r3, [r3, #24]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601c4 	.word	0x080601c4

080a05d4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <HAL_USART_Write_Data+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601c4 	.word	0x080601c4

080a05e4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <HAL_USART_Available_Data+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601c4 	.word	0x080601c4

080a05f4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <HAL_USART_Read_Data+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601c4 	.word	0x080601c4

080a0604 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <HAL_USART_Peek_Data+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601c4 	.word	0x080601c4

080a0614 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <HAL_USART_Flush_Data+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601c4 	.word	0x080601c4

080a0624 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <HAL_USART_Is_Enabled+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601c4 	.word	0x080601c4

080a0634 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601c4 	.word	0x080601c4

080a0644 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <HAL_USB_USART_Init+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	681b      	ldr	r3, [r3, #0]
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601d8 	.word	0x080601d8

080a0654 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <HAL_USB_USART_Begin+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	685b      	ldr	r3, [r3, #4]
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601d8 	.word	0x080601d8

080a0664 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <HAL_USB_USART_Available_Data+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	691b      	ldr	r3, [r3, #16]
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601d8 	.word	0x080601d8

080a0674 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	695b      	ldr	r3, [r3, #20]
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601d8 	.word	0x080601d8

080a0684 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <HAL_USB_USART_Receive_Data+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	699b      	ldr	r3, [r3, #24]
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601d8 	.word	0x080601d8

080a0694 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <HAL_USB_USART_Send_Data+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	69db      	ldr	r3, [r3, #28]
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601d8 	.word	0x080601d8

080a06a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <HAL_USB_USART_Flush_Data+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	6a1b      	ldr	r3, [r3, #32]
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601d8 	.word	0x080601d8

080a06b4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_USB_USART_Is_Enabled+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601d8 	.word	0x080601d8

080a06c4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <inet_gethostbyname+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601c0 	.word	0x080601c0

080a06d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <set_system_mode+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	685b      	ldr	r3, [r3, #4]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601a4 	.word	0x080601a4

080a06e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <system_delay_ms+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	695b      	ldr	r3, [r3, #20]
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601a4 	.word	0x080601a4

080a06f4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <system_thread_set_state+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601a4 	.word	0x080601a4

080a0704 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b03      	ldr	r3, [pc, #12]	; (80a0714 <system_ctrl_set_app_request_handler+0x10>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a070e:	9301      	str	r3, [sp, #4]
 80a0710:	bd08      	pop	{r3, pc}
 80a0712:	0000      	.short	0x0000
 80a0714:	080601a4 	.word	0x080601a4

080a0718 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b03      	ldr	r3, [pc, #12]	; (80a0728 <system_ctrl_set_result+0x10>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0722:	9301      	str	r3, [sp, #4]
 80a0724:	bd08      	pop	{r3, pc}
 80a0726:	0000      	.short	0x0000
 80a0728:	080601a4 	.word	0x080601a4

080a072c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601cc 	.word	0x080601cc

080a073c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <network_config+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	681b      	ldr	r3, [r3, #0]
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601c8 	.word	0x080601c8

080a074c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <network_connect+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	685b      	ldr	r3, [r3, #4]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601c8 	.word	0x080601c8

080a075c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <network_connecting+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	689b      	ldr	r3, [r3, #8]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601c8 	.word	0x080601c8

080a076c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <network_disconnect+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	68db      	ldr	r3, [r3, #12]
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601c8 	.word	0x080601c8

080a077c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <network_ready+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	691b      	ldr	r3, [r3, #16]
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601c8 	.word	0x080601c8

080a078c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <network_on+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	695b      	ldr	r3, [r3, #20]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601c8 	.word	0x080601c8

080a079c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <network_off+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	699b      	ldr	r3, [r3, #24]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601c8 	.word	0x080601c8

080a07ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <network_listen+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	69db      	ldr	r3, [r3, #28]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601c8 	.word	0x080601c8

080a07bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <network_listening+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6a1b      	ldr	r3, [r3, #32]
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601c8 	.word	0x080601c8

080a07cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <network_set_listen_timeout+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601c8 	.word	0x080601c8

080a07dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <network_get_listen_timeout+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601c8 	.word	0x080601c8

080a07ec <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <network_set_hostname+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601c8 	.word	0x080601c8

080a07fc <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <network_get_hostname+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601c8 	.word	0x080601c8

080a080c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <malloc+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	681b      	ldr	r3, [r3, #0]
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601a0 	.word	0x080601a0

080a081c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <free+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	685b      	ldr	r3, [r3, #4]
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601a0 	.word	0x080601a0

080a082c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <realloc+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	689b      	ldr	r3, [r3, #8]
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601a0 	.word	0x080601a0

080a083c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a083c:	2100      	movs	r1, #0
 80a083e:	f7ff bf51 	b.w	80a06e4 <system_delay_ms>

080a0842 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0842:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0844:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0846:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0848:	b113      	cbz	r3, 80a0850 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a084a:	2203      	movs	r2, #3
 80a084c:	4601      	mov	r1, r0
 80a084e:	4798      	blx	r3
    }
 80a0850:	4620      	mov	r0, r4
 80a0852:	bd10      	pop	{r4, pc}

080a0854 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0854:	4770      	bx	lr

080a0856 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0858:	4606      	mov	r6, r0
 80a085a:	4615      	mov	r5, r2
 80a085c:	460c      	mov	r4, r1
 80a085e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0860:	42bc      	cmp	r4, r7
 80a0862:	d006      	beq.n	80a0872 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0864:	6833      	ldr	r3, [r6, #0]
 80a0866:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a086a:	689b      	ldr	r3, [r3, #8]
 80a086c:	4630      	mov	r0, r6
 80a086e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0870:	e7f6      	b.n	80a0860 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0872:	4628      	mov	r0, r5
 80a0874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0876 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0876:	2200      	movs	r2, #0
 80a0878:	7c00      	ldrb	r0, [r0, #16]
 80a087a:	f7ff be29 	b.w	80a04d0 <HAL_I2C_Write_Data>

080a087e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a087e:	2100      	movs	r1, #0
 80a0880:	7c00      	ldrb	r0, [r0, #16]
 80a0882:	f7ff be2d 	b.w	80a04e0 <HAL_I2C_Available_Data>

080a0886 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0886:	2100      	movs	r1, #0
 80a0888:	7c00      	ldrb	r0, [r0, #16]
 80a088a:	f7ff be31 	b.w	80a04f0 <HAL_I2C_Read_Data>

080a088e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a088e:	2100      	movs	r1, #0
 80a0890:	7c00      	ldrb	r0, [r0, #16]
 80a0892:	f7ff be35 	b.w	80a0500 <HAL_I2C_Peek_Data>

080a0896 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0896:	2100      	movs	r1, #0
 80a0898:	7c00      	ldrb	r0, [r0, #16]
 80a089a:	f7ff be39 	b.w	80a0510 <HAL_I2C_Flush_Data>

080a089e <_ZN7TwoWireD0Ev>:
 80a089e:	b510      	push	{r4, lr}
 80a08a0:	4604      	mov	r4, r0
 80a08a2:	2114      	movs	r1, #20
 80a08a4:	f000 ff1f 	bl	80a16e6 <_ZdlPvj>
 80a08a8:	4620      	mov	r0, r4
 80a08aa:	bd10      	pop	{r4, pc}

080a08ac <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a08ac:	b510      	push	{r4, lr}
 80a08ae:	4604      	mov	r4, r0
 80a08b0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a08b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a08b6:	60a3      	str	r3, [r4, #8]
 80a08b8:	4b04      	ldr	r3, [pc, #16]	; (80a08cc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a08ba:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a08bc:	7420      	strb	r0, [r4, #16]
 80a08be:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a08c0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a08c2:	f7ff fe35 	bl	80a0530 <HAL_I2C_Init>

}
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	bd10      	pop	{r4, pc}
 80a08ca:	bf00      	nop
 80a08cc:	080a1bb4 	.word	0x080a1bb4

080a08d0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a08d0:	2100      	movs	r1, #0
 80a08d2:	7c00      	ldrb	r0, [r0, #16]
 80a08d4:	f7ff be24 	b.w	80a0520 <HAL_I2C_Is_Enabled>

080a08d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a08d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08da:	460f      	mov	r7, r1
 80a08dc:	f100 0608 	add.w	r6, r0, #8
 80a08e0:	1d05      	adds	r5, r0, #4
 80a08e2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a08e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a08e8:	220a      	movs	r2, #10
 80a08ea:	4638      	mov	r0, r7
 80a08ec:	f000 f94f 	bl	80a0b8e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a08f0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a08f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a08f4:	d007      	beq.n	80a0906 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a08f6:	2c00      	cmp	r4, #0
 80a08f8:	d0f4      	beq.n	80a08e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a08fa:	212e      	movs	r1, #46	; 0x2e
 80a08fc:	4638      	mov	r0, r7
 80a08fe:	f000 f8f3 	bl	80a0ae8 <_ZN5Print5printEc>
 80a0902:	4404      	add	r4, r0
 80a0904:	e7ee      	b.n	80a08e4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0906:	4620      	mov	r0, r4
 80a0908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a090c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a090c:	b510      	push	{r4, lr}
 80a090e:	4604      	mov	r4, r0
 80a0910:	4b04      	ldr	r3, [pc, #16]	; (80a0924 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0912:	2211      	movs	r2, #17
 80a0914:	f840 3b04 	str.w	r3, [r0], #4
 80a0918:	2100      	movs	r1, #0
 80a091a:	f001 f848 	bl	80a19ae <memset>
{
    clear();
}
 80a091e:	4620      	mov	r0, r4
 80a0920:	bd10      	pop	{r4, pc}
 80a0922:	bf00      	nop
 80a0924:	080a1bdc 	.word	0x080a1bdc

080a0928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0928:	4603      	mov	r3, r0
 80a092a:	4a07      	ldr	r2, [pc, #28]	; (80a0948 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a092c:	b510      	push	{r4, lr}
 80a092e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0932:	f101 0210 	add.w	r2, r1, #16
 80a0936:	f851 4b04 	ldr.w	r4, [r1], #4
 80a093a:	4291      	cmp	r1, r2
 80a093c:	f843 4b04 	str.w	r4, [r3], #4
 80a0940:	d1f9      	bne.n	80a0936 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0942:	780a      	ldrb	r2, [r1, #0]
 80a0944:	701a      	strb	r2, [r3, #0]
}
 80a0946:	bd10      	pop	{r4, pc}
 80a0948:	080a1bdc 	.word	0x080a1bdc

080a094c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a094c:	4a02      	ldr	r2, [pc, #8]	; (80a0958 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a094e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0950:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0952:	2204      	movs	r2, #4
 80a0954:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0956:	4770      	bx	lr
 80a0958:	080a1bdc 	.word	0x080a1bdc

080a095c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a095c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a095e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0962:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0966:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a096a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a096e:	2304      	movs	r3, #4
 80a0970:	6041      	str	r1, [r0, #4]
 80a0972:	7503      	strb	r3, [r0, #20]
 80a0974:	bd10      	pop	{r4, pc}
	...

080a0978 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a097a:	4d04      	ldr	r5, [pc, #16]	; (80a098c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a097c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a097e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0982:	9500      	str	r5, [sp, #0]
 80a0984:	f7ff ffea 	bl	80a095c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0988:	b003      	add	sp, #12
 80a098a:	bd30      	pop	{r4, r5, pc}
 80a098c:	080a1bdc 	.word	0x080a1bdc

080a0990 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0990:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0992:	780d      	ldrb	r5, [r1, #0]
 80a0994:	788b      	ldrb	r3, [r1, #2]
 80a0996:	784a      	ldrb	r2, [r1, #1]
 80a0998:	78c9      	ldrb	r1, [r1, #3]
 80a099a:	9100      	str	r1, [sp, #0]
 80a099c:	4629      	mov	r1, r5
 80a099e:	f7ff ffdd 	bl	80a095c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a09a2:	b003      	add	sp, #12
 80a09a4:	bd30      	pop	{r4, r5, pc}
	...

080a09a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a09a8:	4a01      	ldr	r2, [pc, #4]	; (80a09b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a09ac:	601a      	str	r2, [r3, #0]
 80a09ae:	4770      	bx	lr
 80a09b0:	080a1c5e 	.word	0x080a1c5e
 80a09b4:	200001a4 	.word	0x200001a4

080a09b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a09b8:	2300      	movs	r3, #0
 80a09ba:	461a      	mov	r2, r3
 80a09bc:	6840      	ldr	r0, [r0, #4]
 80a09be:	f7ff bec5 	b.w	80a074c <network_connect>

080a09c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a09c2:	2200      	movs	r2, #0
 80a09c4:	2102      	movs	r1, #2
 80a09c6:	6840      	ldr	r0, [r0, #4]
 80a09c8:	f7ff bed0 	b.w	80a076c <network_disconnect>

080a09cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a09cc:	2200      	movs	r2, #0
 80a09ce:	4611      	mov	r1, r2
 80a09d0:	6840      	ldr	r0, [r0, #4]
 80a09d2:	f7ff bec3 	b.w	80a075c <network_connecting>

080a09d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a09d6:	2200      	movs	r2, #0
 80a09d8:	4611      	mov	r1, r2
 80a09da:	6840      	ldr	r0, [r0, #4]
 80a09dc:	f7ff bece 	b.w	80a077c <network_ready>

080a09e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a09e0:	2300      	movs	r3, #0
 80a09e2:	461a      	mov	r2, r3
 80a09e4:	4619      	mov	r1, r3
 80a09e6:	6840      	ldr	r0, [r0, #4]
 80a09e8:	f7ff bed0 	b.w	80a078c <network_on>

080a09ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a09ec:	2300      	movs	r3, #0
 80a09ee:	461a      	mov	r2, r3
 80a09f0:	4619      	mov	r1, r3
 80a09f2:	6840      	ldr	r0, [r0, #4]
 80a09f4:	f7ff bed2 	b.w	80a079c <network_off>

080a09f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a09f8:	2200      	movs	r2, #0
 80a09fa:	f081 0101 	eor.w	r1, r1, #1
 80a09fe:	6840      	ldr	r0, [r0, #4]
 80a0a00:	f7ff bed4 	b.w	80a07ac <network_listen>

080a0a04 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0a04:	2200      	movs	r2, #0
 80a0a06:	6840      	ldr	r0, [r0, #4]
 80a0a08:	f7ff bee0 	b.w	80a07cc <network_set_listen_timeout>

080a0a0c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0a0c:	2200      	movs	r2, #0
 80a0a0e:	4611      	mov	r1, r2
 80a0a10:	6840      	ldr	r0, [r0, #4]
 80a0a12:	f7ff bee3 	b.w	80a07dc <network_get_listen_timeout>

080a0a16 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0a16:	2200      	movs	r2, #0
 80a0a18:	4611      	mov	r1, r2
 80a0a1a:	6840      	ldr	r0, [r0, #4]
 80a0a1c:	f7ff bece 	b.w	80a07bc <network_listening>

080a0a20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0a20:	b570      	push	{r4, r5, r6, lr}
 80a0a22:	4616      	mov	r6, r2
 80a0a24:	b08e      	sub	sp, #56	; 0x38
 80a0a26:	4604      	mov	r4, r0
    IPAddress addr;
 80a0a28:	a808      	add	r0, sp, #32
 80a0a2a:	f7ff ff6f 	bl	80a090c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0a2e:	2211      	movs	r2, #17
 80a0a30:	2100      	movs	r1, #0
 80a0a32:	a803      	add	r0, sp, #12
 80a0a34:	f000 ffbb 	bl	80a19ae <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0a38:	4630      	mov	r0, r6
 80a0a3a:	f000 ffe9 	bl	80a1a10 <strlen>
 80a0a3e:	2500      	movs	r5, #0
 80a0a40:	4b0a      	ldr	r3, [pc, #40]	; (80a0a6c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0a42:	9500      	str	r5, [sp, #0]
 80a0a44:	b281      	uxth	r1, r0
 80a0a46:	685b      	ldr	r3, [r3, #4]
 80a0a48:	aa03      	add	r2, sp, #12
 80a0a4a:	4630      	mov	r0, r6
 80a0a4c:	f7ff fe3a 	bl	80a06c4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0a50:	b120      	cbz	r0, 80a0a5c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0a52:	4629      	mov	r1, r5
 80a0a54:	4620      	mov	r0, r4
 80a0a56:	f7ff ff79 	bl	80a094c <_ZN9IPAddressC1Em>
 80a0a5a:	e003      	b.n	80a0a64 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0a5c:	a903      	add	r1, sp, #12
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	f7ff ff62 	bl	80a0928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	b00e      	add	sp, #56	; 0x38
 80a0a68:	bd70      	pop	{r4, r5, r6, pc}
 80a0a6a:	bf00      	nop
 80a0a6c:	20000628 	.word	0x20000628

080a0a70 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0a70:	4b03      	ldr	r3, [pc, #12]	; (80a0a80 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0a72:	4a04      	ldr	r2, [pc, #16]	; (80a0a84 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0a74:	2804      	cmp	r0, #4
 80a0a76:	bf0c      	ite	eq
 80a0a78:	4610      	moveq	r0, r2
 80a0a7a:	4618      	movne	r0, r3
 80a0a7c:	4770      	bx	lr
 80a0a7e:	bf00      	nop
 80a0a80:	200001a8 	.word	0x200001a8
 80a0a84:	20000628 	.word	0x20000628

080a0a88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0a88:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0a8a:	4a03      	ldr	r2, [pc, #12]	; (80a0a98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0a8c:	601a      	str	r2, [r3, #0]
 80a0a8e:	2200      	movs	r2, #0
 80a0a90:	605a      	str	r2, [r3, #4]
 80a0a92:	4770      	bx	lr
 80a0a94:	200001a8 	.word	0x200001a8
 80a0a98:	080a1cd4 	.word	0x080a1cd4

080a0a9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a9e:	4606      	mov	r6, r0
 80a0aa0:	460d      	mov	r5, r1
 80a0aa2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0aa4:	2400      	movs	r4, #0
  while (size--) {
 80a0aa6:	42bd      	cmp	r5, r7
 80a0aa8:	d00c      	beq.n	80a0ac4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0aaa:	6833      	ldr	r3, [r6, #0]
 80a0aac:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ab0:	689b      	ldr	r3, [r3, #8]
 80a0ab2:	4630      	mov	r0, r6
 80a0ab4:	4798      	blx	r3
     if (chunk>=0)
 80a0ab6:	2800      	cmp	r0, #0
 80a0ab8:	db01      	blt.n	80a0abe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0aba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0abc:	e7f3      	b.n	80a0aa6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0abe:	2c00      	cmp	r4, #0
 80a0ac0:	bf08      	it	eq
 80a0ac2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0ac4:	4620      	mov	r0, r4
 80a0ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ac8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0ac8:	b570      	push	{r4, r5, r6, lr}
 80a0aca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0acc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0ace:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0ad0:	b149      	cbz	r1, 80a0ae6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0ad2:	f000 ff9d 	bl	80a1a10 <strlen>
 80a0ad6:	682b      	ldr	r3, [r5, #0]
 80a0ad8:	4602      	mov	r2, r0
 80a0ada:	4621      	mov	r1, r4
 80a0adc:	4628      	mov	r0, r5
    }
 80a0ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0ae2:	68db      	ldr	r3, [r3, #12]
 80a0ae4:	4718      	bx	r3
    }
 80a0ae6:	bd70      	pop	{r4, r5, r6, pc}

080a0ae8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0ae8:	6803      	ldr	r3, [r0, #0]
 80a0aea:	689b      	ldr	r3, [r3, #8]
 80a0aec:	4718      	bx	r3

080a0aee <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a0aee:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a0af0:	680a      	ldr	r2, [r1, #0]
 80a0af2:	4601      	mov	r1, r0
 80a0af4:	6812      	ldr	r2, [r2, #0]
 80a0af6:	4618      	mov	r0, r3
 80a0af8:	4710      	bx	r2

080a0afa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0afa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0afc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0afe:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0b00:	f7ff fff2 	bl	80a0ae8 <_ZN5Print5printEc>
  n += print('\n');
 80a0b04:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0b06:	4604      	mov	r4, r0
  n += print('\n');
 80a0b08:	4628      	mov	r0, r5
 80a0b0a:	f7ff ffed 	bl	80a0ae8 <_ZN5Print5printEc>
  return n;
}
 80a0b0e:	4420      	add	r0, r4
 80a0b10:	bd38      	pop	{r3, r4, r5, pc}

080a0b12 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0b12:	b538      	push	{r3, r4, r5, lr}
 80a0b14:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0b16:	f7ff ffd7 	bl	80a0ac8 <_ZN5Print5writeEPKc>
 80a0b1a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0b1c:	4628      	mov	r0, r5
 80a0b1e:	f7ff ffec 	bl	80a0afa <_ZN5Print7printlnEv>
  return n;
}
 80a0b22:	4420      	add	r0, r4
 80a0b24:	bd38      	pop	{r3, r4, r5, pc}

080a0b26 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0b26:	b538      	push	{r3, r4, r5, lr}
 80a0b28:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0b2a:	f7ff ffe0 	bl	80a0aee <_ZN5Print5printERK9Printable>
 80a0b2e:	4604      	mov	r4, r0
   n += println();
 80a0b30:	4628      	mov	r0, r5
 80a0b32:	f7ff ffe2 	bl	80a0afa <_ZN5Print7printlnEv>
   return n;
 }
 80a0b36:	4420      	add	r0, r4
 80a0b38:	bd38      	pop	{r3, r4, r5, pc}

080a0b3a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0b3a:	2a01      	cmp	r2, #1
 80a0b3c:	bf98      	it	ls
 80a0b3e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0b40:	b530      	push	{r4, r5, lr}
 80a0b42:	460b      	mov	r3, r1
 80a0b44:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0b46:	2100      	movs	r1, #0
 80a0b48:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0b4c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0b50:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0b54:	fb05 3312 	mls	r3, r5, r2, r3
 80a0b58:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b5a:	2b09      	cmp	r3, #9
 80a0b5c:	bf94      	ite	ls
 80a0b5e:	3330      	addls	r3, #48	; 0x30
 80a0b60:	3337      	addhi	r3, #55	; 0x37
 80a0b62:	b2db      	uxtb	r3, r3
 80a0b64:	4621      	mov	r1, r4
 80a0b66:	f804 3901 	strb.w	r3, [r4], #-1
 80a0b6a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0b6c:	2d00      	cmp	r5, #0
 80a0b6e:	d1ef      	bne.n	80a0b50 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0b70:	f7ff ffaa 	bl	80a0ac8 <_ZN5Print5writeEPKc>
}
 80a0b74:	b00b      	add	sp, #44	; 0x2c
 80a0b76:	bd30      	pop	{r4, r5, pc}

080a0b78 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0b78:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0b7a:	b922      	cbnz	r2, 80a0b86 <_ZN5Print5printEmi+0xe>
 80a0b7c:	6803      	ldr	r3, [r0, #0]
 80a0b7e:	b2c9      	uxtb	r1, r1
 80a0b80:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0b82:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0b84:	4718      	bx	r3
  else return printNumber(n, base);
 80a0b86:	b2d2      	uxtb	r2, r2
}
 80a0b88:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0b8a:	f7ff bfd6 	b.w	80a0b3a <_ZN5Print11printNumberEmh>

080a0b8e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0b8e:	f7ff bff3 	b.w	80a0b78 <_ZN5Print5printEmi>

080a0b92 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0b92:	b510      	push	{r4, lr}
 80a0b94:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b96:	f7ff fe54 	bl	80a0842 <_ZNSt14_Function_baseD1Ev>
 80a0b9a:	4620      	mov	r0, r4
 80a0b9c:	bd10      	pop	{r4, pc}
	...

080a0ba0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ba0:	4803      	ldr	r0, [pc, #12]	; (80a0bb0 <_GLOBAL__sub_I_RGB+0x10>)
 80a0ba2:	2300      	movs	r3, #0
 80a0ba4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ba6:	4a03      	ldr	r2, [pc, #12]	; (80a0bb4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0ba8:	4903      	ldr	r1, [pc, #12]	; (80a0bb8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0baa:	f000 bd97 	b.w	80a16dc <__aeabi_atexit>
 80a0bae:	bf00      	nop
 80a0bb0:	200001b0 	.word	0x200001b0
 80a0bb4:	20000088 	.word	0x20000088
 80a0bb8:	080a0b93 	.word	0x080a0b93

080a0bbc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0bbc:	4770      	bx	lr

080a0bbe <_ZN8SPIClassD0Ev>:
 80a0bbe:	b510      	push	{r4, lr}
 80a0bc0:	4604      	mov	r4, r0
 80a0bc2:	2110      	movs	r1, #16
 80a0bc4:	f000 fd8f 	bl	80a16e6 <_ZdlPvj>
 80a0bc8:	4620      	mov	r0, r4
 80a0bca:	bd10      	pop	{r4, pc}

080a0bcc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0bcc:	b570      	push	{r4, r5, r6, lr}
 80a0bce:	4604      	mov	r4, r0
 80a0bd0:	460e      	mov	r6, r1
 80a0bd2:	4b07      	ldr	r3, [pc, #28]	; (80a0bf0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0bd4:	2500      	movs	r5, #0
 80a0bd6:	6003      	str	r3, [r0, #0]
 80a0bd8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0bdc:	f7ff fc38 	bl	80a0450 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0be0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0be2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0be4:	f7ff fcde 	bl	80a05a4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0be8:	60a5      	str	r5, [r4, #8]
}
 80a0bea:	4620      	mov	r0, r4
 80a0bec:	bd70      	pop	{r4, r5, r6, pc}
 80a0bee:	bf00      	nop
 80a0bf0:	080a1d08 	.word	0x080a1d08

080a0bf4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0bf4:	7900      	ldrb	r0, [r0, #4]
 80a0bf6:	f7ff bcdd 	b.w	80a05b4 <HAL_SPI_Is_Enabled>

080a0bfa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0bfa:	b510      	push	{r4, lr}
 80a0bfc:	4604      	mov	r4, r0
{
	free(buffer);
 80a0bfe:	6800      	ldr	r0, [r0, #0]
 80a0c00:	f7ff fe0c 	bl	80a081c <free>
}
 80a0c04:	4620      	mov	r0, r4
 80a0c06:	bd10      	pop	{r4, pc}

080a0c08 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0c08:	b510      	push	{r4, lr}
 80a0c0a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0c0c:	6800      	ldr	r0, [r0, #0]
 80a0c0e:	b108      	cbz	r0, 80a0c14 <_ZN6String10invalidateEv+0xc>
 80a0c10:	f7ff fe04 	bl	80a081c <free>
	buffer = NULL;
 80a0c14:	2300      	movs	r3, #0
 80a0c16:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0c18:	60a3      	str	r3, [r4, #8]
 80a0c1a:	6063      	str	r3, [r4, #4]
 80a0c1c:	bd10      	pop	{r4, pc}

080a0c1e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0c1e:	b538      	push	{r3, r4, r5, lr}
 80a0c20:	4604      	mov	r4, r0
 80a0c22:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0c24:	6800      	ldr	r0, [r0, #0]
 80a0c26:	3101      	adds	r1, #1
 80a0c28:	f7ff fe00 	bl	80a082c <realloc>
	if (newbuffer) {
 80a0c2c:	b110      	cbz	r0, 80a0c34 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0c2e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0c32:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0c34:	bd38      	pop	{r3, r4, r5, pc}

080a0c36 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c36:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0c38:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c3a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0c3c:	b113      	cbz	r3, 80a0c44 <_ZN6String7reserveEj+0xe>
 80a0c3e:	6843      	ldr	r3, [r0, #4]
 80a0c40:	428b      	cmp	r3, r1
 80a0c42:	d207      	bcs.n	80a0c54 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0c44:	4620      	mov	r0, r4
 80a0c46:	f7ff ffea 	bl	80a0c1e <_ZN6String12changeBufferEj>
 80a0c4a:	b120      	cbz	r0, 80a0c56 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0c4c:	68a3      	ldr	r3, [r4, #8]
 80a0c4e:	b90b      	cbnz	r3, 80a0c54 <_ZN6String7reserveEj+0x1e>
 80a0c50:	6822      	ldr	r2, [r4, #0]
 80a0c52:	7013      	strb	r3, [r2, #0]
 80a0c54:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0c56:	bd10      	pop	{r4, pc}

080a0c58 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c58:	b570      	push	{r4, r5, r6, lr}
 80a0c5a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0c5c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c5e:	4604      	mov	r4, r0
 80a0c60:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0c62:	f7ff ffe8 	bl	80a0c36 <_ZN6String7reserveEj>
 80a0c66:	b918      	cbnz	r0, 80a0c70 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	f7ff ffcd 	bl	80a0c08 <_ZN6String10invalidateEv>
		return *this;
 80a0c6e:	e009      	b.n	80a0c84 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0c70:	462a      	mov	r2, r5
 80a0c72:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0c74:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0c76:	6820      	ldr	r0, [r4, #0]
 80a0c78:	f000 fe8e 	bl	80a1998 <memcpy>
	buffer[len] = 0;
 80a0c7c:	6822      	ldr	r2, [r4, #0]
 80a0c7e:	68a3      	ldr	r3, [r4, #8]
 80a0c80:	2100      	movs	r1, #0
 80a0c82:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	bd70      	pop	{r4, r5, r6, pc}

080a0c88 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0c88:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0c8a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0c8c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0c8e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0c90:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0c92:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0c94:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0c96:	460d      	mov	r5, r1
 80a0c98:	b139      	cbz	r1, 80a0caa <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0c9a:	4608      	mov	r0, r1
 80a0c9c:	f000 feb8 	bl	80a1a10 <strlen>
 80a0ca0:	4629      	mov	r1, r5
 80a0ca2:	4602      	mov	r2, r0
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	f7ff ffd7 	bl	80a0c58 <_ZN6String4copyEPKcj>
}
 80a0caa:	4620      	mov	r0, r4
 80a0cac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0cb0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0cb4:	4b03      	ldr	r3, [pc, #12]	; (80a0cc4 <_GLOBAL__sub_I_System+0x14>)
 80a0cb6:	2000      	movs	r0, #0
 80a0cb8:	7018      	strb	r0, [r3, #0]
 80a0cba:	8058      	strh	r0, [r3, #2]
 80a0cbc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0cbe:	f7ff bd09 	b.w	80a06d4 <set_system_mode>
 80a0cc2:	bf00      	nop
 80a0cc4:	200001c0 	.word	0x200001c0

080a0cc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0cc8:	4b02      	ldr	r3, [pc, #8]	; (80a0cd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0cca:	681a      	ldr	r2, [r3, #0]
 80a0ccc:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0cce:	601a      	str	r2, [r3, #0]
 80a0cd0:	4770      	bx	lr
 80a0cd2:	bf00      	nop
 80a0cd4:	20000020 	.word	0x20000020
 80a0cd8:	200001c8 	.word	0x200001c8

080a0cdc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0cdc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0cde:	6804      	ldr	r4, [r0, #0]
 80a0ce0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0ce2:	46a4      	mov	ip, r4
    }
 80a0ce4:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0ce6:	4760      	bx	ip

080a0ce8 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0ce8:	6803      	ldr	r3, [r0, #0]
 80a0cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0cec:	4718      	bx	r3

080a0cee <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0cee:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0cf0:	4770      	bx	lr

080a0cf2 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0cf2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0cf4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0cf6:	1a10      	subs	r0, r2, r0
 80a0cf8:	4770      	bx	lr

080a0cfa <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0cfa:	b513      	push	{r0, r1, r4, lr}
 80a0cfc:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0cfe:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0d00:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0d04:	68d4      	ldr	r4, [r2, #12]
 80a0d06:	4619      	mov	r1, r3
 80a0d08:	2201      	movs	r2, #1
 80a0d0a:	47a0      	blx	r4
}
 80a0d0c:	b002      	add	sp, #8
 80a0d0e:	bd10      	pop	{r4, pc}

080a0d10 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0d10:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0d12:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0d14:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0d16:	691b      	ldr	r3, [r3, #16]
 80a0d18:	4798      	blx	r3
 80a0d1a:	b128      	cbz	r0, 80a0d28 <_ZN3UDP4readEv+0x18>
 80a0d1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0d1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0d20:	1c59      	adds	r1, r3, #1
 80a0d22:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0d24:	5cd0      	ldrb	r0, [r2, r3]
 80a0d26:	bd10      	pop	{r4, pc}
 80a0d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0d2c:	bd10      	pop	{r4, pc}

080a0d2e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0d2e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0d30:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0d32:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0d34:	691b      	ldr	r3, [r3, #16]
 80a0d36:	4798      	blx	r3
 80a0d38:	b118      	cbz	r0, 80a0d42 <_ZN3UDP4peekEv+0x14>
 80a0d3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0d3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0d3e:	5cd0      	ldrb	r0, [r2, r3]
 80a0d40:	bd10      	pop	{r4, pc}
 80a0d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0d46:	bd10      	pop	{r4, pc}

080a0d48 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0d48:	4770      	bx	lr

080a0d4a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0d4a:	4603      	mov	r3, r0
 80a0d4c:	4608      	mov	r0, r1
 80a0d4e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0d50:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0d52:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0d54:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0d56:	6803      	ldr	r3, [r0, #0]
 80a0d58:	1a52      	subs	r2, r2, r1
 80a0d5a:	68db      	ldr	r3, [r3, #12]
 80a0d5c:	4421      	add	r1, r4
}
 80a0d5e:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0d60:	4718      	bx	r3

080a0d62 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0d62:	f1a0 0010 	sub.w	r0, r0, #16
 80a0d66:	f7ff bff0 	b.w	80a0d4a <_ZNK3UDP7printToER5Print>

080a0d6a <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0d6c:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0d6e:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0d70:	460f      	mov	r7, r1
 80a0d72:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0d74:	f7ff fe7c 	bl	80a0a70 <_ZN5spark12NetworkClass4fromEm>
 80a0d78:	6803      	ldr	r3, [r0, #0]
 80a0d7a:	68db      	ldr	r3, [r3, #12]
 80a0d7c:	4798      	blx	r3
 80a0d7e:	b1b8      	cbz	r0, 80a0db0 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0d80:	2102      	movs	r1, #2
 80a0d82:	463b      	mov	r3, r7
 80a0d84:	2211      	movs	r2, #17
 80a0d86:	4608      	mov	r0, r1
 80a0d88:	9600      	str	r6, [sp, #0]
 80a0d8a:	f7ff fbe3 	bl	80a0554 <socket_create>
 80a0d8e:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0d90:	f7ff fbd8 	bl	80a0544 <socket_handle_valid>
 80a0d94:	4604      	mov	r4, r0
 80a0d96:	b130      	cbz	r0, 80a0da6 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0d98:	2300      	movs	r3, #0
 80a0d9a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0d9c:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0d9e:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0da0:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0da2:	2001      	movs	r0, #1
 80a0da4:	e004      	b.n	80a0db0 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0da6:	682b      	ldr	r3, [r5, #0]
 80a0da8:	4628      	mov	r0, r5
 80a0daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0dac:	4798      	blx	r3
            bound = false;
 80a0dae:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a0db0:	b003      	add	sp, #12
 80a0db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0db4 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a0db4:	b538      	push	{r3, r4, r5, lr}
 80a0db6:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0db8:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0dba:	f7ff fbeb 	bl	80a0594 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0dbe:	4285      	cmp	r5, r0
 80a0dc0:	d002      	beq.n	80a0dc8 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0dc2:	6960      	ldr	r0, [r4, #20]
 80a0dc4:	f7ff fbde 	bl	80a0584 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0dc8:	f7ff fbe4 	bl	80a0594 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0dcc:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0dce:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0dd0:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0dd2:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0dd4:	bd38      	pop	{r3, r4, r5, pc}

080a0dd6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0dd6:	b530      	push	{r4, r5, lr}
 80a0dd8:	b087      	sub	sp, #28
 80a0dda:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a0dde:	2502      	movs	r5, #2
 80a0de0:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a0de4:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0de8:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0dea:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0dec:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0df0:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a0df4:	799c      	ldrb	r4, [r3, #6]
 80a0df6:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0dfa:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0dfc:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0dfe:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0e02:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a0e06:	2310      	movs	r3, #16
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	ab02      	add	r3, sp, #8
 80a0e0c:	9300      	str	r3, [sp, #0]
 80a0e0e:	6940      	ldr	r0, [r0, #20]
 80a0e10:	2300      	movs	r3, #0
 80a0e12:	f7ff fbaf 	bl	80a0574 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a0e16:	b007      	add	sp, #28
 80a0e18:	bd30      	pop	{r4, r5, pc}

080a0e1a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0e1a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0e1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0e1e:	4605      	mov	r5, r0
 80a0e20:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0e22:	b113      	cbz	r3, 80a0e2a <_ZN3UDP5writeEPKhj+0x10>
 80a0e24:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a0e26:	1a24      	subs	r4, r4, r0
 80a0e28:	e000      	b.n	80a0e2c <_ZN3UDP5writeEPKhj+0x12>
 80a0e2a:	461c      	mov	r4, r3
 80a0e2c:	4294      	cmp	r4, r2
 80a0e2e:	bf28      	it	cs
 80a0e30:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a0e32:	4418      	add	r0, r3
 80a0e34:	4622      	mov	r2, r4
 80a0e36:	f000 fdaf 	bl	80a1998 <memcpy>
    _offset += size;
 80a0e3a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0e3c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a0e3e:	4423      	add	r3, r4
 80a0e40:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0e42:	bd38      	pop	{r3, r4, r5, pc}

080a0e44 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0e44:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a0e46:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0e48:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a0e4a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0e4c:	460e      	mov	r6, r1
 80a0e4e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a0e50:	4798      	blx	r3
 80a0e52:	b188      	cbz	r0, 80a0e78 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a0e54:	6823      	ldr	r3, [r4, #0]
 80a0e56:	4620      	mov	r0, r4
 80a0e58:	691b      	ldr	r3, [r3, #16]
 80a0e5a:	4798      	blx	r3
 80a0e5c:	4285      	cmp	r5, r0
 80a0e5e:	bfa8      	it	ge
 80a0e60:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a0e62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0e64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0e66:	462a      	mov	r2, r5
 80a0e68:	4419      	add	r1, r3
 80a0e6a:	4630      	mov	r0, r6
 80a0e6c:	f000 fd94 	bl	80a1998 <memcpy>
      _offset += read;
 80a0e70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0e72:	442b      	add	r3, r5
 80a0e74:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a0e76:	e001      	b.n	80a0e7c <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a0e78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a0e7c:	4628      	mov	r0, r5
 80a0e7e:	bd70      	pop	{r4, r5, r6, pc}

080a0e80 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e82:	4604      	mov	r4, r0
 80a0e84:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0e86:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0e88:	460d      	mov	r5, r1
 80a0e8a:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0e8c:	f7ff fdf0 	bl	80a0a70 <_ZN5spark12NetworkClass4fromEm>
 80a0e90:	6803      	ldr	r3, [r0, #0]
 80a0e92:	68db      	ldr	r3, [r3, #12]
 80a0e94:	4798      	blx	r3
 80a0e96:	b310      	cbz	r0, 80a0ede <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0e98:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0e9a:	f7ff fb7b 	bl	80a0594 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0e9e:	4287      	cmp	r7, r0
 80a0ea0:	d01d      	beq.n	80a0ede <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0ea2:	b1e5      	cbz	r5, 80a0ede <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a0ea4:	ab08      	add	r3, sp, #32
 80a0ea6:	2210      	movs	r2, #16
 80a0ea8:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a0eac:	9301      	str	r3, [sp, #4]
 80a0eae:	eb0d 0302 	add.w	r3, sp, r2
 80a0eb2:	9300      	str	r3, [sp, #0]
 80a0eb4:	4629      	mov	r1, r5
 80a0eb6:	2300      	movs	r3, #0
 80a0eb8:	4632      	mov	r2, r6
 80a0eba:	6960      	ldr	r0, [r4, #20]
 80a0ebc:	f7ff fb52 	bl	80a0564 <socket_receivefrom>
        if (ret >= 0)
 80a0ec0:	1e05      	subs	r5, r0, #0
 80a0ec2:	db0e      	blt.n	80a0ee2 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0ec4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a0ec8:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0ecc:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0ece:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0ed2:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0ed4:	f104 001c 	add.w	r0, r4, #28
 80a0ed8:	f7ff fd5a 	bl	80a0990 <_ZN9IPAddressaSEPKh>
 80a0edc:	e001      	b.n	80a0ee2 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a0ede:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a0ee2:	4628      	mov	r0, r5
 80a0ee4:	b009      	add	sp, #36	; 0x24
 80a0ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0ee8 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0eec:	4606      	mov	r6, r0
 80a0eee:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a0ef0:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0ef2:	460d      	mov	r5, r1
 80a0ef4:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a0ef6:	f7ff fdbb 	bl	80a0a70 <_ZN5spark12NetworkClass4fromEm>
 80a0efa:	6803      	ldr	r3, [r0, #0]
 80a0efc:	68db      	ldr	r3, [r3, #12]
 80a0efe:	4798      	blx	r3
 80a0f00:	b1f8      	cbz	r0, 80a0f42 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a0f02:	4628      	mov	r0, r5
 80a0f04:	f000 fd84 	bl	80a1a10 <strlen>
 80a0f08:	2400      	movs	r4, #0
 80a0f0a:	b281      	uxth	r1, r0
 80a0f0c:	9400      	str	r4, [sp, #0]
 80a0f0e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a0f10:	aa03      	add	r2, sp, #12
 80a0f12:	4628      	mov	r0, r5
 80a0f14:	f7ff fbd6 	bl	80a06c4 <inet_gethostbyname>
 80a0f18:	b990      	cbnz	r0, 80a0f40 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a0f1a:	a903      	add	r1, sp, #12
 80a0f1c:	a808      	add	r0, sp, #32
 80a0f1e:	f7ff fd03 	bl	80a0928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a0f22:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0f24:	ac0f      	add	r4, sp, #60	; 0x3c
 80a0f26:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a0f28:	4b07      	ldr	r3, [pc, #28]	; (80a0f48 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a0f2a:	ad09      	add	r5, sp, #36	; 0x24
 80a0f2c:	930e      	str	r3, [sp, #56]	; 0x38
 80a0f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f32:	682b      	ldr	r3, [r5, #0]
 80a0f34:	4642      	mov	r2, r8
 80a0f36:	7023      	strb	r3, [r4, #0]
 80a0f38:	a90e      	add	r1, sp, #56	; 0x38
 80a0f3a:	4630      	mov	r0, r6
 80a0f3c:	47b8      	blx	r7
 80a0f3e:	e000      	b.n	80a0f42 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a0f40:	4620      	mov	r0, r4
}
 80a0f42:	b014      	add	sp, #80	; 0x50
 80a0f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0f48:	080a1bdc 	.word	0x080a1bdc

080a0f4c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a0f4c:	b570      	push	{r4, r5, r6, lr}
 80a0f4e:	4604      	mov	r4, r0
 80a0f50:	4606      	mov	r6, r0
 80a0f52:	4b05      	ldr	r3, [pc, #20]	; (80a0f68 <_ZN3UDP8remoteIPEv+0x1c>)
 80a0f54:	f101 0520 	add.w	r5, r1, #32
 80a0f58:	f844 3b04 	str.w	r3, [r4], #4
 80a0f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f60:	682b      	ldr	r3, [r5, #0]
 80a0f62:	4630      	mov	r0, r6
 80a0f64:	7023      	strb	r3, [r4, #0]
 80a0f66:	bd70      	pop	{r4, r5, r6, pc}
 80a0f68:	080a1bdc 	.word	0x080a1bdc

080a0f6c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f6e:	4694      	mov	ip, r2
 80a0f70:	468e      	mov	lr, r1
 80a0f72:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0f74:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0f76:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0f78:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a0f7a:	4a09      	ldr	r2, [pc, #36]	; (80a0fa0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a0f7c:	ac03      	add	r4, sp, #12
 80a0f7e:	1d1d      	adds	r5, r3, #4
 80a0f80:	9202      	str	r2, [sp, #8]
 80a0f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0f86:	682b      	ldr	r3, [r5, #0]
 80a0f88:	4662      	mov	r2, ip
 80a0f8a:	7023      	strb	r3, [r4, #0]
 80a0f8c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a0f90:	4671      	mov	r1, lr
 80a0f92:	9300      	str	r3, [sp, #0]
 80a0f94:	4630      	mov	r0, r6
 80a0f96:	ab02      	add	r3, sp, #8
 80a0f98:	47b8      	blx	r7
    }
 80a0f9a:	b009      	add	sp, #36	; 0x24
 80a0f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f9e:	bf00      	nop
 80a0fa0:	080a1bdc 	.word	0x080a1bdc

080a0fa4 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0fa6:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0fa8:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0faa:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0fac:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a0fae:	4b0d      	ldr	r3, [pc, #52]	; (80a0fe4 <_ZN3UDP9endPacketEv+0x40>)
 80a0fb0:	ad03      	add	r5, sp, #12
 80a0fb2:	f100 0620 	add.w	r6, r0, #32
 80a0fb6:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a0fba:	9302      	str	r3, [sp, #8]
 80a0fbc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0fc0:	6833      	ldr	r3, [r6, #0]
 80a0fc2:	4672      	mov	r2, lr
 80a0fc4:	702b      	strb	r3, [r5, #0]
 80a0fc6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a0fc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0fca:	9300      	str	r3, [sp, #0]
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	ab02      	add	r3, sp, #8
 80a0fd0:	47b8      	blx	r7
 80a0fd2:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a0fd4:	6823      	ldr	r3, [r4, #0]
 80a0fd6:	4620      	mov	r0, r4
 80a0fd8:	69db      	ldr	r3, [r3, #28]
 80a0fda:	4798      	blx	r3
    return result;
}
 80a0fdc:	4628      	mov	r0, r5
 80a0fde:	b009      	add	sp, #36	; 0x24
 80a0fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0fe2:	bf00      	nop
 80a0fe4:	080a1bdc 	.word	0x080a1bdc

080a0fe8 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a0fe8:	b538      	push	{r3, r4, r5, lr}
 80a0fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fee:	6083      	str	r3, [r0, #8]
 80a0ff0:	4b0b      	ldr	r3, [pc, #44]	; (80a1020 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0ff2:	2500      	movs	r5, #0
 80a0ff4:	f103 0208 	add.w	r2, r3, #8
 80a0ff8:	336c      	adds	r3, #108	; 0x6c
 80a0ffa:	6002      	str	r2, [r0, #0]
 80a0ffc:	6103      	str	r3, [r0, #16]
 80a0ffe:	6045      	str	r5, [r0, #4]
 80a1000:	4604      	mov	r4, r0
 80a1002:	f7ff fac7 	bl	80a0594 <socket_handle_invalid>
 80a1006:	6160      	str	r0, [r4, #20]
 80a1008:	f104 001c 	add.w	r0, r4, #28
 80a100c:	f7ff fc7e 	bl	80a090c <_ZN9IPAddressC1Ev>
 80a1010:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1014:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1016:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1018:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a101a:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a101c:	4620      	mov	r0, r4
 80a101e:	bd38      	pop	{r3, r4, r5, pc}
 80a1020:	080a1d3c 	.word	0x080a1d3c

080a1024 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1024:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1026:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a102a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a102c:	b123      	cbz	r3, 80a1038 <_ZN3UDP13releaseBufferEv+0x14>
 80a102e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1030:	b110      	cbz	r0, 80a1038 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1032:	2101      	movs	r1, #1
 80a1034:	f000 fb57 	bl	80a16e6 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1038:	2300      	movs	r3, #0
 80a103a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a103c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1040:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1042:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1044:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1046:	bd10      	pop	{r4, pc}

080a1048 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1048:	b570      	push	{r4, r5, r6, lr}
 80a104a:	4604      	mov	r4, r0
 80a104c:	4616      	mov	r6, r2
 80a104e:	460d      	mov	r5, r1
    releaseBuffer();
 80a1050:	f7ff ffe8 	bl	80a1024 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1054:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a1056:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1058:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a105a:	b93e      	cbnz	r6, 80a106c <_ZN3UDP9setBufferEjPh+0x24>
 80a105c:	b135      	cbz	r5, 80a106c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a105e:	4628      	mov	r0, r5
 80a1060:	f7ff f81b 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a1064:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a1066:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1068:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a106c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a106e:	b103      	cbz	r3, 80a1072 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1070:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1072:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1074:	3000      	adds	r0, #0
 80a1076:	bf18      	it	ne
 80a1078:	2001      	movne	r0, #1
 80a107a:	bd70      	pop	{r4, r5, r6, pc}

080a107c <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a107e:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1080:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1082:	4605      	mov	r5, r0
 80a1084:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1086:	b91a      	cbnz	r2, 80a1090 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a1088:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a108a:	b109      	cbz	r1, 80a1090 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a108c:	f7ff ffdc 	bl	80a1048 <_ZN3UDP9setBufferEjPh>
 80a1090:	f105 0620 	add.w	r6, r5, #32
 80a1094:	3404      	adds	r4, #4
 80a1096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1098:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a109a:	6823      	ldr	r3, [r4, #0]
 80a109c:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a109e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a10a0:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a10a2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a10a4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a10a6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a10a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10aa <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a10aa:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a10ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a10ae:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a10b0:	b91a      	cbnz	r2, 80a10ba <_ZN3UDP11parsePacketEm+0x10>
 80a10b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a10b4:	b109      	cbz	r1, 80a10ba <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a10b6:	f7ff ffc7 	bl	80a1048 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a10ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a10bc:	2300      	movs	r3, #0
 80a10be:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a10c0:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a10c2:	b141      	cbz	r1, 80a10d6 <_ZN3UDP11parsePacketEm+0x2c>
 80a10c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a10c6:	b132      	cbz	r2, 80a10d6 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a10c8:	6820      	ldr	r0, [r4, #0]
 80a10ca:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	47a8      	blx	r5
        if (result>0) {
 80a10d0:	2800      	cmp	r0, #0
            _total = result;
 80a10d2:	bfc8      	it	gt
 80a10d4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a10d6:	6823      	ldr	r3, [r4, #0]
 80a10d8:	4620      	mov	r0, r4
}
 80a10da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a10de:	691b      	ldr	r3, [r3, #16]
 80a10e0:	4718      	bx	r3

080a10e2 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a10e2:	4770      	bx	lr

080a10e4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10e4:	7441      	strb	r1, [r0, #17]
 80a10e6:	4770      	bx	lr

080a10e8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a10e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a10ea:	7c00      	ldrb	r0, [r0, #16]
 80a10ec:	f7ff faa2 	bl	80a0634 <HAL_USART_Available_Data_For_Write>
}
 80a10f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10f4:	bd08      	pop	{r3, pc}

080a10f6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a10f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a10f8:	7c00      	ldrb	r0, [r0, #16]
 80a10fa:	f7ff fa73 	bl	80a05e4 <HAL_USART_Available_Data>
}
 80a10fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1102:	bd08      	pop	{r3, pc}

080a1104 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1104:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1106:	7c00      	ldrb	r0, [r0, #16]
 80a1108:	f7ff fa7c 	bl	80a0604 <HAL_USART_Peek_Data>
}
 80a110c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1110:	bf28      	it	cs
 80a1112:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1116:	bd08      	pop	{r3, pc}

080a1118 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1118:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a111a:	7c00      	ldrb	r0, [r0, #16]
 80a111c:	f7ff fa6a 	bl	80a05f4 <HAL_USART_Read_Data>
}
 80a1120:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1124:	bf28      	it	cs
 80a1126:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a112a:	bd08      	pop	{r3, pc}

080a112c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a112c:	7c00      	ldrb	r0, [r0, #16]
 80a112e:	f7ff ba71 	b.w	80a0614 <HAL_USART_Flush_Data>

080a1132 <_ZN11USARTSerialD0Ev>:
 80a1132:	b510      	push	{r4, lr}
 80a1134:	4604      	mov	r4, r0
 80a1136:	2114      	movs	r1, #20
 80a1138:	f000 fad5 	bl	80a16e6 <_ZdlPvj>
 80a113c:	4620      	mov	r0, r4
 80a113e:	bd10      	pop	{r4, pc}

080a1140 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1140:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1142:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1144:	4604      	mov	r4, r0
 80a1146:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1148:	b925      	cbnz	r5, 80a1154 <_ZN11USARTSerial5writeEh+0x14>
 80a114a:	7c00      	ldrb	r0, [r0, #16]
 80a114c:	f7ff fa72 	bl	80a0634 <HAL_USART_Available_Data_For_Write>
 80a1150:	2800      	cmp	r0, #0
 80a1152:	dd05      	ble.n	80a1160 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1154:	4631      	mov	r1, r6
 80a1156:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a115c:	f7ff ba3a 	b.w	80a05d4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1160:	4628      	mov	r0, r5
 80a1162:	bd70      	pop	{r4, r5, r6, pc}

080a1164 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1164:	b510      	push	{r4, lr}
 80a1166:	4604      	mov	r4, r0
 80a1168:	4608      	mov	r0, r1
 80a116a:	4611      	mov	r1, r2
 80a116c:	2200      	movs	r2, #0
 80a116e:	6062      	str	r2, [r4, #4]
 80a1170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1174:	60a2      	str	r2, [r4, #8]
 80a1176:	4a05      	ldr	r2, [pc, #20]	; (80a118c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1178:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a117a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a117c:	2201      	movs	r2, #1
 80a117e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1180:	461a      	mov	r2, r3
 80a1182:	f7ff fa1f 	bl	80a05c4 <HAL_USART_Init>
}
 80a1186:	4620      	mov	r0, r4
 80a1188:	bd10      	pop	{r4, pc}
 80a118a:	bf00      	nop
 80a118c:	080a1db4 	.word	0x080a1db4

080a1190 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1190:	7c00      	ldrb	r0, [r0, #16]
 80a1192:	f7ff ba47 	b.w	80a0624 <HAL_USART_Is_Enabled>
	...

080a1198 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1198:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a119a:	4d0c      	ldr	r5, [pc, #48]	; (80a11cc <_Z22__fetch_global_Serial1v+0x34>)
 80a119c:	6829      	ldr	r1, [r5, #0]
 80a119e:	f011 0401 	ands.w	r4, r1, #1
 80a11a2:	d111      	bne.n	80a11c8 <_Z22__fetch_global_Serial1v+0x30>
 80a11a4:	4628      	mov	r0, r5
 80a11a6:	f7fe ff7c 	bl	80a00a2 <__cxa_guard_acquire>
 80a11aa:	b168      	cbz	r0, 80a11c8 <_Z22__fetch_global_Serial1v+0x30>
 80a11ac:	4a08      	ldr	r2, [pc, #32]	; (80a11d0 <_Z22__fetch_global_Serial1v+0x38>)
 80a11ae:	4621      	mov	r1, r4
 80a11b0:	4b08      	ldr	r3, [pc, #32]	; (80a11d4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a11b2:	4809      	ldr	r0, [pc, #36]	; (80a11d8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11b4:	f7ff ffd6 	bl	80a1164 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a11b8:	4628      	mov	r0, r5
 80a11ba:	f7fe ff77 	bl	80a00ac <__cxa_guard_release>
 80a11be:	4a07      	ldr	r2, [pc, #28]	; (80a11dc <_Z22__fetch_global_Serial1v+0x44>)
 80a11c0:	4907      	ldr	r1, [pc, #28]	; (80a11e0 <_Z22__fetch_global_Serial1v+0x48>)
 80a11c2:	4805      	ldr	r0, [pc, #20]	; (80a11d8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11c4:	f000 fa8a 	bl	80a16dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a11c8:	4803      	ldr	r0, [pc, #12]	; (80a11d8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11ca:	bd38      	pop	{r3, r4, r5, pc}
 80a11cc:	20000264 	.word	0x20000264
 80a11d0:	20000268 	.word	0x20000268
 80a11d4:	200001e0 	.word	0x200001e0
 80a11d8:	200001cc 	.word	0x200001cc
 80a11dc:	20000088 	.word	0x20000088
 80a11e0:	080a10e3 	.word	0x080a10e3

080a11e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a11e4:	7441      	strb	r1, [r0, #17]
 80a11e6:	4770      	bx	lr

080a11e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a11e8:	4770      	bx	lr

080a11ea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a11ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a11ec:	2100      	movs	r1, #0
 80a11ee:	7c00      	ldrb	r0, [r0, #16]
 80a11f0:	f7ff fa48 	bl	80a0684 <HAL_USB_USART_Receive_Data>
}
 80a11f4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a11f8:	bf28      	it	cs
 80a11fa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a11fe:	bd08      	pop	{r3, pc}

080a1200 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1200:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1202:	2101      	movs	r1, #1
 80a1204:	7c00      	ldrb	r0, [r0, #16]
 80a1206:	f7ff fa3d 	bl	80a0684 <HAL_USB_USART_Receive_Data>
}
 80a120a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a120e:	bf28      	it	cs
 80a1210:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1214:	bd08      	pop	{r3, pc}

080a1216 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1216:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1218:	7c00      	ldrb	r0, [r0, #16]
 80a121a:	f7ff fa2b 	bl	80a0674 <HAL_USB_USART_Available_Data_For_Write>
}
 80a121e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1222:	bd08      	pop	{r3, pc}

080a1224 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1224:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1226:	7c00      	ldrb	r0, [r0, #16]
 80a1228:	f7ff fa1c 	bl	80a0664 <HAL_USB_USART_Available_Data>
}
 80a122c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1230:	bd08      	pop	{r3, pc}

080a1232 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1232:	7c00      	ldrb	r0, [r0, #16]
 80a1234:	f7ff ba36 	b.w	80a06a4 <HAL_USB_USART_Flush_Data>

080a1238 <_ZN9USBSerialD0Ev>:
 80a1238:	b510      	push	{r4, lr}
 80a123a:	4604      	mov	r4, r0
 80a123c:	2114      	movs	r1, #20
 80a123e:	f000 fa52 	bl	80a16e6 <_ZdlPvj>
 80a1242:	4620      	mov	r0, r4
 80a1244:	bd10      	pop	{r4, pc}

080a1246 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1246:	b538      	push	{r3, r4, r5, lr}
 80a1248:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a124a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a124c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a124e:	f7ff fa11 	bl	80a0674 <HAL_USB_USART_Available_Data_For_Write>
 80a1252:	2800      	cmp	r0, #0
 80a1254:	dc01      	bgt.n	80a125a <_ZN9USBSerial5writeEh+0x14>
 80a1256:	7c60      	ldrb	r0, [r4, #17]
 80a1258:	b128      	cbz	r0, 80a1266 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a125a:	4629      	mov	r1, r5
 80a125c:	7c20      	ldrb	r0, [r4, #16]
 80a125e:	f7ff fa19 	bl	80a0694 <HAL_USB_USART_Send_Data>
 80a1262:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1266:	bd38      	pop	{r3, r4, r5, pc}

080a1268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1268:	b510      	push	{r4, lr}
 80a126a:	4604      	mov	r4, r0
 80a126c:	2300      	movs	r3, #0
 80a126e:	6063      	str	r3, [r4, #4]
 80a1270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1274:	60a3      	str	r3, [r4, #8]
 80a1276:	4b05      	ldr	r3, [pc, #20]	; (80a128c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1278:	4608      	mov	r0, r1
 80a127a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a127c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a127e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1280:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1282:	4611      	mov	r1, r2
 80a1284:	f7ff f9de 	bl	80a0644 <HAL_USB_USART_Init>
}
 80a1288:	4620      	mov	r0, r4
 80a128a:	bd10      	pop	{r4, pc}
 80a128c:	080a1de4 	.word	0x080a1de4

080a1290 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1290:	2200      	movs	r2, #0
 80a1292:	7c00      	ldrb	r0, [r0, #16]
 80a1294:	f7ff b9de 	b.w	80a0654 <HAL_USB_USART_Begin>

080a1298 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a1298:	7c00      	ldrb	r0, [r0, #16]
 80a129a:	f7ff ba0b 	b.w	80a06b4 <HAL_USB_USART_Is_Enabled>

080a129e <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a129e:	f7ff bffb 	b.w	80a1298 <_ZN9USBSerial9isEnabledEv>
	...

080a12a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a12a4:	b510      	push	{r4, lr}
 80a12a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a12a8:	2214      	movs	r2, #20
 80a12aa:	2100      	movs	r1, #0
 80a12ac:	f000 fb7f 	bl	80a19ae <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12b0:	4b05      	ldr	r3, [pc, #20]	; (80a12c8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a12b2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a12b6:	4b05      	ldr	r3, [pc, #20]	; (80a12cc <_Z19acquireSerialBufferv+0x28>)
 80a12b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a12ba:	f240 1301 	movw	r3, #257	; 0x101
 80a12be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a12c0:	2381      	movs	r3, #129	; 0x81
 80a12c2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a12c4:	bd10      	pop	{r4, pc}
 80a12c6:	bf00      	nop
 80a12c8:	20000371 	.word	0x20000371
 80a12cc:	200002f0 	.word	0x200002f0

080a12d0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a12d0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12d2:	4d0e      	ldr	r5, [pc, #56]	; (80a130c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a12d4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a12d6:	a801      	add	r0, sp, #4
 80a12d8:	f7ff ffe4 	bl	80a12a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12dc:	6829      	ldr	r1, [r5, #0]
 80a12de:	f011 0401 	ands.w	r4, r1, #1
 80a12e2:	d110      	bne.n	80a1306 <_Z16_fetch_usbserialv+0x36>
 80a12e4:	4628      	mov	r0, r5
 80a12e6:	f7fe fedc 	bl	80a00a2 <__cxa_guard_acquire>
 80a12ea:	b160      	cbz	r0, 80a1306 <_Z16_fetch_usbserialv+0x36>
 80a12ec:	aa01      	add	r2, sp, #4
 80a12ee:	4621      	mov	r1, r4
 80a12f0:	4807      	ldr	r0, [pc, #28]	; (80a1310 <_Z16_fetch_usbserialv+0x40>)
 80a12f2:	f7ff ffb9 	bl	80a1268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a12f6:	4628      	mov	r0, r5
 80a12f8:	f7fe fed8 	bl	80a00ac <__cxa_guard_release>
 80a12fc:	4a05      	ldr	r2, [pc, #20]	; (80a1314 <_Z16_fetch_usbserialv+0x44>)
 80a12fe:	4906      	ldr	r1, [pc, #24]	; (80a1318 <_Z16_fetch_usbserialv+0x48>)
 80a1300:	4803      	ldr	r0, [pc, #12]	; (80a1310 <_Z16_fetch_usbserialv+0x40>)
 80a1302:	f000 f9eb 	bl	80a16dc <__aeabi_atexit>
	return _usbserial;
}
 80a1306:	4802      	ldr	r0, [pc, #8]	; (80a1310 <_Z16_fetch_usbserialv+0x40>)
 80a1308:	b007      	add	sp, #28
 80a130a:	bd30      	pop	{r4, r5, pc}
 80a130c:	200002ec 	.word	0x200002ec
 80a1310:	20000474 	.word	0x20000474
 80a1314:	20000088 	.word	0x20000088
 80a1318:	080a11e9 	.word	0x080a11e9

080a131c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a131c:	b510      	push	{r4, lr}
 80a131e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1320:	2214      	movs	r2, #20
 80a1322:	2100      	movs	r1, #0
 80a1324:	f000 fb43 	bl	80a19ae <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1328:	4b05      	ldr	r3, [pc, #20]	; (80a1340 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a132a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a132c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a132e:	4b05      	ldr	r3, [pc, #20]	; (80a1344 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1330:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1332:	f240 1301 	movw	r3, #257	; 0x101
 80a1336:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1338:	2381      	movs	r3, #129	; 0x81
 80a133a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a133c:	bd10      	pop	{r4, pc}
 80a133e:	bf00      	nop
 80a1340:	20000524 	.word	0x20000524
 80a1344:	2000048c 	.word	0x2000048c

080a1348 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1348:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a134a:	4c0e      	ldr	r4, [pc, #56]	; (80a1384 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a134c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a134e:	a801      	add	r0, sp, #4
 80a1350:	f7ff ffe4 	bl	80a131c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1354:	6823      	ldr	r3, [r4, #0]
 80a1356:	07db      	lsls	r3, r3, #31
 80a1358:	d410      	bmi.n	80a137c <_Z17_fetch_usbserial1v+0x34>
 80a135a:	4620      	mov	r0, r4
 80a135c:	f7fe fea1 	bl	80a00a2 <__cxa_guard_acquire>
 80a1360:	b160      	cbz	r0, 80a137c <_Z17_fetch_usbserial1v+0x34>
 80a1362:	aa01      	add	r2, sp, #4
 80a1364:	2101      	movs	r1, #1
 80a1366:	4808      	ldr	r0, [pc, #32]	; (80a1388 <_Z17_fetch_usbserial1v+0x40>)
 80a1368:	f7ff ff7e 	bl	80a1268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a136c:	4620      	mov	r0, r4
 80a136e:	f7fe fe9d 	bl	80a00ac <__cxa_guard_release>
 80a1372:	4a06      	ldr	r2, [pc, #24]	; (80a138c <_Z17_fetch_usbserial1v+0x44>)
 80a1374:	4906      	ldr	r1, [pc, #24]	; (80a1390 <_Z17_fetch_usbserial1v+0x48>)
 80a1376:	4804      	ldr	r0, [pc, #16]	; (80a1388 <_Z17_fetch_usbserial1v+0x40>)
 80a1378:	f000 f9b0 	bl	80a16dc <__aeabi_atexit>
  return _usbserial1;
}
 80a137c:	4802      	ldr	r0, [pc, #8]	; (80a1388 <_Z17_fetch_usbserial1v+0x40>)
 80a137e:	b006      	add	sp, #24
 80a1380:	bd10      	pop	{r4, pc}
 80a1382:	bf00      	nop
 80a1384:	20000488 	.word	0x20000488
 80a1388:	20000510 	.word	0x20000510
 80a138c:	20000088 	.word	0x20000088
 80a1390:	080a11e9 	.word	0x080a11e9

080a1394 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1394:	2200      	movs	r2, #0
 80a1396:	4611      	mov	r1, r2
 80a1398:	6840      	ldr	r0, [r0, #4]
 80a139a:	f7ff b9ef 	b.w	80a077c <network_ready>

080a139e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a139e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13a0:	4616      	mov	r6, r2
 80a13a2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a13a4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13a6:	460f      	mov	r7, r1
 80a13a8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a13aa:	2100      	movs	r1, #0
 80a13ac:	a803      	add	r0, sp, #12
 80a13ae:	f000 fafe 	bl	80a19ae <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13b2:	4630      	mov	r0, r6
 80a13b4:	f000 fb2c 	bl	80a1a10 <strlen>
 80a13b8:	2500      	movs	r5, #0
 80a13ba:	9500      	str	r5, [sp, #0]
 80a13bc:	b281      	uxth	r1, r0
 80a13be:	687b      	ldr	r3, [r7, #4]
 80a13c0:	aa03      	add	r2, sp, #12
 80a13c2:	4630      	mov	r0, r6
 80a13c4:	f7ff f97e 	bl	80a06c4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13c8:	b120      	cbz	r0, 80a13d4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a13ca:	4629      	mov	r1, r5
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	f7ff fabd 	bl	80a094c <_ZN9IPAddressC1Em>
 80a13d2:	e003      	b.n	80a13dc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a13d4:	a903      	add	r1, sp, #12
 80a13d6:	4620      	mov	r0, r4
 80a13d8:	f7ff faa6 	bl	80a0928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a13dc:	4620      	mov	r0, r4
 80a13de:	b009      	add	sp, #36	; 0x24
 80a13e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13e2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a13e2:	2200      	movs	r2, #0
 80a13e4:	4611      	mov	r1, r2
 80a13e6:	6840      	ldr	r0, [r0, #4]
 80a13e8:	f7ff b9e8 	b.w	80a07bc <network_listening>

080a13ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a13ec:	2200      	movs	r2, #0
 80a13ee:	4611      	mov	r1, r2
 80a13f0:	6840      	ldr	r0, [r0, #4]
 80a13f2:	f7ff b9f3 	b.w	80a07dc <network_get_listen_timeout>

080a13f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a13f6:	2200      	movs	r2, #0
 80a13f8:	6840      	ldr	r0, [r0, #4]
 80a13fa:	f7ff b9e7 	b.w	80a07cc <network_set_listen_timeout>

080a13fe <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a13fe:	2200      	movs	r2, #0
 80a1400:	f081 0101 	eor.w	r1, r1, #1
 80a1404:	6840      	ldr	r0, [r0, #4]
 80a1406:	f7ff b9d1 	b.w	80a07ac <network_listen>

080a140a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a140a:	2300      	movs	r3, #0
 80a140c:	461a      	mov	r2, r3
 80a140e:	4619      	mov	r1, r3
 80a1410:	6840      	ldr	r0, [r0, #4]
 80a1412:	f7ff b9c3 	b.w	80a079c <network_off>

080a1416 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1416:	2300      	movs	r3, #0
 80a1418:	461a      	mov	r2, r3
 80a141a:	4619      	mov	r1, r3
 80a141c:	6840      	ldr	r0, [r0, #4]
 80a141e:	f7ff b9b5 	b.w	80a078c <network_on>

080a1422 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1422:	2200      	movs	r2, #0
 80a1424:	4611      	mov	r1, r2
 80a1426:	6840      	ldr	r0, [r0, #4]
 80a1428:	f7ff b998 	b.w	80a075c <network_connecting>

080a142c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a142c:	2200      	movs	r2, #0
 80a142e:	2102      	movs	r1, #2
 80a1430:	6840      	ldr	r0, [r0, #4]
 80a1432:	f7ff b99b 	b.w	80a076c <network_disconnect>

080a1436 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1436:	2300      	movs	r3, #0
 80a1438:	461a      	mov	r2, r3
 80a143a:	6840      	ldr	r0, [r0, #4]
 80a143c:	f7ff b986 	b.w	80a074c <network_connect>

080a1440 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1440:	4b02      	ldr	r3, [pc, #8]	; (80a144c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1442:	2204      	movs	r2, #4
 80a1444:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1446:	4a02      	ldr	r2, [pc, #8]	; (80a1450 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1448:	601a      	str	r2, [r3, #0]
 80a144a:	4770      	bx	lr
 80a144c:	20000628 	.word	0x20000628
 80a1450:	080a1e14 	.word	0x080a1e14

080a1454 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1454:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1456:	4b14      	ldr	r3, [pc, #80]	; (80a14a8 <serialEventRun+0x54>)
 80a1458:	b133      	cbz	r3, 80a1468 <serialEventRun+0x14>
 80a145a:	f7ff ff39 	bl	80a12d0 <_Z16_fetch_usbserialv>
 80a145e:	6803      	ldr	r3, [r0, #0]
 80a1460:	691b      	ldr	r3, [r3, #16]
 80a1462:	4798      	blx	r3
 80a1464:	2800      	cmp	r0, #0
 80a1466:	dc16      	bgt.n	80a1496 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1468:	4b10      	ldr	r3, [pc, #64]	; (80a14ac <serialEventRun+0x58>)
 80a146a:	b133      	cbz	r3, 80a147a <serialEventRun+0x26>
 80a146c:	f7ff fe94 	bl	80a1198 <_Z22__fetch_global_Serial1v>
 80a1470:	6803      	ldr	r3, [r0, #0]
 80a1472:	691b      	ldr	r3, [r3, #16]
 80a1474:	4798      	blx	r3
 80a1476:	2800      	cmp	r0, #0
 80a1478:	dc10      	bgt.n	80a149c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a147a:	4b0d      	ldr	r3, [pc, #52]	; (80a14b0 <serialEventRun+0x5c>)
 80a147c:	b10b      	cbz	r3, 80a1482 <serialEventRun+0x2e>
 80a147e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1482:	4b0c      	ldr	r3, [pc, #48]	; (80a14b4 <serialEventRun+0x60>)
 80a1484:	b17b      	cbz	r3, 80a14a6 <serialEventRun+0x52>
 80a1486:	f7ff ff5f 	bl	80a1348 <_Z17_fetch_usbserial1v>
 80a148a:	6803      	ldr	r3, [r0, #0]
 80a148c:	691b      	ldr	r3, [r3, #16]
 80a148e:	4798      	blx	r3
 80a1490:	2800      	cmp	r0, #0
 80a1492:	dc06      	bgt.n	80a14a2 <serialEventRun+0x4e>
 80a1494:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1496:	f3af 8000 	nop.w
 80a149a:	e7e5      	b.n	80a1468 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a149c:	f3af 8000 	nop.w
 80a14a0:	e7eb      	b.n	80a147a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a14a2:	f3af 8000 	nop.w
 80a14a6:	bd08      	pop	{r3, pc}
	...

080a14b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a14b8:	b508      	push	{r3, lr}
	serialEventRun();
 80a14ba:	f7ff ffcb 	bl	80a1454 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a14be:	f7fe ffdf 	bl	80a0480 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a14c2:	4b01      	ldr	r3, [pc, #4]	; (80a14c8 <_post_loop+0x10>)
 80a14c4:	6018      	str	r0, [r3, #0]
 80a14c6:	bd08      	pop	{r3, pc}
 80a14c8:	20000638 	.word	0x20000638

080a14cc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a14cc:	4802      	ldr	r0, [pc, #8]	; (80a14d8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a14ce:	4a03      	ldr	r2, [pc, #12]	; (80a14dc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a14d0:	4903      	ldr	r1, [pc, #12]	; (80a14e0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a14d2:	1a12      	subs	r2, r2, r0
 80a14d4:	f000 ba60 	b.w	80a1998 <memcpy>
 80a14d8:	40024000 	.word	0x40024000
 80a14dc:	40024004 	.word	0x40024004
 80a14e0:	080a1ee0 	.word	0x080a1ee0

080a14e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a14e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14e6:	2300      	movs	r3, #0
 80a14e8:	9300      	str	r3, [sp, #0]
 80a14ea:	461a      	mov	r2, r3
 80a14ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a14f0:	f7ff f912 	bl	80a0718 <system_ctrl_set_result>
}
 80a14f4:	b003      	add	sp, #12
 80a14f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a14fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a14fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a14fe:	8843      	ldrh	r3, [r0, #2]
 80a1500:	2b0a      	cmp	r3, #10
 80a1502:	d008      	beq.n	80a1516 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1504:	2b50      	cmp	r3, #80	; 0x50
 80a1506:	d109      	bne.n	80a151c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1508:	4b09      	ldr	r3, [pc, #36]	; (80a1530 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a150a:	681b      	ldr	r3, [r3, #0]
 80a150c:	b13b      	cbz	r3, 80a151e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a150e:	b003      	add	sp, #12
 80a1510:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1514:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1516:	f7ff ffe5 	bl	80a14e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a151a:	e006      	b.n	80a152a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a151c:	2300      	movs	r3, #0
 80a151e:	9300      	str	r3, [sp, #0]
 80a1520:	461a      	mov	r2, r3
 80a1522:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1526:	f7ff f8f7 	bl	80a0718 <system_ctrl_set_result>
        break;
    }
}
 80a152a:	b003      	add	sp, #12
 80a152c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1530:	20000630 	.word	0x20000630

080a1534 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1534:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1536:	4c10      	ldr	r4, [pc, #64]	; (80a1578 <module_user_init_hook+0x44>)
 80a1538:	4d10      	ldr	r5, [pc, #64]	; (80a157c <module_user_init_hook+0x48>)
 80a153a:	6823      	ldr	r3, [r4, #0]
 80a153c:	42ab      	cmp	r3, r5
 80a153e:	4b10      	ldr	r3, [pc, #64]	; (80a1580 <module_user_init_hook+0x4c>)
 80a1540:	bf0c      	ite	eq
 80a1542:	2201      	moveq	r2, #1
 80a1544:	2200      	movne	r2, #0
 80a1546:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1548:	d002      	beq.n	80a1550 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a154a:	f7ff ffbf 	bl	80a14cc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a154e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1550:	f7fe ff86 	bl	80a0460 <HAL_RNG_GetRandomNumber>
 80a1554:	4604      	mov	r4, r0
    srand(seed);
 80a1556:	f000 fa33 	bl	80a19c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a155a:	4b0a      	ldr	r3, [pc, #40]	; (80a1584 <module_user_init_hook+0x50>)
 80a155c:	b113      	cbz	r3, 80a1564 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a155e:	4620      	mov	r0, r4
 80a1560:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1564:	2100      	movs	r1, #0
 80a1566:	4807      	ldr	r0, [pc, #28]	; (80a1584 <module_user_init_hook+0x50>)
 80a1568:	f7ff f8e0 	bl	80a072c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a156c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1570:	2100      	movs	r1, #0
 80a1572:	4805      	ldr	r0, [pc, #20]	; (80a1588 <module_user_init_hook+0x54>)
 80a1574:	f7ff b8c6 	b.w	80a0704 <system_ctrl_set_app_request_handler>
 80a1578:	40024000 	.word	0x40024000
 80a157c:	9a271c1e 	.word	0x9a271c1e
 80a1580:	20000634 	.word	0x20000634
 80a1584:	00000000 	.word	0x00000000
 80a1588:	080a14fd 	.word	0x080a14fd

080a158c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a158c:	b510      	push	{r4, lr}
 80a158e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1590:	480f      	ldr	r0, [pc, #60]	; (80a15d0 <pinAvailable+0x44>)
 80a1592:	f7ff fb2f 	bl	80a0bf4 <_ZN8SPIClass9isEnabledEv>
 80a1596:	b128      	cbz	r0, 80a15a4 <pinAvailable+0x18>
 80a1598:	f1a4 030d 	sub.w	r3, r4, #13
 80a159c:	2b02      	cmp	r3, #2
 80a159e:	d801      	bhi.n	80a15a4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a15a0:	2000      	movs	r0, #0
 80a15a2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a15a4:	f000 f840 	bl	80a1628 <_Z19__fetch_global_Wirev>
 80a15a8:	f7ff f992 	bl	80a08d0 <_ZN7TwoWire9isEnabledEv>
 80a15ac:	b108      	cbz	r0, 80a15b2 <pinAvailable+0x26>
 80a15ae:	2c01      	cmp	r4, #1
 80a15b0:	d9f6      	bls.n	80a15a0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a15b2:	f7ff fdf1 	bl	80a1198 <_Z22__fetch_global_Serial1v>
 80a15b6:	f7ff fdeb 	bl	80a1190 <_ZN11USARTSerial9isEnabledEv>
 80a15ba:	b118      	cbz	r0, 80a15c4 <pinAvailable+0x38>
 80a15bc:	f1a4 0312 	sub.w	r3, r4, #18
 80a15c0:	2b01      	cmp	r3, #1
 80a15c2:	d9ed      	bls.n	80a15a0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a15c4:	2c17      	cmp	r4, #23
 80a15c6:	bf8c      	ite	hi
 80a15c8:	2000      	movhi	r0, #0
 80a15ca:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a15cc:	bd10      	pop	{r4, pc}
 80a15ce:	bf00      	nop
 80a15d0:	2000066c 	.word	0x2000066c

080a15d4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15d4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a15d6:	b538      	push	{r3, r4, r5, lr}
 80a15d8:	4604      	mov	r4, r0
 80a15da:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15dc:	d80a      	bhi.n	80a15f4 <pinMode+0x20>
 80a15de:	29ff      	cmp	r1, #255	; 0xff
 80a15e0:	d008      	beq.n	80a15f4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a15e2:	f7ff ffd3 	bl	80a158c <pinAvailable>
 80a15e6:	b128      	cbz	r0, 80a15f4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15e8:	4629      	mov	r1, r5
 80a15ea:	4620      	mov	r0, r4
}
 80a15ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15f0:	f7fe bf56 	b.w	80a04a0 <HAL_Pin_Mode>
 80a15f4:	bd38      	pop	{r3, r4, r5, pc}

080a15f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a15f6:	b538      	push	{r3, r4, r5, lr}
 80a15f8:	4604      	mov	r4, r0
 80a15fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a15fc:	f7fe ff58 	bl	80a04b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1600:	28ff      	cmp	r0, #255	; 0xff
 80a1602:	d010      	beq.n	80a1626 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1604:	2806      	cmp	r0, #6
 80a1606:	d804      	bhi.n	80a1612 <digitalWrite+0x1c>
 80a1608:	234d      	movs	r3, #77	; 0x4d
 80a160a:	fa23 f000 	lsr.w	r0, r3, r0
 80a160e:	07c3      	lsls	r3, r0, #31
 80a1610:	d409      	bmi.n	80a1626 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1612:	4620      	mov	r0, r4
 80a1614:	f7ff ffba 	bl	80a158c <pinAvailable>
 80a1618:	b128      	cbz	r0, 80a1626 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a161a:	4629      	mov	r1, r5
 80a161c:	4620      	mov	r0, r4
}
 80a161e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1622:	f7fe bf4d 	b.w	80a04c0 <HAL_GPIO_Write>
 80a1626:	bd38      	pop	{r3, r4, r5, pc}

080a1628 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1628:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a162a:	4d0b      	ldr	r5, [pc, #44]	; (80a1658 <_Z19__fetch_global_Wirev+0x30>)
 80a162c:	6829      	ldr	r1, [r5, #0]
 80a162e:	f011 0401 	ands.w	r4, r1, #1
 80a1632:	d10f      	bne.n	80a1654 <_Z19__fetch_global_Wirev+0x2c>
 80a1634:	4628      	mov	r0, r5
 80a1636:	f7fe fd34 	bl	80a00a2 <__cxa_guard_acquire>
 80a163a:	b158      	cbz	r0, 80a1654 <_Z19__fetch_global_Wirev+0x2c>
 80a163c:	4621      	mov	r1, r4
 80a163e:	4807      	ldr	r0, [pc, #28]	; (80a165c <_Z19__fetch_global_Wirev+0x34>)
 80a1640:	f7ff f934 	bl	80a08ac <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1644:	4628      	mov	r0, r5
 80a1646:	f7fe fd31 	bl	80a00ac <__cxa_guard_release>
 80a164a:	4a05      	ldr	r2, [pc, #20]	; (80a1660 <_Z19__fetch_global_Wirev+0x38>)
 80a164c:	4905      	ldr	r1, [pc, #20]	; (80a1664 <_Z19__fetch_global_Wirev+0x3c>)
 80a164e:	4803      	ldr	r0, [pc, #12]	; (80a165c <_Z19__fetch_global_Wirev+0x34>)
 80a1650:	f000 f844 	bl	80a16dc <__aeabi_atexit>
	return wire;
}
 80a1654:	4801      	ldr	r0, [pc, #4]	; (80a165c <_Z19__fetch_global_Wirev+0x34>)
 80a1656:	bd38      	pop	{r3, r4, r5, pc}
 80a1658:	2000063c 	.word	0x2000063c
 80a165c:	20000640 	.word	0x20000640
 80a1660:	20000088 	.word	0x20000088
 80a1664:	080a0855 	.word	0x080a0855

080a1668 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1668:	b513      	push	{r0, r1, r4, lr}
 80a166a:	4c08      	ldr	r4, [pc, #32]	; (80a168c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a166c:	2300      	movs	r3, #0
 80a166e:	461a      	mov	r2, r3
 80a1670:	4619      	mov	r1, r3
 80a1672:	9300      	str	r3, [sp, #0]
 80a1674:	4620      	mov	r0, r4
 80a1676:	f7ff f97f 	bl	80a0978 <_ZN9IPAddressC1Ehhhh>
 80a167a:	4620      	mov	r0, r4
 80a167c:	4a04      	ldr	r2, [pc, #16]	; (80a1690 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a167e:	4905      	ldr	r1, [pc, #20]	; (80a1694 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1680:	b002      	add	sp, #8
 80a1682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1686:	f000 b829 	b.w	80a16dc <__aeabi_atexit>
 80a168a:	bf00      	nop
 80a168c:	20000654 	.word	0x20000654
 80a1690:	20000088 	.word	0x20000088
 80a1694:	080a00b3 	.word	0x080a00b3

080a1698 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1698:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a169a:	4c0c      	ldr	r4, [pc, #48]	; (80a16cc <_GLOBAL__sub_I_SPI+0x34>)
 80a169c:	4e0c      	ldr	r6, [pc, #48]	; (80a16d0 <_GLOBAL__sub_I_SPI+0x38>)
 80a169e:	4d0d      	ldr	r5, [pc, #52]	; (80a16d4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a16a0:	2100      	movs	r1, #0
 80a16a2:	4620      	mov	r0, r4
 80a16a4:	f7ff fa92 	bl	80a0bcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16a8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16aa:	4c0b      	ldr	r4, [pc, #44]	; (80a16d8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a16ac:	4632      	mov	r2, r6
 80a16ae:	4629      	mov	r1, r5
 80a16b0:	f000 f814 	bl	80a16dc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16b4:	2101      	movs	r1, #1
 80a16b6:	4620      	mov	r0, r4
 80a16b8:	f7ff fa88 	bl	80a0bcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16bc:	4632      	mov	r2, r6
 80a16be:	4629      	mov	r1, r5
 80a16c0:	4620      	mov	r0, r4
 80a16c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a16c6:	f000 b809 	b.w	80a16dc <__aeabi_atexit>
 80a16ca:	bf00      	nop
 80a16cc:	2000066c 	.word	0x2000066c
 80a16d0:	20000088 	.word	0x20000088
 80a16d4:	080a0bbd 	.word	0x080a0bbd
 80a16d8:	2000067c 	.word	0x2000067c

080a16dc <__aeabi_atexit>:
 80a16dc:	460b      	mov	r3, r1
 80a16de:	4601      	mov	r1, r0
 80a16e0:	4618      	mov	r0, r3
 80a16e2:	f000 b94b 	b.w	80a197c <__cxa_atexit>

080a16e6 <_ZdlPvj>:
 80a16e6:	f7fe bcda 	b.w	80a009e <_ZdlPv>
	...

080a16ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a16ec:	4b24      	ldr	r3, [pc, #144]	; (80a1780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a16ee:	681a      	ldr	r2, [r3, #0]
 80a16f0:	07d0      	lsls	r0, r2, #31
 80a16f2:	bf5c      	itt	pl
 80a16f4:	2201      	movpl	r2, #1
 80a16f6:	601a      	strpl	r2, [r3, #0]
 80a16f8:	4b22      	ldr	r3, [pc, #136]	; (80a1784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a16fa:	681a      	ldr	r2, [r3, #0]
 80a16fc:	07d1      	lsls	r1, r2, #31
 80a16fe:	bf5c      	itt	pl
 80a1700:	2201      	movpl	r2, #1
 80a1702:	601a      	strpl	r2, [r3, #0]
 80a1704:	4b20      	ldr	r3, [pc, #128]	; (80a1788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1706:	681a      	ldr	r2, [r3, #0]
 80a1708:	07d2      	lsls	r2, r2, #31
 80a170a:	bf5c      	itt	pl
 80a170c:	2201      	movpl	r2, #1
 80a170e:	601a      	strpl	r2, [r3, #0]
 80a1710:	4b1e      	ldr	r3, [pc, #120]	; (80a178c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1712:	681a      	ldr	r2, [r3, #0]
 80a1714:	07d0      	lsls	r0, r2, #31
 80a1716:	bf5c      	itt	pl
 80a1718:	2201      	movpl	r2, #1
 80a171a:	601a      	strpl	r2, [r3, #0]
 80a171c:	4b1c      	ldr	r3, [pc, #112]	; (80a1790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a171e:	681a      	ldr	r2, [r3, #0]
 80a1720:	07d1      	lsls	r1, r2, #31
 80a1722:	bf5c      	itt	pl
 80a1724:	2201      	movpl	r2, #1
 80a1726:	601a      	strpl	r2, [r3, #0]
 80a1728:	4b1a      	ldr	r3, [pc, #104]	; (80a1794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a172a:	681a      	ldr	r2, [r3, #0]
 80a172c:	07d2      	lsls	r2, r2, #31
 80a172e:	bf5c      	itt	pl
 80a1730:	2201      	movpl	r2, #1
 80a1732:	601a      	strpl	r2, [r3, #0]
 80a1734:	4b18      	ldr	r3, [pc, #96]	; (80a1798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1736:	681a      	ldr	r2, [r3, #0]
 80a1738:	07d0      	lsls	r0, r2, #31
 80a173a:	bf5c      	itt	pl
 80a173c:	2201      	movpl	r2, #1
 80a173e:	601a      	strpl	r2, [r3, #0]
 80a1740:	4b16      	ldr	r3, [pc, #88]	; (80a179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1742:	681a      	ldr	r2, [r3, #0]
 80a1744:	07d1      	lsls	r1, r2, #31
 80a1746:	bf5c      	itt	pl
 80a1748:	2201      	movpl	r2, #1
 80a174a:	601a      	strpl	r2, [r3, #0]
 80a174c:	4b14      	ldr	r3, [pc, #80]	; (80a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a174e:	681a      	ldr	r2, [r3, #0]
 80a1750:	07d2      	lsls	r2, r2, #31
 80a1752:	bf5c      	itt	pl
 80a1754:	2201      	movpl	r2, #1
 80a1756:	601a      	strpl	r2, [r3, #0]
 80a1758:	4b12      	ldr	r3, [pc, #72]	; (80a17a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a175a:	681a      	ldr	r2, [r3, #0]
 80a175c:	07d0      	lsls	r0, r2, #31
 80a175e:	bf5c      	itt	pl
 80a1760:	2201      	movpl	r2, #1
 80a1762:	601a      	strpl	r2, [r3, #0]
 80a1764:	4b10      	ldr	r3, [pc, #64]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1766:	681a      	ldr	r2, [r3, #0]
 80a1768:	07d1      	lsls	r1, r2, #31
 80a176a:	bf5c      	itt	pl
 80a176c:	2201      	movpl	r2, #1
 80a176e:	601a      	strpl	r2, [r3, #0]
 80a1770:	4b0e      	ldr	r3, [pc, #56]	; (80a17ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1772:	681a      	ldr	r2, [r3, #0]
 80a1774:	07d2      	lsls	r2, r2, #31
 80a1776:	bf5c      	itt	pl
 80a1778:	2201      	movpl	r2, #1
 80a177a:	601a      	strpl	r2, [r3, #0]
 80a177c:	4770      	bx	lr
 80a177e:	bf00      	nop
 80a1780:	200006b8 	.word	0x200006b8
 80a1784:	200006b4 	.word	0x200006b4
 80a1788:	200006b0 	.word	0x200006b0
 80a178c:	200006ac 	.word	0x200006ac
 80a1790:	200006a8 	.word	0x200006a8
 80a1794:	200006a4 	.word	0x200006a4
 80a1798:	200006a0 	.word	0x200006a0
 80a179c:	2000069c 	.word	0x2000069c
 80a17a0:	20000698 	.word	0x20000698
 80a17a4:	20000694 	.word	0x20000694
 80a17a8:	20000690 	.word	0x20000690
 80a17ac:	2000068c 	.word	0x2000068c

080a17b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a17b0:	4b18      	ldr	r3, [pc, #96]	; (80a1814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a17b2:	681a      	ldr	r2, [r3, #0]
 80a17b4:	07d1      	lsls	r1, r2, #31
 80a17b6:	bf5c      	itt	pl
 80a17b8:	2201      	movpl	r2, #1
 80a17ba:	601a      	strpl	r2, [r3, #0]
 80a17bc:	4b16      	ldr	r3, [pc, #88]	; (80a1818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a17be:	681a      	ldr	r2, [r3, #0]
 80a17c0:	07d2      	lsls	r2, r2, #31
 80a17c2:	bf5c      	itt	pl
 80a17c4:	2201      	movpl	r2, #1
 80a17c6:	601a      	strpl	r2, [r3, #0]
 80a17c8:	4b14      	ldr	r3, [pc, #80]	; (80a181c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a17ca:	681a      	ldr	r2, [r3, #0]
 80a17cc:	07d0      	lsls	r0, r2, #31
 80a17ce:	bf5c      	itt	pl
 80a17d0:	2201      	movpl	r2, #1
 80a17d2:	601a      	strpl	r2, [r3, #0]
 80a17d4:	4b12      	ldr	r3, [pc, #72]	; (80a1820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a17d6:	681a      	ldr	r2, [r3, #0]
 80a17d8:	07d1      	lsls	r1, r2, #31
 80a17da:	bf5c      	itt	pl
 80a17dc:	2201      	movpl	r2, #1
 80a17de:	601a      	strpl	r2, [r3, #0]
 80a17e0:	4b10      	ldr	r3, [pc, #64]	; (80a1824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a17e2:	681a      	ldr	r2, [r3, #0]
 80a17e4:	07d2      	lsls	r2, r2, #31
 80a17e6:	bf5c      	itt	pl
 80a17e8:	2201      	movpl	r2, #1
 80a17ea:	601a      	strpl	r2, [r3, #0]
 80a17ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a17ee:	681a      	ldr	r2, [r3, #0]
 80a17f0:	07d0      	lsls	r0, r2, #31
 80a17f2:	bf5c      	itt	pl
 80a17f4:	2201      	movpl	r2, #1
 80a17f6:	601a      	strpl	r2, [r3, #0]
 80a17f8:	4b0c      	ldr	r3, [pc, #48]	; (80a182c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a17fa:	681a      	ldr	r2, [r3, #0]
 80a17fc:	07d1      	lsls	r1, r2, #31
 80a17fe:	bf5c      	itt	pl
 80a1800:	2201      	movpl	r2, #1
 80a1802:	601a      	strpl	r2, [r3, #0]
 80a1804:	4b0a      	ldr	r3, [pc, #40]	; (80a1830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1806:	681a      	ldr	r2, [r3, #0]
 80a1808:	07d2      	lsls	r2, r2, #31
 80a180a:	bf5c      	itt	pl
 80a180c:	2201      	movpl	r2, #1
 80a180e:	601a      	strpl	r2, [r3, #0]
 80a1810:	4770      	bx	lr
 80a1812:	bf00      	nop
 80a1814:	200006d8 	.word	0x200006d8
 80a1818:	200006d4 	.word	0x200006d4
 80a181c:	200006d0 	.word	0x200006d0
 80a1820:	200006cc 	.word	0x200006cc
 80a1824:	200006c8 	.word	0x200006c8
 80a1828:	200006c4 	.word	0x200006c4
 80a182c:	200006c0 	.word	0x200006c0
 80a1830:	200006bc 	.word	0x200006bc

080a1834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1834:	4b18      	ldr	r3, [pc, #96]	; (80a1898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d1      	lsls	r1, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4b16      	ldr	r3, [pc, #88]	; (80a189c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d2      	lsls	r2, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4b14      	ldr	r3, [pc, #80]	; (80a18a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	07d0      	lsls	r0, r2, #31
 80a1852:	bf5c      	itt	pl
 80a1854:	2201      	movpl	r2, #1
 80a1856:	601a      	strpl	r2, [r3, #0]
 80a1858:	4b12      	ldr	r3, [pc, #72]	; (80a18a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a185a:	681a      	ldr	r2, [r3, #0]
 80a185c:	07d1      	lsls	r1, r2, #31
 80a185e:	bf5c      	itt	pl
 80a1860:	2201      	movpl	r2, #1
 80a1862:	601a      	strpl	r2, [r3, #0]
 80a1864:	4b10      	ldr	r3, [pc, #64]	; (80a18a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d2      	lsls	r2, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b0e      	ldr	r3, [pc, #56]	; (80a18ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d0      	lsls	r0, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b0c      	ldr	r3, [pc, #48]	; (80a18b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d1      	lsls	r1, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b0a      	ldr	r3, [pc, #40]	; (80a18b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d2      	lsls	r2, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4770      	bx	lr
 80a1896:	bf00      	nop
 80a1898:	200006f8 	.word	0x200006f8
 80a189c:	200006f4 	.word	0x200006f4
 80a18a0:	200006f0 	.word	0x200006f0
 80a18a4:	200006ec 	.word	0x200006ec
 80a18a8:	200006e8 	.word	0x200006e8
 80a18ac:	200006e4 	.word	0x200006e4
 80a18b0:	200006e0 	.word	0x200006e0
 80a18b4:	200006dc 	.word	0x200006dc

080a18b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a18b8:	4b24      	ldr	r3, [pc, #144]	; (80a194c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d0      	lsls	r0, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4b22      	ldr	r3, [pc, #136]	; (80a1950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a18c6:	681a      	ldr	r2, [r3, #0]
 80a18c8:	07d1      	lsls	r1, r2, #31
 80a18ca:	bf5c      	itt	pl
 80a18cc:	2201      	movpl	r2, #1
 80a18ce:	601a      	strpl	r2, [r3, #0]
 80a18d0:	4b20      	ldr	r3, [pc, #128]	; (80a1954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a18d2:	681a      	ldr	r2, [r3, #0]
 80a18d4:	07d2      	lsls	r2, r2, #31
 80a18d6:	bf5c      	itt	pl
 80a18d8:	2201      	movpl	r2, #1
 80a18da:	601a      	strpl	r2, [r3, #0]
 80a18dc:	4b1e      	ldr	r3, [pc, #120]	; (80a1958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a18de:	681a      	ldr	r2, [r3, #0]
 80a18e0:	07d0      	lsls	r0, r2, #31
 80a18e2:	bf5c      	itt	pl
 80a18e4:	2201      	movpl	r2, #1
 80a18e6:	601a      	strpl	r2, [r3, #0]
 80a18e8:	4b1c      	ldr	r3, [pc, #112]	; (80a195c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a18ea:	681a      	ldr	r2, [r3, #0]
 80a18ec:	07d1      	lsls	r1, r2, #31
 80a18ee:	bf5c      	itt	pl
 80a18f0:	2201      	movpl	r2, #1
 80a18f2:	601a      	strpl	r2, [r3, #0]
 80a18f4:	4b1a      	ldr	r3, [pc, #104]	; (80a1960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a18f6:	681a      	ldr	r2, [r3, #0]
 80a18f8:	07d2      	lsls	r2, r2, #31
 80a18fa:	bf5c      	itt	pl
 80a18fc:	2201      	movpl	r2, #1
 80a18fe:	601a      	strpl	r2, [r3, #0]
 80a1900:	4b18      	ldr	r3, [pc, #96]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1902:	681a      	ldr	r2, [r3, #0]
 80a1904:	07d0      	lsls	r0, r2, #31
 80a1906:	bf5c      	itt	pl
 80a1908:	2201      	movpl	r2, #1
 80a190a:	601a      	strpl	r2, [r3, #0]
 80a190c:	4b16      	ldr	r3, [pc, #88]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a190e:	681a      	ldr	r2, [r3, #0]
 80a1910:	07d1      	lsls	r1, r2, #31
 80a1912:	bf5c      	itt	pl
 80a1914:	2201      	movpl	r2, #1
 80a1916:	601a      	strpl	r2, [r3, #0]
 80a1918:	4b14      	ldr	r3, [pc, #80]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a191a:	681a      	ldr	r2, [r3, #0]
 80a191c:	07d2      	lsls	r2, r2, #31
 80a191e:	bf5c      	itt	pl
 80a1920:	2201      	movpl	r2, #1
 80a1922:	601a      	strpl	r2, [r3, #0]
 80a1924:	4b12      	ldr	r3, [pc, #72]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1926:	681a      	ldr	r2, [r3, #0]
 80a1928:	07d0      	lsls	r0, r2, #31
 80a192a:	bf5c      	itt	pl
 80a192c:	2201      	movpl	r2, #1
 80a192e:	601a      	strpl	r2, [r3, #0]
 80a1930:	4b10      	ldr	r3, [pc, #64]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1932:	681a      	ldr	r2, [r3, #0]
 80a1934:	07d1      	lsls	r1, r2, #31
 80a1936:	bf5c      	itt	pl
 80a1938:	2201      	movpl	r2, #1
 80a193a:	601a      	strpl	r2, [r3, #0]
 80a193c:	4b0e      	ldr	r3, [pc, #56]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d2      	lsls	r2, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4770      	bx	lr
 80a194a:	bf00      	nop
 80a194c:	20000728 	.word	0x20000728
 80a1950:	20000724 	.word	0x20000724
 80a1954:	20000720 	.word	0x20000720
 80a1958:	2000071c 	.word	0x2000071c
 80a195c:	20000718 	.word	0x20000718
 80a1960:	20000714 	.word	0x20000714
 80a1964:	20000710 	.word	0x20000710
 80a1968:	2000070c 	.word	0x2000070c
 80a196c:	20000708 	.word	0x20000708
 80a1970:	20000704 	.word	0x20000704
 80a1974:	20000700 	.word	0x20000700
 80a1978:	200006fc 	.word	0x200006fc

080a197c <__cxa_atexit>:
 80a197c:	b510      	push	{r4, lr}
 80a197e:	4c05      	ldr	r4, [pc, #20]	; (80a1994 <__cxa_atexit+0x18>)
 80a1980:	4613      	mov	r3, r2
 80a1982:	b12c      	cbz	r4, 80a1990 <__cxa_atexit+0x14>
 80a1984:	460a      	mov	r2, r1
 80a1986:	4601      	mov	r1, r0
 80a1988:	2002      	movs	r0, #2
 80a198a:	f3af 8000 	nop.w
 80a198e:	bd10      	pop	{r4, pc}
 80a1990:	4620      	mov	r0, r4
 80a1992:	bd10      	pop	{r4, pc}
 80a1994:	00000000 	.word	0x00000000

080a1998 <memcpy>:
 80a1998:	b510      	push	{r4, lr}
 80a199a:	1e43      	subs	r3, r0, #1
 80a199c:	440a      	add	r2, r1
 80a199e:	4291      	cmp	r1, r2
 80a19a0:	d004      	beq.n	80a19ac <memcpy+0x14>
 80a19a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19aa:	e7f8      	b.n	80a199e <memcpy+0x6>
 80a19ac:	bd10      	pop	{r4, pc}

080a19ae <memset>:
 80a19ae:	4603      	mov	r3, r0
 80a19b0:	4402      	add	r2, r0
 80a19b2:	4293      	cmp	r3, r2
 80a19b4:	d002      	beq.n	80a19bc <memset+0xe>
 80a19b6:	f803 1b01 	strb.w	r1, [r3], #1
 80a19ba:	e7fa      	b.n	80a19b2 <memset+0x4>
 80a19bc:	4770      	bx	lr
	...

080a19c0 <srand>:
 80a19c0:	b538      	push	{r3, r4, r5, lr}
 80a19c2:	4b12      	ldr	r3, [pc, #72]	; (80a1a0c <srand+0x4c>)
 80a19c4:	4605      	mov	r5, r0
 80a19c6:	681c      	ldr	r4, [r3, #0]
 80a19c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a19ca:	b9d3      	cbnz	r3, 80a1a02 <srand+0x42>
 80a19cc:	2018      	movs	r0, #24
 80a19ce:	f7fe ff1d 	bl	80a080c <malloc>
 80a19d2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a19d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a19d8:	8003      	strh	r3, [r0, #0]
 80a19da:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a19de:	8043      	strh	r3, [r0, #2]
 80a19e0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a19e4:	8083      	strh	r3, [r0, #4]
 80a19e6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a19ea:	80c3      	strh	r3, [r0, #6]
 80a19ec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a19f0:	8103      	strh	r3, [r0, #8]
 80a19f2:	2305      	movs	r3, #5
 80a19f4:	8143      	strh	r3, [r0, #10]
 80a19f6:	230b      	movs	r3, #11
 80a19f8:	8183      	strh	r3, [r0, #12]
 80a19fa:	2201      	movs	r2, #1
 80a19fc:	2300      	movs	r3, #0
 80a19fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a04:	2200      	movs	r2, #0
 80a1a06:	611d      	str	r5, [r3, #16]
 80a1a08:	615a      	str	r2, [r3, #20]
 80a1a0a:	bd38      	pop	{r3, r4, r5, pc}
 80a1a0c:	20000084 	.word	0x20000084

080a1a10 <strlen>:
 80a1a10:	4603      	mov	r3, r0
 80a1a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a16:	2a00      	cmp	r2, #0
 80a1a18:	d1fb      	bne.n	80a1a12 <strlen+0x2>
 80a1a1a:	1a18      	subs	r0, r3, r0
 80a1a1c:	3801      	subs	r0, #1
 80a1a1e:	4770      	bx	lr

080a1a20 <dynalib_user>:
 80a1a20:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1a30:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a1a40:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a1a50:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a1a60:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a1a70:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a1a80:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a1a90:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a1aa0:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a1ab0:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a1ac0:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a1ad0:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a1ae0:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a1af0:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a1b00:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a1b10:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a1b20:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a1b30:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a1b40:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a1b50:	4853 5300 4554 2050 4952 4847 2054 4f53     SH.STEP RIGHT SO
 80a1b60:	4f4c 5300 4554 2050 454c 5446 5320 4c4f     LO.STEP LEFT SOL
 80a1b70:	004f 5453 5045 5220 4749 5448 4420 4f55     O.STEP RIGHT DUO
 80a1b80:	5300 4554 2050 454c 5446 4420 4f55 6600     .STEP LEFT DUO.f
 80a1b90:	756c 5878 3a20 0020 6c66 7875 2059 203a     luxX : .fluxY : 
 80a1ba0:	6600 756c 5a78 3a20 0020 0000               .fluxZ : ...

080a1bac <_ZTV7TwoWire>:
	...
 80a1bb4:	0855 080a 089f 080a 0877 080a 0857 080a     U.......w...W...
 80a1bc4:	087f 080a 0887 080a 088f 080a 0897 080a     ................

080a1bd4 <_ZTV9IPAddress>:
	...
 80a1bdc:	08d9 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a1bec:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1bfc:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1c0c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1c1c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1c2c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1c3c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1c4c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1c5c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1c6c:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1c7c:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1c8c:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1c9c:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1cac:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1cbc:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1ccc <_ZTVN5spark12NetworkClassE>:
	...
 80a1cd4:	09b9 080a 09c3 080a 09cd 080a 09d7 080a     ................
 80a1ce4:	09e1 080a 09ed 080a 09f9 080a 0a05 080a     ................
 80a1cf4:	0a0d 080a 0a17 080a 0a21 080a               ........!...

080a1d00 <_ZTV8SPIClass>:
	...
 80a1d08:	0bbd 080a 0bbf 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1d18:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1d28:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1d38:	0000 0000                                   ....

080a1d3c <_ZTV3UDP>:
	...
 80a1d44:	00b5 080a 00e3 080a 0cfb 080a 0e1b 080a     ................
 80a1d54:	0cf3 080a 0d11 080a 0d2f 080a 0d49 080a     ......../...I...
 80a1d64:	0d6b 080a 0db5 080a 0dd7 080a 0f6d 080a     k...........m...
 80a1d74:	0e81 080a 0cdd 080a 107d 080a 0ee9 080a     ........}.......
 80a1d84:	0fa5 080a 10ab 080a 0e45 080a 0ce9 080a     ........E.......
 80a1d94:	0f4d 080a 0cef 080a 0d4b 080a fff0 ffff     M.......K.......
 80a1da4:	0000 0000 0d63 080a                         ....c...

080a1dac <_ZTV11USARTSerial>:
	...
 80a1db4:	10e3 080a 1133 080a 1141 080a 0a9d 080a     ....3...A.......
 80a1dc4:	10f7 080a 1119 080a 1105 080a 112d 080a     ............-...
 80a1dd4:	10e5 080a 10e9 080a                         ........

080a1ddc <_ZTV9USBSerial>:
	...
 80a1de4:	11e9 080a 1239 080a 1247 080a 0a9d 080a     ....9...G.......
 80a1df4:	1225 080a 11eb 080a 1201 080a 1233 080a     %...........3...
 80a1e04:	1217 080a 11e5 080a                         ........

080a1e0c <_ZTVN5spark9WiFiClassE>:
	...
 80a1e14:	1437 080a 142d 080a 1423 080a 1395 080a     7...-...#.......
 80a1e24:	1417 080a 140b 080a 13ff 080a 13f7 080a     ................
 80a1e34:	13ed 080a 13e3 080a 139f 080a               ............

080a1e40 <__sf_fake_stdin>:
	...

080a1e60 <__sf_fake_stdout>:
	...

080a1e80 <__sf_fake_stderr>:
	...
 80a1ea0:	0043                                        C.

080a1ea2 <link_const_variable_data_end>:
	...

080a1ea4 <link_constructors_location>:
 80a1ea4:	080a0305 	.word	0x080a0305
 80a1ea8:	080a03a1 	.word	0x080a03a1
 80a1eac:	080a044b 	.word	0x080a044b
 80a1eb0:	080a09a9 	.word	0x080a09a9
 80a1eb4:	080a0a89 	.word	0x080a0a89
 80a1eb8:	080a0ba1 	.word	0x080a0ba1
 80a1ebc:	080a0cb1 	.word	0x080a0cb1
 80a1ec0:	080a0cc9 	.word	0x080a0cc9
 80a1ec4:	080a1441 	.word	0x080a1441
 80a1ec8:	080a1669 	.word	0x080a1669
 80a1ecc:	080a1699 	.word	0x080a1699
 80a1ed0:	080a16ed 	.word	0x080a16ed
 80a1ed4:	080a17b1 	.word	0x080a17b1
 80a1ed8:	080a1835 	.word	0x080a1835
 80a1edc:	080a18b9 	.word	0x080a18b9
