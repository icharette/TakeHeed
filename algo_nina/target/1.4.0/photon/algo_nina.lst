
/Users/ninjacat/Documents/Particle/TakeHeed/algo_nina/target/1.4.0/photon/algo_nina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003c84  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3ca0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a3ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b8  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3d20  080a3d20  00023d20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3d48  080a3d48  00023d48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000afe44  00000000  00000000  00023d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ff90  00000000  00000000  000d3b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000172e8  00000000  00000000  000e3b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002280  00000000  00000000  000fae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003658  00000000  00000000  000fd088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025b52  00000000  00000000  001006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024d21  00000000  00000000  00126232  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a9cd8  00000000  00000000  0014af53  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c1ac  00000000  00000000  001f4c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fbcf 	bl	80a37d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fbd4 	bl	80a37e6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3ca4 	.word	0x080a3ca4
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000734 	.word	0x20000734
 80a0058:	20000734 	.word	0x20000734

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 ff27 	bl	80a2eb0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3c64 	.word	0x080a3c64
 80a0084:	080a3ca0 	.word	0x080a3ca0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b894 	b.w	80a01b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f933 	bl	80a02f8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 becd 	b.w	80a2e34 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 bfef 	b.w	80a207c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bff5 	b.w	80a208c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f002 fb36 	bl	80a2730 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f002 fc6b 	bl	80a29a0 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a3b04 	.word	0x080a3b04

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f002 ffc2 	bl	80a3062 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f002 ffb8 	bl	80a3062 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <_Z8setupImuv>:
void printAccel();    
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void calibrateSensor();

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00f8:	4811      	ldr	r0, [pc, #68]	; (80a0140 <_Z8setupImuv+0x48>)
//Function definitions 
void printAccel();    
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void calibrateSensor();

void setupImu(){
 80a00fa:	b508      	push	{r3, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00fc:	2301      	movs	r3, #1
 80a00fe:	7003      	strb	r3, [r0, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
 80a0100:	231e      	movs	r3, #30
 80a0102:	7083      	strb	r3, [r0, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0104:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a0106:	4a0f      	ldr	r2, [pc, #60]	; (80a0144 <_Z8setupImuv+0x4c>)
void calibrateSensor();

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0108:	7043      	strb	r3, [r0, #1]
  lossThreshold = 5;
 80a010a:	4b0f      	ldr	r3, [pc, #60]	; (80a0148 <_Z8setupImuv+0x50>)
 80a010c:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a010e:	4b0f      	ldr	r3, [pc, #60]	; (80a014c <_Z8setupImuv+0x54>)
 80a0110:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a0114:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0116:	f000 fbd6 	bl	80a08c6 <_ZN7LSM9DS15beginEv>
 80a011a:	b978      	cbnz	r0, 80a013c <_Z8setupImuv+0x44>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a011c:	f002 fd96 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a0120:	490b      	ldr	r1, [pc, #44]	; (80a0150 <_Z8setupImuv+0x58>)
 80a0122:	f002 f948 	bl	80a23b6 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a0126:	f002 fd91 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a012a:	490a      	ldr	r1, [pc, #40]	; (80a0154 <_Z8setupImuv+0x5c>)
 80a012c:	f002 f943 	bl	80a23b6 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a0130:	f002 fd8c 	bl	80a2c4c <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0134:	4908      	ldr	r1, [pc, #32]	; (80a0158 <_Z8setupImuv+0x60>)
 80a0136:	f002 f93e 	bl	80a23b6 <_ZN5Print7printlnEPKc>
 80a013a:	e7fe      	b.n	80a013a <_Z8setupImuv+0x42>
 80a013c:	bd08      	pop	{r3, pc}
 80a013e:	bf00      	nop
 80a0140:	2000010c 	.word	0x2000010c
 80a0144:	40a00000 	.word	0x40a00000
 80a0148:	200000a0 	.word	0x200000a0
 80a014c:	20000108 	.word	0x20000108
 80a0150:	080a386c 	.word	0x080a386c
 80a0154:	080a3890 	.word	0x080a3890
 80a0158:	080a38a5 	.word	0x080a38a5

080a015c <_Z10setupMotorv>:
    while (1)
      ;
  }
}

void setupMotor(){
 80a015c:	b508      	push	{r3, lr}
  pinMode(6, OUTPUT); //Enable
 80a015e:	2101      	movs	r1, #1
 80a0160:	2006      	movs	r0, #6
 80a0162:	f002 fef5 	bl	80a2f50 <pinMode>
  pinMode(5, OUTPUT); //Step
 80a0166:	2101      	movs	r1, #1
 80a0168:	2005      	movs	r0, #5
 80a016a:	f002 fef1 	bl	80a2f50 <pinMode>
  pinMode(4, OUTPUT); //Direction
 80a016e:	2101      	movs	r1, #1
 80a0170:	2004      	movs	r0, #4
 80a0172:	f002 feed 	bl	80a2f50 <pinMode>

  digitalWrite(6,LOW);
}
 80a0176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setupMotor(){
  pinMode(6, OUTPUT); //Enable
  pinMode(5, OUTPUT); //Step
  pinMode(4, OUTPUT); //Direction

  digitalWrite(6,LOW);
 80a017a:	2100      	movs	r1, #0
 80a017c:	2006      	movs	r0, #6
 80a017e:	f002 bef8 	b.w	80a2f72 <digitalWrite>
	...

080a0184 <_Z13setupNeopixelv>:
}

void setupNeopixel(){
 80a0184:	b508      	push	{r3, lr}
    // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
 80a0186:	4808      	ldr	r0, [pc, #32]	; (80a01a8 <_Z13setupNeopixelv+0x24>)
 80a0188:	f000 fc05 	bl	80a0996 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a018c:	4806      	ldr	r0, [pc, #24]	; (80a01a8 <_Z13setupNeopixelv+0x24>)
 80a018e:	f000 fc39 	bl	80a0a04 <_ZN17Adafruit_NeoPixel4showEv>
  for(int i = 0; i < NUM_LED; i++){
    pixels[i] = 1;
 80a0192:	4a06      	ldr	r2, [pc, #24]	; (80a01ac <_Z13setupNeopixelv+0x28>)
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
  for(int i = 0; i < NUM_LED; i++){
 80a0194:	2300      	movs	r3, #0
    pixels[i] = 1;
 80a0196:	2101      	movs	r1, #1
 80a0198:	5499      	strb	r1, [r3, r2]
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
  for(int i = 0; i < NUM_LED; i++){
 80a019a:	3301      	adds	r3, #1
 80a019c:	2b14      	cmp	r3, #20
 80a019e:	d1fb      	bne.n	80a0198 <_Z13setupNeopixelv+0x14>
    pixels[i] = 1;
  }
  pixelPointer = 20;
 80a01a0:	4a03      	ldr	r2, [pc, #12]	; (80a01b0 <_Z13setupNeopixelv+0x2c>)
 80a01a2:	6013      	str	r3, [r2, #0]
 80a01a4:	bd08      	pop	{r3, pc}
 80a01a6:	bf00      	nop
 80a01a8:	200000f4 	.word	0x200000f4
 80a01ac:	20000194 	.word	0x20000194
 80a01b0:	20000190 	.word	0x20000190

080a01b4 <setup>:

// Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, NEO_GRB + NEO_KHZ800);


void setup() 
{
 80a01b4:	b570      	push	{r4, r5, r6, lr}
 80a01b6:	b096      	sub	sp, #88	; 0x58
  //waiting for serial to correctly initialze and allocate memory
    //serial object
    while(!Serial);
 80a01b8:	f002 fd48 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a01bc:	f002 fd2d 	bl	80a2c1a <_ZN9USBSerialcvbEv>
 80a01c0:	2800      	cmp	r0, #0
 80a01c2:	d0f9      	beq.n	80a01b8 <setup+0x4>
 80a01c4:	4c31      	ldr	r4, [pc, #196]	; (80a028c <setup+0xd8>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a01c6:	2300      	movs	r3, #0
 80a01c8:	461a      	mov	r2, r3
 80a01ca:	4619      	mov	r1, r3
 80a01cc:	6860      	ldr	r0, [r4, #4]
 80a01ce:	f001 fef5 	bl	80a1fbc <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a01d2:	2200      	movs	r2, #0
 80a01d4:	4611      	mov	r1, r2
 80a01d6:	6860      	ldr	r0, [r4, #4]
 80a01d8:	4d2c      	ldr	r5, [pc, #176]	; (80a028c <setup+0xd8>)
 80a01da:	f001 ff07 	bl	80a1fec <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a01de:	2800      	cmp	r0, #0
 80a01e0:	d0f7      	beq.n	80a01d2 <setup+0x1e>
    Serial.println("Setup");
 80a01e2:	f002 fd33 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a01e6:	492a      	ldr	r1, [pc, #168]	; (80a0290 <setup+0xdc>)
 80a01e8:	f002 f8e5 	bl	80a23b6 <_ZN5Print7printlnEPKc>
   udp.begin(localPort);
 80a01ec:	4b29      	ldr	r3, [pc, #164]	; (80a0294 <setup+0xe0>)
 80a01ee:	2200      	movs	r2, #0
 80a01f0:	8819      	ldrh	r1, [r3, #0]
 80a01f2:	4829      	ldr	r0, [pc, #164]	; (80a0298 <setup+0xe4>)
 80a01f4:	f002 fa77 	bl	80a26e6 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a01f8:	2300      	movs	r3, #0
 80a01fa:	4619      	mov	r1, r3
 80a01fc:	4a27      	ldr	r2, [pc, #156]	; (80a029c <setup+0xe8>)
 80a01fe:	6868      	ldr	r0, [r5, #4]
 80a0200:	f001 ff2c 	bl	80a205c <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a0204:	f002 fd22 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a0208:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a020a:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a020c:	2240      	movs	r2, #64	; 0x40
 80a020e:	2100      	movs	r1, #0
 80a0210:	a806      	add	r0, sp, #24
 80a0212:	f003 fae8 	bl	80a37e6 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0216:	2340      	movs	r3, #64	; 0x40
 80a0218:	aa06      	add	r2, sp, #24
 80a021a:	4621      	mov	r1, r4
 80a021c:	9400      	str	r4, [sp, #0]
 80a021e:	6868      	ldr	r0, [r5, #4]
 80a0220:	f001 ff24 	bl	80a206c <network_get_hostname>
        return String(buf);
 80a0224:	a906      	add	r1, sp, #24
 80a0226:	a802      	add	r0, sp, #8
 80a0228:	f002 f9ec 	bl	80a2604 <_ZN6StringC1EPK19__FlashStringHelper>
 80a022c:	9902      	ldr	r1, [sp, #8]
 80a022e:	4630      	mov	r0, r6
 80a0230:	f002 f8c1 	bl	80a23b6 <_ZN5Print7printlnEPKc>
 80a0234:	a802      	add	r0, sp, #8
 80a0236:	f002 f99e 	bl	80a2576 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a023a:	f002 fd07 	bl	80a2c4c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a023e:	4622      	mov	r2, r4
 80a0240:	4606      	mov	r6, r0
 80a0242:	4621      	mov	r1, r4
 80a0244:	6868      	ldr	r0, [r5, #4]
 80a0246:	f001 feb1 	bl	80a1fac <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a024a:	1c81      	adds	r1, r0, #2
 80a024c:	a806      	add	r0, sp, #24
 80a024e:	f001 ffbd 	bl	80a21cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0252:	a906      	add	r1, sp, #24
 80a0254:	4630      	mov	r0, r6
 80a0256:	f002 f8b8 	bl	80a23ca <_ZN5Print7printlnERK9Printable>
  Serial.begin(115200);
 80a025a:	f002 fcf7 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a025e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0262:	f002 fcd3 	bl	80a2c0c <_ZN9USBSerial5beginEl>
  setupImu();
 80a0266:	f7ff ff47 	bl	80a00f8 <_Z8setupImuv>
  // calibrateSensor();
  setupMotor();
 80a026a:	f7ff ff77 	bl	80a015c <_Z10setupMotorv>
  setupNeopixel();
 80a026e:	f7ff ff89 	bl	80a0184 <_Z13setupNeopixelv>
  state = 0;
 80a0272:	4b0b      	ldr	r3, [pc, #44]	; (80a02a0 <setup+0xec>)
  gainThreshold = 0.5;
 80a0274:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.begin(115200);
  setupImu();
  // calibrateSensor();
  setupMotor();
  setupNeopixel();
  state = 0;
 80a0278:	601c      	str	r4, [r3, #0]
  gainThreshold = 0.5;
 80a027a:	4b0a      	ldr	r3, [pc, #40]	; (80a02a4 <setup+0xf0>)
 80a027c:	601a      	str	r2, [r3, #0]
  lossThreshold = 2;
 80a027e:	4b0a      	ldr	r3, [pc, #40]	; (80a02a8 <setup+0xf4>)
 80a0280:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a0284:	601a      	str	r2, [r3, #0]
}
 80a0286:	b016      	add	sp, #88	; 0x58
 80a0288:	bd70      	pop	{r4, r5, r6, pc}
 80a028a:	bf00      	nop
 80a028c:	20000630 	.word	0x20000630
 80a0290:	080a392d 	.word	0x080a392d
 80a0294:	20000000 	.word	0x20000000
 80a0298:	200000a8 	.word	0x200000a8
 80a029c:	080a3933 	.word	0x080a3933
 80a02a0:	200000a4 	.word	0x200000a4
 80a02a4:	20000108 	.word	0x20000108
 80a02a8:	200000a0 	.word	0x200000a0

080a02ac <_Z9setPixelsm>:
//   Serial.println("bleach");
//   setPixels(strip.Color(255, 0, 0));
// }

// // Fill the dots one after the other with a color
void setPixels(uint32_t c) {
 80a02ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02ae:	4606      	mov	r6, r0
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    if (pixels[i]) strip.setPixelColor(i, c);
 80a02b0:	4f0f      	ldr	r7, [pc, #60]	; (80a02f0 <_Z9setPixelsm+0x44>)
//   Serial.println("bleach");
//   setPixels(strip.Color(255, 0, 0));
// }

// // Fill the dots one after the other with a color
void setPixels(uint32_t c) {
 80a02b2:	2500      	movs	r5, #0
  for(uint16_t i=0; i<strip.numPixels(); i++) {
 80a02b4:	480f      	ldr	r0, [pc, #60]	; (80a02f4 <_Z9setPixelsm+0x48>)
 80a02b6:	f001 fcaf 	bl	80a1c18 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a02ba:	b2ac      	uxth	r4, r5
 80a02bc:	4284      	cmp	r4, r0
 80a02be:	d216      	bcs.n	80a02ee <_Z9setPixelsm+0x42>
    if (pixels[i]) strip.setPixelColor(i, c);
 80a02c0:	5d3b      	ldrb	r3, [r7, r4]
 80a02c2:	b12b      	cbz	r3, 80a02d0 <_Z9setPixelsm+0x24>
 80a02c4:	4632      	mov	r2, r6
 80a02c6:	4621      	mov	r1, r4
 80a02c8:	480a      	ldr	r0, [pc, #40]	; (80a02f4 <_Z9setPixelsm+0x48>)
 80a02ca:	f001 fc55 	bl	80a1b78 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a02ce:	e009      	b.n	80a02e4 <_Z9setPixelsm+0x38>
    else strip.setPixelColor(i, strip.Color(255, 255, 255));
 80a02d0:	22ff      	movs	r2, #255	; 0xff
 80a02d2:	4611      	mov	r1, r2
 80a02d4:	4610      	mov	r0, r2
 80a02d6:	f001 fc9a 	bl	80a1c0e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02da:	4621      	mov	r1, r4
 80a02dc:	4602      	mov	r2, r0
 80a02de:	4805      	ldr	r0, [pc, #20]	; (80a02f4 <_Z9setPixelsm+0x48>)
 80a02e0:	f001 fc4a 	bl	80a1b78 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
 80a02e4:	4803      	ldr	r0, [pc, #12]	; (80a02f4 <_Z9setPixelsm+0x48>)
 80a02e6:	f000 fb8d 	bl	80a0a04 <_ZN17Adafruit_NeoPixel4showEv>
 80a02ea:	3501      	adds	r5, #1
//   setPixels(strip.Color(255, 0, 0));
// }

// // Fill the dots one after the other with a color
void setPixels(uint32_t c) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
 80a02ec:	e7e2      	b.n	80a02b4 <_Z9setPixelsm+0x8>
 80a02ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a02f0:	20000194 	.word	0x20000194
 80a02f4:	200000f4 	.word	0x200000f4

080a02f8 <loop>:
// void setup() {
//   strip.begin();
// }
 
void loop()
{
 80a02f8:	b508      	push	{r3, lr}
setPixels(strip.Color(0,255,0));
 80a02fa:	2200      	movs	r2, #0
 80a02fc:	21ff      	movs	r1, #255	; 0xff
 80a02fe:	4610      	mov	r0, r2
 80a0300:	f001 fc85 	bl	80a1c0e <_ZN17Adafruit_NeoPixel5ColorEhhh>

  }
 80a0304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//   strip.begin();
// }
 
void loop()
{
setPixels(strip.Color(0,255,0));
 80a0308:	f7ff bfd0 	b.w	80a02ac <_Z9setPixelsm>

080a030c <_GLOBAL__sub_I_imu>:
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    if (pixels[i]) strip.setPixelColor(i, c);
    else strip.setPixelColor(i, strip.Color(255, 255, 255));
    strip.show();
  }
}
 80a030c:	b538      	push	{r3, r4, r5, lr}
bool pixels[NUM_LED];
int pixelPointer;

#define PIN D5
#define N_LEDS 20
 Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_LEDS, PIN, WS2812B);
 80a030e:	4d1a      	ldr	r5, [pc, #104]	; (80a0378 <_GLOBAL__sub_I_imu+0x6c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0310:	f001 fcae 	bl	80a1c70 <HAL_Pin_Map>
 80a0314:	4c19      	ldr	r4, [pc, #100]	; (80a037c <_GLOBAL__sub_I_imu+0x70>)
#include "SparkFunLSM9DS1.h"
#ifdef __AVR__
#include <avr/power.h>
#endif
#define M_PI 3.14159265358979323846
LSM9DS1 imu;
 80a0316:	481a      	ldr	r0, [pc, #104]	; (80a0380 <_GLOBAL__sub_I_imu+0x74>)
 80a0318:	f000 f88c 	bl	80a0434 <_ZN7LSM9DS1C1Ev>
bool pixels[NUM_LED];
int pixelPointer;

#define PIN D5
#define N_LEDS 20
 Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_LEDS, PIN, WS2812B);
 80a031c:	2302      	movs	r3, #2
 80a031e:	2205      	movs	r2, #5
 80a0320:	2114      	movs	r1, #20
 80a0322:	4628      	mov	r0, r5
 80a0324:	f000 fb5c 	bl	80a09e0 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0328:	4622      	mov	r2, r4
 80a032a:	4916      	ldr	r1, [pc, #88]	; (80a0384 <_GLOBAL__sub_I_imu+0x78>)
 80a032c:	4628      	mov	r0, r5
 80a032e:	f002 fe93 	bl	80a3058 <__aeabi_atexit>
    pixels[i] = 1;
  }
  pixelPointer = 20;
}

SYSTEM_THREAD(ENABLED);
 80a0332:	2100      	movs	r1, #0
 80a0334:	2001      	movs	r0, #1
 80a0336:	f001 fe15 	bl	80a1f64 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a033a:	4b13      	ldr	r3, [pc, #76]	; (80a0388 <_GLOBAL__sub_I_imu+0x7c>)
 80a033c:	2200      	movs	r2, #0
 80a033e:	701a      	strb	r2, [r3, #0]
 80a0340:	805a      	strh	r2, [r3, #2]
 80a0342:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0346:	4d11      	ldr	r5, [pc, #68]	; (80a038c <_GLOBAL__sub_I_imu+0x80>)
 80a0348:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a034a:	2002      	movs	r0, #2
 80a034c:	f001 fe02 	bl	80a1f54 <set_system_mode>
 80a0350:	4628      	mov	r0, r5
 80a0352:	f001 ff2d 	bl	80a21b0 <_ZN9IPAddressC1Ev>
 80a0356:	4628      	mov	r0, r5
int port;
UDP udp;
 80a0358:	4d0d      	ldr	r5, [pc, #52]	; (80a0390 <_GLOBAL__sub_I_imu+0x84>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a035a:	4622      	mov	r2, r4
 80a035c:	490d      	ldr	r1, [pc, #52]	; (80a0394 <_GLOBAL__sub_I_imu+0x88>)
 80a035e:	f002 fe7b 	bl	80a3058 <__aeabi_atexit>
int port;
UDP udp;
 80a0362:	4628      	mov	r0, r5
 80a0364:	f002 fafe 	bl	80a2964 <_ZN3UDPC1Ev>
 80a0368:	4622      	mov	r2, r4
 80a036a:	4628      	mov	r0, r5
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    if (pixels[i]) strip.setPixelColor(i, c);
    else strip.setPixelColor(i, strip.Color(255, 255, 255));
    strip.show();
  }
}
 80a036c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}


unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0370:	4909      	ldr	r1, [pc, #36]	; (80a0398 <_GLOBAL__sub_I_imu+0x8c>)
 80a0372:	f002 be71 	b.w	80a3058 <__aeabi_atexit>
 80a0376:	bf00      	nop
 80a0378:	200000f4 	.word	0x200000f4
 80a037c:	2000007c 	.word	0x2000007c
 80a0380:	2000010c 	.word	0x2000010c
 80a0384:	080a0943 	.word	0x080a0943
 80a0388:	20000098 	.word	0x20000098
 80a038c:	20000080 	.word	0x20000080
 80a0390:	200000a8 	.word	0x200000a8
 80a0394:	080a00b3 	.word	0x080a00b3
 80a0398:	080a00b5 	.word	0x080a00b5

080a039c <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a039c:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a039e:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a03a0:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a03a2:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a03a4:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a03a6:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a03a8:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a03aa:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a03ac:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a03ae:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a03b0:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a03b2:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a03b4:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a03b6:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a03b8:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a03bc:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a03be:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a03c0:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a03c2:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a03c4:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a03c6:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a03c8:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a03ca:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a03cc:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a03ce:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a03d0:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a03d2:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a03d4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a03d8:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a03da:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a03dc:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a03de:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a03e0:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a03e2:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a03e4:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a03e6:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a03e8:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a03ea:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a03ec:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a03ee:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a03f2:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a03f4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a03f8:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a03fc:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a03fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0402:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0406:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a040a:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a040c:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a040e:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0410:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0412:	6565      	str	r5, [r4, #84]	; 0x54
 80a0414:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0418:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a041c:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0420:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0424:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0428:	d1f0      	bne.n	80a040c <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a042a:	f04f 0300 	mov.w	r3, #0
 80a042e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0432:	bd30      	pop	{r4, r5, pc}

080a0434 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0434:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0436:	231e      	movs	r3, #30
 80a0438:	226b      	movs	r2, #107	; 0x6b
 80a043a:	2101      	movs	r1, #1
 80a043c:	f7ff ffae 	bl	80a039c <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0440:	bd10      	pop	{r4, pc}

080a0442 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a0442:	b510      	push	{r4, lr}
 80a0444:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0446:	88c0      	ldrh	r0, [r0, #6]
 80a0448:	f003 f80c 	bl	80a3464 <__aeabi_ui2f>
 80a044c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0450:	f003 f860 	bl	80a3514 <__aeabi_fmul>
 80a0454:	6760      	str	r0, [r4, #116]	; 0x74
 80a0456:	bd10      	pop	{r4, pc}

080a0458 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0458:	b510      	push	{r4, lr}
 80a045a:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a045c:	7dc0      	ldrb	r0, [r0, #23]
 80a045e:	f003 f801 	bl	80a3464 <__aeabi_ui2f>
 80a0462:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0466:	f003 f855 	bl	80a3514 <__aeabi_fmul>
 80a046a:	67a0      	str	r0, [r4, #120]	; 0x78
 80a046c:	bd10      	pop	{r4, pc}
	...

080a0470 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0470:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0474:	3b04      	subs	r3, #4
 80a0476:	2b0c      	cmp	r3, #12
 80a0478:	d814      	bhi.n	80a04a4 <_ZN7LSM9DS18calcmResEv+0x34>
 80a047a:	e8df f003 	tbb	[pc, r3]
 80a047e:	1307      	.short	0x1307
 80a0480:	130a1313 	.word	0x130a1313
 80a0484:	130d1313 	.word	0x130d1313
 80a0488:	1313      	.short	0x1313
 80a048a:	10          	.byte	0x10
 80a048b:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a048c:	4b06      	ldr	r3, [pc, #24]	; (80a04a8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a048e:	681b      	ldr	r3, [r3, #0]
 80a0490:	e007      	b.n	80a04a2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a0492:	4b05      	ldr	r3, [pc, #20]	; (80a04a8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0494:	685b      	ldr	r3, [r3, #4]
 80a0496:	e004      	b.n	80a04a2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0498:	4b03      	ldr	r3, [pc, #12]	; (80a04a8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a049a:	689b      	ldr	r3, [r3, #8]
 80a049c:	e001      	b.n	80a04a2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a04a0:	68db      	ldr	r3, [r3, #12]
 80a04a2:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a04a4:	4770      	bx	lr
 80a04a6:	bf00      	nop
 80a04a8:	20000004 	.word	0x20000004

080a04ac <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a04ac:	88c3      	ldrh	r3, [r0, #6]
 80a04ae:	2bf5      	cmp	r3, #245	; 0xf5
 80a04b0:	d007      	beq.n	80a04c2 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a04b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a04b6:	d004      	beq.n	80a04c2 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a04b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a04bc:	bf1c      	itt	ne
 80a04be:	23f5      	movne	r3, #245	; 0xf5
 80a04c0:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a04c2:	7dc2      	ldrb	r2, [r0, #23]
 80a04c4:	2a10      	cmp	r2, #16
 80a04c6:	d803      	bhi.n	80a04d0 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a04c8:	4b08      	ldr	r3, [pc, #32]	; (80a04ec <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a04ca:	40d3      	lsrs	r3, r2
 80a04cc:	07da      	lsls	r2, r3, #31
 80a04ce:	d401      	bmi.n	80a04d4 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a04d0:	2302      	movs	r3, #2
 80a04d2:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a04d4:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a04d8:	2a10      	cmp	r2, #16
 80a04da:	d803      	bhi.n	80a04e4 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a04dc:	4b04      	ldr	r3, [pc, #16]	; (80a04f0 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a04de:	40d3      	lsrs	r3, r2
 80a04e0:	07db      	lsls	r3, r3, #31
 80a04e2:	d402      	bmi.n	80a04ea <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a04e4:	2304      	movs	r3, #4
 80a04e6:	f880 3020 	strb.w	r3, [r0, #32]
 80a04ea:	4770      	bx	lr
 80a04ec:	00010114 	.word	0x00010114
 80a04f0:	00011110 	.word	0x00011110

080a04f4 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a04f4:	b510      	push	{r4, lr}
 80a04f6:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a04f8:	2101      	movs	r1, #1
 80a04fa:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a04fe:	f002 fd27 	bl	80a2f50 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a0502:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0506:	2101      	movs	r1, #1
 80a0508:	f002 fd33 	bl	80a2f72 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a050c:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a0510:	2101      	movs	r1, #1
 80a0512:	f002 fd1d 	bl	80a2f50 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0516:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a051a:	4c0a      	ldr	r4, [pc, #40]	; (80a0544 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a051c:	2101      	movs	r1, #1
 80a051e:	f002 fd28 	bl	80a2f72 <digitalWrite>
	
	SPI.begin();
 80a0522:	4620      	mov	r0, r4
 80a0524:	f001 ffb8 	bl	80a2498 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0528:	4620      	mov	r0, r4
 80a052a:	2108      	movs	r1, #8
 80a052c:	f002 f806 	bl	80a253c <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a0530:	4620      	mov	r0, r4
 80a0532:	2101      	movs	r1, #1
 80a0534:	f001 ffb5 	bl	80a24a2 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0538:	4620      	mov	r0, r4
}
 80a053a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a053e:	2100      	movs	r1, #0
 80a0540:	f001 bfb2 	b.w	80a24a8 <_ZN8SPIClass11setDataModeEh>
 80a0544:	20000674 	.word	0x20000674

080a0548 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a054a:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a054c:	4617      	mov	r7, r2
 80a054e:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0550:	4d09      	ldr	r5, [pc, #36]	; (80a0578 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a0552:	4620      	mov	r0, r4
 80a0554:	2100      	movs	r1, #0
 80a0556:	f002 fd0c 	bl	80a2f72 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a055a:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a055e:	4628      	mov	r0, r5
 80a0560:	f002 f800 	bl	80a2564 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0564:	4631      	mov	r1, r6
 80a0566:	4628      	mov	r0, r5
 80a0568:	f001 fffc 	bl	80a2564 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a056c:	4620      	mov	r0, r4
}
 80a056e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0572:	2101      	movs	r1, #1
 80a0574:	f002 bcfd 	b.w	80a2f72 <digitalWrite>
 80a0578:	20000674 	.word	0x20000674

080a057c <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a057e:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0580:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0584:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0588:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a058a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a058e:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0592:	d103      	bne.n	80a059c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0594:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0596:	bf88      	it	hi
 80a0598:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a059c:	b28c      	uxth	r4, r1
 80a059e:	4620      	mov	r0, r4
 80a05a0:	2100      	movs	r1, #0
 80a05a2:	f002 fce6 	bl	80a2f72 <digitalWrite>
	SPI.transfer(rAddress);
 80a05a6:	4629      	mov	r1, r5
 80a05a8:	4809      	ldr	r0, [pc, #36]	; (80a05d0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a05aa:	f001 ffdb 	bl	80a2564 <_ZN8SPIClass8transferEh>
 80a05ae:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a05b0:	1bab      	subs	r3, r5, r6
 80a05b2:	429f      	cmp	r7, r3
 80a05b4:	dd06      	ble.n	80a05c4 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a05b6:	2100      	movs	r1, #0
 80a05b8:	4805      	ldr	r0, [pc, #20]	; (80a05d0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a05ba:	f001 ffd3 	bl	80a2564 <_ZN8SPIClass8transferEh>
 80a05be:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a05c2:	e7f5      	b.n	80a05b0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a05c4:	4620      	mov	r0, r4
 80a05c6:	2101      	movs	r1, #1
 80a05c8:	f002 fcd3 	bl	80a2f72 <digitalWrite>
	
	return 1;
}
 80a05cc:	2001      	movs	r0, #1
 80a05ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a05d0:	20000674 	.word	0x20000674

080a05d4 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a05d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a05d6:	2301      	movs	r3, #1
 80a05d8:	9300      	str	r3, [sp, #0]
 80a05da:	f10d 030f 	add.w	r3, sp, #15
 80a05de:	f7ff ffcd 	bl	80a057c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a05e2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a05e6:	b005      	add	sp, #20
 80a05e8:	f85d fb04 	ldr.w	pc, [sp], #4

080a05ec <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a05ec:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a05ee:	f002 fcd9 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
}
 80a05f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a05f6:	f001 bda1 	b.w	80a213c <_ZN7TwoWire5beginEv>

080a05fa <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a05fa:	b570      	push	{r4, r5, r6, lr}
 80a05fc:	460e      	mov	r6, r1
 80a05fe:	4615      	mov	r5, r2
 80a0600:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0602:	f002 fccf 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a0606:	4631      	mov	r1, r6
 80a0608:	f001 fdaa 	bl	80a2160 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a060c:	f002 fcca 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a0610:	6803      	ldr	r3, [r0, #0]
 80a0612:	4629      	mov	r1, r5
 80a0614:	689b      	ldr	r3, [r3, #8]
 80a0616:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0618:	f002 fcc4 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a061c:	6803      	ldr	r3, [r0, #0]
 80a061e:	4621      	mov	r1, r4
 80a0620:	689a      	ldr	r2, [r3, #8]
 80a0622:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0624:	f002 fcbe 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
}
 80a0628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a062c:	f001 bda0 	b.w	80a2170 <_ZN7TwoWire15endTransmissionEv>

080a0630 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0630:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0632:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0634:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0636:	2a01      	cmp	r2, #1
 80a0638:	d105      	bne.n	80a0646 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a063a:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a063c:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a063e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0642:	f7ff bfda 	b.w	80a05fa <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0646:	b92a      	cbnz	r2, 80a0654 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0648:	460a      	mov	r2, r1
}
 80a064a:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a064c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0650:	f7ff bf7a 	b.w	80a0548 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0654:	bc10      	pop	{r4}
 80a0656:	4770      	bx	lr

080a0658 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0658:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a065a:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a065c:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a065e:	b113      	cbz	r3, 80a0666 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0660:	7a03      	ldrb	r3, [r0, #8]
 80a0662:	015b      	lsls	r3, r3, #5
 80a0664:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0666:	88e2      	ldrh	r2, [r4, #6]
 80a0668:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a066c:	d005      	beq.n	80a067a <_ZN7LSM9DS18initGyroEv+0x22>
 80a066e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0672:	d104      	bne.n	80a067e <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0674:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0678:	e001      	b.n	80a067e <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a067a:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a067e:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0680:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0682:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0686:	431a      	orrs	r2, r3
 80a0688:	4620      	mov	r0, r4
 80a068a:	f7ff ffd1 	bl	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a068e:	2200      	movs	r2, #0
 80a0690:	2111      	movs	r1, #17
 80a0692:	4620      	mov	r0, r4
 80a0694:	f7ff ffcc 	bl	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0698:	7aa3      	ldrb	r3, [r4, #10]
 80a069a:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a069c:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a069e:	bf14      	ite	ne
 80a06a0:	2280      	movne	r2, #128	; 0x80
 80a06a2:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a06a4:	b12b      	cbz	r3, 80a06b2 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a06a6:	7b23      	ldrb	r3, [r4, #12]
 80a06a8:	f003 030f 	and.w	r3, r3, #15
 80a06ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a06b0:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a06b2:	2112      	movs	r1, #18
 80a06b4:	4620      	mov	r0, r4
 80a06b6:	f7ff ffbb 	bl	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a06ba:	7ce3      	ldrb	r3, [r4, #19]
 80a06bc:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a06be:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a06c0:	bf0c      	ite	eq
 80a06c2:	2200      	moveq	r2, #0
 80a06c4:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a06c6:	b113      	cbz	r3, 80a06ce <_ZN7LSM9DS18initGyroEv+0x76>
 80a06c8:	f042 0210 	orr.w	r2, r2, #16
 80a06cc:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a06ce:	7c63      	ldrb	r3, [r4, #17]
 80a06d0:	b10b      	cbz	r3, 80a06d6 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a06d2:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a06d6:	7d23      	ldrb	r3, [r4, #20]
 80a06d8:	b10b      	cbz	r3, 80a06de <_ZN7LSM9DS18initGyroEv+0x86>
 80a06da:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a06de:	211e      	movs	r1, #30
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	f7ff ffa5 	bl	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a06e6:	7b63      	ldrb	r3, [r4, #13]
 80a06e8:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a06ea:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a06ec:	bf0c      	ite	eq
 80a06ee:	2200      	moveq	r2, #0
 80a06f0:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a06f2:	b113      	cbz	r3, 80a06fa <_ZN7LSM9DS18initGyroEv+0xa2>
 80a06f4:	f042 0210 	orr.w	r2, r2, #16
 80a06f8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a06fa:	7be3      	ldrb	r3, [r4, #15]
 80a06fc:	b10b      	cbz	r3, 80a0702 <_ZN7LSM9DS18initGyroEv+0xaa>
 80a06fe:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0702:	4620      	mov	r0, r4
}
 80a0704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0708:	2113      	movs	r1, #19
 80a070a:	f7ff bf91 	b.w	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>

080a070e <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a070e:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0710:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0712:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0714:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0716:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0718:	bf0c      	ite	eq
 80a071a:	2200      	moveq	r2, #0
 80a071c:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a071e:	b113      	cbz	r3, 80a0726 <_ZN7LSM9DS19initAccelEv+0x18>
 80a0720:	f042 0210 	orr.w	r2, r2, #16
 80a0724:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0726:	7e63      	ldrb	r3, [r4, #25]
 80a0728:	b10b      	cbz	r3, 80a072e <_ZN7LSM9DS19initAccelEv+0x20>
 80a072a:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a072e:	211f      	movs	r1, #31
 80a0730:	4620      	mov	r0, r4
 80a0732:	f7ff ff7d 	bl	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0736:	7da2      	ldrb	r2, [r4, #22]
 80a0738:	b112      	cbz	r2, 80a0740 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a073a:	7e22      	ldrb	r2, [r4, #24]
 80a073c:	0152      	lsls	r2, r2, #5
 80a073e:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0740:	7de3      	ldrb	r3, [r4, #23]
 80a0742:	2b08      	cmp	r3, #8
 80a0744:	d006      	beq.n	80a0754 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0746:	2b10      	cmp	r3, #16
 80a0748:	d007      	beq.n	80a075a <_ZN7LSM9DS19initAccelEv+0x4c>
 80a074a:	2b04      	cmp	r3, #4
 80a074c:	d107      	bne.n	80a075e <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a074e:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0752:	e004      	b.n	80a075e <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0754:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0758:	e001      	b.n	80a075e <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a075a:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a075e:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0762:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0764:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0766:	bfa2      	ittt	ge
 80a0768:	f003 0303 	andge.w	r3, r3, #3
 80a076c:	431a      	orrge	r2, r3
 80a076e:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0772:	4620      	mov	r0, r4
 80a0774:	f7ff ff5c 	bl	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0778:	7f62      	ldrb	r2, [r4, #29]
 80a077a:	b12a      	cbz	r2, 80a0788 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a077c:	7fa2      	ldrb	r2, [r4, #30]
 80a077e:	0152      	lsls	r2, r2, #5
 80a0780:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0788:	4620      	mov	r0, r4
}
 80a078a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a078e:	2121      	movs	r1, #33	; 0x21
 80a0790:	f7ff bf4e 	b.w	80a0630 <_ZN7LSM9DS111xgWriteByteEhh>

080a0794 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0794:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0796:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0798:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a079a:	2a01      	cmp	r2, #1
 80a079c:	d105      	bne.n	80a07aa <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a079e:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a07a0:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a07a2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a07a6:	f7ff bf28 	b.w	80a05fa <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a07aa:	b92a      	cbnz	r2, 80a07b8 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a07ac:	460a      	mov	r2, r1
}
 80a07ae:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a07b0:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a07b4:	f7ff bec8 	b.w	80a0548 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a07b8:	bc10      	pop	{r4}
 80a07ba:	4770      	bx	lr

080a07bc <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a07bc:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a07be:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a07c2:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a07c4:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a07c6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a07ca:	bf08      	it	eq
 80a07cc:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a07ce:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a07d2:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a07d6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a07da:	bf18      	it	ne
 80a07dc:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a07de:	009b      	lsls	r3, r3, #2
 80a07e0:	f003 031c 	and.w	r3, r3, #28
 80a07e4:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a07e6:	431a      	orrs	r2, r3
 80a07e8:	2120      	movs	r1, #32
 80a07ea:	f7ff ffd3 	bl	80a0794 <_ZN7LSM9DS110mWriteByteEhh>
 80a07ee:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	3b08      	subs	r3, #8
 80a07f6:	b2db      	uxtb	r3, r3
 80a07f8:	2b08      	cmp	r3, #8
 80a07fa:	bf96      	itet	ls
 80a07fc:	4a12      	ldrls	r2, [pc, #72]	; (80a0848 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a07fe:	2200      	movhi	r2, #0
 80a0800:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0802:	2121      	movs	r1, #33	; 0x21
 80a0804:	f7ff ffc6 	bl	80a0794 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0808:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a080c:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a080e:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0810:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0814:	bf0c      	ite	eq
 80a0816:	2200      	moveq	r2, #0
 80a0818:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a081a:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a081e:	431a      	orrs	r2, r3
 80a0820:	2122      	movs	r1, #34	; 0x22
 80a0822:	f7ff ffb7 	bl	80a0794 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0826:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a082a:	4620      	mov	r0, r4
 80a082c:	0092      	lsls	r2, r2, #2
 80a082e:	f002 020c 	and.w	r2, r2, #12
 80a0832:	2123      	movs	r1, #35	; 0x23
 80a0834:	f7ff ffae 	bl	80a0794 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0838:	4620      	mov	r0, r4
}
 80a083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a083e:	2200      	movs	r2, #0
 80a0840:	2124      	movs	r1, #36	; 0x24
 80a0842:	f7ff bfa7 	b.w	80a0794 <_ZN7LSM9DS110mWriteByteEhh>
 80a0846:	bf00      	nop
 80a0848:	080a3944 	.word	0x080a3944

080a084c <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a084c:	b538      	push	{r3, r4, r5, lr}
 80a084e:	460c      	mov	r4, r1
 80a0850:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0852:	f002 fba7 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a0856:	4621      	mov	r1, r4
 80a0858:	f001 fc82 	bl	80a2160 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a085c:	f002 fba2 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a0860:	6803      	ldr	r3, [r0, #0]
 80a0862:	4629      	mov	r1, r5
 80a0864:	689b      	ldr	r3, [r3, #8]
 80a0866:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0868:	f002 fb9c 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a086c:	2100      	movs	r1, #0
 80a086e:	f001 fc7b 	bl	80a2168 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0872:	f002 fb97 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a0876:	2201      	movs	r2, #1
 80a0878:	4621      	mov	r1, r4
 80a087a:	f001 fc6e 	bl	80a215a <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a087e:	f002 fb91 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a0882:	6803      	ldr	r3, [r0, #0]
 80a0884:	695b      	ldr	r3, [r3, #20]
 80a0886:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0888:	b2c0      	uxtb	r0, r0
 80a088a:	bd38      	pop	{r3, r4, r5, pc}

080a088c <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a088c:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a088e:	7801      	ldrb	r1, [r0, #0]
 80a0890:	2901      	cmp	r1, #1
 80a0892:	d103      	bne.n	80a089c <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0894:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0898:	f7ff bfd8 	b.w	80a084c <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a089c:	b919      	cbnz	r1, 80a08a6 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a089e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a08a2:	f7ff be97 	b.w	80a05d4 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a08a6:	2000      	movs	r0, #0
 80a08a8:	4770      	bx	lr

080a08aa <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a08aa:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a08ac:	7801      	ldrb	r1, [r0, #0]
 80a08ae:	2901      	cmp	r1, #1
 80a08b0:	d103      	bne.n	80a08ba <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a08b2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a08b6:	f7ff bfc9 	b.w	80a084c <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a08ba:	b919      	cbnz	r1, 80a08c4 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a08bc:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a08c0:	f7ff be88 	b.w	80a05d4 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a08c4:	4770      	bx	lr

080a08c6 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a08c6:	b538      	push	{r3, r4, r5, lr}
 80a08c8:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a08ca:	7843      	ldrb	r3, [r0, #1]
 80a08cc:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a08d0:	7883      	ldrb	r3, [r0, #2]
 80a08d2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a08d6:	f7ff fde9 	bl	80a04ac <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a08da:	f7ff fdb2 	bl	80a0442 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a08de:	4620      	mov	r0, r4
 80a08e0:	f7ff fdc6 	bl	80a0470 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a08e4:	4620      	mov	r0, r4
 80a08e6:	f7ff fdb7 	bl	80a0458 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a08ea:	7823      	ldrb	r3, [r4, #0]
 80a08ec:	2b01      	cmp	r3, #1
 80a08ee:	d103      	bne.n	80a08f8 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	f7ff fe7b 	bl	80a05ec <_ZN7LSM9DS17initI2CEv>
 80a08f6:	e003      	b.n	80a0900 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a08f8:	b913      	cbnz	r3, 80a0900 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a08fa:	4620      	mov	r0, r4
 80a08fc:	f7ff fdfa 	bl	80a04f4 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0900:	210f      	movs	r1, #15
 80a0902:	4620      	mov	r0, r4
 80a0904:	f7ff ffd1 	bl	80a08aa <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0908:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a090a:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a090c:	4620      	mov	r0, r4
 80a090e:	f7ff ffbd 	bl	80a088c <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0912:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0916:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a091a:	b205      	sxth	r5, r0
 80a091c:	429d      	cmp	r5, r3
 80a091e:	d10a      	bne.n	80a0936 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0920:	4620      	mov	r0, r4
 80a0922:	f7ff fe99 	bl	80a0658 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0926:	4620      	mov	r0, r4
 80a0928:	f7ff fef1 	bl	80a070e <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a092c:	4620      	mov	r0, r4
 80a092e:	f7ff ff45 	bl	80a07bc <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0932:	4628      	mov	r0, r5
 80a0934:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0936:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0938:	bd38      	pop	{r3, r4, r5, pc}

080a093a <_GLOBAL__sub_I_magSensitivity>:
 80a093a:	f001 b999 	b.w	80a1c70 <HAL_Pin_Map>

080a093e <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a093e:	f001 b987 	b.w	80a1c50 <HAL_Timer_Get_Micro_Seconds>

080a0942 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0942:	b510      	push	{r4, lr}
 80a0944:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0946:	68c0      	ldr	r0, [r0, #12]
 80a0948:	b108      	cbz	r0, 80a094e <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a094a:	f001 fb9f 	bl	80a208c <free>
  if (begun) pinMode(pin, INPUT);
 80a094e:	7823      	ldrb	r3, [r4, #0]
 80a0950:	b11b      	cbz	r3, 80a095a <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0952:	2100      	movs	r1, #0
 80a0954:	79e0      	ldrb	r0, [r4, #7]
 80a0956:	f002 fafb 	bl	80a2f50 <pinMode>
}
 80a095a:	4620      	mov	r0, r4
 80a095c:	bd10      	pop	{r4, pc}

080a095e <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a095e:	b538      	push	{r3, r4, r5, lr}
 80a0960:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0962:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0964:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0966:	b108      	cbz	r0, 80a096c <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0968:	f001 fb90 	bl	80a208c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a096c:	79a3      	ldrb	r3, [r4, #6]
 80a096e:	2b06      	cmp	r3, #6
 80a0970:	bf0c      	ite	eq
 80a0972:	2004      	moveq	r0, #4
 80a0974:	2003      	movne	r0, #3
 80a0976:	4368      	muls	r0, r5
 80a0978:	b280      	uxth	r0, r0
 80a097a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a097c:	f001 fb7e 	bl	80a207c <malloc>
 80a0980:	60e0      	str	r0, [r4, #12]
 80a0982:	b128      	cbz	r0, 80a0990 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0984:	88a2      	ldrh	r2, [r4, #4]
 80a0986:	2100      	movs	r1, #0
 80a0988:	f002 ff2d 	bl	80a37e6 <memset>
    numLEDs = n;
 80a098c:	8065      	strh	r5, [r4, #2]
 80a098e:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0990:	80a0      	strh	r0, [r4, #4]
 80a0992:	8060      	strh	r0, [r4, #2]
 80a0994:	bd38      	pop	{r3, r4, r5, pc}

080a0996 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0996:	b510      	push	{r4, lr}
 80a0998:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a099a:	2101      	movs	r1, #1
 80a099c:	79c0      	ldrb	r0, [r0, #7]
 80a099e:	f002 fad7 	bl	80a2f50 <pinMode>
  digitalWrite(pin, LOW);
 80a09a2:	2100      	movs	r1, #0
 80a09a4:	79e0      	ldrb	r0, [r4, #7]
 80a09a6:	f002 fae4 	bl	80a2f72 <digitalWrite>
  begun = true;
 80a09aa:	2301      	movs	r3, #1
 80a09ac:	7023      	strb	r3, [r4, #0]
 80a09ae:	bd10      	pop	{r4, pc}

080a09b0 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a09b0:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a09b2:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a09b4:	4605      	mov	r5, r0
 80a09b6:	460c      	mov	r4, r1
    if (begun) {
 80a09b8:	b11b      	cbz	r3, 80a09c2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a09ba:	2100      	movs	r1, #0
 80a09bc:	79c0      	ldrb	r0, [r0, #7]
 80a09be:	f002 fac7 	bl	80a2f50 <pinMode>
    }
    pin = p;
    if (begun) {
 80a09c2:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a09c4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a09c6:	b153      	cbz	r3, 80a09de <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a09c8:	b2a4      	uxth	r4, r4
 80a09ca:	4620      	mov	r0, r4
 80a09cc:	2101      	movs	r1, #1
 80a09ce:	f002 fabf 	bl	80a2f50 <pinMode>
        digitalWrite(p, LOW);
 80a09d2:	4620      	mov	r0, r4
    }
}
 80a09d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a09d8:	2100      	movs	r1, #0
 80a09da:	f002 baca 	b.w	80a2f72 <digitalWrite>
 80a09de:	bd38      	pop	{r3, r4, r5, pc}

080a09e0 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a09e0:	b570      	push	{r4, r5, r6, lr}
 80a09e2:	4604      	mov	r4, r0
 80a09e4:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a09e6:	2500      	movs	r5, #0
 80a09e8:	7183      	strb	r3, [r0, #6]
 80a09ea:	7005      	strb	r5, [r0, #0]
 80a09ec:	7205      	strb	r5, [r0, #8]
 80a09ee:	60c5      	str	r5, [r0, #12]
 80a09f0:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a09f2:	f7ff ffb4 	bl	80a095e <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a09f6:	4620      	mov	r0, r4
 80a09f8:	4631      	mov	r1, r6
 80a09fa:	f7ff ffd9 	bl	80a09b0 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a09fe:	4620      	mov	r0, r4
 80a0a00:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0a04 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0a04:	68c3      	ldr	r3, [r0, #12]
 80a0a06:	2b00      	cmp	r3, #0
 80a0a08:	f000 858e 	beq.w	80a1528 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a10:	4604      	mov	r4, r0
 80a0a12:	7983      	ldrb	r3, [r0, #6]
 80a0a14:	b086      	sub	sp, #24
 80a0a16:	3b02      	subs	r3, #2
 80a0a18:	b2db      	uxtb	r3, r3
 80a0a1a:	2b04      	cmp	r3, #4
 80a0a1c:	bf96      	itet	ls
 80a0a1e:	4a29      	ldrls	r2, [pc, #164]	; (80a0ac4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0a20:	2532      	movhi	r5, #50	; 0x32
 80a0a22:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0a26:	f7ff ff8a 	bl	80a093e <micros>
 80a0a2a:	6923      	ldr	r3, [r4, #16]
 80a0a2c:	1ac0      	subs	r0, r0, r3
 80a0a2e:	42a8      	cmp	r0, r5
 80a0a30:	d3f9      	bcc.n	80a0a26 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0a32:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a34:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a36:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a38:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a3a:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0a3e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a42:	f000 8272 	beq.w	80a0f2a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0a46:	2907      	cmp	r1, #7
 80a0a48:	f000 826f 	beq.w	80a0f2a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0a4c:	2906      	cmp	r1, #6
 80a0a4e:	f000 8432 	beq.w	80a12b6 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0a52:	2905      	cmp	r1, #5
 80a0a54:	f000 83ab 	beq.w	80a11ae <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0a58:	2908      	cmp	r1, #8
 80a0a5a:	f000 83a8 	beq.w	80a11ae <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0a5e:	2900      	cmp	r1, #0
 80a0a60:	f040 8563 	bne.w	80a152a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0a64:	4a18      	ldr	r2, [pc, #96]	; (80a0ac8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0a66:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0a6e:	b29b      	uxth	r3, r3
 80a0a70:	2b00      	cmp	r3, #0
 80a0a72:	f000 8395 	beq.w	80a11a0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0a76:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0a78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0a7c:	f10e 0503 	add.w	r5, lr, #3
 80a0a80:	3b03      	subs	r3, #3
 80a0a82:	b29b      	uxth	r3, r3
 80a0a84:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0a88:	f89e 3000 	ldrb.w	r3, [lr]
 80a0a8c:	b2db      	uxtb	r3, r3
 80a0a8e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0a92:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0a96:	b2db      	uxtb	r3, r3
 80a0a98:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0a9c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0aa0:	b2db      	uxtb	r3, r3
 80a0aa2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0aa6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0aaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0aae:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0ab2:	021b      	lsls	r3, r3, #8
 80a0ab4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0ab8:	4303      	orrs	r3, r0
 80a0aba:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0abc:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0ac0:	e11b      	b.n	80a0cfa <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0ac2:	bf00      	nop
 80a0ac4:	080a3950 	.word	0x080a3950
 80a0ac8:	200001a8 	.word	0x200001a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0acc:	4600      	mov	r0, r0
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0bd4:	79e3      	ldrb	r3, [r4, #7]
 80a0bd6:	6810      	ldr	r0, [r2, #0]
 80a0bd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0bdc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0be0:	88bf      	ldrh	r7, [r7, #4]
 80a0be2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0be6:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0be8:	4600      	mov	r0, r0
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0ce2:	9b04      	ldr	r3, [sp, #16]
 80a0ce4:	085b      	lsrs	r3, r3, #1
 80a0ce6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0ce8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0cec:	3301      	adds	r3, #1
 80a0cee:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0cf0:	2b17      	cmp	r3, #23
 80a0cf2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0cf6:	f200 82db 	bhi.w	80a12b0 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0cfa:	79e3      	ldrb	r3, [r4, #7]
 80a0cfc:	6810      	ldr	r0, [r2, #0]
 80a0cfe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d02:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d06:	88bf      	ldrh	r7, [r7, #4]
 80a0d08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d0c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d0e:	9803      	ldr	r0, [sp, #12]
 80a0d10:	9b04      	ldr	r3, [sp, #16]
 80a0d12:	4218      	tst	r0, r3
 80a0d14:	f47f aeda 	bne.w	80a0acc <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0d18:	4600      	mov	r0, r0
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0d6a:	79e3      	ldrb	r3, [r4, #7]
 80a0d6c:	6810      	ldr	r0, [r2, #0]
 80a0d6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d72:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d76:	88bf      	ldrh	r7, [r7, #4]
 80a0d78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d7c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d7e:	4600      	mov	r0, r0
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	e6db      	b.n	80a0ce2 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f2a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f2e:	4a17      	ldr	r2, [pc, #92]	; (80a0f8c <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0f30:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0f32:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f36:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f38:	2b00      	cmp	r3, #0
 80a0f3a:	f000 8131 	beq.w	80a11a0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f3e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f44:	f10e 0103 	add.w	r1, lr, #3
 80a0f48:	3b03      	subs	r3, #3
 80a0f4a:	b29b      	uxth	r3, r3
 80a0f4c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0f50:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f54:	b2db      	uxtb	r3, r3
 80a0f56:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0f5a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0f5e:	b2db      	uxtb	r3, r3
 80a0f60:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f64:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0f68:	b2db      	uxtb	r3, r3
 80a0f6a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0f6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0f72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0f76:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0f7a:	0200      	lsls	r0, r0, #8
 80a0f7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0f80:	433b      	orrs	r3, r7
 80a0f82:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f84:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0f88:	e080      	b.n	80a108c <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0f8a:	bf00      	nop
 80a0f8c:	200001a8 	.word	0x200001a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f90:	4600      	mov	r0, r0
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a102a:	79e3      	ldrb	r3, [r4, #7]
 80a102c:	6810      	ldr	r0, [r2, #0]
 80a102e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1032:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1036:	88bf      	ldrh	r7, [r7, #4]
 80a1038:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a103c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a103e:	4600      	mov	r0, r0
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1074:	9b04      	ldr	r3, [sp, #16]
 80a1076:	085b      	lsrs	r3, r3, #1
 80a1078:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a107a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a107e:	3301      	adds	r3, #1
 80a1080:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1082:	2b17      	cmp	r3, #23
 80a1084:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1088:	f200 8083 	bhi.w	80a1192 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a108c:	79e3      	ldrb	r3, [r4, #7]
 80a108e:	6810      	ldr	r0, [r2, #0]
 80a1090:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1094:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1098:	88bf      	ldrh	r7, [r7, #4]
 80a109a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a109e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a10a0:	9803      	ldr	r0, [sp, #12]
 80a10a2:	9b04      	ldr	r3, [sp, #16]
 80a10a4:	4218      	tst	r0, r3
 80a10a6:	f47f af73 	bne.w	80a0f90 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10aa:	4600      	mov	r0, r0
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a10d2:	79e3      	ldrb	r3, [r4, #7]
 80a10d4:	6810      	ldr	r0, [r2, #0]
 80a10d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10da:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10de:	88bf      	ldrh	r7, [r7, #4]
 80a10e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10e4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10e6:	4600      	mov	r0, r0
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	e770      	b.n	80a1074 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1192:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1196:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1198:	b29b      	uxth	r3, r3
 80a119a:	2b00      	cmp	r3, #0
 80a119c:	f47f aecf 	bne.w	80a0f3e <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a11a0:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a11a2:	f7ff fbcc 	bl	80a093e <micros>
 80a11a6:	6120      	str	r0, [r4, #16]
}
 80a11a8:	b006      	add	sp, #24
 80a11aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a11ae:	4b5e      	ldr	r3, [pc, #376]	; (80a1328 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a11b0:	4a5e      	ldr	r2, [pc, #376]	; (80a132c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a11b2:	4618      	mov	r0, r3
 80a11b4:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a11b6:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a11ba:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a11c0:	b292      	uxth	r2, r2
 80a11c2:	2a00      	cmp	r2, #0
 80a11c4:	d0ec      	beq.n	80a11a0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a11c6:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a11ca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a11ce:	f10e 0503 	add.w	r5, lr, #3
 80a11d2:	3a03      	subs	r2, #3
 80a11d4:	b292      	uxth	r2, r2
 80a11d6:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a11da:	f89e 2000 	ldrb.w	r2, [lr]
 80a11de:	b2d2      	uxtb	r2, r2
 80a11e0:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a11e4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a11e8:	b2d2      	uxtb	r2, r2
 80a11ea:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a11ee:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a11f2:	b2d2      	uxtb	r2, r2
 80a11f4:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a11fc:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1200:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1204:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1208:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a120c:	ea42 020c 	orr.w	r2, r2, ip
 80a1210:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1212:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1216:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1218:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a121a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a121e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1222:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1226:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a122a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a122c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1230:	9e03      	ldr	r6, [sp, #12]
 80a1232:	9a04      	ldr	r2, [sp, #16]
 80a1234:	4216      	tst	r6, r2
 80a1236:	d023      	beq.n	80a1280 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1238:	685a      	ldr	r2, [r3, #4]
 80a123a:	9e05      	ldr	r6, [sp, #20]
 80a123c:	1b92      	subs	r2, r2, r6
 80a123e:	2a4f      	cmp	r2, #79	; 0x4f
 80a1240:	d9fa      	bls.n	80a1238 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1242:	79e2      	ldrb	r2, [r4, #7]
 80a1244:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1248:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a124c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1250:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1254:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1258:	6842      	ldr	r2, [r0, #4]
 80a125a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a125c:	685a      	ldr	r2, [r3, #4]
 80a125e:	9e05      	ldr	r6, [sp, #20]
 80a1260:	1b92      	subs	r2, r2, r6
 80a1262:	2a07      	cmp	r2, #7
 80a1264:	d9fa      	bls.n	80a125c <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1266:	9a04      	ldr	r2, [sp, #16]
 80a1268:	0852      	lsrs	r2, r2, #1
 80a126a:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a126c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1270:	3201      	adds	r2, #1
 80a1272:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1274:	2a17      	cmp	r2, #23
 80a1276:	f88d 2005 	strb.w	r2, [sp, #5]
 80a127a:	d9cc      	bls.n	80a1216 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a127c:	46ae      	mov	lr, r5
 80a127e:	e79d      	b.n	80a11bc <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1280:	685a      	ldr	r2, [r3, #4]
 80a1282:	9e05      	ldr	r6, [sp, #20]
 80a1284:	1b92      	subs	r2, r2, r6
 80a1286:	2a18      	cmp	r2, #24
 80a1288:	d9fa      	bls.n	80a1280 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a128a:	79e2      	ldrb	r2, [r4, #7]
 80a128c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1290:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1294:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1298:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a129c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a12a0:	6842      	ldr	r2, [r0, #4]
 80a12a2:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a12a4:	685a      	ldr	r2, [r3, #4]
 80a12a6:	9e05      	ldr	r6, [sp, #20]
 80a12a8:	1b92      	subs	r2, r2, r6
 80a12aa:	2a45      	cmp	r2, #69	; 0x45
 80a12ac:	d9fa      	bls.n	80a12a4 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a12ae:	e7da      	b.n	80a1266 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a12b0:	46ae      	mov	lr, r5
 80a12b2:	f7ff bbda 	b.w	80a0a6a <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a12b6:	4a1d      	ldr	r2, [pc, #116]	; (80a132c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a12b8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a12bc:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a12be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a12c2:	b29b      	uxth	r3, r3
 80a12c4:	2b00      	cmp	r3, #0
 80a12c6:	f43f af6b 	beq.w	80a11a0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a12ca:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a12cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a12d0:	f10e 0104 	add.w	r1, lr, #4
 80a12d4:	3b04      	subs	r3, #4
 80a12d6:	b29b      	uxth	r3, r3
 80a12d8:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a12dc:	f89e 3000 	ldrb.w	r3, [lr]
 80a12e0:	b2db      	uxtb	r3, r3
 80a12e2:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a12e6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a12ea:	b2db      	uxtb	r3, r3
 80a12ec:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a12f0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a12f4:	b2db      	uxtb	r3, r3
 80a12f6:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a12fa:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a12fe:	b2db      	uxtb	r3, r3
 80a1300:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1304:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1308:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a130c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1310:	043f      	lsls	r7, r7, #16
 80a1312:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1316:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a131a:	4303      	orrs	r3, r0
 80a131c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1320:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1322:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1326:	e07e      	b.n	80a1426 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1328:	e0001000 	.word	0xe0001000
 80a132c:	200001a8 	.word	0x200001a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1330:	4600      	mov	r0, r0
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a139e:	79e3      	ldrb	r3, [r4, #7]
 80a13a0:	6810      	ldr	r0, [r2, #0]
 80a13a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13a6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13aa:	88bf      	ldrh	r7, [r7, #4]
 80a13ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13b0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13b2:	4600      	mov	r0, r0
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1410:	9b04      	ldr	r3, [sp, #16]
 80a1412:	085b      	lsrs	r3, r3, #1
 80a1414:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1416:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a141a:	3301      	adds	r3, #1
 80a141c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a141e:	2b1f      	cmp	r3, #31
 80a1420:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1424:	d87e      	bhi.n	80a1524 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1426:	79e3      	ldrb	r3, [r4, #7]
 80a1428:	6810      	ldr	r0, [r2, #0]
 80a142a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a142e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1432:	88bf      	ldrh	r7, [r7, #4]
 80a1434:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1438:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a143a:	9803      	ldr	r0, [sp, #12]
 80a143c:	9b04      	ldr	r3, [sp, #16]
 80a143e:	4218      	tst	r0, r3
 80a1440:	f47f af76 	bne.w	80a1330 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1444:	4600      	mov	r0, r0
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a146c:	79e3      	ldrb	r3, [r4, #7]
 80a146e:	6810      	ldr	r0, [r2, #0]
 80a1470:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1474:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1478:	88bf      	ldrh	r7, [r7, #4]
 80a147a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a147e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1480:	4600      	mov	r0, r0
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	e775      	b.n	80a1410 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1524:	468e      	mov	lr, r1
 80a1526:	e6ca      	b.n	80a12be <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1528:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a152a:	2903      	cmp	r1, #3
 80a152c:	f000 812e 	beq.w	80a178c <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1530:	4a1e      	ldr	r2, [pc, #120]	; (80a15ac <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1532:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1536:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1538:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a153c:	b29b      	uxth	r3, r3
 80a153e:	2b00      	cmp	r3, #0
 80a1540:	f43f ae2e 	beq.w	80a11a0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1544:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1546:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a154a:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a154c:	3b03      	subs	r3, #3
 80a154e:	b29b      	uxth	r3, r3
 80a1550:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1554:	f89e 3000 	ldrb.w	r3, [lr]
 80a1558:	f10e 0103 	add.w	r1, lr, #3
 80a155c:	b2db      	uxtb	r3, r3
 80a155e:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1562:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1566:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a156a:	b2db      	uxtb	r3, r3
 80a156c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1570:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1574:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1578:	b2db      	uxtb	r3, r3
 80a157a:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a157e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1582:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1586:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a158a:	021b      	lsls	r3, r3, #8
 80a158c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1590:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1594:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1598:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a159c:	433b      	orrs	r3, r7
 80a159e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a15a0:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a15a4:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a15a8:	e07d      	b.n	80a16a6 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a15aa:	bf00      	nop
 80a15ac:	200001a8 	.word	0x200001a8
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a15b0:	9b04      	ldr	r3, [sp, #16]
 80a15b2:	085b      	lsrs	r3, r3, #1
 80a15b4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15b6:	4600      	mov	r0, r0
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a163c:	79e0      	ldrb	r0, [r4, #7]
 80a163e:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1640:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1644:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1648:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a164c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1650:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1654:	3301      	adds	r3, #1
 80a1656:	b2db      	uxtb	r3, r3
 80a1658:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a165c:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1660:	4600      	mov	r0, r0
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
          if(j==24) break;
 80a168a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a168e:	2b18      	cmp	r3, #24
 80a1690:	d07a      	beq.n	80a1788 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1692:	79e3      	ldrb	r3, [r4, #7]
 80a1694:	6810      	ldr	r0, [r2, #0]
 80a1696:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a169a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a169e:	88bf      	ldrh	r7, [r7, #4]
 80a16a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a16a4:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a16a6:	9803      	ldr	r0, [sp, #12]
 80a16a8:	9b04      	ldr	r3, [sp, #16]
 80a16aa:	4218      	tst	r0, r3
 80a16ac:	d180      	bne.n	80a15b0 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a16ae:	4600      	mov	r0, r0
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a16d0:	79e3      	ldrb	r3, [r4, #7]
 80a16d2:	6810      	ldr	r0, [r2, #0]
 80a16d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a16d8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a16dc:	88bf      	ldrh	r7, [r7, #4]
 80a16de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a16e2:	831f      	strh	r7, [r3, #24]
          j++;
 80a16e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16e8:	3301      	adds	r3, #1
 80a16ea:	b2db      	uxtb	r3, r3
 80a16ec:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a16f0:	9b04      	ldr	r3, [sp, #16]
 80a16f2:	085b      	lsrs	r3, r3, #1
 80a16f4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a16f6:	4600      	mov	r0, r0
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
          if(j==24) break;
 80a1780:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1784:	2b18      	cmp	r3, #24
 80a1786:	d184      	bne.n	80a1692 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1788:	468e      	mov	lr, r1
 80a178a:	e6d5      	b.n	80a1538 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a178c:	4a17      	ldr	r2, [pc, #92]	; (80a17ec <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a178e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1792:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1794:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1798:	b29b      	uxth	r3, r3
 80a179a:	2b00      	cmp	r3, #0
 80a179c:	f43f ad00 	beq.w	80a11a0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a17a0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a17a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a17a6:	f10e 0103 	add.w	r1, lr, #3
 80a17aa:	3b03      	subs	r3, #3
 80a17ac:	b29b      	uxth	r3, r3
 80a17ae:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a17b2:	f89e 3000 	ldrb.w	r3, [lr]
 80a17b6:	b2db      	uxtb	r3, r3
 80a17b8:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a17bc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a17c0:	b2db      	uxtb	r3, r3
 80a17c2:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a17c6:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a17ca:	b2db      	uxtb	r3, r3
 80a17cc:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a17d0:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a17d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a17d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a17dc:	021b      	lsls	r3, r3, #8
 80a17de:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a17e2:	4303      	orrs	r3, r0
 80a17e4:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a17e6:	f88d 6005 	strb.w	r6, [sp, #5]
 80a17ea:	e0e0      	b.n	80a19ae <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a17ec:	200001a8 	.word	0x200001a8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17f0:	4600      	mov	r0, r0
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1912:	79e3      	ldrb	r3, [r4, #7]
 80a1914:	6810      	ldr	r0, [r2, #0]
 80a1916:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a191a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a191e:	88bf      	ldrh	r7, [r7, #4]
 80a1920:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1924:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1926:	4600      	mov	r0, r0
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1996:	9b04      	ldr	r3, [sp, #16]
 80a1998:	085b      	lsrs	r3, r3, #1
 80a199a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a199c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a19a0:	3301      	adds	r3, #1
 80a19a2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a19a4:	2b17      	cmp	r3, #23
 80a19a6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a19aa:	f200 80e3 	bhi.w	80a1b74 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a19ae:	79e3      	ldrb	r3, [r4, #7]
 80a19b0:	6810      	ldr	r0, [r2, #0]
 80a19b2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19b6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a19ba:	88bf      	ldrh	r7, [r7, #4]
 80a19bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a19c0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a19c2:	9803      	ldr	r0, [sp, #12]
 80a19c4:	9b04      	ldr	r3, [sp, #16]
 80a19c6:	4218      	tst	r0, r3
 80a19c8:	f47f af12 	bne.w	80a17f0 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a19cc:	4600      	mov	r0, r0
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1a4e:	79e3      	ldrb	r3, [r4, #7]
 80a1a50:	6810      	ldr	r0, [r2, #0]
 80a1a52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1a56:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1a5a:	88bf      	ldrh	r7, [r7, #4]
 80a1a5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1a60:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a62:	4600      	mov	r0, r0
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	e710      	b.n	80a1996 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1b74:	468e      	mov	lr, r1
 80a1b76:	e60d      	b.n	80a1794 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1b78 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1b78:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1b7c:	428b      	cmp	r3, r1
 80a1b7e:	d945      	bls.n	80a1c0c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1b80:	7a05      	ldrb	r5, [r0, #8]
 80a1b82:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1b86:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1b8a:	b2d6      	uxtb	r6, r2
 80a1b8c:	b145      	cbz	r5, 80a1ba0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1b8e:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1b90:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1b92:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1b94:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1b98:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1b9c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1ba0:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1ba4:	68c7      	ldr	r7, [r0, #12]
 80a1ba6:	f1bc 0f06 	cmp.w	ip, #6
 80a1baa:	bf0c      	ite	eq
 80a1bac:	2504      	moveq	r5, #4
 80a1bae:	2503      	movne	r5, #3
 80a1bb0:	4369      	muls	r1, r5
 80a1bb2:	f1bc 0f08 	cmp.w	ip, #8
 80a1bb6:	eb07 0501 	add.w	r5, r7, r1
 80a1bba:	d824      	bhi.n	80a1c06 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1bbc:	f04f 0e01 	mov.w	lr, #1
 80a1bc0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1bc4:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1bc8:	d10c      	bne.n	80a1be4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a1bca:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1bce:	d10d      	bne.n	80a1bec <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1bd0:	f01e 0f10 	tst.w	lr, #16
 80a1bd4:	d017      	beq.n	80a1c06 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1bd6:	2bff      	cmp	r3, #255	; 0xff
 80a1bd8:	bf08      	it	eq
 80a1bda:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1bdc:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1bde:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1be0:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1be4:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1be6:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1be8:	70ae      	strb	r6, [r5, #2]
        } break;
 80a1bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1bec:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1bee:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1bf0:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1bf2:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1bf4:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1bf6:	b90b      	cbnz	r3, 80a1bfc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1bf8:	b2d2      	uxtb	r2, r2
 80a1bfa:	e002      	b.n	80a1c02 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1bfc:	435a      	muls	r2, r3
 80a1bfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1c02:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1c06:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1c08:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1c0a:	70ae      	strb	r6, [r5, #2]
 80a1c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1c0e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1c0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1c12:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1c16:	4770      	bx	lr

080a1c18 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a1c18:	8840      	ldrh	r0, [r0, #2]
 80a1c1a:	4770      	bx	lr

080a1c1c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1c1c:	b508      	push	{r3, lr}
 80a1c1e:	f000 f827 	bl	80a1c70 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1c22:	f000 f825 	bl	80a1c70 <HAL_Pin_Map>
 80a1c26:	4b01      	ldr	r3, [pc, #4]	; (80a1c2c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1c28:	6018      	str	r0, [r3, #0]
 80a1c2a:	bd08      	pop	{r3, pc}
 80a1c2c:	200001a8 	.word	0x200001a8

080a1c30 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1c30:	b508      	push	{r3, lr}
 80a1c32:	4b02      	ldr	r3, [pc, #8]	; (80a1c3c <os_mutex_create+0xc>)
 80a1c34:	681b      	ldr	r3, [r3, #0]
 80a1c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1c38:	9301      	str	r3, [sp, #4]
 80a1c3a:	bd08      	pop	{r3, pc}
 80a1c3c:	080601d0 	.word	0x080601d0

080a1c40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1c40:	b508      	push	{r3, lr}
 80a1c42:	4b02      	ldr	r3, [pc, #8]	; (80a1c4c <HAL_RNG_GetRandomNumber+0xc>)
 80a1c44:	681b      	ldr	r3, [r3, #0]
 80a1c46:	685b      	ldr	r3, [r3, #4]
 80a1c48:	9301      	str	r3, [sp, #4]
 80a1c4a:	bd08      	pop	{r3, pc}
 80a1c4c:	0806019c 	.word	0x0806019c

080a1c50 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1c50:	b508      	push	{r3, lr}
 80a1c52:	4b02      	ldr	r3, [pc, #8]	; (80a1c5c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1c54:	681b      	ldr	r3, [r3, #0]
 80a1c56:	691b      	ldr	r3, [r3, #16]
 80a1c58:	9301      	str	r3, [sp, #4]
 80a1c5a:	bd08      	pop	{r3, pc}
 80a1c5c:	0806019c 	.word	0x0806019c

080a1c60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1c60:	b508      	push	{r3, lr}
 80a1c62:	4b02      	ldr	r3, [pc, #8]	; (80a1c6c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1c64:	681b      	ldr	r3, [r3, #0]
 80a1c66:	695b      	ldr	r3, [r3, #20]
 80a1c68:	9301      	str	r3, [sp, #4]
 80a1c6a:	bd08      	pop	{r3, pc}
 80a1c6c:	0806019c 	.word	0x0806019c

080a1c70 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1c70:	b508      	push	{r3, lr}
 80a1c72:	4b02      	ldr	r3, [pc, #8]	; (80a1c7c <HAL_Pin_Map+0xc>)
 80a1c74:	681b      	ldr	r3, [r3, #0]
 80a1c76:	681b      	ldr	r3, [r3, #0]
 80a1c78:	9301      	str	r3, [sp, #4]
 80a1c7a:	bd08      	pop	{r3, pc}
 80a1c7c:	080601b0 	.word	0x080601b0

080a1c80 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1c80:	b508      	push	{r3, lr}
 80a1c82:	4b02      	ldr	r3, [pc, #8]	; (80a1c8c <HAL_Pin_Mode+0xc>)
 80a1c84:	681b      	ldr	r3, [r3, #0]
 80a1c86:	689b      	ldr	r3, [r3, #8]
 80a1c88:	9301      	str	r3, [sp, #4]
 80a1c8a:	bd08      	pop	{r3, pc}
 80a1c8c:	080601b0 	.word	0x080601b0

080a1c90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1c90:	b508      	push	{r3, lr}
 80a1c92:	4b02      	ldr	r3, [pc, #8]	; (80a1c9c <HAL_Get_Pin_Mode+0xc>)
 80a1c94:	681b      	ldr	r3, [r3, #0]
 80a1c96:	68db      	ldr	r3, [r3, #12]
 80a1c98:	9301      	str	r3, [sp, #4]
 80a1c9a:	bd08      	pop	{r3, pc}
 80a1c9c:	080601b0 	.word	0x080601b0

080a1ca0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1ca0:	b508      	push	{r3, lr}
 80a1ca2:	4b02      	ldr	r3, [pc, #8]	; (80a1cac <HAL_GPIO_Write+0xc>)
 80a1ca4:	681b      	ldr	r3, [r3, #0]
 80a1ca6:	691b      	ldr	r3, [r3, #16]
 80a1ca8:	9301      	str	r3, [sp, #4]
 80a1caa:	bd08      	pop	{r3, pc}
 80a1cac:	080601b0 	.word	0x080601b0

080a1cb0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1cb0:	b508      	push	{r3, lr}
 80a1cb2:	4b02      	ldr	r3, [pc, #8]	; (80a1cbc <HAL_I2C_Begin+0xc>)
 80a1cb4:	681b      	ldr	r3, [r3, #0]
 80a1cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1cb8:	9301      	str	r3, [sp, #4]
 80a1cba:	bd08      	pop	{r3, pc}
 80a1cbc:	080601ac 	.word	0x080601ac

080a1cc0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1cc0:	b508      	push	{r3, lr}
 80a1cc2:	4b02      	ldr	r3, [pc, #8]	; (80a1ccc <HAL_I2C_Request_Data+0xc>)
 80a1cc4:	681b      	ldr	r3, [r3, #0]
 80a1cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1cc8:	9301      	str	r3, [sp, #4]
 80a1cca:	bd08      	pop	{r3, pc}
 80a1ccc:	080601ac 	.word	0x080601ac

080a1cd0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1cd0:	b508      	push	{r3, lr}
 80a1cd2:	4b02      	ldr	r3, [pc, #8]	; (80a1cdc <HAL_I2C_Begin_Transmission+0xc>)
 80a1cd4:	681b      	ldr	r3, [r3, #0]
 80a1cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1cd8:	9301      	str	r3, [sp, #4]
 80a1cda:	bd08      	pop	{r3, pc}
 80a1cdc:	080601ac 	.word	0x080601ac

080a1ce0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1ce0:	b508      	push	{r3, lr}
 80a1ce2:	4b02      	ldr	r3, [pc, #8]	; (80a1cec <HAL_I2C_End_Transmission+0xc>)
 80a1ce4:	681b      	ldr	r3, [r3, #0]
 80a1ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1ce8:	9301      	str	r3, [sp, #4]
 80a1cea:	bd08      	pop	{r3, pc}
 80a1cec:	080601ac 	.word	0x080601ac

080a1cf0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1cf0:	b508      	push	{r3, lr}
 80a1cf2:	4b02      	ldr	r3, [pc, #8]	; (80a1cfc <HAL_I2C_Write_Data+0xc>)
 80a1cf4:	681b      	ldr	r3, [r3, #0]
 80a1cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1cf8:	9301      	str	r3, [sp, #4]
 80a1cfa:	bd08      	pop	{r3, pc}
 80a1cfc:	080601ac 	.word	0x080601ac

080a1d00 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d00:	b508      	push	{r3, lr}
 80a1d02:	4b02      	ldr	r3, [pc, #8]	; (80a1d0c <HAL_I2C_Available_Data+0xc>)
 80a1d04:	681b      	ldr	r3, [r3, #0]
 80a1d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1d08:	9301      	str	r3, [sp, #4]
 80a1d0a:	bd08      	pop	{r3, pc}
 80a1d0c:	080601ac 	.word	0x080601ac

080a1d10 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d10:	b508      	push	{r3, lr}
 80a1d12:	4b02      	ldr	r3, [pc, #8]	; (80a1d1c <HAL_I2C_Read_Data+0xc>)
 80a1d14:	681b      	ldr	r3, [r3, #0]
 80a1d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1d18:	9301      	str	r3, [sp, #4]
 80a1d1a:	bd08      	pop	{r3, pc}
 80a1d1c:	080601ac 	.word	0x080601ac

080a1d20 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d20:	b508      	push	{r3, lr}
 80a1d22:	4b02      	ldr	r3, [pc, #8]	; (80a1d2c <HAL_I2C_Peek_Data+0xc>)
 80a1d24:	681b      	ldr	r3, [r3, #0]
 80a1d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1d28:	9301      	str	r3, [sp, #4]
 80a1d2a:	bd08      	pop	{r3, pc}
 80a1d2c:	080601ac 	.word	0x080601ac

080a1d30 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1d30:	b508      	push	{r3, lr}
 80a1d32:	4b02      	ldr	r3, [pc, #8]	; (80a1d3c <HAL_I2C_Flush_Data+0xc>)
 80a1d34:	681b      	ldr	r3, [r3, #0]
 80a1d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1d38:	9301      	str	r3, [sp, #4]
 80a1d3a:	bd08      	pop	{r3, pc}
 80a1d3c:	080601ac 	.word	0x080601ac

080a1d40 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1d40:	b508      	push	{r3, lr}
 80a1d42:	4b02      	ldr	r3, [pc, #8]	; (80a1d4c <HAL_I2C_Is_Enabled+0xc>)
 80a1d44:	681b      	ldr	r3, [r3, #0]
 80a1d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1d48:	9301      	str	r3, [sp, #4]
 80a1d4a:	bd08      	pop	{r3, pc}
 80a1d4c:	080601ac 	.word	0x080601ac

080a1d50 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1d50:	b508      	push	{r3, lr}
 80a1d52:	4b03      	ldr	r3, [pc, #12]	; (80a1d60 <HAL_I2C_Init+0x10>)
 80a1d54:	681b      	ldr	r3, [r3, #0]
 80a1d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1d5a:	9301      	str	r3, [sp, #4]
 80a1d5c:	bd08      	pop	{r3, pc}
 80a1d5e:	0000      	.short	0x0000
 80a1d60:	080601ac 	.word	0x080601ac

080a1d64 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1d64:	b508      	push	{r3, lr}
 80a1d66:	4b02      	ldr	r3, [pc, #8]	; (80a1d70 <socket_handle_valid+0xc>)
 80a1d68:	681b      	ldr	r3, [r3, #0]
 80a1d6a:	685b      	ldr	r3, [r3, #4]
 80a1d6c:	9301      	str	r3, [sp, #4]
 80a1d6e:	bd08      	pop	{r3, pc}
 80a1d70:	080601bc 	.word	0x080601bc

080a1d74 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1d74:	b508      	push	{r3, lr}
 80a1d76:	4b02      	ldr	r3, [pc, #8]	; (80a1d80 <socket_create+0xc>)
 80a1d78:	681b      	ldr	r3, [r3, #0]
 80a1d7a:	689b      	ldr	r3, [r3, #8]
 80a1d7c:	9301      	str	r3, [sp, #4]
 80a1d7e:	bd08      	pop	{r3, pc}
 80a1d80:	080601bc 	.word	0x080601bc

080a1d84 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1d84:	b508      	push	{r3, lr}
 80a1d86:	4b02      	ldr	r3, [pc, #8]	; (80a1d90 <socket_receivefrom+0xc>)
 80a1d88:	681b      	ldr	r3, [r3, #0]
 80a1d8a:	695b      	ldr	r3, [r3, #20]
 80a1d8c:	9301      	str	r3, [sp, #4]
 80a1d8e:	bd08      	pop	{r3, pc}
 80a1d90:	080601bc 	.word	0x080601bc

080a1d94 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a1d94:	b508      	push	{r3, lr}
 80a1d96:	4b02      	ldr	r3, [pc, #8]	; (80a1da0 <socket_sendto+0xc>)
 80a1d98:	681b      	ldr	r3, [r3, #0]
 80a1d9a:	69db      	ldr	r3, [r3, #28]
 80a1d9c:	9301      	str	r3, [sp, #4]
 80a1d9e:	bd08      	pop	{r3, pc}
 80a1da0:	080601bc 	.word	0x080601bc

080a1da4 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1da4:	b508      	push	{r3, lr}
 80a1da6:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <socket_close+0xc>)
 80a1da8:	681b      	ldr	r3, [r3, #0]
 80a1daa:	6a1b      	ldr	r3, [r3, #32]
 80a1dac:	9301      	str	r3, [sp, #4]
 80a1dae:	bd08      	pop	{r3, pc}
 80a1db0:	080601bc 	.word	0x080601bc

080a1db4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1db4:	b508      	push	{r3, lr}
 80a1db6:	4b02      	ldr	r3, [pc, #8]	; (80a1dc0 <socket_handle_invalid+0xc>)
 80a1db8:	681b      	ldr	r3, [r3, #0]
 80a1dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1dbc:	9301      	str	r3, [sp, #4]
 80a1dbe:	bd08      	pop	{r3, pc}
 80a1dc0:	080601bc 	.word	0x080601bc

080a1dc4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1dc4:	b508      	push	{r3, lr}
 80a1dc6:	4b02      	ldr	r3, [pc, #8]	; (80a1dd0 <HAL_SPI_Begin+0xc>)
 80a1dc8:	681b      	ldr	r3, [r3, #0]
 80a1dca:	681b      	ldr	r3, [r3, #0]
 80a1dcc:	9301      	str	r3, [sp, #4]
 80a1dce:	bd08      	pop	{r3, pc}
 80a1dd0:	080601b4 	.word	0x080601b4

080a1dd4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a1dd4:	b508      	push	{r3, lr}
 80a1dd6:	4b02      	ldr	r3, [pc, #8]	; (80a1de0 <HAL_SPI_Set_Bit_Order+0xc>)
 80a1dd8:	681b      	ldr	r3, [r3, #0]
 80a1dda:	689b      	ldr	r3, [r3, #8]
 80a1ddc:	9301      	str	r3, [sp, #4]
 80a1dde:	bd08      	pop	{r3, pc}
 80a1de0:	080601b4 	.word	0x080601b4

080a1de4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a1de4:	b508      	push	{r3, lr}
 80a1de6:	4b02      	ldr	r3, [pc, #8]	; (80a1df0 <HAL_SPI_Set_Data_Mode+0xc>)
 80a1de8:	681b      	ldr	r3, [r3, #0]
 80a1dea:	68db      	ldr	r3, [r3, #12]
 80a1dec:	9301      	str	r3, [sp, #4]
 80a1dee:	bd08      	pop	{r3, pc}
 80a1df0:	080601b4 	.word	0x080601b4

080a1df4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a1df4:	b508      	push	{r3, lr}
 80a1df6:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a1df8:	681b      	ldr	r3, [r3, #0]
 80a1dfa:	691b      	ldr	r3, [r3, #16]
 80a1dfc:	9301      	str	r3, [sp, #4]
 80a1dfe:	bd08      	pop	{r3, pc}
 80a1e00:	080601b4 	.word	0x080601b4

080a1e04 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1e04:	b508      	push	{r3, lr}
 80a1e06:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1e08:	681b      	ldr	r3, [r3, #0]
 80a1e0a:	695b      	ldr	r3, [r3, #20]
 80a1e0c:	9301      	str	r3, [sp, #4]
 80a1e0e:	bd08      	pop	{r3, pc}
 80a1e10:	080601b4 	.word	0x080601b4

080a1e14 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1e14:	b508      	push	{r3, lr}
 80a1e16:	4b02      	ldr	r3, [pc, #8]	; (80a1e20 <HAL_SPI_Init+0xc>)
 80a1e18:	681b      	ldr	r3, [r3, #0]
 80a1e1a:	69db      	ldr	r3, [r3, #28]
 80a1e1c:	9301      	str	r3, [sp, #4]
 80a1e1e:	bd08      	pop	{r3, pc}
 80a1e20:	080601b4 	.word	0x080601b4

080a1e24 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1e24:	b508      	push	{r3, lr}
 80a1e26:	4b02      	ldr	r3, [pc, #8]	; (80a1e30 <HAL_SPI_Is_Enabled+0xc>)
 80a1e28:	681b      	ldr	r3, [r3, #0]
 80a1e2a:	6a1b      	ldr	r3, [r3, #32]
 80a1e2c:	9301      	str	r3, [sp, #4]
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	080601b4 	.word	0x080601b4

080a1e34 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1e34:	b508      	push	{r3, lr}
 80a1e36:	4b02      	ldr	r3, [pc, #8]	; (80a1e40 <HAL_SPI_Info+0xc>)
 80a1e38:	681b      	ldr	r3, [r3, #0]
 80a1e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1e3c:	9301      	str	r3, [sp, #4]
 80a1e3e:	bd08      	pop	{r3, pc}
 80a1e40:	080601b4 	.word	0x080601b4

080a1e44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1e44:	b508      	push	{r3, lr}
 80a1e46:	4b02      	ldr	r3, [pc, #8]	; (80a1e50 <HAL_USART_Init+0xc>)
 80a1e48:	681b      	ldr	r3, [r3, #0]
 80a1e4a:	699b      	ldr	r3, [r3, #24]
 80a1e4c:	9301      	str	r3, [sp, #4]
 80a1e4e:	bd08      	pop	{r3, pc}
 80a1e50:	080601c4 	.word	0x080601c4

080a1e54 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1e54:	b508      	push	{r3, lr}
 80a1e56:	4b02      	ldr	r3, [pc, #8]	; (80a1e60 <HAL_USART_Write_Data+0xc>)
 80a1e58:	681b      	ldr	r3, [r3, #0]
 80a1e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1e5c:	9301      	str	r3, [sp, #4]
 80a1e5e:	bd08      	pop	{r3, pc}
 80a1e60:	080601c4 	.word	0x080601c4

080a1e64 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1e64:	b508      	push	{r3, lr}
 80a1e66:	4b02      	ldr	r3, [pc, #8]	; (80a1e70 <HAL_USART_Available_Data+0xc>)
 80a1e68:	681b      	ldr	r3, [r3, #0]
 80a1e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1e6c:	9301      	str	r3, [sp, #4]
 80a1e6e:	bd08      	pop	{r3, pc}
 80a1e70:	080601c4 	.word	0x080601c4

080a1e74 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1e74:	b508      	push	{r3, lr}
 80a1e76:	4b02      	ldr	r3, [pc, #8]	; (80a1e80 <HAL_USART_Read_Data+0xc>)
 80a1e78:	681b      	ldr	r3, [r3, #0]
 80a1e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e7c:	9301      	str	r3, [sp, #4]
 80a1e7e:	bd08      	pop	{r3, pc}
 80a1e80:	080601c4 	.word	0x080601c4

080a1e84 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1e84:	b508      	push	{r3, lr}
 80a1e86:	4b02      	ldr	r3, [pc, #8]	; (80a1e90 <HAL_USART_Peek_Data+0xc>)
 80a1e88:	681b      	ldr	r3, [r3, #0]
 80a1e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e8c:	9301      	str	r3, [sp, #4]
 80a1e8e:	bd08      	pop	{r3, pc}
 80a1e90:	080601c4 	.word	0x080601c4

080a1e94 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1e94:	b508      	push	{r3, lr}
 80a1e96:	4b02      	ldr	r3, [pc, #8]	; (80a1ea0 <HAL_USART_Flush_Data+0xc>)
 80a1e98:	681b      	ldr	r3, [r3, #0]
 80a1e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1e9c:	9301      	str	r3, [sp, #4]
 80a1e9e:	bd08      	pop	{r3, pc}
 80a1ea0:	080601c4 	.word	0x080601c4

080a1ea4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1ea4:	b508      	push	{r3, lr}
 80a1ea6:	4b02      	ldr	r3, [pc, #8]	; (80a1eb0 <HAL_USART_Is_Enabled+0xc>)
 80a1ea8:	681b      	ldr	r3, [r3, #0]
 80a1eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1eac:	9301      	str	r3, [sp, #4]
 80a1eae:	bd08      	pop	{r3, pc}
 80a1eb0:	080601c4 	.word	0x080601c4

080a1eb4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1eb4:	b508      	push	{r3, lr}
 80a1eb6:	4b02      	ldr	r3, [pc, #8]	; (80a1ec0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1eb8:	681b      	ldr	r3, [r3, #0]
 80a1eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1ebc:	9301      	str	r3, [sp, #4]
 80a1ebe:	bd08      	pop	{r3, pc}
 80a1ec0:	080601c4 	.word	0x080601c4

080a1ec4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1ec4:	b508      	push	{r3, lr}
 80a1ec6:	4b02      	ldr	r3, [pc, #8]	; (80a1ed0 <HAL_USB_USART_Init+0xc>)
 80a1ec8:	681b      	ldr	r3, [r3, #0]
 80a1eca:	681b      	ldr	r3, [r3, #0]
 80a1ecc:	9301      	str	r3, [sp, #4]
 80a1ece:	bd08      	pop	{r3, pc}
 80a1ed0:	080601d8 	.word	0x080601d8

080a1ed4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1ed4:	b508      	push	{r3, lr}
 80a1ed6:	4b02      	ldr	r3, [pc, #8]	; (80a1ee0 <HAL_USB_USART_Begin+0xc>)
 80a1ed8:	681b      	ldr	r3, [r3, #0]
 80a1eda:	685b      	ldr	r3, [r3, #4]
 80a1edc:	9301      	str	r3, [sp, #4]
 80a1ede:	bd08      	pop	{r3, pc}
 80a1ee0:	080601d8 	.word	0x080601d8

080a1ee4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1ee4:	b508      	push	{r3, lr}
 80a1ee6:	4b02      	ldr	r3, [pc, #8]	; (80a1ef0 <HAL_USB_USART_Available_Data+0xc>)
 80a1ee8:	681b      	ldr	r3, [r3, #0]
 80a1eea:	691b      	ldr	r3, [r3, #16]
 80a1eec:	9301      	str	r3, [sp, #4]
 80a1eee:	bd08      	pop	{r3, pc}
 80a1ef0:	080601d8 	.word	0x080601d8

080a1ef4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1ef4:	b508      	push	{r3, lr}
 80a1ef6:	4b02      	ldr	r3, [pc, #8]	; (80a1f00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1ef8:	681b      	ldr	r3, [r3, #0]
 80a1efa:	695b      	ldr	r3, [r3, #20]
 80a1efc:	9301      	str	r3, [sp, #4]
 80a1efe:	bd08      	pop	{r3, pc}
 80a1f00:	080601d8 	.word	0x080601d8

080a1f04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1f04:	b508      	push	{r3, lr}
 80a1f06:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <HAL_USB_USART_Receive_Data+0xc>)
 80a1f08:	681b      	ldr	r3, [r3, #0]
 80a1f0a:	699b      	ldr	r3, [r3, #24]
 80a1f0c:	9301      	str	r3, [sp, #4]
 80a1f0e:	bd08      	pop	{r3, pc}
 80a1f10:	080601d8 	.word	0x080601d8

080a1f14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1f14:	b508      	push	{r3, lr}
 80a1f16:	4b02      	ldr	r3, [pc, #8]	; (80a1f20 <HAL_USB_USART_Send_Data+0xc>)
 80a1f18:	681b      	ldr	r3, [r3, #0]
 80a1f1a:	69db      	ldr	r3, [r3, #28]
 80a1f1c:	9301      	str	r3, [sp, #4]
 80a1f1e:	bd08      	pop	{r3, pc}
 80a1f20:	080601d8 	.word	0x080601d8

080a1f24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1f24:	b508      	push	{r3, lr}
 80a1f26:	4b02      	ldr	r3, [pc, #8]	; (80a1f30 <HAL_USB_USART_Flush_Data+0xc>)
 80a1f28:	681b      	ldr	r3, [r3, #0]
 80a1f2a:	6a1b      	ldr	r3, [r3, #32]
 80a1f2c:	9301      	str	r3, [sp, #4]
 80a1f2e:	bd08      	pop	{r3, pc}
 80a1f30:	080601d8 	.word	0x080601d8

080a1f34 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1f34:	b508      	push	{r3, lr}
 80a1f36:	4b02      	ldr	r3, [pc, #8]	; (80a1f40 <HAL_USB_USART_Is_Enabled+0xc>)
 80a1f38:	681b      	ldr	r3, [r3, #0]
 80a1f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1f3c:	9301      	str	r3, [sp, #4]
 80a1f3e:	bd08      	pop	{r3, pc}
 80a1f40:	080601d8 	.word	0x080601d8

080a1f44 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1f44:	b508      	push	{r3, lr}
 80a1f46:	4b02      	ldr	r3, [pc, #8]	; (80a1f50 <inet_gethostbyname+0xc>)
 80a1f48:	681b      	ldr	r3, [r3, #0]
 80a1f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1f4c:	9301      	str	r3, [sp, #4]
 80a1f4e:	bd08      	pop	{r3, pc}
 80a1f50:	080601c0 	.word	0x080601c0

080a1f54 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1f54:	b508      	push	{r3, lr}
 80a1f56:	4b02      	ldr	r3, [pc, #8]	; (80a1f60 <set_system_mode+0xc>)
 80a1f58:	681b      	ldr	r3, [r3, #0]
 80a1f5a:	685b      	ldr	r3, [r3, #4]
 80a1f5c:	9301      	str	r3, [sp, #4]
 80a1f5e:	bd08      	pop	{r3, pc}
 80a1f60:	080601a4 	.word	0x080601a4

080a1f64 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1f64:	b508      	push	{r3, lr}
 80a1f66:	4b02      	ldr	r3, [pc, #8]	; (80a1f70 <system_thread_set_state+0xc>)
 80a1f68:	681b      	ldr	r3, [r3, #0]
 80a1f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1f6c:	9301      	str	r3, [sp, #4]
 80a1f6e:	bd08      	pop	{r3, pc}
 80a1f70:	080601a4 	.word	0x080601a4

080a1f74 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1f74:	b508      	push	{r3, lr}
 80a1f76:	4b03      	ldr	r3, [pc, #12]	; (80a1f84 <system_ctrl_set_app_request_handler+0x10>)
 80a1f78:	681b      	ldr	r3, [r3, #0]
 80a1f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1f7e:	9301      	str	r3, [sp, #4]
 80a1f80:	bd08      	pop	{r3, pc}
 80a1f82:	0000      	.short	0x0000
 80a1f84:	080601a4 	.word	0x080601a4

080a1f88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1f88:	b508      	push	{r3, lr}
 80a1f8a:	4b03      	ldr	r3, [pc, #12]	; (80a1f98 <system_ctrl_set_result+0x10>)
 80a1f8c:	681b      	ldr	r3, [r3, #0]
 80a1f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1f92:	9301      	str	r3, [sp, #4]
 80a1f94:	bd08      	pop	{r3, pc}
 80a1f96:	0000      	.short	0x0000
 80a1f98:	080601a4 	.word	0x080601a4

080a1f9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1f9c:	b508      	push	{r3, lr}
 80a1f9e:	4b02      	ldr	r3, [pc, #8]	; (80a1fa8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1fa0:	681b      	ldr	r3, [r3, #0]
 80a1fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1fa4:	9301      	str	r3, [sp, #4]
 80a1fa6:	bd08      	pop	{r3, pc}
 80a1fa8:	080601cc 	.word	0x080601cc

080a1fac <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a1fac:	b508      	push	{r3, lr}
 80a1fae:	4b02      	ldr	r3, [pc, #8]	; (80a1fb8 <network_config+0xc>)
 80a1fb0:	681b      	ldr	r3, [r3, #0]
 80a1fb2:	681b      	ldr	r3, [r3, #0]
 80a1fb4:	9301      	str	r3, [sp, #4]
 80a1fb6:	bd08      	pop	{r3, pc}
 80a1fb8:	080601c8 	.word	0x080601c8

080a1fbc <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1fbc:	b508      	push	{r3, lr}
 80a1fbe:	4b02      	ldr	r3, [pc, #8]	; (80a1fc8 <network_connect+0xc>)
 80a1fc0:	681b      	ldr	r3, [r3, #0]
 80a1fc2:	685b      	ldr	r3, [r3, #4]
 80a1fc4:	9301      	str	r3, [sp, #4]
 80a1fc6:	bd08      	pop	{r3, pc}
 80a1fc8:	080601c8 	.word	0x080601c8

080a1fcc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1fcc:	b508      	push	{r3, lr}
 80a1fce:	4b02      	ldr	r3, [pc, #8]	; (80a1fd8 <network_connecting+0xc>)
 80a1fd0:	681b      	ldr	r3, [r3, #0]
 80a1fd2:	689b      	ldr	r3, [r3, #8]
 80a1fd4:	9301      	str	r3, [sp, #4]
 80a1fd6:	bd08      	pop	{r3, pc}
 80a1fd8:	080601c8 	.word	0x080601c8

080a1fdc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1fdc:	b508      	push	{r3, lr}
 80a1fde:	4b02      	ldr	r3, [pc, #8]	; (80a1fe8 <network_disconnect+0xc>)
 80a1fe0:	681b      	ldr	r3, [r3, #0]
 80a1fe2:	68db      	ldr	r3, [r3, #12]
 80a1fe4:	9301      	str	r3, [sp, #4]
 80a1fe6:	bd08      	pop	{r3, pc}
 80a1fe8:	080601c8 	.word	0x080601c8

080a1fec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1fec:	b508      	push	{r3, lr}
 80a1fee:	4b02      	ldr	r3, [pc, #8]	; (80a1ff8 <network_ready+0xc>)
 80a1ff0:	681b      	ldr	r3, [r3, #0]
 80a1ff2:	691b      	ldr	r3, [r3, #16]
 80a1ff4:	9301      	str	r3, [sp, #4]
 80a1ff6:	bd08      	pop	{r3, pc}
 80a1ff8:	080601c8 	.word	0x080601c8

080a1ffc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ffc:	b508      	push	{r3, lr}
 80a1ffe:	4b02      	ldr	r3, [pc, #8]	; (80a2008 <network_on+0xc>)
 80a2000:	681b      	ldr	r3, [r3, #0]
 80a2002:	695b      	ldr	r3, [r3, #20]
 80a2004:	9301      	str	r3, [sp, #4]
 80a2006:	bd08      	pop	{r3, pc}
 80a2008:	080601c8 	.word	0x080601c8

080a200c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a200c:	b508      	push	{r3, lr}
 80a200e:	4b02      	ldr	r3, [pc, #8]	; (80a2018 <network_off+0xc>)
 80a2010:	681b      	ldr	r3, [r3, #0]
 80a2012:	699b      	ldr	r3, [r3, #24]
 80a2014:	9301      	str	r3, [sp, #4]
 80a2016:	bd08      	pop	{r3, pc}
 80a2018:	080601c8 	.word	0x080601c8

080a201c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a201c:	b508      	push	{r3, lr}
 80a201e:	4b02      	ldr	r3, [pc, #8]	; (80a2028 <network_listen+0xc>)
 80a2020:	681b      	ldr	r3, [r3, #0]
 80a2022:	69db      	ldr	r3, [r3, #28]
 80a2024:	9301      	str	r3, [sp, #4]
 80a2026:	bd08      	pop	{r3, pc}
 80a2028:	080601c8 	.word	0x080601c8

080a202c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a202c:	b508      	push	{r3, lr}
 80a202e:	4b02      	ldr	r3, [pc, #8]	; (80a2038 <network_listening+0xc>)
 80a2030:	681b      	ldr	r3, [r3, #0]
 80a2032:	6a1b      	ldr	r3, [r3, #32]
 80a2034:	9301      	str	r3, [sp, #4]
 80a2036:	bd08      	pop	{r3, pc}
 80a2038:	080601c8 	.word	0x080601c8

080a203c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a203c:	b508      	push	{r3, lr}
 80a203e:	4b02      	ldr	r3, [pc, #8]	; (80a2048 <network_set_listen_timeout+0xc>)
 80a2040:	681b      	ldr	r3, [r3, #0]
 80a2042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2044:	9301      	str	r3, [sp, #4]
 80a2046:	bd08      	pop	{r3, pc}
 80a2048:	080601c8 	.word	0x080601c8

080a204c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a204c:	b508      	push	{r3, lr}
 80a204e:	4b02      	ldr	r3, [pc, #8]	; (80a2058 <network_get_listen_timeout+0xc>)
 80a2050:	681b      	ldr	r3, [r3, #0]
 80a2052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2054:	9301      	str	r3, [sp, #4]
 80a2056:	bd08      	pop	{r3, pc}
 80a2058:	080601c8 	.word	0x080601c8

080a205c <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a205c:	b508      	push	{r3, lr}
 80a205e:	4b02      	ldr	r3, [pc, #8]	; (80a2068 <network_set_hostname+0xc>)
 80a2060:	681b      	ldr	r3, [r3, #0]
 80a2062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2064:	9301      	str	r3, [sp, #4]
 80a2066:	bd08      	pop	{r3, pc}
 80a2068:	080601c8 	.word	0x080601c8

080a206c <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a206c:	b508      	push	{r3, lr}
 80a206e:	4b02      	ldr	r3, [pc, #8]	; (80a2078 <network_get_hostname+0xc>)
 80a2070:	681b      	ldr	r3, [r3, #0]
 80a2072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2074:	9301      	str	r3, [sp, #4]
 80a2076:	bd08      	pop	{r3, pc}
 80a2078:	080601c8 	.word	0x080601c8

080a207c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a207c:	b508      	push	{r3, lr}
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <malloc+0xc>)
 80a2080:	681b      	ldr	r3, [r3, #0]
 80a2082:	681b      	ldr	r3, [r3, #0]
 80a2084:	9301      	str	r3, [sp, #4]
 80a2086:	bd08      	pop	{r3, pc}
 80a2088:	080601a0 	.word	0x080601a0

080a208c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a208c:	b508      	push	{r3, lr}
 80a208e:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <free+0xc>)
 80a2090:	681b      	ldr	r3, [r3, #0]
 80a2092:	685b      	ldr	r3, [r3, #4]
 80a2094:	9301      	str	r3, [sp, #4]
 80a2096:	bd08      	pop	{r3, pc}
 80a2098:	080601a0 	.word	0x080601a0

080a209c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a209c:	b508      	push	{r3, lr}
 80a209e:	4b02      	ldr	r3, [pc, #8]	; (80a20a8 <realloc+0xc>)
 80a20a0:	681b      	ldr	r3, [r3, #0]
 80a20a2:	689b      	ldr	r3, [r3, #8]
 80a20a4:	9301      	str	r3, [sp, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	080601a0 	.word	0x080601a0

080a20ac <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a20ac:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a20ae:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a20b0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a20b2:	b113      	cbz	r3, 80a20ba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a20b4:	2203      	movs	r2, #3
 80a20b6:	4601      	mov	r1, r0
 80a20b8:	4798      	blx	r3
    }
 80a20ba:	4620      	mov	r0, r4
 80a20bc:	bd10      	pop	{r4, pc}

080a20be <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a20be:	4770      	bx	lr

080a20c0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a20c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20c2:	4606      	mov	r6, r0
 80a20c4:	4615      	mov	r5, r2
 80a20c6:	460c      	mov	r4, r1
 80a20c8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20ca:	42bc      	cmp	r4, r7
 80a20cc:	d006      	beq.n	80a20dc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a20ce:	6833      	ldr	r3, [r6, #0]
 80a20d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a20d4:	689b      	ldr	r3, [r3, #8]
 80a20d6:	4630      	mov	r0, r6
 80a20d8:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20da:	e7f6      	b.n	80a20ca <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a20dc:	4628      	mov	r0, r5
 80a20de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20e0 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a20e0:	2200      	movs	r2, #0
 80a20e2:	7c00      	ldrb	r0, [r0, #16]
 80a20e4:	f7ff be04 	b.w	80a1cf0 <HAL_I2C_Write_Data>

080a20e8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a20e8:	2100      	movs	r1, #0
 80a20ea:	7c00      	ldrb	r0, [r0, #16]
 80a20ec:	f7ff be08 	b.w	80a1d00 <HAL_I2C_Available_Data>

080a20f0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a20f0:	2100      	movs	r1, #0
 80a20f2:	7c00      	ldrb	r0, [r0, #16]
 80a20f4:	f7ff be0c 	b.w	80a1d10 <HAL_I2C_Read_Data>

080a20f8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a20f8:	2100      	movs	r1, #0
 80a20fa:	7c00      	ldrb	r0, [r0, #16]
 80a20fc:	f7ff be10 	b.w	80a1d20 <HAL_I2C_Peek_Data>

080a2100 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2100:	2100      	movs	r1, #0
 80a2102:	7c00      	ldrb	r0, [r0, #16]
 80a2104:	f7ff be14 	b.w	80a1d30 <HAL_I2C_Flush_Data>

080a2108 <_ZN7TwoWireD0Ev>:
 80a2108:	b510      	push	{r4, lr}
 80a210a:	4604      	mov	r4, r0
 80a210c:	2114      	movs	r1, #20
 80a210e:	f000 ffa8 	bl	80a3062 <_ZdlPvj>
 80a2112:	4620      	mov	r0, r4
 80a2114:	bd10      	pop	{r4, pc}
	...

080a2118 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2118:	b510      	push	{r4, lr}
 80a211a:	4604      	mov	r4, r0
 80a211c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2122:	60a3      	str	r3, [r4, #8]
 80a2124:	4b04      	ldr	r3, [pc, #16]	; (80a2138 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2126:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2128:	7420      	strb	r0, [r4, #16]
 80a212a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a212c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a212e:	f7ff fe0f 	bl	80a1d50 <HAL_I2C_Init>

}
 80a2132:	4620      	mov	r0, r4
 80a2134:	bd10      	pop	{r4, pc}
 80a2136:	bf00      	nop
 80a2138:	080a396c 	.word	0x080a396c

080a213c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a213c:	2300      	movs	r3, #0
 80a213e:	461a      	mov	r2, r3
 80a2140:	4619      	mov	r1, r3
 80a2142:	7c00      	ldrb	r0, [r0, #16]
 80a2144:	f7ff bdb4 	b.w	80a1cb0 <HAL_I2C_Begin>

080a2148 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2148:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a214a:	2400      	movs	r4, #0
 80a214c:	7c00      	ldrb	r0, [r0, #16]
 80a214e:	9400      	str	r4, [sp, #0]
 80a2150:	f7ff fdb6 	bl	80a1cc0 <HAL_I2C_Request_Data>
  return result;
}
 80a2154:	b2c0      	uxtb	r0, r0
 80a2156:	b002      	add	sp, #8
 80a2158:	bd10      	pop	{r4, pc}

080a215a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a215a:	2301      	movs	r3, #1
 80a215c:	f7ff bff4 	b.w	80a2148 <_ZN7TwoWire11requestFromEhhh>

080a2160 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2160:	2200      	movs	r2, #0
 80a2162:	7c00      	ldrb	r0, [r0, #16]
 80a2164:	f7ff bdb4 	b.w	80a1cd0 <HAL_I2C_Begin_Transmission>

080a2168 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2168:	2200      	movs	r2, #0
 80a216a:	7c00      	ldrb	r0, [r0, #16]
 80a216c:	f7ff bdb8 	b.w	80a1ce0 <HAL_I2C_End_Transmission>

080a2170 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2170:	2101      	movs	r1, #1
 80a2172:	f7ff bff9 	b.w	80a2168 <_ZN7TwoWire15endTransmissionEh>

080a2176 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2176:	2100      	movs	r1, #0
 80a2178:	7c00      	ldrb	r0, [r0, #16]
 80a217a:	f7ff bde1 	b.w	80a1d40 <HAL_I2C_Is_Enabled>

080a217e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a217e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2180:	460f      	mov	r7, r1
 80a2182:	f100 0608 	add.w	r6, r0, #8
 80a2186:	1d05      	adds	r5, r0, #4
 80a2188:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a218a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a218e:	220a      	movs	r2, #10
 80a2190:	4638      	mov	r0, r7
 80a2192:	f000 f94e 	bl	80a2432 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2196:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2198:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a219a:	d007      	beq.n	80a21ac <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a219c:	2c00      	cmp	r4, #0
 80a219e:	d0f4      	beq.n	80a218a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a21a0:	212e      	movs	r1, #46	; 0x2e
 80a21a2:	4638      	mov	r0, r7
 80a21a4:	f000 f8f2 	bl	80a238c <_ZN5Print5printEc>
 80a21a8:	4404      	add	r4, r0
 80a21aa:	e7ee      	b.n	80a218a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a21ac:	4620      	mov	r0, r4
 80a21ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21b0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a21b0:	b510      	push	{r4, lr}
 80a21b2:	4604      	mov	r4, r0
 80a21b4:	4b04      	ldr	r3, [pc, #16]	; (80a21c8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a21b6:	2211      	movs	r2, #17
 80a21b8:	f840 3b04 	str.w	r3, [r0], #4
 80a21bc:	2100      	movs	r1, #0
 80a21be:	f001 fb12 	bl	80a37e6 <memset>
{
    clear();
}
 80a21c2:	4620      	mov	r0, r4
 80a21c4:	bd10      	pop	{r4, pc}
 80a21c6:	bf00      	nop
 80a21c8:	080a3994 	.word	0x080a3994

080a21cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a21cc:	4603      	mov	r3, r0
 80a21ce:	4a07      	ldr	r2, [pc, #28]	; (80a21ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a21d0:	b510      	push	{r4, lr}
 80a21d2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a21d6:	f101 0210 	add.w	r2, r1, #16
 80a21da:	f851 4b04 	ldr.w	r4, [r1], #4
 80a21de:	4291      	cmp	r1, r2
 80a21e0:	f843 4b04 	str.w	r4, [r3], #4
 80a21e4:	d1f9      	bne.n	80a21da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a21e6:	780a      	ldrb	r2, [r1, #0]
 80a21e8:	701a      	strb	r2, [r3, #0]
}
 80a21ea:	bd10      	pop	{r4, pc}
 80a21ec:	080a3994 	.word	0x080a3994

080a21f0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a21f0:	4a02      	ldr	r2, [pc, #8]	; (80a21fc <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a21f2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a21f4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a21f6:	2204      	movs	r2, #4
 80a21f8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a21fa:	4770      	bx	lr
 80a21fc:	080a3994 	.word	0x080a3994

080a2200 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2200:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2202:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2206:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a220a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a220e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2212:	2304      	movs	r3, #4
 80a2214:	6041      	str	r1, [r0, #4]
 80a2216:	7503      	strb	r3, [r0, #20]
 80a2218:	bd10      	pop	{r4, pc}
	...

080a221c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a221c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a221e:	4d04      	ldr	r5, [pc, #16]	; (80a2230 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2220:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2222:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2226:	9500      	str	r5, [sp, #0]
 80a2228:	f7ff ffea 	bl	80a2200 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a222c:	b003      	add	sp, #12
 80a222e:	bd30      	pop	{r4, r5, pc}
 80a2230:	080a3994 	.word	0x080a3994

080a2234 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a2234:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a2236:	780d      	ldrb	r5, [r1, #0]
 80a2238:	788b      	ldrb	r3, [r1, #2]
 80a223a:	784a      	ldrb	r2, [r1, #1]
 80a223c:	78c9      	ldrb	r1, [r1, #3]
 80a223e:	9100      	str	r1, [sp, #0]
 80a2240:	4629      	mov	r1, r5
 80a2242:	f7ff ffdd 	bl	80a2200 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a2246:	b003      	add	sp, #12
 80a2248:	bd30      	pop	{r4, r5, pc}
	...

080a224c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a224c:	4a01      	ldr	r2, [pc, #4]	; (80a2254 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a224e:	4b02      	ldr	r3, [pc, #8]	; (80a2258 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2250:	601a      	str	r2, [r3, #0]
 80a2252:	4770      	bx	lr
 80a2254:	080a3a16 	.word	0x080a3a16
 80a2258:	200001ac 	.word	0x200001ac

080a225c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a225c:	2300      	movs	r3, #0
 80a225e:	461a      	mov	r2, r3
 80a2260:	6840      	ldr	r0, [r0, #4]
 80a2262:	f7ff beab 	b.w	80a1fbc <network_connect>

080a2266 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2266:	2200      	movs	r2, #0
 80a2268:	2102      	movs	r1, #2
 80a226a:	6840      	ldr	r0, [r0, #4]
 80a226c:	f7ff beb6 	b.w	80a1fdc <network_disconnect>

080a2270 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2270:	2200      	movs	r2, #0
 80a2272:	4611      	mov	r1, r2
 80a2274:	6840      	ldr	r0, [r0, #4]
 80a2276:	f7ff bea9 	b.w	80a1fcc <network_connecting>

080a227a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a227a:	2200      	movs	r2, #0
 80a227c:	4611      	mov	r1, r2
 80a227e:	6840      	ldr	r0, [r0, #4]
 80a2280:	f7ff beb4 	b.w	80a1fec <network_ready>

080a2284 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2284:	2300      	movs	r3, #0
 80a2286:	461a      	mov	r2, r3
 80a2288:	4619      	mov	r1, r3
 80a228a:	6840      	ldr	r0, [r0, #4]
 80a228c:	f7ff beb6 	b.w	80a1ffc <network_on>

080a2290 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2290:	2300      	movs	r3, #0
 80a2292:	461a      	mov	r2, r3
 80a2294:	4619      	mov	r1, r3
 80a2296:	6840      	ldr	r0, [r0, #4]
 80a2298:	f7ff beb8 	b.w	80a200c <network_off>

080a229c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a229c:	2200      	movs	r2, #0
 80a229e:	f081 0101 	eor.w	r1, r1, #1
 80a22a2:	6840      	ldr	r0, [r0, #4]
 80a22a4:	f7ff beba 	b.w	80a201c <network_listen>

080a22a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a22a8:	2200      	movs	r2, #0
 80a22aa:	6840      	ldr	r0, [r0, #4]
 80a22ac:	f7ff bec6 	b.w	80a203c <network_set_listen_timeout>

080a22b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a22b0:	2200      	movs	r2, #0
 80a22b2:	4611      	mov	r1, r2
 80a22b4:	6840      	ldr	r0, [r0, #4]
 80a22b6:	f7ff bec9 	b.w	80a204c <network_get_listen_timeout>

080a22ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a22ba:	2200      	movs	r2, #0
 80a22bc:	4611      	mov	r1, r2
 80a22be:	6840      	ldr	r0, [r0, #4]
 80a22c0:	f7ff beb4 	b.w	80a202c <network_listening>

080a22c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a22c4:	b570      	push	{r4, r5, r6, lr}
 80a22c6:	4616      	mov	r6, r2
 80a22c8:	b08e      	sub	sp, #56	; 0x38
 80a22ca:	4604      	mov	r4, r0
    IPAddress addr;
 80a22cc:	a808      	add	r0, sp, #32
 80a22ce:	f7ff ff6f 	bl	80a21b0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a22d2:	2211      	movs	r2, #17
 80a22d4:	2100      	movs	r1, #0
 80a22d6:	a803      	add	r0, sp, #12
 80a22d8:	f001 fa85 	bl	80a37e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a22dc:	4630      	mov	r0, r6
 80a22de:	f001 fab3 	bl	80a3848 <strlen>
 80a22e2:	2500      	movs	r5, #0
 80a22e4:	4b0a      	ldr	r3, [pc, #40]	; (80a2310 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a22e6:	9500      	str	r5, [sp, #0]
 80a22e8:	b281      	uxth	r1, r0
 80a22ea:	685b      	ldr	r3, [r3, #4]
 80a22ec:	aa03      	add	r2, sp, #12
 80a22ee:	4630      	mov	r0, r6
 80a22f0:	f7ff fe28 	bl	80a1f44 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a22f4:	b120      	cbz	r0, 80a2300 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a22f6:	4629      	mov	r1, r5
 80a22f8:	4620      	mov	r0, r4
 80a22fa:	f7ff ff79 	bl	80a21f0 <_ZN9IPAddressC1Em>
 80a22fe:	e003      	b.n	80a2308 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2300:	a903      	add	r1, sp, #12
 80a2302:	4620      	mov	r0, r4
 80a2304:	f7ff ff62 	bl	80a21cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2308:	4620      	mov	r0, r4
 80a230a:	b00e      	add	sp, #56	; 0x38
 80a230c:	bd70      	pop	{r4, r5, r6, pc}
 80a230e:	bf00      	nop
 80a2310:	20000630 	.word	0x20000630

080a2314 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2314:	4b03      	ldr	r3, [pc, #12]	; (80a2324 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2316:	4a04      	ldr	r2, [pc, #16]	; (80a2328 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2318:	2804      	cmp	r0, #4
 80a231a:	bf0c      	ite	eq
 80a231c:	4610      	moveq	r0, r2
 80a231e:	4618      	movne	r0, r3
 80a2320:	4770      	bx	lr
 80a2322:	bf00      	nop
 80a2324:	200001b0 	.word	0x200001b0
 80a2328:	20000630 	.word	0x20000630

080a232c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a232c:	4b02      	ldr	r3, [pc, #8]	; (80a2338 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a232e:	4a03      	ldr	r2, [pc, #12]	; (80a233c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2330:	601a      	str	r2, [r3, #0]
 80a2332:	2200      	movs	r2, #0
 80a2334:	605a      	str	r2, [r3, #4]
 80a2336:	4770      	bx	lr
 80a2338:	200001b0 	.word	0x200001b0
 80a233c:	080a3a8c 	.word	0x080a3a8c

080a2340 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2342:	4606      	mov	r6, r0
 80a2344:	460d      	mov	r5, r1
 80a2346:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2348:	2400      	movs	r4, #0
  while (size--) {
 80a234a:	42bd      	cmp	r5, r7
 80a234c:	d00c      	beq.n	80a2368 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a234e:	6833      	ldr	r3, [r6, #0]
 80a2350:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2354:	689b      	ldr	r3, [r3, #8]
 80a2356:	4630      	mov	r0, r6
 80a2358:	4798      	blx	r3
     if (chunk>=0)
 80a235a:	2800      	cmp	r0, #0
 80a235c:	db01      	blt.n	80a2362 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a235e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2360:	e7f3      	b.n	80a234a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2362:	2c00      	cmp	r4, #0
 80a2364:	bf08      	it	eq
 80a2366:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2368:	4620      	mov	r0, r4
 80a236a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a236c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a236c:	b570      	push	{r4, r5, r6, lr}
 80a236e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2370:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2372:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2374:	b149      	cbz	r1, 80a238a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2376:	f001 fa67 	bl	80a3848 <strlen>
 80a237a:	682b      	ldr	r3, [r5, #0]
 80a237c:	4602      	mov	r2, r0
 80a237e:	4621      	mov	r1, r4
 80a2380:	4628      	mov	r0, r5
    }
 80a2382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2386:	68db      	ldr	r3, [r3, #12]
 80a2388:	4718      	bx	r3
    }
 80a238a:	bd70      	pop	{r4, r5, r6, pc}

080a238c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a238c:	6803      	ldr	r3, [r0, #0]
 80a238e:	689b      	ldr	r3, [r3, #8]
 80a2390:	4718      	bx	r3

080a2392 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a2392:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a2394:	680a      	ldr	r2, [r1, #0]
 80a2396:	4601      	mov	r1, r0
 80a2398:	6812      	ldr	r2, [r2, #0]
 80a239a:	4618      	mov	r0, r3
 80a239c:	4710      	bx	r2

080a239e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a239e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a23a0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a23a2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a23a4:	f7ff fff2 	bl	80a238c <_ZN5Print5printEc>
  n += print('\n');
 80a23a8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a23aa:	4604      	mov	r4, r0
  n += print('\n');
 80a23ac:	4628      	mov	r0, r5
 80a23ae:	f7ff ffed 	bl	80a238c <_ZN5Print5printEc>
  return n;
}
 80a23b2:	4420      	add	r0, r4
 80a23b4:	bd38      	pop	{r3, r4, r5, pc}

080a23b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a23b6:	b538      	push	{r3, r4, r5, lr}
 80a23b8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23ba:	f7ff ffd7 	bl	80a236c <_ZN5Print5writeEPKc>
 80a23be:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a23c0:	4628      	mov	r0, r5
 80a23c2:	f7ff ffec 	bl	80a239e <_ZN5Print7printlnEv>
  return n;
}
 80a23c6:	4420      	add	r0, r4
 80a23c8:	bd38      	pop	{r3, r4, r5, pc}

080a23ca <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a23ca:	b538      	push	{r3, r4, r5, lr}
 80a23cc:	4605      	mov	r5, r0
   size_t n = print(x);
 80a23ce:	f7ff ffe0 	bl	80a2392 <_ZN5Print5printERK9Printable>
 80a23d2:	4604      	mov	r4, r0
   n += println();
 80a23d4:	4628      	mov	r0, r5
 80a23d6:	f7ff ffe2 	bl	80a239e <_ZN5Print7printlnEv>
   return n;
 }
 80a23da:	4420      	add	r0, r4
 80a23dc:	bd38      	pop	{r3, r4, r5, pc}

080a23de <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a23de:	2a01      	cmp	r2, #1
 80a23e0:	bf98      	it	ls
 80a23e2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a23e4:	b530      	push	{r4, r5, lr}
 80a23e6:	460b      	mov	r3, r1
 80a23e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a23ea:	2100      	movs	r1, #0
 80a23ec:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a23f0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a23f4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a23f8:	fb05 3312 	mls	r3, r5, r2, r3
 80a23fc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a23fe:	2b09      	cmp	r3, #9
 80a2400:	bf94      	ite	ls
 80a2402:	3330      	addls	r3, #48	; 0x30
 80a2404:	3337      	addhi	r3, #55	; 0x37
 80a2406:	b2db      	uxtb	r3, r3
 80a2408:	4621      	mov	r1, r4
 80a240a:	f804 3901 	strb.w	r3, [r4], #-1
 80a240e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2410:	2d00      	cmp	r5, #0
 80a2412:	d1ef      	bne.n	80a23f4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2414:	f7ff ffaa 	bl	80a236c <_ZN5Print5writeEPKc>
}
 80a2418:	b00b      	add	sp, #44	; 0x2c
 80a241a:	bd30      	pop	{r4, r5, pc}

080a241c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a241c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a241e:	b922      	cbnz	r2, 80a242a <_ZN5Print5printEmi+0xe>
 80a2420:	6803      	ldr	r3, [r0, #0]
 80a2422:	b2c9      	uxtb	r1, r1
 80a2424:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2426:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2428:	4718      	bx	r3
  else return printNumber(n, base);
 80a242a:	b2d2      	uxtb	r2, r2
}
 80a242c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a242e:	f7ff bfd6 	b.w	80a23de <_ZN5Print11printNumberEmh>

080a2432 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2432:	f7ff bff3 	b.w	80a241c <_ZN5Print5printEmi>

080a2436 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2436:	b510      	push	{r4, lr}
 80a2438:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a243a:	f7ff fe37 	bl	80a20ac <_ZNSt14_Function_baseD1Ev>
 80a243e:	4620      	mov	r0, r4
 80a2440:	bd10      	pop	{r4, pc}
	...

080a2444 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2444:	4803      	ldr	r0, [pc, #12]	; (80a2454 <_GLOBAL__sub_I_RGB+0x10>)
 80a2446:	2300      	movs	r3, #0
 80a2448:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a244a:	4a03      	ldr	r2, [pc, #12]	; (80a2458 <_GLOBAL__sub_I_RGB+0x14>)
 80a244c:	4903      	ldr	r1, [pc, #12]	; (80a245c <_GLOBAL__sub_I_RGB+0x18>)
 80a244e:	f000 be03 	b.w	80a3058 <__aeabi_atexit>
 80a2452:	bf00      	nop
 80a2454:	200001b8 	.word	0x200001b8
 80a2458:	2000007c 	.word	0x2000007c
 80a245c:	080a2437 	.word	0x080a2437

080a2460 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2460:	4770      	bx	lr

080a2462 <_ZN8SPIClassD0Ev>:
 80a2462:	b510      	push	{r4, lr}
 80a2464:	4604      	mov	r4, r0
 80a2466:	2110      	movs	r1, #16
 80a2468:	f000 fdfb 	bl	80a3062 <_ZdlPvj>
 80a246c:	4620      	mov	r0, r4
 80a246e:	bd10      	pop	{r4, pc}

080a2470 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2470:	b570      	push	{r4, r5, r6, lr}
 80a2472:	4604      	mov	r4, r0
 80a2474:	460e      	mov	r6, r1
 80a2476:	4b07      	ldr	r3, [pc, #28]	; (80a2494 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2478:	2500      	movs	r5, #0
 80a247a:	6003      	str	r3, [r0, #0]
 80a247c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2480:	f7ff fbd6 	bl	80a1c30 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2484:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2486:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2488:	f7ff fcc4 	bl	80a1e14 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a248c:	60a5      	str	r5, [r4, #8]
}
 80a248e:	4620      	mov	r0, r4
 80a2490:	bd70      	pop	{r4, r5, r6, pc}
 80a2492:	bf00      	nop
 80a2494:	080a3ac0 	.word	0x080a3ac0

080a2498 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2498:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a249c:	7900      	ldrb	r0, [r0, #4]
 80a249e:	f7ff bc91 	b.w	80a1dc4 <HAL_SPI_Begin>

080a24a2 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a24a2:	7900      	ldrb	r0, [r0, #4]
 80a24a4:	f7ff bc96 	b.w	80a1dd4 <HAL_SPI_Set_Bit_Order>

080a24a8 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a24a8:	7900      	ldrb	r0, [r0, #4]
 80a24aa:	f7ff bc9b 	b.w	80a1de4 <HAL_SPI_Set_Data_Mode>
	...

080a24b0 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a24b0:	4a05      	ldr	r2, [pc, #20]	; (80a24c8 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a24b2:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a24b4:	5c99      	ldrb	r1, [r3, r2]
 80a24b6:	4281      	cmp	r1, r0
 80a24b8:	d002      	beq.n	80a24c0 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a24ba:	3301      	adds	r3, #1
 80a24bc:	2b08      	cmp	r3, #8
 80a24be:	d1f9      	bne.n	80a24b4 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a24c0:	1c58      	adds	r0, r3, #1
}
 80a24c2:	b2c0      	uxtb	r0, r0
 80a24c4:	4770      	bx	lr
 80a24c6:	bf00      	nop
 80a24c8:	080a3ac8 	.word	0x080a3ac8

080a24cc <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a24cc:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a24ce:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a24d0:	6018      	str	r0, [r3, #0]
 80a24d2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a24d4:	6818      	ldr	r0, [r3, #0]
 80a24d6:	b2e5      	uxtb	r5, r4
 80a24d8:	4288      	cmp	r0, r1
 80a24da:	d906      	bls.n	80a24ea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a24dc:	3401      	adds	r4, #1
 80a24de:	2c08      	cmp	r4, #8
 80a24e0:	d002      	beq.n	80a24e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a24e2:	0840      	lsrs	r0, r0, #1
 80a24e4:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a24e6:	e7f5      	b.n	80a24d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a24e8:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a24ea:	4b02      	ldr	r3, [pc, #8]	; (80a24f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a24ec:	5d5b      	ldrb	r3, [r3, r5]
 80a24ee:	7013      	strb	r3, [r2, #0]
 80a24f0:	bd30      	pop	{r4, r5, pc}
 80a24f2:	bf00      	nop
 80a24f4:	080a3ac8 	.word	0x080a3ac8

080a24f8 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a24f8:	b570      	push	{r4, r5, r6, lr}
 80a24fa:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a24fc:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2500:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2502:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2504:	2214      	movs	r2, #20
 80a2506:	2100      	movs	r1, #0
 80a2508:	a803      	add	r0, sp, #12
 80a250a:	f001 f96c 	bl	80a37e6 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a250e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2510:	a903      	add	r1, sp, #12
 80a2512:	4630      	mov	r0, r6
 80a2514:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2516:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a251a:	f7ff fc8b 	bl	80a1e34 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a251e:	ab02      	add	r3, sp, #8
 80a2520:	f10d 0207 	add.w	r2, sp, #7
 80a2524:	4629      	mov	r1, r5
 80a2526:	9804      	ldr	r0, [sp, #16]
 80a2528:	f7ff ffd0 	bl	80a24cc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a252c:	7920      	ldrb	r0, [r4, #4]
 80a252e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2532:	f7ff fc5f 	bl	80a1df4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a2536:	9802      	ldr	r0, [sp, #8]
 80a2538:	b008      	add	sp, #32
 80a253a:	bd70      	pop	{r4, r5, r6, pc}

080a253c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a253c:	b538      	push	{r3, r4, r5, lr}
 80a253e:	4604      	mov	r4, r0
    if (dividerReference)
 80a2540:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2542:	4608      	mov	r0, r1
    if (dividerReference)
 80a2544:	b14d      	cbz	r5, 80a255a <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a2546:	f7ff ffb3 	bl	80a24b0 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a254a:	2201      	movs	r2, #1
 80a254c:	fa25 f100 	lsr.w	r1, r5, r0
 80a2550:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a2552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2556:	f7ff bfcf 	b.w	80a24f8 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a255a:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a255c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2560:	f7ff bc48 	b.w	80a1df4 <HAL_SPI_Set_Clock_Divider>

080a2564 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2564:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2566:	7900      	ldrb	r0, [r0, #4]
 80a2568:	f7ff fc4c 	bl	80a1e04 <HAL_SPI_Send_Receive_Data>
}
 80a256c:	b2c0      	uxtb	r0, r0
 80a256e:	bd08      	pop	{r3, pc}

080a2570 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2570:	7900      	ldrb	r0, [r0, #4]
 80a2572:	f7ff bc57 	b.w	80a1e24 <HAL_SPI_Is_Enabled>

080a2576 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2576:	b510      	push	{r4, lr}
 80a2578:	4604      	mov	r4, r0
{
	free(buffer);
 80a257a:	6800      	ldr	r0, [r0, #0]
 80a257c:	f7ff fd86 	bl	80a208c <free>
}
 80a2580:	4620      	mov	r0, r4
 80a2582:	bd10      	pop	{r4, pc}

080a2584 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2584:	b510      	push	{r4, lr}
 80a2586:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2588:	6800      	ldr	r0, [r0, #0]
 80a258a:	b108      	cbz	r0, 80a2590 <_ZN6String10invalidateEv+0xc>
 80a258c:	f7ff fd7e 	bl	80a208c <free>
	buffer = NULL;
 80a2590:	2300      	movs	r3, #0
 80a2592:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2594:	60a3      	str	r3, [r4, #8]
 80a2596:	6063      	str	r3, [r4, #4]
 80a2598:	bd10      	pop	{r4, pc}

080a259a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a259a:	b538      	push	{r3, r4, r5, lr}
 80a259c:	4604      	mov	r4, r0
 80a259e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a25a0:	6800      	ldr	r0, [r0, #0]
 80a25a2:	3101      	adds	r1, #1
 80a25a4:	f7ff fd7a 	bl	80a209c <realloc>
	if (newbuffer) {
 80a25a8:	b110      	cbz	r0, 80a25b0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a25aa:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a25ae:	2001      	movs	r0, #1
	}
	return 0;
}
 80a25b0:	bd38      	pop	{r3, r4, r5, pc}

080a25b2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a25b2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a25b4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a25b6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a25b8:	b113      	cbz	r3, 80a25c0 <_ZN6String7reserveEj+0xe>
 80a25ba:	6843      	ldr	r3, [r0, #4]
 80a25bc:	428b      	cmp	r3, r1
 80a25be:	d207      	bcs.n	80a25d0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a25c0:	4620      	mov	r0, r4
 80a25c2:	f7ff ffea 	bl	80a259a <_ZN6String12changeBufferEj>
 80a25c6:	b120      	cbz	r0, 80a25d2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a25c8:	68a3      	ldr	r3, [r4, #8]
 80a25ca:	b90b      	cbnz	r3, 80a25d0 <_ZN6String7reserveEj+0x1e>
 80a25cc:	6822      	ldr	r2, [r4, #0]
 80a25ce:	7013      	strb	r3, [r2, #0]
 80a25d0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a25d2:	bd10      	pop	{r4, pc}

080a25d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a25d4:	b570      	push	{r4, r5, r6, lr}
 80a25d6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a25d8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a25da:	4604      	mov	r4, r0
 80a25dc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a25de:	f7ff ffe8 	bl	80a25b2 <_ZN6String7reserveEj>
 80a25e2:	b918      	cbnz	r0, 80a25ec <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a25e4:	4620      	mov	r0, r4
 80a25e6:	f7ff ffcd 	bl	80a2584 <_ZN6String10invalidateEv>
		return *this;
 80a25ea:	e009      	b.n	80a2600 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a25ec:	462a      	mov	r2, r5
 80a25ee:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a25f0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a25f2:	6820      	ldr	r0, [r4, #0]
 80a25f4:	f001 f8ec 	bl	80a37d0 <memcpy>
	buffer[len] = 0;
 80a25f8:	6822      	ldr	r2, [r4, #0]
 80a25fa:	68a3      	ldr	r3, [r4, #8]
 80a25fc:	2100      	movs	r1, #0
 80a25fe:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2600:	4620      	mov	r0, r4
 80a2602:	bd70      	pop	{r4, r5, r6, pc}

080a2604 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2604:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2606:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2608:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a260a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a260c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a260e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2610:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2612:	460d      	mov	r5, r1
 80a2614:	b139      	cbz	r1, 80a2626 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2616:	4608      	mov	r0, r1
 80a2618:	f001 f916 	bl	80a3848 <strlen>
 80a261c:	4629      	mov	r1, r5
 80a261e:	4602      	mov	r2, r0
 80a2620:	4620      	mov	r0, r4
 80a2622:	f7ff ffd7 	bl	80a25d4 <_ZN6String4copyEPKcj>
}
 80a2626:	4620      	mov	r0, r4
 80a2628:	bd38      	pop	{r3, r4, r5, pc}
	...

080a262c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a262c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2630:	4b03      	ldr	r3, [pc, #12]	; (80a2640 <_GLOBAL__sub_I_System+0x14>)
 80a2632:	2000      	movs	r0, #0
 80a2634:	7018      	strb	r0, [r3, #0]
 80a2636:	8058      	strh	r0, [r3, #2]
 80a2638:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a263a:	f7ff bc8b 	b.w	80a1f54 <set_system_mode>
 80a263e:	bf00      	nop
 80a2640:	200001c8 	.word	0x200001c8

080a2644 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2644:	4b02      	ldr	r3, [pc, #8]	; (80a2650 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2646:	681a      	ldr	r2, [r3, #0]
 80a2648:	4b02      	ldr	r3, [pc, #8]	; (80a2654 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a264a:	601a      	str	r2, [r3, #0]
 80a264c:	4770      	bx	lr
 80a264e:	bf00      	nop
 80a2650:	20000014 	.word	0x20000014
 80a2654:	200001d0 	.word	0x200001d0

080a2658 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a2658:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a265a:	6804      	ldr	r4, [r0, #0]
 80a265c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a265e:	46a4      	mov	ip, r4
    }
 80a2660:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a2662:	4760      	bx	ip

080a2664 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a2664:	6803      	ldr	r3, [r0, #0]
 80a2666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2668:	4718      	bx	r3

080a266a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a266a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a266c:	4770      	bx	lr

080a266e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a266e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a2670:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a2672:	1a10      	subs	r0, r2, r0
 80a2674:	4770      	bx	lr

080a2676 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a2676:	b513      	push	{r0, r1, r4, lr}
 80a2678:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a267a:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a267c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a2680:	68d4      	ldr	r4, [r2, #12]
 80a2682:	4619      	mov	r1, r3
 80a2684:	2201      	movs	r2, #1
 80a2686:	47a0      	blx	r4
}
 80a2688:	b002      	add	sp, #8
 80a268a:	bd10      	pop	{r4, pc}

080a268c <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a268c:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a268e:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a2690:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a2692:	691b      	ldr	r3, [r3, #16]
 80a2694:	4798      	blx	r3
 80a2696:	b128      	cbz	r0, 80a26a4 <_ZN3UDP4readEv+0x18>
 80a2698:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a269a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a269c:	1c59      	adds	r1, r3, #1
 80a269e:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a26a0:	5cd0      	ldrb	r0, [r2, r3]
 80a26a2:	bd10      	pop	{r4, pc}
 80a26a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a26a8:	bd10      	pop	{r4, pc}

080a26aa <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a26aa:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a26ac:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a26ae:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a26b0:	691b      	ldr	r3, [r3, #16]
 80a26b2:	4798      	blx	r3
 80a26b4:	b118      	cbz	r0, 80a26be <_ZN3UDP4peekEv+0x14>
 80a26b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a26b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a26ba:	5cd0      	ldrb	r0, [r2, r3]
 80a26bc:	bd10      	pop	{r4, pc}
 80a26be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a26c2:	bd10      	pop	{r4, pc}

080a26c4 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a26c4:	4770      	bx	lr

080a26c6 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a26c6:	4603      	mov	r3, r0
 80a26c8:	4608      	mov	r0, r1
 80a26ca:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a26cc:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a26ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a26d0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a26d2:	6803      	ldr	r3, [r0, #0]
 80a26d4:	1a52      	subs	r2, r2, r1
 80a26d6:	68db      	ldr	r3, [r3, #12]
 80a26d8:	4421      	add	r1, r4
}
 80a26da:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a26dc:	4718      	bx	r3

080a26de <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a26de:	f1a0 0010 	sub.w	r0, r0, #16
 80a26e2:	f7ff bff0 	b.w	80a26c6 <_ZNK3UDP7printToER5Print>

080a26e6 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a26e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a26e8:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a26ea:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a26ec:	460f      	mov	r7, r1
 80a26ee:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a26f0:	f7ff fe10 	bl	80a2314 <_ZN5spark12NetworkClass4fromEm>
 80a26f4:	6803      	ldr	r3, [r0, #0]
 80a26f6:	68db      	ldr	r3, [r3, #12]
 80a26f8:	4798      	blx	r3
 80a26fa:	b1b8      	cbz	r0, 80a272c <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a26fc:	2102      	movs	r1, #2
 80a26fe:	463b      	mov	r3, r7
 80a2700:	2211      	movs	r2, #17
 80a2702:	4608      	mov	r0, r1
 80a2704:	9600      	str	r6, [sp, #0]
 80a2706:	f7ff fb35 	bl	80a1d74 <socket_create>
 80a270a:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a270c:	f7ff fb2a 	bl	80a1d64 <socket_handle_valid>
 80a2710:	4604      	mov	r4, r0
 80a2712:	b130      	cbz	r0, 80a2722 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2714:	2300      	movs	r3, #0
 80a2716:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2718:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a271a:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a271c:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a271e:	2001      	movs	r0, #1
 80a2720:	e004      	b.n	80a272c <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a2722:	682b      	ldr	r3, [r5, #0]
 80a2724:	4628      	mov	r0, r5
 80a2726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2728:	4798      	blx	r3
            bound = false;
 80a272a:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a272c:	b003      	add	sp, #12
 80a272e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2730 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a2730:	b538      	push	{r3, r4, r5, lr}
 80a2732:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a2734:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2736:	f7ff fb3d 	bl	80a1db4 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a273a:	4285      	cmp	r5, r0
 80a273c:	d002      	beq.n	80a2744 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a273e:	6960      	ldr	r0, [r4, #20]
 80a2740:	f7ff fb30 	bl	80a1da4 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a2744:	f7ff fb36 	bl	80a1db4 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2748:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a274a:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a274c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a274e:	8723      	strh	r3, [r4, #56]	; 0x38
 80a2750:	bd38      	pop	{r3, r4, r5, pc}

080a2752 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a2752:	b530      	push	{r4, r5, lr}
 80a2754:	b087      	sub	sp, #28
 80a2756:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a275a:	2502      	movs	r5, #2
 80a275c:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a2760:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2764:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a2766:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2768:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a276c:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a2770:	799c      	ldrb	r4, [r3, #6]
 80a2772:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a2776:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a2778:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a277a:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a277e:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a2782:	2310      	movs	r3, #16
 80a2784:	9301      	str	r3, [sp, #4]
 80a2786:	ab02      	add	r3, sp, #8
 80a2788:	9300      	str	r3, [sp, #0]
 80a278a:	6940      	ldr	r0, [r0, #20]
 80a278c:	2300      	movs	r3, #0
 80a278e:	f7ff fb01 	bl	80a1d94 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a2792:	b007      	add	sp, #28
 80a2794:	bd30      	pop	{r4, r5, pc}

080a2796 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a2796:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2798:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a279a:	4605      	mov	r5, r0
 80a279c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a279e:	b113      	cbz	r3, 80a27a6 <_ZN3UDP5writeEPKhj+0x10>
 80a27a0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a27a2:	1a24      	subs	r4, r4, r0
 80a27a4:	e000      	b.n	80a27a8 <_ZN3UDP5writeEPKhj+0x12>
 80a27a6:	461c      	mov	r4, r3
 80a27a8:	4294      	cmp	r4, r2
 80a27aa:	bf28      	it	cs
 80a27ac:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a27ae:	4418      	add	r0, r3
 80a27b0:	4622      	mov	r2, r4
 80a27b2:	f001 f80d 	bl	80a37d0 <memcpy>
    _offset += size;
 80a27b6:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a27b8:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a27ba:	4423      	add	r3, r4
 80a27bc:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a27be:	bd38      	pop	{r3, r4, r5, pc}

080a27c0 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a27c0:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a27c2:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a27c4:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a27c6:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a27c8:	460e      	mov	r6, r1
 80a27ca:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a27cc:	4798      	blx	r3
 80a27ce:	b188      	cbz	r0, 80a27f4 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a27d0:	6823      	ldr	r3, [r4, #0]
 80a27d2:	4620      	mov	r0, r4
 80a27d4:	691b      	ldr	r3, [r3, #16]
 80a27d6:	4798      	blx	r3
 80a27d8:	4285      	cmp	r5, r0
 80a27da:	bfa8      	it	ge
 80a27dc:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a27de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a27e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a27e2:	462a      	mov	r2, r5
 80a27e4:	4419      	add	r1, r3
 80a27e6:	4630      	mov	r0, r6
 80a27e8:	f000 fff2 	bl	80a37d0 <memcpy>
      _offset += read;
 80a27ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a27ee:	442b      	add	r3, r5
 80a27f0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a27f2:	e001      	b.n	80a27f8 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a27f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a27f8:	4628      	mov	r0, r5
 80a27fa:	bd70      	pop	{r4, r5, r6, pc}

080a27fc <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a27fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a27fe:	4604      	mov	r4, r0
 80a2800:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2802:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2804:	460d      	mov	r5, r1
 80a2806:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2808:	f7ff fd84 	bl	80a2314 <_ZN5spark12NetworkClass4fromEm>
 80a280c:	6803      	ldr	r3, [r0, #0]
 80a280e:	68db      	ldr	r3, [r3, #12]
 80a2810:	4798      	blx	r3
 80a2812:	b310      	cbz	r0, 80a285a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2814:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2816:	f7ff facd 	bl	80a1db4 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a281a:	4287      	cmp	r7, r0
 80a281c:	d01d      	beq.n	80a285a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a281e:	b1e5      	cbz	r5, 80a285a <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a2820:	ab08      	add	r3, sp, #32
 80a2822:	2210      	movs	r2, #16
 80a2824:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a2828:	9301      	str	r3, [sp, #4]
 80a282a:	eb0d 0302 	add.w	r3, sp, r2
 80a282e:	9300      	str	r3, [sp, #0]
 80a2830:	4629      	mov	r1, r5
 80a2832:	2300      	movs	r3, #0
 80a2834:	4632      	mov	r2, r6
 80a2836:	6960      	ldr	r0, [r4, #20]
 80a2838:	f7ff faa4 	bl	80a1d84 <socket_receivefrom>
        if (ret >= 0)
 80a283c:	1e05      	subs	r5, r0, #0
 80a283e:	db0e      	blt.n	80a285e <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2840:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a2844:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2848:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a284a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a284e:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2850:	f104 001c 	add.w	r0, r4, #28
 80a2854:	f7ff fcee 	bl	80a2234 <_ZN9IPAddressaSEPKh>
 80a2858:	e001      	b.n	80a285e <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a285a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a285e:	4628      	mov	r0, r5
 80a2860:	b009      	add	sp, #36	; 0x24
 80a2862:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2864 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2868:	4606      	mov	r6, r0
 80a286a:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a286c:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a286e:	460d      	mov	r5, r1
 80a2870:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a2872:	f7ff fd4f 	bl	80a2314 <_ZN5spark12NetworkClass4fromEm>
 80a2876:	6803      	ldr	r3, [r0, #0]
 80a2878:	68db      	ldr	r3, [r3, #12]
 80a287a:	4798      	blx	r3
 80a287c:	b1f8      	cbz	r0, 80a28be <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a287e:	4628      	mov	r0, r5
 80a2880:	f000 ffe2 	bl	80a3848 <strlen>
 80a2884:	2400      	movs	r4, #0
 80a2886:	b281      	uxth	r1, r0
 80a2888:	9400      	str	r4, [sp, #0]
 80a288a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a288c:	aa03      	add	r2, sp, #12
 80a288e:	4628      	mov	r0, r5
 80a2890:	f7ff fb58 	bl	80a1f44 <inet_gethostbyname>
 80a2894:	b990      	cbnz	r0, 80a28bc <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a2896:	a903      	add	r1, sp, #12
 80a2898:	a808      	add	r0, sp, #32
 80a289a:	f7ff fc97 	bl	80a21cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a289e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a28a0:	ac0f      	add	r4, sp, #60	; 0x3c
 80a28a2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a28a4:	4b07      	ldr	r3, [pc, #28]	; (80a28c4 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a28a6:	ad09      	add	r5, sp, #36	; 0x24
 80a28a8:	930e      	str	r3, [sp, #56]	; 0x38
 80a28aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a28ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a28ae:	682b      	ldr	r3, [r5, #0]
 80a28b0:	4642      	mov	r2, r8
 80a28b2:	7023      	strb	r3, [r4, #0]
 80a28b4:	a90e      	add	r1, sp, #56	; 0x38
 80a28b6:	4630      	mov	r0, r6
 80a28b8:	47b8      	blx	r7
 80a28ba:	e000      	b.n	80a28be <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a28bc:	4620      	mov	r0, r4
}
 80a28be:	b014      	add	sp, #80	; 0x50
 80a28c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a28c4:	080a3994 	.word	0x080a3994

080a28c8 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a28c8:	b570      	push	{r4, r5, r6, lr}
 80a28ca:	4604      	mov	r4, r0
 80a28cc:	4606      	mov	r6, r0
 80a28ce:	4b05      	ldr	r3, [pc, #20]	; (80a28e4 <_ZN3UDP8remoteIPEv+0x1c>)
 80a28d0:	f101 0520 	add.w	r5, r1, #32
 80a28d4:	f844 3b04 	str.w	r3, [r4], #4
 80a28d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a28da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a28dc:	682b      	ldr	r3, [r5, #0]
 80a28de:	4630      	mov	r0, r6
 80a28e0:	7023      	strb	r3, [r4, #0]
 80a28e2:	bd70      	pop	{r4, r5, r6, pc}
 80a28e4:	080a3994 	.word	0x080a3994

080a28e8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a28e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a28ea:	4694      	mov	ip, r2
 80a28ec:	468e      	mov	lr, r1
 80a28ee:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a28f0:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a28f2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a28f4:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a28f6:	4a09      	ldr	r2, [pc, #36]	; (80a291c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a28f8:	ac03      	add	r4, sp, #12
 80a28fa:	1d1d      	adds	r5, r3, #4
 80a28fc:	9202      	str	r2, [sp, #8]
 80a28fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2902:	682b      	ldr	r3, [r5, #0]
 80a2904:	4662      	mov	r2, ip
 80a2906:	7023      	strb	r3, [r4, #0]
 80a2908:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a290c:	4671      	mov	r1, lr
 80a290e:	9300      	str	r3, [sp, #0]
 80a2910:	4630      	mov	r0, r6
 80a2912:	ab02      	add	r3, sp, #8
 80a2914:	47b8      	blx	r7
    }
 80a2916:	b009      	add	sp, #36	; 0x24
 80a2918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a291a:	bf00      	nop
 80a291c:	080a3994 	.word	0x080a3994

080a2920 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2920:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2922:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2924:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2926:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2928:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a292a:	4b0d      	ldr	r3, [pc, #52]	; (80a2960 <_ZN3UDP9endPacketEv+0x40>)
 80a292c:	ad03      	add	r5, sp, #12
 80a292e:	f100 0620 	add.w	r6, r0, #32
 80a2932:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a2936:	9302      	str	r3, [sp, #8]
 80a2938:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a293a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a293c:	6833      	ldr	r3, [r6, #0]
 80a293e:	4672      	mov	r2, lr
 80a2940:	702b      	strb	r3, [r5, #0]
 80a2942:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a2944:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2946:	9300      	str	r3, [sp, #0]
 80a2948:	4620      	mov	r0, r4
 80a294a:	ab02      	add	r3, sp, #8
 80a294c:	47b8      	blx	r7
 80a294e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a2950:	6823      	ldr	r3, [r4, #0]
 80a2952:	4620      	mov	r0, r4
 80a2954:	69db      	ldr	r3, [r3, #28]
 80a2956:	4798      	blx	r3
    return result;
}
 80a2958:	4628      	mov	r0, r5
 80a295a:	b009      	add	sp, #36	; 0x24
 80a295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a295e:	bf00      	nop
 80a2960:	080a3994 	.word	0x080a3994

080a2964 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a2964:	b538      	push	{r3, r4, r5, lr}
 80a2966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a296a:	6083      	str	r3, [r0, #8]
 80a296c:	4b0b      	ldr	r3, [pc, #44]	; (80a299c <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a296e:	2500      	movs	r5, #0
 80a2970:	f103 0208 	add.w	r2, r3, #8
 80a2974:	336c      	adds	r3, #108	; 0x6c
 80a2976:	6002      	str	r2, [r0, #0]
 80a2978:	6103      	str	r3, [r0, #16]
 80a297a:	6045      	str	r5, [r0, #4]
 80a297c:	4604      	mov	r4, r0
 80a297e:	f7ff fa19 	bl	80a1db4 <socket_handle_invalid>
 80a2982:	6160      	str	r0, [r4, #20]
 80a2984:	f104 001c 	add.w	r0, r4, #28
 80a2988:	f7ff fc12 	bl	80a21b0 <_ZN9IPAddressC1Ev>
 80a298c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a2990:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a2992:	8725      	strh	r5, [r4, #56]	; 0x38
 80a2994:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a2996:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a2998:	4620      	mov	r0, r4
 80a299a:	bd38      	pop	{r3, r4, r5, pc}
 80a299c:	080a3afc 	.word	0x080a3afc

080a29a0 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a29a0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a29a2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a29a6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a29a8:	b123      	cbz	r3, 80a29b4 <_ZN3UDP13releaseBufferEv+0x14>
 80a29aa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a29ac:	b110      	cbz	r0, 80a29b4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a29ae:	2101      	movs	r1, #1
 80a29b0:	f000 fb57 	bl	80a3062 <_ZdlPvj>
    }
    _buffer = NULL;
 80a29b4:	2300      	movs	r3, #0
 80a29b6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a29b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a29bc:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a29be:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a29c0:	8723      	strh	r3, [r4, #56]	; 0x38
 80a29c2:	bd10      	pop	{r4, pc}

080a29c4 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a29c4:	b570      	push	{r4, r5, r6, lr}
 80a29c6:	4604      	mov	r4, r0
 80a29c8:	4616      	mov	r6, r2
 80a29ca:	460d      	mov	r5, r1
    releaseBuffer();
 80a29cc:	f7ff ffe8 	bl	80a29a0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a29d0:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a29d2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a29d4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a29d6:	b93e      	cbnz	r6, 80a29e8 <_ZN3UDP9setBufferEjPh+0x24>
 80a29d8:	b135      	cbz	r5, 80a29e8 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a29da:	4628      	mov	r0, r5
 80a29dc:	f7fd fb5d 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a29e0:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a29e2:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a29e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a29e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a29ea:	b103      	cbz	r3, 80a29ee <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a29ec:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a29ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a29f0:	3000      	adds	r0, #0
 80a29f2:	bf18      	it	ne
 80a29f4:	2001      	movne	r0, #1
 80a29f6:	bd70      	pop	{r4, r5, r6, pc}

080a29f8 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a29f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29fa:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a29fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a29fe:	4605      	mov	r5, r0
 80a2a00:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2a02:	b91a      	cbnz	r2, 80a2a0c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2a04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2a06:	b109      	cbz	r1, 80a2a0c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a2a08:	f7ff ffdc 	bl	80a29c4 <_ZN3UDP9setBufferEjPh>
 80a2a0c:	f105 0620 	add.w	r6, r5, #32
 80a2a10:	3404      	adds	r4, #4
 80a2a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2a14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2a16:	6823      	ldr	r3, [r4, #0]
 80a2a18:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2a1a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a2a1c:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2a1e:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2a20:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2a22:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2a26 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2a26:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a2a28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2a2a:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a2a2c:	b91a      	cbnz	r2, 80a2a36 <_ZN3UDP11parsePacketEm+0x10>
 80a2a2e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2a30:	b109      	cbz	r1, 80a2a36 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a2a32:	f7ff ffc7 	bl	80a29c4 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2a36:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2a38:	2300      	movs	r3, #0
 80a2a3a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2a3c:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2a3e:	b141      	cbz	r1, 80a2a52 <_ZN3UDP11parsePacketEm+0x2c>
 80a2a40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a2a42:	b132      	cbz	r2, 80a2a52 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a2a44:	6820      	ldr	r0, [r4, #0]
 80a2a46:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	47a8      	blx	r5
        if (result>0) {
 80a2a4c:	2800      	cmp	r0, #0
            _total = result;
 80a2a4e:	bfc8      	it	gt
 80a2a50:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a2a52:	6823      	ldr	r3, [r4, #0]
 80a2a54:	4620      	mov	r0, r4
}
 80a2a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a2a5a:	691b      	ldr	r3, [r3, #16]
 80a2a5c:	4718      	bx	r3

080a2a5e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2a5e:	4770      	bx	lr

080a2a60 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a60:	7441      	strb	r1, [r0, #17]
 80a2a62:	4770      	bx	lr

080a2a64 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2a64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2a66:	7c00      	ldrb	r0, [r0, #16]
 80a2a68:	f7ff fa24 	bl	80a1eb4 <HAL_USART_Available_Data_For_Write>
}
 80a2a6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a70:	bd08      	pop	{r3, pc}

080a2a72 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2a72:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2a74:	7c00      	ldrb	r0, [r0, #16]
 80a2a76:	f7ff f9f5 	bl	80a1e64 <HAL_USART_Available_Data>
}
 80a2a7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a7e:	bd08      	pop	{r3, pc}

080a2a80 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2a80:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2a82:	7c00      	ldrb	r0, [r0, #16]
 80a2a84:	f7ff f9fe 	bl	80a1e84 <HAL_USART_Peek_Data>
}
 80a2a88:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2a8c:	bf28      	it	cs
 80a2a8e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2a92:	bd08      	pop	{r3, pc}

080a2a94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2a94:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2a96:	7c00      	ldrb	r0, [r0, #16]
 80a2a98:	f7ff f9ec 	bl	80a1e74 <HAL_USART_Read_Data>
}
 80a2a9c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2aa0:	bf28      	it	cs
 80a2aa2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2aa6:	bd08      	pop	{r3, pc}

080a2aa8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2aa8:	7c00      	ldrb	r0, [r0, #16]
 80a2aaa:	f7ff b9f3 	b.w	80a1e94 <HAL_USART_Flush_Data>

080a2aae <_ZN11USARTSerialD0Ev>:
 80a2aae:	b510      	push	{r4, lr}
 80a2ab0:	4604      	mov	r4, r0
 80a2ab2:	2114      	movs	r1, #20
 80a2ab4:	f000 fad5 	bl	80a3062 <_ZdlPvj>
 80a2ab8:	4620      	mov	r0, r4
 80a2aba:	bd10      	pop	{r4, pc}

080a2abc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2abc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2abe:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2ac0:	4604      	mov	r4, r0
 80a2ac2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2ac4:	b925      	cbnz	r5, 80a2ad0 <_ZN11USARTSerial5writeEh+0x14>
 80a2ac6:	7c00      	ldrb	r0, [r0, #16]
 80a2ac8:	f7ff f9f4 	bl	80a1eb4 <HAL_USART_Available_Data_For_Write>
 80a2acc:	2800      	cmp	r0, #0
 80a2ace:	dd05      	ble.n	80a2adc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2ad0:	4631      	mov	r1, r6
 80a2ad2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2ad8:	f7ff b9bc 	b.w	80a1e54 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2adc:	4628      	mov	r0, r5
 80a2ade:	bd70      	pop	{r4, r5, r6, pc}

080a2ae0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2ae0:	b510      	push	{r4, lr}
 80a2ae2:	4604      	mov	r4, r0
 80a2ae4:	4608      	mov	r0, r1
 80a2ae6:	4611      	mov	r1, r2
 80a2ae8:	2200      	movs	r2, #0
 80a2aea:	6062      	str	r2, [r4, #4]
 80a2aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2af0:	60a2      	str	r2, [r4, #8]
 80a2af2:	4a05      	ldr	r2, [pc, #20]	; (80a2b08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2af4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2af6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2af8:	2201      	movs	r2, #1
 80a2afa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2afc:	461a      	mov	r2, r3
 80a2afe:	f7ff f9a1 	bl	80a1e44 <HAL_USART_Init>
}
 80a2b02:	4620      	mov	r0, r4
 80a2b04:	bd10      	pop	{r4, pc}
 80a2b06:	bf00      	nop
 80a2b08:	080a3b74 	.word	0x080a3b74

080a2b0c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2b0c:	7c00      	ldrb	r0, [r0, #16]
 80a2b0e:	f7ff b9c9 	b.w	80a1ea4 <HAL_USART_Is_Enabled>
	...

080a2b14 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2b14:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2b16:	4d0c      	ldr	r5, [pc, #48]	; (80a2b48 <_Z22__fetch_global_Serial1v+0x34>)
 80a2b18:	6829      	ldr	r1, [r5, #0]
 80a2b1a:	f011 0401 	ands.w	r4, r1, #1
 80a2b1e:	d111      	bne.n	80a2b44 <_Z22__fetch_global_Serial1v+0x30>
 80a2b20:	4628      	mov	r0, r5
 80a2b22:	f7fd fabe 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b26:	b168      	cbz	r0, 80a2b44 <_Z22__fetch_global_Serial1v+0x30>
 80a2b28:	4a08      	ldr	r2, [pc, #32]	; (80a2b4c <_Z22__fetch_global_Serial1v+0x38>)
 80a2b2a:	4621      	mov	r1, r4
 80a2b2c:	4b08      	ldr	r3, [pc, #32]	; (80a2b50 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2b2e:	4809      	ldr	r0, [pc, #36]	; (80a2b54 <_Z22__fetch_global_Serial1v+0x40>)
 80a2b30:	f7ff ffd6 	bl	80a2ae0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2b34:	4628      	mov	r0, r5
 80a2b36:	f7fd fab9 	bl	80a00ac <__cxa_guard_release>
 80a2b3a:	4a07      	ldr	r2, [pc, #28]	; (80a2b58 <_Z22__fetch_global_Serial1v+0x44>)
 80a2b3c:	4907      	ldr	r1, [pc, #28]	; (80a2b5c <_Z22__fetch_global_Serial1v+0x48>)
 80a2b3e:	4805      	ldr	r0, [pc, #20]	; (80a2b54 <_Z22__fetch_global_Serial1v+0x40>)
 80a2b40:	f000 fa8a 	bl	80a3058 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2b44:	4803      	ldr	r0, [pc, #12]	; (80a2b54 <_Z22__fetch_global_Serial1v+0x40>)
 80a2b46:	bd38      	pop	{r3, r4, r5, pc}
 80a2b48:	2000026c 	.word	0x2000026c
 80a2b4c:	20000270 	.word	0x20000270
 80a2b50:	200001e8 	.word	0x200001e8
 80a2b54:	200001d4 	.word	0x200001d4
 80a2b58:	2000007c 	.word	0x2000007c
 80a2b5c:	080a2a5f 	.word	0x080a2a5f

080a2b60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2b60:	7441      	strb	r1, [r0, #17]
 80a2b62:	4770      	bx	lr

080a2b64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2b64:	4770      	bx	lr

080a2b66 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2b66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2b68:	2100      	movs	r1, #0
 80a2b6a:	7c00      	ldrb	r0, [r0, #16]
 80a2b6c:	f7ff f9ca 	bl	80a1f04 <HAL_USB_USART_Receive_Data>
}
 80a2b70:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2b74:	bf28      	it	cs
 80a2b76:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2b7a:	bd08      	pop	{r3, pc}

080a2b7c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2b7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2b7e:	2101      	movs	r1, #1
 80a2b80:	7c00      	ldrb	r0, [r0, #16]
 80a2b82:	f7ff f9bf 	bl	80a1f04 <HAL_USB_USART_Receive_Data>
}
 80a2b86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2b8a:	bf28      	it	cs
 80a2b8c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2b90:	bd08      	pop	{r3, pc}

080a2b92 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2b92:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2b94:	7c00      	ldrb	r0, [r0, #16]
 80a2b96:	f7ff f9ad 	bl	80a1ef4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b9e:	bd08      	pop	{r3, pc}

080a2ba0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2ba0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2ba2:	7c00      	ldrb	r0, [r0, #16]
 80a2ba4:	f7ff f99e 	bl	80a1ee4 <HAL_USB_USART_Available_Data>
}
 80a2ba8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2bac:	bd08      	pop	{r3, pc}

080a2bae <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2bae:	7c00      	ldrb	r0, [r0, #16]
 80a2bb0:	f7ff b9b8 	b.w	80a1f24 <HAL_USB_USART_Flush_Data>

080a2bb4 <_ZN9USBSerialD0Ev>:
 80a2bb4:	b510      	push	{r4, lr}
 80a2bb6:	4604      	mov	r4, r0
 80a2bb8:	2114      	movs	r1, #20
 80a2bba:	f000 fa52 	bl	80a3062 <_ZdlPvj>
 80a2bbe:	4620      	mov	r0, r4
 80a2bc0:	bd10      	pop	{r4, pc}

080a2bc2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2bc2:	b538      	push	{r3, r4, r5, lr}
 80a2bc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2bc6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2bc8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2bca:	f7ff f993 	bl	80a1ef4 <HAL_USB_USART_Available_Data_For_Write>
 80a2bce:	2800      	cmp	r0, #0
 80a2bd0:	dc01      	bgt.n	80a2bd6 <_ZN9USBSerial5writeEh+0x14>
 80a2bd2:	7c60      	ldrb	r0, [r4, #17]
 80a2bd4:	b128      	cbz	r0, 80a2be2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2bd6:	4629      	mov	r1, r5
 80a2bd8:	7c20      	ldrb	r0, [r4, #16]
 80a2bda:	f7ff f99b 	bl	80a1f14 <HAL_USB_USART_Send_Data>
 80a2bde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2be2:	bd38      	pop	{r3, r4, r5, pc}

080a2be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2be4:	b510      	push	{r4, lr}
 80a2be6:	4604      	mov	r4, r0
 80a2be8:	2300      	movs	r3, #0
 80a2bea:	6063      	str	r3, [r4, #4]
 80a2bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2bf0:	60a3      	str	r3, [r4, #8]
 80a2bf2:	4b05      	ldr	r3, [pc, #20]	; (80a2c08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2bf4:	4608      	mov	r0, r1
 80a2bf6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2bf8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2bfa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2bfc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2bfe:	4611      	mov	r1, r2
 80a2c00:	f7ff f960 	bl	80a1ec4 <HAL_USB_USART_Init>
}
 80a2c04:	4620      	mov	r0, r4
 80a2c06:	bd10      	pop	{r4, pc}
 80a2c08:	080a3ba4 	.word	0x080a3ba4

080a2c0c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2c0c:	2200      	movs	r2, #0
 80a2c0e:	7c00      	ldrb	r0, [r0, #16]
 80a2c10:	f7ff b960 	b.w	80a1ed4 <HAL_USB_USART_Begin>

080a2c14 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2c14:	7c00      	ldrb	r0, [r0, #16]
 80a2c16:	f7ff b98d 	b.w	80a1f34 <HAL_USB_USART_Is_Enabled>

080a2c1a <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a2c1a:	f7ff bffb 	b.w	80a2c14 <_ZN9USBSerial9isEnabledEv>
	...

080a2c20 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2c20:	b510      	push	{r4, lr}
 80a2c22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2c24:	2214      	movs	r2, #20
 80a2c26:	2100      	movs	r1, #0
 80a2c28:	f000 fddd 	bl	80a37e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2c2c:	4b05      	ldr	r3, [pc, #20]	; (80a2c44 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2c2e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2c30:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2c32:	4b05      	ldr	r3, [pc, #20]	; (80a2c48 <_Z19acquireSerialBufferv+0x28>)
 80a2c34:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2c36:	f240 1301 	movw	r3, #257	; 0x101
 80a2c3a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2c3c:	2381      	movs	r3, #129	; 0x81
 80a2c3e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2c40:	bd10      	pop	{r4, pc}
 80a2c42:	bf00      	nop
 80a2c44:	20000379 	.word	0x20000379
 80a2c48:	200002f8 	.word	0x200002f8

080a2c4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2c4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2c4e:	4d0e      	ldr	r5, [pc, #56]	; (80a2c88 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2c50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2c52:	a801      	add	r0, sp, #4
 80a2c54:	f7ff ffe4 	bl	80a2c20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2c58:	6829      	ldr	r1, [r5, #0]
 80a2c5a:	f011 0401 	ands.w	r4, r1, #1
 80a2c5e:	d110      	bne.n	80a2c82 <_Z16_fetch_usbserialv+0x36>
 80a2c60:	4628      	mov	r0, r5
 80a2c62:	f7fd fa1e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2c66:	b160      	cbz	r0, 80a2c82 <_Z16_fetch_usbserialv+0x36>
 80a2c68:	aa01      	add	r2, sp, #4
 80a2c6a:	4621      	mov	r1, r4
 80a2c6c:	4807      	ldr	r0, [pc, #28]	; (80a2c8c <_Z16_fetch_usbserialv+0x40>)
 80a2c6e:	f7ff ffb9 	bl	80a2be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2c72:	4628      	mov	r0, r5
 80a2c74:	f7fd fa1a 	bl	80a00ac <__cxa_guard_release>
 80a2c78:	4a05      	ldr	r2, [pc, #20]	; (80a2c90 <_Z16_fetch_usbserialv+0x44>)
 80a2c7a:	4906      	ldr	r1, [pc, #24]	; (80a2c94 <_Z16_fetch_usbserialv+0x48>)
 80a2c7c:	4803      	ldr	r0, [pc, #12]	; (80a2c8c <_Z16_fetch_usbserialv+0x40>)
 80a2c7e:	f000 f9eb 	bl	80a3058 <__aeabi_atexit>
	return _usbserial;
}
 80a2c82:	4802      	ldr	r0, [pc, #8]	; (80a2c8c <_Z16_fetch_usbserialv+0x40>)
 80a2c84:	b007      	add	sp, #28
 80a2c86:	bd30      	pop	{r4, r5, pc}
 80a2c88:	200002f4 	.word	0x200002f4
 80a2c8c:	2000047c 	.word	0x2000047c
 80a2c90:	2000007c 	.word	0x2000007c
 80a2c94:	080a2b65 	.word	0x080a2b65

080a2c98 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2c98:	b510      	push	{r4, lr}
 80a2c9a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2c9c:	2214      	movs	r2, #20
 80a2c9e:	2100      	movs	r1, #0
 80a2ca0:	f000 fda1 	bl	80a37e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2ca4:	4b05      	ldr	r3, [pc, #20]	; (80a2cbc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2ca6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2ca8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2caa:	4b05      	ldr	r3, [pc, #20]	; (80a2cc0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2cac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2cae:	f240 1301 	movw	r3, #257	; 0x101
 80a2cb2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2cb4:	2381      	movs	r3, #129	; 0x81
 80a2cb6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2cb8:	bd10      	pop	{r4, pc}
 80a2cba:	bf00      	nop
 80a2cbc:	2000052c 	.word	0x2000052c
 80a2cc0:	20000494 	.word	0x20000494

080a2cc4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2cc4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2cc6:	4c0e      	ldr	r4, [pc, #56]	; (80a2d00 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2cc8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2cca:	a801      	add	r0, sp, #4
 80a2ccc:	f7ff ffe4 	bl	80a2c98 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2cd0:	6823      	ldr	r3, [r4, #0]
 80a2cd2:	07db      	lsls	r3, r3, #31
 80a2cd4:	d410      	bmi.n	80a2cf8 <_Z17_fetch_usbserial1v+0x34>
 80a2cd6:	4620      	mov	r0, r4
 80a2cd8:	f7fd f9e3 	bl	80a00a2 <__cxa_guard_acquire>
 80a2cdc:	b160      	cbz	r0, 80a2cf8 <_Z17_fetch_usbserial1v+0x34>
 80a2cde:	aa01      	add	r2, sp, #4
 80a2ce0:	2101      	movs	r1, #1
 80a2ce2:	4808      	ldr	r0, [pc, #32]	; (80a2d04 <_Z17_fetch_usbserial1v+0x40>)
 80a2ce4:	f7ff ff7e 	bl	80a2be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2ce8:	4620      	mov	r0, r4
 80a2cea:	f7fd f9df 	bl	80a00ac <__cxa_guard_release>
 80a2cee:	4a06      	ldr	r2, [pc, #24]	; (80a2d08 <_Z17_fetch_usbserial1v+0x44>)
 80a2cf0:	4906      	ldr	r1, [pc, #24]	; (80a2d0c <_Z17_fetch_usbserial1v+0x48>)
 80a2cf2:	4804      	ldr	r0, [pc, #16]	; (80a2d04 <_Z17_fetch_usbserial1v+0x40>)
 80a2cf4:	f000 f9b0 	bl	80a3058 <__aeabi_atexit>
  return _usbserial1;
}
 80a2cf8:	4802      	ldr	r0, [pc, #8]	; (80a2d04 <_Z17_fetch_usbserial1v+0x40>)
 80a2cfa:	b006      	add	sp, #24
 80a2cfc:	bd10      	pop	{r4, pc}
 80a2cfe:	bf00      	nop
 80a2d00:	20000490 	.word	0x20000490
 80a2d04:	20000518 	.word	0x20000518
 80a2d08:	2000007c 	.word	0x2000007c
 80a2d0c:	080a2b65 	.word	0x080a2b65

080a2d10 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2d10:	2200      	movs	r2, #0
 80a2d12:	4611      	mov	r1, r2
 80a2d14:	6840      	ldr	r0, [r0, #4]
 80a2d16:	f7ff b969 	b.w	80a1fec <network_ready>

080a2d1a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2d1c:	4616      	mov	r6, r2
 80a2d1e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2d20:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2d22:	460f      	mov	r7, r1
 80a2d24:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2d26:	2100      	movs	r1, #0
 80a2d28:	a803      	add	r0, sp, #12
 80a2d2a:	f000 fd5c 	bl	80a37e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2d2e:	4630      	mov	r0, r6
 80a2d30:	f000 fd8a 	bl	80a3848 <strlen>
 80a2d34:	2500      	movs	r5, #0
 80a2d36:	9500      	str	r5, [sp, #0]
 80a2d38:	b281      	uxth	r1, r0
 80a2d3a:	687b      	ldr	r3, [r7, #4]
 80a2d3c:	aa03      	add	r2, sp, #12
 80a2d3e:	4630      	mov	r0, r6
 80a2d40:	f7ff f900 	bl	80a1f44 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2d44:	b120      	cbz	r0, 80a2d50 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2d46:	4629      	mov	r1, r5
 80a2d48:	4620      	mov	r0, r4
 80a2d4a:	f7ff fa51 	bl	80a21f0 <_ZN9IPAddressC1Em>
 80a2d4e:	e003      	b.n	80a2d58 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2d50:	a903      	add	r1, sp, #12
 80a2d52:	4620      	mov	r0, r4
 80a2d54:	f7ff fa3a 	bl	80a21cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2d58:	4620      	mov	r0, r4
 80a2d5a:	b009      	add	sp, #36	; 0x24
 80a2d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2d5e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2d5e:	2200      	movs	r2, #0
 80a2d60:	4611      	mov	r1, r2
 80a2d62:	6840      	ldr	r0, [r0, #4]
 80a2d64:	f7ff b962 	b.w	80a202c <network_listening>

080a2d68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2d68:	2200      	movs	r2, #0
 80a2d6a:	4611      	mov	r1, r2
 80a2d6c:	6840      	ldr	r0, [r0, #4]
 80a2d6e:	f7ff b96d 	b.w	80a204c <network_get_listen_timeout>

080a2d72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2d72:	2200      	movs	r2, #0
 80a2d74:	6840      	ldr	r0, [r0, #4]
 80a2d76:	f7ff b961 	b.w	80a203c <network_set_listen_timeout>

080a2d7a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2d7a:	2200      	movs	r2, #0
 80a2d7c:	f081 0101 	eor.w	r1, r1, #1
 80a2d80:	6840      	ldr	r0, [r0, #4]
 80a2d82:	f7ff b94b 	b.w	80a201c <network_listen>

080a2d86 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2d86:	2300      	movs	r3, #0
 80a2d88:	461a      	mov	r2, r3
 80a2d8a:	4619      	mov	r1, r3
 80a2d8c:	6840      	ldr	r0, [r0, #4]
 80a2d8e:	f7ff b93d 	b.w	80a200c <network_off>

080a2d92 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2d92:	2300      	movs	r3, #0
 80a2d94:	461a      	mov	r2, r3
 80a2d96:	4619      	mov	r1, r3
 80a2d98:	6840      	ldr	r0, [r0, #4]
 80a2d9a:	f7ff b92f 	b.w	80a1ffc <network_on>

080a2d9e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2d9e:	2200      	movs	r2, #0
 80a2da0:	4611      	mov	r1, r2
 80a2da2:	6840      	ldr	r0, [r0, #4]
 80a2da4:	f7ff b912 	b.w	80a1fcc <network_connecting>

080a2da8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2da8:	2200      	movs	r2, #0
 80a2daa:	2102      	movs	r1, #2
 80a2dac:	6840      	ldr	r0, [r0, #4]
 80a2dae:	f7ff b915 	b.w	80a1fdc <network_disconnect>

080a2db2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2db2:	2300      	movs	r3, #0
 80a2db4:	461a      	mov	r2, r3
 80a2db6:	6840      	ldr	r0, [r0, #4]
 80a2db8:	f7ff b900 	b.w	80a1fbc <network_connect>

080a2dbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2dbc:	4b02      	ldr	r3, [pc, #8]	; (80a2dc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2dbe:	2204      	movs	r2, #4
 80a2dc0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2dc2:	4a02      	ldr	r2, [pc, #8]	; (80a2dcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2dc4:	601a      	str	r2, [r3, #0]
 80a2dc6:	4770      	bx	lr
 80a2dc8:	20000630 	.word	0x20000630
 80a2dcc:	080a3bd4 	.word	0x080a3bd4

080a2dd0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2dd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2dd2:	4b14      	ldr	r3, [pc, #80]	; (80a2e24 <serialEventRun+0x54>)
 80a2dd4:	b133      	cbz	r3, 80a2de4 <serialEventRun+0x14>
 80a2dd6:	f7ff ff39 	bl	80a2c4c <_Z16_fetch_usbserialv>
 80a2dda:	6803      	ldr	r3, [r0, #0]
 80a2ddc:	691b      	ldr	r3, [r3, #16]
 80a2dde:	4798      	blx	r3
 80a2de0:	2800      	cmp	r0, #0
 80a2de2:	dc16      	bgt.n	80a2e12 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2de4:	4b10      	ldr	r3, [pc, #64]	; (80a2e28 <serialEventRun+0x58>)
 80a2de6:	b133      	cbz	r3, 80a2df6 <serialEventRun+0x26>
 80a2de8:	f7ff fe94 	bl	80a2b14 <_Z22__fetch_global_Serial1v>
 80a2dec:	6803      	ldr	r3, [r0, #0]
 80a2dee:	691b      	ldr	r3, [r3, #16]
 80a2df0:	4798      	blx	r3
 80a2df2:	2800      	cmp	r0, #0
 80a2df4:	dc10      	bgt.n	80a2e18 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2df6:	4b0d      	ldr	r3, [pc, #52]	; (80a2e2c <serialEventRun+0x5c>)
 80a2df8:	b10b      	cbz	r3, 80a2dfe <serialEventRun+0x2e>
 80a2dfa:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2dfe:	4b0c      	ldr	r3, [pc, #48]	; (80a2e30 <serialEventRun+0x60>)
 80a2e00:	b17b      	cbz	r3, 80a2e22 <serialEventRun+0x52>
 80a2e02:	f7ff ff5f 	bl	80a2cc4 <_Z17_fetch_usbserial1v>
 80a2e06:	6803      	ldr	r3, [r0, #0]
 80a2e08:	691b      	ldr	r3, [r3, #16]
 80a2e0a:	4798      	blx	r3
 80a2e0c:	2800      	cmp	r0, #0
 80a2e0e:	dc06      	bgt.n	80a2e1e <serialEventRun+0x4e>
 80a2e10:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2e12:	f3af 8000 	nop.w
 80a2e16:	e7e5      	b.n	80a2de4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2e18:	f3af 8000 	nop.w
 80a2e1c:	e7eb      	b.n	80a2df6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2e1e:	f3af 8000 	nop.w
 80a2e22:	bd08      	pop	{r3, pc}
	...

080a2e34 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2e34:	b508      	push	{r3, lr}
	serialEventRun();
 80a2e36:	f7ff ffcb 	bl	80a2dd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2e3a:	f7fe ff11 	bl	80a1c60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2e3e:	4b01      	ldr	r3, [pc, #4]	; (80a2e44 <_post_loop+0x10>)
 80a2e40:	6018      	str	r0, [r3, #0]
 80a2e42:	bd08      	pop	{r3, pc}
 80a2e44:	20000640 	.word	0x20000640

080a2e48 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2e48:	4802      	ldr	r0, [pc, #8]	; (80a2e54 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2e4a:	4a03      	ldr	r2, [pc, #12]	; (80a2e58 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2e4c:	4903      	ldr	r1, [pc, #12]	; (80a2e5c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2e4e:	1a12      	subs	r2, r2, r0
 80a2e50:	f000 bcbe 	b.w	80a37d0 <memcpy>
 80a2e54:	40024000 	.word	0x40024000
 80a2e58:	40024004 	.word	0x40024004
 80a2e5c:	080a3ca0 	.word	0x080a3ca0

080a2e60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2e60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2e62:	2300      	movs	r3, #0
 80a2e64:	9300      	str	r3, [sp, #0]
 80a2e66:	461a      	mov	r2, r3
 80a2e68:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2e6c:	f7ff f88c 	bl	80a1f88 <system_ctrl_set_result>
}
 80a2e70:	b003      	add	sp, #12
 80a2e72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2e78 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2e78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2e7a:	8843      	ldrh	r3, [r0, #2]
 80a2e7c:	2b0a      	cmp	r3, #10
 80a2e7e:	d008      	beq.n	80a2e92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2e80:	2b50      	cmp	r3, #80	; 0x50
 80a2e82:	d109      	bne.n	80a2e98 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2e84:	4b09      	ldr	r3, [pc, #36]	; (80a2eac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2e86:	681b      	ldr	r3, [r3, #0]
 80a2e88:	b13b      	cbz	r3, 80a2e9a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2e8a:	b003      	add	sp, #12
 80a2e8c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2e90:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2e92:	f7ff ffe5 	bl	80a2e60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2e96:	e006      	b.n	80a2ea6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2e98:	2300      	movs	r3, #0
 80a2e9a:	9300      	str	r3, [sp, #0]
 80a2e9c:	461a      	mov	r2, r3
 80a2e9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2ea2:	f7ff f871 	bl	80a1f88 <system_ctrl_set_result>
        break;
    }
}
 80a2ea6:	b003      	add	sp, #12
 80a2ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2eac:	20000638 	.word	0x20000638

080a2eb0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2eb0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2eb2:	4c10      	ldr	r4, [pc, #64]	; (80a2ef4 <module_user_init_hook+0x44>)
 80a2eb4:	4d10      	ldr	r5, [pc, #64]	; (80a2ef8 <module_user_init_hook+0x48>)
 80a2eb6:	6823      	ldr	r3, [r4, #0]
 80a2eb8:	42ab      	cmp	r3, r5
 80a2eba:	4b10      	ldr	r3, [pc, #64]	; (80a2efc <module_user_init_hook+0x4c>)
 80a2ebc:	bf0c      	ite	eq
 80a2ebe:	2201      	moveq	r2, #1
 80a2ec0:	2200      	movne	r2, #0
 80a2ec2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2ec4:	d002      	beq.n	80a2ecc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2ec6:	f7ff ffbf 	bl	80a2e48 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2eca:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2ecc:	f7fe feb8 	bl	80a1c40 <HAL_RNG_GetRandomNumber>
 80a2ed0:	4604      	mov	r4, r0
    srand(seed);
 80a2ed2:	f000 fc91 	bl	80a37f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2ed6:	4b0a      	ldr	r3, [pc, #40]	; (80a2f00 <module_user_init_hook+0x50>)
 80a2ed8:	b113      	cbz	r3, 80a2ee0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2eda:	4620      	mov	r0, r4
 80a2edc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2ee0:	2100      	movs	r1, #0
 80a2ee2:	4807      	ldr	r0, [pc, #28]	; (80a2f00 <module_user_init_hook+0x50>)
 80a2ee4:	f7ff f85a 	bl	80a1f9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2eec:	2100      	movs	r1, #0
 80a2eee:	4805      	ldr	r0, [pc, #20]	; (80a2f04 <module_user_init_hook+0x54>)
 80a2ef0:	f7ff b840 	b.w	80a1f74 <system_ctrl_set_app_request_handler>
 80a2ef4:	40024000 	.word	0x40024000
 80a2ef8:	9a271c1e 	.word	0x9a271c1e
 80a2efc:	2000063c 	.word	0x2000063c
 80a2f00:	00000000 	.word	0x00000000
 80a2f04:	080a2e79 	.word	0x080a2e79

080a2f08 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2f08:	b510      	push	{r4, lr}
 80a2f0a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2f0c:	480f      	ldr	r0, [pc, #60]	; (80a2f4c <pinAvailable+0x44>)
 80a2f0e:	f7ff fb2f 	bl	80a2570 <_ZN8SPIClass9isEnabledEv>
 80a2f12:	b128      	cbz	r0, 80a2f20 <pinAvailable+0x18>
 80a2f14:	f1a4 030d 	sub.w	r3, r4, #13
 80a2f18:	2b02      	cmp	r3, #2
 80a2f1a:	d801      	bhi.n	80a2f20 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2f1c:	2000      	movs	r0, #0
 80a2f1e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2f20:	f000 f840 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a2f24:	f7ff f927 	bl	80a2176 <_ZN7TwoWire9isEnabledEv>
 80a2f28:	b108      	cbz	r0, 80a2f2e <pinAvailable+0x26>
 80a2f2a:	2c01      	cmp	r4, #1
 80a2f2c:	d9f6      	bls.n	80a2f1c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2f2e:	f7ff fdf1 	bl	80a2b14 <_Z22__fetch_global_Serial1v>
 80a2f32:	f7ff fdeb 	bl	80a2b0c <_ZN11USARTSerial9isEnabledEv>
 80a2f36:	b118      	cbz	r0, 80a2f40 <pinAvailable+0x38>
 80a2f38:	f1a4 0312 	sub.w	r3, r4, #18
 80a2f3c:	2b01      	cmp	r3, #1
 80a2f3e:	d9ed      	bls.n	80a2f1c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2f40:	2c17      	cmp	r4, #23
 80a2f42:	bf8c      	ite	hi
 80a2f44:	2000      	movhi	r0, #0
 80a2f46:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2f48:	bd10      	pop	{r4, pc}
 80a2f4a:	bf00      	nop
 80a2f4c:	20000674 	.word	0x20000674

080a2f50 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f50:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2f52:	b538      	push	{r3, r4, r5, lr}
 80a2f54:	4604      	mov	r4, r0
 80a2f56:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f58:	d80a      	bhi.n	80a2f70 <pinMode+0x20>
 80a2f5a:	29ff      	cmp	r1, #255	; 0xff
 80a2f5c:	d008      	beq.n	80a2f70 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f5e:	f7ff ffd3 	bl	80a2f08 <pinAvailable>
 80a2f62:	b128      	cbz	r0, 80a2f70 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2f64:	4629      	mov	r1, r5
 80a2f66:	4620      	mov	r0, r4
}
 80a2f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2f6c:	f7fe be88 	b.w	80a1c80 <HAL_Pin_Mode>
 80a2f70:	bd38      	pop	{r3, r4, r5, pc}

080a2f72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2f72:	b538      	push	{r3, r4, r5, lr}
 80a2f74:	4604      	mov	r4, r0
 80a2f76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2f78:	f7fe fe8a 	bl	80a1c90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2f7c:	28ff      	cmp	r0, #255	; 0xff
 80a2f7e:	d010      	beq.n	80a2fa2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2f80:	2806      	cmp	r0, #6
 80a2f82:	d804      	bhi.n	80a2f8e <digitalWrite+0x1c>
 80a2f84:	234d      	movs	r3, #77	; 0x4d
 80a2f86:	fa23 f000 	lsr.w	r0, r3, r0
 80a2f8a:	07c3      	lsls	r3, r0, #31
 80a2f8c:	d409      	bmi.n	80a2fa2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f8e:	4620      	mov	r0, r4
 80a2f90:	f7ff ffba 	bl	80a2f08 <pinAvailable>
 80a2f94:	b128      	cbz	r0, 80a2fa2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f96:	4629      	mov	r1, r5
 80a2f98:	4620      	mov	r0, r4
}
 80a2f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f9e:	f7fe be7f 	b.w	80a1ca0 <HAL_GPIO_Write>
 80a2fa2:	bd38      	pop	{r3, r4, r5, pc}

080a2fa4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2fa4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2fa6:	4d0b      	ldr	r5, [pc, #44]	; (80a2fd4 <_Z19__fetch_global_Wirev+0x30>)
 80a2fa8:	6829      	ldr	r1, [r5, #0]
 80a2faa:	f011 0401 	ands.w	r4, r1, #1
 80a2fae:	d10f      	bne.n	80a2fd0 <_Z19__fetch_global_Wirev+0x2c>
 80a2fb0:	4628      	mov	r0, r5
 80a2fb2:	f7fd f876 	bl	80a00a2 <__cxa_guard_acquire>
 80a2fb6:	b158      	cbz	r0, 80a2fd0 <_Z19__fetch_global_Wirev+0x2c>
 80a2fb8:	4621      	mov	r1, r4
 80a2fba:	4807      	ldr	r0, [pc, #28]	; (80a2fd8 <_Z19__fetch_global_Wirev+0x34>)
 80a2fbc:	f7ff f8ac 	bl	80a2118 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2fc0:	4628      	mov	r0, r5
 80a2fc2:	f7fd f873 	bl	80a00ac <__cxa_guard_release>
 80a2fc6:	4a05      	ldr	r2, [pc, #20]	; (80a2fdc <_Z19__fetch_global_Wirev+0x38>)
 80a2fc8:	4905      	ldr	r1, [pc, #20]	; (80a2fe0 <_Z19__fetch_global_Wirev+0x3c>)
 80a2fca:	4803      	ldr	r0, [pc, #12]	; (80a2fd8 <_Z19__fetch_global_Wirev+0x34>)
 80a2fcc:	f000 f844 	bl	80a3058 <__aeabi_atexit>
	return wire;
}
 80a2fd0:	4801      	ldr	r0, [pc, #4]	; (80a2fd8 <_Z19__fetch_global_Wirev+0x34>)
 80a2fd2:	bd38      	pop	{r3, r4, r5, pc}
 80a2fd4:	20000644 	.word	0x20000644
 80a2fd8:	20000648 	.word	0x20000648
 80a2fdc:	2000007c 	.word	0x2000007c
 80a2fe0:	080a20bf 	.word	0x080a20bf

080a2fe4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2fe4:	b513      	push	{r0, r1, r4, lr}
 80a2fe6:	4c08      	ldr	r4, [pc, #32]	; (80a3008 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2fe8:	2300      	movs	r3, #0
 80a2fea:	461a      	mov	r2, r3
 80a2fec:	4619      	mov	r1, r3
 80a2fee:	9300      	str	r3, [sp, #0]
 80a2ff0:	4620      	mov	r0, r4
 80a2ff2:	f7ff f913 	bl	80a221c <_ZN9IPAddressC1Ehhhh>
 80a2ff6:	4620      	mov	r0, r4
 80a2ff8:	4a04      	ldr	r2, [pc, #16]	; (80a300c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2ffa:	4905      	ldr	r1, [pc, #20]	; (80a3010 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2ffc:	b002      	add	sp, #8
 80a2ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3002:	f000 b829 	b.w	80a3058 <__aeabi_atexit>
 80a3006:	bf00      	nop
 80a3008:	2000065c 	.word	0x2000065c
 80a300c:	2000007c 	.word	0x2000007c
 80a3010:	080a00b3 	.word	0x080a00b3

080a3014 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3014:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3016:	4c0c      	ldr	r4, [pc, #48]	; (80a3048 <_GLOBAL__sub_I_SPI+0x34>)
 80a3018:	4e0c      	ldr	r6, [pc, #48]	; (80a304c <_GLOBAL__sub_I_SPI+0x38>)
 80a301a:	4d0d      	ldr	r5, [pc, #52]	; (80a3050 <_GLOBAL__sub_I_SPI+0x3c>)
 80a301c:	2100      	movs	r1, #0
 80a301e:	4620      	mov	r0, r4
 80a3020:	f7ff fa26 	bl	80a2470 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3024:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3026:	4c0b      	ldr	r4, [pc, #44]	; (80a3054 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3028:	4632      	mov	r2, r6
 80a302a:	4629      	mov	r1, r5
 80a302c:	f000 f814 	bl	80a3058 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3030:	2101      	movs	r1, #1
 80a3032:	4620      	mov	r0, r4
 80a3034:	f7ff fa1c 	bl	80a2470 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3038:	4632      	mov	r2, r6
 80a303a:	4629      	mov	r1, r5
 80a303c:	4620      	mov	r0, r4
 80a303e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3042:	f000 b809 	b.w	80a3058 <__aeabi_atexit>
 80a3046:	bf00      	nop
 80a3048:	20000674 	.word	0x20000674
 80a304c:	2000007c 	.word	0x2000007c
 80a3050:	080a2461 	.word	0x080a2461
 80a3054:	20000684 	.word	0x20000684

080a3058 <__aeabi_atexit>:
 80a3058:	460b      	mov	r3, r1
 80a305a:	4601      	mov	r1, r0
 80a305c:	4618      	mov	r0, r3
 80a305e:	f000 bba9 	b.w	80a37b4 <__cxa_atexit>

080a3062 <_ZdlPvj>:
 80a3062:	f7fd b81c 	b.w	80a009e <_ZdlPv>
	...

080a3068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3068:	4b24      	ldr	r3, [pc, #144]	; (80a30fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a306a:	681a      	ldr	r2, [r3, #0]
 80a306c:	07d0      	lsls	r0, r2, #31
 80a306e:	bf5c      	itt	pl
 80a3070:	2201      	movpl	r2, #1
 80a3072:	601a      	strpl	r2, [r3, #0]
 80a3074:	4b22      	ldr	r3, [pc, #136]	; (80a3100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3076:	681a      	ldr	r2, [r3, #0]
 80a3078:	07d1      	lsls	r1, r2, #31
 80a307a:	bf5c      	itt	pl
 80a307c:	2201      	movpl	r2, #1
 80a307e:	601a      	strpl	r2, [r3, #0]
 80a3080:	4b20      	ldr	r3, [pc, #128]	; (80a3104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3082:	681a      	ldr	r2, [r3, #0]
 80a3084:	07d2      	lsls	r2, r2, #31
 80a3086:	bf5c      	itt	pl
 80a3088:	2201      	movpl	r2, #1
 80a308a:	601a      	strpl	r2, [r3, #0]
 80a308c:	4b1e      	ldr	r3, [pc, #120]	; (80a3108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a308e:	681a      	ldr	r2, [r3, #0]
 80a3090:	07d0      	lsls	r0, r2, #31
 80a3092:	bf5c      	itt	pl
 80a3094:	2201      	movpl	r2, #1
 80a3096:	601a      	strpl	r2, [r3, #0]
 80a3098:	4b1c      	ldr	r3, [pc, #112]	; (80a310c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a309a:	681a      	ldr	r2, [r3, #0]
 80a309c:	07d1      	lsls	r1, r2, #31
 80a309e:	bf5c      	itt	pl
 80a30a0:	2201      	movpl	r2, #1
 80a30a2:	601a      	strpl	r2, [r3, #0]
 80a30a4:	4b1a      	ldr	r3, [pc, #104]	; (80a3110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a30a6:	681a      	ldr	r2, [r3, #0]
 80a30a8:	07d2      	lsls	r2, r2, #31
 80a30aa:	bf5c      	itt	pl
 80a30ac:	2201      	movpl	r2, #1
 80a30ae:	601a      	strpl	r2, [r3, #0]
 80a30b0:	4b18      	ldr	r3, [pc, #96]	; (80a3114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a30b2:	681a      	ldr	r2, [r3, #0]
 80a30b4:	07d0      	lsls	r0, r2, #31
 80a30b6:	bf5c      	itt	pl
 80a30b8:	2201      	movpl	r2, #1
 80a30ba:	601a      	strpl	r2, [r3, #0]
 80a30bc:	4b16      	ldr	r3, [pc, #88]	; (80a3118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a30be:	681a      	ldr	r2, [r3, #0]
 80a30c0:	07d1      	lsls	r1, r2, #31
 80a30c2:	bf5c      	itt	pl
 80a30c4:	2201      	movpl	r2, #1
 80a30c6:	601a      	strpl	r2, [r3, #0]
 80a30c8:	4b14      	ldr	r3, [pc, #80]	; (80a311c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a30ca:	681a      	ldr	r2, [r3, #0]
 80a30cc:	07d2      	lsls	r2, r2, #31
 80a30ce:	bf5c      	itt	pl
 80a30d0:	2201      	movpl	r2, #1
 80a30d2:	601a      	strpl	r2, [r3, #0]
 80a30d4:	4b12      	ldr	r3, [pc, #72]	; (80a3120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a30d6:	681a      	ldr	r2, [r3, #0]
 80a30d8:	07d0      	lsls	r0, r2, #31
 80a30da:	bf5c      	itt	pl
 80a30dc:	2201      	movpl	r2, #1
 80a30de:	601a      	strpl	r2, [r3, #0]
 80a30e0:	4b10      	ldr	r3, [pc, #64]	; (80a3124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a30e2:	681a      	ldr	r2, [r3, #0]
 80a30e4:	07d1      	lsls	r1, r2, #31
 80a30e6:	bf5c      	itt	pl
 80a30e8:	2201      	movpl	r2, #1
 80a30ea:	601a      	strpl	r2, [r3, #0]
 80a30ec:	4b0e      	ldr	r3, [pc, #56]	; (80a3128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a30ee:	681a      	ldr	r2, [r3, #0]
 80a30f0:	07d2      	lsls	r2, r2, #31
 80a30f2:	bf5c      	itt	pl
 80a30f4:	2201      	movpl	r2, #1
 80a30f6:	601a      	strpl	r2, [r3, #0]
 80a30f8:	4770      	bx	lr
 80a30fa:	bf00      	nop
 80a30fc:	200006c0 	.word	0x200006c0
 80a3100:	200006bc 	.word	0x200006bc
 80a3104:	200006b8 	.word	0x200006b8
 80a3108:	200006b4 	.word	0x200006b4
 80a310c:	200006b0 	.word	0x200006b0
 80a3110:	200006ac 	.word	0x200006ac
 80a3114:	200006a8 	.word	0x200006a8
 80a3118:	200006a4 	.word	0x200006a4
 80a311c:	200006a0 	.word	0x200006a0
 80a3120:	2000069c 	.word	0x2000069c
 80a3124:	20000698 	.word	0x20000698
 80a3128:	20000694 	.word	0x20000694

080a312c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a312c:	4b18      	ldr	r3, [pc, #96]	; (80a3190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a312e:	681a      	ldr	r2, [r3, #0]
 80a3130:	07d1      	lsls	r1, r2, #31
 80a3132:	bf5c      	itt	pl
 80a3134:	2201      	movpl	r2, #1
 80a3136:	601a      	strpl	r2, [r3, #0]
 80a3138:	4b16      	ldr	r3, [pc, #88]	; (80a3194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a313a:	681a      	ldr	r2, [r3, #0]
 80a313c:	07d2      	lsls	r2, r2, #31
 80a313e:	bf5c      	itt	pl
 80a3140:	2201      	movpl	r2, #1
 80a3142:	601a      	strpl	r2, [r3, #0]
 80a3144:	4b14      	ldr	r3, [pc, #80]	; (80a3198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3146:	681a      	ldr	r2, [r3, #0]
 80a3148:	07d0      	lsls	r0, r2, #31
 80a314a:	bf5c      	itt	pl
 80a314c:	2201      	movpl	r2, #1
 80a314e:	601a      	strpl	r2, [r3, #0]
 80a3150:	4b12      	ldr	r3, [pc, #72]	; (80a319c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3152:	681a      	ldr	r2, [r3, #0]
 80a3154:	07d1      	lsls	r1, r2, #31
 80a3156:	bf5c      	itt	pl
 80a3158:	2201      	movpl	r2, #1
 80a315a:	601a      	strpl	r2, [r3, #0]
 80a315c:	4b10      	ldr	r3, [pc, #64]	; (80a31a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a315e:	681a      	ldr	r2, [r3, #0]
 80a3160:	07d2      	lsls	r2, r2, #31
 80a3162:	bf5c      	itt	pl
 80a3164:	2201      	movpl	r2, #1
 80a3166:	601a      	strpl	r2, [r3, #0]
 80a3168:	4b0e      	ldr	r3, [pc, #56]	; (80a31a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a316a:	681a      	ldr	r2, [r3, #0]
 80a316c:	07d0      	lsls	r0, r2, #31
 80a316e:	bf5c      	itt	pl
 80a3170:	2201      	movpl	r2, #1
 80a3172:	601a      	strpl	r2, [r3, #0]
 80a3174:	4b0c      	ldr	r3, [pc, #48]	; (80a31a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3176:	681a      	ldr	r2, [r3, #0]
 80a3178:	07d1      	lsls	r1, r2, #31
 80a317a:	bf5c      	itt	pl
 80a317c:	2201      	movpl	r2, #1
 80a317e:	601a      	strpl	r2, [r3, #0]
 80a3180:	4b0a      	ldr	r3, [pc, #40]	; (80a31ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3182:	681a      	ldr	r2, [r3, #0]
 80a3184:	07d2      	lsls	r2, r2, #31
 80a3186:	bf5c      	itt	pl
 80a3188:	2201      	movpl	r2, #1
 80a318a:	601a      	strpl	r2, [r3, #0]
 80a318c:	4770      	bx	lr
 80a318e:	bf00      	nop
 80a3190:	200006e0 	.word	0x200006e0
 80a3194:	200006dc 	.word	0x200006dc
 80a3198:	200006d8 	.word	0x200006d8
 80a319c:	200006d4 	.word	0x200006d4
 80a31a0:	200006d0 	.word	0x200006d0
 80a31a4:	200006cc 	.word	0x200006cc
 80a31a8:	200006c8 	.word	0x200006c8
 80a31ac:	200006c4 	.word	0x200006c4

080a31b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a31b0:	4b18      	ldr	r3, [pc, #96]	; (80a3214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a31b2:	681a      	ldr	r2, [r3, #0]
 80a31b4:	07d1      	lsls	r1, r2, #31
 80a31b6:	bf5c      	itt	pl
 80a31b8:	2201      	movpl	r2, #1
 80a31ba:	601a      	strpl	r2, [r3, #0]
 80a31bc:	4b16      	ldr	r3, [pc, #88]	; (80a3218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a31be:	681a      	ldr	r2, [r3, #0]
 80a31c0:	07d2      	lsls	r2, r2, #31
 80a31c2:	bf5c      	itt	pl
 80a31c4:	2201      	movpl	r2, #1
 80a31c6:	601a      	strpl	r2, [r3, #0]
 80a31c8:	4b14      	ldr	r3, [pc, #80]	; (80a321c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a31ca:	681a      	ldr	r2, [r3, #0]
 80a31cc:	07d0      	lsls	r0, r2, #31
 80a31ce:	bf5c      	itt	pl
 80a31d0:	2201      	movpl	r2, #1
 80a31d2:	601a      	strpl	r2, [r3, #0]
 80a31d4:	4b12      	ldr	r3, [pc, #72]	; (80a3220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a31d6:	681a      	ldr	r2, [r3, #0]
 80a31d8:	07d1      	lsls	r1, r2, #31
 80a31da:	bf5c      	itt	pl
 80a31dc:	2201      	movpl	r2, #1
 80a31de:	601a      	strpl	r2, [r3, #0]
 80a31e0:	4b10      	ldr	r3, [pc, #64]	; (80a3224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a31e2:	681a      	ldr	r2, [r3, #0]
 80a31e4:	07d2      	lsls	r2, r2, #31
 80a31e6:	bf5c      	itt	pl
 80a31e8:	2201      	movpl	r2, #1
 80a31ea:	601a      	strpl	r2, [r3, #0]
 80a31ec:	4b0e      	ldr	r3, [pc, #56]	; (80a3228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a31ee:	681a      	ldr	r2, [r3, #0]
 80a31f0:	07d0      	lsls	r0, r2, #31
 80a31f2:	bf5c      	itt	pl
 80a31f4:	2201      	movpl	r2, #1
 80a31f6:	601a      	strpl	r2, [r3, #0]
 80a31f8:	4b0c      	ldr	r3, [pc, #48]	; (80a322c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a31fa:	681a      	ldr	r2, [r3, #0]
 80a31fc:	07d1      	lsls	r1, r2, #31
 80a31fe:	bf5c      	itt	pl
 80a3200:	2201      	movpl	r2, #1
 80a3202:	601a      	strpl	r2, [r3, #0]
 80a3204:	4b0a      	ldr	r3, [pc, #40]	; (80a3230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3206:	681a      	ldr	r2, [r3, #0]
 80a3208:	07d2      	lsls	r2, r2, #31
 80a320a:	bf5c      	itt	pl
 80a320c:	2201      	movpl	r2, #1
 80a320e:	601a      	strpl	r2, [r3, #0]
 80a3210:	4770      	bx	lr
 80a3212:	bf00      	nop
 80a3214:	20000700 	.word	0x20000700
 80a3218:	200006fc 	.word	0x200006fc
 80a321c:	200006f8 	.word	0x200006f8
 80a3220:	200006f4 	.word	0x200006f4
 80a3224:	200006f0 	.word	0x200006f0
 80a3228:	200006ec 	.word	0x200006ec
 80a322c:	200006e8 	.word	0x200006e8
 80a3230:	200006e4 	.word	0x200006e4

080a3234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3234:	4b24      	ldr	r3, [pc, #144]	; (80a32c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3236:	681a      	ldr	r2, [r3, #0]
 80a3238:	07d0      	lsls	r0, r2, #31
 80a323a:	bf5c      	itt	pl
 80a323c:	2201      	movpl	r2, #1
 80a323e:	601a      	strpl	r2, [r3, #0]
 80a3240:	4b22      	ldr	r3, [pc, #136]	; (80a32cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3242:	681a      	ldr	r2, [r3, #0]
 80a3244:	07d1      	lsls	r1, r2, #31
 80a3246:	bf5c      	itt	pl
 80a3248:	2201      	movpl	r2, #1
 80a324a:	601a      	strpl	r2, [r3, #0]
 80a324c:	4b20      	ldr	r3, [pc, #128]	; (80a32d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a324e:	681a      	ldr	r2, [r3, #0]
 80a3250:	07d2      	lsls	r2, r2, #31
 80a3252:	bf5c      	itt	pl
 80a3254:	2201      	movpl	r2, #1
 80a3256:	601a      	strpl	r2, [r3, #0]
 80a3258:	4b1e      	ldr	r3, [pc, #120]	; (80a32d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a325a:	681a      	ldr	r2, [r3, #0]
 80a325c:	07d0      	lsls	r0, r2, #31
 80a325e:	bf5c      	itt	pl
 80a3260:	2201      	movpl	r2, #1
 80a3262:	601a      	strpl	r2, [r3, #0]
 80a3264:	4b1c      	ldr	r3, [pc, #112]	; (80a32d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3266:	681a      	ldr	r2, [r3, #0]
 80a3268:	07d1      	lsls	r1, r2, #31
 80a326a:	bf5c      	itt	pl
 80a326c:	2201      	movpl	r2, #1
 80a326e:	601a      	strpl	r2, [r3, #0]
 80a3270:	4b1a      	ldr	r3, [pc, #104]	; (80a32dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3272:	681a      	ldr	r2, [r3, #0]
 80a3274:	07d2      	lsls	r2, r2, #31
 80a3276:	bf5c      	itt	pl
 80a3278:	2201      	movpl	r2, #1
 80a327a:	601a      	strpl	r2, [r3, #0]
 80a327c:	4b18      	ldr	r3, [pc, #96]	; (80a32e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a327e:	681a      	ldr	r2, [r3, #0]
 80a3280:	07d0      	lsls	r0, r2, #31
 80a3282:	bf5c      	itt	pl
 80a3284:	2201      	movpl	r2, #1
 80a3286:	601a      	strpl	r2, [r3, #0]
 80a3288:	4b16      	ldr	r3, [pc, #88]	; (80a32e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a328a:	681a      	ldr	r2, [r3, #0]
 80a328c:	07d1      	lsls	r1, r2, #31
 80a328e:	bf5c      	itt	pl
 80a3290:	2201      	movpl	r2, #1
 80a3292:	601a      	strpl	r2, [r3, #0]
 80a3294:	4b14      	ldr	r3, [pc, #80]	; (80a32e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3296:	681a      	ldr	r2, [r3, #0]
 80a3298:	07d2      	lsls	r2, r2, #31
 80a329a:	bf5c      	itt	pl
 80a329c:	2201      	movpl	r2, #1
 80a329e:	601a      	strpl	r2, [r3, #0]
 80a32a0:	4b12      	ldr	r3, [pc, #72]	; (80a32ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a32a2:	681a      	ldr	r2, [r3, #0]
 80a32a4:	07d0      	lsls	r0, r2, #31
 80a32a6:	bf5c      	itt	pl
 80a32a8:	2201      	movpl	r2, #1
 80a32aa:	601a      	strpl	r2, [r3, #0]
 80a32ac:	4b10      	ldr	r3, [pc, #64]	; (80a32f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a32ae:	681a      	ldr	r2, [r3, #0]
 80a32b0:	07d1      	lsls	r1, r2, #31
 80a32b2:	bf5c      	itt	pl
 80a32b4:	2201      	movpl	r2, #1
 80a32b6:	601a      	strpl	r2, [r3, #0]
 80a32b8:	4b0e      	ldr	r3, [pc, #56]	; (80a32f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a32ba:	681a      	ldr	r2, [r3, #0]
 80a32bc:	07d2      	lsls	r2, r2, #31
 80a32be:	bf5c      	itt	pl
 80a32c0:	2201      	movpl	r2, #1
 80a32c2:	601a      	strpl	r2, [r3, #0]
 80a32c4:	4770      	bx	lr
 80a32c6:	bf00      	nop
 80a32c8:	20000730 	.word	0x20000730
 80a32cc:	2000072c 	.word	0x2000072c
 80a32d0:	20000728 	.word	0x20000728
 80a32d4:	20000724 	.word	0x20000724
 80a32d8:	20000720 	.word	0x20000720
 80a32dc:	2000071c 	.word	0x2000071c
 80a32e0:	20000718 	.word	0x20000718
 80a32e4:	20000714 	.word	0x20000714
 80a32e8:	20000710 	.word	0x20000710
 80a32ec:	2000070c 	.word	0x2000070c
 80a32f0:	20000708 	.word	0x20000708
 80a32f4:	20000704 	.word	0x20000704

080a32f8 <__aeabi_frsub>:
 80a32f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a32fc:	e002      	b.n	80a3304 <__addsf3>
 80a32fe:	bf00      	nop

080a3300 <__aeabi_fsub>:
 80a3300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3304 <__addsf3>:
 80a3304:	0042      	lsls	r2, r0, #1
 80a3306:	bf1f      	itttt	ne
 80a3308:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a330c:	ea92 0f03 	teqne	r2, r3
 80a3310:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3314:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3318:	d06a      	beq.n	80a33f0 <__addsf3+0xec>
 80a331a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a331e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3322:	bfc1      	itttt	gt
 80a3324:	18d2      	addgt	r2, r2, r3
 80a3326:	4041      	eorgt	r1, r0
 80a3328:	4048      	eorgt	r0, r1
 80a332a:	4041      	eorgt	r1, r0
 80a332c:	bfb8      	it	lt
 80a332e:	425b      	neglt	r3, r3
 80a3330:	2b19      	cmp	r3, #25
 80a3332:	bf88      	it	hi
 80a3334:	4770      	bxhi	lr
 80a3336:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a333a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a333e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3342:	bf18      	it	ne
 80a3344:	4240      	negne	r0, r0
 80a3346:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a334a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a334e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3352:	bf18      	it	ne
 80a3354:	4249      	negne	r1, r1
 80a3356:	ea92 0f03 	teq	r2, r3
 80a335a:	d03f      	beq.n	80a33dc <__addsf3+0xd8>
 80a335c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3360:	fa41 fc03 	asr.w	ip, r1, r3
 80a3364:	eb10 000c 	adds.w	r0, r0, ip
 80a3368:	f1c3 0320 	rsb	r3, r3, #32
 80a336c:	fa01 f103 	lsl.w	r1, r1, r3
 80a3370:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3374:	d502      	bpl.n	80a337c <__addsf3+0x78>
 80a3376:	4249      	negs	r1, r1
 80a3378:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a337c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3380:	d313      	bcc.n	80a33aa <__addsf3+0xa6>
 80a3382:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3386:	d306      	bcc.n	80a3396 <__addsf3+0x92>
 80a3388:	0840      	lsrs	r0, r0, #1
 80a338a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a338e:	f102 0201 	add.w	r2, r2, #1
 80a3392:	2afe      	cmp	r2, #254	; 0xfe
 80a3394:	d251      	bcs.n	80a343a <__addsf3+0x136>
 80a3396:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a339a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a339e:	bf08      	it	eq
 80a33a0:	f020 0001 	biceq.w	r0, r0, #1
 80a33a4:	ea40 0003 	orr.w	r0, r0, r3
 80a33a8:	4770      	bx	lr
 80a33aa:	0049      	lsls	r1, r1, #1
 80a33ac:	eb40 0000 	adc.w	r0, r0, r0
 80a33b0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a33b4:	f1a2 0201 	sub.w	r2, r2, #1
 80a33b8:	d1ed      	bne.n	80a3396 <__addsf3+0x92>
 80a33ba:	fab0 fc80 	clz	ip, r0
 80a33be:	f1ac 0c08 	sub.w	ip, ip, #8
 80a33c2:	ebb2 020c 	subs.w	r2, r2, ip
 80a33c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a33ca:	bfaa      	itet	ge
 80a33cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a33d0:	4252      	neglt	r2, r2
 80a33d2:	4318      	orrge	r0, r3
 80a33d4:	bfbc      	itt	lt
 80a33d6:	40d0      	lsrlt	r0, r2
 80a33d8:	4318      	orrlt	r0, r3
 80a33da:	4770      	bx	lr
 80a33dc:	f092 0f00 	teq	r2, #0
 80a33e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a33e4:	bf06      	itte	eq
 80a33e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a33ea:	3201      	addeq	r2, #1
 80a33ec:	3b01      	subne	r3, #1
 80a33ee:	e7b5      	b.n	80a335c <__addsf3+0x58>
 80a33f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a33f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a33f8:	bf18      	it	ne
 80a33fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a33fe:	d021      	beq.n	80a3444 <__addsf3+0x140>
 80a3400:	ea92 0f03 	teq	r2, r3
 80a3404:	d004      	beq.n	80a3410 <__addsf3+0x10c>
 80a3406:	f092 0f00 	teq	r2, #0
 80a340a:	bf08      	it	eq
 80a340c:	4608      	moveq	r0, r1
 80a340e:	4770      	bx	lr
 80a3410:	ea90 0f01 	teq	r0, r1
 80a3414:	bf1c      	itt	ne
 80a3416:	2000      	movne	r0, #0
 80a3418:	4770      	bxne	lr
 80a341a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a341e:	d104      	bne.n	80a342a <__addsf3+0x126>
 80a3420:	0040      	lsls	r0, r0, #1
 80a3422:	bf28      	it	cs
 80a3424:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3428:	4770      	bx	lr
 80a342a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a342e:	bf3c      	itt	cc
 80a3430:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3434:	4770      	bxcc	lr
 80a3436:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a343a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a343e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3442:	4770      	bx	lr
 80a3444:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3448:	bf16      	itet	ne
 80a344a:	4608      	movne	r0, r1
 80a344c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3450:	4601      	movne	r1, r0
 80a3452:	0242      	lsls	r2, r0, #9
 80a3454:	bf06      	itte	eq
 80a3456:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a345a:	ea90 0f01 	teqeq	r0, r1
 80a345e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3462:	4770      	bx	lr

080a3464 <__aeabi_ui2f>:
 80a3464:	f04f 0300 	mov.w	r3, #0
 80a3468:	e004      	b.n	80a3474 <__aeabi_i2f+0x8>
 80a346a:	bf00      	nop

080a346c <__aeabi_i2f>:
 80a346c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3470:	bf48      	it	mi
 80a3472:	4240      	negmi	r0, r0
 80a3474:	ea5f 0c00 	movs.w	ip, r0
 80a3478:	bf08      	it	eq
 80a347a:	4770      	bxeq	lr
 80a347c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3480:	4601      	mov	r1, r0
 80a3482:	f04f 0000 	mov.w	r0, #0
 80a3486:	e01c      	b.n	80a34c2 <__aeabi_l2f+0x2a>

080a3488 <__aeabi_ul2f>:
 80a3488:	ea50 0201 	orrs.w	r2, r0, r1
 80a348c:	bf08      	it	eq
 80a348e:	4770      	bxeq	lr
 80a3490:	f04f 0300 	mov.w	r3, #0
 80a3494:	e00a      	b.n	80a34ac <__aeabi_l2f+0x14>
 80a3496:	bf00      	nop

080a3498 <__aeabi_l2f>:
 80a3498:	ea50 0201 	orrs.w	r2, r0, r1
 80a349c:	bf08      	it	eq
 80a349e:	4770      	bxeq	lr
 80a34a0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a34a4:	d502      	bpl.n	80a34ac <__aeabi_l2f+0x14>
 80a34a6:	4240      	negs	r0, r0
 80a34a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a34ac:	ea5f 0c01 	movs.w	ip, r1
 80a34b0:	bf02      	ittt	eq
 80a34b2:	4684      	moveq	ip, r0
 80a34b4:	4601      	moveq	r1, r0
 80a34b6:	2000      	moveq	r0, #0
 80a34b8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a34bc:	bf08      	it	eq
 80a34be:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a34c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a34c6:	fabc f28c 	clz	r2, ip
 80a34ca:	3a08      	subs	r2, #8
 80a34cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a34d0:	db10      	blt.n	80a34f4 <__aeabi_l2f+0x5c>
 80a34d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a34d6:	4463      	add	r3, ip
 80a34d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a34dc:	f1c2 0220 	rsb	r2, r2, #32
 80a34e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a34e4:	fa20 f202 	lsr.w	r2, r0, r2
 80a34e8:	eb43 0002 	adc.w	r0, r3, r2
 80a34ec:	bf08      	it	eq
 80a34ee:	f020 0001 	biceq.w	r0, r0, #1
 80a34f2:	4770      	bx	lr
 80a34f4:	f102 0220 	add.w	r2, r2, #32
 80a34f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a34fc:	f1c2 0220 	rsb	r2, r2, #32
 80a3500:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3504:	fa21 f202 	lsr.w	r2, r1, r2
 80a3508:	eb43 0002 	adc.w	r0, r3, r2
 80a350c:	bf08      	it	eq
 80a350e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3512:	4770      	bx	lr

080a3514 <__aeabi_fmul>:
 80a3514:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3518:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a351c:	bf1e      	ittt	ne
 80a351e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3522:	ea92 0f0c 	teqne	r2, ip
 80a3526:	ea93 0f0c 	teqne	r3, ip
 80a352a:	d06f      	beq.n	80a360c <__aeabi_fmul+0xf8>
 80a352c:	441a      	add	r2, r3
 80a352e:	ea80 0c01 	eor.w	ip, r0, r1
 80a3532:	0240      	lsls	r0, r0, #9
 80a3534:	bf18      	it	ne
 80a3536:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a353a:	d01e      	beq.n	80a357a <__aeabi_fmul+0x66>
 80a353c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3540:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3544:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3548:	fba0 3101 	umull	r3, r1, r0, r1
 80a354c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3550:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3554:	bf3e      	ittt	cc
 80a3556:	0049      	lslcc	r1, r1, #1
 80a3558:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a355c:	005b      	lslcc	r3, r3, #1
 80a355e:	ea40 0001 	orr.w	r0, r0, r1
 80a3562:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3566:	2afd      	cmp	r2, #253	; 0xfd
 80a3568:	d81d      	bhi.n	80a35a6 <__aeabi_fmul+0x92>
 80a356a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a356e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3572:	bf08      	it	eq
 80a3574:	f020 0001 	biceq.w	r0, r0, #1
 80a3578:	4770      	bx	lr
 80a357a:	f090 0f00 	teq	r0, #0
 80a357e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3582:	bf08      	it	eq
 80a3584:	0249      	lsleq	r1, r1, #9
 80a3586:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a358a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a358e:	3a7f      	subs	r2, #127	; 0x7f
 80a3590:	bfc2      	ittt	gt
 80a3592:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3596:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a359a:	4770      	bxgt	lr
 80a359c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a35a0:	f04f 0300 	mov.w	r3, #0
 80a35a4:	3a01      	subs	r2, #1
 80a35a6:	dc5d      	bgt.n	80a3664 <__aeabi_fmul+0x150>
 80a35a8:	f112 0f19 	cmn.w	r2, #25
 80a35ac:	bfdc      	itt	le
 80a35ae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a35b2:	4770      	bxle	lr
 80a35b4:	f1c2 0200 	rsb	r2, r2, #0
 80a35b8:	0041      	lsls	r1, r0, #1
 80a35ba:	fa21 f102 	lsr.w	r1, r1, r2
 80a35be:	f1c2 0220 	rsb	r2, r2, #32
 80a35c2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a35c6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a35ca:	f140 0000 	adc.w	r0, r0, #0
 80a35ce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a35d2:	bf08      	it	eq
 80a35d4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a35d8:	4770      	bx	lr
 80a35da:	f092 0f00 	teq	r2, #0
 80a35de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a35e2:	bf02      	ittt	eq
 80a35e4:	0040      	lsleq	r0, r0, #1
 80a35e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a35ea:	3a01      	subeq	r2, #1
 80a35ec:	d0f9      	beq.n	80a35e2 <__aeabi_fmul+0xce>
 80a35ee:	ea40 000c 	orr.w	r0, r0, ip
 80a35f2:	f093 0f00 	teq	r3, #0
 80a35f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a35fa:	bf02      	ittt	eq
 80a35fc:	0049      	lsleq	r1, r1, #1
 80a35fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3602:	3b01      	subeq	r3, #1
 80a3604:	d0f9      	beq.n	80a35fa <__aeabi_fmul+0xe6>
 80a3606:	ea41 010c 	orr.w	r1, r1, ip
 80a360a:	e78f      	b.n	80a352c <__aeabi_fmul+0x18>
 80a360c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3610:	ea92 0f0c 	teq	r2, ip
 80a3614:	bf18      	it	ne
 80a3616:	ea93 0f0c 	teqne	r3, ip
 80a361a:	d00a      	beq.n	80a3632 <__aeabi_fmul+0x11e>
 80a361c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3620:	bf18      	it	ne
 80a3622:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3626:	d1d8      	bne.n	80a35da <__aeabi_fmul+0xc6>
 80a3628:	ea80 0001 	eor.w	r0, r0, r1
 80a362c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3630:	4770      	bx	lr
 80a3632:	f090 0f00 	teq	r0, #0
 80a3636:	bf17      	itett	ne
 80a3638:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a363c:	4608      	moveq	r0, r1
 80a363e:	f091 0f00 	teqne	r1, #0
 80a3642:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3646:	d014      	beq.n	80a3672 <__aeabi_fmul+0x15e>
 80a3648:	ea92 0f0c 	teq	r2, ip
 80a364c:	d101      	bne.n	80a3652 <__aeabi_fmul+0x13e>
 80a364e:	0242      	lsls	r2, r0, #9
 80a3650:	d10f      	bne.n	80a3672 <__aeabi_fmul+0x15e>
 80a3652:	ea93 0f0c 	teq	r3, ip
 80a3656:	d103      	bne.n	80a3660 <__aeabi_fmul+0x14c>
 80a3658:	024b      	lsls	r3, r1, #9
 80a365a:	bf18      	it	ne
 80a365c:	4608      	movne	r0, r1
 80a365e:	d108      	bne.n	80a3672 <__aeabi_fmul+0x15e>
 80a3660:	ea80 0001 	eor.w	r0, r0, r1
 80a3664:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3668:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a366c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3670:	4770      	bx	lr
 80a3672:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3676:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a367a:	4770      	bx	lr

080a367c <__aeabi_fdiv>:
 80a367c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3680:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3684:	bf1e      	ittt	ne
 80a3686:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a368a:	ea92 0f0c 	teqne	r2, ip
 80a368e:	ea93 0f0c 	teqne	r3, ip
 80a3692:	d069      	beq.n	80a3768 <__aeabi_fdiv+0xec>
 80a3694:	eba2 0203 	sub.w	r2, r2, r3
 80a3698:	ea80 0c01 	eor.w	ip, r0, r1
 80a369c:	0249      	lsls	r1, r1, #9
 80a369e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a36a2:	d037      	beq.n	80a3714 <__aeabi_fdiv+0x98>
 80a36a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a36a8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a36ac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a36b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a36b4:	428b      	cmp	r3, r1
 80a36b6:	bf38      	it	cc
 80a36b8:	005b      	lslcc	r3, r3, #1
 80a36ba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a36be:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a36c2:	428b      	cmp	r3, r1
 80a36c4:	bf24      	itt	cs
 80a36c6:	1a5b      	subcs	r3, r3, r1
 80a36c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a36cc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a36d0:	bf24      	itt	cs
 80a36d2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a36d6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a36da:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a36de:	bf24      	itt	cs
 80a36e0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a36e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a36e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a36ec:	bf24      	itt	cs
 80a36ee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a36f2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a36f6:	011b      	lsls	r3, r3, #4
 80a36f8:	bf18      	it	ne
 80a36fa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a36fe:	d1e0      	bne.n	80a36c2 <__aeabi_fdiv+0x46>
 80a3700:	2afd      	cmp	r2, #253	; 0xfd
 80a3702:	f63f af50 	bhi.w	80a35a6 <__aeabi_fmul+0x92>
 80a3706:	428b      	cmp	r3, r1
 80a3708:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a370c:	bf08      	it	eq
 80a370e:	f020 0001 	biceq.w	r0, r0, #1
 80a3712:	4770      	bx	lr
 80a3714:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3718:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a371c:	327f      	adds	r2, #127	; 0x7f
 80a371e:	bfc2      	ittt	gt
 80a3720:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3724:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3728:	4770      	bxgt	lr
 80a372a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a372e:	f04f 0300 	mov.w	r3, #0
 80a3732:	3a01      	subs	r2, #1
 80a3734:	e737      	b.n	80a35a6 <__aeabi_fmul+0x92>
 80a3736:	f092 0f00 	teq	r2, #0
 80a373a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a373e:	bf02      	ittt	eq
 80a3740:	0040      	lsleq	r0, r0, #1
 80a3742:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3746:	3a01      	subeq	r2, #1
 80a3748:	d0f9      	beq.n	80a373e <__aeabi_fdiv+0xc2>
 80a374a:	ea40 000c 	orr.w	r0, r0, ip
 80a374e:	f093 0f00 	teq	r3, #0
 80a3752:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3756:	bf02      	ittt	eq
 80a3758:	0049      	lsleq	r1, r1, #1
 80a375a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a375e:	3b01      	subeq	r3, #1
 80a3760:	d0f9      	beq.n	80a3756 <__aeabi_fdiv+0xda>
 80a3762:	ea41 010c 	orr.w	r1, r1, ip
 80a3766:	e795      	b.n	80a3694 <__aeabi_fdiv+0x18>
 80a3768:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a376c:	ea92 0f0c 	teq	r2, ip
 80a3770:	d108      	bne.n	80a3784 <__aeabi_fdiv+0x108>
 80a3772:	0242      	lsls	r2, r0, #9
 80a3774:	f47f af7d 	bne.w	80a3672 <__aeabi_fmul+0x15e>
 80a3778:	ea93 0f0c 	teq	r3, ip
 80a377c:	f47f af70 	bne.w	80a3660 <__aeabi_fmul+0x14c>
 80a3780:	4608      	mov	r0, r1
 80a3782:	e776      	b.n	80a3672 <__aeabi_fmul+0x15e>
 80a3784:	ea93 0f0c 	teq	r3, ip
 80a3788:	d104      	bne.n	80a3794 <__aeabi_fdiv+0x118>
 80a378a:	024b      	lsls	r3, r1, #9
 80a378c:	f43f af4c 	beq.w	80a3628 <__aeabi_fmul+0x114>
 80a3790:	4608      	mov	r0, r1
 80a3792:	e76e      	b.n	80a3672 <__aeabi_fmul+0x15e>
 80a3794:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3798:	bf18      	it	ne
 80a379a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a379e:	d1ca      	bne.n	80a3736 <__aeabi_fdiv+0xba>
 80a37a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a37a4:	f47f af5c 	bne.w	80a3660 <__aeabi_fmul+0x14c>
 80a37a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a37ac:	f47f af3c 	bne.w	80a3628 <__aeabi_fmul+0x114>
 80a37b0:	e75f      	b.n	80a3672 <__aeabi_fmul+0x15e>
 80a37b2:	bf00      	nop

080a37b4 <__cxa_atexit>:
 80a37b4:	b510      	push	{r4, lr}
 80a37b6:	4c05      	ldr	r4, [pc, #20]	; (80a37cc <__cxa_atexit+0x18>)
 80a37b8:	4613      	mov	r3, r2
 80a37ba:	b12c      	cbz	r4, 80a37c8 <__cxa_atexit+0x14>
 80a37bc:	460a      	mov	r2, r1
 80a37be:	4601      	mov	r1, r0
 80a37c0:	2002      	movs	r0, #2
 80a37c2:	f3af 8000 	nop.w
 80a37c6:	bd10      	pop	{r4, pc}
 80a37c8:	4620      	mov	r0, r4
 80a37ca:	bd10      	pop	{r4, pc}
 80a37cc:	00000000 	.word	0x00000000

080a37d0 <memcpy>:
 80a37d0:	b510      	push	{r4, lr}
 80a37d2:	1e43      	subs	r3, r0, #1
 80a37d4:	440a      	add	r2, r1
 80a37d6:	4291      	cmp	r1, r2
 80a37d8:	d004      	beq.n	80a37e4 <memcpy+0x14>
 80a37da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a37de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a37e2:	e7f8      	b.n	80a37d6 <memcpy+0x6>
 80a37e4:	bd10      	pop	{r4, pc}

080a37e6 <memset>:
 80a37e6:	4603      	mov	r3, r0
 80a37e8:	4402      	add	r2, r0
 80a37ea:	4293      	cmp	r3, r2
 80a37ec:	d002      	beq.n	80a37f4 <memset+0xe>
 80a37ee:	f803 1b01 	strb.w	r1, [r3], #1
 80a37f2:	e7fa      	b.n	80a37ea <memset+0x4>
 80a37f4:	4770      	bx	lr
	...

080a37f8 <srand>:
 80a37f8:	b538      	push	{r3, r4, r5, lr}
 80a37fa:	4b12      	ldr	r3, [pc, #72]	; (80a3844 <srand+0x4c>)
 80a37fc:	4605      	mov	r5, r0
 80a37fe:	681c      	ldr	r4, [r3, #0]
 80a3800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3802:	b9d3      	cbnz	r3, 80a383a <srand+0x42>
 80a3804:	2018      	movs	r0, #24
 80a3806:	f7fe fc39 	bl	80a207c <malloc>
 80a380a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a380e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3810:	8003      	strh	r3, [r0, #0]
 80a3812:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3816:	8043      	strh	r3, [r0, #2]
 80a3818:	f241 2334 	movw	r3, #4660	; 0x1234
 80a381c:	8083      	strh	r3, [r0, #4]
 80a381e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3822:	80c3      	strh	r3, [r0, #6]
 80a3824:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3828:	8103      	strh	r3, [r0, #8]
 80a382a:	2305      	movs	r3, #5
 80a382c:	8143      	strh	r3, [r0, #10]
 80a382e:	230b      	movs	r3, #11
 80a3830:	8183      	strh	r3, [r0, #12]
 80a3832:	2201      	movs	r2, #1
 80a3834:	2300      	movs	r3, #0
 80a3836:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a383a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a383c:	2200      	movs	r2, #0
 80a383e:	611d      	str	r5, [r3, #16]
 80a3840:	615a      	str	r2, [r3, #20]
 80a3842:	bd38      	pop	{r3, r4, r5, pc}
 80a3844:	20000078 	.word	0x20000078

080a3848 <strlen>:
 80a3848:	4603      	mov	r3, r0
 80a384a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a384e:	2a00      	cmp	r2, #0
 80a3850:	d1fb      	bne.n	80a384a <strlen+0x2>
 80a3852:	1a18      	subs	r0, r3, r0
 80a3854:	3801      	subs	r0, #1
 80a3856:	4770      	bx	lr

080a3858 <dynalib_user>:
 80a3858:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3868:	0000 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
 80a3878:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80a3888:	4d53 4439 3153 002e 6f44 6275 656c 632d     SM9DS1..Double-c
 80a3898:	6568 6b63 7720 7269 6e69 2e67 4400 6665     heck wiring..Def
 80a38a8:	7561 746c 7320 7465 6974 676e 2073 6e69     ault settings in
 80a38b8:	7420 6968 2073 6b73 7465 6863 7720 6c69      this sketch wil
 80a38c8:	206c 6f77 6b72 6620 726f 6120 206e 756f     l work for an ou
 80a38d8:	2074 666f 7420 6568 6220 786f 4c20 4d53     t of the box LSM
 80a38e8:	4439 3153 4220 6572 6b61 756f 2c74 6220     9DS1 Breakout, b
 80a38f8:	7475 6d20 7961 6e20 6565 2064 6f74 6220     ut may need to b
 80a3908:	2065 6f6d 6964 6966 6465 6920 2066 6874     e modified if th
 80a3918:	2065 6f62 7261 2064 756a 706d 7265 2073     e board jumpers 
 80a3928:	7261 2e65 5300 7465 7075 4800 5251 756f     are..Setup.HQRou
 80a3938:	6574 5f72 5550 4c42 5349 0048               ter_PUBLISH.

080a3944 <CSWTCH.57>:
 80a3944:	0020 0000 0040 0000 0060 0000                ...@...`...

080a3950 <CSWTCH.215>:
 80a3950:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3960:	0050 0000                                   P...

080a3964 <_ZTV7TwoWire>:
	...
 80a396c:	20bf 080a 2109 080a 20e1 080a 20c1 080a     . ...!... ... ..
 80a397c:	20e9 080a 20f1 080a 20f9 080a 2101 080a     . ... ... ...!..

080a398c <_ZTV9IPAddress>:
	...
 80a3994:	217f 080a 00b3 080a 00d5 080a 6162 6475     .!..........baud
 80a39a4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a39b4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a39c4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a39d4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a39e4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a39f4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3a04:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3a14:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3a24:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3a34:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3a44:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3a54:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3a64:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3a74:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3a84 <_ZTVN5spark12NetworkClassE>:
	...
 80a3a8c:	225d 080a 2267 080a 2271 080a 227b 080a     ]"..g"..q"..{"..
 80a3a9c:	2285 080a 2291 080a 229d 080a 22a9 080a     ."..."..."..."..
 80a3aac:	22b1 080a 22bb 080a 22c5 080a               ."..."..."..

080a3ab8 <_ZTV8SPIClass>:
	...
 80a3ac0:	2461 080a 2463 080a                         a$..c$..

080a3ac8 <_ZL14clock_divisors>:
 80a3ac8:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a3ad8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3ae8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3af8:	0000 0000                                   ....

080a3afc <_ZTV3UDP>:
	...
 80a3b04:	00b5 080a 00e3 080a 2677 080a 2797 080a     ........w&...'..
 80a3b14:	266f 080a 268d 080a 26ab 080a 26c5 080a     o&...&...&...&..
 80a3b24:	26e7 080a 2731 080a 2753 080a 28e9 080a     .&..1'..S'...(..
 80a3b34:	27fd 080a 2659 080a 29f9 080a 2865 080a     .'..Y&...)..e(..
 80a3b44:	2921 080a 2a27 080a 27c1 080a 2665 080a     !)..'*...'..e&..
 80a3b54:	28c9 080a 266b 080a 26c7 080a fff0 ffff     .(..k&...&......
 80a3b64:	0000 0000 26df 080a                         .....&..

080a3b6c <_ZTV11USARTSerial>:
	...
 80a3b74:	2a5f 080a 2aaf 080a 2abd 080a 2341 080a     _*...*...*..A#..
 80a3b84:	2a73 080a 2a95 080a 2a81 080a 2aa9 080a     s*...*...*...*..
 80a3b94:	2a61 080a 2a65 080a                         a*..e*..

080a3b9c <_ZTV9USBSerial>:
	...
 80a3ba4:	2b65 080a 2bb5 080a 2bc3 080a 2341 080a     e+...+...+..A#..
 80a3bb4:	2ba1 080a 2b67 080a 2b7d 080a 2baf 080a     .+..g+..}+...+..
 80a3bc4:	2b93 080a 2b61 080a                         .+..a+..

080a3bcc <_ZTVN5spark9WiFiClassE>:
	...
 80a3bd4:	2db3 080a 2da9 080a 2d9f 080a 2d11 080a     .-...-...-...-..
 80a3be4:	2d93 080a 2d87 080a 2d7b 080a 2d73 080a     .-...-..{-..s-..
 80a3bf4:	2d69 080a 2d5f 080a 2d1b 080a               i-.._-...-..

080a3c00 <__sf_fake_stdin>:
	...

080a3c20 <__sf_fake_stdout>:
	...

080a3c40 <__sf_fake_stderr>:
	...
 80a3c60:	0043                                        C.

080a3c62 <link_const_variable_data_end>:
	...

080a3c64 <link_constructors_location>:
 80a3c64:	080a030d 	.word	0x080a030d
 80a3c68:	080a093b 	.word	0x080a093b
 80a3c6c:	080a1c1d 	.word	0x080a1c1d
 80a3c70:	080a224d 	.word	0x080a224d
 80a3c74:	080a232d 	.word	0x080a232d
 80a3c78:	080a2445 	.word	0x080a2445
 80a3c7c:	080a262d 	.word	0x080a262d
 80a3c80:	080a2645 	.word	0x080a2645
 80a3c84:	080a2dbd 	.word	0x080a2dbd
 80a3c88:	080a2fe5 	.word	0x080a2fe5
 80a3c8c:	080a3015 	.word	0x080a3015
 80a3c90:	080a3069 	.word	0x080a3069
 80a3c94:	080a312d 	.word	0x080a312d
 80a3c98:	080a31b1 	.word	0x080a31b1
 80a3c9c:	080a3235 	.word	0x080a3235
