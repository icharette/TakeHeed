
/Users/ninjacat/Documents/Particle/TakeHeed/algo_nina/target/1.4.0/photon/algo_nina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004850  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4870  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080a4874  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000066c  20000078  20000078  00040078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a48ec  080a48ec  000348ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4914  080a4914  00034914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a7a47  00000000  00000000  00034918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f4e5  00000000  00000000  000dc35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013a1d  00000000  00000000  000eb844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e68  00000000  00000000  000ff261  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002f78  00000000  00000000  001010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000250e7  00000000  00000000  00104041  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023e73  00000000  00000000  00129128  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5f7f  00000000  00000000  0014cf9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b5f4  00000000  00000000  001f2f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 f9b5 	bl	80a43a0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 f9ba 	bl	80a43b6 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4874 	.word	0x080a4874
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000078 	.word	0x20000078
 80a0058:	200006e4 	.word	0x200006e4
 80a005c:	200006e4 	.word	0x200006e4

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 ffc1 	bl	80a2fe8 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a4830 	.word	0x080a4830
 80a0088:	080a486c 	.word	0x080a486c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8d6 	b.w	80a023c <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fb21 	bl	80a06d8 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bf67 	b.w	80a2f6c <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f002 ba35 	b.w	80a250c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z8setupImuv>:
void printAccel();    
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void calibrateSensor();

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00b4:	4811      	ldr	r0, [pc, #68]	; (80a00fc <_Z8setupImuv+0x48>)
//Function definitions 
void printAccel();    
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void calibrateSensor();

void setupImu(){
 80a00b6:	b508      	push	{r3, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00b8:	2301      	movs	r3, #1
 80a00ba:	7003      	strb	r3, [r0, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
 80a00bc:	231e      	movs	r3, #30
 80a00be:	7083      	strb	r3, [r0, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a00c0:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a00c2:	4a0f      	ldr	r2, [pc, #60]	; (80a0100 <_Z8setupImuv+0x4c>)
void calibrateSensor();

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a00c4:	7043      	strb	r3, [r0, #1]
  lossThreshold = 5;
 80a00c6:	4b0f      	ldr	r3, [pc, #60]	; (80a0104 <_Z8setupImuv+0x50>)
 80a00c8:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a00ca:	4b0f      	ldr	r3, [pc, #60]	; (80a0108 <_Z8setupImuv+0x54>)
 80a00cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a00d0:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a00d2:	f001 ff69 	bl	80a1fa8 <_ZN7LSM9DS15beginEv>
 80a00d6:	b978      	cbnz	r0, 80a00f8 <_Z8setupImuv+0x44>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a00d8:	f002 fe54 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a00dc:	490b      	ldr	r1, [pc, #44]	; (80a010c <_Z8setupImuv+0x58>)
 80a00de:	f002 fb92 	bl	80a2806 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a00e2:	f002 fe4f 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a00e6:	490a      	ldr	r1, [pc, #40]	; (80a0110 <_Z8setupImuv+0x5c>)
 80a00e8:	f002 fb8d 	bl	80a2806 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a00ec:	f002 fe4a 	bl	80a2d84 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a00f0:	4908      	ldr	r1, [pc, #32]	; (80a0114 <_Z8setupImuv+0x60>)
 80a00f2:	f002 fb88 	bl	80a2806 <_ZN5Print7printlnEPKc>
 80a00f6:	e7fe      	b.n	80a00f6 <_Z8setupImuv+0x42>
 80a00f8:	bd08      	pop	{r3, pc}
 80a00fa:	bf00      	nop
 80a00fc:	200000b4 	.word	0x200000b4
 80a0100:	40a00000 	.word	0x40a00000
 80a0104:	20000090 	.word	0x20000090
 80a0108:	200000b0 	.word	0x200000b0
 80a010c:	080a443c 	.word	0x080a443c
 80a0110:	080a4460 	.word	0x080a4460
 80a0114:	080a4475 	.word	0x080a4475

080a0118 <_Z10setupMotorv>:
    while (1)
      ;
  }
}

void setupMotor(){
 80a0118:	b508      	push	{r3, lr}
  pinMode(6, OUTPUT); //Enable
 80a011a:	2101      	movs	r1, #1
 80a011c:	2006      	movs	r0, #6
 80a011e:	f002 ffb3 	bl	80a3088 <pinMode>
  pinMode(5, OUTPUT); //Step
 80a0122:	2101      	movs	r1, #1
 80a0124:	2005      	movs	r0, #5
 80a0126:	f002 ffaf 	bl	80a3088 <pinMode>
  pinMode(4, OUTPUT); //Direction
 80a012a:	2101      	movs	r1, #1
 80a012c:	2004      	movs	r0, #4
 80a012e:	f002 ffab 	bl	80a3088 <pinMode>

  digitalWrite(6,LOW);
}
 80a0132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setupMotor(){
  pinMode(6, OUTPUT); //Enable
  pinMode(5, OUTPUT); //Step
  pinMode(4, OUTPUT); //Direction

  digitalWrite(6,LOW);
 80a0136:	2100      	movs	r1, #0
 80a0138:	2006      	movs	r0, #6
 80a013a:	f002 bfb6 	b.w	80a30aa <digitalWrite>
	...

080a0140 <_Z13setupNeopixelv>:
}

void setupNeopixel(){
 80a0140:	b508      	push	{r3, lr}
    // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
 80a0142:	4808      	ldr	r0, [pc, #32]	; (80a0164 <_Z13setupNeopixelv+0x24>)
 80a0144:	f000 fb40 	bl	80a07c8 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a0148:	4806      	ldr	r0, [pc, #24]	; (80a0164 <_Z13setupNeopixelv+0x24>)
 80a014a:	f000 fb73 	bl	80a0834 <_ZN17Adafruit_NeoPixel4showEv>
  for(int i = 0; i < NUM_LED; i++){
    pixels[i] = 1;
 80a014e:	4a06      	ldr	r2, [pc, #24]	; (80a0168 <_Z13setupNeopixelv+0x28>)
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
  for(int i = 0; i < NUM_LED; i++){
 80a0150:	2300      	movs	r3, #0
    pixels[i] = 1;
 80a0152:	2101      	movs	r1, #1
 80a0154:	5499      	strb	r1, [r3, r2]
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
  for(int i = 0; i < NUM_LED; i++){
 80a0156:	3301      	adds	r3, #1
 80a0158:	2b14      	cmp	r3, #20
 80a015a:	d1fb      	bne.n	80a0154 <_Z13setupNeopixelv+0x14>
    pixels[i] = 1;
  }
  pixelPointer = 20;
 80a015c:	4a03      	ldr	r2, [pc, #12]	; (80a016c <_Z13setupNeopixelv+0x2c>)
 80a015e:	6013      	str	r3, [r2, #0]
 80a0160:	bd08      	pop	{r3, pc}
 80a0162:	bf00      	nop
 80a0164:	20000098 	.word	0x20000098
 80a0168:	20000140 	.word	0x20000140
 80a016c:	20000138 	.word	0x20000138

080a0170 <_Z15calibrateSensorv>:
  Serial.print(", ");
  Serial.println(roll, 2);
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
 80a0170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.print("calibrating sensor...");
 80a0174:	f002 fe06 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0178:	4929      	ldr	r1, [pc, #164]	; (80a0220 <_Z15calibrateSensorv+0xb0>)
 80a017a:	f002 fb31 	bl	80a27e0 <_ZN5Print5printEPKc>
  for(int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a017e:	4e29      	ldr	r6, [pc, #164]	; (80a0224 <_Z15calibrateSensorv+0xb4>)
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0180:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80a0234 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a0184:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80a0238 <_Z15calibrateSensorv+0xc8>
  Serial.println(roll, 2);
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
  Serial.print("calibrating sensor...");
 80a0188:	250a      	movs	r5, #10
  for(int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a018a:	4826      	ldr	r0, [pc, #152]	; (80a0224 <_Z15calibrateSensorv+0xb4>)
 80a018c:	f001 fef7 	bl	80a1f7e <_ZN7LSM9DS114accelAvailableEv>
 80a0190:	b110      	cbz	r0, 80a0198 <_Z15calibrateSensorv+0x28>
    {
      imu.readAccel();
 80a0192:	4824      	ldr	r0, [pc, #144]	; (80a0224 <_Z15calibrateSensorv+0xb4>)
 80a0194:	f001 ffa0 	bl	80a20d8 <_ZN7LSM9DS19readAccelEv>
    }
    refX += imu.calcAccel(imu.ax);
 80a0198:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a019c:	4821      	ldr	r0, [pc, #132]	; (80a0224 <_Z15calibrateSensorv+0xb4>)
 80a019e:	f001 fcb2 	bl	80a1b06 <_ZN7LSM9DS19calcAccelEs>
 80a01a2:	4601      	mov	r1, r0
 80a01a4:	f8db 0000 	ldr.w	r0, [fp]
 80a01a8:	f003 fdf8 	bl	80a3d9c <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a01ac:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  for(int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a01b0:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a01b4:	481b      	ldr	r0, [pc, #108]	; (80a0224 <_Z15calibrateSensorv+0xb4>)
 80a01b6:	f001 fca6 	bl	80a1b06 <_ZN7LSM9DS19calcAccelEs>
 80a01ba:	4601      	mov	r1, r0
 80a01bc:	f8da 0000 	ldr.w	r0, [sl]
 80a01c0:	f003 fdec 	bl	80a3d9c <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a01c4:	4c18      	ldr	r4, [pc, #96]	; (80a0228 <_Z15calibrateSensorv+0xb8>)
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a01c6:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a01ca:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a01ce:	4815      	ldr	r0, [pc, #84]	; (80a0224 <_Z15calibrateSensorv+0xb4>)
 80a01d0:	f001 fc99 	bl	80a1b06 <_ZN7LSM9DS19calcAccelEs>
 80a01d4:	6821      	ldr	r1, [r4, #0]
 80a01d6:	f003 fde1 	bl	80a3d9c <__addsf3>
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
  Serial.print("calibrating sensor...");
  for(int i = 0; i < 10; i++){
 80a01da:	3d01      	subs	r5, #1
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a01dc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a0234 <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a01e0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a0238 <_Z15calibrateSensorv+0xc8>
    refZ += imu.calcAccel(imu.az);
 80a01e4:	4607      	mov	r7, r0
 80a01e6:	6020      	str	r0, [r4, #0]
  Serial.print("Heading: "); Serial.println(heading, 2);
}

void calibrateSensor(){
  Serial.print("calibrating sensor...");
  for(int i = 0; i < 10; i++){
 80a01e8:	d1cf      	bne.n	80a018a <_Z15calibrateSensorv+0x1a>
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
 80a01ea:	f8d9 0000 	ldr.w	r0, [r9]
 80a01ee:	490f      	ldr	r1, [pc, #60]	; (80a022c <_Z15calibrateSensorv+0xbc>)
 80a01f0:	f003 ff90 	bl	80a4114 <__aeabi_fdiv>
  refY = refY / 10;
 80a01f4:	490d      	ldr	r1, [pc, #52]	; (80a022c <_Z15calibrateSensorv+0xbc>)
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
 80a01f6:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / 10;
 80a01fa:	f8d8 0000 	ldr.w	r0, [r8]
 80a01fe:	f003 ff89 	bl	80a4114 <__aeabi_fdiv>
  refZ = refZ / 10; 
 80a0202:	490a      	ldr	r1, [pc, #40]	; (80a022c <_Z15calibrateSensorv+0xbc>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
  refY = refY / 10;
 80a0204:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / 10; 
 80a0208:	4638      	mov	r0, r7
 80a020a:	f003 ff83 	bl	80a4114 <__aeabi_fdiv>
 80a020e:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a0210:	f002 fdb8 	bl	80a2d84 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a0214:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / 10;
  refY = refY / 10;
  refZ = refZ / 10; 
  Serial.println("done");
 80a0218:	4905      	ldr	r1, [pc, #20]	; (80a0230 <_Z15calibrateSensorv+0xc0>)
 80a021a:	f002 baf4 	b.w	80a2806 <_ZN5Print7printlnEPKc>
 80a021e:	bf00      	nop
 80a0220:	080a451f 	.word	0x080a451f
 80a0224:	200000b4 	.word	0x200000b4
 80a0228:	20000088 	.word	0x20000088
 80a022c:	41200000 	.word	0x41200000
 80a0230:	080a4535 	.word	0x080a4535
 80a0234:	20000080 	.word	0x20000080
 80a0238:	20000084 	.word	0x20000084

080a023c <setup>:
  }
  pixelPointer = 20;
}

void setup() 
{
 80a023c:	b508      	push	{r3, lr}
  Serial.begin(115200);
 80a023e:	f002 fda1 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0242:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0246:	f002 fd83 	bl	80a2d50 <_ZN9USBSerial5beginEl>
  setupImu();
 80a024a:	f7ff ff33 	bl	80a00b4 <_Z8setupImuv>
  calibrateSensor();
 80a024e:	f7ff ff8f 	bl	80a0170 <_Z15calibrateSensorv>
  setupMotor();
 80a0252:	f7ff ff61 	bl	80a0118 <_Z10setupMotorv>
  setupNeopixel();
 80a0256:	f7ff ff73 	bl	80a0140 <_Z13setupNeopixelv>
  state = 0;
 80a025a:	4b06      	ldr	r3, [pc, #24]	; (80a0274 <setup+0x38>)
 80a025c:	2200      	movs	r2, #0
 80a025e:	601a      	str	r2, [r3, #0]
  gainThreshold = 0.5;
 80a0260:	4b05      	ldr	r3, [pc, #20]	; (80a0278 <setup+0x3c>)
 80a0262:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80a0266:	601a      	str	r2, [r3, #0]
  lossThreshold = 2;
 80a0268:	4b04      	ldr	r3, [pc, #16]	; (80a027c <setup+0x40>)
 80a026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a026e:	601a      	str	r2, [r3, #0]
 80a0270:	bd08      	pop	{r3, pc}
 80a0272:	bf00      	nop
 80a0274:	20000094 	.word	0x20000094
 80a0278:	200000b0 	.word	0x200000b0
 80a027c:	20000090 	.word	0x20000090

080a0280 <_Z8getStatev>:
      pixelPointer--;
    }
    printMvmt();
}

void getState(){
 80a0280:	b570      	push	{r4, r5, r6, lr}
  float average = 0;
  for(int i = 0; i < NUM_LED; i++){
    average += pixels[i];
 80a0282:	4e2b      	ldr	r6, [pc, #172]	; (80a0330 <_Z8getStatev+0xb0>)
    printMvmt();
}

void getState(){
  float average = 0;
  for(int i = 0; i < NUM_LED; i++){
 80a0284:	2400      	movs	r4, #0
    }
    printMvmt();
}

void getState(){
  float average = 0;
 80a0286:	2500      	movs	r5, #0
  for(int i = 0; i < NUM_LED; i++){
    average += pixels[i];
 80a0288:	5d30      	ldrb	r0, [r6, r4]
 80a028a:	f003 fe3b 	bl	80a3f04 <__aeabi_i2f>
 80a028e:	4601      	mov	r1, r0
 80a0290:	4628      	mov	r0, r5
 80a0292:	f003 fd83 	bl	80a3d9c <__addsf3>
    printMvmt();
}

void getState(){
  float average = 0;
  for(int i = 0; i < NUM_LED; i++){
 80a0296:	3401      	adds	r4, #1
 80a0298:	2c14      	cmp	r4, #20
    average += pixels[i];
 80a029a:	4605      	mov	r5, r0
    printMvmt();
}

void getState(){
  float average = 0;
  for(int i = 0; i < NUM_LED; i++){
 80a029c:	d1f4      	bne.n	80a0288 <_Z8getStatev+0x8>
    average += pixels[i];
  }
  average = average / NUM_LED;
 80a029e:	4925      	ldr	r1, [pc, #148]	; (80a0334 <_Z8getStatev+0xb4>)
 80a02a0:	f003 ff38 	bl	80a4114 <__aeabi_fdiv>
 80a02a4:	4606      	mov	r6, r0
  if (average > 0.8) state = 0;
 80a02a6:	f003 fa27 	bl	80a36f8 <__aeabi_f2d>
 80a02aa:	a31d      	add	r3, pc, #116	; (adr r3, 80a0320 <_Z8getStatev+0xa0>)
 80a02ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02b0:	4604      	mov	r4, r0
 80a02b2:	460d      	mov	r5, r1
 80a02b4:	f003 fd04 	bl	80a3cc0 <__aeabi_dcmpgt>
 80a02b8:	b110      	cbz	r0, 80a02c0 <_Z8getStatev+0x40>
 80a02ba:	4b1f      	ldr	r3, [pc, #124]	; (80a0338 <_Z8getStatev+0xb8>)
 80a02bc:	2200      	movs	r2, #0
 80a02be:	601a      	str	r2, [r3, #0]
  if (average <= 0.8 && average > 0.5) state = 1;
 80a02c0:	a317      	add	r3, pc, #92	; (adr r3, 80a0320 <_Z8getStatev+0xa0>)
 80a02c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	4629      	mov	r1, r5
 80a02ca:	f003 fce5 	bl	80a3c98 <__aeabi_dcmple>
 80a02ce:	b140      	cbz	r0, 80a02e2 <_Z8getStatev+0x62>
 80a02d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a02d4:	4630      	mov	r0, r6
 80a02d6:	f004 f825 	bl	80a4324 <__aeabi_fcmpgt>
 80a02da:	b110      	cbz	r0, 80a02e2 <_Z8getStatev+0x62>
 80a02dc:	4b16      	ldr	r3, [pc, #88]	; (80a0338 <_Z8getStatev+0xb8>)
 80a02de:	2201      	movs	r2, #1
 80a02e0:	601a      	str	r2, [r3, #0]
  if (average <=0.5 && average > 0.2) state = 2;
 80a02e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a02e6:	4630      	mov	r0, r6
 80a02e8:	f004 f808 	bl	80a42fc <__aeabi_fcmple>
 80a02ec:	b150      	cbz	r0, 80a0304 <_Z8getStatev+0x84>
 80a02ee:	a30e      	add	r3, pc, #56	; (adr r3, 80a0328 <_Z8getStatev+0xa8>)
 80a02f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02f4:	4620      	mov	r0, r4
 80a02f6:	4629      	mov	r1, r5
 80a02f8:	f003 fce2 	bl	80a3cc0 <__aeabi_dcmpgt>
 80a02fc:	b110      	cbz	r0, 80a0304 <_Z8getStatev+0x84>
 80a02fe:	4b0e      	ldr	r3, [pc, #56]	; (80a0338 <_Z8getStatev+0xb8>)
 80a0300:	2202      	movs	r2, #2
 80a0302:	601a      	str	r2, [r3, #0]
  if (average <= 0.2) state = 3;
 80a0304:	a308      	add	r3, pc, #32	; (adr r3, 80a0328 <_Z8getStatev+0xa8>)
 80a0306:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a030a:	4620      	mov	r0, r4
 80a030c:	4629      	mov	r1, r5
 80a030e:	f003 fcc3 	bl	80a3c98 <__aeabi_dcmple>
 80a0312:	b110      	cbz	r0, 80a031a <_Z8getStatev+0x9a>
 80a0314:	4b08      	ldr	r3, [pc, #32]	; (80a0338 <_Z8getStatev+0xb8>)
 80a0316:	2203      	movs	r2, #3
 80a0318:	601a      	str	r2, [r3, #0]
 80a031a:	bd70      	pop	{r4, r5, r6, pc}
 80a031c:	f3af 8000 	nop.w
 80a0320:	9999999a 	.word	0x9999999a
 80a0324:	3fe99999 	.word	0x3fe99999
 80a0328:	9999999a 	.word	0x9999999a
 80a032c:	3fc99999 	.word	0x3fc99999
 80a0330:	20000140 	.word	0x20000140
 80a0334:	41a00000 	.word	0x41a00000
 80a0338:	20000094 	.word	0x20000094

080a033c <_Z9setPixelsm>:
  Serial.println("bleach");
  setPixels(strip.Color(255, 0, 0));
}

// Fill the dots one after the other with a color
void setPixels(uint32_t c) {
 80a033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a033e:	4606      	mov	r6, r0
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    if (pixels[i]) strip.setPixelColor(i, c);
 80a0340:	4f0f      	ldr	r7, [pc, #60]	; (80a0380 <_Z9setPixelsm+0x44>)
  Serial.println("bleach");
  setPixels(strip.Color(255, 0, 0));
}

// Fill the dots one after the other with a color
void setPixels(uint32_t c) {
 80a0342:	2500      	movs	r5, #0
  for(uint16_t i=0; i<strip.numPixels(); i++) {
 80a0344:	480f      	ldr	r0, [pc, #60]	; (80a0384 <_Z9setPixelsm+0x48>)
 80a0346:	f001 fb7f 	bl	80a1a48 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a034a:	b2ac      	uxth	r4, r5
 80a034c:	4284      	cmp	r4, r0
 80a034e:	d216      	bcs.n	80a037e <_Z9setPixelsm+0x42>
    if (pixels[i]) strip.setPixelColor(i, c);
 80a0350:	5d3b      	ldrb	r3, [r7, r4]
 80a0352:	b12b      	cbz	r3, 80a0360 <_Z9setPixelsm+0x24>
 80a0354:	4632      	mov	r2, r6
 80a0356:	4621      	mov	r1, r4
 80a0358:	480a      	ldr	r0, [pc, #40]	; (80a0384 <_Z9setPixelsm+0x48>)
 80a035a:	f001 fb25 	bl	80a19a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a035e:	e009      	b.n	80a0374 <_Z9setPixelsm+0x38>
    else strip.setPixelColor(i, strip.Color(255, 255, 255));
 80a0360:	22ff      	movs	r2, #255	; 0xff
 80a0362:	4611      	mov	r1, r2
 80a0364:	4610      	mov	r0, r2
 80a0366:	f001 fb6a 	bl	80a1a3e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a036a:	4621      	mov	r1, r4
 80a036c:	4602      	mov	r2, r0
 80a036e:	4805      	ldr	r0, [pc, #20]	; (80a0384 <_Z9setPixelsm+0x48>)
 80a0370:	f001 fb1a 	bl	80a19a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
 80a0374:	4803      	ldr	r0, [pc, #12]	; (80a0384 <_Z9setPixelsm+0x48>)
 80a0376:	f000 fa5d 	bl	80a0834 <_ZN17Adafruit_NeoPixel4showEv>
 80a037a:	3501      	adds	r5, #1
  setPixels(strip.Color(255, 0, 0));
}

// Fill the dots one after the other with a color
void setPixels(uint32_t c) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
 80a037c:	e7e2      	b.n	80a0344 <_Z9setPixelsm+0x8>
 80a037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0380:	20000140 	.word	0x20000140
 80a0384:	20000098 	.word	0x20000098

080a0388 <_Z6bleachv>:
  Serial.println("endangered");
  setPixels(strip.Color(255,255,0));
  spinStepper(2000);
}

void bleach() {
 80a0388:	b508      	push	{r3, lr}
  Serial.println("bleach");
 80a038a:	f002 fcfb 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a038e:	4906      	ldr	r1, [pc, #24]	; (80a03a8 <_Z6bleachv+0x20>)
 80a0390:	f002 fa39 	bl	80a2806 <_ZN5Print7printlnEPKc>
  setPixels(strip.Color(255, 0, 0));
 80a0394:	2200      	movs	r2, #0
 80a0396:	4611      	mov	r1, r2
 80a0398:	20ff      	movs	r0, #255	; 0xff
 80a039a:	f001 fb50 	bl	80a1a3e <_ZN17Adafruit_NeoPixel5ColorEhhh>
}
 80a039e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  spinStepper(2000);
}

void bleach() {
  Serial.println("bleach");
  setPixels(strip.Color(255, 0, 0));
 80a03a2:	f7ff bfcb 	b.w	80a033c <_Z9setPixelsm>
 80a03a6:	bf00      	nop
 80a03a8:	080a453a 	.word	0x080a453a

080a03ac <_Z11spinStepperi>:
    else strip.setPixelColor(i, strip.Color(255, 255, 255));
    strip.show();
  }
}

void spinStepper(int pace){
 80a03ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(4,HIGH);

  for(stepperIndex = 0; stepperIndex < 2000; stepperIndex++)
 80a03ae:	4c23      	ldr	r4, [pc, #140]	; (80a043c <_Z11spinStepperi+0x90>)
    else strip.setPixelColor(i, strip.Color(255, 255, 255));
    strip.show();
  }
}

void spinStepper(int pace){
 80a03b0:	4606      	mov	r6, r0
  digitalWrite(4,HIGH);

  for(stepperIndex = 0; stepperIndex < 2000; stepperIndex++)
 80a03b2:	4627      	mov	r7, r4
    strip.show();
  }
}

void spinStepper(int pace){
  digitalWrite(4,HIGH);
 80a03b4:	2101      	movs	r1, #1
 80a03b6:	2004      	movs	r0, #4
 80a03b8:	f002 fe77 	bl	80a30aa <digitalWrite>

  for(stepperIndex = 0; stepperIndex < 2000; stepperIndex++)
 80a03bc:	2300      	movs	r3, #0
 80a03be:	6023      	str	r3, [r4, #0]
 80a03c0:	6823      	ldr	r3, [r4, #0]
 80a03c2:	4d1e      	ldr	r5, [pc, #120]	; (80a043c <_Z11spinStepperi+0x90>)
 80a03c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a03c8:	da11      	bge.n	80a03ee <_Z11spinStepperi+0x42>
  {
    digitalWrite(5,HIGH);
 80a03ca:	2101      	movs	r1, #1
 80a03cc:	2005      	movs	r0, #5
 80a03ce:	f002 fe6c 	bl	80a30aa <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a03d2:	4630      	mov	r0, r6
 80a03d4:	f001 fec4 	bl	80a2160 <HAL_Delay_Microseconds>
    delayMicroseconds(pace);
    digitalWrite(5,LOW);
 80a03d8:	2100      	movs	r1, #0
 80a03da:	2005      	movs	r0, #5
 80a03dc:	f002 fe65 	bl	80a30aa <digitalWrite>
 80a03e0:	4630      	mov	r0, r6
 80a03e2:	f001 febd 	bl	80a2160 <HAL_Delay_Microseconds>
}

void spinStepper(int pace){
  digitalWrite(4,HIGH);

  for(stepperIndex = 0; stepperIndex < 2000; stepperIndex++)
 80a03e6:	683b      	ldr	r3, [r7, #0]
 80a03e8:	3301      	adds	r3, #1
 80a03ea:	603b      	str	r3, [r7, #0]
 80a03ec:	e7e8      	b.n	80a03c0 <_Z11spinStepperi+0x14>
    digitalWrite(5,HIGH);
    delayMicroseconds(pace);
    digitalWrite(5,LOW);
    delayMicroseconds(pace);
  }
  delay(1000);
 80a03ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a03f2:	f002 f893 	bl	80a251c <delay>

  digitalWrite(4,LOW);
 80a03f6:	2100      	movs	r1, #0
 80a03f8:	2004      	movs	r0, #4
 80a03fa:	f002 fe56 	bl	80a30aa <digitalWrite>

  for(stepperIndex = 0; stepperIndex < 2000; stepperIndex++)
 80a03fe:	2300      	movs	r3, #0
 80a0400:	602b      	str	r3, [r5, #0]
 80a0402:	6823      	ldr	r3, [r4, #0]
 80a0404:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0408:	da11      	bge.n	80a042e <_Z11spinStepperi+0x82>
  {
    digitalWrite(5,HIGH);
 80a040a:	2101      	movs	r1, #1
 80a040c:	2005      	movs	r0, #5
 80a040e:	f002 fe4c 	bl	80a30aa <digitalWrite>
 80a0412:	4630      	mov	r0, r6
 80a0414:	f001 fea4 	bl	80a2160 <HAL_Delay_Microseconds>
    delayMicroseconds(pace);
    digitalWrite(5,LOW);
 80a0418:	2100      	movs	r1, #0
 80a041a:	2005      	movs	r0, #5
 80a041c:	f002 fe45 	bl	80a30aa <digitalWrite>
 80a0420:	4630      	mov	r0, r6
 80a0422:	f001 fe9d 	bl	80a2160 <HAL_Delay_Microseconds>
  }
  delay(1000);

  digitalWrite(4,LOW);

  for(stepperIndex = 0; stepperIndex < 2000; stepperIndex++)
 80a0426:	682b      	ldr	r3, [r5, #0]
 80a0428:	3301      	adds	r3, #1
 80a042a:	602b      	str	r3, [r5, #0]
 80a042c:	e7e9      	b.n	80a0402 <_Z11spinStepperi+0x56>
    digitalWrite(5,HIGH);
    delayMicroseconds(pace);
    digitalWrite(5,LOW);
    delayMicroseconds(pace);
  }
  delay(1000);
 80a042e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a0432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(5,HIGH);
    delayMicroseconds(pace);
    digitalWrite(5,LOW);
    delayMicroseconds(pace);
  }
  delay(1000);
 80a0436:	f002 b871 	b.w	80a251c <delay>
 80a043a:	bf00      	nop
 80a043c:	20000154 	.word	0x20000154

080a0440 <_Z10prosperityv>:
  if (average <= 0.8 && average > 0.5) state = 1;
  if (average <=0.5 && average > 0.2) state = 2;
  if (average <= 0.2) state = 3;
}

void prosperity(){
 80a0440:	b508      	push	{r3, lr}
  Serial.println("prosperity");
 80a0442:	f002 fc9f 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0446:	4908      	ldr	r1, [pc, #32]	; (80a0468 <_Z10prosperityv+0x28>)
 80a0448:	f002 f9dd 	bl	80a2806 <_ZN5Print7printlnEPKc>
  setPixels(strip.Color(0,255,0));
 80a044c:	2200      	movs	r2, #0
 80a044e:	21ff      	movs	r1, #255	; 0xff
 80a0450:	4610      	mov	r0, r2
 80a0452:	f001 faf4 	bl	80a1a3e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0456:	f7ff ff71 	bl	80a033c <_Z9setPixelsm>
  spinStepper(500);
}
 80a045a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void prosperity(){
  Serial.println("prosperity");
  setPixels(strip.Color(0,255,0));
  spinStepper(500);
 80a045e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0462:	f7ff bfa3 	b.w	80a03ac <_Z11spinStepperi>
 80a0466:	bf00      	nop
 80a0468:	080a4541 	.word	0x080a4541

080a046c <_Z11maintainingv>:
}

void maintaining(){
 80a046c:	b508      	push	{r3, lr}
  Serial.println("prosperity");
 80a046e:	f002 fc89 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0472:	4908      	ldr	r1, [pc, #32]	; (80a0494 <_Z11maintainingv+0x28>)
 80a0474:	f002 f9c7 	bl	80a2806 <_ZN5Print7printlnEPKc>
  setPixels(strip.Color(0,0,255));
 80a0478:	2100      	movs	r1, #0
 80a047a:	22ff      	movs	r2, #255	; 0xff
 80a047c:	4608      	mov	r0, r1
 80a047e:	f001 fade 	bl	80a1a3e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0482:	f7ff ff5b 	bl	80a033c <_Z9setPixelsm>
  spinStepper(1000);
}
 80a0486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void maintaining(){
  Serial.println("prosperity");
  setPixels(strip.Color(0,0,255));
  spinStepper(1000);
 80a048a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a048e:	f7ff bf8d 	b.w	80a03ac <_Z11spinStepperi>
 80a0492:	bf00      	nop
 80a0494:	080a4541 	.word	0x080a4541

080a0498 <_Z10endangeredv>:
}

void endangered(){
 80a0498:	b508      	push	{r3, lr}
  Serial.println("endangered");
 80a049a:	f002 fc73 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a049e:	4908      	ldr	r1, [pc, #32]	; (80a04c0 <_Z10endangeredv+0x28>)
 80a04a0:	f002 f9b1 	bl	80a2806 <_ZN5Print7printlnEPKc>
  setPixels(strip.Color(255,255,0));
 80a04a4:	21ff      	movs	r1, #255	; 0xff
 80a04a6:	2200      	movs	r2, #0
 80a04a8:	4608      	mov	r0, r1
 80a04aa:	f001 fac8 	bl	80a1a3e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a04ae:	f7ff ff45 	bl	80a033c <_Z9setPixelsm>
  spinStepper(2000);
}
 80a04b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void endangered(){
  Serial.println("endangered");
  setPixels(strip.Color(255,255,0));
  spinStepper(2000);
 80a04b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a04ba:	f7ff bf77 	b.w	80a03ac <_Z11spinStepperi>
 80a04be:	bf00      	nop
 80a04c0:	080a454c 	.word	0x080a454c

080a04c4 <_Z9printMvmtv>:
  }
  delay(1000);
}


void printMvmt(){
 80a04c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Serial.print("x: ");
 80a04c6:	f002 fc5d 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a04ca:	4927      	ldr	r1, [pc, #156]	; (80a0568 <_Z9printMvmtv+0xa4>)
 80a04cc:	f002 f988 	bl	80a27e0 <_ZN5Print5printEPKc>
    Serial.print(dX);
 80a04d0:	f002 fc58 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a04d4:	4b25      	ldr	r3, [pc, #148]	; (80a056c <_Z9printMvmtv+0xa8>)
 80a04d6:	4605      	mov	r5, r0
 80a04d8:	6818      	ldr	r0, [r3, #0]
 80a04da:	f003 f90d 	bl	80a36f8 <__aeabi_f2d>
 80a04de:	2402      	movs	r4, #2
 80a04e0:	4602      	mov	r2, r0
 80a04e2:	460b      	mov	r3, r1
 80a04e4:	9400      	str	r4, [sp, #0]
 80a04e6:	4628      	mov	r0, r5
 80a04e8:	f002 fa9e 	bl	80a2a28 <_ZN5Print5printEdi>
    Serial.print( " Y:");
 80a04ec:	f002 fc4a 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a04f0:	491f      	ldr	r1, [pc, #124]	; (80a0570 <_Z9printMvmtv+0xac>)
 80a04f2:	f002 f975 	bl	80a27e0 <_ZN5Print5printEPKc>
    Serial.print(dY);
 80a04f6:	f002 fc45 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a04fa:	4b1e      	ldr	r3, [pc, #120]	; (80a0574 <_Z9printMvmtv+0xb0>)
 80a04fc:	4605      	mov	r5, r0
 80a04fe:	6818      	ldr	r0, [r3, #0]
 80a0500:	f003 f8fa 	bl	80a36f8 <__aeabi_f2d>
 80a0504:	9400      	str	r4, [sp, #0]
 80a0506:	4602      	mov	r2, r0
 80a0508:	460b      	mov	r3, r1
 80a050a:	4628      	mov	r0, r5
 80a050c:	f002 fa8c 	bl	80a2a28 <_ZN5Print5printEdi>
    Serial.print(" Z:");
 80a0510:	f002 fc38 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0514:	4918      	ldr	r1, [pc, #96]	; (80a0578 <_Z9printMvmtv+0xb4>)
 80a0516:	f002 f963 	bl	80a27e0 <_ZN5Print5printEPKc>
    Serial.print(dZ);
 80a051a:	f002 fc33 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a051e:	4b17      	ldr	r3, [pc, #92]	; (80a057c <_Z9printMvmtv+0xb8>)
 80a0520:	4605      	mov	r5, r0
 80a0522:	6818      	ldr	r0, [r3, #0]
 80a0524:	f003 f8e8 	bl	80a36f8 <__aeabi_f2d>
 80a0528:	9400      	str	r4, [sp, #0]
 80a052a:	4602      	mov	r2, r0
 80a052c:	460b      	mov	r3, r1
 80a052e:	4628      	mov	r0, r5
 80a0530:	f002 fa7a 	bl	80a2a28 <_ZN5Print5printEdi>
    Serial.print(" av: ");
 80a0534:	f002 fc26 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0538:	4911      	ldr	r1, [pc, #68]	; (80a0580 <_Z9printMvmtv+0xbc>)
 80a053a:	f002 f951 	bl	80a27e0 <_ZN5Print5printEPKc>
    Serial.print(avMvmt);
 80a053e:	f002 fc21 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a0542:	4b10      	ldr	r3, [pc, #64]	; (80a0584 <_Z9printMvmtv+0xc0>)
 80a0544:	4605      	mov	r5, r0
 80a0546:	6818      	ldr	r0, [r3, #0]
 80a0548:	f003 f8d6 	bl	80a36f8 <__aeabi_f2d>
 80a054c:	9400      	str	r4, [sp, #0]
 80a054e:	4602      	mov	r2, r0
 80a0550:	460b      	mov	r3, r1
 80a0552:	4628      	mov	r0, r5
 80a0554:	f002 fa68 	bl	80a2a28 <_ZN5Print5printEdi>
    Serial.println(" ");
 80a0558:	f002 fc14 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a055c:	490a      	ldr	r1, [pc, #40]	; (80a0588 <_Z9printMvmtv+0xc4>)
 80a055e:	b003      	add	sp, #12
 80a0560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Serial.print(dY);
    Serial.print(" Z:");
    Serial.print(dZ);
    Serial.print(" av: ");
    Serial.print(avMvmt);
    Serial.println(" ");
 80a0564:	f002 b94f 	b.w	80a2806 <_ZN5Print7printlnEPKc>
 80a0568:	080a4557 	.word	0x080a4557
 80a056c:	2000008c 	.word	0x2000008c
 80a0570:	080a455b 	.word	0x080a455b
 80a0574:	2000013c 	.word	0x2000013c
 80a0578:	080a455f 	.word	0x080a455f
 80a057c:	2000007c 	.word	0x2000007c
 80a0580:	080a4563 	.word	0x080a4563
 80a0584:	200000ac 	.word	0x200000ac
 80a0588:	080a4502 	.word	0x080a4502

080a058c <_Z12getMouvementv>:
void getMouvement(){
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
 80a058c:	4a45      	ldr	r2, [pc, #276]	; (80a06a4 <_Z12getMouvementv+0x118>)
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}

void getMouvement(){
 80a058e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0592:	4690      	mov	r8, r2
//    reset values
    dX = 0;
 80a0594:	4c44      	ldr	r4, [pc, #272]	; (80a06a8 <_Z12getMouvementv+0x11c>)
    dY = 0;
 80a0596:	4d45      	ldr	r5, [pc, #276]	; (80a06ac <_Z12getMouvementv+0x120>)
    dZ = 0;
 80a0598:	4e45      	ldr	r6, [pc, #276]	; (80a06b0 <_Z12getMouvementv+0x124>)
//  Serial.println(" ");
}

void getMouvement(){
//    reset values
    dX = 0;
 80a059a:	2300      	movs	r3, #0
    dY = 0;
    dZ = 0;
    avMvmt = 0;
    for (int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a059c:	f8df a114 	ldr.w	sl, [pc, #276]	; 80a06b4 <_Z12getMouvementv+0x128>
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
 80a05a0:	f8df b130 	ldr.w	fp, [pc, #304]	; 80a06d4 <_Z12getMouvementv+0x148>
//  Serial.println(" ");
}

void getMouvement(){
//    reset values
    dX = 0;
 80a05a4:	6023      	str	r3, [r4, #0]
    dY = 0;
 80a05a6:	602b      	str	r3, [r5, #0]
    dZ = 0;
 80a05a8:	6033      	str	r3, [r6, #0]
    avMvmt = 0;
 80a05aa:	6013      	str	r3, [r2, #0]
 80a05ac:	f04f 090a 	mov.w	r9, #10
    for (int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a05b0:	4840      	ldr	r0, [pc, #256]	; (80a06b4 <_Z12getMouvementv+0x128>)
 80a05b2:	f001 fce4 	bl	80a1f7e <_ZN7LSM9DS114accelAvailableEv>
 80a05b6:	b110      	cbz	r0, 80a05be <_Z12getMouvementv+0x32>
    {
      imu.readAccel();
 80a05b8:	483e      	ldr	r0, [pc, #248]	; (80a06b4 <_Z12getMouvementv+0x128>)
 80a05ba:	f001 fd8d 	bl	80a20d8 <_ZN7LSM9DS19readAccelEv>
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
 80a05be:	f9ba 102e 	ldrsh.w	r1, [sl, #46]	; 0x2e
 80a05c2:	483c      	ldr	r0, [pc, #240]	; (80a06b4 <_Z12getMouvementv+0x128>)
 80a05c4:	f001 fa9f 	bl	80a1b06 <_ZN7LSM9DS19calcAccelEs>
 80a05c8:	f8db 1000 	ldr.w	r1, [fp]
 80a05cc:	f003 fbe4 	bl	80a3d98 <__aeabi_fsub>
 80a05d0:	f003 feb2 	bl	80a4338 <__aeabi_f2iz>
 80a05d4:	2800      	cmp	r0, #0
 80a05d6:	bfb8      	it	lt
 80a05d8:	4240      	neglt	r0, r0
 80a05da:	f003 fc93 	bl	80a3f04 <__aeabi_i2f>
 80a05de:	6821      	ldr	r1, [r4, #0]
 80a05e0:	f003 fbdc 	bl	80a3d9c <__addsf3>
    dY += abs(imu.calcAccel(imu.ay) - refY);
 80a05e4:	f9ba 1030 	ldrsh.w	r1, [sl, #48]	; 0x30
    for (int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
 80a05e8:	6020      	str	r0, [r4, #0]
    dY += abs(imu.calcAccel(imu.ay) - refY);
 80a05ea:	4832      	ldr	r0, [pc, #200]	; (80a06b4 <_Z12getMouvementv+0x128>)
 80a05ec:	f001 fa8b 	bl	80a1b06 <_ZN7LSM9DS19calcAccelEs>
 80a05f0:	4b31      	ldr	r3, [pc, #196]	; (80a06b8 <_Z12getMouvementv+0x12c>)
 80a05f2:	6819      	ldr	r1, [r3, #0]
 80a05f4:	f003 fbd0 	bl	80a3d98 <__aeabi_fsub>
 80a05f8:	f003 fe9e 	bl	80a4338 <__aeabi_f2iz>
 80a05fc:	2800      	cmp	r0, #0
 80a05fe:	bfb8      	it	lt
 80a0600:	4240      	neglt	r0, r0
 80a0602:	f003 fc7f 	bl	80a3f04 <__aeabi_i2f>
 80a0606:	6829      	ldr	r1, [r5, #0]
 80a0608:	f003 fbc8 	bl	80a3d9c <__addsf3>
    dZ += abs(imu.calcAccel(imu.az) - refZ);
 80a060c:	f9ba 1032 	ldrsh.w	r1, [sl, #50]	; 0x32
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
    dY += abs(imu.calcAccel(imu.ay) - refY);
 80a0610:	6028      	str	r0, [r5, #0]
    dZ += abs(imu.calcAccel(imu.az) - refZ);
 80a0612:	4828      	ldr	r0, [pc, #160]	; (80a06b4 <_Z12getMouvementv+0x128>)
 80a0614:	f001 fa77 	bl	80a1b06 <_ZN7LSM9DS19calcAccelEs>
 80a0618:	4b28      	ldr	r3, [pc, #160]	; (80a06bc <_Z12getMouvementv+0x130>)
 80a061a:	6819      	ldr	r1, [r3, #0]
 80a061c:	f003 fbbc 	bl	80a3d98 <__aeabi_fsub>
 80a0620:	f003 fe8a 	bl	80a4338 <__aeabi_f2iz>
 80a0624:	2800      	cmp	r0, #0
 80a0626:	bfb8      	it	lt
 80a0628:	4240      	neglt	r0, r0
 80a062a:	f003 fc6b 	bl	80a3f04 <__aeabi_i2f>
 80a062e:	6831      	ldr	r1, [r6, #0]
 80a0630:	f003 fbb4 	bl	80a3d9c <__addsf3>
 80a0634:	4607      	mov	r7, r0
    avMvmt = (dX + dY + dZ) / 3;
 80a0636:	6829      	ldr	r1, [r5, #0]
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
    dY += abs(imu.calcAccel(imu.ay) - refY);
    dZ += abs(imu.calcAccel(imu.az) - refZ);
 80a0638:	6030      	str	r0, [r6, #0]
    avMvmt = (dX + dY + dZ) / 3;
 80a063a:	6820      	ldr	r0, [r4, #0]
 80a063c:	f003 fbae 	bl	80a3d9c <__addsf3>
 80a0640:	4639      	mov	r1, r7
 80a0642:	f003 fbab 	bl	80a3d9c <__addsf3>
 80a0646:	491e      	ldr	r1, [pc, #120]	; (80a06c0 <_Z12getMouvementv+0x134>)
 80a0648:	f003 fd64 	bl	80a4114 <__aeabi_fdiv>
 80a064c:	f8c8 0000 	str.w	r0, [r8]
    delay(100);
 80a0650:	2064      	movs	r0, #100	; 0x64
 80a0652:	f001 ff63 	bl	80a251c <delay>
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
    for (int i = 0; i < 10; i++){
 80a0656:	f1b9 0901 	subs.w	r9, r9, #1
 80a065a:	d1a9      	bne.n	80a05b0 <_Z12getMouvementv+0x24>
    dY += abs(imu.calcAccel(imu.ay) - refY);
    dZ += abs(imu.calcAccel(imu.az) - refZ);
    avMvmt = (dX + dY + dZ) / 3;
    delay(100);
    }
    if (avMvmt < gainThreshold && pixelPointer <= NUM_LED){
 80a065c:	4b11      	ldr	r3, [pc, #68]	; (80a06a4 <_Z12getMouvementv+0x118>)
 80a065e:	681c      	ldr	r4, [r3, #0]
 80a0660:	4b18      	ldr	r3, [pc, #96]	; (80a06c4 <_Z12getMouvementv+0x138>)
 80a0662:	4620      	mov	r0, r4
 80a0664:	6819      	ldr	r1, [r3, #0]
 80a0666:	f003 fe3f 	bl	80a42e8 <__aeabi_fcmplt>
 80a066a:	b140      	cbz	r0, 80a067e <_Z12getMouvementv+0xf2>
 80a066c:	4a16      	ldr	r2, [pc, #88]	; (80a06c8 <_Z12getMouvementv+0x13c>)
 80a066e:	6813      	ldr	r3, [r2, #0]
 80a0670:	2b14      	cmp	r3, #20
 80a0672:	dc04      	bgt.n	80a067e <_Z12getMouvementv+0xf2>
      pixels[pixelPointer] = 1;
 80a0674:	4915      	ldr	r1, [pc, #84]	; (80a06cc <_Z12getMouvementv+0x140>)
 80a0676:	2001      	movs	r0, #1
 80a0678:	54c8      	strb	r0, [r1, r3]
      pixelPointer++;
 80a067a:	4403      	add	r3, r0
 80a067c:	6013      	str	r3, [r2, #0]
    }
    if (avMvmt > lossThreshold && pixelPointer >= 0){
 80a067e:	4b14      	ldr	r3, [pc, #80]	; (80a06d0 <_Z12getMouvementv+0x144>)
 80a0680:	4620      	mov	r0, r4
 80a0682:	6819      	ldr	r1, [r3, #0]
 80a0684:	f003 fe4e 	bl	80a4324 <__aeabi_fcmpgt>
 80a0688:	b140      	cbz	r0, 80a069c <_Z12getMouvementv+0x110>
 80a068a:	4a0f      	ldr	r2, [pc, #60]	; (80a06c8 <_Z12getMouvementv+0x13c>)
 80a068c:	6813      	ldr	r3, [r2, #0]
 80a068e:	2b00      	cmp	r3, #0
 80a0690:	db04      	blt.n	80a069c <_Z12getMouvementv+0x110>
      pixels[pixelPointer] = 0;
 80a0692:	490e      	ldr	r1, [pc, #56]	; (80a06cc <_Z12getMouvementv+0x140>)
 80a0694:	2000      	movs	r0, #0
 80a0696:	54c8      	strb	r0, [r1, r3]
      pixelPointer--;
 80a0698:	3b01      	subs	r3, #1
 80a069a:	6013      	str	r3, [r2, #0]
    }
    printMvmt();
}
 80a069c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
    if (avMvmt > lossThreshold && pixelPointer >= 0){
      pixels[pixelPointer] = 0;
      pixelPointer--;
    }
    printMvmt();
 80a06a0:	f7ff bf10 	b.w	80a04c4 <_Z9printMvmtv>
 80a06a4:	200000ac 	.word	0x200000ac
 80a06a8:	2000008c 	.word	0x2000008c
 80a06ac:	2000013c 	.word	0x2000013c
 80a06b0:	2000007c 	.word	0x2000007c
 80a06b4:	200000b4 	.word	0x200000b4
 80a06b8:	20000084 	.word	0x20000084
 80a06bc:	20000088 	.word	0x20000088
 80a06c0:	40400000 	.word	0x40400000
 80a06c4:	200000b0 	.word	0x200000b0
 80a06c8:	20000138 	.word	0x20000138
 80a06cc:	20000140 	.word	0x20000140
 80a06d0:	20000090 	.word	0x20000090
 80a06d4:	20000080 	.word	0x20000080

080a06d8 <loop>:
  gainThreshold = 0.5;
  lossThreshold = 2;
}

void loop()
{
 80a06d8:	b508      	push	{r3, lr}
  Serial.print("pixelPointer");
 80a06da:	f002 fb53 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a06de:	4913      	ldr	r1, [pc, #76]	; (80a072c <loop+0x54>)
 80a06e0:	f002 f87e 	bl	80a27e0 <_ZN5Print5printEPKc>
  Serial.println(pixelPointer);
 80a06e4:	f002 fb4e 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a06e8:	4b11      	ldr	r3, [pc, #68]	; (80a0730 <loop+0x58>)
 80a06ea:	220a      	movs	r2, #10
 80a06ec:	6819      	ldr	r1, [r3, #0]
 80a06ee:	f002 f8e2 	bl	80a28b6 <_ZN5Print7printlnEii>
  getMouvement();
 80a06f2:	f7ff ff4b 	bl	80a058c <_Z12getMouvementv>
  getState();
 80a06f6:	f7ff fdc3 	bl	80a0280 <_Z8getStatev>
  switch(state){
 80a06fa:	4b0e      	ldr	r3, [pc, #56]	; (80a0734 <loop+0x5c>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	2b03      	cmp	r3, #3
 80a0700:	d813      	bhi.n	80a072a <loop+0x52>
 80a0702:	e8df f003 	tbb	[pc, r3]
 80a0706:	0602      	.short	0x0602
 80a0708:	0e0a      	.short	0x0e0a
    case 3: {
      bleach();
      break;
    }
  }
}
 80a070a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println(pixelPointer);
  getMouvement();
  getState();
  switch(state){
    case 0: {
      prosperity();
 80a070e:	f7ff be97 	b.w	80a0440 <_Z10prosperityv>
    case 3: {
      bleach();
      break;
    }
  }
}
 80a0712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    case 0: {
      prosperity();
      break;
    }
    case 1: {
      maintaining(); 
 80a0716:	f7ff bea9 	b.w	80a046c <_Z11maintainingv>
    case 3: {
      bleach();
      break;
    }
  }
}
 80a071a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    case 1: {
      maintaining(); 
      break;
    }
    case 2:{
      endangered(); 
 80a071e:	f7ff bebb 	b.w	80a0498 <_Z10endangeredv>
    case 3: {
      bleach();
      break;
    }
  }
}
 80a0722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    case 2:{
      endangered(); 
      break;
    }
    case 3: {
      bleach();
 80a0726:	f7ff be2f 	b.w	80a0388 <_Z6bleachv>
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080a4569 	.word	0x080a4569
 80a0730:	20000138 	.word	0x20000138
 80a0734:	20000094 	.word	0x20000094

080a0738 <_GLOBAL__sub_I_imu>:
    Serial.print(" Z:");
    Serial.print(dZ);
    Serial.print(" av: ");
    Serial.print(avMvmt);
    Serial.println(" ");
 80a0738:	b510      	push	{r4, lr}

LSM9DS1 imu;
#define LED_PIN 8
#define NUM_LED 20
// Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, WS2812B);
 80a073a:	4c09      	ldr	r4, [pc, #36]	; (80a0760 <_GLOBAL__sub_I_imu+0x28>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a073c:	f001 fd28 	bl	80a2190 <HAL_Pin_Map>
#include "SparkFunLSM9DS1.h"
#ifdef __AVR__
#include <avr/power.h>
#endif

LSM9DS1 imu;
 80a0740:	4808      	ldr	r0, [pc, #32]	; (80a0764 <_GLOBAL__sub_I_imu+0x2c>)
 80a0742:	f001 f9d9 	bl	80a1af8 <_ZN7LSM9DS1C1Ev>
#define LED_PIN 8
#define NUM_LED 20
// Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, WS2812B);
 80a0746:	2208      	movs	r2, #8
 80a0748:	2114      	movs	r1, #20
 80a074a:	4620      	mov	r0, r4
 80a074c:	2302      	movs	r3, #2
 80a074e:	f000 f860 	bl	80a0812 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0752:	4620      	mov	r0, r4
    Serial.print(" Z:");
    Serial.print(dZ);
    Serial.print(" av: ");
    Serial.print(avMvmt);
    Serial.println(" ");
 80a0754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

LSM9DS1 imu;
#define LED_PIN 8
#define NUM_LED 20
// Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LED, 8, WS2812B);
 80a0758:	4a03      	ldr	r2, [pc, #12]	; (80a0768 <_GLOBAL__sub_I_imu+0x30>)
 80a075a:	4904      	ldr	r1, [pc, #16]	; (80a076c <_GLOBAL__sub_I_imu+0x34>)
 80a075c:	f002 bd18 	b.w	80a3190 <__aeabi_atexit>
 80a0760:	20000098 	.word	0x20000098
 80a0764:	200000b4 	.word	0x200000b4
 80a0768:	20000078 	.word	0x20000078
 80a076c:	080a0775 	.word	0x080a0775

080a0770 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0770:	f001 bcfe 	b.w	80a2170 <HAL_Timer_Get_Micro_Seconds>

080a0774 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0774:	b510      	push	{r4, lr}
 80a0776:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0778:	68c0      	ldr	r0, [r0, #12]
 80a077a:	b108      	cbz	r0, 80a0780 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a077c:	f001 fec6 	bl	80a250c <free>
  if (begun) pinMode(pin, INPUT);
 80a0780:	7823      	ldrb	r3, [r4, #0]
 80a0782:	b11b      	cbz	r3, 80a078c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0784:	2100      	movs	r1, #0
 80a0786:	79e0      	ldrb	r0, [r4, #7]
 80a0788:	f002 fc7e 	bl	80a3088 <pinMode>
}
 80a078c:	4620      	mov	r0, r4
 80a078e:	bd10      	pop	{r4, pc}

080a0790 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0790:	b538      	push	{r3, r4, r5, lr}
 80a0792:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0794:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0796:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0798:	b108      	cbz	r0, 80a079e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a079a:	f001 feb7 	bl	80a250c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a079e:	79a3      	ldrb	r3, [r4, #6]
 80a07a0:	2b06      	cmp	r3, #6
 80a07a2:	bf0c      	ite	eq
 80a07a4:	2004      	moveq	r0, #4
 80a07a6:	2003      	movne	r0, #3
 80a07a8:	4368      	muls	r0, r5
 80a07aa:	b280      	uxth	r0, r0
 80a07ac:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a07ae:	f001 fea5 	bl	80a24fc <malloc>
 80a07b2:	60e0      	str	r0, [r4, #12]
 80a07b4:	b128      	cbz	r0, 80a07c2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a07b6:	88a2      	ldrh	r2, [r4, #4]
 80a07b8:	2100      	movs	r1, #0
 80a07ba:	f003 fdfc 	bl	80a43b6 <memset>
    numLEDs = n;
 80a07be:	8065      	strh	r5, [r4, #2]
 80a07c0:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a07c2:	80a0      	strh	r0, [r4, #4]
 80a07c4:	8060      	strh	r0, [r4, #2]
 80a07c6:	bd38      	pop	{r3, r4, r5, pc}

080a07c8 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a07c8:	b510      	push	{r4, lr}
 80a07ca:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a07cc:	2101      	movs	r1, #1
 80a07ce:	79c0      	ldrb	r0, [r0, #7]
 80a07d0:	f002 fc5a 	bl	80a3088 <pinMode>
  digitalWrite(pin, LOW);
 80a07d4:	2100      	movs	r1, #0
 80a07d6:	79e0      	ldrb	r0, [r4, #7]
 80a07d8:	f002 fc67 	bl	80a30aa <digitalWrite>
  begun = true;
 80a07dc:	2301      	movs	r3, #1
 80a07de:	7023      	strb	r3, [r4, #0]
 80a07e0:	bd10      	pop	{r4, pc}

080a07e2 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a07e2:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a07e4:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a07e6:	4605      	mov	r5, r0
 80a07e8:	460c      	mov	r4, r1
    if (begun) {
 80a07ea:	b11b      	cbz	r3, 80a07f4 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a07ec:	2100      	movs	r1, #0
 80a07ee:	79c0      	ldrb	r0, [r0, #7]
 80a07f0:	f002 fc4a 	bl	80a3088 <pinMode>
    }
    pin = p;
    if (begun) {
 80a07f4:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a07f6:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a07f8:	b153      	cbz	r3, 80a0810 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a07fa:	b2a4      	uxth	r4, r4
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	2101      	movs	r1, #1
 80a0800:	f002 fc42 	bl	80a3088 <pinMode>
        digitalWrite(p, LOW);
 80a0804:	4620      	mov	r0, r4
    }
}
 80a0806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a080a:	2100      	movs	r1, #0
 80a080c:	f002 bc4d 	b.w	80a30aa <digitalWrite>
 80a0810:	bd38      	pop	{r3, r4, r5, pc}

080a0812 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0812:	b570      	push	{r4, r5, r6, lr}
 80a0814:	4604      	mov	r4, r0
 80a0816:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0818:	2500      	movs	r5, #0
 80a081a:	7183      	strb	r3, [r0, #6]
 80a081c:	7005      	strb	r5, [r0, #0]
 80a081e:	7205      	strb	r5, [r0, #8]
 80a0820:	60c5      	str	r5, [r0, #12]
 80a0822:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0824:	f7ff ffb4 	bl	80a0790 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0828:	4620      	mov	r0, r4
 80a082a:	4631      	mov	r1, r6
 80a082c:	f7ff ffd9 	bl	80a07e2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0830:	4620      	mov	r0, r4
 80a0832:	bd70      	pop	{r4, r5, r6, pc}

080a0834 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0834:	68c3      	ldr	r3, [r0, #12]
 80a0836:	2b00      	cmp	r3, #0
 80a0838:	f000 858e 	beq.w	80a1358 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0840:	4604      	mov	r4, r0
 80a0842:	7983      	ldrb	r3, [r0, #6]
 80a0844:	b086      	sub	sp, #24
 80a0846:	3b02      	subs	r3, #2
 80a0848:	b2db      	uxtb	r3, r3
 80a084a:	2b04      	cmp	r3, #4
 80a084c:	bf96      	itet	ls
 80a084e:	4a29      	ldrls	r2, [pc, #164]	; (80a08f4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0850:	2532      	movhi	r5, #50	; 0x32
 80a0852:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0856:	f7ff ff8b 	bl	80a0770 <micros>
 80a085a:	6923      	ldr	r3, [r4, #16]
 80a085c:	1ac0      	subs	r0, r0, r3
 80a085e:	42a8      	cmp	r0, r5
 80a0860:	d3f9      	bcc.n	80a0856 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0862:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0864:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0866:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0868:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a086a:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a086e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0872:	f000 8272 	beq.w	80a0d5a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0876:	2907      	cmp	r1, #7
 80a0878:	f000 826f 	beq.w	80a0d5a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a087c:	2906      	cmp	r1, #6
 80a087e:	f000 8432 	beq.w	80a10e6 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0882:	2905      	cmp	r1, #5
 80a0884:	f000 83ab 	beq.w	80a0fde <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0888:	2908      	cmp	r1, #8
 80a088a:	f000 83a8 	beq.w	80a0fde <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a088e:	2900      	cmp	r1, #0
 80a0890:	f040 8563 	bne.w	80a135a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0894:	4a18      	ldr	r2, [pc, #96]	; (80a08f8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0896:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a089a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a089e:	b29b      	uxth	r3, r3
 80a08a0:	2b00      	cmp	r3, #0
 80a08a2:	f000 8395 	beq.w	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a08a6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a08a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a08ac:	f10e 0503 	add.w	r5, lr, #3
 80a08b0:	3b03      	subs	r3, #3
 80a08b2:	b29b      	uxth	r3, r3
 80a08b4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a08b8:	f89e 3000 	ldrb.w	r3, [lr]
 80a08bc:	b2db      	uxtb	r3, r3
 80a08be:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a08c2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a08c6:	b2db      	uxtb	r3, r3
 80a08c8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a08cc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a08d0:	b2db      	uxtb	r3, r3
 80a08d2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a08d6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a08da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a08de:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a08e2:	021b      	lsls	r3, r3, #8
 80a08e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a08e8:	4303      	orrs	r3, r0
 80a08ea:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a08ec:	f88d 1005 	strb.w	r1, [sp, #5]
 80a08f0:	e11b      	b.n	80a0b2a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a08f2:	bf00      	nop
 80a08f4:	080a4578 	.word	0x080a4578
 80a08f8:	20000158 	.word	0x20000158
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a08fc:	4600      	mov	r0, r0
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0a04:	79e3      	ldrb	r3, [r4, #7]
 80a0a06:	6810      	ldr	r0, [r2, #0]
 80a0a08:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a0c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a10:	88bf      	ldrh	r7, [r7, #4]
 80a0a12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a16:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a18:	4600      	mov	r0, r0
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0b12:	9b04      	ldr	r3, [sp, #16]
 80a0b14:	085b      	lsrs	r3, r3, #1
 80a0b16:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0b18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0b1c:	3301      	adds	r3, #1
 80a0b1e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0b20:	2b17      	cmp	r3, #23
 80a0b22:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0b26:	f200 82db 	bhi.w	80a10e0 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0b2a:	79e3      	ldrb	r3, [r4, #7]
 80a0b2c:	6810      	ldr	r0, [r2, #0]
 80a0b2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b32:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b36:	88bf      	ldrh	r7, [r7, #4]
 80a0b38:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b3c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0b3e:	9803      	ldr	r0, [sp, #12]
 80a0b40:	9b04      	ldr	r3, [sp, #16]
 80a0b42:	4218      	tst	r0, r3
 80a0b44:	f47f aeda 	bne.w	80a08fc <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0b48:	4600      	mov	r0, r0
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0b9a:	79e3      	ldrb	r3, [r4, #7]
 80a0b9c:	6810      	ldr	r0, [r2, #0]
 80a0b9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ba2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ba6:	88bf      	ldrh	r7, [r7, #4]
 80a0ba8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bac:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0bae:	4600      	mov	r0, r0
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	e6db      	b.n	80a0b12 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d5e:	4a17      	ldr	r2, [pc, #92]	; (80a0dbc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0d60:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0d62:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0d66:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d68:	2b00      	cmp	r3, #0
 80a0d6a:	f000 8131 	beq.w	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0d6e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d70:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d74:	f10e 0103 	add.w	r1, lr, #3
 80a0d78:	3b03      	subs	r3, #3
 80a0d7a:	b29b      	uxth	r3, r3
 80a0d7c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0d80:	f89e 3000 	ldrb.w	r3, [lr]
 80a0d84:	b2db      	uxtb	r3, r3
 80a0d86:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0d8a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0d8e:	b2db      	uxtb	r3, r3
 80a0d90:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0d94:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0d98:	b2db      	uxtb	r3, r3
 80a0d9a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0d9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0da2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0da6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0daa:	0200      	lsls	r0, r0, #8
 80a0dac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0db0:	433b      	orrs	r3, r7
 80a0db2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0db4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0db8:	e080      	b.n	80a0ebc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0dba:	bf00      	nop
 80a0dbc:	20000158 	.word	0x20000158
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0dc0:	4600      	mov	r0, r0
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0e5a:	79e3      	ldrb	r3, [r4, #7]
 80a0e5c:	6810      	ldr	r0, [r2, #0]
 80a0e5e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e62:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e66:	88bf      	ldrh	r7, [r7, #4]
 80a0e68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e6c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e6e:	4600      	mov	r0, r0
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0ea4:	9b04      	ldr	r3, [sp, #16]
 80a0ea6:	085b      	lsrs	r3, r3, #1
 80a0ea8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0eaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0eae:	3301      	adds	r3, #1
 80a0eb0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0eb2:	2b17      	cmp	r3, #23
 80a0eb4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0eb8:	f200 8083 	bhi.w	80a0fc2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0ebc:	79e3      	ldrb	r3, [r4, #7]
 80a0ebe:	6810      	ldr	r0, [r2, #0]
 80a0ec0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ec4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ec8:	88bf      	ldrh	r7, [r7, #4]
 80a0eca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ece:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0ed0:	9803      	ldr	r0, [sp, #12]
 80a0ed2:	9b04      	ldr	r3, [sp, #16]
 80a0ed4:	4218      	tst	r0, r3
 80a0ed6:	f47f af73 	bne.w	80a0dc0 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0eda:	4600      	mov	r0, r0
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0f02:	79e3      	ldrb	r3, [r4, #7]
 80a0f04:	6810      	ldr	r0, [r2, #0]
 80a0f06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f0a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f0e:	88bf      	ldrh	r7, [r7, #4]
 80a0f10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f14:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f16:	4600      	mov	r0, r0
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	e770      	b.n	80a0ea4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0fc2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0fc6:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0fc8:	b29b      	uxth	r3, r3
 80a0fca:	2b00      	cmp	r3, #0
 80a0fcc:	f47f aecf 	bne.w	80a0d6e <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0fd0:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0fd2:	f7ff fbcd 	bl	80a0770 <micros>
 80a0fd6:	6120      	str	r0, [r4, #16]
}
 80a0fd8:	b006      	add	sp, #24
 80a0fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0fde:	4b5e      	ldr	r3, [pc, #376]	; (80a1158 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0fe0:	4a5e      	ldr	r2, [pc, #376]	; (80a115c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0fe2:	4618      	mov	r0, r3
 80a0fe4:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0fe6:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0fea:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0fec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ff0:	b292      	uxth	r2, r2
 80a0ff2:	2a00      	cmp	r2, #0
 80a0ff4:	d0ec      	beq.n	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0ff6:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ffa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ffe:	f10e 0503 	add.w	r5, lr, #3
 80a1002:	3a03      	subs	r2, #3
 80a1004:	b292      	uxth	r2, r2
 80a1006:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a100a:	f89e 2000 	ldrb.w	r2, [lr]
 80a100e:	b2d2      	uxtb	r2, r2
 80a1010:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1014:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a1018:	b2d2      	uxtb	r2, r2
 80a101a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a101e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a1022:	b2d2      	uxtb	r2, r2
 80a1024:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1028:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a102c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1030:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1034:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1038:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a103c:	ea42 020c 	orr.w	r2, r2, ip
 80a1040:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1042:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1046:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1048:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a104a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a104e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1052:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1056:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a105a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a105c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1060:	9e03      	ldr	r6, [sp, #12]
 80a1062:	9a04      	ldr	r2, [sp, #16]
 80a1064:	4216      	tst	r6, r2
 80a1066:	d023      	beq.n	80a10b0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1068:	685a      	ldr	r2, [r3, #4]
 80a106a:	9e05      	ldr	r6, [sp, #20]
 80a106c:	1b92      	subs	r2, r2, r6
 80a106e:	2a4f      	cmp	r2, #79	; 0x4f
 80a1070:	d9fa      	bls.n	80a1068 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1072:	79e2      	ldrb	r2, [r4, #7]
 80a1074:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1078:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a107c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1080:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1084:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1088:	6842      	ldr	r2, [r0, #4]
 80a108a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a108c:	685a      	ldr	r2, [r3, #4]
 80a108e:	9e05      	ldr	r6, [sp, #20]
 80a1090:	1b92      	subs	r2, r2, r6
 80a1092:	2a07      	cmp	r2, #7
 80a1094:	d9fa      	bls.n	80a108c <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1096:	9a04      	ldr	r2, [sp, #16]
 80a1098:	0852      	lsrs	r2, r2, #1
 80a109a:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a109c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a10a0:	3201      	adds	r2, #1
 80a10a2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a10a4:	2a17      	cmp	r2, #23
 80a10a6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a10aa:	d9cc      	bls.n	80a1046 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a10ac:	46ae      	mov	lr, r5
 80a10ae:	e79d      	b.n	80a0fec <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a10b0:	685a      	ldr	r2, [r3, #4]
 80a10b2:	9e05      	ldr	r6, [sp, #20]
 80a10b4:	1b92      	subs	r2, r2, r6
 80a10b6:	2a18      	cmp	r2, #24
 80a10b8:	d9fa      	bls.n	80a10b0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a10ba:	79e2      	ldrb	r2, [r4, #7]
 80a10bc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a10c0:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a10c4:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a10c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a10cc:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a10d0:	6842      	ldr	r2, [r0, #4]
 80a10d2:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a10d4:	685a      	ldr	r2, [r3, #4]
 80a10d6:	9e05      	ldr	r6, [sp, #20]
 80a10d8:	1b92      	subs	r2, r2, r6
 80a10da:	2a45      	cmp	r2, #69	; 0x45
 80a10dc:	d9fa      	bls.n	80a10d4 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a10de:	e7da      	b.n	80a1096 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a10e0:	46ae      	mov	lr, r5
 80a10e2:	f7ff bbda 	b.w	80a089a <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a10e6:	4a1d      	ldr	r2, [pc, #116]	; (80a115c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a10e8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a10ec:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a10ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10f2:	b29b      	uxth	r3, r3
 80a10f4:	2b00      	cmp	r3, #0
 80a10f6:	f43f af6b 	beq.w	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a10fa:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a10fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1100:	f10e 0104 	add.w	r1, lr, #4
 80a1104:	3b04      	subs	r3, #4
 80a1106:	b29b      	uxth	r3, r3
 80a1108:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a110c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1110:	b2db      	uxtb	r3, r3
 80a1112:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1116:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a111a:	b2db      	uxtb	r3, r3
 80a111c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1120:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1124:	b2db      	uxtb	r3, r3
 80a1126:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a112a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a112e:	b2db      	uxtb	r3, r3
 80a1130:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1134:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1138:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a113c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1140:	043f      	lsls	r7, r7, #16
 80a1142:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1146:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a114a:	4303      	orrs	r3, r0
 80a114c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1150:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1152:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1156:	e07e      	b.n	80a1256 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1158:	e0001000 	.word	0xe0001000
 80a115c:	20000158 	.word	0x20000158
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1160:	4600      	mov	r0, r0
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a11ce:	79e3      	ldrb	r3, [r4, #7]
 80a11d0:	6810      	ldr	r0, [r2, #0]
 80a11d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11d6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a11da:	88bf      	ldrh	r7, [r7, #4]
 80a11dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11e0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11e2:	4600      	mov	r0, r0
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1240:	9b04      	ldr	r3, [sp, #16]
 80a1242:	085b      	lsrs	r3, r3, #1
 80a1244:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1246:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a124a:	3301      	adds	r3, #1
 80a124c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a124e:	2b1f      	cmp	r3, #31
 80a1250:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1254:	d87e      	bhi.n	80a1354 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1256:	79e3      	ldrb	r3, [r4, #7]
 80a1258:	6810      	ldr	r0, [r2, #0]
 80a125a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a125e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1262:	88bf      	ldrh	r7, [r7, #4]
 80a1264:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1268:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a126a:	9803      	ldr	r0, [sp, #12]
 80a126c:	9b04      	ldr	r3, [sp, #16]
 80a126e:	4218      	tst	r0, r3
 80a1270:	f47f af76 	bne.w	80a1160 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1274:	4600      	mov	r0, r0
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a129c:	79e3      	ldrb	r3, [r4, #7]
 80a129e:	6810      	ldr	r0, [r2, #0]
 80a12a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12a4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12a8:	88bf      	ldrh	r7, [r7, #4]
 80a12aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12ae:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12b0:	4600      	mov	r0, r0
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	e775      	b.n	80a1240 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1354:	468e      	mov	lr, r1
 80a1356:	e6ca      	b.n	80a10ee <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1358:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a135a:	2903      	cmp	r1, #3
 80a135c:	f000 812e 	beq.w	80a15bc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1360:	4a1e      	ldr	r2, [pc, #120]	; (80a13dc <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1362:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1366:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1368:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a136c:	b29b      	uxth	r3, r3
 80a136e:	2b00      	cmp	r3, #0
 80a1370:	f43f ae2e 	beq.w	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1374:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1376:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a137a:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a137c:	3b03      	subs	r3, #3
 80a137e:	b29b      	uxth	r3, r3
 80a1380:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1384:	f89e 3000 	ldrb.w	r3, [lr]
 80a1388:	f10e 0103 	add.w	r1, lr, #3
 80a138c:	b2db      	uxtb	r3, r3
 80a138e:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1392:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1396:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a139a:	b2db      	uxtb	r3, r3
 80a139c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a13a0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a13a4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a13a8:	b2db      	uxtb	r3, r3
 80a13aa:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a13ae:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a13b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a13b6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a13ba:	021b      	lsls	r3, r3, #8
 80a13bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a13c0:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a13c4:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a13c8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a13cc:	433b      	orrs	r3, r7
 80a13ce:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a13d0:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a13d4:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a13d8:	e07d      	b.n	80a14d6 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a13da:	bf00      	nop
 80a13dc:	20000158 	.word	0x20000158
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a13e0:	9b04      	ldr	r3, [sp, #16]
 80a13e2:	085b      	lsrs	r3, r3, #1
 80a13e4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13e6:	4600      	mov	r0, r0
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a146c:	79e0      	ldrb	r0, [r4, #7]
 80a146e:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1470:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1474:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1478:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a147c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1480:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1484:	3301      	adds	r3, #1
 80a1486:	b2db      	uxtb	r3, r3
 80a1488:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a148c:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1490:	4600      	mov	r0, r0
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
          if(j==24) break;
 80a14ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a14be:	2b18      	cmp	r3, #24
 80a14c0:	d07a      	beq.n	80a15b8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a14c2:	79e3      	ldrb	r3, [r4, #7]
 80a14c4:	6810      	ldr	r0, [r2, #0]
 80a14c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14ca:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14ce:	88bf      	ldrh	r7, [r7, #4]
 80a14d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14d4:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a14d6:	9803      	ldr	r0, [sp, #12]
 80a14d8:	9b04      	ldr	r3, [sp, #16]
 80a14da:	4218      	tst	r0, r3
 80a14dc:	d180      	bne.n	80a13e0 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a14de:	4600      	mov	r0, r0
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1500:	79e3      	ldrb	r3, [r4, #7]
 80a1502:	6810      	ldr	r0, [r2, #0]
 80a1504:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1508:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a150c:	88bf      	ldrh	r7, [r7, #4]
 80a150e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1512:	831f      	strh	r7, [r3, #24]
          j++;
 80a1514:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1518:	3301      	adds	r3, #1
 80a151a:	b2db      	uxtb	r3, r3
 80a151c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1520:	9b04      	ldr	r3, [sp, #16]
 80a1522:	085b      	lsrs	r3, r3, #1
 80a1524:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1526:	4600      	mov	r0, r0
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
          if(j==24) break;
 80a15b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a15b4:	2b18      	cmp	r3, #24
 80a15b6:	d184      	bne.n	80a14c2 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a15b8:	468e      	mov	lr, r1
 80a15ba:	e6d5      	b.n	80a1368 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a15bc:	4a17      	ldr	r2, [pc, #92]	; (80a161c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a15be:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a15c2:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a15c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15c8:	b29b      	uxth	r3, r3
 80a15ca:	2b00      	cmp	r3, #0
 80a15cc:	f43f ad00 	beq.w	80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a15d0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a15d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15d6:	f10e 0103 	add.w	r1, lr, #3
 80a15da:	3b03      	subs	r3, #3
 80a15dc:	b29b      	uxth	r3, r3
 80a15de:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a15e2:	f89e 3000 	ldrb.w	r3, [lr]
 80a15e6:	b2db      	uxtb	r3, r3
 80a15e8:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a15ec:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a15f0:	b2db      	uxtb	r3, r3
 80a15f2:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a15f6:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a15fa:	b2db      	uxtb	r3, r3
 80a15fc:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1600:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1604:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1608:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a160c:	021b      	lsls	r3, r3, #8
 80a160e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1612:	4303      	orrs	r3, r0
 80a1614:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1616:	f88d 6005 	strb.w	r6, [sp, #5]
 80a161a:	e0e0      	b.n	80a17de <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a161c:	20000158 	.word	0x20000158
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1620:	4600      	mov	r0, r0
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1742:	79e3      	ldrb	r3, [r4, #7]
 80a1744:	6810      	ldr	r0, [r2, #0]
 80a1746:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a174a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a174e:	88bf      	ldrh	r7, [r7, #4]
 80a1750:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1754:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1756:	4600      	mov	r0, r0
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a17c6:	9b04      	ldr	r3, [sp, #16]
 80a17c8:	085b      	lsrs	r3, r3, #1
 80a17ca:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a17cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a17d0:	3301      	adds	r3, #1
 80a17d2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a17d4:	2b17      	cmp	r3, #23
 80a17d6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a17da:	f200 80e3 	bhi.w	80a19a4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a17de:	79e3      	ldrb	r3, [r4, #7]
 80a17e0:	6810      	ldr	r0, [r2, #0]
 80a17e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17e6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17ea:	88bf      	ldrh	r7, [r7, #4]
 80a17ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17f0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a17f2:	9803      	ldr	r0, [sp, #12]
 80a17f4:	9b04      	ldr	r3, [sp, #16]
 80a17f6:	4218      	tst	r0, r3
 80a17f8:	f47f af12 	bne.w	80a1620 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17fc:	4600      	mov	r0, r0
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a187e:	79e3      	ldrb	r3, [r4, #7]
 80a1880:	6810      	ldr	r0, [r2, #0]
 80a1882:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1886:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a188a:	88bf      	ldrh	r7, [r7, #4]
 80a188c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1890:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1892:	4600      	mov	r0, r0
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	e710      	b.n	80a17c6 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a19a4:	468e      	mov	lr, r1
 80a19a6:	e60d      	b.n	80a15c4 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a19a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a19a8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a19aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a19ac:	428b      	cmp	r3, r1
 80a19ae:	d945      	bls.n	80a1a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a19b0:	7a05      	ldrb	r5, [r0, #8]
 80a19b2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a19b6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a19ba:	b2d6      	uxtb	r6, r2
 80a19bc:	b145      	cbz	r5, 80a19d0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a19be:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a19c0:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a19c2:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a19c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a19c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a19cc:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a19d0:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a19d4:	68c7      	ldr	r7, [r0, #12]
 80a19d6:	f1bc 0f06 	cmp.w	ip, #6
 80a19da:	bf0c      	ite	eq
 80a19dc:	2504      	moveq	r5, #4
 80a19de:	2503      	movne	r5, #3
 80a19e0:	4369      	muls	r1, r5
 80a19e2:	f1bc 0f08 	cmp.w	ip, #8
 80a19e6:	eb07 0501 	add.w	r5, r7, r1
 80a19ea:	d824      	bhi.n	80a1a36 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a19ec:	f04f 0e01 	mov.w	lr, #1
 80a19f0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a19f4:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a19f8:	d10c      	bne.n	80a1a14 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a19fa:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a19fe:	d10d      	bne.n	80a1a1c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1a00:	f01e 0f10 	tst.w	lr, #16
 80a1a04:	d017      	beq.n	80a1a36 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1a06:	2bff      	cmp	r3, #255	; 0xff
 80a1a08:	bf08      	it	eq
 80a1a0a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1a0c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1a0e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1a10:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1a14:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1a16:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1a18:	70ae      	strb	r6, [r5, #2]
        } break;
 80a1a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1a1c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1a1e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1a20:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1a22:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1a24:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1a26:	b90b      	cbnz	r3, 80a1a2c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1a28:	b2d2      	uxtb	r2, r2
 80a1a2a:	e002      	b.n	80a1a32 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1a2c:	435a      	muls	r2, r3
 80a1a2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1a32:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1a36:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1a38:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1a3a:	70ae      	strb	r6, [r5, #2]
 80a1a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1a3e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1a3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1a42:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1a46:	4770      	bx	lr

080a1a48 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a1a48:	8840      	ldrh	r0, [r0, #2]
 80a1a4a:	4770      	bx	lr

080a1a4c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1a4c:	b508      	push	{r3, lr}
 80a1a4e:	f000 fb9f 	bl	80a2190 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1a52:	f000 fb9d 	bl	80a2190 <HAL_Pin_Map>
 80a1a56:	4b01      	ldr	r3, [pc, #4]	; (80a1a5c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1a58:	6018      	str	r0, [r3, #0]
 80a1a5a:	bd08      	pop	{r3, pc}
 80a1a5c:	20000158 	.word	0x20000158

080a1a60 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a1a60:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a1a62:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a1a64:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a1a66:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a1a68:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a1a6a:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a1a6c:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a1a6e:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a1a70:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a1a72:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a1a74:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a1a76:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a1a78:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a1a7a:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a1a7c:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a1a80:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a1a82:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a1a84:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a1a86:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a1a88:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a1a8a:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a1a8c:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a1a8e:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a1a90:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a1a92:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a1a94:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a1a96:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a1a98:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a1a9c:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a1a9e:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a1aa0:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a1aa2:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a1aa4:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a1aa6:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a1aa8:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a1aaa:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a1aac:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a1aae:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a1ab0:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a1ab2:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a1ab6:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a1ab8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a1abc:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a1ac0:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a1ac2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a1ac6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a1aca:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a1ace:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a1ad0:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a1ad2:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a1ad4:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a1ad6:	6565      	str	r5, [r4, #84]	; 0x54
 80a1ad8:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a1adc:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a1ae0:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a1ae4:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a1ae8:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a1aec:	d1f0      	bne.n	80a1ad0 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a1aee:	f04f 0300 	mov.w	r3, #0
 80a1af2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a1af6:	bd30      	pop	{r4, r5, pc}

080a1af8 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a1af8:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a1afa:	231e      	movs	r3, #30
 80a1afc:	226b      	movs	r2, #107	; 0x6b
 80a1afe:	2101      	movs	r1, #1
 80a1b00:	f7ff ffae 	bl	80a1a60 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a1b04:	bd10      	pop	{r4, pc}

080a1b06 <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a1b06:	b510      	push	{r4, lr}
 80a1b08:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a1b0a:	4608      	mov	r0, r1
 80a1b0c:	f002 f9fa 	bl	80a3f04 <__aeabi_i2f>
 80a1b10:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a1b12:	f002 fa4b 	bl	80a3fac <__aeabi_fmul>
}
 80a1b16:	bd10      	pop	{r4, pc}

080a1b18 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a1b18:	b510      	push	{r4, lr}
 80a1b1a:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a1b1c:	88c0      	ldrh	r0, [r0, #6]
 80a1b1e:	f002 f9ed 	bl	80a3efc <__aeabi_ui2f>
 80a1b22:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a1b26:	f002 fa41 	bl	80a3fac <__aeabi_fmul>
 80a1b2a:	6760      	str	r0, [r4, #116]	; 0x74
 80a1b2c:	bd10      	pop	{r4, pc}

080a1b2e <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a1b2e:	b510      	push	{r4, lr}
 80a1b30:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a1b32:	7dc0      	ldrb	r0, [r0, #23]
 80a1b34:	f002 f9e2 	bl	80a3efc <__aeabi_ui2f>
 80a1b38:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a1b3c:	f002 fa36 	bl	80a3fac <__aeabi_fmul>
 80a1b40:	67a0      	str	r0, [r4, #120]	; 0x78
 80a1b42:	bd10      	pop	{r4, pc}

080a1b44 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a1b44:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a1b48:	3b04      	subs	r3, #4
 80a1b4a:	2b0c      	cmp	r3, #12
 80a1b4c:	d814      	bhi.n	80a1b78 <_ZN7LSM9DS18calcmResEv+0x34>
 80a1b4e:	e8df f003 	tbb	[pc, r3]
 80a1b52:	1307      	.short	0x1307
 80a1b54:	130a1313 	.word	0x130a1313
 80a1b58:	130d1313 	.word	0x130d1313
 80a1b5c:	1313      	.short	0x1313
 80a1b5e:	10          	.byte	0x10
 80a1b5f:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a1b60:	4b06      	ldr	r3, [pc, #24]	; (80a1b7c <_ZN7LSM9DS18calcmResEv+0x38>)
 80a1b62:	681b      	ldr	r3, [r3, #0]
 80a1b64:	e007      	b.n	80a1b76 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a1b66:	4b05      	ldr	r3, [pc, #20]	; (80a1b7c <_ZN7LSM9DS18calcmResEv+0x38>)
 80a1b68:	685b      	ldr	r3, [r3, #4]
 80a1b6a:	e004      	b.n	80a1b76 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a1b6c:	4b03      	ldr	r3, [pc, #12]	; (80a1b7c <_ZN7LSM9DS18calcmResEv+0x38>)
 80a1b6e:	689b      	ldr	r3, [r3, #8]
 80a1b70:	e001      	b.n	80a1b76 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <_ZN7LSM9DS18calcmResEv+0x38>)
 80a1b74:	68db      	ldr	r3, [r3, #12]
 80a1b76:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a1b78:	4770      	bx	lr
 80a1b7a:	bf00      	nop
 80a1b7c:	20000000 	.word	0x20000000

080a1b80 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a1b80:	88c3      	ldrh	r3, [r0, #6]
 80a1b82:	2bf5      	cmp	r3, #245	; 0xf5
 80a1b84:	d007      	beq.n	80a1b96 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a1b86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a1b8a:	d004      	beq.n	80a1b96 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a1b8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a1b90:	bf1c      	itt	ne
 80a1b92:	23f5      	movne	r3, #245	; 0xf5
 80a1b94:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a1b96:	7dc2      	ldrb	r2, [r0, #23]
 80a1b98:	2a10      	cmp	r2, #16
 80a1b9a:	d803      	bhi.n	80a1ba4 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a1b9c:	4b08      	ldr	r3, [pc, #32]	; (80a1bc0 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a1b9e:	40d3      	lsrs	r3, r2
 80a1ba0:	07da      	lsls	r2, r3, #31
 80a1ba2:	d401      	bmi.n	80a1ba8 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a1ba4:	2302      	movs	r3, #2
 80a1ba6:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a1ba8:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a1bac:	2a10      	cmp	r2, #16
 80a1bae:	d803      	bhi.n	80a1bb8 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a1bb0:	4b04      	ldr	r3, [pc, #16]	; (80a1bc4 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a1bb2:	40d3      	lsrs	r3, r2
 80a1bb4:	07db      	lsls	r3, r3, #31
 80a1bb6:	d402      	bmi.n	80a1bbe <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a1bb8:	2304      	movs	r3, #4
 80a1bba:	f880 3020 	strb.w	r3, [r0, #32]
 80a1bbe:	4770      	bx	lr
 80a1bc0:	00010114 	.word	0x00010114
 80a1bc4:	00011110 	.word	0x00011110

080a1bc8 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a1bc8:	b510      	push	{r4, lr}
 80a1bca:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a1bcc:	2101      	movs	r1, #1
 80a1bce:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a1bd2:	f001 fa59 	bl	80a3088 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a1bd6:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a1bda:	2101      	movs	r1, #1
 80a1bdc:	f001 fa65 	bl	80a30aa <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a1be0:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a1be4:	2101      	movs	r1, #1
 80a1be6:	f001 fa4f 	bl	80a3088 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a1bea:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a1bee:	4c0a      	ldr	r4, [pc, #40]	; (80a1c18 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a1bf0:	2101      	movs	r1, #1
 80a1bf2:	f001 fa5a 	bl	80a30aa <digitalWrite>
	
	SPI.begin();
 80a1bf6:	4620      	mov	r0, r4
 80a1bf8:	f000 ff4c 	bl	80a2a94 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	2108      	movs	r1, #8
 80a1c00:	f000 ff9a 	bl	80a2b38 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a1c04:	4620      	mov	r0, r4
 80a1c06:	2101      	movs	r1, #1
 80a1c08:	f000 ff49 	bl	80a2a9e <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a1c0c:	4620      	mov	r0, r4
}
 80a1c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a1c12:	2100      	movs	r1, #0
 80a1c14:	f000 bf46 	b.w	80a2aa4 <_ZN8SPIClass11setDataModeEh>
 80a1c18:	20000624 	.word	0x20000624

080a1c1c <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a1c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a1c1e:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a1c20:	4617      	mov	r7, r2
 80a1c22:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a1c24:	4d09      	ldr	r5, [pc, #36]	; (80a1c4c <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a1c26:	4620      	mov	r0, r4
 80a1c28:	2100      	movs	r1, #0
 80a1c2a:	f001 fa3e 	bl	80a30aa <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a1c2e:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a1c32:	4628      	mov	r0, r5
 80a1c34:	f000 ff94 	bl	80a2b60 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a1c38:	4631      	mov	r1, r6
 80a1c3a:	4628      	mov	r0, r5
 80a1c3c:	f000 ff90 	bl	80a2b60 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a1c40:	4620      	mov	r0, r4
}
 80a1c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a1c46:	2101      	movs	r1, #1
 80a1c48:	f001 ba2f 	b.w	80a30aa <digitalWrite>
 80a1c4c:	20000624 	.word	0x20000624

080a1c50 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a1c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c52:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a1c54:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a1c58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a1c5c:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a1c5e:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a1c62:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a1c66:	d103      	bne.n	80a1c70 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a1c68:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a1c6a:	bf88      	it	hi
 80a1c6c:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a1c70:	b28c      	uxth	r4, r1
 80a1c72:	4620      	mov	r0, r4
 80a1c74:	2100      	movs	r1, #0
 80a1c76:	f001 fa18 	bl	80a30aa <digitalWrite>
	SPI.transfer(rAddress);
 80a1c7a:	4629      	mov	r1, r5
 80a1c7c:	4809      	ldr	r0, [pc, #36]	; (80a1ca4 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a1c7e:	f000 ff6f 	bl	80a2b60 <_ZN8SPIClass8transferEh>
 80a1c82:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a1c84:	1bab      	subs	r3, r5, r6
 80a1c86:	429f      	cmp	r7, r3
 80a1c88:	dd06      	ble.n	80a1c98 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a1c8a:	2100      	movs	r1, #0
 80a1c8c:	4805      	ldr	r0, [pc, #20]	; (80a1ca4 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a1c8e:	f000 ff67 	bl	80a2b60 <_ZN8SPIClass8transferEh>
 80a1c92:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a1c96:	e7f5      	b.n	80a1c84 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	2101      	movs	r1, #1
 80a1c9c:	f001 fa05 	bl	80a30aa <digitalWrite>
	
	return 1;
}
 80a1ca0:	2001      	movs	r0, #1
 80a1ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1ca4:	20000624 	.word	0x20000624

080a1ca8 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a1ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a1caa:	2301      	movs	r3, #1
 80a1cac:	9300      	str	r3, [sp, #0]
 80a1cae:	f10d 030f 	add.w	r3, sp, #15
 80a1cb2:	f7ff ffcd 	bl	80a1c50 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a1cb6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a1cba:	b005      	add	sp, #20
 80a1cbc:	f85d fb04 	ldr.w	pc, [sp], #4

080a1cc0 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a1cc0:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a1cc2:	f001 fa0b 	bl	80a30dc <_Z19__fetch_global_Wirev>
}
 80a1cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a1cca:	f000 bc71 	b.w	80a25b0 <_ZN7TwoWire5beginEv>

080a1cce <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a1cce:	b570      	push	{r4, r5, r6, lr}
 80a1cd0:	460e      	mov	r6, r1
 80a1cd2:	4615      	mov	r5, r2
 80a1cd4:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a1cd6:	f001 fa01 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1cda:	4631      	mov	r1, r6
 80a1cdc:	f000 fc7a 	bl	80a25d4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a1ce0:	f001 f9fc 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1ce4:	6803      	ldr	r3, [r0, #0]
 80a1ce6:	4629      	mov	r1, r5
 80a1ce8:	689b      	ldr	r3, [r3, #8]
 80a1cea:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a1cec:	f001 f9f6 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1cf0:	6803      	ldr	r3, [r0, #0]
 80a1cf2:	4621      	mov	r1, r4
 80a1cf4:	689a      	ldr	r2, [r3, #8]
 80a1cf6:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a1cf8:	f001 f9f0 	bl	80a30dc <_Z19__fetch_global_Wirev>
}
 80a1cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a1d00:	f000 bc70 	b.w	80a25e4 <_ZN7TwoWire15endTransmissionEv>

080a1d04 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a1d04:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1d06:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a1d08:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1d0a:	2a01      	cmp	r2, #1
 80a1d0c:	d105      	bne.n	80a1d1a <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a1d0e:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a1d10:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a1d12:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1d16:	f7ff bfda 	b.w	80a1cce <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1d1a:	b92a      	cbnz	r2, 80a1d28 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a1d1c:	460a      	mov	r2, r1
}
 80a1d1e:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a1d20:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1d24:	f7ff bf7a 	b.w	80a1c1c <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a1d28:	bc10      	pop	{r4}
 80a1d2a:	4770      	bx	lr

080a1d2c <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a1d2c:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a1d2e:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a1d30:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a1d32:	b113      	cbz	r3, 80a1d3a <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a1d34:	7a03      	ldrb	r3, [r0, #8]
 80a1d36:	015b      	lsls	r3, r3, #5
 80a1d38:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a1d3a:	88e2      	ldrh	r2, [r4, #6]
 80a1d3c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a1d40:	d005      	beq.n	80a1d4e <_ZN7LSM9DS18initGyroEv+0x22>
 80a1d42:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a1d46:	d104      	bne.n	80a1d52 <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a1d48:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a1d4c:	e001      	b.n	80a1d52 <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a1d4e:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a1d52:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a1d54:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a1d56:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a1d5a:	431a      	orrs	r2, r3
 80a1d5c:	4620      	mov	r0, r4
 80a1d5e:	f7ff ffd1 	bl	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a1d62:	2200      	movs	r2, #0
 80a1d64:	2111      	movs	r1, #17
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	f7ff ffcc 	bl	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a1d6c:	7aa3      	ldrb	r3, [r4, #10]
 80a1d6e:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a1d70:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a1d72:	bf14      	ite	ne
 80a1d74:	2280      	movne	r2, #128	; 0x80
 80a1d76:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a1d78:	b12b      	cbz	r3, 80a1d86 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a1d7a:	7b23      	ldrb	r3, [r4, #12]
 80a1d7c:	f003 030f 	and.w	r3, r3, #15
 80a1d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a1d84:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a1d86:	2112      	movs	r1, #18
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	f7ff ffbb 	bl	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a1d8e:	7ce3      	ldrb	r3, [r4, #19]
 80a1d90:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a1d92:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a1d94:	bf0c      	ite	eq
 80a1d96:	2200      	moveq	r2, #0
 80a1d98:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a1d9a:	b113      	cbz	r3, 80a1da2 <_ZN7LSM9DS18initGyroEv+0x76>
 80a1d9c:	f042 0210 	orr.w	r2, r2, #16
 80a1da0:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a1da2:	7c63      	ldrb	r3, [r4, #17]
 80a1da4:	b10b      	cbz	r3, 80a1daa <_ZN7LSM9DS18initGyroEv+0x7e>
 80a1da6:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a1daa:	7d23      	ldrb	r3, [r4, #20]
 80a1dac:	b10b      	cbz	r3, 80a1db2 <_ZN7LSM9DS18initGyroEv+0x86>
 80a1dae:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a1db2:	211e      	movs	r1, #30
 80a1db4:	4620      	mov	r0, r4
 80a1db6:	f7ff ffa5 	bl	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a1dba:	7b63      	ldrb	r3, [r4, #13]
 80a1dbc:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a1dbe:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a1dc0:	bf0c      	ite	eq
 80a1dc2:	2200      	moveq	r2, #0
 80a1dc4:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a1dc6:	b113      	cbz	r3, 80a1dce <_ZN7LSM9DS18initGyroEv+0xa2>
 80a1dc8:	f042 0210 	orr.w	r2, r2, #16
 80a1dcc:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a1dce:	7be3      	ldrb	r3, [r4, #15]
 80a1dd0:	b10b      	cbz	r3, 80a1dd6 <_ZN7LSM9DS18initGyroEv+0xaa>
 80a1dd2:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a1dd6:	4620      	mov	r0, r4
}
 80a1dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a1ddc:	2113      	movs	r1, #19
 80a1dde:	f7ff bf91 	b.w	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>

080a1de2 <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a1de2:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a1de4:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a1de6:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a1de8:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a1dea:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a1dec:	bf0c      	ite	eq
 80a1dee:	2200      	moveq	r2, #0
 80a1df0:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a1df2:	b113      	cbz	r3, 80a1dfa <_ZN7LSM9DS19initAccelEv+0x18>
 80a1df4:	f042 0210 	orr.w	r2, r2, #16
 80a1df8:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a1dfa:	7e63      	ldrb	r3, [r4, #25]
 80a1dfc:	b10b      	cbz	r3, 80a1e02 <_ZN7LSM9DS19initAccelEv+0x20>
 80a1dfe:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a1e02:	211f      	movs	r1, #31
 80a1e04:	4620      	mov	r0, r4
 80a1e06:	f7ff ff7d 	bl	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a1e0a:	7da2      	ldrb	r2, [r4, #22]
 80a1e0c:	b112      	cbz	r2, 80a1e14 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a1e0e:	7e22      	ldrb	r2, [r4, #24]
 80a1e10:	0152      	lsls	r2, r2, #5
 80a1e12:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a1e14:	7de3      	ldrb	r3, [r4, #23]
 80a1e16:	2b08      	cmp	r3, #8
 80a1e18:	d006      	beq.n	80a1e28 <_ZN7LSM9DS19initAccelEv+0x46>
 80a1e1a:	2b10      	cmp	r3, #16
 80a1e1c:	d007      	beq.n	80a1e2e <_ZN7LSM9DS19initAccelEv+0x4c>
 80a1e1e:	2b04      	cmp	r3, #4
 80a1e20:	d107      	bne.n	80a1e32 <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a1e22:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a1e26:	e004      	b.n	80a1e32 <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a1e28:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a1e2c:	e001      	b.n	80a1e32 <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a1e2e:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a1e32:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a1e36:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a1e38:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a1e3a:	bfa2      	ittt	ge
 80a1e3c:	f003 0303 	andge.w	r3, r3, #3
 80a1e40:	431a      	orrge	r2, r3
 80a1e42:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a1e46:	4620      	mov	r0, r4
 80a1e48:	f7ff ff5c 	bl	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a1e4c:	7f62      	ldrb	r2, [r4, #29]
 80a1e4e:	b12a      	cbz	r2, 80a1e5c <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a1e50:	7fa2      	ldrb	r2, [r4, #30]
 80a1e52:	0152      	lsls	r2, r2, #5
 80a1e54:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a1e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a1e5c:	4620      	mov	r0, r4
}
 80a1e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a1e62:	2121      	movs	r1, #33	; 0x21
 80a1e64:	f7ff bf4e 	b.w	80a1d04 <_ZN7LSM9DS111xgWriteByteEhh>

080a1e68 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a1e68:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1e6a:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a1e6c:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1e6e:	2a01      	cmp	r2, #1
 80a1e70:	d105      	bne.n	80a1e7e <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a1e72:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a1e74:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a1e76:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1e7a:	f7ff bf28 	b.w	80a1cce <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1e7e:	b92a      	cbnz	r2, 80a1e8c <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a1e80:	460a      	mov	r2, r1
}
 80a1e82:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a1e84:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1e88:	f7ff bec8 	b.w	80a1c1c <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a1e8c:	bc10      	pop	{r4}
 80a1e8e:	4770      	bx	lr

080a1e90 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a1e90:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1e92:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a1e96:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1e98:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a1e9a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1e9e:	bf08      	it	eq
 80a1ea0:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a1ea2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a1ea6:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a1eaa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a1eae:	bf18      	it	ne
 80a1eb0:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a1eb2:	009b      	lsls	r3, r3, #2
 80a1eb4:	f003 031c 	and.w	r3, r3, #28
 80a1eb8:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a1eba:	431a      	orrs	r2, r3
 80a1ebc:	2120      	movs	r1, #32
 80a1ebe:	f7ff ffd3 	bl	80a1e68 <_ZN7LSM9DS110mWriteByteEhh>
 80a1ec2:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a1ec6:	4620      	mov	r0, r4
 80a1ec8:	3b08      	subs	r3, #8
 80a1eca:	b2db      	uxtb	r3, r3
 80a1ecc:	2b08      	cmp	r3, #8
 80a1ece:	bf96      	itet	ls
 80a1ed0:	4a12      	ldrls	r2, [pc, #72]	; (80a1f1c <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a1ed2:	2200      	movhi	r2, #0
 80a1ed4:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a1ed6:	2121      	movs	r1, #33	; 0x21
 80a1ed8:	f7ff ffc6 	bl	80a1e68 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a1edc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a1ee0:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a1ee2:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a1ee4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a1ee8:	bf0c      	ite	eq
 80a1eea:	2200      	moveq	r2, #0
 80a1eec:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a1eee:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a1ef2:	431a      	orrs	r2, r3
 80a1ef4:	2122      	movs	r1, #34	; 0x22
 80a1ef6:	f7ff ffb7 	bl	80a1e68 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a1efa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a1efe:	4620      	mov	r0, r4
 80a1f00:	0092      	lsls	r2, r2, #2
 80a1f02:	f002 020c 	and.w	r2, r2, #12
 80a1f06:	2123      	movs	r1, #35	; 0x23
 80a1f08:	f7ff ffae 	bl	80a1e68 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a1f0c:	4620      	mov	r0, r4
}
 80a1f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a1f12:	2200      	movs	r2, #0
 80a1f14:	2124      	movs	r1, #36	; 0x24
 80a1f16:	f7ff bfa7 	b.w	80a1e68 <_ZN7LSM9DS110mWriteByteEhh>
 80a1f1a:	bf00      	nop
 80a1f1c:	080a458c 	.word	0x080a458c

080a1f20 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a1f20:	b538      	push	{r3, r4, r5, lr}
 80a1f22:	460c      	mov	r4, r1
 80a1f24:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a1f26:	f001 f8d9 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1f2a:	4621      	mov	r1, r4
 80a1f2c:	f000 fb52 	bl	80a25d4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a1f30:	f001 f8d4 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1f34:	6803      	ldr	r3, [r0, #0]
 80a1f36:	4629      	mov	r1, r5
 80a1f38:	689b      	ldr	r3, [r3, #8]
 80a1f3a:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a1f3c:	f001 f8ce 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1f40:	2100      	movs	r1, #0
 80a1f42:	f000 fb4b 	bl	80a25dc <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a1f46:	f001 f8c9 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1f4a:	2201      	movs	r2, #1
 80a1f4c:	4621      	mov	r1, r4
 80a1f4e:	f000 fb3e 	bl	80a25ce <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a1f52:	f001 f8c3 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a1f56:	6803      	ldr	r3, [r0, #0]
 80a1f58:	695b      	ldr	r3, [r3, #20]
 80a1f5a:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a1f5c:	b2c0      	uxtb	r0, r0
 80a1f5e:	bd38      	pop	{r3, r4, r5, pc}

080a1f60 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a1f60:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1f62:	7801      	ldrb	r1, [r0, #0]
 80a1f64:	2901      	cmp	r1, #1
 80a1f66:	d103      	bne.n	80a1f70 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a1f68:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1f6c:	f7ff bfd8 	b.w	80a1f20 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1f70:	b919      	cbnz	r1, 80a1f7a <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a1f72:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a1f76:	f7ff be97 	b.w	80a1ca8 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a1f7a:	2000      	movs	r0, #0
 80a1f7c:	4770      	bx	lr

080a1f7e <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a1f7e:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a1f80:	2127      	movs	r1, #39	; 0x27
 80a1f82:	f7ff ffed 	bl	80a1f60 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a1f86:	f000 0001 	and.w	r0, r0, #1
 80a1f8a:	bd08      	pop	{r3, pc}

080a1f8c <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a1f8c:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a1f8e:	7801      	ldrb	r1, [r0, #0]
 80a1f90:	2901      	cmp	r1, #1
 80a1f92:	d103      	bne.n	80a1f9c <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a1f94:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1f98:	f7ff bfc2 	b.w	80a1f20 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a1f9c:	b919      	cbnz	r1, 80a1fa6 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a1f9e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a1fa2:	f7ff be81 	b.w	80a1ca8 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a1fa6:	4770      	bx	lr

080a1fa8 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a1fa8:	b538      	push	{r3, r4, r5, lr}
 80a1faa:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a1fac:	7843      	ldrb	r3, [r0, #1]
 80a1fae:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a1fb2:	7883      	ldrb	r3, [r0, #2]
 80a1fb4:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a1fb8:	f7ff fde2 	bl	80a1b80 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a1fbc:	f7ff fdac 	bl	80a1b18 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a1fc0:	4620      	mov	r0, r4
 80a1fc2:	f7ff fdbf 	bl	80a1b44 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a1fc6:	4620      	mov	r0, r4
 80a1fc8:	f7ff fdb1 	bl	80a1b2e <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a1fcc:	7823      	ldrb	r3, [r4, #0]
 80a1fce:	2b01      	cmp	r3, #1
 80a1fd0:	d103      	bne.n	80a1fda <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a1fd2:	4620      	mov	r0, r4
 80a1fd4:	f7ff fe74 	bl	80a1cc0 <_ZN7LSM9DS17initI2CEv>
 80a1fd8:	e003      	b.n	80a1fe2 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a1fda:	b913      	cbnz	r3, 80a1fe2 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a1fdc:	4620      	mov	r0, r4
 80a1fde:	f7ff fdf3 	bl	80a1bc8 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a1fe2:	210f      	movs	r1, #15
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	f7ff ffd1 	bl	80a1f8c <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a1fea:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a1fec:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	f7ff ffb6 	bl	80a1f60 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a1ff4:	f646 033d 	movw	r3, #26685	; 0x683d
 80a1ff8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a1ffc:	b205      	sxth	r5, r0
 80a1ffe:	429d      	cmp	r5, r3
 80a2000:	d10a      	bne.n	80a2018 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a2002:	4620      	mov	r0, r4
 80a2004:	f7ff fe92 	bl	80a1d2c <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a2008:	4620      	mov	r0, r4
 80a200a:	f7ff feea 	bl	80a1de2 <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a200e:	4620      	mov	r0, r4
 80a2010:	f7ff ff3e 	bl	80a1e90 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a2014:	4628      	mov	r0, r5
 80a2016:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a2018:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a201a:	bd38      	pop	{r3, r4, r5, pc}

080a201c <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2020:	4690      	mov	r8, r2
 80a2022:	460c      	mov	r4, r1
 80a2024:	461d      	mov	r5, r3
 80a2026:	f89d 6018 	ldrb.w	r6, [sp, #24]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a202a:	f000 f8a9 	bl	80a2180 <HAL_Timer_Get_Milli_Seconds>
 80a202e:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a2030:	f001 f854 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a2034:	4621      	mov	r1, r4
 80a2036:	f000 facd 	bl	80a25d4 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a203a:	f001 f84f 	bl	80a30dc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a203e:	6803      	ldr	r3, [r0, #0]
 80a2040:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a2044:	689b      	ldr	r3, [r3, #8]
 80a2046:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a2048:	f001 f848 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a204c:	2100      	movs	r1, #0
 80a204e:	f000 fac5 	bl	80a25dc <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a2052:	f001 f843 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a2056:	4621      	mov	r1, r4
 80a2058:	4632      	mov	r2, r6
 80a205a:	f000 fab8 	bl	80a25ce <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a205e:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a2060:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a2064:	42b4      	cmp	r4, r6
 80a2066:	da1a      	bge.n	80a209e <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a2068:	f001 f838 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a206c:	6803      	ldr	r3, [r0, #0]
 80a206e:	691b      	ldr	r3, [r3, #16]
 80a2070:	4798      	blx	r3
 80a2072:	b140      	cbz	r0, 80a2086 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a2074:	f001 f832 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a2078:	6803      	ldr	r3, [r0, #0]
 80a207a:	f104 0801 	add.w	r8, r4, #1
 80a207e:	695b      	ldr	r3, [r3, #20]
 80a2080:	4798      	blx	r3
 80a2082:	5528      	strb	r0, [r5, r4]
 80a2084:	4644      	mov	r4, r8
 80a2086:	f000 f87b 	bl	80a2180 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a208a:	42b8      	cmp	r0, r7
 80a208c:	d9ea      	bls.n	80a2064 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a208e:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a2090:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a2092:	1b62      	subs	r2, r4, r5
 80a2094:	4296      	cmp	r6, r2
 80a2096:	dd05      	ble.n	80a20a4 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a2098:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a209c:	e7f9      	b.n	80a2092 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a209e:	2001      	movs	r0, #1
 80a20a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a20a4:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a20a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a20aa <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a20aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a20ac:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a20ae:	7801      	ldrb	r1, [r0, #0]
 80a20b0:	2901      	cmp	r1, #1
 80a20b2:	d107      	bne.n	80a20c4 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a20b4:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a20b8:	9300      	str	r3, [sp, #0]
 80a20ba:	4613      	mov	r3, r2
 80a20bc:	462a      	mov	r2, r5
 80a20be:	f7ff ffad 	bl	80a201c <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a20c2:	e007      	b.n	80a20d4 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a20c4:	b931      	cbnz	r1, 80a20d4 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a20c6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a20ca:	9300      	str	r3, [sp, #0]
 80a20cc:	4613      	mov	r3, r2
 80a20ce:	462a      	mov	r2, r5
 80a20d0:	f7ff fdbe 	bl	80a1c50 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a20d4:	b003      	add	sp, #12
 80a20d6:	bd30      	pop	{r4, r5, pc}

080a20d8 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a20d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a20da:	2306      	movs	r3, #6
 80a20dc:	466a      	mov	r2, sp
 80a20de:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a20e0:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a20e2:	f7ff ffe2 	bl	80a20aa <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a20e6:	b330      	cbz	r0, 80a2136 <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a20e8:	f89d 3000 	ldrb.w	r3, [sp]
 80a20ec:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a20f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a20f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a20f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a20fc:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a2100:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a2104:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a2108:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a210a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a210e:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a2112:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a2114:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a2116:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a2118:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a211a:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a211c:	b15d      	cbz	r5, 80a2136 <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a211e:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a2122:	1b49      	subs	r1, r1, r5
 80a2124:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a2126:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a212a:	1a52      	subs	r2, r2, r1
 80a212c:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a212e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a2132:	1a9b      	subs	r3, r3, r2
 80a2134:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a2136:	b003      	add	sp, #12
 80a2138:	bd30      	pop	{r4, r5, pc}

080a213a <_GLOBAL__sub_I_magSensitivity>:
 80a213a:	f000 b829 	b.w	80a2190 <HAL_Pin_Map>
	...

080a2140 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2140:	b508      	push	{r3, lr}
 80a2142:	4b02      	ldr	r3, [pc, #8]	; (80a214c <os_mutex_create+0xc>)
 80a2144:	681b      	ldr	r3, [r3, #0]
 80a2146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2148:	9301      	str	r3, [sp, #4]
 80a214a:	bd08      	pop	{r3, pc}
 80a214c:	080601d0 	.word	0x080601d0

080a2150 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2150:	b508      	push	{r3, lr}
 80a2152:	4b02      	ldr	r3, [pc, #8]	; (80a215c <HAL_RNG_GetRandomNumber+0xc>)
 80a2154:	681b      	ldr	r3, [r3, #0]
 80a2156:	685b      	ldr	r3, [r3, #4]
 80a2158:	9301      	str	r3, [sp, #4]
 80a215a:	bd08      	pop	{r3, pc}
 80a215c:	0806019c 	.word	0x0806019c

080a2160 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a2160:	b508      	push	{r3, lr}
 80a2162:	4b02      	ldr	r3, [pc, #8]	; (80a216c <HAL_Delay_Microseconds+0xc>)
 80a2164:	681b      	ldr	r3, [r3, #0]
 80a2166:	68db      	ldr	r3, [r3, #12]
 80a2168:	9301      	str	r3, [sp, #4]
 80a216a:	bd08      	pop	{r3, pc}
 80a216c:	0806019c 	.word	0x0806019c

080a2170 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2170:	b508      	push	{r3, lr}
 80a2172:	4b02      	ldr	r3, [pc, #8]	; (80a217c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2174:	681b      	ldr	r3, [r3, #0]
 80a2176:	691b      	ldr	r3, [r3, #16]
 80a2178:	9301      	str	r3, [sp, #4]
 80a217a:	bd08      	pop	{r3, pc}
 80a217c:	0806019c 	.word	0x0806019c

080a2180 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2180:	b508      	push	{r3, lr}
 80a2182:	4b02      	ldr	r3, [pc, #8]	; (80a218c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2184:	681b      	ldr	r3, [r3, #0]
 80a2186:	695b      	ldr	r3, [r3, #20]
 80a2188:	9301      	str	r3, [sp, #4]
 80a218a:	bd08      	pop	{r3, pc}
 80a218c:	0806019c 	.word	0x0806019c

080a2190 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2190:	b508      	push	{r3, lr}
 80a2192:	4b02      	ldr	r3, [pc, #8]	; (80a219c <HAL_Pin_Map+0xc>)
 80a2194:	681b      	ldr	r3, [r3, #0]
 80a2196:	681b      	ldr	r3, [r3, #0]
 80a2198:	9301      	str	r3, [sp, #4]
 80a219a:	bd08      	pop	{r3, pc}
 80a219c:	080601b0 	.word	0x080601b0

080a21a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a21a0:	b508      	push	{r3, lr}
 80a21a2:	4b02      	ldr	r3, [pc, #8]	; (80a21ac <HAL_Pin_Mode+0xc>)
 80a21a4:	681b      	ldr	r3, [r3, #0]
 80a21a6:	689b      	ldr	r3, [r3, #8]
 80a21a8:	9301      	str	r3, [sp, #4]
 80a21aa:	bd08      	pop	{r3, pc}
 80a21ac:	080601b0 	.word	0x080601b0

080a21b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a21b0:	b508      	push	{r3, lr}
 80a21b2:	4b02      	ldr	r3, [pc, #8]	; (80a21bc <HAL_Get_Pin_Mode+0xc>)
 80a21b4:	681b      	ldr	r3, [r3, #0]
 80a21b6:	68db      	ldr	r3, [r3, #12]
 80a21b8:	9301      	str	r3, [sp, #4]
 80a21ba:	bd08      	pop	{r3, pc}
 80a21bc:	080601b0 	.word	0x080601b0

080a21c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a21c0:	b508      	push	{r3, lr}
 80a21c2:	4b02      	ldr	r3, [pc, #8]	; (80a21cc <HAL_GPIO_Write+0xc>)
 80a21c4:	681b      	ldr	r3, [r3, #0]
 80a21c6:	691b      	ldr	r3, [r3, #16]
 80a21c8:	9301      	str	r3, [sp, #4]
 80a21ca:	bd08      	pop	{r3, pc}
 80a21cc:	080601b0 	.word	0x080601b0

080a21d0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a21d0:	b508      	push	{r3, lr}
 80a21d2:	4b02      	ldr	r3, [pc, #8]	; (80a21dc <HAL_I2C_Begin+0xc>)
 80a21d4:	681b      	ldr	r3, [r3, #0]
 80a21d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a21d8:	9301      	str	r3, [sp, #4]
 80a21da:	bd08      	pop	{r3, pc}
 80a21dc:	080601ac 	.word	0x080601ac

080a21e0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a21e0:	b508      	push	{r3, lr}
 80a21e2:	4b02      	ldr	r3, [pc, #8]	; (80a21ec <HAL_I2C_Request_Data+0xc>)
 80a21e4:	681b      	ldr	r3, [r3, #0]
 80a21e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a21e8:	9301      	str	r3, [sp, #4]
 80a21ea:	bd08      	pop	{r3, pc}
 80a21ec:	080601ac 	.word	0x080601ac

080a21f0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a21f0:	b508      	push	{r3, lr}
 80a21f2:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <HAL_I2C_Begin_Transmission+0xc>)
 80a21f4:	681b      	ldr	r3, [r3, #0]
 80a21f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a21f8:	9301      	str	r3, [sp, #4]
 80a21fa:	bd08      	pop	{r3, pc}
 80a21fc:	080601ac 	.word	0x080601ac

080a2200 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2200:	b508      	push	{r3, lr}
 80a2202:	4b02      	ldr	r3, [pc, #8]	; (80a220c <HAL_I2C_End_Transmission+0xc>)
 80a2204:	681b      	ldr	r3, [r3, #0]
 80a2206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2208:	9301      	str	r3, [sp, #4]
 80a220a:	bd08      	pop	{r3, pc}
 80a220c:	080601ac 	.word	0x080601ac

080a2210 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2210:	b508      	push	{r3, lr}
 80a2212:	4b02      	ldr	r3, [pc, #8]	; (80a221c <HAL_I2C_Write_Data+0xc>)
 80a2214:	681b      	ldr	r3, [r3, #0]
 80a2216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2218:	9301      	str	r3, [sp, #4]
 80a221a:	bd08      	pop	{r3, pc}
 80a221c:	080601ac 	.word	0x080601ac

080a2220 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2220:	b508      	push	{r3, lr}
 80a2222:	4b02      	ldr	r3, [pc, #8]	; (80a222c <HAL_I2C_Available_Data+0xc>)
 80a2224:	681b      	ldr	r3, [r3, #0]
 80a2226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2228:	9301      	str	r3, [sp, #4]
 80a222a:	bd08      	pop	{r3, pc}
 80a222c:	080601ac 	.word	0x080601ac

080a2230 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2230:	b508      	push	{r3, lr}
 80a2232:	4b02      	ldr	r3, [pc, #8]	; (80a223c <HAL_I2C_Read_Data+0xc>)
 80a2234:	681b      	ldr	r3, [r3, #0]
 80a2236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2238:	9301      	str	r3, [sp, #4]
 80a223a:	bd08      	pop	{r3, pc}
 80a223c:	080601ac 	.word	0x080601ac

080a2240 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2240:	b508      	push	{r3, lr}
 80a2242:	4b02      	ldr	r3, [pc, #8]	; (80a224c <HAL_I2C_Peek_Data+0xc>)
 80a2244:	681b      	ldr	r3, [r3, #0]
 80a2246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2248:	9301      	str	r3, [sp, #4]
 80a224a:	bd08      	pop	{r3, pc}
 80a224c:	080601ac 	.word	0x080601ac

080a2250 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2250:	b508      	push	{r3, lr}
 80a2252:	4b02      	ldr	r3, [pc, #8]	; (80a225c <HAL_I2C_Flush_Data+0xc>)
 80a2254:	681b      	ldr	r3, [r3, #0]
 80a2256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2258:	9301      	str	r3, [sp, #4]
 80a225a:	bd08      	pop	{r3, pc}
 80a225c:	080601ac 	.word	0x080601ac

080a2260 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2260:	b508      	push	{r3, lr}
 80a2262:	4b02      	ldr	r3, [pc, #8]	; (80a226c <HAL_I2C_Is_Enabled+0xc>)
 80a2264:	681b      	ldr	r3, [r3, #0]
 80a2266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2268:	9301      	str	r3, [sp, #4]
 80a226a:	bd08      	pop	{r3, pc}
 80a226c:	080601ac 	.word	0x080601ac

080a2270 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2270:	b508      	push	{r3, lr}
 80a2272:	4b03      	ldr	r3, [pc, #12]	; (80a2280 <HAL_I2C_Init+0x10>)
 80a2274:	681b      	ldr	r3, [r3, #0]
 80a2276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a227a:	9301      	str	r3, [sp, #4]
 80a227c:	bd08      	pop	{r3, pc}
 80a227e:	0000      	.short	0x0000
 80a2280:	080601ac 	.word	0x080601ac

080a2284 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2284:	b508      	push	{r3, lr}
 80a2286:	4b02      	ldr	r3, [pc, #8]	; (80a2290 <HAL_SPI_Begin+0xc>)
 80a2288:	681b      	ldr	r3, [r3, #0]
 80a228a:	681b      	ldr	r3, [r3, #0]
 80a228c:	9301      	str	r3, [sp, #4]
 80a228e:	bd08      	pop	{r3, pc}
 80a2290:	080601b4 	.word	0x080601b4

080a2294 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2294:	b508      	push	{r3, lr}
 80a2296:	4b02      	ldr	r3, [pc, #8]	; (80a22a0 <HAL_SPI_Set_Bit_Order+0xc>)
 80a2298:	681b      	ldr	r3, [r3, #0]
 80a229a:	689b      	ldr	r3, [r3, #8]
 80a229c:	9301      	str	r3, [sp, #4]
 80a229e:	bd08      	pop	{r3, pc}
 80a22a0:	080601b4 	.word	0x080601b4

080a22a4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a22a4:	b508      	push	{r3, lr}
 80a22a6:	4b02      	ldr	r3, [pc, #8]	; (80a22b0 <HAL_SPI_Set_Data_Mode+0xc>)
 80a22a8:	681b      	ldr	r3, [r3, #0]
 80a22aa:	68db      	ldr	r3, [r3, #12]
 80a22ac:	9301      	str	r3, [sp, #4]
 80a22ae:	bd08      	pop	{r3, pc}
 80a22b0:	080601b4 	.word	0x080601b4

080a22b4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a22b4:	b508      	push	{r3, lr}
 80a22b6:	4b02      	ldr	r3, [pc, #8]	; (80a22c0 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a22b8:	681b      	ldr	r3, [r3, #0]
 80a22ba:	691b      	ldr	r3, [r3, #16]
 80a22bc:	9301      	str	r3, [sp, #4]
 80a22be:	bd08      	pop	{r3, pc}
 80a22c0:	080601b4 	.word	0x080601b4

080a22c4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a22c4:	b508      	push	{r3, lr}
 80a22c6:	4b02      	ldr	r3, [pc, #8]	; (80a22d0 <HAL_SPI_Send_Receive_Data+0xc>)
 80a22c8:	681b      	ldr	r3, [r3, #0]
 80a22ca:	695b      	ldr	r3, [r3, #20]
 80a22cc:	9301      	str	r3, [sp, #4]
 80a22ce:	bd08      	pop	{r3, pc}
 80a22d0:	080601b4 	.word	0x080601b4

080a22d4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a22d4:	b508      	push	{r3, lr}
 80a22d6:	4b02      	ldr	r3, [pc, #8]	; (80a22e0 <HAL_SPI_Init+0xc>)
 80a22d8:	681b      	ldr	r3, [r3, #0]
 80a22da:	69db      	ldr	r3, [r3, #28]
 80a22dc:	9301      	str	r3, [sp, #4]
 80a22de:	bd08      	pop	{r3, pc}
 80a22e0:	080601b4 	.word	0x080601b4

080a22e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a22e4:	b508      	push	{r3, lr}
 80a22e6:	4b02      	ldr	r3, [pc, #8]	; (80a22f0 <HAL_SPI_Is_Enabled+0xc>)
 80a22e8:	681b      	ldr	r3, [r3, #0]
 80a22ea:	6a1b      	ldr	r3, [r3, #32]
 80a22ec:	9301      	str	r3, [sp, #4]
 80a22ee:	bd08      	pop	{r3, pc}
 80a22f0:	080601b4 	.word	0x080601b4

080a22f4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a22f4:	b508      	push	{r3, lr}
 80a22f6:	4b02      	ldr	r3, [pc, #8]	; (80a2300 <HAL_SPI_Info+0xc>)
 80a22f8:	681b      	ldr	r3, [r3, #0]
 80a22fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a22fc:	9301      	str	r3, [sp, #4]
 80a22fe:	bd08      	pop	{r3, pc}
 80a2300:	080601b4 	.word	0x080601b4

080a2304 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2304:	b508      	push	{r3, lr}
 80a2306:	4b02      	ldr	r3, [pc, #8]	; (80a2310 <HAL_USART_Init+0xc>)
 80a2308:	681b      	ldr	r3, [r3, #0]
 80a230a:	699b      	ldr	r3, [r3, #24]
 80a230c:	9301      	str	r3, [sp, #4]
 80a230e:	bd08      	pop	{r3, pc}
 80a2310:	080601c4 	.word	0x080601c4

080a2314 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2314:	b508      	push	{r3, lr}
 80a2316:	4b02      	ldr	r3, [pc, #8]	; (80a2320 <HAL_USART_Write_Data+0xc>)
 80a2318:	681b      	ldr	r3, [r3, #0]
 80a231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a231c:	9301      	str	r3, [sp, #4]
 80a231e:	bd08      	pop	{r3, pc}
 80a2320:	080601c4 	.word	0x080601c4

080a2324 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2324:	b508      	push	{r3, lr}
 80a2326:	4b02      	ldr	r3, [pc, #8]	; (80a2330 <HAL_USART_Available_Data+0xc>)
 80a2328:	681b      	ldr	r3, [r3, #0]
 80a232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a232c:	9301      	str	r3, [sp, #4]
 80a232e:	bd08      	pop	{r3, pc}
 80a2330:	080601c4 	.word	0x080601c4

080a2334 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2334:	b508      	push	{r3, lr}
 80a2336:	4b02      	ldr	r3, [pc, #8]	; (80a2340 <HAL_USART_Read_Data+0xc>)
 80a2338:	681b      	ldr	r3, [r3, #0]
 80a233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a233c:	9301      	str	r3, [sp, #4]
 80a233e:	bd08      	pop	{r3, pc}
 80a2340:	080601c4 	.word	0x080601c4

080a2344 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2344:	b508      	push	{r3, lr}
 80a2346:	4b02      	ldr	r3, [pc, #8]	; (80a2350 <HAL_USART_Peek_Data+0xc>)
 80a2348:	681b      	ldr	r3, [r3, #0]
 80a234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a234c:	9301      	str	r3, [sp, #4]
 80a234e:	bd08      	pop	{r3, pc}
 80a2350:	080601c4 	.word	0x080601c4

080a2354 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2354:	b508      	push	{r3, lr}
 80a2356:	4b02      	ldr	r3, [pc, #8]	; (80a2360 <HAL_USART_Flush_Data+0xc>)
 80a2358:	681b      	ldr	r3, [r3, #0]
 80a235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a235c:	9301      	str	r3, [sp, #4]
 80a235e:	bd08      	pop	{r3, pc}
 80a2360:	080601c4 	.word	0x080601c4

080a2364 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2364:	b508      	push	{r3, lr}
 80a2366:	4b02      	ldr	r3, [pc, #8]	; (80a2370 <HAL_USART_Is_Enabled+0xc>)
 80a2368:	681b      	ldr	r3, [r3, #0]
 80a236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a236c:	9301      	str	r3, [sp, #4]
 80a236e:	bd08      	pop	{r3, pc}
 80a2370:	080601c4 	.word	0x080601c4

080a2374 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2374:	b508      	push	{r3, lr}
 80a2376:	4b02      	ldr	r3, [pc, #8]	; (80a2380 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2378:	681b      	ldr	r3, [r3, #0]
 80a237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a237c:	9301      	str	r3, [sp, #4]
 80a237e:	bd08      	pop	{r3, pc}
 80a2380:	080601c4 	.word	0x080601c4

080a2384 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2384:	b508      	push	{r3, lr}
 80a2386:	4b02      	ldr	r3, [pc, #8]	; (80a2390 <HAL_USB_USART_Init+0xc>)
 80a2388:	681b      	ldr	r3, [r3, #0]
 80a238a:	681b      	ldr	r3, [r3, #0]
 80a238c:	9301      	str	r3, [sp, #4]
 80a238e:	bd08      	pop	{r3, pc}
 80a2390:	080601d8 	.word	0x080601d8

080a2394 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2394:	b508      	push	{r3, lr}
 80a2396:	4b02      	ldr	r3, [pc, #8]	; (80a23a0 <HAL_USB_USART_Begin+0xc>)
 80a2398:	681b      	ldr	r3, [r3, #0]
 80a239a:	685b      	ldr	r3, [r3, #4]
 80a239c:	9301      	str	r3, [sp, #4]
 80a239e:	bd08      	pop	{r3, pc}
 80a23a0:	080601d8 	.word	0x080601d8

080a23a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a23a4:	b508      	push	{r3, lr}
 80a23a6:	4b02      	ldr	r3, [pc, #8]	; (80a23b0 <HAL_USB_USART_Available_Data+0xc>)
 80a23a8:	681b      	ldr	r3, [r3, #0]
 80a23aa:	691b      	ldr	r3, [r3, #16]
 80a23ac:	9301      	str	r3, [sp, #4]
 80a23ae:	bd08      	pop	{r3, pc}
 80a23b0:	080601d8 	.word	0x080601d8

080a23b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a23b4:	b508      	push	{r3, lr}
 80a23b6:	4b02      	ldr	r3, [pc, #8]	; (80a23c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a23b8:	681b      	ldr	r3, [r3, #0]
 80a23ba:	695b      	ldr	r3, [r3, #20]
 80a23bc:	9301      	str	r3, [sp, #4]
 80a23be:	bd08      	pop	{r3, pc}
 80a23c0:	080601d8 	.word	0x080601d8

080a23c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a23c4:	b508      	push	{r3, lr}
 80a23c6:	4b02      	ldr	r3, [pc, #8]	; (80a23d0 <HAL_USB_USART_Receive_Data+0xc>)
 80a23c8:	681b      	ldr	r3, [r3, #0]
 80a23ca:	699b      	ldr	r3, [r3, #24]
 80a23cc:	9301      	str	r3, [sp, #4]
 80a23ce:	bd08      	pop	{r3, pc}
 80a23d0:	080601d8 	.word	0x080601d8

080a23d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a23d4:	b508      	push	{r3, lr}
 80a23d6:	4b02      	ldr	r3, [pc, #8]	; (80a23e0 <HAL_USB_USART_Send_Data+0xc>)
 80a23d8:	681b      	ldr	r3, [r3, #0]
 80a23da:	69db      	ldr	r3, [r3, #28]
 80a23dc:	9301      	str	r3, [sp, #4]
 80a23de:	bd08      	pop	{r3, pc}
 80a23e0:	080601d8 	.word	0x080601d8

080a23e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a23e4:	b508      	push	{r3, lr}
 80a23e6:	4b02      	ldr	r3, [pc, #8]	; (80a23f0 <HAL_USB_USART_Flush_Data+0xc>)
 80a23e8:	681b      	ldr	r3, [r3, #0]
 80a23ea:	6a1b      	ldr	r3, [r3, #32]
 80a23ec:	9301      	str	r3, [sp, #4]
 80a23ee:	bd08      	pop	{r3, pc}
 80a23f0:	080601d8 	.word	0x080601d8

080a23f4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a23f4:	b508      	push	{r3, lr}
 80a23f6:	4b02      	ldr	r3, [pc, #8]	; (80a2400 <inet_gethostbyname+0xc>)
 80a23f8:	681b      	ldr	r3, [r3, #0]
 80a23fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a23fc:	9301      	str	r3, [sp, #4]
 80a23fe:	bd08      	pop	{r3, pc}
 80a2400:	080601c0 	.word	0x080601c0

080a2404 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2404:	b508      	push	{r3, lr}
 80a2406:	4b02      	ldr	r3, [pc, #8]	; (80a2410 <set_system_mode+0xc>)
 80a2408:	681b      	ldr	r3, [r3, #0]
 80a240a:	685b      	ldr	r3, [r3, #4]
 80a240c:	9301      	str	r3, [sp, #4]
 80a240e:	bd08      	pop	{r3, pc}
 80a2410:	080601a4 	.word	0x080601a4

080a2414 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2414:	b508      	push	{r3, lr}
 80a2416:	4b02      	ldr	r3, [pc, #8]	; (80a2420 <system_delay_ms+0xc>)
 80a2418:	681b      	ldr	r3, [r3, #0]
 80a241a:	695b      	ldr	r3, [r3, #20]
 80a241c:	9301      	str	r3, [sp, #4]
 80a241e:	bd08      	pop	{r3, pc}
 80a2420:	080601a4 	.word	0x080601a4

080a2424 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2424:	b508      	push	{r3, lr}
 80a2426:	4b03      	ldr	r3, [pc, #12]	; (80a2434 <system_ctrl_set_app_request_handler+0x10>)
 80a2428:	681b      	ldr	r3, [r3, #0]
 80a242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a242e:	9301      	str	r3, [sp, #4]
 80a2430:	bd08      	pop	{r3, pc}
 80a2432:	0000      	.short	0x0000
 80a2434:	080601a4 	.word	0x080601a4

080a2438 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2438:	b508      	push	{r3, lr}
 80a243a:	4b03      	ldr	r3, [pc, #12]	; (80a2448 <system_ctrl_set_result+0x10>)
 80a243c:	681b      	ldr	r3, [r3, #0]
 80a243e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2442:	9301      	str	r3, [sp, #4]
 80a2444:	bd08      	pop	{r3, pc}
 80a2446:	0000      	.short	0x0000
 80a2448:	080601a4 	.word	0x080601a4

080a244c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a244c:	b508      	push	{r3, lr}
 80a244e:	4b02      	ldr	r3, [pc, #8]	; (80a2458 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2450:	681b      	ldr	r3, [r3, #0]
 80a2452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2454:	9301      	str	r3, [sp, #4]
 80a2456:	bd08      	pop	{r3, pc}
 80a2458:	080601cc 	.word	0x080601cc

080a245c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a245c:	b508      	push	{r3, lr}
 80a245e:	4b02      	ldr	r3, [pc, #8]	; (80a2468 <network_connect+0xc>)
 80a2460:	681b      	ldr	r3, [r3, #0]
 80a2462:	685b      	ldr	r3, [r3, #4]
 80a2464:	9301      	str	r3, [sp, #4]
 80a2466:	bd08      	pop	{r3, pc}
 80a2468:	080601c8 	.word	0x080601c8

080a246c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a246c:	b508      	push	{r3, lr}
 80a246e:	4b02      	ldr	r3, [pc, #8]	; (80a2478 <network_connecting+0xc>)
 80a2470:	681b      	ldr	r3, [r3, #0]
 80a2472:	689b      	ldr	r3, [r3, #8]
 80a2474:	9301      	str	r3, [sp, #4]
 80a2476:	bd08      	pop	{r3, pc}
 80a2478:	080601c8 	.word	0x080601c8

080a247c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a247c:	b508      	push	{r3, lr}
 80a247e:	4b02      	ldr	r3, [pc, #8]	; (80a2488 <network_disconnect+0xc>)
 80a2480:	681b      	ldr	r3, [r3, #0]
 80a2482:	68db      	ldr	r3, [r3, #12]
 80a2484:	9301      	str	r3, [sp, #4]
 80a2486:	bd08      	pop	{r3, pc}
 80a2488:	080601c8 	.word	0x080601c8

080a248c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a248c:	b508      	push	{r3, lr}
 80a248e:	4b02      	ldr	r3, [pc, #8]	; (80a2498 <network_ready+0xc>)
 80a2490:	681b      	ldr	r3, [r3, #0]
 80a2492:	691b      	ldr	r3, [r3, #16]
 80a2494:	9301      	str	r3, [sp, #4]
 80a2496:	bd08      	pop	{r3, pc}
 80a2498:	080601c8 	.word	0x080601c8

080a249c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a249c:	b508      	push	{r3, lr}
 80a249e:	4b02      	ldr	r3, [pc, #8]	; (80a24a8 <network_on+0xc>)
 80a24a0:	681b      	ldr	r3, [r3, #0]
 80a24a2:	695b      	ldr	r3, [r3, #20]
 80a24a4:	9301      	str	r3, [sp, #4]
 80a24a6:	bd08      	pop	{r3, pc}
 80a24a8:	080601c8 	.word	0x080601c8

080a24ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a24ac:	b508      	push	{r3, lr}
 80a24ae:	4b02      	ldr	r3, [pc, #8]	; (80a24b8 <network_off+0xc>)
 80a24b0:	681b      	ldr	r3, [r3, #0]
 80a24b2:	699b      	ldr	r3, [r3, #24]
 80a24b4:	9301      	str	r3, [sp, #4]
 80a24b6:	bd08      	pop	{r3, pc}
 80a24b8:	080601c8 	.word	0x080601c8

080a24bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a24bc:	b508      	push	{r3, lr}
 80a24be:	4b02      	ldr	r3, [pc, #8]	; (80a24c8 <network_listen+0xc>)
 80a24c0:	681b      	ldr	r3, [r3, #0]
 80a24c2:	69db      	ldr	r3, [r3, #28]
 80a24c4:	9301      	str	r3, [sp, #4]
 80a24c6:	bd08      	pop	{r3, pc}
 80a24c8:	080601c8 	.word	0x080601c8

080a24cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a24cc:	b508      	push	{r3, lr}
 80a24ce:	4b02      	ldr	r3, [pc, #8]	; (80a24d8 <network_listening+0xc>)
 80a24d0:	681b      	ldr	r3, [r3, #0]
 80a24d2:	6a1b      	ldr	r3, [r3, #32]
 80a24d4:	9301      	str	r3, [sp, #4]
 80a24d6:	bd08      	pop	{r3, pc}
 80a24d8:	080601c8 	.word	0x080601c8

080a24dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a24dc:	b508      	push	{r3, lr}
 80a24de:	4b02      	ldr	r3, [pc, #8]	; (80a24e8 <network_set_listen_timeout+0xc>)
 80a24e0:	681b      	ldr	r3, [r3, #0]
 80a24e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a24e4:	9301      	str	r3, [sp, #4]
 80a24e6:	bd08      	pop	{r3, pc}
 80a24e8:	080601c8 	.word	0x080601c8

080a24ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a24ec:	b508      	push	{r3, lr}
 80a24ee:	4b02      	ldr	r3, [pc, #8]	; (80a24f8 <network_get_listen_timeout+0xc>)
 80a24f0:	681b      	ldr	r3, [r3, #0]
 80a24f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a24f4:	9301      	str	r3, [sp, #4]
 80a24f6:	bd08      	pop	{r3, pc}
 80a24f8:	080601c8 	.word	0x080601c8

080a24fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a24fc:	b508      	push	{r3, lr}
 80a24fe:	4b02      	ldr	r3, [pc, #8]	; (80a2508 <malloc+0xc>)
 80a2500:	681b      	ldr	r3, [r3, #0]
 80a2502:	681b      	ldr	r3, [r3, #0]
 80a2504:	9301      	str	r3, [sp, #4]
 80a2506:	bd08      	pop	{r3, pc}
 80a2508:	080601a0 	.word	0x080601a0

080a250c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a250c:	b508      	push	{r3, lr}
 80a250e:	4b02      	ldr	r3, [pc, #8]	; (80a2518 <free+0xc>)
 80a2510:	681b      	ldr	r3, [r3, #0]
 80a2512:	685b      	ldr	r3, [r3, #4]
 80a2514:	9301      	str	r3, [sp, #4]
 80a2516:	bd08      	pop	{r3, pc}
 80a2518:	080601a0 	.word	0x080601a0

080a251c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a251c:	2100      	movs	r1, #0
 80a251e:	f7ff bf79 	b.w	80a2414 <system_delay_ms>

080a2522 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2522:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2524:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2526:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2528:	b113      	cbz	r3, 80a2530 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a252a:	2203      	movs	r2, #3
 80a252c:	4601      	mov	r1, r0
 80a252e:	4798      	blx	r3
    }
 80a2530:	4620      	mov	r0, r4
 80a2532:	bd10      	pop	{r4, pc}

080a2534 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2534:	4770      	bx	lr

080a2536 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2538:	4606      	mov	r6, r0
 80a253a:	4615      	mov	r5, r2
 80a253c:	460c      	mov	r4, r1
 80a253e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2540:	42bc      	cmp	r4, r7
 80a2542:	d006      	beq.n	80a2552 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2544:	6833      	ldr	r3, [r6, #0]
 80a2546:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a254a:	689b      	ldr	r3, [r3, #8]
 80a254c:	4630      	mov	r0, r6
 80a254e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2550:	e7f6      	b.n	80a2540 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2552:	4628      	mov	r0, r5
 80a2554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2556 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2556:	2200      	movs	r2, #0
 80a2558:	7c00      	ldrb	r0, [r0, #16]
 80a255a:	f7ff be59 	b.w	80a2210 <HAL_I2C_Write_Data>

080a255e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a255e:	2100      	movs	r1, #0
 80a2560:	7c00      	ldrb	r0, [r0, #16]
 80a2562:	f7ff be5d 	b.w	80a2220 <HAL_I2C_Available_Data>

080a2566 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2566:	2100      	movs	r1, #0
 80a2568:	7c00      	ldrb	r0, [r0, #16]
 80a256a:	f7ff be61 	b.w	80a2230 <HAL_I2C_Read_Data>

080a256e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a256e:	2100      	movs	r1, #0
 80a2570:	7c00      	ldrb	r0, [r0, #16]
 80a2572:	f7ff be65 	b.w	80a2240 <HAL_I2C_Peek_Data>

080a2576 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2576:	2100      	movs	r1, #0
 80a2578:	7c00      	ldrb	r0, [r0, #16]
 80a257a:	f7ff be69 	b.w	80a2250 <HAL_I2C_Flush_Data>

080a257e <_ZN7TwoWireD0Ev>:
 80a257e:	b510      	push	{r4, lr}
 80a2580:	4604      	mov	r4, r0
 80a2582:	2114      	movs	r1, #20
 80a2584:	f000 fe09 	bl	80a319a <_ZdlPvj>
 80a2588:	4620      	mov	r0, r4
 80a258a:	bd10      	pop	{r4, pc}

080a258c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a258c:	b510      	push	{r4, lr}
 80a258e:	4604      	mov	r4, r0
 80a2590:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2596:	60a3      	str	r3, [r4, #8]
 80a2598:	4b04      	ldr	r3, [pc, #16]	; (80a25ac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a259a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a259c:	7420      	strb	r0, [r4, #16]
 80a259e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a25a0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a25a2:	f7ff fe65 	bl	80a2270 <HAL_I2C_Init>

}
 80a25a6:	4620      	mov	r0, r4
 80a25a8:	bd10      	pop	{r4, pc}
 80a25aa:	bf00      	nop
 80a25ac:	080a45a0 	.word	0x080a45a0

080a25b0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a25b0:	2300      	movs	r3, #0
 80a25b2:	461a      	mov	r2, r3
 80a25b4:	4619      	mov	r1, r3
 80a25b6:	7c00      	ldrb	r0, [r0, #16]
 80a25b8:	f7ff be0a 	b.w	80a21d0 <HAL_I2C_Begin>

080a25bc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a25bc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a25be:	2400      	movs	r4, #0
 80a25c0:	7c00      	ldrb	r0, [r0, #16]
 80a25c2:	9400      	str	r4, [sp, #0]
 80a25c4:	f7ff fe0c 	bl	80a21e0 <HAL_I2C_Request_Data>
  return result;
}
 80a25c8:	b2c0      	uxtb	r0, r0
 80a25ca:	b002      	add	sp, #8
 80a25cc:	bd10      	pop	{r4, pc}

080a25ce <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a25ce:	2301      	movs	r3, #1
 80a25d0:	f7ff bff4 	b.w	80a25bc <_ZN7TwoWire11requestFromEhhh>

080a25d4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a25d4:	2200      	movs	r2, #0
 80a25d6:	7c00      	ldrb	r0, [r0, #16]
 80a25d8:	f7ff be0a 	b.w	80a21f0 <HAL_I2C_Begin_Transmission>

080a25dc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a25dc:	2200      	movs	r2, #0
 80a25de:	7c00      	ldrb	r0, [r0, #16]
 80a25e0:	f7ff be0e 	b.w	80a2200 <HAL_I2C_End_Transmission>

080a25e4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a25e4:	2101      	movs	r1, #1
 80a25e6:	f7ff bff9 	b.w	80a25dc <_ZN7TwoWire15endTransmissionEh>

080a25ea <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a25ea:	2100      	movs	r1, #0
 80a25ec:	7c00      	ldrb	r0, [r0, #16]
 80a25ee:	f7ff be37 	b.w	80a2260 <HAL_I2C_Is_Enabled>

080a25f2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a25f2:	4770      	bx	lr

080a25f4 <_ZN9IPAddressD0Ev>:
 80a25f4:	b510      	push	{r4, lr}
 80a25f6:	4604      	mov	r4, r0
 80a25f8:	2118      	movs	r1, #24
 80a25fa:	f000 fdce 	bl	80a319a <_ZdlPvj>
 80a25fe:	4620      	mov	r0, r4
 80a2600:	bd10      	pop	{r4, pc}

080a2602 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2604:	460f      	mov	r7, r1
 80a2606:	f100 0608 	add.w	r6, r0, #8
 80a260a:	1d05      	adds	r5, r0, #4
 80a260c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a260e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2612:	220a      	movs	r2, #10
 80a2614:	4638      	mov	r0, r7
 80a2616:	f000 f92a 	bl	80a286e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a261a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a261c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a261e:	d007      	beq.n	80a2630 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2620:	2c00      	cmp	r4, #0
 80a2622:	d0f4      	beq.n	80a260e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2624:	212e      	movs	r1, #46	; 0x2e
 80a2626:	4638      	mov	r0, r7
 80a2628:	f000 f8de 	bl	80a27e8 <_ZN5Print5printEc>
 80a262c:	4404      	add	r4, r0
 80a262e:	e7ee      	b.n	80a260e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2630:	4620      	mov	r0, r4
 80a2632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2634 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2634:	b510      	push	{r4, lr}
 80a2636:	4604      	mov	r4, r0
 80a2638:	4b04      	ldr	r3, [pc, #16]	; (80a264c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a263a:	2211      	movs	r2, #17
 80a263c:	f840 3b04 	str.w	r3, [r0], #4
 80a2640:	2100      	movs	r1, #0
 80a2642:	f001 feb8 	bl	80a43b6 <memset>
{
    clear();
}
 80a2646:	4620      	mov	r0, r4
 80a2648:	bd10      	pop	{r4, pc}
 80a264a:	bf00      	nop
 80a264c:	080a45c8 	.word	0x080a45c8

080a2650 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2650:	4603      	mov	r3, r0
 80a2652:	4a07      	ldr	r2, [pc, #28]	; (80a2670 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2654:	b510      	push	{r4, lr}
 80a2656:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a265a:	f101 0210 	add.w	r2, r1, #16
 80a265e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2662:	4291      	cmp	r1, r2
 80a2664:	f843 4b04 	str.w	r4, [r3], #4
 80a2668:	d1f9      	bne.n	80a265e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a266a:	780a      	ldrb	r2, [r1, #0]
 80a266c:	701a      	strb	r2, [r3, #0]
}
 80a266e:	bd10      	pop	{r4, pc}
 80a2670:	080a45c8 	.word	0x080a45c8

080a2674 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2674:	4a02      	ldr	r2, [pc, #8]	; (80a2680 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2676:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2678:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a267a:	2204      	movs	r2, #4
 80a267c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a267e:	4770      	bx	lr
 80a2680:	080a45c8 	.word	0x080a45c8

080a2684 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2684:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2686:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a268a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a268e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2692:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2696:	2304      	movs	r3, #4
 80a2698:	6041      	str	r1, [r0, #4]
 80a269a:	7503      	strb	r3, [r0, #20]
 80a269c:	bd10      	pop	{r4, pc}
	...

080a26a0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a26a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a26a2:	4d04      	ldr	r5, [pc, #16]	; (80a26b4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a26a4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a26a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a26aa:	9500      	str	r5, [sp, #0]
 80a26ac:	f7ff ffea 	bl	80a2684 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a26b0:	b003      	add	sp, #12
 80a26b2:	bd30      	pop	{r4, r5, pc}
 80a26b4:	080a45c8 	.word	0x080a45c8

080a26b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a26b8:	4a01      	ldr	r2, [pc, #4]	; (80a26c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a26ba:	4b02      	ldr	r3, [pc, #8]	; (80a26c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a26bc:	601a      	str	r2, [r3, #0]
 80a26be:	4770      	bx	lr
 80a26c0:	080a464a 	.word	0x080a464a
 80a26c4:	2000015c 	.word	0x2000015c

080a26c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a26c8:	2300      	movs	r3, #0
 80a26ca:	461a      	mov	r2, r3
 80a26cc:	6840      	ldr	r0, [r0, #4]
 80a26ce:	f7ff bec5 	b.w	80a245c <network_connect>

080a26d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a26d2:	2200      	movs	r2, #0
 80a26d4:	2102      	movs	r1, #2
 80a26d6:	6840      	ldr	r0, [r0, #4]
 80a26d8:	f7ff bed0 	b.w	80a247c <network_disconnect>

080a26dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a26dc:	2200      	movs	r2, #0
 80a26de:	4611      	mov	r1, r2
 80a26e0:	6840      	ldr	r0, [r0, #4]
 80a26e2:	f7ff bec3 	b.w	80a246c <network_connecting>

080a26e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a26e6:	2200      	movs	r2, #0
 80a26e8:	4611      	mov	r1, r2
 80a26ea:	6840      	ldr	r0, [r0, #4]
 80a26ec:	f7ff bece 	b.w	80a248c <network_ready>

080a26f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a26f0:	2300      	movs	r3, #0
 80a26f2:	461a      	mov	r2, r3
 80a26f4:	4619      	mov	r1, r3
 80a26f6:	6840      	ldr	r0, [r0, #4]
 80a26f8:	f7ff bed0 	b.w	80a249c <network_on>

080a26fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a26fc:	2300      	movs	r3, #0
 80a26fe:	461a      	mov	r2, r3
 80a2700:	4619      	mov	r1, r3
 80a2702:	6840      	ldr	r0, [r0, #4]
 80a2704:	f7ff bed2 	b.w	80a24ac <network_off>

080a2708 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2708:	2200      	movs	r2, #0
 80a270a:	f081 0101 	eor.w	r1, r1, #1
 80a270e:	6840      	ldr	r0, [r0, #4]
 80a2710:	f7ff bed4 	b.w	80a24bc <network_listen>

080a2714 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2714:	2200      	movs	r2, #0
 80a2716:	6840      	ldr	r0, [r0, #4]
 80a2718:	f7ff bee0 	b.w	80a24dc <network_set_listen_timeout>

080a271c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a271c:	2200      	movs	r2, #0
 80a271e:	4611      	mov	r1, r2
 80a2720:	6840      	ldr	r0, [r0, #4]
 80a2722:	f7ff bee3 	b.w	80a24ec <network_get_listen_timeout>

080a2726 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2726:	2200      	movs	r2, #0
 80a2728:	4611      	mov	r1, r2
 80a272a:	6840      	ldr	r0, [r0, #4]
 80a272c:	f7ff bece 	b.w	80a24cc <network_listening>

080a2730 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2730:	b570      	push	{r4, r5, r6, lr}
 80a2732:	4616      	mov	r6, r2
 80a2734:	b08e      	sub	sp, #56	; 0x38
 80a2736:	4604      	mov	r4, r0
    IPAddress addr;
 80a2738:	a808      	add	r0, sp, #32
 80a273a:	f7ff ff7b 	bl	80a2634 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a273e:	2211      	movs	r2, #17
 80a2740:	2100      	movs	r1, #0
 80a2742:	a803      	add	r0, sp, #12
 80a2744:	f001 fe37 	bl	80a43b6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2748:	4630      	mov	r0, r6
 80a274a:	f001 fe65 	bl	80a4418 <strlen>
 80a274e:	2500      	movs	r5, #0
 80a2750:	4b0a      	ldr	r3, [pc, #40]	; (80a277c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2752:	9500      	str	r5, [sp, #0]
 80a2754:	b281      	uxth	r1, r0
 80a2756:	685b      	ldr	r3, [r3, #4]
 80a2758:	aa03      	add	r2, sp, #12
 80a275a:	4630      	mov	r0, r6
 80a275c:	f7ff fe4a 	bl	80a23f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2760:	b120      	cbz	r0, 80a276c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2762:	4629      	mov	r1, r5
 80a2764:	4620      	mov	r0, r4
 80a2766:	f7ff ff85 	bl	80a2674 <_ZN9IPAddressC1Em>
 80a276a:	e003      	b.n	80a2774 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a276c:	a903      	add	r1, sp, #12
 80a276e:	4620      	mov	r0, r4
 80a2770:	f7ff ff6e 	bl	80a2650 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2774:	4620      	mov	r0, r4
 80a2776:	b00e      	add	sp, #56	; 0x38
 80a2778:	bd70      	pop	{r4, r5, r6, pc}
 80a277a:	bf00      	nop
 80a277c:	200005e0 	.word	0x200005e0

080a2780 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2780:	4b02      	ldr	r3, [pc, #8]	; (80a278c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2782:	4a03      	ldr	r2, [pc, #12]	; (80a2790 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2784:	601a      	str	r2, [r3, #0]
 80a2786:	2200      	movs	r2, #0
 80a2788:	605a      	str	r2, [r3, #4]
 80a278a:	4770      	bx	lr
 80a278c:	20000160 	.word	0x20000160
 80a2790:	080a46bc 	.word	0x080a46bc

080a2794 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2796:	4606      	mov	r6, r0
 80a2798:	460d      	mov	r5, r1
 80a279a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a279c:	2400      	movs	r4, #0
  while (size--) {
 80a279e:	42bd      	cmp	r5, r7
 80a27a0:	d00c      	beq.n	80a27bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a27a2:	6833      	ldr	r3, [r6, #0]
 80a27a4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a27a8:	689b      	ldr	r3, [r3, #8]
 80a27aa:	4630      	mov	r0, r6
 80a27ac:	4798      	blx	r3
     if (chunk>=0)
 80a27ae:	2800      	cmp	r0, #0
 80a27b0:	db01      	blt.n	80a27b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a27b2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a27b4:	e7f3      	b.n	80a279e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a27b6:	2c00      	cmp	r4, #0
 80a27b8:	bf08      	it	eq
 80a27ba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a27bc:	4620      	mov	r0, r4
 80a27be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a27c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a27c0:	b570      	push	{r4, r5, r6, lr}
 80a27c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a27c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a27c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a27c8:	b149      	cbz	r1, 80a27de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a27ca:	f001 fe25 	bl	80a4418 <strlen>
 80a27ce:	682b      	ldr	r3, [r5, #0]
 80a27d0:	4602      	mov	r2, r0
 80a27d2:	4621      	mov	r1, r4
 80a27d4:	4628      	mov	r0, r5
    }
 80a27d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a27da:	68db      	ldr	r3, [r3, #12]
 80a27dc:	4718      	bx	r3
    }
 80a27de:	bd70      	pop	{r4, r5, r6, pc}

080a27e0 <_ZN5Print5printEPKc>:
 80a27e0:	b508      	push	{r3, lr}
 80a27e2:	f7ff ffed 	bl	80a27c0 <_ZN5Print5writeEPKc>
 80a27e6:	bd08      	pop	{r3, pc}

080a27e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a27e8:	6803      	ldr	r3, [r0, #0]
 80a27ea:	689b      	ldr	r3, [r3, #8]
 80a27ec:	4718      	bx	r3

080a27ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a27ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a27f0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a27f2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a27f4:	f7ff fff8 	bl	80a27e8 <_ZN5Print5printEc>
  n += print('\n');
 80a27f8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a27fa:	4604      	mov	r4, r0
  n += print('\n');
 80a27fc:	4628      	mov	r0, r5
 80a27fe:	f7ff fff3 	bl	80a27e8 <_ZN5Print5printEc>
  return n;
}
 80a2802:	4420      	add	r0, r4
 80a2804:	bd38      	pop	{r3, r4, r5, pc}

080a2806 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2806:	b538      	push	{r3, r4, r5, lr}
 80a2808:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a280a:	f7ff ffd9 	bl	80a27c0 <_ZN5Print5writeEPKc>
 80a280e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2810:	4628      	mov	r0, r5
 80a2812:	f7ff ffec 	bl	80a27ee <_ZN5Print7printlnEv>
  return n;
}
 80a2816:	4420      	add	r0, r4
 80a2818:	bd38      	pop	{r3, r4, r5, pc}

080a281a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a281a:	2a01      	cmp	r2, #1
 80a281c:	bf98      	it	ls
 80a281e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2820:	b530      	push	{r4, r5, lr}
 80a2822:	460b      	mov	r3, r1
 80a2824:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2826:	2100      	movs	r1, #0
 80a2828:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a282c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2830:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2834:	fb05 3312 	mls	r3, r5, r2, r3
 80a2838:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a283a:	2b09      	cmp	r3, #9
 80a283c:	bf94      	ite	ls
 80a283e:	3330      	addls	r3, #48	; 0x30
 80a2840:	3337      	addhi	r3, #55	; 0x37
 80a2842:	b2db      	uxtb	r3, r3
 80a2844:	4621      	mov	r1, r4
 80a2846:	f804 3901 	strb.w	r3, [r4], #-1
 80a284a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a284c:	2d00      	cmp	r5, #0
 80a284e:	d1ef      	bne.n	80a2830 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2850:	f7ff ffb6 	bl	80a27c0 <_ZN5Print5writeEPKc>
}
 80a2854:	b00b      	add	sp, #44	; 0x2c
 80a2856:	bd30      	pop	{r4, r5, pc}

080a2858 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2858:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a285a:	b922      	cbnz	r2, 80a2866 <_ZN5Print5printEmi+0xe>
 80a285c:	6803      	ldr	r3, [r0, #0]
 80a285e:	b2c9      	uxtb	r1, r1
 80a2860:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2862:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2864:	4718      	bx	r3
  else return printNumber(n, base);
 80a2866:	b2d2      	uxtb	r2, r2
}
 80a2868:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a286a:	f7ff bfd6 	b.w	80a281a <_ZN5Print11printNumberEmh>

080a286e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a286e:	f7ff bff3 	b.w	80a2858 <_ZN5Print5printEmi>

080a2872 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2876:	4607      	mov	r7, r0
 80a2878:	460e      	mov	r6, r1
  if (base == 0) {
 80a287a:	4615      	mov	r5, r2
 80a287c:	b92a      	cbnz	r2, 80a288a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a287e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2882:	6803      	ldr	r3, [r0, #0]
 80a2884:	b2c9      	uxtb	r1, r1
 80a2886:	689b      	ldr	r3, [r3, #8]
 80a2888:	4718      	bx	r3
  } else if (base == 10) {
 80a288a:	2a0a      	cmp	r2, #10
 80a288c:	d102      	bne.n	80a2894 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a288e:	2900      	cmp	r1, #0
 80a2890:	da01      	bge.n	80a2896 <_ZN5Print5printEli+0x24>
 80a2892:	e004      	b.n	80a289e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2894:	b2d2      	uxtb	r2, r2
  }
}
 80a2896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a289a:	f7ff bfbe 	b.w	80a281a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a289e:	212d      	movs	r1, #45	; 0x2d
 80a28a0:	f7ff ffa2 	bl	80a27e8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a28a4:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a28a6:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a28a8:	4271      	negs	r1, r6
 80a28aa:	4638      	mov	r0, r7
 80a28ac:	f7ff ffb5 	bl	80a281a <_ZN5Print11printNumberEmh>
 80a28b0:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a28b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a28b6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a28b6:	b538      	push	{r3, r4, r5, lr}
 80a28b8:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a28ba:	f7ff ffda 	bl	80a2872 <_ZN5Print5printEli>
 80a28be:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a28c0:	4628      	mov	r0, r5
 80a28c2:	f7ff ff94 	bl	80a27ee <_ZN5Print7printlnEv>
  return n;
}
 80a28c6:	4420      	add	r0, r4
 80a28c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a28cc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a28cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a28d0:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a28d2:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a28d4:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a28d6:	4617      	mov	r7, r2
 80a28d8:	461e      	mov	r6, r3
 80a28da:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a28de:	f001 f9f9 	bl	80a3cd4 <__aeabi_dcmpun>
 80a28e2:	b108      	cbz	r0, 80a28e8 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a28e4:	4947      	ldr	r1, [pc, #284]	; (80a2a04 <_ZN5Print10printFloatEdh+0x138>)
 80a28e6:	e012      	b.n	80a290e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a28e8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a28ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a28f0:	4b45      	ldr	r3, [pc, #276]	; (80a2a08 <_ZN5Print10printFloatEdh+0x13c>)
 80a28f2:	4638      	mov	r0, r7
 80a28f4:	4621      	mov	r1, r4
 80a28f6:	f001 f9ed 	bl	80a3cd4 <__aeabi_dcmpun>
 80a28fa:	b968      	cbnz	r0, 80a2918 <_ZN5Print10printFloatEdh+0x4c>
 80a28fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2900:	4b41      	ldr	r3, [pc, #260]	; (80a2a08 <_ZN5Print10printFloatEdh+0x13c>)
 80a2902:	4638      	mov	r0, r7
 80a2904:	4621      	mov	r1, r4
 80a2906:	f001 f9c7 	bl	80a3c98 <__aeabi_dcmple>
 80a290a:	b928      	cbnz	r0, 80a2918 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a290c:	493f      	ldr	r1, [pc, #252]	; (80a2a0c <_ZN5Print10printFloatEdh+0x140>)
 80a290e:	4640      	mov	r0, r8
 80a2910:	f7ff ff56 	bl	80a27c0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2918:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a291c:	4b3c      	ldr	r3, [pc, #240]	; (80a2a10 <_ZN5Print10printFloatEdh+0x144>)
 80a291e:	4638      	mov	r0, r7
 80a2920:	4631      	mov	r1, r6
 80a2922:	f001 f9cd 	bl	80a3cc0 <__aeabi_dcmpgt>
 80a2926:	b108      	cbz	r0, 80a292c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2928:	493a      	ldr	r1, [pc, #232]	; (80a2a14 <_ZN5Print10printFloatEdh+0x148>)
 80a292a:	e7f0      	b.n	80a290e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a292c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2930:	4b39      	ldr	r3, [pc, #228]	; (80a2a18 <_ZN5Print10printFloatEdh+0x14c>)
 80a2932:	4638      	mov	r0, r7
 80a2934:	4631      	mov	r1, r6
 80a2936:	f001 f9a5 	bl	80a3c84 <__aeabi_dcmplt>
 80a293a:	2800      	cmp	r0, #0
 80a293c:	d1f4      	bne.n	80a2928 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a293e:	2200      	movs	r2, #0
 80a2940:	2300      	movs	r3, #0
 80a2942:	4638      	mov	r0, r7
 80a2944:	4631      	mov	r1, r6
 80a2946:	f001 f99d 	bl	80a3c84 <__aeabi_dcmplt>
 80a294a:	b138      	cbz	r0, 80a295c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a294c:	212d      	movs	r1, #45	; 0x2d
 80a294e:	4640      	mov	r0, r8
 80a2950:	f7ff ff4a 	bl	80a27e8 <_ZN5Print5printEc>
     number = -number;
 80a2954:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2958:	4604      	mov	r4, r0
 80a295a:	e000      	b.n	80a295e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a295c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a295e:	492f      	ldr	r1, [pc, #188]	; (80a2a1c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2960:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2964:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2966:	fa5f f389 	uxtb.w	r3, r9
 80a296a:	429d      	cmp	r5, r3
 80a296c:	d906      	bls.n	80a297c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a296e:	2200      	movs	r2, #0
 80a2970:	4b2b      	ldr	r3, [pc, #172]	; (80a2a20 <_ZN5Print10printFloatEdh+0x154>)
 80a2972:	f001 f83f 	bl	80a39f4 <__aeabi_ddiv>
 80a2976:	f109 0901 	add.w	r9, r9, #1
 80a297a:	e7f4      	b.n	80a2966 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a297c:	463a      	mov	r2, r7
 80a297e:	4633      	mov	r3, r6
 80a2980:	f000 fd5c 	bl	80a343c <__adddf3>
 80a2984:	460f      	mov	r7, r1
 80a2986:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2988:	f001 f9e2 	bl	80a3d50 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a298c:	220a      	movs	r2, #10
 80a298e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2990:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2992:	4640      	mov	r0, r8
 80a2994:	f7ff ff41 	bl	80a281a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2998:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a299a:	b37d      	cbz	r5, 80a29fc <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a299c:	4648      	mov	r0, r9
 80a299e:	f000 fe89 	bl	80a36b4 <__aeabi_ui2d>
 80a29a2:	4602      	mov	r2, r0
 80a29a4:	460b      	mov	r3, r1
 80a29a6:	4630      	mov	r0, r6
 80a29a8:	4639      	mov	r1, r7
 80a29aa:	f000 fd45 	bl	80a3438 <__aeabi_dsub>
 80a29ae:	4606      	mov	r6, r0
 80a29b0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a29b2:	4640      	mov	r0, r8
 80a29b4:	491b      	ldr	r1, [pc, #108]	; (80a2a24 <_ZN5Print10printFloatEdh+0x158>)
 80a29b6:	f7ff ff03 	bl	80a27c0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a29ba:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a29bc:	4b18      	ldr	r3, [pc, #96]	; (80a2a20 <_ZN5Print10printFloatEdh+0x154>)
 80a29be:	2200      	movs	r2, #0
 80a29c0:	4630      	mov	r0, r6
 80a29c2:	4639      	mov	r1, r7
 80a29c4:	f000 feec 	bl	80a37a0 <__aeabi_dmul>
 80a29c8:	460f      	mov	r7, r1
 80a29ca:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a29cc:	f001 f998 	bl	80a3d00 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a29d0:	220a      	movs	r2, #10
 80a29d2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a29d4:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a29d6:	4640      	mov	r0, r8
 80a29d8:	f7ff ff4b 	bl	80a2872 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a29dc:	4404      	add	r4, r0
    remainder -= toPrint;
 80a29de:	4648      	mov	r0, r9
 80a29e0:	f000 fe78 	bl	80a36d4 <__aeabi_i2d>
 80a29e4:	4602      	mov	r2, r0
 80a29e6:	460b      	mov	r3, r1
 80a29e8:	4630      	mov	r0, r6
 80a29ea:	4639      	mov	r1, r7
 80a29ec:	f000 fd24 	bl	80a3438 <__aeabi_dsub>
 80a29f0:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a29f2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a29f6:	4606      	mov	r6, r0
 80a29f8:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a29fa:	d1df      	bne.n	80a29bc <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a29fc:	4620      	mov	r0, r4
 80a29fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2a02:	bf00      	nop
 80a2a04:	080a46e8 	.word	0x080a46e8
 80a2a08:	7fefffff 	.word	0x7fefffff
 80a2a0c:	080a46f0 	.word	0x080a46f0
 80a2a10:	41efffff 	.word	0x41efffff
 80a2a14:	080a46ec 	.word	0x080a46ec
 80a2a18:	c1efffff 	.word	0xc1efffff
 80a2a1c:	3fe00000 	.word	0x3fe00000
 80a2a20:	40240000 	.word	0x40240000
 80a2a24:	080a4533 	.word	0x080a4533

080a2a28 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2a28:	f89d 1000 	ldrb.w	r1, [sp]
 80a2a2c:	9100      	str	r1, [sp, #0]
 80a2a2e:	f7ff bf4d 	b.w	80a28cc <_ZN5Print10printFloatEdh>

080a2a32 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2a32:	b510      	push	{r4, lr}
 80a2a34:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2a36:	f7ff fd74 	bl	80a2522 <_ZNSt14_Function_baseD1Ev>
 80a2a3a:	4620      	mov	r0, r4
 80a2a3c:	bd10      	pop	{r4, pc}
	...

080a2a40 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2a40:	4803      	ldr	r0, [pc, #12]	; (80a2a50 <_GLOBAL__sub_I_RGB+0x10>)
 80a2a42:	2300      	movs	r3, #0
 80a2a44:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2a46:	4a03      	ldr	r2, [pc, #12]	; (80a2a54 <_GLOBAL__sub_I_RGB+0x14>)
 80a2a48:	4903      	ldr	r1, [pc, #12]	; (80a2a58 <_GLOBAL__sub_I_RGB+0x18>)
 80a2a4a:	f000 bba1 	b.w	80a3190 <__aeabi_atexit>
 80a2a4e:	bf00      	nop
 80a2a50:	20000168 	.word	0x20000168
 80a2a54:	20000078 	.word	0x20000078
 80a2a58:	080a2a33 	.word	0x080a2a33

080a2a5c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2a5c:	4770      	bx	lr

080a2a5e <_ZN8SPIClassD0Ev>:
 80a2a5e:	b510      	push	{r4, lr}
 80a2a60:	4604      	mov	r4, r0
 80a2a62:	2110      	movs	r1, #16
 80a2a64:	f000 fb99 	bl	80a319a <_ZdlPvj>
 80a2a68:	4620      	mov	r0, r4
 80a2a6a:	bd10      	pop	{r4, pc}

080a2a6c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2a6c:	b570      	push	{r4, r5, r6, lr}
 80a2a6e:	4604      	mov	r4, r0
 80a2a70:	460e      	mov	r6, r1
 80a2a72:	4b07      	ldr	r3, [pc, #28]	; (80a2a90 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2a74:	2500      	movs	r5, #0
 80a2a76:	6003      	str	r3, [r0, #0]
 80a2a78:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2a7c:	f7ff fb60 	bl	80a2140 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2a80:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2a82:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2a84:	f7ff fc26 	bl	80a22d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2a88:	60a5      	str	r5, [r4, #8]
}
 80a2a8a:	4620      	mov	r0, r4
 80a2a8c:	bd70      	pop	{r4, r5, r6, pc}
 80a2a8e:	bf00      	nop
 80a2a90:	080a46fc 	.word	0x080a46fc

080a2a94 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2a94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2a98:	7900      	ldrb	r0, [r0, #4]
 80a2a9a:	f7ff bbf3 	b.w	80a2284 <HAL_SPI_Begin>

080a2a9e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2a9e:	7900      	ldrb	r0, [r0, #4]
 80a2aa0:	f7ff bbf8 	b.w	80a2294 <HAL_SPI_Set_Bit_Order>

080a2aa4 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2aa4:	7900      	ldrb	r0, [r0, #4]
 80a2aa6:	f7ff bbfd 	b.w	80a22a4 <HAL_SPI_Set_Data_Mode>
	...

080a2aac <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2aac:	4a05      	ldr	r2, [pc, #20]	; (80a2ac4 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a2aae:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2ab0:	5c99      	ldrb	r1, [r3, r2]
 80a2ab2:	4281      	cmp	r1, r0
 80a2ab4:	d002      	beq.n	80a2abc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a2ab6:	3301      	adds	r3, #1
 80a2ab8:	2b08      	cmp	r3, #8
 80a2aba:	d1f9      	bne.n	80a2ab0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a2abc:	1c58      	adds	r0, r3, #1
}
 80a2abe:	b2c0      	uxtb	r0, r0
 80a2ac0:	4770      	bx	lr
 80a2ac2:	bf00      	nop
 80a2ac4:	080a4704 	.word	0x080a4704

080a2ac8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2ac8:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2aca:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2acc:	6018      	str	r0, [r3, #0]
 80a2ace:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2ad0:	6818      	ldr	r0, [r3, #0]
 80a2ad2:	b2e5      	uxtb	r5, r4
 80a2ad4:	4288      	cmp	r0, r1
 80a2ad6:	d906      	bls.n	80a2ae6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2ad8:	3401      	adds	r4, #1
 80a2ada:	2c08      	cmp	r4, #8
 80a2adc:	d002      	beq.n	80a2ae4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2ade:	0840      	lsrs	r0, r0, #1
 80a2ae0:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2ae2:	e7f5      	b.n	80a2ad0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2ae4:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2ae6:	4b02      	ldr	r3, [pc, #8]	; (80a2af0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2ae8:	5d5b      	ldrb	r3, [r3, r5]
 80a2aea:	7013      	strb	r3, [r2, #0]
 80a2aec:	bd30      	pop	{r4, r5, pc}
 80a2aee:	bf00      	nop
 80a2af0:	080a4704 	.word	0x080a4704

080a2af4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2af4:	b570      	push	{r4, r5, r6, lr}
 80a2af6:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2af8:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2afc:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2afe:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2b00:	2214      	movs	r2, #20
 80a2b02:	2100      	movs	r1, #0
 80a2b04:	a803      	add	r0, sp, #12
 80a2b06:	f001 fc56 	bl	80a43b6 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2b0a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2b0c:	a903      	add	r1, sp, #12
 80a2b0e:	4630      	mov	r0, r6
 80a2b10:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2b12:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2b16:	f7ff fbed 	bl	80a22f4 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a2b1a:	ab02      	add	r3, sp, #8
 80a2b1c:	f10d 0207 	add.w	r2, sp, #7
 80a2b20:	4629      	mov	r1, r5
 80a2b22:	9804      	ldr	r0, [sp, #16]
 80a2b24:	f7ff ffd0 	bl	80a2ac8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2b28:	7920      	ldrb	r0, [r4, #4]
 80a2b2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2b2e:	f7ff fbc1 	bl	80a22b4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a2b32:	9802      	ldr	r0, [sp, #8]
 80a2b34:	b008      	add	sp, #32
 80a2b36:	bd70      	pop	{r4, r5, r6, pc}

080a2b38 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2b38:	b538      	push	{r3, r4, r5, lr}
 80a2b3a:	4604      	mov	r4, r0
    if (dividerReference)
 80a2b3c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2b3e:	4608      	mov	r0, r1
    if (dividerReference)
 80a2b40:	b14d      	cbz	r5, 80a2b56 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a2b42:	f7ff ffb3 	bl	80a2aac <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2b46:	2201      	movs	r2, #1
 80a2b48:	fa25 f100 	lsr.w	r1, r5, r0
 80a2b4c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a2b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2b52:	f7ff bfcf 	b.w	80a2af4 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2b56:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a2b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2b5c:	f7ff bbaa 	b.w	80a22b4 <HAL_SPI_Set_Clock_Divider>

080a2b60 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2b60:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2b62:	7900      	ldrb	r0, [r0, #4]
 80a2b64:	f7ff fbae 	bl	80a22c4 <HAL_SPI_Send_Receive_Data>
}
 80a2b68:	b2c0      	uxtb	r0, r0
 80a2b6a:	bd08      	pop	{r3, pc}

080a2b6c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2b6c:	7900      	ldrb	r0, [r0, #4]
 80a2b6e:	f7ff bbb9 	b.w	80a22e4 <HAL_SPI_Is_Enabled>
	...

080a2b74 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2b78:	4b03      	ldr	r3, [pc, #12]	; (80a2b88 <_GLOBAL__sub_I_System+0x14>)
 80a2b7a:	2000      	movs	r0, #0
 80a2b7c:	7018      	strb	r0, [r3, #0]
 80a2b7e:	8058      	strh	r0, [r3, #2]
 80a2b80:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2b82:	f7ff bc3f 	b.w	80a2404 <set_system_mode>
 80a2b86:	bf00      	nop
 80a2b88:	20000178 	.word	0x20000178

080a2b8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2b8c:	4b02      	ldr	r3, [pc, #8]	; (80a2b98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2b8e:	681a      	ldr	r2, [r3, #0]
 80a2b90:	4b02      	ldr	r3, [pc, #8]	; (80a2b9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2b92:	601a      	str	r2, [r3, #0]
 80a2b94:	4770      	bx	lr
 80a2b96:	bf00      	nop
 80a2b98:	20000010 	.word	0x20000010
 80a2b9c:	20000180 	.word	0x20000180

080a2ba0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2ba0:	4770      	bx	lr

080a2ba2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2ba2:	7441      	strb	r1, [r0, #17]
 80a2ba4:	4770      	bx	lr

080a2ba6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2ba6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2ba8:	7c00      	ldrb	r0, [r0, #16]
 80a2baa:	f7ff fbe3 	bl	80a2374 <HAL_USART_Available_Data_For_Write>
}
 80a2bae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2bb2:	bd08      	pop	{r3, pc}

080a2bb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2bb4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2bb6:	7c00      	ldrb	r0, [r0, #16]
 80a2bb8:	f7ff fbb4 	bl	80a2324 <HAL_USART_Available_Data>
}
 80a2bbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2bc0:	bd08      	pop	{r3, pc}

080a2bc2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2bc2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2bc4:	7c00      	ldrb	r0, [r0, #16]
 80a2bc6:	f7ff fbbd 	bl	80a2344 <HAL_USART_Peek_Data>
}
 80a2bca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2bce:	bf28      	it	cs
 80a2bd0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2bd4:	bd08      	pop	{r3, pc}

080a2bd6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2bd6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2bd8:	7c00      	ldrb	r0, [r0, #16]
 80a2bda:	f7ff fbab 	bl	80a2334 <HAL_USART_Read_Data>
}
 80a2bde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2be2:	bf28      	it	cs
 80a2be4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2be8:	bd08      	pop	{r3, pc}

080a2bea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2bea:	7c00      	ldrb	r0, [r0, #16]
 80a2bec:	f7ff bbb2 	b.w	80a2354 <HAL_USART_Flush_Data>

080a2bf0 <_ZN11USARTSerialD0Ev>:
 80a2bf0:	b510      	push	{r4, lr}
 80a2bf2:	4604      	mov	r4, r0
 80a2bf4:	2114      	movs	r1, #20
 80a2bf6:	f000 fad0 	bl	80a319a <_ZdlPvj>
 80a2bfa:	4620      	mov	r0, r4
 80a2bfc:	bd10      	pop	{r4, pc}

080a2bfe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2bfe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2c00:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2c02:	4604      	mov	r4, r0
 80a2c04:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2c06:	b925      	cbnz	r5, 80a2c12 <_ZN11USARTSerial5writeEh+0x14>
 80a2c08:	7c00      	ldrb	r0, [r0, #16]
 80a2c0a:	f7ff fbb3 	bl	80a2374 <HAL_USART_Available_Data_For_Write>
 80a2c0e:	2800      	cmp	r0, #0
 80a2c10:	dd05      	ble.n	80a2c1e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2c12:	4631      	mov	r1, r6
 80a2c14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2c1a:	f7ff bb7b 	b.w	80a2314 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2c1e:	4628      	mov	r0, r5
 80a2c20:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2c24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2c24:	b510      	push	{r4, lr}
 80a2c26:	4604      	mov	r4, r0
 80a2c28:	4608      	mov	r0, r1
 80a2c2a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2c2c:	2200      	movs	r2, #0
 80a2c2e:	6062      	str	r2, [r4, #4]
 80a2c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2c34:	60a2      	str	r2, [r4, #8]
 80a2c36:	4a05      	ldr	r2, [pc, #20]	; (80a2c4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2c38:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2c3a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2c3c:	2201      	movs	r2, #1
 80a2c3e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2c40:	461a      	mov	r2, r3
 80a2c42:	f7ff fb5f 	bl	80a2304 <HAL_USART_Init>
}
 80a2c46:	4620      	mov	r0, r4
 80a2c48:	bd10      	pop	{r4, pc}
 80a2c4a:	bf00      	nop
 80a2c4c:	080a4740 	.word	0x080a4740

080a2c50 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2c50:	7c00      	ldrb	r0, [r0, #16]
 80a2c52:	f7ff bb87 	b.w	80a2364 <HAL_USART_Is_Enabled>
	...

080a2c58 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2c58:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2c5a:	4d0c      	ldr	r5, [pc, #48]	; (80a2c8c <_Z22__fetch_global_Serial1v+0x34>)
 80a2c5c:	6829      	ldr	r1, [r5, #0]
 80a2c5e:	f011 0401 	ands.w	r4, r1, #1
 80a2c62:	d111      	bne.n	80a2c88 <_Z22__fetch_global_Serial1v+0x30>
 80a2c64:	4628      	mov	r0, r5
 80a2c66:	f7fd fa1c 	bl	80a00a2 <__cxa_guard_acquire>
 80a2c6a:	b168      	cbz	r0, 80a2c88 <_Z22__fetch_global_Serial1v+0x30>
 80a2c6c:	4a08      	ldr	r2, [pc, #32]	; (80a2c90 <_Z22__fetch_global_Serial1v+0x38>)
 80a2c6e:	4621      	mov	r1, r4
 80a2c70:	4b08      	ldr	r3, [pc, #32]	; (80a2c94 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2c72:	4809      	ldr	r0, [pc, #36]	; (80a2c98 <_Z22__fetch_global_Serial1v+0x40>)
 80a2c74:	f7ff ffd6 	bl	80a2c24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2c78:	4628      	mov	r0, r5
 80a2c7a:	f7fd fa17 	bl	80a00ac <__cxa_guard_release>
 80a2c7e:	4a07      	ldr	r2, [pc, #28]	; (80a2c9c <_Z22__fetch_global_Serial1v+0x44>)
 80a2c80:	4907      	ldr	r1, [pc, #28]	; (80a2ca0 <_Z22__fetch_global_Serial1v+0x48>)
 80a2c82:	4805      	ldr	r0, [pc, #20]	; (80a2c98 <_Z22__fetch_global_Serial1v+0x40>)
 80a2c84:	f000 fa84 	bl	80a3190 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2c88:	4803      	ldr	r0, [pc, #12]	; (80a2c98 <_Z22__fetch_global_Serial1v+0x40>)
 80a2c8a:	bd38      	pop	{r3, r4, r5, pc}
 80a2c8c:	2000021c 	.word	0x2000021c
 80a2c90:	20000220 	.word	0x20000220
 80a2c94:	20000198 	.word	0x20000198
 80a2c98:	20000184 	.word	0x20000184
 80a2c9c:	20000078 	.word	0x20000078
 80a2ca0:	080a2ba1 	.word	0x080a2ba1

080a2ca4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2ca4:	7441      	strb	r1, [r0, #17]
 80a2ca6:	4770      	bx	lr

080a2ca8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2ca8:	4770      	bx	lr

080a2caa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2caa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2cac:	2100      	movs	r1, #0
 80a2cae:	7c00      	ldrb	r0, [r0, #16]
 80a2cb0:	f7ff fb88 	bl	80a23c4 <HAL_USB_USART_Receive_Data>
}
 80a2cb4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2cb8:	bf28      	it	cs
 80a2cba:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2cbe:	bd08      	pop	{r3, pc}

080a2cc0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2cc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2cc2:	2101      	movs	r1, #1
 80a2cc4:	7c00      	ldrb	r0, [r0, #16]
 80a2cc6:	f7ff fb7d 	bl	80a23c4 <HAL_USB_USART_Receive_Data>
}
 80a2cca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2cce:	bf28      	it	cs
 80a2cd0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2cd4:	bd08      	pop	{r3, pc}

080a2cd6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2cd6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2cd8:	7c00      	ldrb	r0, [r0, #16]
 80a2cda:	f7ff fb6b 	bl	80a23b4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2cde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ce2:	bd08      	pop	{r3, pc}

080a2ce4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2ce4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2ce6:	7c00      	ldrb	r0, [r0, #16]
 80a2ce8:	f7ff fb5c 	bl	80a23a4 <HAL_USB_USART_Available_Data>
}
 80a2cec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2cf0:	bd08      	pop	{r3, pc}

080a2cf2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2cf2:	7c00      	ldrb	r0, [r0, #16]
 80a2cf4:	f7ff bb76 	b.w	80a23e4 <HAL_USB_USART_Flush_Data>

080a2cf8 <_ZN9USBSerialD0Ev>:
 80a2cf8:	b510      	push	{r4, lr}
 80a2cfa:	4604      	mov	r4, r0
 80a2cfc:	2114      	movs	r1, #20
 80a2cfe:	f000 fa4c 	bl	80a319a <_ZdlPvj>
 80a2d02:	4620      	mov	r0, r4
 80a2d04:	bd10      	pop	{r4, pc}

080a2d06 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2d06:	b538      	push	{r3, r4, r5, lr}
 80a2d08:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2d0a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2d0c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2d0e:	f7ff fb51 	bl	80a23b4 <HAL_USB_USART_Available_Data_For_Write>
 80a2d12:	2800      	cmp	r0, #0
 80a2d14:	dc01      	bgt.n	80a2d1a <_ZN9USBSerial5writeEh+0x14>
 80a2d16:	7c60      	ldrb	r0, [r4, #17]
 80a2d18:	b128      	cbz	r0, 80a2d26 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2d1a:	4629      	mov	r1, r5
 80a2d1c:	7c20      	ldrb	r0, [r4, #16]
 80a2d1e:	f7ff fb59 	bl	80a23d4 <HAL_USB_USART_Send_Data>
 80a2d22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2d26:	bd38      	pop	{r3, r4, r5, pc}

080a2d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2d28:	b510      	push	{r4, lr}
 80a2d2a:	4604      	mov	r4, r0
 80a2d2c:	2300      	movs	r3, #0
 80a2d2e:	6063      	str	r3, [r4, #4]
 80a2d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2d34:	60a3      	str	r3, [r4, #8]
 80a2d36:	4b05      	ldr	r3, [pc, #20]	; (80a2d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2d38:	4608      	mov	r0, r1
 80a2d3a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2d3c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2d3e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2d40:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2d42:	4611      	mov	r1, r2
 80a2d44:	f7ff fb1e 	bl	80a2384 <HAL_USB_USART_Init>
}
 80a2d48:	4620      	mov	r0, r4
 80a2d4a:	bd10      	pop	{r4, pc}
 80a2d4c:	080a4770 	.word	0x080a4770

080a2d50 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2d50:	2200      	movs	r2, #0
 80a2d52:	7c00      	ldrb	r0, [r0, #16]
 80a2d54:	f7ff bb1e 	b.w	80a2394 <HAL_USB_USART_Begin>

080a2d58 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2d58:	b510      	push	{r4, lr}
 80a2d5a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2d5c:	2214      	movs	r2, #20
 80a2d5e:	2100      	movs	r1, #0
 80a2d60:	f001 fb29 	bl	80a43b6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2d64:	4b05      	ldr	r3, [pc, #20]	; (80a2d7c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2d66:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2d68:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2d6a:	4b05      	ldr	r3, [pc, #20]	; (80a2d80 <_Z19acquireSerialBufferv+0x28>)
 80a2d6c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2d6e:	f240 1301 	movw	r3, #257	; 0x101
 80a2d72:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2d74:	2381      	movs	r3, #129	; 0x81
 80a2d76:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2d78:	bd10      	pop	{r4, pc}
 80a2d7a:	bf00      	nop
 80a2d7c:	20000329 	.word	0x20000329
 80a2d80:	200002a8 	.word	0x200002a8

080a2d84 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2d84:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2d86:	4d0e      	ldr	r5, [pc, #56]	; (80a2dc0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2d88:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2d8a:	a801      	add	r0, sp, #4
 80a2d8c:	f7ff ffe4 	bl	80a2d58 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2d90:	6829      	ldr	r1, [r5, #0]
 80a2d92:	f011 0401 	ands.w	r4, r1, #1
 80a2d96:	d110      	bne.n	80a2dba <_Z16_fetch_usbserialv+0x36>
 80a2d98:	4628      	mov	r0, r5
 80a2d9a:	f7fd f982 	bl	80a00a2 <__cxa_guard_acquire>
 80a2d9e:	b160      	cbz	r0, 80a2dba <_Z16_fetch_usbserialv+0x36>
 80a2da0:	aa01      	add	r2, sp, #4
 80a2da2:	4621      	mov	r1, r4
 80a2da4:	4807      	ldr	r0, [pc, #28]	; (80a2dc4 <_Z16_fetch_usbserialv+0x40>)
 80a2da6:	f7ff ffbf 	bl	80a2d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2daa:	4628      	mov	r0, r5
 80a2dac:	f7fd f97e 	bl	80a00ac <__cxa_guard_release>
 80a2db0:	4a05      	ldr	r2, [pc, #20]	; (80a2dc8 <_Z16_fetch_usbserialv+0x44>)
 80a2db2:	4906      	ldr	r1, [pc, #24]	; (80a2dcc <_Z16_fetch_usbserialv+0x48>)
 80a2db4:	4803      	ldr	r0, [pc, #12]	; (80a2dc4 <_Z16_fetch_usbserialv+0x40>)
 80a2db6:	f000 f9eb 	bl	80a3190 <__aeabi_atexit>
	return _usbserial;
}
 80a2dba:	4802      	ldr	r0, [pc, #8]	; (80a2dc4 <_Z16_fetch_usbserialv+0x40>)
 80a2dbc:	b007      	add	sp, #28
 80a2dbe:	bd30      	pop	{r4, r5, pc}
 80a2dc0:	200002a4 	.word	0x200002a4
 80a2dc4:	2000042c 	.word	0x2000042c
 80a2dc8:	20000078 	.word	0x20000078
 80a2dcc:	080a2ca9 	.word	0x080a2ca9

080a2dd0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2dd0:	b510      	push	{r4, lr}
 80a2dd2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2dd4:	2214      	movs	r2, #20
 80a2dd6:	2100      	movs	r1, #0
 80a2dd8:	f001 faed 	bl	80a43b6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2ddc:	4b05      	ldr	r3, [pc, #20]	; (80a2df4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2dde:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2de0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2de2:	4b05      	ldr	r3, [pc, #20]	; (80a2df8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2de4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2de6:	f240 1301 	movw	r3, #257	; 0x101
 80a2dea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2dec:	2381      	movs	r3, #129	; 0x81
 80a2dee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2df0:	bd10      	pop	{r4, pc}
 80a2df2:	bf00      	nop
 80a2df4:	200004dc 	.word	0x200004dc
 80a2df8:	20000444 	.word	0x20000444

080a2dfc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2dfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2dfe:	4c0e      	ldr	r4, [pc, #56]	; (80a2e38 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2e00:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2e02:	a801      	add	r0, sp, #4
 80a2e04:	f7ff ffe4 	bl	80a2dd0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2e08:	6823      	ldr	r3, [r4, #0]
 80a2e0a:	07db      	lsls	r3, r3, #31
 80a2e0c:	d410      	bmi.n	80a2e30 <_Z17_fetch_usbserial1v+0x34>
 80a2e0e:	4620      	mov	r0, r4
 80a2e10:	f7fd f947 	bl	80a00a2 <__cxa_guard_acquire>
 80a2e14:	b160      	cbz	r0, 80a2e30 <_Z17_fetch_usbserial1v+0x34>
 80a2e16:	aa01      	add	r2, sp, #4
 80a2e18:	2101      	movs	r1, #1
 80a2e1a:	4808      	ldr	r0, [pc, #32]	; (80a2e3c <_Z17_fetch_usbserial1v+0x40>)
 80a2e1c:	f7ff ff84 	bl	80a2d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2e20:	4620      	mov	r0, r4
 80a2e22:	f7fd f943 	bl	80a00ac <__cxa_guard_release>
 80a2e26:	4a06      	ldr	r2, [pc, #24]	; (80a2e40 <_Z17_fetch_usbserial1v+0x44>)
 80a2e28:	4906      	ldr	r1, [pc, #24]	; (80a2e44 <_Z17_fetch_usbserial1v+0x48>)
 80a2e2a:	4804      	ldr	r0, [pc, #16]	; (80a2e3c <_Z17_fetch_usbserial1v+0x40>)
 80a2e2c:	f000 f9b0 	bl	80a3190 <__aeabi_atexit>
  return _usbserial1;
}
 80a2e30:	4802      	ldr	r0, [pc, #8]	; (80a2e3c <_Z17_fetch_usbserial1v+0x40>)
 80a2e32:	b006      	add	sp, #24
 80a2e34:	bd10      	pop	{r4, pc}
 80a2e36:	bf00      	nop
 80a2e38:	20000440 	.word	0x20000440
 80a2e3c:	200004c8 	.word	0x200004c8
 80a2e40:	20000078 	.word	0x20000078
 80a2e44:	080a2ca9 	.word	0x080a2ca9

080a2e48 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2e48:	2200      	movs	r2, #0
 80a2e4a:	4611      	mov	r1, r2
 80a2e4c:	6840      	ldr	r0, [r0, #4]
 80a2e4e:	f7ff bb1d 	b.w	80a248c <network_ready>

080a2e52 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2e54:	4616      	mov	r6, r2
 80a2e56:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2e58:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2e5a:	460f      	mov	r7, r1
 80a2e5c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2e5e:	2100      	movs	r1, #0
 80a2e60:	a803      	add	r0, sp, #12
 80a2e62:	f001 faa8 	bl	80a43b6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2e66:	4630      	mov	r0, r6
 80a2e68:	f001 fad6 	bl	80a4418 <strlen>
 80a2e6c:	2500      	movs	r5, #0
 80a2e6e:	9500      	str	r5, [sp, #0]
 80a2e70:	b281      	uxth	r1, r0
 80a2e72:	687b      	ldr	r3, [r7, #4]
 80a2e74:	aa03      	add	r2, sp, #12
 80a2e76:	4630      	mov	r0, r6
 80a2e78:	f7ff fabc 	bl	80a23f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e7c:	b120      	cbz	r0, 80a2e88 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2e7e:	4629      	mov	r1, r5
 80a2e80:	4620      	mov	r0, r4
 80a2e82:	f7ff fbf7 	bl	80a2674 <_ZN9IPAddressC1Em>
 80a2e86:	e003      	b.n	80a2e90 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2e88:	a903      	add	r1, sp, #12
 80a2e8a:	4620      	mov	r0, r4
 80a2e8c:	f7ff fbe0 	bl	80a2650 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2e90:	4620      	mov	r0, r4
 80a2e92:	b009      	add	sp, #36	; 0x24
 80a2e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2e96 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2e96:	2200      	movs	r2, #0
 80a2e98:	4611      	mov	r1, r2
 80a2e9a:	6840      	ldr	r0, [r0, #4]
 80a2e9c:	f7ff bb16 	b.w	80a24cc <network_listening>

080a2ea0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2ea0:	2200      	movs	r2, #0
 80a2ea2:	4611      	mov	r1, r2
 80a2ea4:	6840      	ldr	r0, [r0, #4]
 80a2ea6:	f7ff bb21 	b.w	80a24ec <network_get_listen_timeout>

080a2eaa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2eaa:	2200      	movs	r2, #0
 80a2eac:	6840      	ldr	r0, [r0, #4]
 80a2eae:	f7ff bb15 	b.w	80a24dc <network_set_listen_timeout>

080a2eb2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2eb2:	2200      	movs	r2, #0
 80a2eb4:	f081 0101 	eor.w	r1, r1, #1
 80a2eb8:	6840      	ldr	r0, [r0, #4]
 80a2eba:	f7ff baff 	b.w	80a24bc <network_listen>

080a2ebe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2ebe:	2300      	movs	r3, #0
 80a2ec0:	461a      	mov	r2, r3
 80a2ec2:	4619      	mov	r1, r3
 80a2ec4:	6840      	ldr	r0, [r0, #4]
 80a2ec6:	f7ff baf1 	b.w	80a24ac <network_off>

080a2eca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2eca:	2300      	movs	r3, #0
 80a2ecc:	461a      	mov	r2, r3
 80a2ece:	4619      	mov	r1, r3
 80a2ed0:	6840      	ldr	r0, [r0, #4]
 80a2ed2:	f7ff bae3 	b.w	80a249c <network_on>

080a2ed6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2ed6:	2200      	movs	r2, #0
 80a2ed8:	4611      	mov	r1, r2
 80a2eda:	6840      	ldr	r0, [r0, #4]
 80a2edc:	f7ff bac6 	b.w	80a246c <network_connecting>

080a2ee0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2ee0:	2200      	movs	r2, #0
 80a2ee2:	2102      	movs	r1, #2
 80a2ee4:	6840      	ldr	r0, [r0, #4]
 80a2ee6:	f7ff bac9 	b.w	80a247c <network_disconnect>

080a2eea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2eea:	2300      	movs	r3, #0
 80a2eec:	461a      	mov	r2, r3
 80a2eee:	6840      	ldr	r0, [r0, #4]
 80a2ef0:	f7ff bab4 	b.w	80a245c <network_connect>

080a2ef4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2ef4:	4b02      	ldr	r3, [pc, #8]	; (80a2f00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2ef6:	2204      	movs	r2, #4
 80a2ef8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2efa:	4a02      	ldr	r2, [pc, #8]	; (80a2f04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2efc:	601a      	str	r2, [r3, #0]
 80a2efe:	4770      	bx	lr
 80a2f00:	200005e0 	.word	0x200005e0
 80a2f04:	080a47a0 	.word	0x080a47a0

080a2f08 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2f08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2f0a:	4b14      	ldr	r3, [pc, #80]	; (80a2f5c <serialEventRun+0x54>)
 80a2f0c:	b133      	cbz	r3, 80a2f1c <serialEventRun+0x14>
 80a2f0e:	f7ff ff39 	bl	80a2d84 <_Z16_fetch_usbserialv>
 80a2f12:	6803      	ldr	r3, [r0, #0]
 80a2f14:	691b      	ldr	r3, [r3, #16]
 80a2f16:	4798      	blx	r3
 80a2f18:	2800      	cmp	r0, #0
 80a2f1a:	dc16      	bgt.n	80a2f4a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2f1c:	4b10      	ldr	r3, [pc, #64]	; (80a2f60 <serialEventRun+0x58>)
 80a2f1e:	b133      	cbz	r3, 80a2f2e <serialEventRun+0x26>
 80a2f20:	f7ff fe9a 	bl	80a2c58 <_Z22__fetch_global_Serial1v>
 80a2f24:	6803      	ldr	r3, [r0, #0]
 80a2f26:	691b      	ldr	r3, [r3, #16]
 80a2f28:	4798      	blx	r3
 80a2f2a:	2800      	cmp	r0, #0
 80a2f2c:	dc10      	bgt.n	80a2f50 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2f2e:	4b0d      	ldr	r3, [pc, #52]	; (80a2f64 <serialEventRun+0x5c>)
 80a2f30:	b10b      	cbz	r3, 80a2f36 <serialEventRun+0x2e>
 80a2f32:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2f36:	4b0c      	ldr	r3, [pc, #48]	; (80a2f68 <serialEventRun+0x60>)
 80a2f38:	b17b      	cbz	r3, 80a2f5a <serialEventRun+0x52>
 80a2f3a:	f7ff ff5f 	bl	80a2dfc <_Z17_fetch_usbserial1v>
 80a2f3e:	6803      	ldr	r3, [r0, #0]
 80a2f40:	691b      	ldr	r3, [r3, #16]
 80a2f42:	4798      	blx	r3
 80a2f44:	2800      	cmp	r0, #0
 80a2f46:	dc06      	bgt.n	80a2f56 <serialEventRun+0x4e>
 80a2f48:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2f4a:	f3af 8000 	nop.w
 80a2f4e:	e7e5      	b.n	80a2f1c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2f50:	f3af 8000 	nop.w
 80a2f54:	e7eb      	b.n	80a2f2e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2f56:	f3af 8000 	nop.w
 80a2f5a:	bd08      	pop	{r3, pc}
	...

080a2f6c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2f6c:	b508      	push	{r3, lr}
	serialEventRun();
 80a2f6e:	f7ff ffcb 	bl	80a2f08 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2f72:	f7ff f905 	bl	80a2180 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2f76:	4b01      	ldr	r3, [pc, #4]	; (80a2f7c <_post_loop+0x10>)
 80a2f78:	6018      	str	r0, [r3, #0]
 80a2f7a:	bd08      	pop	{r3, pc}
 80a2f7c:	200005f0 	.word	0x200005f0

080a2f80 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2f80:	4802      	ldr	r0, [pc, #8]	; (80a2f8c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2f82:	4a03      	ldr	r2, [pc, #12]	; (80a2f90 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2f84:	4903      	ldr	r1, [pc, #12]	; (80a2f94 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2f86:	1a12      	subs	r2, r2, r0
 80a2f88:	f001 ba0a 	b.w	80a43a0 <memcpy>
 80a2f8c:	40024000 	.word	0x40024000
 80a2f90:	40024004 	.word	0x40024004
 80a2f94:	080a4870 	.word	0x080a4870

080a2f98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2f98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2f9a:	2300      	movs	r3, #0
 80a2f9c:	9300      	str	r3, [sp, #0]
 80a2f9e:	461a      	mov	r2, r3
 80a2fa0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fa4:	f7ff fa48 	bl	80a2438 <system_ctrl_set_result>
}
 80a2fa8:	b003      	add	sp, #12
 80a2faa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2fb0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2fb0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2fb2:	8843      	ldrh	r3, [r0, #2]
 80a2fb4:	2b0a      	cmp	r3, #10
 80a2fb6:	d008      	beq.n	80a2fca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2fb8:	2b50      	cmp	r3, #80	; 0x50
 80a2fba:	d109      	bne.n	80a2fd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2fbc:	4b09      	ldr	r3, [pc, #36]	; (80a2fe4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2fbe:	681b      	ldr	r3, [r3, #0]
 80a2fc0:	b13b      	cbz	r3, 80a2fd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2fc2:	b003      	add	sp, #12
 80a2fc4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2fc8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2fca:	f7ff ffe5 	bl	80a2f98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2fce:	e006      	b.n	80a2fde <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fd0:	2300      	movs	r3, #0
 80a2fd2:	9300      	str	r3, [sp, #0]
 80a2fd4:	461a      	mov	r2, r3
 80a2fd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fda:	f7ff fa2d 	bl	80a2438 <system_ctrl_set_result>
        break;
    }
}
 80a2fde:	b003      	add	sp, #12
 80a2fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2fe4:	200005e8 	.word	0x200005e8

080a2fe8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2fe8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2fea:	4c10      	ldr	r4, [pc, #64]	; (80a302c <module_user_init_hook+0x44>)
 80a2fec:	4d10      	ldr	r5, [pc, #64]	; (80a3030 <module_user_init_hook+0x48>)
 80a2fee:	6823      	ldr	r3, [r4, #0]
 80a2ff0:	42ab      	cmp	r3, r5
 80a2ff2:	4b10      	ldr	r3, [pc, #64]	; (80a3034 <module_user_init_hook+0x4c>)
 80a2ff4:	bf0c      	ite	eq
 80a2ff6:	2201      	moveq	r2, #1
 80a2ff8:	2200      	movne	r2, #0
 80a2ffa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2ffc:	d002      	beq.n	80a3004 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2ffe:	f7ff ffbf 	bl	80a2f80 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3002:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3004:	f7ff f8a4 	bl	80a2150 <HAL_RNG_GetRandomNumber>
 80a3008:	4604      	mov	r4, r0
    srand(seed);
 80a300a:	f001 f9dd 	bl	80a43c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a300e:	4b0a      	ldr	r3, [pc, #40]	; (80a3038 <module_user_init_hook+0x50>)
 80a3010:	b113      	cbz	r3, 80a3018 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3012:	4620      	mov	r0, r4
 80a3014:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3018:	2100      	movs	r1, #0
 80a301a:	4807      	ldr	r0, [pc, #28]	; (80a3038 <module_user_init_hook+0x50>)
 80a301c:	f7ff fa16 	bl	80a244c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3024:	2100      	movs	r1, #0
 80a3026:	4805      	ldr	r0, [pc, #20]	; (80a303c <module_user_init_hook+0x54>)
 80a3028:	f7ff b9fc 	b.w	80a2424 <system_ctrl_set_app_request_handler>
 80a302c:	40024000 	.word	0x40024000
 80a3030:	9a271c1e 	.word	0x9a271c1e
 80a3034:	200005ec 	.word	0x200005ec
 80a3038:	00000000 	.word	0x00000000
 80a303c:	080a2fb1 	.word	0x080a2fb1

080a3040 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3040:	b510      	push	{r4, lr}
 80a3042:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3044:	480f      	ldr	r0, [pc, #60]	; (80a3084 <pinAvailable+0x44>)
 80a3046:	f7ff fd91 	bl	80a2b6c <_ZN8SPIClass9isEnabledEv>
 80a304a:	b128      	cbz	r0, 80a3058 <pinAvailable+0x18>
 80a304c:	f1a4 030d 	sub.w	r3, r4, #13
 80a3050:	2b02      	cmp	r3, #2
 80a3052:	d801      	bhi.n	80a3058 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3054:	2000      	movs	r0, #0
 80a3056:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3058:	f000 f840 	bl	80a30dc <_Z19__fetch_global_Wirev>
 80a305c:	f7ff fac5 	bl	80a25ea <_ZN7TwoWire9isEnabledEv>
 80a3060:	b108      	cbz	r0, 80a3066 <pinAvailable+0x26>
 80a3062:	2c01      	cmp	r4, #1
 80a3064:	d9f6      	bls.n	80a3054 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3066:	f7ff fdf7 	bl	80a2c58 <_Z22__fetch_global_Serial1v>
 80a306a:	f7ff fdf1 	bl	80a2c50 <_ZN11USARTSerial9isEnabledEv>
 80a306e:	b118      	cbz	r0, 80a3078 <pinAvailable+0x38>
 80a3070:	f1a4 0312 	sub.w	r3, r4, #18
 80a3074:	2b01      	cmp	r3, #1
 80a3076:	d9ed      	bls.n	80a3054 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3078:	2c17      	cmp	r4, #23
 80a307a:	bf8c      	ite	hi
 80a307c:	2000      	movhi	r0, #0
 80a307e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3080:	bd10      	pop	{r4, pc}
 80a3082:	bf00      	nop
 80a3084:	20000624 	.word	0x20000624

080a3088 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3088:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a308a:	b538      	push	{r3, r4, r5, lr}
 80a308c:	4604      	mov	r4, r0
 80a308e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3090:	d80a      	bhi.n	80a30a8 <pinMode+0x20>
 80a3092:	29ff      	cmp	r1, #255	; 0xff
 80a3094:	d008      	beq.n	80a30a8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3096:	f7ff ffd3 	bl	80a3040 <pinAvailable>
 80a309a:	b128      	cbz	r0, 80a30a8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a309c:	4629      	mov	r1, r5
 80a309e:	4620      	mov	r0, r4
}
 80a30a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a30a4:	f7ff b87c 	b.w	80a21a0 <HAL_Pin_Mode>
 80a30a8:	bd38      	pop	{r3, r4, r5, pc}

080a30aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a30aa:	b538      	push	{r3, r4, r5, lr}
 80a30ac:	4604      	mov	r4, r0
 80a30ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a30b0:	f7ff f87e 	bl	80a21b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a30b4:	28ff      	cmp	r0, #255	; 0xff
 80a30b6:	d010      	beq.n	80a30da <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a30b8:	2806      	cmp	r0, #6
 80a30ba:	d804      	bhi.n	80a30c6 <digitalWrite+0x1c>
 80a30bc:	234d      	movs	r3, #77	; 0x4d
 80a30be:	fa23 f000 	lsr.w	r0, r3, r0
 80a30c2:	07c3      	lsls	r3, r0, #31
 80a30c4:	d409      	bmi.n	80a30da <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a30c6:	4620      	mov	r0, r4
 80a30c8:	f7ff ffba 	bl	80a3040 <pinAvailable>
 80a30cc:	b128      	cbz	r0, 80a30da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a30ce:	4629      	mov	r1, r5
 80a30d0:	4620      	mov	r0, r4
}
 80a30d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a30d6:	f7ff b873 	b.w	80a21c0 <HAL_GPIO_Write>
 80a30da:	bd38      	pop	{r3, r4, r5, pc}

080a30dc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a30dc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a30de:	4d0b      	ldr	r5, [pc, #44]	; (80a310c <_Z19__fetch_global_Wirev+0x30>)
 80a30e0:	6829      	ldr	r1, [r5, #0]
 80a30e2:	f011 0401 	ands.w	r4, r1, #1
 80a30e6:	d10f      	bne.n	80a3108 <_Z19__fetch_global_Wirev+0x2c>
 80a30e8:	4628      	mov	r0, r5
 80a30ea:	f7fc ffda 	bl	80a00a2 <__cxa_guard_acquire>
 80a30ee:	b158      	cbz	r0, 80a3108 <_Z19__fetch_global_Wirev+0x2c>
 80a30f0:	4621      	mov	r1, r4
 80a30f2:	4807      	ldr	r0, [pc, #28]	; (80a3110 <_Z19__fetch_global_Wirev+0x34>)
 80a30f4:	f7ff fa4a 	bl	80a258c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a30f8:	4628      	mov	r0, r5
 80a30fa:	f7fc ffd7 	bl	80a00ac <__cxa_guard_release>
 80a30fe:	4a05      	ldr	r2, [pc, #20]	; (80a3114 <_Z19__fetch_global_Wirev+0x38>)
 80a3100:	4905      	ldr	r1, [pc, #20]	; (80a3118 <_Z19__fetch_global_Wirev+0x3c>)
 80a3102:	4803      	ldr	r0, [pc, #12]	; (80a3110 <_Z19__fetch_global_Wirev+0x34>)
 80a3104:	f000 f844 	bl	80a3190 <__aeabi_atexit>
	return wire;
}
 80a3108:	4801      	ldr	r0, [pc, #4]	; (80a3110 <_Z19__fetch_global_Wirev+0x34>)
 80a310a:	bd38      	pop	{r3, r4, r5, pc}
 80a310c:	200005f4 	.word	0x200005f4
 80a3110:	200005f8 	.word	0x200005f8
 80a3114:	20000078 	.word	0x20000078
 80a3118:	080a2535 	.word	0x080a2535

080a311c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a311c:	b513      	push	{r0, r1, r4, lr}
 80a311e:	4c08      	ldr	r4, [pc, #32]	; (80a3140 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3120:	2300      	movs	r3, #0
 80a3122:	461a      	mov	r2, r3
 80a3124:	4619      	mov	r1, r3
 80a3126:	9300      	str	r3, [sp, #0]
 80a3128:	4620      	mov	r0, r4
 80a312a:	f7ff fab9 	bl	80a26a0 <_ZN9IPAddressC1Ehhhh>
 80a312e:	4620      	mov	r0, r4
 80a3130:	4a04      	ldr	r2, [pc, #16]	; (80a3144 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3132:	4905      	ldr	r1, [pc, #20]	; (80a3148 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3134:	b002      	add	sp, #8
 80a3136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a313a:	f000 b829 	b.w	80a3190 <__aeabi_atexit>
 80a313e:	bf00      	nop
 80a3140:	2000060c 	.word	0x2000060c
 80a3144:	20000078 	.word	0x20000078
 80a3148:	080a25f3 	.word	0x080a25f3

080a314c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a314c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a314e:	4c0c      	ldr	r4, [pc, #48]	; (80a3180 <_GLOBAL__sub_I_SPI+0x34>)
 80a3150:	4e0c      	ldr	r6, [pc, #48]	; (80a3184 <_GLOBAL__sub_I_SPI+0x38>)
 80a3152:	4d0d      	ldr	r5, [pc, #52]	; (80a3188 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3154:	2100      	movs	r1, #0
 80a3156:	4620      	mov	r0, r4
 80a3158:	f7ff fc88 	bl	80a2a6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a315c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a315e:	4c0b      	ldr	r4, [pc, #44]	; (80a318c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3160:	4632      	mov	r2, r6
 80a3162:	4629      	mov	r1, r5
 80a3164:	f000 f814 	bl	80a3190 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3168:	2101      	movs	r1, #1
 80a316a:	4620      	mov	r0, r4
 80a316c:	f7ff fc7e 	bl	80a2a6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3170:	4632      	mov	r2, r6
 80a3172:	4629      	mov	r1, r5
 80a3174:	4620      	mov	r0, r4
 80a3176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a317a:	f000 b809 	b.w	80a3190 <__aeabi_atexit>
 80a317e:	bf00      	nop
 80a3180:	20000624 	.word	0x20000624
 80a3184:	20000078 	.word	0x20000078
 80a3188:	080a2a5d 	.word	0x080a2a5d
 80a318c:	20000634 	.word	0x20000634

080a3190 <__aeabi_atexit>:
 80a3190:	460b      	mov	r3, r1
 80a3192:	4601      	mov	r1, r0
 80a3194:	4618      	mov	r0, r3
 80a3196:	f001 b8f5 	b.w	80a4384 <__cxa_atexit>

080a319a <_ZdlPvj>:
 80a319a:	f7fc bf80 	b.w	80a009e <_ZdlPv>
	...

080a31a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a31a0:	4b24      	ldr	r3, [pc, #144]	; (80a3234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a31a2:	681a      	ldr	r2, [r3, #0]
 80a31a4:	07d0      	lsls	r0, r2, #31
 80a31a6:	bf5c      	itt	pl
 80a31a8:	2201      	movpl	r2, #1
 80a31aa:	601a      	strpl	r2, [r3, #0]
 80a31ac:	4b22      	ldr	r3, [pc, #136]	; (80a3238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a31ae:	681a      	ldr	r2, [r3, #0]
 80a31b0:	07d1      	lsls	r1, r2, #31
 80a31b2:	bf5c      	itt	pl
 80a31b4:	2201      	movpl	r2, #1
 80a31b6:	601a      	strpl	r2, [r3, #0]
 80a31b8:	4b20      	ldr	r3, [pc, #128]	; (80a323c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a31ba:	681a      	ldr	r2, [r3, #0]
 80a31bc:	07d2      	lsls	r2, r2, #31
 80a31be:	bf5c      	itt	pl
 80a31c0:	2201      	movpl	r2, #1
 80a31c2:	601a      	strpl	r2, [r3, #0]
 80a31c4:	4b1e      	ldr	r3, [pc, #120]	; (80a3240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a31c6:	681a      	ldr	r2, [r3, #0]
 80a31c8:	07d0      	lsls	r0, r2, #31
 80a31ca:	bf5c      	itt	pl
 80a31cc:	2201      	movpl	r2, #1
 80a31ce:	601a      	strpl	r2, [r3, #0]
 80a31d0:	4b1c      	ldr	r3, [pc, #112]	; (80a3244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a31d2:	681a      	ldr	r2, [r3, #0]
 80a31d4:	07d1      	lsls	r1, r2, #31
 80a31d6:	bf5c      	itt	pl
 80a31d8:	2201      	movpl	r2, #1
 80a31da:	601a      	strpl	r2, [r3, #0]
 80a31dc:	4b1a      	ldr	r3, [pc, #104]	; (80a3248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a31de:	681a      	ldr	r2, [r3, #0]
 80a31e0:	07d2      	lsls	r2, r2, #31
 80a31e2:	bf5c      	itt	pl
 80a31e4:	2201      	movpl	r2, #1
 80a31e6:	601a      	strpl	r2, [r3, #0]
 80a31e8:	4b18      	ldr	r3, [pc, #96]	; (80a324c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a31ea:	681a      	ldr	r2, [r3, #0]
 80a31ec:	07d0      	lsls	r0, r2, #31
 80a31ee:	bf5c      	itt	pl
 80a31f0:	2201      	movpl	r2, #1
 80a31f2:	601a      	strpl	r2, [r3, #0]
 80a31f4:	4b16      	ldr	r3, [pc, #88]	; (80a3250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a31f6:	681a      	ldr	r2, [r3, #0]
 80a31f8:	07d1      	lsls	r1, r2, #31
 80a31fa:	bf5c      	itt	pl
 80a31fc:	2201      	movpl	r2, #1
 80a31fe:	601a      	strpl	r2, [r3, #0]
 80a3200:	4b14      	ldr	r3, [pc, #80]	; (80a3254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3202:	681a      	ldr	r2, [r3, #0]
 80a3204:	07d2      	lsls	r2, r2, #31
 80a3206:	bf5c      	itt	pl
 80a3208:	2201      	movpl	r2, #1
 80a320a:	601a      	strpl	r2, [r3, #0]
 80a320c:	4b12      	ldr	r3, [pc, #72]	; (80a3258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a320e:	681a      	ldr	r2, [r3, #0]
 80a3210:	07d0      	lsls	r0, r2, #31
 80a3212:	bf5c      	itt	pl
 80a3214:	2201      	movpl	r2, #1
 80a3216:	601a      	strpl	r2, [r3, #0]
 80a3218:	4b10      	ldr	r3, [pc, #64]	; (80a325c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a321a:	681a      	ldr	r2, [r3, #0]
 80a321c:	07d1      	lsls	r1, r2, #31
 80a321e:	bf5c      	itt	pl
 80a3220:	2201      	movpl	r2, #1
 80a3222:	601a      	strpl	r2, [r3, #0]
 80a3224:	4b0e      	ldr	r3, [pc, #56]	; (80a3260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3226:	681a      	ldr	r2, [r3, #0]
 80a3228:	07d2      	lsls	r2, r2, #31
 80a322a:	bf5c      	itt	pl
 80a322c:	2201      	movpl	r2, #1
 80a322e:	601a      	strpl	r2, [r3, #0]
 80a3230:	4770      	bx	lr
 80a3232:	bf00      	nop
 80a3234:	20000670 	.word	0x20000670
 80a3238:	2000066c 	.word	0x2000066c
 80a323c:	20000668 	.word	0x20000668
 80a3240:	20000664 	.word	0x20000664
 80a3244:	20000660 	.word	0x20000660
 80a3248:	2000065c 	.word	0x2000065c
 80a324c:	20000658 	.word	0x20000658
 80a3250:	20000654 	.word	0x20000654
 80a3254:	20000650 	.word	0x20000650
 80a3258:	2000064c 	.word	0x2000064c
 80a325c:	20000648 	.word	0x20000648
 80a3260:	20000644 	.word	0x20000644

080a3264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3264:	4b18      	ldr	r3, [pc, #96]	; (80a32c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3266:	681a      	ldr	r2, [r3, #0]
 80a3268:	07d1      	lsls	r1, r2, #31
 80a326a:	bf5c      	itt	pl
 80a326c:	2201      	movpl	r2, #1
 80a326e:	601a      	strpl	r2, [r3, #0]
 80a3270:	4b16      	ldr	r3, [pc, #88]	; (80a32cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3272:	681a      	ldr	r2, [r3, #0]
 80a3274:	07d2      	lsls	r2, r2, #31
 80a3276:	bf5c      	itt	pl
 80a3278:	2201      	movpl	r2, #1
 80a327a:	601a      	strpl	r2, [r3, #0]
 80a327c:	4b14      	ldr	r3, [pc, #80]	; (80a32d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a327e:	681a      	ldr	r2, [r3, #0]
 80a3280:	07d0      	lsls	r0, r2, #31
 80a3282:	bf5c      	itt	pl
 80a3284:	2201      	movpl	r2, #1
 80a3286:	601a      	strpl	r2, [r3, #0]
 80a3288:	4b12      	ldr	r3, [pc, #72]	; (80a32d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a328a:	681a      	ldr	r2, [r3, #0]
 80a328c:	07d1      	lsls	r1, r2, #31
 80a328e:	bf5c      	itt	pl
 80a3290:	2201      	movpl	r2, #1
 80a3292:	601a      	strpl	r2, [r3, #0]
 80a3294:	4b10      	ldr	r3, [pc, #64]	; (80a32d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3296:	681a      	ldr	r2, [r3, #0]
 80a3298:	07d2      	lsls	r2, r2, #31
 80a329a:	bf5c      	itt	pl
 80a329c:	2201      	movpl	r2, #1
 80a329e:	601a      	strpl	r2, [r3, #0]
 80a32a0:	4b0e      	ldr	r3, [pc, #56]	; (80a32dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a32a2:	681a      	ldr	r2, [r3, #0]
 80a32a4:	07d0      	lsls	r0, r2, #31
 80a32a6:	bf5c      	itt	pl
 80a32a8:	2201      	movpl	r2, #1
 80a32aa:	601a      	strpl	r2, [r3, #0]
 80a32ac:	4b0c      	ldr	r3, [pc, #48]	; (80a32e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a32ae:	681a      	ldr	r2, [r3, #0]
 80a32b0:	07d1      	lsls	r1, r2, #31
 80a32b2:	bf5c      	itt	pl
 80a32b4:	2201      	movpl	r2, #1
 80a32b6:	601a      	strpl	r2, [r3, #0]
 80a32b8:	4b0a      	ldr	r3, [pc, #40]	; (80a32e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a32ba:	681a      	ldr	r2, [r3, #0]
 80a32bc:	07d2      	lsls	r2, r2, #31
 80a32be:	bf5c      	itt	pl
 80a32c0:	2201      	movpl	r2, #1
 80a32c2:	601a      	strpl	r2, [r3, #0]
 80a32c4:	4770      	bx	lr
 80a32c6:	bf00      	nop
 80a32c8:	20000690 	.word	0x20000690
 80a32cc:	2000068c 	.word	0x2000068c
 80a32d0:	20000688 	.word	0x20000688
 80a32d4:	20000684 	.word	0x20000684
 80a32d8:	20000680 	.word	0x20000680
 80a32dc:	2000067c 	.word	0x2000067c
 80a32e0:	20000678 	.word	0x20000678
 80a32e4:	20000674 	.word	0x20000674

080a32e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a32e8:	4b18      	ldr	r3, [pc, #96]	; (80a334c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a32ea:	681a      	ldr	r2, [r3, #0]
 80a32ec:	07d1      	lsls	r1, r2, #31
 80a32ee:	bf5c      	itt	pl
 80a32f0:	2201      	movpl	r2, #1
 80a32f2:	601a      	strpl	r2, [r3, #0]
 80a32f4:	4b16      	ldr	r3, [pc, #88]	; (80a3350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a32f6:	681a      	ldr	r2, [r3, #0]
 80a32f8:	07d2      	lsls	r2, r2, #31
 80a32fa:	bf5c      	itt	pl
 80a32fc:	2201      	movpl	r2, #1
 80a32fe:	601a      	strpl	r2, [r3, #0]
 80a3300:	4b14      	ldr	r3, [pc, #80]	; (80a3354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3302:	681a      	ldr	r2, [r3, #0]
 80a3304:	07d0      	lsls	r0, r2, #31
 80a3306:	bf5c      	itt	pl
 80a3308:	2201      	movpl	r2, #1
 80a330a:	601a      	strpl	r2, [r3, #0]
 80a330c:	4b12      	ldr	r3, [pc, #72]	; (80a3358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a330e:	681a      	ldr	r2, [r3, #0]
 80a3310:	07d1      	lsls	r1, r2, #31
 80a3312:	bf5c      	itt	pl
 80a3314:	2201      	movpl	r2, #1
 80a3316:	601a      	strpl	r2, [r3, #0]
 80a3318:	4b10      	ldr	r3, [pc, #64]	; (80a335c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a331a:	681a      	ldr	r2, [r3, #0]
 80a331c:	07d2      	lsls	r2, r2, #31
 80a331e:	bf5c      	itt	pl
 80a3320:	2201      	movpl	r2, #1
 80a3322:	601a      	strpl	r2, [r3, #0]
 80a3324:	4b0e      	ldr	r3, [pc, #56]	; (80a3360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3326:	681a      	ldr	r2, [r3, #0]
 80a3328:	07d0      	lsls	r0, r2, #31
 80a332a:	bf5c      	itt	pl
 80a332c:	2201      	movpl	r2, #1
 80a332e:	601a      	strpl	r2, [r3, #0]
 80a3330:	4b0c      	ldr	r3, [pc, #48]	; (80a3364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3332:	681a      	ldr	r2, [r3, #0]
 80a3334:	07d1      	lsls	r1, r2, #31
 80a3336:	bf5c      	itt	pl
 80a3338:	2201      	movpl	r2, #1
 80a333a:	601a      	strpl	r2, [r3, #0]
 80a333c:	4b0a      	ldr	r3, [pc, #40]	; (80a3368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a333e:	681a      	ldr	r2, [r3, #0]
 80a3340:	07d2      	lsls	r2, r2, #31
 80a3342:	bf5c      	itt	pl
 80a3344:	2201      	movpl	r2, #1
 80a3346:	601a      	strpl	r2, [r3, #0]
 80a3348:	4770      	bx	lr
 80a334a:	bf00      	nop
 80a334c:	200006b0 	.word	0x200006b0
 80a3350:	200006ac 	.word	0x200006ac
 80a3354:	200006a8 	.word	0x200006a8
 80a3358:	200006a4 	.word	0x200006a4
 80a335c:	200006a0 	.word	0x200006a0
 80a3360:	2000069c 	.word	0x2000069c
 80a3364:	20000698 	.word	0x20000698
 80a3368:	20000694 	.word	0x20000694

080a336c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a336c:	4b24      	ldr	r3, [pc, #144]	; (80a3400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a336e:	681a      	ldr	r2, [r3, #0]
 80a3370:	07d0      	lsls	r0, r2, #31
 80a3372:	bf5c      	itt	pl
 80a3374:	2201      	movpl	r2, #1
 80a3376:	601a      	strpl	r2, [r3, #0]
 80a3378:	4b22      	ldr	r3, [pc, #136]	; (80a3404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a337a:	681a      	ldr	r2, [r3, #0]
 80a337c:	07d1      	lsls	r1, r2, #31
 80a337e:	bf5c      	itt	pl
 80a3380:	2201      	movpl	r2, #1
 80a3382:	601a      	strpl	r2, [r3, #0]
 80a3384:	4b20      	ldr	r3, [pc, #128]	; (80a3408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3386:	681a      	ldr	r2, [r3, #0]
 80a3388:	07d2      	lsls	r2, r2, #31
 80a338a:	bf5c      	itt	pl
 80a338c:	2201      	movpl	r2, #1
 80a338e:	601a      	strpl	r2, [r3, #0]
 80a3390:	4b1e      	ldr	r3, [pc, #120]	; (80a340c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3392:	681a      	ldr	r2, [r3, #0]
 80a3394:	07d0      	lsls	r0, r2, #31
 80a3396:	bf5c      	itt	pl
 80a3398:	2201      	movpl	r2, #1
 80a339a:	601a      	strpl	r2, [r3, #0]
 80a339c:	4b1c      	ldr	r3, [pc, #112]	; (80a3410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a339e:	681a      	ldr	r2, [r3, #0]
 80a33a0:	07d1      	lsls	r1, r2, #31
 80a33a2:	bf5c      	itt	pl
 80a33a4:	2201      	movpl	r2, #1
 80a33a6:	601a      	strpl	r2, [r3, #0]
 80a33a8:	4b1a      	ldr	r3, [pc, #104]	; (80a3414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a33aa:	681a      	ldr	r2, [r3, #0]
 80a33ac:	07d2      	lsls	r2, r2, #31
 80a33ae:	bf5c      	itt	pl
 80a33b0:	2201      	movpl	r2, #1
 80a33b2:	601a      	strpl	r2, [r3, #0]
 80a33b4:	4b18      	ldr	r3, [pc, #96]	; (80a3418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a33b6:	681a      	ldr	r2, [r3, #0]
 80a33b8:	07d0      	lsls	r0, r2, #31
 80a33ba:	bf5c      	itt	pl
 80a33bc:	2201      	movpl	r2, #1
 80a33be:	601a      	strpl	r2, [r3, #0]
 80a33c0:	4b16      	ldr	r3, [pc, #88]	; (80a341c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a33c2:	681a      	ldr	r2, [r3, #0]
 80a33c4:	07d1      	lsls	r1, r2, #31
 80a33c6:	bf5c      	itt	pl
 80a33c8:	2201      	movpl	r2, #1
 80a33ca:	601a      	strpl	r2, [r3, #0]
 80a33cc:	4b14      	ldr	r3, [pc, #80]	; (80a3420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a33ce:	681a      	ldr	r2, [r3, #0]
 80a33d0:	07d2      	lsls	r2, r2, #31
 80a33d2:	bf5c      	itt	pl
 80a33d4:	2201      	movpl	r2, #1
 80a33d6:	601a      	strpl	r2, [r3, #0]
 80a33d8:	4b12      	ldr	r3, [pc, #72]	; (80a3424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a33da:	681a      	ldr	r2, [r3, #0]
 80a33dc:	07d0      	lsls	r0, r2, #31
 80a33de:	bf5c      	itt	pl
 80a33e0:	2201      	movpl	r2, #1
 80a33e2:	601a      	strpl	r2, [r3, #0]
 80a33e4:	4b10      	ldr	r3, [pc, #64]	; (80a3428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a33e6:	681a      	ldr	r2, [r3, #0]
 80a33e8:	07d1      	lsls	r1, r2, #31
 80a33ea:	bf5c      	itt	pl
 80a33ec:	2201      	movpl	r2, #1
 80a33ee:	601a      	strpl	r2, [r3, #0]
 80a33f0:	4b0e      	ldr	r3, [pc, #56]	; (80a342c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a33f2:	681a      	ldr	r2, [r3, #0]
 80a33f4:	07d2      	lsls	r2, r2, #31
 80a33f6:	bf5c      	itt	pl
 80a33f8:	2201      	movpl	r2, #1
 80a33fa:	601a      	strpl	r2, [r3, #0]
 80a33fc:	4770      	bx	lr
 80a33fe:	bf00      	nop
 80a3400:	200006e0 	.word	0x200006e0
 80a3404:	200006dc 	.word	0x200006dc
 80a3408:	200006d8 	.word	0x200006d8
 80a340c:	200006d4 	.word	0x200006d4
 80a3410:	200006d0 	.word	0x200006d0
 80a3414:	200006cc 	.word	0x200006cc
 80a3418:	200006c8 	.word	0x200006c8
 80a341c:	200006c4 	.word	0x200006c4
 80a3420:	200006c0 	.word	0x200006c0
 80a3424:	200006bc 	.word	0x200006bc
 80a3428:	200006b8 	.word	0x200006b8
 80a342c:	200006b4 	.word	0x200006b4

080a3430 <__aeabi_drsub>:
 80a3430:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3434:	e002      	b.n	80a343c <__adddf3>
 80a3436:	bf00      	nop

080a3438 <__aeabi_dsub>:
 80a3438:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a343c <__adddf3>:
 80a343c:	b530      	push	{r4, r5, lr}
 80a343e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3442:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3446:	ea94 0f05 	teq	r4, r5
 80a344a:	bf08      	it	eq
 80a344c:	ea90 0f02 	teqeq	r0, r2
 80a3450:	bf1f      	itttt	ne
 80a3452:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3456:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a345a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a345e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3462:	f000 80e2 	beq.w	80a362a <__adddf3+0x1ee>
 80a3466:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a346a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a346e:	bfb8      	it	lt
 80a3470:	426d      	neglt	r5, r5
 80a3472:	dd0c      	ble.n	80a348e <__adddf3+0x52>
 80a3474:	442c      	add	r4, r5
 80a3476:	ea80 0202 	eor.w	r2, r0, r2
 80a347a:	ea81 0303 	eor.w	r3, r1, r3
 80a347e:	ea82 0000 	eor.w	r0, r2, r0
 80a3482:	ea83 0101 	eor.w	r1, r3, r1
 80a3486:	ea80 0202 	eor.w	r2, r0, r2
 80a348a:	ea81 0303 	eor.w	r3, r1, r3
 80a348e:	2d36      	cmp	r5, #54	; 0x36
 80a3490:	bf88      	it	hi
 80a3492:	bd30      	pophi	{r4, r5, pc}
 80a3494:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3498:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a349c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a34a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a34a4:	d002      	beq.n	80a34ac <__adddf3+0x70>
 80a34a6:	4240      	negs	r0, r0
 80a34a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a34ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a34b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a34b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a34b8:	d002      	beq.n	80a34c0 <__adddf3+0x84>
 80a34ba:	4252      	negs	r2, r2
 80a34bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a34c0:	ea94 0f05 	teq	r4, r5
 80a34c4:	f000 80a7 	beq.w	80a3616 <__adddf3+0x1da>
 80a34c8:	f1a4 0401 	sub.w	r4, r4, #1
 80a34cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a34d0:	db0d      	blt.n	80a34ee <__adddf3+0xb2>
 80a34d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a34d6:	fa22 f205 	lsr.w	r2, r2, r5
 80a34da:	1880      	adds	r0, r0, r2
 80a34dc:	f141 0100 	adc.w	r1, r1, #0
 80a34e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a34e4:	1880      	adds	r0, r0, r2
 80a34e6:	fa43 f305 	asr.w	r3, r3, r5
 80a34ea:	4159      	adcs	r1, r3
 80a34ec:	e00e      	b.n	80a350c <__adddf3+0xd0>
 80a34ee:	f1a5 0520 	sub.w	r5, r5, #32
 80a34f2:	f10e 0e20 	add.w	lr, lr, #32
 80a34f6:	2a01      	cmp	r2, #1
 80a34f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a34fc:	bf28      	it	cs
 80a34fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3502:	fa43 f305 	asr.w	r3, r3, r5
 80a3506:	18c0      	adds	r0, r0, r3
 80a3508:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a350c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3510:	d507      	bpl.n	80a3522 <__adddf3+0xe6>
 80a3512:	f04f 0e00 	mov.w	lr, #0
 80a3516:	f1dc 0c00 	rsbs	ip, ip, #0
 80a351a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a351e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3522:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3526:	d31b      	bcc.n	80a3560 <__adddf3+0x124>
 80a3528:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a352c:	d30c      	bcc.n	80a3548 <__adddf3+0x10c>
 80a352e:	0849      	lsrs	r1, r1, #1
 80a3530:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3534:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3538:	f104 0401 	add.w	r4, r4, #1
 80a353c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3540:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3544:	f080 809a 	bcs.w	80a367c <__adddf3+0x240>
 80a3548:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a354c:	bf08      	it	eq
 80a354e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3552:	f150 0000 	adcs.w	r0, r0, #0
 80a3556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a355a:	ea41 0105 	orr.w	r1, r1, r5
 80a355e:	bd30      	pop	{r4, r5, pc}
 80a3560:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3564:	4140      	adcs	r0, r0
 80a3566:	eb41 0101 	adc.w	r1, r1, r1
 80a356a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a356e:	f1a4 0401 	sub.w	r4, r4, #1
 80a3572:	d1e9      	bne.n	80a3548 <__adddf3+0x10c>
 80a3574:	f091 0f00 	teq	r1, #0
 80a3578:	bf04      	itt	eq
 80a357a:	4601      	moveq	r1, r0
 80a357c:	2000      	moveq	r0, #0
 80a357e:	fab1 f381 	clz	r3, r1
 80a3582:	bf08      	it	eq
 80a3584:	3320      	addeq	r3, #32
 80a3586:	f1a3 030b 	sub.w	r3, r3, #11
 80a358a:	f1b3 0220 	subs.w	r2, r3, #32
 80a358e:	da0c      	bge.n	80a35aa <__adddf3+0x16e>
 80a3590:	320c      	adds	r2, #12
 80a3592:	dd08      	ble.n	80a35a6 <__adddf3+0x16a>
 80a3594:	f102 0c14 	add.w	ip, r2, #20
 80a3598:	f1c2 020c 	rsb	r2, r2, #12
 80a359c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a35a0:	fa21 f102 	lsr.w	r1, r1, r2
 80a35a4:	e00c      	b.n	80a35c0 <__adddf3+0x184>
 80a35a6:	f102 0214 	add.w	r2, r2, #20
 80a35aa:	bfd8      	it	le
 80a35ac:	f1c2 0c20 	rsble	ip, r2, #32
 80a35b0:	fa01 f102 	lsl.w	r1, r1, r2
 80a35b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a35b8:	bfdc      	itt	le
 80a35ba:	ea41 010c 	orrle.w	r1, r1, ip
 80a35be:	4090      	lslle	r0, r2
 80a35c0:	1ae4      	subs	r4, r4, r3
 80a35c2:	bfa2      	ittt	ge
 80a35c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a35c8:	4329      	orrge	r1, r5
 80a35ca:	bd30      	popge	{r4, r5, pc}
 80a35cc:	ea6f 0404 	mvn.w	r4, r4
 80a35d0:	3c1f      	subs	r4, #31
 80a35d2:	da1c      	bge.n	80a360e <__adddf3+0x1d2>
 80a35d4:	340c      	adds	r4, #12
 80a35d6:	dc0e      	bgt.n	80a35f6 <__adddf3+0x1ba>
 80a35d8:	f104 0414 	add.w	r4, r4, #20
 80a35dc:	f1c4 0220 	rsb	r2, r4, #32
 80a35e0:	fa20 f004 	lsr.w	r0, r0, r4
 80a35e4:	fa01 f302 	lsl.w	r3, r1, r2
 80a35e8:	ea40 0003 	orr.w	r0, r0, r3
 80a35ec:	fa21 f304 	lsr.w	r3, r1, r4
 80a35f0:	ea45 0103 	orr.w	r1, r5, r3
 80a35f4:	bd30      	pop	{r4, r5, pc}
 80a35f6:	f1c4 040c 	rsb	r4, r4, #12
 80a35fa:	f1c4 0220 	rsb	r2, r4, #32
 80a35fe:	fa20 f002 	lsr.w	r0, r0, r2
 80a3602:	fa01 f304 	lsl.w	r3, r1, r4
 80a3606:	ea40 0003 	orr.w	r0, r0, r3
 80a360a:	4629      	mov	r1, r5
 80a360c:	bd30      	pop	{r4, r5, pc}
 80a360e:	fa21 f004 	lsr.w	r0, r1, r4
 80a3612:	4629      	mov	r1, r5
 80a3614:	bd30      	pop	{r4, r5, pc}
 80a3616:	f094 0f00 	teq	r4, #0
 80a361a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a361e:	bf06      	itte	eq
 80a3620:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3624:	3401      	addeq	r4, #1
 80a3626:	3d01      	subne	r5, #1
 80a3628:	e74e      	b.n	80a34c8 <__adddf3+0x8c>
 80a362a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a362e:	bf18      	it	ne
 80a3630:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3634:	d029      	beq.n	80a368a <__adddf3+0x24e>
 80a3636:	ea94 0f05 	teq	r4, r5
 80a363a:	bf08      	it	eq
 80a363c:	ea90 0f02 	teqeq	r0, r2
 80a3640:	d005      	beq.n	80a364e <__adddf3+0x212>
 80a3642:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3646:	bf04      	itt	eq
 80a3648:	4619      	moveq	r1, r3
 80a364a:	4610      	moveq	r0, r2
 80a364c:	bd30      	pop	{r4, r5, pc}
 80a364e:	ea91 0f03 	teq	r1, r3
 80a3652:	bf1e      	ittt	ne
 80a3654:	2100      	movne	r1, #0
 80a3656:	2000      	movne	r0, #0
 80a3658:	bd30      	popne	{r4, r5, pc}
 80a365a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a365e:	d105      	bne.n	80a366c <__adddf3+0x230>
 80a3660:	0040      	lsls	r0, r0, #1
 80a3662:	4149      	adcs	r1, r1
 80a3664:	bf28      	it	cs
 80a3666:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a366a:	bd30      	pop	{r4, r5, pc}
 80a366c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3670:	bf3c      	itt	cc
 80a3672:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3676:	bd30      	popcc	{r4, r5, pc}
 80a3678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a367c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3680:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3684:	f04f 0000 	mov.w	r0, #0
 80a3688:	bd30      	pop	{r4, r5, pc}
 80a368a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a368e:	bf1a      	itte	ne
 80a3690:	4619      	movne	r1, r3
 80a3692:	4610      	movne	r0, r2
 80a3694:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3698:	bf1c      	itt	ne
 80a369a:	460b      	movne	r3, r1
 80a369c:	4602      	movne	r2, r0
 80a369e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a36a2:	bf06      	itte	eq
 80a36a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a36a8:	ea91 0f03 	teqeq	r1, r3
 80a36ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a36b0:	bd30      	pop	{r4, r5, pc}
 80a36b2:	bf00      	nop

080a36b4 <__aeabi_ui2d>:
 80a36b4:	f090 0f00 	teq	r0, #0
 80a36b8:	bf04      	itt	eq
 80a36ba:	2100      	moveq	r1, #0
 80a36bc:	4770      	bxeq	lr
 80a36be:	b530      	push	{r4, r5, lr}
 80a36c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a36c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a36c8:	f04f 0500 	mov.w	r5, #0
 80a36cc:	f04f 0100 	mov.w	r1, #0
 80a36d0:	e750      	b.n	80a3574 <__adddf3+0x138>
 80a36d2:	bf00      	nop

080a36d4 <__aeabi_i2d>:
 80a36d4:	f090 0f00 	teq	r0, #0
 80a36d8:	bf04      	itt	eq
 80a36da:	2100      	moveq	r1, #0
 80a36dc:	4770      	bxeq	lr
 80a36de:	b530      	push	{r4, r5, lr}
 80a36e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a36e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a36e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a36ec:	bf48      	it	mi
 80a36ee:	4240      	negmi	r0, r0
 80a36f0:	f04f 0100 	mov.w	r1, #0
 80a36f4:	e73e      	b.n	80a3574 <__adddf3+0x138>
 80a36f6:	bf00      	nop

080a36f8 <__aeabi_f2d>:
 80a36f8:	0042      	lsls	r2, r0, #1
 80a36fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a36fe:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3702:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3706:	bf1f      	itttt	ne
 80a3708:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a370c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3710:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3714:	4770      	bxne	lr
 80a3716:	f092 0f00 	teq	r2, #0
 80a371a:	bf14      	ite	ne
 80a371c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3720:	4770      	bxeq	lr
 80a3722:	b530      	push	{r4, r5, lr}
 80a3724:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a372c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3730:	e720      	b.n	80a3574 <__adddf3+0x138>
 80a3732:	bf00      	nop

080a3734 <__aeabi_ul2d>:
 80a3734:	ea50 0201 	orrs.w	r2, r0, r1
 80a3738:	bf08      	it	eq
 80a373a:	4770      	bxeq	lr
 80a373c:	b530      	push	{r4, r5, lr}
 80a373e:	f04f 0500 	mov.w	r5, #0
 80a3742:	e00a      	b.n	80a375a <__aeabi_l2d+0x16>

080a3744 <__aeabi_l2d>:
 80a3744:	ea50 0201 	orrs.w	r2, r0, r1
 80a3748:	bf08      	it	eq
 80a374a:	4770      	bxeq	lr
 80a374c:	b530      	push	{r4, r5, lr}
 80a374e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3752:	d502      	bpl.n	80a375a <__aeabi_l2d+0x16>
 80a3754:	4240      	negs	r0, r0
 80a3756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a375a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a375e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3766:	f43f aedc 	beq.w	80a3522 <__adddf3+0xe6>
 80a376a:	f04f 0203 	mov.w	r2, #3
 80a376e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3772:	bf18      	it	ne
 80a3774:	3203      	addne	r2, #3
 80a3776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a377a:	bf18      	it	ne
 80a377c:	3203      	addne	r2, #3
 80a377e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3782:	f1c2 0320 	rsb	r3, r2, #32
 80a3786:	fa00 fc03 	lsl.w	ip, r0, r3
 80a378a:	fa20 f002 	lsr.w	r0, r0, r2
 80a378e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3792:	ea40 000e 	orr.w	r0, r0, lr
 80a3796:	fa21 f102 	lsr.w	r1, r1, r2
 80a379a:	4414      	add	r4, r2
 80a379c:	e6c1      	b.n	80a3522 <__adddf3+0xe6>
 80a379e:	bf00      	nop

080a37a0 <__aeabi_dmul>:
 80a37a0:	b570      	push	{r4, r5, r6, lr}
 80a37a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a37a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a37aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a37ae:	bf1d      	ittte	ne
 80a37b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a37b4:	ea94 0f0c 	teqne	r4, ip
 80a37b8:	ea95 0f0c 	teqne	r5, ip
 80a37bc:	f000 f8de 	bleq	80a397c <__aeabi_dmul+0x1dc>
 80a37c0:	442c      	add	r4, r5
 80a37c2:	ea81 0603 	eor.w	r6, r1, r3
 80a37c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a37ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a37ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a37d2:	bf18      	it	ne
 80a37d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a37d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a37dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a37e0:	d038      	beq.n	80a3854 <__aeabi_dmul+0xb4>
 80a37e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a37e6:	f04f 0500 	mov.w	r5, #0
 80a37ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a37ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a37f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a37f6:	f04f 0600 	mov.w	r6, #0
 80a37fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a37fe:	f09c 0f00 	teq	ip, #0
 80a3802:	bf18      	it	ne
 80a3804:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3808:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a380c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3810:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3814:	d204      	bcs.n	80a3820 <__aeabi_dmul+0x80>
 80a3816:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a381a:	416d      	adcs	r5, r5
 80a381c:	eb46 0606 	adc.w	r6, r6, r6
 80a3820:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3824:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3828:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a382c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3830:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3834:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3838:	bf88      	it	hi
 80a383a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a383e:	d81e      	bhi.n	80a387e <__aeabi_dmul+0xde>
 80a3840:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3844:	bf08      	it	eq
 80a3846:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a384a:	f150 0000 	adcs.w	r0, r0, #0
 80a384e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3852:	bd70      	pop	{r4, r5, r6, pc}
 80a3854:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3858:	ea46 0101 	orr.w	r1, r6, r1
 80a385c:	ea40 0002 	orr.w	r0, r0, r2
 80a3860:	ea81 0103 	eor.w	r1, r1, r3
 80a3864:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3868:	bfc2      	ittt	gt
 80a386a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a386e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3872:	bd70      	popgt	{r4, r5, r6, pc}
 80a3874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3878:	f04f 0e00 	mov.w	lr, #0
 80a387c:	3c01      	subs	r4, #1
 80a387e:	f300 80ab 	bgt.w	80a39d8 <__aeabi_dmul+0x238>
 80a3882:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3886:	bfde      	ittt	le
 80a3888:	2000      	movle	r0, #0
 80a388a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a388e:	bd70      	pople	{r4, r5, r6, pc}
 80a3890:	f1c4 0400 	rsb	r4, r4, #0
 80a3894:	3c20      	subs	r4, #32
 80a3896:	da35      	bge.n	80a3904 <__aeabi_dmul+0x164>
 80a3898:	340c      	adds	r4, #12
 80a389a:	dc1b      	bgt.n	80a38d4 <__aeabi_dmul+0x134>
 80a389c:	f104 0414 	add.w	r4, r4, #20
 80a38a0:	f1c4 0520 	rsb	r5, r4, #32
 80a38a4:	fa00 f305 	lsl.w	r3, r0, r5
 80a38a8:	fa20 f004 	lsr.w	r0, r0, r4
 80a38ac:	fa01 f205 	lsl.w	r2, r1, r5
 80a38b0:	ea40 0002 	orr.w	r0, r0, r2
 80a38b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a38b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a38bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a38c0:	fa21 f604 	lsr.w	r6, r1, r4
 80a38c4:	eb42 0106 	adc.w	r1, r2, r6
 80a38c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a38cc:	bf08      	it	eq
 80a38ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a38d2:	bd70      	pop	{r4, r5, r6, pc}
 80a38d4:	f1c4 040c 	rsb	r4, r4, #12
 80a38d8:	f1c4 0520 	rsb	r5, r4, #32
 80a38dc:	fa00 f304 	lsl.w	r3, r0, r4
 80a38e0:	fa20 f005 	lsr.w	r0, r0, r5
 80a38e4:	fa01 f204 	lsl.w	r2, r1, r4
 80a38e8:	ea40 0002 	orr.w	r0, r0, r2
 80a38ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a38f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a38f4:	f141 0100 	adc.w	r1, r1, #0
 80a38f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a38fc:	bf08      	it	eq
 80a38fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3902:	bd70      	pop	{r4, r5, r6, pc}
 80a3904:	f1c4 0520 	rsb	r5, r4, #32
 80a3908:	fa00 f205 	lsl.w	r2, r0, r5
 80a390c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3910:	fa20 f304 	lsr.w	r3, r0, r4
 80a3914:	fa01 f205 	lsl.w	r2, r1, r5
 80a3918:	ea43 0302 	orr.w	r3, r3, r2
 80a391c:	fa21 f004 	lsr.w	r0, r1, r4
 80a3920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3924:	fa21 f204 	lsr.w	r2, r1, r4
 80a3928:	ea20 0002 	bic.w	r0, r0, r2
 80a392c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3930:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3934:	bf08      	it	eq
 80a3936:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a393a:	bd70      	pop	{r4, r5, r6, pc}
 80a393c:	f094 0f00 	teq	r4, #0
 80a3940:	d10f      	bne.n	80a3962 <__aeabi_dmul+0x1c2>
 80a3942:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3946:	0040      	lsls	r0, r0, #1
 80a3948:	eb41 0101 	adc.w	r1, r1, r1
 80a394c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3950:	bf08      	it	eq
 80a3952:	3c01      	subeq	r4, #1
 80a3954:	d0f7      	beq.n	80a3946 <__aeabi_dmul+0x1a6>
 80a3956:	ea41 0106 	orr.w	r1, r1, r6
 80a395a:	f095 0f00 	teq	r5, #0
 80a395e:	bf18      	it	ne
 80a3960:	4770      	bxne	lr
 80a3962:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3966:	0052      	lsls	r2, r2, #1
 80a3968:	eb43 0303 	adc.w	r3, r3, r3
 80a396c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3970:	bf08      	it	eq
 80a3972:	3d01      	subeq	r5, #1
 80a3974:	d0f7      	beq.n	80a3966 <__aeabi_dmul+0x1c6>
 80a3976:	ea43 0306 	orr.w	r3, r3, r6
 80a397a:	4770      	bx	lr
 80a397c:	ea94 0f0c 	teq	r4, ip
 80a3980:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3984:	bf18      	it	ne
 80a3986:	ea95 0f0c 	teqne	r5, ip
 80a398a:	d00c      	beq.n	80a39a6 <__aeabi_dmul+0x206>
 80a398c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3990:	bf18      	it	ne
 80a3992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3996:	d1d1      	bne.n	80a393c <__aeabi_dmul+0x19c>
 80a3998:	ea81 0103 	eor.w	r1, r1, r3
 80a399c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a39a0:	f04f 0000 	mov.w	r0, #0
 80a39a4:	bd70      	pop	{r4, r5, r6, pc}
 80a39a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a39aa:	bf06      	itte	eq
 80a39ac:	4610      	moveq	r0, r2
 80a39ae:	4619      	moveq	r1, r3
 80a39b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a39b4:	d019      	beq.n	80a39ea <__aeabi_dmul+0x24a>
 80a39b6:	ea94 0f0c 	teq	r4, ip
 80a39ba:	d102      	bne.n	80a39c2 <__aeabi_dmul+0x222>
 80a39bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a39c0:	d113      	bne.n	80a39ea <__aeabi_dmul+0x24a>
 80a39c2:	ea95 0f0c 	teq	r5, ip
 80a39c6:	d105      	bne.n	80a39d4 <__aeabi_dmul+0x234>
 80a39c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a39cc:	bf1c      	itt	ne
 80a39ce:	4610      	movne	r0, r2
 80a39d0:	4619      	movne	r1, r3
 80a39d2:	d10a      	bne.n	80a39ea <__aeabi_dmul+0x24a>
 80a39d4:	ea81 0103 	eor.w	r1, r1, r3
 80a39d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a39dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a39e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a39e4:	f04f 0000 	mov.w	r0, #0
 80a39e8:	bd70      	pop	{r4, r5, r6, pc}
 80a39ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a39ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a39f2:	bd70      	pop	{r4, r5, r6, pc}

080a39f4 <__aeabi_ddiv>:
 80a39f4:	b570      	push	{r4, r5, r6, lr}
 80a39f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a39fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a39fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3a02:	bf1d      	ittte	ne
 80a3a04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3a08:	ea94 0f0c 	teqne	r4, ip
 80a3a0c:	ea95 0f0c 	teqne	r5, ip
 80a3a10:	f000 f8a7 	bleq	80a3b62 <__aeabi_ddiv+0x16e>
 80a3a14:	eba4 0405 	sub.w	r4, r4, r5
 80a3a18:	ea81 0e03 	eor.w	lr, r1, r3
 80a3a1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3a20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3a24:	f000 8088 	beq.w	80a3b38 <__aeabi_ddiv+0x144>
 80a3a28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3a2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3a30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3a34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3a38:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3a3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3a40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3a44:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3a48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3a4c:	429d      	cmp	r5, r3
 80a3a4e:	bf08      	it	eq
 80a3a50:	4296      	cmpeq	r6, r2
 80a3a52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3a56:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3a5a:	d202      	bcs.n	80a3a62 <__aeabi_ddiv+0x6e>
 80a3a5c:	085b      	lsrs	r3, r3, #1
 80a3a5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3a62:	1ab6      	subs	r6, r6, r2
 80a3a64:	eb65 0503 	sbc.w	r5, r5, r3
 80a3a68:	085b      	lsrs	r3, r3, #1
 80a3a6a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3a6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3a72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3a76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3a7e:	bf22      	ittt	cs
 80a3a80:	1ab6      	subcs	r6, r6, r2
 80a3a82:	4675      	movcs	r5, lr
 80a3a84:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3a88:	085b      	lsrs	r3, r3, #1
 80a3a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3a96:	bf22      	ittt	cs
 80a3a98:	1ab6      	subcs	r6, r6, r2
 80a3a9a:	4675      	movcs	r5, lr
 80a3a9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3aa0:	085b      	lsrs	r3, r3, #1
 80a3aa2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3aa6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3aae:	bf22      	ittt	cs
 80a3ab0:	1ab6      	subcs	r6, r6, r2
 80a3ab2:	4675      	movcs	r5, lr
 80a3ab4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3ab8:	085b      	lsrs	r3, r3, #1
 80a3aba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3abe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3ac6:	bf22      	ittt	cs
 80a3ac8:	1ab6      	subcs	r6, r6, r2
 80a3aca:	4675      	movcs	r5, lr
 80a3acc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3ad0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3ad4:	d018      	beq.n	80a3b08 <__aeabi_ddiv+0x114>
 80a3ad6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3ada:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3ade:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3ae2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3ae6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3aea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3aee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3af2:	d1c0      	bne.n	80a3a76 <__aeabi_ddiv+0x82>
 80a3af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3af8:	d10b      	bne.n	80a3b12 <__aeabi_ddiv+0x11e>
 80a3afa:	ea41 0100 	orr.w	r1, r1, r0
 80a3afe:	f04f 0000 	mov.w	r0, #0
 80a3b02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3b06:	e7b6      	b.n	80a3a76 <__aeabi_ddiv+0x82>
 80a3b08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3b0c:	bf04      	itt	eq
 80a3b0e:	4301      	orreq	r1, r0
 80a3b10:	2000      	moveq	r0, #0
 80a3b12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3b16:	bf88      	it	hi
 80a3b18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3b1c:	f63f aeaf 	bhi.w	80a387e <__aeabi_dmul+0xde>
 80a3b20:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3b24:	bf04      	itt	eq
 80a3b26:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3b2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3b2e:	f150 0000 	adcs.w	r0, r0, #0
 80a3b32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3b36:	bd70      	pop	{r4, r5, r6, pc}
 80a3b38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3b3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3b40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3b44:	bfc2      	ittt	gt
 80a3b46:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3b4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3b4e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3b50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3b54:	f04f 0e00 	mov.w	lr, #0
 80a3b58:	3c01      	subs	r4, #1
 80a3b5a:	e690      	b.n	80a387e <__aeabi_dmul+0xde>
 80a3b5c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3b60:	e68d      	b.n	80a387e <__aeabi_dmul+0xde>
 80a3b62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3b66:	ea94 0f0c 	teq	r4, ip
 80a3b6a:	bf08      	it	eq
 80a3b6c:	ea95 0f0c 	teqeq	r5, ip
 80a3b70:	f43f af3b 	beq.w	80a39ea <__aeabi_dmul+0x24a>
 80a3b74:	ea94 0f0c 	teq	r4, ip
 80a3b78:	d10a      	bne.n	80a3b90 <__aeabi_ddiv+0x19c>
 80a3b7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3b7e:	f47f af34 	bne.w	80a39ea <__aeabi_dmul+0x24a>
 80a3b82:	ea95 0f0c 	teq	r5, ip
 80a3b86:	f47f af25 	bne.w	80a39d4 <__aeabi_dmul+0x234>
 80a3b8a:	4610      	mov	r0, r2
 80a3b8c:	4619      	mov	r1, r3
 80a3b8e:	e72c      	b.n	80a39ea <__aeabi_dmul+0x24a>
 80a3b90:	ea95 0f0c 	teq	r5, ip
 80a3b94:	d106      	bne.n	80a3ba4 <__aeabi_ddiv+0x1b0>
 80a3b96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3b9a:	f43f aefd 	beq.w	80a3998 <__aeabi_dmul+0x1f8>
 80a3b9e:	4610      	mov	r0, r2
 80a3ba0:	4619      	mov	r1, r3
 80a3ba2:	e722      	b.n	80a39ea <__aeabi_dmul+0x24a>
 80a3ba4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3ba8:	bf18      	it	ne
 80a3baa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3bae:	f47f aec5 	bne.w	80a393c <__aeabi_dmul+0x19c>
 80a3bb2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3bb6:	f47f af0d 	bne.w	80a39d4 <__aeabi_dmul+0x234>
 80a3bba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3bbe:	f47f aeeb 	bne.w	80a3998 <__aeabi_dmul+0x1f8>
 80a3bc2:	e712      	b.n	80a39ea <__aeabi_dmul+0x24a>

080a3bc4 <__gedf2>:
 80a3bc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3bc8:	e006      	b.n	80a3bd8 <__cmpdf2+0x4>
 80a3bca:	bf00      	nop

080a3bcc <__ledf2>:
 80a3bcc:	f04f 0c01 	mov.w	ip, #1
 80a3bd0:	e002      	b.n	80a3bd8 <__cmpdf2+0x4>
 80a3bd2:	bf00      	nop

080a3bd4 <__cmpdf2>:
 80a3bd4:	f04f 0c01 	mov.w	ip, #1
 80a3bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3be4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3be8:	bf18      	it	ne
 80a3bea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3bee:	d01b      	beq.n	80a3c28 <__cmpdf2+0x54>
 80a3bf0:	b001      	add	sp, #4
 80a3bf2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3bf6:	bf0c      	ite	eq
 80a3bf8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3bfc:	ea91 0f03 	teqne	r1, r3
 80a3c00:	bf02      	ittt	eq
 80a3c02:	ea90 0f02 	teqeq	r0, r2
 80a3c06:	2000      	moveq	r0, #0
 80a3c08:	4770      	bxeq	lr
 80a3c0a:	f110 0f00 	cmn.w	r0, #0
 80a3c0e:	ea91 0f03 	teq	r1, r3
 80a3c12:	bf58      	it	pl
 80a3c14:	4299      	cmppl	r1, r3
 80a3c16:	bf08      	it	eq
 80a3c18:	4290      	cmpeq	r0, r2
 80a3c1a:	bf2c      	ite	cs
 80a3c1c:	17d8      	asrcs	r0, r3, #31
 80a3c1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3c22:	f040 0001 	orr.w	r0, r0, #1
 80a3c26:	4770      	bx	lr
 80a3c28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3c2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3c30:	d102      	bne.n	80a3c38 <__cmpdf2+0x64>
 80a3c32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3c36:	d107      	bne.n	80a3c48 <__cmpdf2+0x74>
 80a3c38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3c3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3c40:	d1d6      	bne.n	80a3bf0 <__cmpdf2+0x1c>
 80a3c42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3c46:	d0d3      	beq.n	80a3bf0 <__cmpdf2+0x1c>
 80a3c48:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3c4c:	4770      	bx	lr
 80a3c4e:	bf00      	nop

080a3c50 <__aeabi_cdrcmple>:
 80a3c50:	4684      	mov	ip, r0
 80a3c52:	4610      	mov	r0, r2
 80a3c54:	4662      	mov	r2, ip
 80a3c56:	468c      	mov	ip, r1
 80a3c58:	4619      	mov	r1, r3
 80a3c5a:	4663      	mov	r3, ip
 80a3c5c:	e000      	b.n	80a3c60 <__aeabi_cdcmpeq>
 80a3c5e:	bf00      	nop

080a3c60 <__aeabi_cdcmpeq>:
 80a3c60:	b501      	push	{r0, lr}
 80a3c62:	f7ff ffb7 	bl	80a3bd4 <__cmpdf2>
 80a3c66:	2800      	cmp	r0, #0
 80a3c68:	bf48      	it	mi
 80a3c6a:	f110 0f00 	cmnmi.w	r0, #0
 80a3c6e:	bd01      	pop	{r0, pc}

080a3c70 <__aeabi_dcmpeq>:
 80a3c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3c74:	f7ff fff4 	bl	80a3c60 <__aeabi_cdcmpeq>
 80a3c78:	bf0c      	ite	eq
 80a3c7a:	2001      	moveq	r0, #1
 80a3c7c:	2000      	movne	r0, #0
 80a3c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3c82:	bf00      	nop

080a3c84 <__aeabi_dcmplt>:
 80a3c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3c88:	f7ff ffea 	bl	80a3c60 <__aeabi_cdcmpeq>
 80a3c8c:	bf34      	ite	cc
 80a3c8e:	2001      	movcc	r0, #1
 80a3c90:	2000      	movcs	r0, #0
 80a3c92:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3c96:	bf00      	nop

080a3c98 <__aeabi_dcmple>:
 80a3c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3c9c:	f7ff ffe0 	bl	80a3c60 <__aeabi_cdcmpeq>
 80a3ca0:	bf94      	ite	ls
 80a3ca2:	2001      	movls	r0, #1
 80a3ca4:	2000      	movhi	r0, #0
 80a3ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3caa:	bf00      	nop

080a3cac <__aeabi_dcmpge>:
 80a3cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3cb0:	f7ff ffce 	bl	80a3c50 <__aeabi_cdrcmple>
 80a3cb4:	bf94      	ite	ls
 80a3cb6:	2001      	movls	r0, #1
 80a3cb8:	2000      	movhi	r0, #0
 80a3cba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3cbe:	bf00      	nop

080a3cc0 <__aeabi_dcmpgt>:
 80a3cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3cc4:	f7ff ffc4 	bl	80a3c50 <__aeabi_cdrcmple>
 80a3cc8:	bf34      	ite	cc
 80a3cca:	2001      	movcc	r0, #1
 80a3ccc:	2000      	movcs	r0, #0
 80a3cce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3cd2:	bf00      	nop

080a3cd4 <__aeabi_dcmpun>:
 80a3cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3cdc:	d102      	bne.n	80a3ce4 <__aeabi_dcmpun+0x10>
 80a3cde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3ce2:	d10a      	bne.n	80a3cfa <__aeabi_dcmpun+0x26>
 80a3ce4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3cec:	d102      	bne.n	80a3cf4 <__aeabi_dcmpun+0x20>
 80a3cee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3cf2:	d102      	bne.n	80a3cfa <__aeabi_dcmpun+0x26>
 80a3cf4:	f04f 0000 	mov.w	r0, #0
 80a3cf8:	4770      	bx	lr
 80a3cfa:	f04f 0001 	mov.w	r0, #1
 80a3cfe:	4770      	bx	lr

080a3d00 <__aeabi_d2iz>:
 80a3d00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3d04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3d08:	d215      	bcs.n	80a3d36 <__aeabi_d2iz+0x36>
 80a3d0a:	d511      	bpl.n	80a3d30 <__aeabi_d2iz+0x30>
 80a3d0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3d10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3d14:	d912      	bls.n	80a3d3c <__aeabi_d2iz+0x3c>
 80a3d16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3d1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3d22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3d26:	fa23 f002 	lsr.w	r0, r3, r2
 80a3d2a:	bf18      	it	ne
 80a3d2c:	4240      	negne	r0, r0
 80a3d2e:	4770      	bx	lr
 80a3d30:	f04f 0000 	mov.w	r0, #0
 80a3d34:	4770      	bx	lr
 80a3d36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3d3a:	d105      	bne.n	80a3d48 <__aeabi_d2iz+0x48>
 80a3d3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3d40:	bf08      	it	eq
 80a3d42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3d46:	4770      	bx	lr
 80a3d48:	f04f 0000 	mov.w	r0, #0
 80a3d4c:	4770      	bx	lr
 80a3d4e:	bf00      	nop

080a3d50 <__aeabi_d2uiz>:
 80a3d50:	004a      	lsls	r2, r1, #1
 80a3d52:	d211      	bcs.n	80a3d78 <__aeabi_d2uiz+0x28>
 80a3d54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3d58:	d211      	bcs.n	80a3d7e <__aeabi_d2uiz+0x2e>
 80a3d5a:	d50d      	bpl.n	80a3d78 <__aeabi_d2uiz+0x28>
 80a3d5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3d60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3d64:	d40e      	bmi.n	80a3d84 <__aeabi_d2uiz+0x34>
 80a3d66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3d6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3d72:	fa23 f002 	lsr.w	r0, r3, r2
 80a3d76:	4770      	bx	lr
 80a3d78:	f04f 0000 	mov.w	r0, #0
 80a3d7c:	4770      	bx	lr
 80a3d7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3d82:	d102      	bne.n	80a3d8a <__aeabi_d2uiz+0x3a>
 80a3d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3d88:	4770      	bx	lr
 80a3d8a:	f04f 0000 	mov.w	r0, #0
 80a3d8e:	4770      	bx	lr

080a3d90 <__aeabi_frsub>:
 80a3d90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3d94:	e002      	b.n	80a3d9c <__addsf3>
 80a3d96:	bf00      	nop

080a3d98 <__aeabi_fsub>:
 80a3d98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3d9c <__addsf3>:
 80a3d9c:	0042      	lsls	r2, r0, #1
 80a3d9e:	bf1f      	itttt	ne
 80a3da0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3da4:	ea92 0f03 	teqne	r2, r3
 80a3da8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3dac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3db0:	d06a      	beq.n	80a3e88 <__addsf3+0xec>
 80a3db2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3db6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3dba:	bfc1      	itttt	gt
 80a3dbc:	18d2      	addgt	r2, r2, r3
 80a3dbe:	4041      	eorgt	r1, r0
 80a3dc0:	4048      	eorgt	r0, r1
 80a3dc2:	4041      	eorgt	r1, r0
 80a3dc4:	bfb8      	it	lt
 80a3dc6:	425b      	neglt	r3, r3
 80a3dc8:	2b19      	cmp	r3, #25
 80a3dca:	bf88      	it	hi
 80a3dcc:	4770      	bxhi	lr
 80a3dce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3dd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3dd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3dda:	bf18      	it	ne
 80a3ddc:	4240      	negne	r0, r0
 80a3dde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3de2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3de6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3dea:	bf18      	it	ne
 80a3dec:	4249      	negne	r1, r1
 80a3dee:	ea92 0f03 	teq	r2, r3
 80a3df2:	d03f      	beq.n	80a3e74 <__addsf3+0xd8>
 80a3df4:	f1a2 0201 	sub.w	r2, r2, #1
 80a3df8:	fa41 fc03 	asr.w	ip, r1, r3
 80a3dfc:	eb10 000c 	adds.w	r0, r0, ip
 80a3e00:	f1c3 0320 	rsb	r3, r3, #32
 80a3e04:	fa01 f103 	lsl.w	r1, r1, r3
 80a3e08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3e0c:	d502      	bpl.n	80a3e14 <__addsf3+0x78>
 80a3e0e:	4249      	negs	r1, r1
 80a3e10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3e14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3e18:	d313      	bcc.n	80a3e42 <__addsf3+0xa6>
 80a3e1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3e1e:	d306      	bcc.n	80a3e2e <__addsf3+0x92>
 80a3e20:	0840      	lsrs	r0, r0, #1
 80a3e22:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3e26:	f102 0201 	add.w	r2, r2, #1
 80a3e2a:	2afe      	cmp	r2, #254	; 0xfe
 80a3e2c:	d251      	bcs.n	80a3ed2 <__addsf3+0x136>
 80a3e2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3e32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3e36:	bf08      	it	eq
 80a3e38:	f020 0001 	biceq.w	r0, r0, #1
 80a3e3c:	ea40 0003 	orr.w	r0, r0, r3
 80a3e40:	4770      	bx	lr
 80a3e42:	0049      	lsls	r1, r1, #1
 80a3e44:	eb40 0000 	adc.w	r0, r0, r0
 80a3e48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3e4c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3e50:	d1ed      	bne.n	80a3e2e <__addsf3+0x92>
 80a3e52:	fab0 fc80 	clz	ip, r0
 80a3e56:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3e5a:	ebb2 020c 	subs.w	r2, r2, ip
 80a3e5e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3e62:	bfaa      	itet	ge
 80a3e64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3e68:	4252      	neglt	r2, r2
 80a3e6a:	4318      	orrge	r0, r3
 80a3e6c:	bfbc      	itt	lt
 80a3e6e:	40d0      	lsrlt	r0, r2
 80a3e70:	4318      	orrlt	r0, r3
 80a3e72:	4770      	bx	lr
 80a3e74:	f092 0f00 	teq	r2, #0
 80a3e78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3e7c:	bf06      	itte	eq
 80a3e7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3e82:	3201      	addeq	r2, #1
 80a3e84:	3b01      	subne	r3, #1
 80a3e86:	e7b5      	b.n	80a3df4 <__addsf3+0x58>
 80a3e88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3e90:	bf18      	it	ne
 80a3e92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3e96:	d021      	beq.n	80a3edc <__addsf3+0x140>
 80a3e98:	ea92 0f03 	teq	r2, r3
 80a3e9c:	d004      	beq.n	80a3ea8 <__addsf3+0x10c>
 80a3e9e:	f092 0f00 	teq	r2, #0
 80a3ea2:	bf08      	it	eq
 80a3ea4:	4608      	moveq	r0, r1
 80a3ea6:	4770      	bx	lr
 80a3ea8:	ea90 0f01 	teq	r0, r1
 80a3eac:	bf1c      	itt	ne
 80a3eae:	2000      	movne	r0, #0
 80a3eb0:	4770      	bxne	lr
 80a3eb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3eb6:	d104      	bne.n	80a3ec2 <__addsf3+0x126>
 80a3eb8:	0040      	lsls	r0, r0, #1
 80a3eba:	bf28      	it	cs
 80a3ebc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3ec0:	4770      	bx	lr
 80a3ec2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3ec6:	bf3c      	itt	cc
 80a3ec8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3ecc:	4770      	bxcc	lr
 80a3ece:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3ed2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3ed6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3eda:	4770      	bx	lr
 80a3edc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3ee0:	bf16      	itet	ne
 80a3ee2:	4608      	movne	r0, r1
 80a3ee4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3ee8:	4601      	movne	r1, r0
 80a3eea:	0242      	lsls	r2, r0, #9
 80a3eec:	bf06      	itte	eq
 80a3eee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3ef2:	ea90 0f01 	teqeq	r0, r1
 80a3ef6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3efa:	4770      	bx	lr

080a3efc <__aeabi_ui2f>:
 80a3efc:	f04f 0300 	mov.w	r3, #0
 80a3f00:	e004      	b.n	80a3f0c <__aeabi_i2f+0x8>
 80a3f02:	bf00      	nop

080a3f04 <__aeabi_i2f>:
 80a3f04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3f08:	bf48      	it	mi
 80a3f0a:	4240      	negmi	r0, r0
 80a3f0c:	ea5f 0c00 	movs.w	ip, r0
 80a3f10:	bf08      	it	eq
 80a3f12:	4770      	bxeq	lr
 80a3f14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3f18:	4601      	mov	r1, r0
 80a3f1a:	f04f 0000 	mov.w	r0, #0
 80a3f1e:	e01c      	b.n	80a3f5a <__aeabi_l2f+0x2a>

080a3f20 <__aeabi_ul2f>:
 80a3f20:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f24:	bf08      	it	eq
 80a3f26:	4770      	bxeq	lr
 80a3f28:	f04f 0300 	mov.w	r3, #0
 80a3f2c:	e00a      	b.n	80a3f44 <__aeabi_l2f+0x14>
 80a3f2e:	bf00      	nop

080a3f30 <__aeabi_l2f>:
 80a3f30:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f34:	bf08      	it	eq
 80a3f36:	4770      	bxeq	lr
 80a3f38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3f3c:	d502      	bpl.n	80a3f44 <__aeabi_l2f+0x14>
 80a3f3e:	4240      	negs	r0, r0
 80a3f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f44:	ea5f 0c01 	movs.w	ip, r1
 80a3f48:	bf02      	ittt	eq
 80a3f4a:	4684      	moveq	ip, r0
 80a3f4c:	4601      	moveq	r1, r0
 80a3f4e:	2000      	moveq	r0, #0
 80a3f50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3f54:	bf08      	it	eq
 80a3f56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3f5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3f5e:	fabc f28c 	clz	r2, ip
 80a3f62:	3a08      	subs	r2, #8
 80a3f64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3f68:	db10      	blt.n	80a3f8c <__aeabi_l2f+0x5c>
 80a3f6a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3f6e:	4463      	add	r3, ip
 80a3f70:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3f74:	f1c2 0220 	rsb	r2, r2, #32
 80a3f78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3f7c:	fa20 f202 	lsr.w	r2, r0, r2
 80a3f80:	eb43 0002 	adc.w	r0, r3, r2
 80a3f84:	bf08      	it	eq
 80a3f86:	f020 0001 	biceq.w	r0, r0, #1
 80a3f8a:	4770      	bx	lr
 80a3f8c:	f102 0220 	add.w	r2, r2, #32
 80a3f90:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3f94:	f1c2 0220 	rsb	r2, r2, #32
 80a3f98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3f9c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3fa0:	eb43 0002 	adc.w	r0, r3, r2
 80a3fa4:	bf08      	it	eq
 80a3fa6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3faa:	4770      	bx	lr

080a3fac <__aeabi_fmul>:
 80a3fac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3fb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3fb4:	bf1e      	ittt	ne
 80a3fb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3fba:	ea92 0f0c 	teqne	r2, ip
 80a3fbe:	ea93 0f0c 	teqne	r3, ip
 80a3fc2:	d06f      	beq.n	80a40a4 <__aeabi_fmul+0xf8>
 80a3fc4:	441a      	add	r2, r3
 80a3fc6:	ea80 0c01 	eor.w	ip, r0, r1
 80a3fca:	0240      	lsls	r0, r0, #9
 80a3fcc:	bf18      	it	ne
 80a3fce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3fd2:	d01e      	beq.n	80a4012 <__aeabi_fmul+0x66>
 80a3fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3fd8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3fdc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3fe0:	fba0 3101 	umull	r3, r1, r0, r1
 80a3fe4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3fe8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3fec:	bf3e      	ittt	cc
 80a3fee:	0049      	lslcc	r1, r1, #1
 80a3ff0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3ff4:	005b      	lslcc	r3, r3, #1
 80a3ff6:	ea40 0001 	orr.w	r0, r0, r1
 80a3ffa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3ffe:	2afd      	cmp	r2, #253	; 0xfd
 80a4000:	d81d      	bhi.n	80a403e <__aeabi_fmul+0x92>
 80a4002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4006:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a400a:	bf08      	it	eq
 80a400c:	f020 0001 	biceq.w	r0, r0, #1
 80a4010:	4770      	bx	lr
 80a4012:	f090 0f00 	teq	r0, #0
 80a4016:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a401a:	bf08      	it	eq
 80a401c:	0249      	lsleq	r1, r1, #9
 80a401e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4022:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4026:	3a7f      	subs	r2, #127	; 0x7f
 80a4028:	bfc2      	ittt	gt
 80a402a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a402e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4032:	4770      	bxgt	lr
 80a4034:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4038:	f04f 0300 	mov.w	r3, #0
 80a403c:	3a01      	subs	r2, #1
 80a403e:	dc5d      	bgt.n	80a40fc <__aeabi_fmul+0x150>
 80a4040:	f112 0f19 	cmn.w	r2, #25
 80a4044:	bfdc      	itt	le
 80a4046:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a404a:	4770      	bxle	lr
 80a404c:	f1c2 0200 	rsb	r2, r2, #0
 80a4050:	0041      	lsls	r1, r0, #1
 80a4052:	fa21 f102 	lsr.w	r1, r1, r2
 80a4056:	f1c2 0220 	rsb	r2, r2, #32
 80a405a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a405e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4062:	f140 0000 	adc.w	r0, r0, #0
 80a4066:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a406a:	bf08      	it	eq
 80a406c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4070:	4770      	bx	lr
 80a4072:	f092 0f00 	teq	r2, #0
 80a4076:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a407a:	bf02      	ittt	eq
 80a407c:	0040      	lsleq	r0, r0, #1
 80a407e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4082:	3a01      	subeq	r2, #1
 80a4084:	d0f9      	beq.n	80a407a <__aeabi_fmul+0xce>
 80a4086:	ea40 000c 	orr.w	r0, r0, ip
 80a408a:	f093 0f00 	teq	r3, #0
 80a408e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4092:	bf02      	ittt	eq
 80a4094:	0049      	lsleq	r1, r1, #1
 80a4096:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a409a:	3b01      	subeq	r3, #1
 80a409c:	d0f9      	beq.n	80a4092 <__aeabi_fmul+0xe6>
 80a409e:	ea41 010c 	orr.w	r1, r1, ip
 80a40a2:	e78f      	b.n	80a3fc4 <__aeabi_fmul+0x18>
 80a40a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a40a8:	ea92 0f0c 	teq	r2, ip
 80a40ac:	bf18      	it	ne
 80a40ae:	ea93 0f0c 	teqne	r3, ip
 80a40b2:	d00a      	beq.n	80a40ca <__aeabi_fmul+0x11e>
 80a40b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a40b8:	bf18      	it	ne
 80a40ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a40be:	d1d8      	bne.n	80a4072 <__aeabi_fmul+0xc6>
 80a40c0:	ea80 0001 	eor.w	r0, r0, r1
 80a40c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a40c8:	4770      	bx	lr
 80a40ca:	f090 0f00 	teq	r0, #0
 80a40ce:	bf17      	itett	ne
 80a40d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a40d4:	4608      	moveq	r0, r1
 80a40d6:	f091 0f00 	teqne	r1, #0
 80a40da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a40de:	d014      	beq.n	80a410a <__aeabi_fmul+0x15e>
 80a40e0:	ea92 0f0c 	teq	r2, ip
 80a40e4:	d101      	bne.n	80a40ea <__aeabi_fmul+0x13e>
 80a40e6:	0242      	lsls	r2, r0, #9
 80a40e8:	d10f      	bne.n	80a410a <__aeabi_fmul+0x15e>
 80a40ea:	ea93 0f0c 	teq	r3, ip
 80a40ee:	d103      	bne.n	80a40f8 <__aeabi_fmul+0x14c>
 80a40f0:	024b      	lsls	r3, r1, #9
 80a40f2:	bf18      	it	ne
 80a40f4:	4608      	movne	r0, r1
 80a40f6:	d108      	bne.n	80a410a <__aeabi_fmul+0x15e>
 80a40f8:	ea80 0001 	eor.w	r0, r0, r1
 80a40fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4100:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4104:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4108:	4770      	bx	lr
 80a410a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a410e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4112:	4770      	bx	lr

080a4114 <__aeabi_fdiv>:
 80a4114:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4118:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a411c:	bf1e      	ittt	ne
 80a411e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4122:	ea92 0f0c 	teqne	r2, ip
 80a4126:	ea93 0f0c 	teqne	r3, ip
 80a412a:	d069      	beq.n	80a4200 <__aeabi_fdiv+0xec>
 80a412c:	eba2 0203 	sub.w	r2, r2, r3
 80a4130:	ea80 0c01 	eor.w	ip, r0, r1
 80a4134:	0249      	lsls	r1, r1, #9
 80a4136:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a413a:	d037      	beq.n	80a41ac <__aeabi_fdiv+0x98>
 80a413c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4140:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4144:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4148:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a414c:	428b      	cmp	r3, r1
 80a414e:	bf38      	it	cc
 80a4150:	005b      	lslcc	r3, r3, #1
 80a4152:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4156:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a415a:	428b      	cmp	r3, r1
 80a415c:	bf24      	itt	cs
 80a415e:	1a5b      	subcs	r3, r3, r1
 80a4160:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4164:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4168:	bf24      	itt	cs
 80a416a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a416e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4172:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4176:	bf24      	itt	cs
 80a4178:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a417c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4180:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4184:	bf24      	itt	cs
 80a4186:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a418a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a418e:	011b      	lsls	r3, r3, #4
 80a4190:	bf18      	it	ne
 80a4192:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4196:	d1e0      	bne.n	80a415a <__aeabi_fdiv+0x46>
 80a4198:	2afd      	cmp	r2, #253	; 0xfd
 80a419a:	f63f af50 	bhi.w	80a403e <__aeabi_fmul+0x92>
 80a419e:	428b      	cmp	r3, r1
 80a41a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a41a4:	bf08      	it	eq
 80a41a6:	f020 0001 	biceq.w	r0, r0, #1
 80a41aa:	4770      	bx	lr
 80a41ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a41b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a41b4:	327f      	adds	r2, #127	; 0x7f
 80a41b6:	bfc2      	ittt	gt
 80a41b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a41bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a41c0:	4770      	bxgt	lr
 80a41c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a41c6:	f04f 0300 	mov.w	r3, #0
 80a41ca:	3a01      	subs	r2, #1
 80a41cc:	e737      	b.n	80a403e <__aeabi_fmul+0x92>
 80a41ce:	f092 0f00 	teq	r2, #0
 80a41d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a41d6:	bf02      	ittt	eq
 80a41d8:	0040      	lsleq	r0, r0, #1
 80a41da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a41de:	3a01      	subeq	r2, #1
 80a41e0:	d0f9      	beq.n	80a41d6 <__aeabi_fdiv+0xc2>
 80a41e2:	ea40 000c 	orr.w	r0, r0, ip
 80a41e6:	f093 0f00 	teq	r3, #0
 80a41ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a41ee:	bf02      	ittt	eq
 80a41f0:	0049      	lsleq	r1, r1, #1
 80a41f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a41f6:	3b01      	subeq	r3, #1
 80a41f8:	d0f9      	beq.n	80a41ee <__aeabi_fdiv+0xda>
 80a41fa:	ea41 010c 	orr.w	r1, r1, ip
 80a41fe:	e795      	b.n	80a412c <__aeabi_fdiv+0x18>
 80a4200:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4204:	ea92 0f0c 	teq	r2, ip
 80a4208:	d108      	bne.n	80a421c <__aeabi_fdiv+0x108>
 80a420a:	0242      	lsls	r2, r0, #9
 80a420c:	f47f af7d 	bne.w	80a410a <__aeabi_fmul+0x15e>
 80a4210:	ea93 0f0c 	teq	r3, ip
 80a4214:	f47f af70 	bne.w	80a40f8 <__aeabi_fmul+0x14c>
 80a4218:	4608      	mov	r0, r1
 80a421a:	e776      	b.n	80a410a <__aeabi_fmul+0x15e>
 80a421c:	ea93 0f0c 	teq	r3, ip
 80a4220:	d104      	bne.n	80a422c <__aeabi_fdiv+0x118>
 80a4222:	024b      	lsls	r3, r1, #9
 80a4224:	f43f af4c 	beq.w	80a40c0 <__aeabi_fmul+0x114>
 80a4228:	4608      	mov	r0, r1
 80a422a:	e76e      	b.n	80a410a <__aeabi_fmul+0x15e>
 80a422c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4230:	bf18      	it	ne
 80a4232:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4236:	d1ca      	bne.n	80a41ce <__aeabi_fdiv+0xba>
 80a4238:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a423c:	f47f af5c 	bne.w	80a40f8 <__aeabi_fmul+0x14c>
 80a4240:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4244:	f47f af3c 	bne.w	80a40c0 <__aeabi_fmul+0x114>
 80a4248:	e75f      	b.n	80a410a <__aeabi_fmul+0x15e>
 80a424a:	bf00      	nop

080a424c <__gesf2>:
 80a424c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4250:	e006      	b.n	80a4260 <__cmpsf2+0x4>
 80a4252:	bf00      	nop

080a4254 <__lesf2>:
 80a4254:	f04f 0c01 	mov.w	ip, #1
 80a4258:	e002      	b.n	80a4260 <__cmpsf2+0x4>
 80a425a:	bf00      	nop

080a425c <__cmpsf2>:
 80a425c:	f04f 0c01 	mov.w	ip, #1
 80a4260:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4264:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a426c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4270:	bf18      	it	ne
 80a4272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4276:	d011      	beq.n	80a429c <__cmpsf2+0x40>
 80a4278:	b001      	add	sp, #4
 80a427a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a427e:	bf18      	it	ne
 80a4280:	ea90 0f01 	teqne	r0, r1
 80a4284:	bf58      	it	pl
 80a4286:	ebb2 0003 	subspl.w	r0, r2, r3
 80a428a:	bf88      	it	hi
 80a428c:	17c8      	asrhi	r0, r1, #31
 80a428e:	bf38      	it	cc
 80a4290:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4294:	bf18      	it	ne
 80a4296:	f040 0001 	orrne.w	r0, r0, #1
 80a429a:	4770      	bx	lr
 80a429c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a42a0:	d102      	bne.n	80a42a8 <__cmpsf2+0x4c>
 80a42a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a42a6:	d105      	bne.n	80a42b4 <__cmpsf2+0x58>
 80a42a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a42ac:	d1e4      	bne.n	80a4278 <__cmpsf2+0x1c>
 80a42ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a42b2:	d0e1      	beq.n	80a4278 <__cmpsf2+0x1c>
 80a42b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a42b8:	4770      	bx	lr
 80a42ba:	bf00      	nop

080a42bc <__aeabi_cfrcmple>:
 80a42bc:	4684      	mov	ip, r0
 80a42be:	4608      	mov	r0, r1
 80a42c0:	4661      	mov	r1, ip
 80a42c2:	e7ff      	b.n	80a42c4 <__aeabi_cfcmpeq>

080a42c4 <__aeabi_cfcmpeq>:
 80a42c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80a42c6:	f7ff ffc9 	bl	80a425c <__cmpsf2>
 80a42ca:	2800      	cmp	r0, #0
 80a42cc:	bf48      	it	mi
 80a42ce:	f110 0f00 	cmnmi.w	r0, #0
 80a42d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a42d4 <__aeabi_fcmpeq>:
 80a42d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a42d8:	f7ff fff4 	bl	80a42c4 <__aeabi_cfcmpeq>
 80a42dc:	bf0c      	ite	eq
 80a42de:	2001      	moveq	r0, #1
 80a42e0:	2000      	movne	r0, #0
 80a42e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a42e6:	bf00      	nop

080a42e8 <__aeabi_fcmplt>:
 80a42e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a42ec:	f7ff ffea 	bl	80a42c4 <__aeabi_cfcmpeq>
 80a42f0:	bf34      	ite	cc
 80a42f2:	2001      	movcc	r0, #1
 80a42f4:	2000      	movcs	r0, #0
 80a42f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a42fa:	bf00      	nop

080a42fc <__aeabi_fcmple>:
 80a42fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4300:	f7ff ffe0 	bl	80a42c4 <__aeabi_cfcmpeq>
 80a4304:	bf94      	ite	ls
 80a4306:	2001      	movls	r0, #1
 80a4308:	2000      	movhi	r0, #0
 80a430a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a430e:	bf00      	nop

080a4310 <__aeabi_fcmpge>:
 80a4310:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4314:	f7ff ffd2 	bl	80a42bc <__aeabi_cfrcmple>
 80a4318:	bf94      	ite	ls
 80a431a:	2001      	movls	r0, #1
 80a431c:	2000      	movhi	r0, #0
 80a431e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4322:	bf00      	nop

080a4324 <__aeabi_fcmpgt>:
 80a4324:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4328:	f7ff ffc8 	bl	80a42bc <__aeabi_cfrcmple>
 80a432c:	bf34      	ite	cc
 80a432e:	2001      	movcc	r0, #1
 80a4330:	2000      	movcs	r0, #0
 80a4332:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4336:	bf00      	nop

080a4338 <__aeabi_f2iz>:
 80a4338:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a433c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4340:	d30f      	bcc.n	80a4362 <__aeabi_f2iz+0x2a>
 80a4342:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4346:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a434a:	d90d      	bls.n	80a4368 <__aeabi_f2iz+0x30>
 80a434c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4354:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4358:	fa23 f002 	lsr.w	r0, r3, r2
 80a435c:	bf18      	it	ne
 80a435e:	4240      	negne	r0, r0
 80a4360:	4770      	bx	lr
 80a4362:	f04f 0000 	mov.w	r0, #0
 80a4366:	4770      	bx	lr
 80a4368:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a436c:	d101      	bne.n	80a4372 <__aeabi_f2iz+0x3a>
 80a436e:	0242      	lsls	r2, r0, #9
 80a4370:	d105      	bne.n	80a437e <__aeabi_f2iz+0x46>
 80a4372:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4376:	bf08      	it	eq
 80a4378:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a437c:	4770      	bx	lr
 80a437e:	f04f 0000 	mov.w	r0, #0
 80a4382:	4770      	bx	lr

080a4384 <__cxa_atexit>:
 80a4384:	b510      	push	{r4, lr}
 80a4386:	4c05      	ldr	r4, [pc, #20]	; (80a439c <__cxa_atexit+0x18>)
 80a4388:	4613      	mov	r3, r2
 80a438a:	b12c      	cbz	r4, 80a4398 <__cxa_atexit+0x14>
 80a438c:	460a      	mov	r2, r1
 80a438e:	4601      	mov	r1, r0
 80a4390:	2002      	movs	r0, #2
 80a4392:	f3af 8000 	nop.w
 80a4396:	bd10      	pop	{r4, pc}
 80a4398:	4620      	mov	r0, r4
 80a439a:	bd10      	pop	{r4, pc}
 80a439c:	00000000 	.word	0x00000000

080a43a0 <memcpy>:
 80a43a0:	b510      	push	{r4, lr}
 80a43a2:	1e43      	subs	r3, r0, #1
 80a43a4:	440a      	add	r2, r1
 80a43a6:	4291      	cmp	r1, r2
 80a43a8:	d004      	beq.n	80a43b4 <memcpy+0x14>
 80a43aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a43ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a43b2:	e7f8      	b.n	80a43a6 <memcpy+0x6>
 80a43b4:	bd10      	pop	{r4, pc}

080a43b6 <memset>:
 80a43b6:	4603      	mov	r3, r0
 80a43b8:	4402      	add	r2, r0
 80a43ba:	4293      	cmp	r3, r2
 80a43bc:	d002      	beq.n	80a43c4 <memset+0xe>
 80a43be:	f803 1b01 	strb.w	r1, [r3], #1
 80a43c2:	e7fa      	b.n	80a43ba <memset+0x4>
 80a43c4:	4770      	bx	lr
	...

080a43c8 <srand>:
 80a43c8:	b538      	push	{r3, r4, r5, lr}
 80a43ca:	4b12      	ldr	r3, [pc, #72]	; (80a4414 <srand+0x4c>)
 80a43cc:	4605      	mov	r5, r0
 80a43ce:	681c      	ldr	r4, [r3, #0]
 80a43d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a43d2:	b9d3      	cbnz	r3, 80a440a <srand+0x42>
 80a43d4:	2018      	movs	r0, #24
 80a43d6:	f7fe f891 	bl	80a24fc <malloc>
 80a43da:	f243 330e 	movw	r3, #13070	; 0x330e
 80a43de:	63a0      	str	r0, [r4, #56]	; 0x38
 80a43e0:	8003      	strh	r3, [r0, #0]
 80a43e2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a43e6:	8043      	strh	r3, [r0, #2]
 80a43e8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a43ec:	8083      	strh	r3, [r0, #4]
 80a43ee:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a43f2:	80c3      	strh	r3, [r0, #6]
 80a43f4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a43f8:	8103      	strh	r3, [r0, #8]
 80a43fa:	2305      	movs	r3, #5
 80a43fc:	8143      	strh	r3, [r0, #10]
 80a43fe:	230b      	movs	r3, #11
 80a4400:	8183      	strh	r3, [r0, #12]
 80a4402:	2201      	movs	r2, #1
 80a4404:	2300      	movs	r3, #0
 80a4406:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a440a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a440c:	2200      	movs	r2, #0
 80a440e:	611d      	str	r5, [r3, #16]
 80a4410:	615a      	str	r2, [r3, #20]
 80a4412:	bd38      	pop	{r3, r4, r5, pc}
 80a4414:	20000074 	.word	0x20000074

080a4418 <strlen>:
 80a4418:	4603      	mov	r3, r0
 80a441a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a441e:	2a00      	cmp	r2, #0
 80a4420:	d1fb      	bne.n	80a441a <strlen+0x2>
 80a4422:	1a18      	subs	r0, r3, r0
 80a4424:	3801      	subs	r0, #1
 80a4426:	4770      	bx	lr

080a4428 <dynalib_user>:
 80a4428:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a4438:	0000 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
 80a4448:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80a4458:	4d53 4439 3153 002e 6f44 6275 656c 632d     SM9DS1..Double-c
 80a4468:	6568 6b63 7720 7269 6e69 2e67 4400 6665     heck wiring..Def
 80a4478:	7561 746c 7320 7465 6974 676e 2073 6e69     ault settings in
 80a4488:	7420 6968 2073 6b73 7465 6863 7720 6c69      this sketch wil
 80a4498:	206c 6f77 6b72 6620 726f 6120 206e 756f     l work for an ou
 80a44a8:	2074 666f 7420 6568 6220 786f 4c20 4d53     t of the box LSM
 80a44b8:	4439 3153 4220 6572 6b61 756f 2c74 6220     9DS1 Breakout, b
 80a44c8:	7475 6d20 7961 6e20 6565 2064 6f74 6220     ut may need to b
 80a44d8:	2065 6f6d 6964 6966 6465 6920 2066 6874     e modified if th
 80a44e8:	2065 6f62 7261 2064 756a 706d 7265 2073     e board jumpers 
 80a44f8:	7261 2e65 4100 203a 2c00 0020 6720 5000     are..A: ., . g.P
 80a4508:	7469 6863 202c 6f52 6c6c 203a 4800 6165     itch, Roll: .Hea
 80a4518:	6964 676e 203a 6300 6c61 6269 6172 6974     ding: .calibrati
 80a4528:	676e 7320 6e65 6f73 2e72 2e2e 6400 6e6f     ng sensor....don
 80a4538:	0065 6c62 6165 6863 7000 6f72 7073 7265     e.bleach.prosper
 80a4548:	7469 0079 6e65 6164 676e 7265 6465 7800     ity.endangered.x
 80a4558:	203a 2000 3a59 2000 3a5a 2000 7661 203a     : . Y:. Z:. av: 
 80a4568:	7000 7869 6c65 6f50 6e69 6574 0072 0000     .pixelPointer...

080a4578 <CSWTCH.215>:
 80a4578:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4588:	0050 0000                                   P...

080a458c <CSWTCH.57>:
 80a458c:	0020 0000 0040 0000 0060 0000                ...@...`...

080a4598 <_ZTV7TwoWire>:
	...
 80a45a0:	2535 080a 257f 080a 2557 080a 2537 080a     5%...%..W%..7%..
 80a45b0:	255f 080a 2567 080a 256f 080a 2577 080a     _%..g%..o%..w%..

080a45c0 <_ZTV9IPAddress>:
	...
 80a45c8:	2603 080a 25f3 080a 25f5 080a 6162 6475     .&...%...%..baud
 80a45d8:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a45e8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a45f8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a4608:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a4618:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a4628:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a4638:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a4648:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a4658:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a4668:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a4678:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
 80a4688:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 80a4698:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a46a8:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a46b4 <_ZTVN5spark12NetworkClassE>:
	...
 80a46bc:	26c9 080a 26d3 080a 26dd 080a 26e7 080a     .&...&...&...&..
 80a46cc:	26f1 080a 26fd 080a 2709 080a 2715 080a     .&...&...'...'..
 80a46dc:	271d 080a 2727 080a 2731 080a 616e 006e     .'..''..1'..nan.
 80a46ec:	766f 0066 6e69 0066                         ovf.inf.

080a46f4 <_ZTV8SPIClass>:
	...
 80a46fc:	2a5d 080a 2a5f 080a                         ]*.._*..

080a4704 <_ZL14clock_divisors>:
 80a4704:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a4714:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a4724:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a4734:	0000 0000                                   ....

080a4738 <_ZTV11USARTSerial>:
	...
 80a4740:	2ba1 080a 2bf1 080a 2bff 080a 2795 080a     .+...+...+...'..
 80a4750:	2bb5 080a 2bd7 080a 2bc3 080a 2beb 080a     .+...+...+...+..
 80a4760:	2ba3 080a 2ba7 080a                         .+...+..

080a4768 <_ZTV9USBSerial>:
	...
 80a4770:	2ca9 080a 2cf9 080a 2d07 080a 2795 080a     .,...,...-...'..
 80a4780:	2ce5 080a 2cab 080a 2cc1 080a 2cf3 080a     .,...,...,...,..
 80a4790:	2cd7 080a 2ca5 080a                         .,...,..

080a4798 <_ZTVN5spark9WiFiClassE>:
	...
 80a47a0:	2eeb 080a 2ee1 080a 2ed7 080a 2e49 080a     ............I...
 80a47b0:	2ecb 080a 2ebf 080a 2eb3 080a 2eab 080a     ................
 80a47c0:	2ea1 080a 2e97 080a 2e53 080a               ........S...

080a47cc <__sf_fake_stdin>:
	...

080a47ec <__sf_fake_stdout>:
	...

080a480c <__sf_fake_stderr>:
	...
 80a482c:	0043                                        C.

080a482e <link_const_variable_data_end>:
	...

080a4830 <link_constructors_location>:
 80a4830:	080a0739 	.word	0x080a0739
 80a4834:	080a1a4d 	.word	0x080a1a4d
 80a4838:	080a213b 	.word	0x080a213b
 80a483c:	080a26b9 	.word	0x080a26b9
 80a4840:	080a2781 	.word	0x080a2781
 80a4844:	080a2a41 	.word	0x080a2a41
 80a4848:	080a2b75 	.word	0x080a2b75
 80a484c:	080a2b8d 	.word	0x080a2b8d
 80a4850:	080a2ef5 	.word	0x080a2ef5
 80a4854:	080a311d 	.word	0x080a311d
 80a4858:	080a314d 	.word	0x080a314d
 80a485c:	080a31a1 	.word	0x080a31a1
 80a4860:	080a3265 	.word	0x080a3265
 80a4864:	080a32e9 	.word	0x080a32e9
 80a4868:	080a336d 	.word	0x080a336d

080a486c <link_constructors_end>:
 80a486c:	00000000 	.word	0x00000000
