
/Users/ninjacat/Documents/Particle/TakeHeed/algue/target/1.4.1-rc.1/photon/algue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000023d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a23f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a23f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000688  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a245c  080a245c  0002245c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2484  080a2484  00022484  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b5fdd  00000000  00000000  00022488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000109e7  00000000  00000000  000d8465  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016bd1  00000000  00000000  000e8e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002290  00000000  00000000  000ffa1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000036c8  00000000  00000000  00101cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025a55  00000000  00000000  00105375  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026998  00000000  00000000  0012adca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6fba  00000000  00000000  00151762  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c1d4  00000000  00000000  001f871c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 ff43 	bl	80a1eb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 ff48 	bl	80a1ece <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a23f4 	.word	0x080a23f4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200006f0 	.word	0x200006f0
 80a0058:	200006f0 	.word	0x200006f0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb19 	bl	80a1694 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a23ac 	.word	0x080a23ac
 80a0084:	080a23ec 	.word	0x080a23ec

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8db 	bl	80a0248 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 babf 	b.w	80a1618 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 bc2d 	b.w	80a08f8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bc33 	b.w	80a0908 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f000 ff28 	bl	80a0f14 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f001 f85d 	bl	80a1184 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a224c 	.word	0x080a224c

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 fbb4 	bl	80a1846 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 fbaa 	bl	80a1846 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
}

void setup() {
 80a00f8:	b570      	push	{r4, r5, r6, lr}
  pinMode(D7, OUTPUT);
 80a00fa:	2101      	movs	r1, #1
 80a00fc:	2007      	movs	r0, #7
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
}

void setup() {
 80a00fe:	b096      	sub	sp, #88	; 0x58
  pinMode(D7, OUTPUT);
 80a0100:	f001 fb18 	bl	80a1734 <pinMode>
  digitalWrite(D7, LOW);
 80a0104:	2100      	movs	r1, #0
 80a0106:	2007      	movs	r0, #7
 80a0108:	f001 fb25 	bl	80a1756 <digitalWrite>

  while(!Serial);
 80a010c:	f001 f990 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a0110:	f001 f975 	bl	80a13fe <_ZN9USBSerialcvbEv>
 80a0114:	2800      	cmp	r0, #0
 80a0116:	d0f9      	beq.n	80a010c <setup+0x14>
 80a0118:	4c29      	ldr	r4, [pc, #164]	; (80a01c0 <setup+0xc8>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a011a:	2300      	movs	r3, #0
 80a011c:	461a      	mov	r2, r3
 80a011e:	4619      	mov	r1, r3
 80a0120:	6860      	ldr	r0, [r4, #4]
 80a0122:	f000 fb89 	bl	80a0838 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0126:	2200      	movs	r2, #0
 80a0128:	4611      	mov	r1, r2
 80a012a:	6860      	ldr	r0, [r4, #4]
 80a012c:	4d24      	ldr	r5, [pc, #144]	; (80a01c0 <setup+0xc8>)
 80a012e:	f000 fb9b 	bl	80a0868 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a0132:	2800      	cmp	r0, #0
 80a0134:	d0f7      	beq.n	80a0126 <setup+0x2e>
  Serial.println("Setup");
 80a0136:	f001 f97b 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a013a:	4922      	ldr	r1, [pc, #136]	; (80a01c4 <setup+0xcc>)
 80a013c:	f000 fd5d 	bl	80a0bfa <_ZN5Print7printlnEPKc>
  udp.begin(7000);
 80a0140:	2200      	movs	r2, #0
 80a0142:	f641 3158 	movw	r1, #7000	; 0x1b58
 80a0146:	4820      	ldr	r0, [pc, #128]	; (80a01c8 <setup+0xd0>)
 80a0148:	f000 febf 	bl	80a0eca <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a014c:	2300      	movs	r3, #0
 80a014e:	4619      	mov	r1, r3
 80a0150:	4a1e      	ldr	r2, [pc, #120]	; (80a01cc <setup+0xd4>)
 80a0152:	6868      	ldr	r0, [r5, #4]
 80a0154:	f000 fbc0 	bl	80a08d8 <network_set_hostname>
  //udp.begin(localPort);
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a0158:	f001 f96a 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a015c:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a015e:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0160:	2240      	movs	r2, #64	; 0x40
 80a0162:	2100      	movs	r1, #0
 80a0164:	a806      	add	r0, sp, #24
 80a0166:	f001 feb2 	bl	80a1ece <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a016a:	2340      	movs	r3, #64	; 0x40
 80a016c:	aa06      	add	r2, sp, #24
 80a016e:	4621      	mov	r1, r4
 80a0170:	9400      	str	r4, [sp, #0]
 80a0172:	6868      	ldr	r0, [r5, #4]
 80a0174:	f000 fbb8 	bl	80a08e8 <network_get_hostname>
        return String(buf);
 80a0178:	a906      	add	r1, sp, #24
 80a017a:	a802      	add	r0, sp, #8
 80a017c:	f000 fe24 	bl	80a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0180:	9902      	ldr	r1, [sp, #8]
 80a0182:	4630      	mov	r0, r6
 80a0184:	f000 fd39 	bl	80a0bfa <_ZN5Print7printlnEPKc>
 80a0188:	a802      	add	r0, sp, #8
 80a018a:	f000 fdd6 	bl	80a0d3a <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a018e:	f001 f94f 	bl	80a1430 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0192:	4622      	mov	r2, r4
 80a0194:	4606      	mov	r6, r0
 80a0196:	4621      	mov	r1, r4
 80a0198:	6868      	ldr	r0, [r5, #4]
 80a019a:	f000 fb45 	bl	80a0828 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a019e:	1c81      	adds	r1, r0, #2
 80a01a0:	a806      	add	r0, sp, #24
 80a01a2:	f000 fc35 	bl	80a0a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01a6:	a906      	add	r1, sp, #24
 80a01a8:	4630      	mov	r0, r6
 80a01aa:	f000 fd30 	bl	80a0c0e <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a01ae:	f001 f93f 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a01b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01b6:	f001 f91b 	bl	80a13f0 <_ZN9USBSerial5beginEl>
    iVy = 0;
    iVz = 0;

 // setupImu();
 // updateTimer.SetCallback(OnTimer);
  }
 80a01ba:	b016      	add	sp, #88	; 0x58
 80a01bc:	bd70      	pop	{r4, r5, r6, pc}
 80a01be:	bf00      	nop
 80a01c0:	200005ec 	.word	0x200005ec
 80a01c4:	080a205c 	.word	0x080a205c
 80a01c8:	200000f8 	.word	0x200000f8
 80a01cc:	080a2062 	.word	0x080a2062

080a01d0 <_Z4sendv>:

//updateTimer.Update();
send();
}

void send(){
 80a01d0:	b530      	push	{r4, r5, lr}
   //my computer IP address: 132.205.229.249
   //172.31.120.192.
  IPAddress ipAddress(172,31,120,192);
 80a01d2:	23c0      	movs	r3, #192	; 0xc0

//updateTimer.Update();
send();
}

void send(){
 80a01d4:	b0a9      	sub	sp, #164	; 0xa4
   //my computer IP address: 132.205.229.249
   //172.31.120.192.
  IPAddress ipAddress(172,31,120,192);
 80a01d6:	221f      	movs	r2, #31
 80a01d8:	9300      	str	r3, [sp, #0]
 80a01da:	21ac      	movs	r1, #172	; 0xac
 80a01dc:	2378      	movs	r3, #120	; 0x78
 80a01de:	a807      	add	r0, sp, #28
 80a01e0:	f000 fc3e 	bl	80a0a60 <_ZN9IPAddressC1Ehhhh>
// if(speedInt){
// message = "still";
// }else{
//   message = "/move";
// }
String message = "testing";
 80a01e4:	4914      	ldr	r1, [pc, #80]	; (80a0238 <_Z4sendv+0x68>)
 80a01e6:	a803      	add	r0, sp, #12
 80a01e8:	f000 fdee 	bl	80a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>
    OSCMessage outMessage(message);
 80a01ec:	9903      	ldr	r1, [sp, #12]
 80a01ee:	a813      	add	r0, sp, #76	; 0x4c
 80a01f0:	f000 f8d8 	bl	80a03a4 <_ZN10OSCMessageC1EPKc>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a01f4:	4b11      	ldr	r3, [pc, #68]	; (80a023c <_Z4sendv+0x6c>)
 80a01f6:	ac0e      	add	r4, sp, #56	; 0x38
 80a01f8:	ad08      	add	r5, sp, #32
 80a01fa:	930d      	str	r3, [sp, #52]	; 0x34
 80a01fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0200:	682b      	ldr	r3, [r5, #0]
  outMessage.send(udp, ipAddress, outPort);
 80a0202:	aa0d      	add	r2, sp, #52	; 0x34
 80a0204:	7023      	strb	r3, [r4, #0]
 80a0206:	490e      	ldr	r1, [pc, #56]	; (80a0240 <_Z4sendv+0x70>)
 80a0208:	f641 3358 	movw	r3, #7000	; 0x1b58
 80a020c:	a813      	add	r0, sp, #76	; 0x4c
 80a020e:	f000 f90b 	bl	80a0428 <_ZN10OSCMessage4sendER3UDP9IPAddressj>

//  udp.stop();
 
  Serial.println("in send method");
 80a0212:	f001 f90d 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a0216:	490b      	ldr	r1, [pc, #44]	; (80a0244 <_Z4sendv+0x74>)
 80a0218:	f000 fcef 	bl	80a0bfa <_ZN5Print7printlnEPKc>
 
  Serial.println(speedInt);
 80a021c:	f001 f908 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a0220:	220a      	movs	r2, #10
 80a0222:	2100      	movs	r1, #0
 80a0224:	f000 fd4b 	bl	80a0cbe <_ZN5Print7printlnEii>
// message = "still";
// }else{
//   message = "/move";
// }
String message = "testing";
    OSCMessage outMessage(message);
 80a0228:	a813      	add	r0, sp, #76	; 0x4c
 80a022a:	f000 f8df 	bl	80a03ec <_ZN10OSCMessageD1Ev>
// if(speedInt){
// message = "still";
// }else{
//   message = "/move";
// }
String message = "testing";
 80a022e:	a803      	add	r0, sp, #12
 80a0230:	f000 fd83 	bl	80a0d3a <_ZN6StringD1Ev>
//  udp.stop();
 
  Serial.println("in send method");
 
  Serial.println(speedInt);
}
 80a0234:	b029      	add	sp, #164	; 0xa4
 80a0236:	bd30      	pop	{r4, r5, pc}
 80a0238:	080a2073 	.word	0x080a2073
 80a023c:	080a20e4 	.word	0x080a20e4
 80a0240:	200000f8 	.word	0x200000f8
 80a0244:	080a207b 	.word	0x080a207b

080a0248 <loop>:
void loop() {

//getMouvement();

//updateTimer.Update();
send();
 80a0248:	f7ff bfc2 	b.w	80a01d0 <_Z4sendv>

080a024c <_GLOBAL__sub_I_SystemMode>:
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
 80a024c:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a024e:	f000 f99d 	bl	80a058c <HAL_Pin_Map>
#include "LSM9DS1_Types.h"
#include "simple-OSC.h"
#include "math.h"
#include "SparkCorePolledTimer.h"

SYSTEM_THREAD(ENABLED);
 80a0252:	2100      	movs	r1, #0
 80a0254:	2001      	movs	r0, #1
 80a0256:	f000 fac3 	bl	80a07e0 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a025a:	4b13      	ldr	r3, [pc, #76]	; (80a02a8 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a025c:	2200      	movs	r2, #0
 80a025e:	701a      	strb	r2, [r3, #0]
 80a0260:	805a      	strh	r2, [r3, #2]
 80a0262:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0266:	4c11      	ldr	r4, [pc, #68]	; (80a02ac <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0268:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a026a:	2002      	movs	r0, #2
 80a026c:	f000 fab0 	bl	80a07d0 <set_system_mode>
 80a0270:	4d0f      	ldr	r5, [pc, #60]	; (80a02b0 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a0272:	4620      	mov	r0, r4
 80a0274:	f000 fbbe 	bl	80a09f4 <_ZN9IPAddressC1Ev>
 80a0278:	4620      	mov	r0, r4
int port;
UDP udp;
 80a027a:	4c0e      	ldr	r4, [pc, #56]	; (80a02b4 <_GLOBAL__sub_I_SystemMode+0x68>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a027c:	462a      	mov	r2, r5
 80a027e:	490e      	ldr	r1, [pc, #56]	; (80a02b8 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0280:	f001 fadc 	bl	80a183c <__aeabi_atexit>
int port;
UDP udp;
 80a0284:	4620      	mov	r0, r4
 80a0286:	f000 ff5f 	bl	80a1148 <_ZN3UDPC1Ev>
 80a028a:	462a      	mov	r2, r5
 80a028c:	490b      	ldr	r1, [pc, #44]	; (80a02bc <_GLOBAL__sub_I_SystemMode+0x70>)
 80a028e:	4620      	mov	r0, r4
 80a0290:	f001 fad4 	bl	80a183c <__aeabi_atexit>

LSM9DS1 imu;
 80a0294:	480a      	ldr	r0, [pc, #40]	; (80a02c0 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0296:	f000 f875 	bl	80a0384 <_ZN7LSM9DS1C1Ev>
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
 80a029a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(500);  //Create a timer object and set it's timeout in milliseconds
 80a029e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80a02a2:	4808      	ldr	r0, [pc, #32]	; (80a02c4 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a02a4:	f000 b816 	b.w	80a02d4 <_ZN20SparkCorePolledTimerC1Em>
 80a02a8:	2000006c 	.word	0x2000006c
 80a02ac:	20000144 	.word	0x20000144
 80a02b0:	20000068 	.word	0x20000068
 80a02b4:	200000f8 	.word	0x200000f8
 80a02b8:	080a00b3 	.word	0x080a00b3
 80a02bc:	080a00b5 	.word	0x080a00b5
 80a02c0:	20000074 	.word	0x20000074
 80a02c4:	2000015c 	.word	0x2000015c

080a02c8 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a02c8:	b510      	push	{r4, lr}
 80a02ca:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a02cc:	f000 f956 	bl	80a057c <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a02d0:	6020      	str	r0, [r4, #0]
 80a02d2:	bd10      	pop	{r4, pc}

080a02d4 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a02d4:	b538      	push	{r3, r4, r5, lr}
 80a02d6:	4604      	mov	r4, r0
 80a02d8:	460d      	mov	r5, r1
    Reset();
 80a02da:	f7ff fff5 	bl	80a02c8 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a02de:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a02e0:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a02e2:	60a3      	str	r3, [r4, #8]
}
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	bd38      	pop	{r3, r4, r5, pc}

080a02e8 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a02e8:	f000 b950 	b.w	80a058c <HAL_Pin_Map>

080a02ec <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a02ec:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a02ee:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a02f0:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a02f2:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a02f4:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a02f6:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a02f8:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a02fa:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a02fc:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a02fe:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0300:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0302:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0304:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0306:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0308:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a030c:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a030e:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0310:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a0312:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0314:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0316:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0318:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a031a:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a031c:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a031e:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0320:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a0322:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0324:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0328:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a032a:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a032c:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a032e:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0330:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a0332:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0334:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0336:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0338:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a033a:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a033c:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a033e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a0342:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0344:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0348:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a034c:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a034e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a0352:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0356:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a035a:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a035c:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a035e:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a0360:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a0362:	6565      	str	r5, [r4, #84]	; 0x54
 80a0364:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0368:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a036c:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a0370:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0374:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0378:	d1f0      	bne.n	80a035c <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a037a:	f04f 0300 	mov.w	r3, #0
 80a037e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a0382:	bd30      	pop	{r4, r5, pc}

080a0384 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0384:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0386:	231e      	movs	r3, #30
 80a0388:	226b      	movs	r2, #107	; 0x6b
 80a038a:	2101      	movs	r1, #1
 80a038c:	f7ff ffae 	bl	80a02ec <_ZN7LSM9DS14initE14interface_modehh>
}
 80a0390:	bd10      	pop	{r4, pc}

080a0392 <_GLOBAL__sub_I_magSensitivity>:
 80a0392:	f000 b8fb 	b.w	80a058c <HAL_Pin_Map>

080a0396 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a0396:	2300      	movs	r3, #0
 80a0398:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a039a:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a039c:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a039e:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a03a0:	6503      	str	r3, [r0, #80]	; 0x50
 80a03a2:	4770      	bx	lr

080a03a4 <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage()
{
    setupMessage();
}

OSCMessage::OSCMessage(const char * address)
 80a03a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03a6:	4604      	mov	r4, r0
 80a03a8:	460f      	mov	r7, r1
 80a03aa:	4d0f      	ldr	r5, [pc, #60]	; (80a03e8 <_ZN10OSCMessageC1EPKc+0x44>)
 80a03ac:	3008      	adds	r0, #8
 80a03ae:	4629      	mov	r1, r5
 80a03b0:	f000 fd0a 	bl	80a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03b4:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80a03b8:	4629      	mov	r1, r5
 80a03ba:	f104 0018 	add.w	r0, r4, #24
 80a03be:	f000 fd03 	bl	80a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03c2:	4629      	mov	r1, r5
 80a03c4:	4630      	mov	r0, r6
 80a03c6:	f000 fcff 	bl	80a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03ca:	4629      	mov	r1, r5
 80a03cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a03d0:	f000 fcfa 	bl	80a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a03d4:	4620      	mov	r0, r4
 80a03d6:	f7ff ffde 	bl	80a0396 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
 80a03da:	4639      	mov	r1, r7
 80a03dc:	4630      	mov	r0, r6
 80a03de:	f000 fd06 	bl	80a0dee <_ZN6StringaSEPKc>
}
 80a03e2:	4620      	mov	r0, r4
 80a03e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a03e6:	bf00      	nop
 80a03e8:	080a219a 	.word	0x080a219a

080a03ec <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a03ec:	b510      	push	{r4, lr}
 80a03ee:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a03f0:	6800      	ldr	r0, [r0, #0]
 80a03f2:	f000 fa89 	bl	80a0908 <free>
    free(inputDatas);
 80a03f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a03f8:	f000 fa86 	bl	80a0908 <free>
    free(outputDatas);
 80a03fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a03fe:	f000 fa83 	bl	80a0908 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a0402:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0406:	f000 fc98 	bl	80a0d3a <_ZN6StringD1Ev>
 80a040a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a040e:	f000 fc94 	bl	80a0d3a <_ZN6StringD1Ev>
 80a0412:	f104 0018 	add.w	r0, r4, #24
 80a0416:	f000 fc90 	bl	80a0d3a <_ZN6StringD1Ev>
 80a041a:	f104 0008 	add.w	r0, r4, #8
 80a041e:	f000 fc8c 	bl	80a0d3a <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a0422:	4620      	mov	r0, r4
 80a0424:	bd10      	pop	{r4, pc}
	...

080a0428 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a0428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a042c:	b08b      	sub	sp, #44	; 0x2c
 80a042e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80a0432:	af00      	add	r7, sp, #0
 80a0434:	4681      	mov	r9, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a0436:	4640      	mov	r0, r8
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a0438:	460e      	mov	r6, r1
 80a043a:	60fa      	str	r2, [r7, #12]
 80a043c:	60bb      	str	r3, [r7, #8]
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a043e:	f001 fd77 	bl	80a1f30 <strlen>
 80a0442:	4605      	mov	r5, r0
 80a0444:	3003      	adds	r0, #3
 80a0446:	0880      	lsrs	r0, r0, #2
 80a0448:	f001 fc8a 	bl	80a1d60 <__aeabi_ui2d>
 80a044c:	2200      	movs	r2, #0
 80a044e:	4b40      	ldr	r3, [pc, #256]	; (80a0550 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a0450:	f001 fb4a 	bl	80a1ae8 <__adddf3>
 80a0454:	f001 fcfa 	bl	80a1e4c <__aeabi_d2iz>
 80a0458:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
 80a045c:	0084      	lsls	r4, r0, #2
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a045e:	4650      	mov	r0, sl
 80a0460:	f001 fd66 	bl	80a1f30 <strlen>
{
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
    int addresszeroCount = addressBitCount-strlen(outputAddress);
 80a0464:	1b65      	subs	r5, r4, r5
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a0466:	3401      	adds	r4, #1
 80a0468:	4683      	mov	fp, r0
 80a046a:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a046c:	3001      	adds	r0, #1
 80a046e:	0880      	lsrs	r0, r0, #2
 80a0470:	f001 fc76 	bl	80a1d60 <__aeabi_ui2d>
 80a0474:	2200      	movs	r2, #0
 80a0476:	4b36      	ldr	r3, [pc, #216]	; (80a0550 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a0478:	f001 fb36 	bl	80a1ae8 <__adddf3>
 80a047c:	f001 fce6 	bl	80a1e4c <__aeabi_d2iz>
 80a0480:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a0484:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a0488:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
 80a048c:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
 80a048e:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
 80a0490:	1de2      	adds	r2, r4, #7
 80a0492:	f022 0207 	bic.w	r2, r2, #7
 80a0496:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
 80a049a:	2100      	movs	r1, #0
 80a049c:	4622      	mov	r2, r4
 80a049e:	4668      	mov	r0, sp
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a04a0:	603b      	str	r3, [r7, #0]
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
    memset(outputBuffer,nullChar,outputBufferSize);
 80a04a2:	f001 fd14 	bl	80a1ece <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
 80a04a6:	4640      	mov	r0, r8
 80a04a8:	f001 fd42 	bl	80a1f30 <strlen>
 80a04ac:	4641      	mov	r1, r8
 80a04ae:	4602      	mov	r2, r0
 80a04b0:	4668      	mov	r0, sp
 80a04b2:	f001 fd01 	bl	80a1eb8 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
 80a04b6:	4640      	mov	r0, r8
 80a04b8:	f001 fd3a 	bl	80a1f30 <strlen>
 80a04bc:	eb0d 0205 	add.w	r2, sp, r5
 80a04c0:	212c      	movs	r1, #44	; 0x2c
 80a04c2:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
 80a04c4:	4640      	mov	r0, r8
 80a04c6:	f001 fd33 	bl	80a1f30 <strlen>
 80a04ca:	6078      	str	r0, [r7, #4]
 80a04cc:	4650      	mov	r0, sl
 80a04ce:	f001 fd2f 	bl	80a1f30 <strlen>
 80a04d2:	687a      	ldr	r2, [r7, #4]
 80a04d4:	4651      	mov	r1, sl
 80a04d6:	f102 0e01 	add.w	lr, r2, #1
 80a04da:	44ae      	add	lr, r5
 80a04dc:	4602      	mov	r2, r0
 80a04de:	eb0d 000e 	add.w	r0, sp, lr
 80a04e2:	f001 fce9 	bl	80a1eb8 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
 80a04e6:	4640      	mov	r0, r8
 80a04e8:	f001 fd22 	bl	80a1f30 <strlen>
 80a04ec:	4680      	mov	r8, r0
 80a04ee:	4650      	mov	r0, sl
 80a04f0:	f001 fd1e 	bl	80a1f30 <strlen>
 80a04f4:	4440      	add	r0, r8
 80a04f6:	3001      	adds	r0, #1
 80a04f8:	683b      	ldr	r3, [r7, #0]
 80a04fa:	4405      	add	r5, r0
 80a04fc:	eb05 000b 	add.w	r0, r5, fp
 80a0500:	461a      	mov	r2, r3
 80a0502:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
 80a0506:	4468      	add	r0, sp
 80a0508:	f001 fcd6 	bl	80a1eb8 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
 80a050c:	6833      	ldr	r3, [r6, #0]
 80a050e:	68fd      	ldr	r5, [r7, #12]
 80a0510:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a0514:	4b0f      	ldr	r3, [pc, #60]	; (80a0554 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x12c>)
 80a0516:	f107 0e14 	add.w	lr, r7, #20
 80a051a:	3504      	adds	r5, #4
 80a051c:	613b      	str	r3, [r7, #16]
 80a051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0520:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a0524:	682b      	ldr	r3, [r5, #0]
 80a0526:	893a      	ldrh	r2, [r7, #8]
 80a0528:	f88e 3000 	strb.w	r3, [lr]
 80a052c:	f107 0110 	add.w	r1, r7, #16
 80a0530:	4630      	mov	r0, r6
 80a0532:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
 80a0534:	6833      	ldr	r3, [r6, #0]
 80a0536:	4622      	mov	r2, r4
 80a0538:	4669      	mov	r1, sp
 80a053a:	68db      	ldr	r3, [r3, #12]
 80a053c:	4630      	mov	r0, r6
 80a053e:	4798      	blx	r3
    udp.endPacket();
 80a0540:	6833      	ldr	r3, [r6, #0]
 80a0542:	4630      	mov	r0, r6
 80a0544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0546:	4798      	blx	r3
}
 80a0548:	372c      	adds	r7, #44	; 0x2c
 80a054a:	46bd      	mov	sp, r7
 80a054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0550:	3fe00000 	.word	0x3fe00000
 80a0554:	080a20e4 	.word	0x080a20e4

080a0558 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a0558:	f000 b818 	b.w	80a058c <HAL_Pin_Map>

080a055c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <os_mutex_create+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601d0 	.word	0x080601d0

080a056c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <HAL_RNG_GetRandomNumber+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	685b      	ldr	r3, [r3, #4]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	0806019c 	.word	0x0806019c

080a057c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	695b      	ldr	r3, [r3, #20]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	0806019c 	.word	0x0806019c

080a058c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <HAL_Pin_Map+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	681b      	ldr	r3, [r3, #0]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601b0 	.word	0x080601b0

080a059c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <HAL_Pin_Mode+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	689b      	ldr	r3, [r3, #8]
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601b0 	.word	0x080601b0

080a05ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <HAL_Get_Pin_Mode+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	68db      	ldr	r3, [r3, #12]
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601b0 	.word	0x080601b0

080a05bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <HAL_GPIO_Write+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	691b      	ldr	r3, [r3, #16]
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601b0 	.word	0x080601b0

080a05cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <HAL_I2C_Write_Data+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601ac 	.word	0x080601ac

080a05dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <HAL_I2C_Available_Data+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601ac 	.word	0x080601ac

080a05ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <HAL_I2C_Read_Data+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601ac 	.word	0x080601ac

080a05fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <HAL_I2C_Peek_Data+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601ac 	.word	0x080601ac

080a060c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <HAL_I2C_Flush_Data+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601ac 	.word	0x080601ac

080a061c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <HAL_I2C_Is_Enabled+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601ac 	.word	0x080601ac

080a062c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b03      	ldr	r3, [pc, #12]	; (80a063c <HAL_I2C_Init+0x10>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0636:	9301      	str	r3, [sp, #4]
 80a0638:	bd08      	pop	{r3, pc}
 80a063a:	0000      	.short	0x0000
 80a063c:	080601ac 	.word	0x080601ac

080a0640 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <socket_handle_valid+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	685b      	ldr	r3, [r3, #4]
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601bc 	.word	0x080601bc

080a0650 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <socket_create+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	689b      	ldr	r3, [r3, #8]
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601bc 	.word	0x080601bc

080a0660 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <socket_receivefrom+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	695b      	ldr	r3, [r3, #20]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601bc 	.word	0x080601bc

080a0670 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <socket_sendto+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	69db      	ldr	r3, [r3, #28]
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601bc 	.word	0x080601bc

080a0680 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <socket_close+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	6a1b      	ldr	r3, [r3, #32]
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601bc 	.word	0x080601bc

080a0690 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <socket_handle_invalid+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601bc 	.word	0x080601bc

080a06a0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <HAL_SPI_Init+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	69db      	ldr	r3, [r3, #28]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601b4 	.word	0x080601b4

080a06b0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <HAL_SPI_Is_Enabled+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	6a1b      	ldr	r3, [r3, #32]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601b4 	.word	0x080601b4

080a06c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <HAL_USART_Init+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	699b      	ldr	r3, [r3, #24]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601c4 	.word	0x080601c4

080a06d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <HAL_USART_Write_Data+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601c4 	.word	0x080601c4

080a06e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <HAL_USART_Available_Data+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601c4 	.word	0x080601c4

080a06f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <HAL_USART_Read_Data+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c4 	.word	0x080601c4

080a0700 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <HAL_USART_Peek_Data+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c4 	.word	0x080601c4

080a0710 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <HAL_USART_Flush_Data+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601c4 	.word	0x080601c4

080a0720 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <HAL_USART_Is_Enabled+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601c4 	.word	0x080601c4

080a0730 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601c4 	.word	0x080601c4

080a0740 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <HAL_USB_USART_Init+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	681b      	ldr	r3, [r3, #0]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601d8 	.word	0x080601d8

080a0750 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <HAL_USB_USART_Begin+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	685b      	ldr	r3, [r3, #4]
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601d8 	.word	0x080601d8

080a0760 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <HAL_USB_USART_Available_Data+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	691b      	ldr	r3, [r3, #16]
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601d8 	.word	0x080601d8

080a0770 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	695b      	ldr	r3, [r3, #20]
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601d8 	.word	0x080601d8

080a0780 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <HAL_USB_USART_Receive_Data+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	699b      	ldr	r3, [r3, #24]
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601d8 	.word	0x080601d8

080a0790 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <HAL_USB_USART_Send_Data+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	69db      	ldr	r3, [r3, #28]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601d8 	.word	0x080601d8

080a07a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <HAL_USB_USART_Flush_Data+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6a1b      	ldr	r3, [r3, #32]
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601d8 	.word	0x080601d8

080a07b0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <HAL_USB_USART_Is_Enabled+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601d8 	.word	0x080601d8

080a07c0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <inet_gethostbyname+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601c0 	.word	0x080601c0

080a07d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <set_system_mode+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	685b      	ldr	r3, [r3, #4]
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601a4 	.word	0x080601a4

080a07e0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <system_thread_set_state+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601a4 	.word	0x080601a4

080a07f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b03      	ldr	r3, [pc, #12]	; (80a0800 <system_ctrl_set_app_request_handler+0x10>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a07fa:	9301      	str	r3, [sp, #4]
 80a07fc:	bd08      	pop	{r3, pc}
 80a07fe:	0000      	.short	0x0000
 80a0800:	080601a4 	.word	0x080601a4

080a0804 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b03      	ldr	r3, [pc, #12]	; (80a0814 <system_ctrl_set_result+0x10>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a080e:	9301      	str	r3, [sp, #4]
 80a0810:	bd08      	pop	{r3, pc}
 80a0812:	0000      	.short	0x0000
 80a0814:	080601a4 	.word	0x080601a4

080a0818 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601cc 	.word	0x080601cc

080a0828 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <network_config+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	681b      	ldr	r3, [r3, #0]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c8 	.word	0x080601c8

080a0838 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <network_connect+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	685b      	ldr	r3, [r3, #4]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601c8 	.word	0x080601c8

080a0848 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <network_connecting+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	689b      	ldr	r3, [r3, #8]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c8 	.word	0x080601c8

080a0858 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <network_disconnect+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	68db      	ldr	r3, [r3, #12]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c8 	.word	0x080601c8

080a0868 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <network_ready+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	691b      	ldr	r3, [r3, #16]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601c8 	.word	0x080601c8

080a0878 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <network_on+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	695b      	ldr	r3, [r3, #20]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601c8 	.word	0x080601c8

080a0888 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <network_off+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	699b      	ldr	r3, [r3, #24]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601c8 	.word	0x080601c8

080a0898 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <network_listen+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	69db      	ldr	r3, [r3, #28]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c8 	.word	0x080601c8

080a08a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <network_listening+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6a1b      	ldr	r3, [r3, #32]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601c8 	.word	0x080601c8

080a08b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <network_set_listen_timeout+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601c8 	.word	0x080601c8

080a08c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <network_get_listen_timeout+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601c8 	.word	0x080601c8

080a08d8 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <network_set_hostname+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601c8 	.word	0x080601c8

080a08e8 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <network_get_hostname+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601c8 	.word	0x080601c8

080a08f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <malloc+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	681b      	ldr	r3, [r3, #0]
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601a0 	.word	0x080601a0

080a0908 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <free+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	685b      	ldr	r3, [r3, #4]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601a0 	.word	0x080601a0

080a0918 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <realloc+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	689b      	ldr	r3, [r3, #8]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601a0 	.word	0x080601a0

080a0928 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0928:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a092a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a092c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a092e:	b113      	cbz	r3, 80a0936 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0930:	2203      	movs	r2, #3
 80a0932:	4601      	mov	r1, r0
 80a0934:	4798      	blx	r3
    }
 80a0936:	4620      	mov	r0, r4
 80a0938:	bd10      	pop	{r4, pc}

080a093a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a093a:	4770      	bx	lr

080a093c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a093e:	4606      	mov	r6, r0
 80a0940:	4615      	mov	r5, r2
 80a0942:	460c      	mov	r4, r1
 80a0944:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0946:	42bc      	cmp	r4, r7
 80a0948:	d006      	beq.n	80a0958 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a094a:	6833      	ldr	r3, [r6, #0]
 80a094c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0950:	689b      	ldr	r3, [r3, #8]
 80a0952:	4630      	mov	r0, r6
 80a0954:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0956:	e7f6      	b.n	80a0946 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0958:	4628      	mov	r0, r5
 80a095a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a095c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a095c:	2200      	movs	r2, #0
 80a095e:	7c00      	ldrb	r0, [r0, #16]
 80a0960:	f7ff be34 	b.w	80a05cc <HAL_I2C_Write_Data>

080a0964 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0964:	2100      	movs	r1, #0
 80a0966:	7c00      	ldrb	r0, [r0, #16]
 80a0968:	f7ff be38 	b.w	80a05dc <HAL_I2C_Available_Data>

080a096c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a096c:	2100      	movs	r1, #0
 80a096e:	7c00      	ldrb	r0, [r0, #16]
 80a0970:	f7ff be3c 	b.w	80a05ec <HAL_I2C_Read_Data>

080a0974 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0974:	2100      	movs	r1, #0
 80a0976:	7c00      	ldrb	r0, [r0, #16]
 80a0978:	f7ff be40 	b.w	80a05fc <HAL_I2C_Peek_Data>

080a097c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a097c:	2100      	movs	r1, #0
 80a097e:	7c00      	ldrb	r0, [r0, #16]
 80a0980:	f7ff be44 	b.w	80a060c <HAL_I2C_Flush_Data>

080a0984 <_ZN7TwoWireD0Ev>:
 80a0984:	b510      	push	{r4, lr}
 80a0986:	4604      	mov	r4, r0
 80a0988:	2114      	movs	r1, #20
 80a098a:	f000 ff5c 	bl	80a1846 <_ZdlPvj>
 80a098e:	4620      	mov	r0, r4
 80a0990:	bd10      	pop	{r4, pc}
	...

080a0994 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0994:	b510      	push	{r4, lr}
 80a0996:	4604      	mov	r4, r0
 80a0998:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a099e:	60a3      	str	r3, [r4, #8]
 80a09a0:	4b04      	ldr	r3, [pc, #16]	; (80a09b4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a09a2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a09a4:	7420      	strb	r0, [r4, #16]
 80a09a6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a09a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a09aa:	f7ff fe3f 	bl	80a062c <HAL_I2C_Init>

}
 80a09ae:	4620      	mov	r0, r4
 80a09b0:	bd10      	pop	{r4, pc}
 80a09b2:	bf00      	nop
 80a09b4:	080a20bc 	.word	0x080a20bc

080a09b8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a09b8:	2100      	movs	r1, #0
 80a09ba:	7c00      	ldrb	r0, [r0, #16]
 80a09bc:	f7ff be2e 	b.w	80a061c <HAL_I2C_Is_Enabled>

080a09c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a09c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09c2:	460f      	mov	r7, r1
 80a09c4:	f100 0608 	add.w	r6, r0, #8
 80a09c8:	1d05      	adds	r5, r0, #4
 80a09ca:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a09cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a09d0:	220a      	movs	r2, #10
 80a09d2:	4638      	mov	r0, r7
 80a09d4:	f000 f94f 	bl	80a0c76 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a09d8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a09da:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a09dc:	d007      	beq.n	80a09ee <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a09de:	2c00      	cmp	r4, #0
 80a09e0:	d0f4      	beq.n	80a09cc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a09e2:	212e      	movs	r1, #46	; 0x2e
 80a09e4:	4638      	mov	r0, r7
 80a09e6:	f000 f8f3 	bl	80a0bd0 <_ZN5Print5printEc>
 80a09ea:	4404      	add	r4, r0
 80a09ec:	e7ee      	b.n	80a09cc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a09f4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a09f4:	b510      	push	{r4, lr}
 80a09f6:	4604      	mov	r4, r0
 80a09f8:	4b04      	ldr	r3, [pc, #16]	; (80a0a0c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a09fa:	2211      	movs	r2, #17
 80a09fc:	f840 3b04 	str.w	r3, [r0], #4
 80a0a00:	2100      	movs	r1, #0
 80a0a02:	f001 fa64 	bl	80a1ece <memset>
{
    clear();
}
 80a0a06:	4620      	mov	r0, r4
 80a0a08:	bd10      	pop	{r4, pc}
 80a0a0a:	bf00      	nop
 80a0a0c:	080a20e4 	.word	0x080a20e4

080a0a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0a10:	4603      	mov	r3, r0
 80a0a12:	4a07      	ldr	r2, [pc, #28]	; (80a0a30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0a14:	b510      	push	{r4, lr}
 80a0a16:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0a1a:	f101 0210 	add.w	r2, r1, #16
 80a0a1e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0a22:	4291      	cmp	r1, r2
 80a0a24:	f843 4b04 	str.w	r4, [r3], #4
 80a0a28:	d1f9      	bne.n	80a0a1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0a2a:	780a      	ldrb	r2, [r1, #0]
 80a0a2c:	701a      	strb	r2, [r3, #0]
}
 80a0a2e:	bd10      	pop	{r4, pc}
 80a0a30:	080a20e4 	.word	0x080a20e4

080a0a34 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a34:	4a02      	ldr	r2, [pc, #8]	; (80a0a40 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0a36:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a38:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0a3a:	2204      	movs	r2, #4
 80a0a3c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0a3e:	4770      	bx	lr
 80a0a40:	080a20e4 	.word	0x080a20e4

080a0a44 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0a44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0a46:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0a4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0a4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0a52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0a56:	2304      	movs	r3, #4
 80a0a58:	6041      	str	r1, [r0, #4]
 80a0a5a:	7503      	strb	r3, [r0, #20]
 80a0a5c:	bd10      	pop	{r4, pc}
	...

080a0a60 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a62:	4d04      	ldr	r5, [pc, #16]	; (80a0a74 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0a64:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0a66:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0a6a:	9500      	str	r5, [sp, #0]
 80a0a6c:	f7ff ffea 	bl	80a0a44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0a70:	b003      	add	sp, #12
 80a0a72:	bd30      	pop	{r4, r5, pc}
 80a0a74:	080a20e4 	.word	0x080a20e4

080a0a78 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0a7a:	780d      	ldrb	r5, [r1, #0]
 80a0a7c:	788b      	ldrb	r3, [r1, #2]
 80a0a7e:	784a      	ldrb	r2, [r1, #1]
 80a0a80:	78c9      	ldrb	r1, [r1, #3]
 80a0a82:	9100      	str	r1, [sp, #0]
 80a0a84:	4629      	mov	r1, r5
 80a0a86:	f7ff ffdd 	bl	80a0a44 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0a8a:	b003      	add	sp, #12
 80a0a8c:	bd30      	pop	{r4, r5, pc}
	...

080a0a90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0a90:	4a01      	ldr	r2, [pc, #4]	; (80a0a98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a94:	601a      	str	r2, [r3, #0]
 80a0a96:	4770      	bx	lr
 80a0a98:	080a2166 	.word	0x080a2166
 80a0a9c:	20000168 	.word	0x20000168

080a0aa0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0aa0:	2300      	movs	r3, #0
 80a0aa2:	461a      	mov	r2, r3
 80a0aa4:	6840      	ldr	r0, [r0, #4]
 80a0aa6:	f7ff bec7 	b.w	80a0838 <network_connect>

080a0aaa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0aaa:	2200      	movs	r2, #0
 80a0aac:	2102      	movs	r1, #2
 80a0aae:	6840      	ldr	r0, [r0, #4]
 80a0ab0:	f7ff bed2 	b.w	80a0858 <network_disconnect>

080a0ab4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0ab4:	2200      	movs	r2, #0
 80a0ab6:	4611      	mov	r1, r2
 80a0ab8:	6840      	ldr	r0, [r0, #4]
 80a0aba:	f7ff bec5 	b.w	80a0848 <network_connecting>

080a0abe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0abe:	2200      	movs	r2, #0
 80a0ac0:	4611      	mov	r1, r2
 80a0ac2:	6840      	ldr	r0, [r0, #4]
 80a0ac4:	f7ff bed0 	b.w	80a0868 <network_ready>

080a0ac8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0ac8:	2300      	movs	r3, #0
 80a0aca:	461a      	mov	r2, r3
 80a0acc:	4619      	mov	r1, r3
 80a0ace:	6840      	ldr	r0, [r0, #4]
 80a0ad0:	f7ff bed2 	b.w	80a0878 <network_on>

080a0ad4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0ad4:	2300      	movs	r3, #0
 80a0ad6:	461a      	mov	r2, r3
 80a0ad8:	4619      	mov	r1, r3
 80a0ada:	6840      	ldr	r0, [r0, #4]
 80a0adc:	f7ff bed4 	b.w	80a0888 <network_off>

080a0ae0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0ae0:	2200      	movs	r2, #0
 80a0ae2:	f081 0101 	eor.w	r1, r1, #1
 80a0ae6:	6840      	ldr	r0, [r0, #4]
 80a0ae8:	f7ff bed6 	b.w	80a0898 <network_listen>

080a0aec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0aec:	2200      	movs	r2, #0
 80a0aee:	6840      	ldr	r0, [r0, #4]
 80a0af0:	f7ff bee2 	b.w	80a08b8 <network_set_listen_timeout>

080a0af4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0af4:	2200      	movs	r2, #0
 80a0af6:	4611      	mov	r1, r2
 80a0af8:	6840      	ldr	r0, [r0, #4]
 80a0afa:	f7ff bee5 	b.w	80a08c8 <network_get_listen_timeout>

080a0afe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0afe:	2200      	movs	r2, #0
 80a0b00:	4611      	mov	r1, r2
 80a0b02:	6840      	ldr	r0, [r0, #4]
 80a0b04:	f7ff bed0 	b.w	80a08a8 <network_listening>

080a0b08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0b08:	b570      	push	{r4, r5, r6, lr}
 80a0b0a:	4616      	mov	r6, r2
 80a0b0c:	b08e      	sub	sp, #56	; 0x38
 80a0b0e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0b10:	a808      	add	r0, sp, #32
 80a0b12:	f7ff ff6f 	bl	80a09f4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0b16:	2211      	movs	r2, #17
 80a0b18:	2100      	movs	r1, #0
 80a0b1a:	a803      	add	r0, sp, #12
 80a0b1c:	f001 f9d7 	bl	80a1ece <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0b20:	4630      	mov	r0, r6
 80a0b22:	f001 fa05 	bl	80a1f30 <strlen>
 80a0b26:	2500      	movs	r5, #0
 80a0b28:	4b0a      	ldr	r3, [pc, #40]	; (80a0b54 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0b2a:	9500      	str	r5, [sp, #0]
 80a0b2c:	b281      	uxth	r1, r0
 80a0b2e:	685b      	ldr	r3, [r3, #4]
 80a0b30:	aa03      	add	r2, sp, #12
 80a0b32:	4630      	mov	r0, r6
 80a0b34:	f7ff fe44 	bl	80a07c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b38:	b120      	cbz	r0, 80a0b44 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0b3a:	4629      	mov	r1, r5
 80a0b3c:	4620      	mov	r0, r4
 80a0b3e:	f7ff ff79 	bl	80a0a34 <_ZN9IPAddressC1Em>
 80a0b42:	e003      	b.n	80a0b4c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0b44:	a903      	add	r1, sp, #12
 80a0b46:	4620      	mov	r0, r4
 80a0b48:	f7ff ff62 	bl	80a0a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	b00e      	add	sp, #56	; 0x38
 80a0b50:	bd70      	pop	{r4, r5, r6, pc}
 80a0b52:	bf00      	nop
 80a0b54:	200005ec 	.word	0x200005ec

080a0b58 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0b58:	4b03      	ldr	r3, [pc, #12]	; (80a0b68 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0b5a:	4a04      	ldr	r2, [pc, #16]	; (80a0b6c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0b5c:	2804      	cmp	r0, #4
 80a0b5e:	bf0c      	ite	eq
 80a0b60:	4610      	moveq	r0, r2
 80a0b62:	4618      	movne	r0, r3
 80a0b64:	4770      	bx	lr
 80a0b66:	bf00      	nop
 80a0b68:	2000016c 	.word	0x2000016c
 80a0b6c:	200005ec 	.word	0x200005ec

080a0b70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b70:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0b72:	4a03      	ldr	r2, [pc, #12]	; (80a0b80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0b74:	601a      	str	r2, [r3, #0]
 80a0b76:	2200      	movs	r2, #0
 80a0b78:	605a      	str	r2, [r3, #4]
 80a0b7a:	4770      	bx	lr
 80a0b7c:	2000016c 	.word	0x2000016c
 80a0b80:	080a21dc 	.word	0x080a21dc

080a0b84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b86:	4606      	mov	r6, r0
 80a0b88:	460d      	mov	r5, r1
 80a0b8a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0b8c:	2400      	movs	r4, #0
  while (size--) {
 80a0b8e:	42bd      	cmp	r5, r7
 80a0b90:	d00c      	beq.n	80a0bac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0b92:	6833      	ldr	r3, [r6, #0]
 80a0b94:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0b98:	689b      	ldr	r3, [r3, #8]
 80a0b9a:	4630      	mov	r0, r6
 80a0b9c:	4798      	blx	r3
     if (chunk>=0)
 80a0b9e:	2800      	cmp	r0, #0
 80a0ba0:	db01      	blt.n	80a0ba6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ba2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0ba4:	e7f3      	b.n	80a0b8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0ba6:	2c00      	cmp	r4, #0
 80a0ba8:	bf08      	it	eq
 80a0baa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0bac:	4620      	mov	r0, r4
 80a0bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bb0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0bb0:	b570      	push	{r4, r5, r6, lr}
 80a0bb2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0bb4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0bb6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0bb8:	b149      	cbz	r1, 80a0bce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0bba:	f001 f9b9 	bl	80a1f30 <strlen>
 80a0bbe:	682b      	ldr	r3, [r5, #0]
 80a0bc0:	4602      	mov	r2, r0
 80a0bc2:	4621      	mov	r1, r4
 80a0bc4:	4628      	mov	r0, r5
    }
 80a0bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0bca:	68db      	ldr	r3, [r3, #12]
 80a0bcc:	4718      	bx	r3
    }
 80a0bce:	bd70      	pop	{r4, r5, r6, pc}

080a0bd0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0bd0:	6803      	ldr	r3, [r0, #0]
 80a0bd2:	689b      	ldr	r3, [r3, #8]
 80a0bd4:	4718      	bx	r3

080a0bd6 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a0bd6:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a0bd8:	680a      	ldr	r2, [r1, #0]
 80a0bda:	4601      	mov	r1, r0
 80a0bdc:	6812      	ldr	r2, [r2, #0]
 80a0bde:	4618      	mov	r0, r3
 80a0be0:	4710      	bx	r2

080a0be2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0be2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0be4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0be6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0be8:	f7ff fff2 	bl	80a0bd0 <_ZN5Print5printEc>
  n += print('\n');
 80a0bec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0bee:	4604      	mov	r4, r0
  n += print('\n');
 80a0bf0:	4628      	mov	r0, r5
 80a0bf2:	f7ff ffed 	bl	80a0bd0 <_ZN5Print5printEc>
  return n;
}
 80a0bf6:	4420      	add	r0, r4
 80a0bf8:	bd38      	pop	{r3, r4, r5, pc}

080a0bfa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0bfa:	b538      	push	{r3, r4, r5, lr}
 80a0bfc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0bfe:	f7ff ffd7 	bl	80a0bb0 <_ZN5Print5writeEPKc>
 80a0c02:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0c04:	4628      	mov	r0, r5
 80a0c06:	f7ff ffec 	bl	80a0be2 <_ZN5Print7printlnEv>
  return n;
}
 80a0c0a:	4420      	add	r0, r4
 80a0c0c:	bd38      	pop	{r3, r4, r5, pc}

080a0c0e <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0c0e:	b538      	push	{r3, r4, r5, lr}
 80a0c10:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0c12:	f7ff ffe0 	bl	80a0bd6 <_ZN5Print5printERK9Printable>
 80a0c16:	4604      	mov	r4, r0
   n += println();
 80a0c18:	4628      	mov	r0, r5
 80a0c1a:	f7ff ffe2 	bl	80a0be2 <_ZN5Print7printlnEv>
   return n;
 }
 80a0c1e:	4420      	add	r0, r4
 80a0c20:	bd38      	pop	{r3, r4, r5, pc}

080a0c22 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0c22:	2a01      	cmp	r2, #1
 80a0c24:	bf98      	it	ls
 80a0c26:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0c28:	b530      	push	{r4, r5, lr}
 80a0c2a:	460b      	mov	r3, r1
 80a0c2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0c2e:	2100      	movs	r1, #0
 80a0c30:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0c34:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0c38:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0c3c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0c40:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c42:	2b09      	cmp	r3, #9
 80a0c44:	bf94      	ite	ls
 80a0c46:	3330      	addls	r3, #48	; 0x30
 80a0c48:	3337      	addhi	r3, #55	; 0x37
 80a0c4a:	b2db      	uxtb	r3, r3
 80a0c4c:	4621      	mov	r1, r4
 80a0c4e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0c52:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0c54:	2d00      	cmp	r5, #0
 80a0c56:	d1ef      	bne.n	80a0c38 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0c58:	f7ff ffaa 	bl	80a0bb0 <_ZN5Print5writeEPKc>
}
 80a0c5c:	b00b      	add	sp, #44	; 0x2c
 80a0c5e:	bd30      	pop	{r4, r5, pc}

080a0c60 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0c60:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0c62:	b922      	cbnz	r2, 80a0c6e <_ZN5Print5printEmi+0xe>
 80a0c64:	6803      	ldr	r3, [r0, #0]
 80a0c66:	b2c9      	uxtb	r1, r1
 80a0c68:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0c6a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0c6c:	4718      	bx	r3
  else return printNumber(n, base);
 80a0c6e:	b2d2      	uxtb	r2, r2
}
 80a0c70:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0c72:	f7ff bfd6 	b.w	80a0c22 <_ZN5Print11printNumberEmh>

080a0c76 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0c76:	f7ff bff3 	b.w	80a0c60 <_ZN5Print5printEmi>

080a0c7a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c7e:	4607      	mov	r7, r0
 80a0c80:	460e      	mov	r6, r1
  if (base == 0) {
 80a0c82:	4615      	mov	r5, r2
 80a0c84:	b92a      	cbnz	r2, 80a0c92 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0c8a:	6803      	ldr	r3, [r0, #0]
 80a0c8c:	b2c9      	uxtb	r1, r1
 80a0c8e:	689b      	ldr	r3, [r3, #8]
 80a0c90:	4718      	bx	r3
  } else if (base == 10) {
 80a0c92:	2a0a      	cmp	r2, #10
 80a0c94:	d102      	bne.n	80a0c9c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0c96:	2900      	cmp	r1, #0
 80a0c98:	da01      	bge.n	80a0c9e <_ZN5Print5printEli+0x24>
 80a0c9a:	e004      	b.n	80a0ca6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0c9c:	b2d2      	uxtb	r2, r2
  }
}
 80a0c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0ca2:	f7ff bfbe 	b.w	80a0c22 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0ca6:	212d      	movs	r1, #45	; 0x2d
 80a0ca8:	f7ff ff92 	bl	80a0bd0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0cac:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0cae:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0cb0:	4271      	negs	r1, r6
 80a0cb2:	4638      	mov	r0, r7
 80a0cb4:	f7ff ffb5 	bl	80a0c22 <_ZN5Print11printNumberEmh>
 80a0cb8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0cbe <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a0cbe:	b538      	push	{r3, r4, r5, lr}
 80a0cc0:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0cc2:	f7ff ffda 	bl	80a0c7a <_ZN5Print5printEli>
 80a0cc6:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a0cc8:	4628      	mov	r0, r5
 80a0cca:	f7ff ff8a 	bl	80a0be2 <_ZN5Print7printlnEv>
  return n;
}
 80a0cce:	4420      	add	r0, r4
 80a0cd0:	bd38      	pop	{r3, r4, r5, pc}

080a0cd2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0cd2:	b510      	push	{r4, lr}
 80a0cd4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0cd6:	f7ff fe27 	bl	80a0928 <_ZNSt14_Function_baseD1Ev>
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	bd10      	pop	{r4, pc}
	...

080a0ce0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ce0:	4803      	ldr	r0, [pc, #12]	; (80a0cf0 <_GLOBAL__sub_I_RGB+0x10>)
 80a0ce2:	2300      	movs	r3, #0
 80a0ce4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ce6:	4a03      	ldr	r2, [pc, #12]	; (80a0cf4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0ce8:	4903      	ldr	r1, [pc, #12]	; (80a0cf8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0cea:	f000 bda7 	b.w	80a183c <__aeabi_atexit>
 80a0cee:	bf00      	nop
 80a0cf0:	20000174 	.word	0x20000174
 80a0cf4:	20000068 	.word	0x20000068
 80a0cf8:	080a0cd3 	.word	0x080a0cd3

080a0cfc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0cfc:	4770      	bx	lr

080a0cfe <_ZN8SPIClassD0Ev>:
 80a0cfe:	b510      	push	{r4, lr}
 80a0d00:	4604      	mov	r4, r0
 80a0d02:	2110      	movs	r1, #16
 80a0d04:	f000 fd9f 	bl	80a1846 <_ZdlPvj>
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	bd10      	pop	{r4, pc}

080a0d0c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0d0c:	b570      	push	{r4, r5, r6, lr}
 80a0d0e:	4604      	mov	r4, r0
 80a0d10:	460e      	mov	r6, r1
 80a0d12:	4b07      	ldr	r3, [pc, #28]	; (80a0d30 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0d14:	2500      	movs	r5, #0
 80a0d16:	6003      	str	r3, [r0, #0]
 80a0d18:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0d1c:	f7ff fc1e 	bl	80a055c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0d20:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0d22:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0d24:	f7ff fcbc 	bl	80a06a0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0d28:	60a5      	str	r5, [r4, #8]
}
 80a0d2a:	4620      	mov	r0, r4
 80a0d2c:	bd70      	pop	{r4, r5, r6, pc}
 80a0d2e:	bf00      	nop
 80a0d30:	080a2210 	.word	0x080a2210

080a0d34 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0d34:	7900      	ldrb	r0, [r0, #4]
 80a0d36:	f7ff bcbb 	b.w	80a06b0 <HAL_SPI_Is_Enabled>

080a0d3a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0d3a:	b510      	push	{r4, lr}
 80a0d3c:	4604      	mov	r4, r0
{
	free(buffer);
 80a0d3e:	6800      	ldr	r0, [r0, #0]
 80a0d40:	f7ff fde2 	bl	80a0908 <free>
}
 80a0d44:	4620      	mov	r0, r4
 80a0d46:	bd10      	pop	{r4, pc}

080a0d48 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0d48:	b510      	push	{r4, lr}
 80a0d4a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0d4c:	6800      	ldr	r0, [r0, #0]
 80a0d4e:	b108      	cbz	r0, 80a0d54 <_ZN6String10invalidateEv+0xc>
 80a0d50:	f7ff fdda 	bl	80a0908 <free>
	buffer = NULL;
 80a0d54:	2300      	movs	r3, #0
 80a0d56:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0d58:	60a3      	str	r3, [r4, #8]
 80a0d5a:	6063      	str	r3, [r4, #4]
 80a0d5c:	bd10      	pop	{r4, pc}

080a0d5e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0d5e:	b538      	push	{r3, r4, r5, lr}
 80a0d60:	4604      	mov	r4, r0
 80a0d62:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0d64:	6800      	ldr	r0, [r0, #0]
 80a0d66:	3101      	adds	r1, #1
 80a0d68:	f7ff fdd6 	bl	80a0918 <realloc>
	if (newbuffer) {
 80a0d6c:	b110      	cbz	r0, 80a0d74 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0d6e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0d72:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0d74:	bd38      	pop	{r3, r4, r5, pc}

080a0d76 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d76:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0d78:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d7a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0d7c:	b113      	cbz	r3, 80a0d84 <_ZN6String7reserveEj+0xe>
 80a0d7e:	6843      	ldr	r3, [r0, #4]
 80a0d80:	428b      	cmp	r3, r1
 80a0d82:	d207      	bcs.n	80a0d94 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	f7ff ffea 	bl	80a0d5e <_ZN6String12changeBufferEj>
 80a0d8a:	b120      	cbz	r0, 80a0d96 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0d8c:	68a3      	ldr	r3, [r4, #8]
 80a0d8e:	b90b      	cbnz	r3, 80a0d94 <_ZN6String7reserveEj+0x1e>
 80a0d90:	6822      	ldr	r2, [r4, #0]
 80a0d92:	7013      	strb	r3, [r2, #0]
 80a0d94:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0d96:	bd10      	pop	{r4, pc}

080a0d98 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d98:	b570      	push	{r4, r5, r6, lr}
 80a0d9a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0d9c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d9e:	4604      	mov	r4, r0
 80a0da0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0da2:	f7ff ffe8 	bl	80a0d76 <_ZN6String7reserveEj>
 80a0da6:	b918      	cbnz	r0, 80a0db0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0da8:	4620      	mov	r0, r4
 80a0daa:	f7ff ffcd 	bl	80a0d48 <_ZN6String10invalidateEv>
		return *this;
 80a0dae:	e009      	b.n	80a0dc4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0db0:	462a      	mov	r2, r5
 80a0db2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0db4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0db6:	6820      	ldr	r0, [r4, #0]
 80a0db8:	f001 f87e 	bl	80a1eb8 <memcpy>
	buffer[len] = 0;
 80a0dbc:	6822      	ldr	r2, [r4, #0]
 80a0dbe:	68a3      	ldr	r3, [r4, #8]
 80a0dc0:	2100      	movs	r1, #0
 80a0dc2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0dc4:	4620      	mov	r0, r4
 80a0dc6:	bd70      	pop	{r4, r5, r6, pc}

080a0dc8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0dc8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0dca:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0dcc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0dce:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0dd0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0dd2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0dd4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0dd6:	460d      	mov	r5, r1
 80a0dd8:	b139      	cbz	r1, 80a0dea <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0dda:	4608      	mov	r0, r1
 80a0ddc:	f001 f8a8 	bl	80a1f30 <strlen>
 80a0de0:	4629      	mov	r1, r5
 80a0de2:	4602      	mov	r2, r0
 80a0de4:	4620      	mov	r0, r4
 80a0de6:	f7ff ffd7 	bl	80a0d98 <_ZN6String4copyEPKcj>
}
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	bd38      	pop	{r3, r4, r5, pc}

080a0dee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0dee:	b538      	push	{r3, r4, r5, lr}
 80a0df0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0df2:	460c      	mov	r4, r1
 80a0df4:	b141      	cbz	r1, 80a0e08 <_ZN6StringaSEPKc+0x1a>
 80a0df6:	4608      	mov	r0, r1
 80a0df8:	f001 f89a 	bl	80a1f30 <strlen>
 80a0dfc:	4621      	mov	r1, r4
 80a0dfe:	4602      	mov	r2, r0
 80a0e00:	4628      	mov	r0, r5
 80a0e02:	f7ff ffc9 	bl	80a0d98 <_ZN6String4copyEPKcj>
 80a0e06:	e001      	b.n	80a0e0c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0e08:	f7ff ff9e 	bl	80a0d48 <_ZN6String10invalidateEv>

	return *this;
}
 80a0e0c:	4628      	mov	r0, r5
 80a0e0e:	bd38      	pop	{r3, r4, r5, pc}

080a0e10 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0e14:	4b03      	ldr	r3, [pc, #12]	; (80a0e24 <_GLOBAL__sub_I_System+0x14>)
 80a0e16:	2000      	movs	r0, #0
 80a0e18:	7018      	strb	r0, [r3, #0]
 80a0e1a:	8058      	strh	r0, [r3, #2]
 80a0e1c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e1e:	f7ff bcd7 	b.w	80a07d0 <set_system_mode>
 80a0e22:	bf00      	nop
 80a0e24:	20000184 	.word	0x20000184

080a0e28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0e28:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0e2a:	681a      	ldr	r2, [r3, #0]
 80a0e2c:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0e2e:	601a      	str	r2, [r3, #0]
 80a0e30:	4770      	bx	lr
 80a0e32:	bf00      	nop
 80a0e34:	20000000 	.word	0x20000000
 80a0e38:	2000018c 	.word	0x2000018c

080a0e3c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0e3c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0e3e:	6804      	ldr	r4, [r0, #0]
 80a0e40:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0e42:	46a4      	mov	ip, r4
    }
 80a0e44:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0e46:	4760      	bx	ip

080a0e48 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0e48:	6803      	ldr	r3, [r0, #0]
 80a0e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e4c:	4718      	bx	r3

080a0e4e <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0e4e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0e50:	4770      	bx	lr

080a0e52 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0e52:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0e54:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0e56:	1a10      	subs	r0, r2, r0
 80a0e58:	4770      	bx	lr

080a0e5a <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0e5a:	b513      	push	{r0, r1, r4, lr}
 80a0e5c:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0e5e:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0e60:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0e64:	68d4      	ldr	r4, [r2, #12]
 80a0e66:	4619      	mov	r1, r3
 80a0e68:	2201      	movs	r2, #1
 80a0e6a:	47a0      	blx	r4
}
 80a0e6c:	b002      	add	sp, #8
 80a0e6e:	bd10      	pop	{r4, pc}

080a0e70 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0e70:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0e72:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0e74:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0e76:	691b      	ldr	r3, [r3, #16]
 80a0e78:	4798      	blx	r3
 80a0e7a:	b128      	cbz	r0, 80a0e88 <_ZN3UDP4readEv+0x18>
 80a0e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0e7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0e80:	1c59      	adds	r1, r3, #1
 80a0e82:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0e84:	5cd0      	ldrb	r0, [r2, r3]
 80a0e86:	bd10      	pop	{r4, pc}
 80a0e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0e8c:	bd10      	pop	{r4, pc}

080a0e8e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0e8e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0e90:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0e92:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0e94:	691b      	ldr	r3, [r3, #16]
 80a0e96:	4798      	blx	r3
 80a0e98:	b118      	cbz	r0, 80a0ea2 <_ZN3UDP4peekEv+0x14>
 80a0e9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0e9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0e9e:	5cd0      	ldrb	r0, [r2, r3]
 80a0ea0:	bd10      	pop	{r4, pc}
 80a0ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0ea6:	bd10      	pop	{r4, pc}

080a0ea8 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0ea8:	4770      	bx	lr

080a0eaa <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0eaa:	4603      	mov	r3, r0
 80a0eac:	4608      	mov	r0, r1
 80a0eae:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0eb0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0eb2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0eb4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0eb6:	6803      	ldr	r3, [r0, #0]
 80a0eb8:	1a52      	subs	r2, r2, r1
 80a0eba:	68db      	ldr	r3, [r3, #12]
 80a0ebc:	4421      	add	r1, r4
}
 80a0ebe:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0ec0:	4718      	bx	r3

080a0ec2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0ec2:	f1a0 0010 	sub.w	r0, r0, #16
 80a0ec6:	f7ff bff0 	b.w	80a0eaa <_ZNK3UDP7printToER5Print>

080a0eca <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0ecc:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0ece:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0ed0:	460f      	mov	r7, r1
 80a0ed2:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0ed4:	f7ff fe40 	bl	80a0b58 <_ZN5spark12NetworkClass4fromEm>
 80a0ed8:	6803      	ldr	r3, [r0, #0]
 80a0eda:	68db      	ldr	r3, [r3, #12]
 80a0edc:	4798      	blx	r3
 80a0ede:	b1b8      	cbz	r0, 80a0f10 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0ee0:	2102      	movs	r1, #2
 80a0ee2:	463b      	mov	r3, r7
 80a0ee4:	2211      	movs	r2, #17
 80a0ee6:	4608      	mov	r0, r1
 80a0ee8:	9600      	str	r6, [sp, #0]
 80a0eea:	f7ff fbb1 	bl	80a0650 <socket_create>
 80a0eee:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0ef0:	f7ff fba6 	bl	80a0640 <socket_handle_valid>
 80a0ef4:	4604      	mov	r4, r0
 80a0ef6:	b130      	cbz	r0, 80a0f06 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0ef8:	2300      	movs	r3, #0
 80a0efa:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0efc:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0efe:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0f00:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0f02:	2001      	movs	r0, #1
 80a0f04:	e004      	b.n	80a0f10 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0f06:	682b      	ldr	r3, [r5, #0]
 80a0f08:	4628      	mov	r0, r5
 80a0f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f0c:	4798      	blx	r3
            bound = false;
 80a0f0e:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a0f10:	b003      	add	sp, #12
 80a0f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f14 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a0f14:	b538      	push	{r3, r4, r5, lr}
 80a0f16:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0f18:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0f1a:	f7ff fbb9 	bl	80a0690 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0f1e:	4285      	cmp	r5, r0
 80a0f20:	d002      	beq.n	80a0f28 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0f22:	6960      	ldr	r0, [r4, #20]
 80a0f24:	f7ff fbac 	bl	80a0680 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0f28:	f7ff fbb2 	bl	80a0690 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0f2c:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0f2e:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0f30:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0f32:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0f34:	bd38      	pop	{r3, r4, r5, pc}

080a0f36 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0f36:	b530      	push	{r4, r5, lr}
 80a0f38:	b087      	sub	sp, #28
 80a0f3a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a0f3e:	2502      	movs	r5, #2
 80a0f40:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a0f44:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0f48:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0f4a:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0f4c:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0f50:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a0f54:	799c      	ldrb	r4, [r3, #6]
 80a0f56:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0f5a:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0f5c:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0f5e:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0f62:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a0f66:	2310      	movs	r3, #16
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	ab02      	add	r3, sp, #8
 80a0f6c:	9300      	str	r3, [sp, #0]
 80a0f6e:	6940      	ldr	r0, [r0, #20]
 80a0f70:	2300      	movs	r3, #0
 80a0f72:	f7ff fb7d 	bl	80a0670 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a0f76:	b007      	add	sp, #28
 80a0f78:	bd30      	pop	{r4, r5, pc}

080a0f7a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0f7a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0f7c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0f7e:	4605      	mov	r5, r0
 80a0f80:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0f82:	b113      	cbz	r3, 80a0f8a <_ZN3UDP5writeEPKhj+0x10>
 80a0f84:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a0f86:	1a24      	subs	r4, r4, r0
 80a0f88:	e000      	b.n	80a0f8c <_ZN3UDP5writeEPKhj+0x12>
 80a0f8a:	461c      	mov	r4, r3
 80a0f8c:	4294      	cmp	r4, r2
 80a0f8e:	bf28      	it	cs
 80a0f90:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a0f92:	4418      	add	r0, r3
 80a0f94:	4622      	mov	r2, r4
 80a0f96:	f000 ff8f 	bl	80a1eb8 <memcpy>
    _offset += size;
 80a0f9a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0f9c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a0f9e:	4423      	add	r3, r4
 80a0fa0:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0fa2:	bd38      	pop	{r3, r4, r5, pc}

080a0fa4 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0fa4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a0fa6:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0fa8:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a0faa:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0fac:	460e      	mov	r6, r1
 80a0fae:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a0fb0:	4798      	blx	r3
 80a0fb2:	b188      	cbz	r0, 80a0fd8 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a0fb4:	6823      	ldr	r3, [r4, #0]
 80a0fb6:	4620      	mov	r0, r4
 80a0fb8:	691b      	ldr	r3, [r3, #16]
 80a0fba:	4798      	blx	r3
 80a0fbc:	4285      	cmp	r5, r0
 80a0fbe:	bfa8      	it	ge
 80a0fc0:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a0fc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0fc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0fc6:	462a      	mov	r2, r5
 80a0fc8:	4419      	add	r1, r3
 80a0fca:	4630      	mov	r0, r6
 80a0fcc:	f000 ff74 	bl	80a1eb8 <memcpy>
      _offset += read;
 80a0fd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0fd2:	442b      	add	r3, r5
 80a0fd4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a0fd6:	e001      	b.n	80a0fdc <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a0fd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a0fdc:	4628      	mov	r0, r5
 80a0fde:	bd70      	pop	{r4, r5, r6, pc}

080a0fe0 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0fe2:	4604      	mov	r4, r0
 80a0fe4:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0fe6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0fe8:	460d      	mov	r5, r1
 80a0fea:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0fec:	f7ff fdb4 	bl	80a0b58 <_ZN5spark12NetworkClass4fromEm>
 80a0ff0:	6803      	ldr	r3, [r0, #0]
 80a0ff2:	68db      	ldr	r3, [r3, #12]
 80a0ff4:	4798      	blx	r3
 80a0ff6:	b310      	cbz	r0, 80a103e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0ff8:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0ffa:	f7ff fb49 	bl	80a0690 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0ffe:	4287      	cmp	r7, r0
 80a1000:	d01d      	beq.n	80a103e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1002:	b1e5      	cbz	r5, 80a103e <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1004:	ab08      	add	r3, sp, #32
 80a1006:	2210      	movs	r2, #16
 80a1008:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a100c:	9301      	str	r3, [sp, #4]
 80a100e:	eb0d 0302 	add.w	r3, sp, r2
 80a1012:	9300      	str	r3, [sp, #0]
 80a1014:	4629      	mov	r1, r5
 80a1016:	2300      	movs	r3, #0
 80a1018:	4632      	mov	r2, r6
 80a101a:	6960      	ldr	r0, [r4, #20]
 80a101c:	f7ff fb20 	bl	80a0660 <socket_receivefrom>
        if (ret >= 0)
 80a1020:	1e05      	subs	r5, r0, #0
 80a1022:	db0e      	blt.n	80a1042 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1024:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1028:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a102c:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a102e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1032:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1034:	f104 001c 	add.w	r0, r4, #28
 80a1038:	f7ff fd1e 	bl	80a0a78 <_ZN9IPAddressaSEPKh>
 80a103c:	e001      	b.n	80a1042 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a103e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1042:	4628      	mov	r0, r5
 80a1044:	b009      	add	sp, #36	; 0x24
 80a1046:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1048 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a104c:	4606      	mov	r6, r0
 80a104e:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1050:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1052:	460d      	mov	r5, r1
 80a1054:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1056:	f7ff fd7f 	bl	80a0b58 <_ZN5spark12NetworkClass4fromEm>
 80a105a:	6803      	ldr	r3, [r0, #0]
 80a105c:	68db      	ldr	r3, [r3, #12]
 80a105e:	4798      	blx	r3
 80a1060:	b1f8      	cbz	r0, 80a10a2 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1062:	4628      	mov	r0, r5
 80a1064:	f000 ff64 	bl	80a1f30 <strlen>
 80a1068:	2400      	movs	r4, #0
 80a106a:	b281      	uxth	r1, r0
 80a106c:	9400      	str	r4, [sp, #0]
 80a106e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1070:	aa03      	add	r2, sp, #12
 80a1072:	4628      	mov	r0, r5
 80a1074:	f7ff fba4 	bl	80a07c0 <inet_gethostbyname>
 80a1078:	b990      	cbnz	r0, 80a10a0 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a107a:	a903      	add	r1, sp, #12
 80a107c:	a808      	add	r0, sp, #32
 80a107e:	f7ff fcc7 	bl	80a0a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1082:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1084:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1086:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1088:	4b07      	ldr	r3, [pc, #28]	; (80a10a8 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a108a:	ad09      	add	r5, sp, #36	; 0x24
 80a108c:	930e      	str	r3, [sp, #56]	; 0x38
 80a108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1092:	682b      	ldr	r3, [r5, #0]
 80a1094:	4642      	mov	r2, r8
 80a1096:	7023      	strb	r3, [r4, #0]
 80a1098:	a90e      	add	r1, sp, #56	; 0x38
 80a109a:	4630      	mov	r0, r6
 80a109c:	47b8      	blx	r7
 80a109e:	e000      	b.n	80a10a2 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a10a0:	4620      	mov	r0, r4
}
 80a10a2:	b014      	add	sp, #80	; 0x50
 80a10a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a10a8:	080a20e4 	.word	0x080a20e4

080a10ac <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a10ac:	b570      	push	{r4, r5, r6, lr}
 80a10ae:	4604      	mov	r4, r0
 80a10b0:	4606      	mov	r6, r0
 80a10b2:	4b05      	ldr	r3, [pc, #20]	; (80a10c8 <_ZN3UDP8remoteIPEv+0x1c>)
 80a10b4:	f101 0520 	add.w	r5, r1, #32
 80a10b8:	f844 3b04 	str.w	r3, [r4], #4
 80a10bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a10be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a10c0:	682b      	ldr	r3, [r5, #0]
 80a10c2:	4630      	mov	r0, r6
 80a10c4:	7023      	strb	r3, [r4, #0]
 80a10c6:	bd70      	pop	{r4, r5, r6, pc}
 80a10c8:	080a20e4 	.word	0x080a20e4

080a10cc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a10cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a10ce:	4694      	mov	ip, r2
 80a10d0:	468e      	mov	lr, r1
 80a10d2:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a10d4:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a10d6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a10d8:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a10da:	4a09      	ldr	r2, [pc, #36]	; (80a1100 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a10dc:	ac03      	add	r4, sp, #12
 80a10de:	1d1d      	adds	r5, r3, #4
 80a10e0:	9202      	str	r2, [sp, #8]
 80a10e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a10e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a10e6:	682b      	ldr	r3, [r5, #0]
 80a10e8:	4662      	mov	r2, ip
 80a10ea:	7023      	strb	r3, [r4, #0]
 80a10ec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a10f0:	4671      	mov	r1, lr
 80a10f2:	9300      	str	r3, [sp, #0]
 80a10f4:	4630      	mov	r0, r6
 80a10f6:	ab02      	add	r3, sp, #8
 80a10f8:	47b8      	blx	r7
    }
 80a10fa:	b009      	add	sp, #36	; 0x24
 80a10fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a10fe:	bf00      	nop
 80a1100:	080a20e4 	.word	0x080a20e4

080a1104 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1104:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1106:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1108:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a110a:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a110c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a110e:	4b0d      	ldr	r3, [pc, #52]	; (80a1144 <_ZN3UDP9endPacketEv+0x40>)
 80a1110:	ad03      	add	r5, sp, #12
 80a1112:	f100 0620 	add.w	r6, r0, #32
 80a1116:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a111a:	9302      	str	r3, [sp, #8]
 80a111c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a111e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1120:	6833      	ldr	r3, [r6, #0]
 80a1122:	4672      	mov	r2, lr
 80a1124:	702b      	strb	r3, [r5, #0]
 80a1126:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1128:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a112a:	9300      	str	r3, [sp, #0]
 80a112c:	4620      	mov	r0, r4
 80a112e:	ab02      	add	r3, sp, #8
 80a1130:	47b8      	blx	r7
 80a1132:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1134:	6823      	ldr	r3, [r4, #0]
 80a1136:	4620      	mov	r0, r4
 80a1138:	69db      	ldr	r3, [r3, #28]
 80a113a:	4798      	blx	r3
    return result;
}
 80a113c:	4628      	mov	r0, r5
 80a113e:	b009      	add	sp, #36	; 0x24
 80a1140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1142:	bf00      	nop
 80a1144:	080a20e4 	.word	0x080a20e4

080a1148 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1148:	b538      	push	{r3, r4, r5, lr}
 80a114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a114e:	6083      	str	r3, [r0, #8]
 80a1150:	4b0b      	ldr	r3, [pc, #44]	; (80a1180 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1152:	2500      	movs	r5, #0
 80a1154:	f103 0208 	add.w	r2, r3, #8
 80a1158:	336c      	adds	r3, #108	; 0x6c
 80a115a:	6002      	str	r2, [r0, #0]
 80a115c:	6103      	str	r3, [r0, #16]
 80a115e:	6045      	str	r5, [r0, #4]
 80a1160:	4604      	mov	r4, r0
 80a1162:	f7ff fa95 	bl	80a0690 <socket_handle_invalid>
 80a1166:	6160      	str	r0, [r4, #20]
 80a1168:	f104 001c 	add.w	r0, r4, #28
 80a116c:	f7ff fc42 	bl	80a09f4 <_ZN9IPAddressC1Ev>
 80a1170:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1174:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1176:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1178:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a117a:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a117c:	4620      	mov	r0, r4
 80a117e:	bd38      	pop	{r3, r4, r5, pc}
 80a1180:	080a2244 	.word	0x080a2244

080a1184 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1184:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1186:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a118a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a118c:	b123      	cbz	r3, 80a1198 <_ZN3UDP13releaseBufferEv+0x14>
 80a118e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1190:	b110      	cbz	r0, 80a1198 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1192:	2101      	movs	r1, #1
 80a1194:	f000 fb57 	bl	80a1846 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1198:	2300      	movs	r3, #0
 80a119a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a119c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a11a0:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a11a2:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a11a4:	8723      	strh	r3, [r4, #56]	; 0x38
 80a11a6:	bd10      	pop	{r4, pc}

080a11a8 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a11a8:	b570      	push	{r4, r5, r6, lr}
 80a11aa:	4604      	mov	r4, r0
 80a11ac:	4616      	mov	r6, r2
 80a11ae:	460d      	mov	r5, r1
    releaseBuffer();
 80a11b0:	f7ff ffe8 	bl	80a1184 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a11b4:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a11b6:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a11b8:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a11ba:	b93e      	cbnz	r6, 80a11cc <_ZN3UDP9setBufferEjPh+0x24>
 80a11bc:	b135      	cbz	r5, 80a11cc <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a11be:	4628      	mov	r0, r5
 80a11c0:	f7fe ff6b 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a11c4:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a11c6:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a11c8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a11cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a11ce:	b103      	cbz	r3, 80a11d2 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a11d0:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a11d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a11d4:	3000      	adds	r0, #0
 80a11d6:	bf18      	it	ne
 80a11d8:	2001      	movne	r0, #1
 80a11da:	bd70      	pop	{r4, r5, r6, pc}

080a11dc <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a11dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11de:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a11e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a11e2:	4605      	mov	r5, r0
 80a11e4:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a11e6:	b91a      	cbnz	r2, 80a11f0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a11e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a11ea:	b109      	cbz	r1, 80a11f0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a11ec:	f7ff ffdc 	bl	80a11a8 <_ZN3UDP9setBufferEjPh>
 80a11f0:	f105 0620 	add.w	r6, r5, #32
 80a11f4:	3404      	adds	r4, #4
 80a11f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a11f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a11fa:	6823      	ldr	r3, [r4, #0]
 80a11fc:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a11fe:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a1200:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1202:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1204:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a1206:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a1208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a120a <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a120a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a120c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a120e:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a1210:	b91a      	cbnz	r2, 80a121a <_ZN3UDP11parsePacketEm+0x10>
 80a1212:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1214:	b109      	cbz	r1, 80a121a <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a1216:	f7ff ffc7 	bl	80a11a8 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a121a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a121c:	2300      	movs	r3, #0
 80a121e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1220:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1222:	b141      	cbz	r1, 80a1236 <_ZN3UDP11parsePacketEm+0x2c>
 80a1224:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1226:	b132      	cbz	r2, 80a1236 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a1228:	6820      	ldr	r0, [r4, #0]
 80a122a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a122c:	4620      	mov	r0, r4
 80a122e:	47a8      	blx	r5
        if (result>0) {
 80a1230:	2800      	cmp	r0, #0
            _total = result;
 80a1232:	bfc8      	it	gt
 80a1234:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a1236:	6823      	ldr	r3, [r4, #0]
 80a1238:	4620      	mov	r0, r4
}
 80a123a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a123e:	691b      	ldr	r3, [r3, #16]
 80a1240:	4718      	bx	r3

080a1242 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1242:	4770      	bx	lr

080a1244 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1244:	7441      	strb	r1, [r0, #17]
 80a1246:	4770      	bx	lr

080a1248 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1248:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a124a:	7c00      	ldrb	r0, [r0, #16]
 80a124c:	f7ff fa70 	bl	80a0730 <HAL_USART_Available_Data_For_Write>
}
 80a1250:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1254:	bd08      	pop	{r3, pc}

080a1256 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1256:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1258:	7c00      	ldrb	r0, [r0, #16]
 80a125a:	f7ff fa41 	bl	80a06e0 <HAL_USART_Available_Data>
}
 80a125e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1262:	bd08      	pop	{r3, pc}

080a1264 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1264:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1266:	7c00      	ldrb	r0, [r0, #16]
 80a1268:	f7ff fa4a 	bl	80a0700 <HAL_USART_Peek_Data>
}
 80a126c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1270:	bf28      	it	cs
 80a1272:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1276:	bd08      	pop	{r3, pc}

080a1278 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1278:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a127a:	7c00      	ldrb	r0, [r0, #16]
 80a127c:	f7ff fa38 	bl	80a06f0 <HAL_USART_Read_Data>
}
 80a1280:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1284:	bf28      	it	cs
 80a1286:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a128a:	bd08      	pop	{r3, pc}

080a128c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a128c:	7c00      	ldrb	r0, [r0, #16]
 80a128e:	f7ff ba3f 	b.w	80a0710 <HAL_USART_Flush_Data>

080a1292 <_ZN11USARTSerialD0Ev>:
 80a1292:	b510      	push	{r4, lr}
 80a1294:	4604      	mov	r4, r0
 80a1296:	2114      	movs	r1, #20
 80a1298:	f000 fad5 	bl	80a1846 <_ZdlPvj>
 80a129c:	4620      	mov	r0, r4
 80a129e:	bd10      	pop	{r4, pc}

080a12a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a12a0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12a2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a12a4:	4604      	mov	r4, r0
 80a12a6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12a8:	b925      	cbnz	r5, 80a12b4 <_ZN11USARTSerial5writeEh+0x14>
 80a12aa:	7c00      	ldrb	r0, [r0, #16]
 80a12ac:	f7ff fa40 	bl	80a0730 <HAL_USART_Available_Data_For_Write>
 80a12b0:	2800      	cmp	r0, #0
 80a12b2:	dd05      	ble.n	80a12c0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a12b4:	4631      	mov	r1, r6
 80a12b6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a12b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a12bc:	f7ff ba08 	b.w	80a06d0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a12c0:	4628      	mov	r0, r5
 80a12c2:	bd70      	pop	{r4, r5, r6, pc}

080a12c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a12c4:	b510      	push	{r4, lr}
 80a12c6:	4604      	mov	r4, r0
 80a12c8:	4608      	mov	r0, r1
 80a12ca:	4611      	mov	r1, r2
 80a12cc:	2200      	movs	r2, #0
 80a12ce:	6062      	str	r2, [r4, #4]
 80a12d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a12d4:	60a2      	str	r2, [r4, #8]
 80a12d6:	4a05      	ldr	r2, [pc, #20]	; (80a12ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a12d8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a12da:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a12dc:	2201      	movs	r2, #1
 80a12de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a12e0:	461a      	mov	r2, r3
 80a12e2:	f7ff f9ed 	bl	80a06c0 <HAL_USART_Init>
}
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	bd10      	pop	{r4, pc}
 80a12ea:	bf00      	nop
 80a12ec:	080a22bc 	.word	0x080a22bc

080a12f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a12f0:	7c00      	ldrb	r0, [r0, #16]
 80a12f2:	f7ff ba15 	b.w	80a0720 <HAL_USART_Is_Enabled>
	...

080a12f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a12f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a12fa:	4d0c      	ldr	r5, [pc, #48]	; (80a132c <_Z22__fetch_global_Serial1v+0x34>)
 80a12fc:	6829      	ldr	r1, [r5, #0]
 80a12fe:	f011 0401 	ands.w	r4, r1, #1
 80a1302:	d111      	bne.n	80a1328 <_Z22__fetch_global_Serial1v+0x30>
 80a1304:	4628      	mov	r0, r5
 80a1306:	f7fe fecc 	bl	80a00a2 <__cxa_guard_acquire>
 80a130a:	b168      	cbz	r0, 80a1328 <_Z22__fetch_global_Serial1v+0x30>
 80a130c:	4a08      	ldr	r2, [pc, #32]	; (80a1330 <_Z22__fetch_global_Serial1v+0x38>)
 80a130e:	4621      	mov	r1, r4
 80a1310:	4b08      	ldr	r3, [pc, #32]	; (80a1334 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1312:	4809      	ldr	r0, [pc, #36]	; (80a1338 <_Z22__fetch_global_Serial1v+0x40>)
 80a1314:	f7ff ffd6 	bl	80a12c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1318:	4628      	mov	r0, r5
 80a131a:	f7fe fec7 	bl	80a00ac <__cxa_guard_release>
 80a131e:	4a07      	ldr	r2, [pc, #28]	; (80a133c <_Z22__fetch_global_Serial1v+0x44>)
 80a1320:	4907      	ldr	r1, [pc, #28]	; (80a1340 <_Z22__fetch_global_Serial1v+0x48>)
 80a1322:	4805      	ldr	r0, [pc, #20]	; (80a1338 <_Z22__fetch_global_Serial1v+0x40>)
 80a1324:	f000 fa8a 	bl	80a183c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1328:	4803      	ldr	r0, [pc, #12]	; (80a1338 <_Z22__fetch_global_Serial1v+0x40>)
 80a132a:	bd38      	pop	{r3, r4, r5, pc}
 80a132c:	20000228 	.word	0x20000228
 80a1330:	2000022c 	.word	0x2000022c
 80a1334:	200001a4 	.word	0x200001a4
 80a1338:	20000190 	.word	0x20000190
 80a133c:	20000068 	.word	0x20000068
 80a1340:	080a1243 	.word	0x080a1243

080a1344 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1344:	7441      	strb	r1, [r0, #17]
 80a1346:	4770      	bx	lr

080a1348 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1348:	4770      	bx	lr

080a134a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a134a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a134c:	2100      	movs	r1, #0
 80a134e:	7c00      	ldrb	r0, [r0, #16]
 80a1350:	f7ff fa16 	bl	80a0780 <HAL_USB_USART_Receive_Data>
}
 80a1354:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1358:	bf28      	it	cs
 80a135a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a135e:	bd08      	pop	{r3, pc}

080a1360 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1360:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1362:	2101      	movs	r1, #1
 80a1364:	7c00      	ldrb	r0, [r0, #16]
 80a1366:	f7ff fa0b 	bl	80a0780 <HAL_USB_USART_Receive_Data>
}
 80a136a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a136e:	bf28      	it	cs
 80a1370:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1374:	bd08      	pop	{r3, pc}

080a1376 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1376:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1378:	7c00      	ldrb	r0, [r0, #16]
 80a137a:	f7ff f9f9 	bl	80a0770 <HAL_USB_USART_Available_Data_For_Write>
}
 80a137e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1382:	bd08      	pop	{r3, pc}

080a1384 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1384:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1386:	7c00      	ldrb	r0, [r0, #16]
 80a1388:	f7ff f9ea 	bl	80a0760 <HAL_USB_USART_Available_Data>
}
 80a138c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1390:	bd08      	pop	{r3, pc}

080a1392 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1392:	7c00      	ldrb	r0, [r0, #16]
 80a1394:	f7ff ba04 	b.w	80a07a0 <HAL_USB_USART_Flush_Data>

080a1398 <_ZN9USBSerialD0Ev>:
 80a1398:	b510      	push	{r4, lr}
 80a139a:	4604      	mov	r4, r0
 80a139c:	2114      	movs	r1, #20
 80a139e:	f000 fa52 	bl	80a1846 <_ZdlPvj>
 80a13a2:	4620      	mov	r0, r4
 80a13a4:	bd10      	pop	{r4, pc}

080a13a6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13a6:	b538      	push	{r3, r4, r5, lr}
 80a13a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13aa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13ac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13ae:	f7ff f9df 	bl	80a0770 <HAL_USB_USART_Available_Data_For_Write>
 80a13b2:	2800      	cmp	r0, #0
 80a13b4:	dc01      	bgt.n	80a13ba <_ZN9USBSerial5writeEh+0x14>
 80a13b6:	7c60      	ldrb	r0, [r4, #17]
 80a13b8:	b128      	cbz	r0, 80a13c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a13ba:	4629      	mov	r1, r5
 80a13bc:	7c20      	ldrb	r0, [r4, #16]
 80a13be:	f7ff f9e7 	bl	80a0790 <HAL_USB_USART_Send_Data>
 80a13c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a13c6:	bd38      	pop	{r3, r4, r5, pc}

080a13c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a13c8:	b510      	push	{r4, lr}
 80a13ca:	4604      	mov	r4, r0
 80a13cc:	2300      	movs	r3, #0
 80a13ce:	6063      	str	r3, [r4, #4]
 80a13d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a13d4:	60a3      	str	r3, [r4, #8]
 80a13d6:	4b05      	ldr	r3, [pc, #20]	; (80a13ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a13d8:	4608      	mov	r0, r1
 80a13da:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a13dc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a13de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a13e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a13e2:	4611      	mov	r1, r2
 80a13e4:	f7ff f9ac 	bl	80a0740 <HAL_USB_USART_Init>
}
 80a13e8:	4620      	mov	r0, r4
 80a13ea:	bd10      	pop	{r4, pc}
 80a13ec:	080a22ec 	.word	0x080a22ec

080a13f0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a13f0:	2200      	movs	r2, #0
 80a13f2:	7c00      	ldrb	r0, [r0, #16]
 80a13f4:	f7ff b9ac 	b.w	80a0750 <HAL_USB_USART_Begin>

080a13f8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a13f8:	7c00      	ldrb	r0, [r0, #16]
 80a13fa:	f7ff b9d9 	b.w	80a07b0 <HAL_USB_USART_Is_Enabled>

080a13fe <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a13fe:	f7ff bffb 	b.w	80a13f8 <_ZN9USBSerial9isEnabledEv>
	...

080a1404 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1404:	b510      	push	{r4, lr}
 80a1406:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1408:	2214      	movs	r2, #20
 80a140a:	2100      	movs	r1, #0
 80a140c:	f000 fd5f 	bl	80a1ece <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1410:	4b05      	ldr	r3, [pc, #20]	; (80a1428 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1412:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1414:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1416:	4b05      	ldr	r3, [pc, #20]	; (80a142c <_Z19acquireSerialBufferv+0x28>)
 80a1418:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a141a:	f240 1301 	movw	r3, #257	; 0x101
 80a141e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1420:	2381      	movs	r3, #129	; 0x81
 80a1422:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1424:	bd10      	pop	{r4, pc}
 80a1426:	bf00      	nop
 80a1428:	20000335 	.word	0x20000335
 80a142c:	200002b4 	.word	0x200002b4

080a1430 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1430:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1432:	4d0e      	ldr	r5, [pc, #56]	; (80a146c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1434:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1436:	a801      	add	r0, sp, #4
 80a1438:	f7ff ffe4 	bl	80a1404 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a143c:	6829      	ldr	r1, [r5, #0]
 80a143e:	f011 0401 	ands.w	r4, r1, #1
 80a1442:	d110      	bne.n	80a1466 <_Z16_fetch_usbserialv+0x36>
 80a1444:	4628      	mov	r0, r5
 80a1446:	f7fe fe2c 	bl	80a00a2 <__cxa_guard_acquire>
 80a144a:	b160      	cbz	r0, 80a1466 <_Z16_fetch_usbserialv+0x36>
 80a144c:	aa01      	add	r2, sp, #4
 80a144e:	4621      	mov	r1, r4
 80a1450:	4807      	ldr	r0, [pc, #28]	; (80a1470 <_Z16_fetch_usbserialv+0x40>)
 80a1452:	f7ff ffb9 	bl	80a13c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1456:	4628      	mov	r0, r5
 80a1458:	f7fe fe28 	bl	80a00ac <__cxa_guard_release>
 80a145c:	4a05      	ldr	r2, [pc, #20]	; (80a1474 <_Z16_fetch_usbserialv+0x44>)
 80a145e:	4906      	ldr	r1, [pc, #24]	; (80a1478 <_Z16_fetch_usbserialv+0x48>)
 80a1460:	4803      	ldr	r0, [pc, #12]	; (80a1470 <_Z16_fetch_usbserialv+0x40>)
 80a1462:	f000 f9eb 	bl	80a183c <__aeabi_atexit>
	return _usbserial;
}
 80a1466:	4802      	ldr	r0, [pc, #8]	; (80a1470 <_Z16_fetch_usbserialv+0x40>)
 80a1468:	b007      	add	sp, #28
 80a146a:	bd30      	pop	{r4, r5, pc}
 80a146c:	200002b0 	.word	0x200002b0
 80a1470:	20000438 	.word	0x20000438
 80a1474:	20000068 	.word	0x20000068
 80a1478:	080a1349 	.word	0x080a1349

080a147c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a147c:	b510      	push	{r4, lr}
 80a147e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1480:	2214      	movs	r2, #20
 80a1482:	2100      	movs	r1, #0
 80a1484:	f000 fd23 	bl	80a1ece <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1488:	4b05      	ldr	r3, [pc, #20]	; (80a14a0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a148a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a148c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a148e:	4b05      	ldr	r3, [pc, #20]	; (80a14a4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1490:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1492:	f240 1301 	movw	r3, #257	; 0x101
 80a1496:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1498:	2381      	movs	r3, #129	; 0x81
 80a149a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a149c:	bd10      	pop	{r4, pc}
 80a149e:	bf00      	nop
 80a14a0:	200004e8 	.word	0x200004e8
 80a14a4:	20000450 	.word	0x20000450

080a14a8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14aa:	4c0e      	ldr	r4, [pc, #56]	; (80a14e4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14ac:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14ae:	a801      	add	r0, sp, #4
 80a14b0:	f7ff ffe4 	bl	80a147c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14b4:	6823      	ldr	r3, [r4, #0]
 80a14b6:	07db      	lsls	r3, r3, #31
 80a14b8:	d410      	bmi.n	80a14dc <_Z17_fetch_usbserial1v+0x34>
 80a14ba:	4620      	mov	r0, r4
 80a14bc:	f7fe fdf1 	bl	80a00a2 <__cxa_guard_acquire>
 80a14c0:	b160      	cbz	r0, 80a14dc <_Z17_fetch_usbserial1v+0x34>
 80a14c2:	aa01      	add	r2, sp, #4
 80a14c4:	2101      	movs	r1, #1
 80a14c6:	4808      	ldr	r0, [pc, #32]	; (80a14e8 <_Z17_fetch_usbserial1v+0x40>)
 80a14c8:	f7ff ff7e 	bl	80a13c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14cc:	4620      	mov	r0, r4
 80a14ce:	f7fe fded 	bl	80a00ac <__cxa_guard_release>
 80a14d2:	4a06      	ldr	r2, [pc, #24]	; (80a14ec <_Z17_fetch_usbserial1v+0x44>)
 80a14d4:	4906      	ldr	r1, [pc, #24]	; (80a14f0 <_Z17_fetch_usbserial1v+0x48>)
 80a14d6:	4804      	ldr	r0, [pc, #16]	; (80a14e8 <_Z17_fetch_usbserial1v+0x40>)
 80a14d8:	f000 f9b0 	bl	80a183c <__aeabi_atexit>
  return _usbserial1;
}
 80a14dc:	4802      	ldr	r0, [pc, #8]	; (80a14e8 <_Z17_fetch_usbserial1v+0x40>)
 80a14de:	b006      	add	sp, #24
 80a14e0:	bd10      	pop	{r4, pc}
 80a14e2:	bf00      	nop
 80a14e4:	2000044c 	.word	0x2000044c
 80a14e8:	200004d4 	.word	0x200004d4
 80a14ec:	20000068 	.word	0x20000068
 80a14f0:	080a1349 	.word	0x080a1349

080a14f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a14f4:	2200      	movs	r2, #0
 80a14f6:	4611      	mov	r1, r2
 80a14f8:	6840      	ldr	r0, [r0, #4]
 80a14fa:	f7ff b9b5 	b.w	80a0868 <network_ready>

080a14fe <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a14fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1500:	4616      	mov	r6, r2
 80a1502:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1504:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1506:	460f      	mov	r7, r1
 80a1508:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a150a:	2100      	movs	r1, #0
 80a150c:	a803      	add	r0, sp, #12
 80a150e:	f000 fcde 	bl	80a1ece <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1512:	4630      	mov	r0, r6
 80a1514:	f000 fd0c 	bl	80a1f30 <strlen>
 80a1518:	2500      	movs	r5, #0
 80a151a:	9500      	str	r5, [sp, #0]
 80a151c:	b281      	uxth	r1, r0
 80a151e:	687b      	ldr	r3, [r7, #4]
 80a1520:	aa03      	add	r2, sp, #12
 80a1522:	4630      	mov	r0, r6
 80a1524:	f7ff f94c 	bl	80a07c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1528:	b120      	cbz	r0, 80a1534 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a152a:	4629      	mov	r1, r5
 80a152c:	4620      	mov	r0, r4
 80a152e:	f7ff fa81 	bl	80a0a34 <_ZN9IPAddressC1Em>
 80a1532:	e003      	b.n	80a153c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1534:	a903      	add	r1, sp, #12
 80a1536:	4620      	mov	r0, r4
 80a1538:	f7ff fa6a 	bl	80a0a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a153c:	4620      	mov	r0, r4
 80a153e:	b009      	add	sp, #36	; 0x24
 80a1540:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1542 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1542:	2200      	movs	r2, #0
 80a1544:	4611      	mov	r1, r2
 80a1546:	6840      	ldr	r0, [r0, #4]
 80a1548:	f7ff b9ae 	b.w	80a08a8 <network_listening>

080a154c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a154c:	2200      	movs	r2, #0
 80a154e:	4611      	mov	r1, r2
 80a1550:	6840      	ldr	r0, [r0, #4]
 80a1552:	f7ff b9b9 	b.w	80a08c8 <network_get_listen_timeout>

080a1556 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1556:	2200      	movs	r2, #0
 80a1558:	6840      	ldr	r0, [r0, #4]
 80a155a:	f7ff b9ad 	b.w	80a08b8 <network_set_listen_timeout>

080a155e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a155e:	2200      	movs	r2, #0
 80a1560:	f081 0101 	eor.w	r1, r1, #1
 80a1564:	6840      	ldr	r0, [r0, #4]
 80a1566:	f7ff b997 	b.w	80a0898 <network_listen>

080a156a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a156a:	2300      	movs	r3, #0
 80a156c:	461a      	mov	r2, r3
 80a156e:	4619      	mov	r1, r3
 80a1570:	6840      	ldr	r0, [r0, #4]
 80a1572:	f7ff b989 	b.w	80a0888 <network_off>

080a1576 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1576:	2300      	movs	r3, #0
 80a1578:	461a      	mov	r2, r3
 80a157a:	4619      	mov	r1, r3
 80a157c:	6840      	ldr	r0, [r0, #4]
 80a157e:	f7ff b97b 	b.w	80a0878 <network_on>

080a1582 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1582:	2200      	movs	r2, #0
 80a1584:	4611      	mov	r1, r2
 80a1586:	6840      	ldr	r0, [r0, #4]
 80a1588:	f7ff b95e 	b.w	80a0848 <network_connecting>

080a158c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a158c:	2200      	movs	r2, #0
 80a158e:	2102      	movs	r1, #2
 80a1590:	6840      	ldr	r0, [r0, #4]
 80a1592:	f7ff b961 	b.w	80a0858 <network_disconnect>

080a1596 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1596:	2300      	movs	r3, #0
 80a1598:	461a      	mov	r2, r3
 80a159a:	6840      	ldr	r0, [r0, #4]
 80a159c:	f7ff b94c 	b.w	80a0838 <network_connect>

080a15a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a15a0:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a15a2:	2204      	movs	r2, #4
 80a15a4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a15a6:	4a02      	ldr	r2, [pc, #8]	; (80a15b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a15a8:	601a      	str	r2, [r3, #0]
 80a15aa:	4770      	bx	lr
 80a15ac:	200005ec 	.word	0x200005ec
 80a15b0:	080a231c 	.word	0x080a231c

080a15b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a15b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a15b6:	4b14      	ldr	r3, [pc, #80]	; (80a1608 <serialEventRun+0x54>)
 80a15b8:	b133      	cbz	r3, 80a15c8 <serialEventRun+0x14>
 80a15ba:	f7ff ff39 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a15be:	6803      	ldr	r3, [r0, #0]
 80a15c0:	691b      	ldr	r3, [r3, #16]
 80a15c2:	4798      	blx	r3
 80a15c4:	2800      	cmp	r0, #0
 80a15c6:	dc16      	bgt.n	80a15f6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a15c8:	4b10      	ldr	r3, [pc, #64]	; (80a160c <serialEventRun+0x58>)
 80a15ca:	b133      	cbz	r3, 80a15da <serialEventRun+0x26>
 80a15cc:	f7ff fe94 	bl	80a12f8 <_Z22__fetch_global_Serial1v>
 80a15d0:	6803      	ldr	r3, [r0, #0]
 80a15d2:	691b      	ldr	r3, [r3, #16]
 80a15d4:	4798      	blx	r3
 80a15d6:	2800      	cmp	r0, #0
 80a15d8:	dc10      	bgt.n	80a15fc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a15da:	4b0d      	ldr	r3, [pc, #52]	; (80a1610 <serialEventRun+0x5c>)
 80a15dc:	b10b      	cbz	r3, 80a15e2 <serialEventRun+0x2e>
 80a15de:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a15e2:	4b0c      	ldr	r3, [pc, #48]	; (80a1614 <serialEventRun+0x60>)
 80a15e4:	b17b      	cbz	r3, 80a1606 <serialEventRun+0x52>
 80a15e6:	f7ff ff5f 	bl	80a14a8 <_Z17_fetch_usbserial1v>
 80a15ea:	6803      	ldr	r3, [r0, #0]
 80a15ec:	691b      	ldr	r3, [r3, #16]
 80a15ee:	4798      	blx	r3
 80a15f0:	2800      	cmp	r0, #0
 80a15f2:	dc06      	bgt.n	80a1602 <serialEventRun+0x4e>
 80a15f4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a15f6:	f3af 8000 	nop.w
 80a15fa:	e7e5      	b.n	80a15c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a15fc:	f3af 8000 	nop.w
 80a1600:	e7eb      	b.n	80a15da <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1602:	f3af 8000 	nop.w
 80a1606:	bd08      	pop	{r3, pc}
	...

080a1618 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1618:	b508      	push	{r3, lr}
	serialEventRun();
 80a161a:	f7ff ffcb 	bl	80a15b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a161e:	f7fe ffad 	bl	80a057c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1622:	4b01      	ldr	r3, [pc, #4]	; (80a1628 <_post_loop+0x10>)
 80a1624:	6018      	str	r0, [r3, #0]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	200005fc 	.word	0x200005fc

080a162c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a162c:	4802      	ldr	r0, [pc, #8]	; (80a1638 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a162e:	4a03      	ldr	r2, [pc, #12]	; (80a163c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1630:	4903      	ldr	r1, [pc, #12]	; (80a1640 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1632:	1a12      	subs	r2, r2, r0
 80a1634:	f000 bc40 	b.w	80a1eb8 <memcpy>
 80a1638:	40024000 	.word	0x40024000
 80a163c:	40024004 	.word	0x40024004
 80a1640:	080a23f0 	.word	0x080a23f0

080a1644 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1644:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1646:	2300      	movs	r3, #0
 80a1648:	9300      	str	r3, [sp, #0]
 80a164a:	461a      	mov	r2, r3
 80a164c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1650:	f7ff f8d8 	bl	80a0804 <system_ctrl_set_result>
}
 80a1654:	b003      	add	sp, #12
 80a1656:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a165c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a165c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a165e:	8843      	ldrh	r3, [r0, #2]
 80a1660:	2b0a      	cmp	r3, #10
 80a1662:	d008      	beq.n	80a1676 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1664:	2b50      	cmp	r3, #80	; 0x50
 80a1666:	d109      	bne.n	80a167c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1668:	4b09      	ldr	r3, [pc, #36]	; (80a1690 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a166a:	681b      	ldr	r3, [r3, #0]
 80a166c:	b13b      	cbz	r3, 80a167e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a166e:	b003      	add	sp, #12
 80a1670:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1674:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1676:	f7ff ffe5 	bl	80a1644 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a167a:	e006      	b.n	80a168a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a167c:	2300      	movs	r3, #0
 80a167e:	9300      	str	r3, [sp, #0]
 80a1680:	461a      	mov	r2, r3
 80a1682:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1686:	f7ff f8bd 	bl	80a0804 <system_ctrl_set_result>
        break;
    }
}
 80a168a:	b003      	add	sp, #12
 80a168c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1690:	200005f4 	.word	0x200005f4

080a1694 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1694:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1696:	4c10      	ldr	r4, [pc, #64]	; (80a16d8 <module_user_init_hook+0x44>)
 80a1698:	4d10      	ldr	r5, [pc, #64]	; (80a16dc <module_user_init_hook+0x48>)
 80a169a:	6823      	ldr	r3, [r4, #0]
 80a169c:	42ab      	cmp	r3, r5
 80a169e:	4b10      	ldr	r3, [pc, #64]	; (80a16e0 <module_user_init_hook+0x4c>)
 80a16a0:	bf0c      	ite	eq
 80a16a2:	2201      	moveq	r2, #1
 80a16a4:	2200      	movne	r2, #0
 80a16a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a16a8:	d002      	beq.n	80a16b0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a16aa:	f7ff ffbf 	bl	80a162c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a16ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a16b0:	f7fe ff5c 	bl	80a056c <HAL_RNG_GetRandomNumber>
 80a16b4:	4604      	mov	r4, r0
    srand(seed);
 80a16b6:	f000 fc13 	bl	80a1ee0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a16ba:	4b0a      	ldr	r3, [pc, #40]	; (80a16e4 <module_user_init_hook+0x50>)
 80a16bc:	b113      	cbz	r3, 80a16c4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a16be:	4620      	mov	r0, r4
 80a16c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a16c4:	2100      	movs	r1, #0
 80a16c6:	4807      	ldr	r0, [pc, #28]	; (80a16e4 <module_user_init_hook+0x50>)
 80a16c8:	f7ff f8a6 	bl	80a0818 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a16cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a16d0:	2100      	movs	r1, #0
 80a16d2:	4805      	ldr	r0, [pc, #20]	; (80a16e8 <module_user_init_hook+0x54>)
 80a16d4:	f7ff b88c 	b.w	80a07f0 <system_ctrl_set_app_request_handler>
 80a16d8:	40024000 	.word	0x40024000
 80a16dc:	9a271c1e 	.word	0x9a271c1e
 80a16e0:	200005f8 	.word	0x200005f8
 80a16e4:	00000000 	.word	0x00000000
 80a16e8:	080a165d 	.word	0x080a165d

080a16ec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a16ec:	b510      	push	{r4, lr}
 80a16ee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a16f0:	480f      	ldr	r0, [pc, #60]	; (80a1730 <pinAvailable+0x44>)
 80a16f2:	f7ff fb1f 	bl	80a0d34 <_ZN8SPIClass9isEnabledEv>
 80a16f6:	b128      	cbz	r0, 80a1704 <pinAvailable+0x18>
 80a16f8:	f1a4 030d 	sub.w	r3, r4, #13
 80a16fc:	2b02      	cmp	r3, #2
 80a16fe:	d801      	bhi.n	80a1704 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1700:	2000      	movs	r0, #0
 80a1702:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1704:	f000 f840 	bl	80a1788 <_Z19__fetch_global_Wirev>
 80a1708:	f7ff f956 	bl	80a09b8 <_ZN7TwoWire9isEnabledEv>
 80a170c:	b108      	cbz	r0, 80a1712 <pinAvailable+0x26>
 80a170e:	2c01      	cmp	r4, #1
 80a1710:	d9f6      	bls.n	80a1700 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1712:	f7ff fdf1 	bl	80a12f8 <_Z22__fetch_global_Serial1v>
 80a1716:	f7ff fdeb 	bl	80a12f0 <_ZN11USARTSerial9isEnabledEv>
 80a171a:	b118      	cbz	r0, 80a1724 <pinAvailable+0x38>
 80a171c:	f1a4 0312 	sub.w	r3, r4, #18
 80a1720:	2b01      	cmp	r3, #1
 80a1722:	d9ed      	bls.n	80a1700 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1724:	2c17      	cmp	r4, #23
 80a1726:	bf8c      	ite	hi
 80a1728:	2000      	movhi	r0, #0
 80a172a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a172c:	bd10      	pop	{r4, pc}
 80a172e:	bf00      	nop
 80a1730:	20000630 	.word	0x20000630

080a1734 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1734:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1736:	b538      	push	{r3, r4, r5, lr}
 80a1738:	4604      	mov	r4, r0
 80a173a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a173c:	d80a      	bhi.n	80a1754 <pinMode+0x20>
 80a173e:	29ff      	cmp	r1, #255	; 0xff
 80a1740:	d008      	beq.n	80a1754 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1742:	f7ff ffd3 	bl	80a16ec <pinAvailable>
 80a1746:	b128      	cbz	r0, 80a1754 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1748:	4629      	mov	r1, r5
 80a174a:	4620      	mov	r0, r4
}
 80a174c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1750:	f7fe bf24 	b.w	80a059c <HAL_Pin_Mode>
 80a1754:	bd38      	pop	{r3, r4, r5, pc}

080a1756 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1756:	b538      	push	{r3, r4, r5, lr}
 80a1758:	4604      	mov	r4, r0
 80a175a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a175c:	f7fe ff26 	bl	80a05ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1760:	28ff      	cmp	r0, #255	; 0xff
 80a1762:	d010      	beq.n	80a1786 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1764:	2806      	cmp	r0, #6
 80a1766:	d804      	bhi.n	80a1772 <digitalWrite+0x1c>
 80a1768:	234d      	movs	r3, #77	; 0x4d
 80a176a:	fa23 f000 	lsr.w	r0, r3, r0
 80a176e:	07c3      	lsls	r3, r0, #31
 80a1770:	d409      	bmi.n	80a1786 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1772:	4620      	mov	r0, r4
 80a1774:	f7ff ffba 	bl	80a16ec <pinAvailable>
 80a1778:	b128      	cbz	r0, 80a1786 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a177a:	4629      	mov	r1, r5
 80a177c:	4620      	mov	r0, r4
}
 80a177e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1782:	f7fe bf1b 	b.w	80a05bc <HAL_GPIO_Write>
 80a1786:	bd38      	pop	{r3, r4, r5, pc}

080a1788 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1788:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a178a:	4d0b      	ldr	r5, [pc, #44]	; (80a17b8 <_Z19__fetch_global_Wirev+0x30>)
 80a178c:	6829      	ldr	r1, [r5, #0]
 80a178e:	f011 0401 	ands.w	r4, r1, #1
 80a1792:	d10f      	bne.n	80a17b4 <_Z19__fetch_global_Wirev+0x2c>
 80a1794:	4628      	mov	r0, r5
 80a1796:	f7fe fc84 	bl	80a00a2 <__cxa_guard_acquire>
 80a179a:	b158      	cbz	r0, 80a17b4 <_Z19__fetch_global_Wirev+0x2c>
 80a179c:	4621      	mov	r1, r4
 80a179e:	4807      	ldr	r0, [pc, #28]	; (80a17bc <_Z19__fetch_global_Wirev+0x34>)
 80a17a0:	f7ff f8f8 	bl	80a0994 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a17a4:	4628      	mov	r0, r5
 80a17a6:	f7fe fc81 	bl	80a00ac <__cxa_guard_release>
 80a17aa:	4a05      	ldr	r2, [pc, #20]	; (80a17c0 <_Z19__fetch_global_Wirev+0x38>)
 80a17ac:	4905      	ldr	r1, [pc, #20]	; (80a17c4 <_Z19__fetch_global_Wirev+0x3c>)
 80a17ae:	4803      	ldr	r0, [pc, #12]	; (80a17bc <_Z19__fetch_global_Wirev+0x34>)
 80a17b0:	f000 f844 	bl	80a183c <__aeabi_atexit>
	return wire;
}
 80a17b4:	4801      	ldr	r0, [pc, #4]	; (80a17bc <_Z19__fetch_global_Wirev+0x34>)
 80a17b6:	bd38      	pop	{r3, r4, r5, pc}
 80a17b8:	20000600 	.word	0x20000600
 80a17bc:	20000604 	.word	0x20000604
 80a17c0:	20000068 	.word	0x20000068
 80a17c4:	080a093b 	.word	0x080a093b

080a17c8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a17c8:	b513      	push	{r0, r1, r4, lr}
 80a17ca:	4c08      	ldr	r4, [pc, #32]	; (80a17ec <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a17cc:	2300      	movs	r3, #0
 80a17ce:	461a      	mov	r2, r3
 80a17d0:	4619      	mov	r1, r3
 80a17d2:	9300      	str	r3, [sp, #0]
 80a17d4:	4620      	mov	r0, r4
 80a17d6:	f7ff f943 	bl	80a0a60 <_ZN9IPAddressC1Ehhhh>
 80a17da:	4620      	mov	r0, r4
 80a17dc:	4a04      	ldr	r2, [pc, #16]	; (80a17f0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a17de:	4905      	ldr	r1, [pc, #20]	; (80a17f4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a17e0:	b002      	add	sp, #8
 80a17e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a17e6:	f000 b829 	b.w	80a183c <__aeabi_atexit>
 80a17ea:	bf00      	nop
 80a17ec:	20000618 	.word	0x20000618
 80a17f0:	20000068 	.word	0x20000068
 80a17f4:	080a00b3 	.word	0x080a00b3

080a17f8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17f8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a17fa:	4c0c      	ldr	r4, [pc, #48]	; (80a182c <_GLOBAL__sub_I_SPI+0x34>)
 80a17fc:	4e0c      	ldr	r6, [pc, #48]	; (80a1830 <_GLOBAL__sub_I_SPI+0x38>)
 80a17fe:	4d0d      	ldr	r5, [pc, #52]	; (80a1834 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1800:	2100      	movs	r1, #0
 80a1802:	4620      	mov	r0, r4
 80a1804:	f7ff fa82 	bl	80a0d0c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1808:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a180a:	4c0b      	ldr	r4, [pc, #44]	; (80a1838 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a180c:	4632      	mov	r2, r6
 80a180e:	4629      	mov	r1, r5
 80a1810:	f000 f814 	bl	80a183c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1814:	2101      	movs	r1, #1
 80a1816:	4620      	mov	r0, r4
 80a1818:	f7ff fa78 	bl	80a0d0c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a181c:	4632      	mov	r2, r6
 80a181e:	4629      	mov	r1, r5
 80a1820:	4620      	mov	r0, r4
 80a1822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1826:	f000 b809 	b.w	80a183c <__aeabi_atexit>
 80a182a:	bf00      	nop
 80a182c:	20000630 	.word	0x20000630
 80a1830:	20000068 	.word	0x20000068
 80a1834:	080a0cfd 	.word	0x080a0cfd
 80a1838:	20000640 	.word	0x20000640

080a183c <__aeabi_atexit>:
 80a183c:	460b      	mov	r3, r1
 80a183e:	4601      	mov	r1, r0
 80a1840:	4618      	mov	r0, r3
 80a1842:	f000 bb2b 	b.w	80a1e9c <__cxa_atexit>

080a1846 <_ZdlPvj>:
 80a1846:	f7fe bc2a 	b.w	80a009e <_ZdlPv>
	...

080a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a184c:	4b24      	ldr	r3, [pc, #144]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	07d0      	lsls	r0, r2, #31
 80a1852:	bf5c      	itt	pl
 80a1854:	2201      	movpl	r2, #1
 80a1856:	601a      	strpl	r2, [r3, #0]
 80a1858:	4b22      	ldr	r3, [pc, #136]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a185a:	681a      	ldr	r2, [r3, #0]
 80a185c:	07d1      	lsls	r1, r2, #31
 80a185e:	bf5c      	itt	pl
 80a1860:	2201      	movpl	r2, #1
 80a1862:	601a      	strpl	r2, [r3, #0]
 80a1864:	4b20      	ldr	r3, [pc, #128]	; (80a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d2      	lsls	r2, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b1e      	ldr	r3, [pc, #120]	; (80a18ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d0      	lsls	r0, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b1c      	ldr	r3, [pc, #112]	; (80a18f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d1      	lsls	r1, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b1a      	ldr	r3, [pc, #104]	; (80a18f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d2      	lsls	r2, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4b18      	ldr	r3, [pc, #96]	; (80a18f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1896:	681a      	ldr	r2, [r3, #0]
 80a1898:	07d0      	lsls	r0, r2, #31
 80a189a:	bf5c      	itt	pl
 80a189c:	2201      	movpl	r2, #1
 80a189e:	601a      	strpl	r2, [r3, #0]
 80a18a0:	4b16      	ldr	r3, [pc, #88]	; (80a18fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a18a2:	681a      	ldr	r2, [r3, #0]
 80a18a4:	07d1      	lsls	r1, r2, #31
 80a18a6:	bf5c      	itt	pl
 80a18a8:	2201      	movpl	r2, #1
 80a18aa:	601a      	strpl	r2, [r3, #0]
 80a18ac:	4b14      	ldr	r3, [pc, #80]	; (80a1900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a18ae:	681a      	ldr	r2, [r3, #0]
 80a18b0:	07d2      	lsls	r2, r2, #31
 80a18b2:	bf5c      	itt	pl
 80a18b4:	2201      	movpl	r2, #1
 80a18b6:	601a      	strpl	r2, [r3, #0]
 80a18b8:	4b12      	ldr	r3, [pc, #72]	; (80a1904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d0      	lsls	r0, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4b10      	ldr	r3, [pc, #64]	; (80a1908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a18c6:	681a      	ldr	r2, [r3, #0]
 80a18c8:	07d1      	lsls	r1, r2, #31
 80a18ca:	bf5c      	itt	pl
 80a18cc:	2201      	movpl	r2, #1
 80a18ce:	601a      	strpl	r2, [r3, #0]
 80a18d0:	4b0e      	ldr	r3, [pc, #56]	; (80a190c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a18d2:	681a      	ldr	r2, [r3, #0]
 80a18d4:	07d2      	lsls	r2, r2, #31
 80a18d6:	bf5c      	itt	pl
 80a18d8:	2201      	movpl	r2, #1
 80a18da:	601a      	strpl	r2, [r3, #0]
 80a18dc:	4770      	bx	lr
 80a18de:	bf00      	nop
 80a18e0:	2000067c 	.word	0x2000067c
 80a18e4:	20000678 	.word	0x20000678
 80a18e8:	20000674 	.word	0x20000674
 80a18ec:	20000670 	.word	0x20000670
 80a18f0:	2000066c 	.word	0x2000066c
 80a18f4:	20000668 	.word	0x20000668
 80a18f8:	20000664 	.word	0x20000664
 80a18fc:	20000660 	.word	0x20000660
 80a1900:	2000065c 	.word	0x2000065c
 80a1904:	20000658 	.word	0x20000658
 80a1908:	20000654 	.word	0x20000654
 80a190c:	20000650 	.word	0x20000650

080a1910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1910:	4b18      	ldr	r3, [pc, #96]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1912:	681a      	ldr	r2, [r3, #0]
 80a1914:	07d1      	lsls	r1, r2, #31
 80a1916:	bf5c      	itt	pl
 80a1918:	2201      	movpl	r2, #1
 80a191a:	601a      	strpl	r2, [r3, #0]
 80a191c:	4b16      	ldr	r3, [pc, #88]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a191e:	681a      	ldr	r2, [r3, #0]
 80a1920:	07d2      	lsls	r2, r2, #31
 80a1922:	bf5c      	itt	pl
 80a1924:	2201      	movpl	r2, #1
 80a1926:	601a      	strpl	r2, [r3, #0]
 80a1928:	4b14      	ldr	r3, [pc, #80]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a192a:	681a      	ldr	r2, [r3, #0]
 80a192c:	07d0      	lsls	r0, r2, #31
 80a192e:	bf5c      	itt	pl
 80a1930:	2201      	movpl	r2, #1
 80a1932:	601a      	strpl	r2, [r3, #0]
 80a1934:	4b12      	ldr	r3, [pc, #72]	; (80a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	07d1      	lsls	r1, r2, #31
 80a193a:	bf5c      	itt	pl
 80a193c:	2201      	movpl	r2, #1
 80a193e:	601a      	strpl	r2, [r3, #0]
 80a1940:	4b10      	ldr	r3, [pc, #64]	; (80a1984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1942:	681a      	ldr	r2, [r3, #0]
 80a1944:	07d2      	lsls	r2, r2, #31
 80a1946:	bf5c      	itt	pl
 80a1948:	2201      	movpl	r2, #1
 80a194a:	601a      	strpl	r2, [r3, #0]
 80a194c:	4b0e      	ldr	r3, [pc, #56]	; (80a1988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a194e:	681a      	ldr	r2, [r3, #0]
 80a1950:	07d0      	lsls	r0, r2, #31
 80a1952:	bf5c      	itt	pl
 80a1954:	2201      	movpl	r2, #1
 80a1956:	601a      	strpl	r2, [r3, #0]
 80a1958:	4b0c      	ldr	r3, [pc, #48]	; (80a198c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a195a:	681a      	ldr	r2, [r3, #0]
 80a195c:	07d1      	lsls	r1, r2, #31
 80a195e:	bf5c      	itt	pl
 80a1960:	2201      	movpl	r2, #1
 80a1962:	601a      	strpl	r2, [r3, #0]
 80a1964:	4b0a      	ldr	r3, [pc, #40]	; (80a1990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1966:	681a      	ldr	r2, [r3, #0]
 80a1968:	07d2      	lsls	r2, r2, #31
 80a196a:	bf5c      	itt	pl
 80a196c:	2201      	movpl	r2, #1
 80a196e:	601a      	strpl	r2, [r3, #0]
 80a1970:	4770      	bx	lr
 80a1972:	bf00      	nop
 80a1974:	2000069c 	.word	0x2000069c
 80a1978:	20000698 	.word	0x20000698
 80a197c:	20000694 	.word	0x20000694
 80a1980:	20000690 	.word	0x20000690
 80a1984:	2000068c 	.word	0x2000068c
 80a1988:	20000688 	.word	0x20000688
 80a198c:	20000684 	.word	0x20000684
 80a1990:	20000680 	.word	0x20000680

080a1994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1994:	4b18      	ldr	r3, [pc, #96]	; (80a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1996:	681a      	ldr	r2, [r3, #0]
 80a1998:	07d1      	lsls	r1, r2, #31
 80a199a:	bf5c      	itt	pl
 80a199c:	2201      	movpl	r2, #1
 80a199e:	601a      	strpl	r2, [r3, #0]
 80a19a0:	4b16      	ldr	r3, [pc, #88]	; (80a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a19a2:	681a      	ldr	r2, [r3, #0]
 80a19a4:	07d2      	lsls	r2, r2, #31
 80a19a6:	bf5c      	itt	pl
 80a19a8:	2201      	movpl	r2, #1
 80a19aa:	601a      	strpl	r2, [r3, #0]
 80a19ac:	4b14      	ldr	r3, [pc, #80]	; (80a1a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a19ae:	681a      	ldr	r2, [r3, #0]
 80a19b0:	07d0      	lsls	r0, r2, #31
 80a19b2:	bf5c      	itt	pl
 80a19b4:	2201      	movpl	r2, #1
 80a19b6:	601a      	strpl	r2, [r3, #0]
 80a19b8:	4b12      	ldr	r3, [pc, #72]	; (80a1a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a19ba:	681a      	ldr	r2, [r3, #0]
 80a19bc:	07d1      	lsls	r1, r2, #31
 80a19be:	bf5c      	itt	pl
 80a19c0:	2201      	movpl	r2, #1
 80a19c2:	601a      	strpl	r2, [r3, #0]
 80a19c4:	4b10      	ldr	r3, [pc, #64]	; (80a1a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a19c6:	681a      	ldr	r2, [r3, #0]
 80a19c8:	07d2      	lsls	r2, r2, #31
 80a19ca:	bf5c      	itt	pl
 80a19cc:	2201      	movpl	r2, #1
 80a19ce:	601a      	strpl	r2, [r3, #0]
 80a19d0:	4b0e      	ldr	r3, [pc, #56]	; (80a1a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a19d2:	681a      	ldr	r2, [r3, #0]
 80a19d4:	07d0      	lsls	r0, r2, #31
 80a19d6:	bf5c      	itt	pl
 80a19d8:	2201      	movpl	r2, #1
 80a19da:	601a      	strpl	r2, [r3, #0]
 80a19dc:	4b0c      	ldr	r3, [pc, #48]	; (80a1a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a19de:	681a      	ldr	r2, [r3, #0]
 80a19e0:	07d1      	lsls	r1, r2, #31
 80a19e2:	bf5c      	itt	pl
 80a19e4:	2201      	movpl	r2, #1
 80a19e6:	601a      	strpl	r2, [r3, #0]
 80a19e8:	4b0a      	ldr	r3, [pc, #40]	; (80a1a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a19ea:	681a      	ldr	r2, [r3, #0]
 80a19ec:	07d2      	lsls	r2, r2, #31
 80a19ee:	bf5c      	itt	pl
 80a19f0:	2201      	movpl	r2, #1
 80a19f2:	601a      	strpl	r2, [r3, #0]
 80a19f4:	4770      	bx	lr
 80a19f6:	bf00      	nop
 80a19f8:	200006bc 	.word	0x200006bc
 80a19fc:	200006b8 	.word	0x200006b8
 80a1a00:	200006b4 	.word	0x200006b4
 80a1a04:	200006b0 	.word	0x200006b0
 80a1a08:	200006ac 	.word	0x200006ac
 80a1a0c:	200006a8 	.word	0x200006a8
 80a1a10:	200006a4 	.word	0x200006a4
 80a1a14:	200006a0 	.word	0x200006a0

080a1a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1a18:	4b24      	ldr	r3, [pc, #144]	; (80a1aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1a1a:	681a      	ldr	r2, [r3, #0]
 80a1a1c:	07d0      	lsls	r0, r2, #31
 80a1a1e:	bf5c      	itt	pl
 80a1a20:	2201      	movpl	r2, #1
 80a1a22:	601a      	strpl	r2, [r3, #0]
 80a1a24:	4b22      	ldr	r3, [pc, #136]	; (80a1ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1a26:	681a      	ldr	r2, [r3, #0]
 80a1a28:	07d1      	lsls	r1, r2, #31
 80a1a2a:	bf5c      	itt	pl
 80a1a2c:	2201      	movpl	r2, #1
 80a1a2e:	601a      	strpl	r2, [r3, #0]
 80a1a30:	4b20      	ldr	r3, [pc, #128]	; (80a1ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1a32:	681a      	ldr	r2, [r3, #0]
 80a1a34:	07d2      	lsls	r2, r2, #31
 80a1a36:	bf5c      	itt	pl
 80a1a38:	2201      	movpl	r2, #1
 80a1a3a:	601a      	strpl	r2, [r3, #0]
 80a1a3c:	4b1e      	ldr	r3, [pc, #120]	; (80a1ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1a3e:	681a      	ldr	r2, [r3, #0]
 80a1a40:	07d0      	lsls	r0, r2, #31
 80a1a42:	bf5c      	itt	pl
 80a1a44:	2201      	movpl	r2, #1
 80a1a46:	601a      	strpl	r2, [r3, #0]
 80a1a48:	4b1c      	ldr	r3, [pc, #112]	; (80a1abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1a4a:	681a      	ldr	r2, [r3, #0]
 80a1a4c:	07d1      	lsls	r1, r2, #31
 80a1a4e:	bf5c      	itt	pl
 80a1a50:	2201      	movpl	r2, #1
 80a1a52:	601a      	strpl	r2, [r3, #0]
 80a1a54:	4b1a      	ldr	r3, [pc, #104]	; (80a1ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1a56:	681a      	ldr	r2, [r3, #0]
 80a1a58:	07d2      	lsls	r2, r2, #31
 80a1a5a:	bf5c      	itt	pl
 80a1a5c:	2201      	movpl	r2, #1
 80a1a5e:	601a      	strpl	r2, [r3, #0]
 80a1a60:	4b18      	ldr	r3, [pc, #96]	; (80a1ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1a62:	681a      	ldr	r2, [r3, #0]
 80a1a64:	07d0      	lsls	r0, r2, #31
 80a1a66:	bf5c      	itt	pl
 80a1a68:	2201      	movpl	r2, #1
 80a1a6a:	601a      	strpl	r2, [r3, #0]
 80a1a6c:	4b16      	ldr	r3, [pc, #88]	; (80a1ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1a6e:	681a      	ldr	r2, [r3, #0]
 80a1a70:	07d1      	lsls	r1, r2, #31
 80a1a72:	bf5c      	itt	pl
 80a1a74:	2201      	movpl	r2, #1
 80a1a76:	601a      	strpl	r2, [r3, #0]
 80a1a78:	4b14      	ldr	r3, [pc, #80]	; (80a1acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1a7a:	681a      	ldr	r2, [r3, #0]
 80a1a7c:	07d2      	lsls	r2, r2, #31
 80a1a7e:	bf5c      	itt	pl
 80a1a80:	2201      	movpl	r2, #1
 80a1a82:	601a      	strpl	r2, [r3, #0]
 80a1a84:	4b12      	ldr	r3, [pc, #72]	; (80a1ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1a86:	681a      	ldr	r2, [r3, #0]
 80a1a88:	07d0      	lsls	r0, r2, #31
 80a1a8a:	bf5c      	itt	pl
 80a1a8c:	2201      	movpl	r2, #1
 80a1a8e:	601a      	strpl	r2, [r3, #0]
 80a1a90:	4b10      	ldr	r3, [pc, #64]	; (80a1ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1a92:	681a      	ldr	r2, [r3, #0]
 80a1a94:	07d1      	lsls	r1, r2, #31
 80a1a96:	bf5c      	itt	pl
 80a1a98:	2201      	movpl	r2, #1
 80a1a9a:	601a      	strpl	r2, [r3, #0]
 80a1a9c:	4b0e      	ldr	r3, [pc, #56]	; (80a1ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1a9e:	681a      	ldr	r2, [r3, #0]
 80a1aa0:	07d2      	lsls	r2, r2, #31
 80a1aa2:	bf5c      	itt	pl
 80a1aa4:	2201      	movpl	r2, #1
 80a1aa6:	601a      	strpl	r2, [r3, #0]
 80a1aa8:	4770      	bx	lr
 80a1aaa:	bf00      	nop
 80a1aac:	200006ec 	.word	0x200006ec
 80a1ab0:	200006e8 	.word	0x200006e8
 80a1ab4:	200006e4 	.word	0x200006e4
 80a1ab8:	200006e0 	.word	0x200006e0
 80a1abc:	200006dc 	.word	0x200006dc
 80a1ac0:	200006d8 	.word	0x200006d8
 80a1ac4:	200006d4 	.word	0x200006d4
 80a1ac8:	200006d0 	.word	0x200006d0
 80a1acc:	200006cc 	.word	0x200006cc
 80a1ad0:	200006c8 	.word	0x200006c8
 80a1ad4:	200006c4 	.word	0x200006c4
 80a1ad8:	200006c0 	.word	0x200006c0

080a1adc <__aeabi_drsub>:
 80a1adc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1ae0:	e002      	b.n	80a1ae8 <__adddf3>
 80a1ae2:	bf00      	nop

080a1ae4 <__aeabi_dsub>:
 80a1ae4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1ae8 <__adddf3>:
 80a1ae8:	b530      	push	{r4, r5, lr}
 80a1aea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1aee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1af2:	ea94 0f05 	teq	r4, r5
 80a1af6:	bf08      	it	eq
 80a1af8:	ea90 0f02 	teqeq	r0, r2
 80a1afc:	bf1f      	itttt	ne
 80a1afe:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1b02:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1b06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1b0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1b0e:	f000 80e2 	beq.w	80a1cd6 <__adddf3+0x1ee>
 80a1b12:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1b16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1b1a:	bfb8      	it	lt
 80a1b1c:	426d      	neglt	r5, r5
 80a1b1e:	dd0c      	ble.n	80a1b3a <__adddf3+0x52>
 80a1b20:	442c      	add	r4, r5
 80a1b22:	ea80 0202 	eor.w	r2, r0, r2
 80a1b26:	ea81 0303 	eor.w	r3, r1, r3
 80a1b2a:	ea82 0000 	eor.w	r0, r2, r0
 80a1b2e:	ea83 0101 	eor.w	r1, r3, r1
 80a1b32:	ea80 0202 	eor.w	r2, r0, r2
 80a1b36:	ea81 0303 	eor.w	r3, r1, r3
 80a1b3a:	2d36      	cmp	r5, #54	; 0x36
 80a1b3c:	bf88      	it	hi
 80a1b3e:	bd30      	pophi	{r4, r5, pc}
 80a1b40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1b44:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1b48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1b4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1b50:	d002      	beq.n	80a1b58 <__adddf3+0x70>
 80a1b52:	4240      	negs	r0, r0
 80a1b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1b58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1b5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1b60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1b64:	d002      	beq.n	80a1b6c <__adddf3+0x84>
 80a1b66:	4252      	negs	r2, r2
 80a1b68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1b6c:	ea94 0f05 	teq	r4, r5
 80a1b70:	f000 80a7 	beq.w	80a1cc2 <__adddf3+0x1da>
 80a1b74:	f1a4 0401 	sub.w	r4, r4, #1
 80a1b78:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1b7c:	db0d      	blt.n	80a1b9a <__adddf3+0xb2>
 80a1b7e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1b82:	fa22 f205 	lsr.w	r2, r2, r5
 80a1b86:	1880      	adds	r0, r0, r2
 80a1b88:	f141 0100 	adc.w	r1, r1, #0
 80a1b8c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1b90:	1880      	adds	r0, r0, r2
 80a1b92:	fa43 f305 	asr.w	r3, r3, r5
 80a1b96:	4159      	adcs	r1, r3
 80a1b98:	e00e      	b.n	80a1bb8 <__adddf3+0xd0>
 80a1b9a:	f1a5 0520 	sub.w	r5, r5, #32
 80a1b9e:	f10e 0e20 	add.w	lr, lr, #32
 80a1ba2:	2a01      	cmp	r2, #1
 80a1ba4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1ba8:	bf28      	it	cs
 80a1baa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1bae:	fa43 f305 	asr.w	r3, r3, r5
 80a1bb2:	18c0      	adds	r0, r0, r3
 80a1bb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1bb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1bbc:	d507      	bpl.n	80a1bce <__adddf3+0xe6>
 80a1bbe:	f04f 0e00 	mov.w	lr, #0
 80a1bc2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1bc6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1bca:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1bce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1bd2:	d31b      	bcc.n	80a1c0c <__adddf3+0x124>
 80a1bd4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1bd8:	d30c      	bcc.n	80a1bf4 <__adddf3+0x10c>
 80a1bda:	0849      	lsrs	r1, r1, #1
 80a1bdc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1be0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1be4:	f104 0401 	add.w	r4, r4, #1
 80a1be8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1bec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1bf0:	f080 809a 	bcs.w	80a1d28 <__adddf3+0x240>
 80a1bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1bf8:	bf08      	it	eq
 80a1bfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1bfe:	f150 0000 	adcs.w	r0, r0, #0
 80a1c02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1c06:	ea41 0105 	orr.w	r1, r1, r5
 80a1c0a:	bd30      	pop	{r4, r5, pc}
 80a1c0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1c10:	4140      	adcs	r0, r0
 80a1c12:	eb41 0101 	adc.w	r1, r1, r1
 80a1c16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1c1a:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c1e:	d1e9      	bne.n	80a1bf4 <__adddf3+0x10c>
 80a1c20:	f091 0f00 	teq	r1, #0
 80a1c24:	bf04      	itt	eq
 80a1c26:	4601      	moveq	r1, r0
 80a1c28:	2000      	moveq	r0, #0
 80a1c2a:	fab1 f381 	clz	r3, r1
 80a1c2e:	bf08      	it	eq
 80a1c30:	3320      	addeq	r3, #32
 80a1c32:	f1a3 030b 	sub.w	r3, r3, #11
 80a1c36:	f1b3 0220 	subs.w	r2, r3, #32
 80a1c3a:	da0c      	bge.n	80a1c56 <__adddf3+0x16e>
 80a1c3c:	320c      	adds	r2, #12
 80a1c3e:	dd08      	ble.n	80a1c52 <__adddf3+0x16a>
 80a1c40:	f102 0c14 	add.w	ip, r2, #20
 80a1c44:	f1c2 020c 	rsb	r2, r2, #12
 80a1c48:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1c4c:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c50:	e00c      	b.n	80a1c6c <__adddf3+0x184>
 80a1c52:	f102 0214 	add.w	r2, r2, #20
 80a1c56:	bfd8      	it	le
 80a1c58:	f1c2 0c20 	rsble	ip, r2, #32
 80a1c5c:	fa01 f102 	lsl.w	r1, r1, r2
 80a1c60:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1c64:	bfdc      	itt	le
 80a1c66:	ea41 010c 	orrle.w	r1, r1, ip
 80a1c6a:	4090      	lslle	r0, r2
 80a1c6c:	1ae4      	subs	r4, r4, r3
 80a1c6e:	bfa2      	ittt	ge
 80a1c70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1c74:	4329      	orrge	r1, r5
 80a1c76:	bd30      	popge	{r4, r5, pc}
 80a1c78:	ea6f 0404 	mvn.w	r4, r4
 80a1c7c:	3c1f      	subs	r4, #31
 80a1c7e:	da1c      	bge.n	80a1cba <__adddf3+0x1d2>
 80a1c80:	340c      	adds	r4, #12
 80a1c82:	dc0e      	bgt.n	80a1ca2 <__adddf3+0x1ba>
 80a1c84:	f104 0414 	add.w	r4, r4, #20
 80a1c88:	f1c4 0220 	rsb	r2, r4, #32
 80a1c8c:	fa20 f004 	lsr.w	r0, r0, r4
 80a1c90:	fa01 f302 	lsl.w	r3, r1, r2
 80a1c94:	ea40 0003 	orr.w	r0, r0, r3
 80a1c98:	fa21 f304 	lsr.w	r3, r1, r4
 80a1c9c:	ea45 0103 	orr.w	r1, r5, r3
 80a1ca0:	bd30      	pop	{r4, r5, pc}
 80a1ca2:	f1c4 040c 	rsb	r4, r4, #12
 80a1ca6:	f1c4 0220 	rsb	r2, r4, #32
 80a1caa:	fa20 f002 	lsr.w	r0, r0, r2
 80a1cae:	fa01 f304 	lsl.w	r3, r1, r4
 80a1cb2:	ea40 0003 	orr.w	r0, r0, r3
 80a1cb6:	4629      	mov	r1, r5
 80a1cb8:	bd30      	pop	{r4, r5, pc}
 80a1cba:	fa21 f004 	lsr.w	r0, r1, r4
 80a1cbe:	4629      	mov	r1, r5
 80a1cc0:	bd30      	pop	{r4, r5, pc}
 80a1cc2:	f094 0f00 	teq	r4, #0
 80a1cc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1cca:	bf06      	itte	eq
 80a1ccc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1cd0:	3401      	addeq	r4, #1
 80a1cd2:	3d01      	subne	r5, #1
 80a1cd4:	e74e      	b.n	80a1b74 <__adddf3+0x8c>
 80a1cd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1cda:	bf18      	it	ne
 80a1cdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1ce0:	d029      	beq.n	80a1d36 <__adddf3+0x24e>
 80a1ce2:	ea94 0f05 	teq	r4, r5
 80a1ce6:	bf08      	it	eq
 80a1ce8:	ea90 0f02 	teqeq	r0, r2
 80a1cec:	d005      	beq.n	80a1cfa <__adddf3+0x212>
 80a1cee:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1cf2:	bf04      	itt	eq
 80a1cf4:	4619      	moveq	r1, r3
 80a1cf6:	4610      	moveq	r0, r2
 80a1cf8:	bd30      	pop	{r4, r5, pc}
 80a1cfa:	ea91 0f03 	teq	r1, r3
 80a1cfe:	bf1e      	ittt	ne
 80a1d00:	2100      	movne	r1, #0
 80a1d02:	2000      	movne	r0, #0
 80a1d04:	bd30      	popne	{r4, r5, pc}
 80a1d06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1d0a:	d105      	bne.n	80a1d18 <__adddf3+0x230>
 80a1d0c:	0040      	lsls	r0, r0, #1
 80a1d0e:	4149      	adcs	r1, r1
 80a1d10:	bf28      	it	cs
 80a1d12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1d16:	bd30      	pop	{r4, r5, pc}
 80a1d18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1d1c:	bf3c      	itt	cc
 80a1d1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1d22:	bd30      	popcc	{r4, r5, pc}
 80a1d24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1d2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1d30:	f04f 0000 	mov.w	r0, #0
 80a1d34:	bd30      	pop	{r4, r5, pc}
 80a1d36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1d3a:	bf1a      	itte	ne
 80a1d3c:	4619      	movne	r1, r3
 80a1d3e:	4610      	movne	r0, r2
 80a1d40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1d44:	bf1c      	itt	ne
 80a1d46:	460b      	movne	r3, r1
 80a1d48:	4602      	movne	r2, r0
 80a1d4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1d4e:	bf06      	itte	eq
 80a1d50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1d54:	ea91 0f03 	teqeq	r1, r3
 80a1d58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1d5c:	bd30      	pop	{r4, r5, pc}
 80a1d5e:	bf00      	nop

080a1d60 <__aeabi_ui2d>:
 80a1d60:	f090 0f00 	teq	r0, #0
 80a1d64:	bf04      	itt	eq
 80a1d66:	2100      	moveq	r1, #0
 80a1d68:	4770      	bxeq	lr
 80a1d6a:	b530      	push	{r4, r5, lr}
 80a1d6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d74:	f04f 0500 	mov.w	r5, #0
 80a1d78:	f04f 0100 	mov.w	r1, #0
 80a1d7c:	e750      	b.n	80a1c20 <__adddf3+0x138>
 80a1d7e:	bf00      	nop

080a1d80 <__aeabi_i2d>:
 80a1d80:	f090 0f00 	teq	r0, #0
 80a1d84:	bf04      	itt	eq
 80a1d86:	2100      	moveq	r1, #0
 80a1d88:	4770      	bxeq	lr
 80a1d8a:	b530      	push	{r4, r5, lr}
 80a1d8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1d98:	bf48      	it	mi
 80a1d9a:	4240      	negmi	r0, r0
 80a1d9c:	f04f 0100 	mov.w	r1, #0
 80a1da0:	e73e      	b.n	80a1c20 <__adddf3+0x138>
 80a1da2:	bf00      	nop

080a1da4 <__aeabi_f2d>:
 80a1da4:	0042      	lsls	r2, r0, #1
 80a1da6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1daa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1dae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1db2:	bf1f      	itttt	ne
 80a1db4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1db8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1dbc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1dc0:	4770      	bxne	lr
 80a1dc2:	f092 0f00 	teq	r2, #0
 80a1dc6:	bf14      	ite	ne
 80a1dc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1dcc:	4770      	bxeq	lr
 80a1dce:	b530      	push	{r4, r5, lr}
 80a1dd0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1dd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1dd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ddc:	e720      	b.n	80a1c20 <__adddf3+0x138>
 80a1dde:	bf00      	nop

080a1de0 <__aeabi_ul2d>:
 80a1de0:	ea50 0201 	orrs.w	r2, r0, r1
 80a1de4:	bf08      	it	eq
 80a1de6:	4770      	bxeq	lr
 80a1de8:	b530      	push	{r4, r5, lr}
 80a1dea:	f04f 0500 	mov.w	r5, #0
 80a1dee:	e00a      	b.n	80a1e06 <__aeabi_l2d+0x16>

080a1df0 <__aeabi_l2d>:
 80a1df0:	ea50 0201 	orrs.w	r2, r0, r1
 80a1df4:	bf08      	it	eq
 80a1df6:	4770      	bxeq	lr
 80a1df8:	b530      	push	{r4, r5, lr}
 80a1dfa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1dfe:	d502      	bpl.n	80a1e06 <__aeabi_l2d+0x16>
 80a1e00:	4240      	negs	r0, r0
 80a1e02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1e06:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1e12:	f43f aedc 	beq.w	80a1bce <__adddf3+0xe6>
 80a1e16:	f04f 0203 	mov.w	r2, #3
 80a1e1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1e1e:	bf18      	it	ne
 80a1e20:	3203      	addne	r2, #3
 80a1e22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1e26:	bf18      	it	ne
 80a1e28:	3203      	addne	r2, #3
 80a1e2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1e2e:	f1c2 0320 	rsb	r3, r2, #32
 80a1e32:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1e36:	fa20 f002 	lsr.w	r0, r0, r2
 80a1e3a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1e3e:	ea40 000e 	orr.w	r0, r0, lr
 80a1e42:	fa21 f102 	lsr.w	r1, r1, r2
 80a1e46:	4414      	add	r4, r2
 80a1e48:	e6c1      	b.n	80a1bce <__adddf3+0xe6>
 80a1e4a:	bf00      	nop

080a1e4c <__aeabi_d2iz>:
 80a1e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1e50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1e54:	d215      	bcs.n	80a1e82 <__aeabi_d2iz+0x36>
 80a1e56:	d511      	bpl.n	80a1e7c <__aeabi_d2iz+0x30>
 80a1e58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1e5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1e60:	d912      	bls.n	80a1e88 <__aeabi_d2iz+0x3c>
 80a1e62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1e6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1e72:	fa23 f002 	lsr.w	r0, r3, r2
 80a1e76:	bf18      	it	ne
 80a1e78:	4240      	negne	r0, r0
 80a1e7a:	4770      	bx	lr
 80a1e7c:	f04f 0000 	mov.w	r0, #0
 80a1e80:	4770      	bx	lr
 80a1e82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1e86:	d105      	bne.n	80a1e94 <__aeabi_d2iz+0x48>
 80a1e88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1e8c:	bf08      	it	eq
 80a1e8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1e92:	4770      	bx	lr
 80a1e94:	f04f 0000 	mov.w	r0, #0
 80a1e98:	4770      	bx	lr
 80a1e9a:	bf00      	nop

080a1e9c <__cxa_atexit>:
 80a1e9c:	b510      	push	{r4, lr}
 80a1e9e:	4c05      	ldr	r4, [pc, #20]	; (80a1eb4 <__cxa_atexit+0x18>)
 80a1ea0:	4613      	mov	r3, r2
 80a1ea2:	b12c      	cbz	r4, 80a1eb0 <__cxa_atexit+0x14>
 80a1ea4:	460a      	mov	r2, r1
 80a1ea6:	4601      	mov	r1, r0
 80a1ea8:	2002      	movs	r0, #2
 80a1eaa:	f3af 8000 	nop.w
 80a1eae:	bd10      	pop	{r4, pc}
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	bd10      	pop	{r4, pc}
 80a1eb4:	00000000 	.word	0x00000000

080a1eb8 <memcpy>:
 80a1eb8:	b510      	push	{r4, lr}
 80a1eba:	1e43      	subs	r3, r0, #1
 80a1ebc:	440a      	add	r2, r1
 80a1ebe:	4291      	cmp	r1, r2
 80a1ec0:	d004      	beq.n	80a1ecc <memcpy+0x14>
 80a1ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1eca:	e7f8      	b.n	80a1ebe <memcpy+0x6>
 80a1ecc:	bd10      	pop	{r4, pc}

080a1ece <memset>:
 80a1ece:	4603      	mov	r3, r0
 80a1ed0:	4402      	add	r2, r0
 80a1ed2:	4293      	cmp	r3, r2
 80a1ed4:	d002      	beq.n	80a1edc <memset+0xe>
 80a1ed6:	f803 1b01 	strb.w	r1, [r3], #1
 80a1eda:	e7fa      	b.n	80a1ed2 <memset+0x4>
 80a1edc:	4770      	bx	lr
	...

080a1ee0 <srand>:
 80a1ee0:	b538      	push	{r3, r4, r5, lr}
 80a1ee2:	4b12      	ldr	r3, [pc, #72]	; (80a1f2c <srand+0x4c>)
 80a1ee4:	4605      	mov	r5, r0
 80a1ee6:	681c      	ldr	r4, [r3, #0]
 80a1ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1eea:	b9d3      	cbnz	r3, 80a1f22 <srand+0x42>
 80a1eec:	2018      	movs	r0, #24
 80a1eee:	f7fe fd03 	bl	80a08f8 <malloc>
 80a1ef2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1ef6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1ef8:	8003      	strh	r3, [r0, #0]
 80a1efa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1efe:	8043      	strh	r3, [r0, #2]
 80a1f00:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1f04:	8083      	strh	r3, [r0, #4]
 80a1f06:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1f0a:	80c3      	strh	r3, [r0, #6]
 80a1f0c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1f10:	8103      	strh	r3, [r0, #8]
 80a1f12:	2305      	movs	r3, #5
 80a1f14:	8143      	strh	r3, [r0, #10]
 80a1f16:	230b      	movs	r3, #11
 80a1f18:	8183      	strh	r3, [r0, #12]
 80a1f1a:	2201      	movs	r2, #1
 80a1f1c:	2300      	movs	r3, #0
 80a1f1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1f24:	2200      	movs	r2, #0
 80a1f26:	611d      	str	r5, [r3, #16]
 80a1f28:	615a      	str	r2, [r3, #20]
 80a1f2a:	bd38      	pop	{r3, r4, r5, pc}
 80a1f2c:	20000064 	.word	0x20000064

080a1f30 <strlen>:
 80a1f30:	4603      	mov	r3, r0
 80a1f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1f36:	2a00      	cmp	r2, #0
 80a1f38:	d1fb      	bne.n	80a1f32 <strlen+0x2>
 80a1f3a:	1a18      	subs	r0, r3, r0
 80a1f3c:	3801      	subs	r0, #1
 80a1f3e:	4770      	bx	lr

080a1f40 <dynalib_user>:
 80a1f40:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1f50:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a1f60:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a1f70:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a1f80:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a1f90:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a1fa0:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a1fb0:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a1fc0:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a1fd0:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a1fe0:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a1ff0:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a2000:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a2010:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a2020:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a2030:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a2040:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a2050:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a2060:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a2070:	4853 7400 7365 6974 676e 6900 206e 6573     SH.testing.in se
 80a2080:	646e 6d20 7465 6f68 0064 6f74 6174 3a6c     nd method.total:
 80a2090:	3a20 6600 756c 5878 3a20 0020 6c66 7875      :.fluxX : .flux
 80a20a0:	2059 203a 6600 756c 5a78 3a20 0020 2d0a     Y : .fluxZ : ..-
 80a20b0:	2d2d 002d                                   ---.

080a20b4 <_ZTV7TwoWire>:
	...
 80a20bc:	093b 080a 0985 080a 095d 080a 093d 080a     ;.......]...=...
 80a20cc:	0965 080a 096d 080a 0975 080a 097d 080a     e...m...u...}...

080a20dc <_ZTV9IPAddress>:
	...
 80a20e4:	09c1 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a20f4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2104:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2114:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2124:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2134:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2144:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2154:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2164:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2174:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2184:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2194:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a21a4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a21b4:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a21c4:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a21d4 <_ZTVN5spark12NetworkClassE>:
	...
 80a21dc:	0aa1 080a 0aab 080a 0ab5 080a 0abf 080a     ................
 80a21ec:	0ac9 080a 0ad5 080a 0ae1 080a 0aed 080a     ................
 80a21fc:	0af5 080a 0aff 080a 0b09 080a               ............

080a2208 <_ZTV8SPIClass>:
	...
 80a2210:	0cfd 080a 0cff 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2220:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2230:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2240:	0000 0000                                   ....

080a2244 <_ZTV3UDP>:
	...
 80a224c:	00b5 080a 00e3 080a 0e5b 080a 0f7b 080a     ........[...{...
 80a225c:	0e53 080a 0e71 080a 0e8f 080a 0ea9 080a     S...q...........
 80a226c:	0ecb 080a 0f15 080a 0f37 080a 10cd 080a     ........7.......
 80a227c:	0fe1 080a 0e3d 080a 11dd 080a 1049 080a     ....=.......I...
 80a228c:	1105 080a 120b 080a 0fa5 080a 0e49 080a     ............I...
 80a229c:	10ad 080a 0e4f 080a 0eab 080a fff0 ffff     ....O...........
 80a22ac:	0000 0000 0ec3 080a                         ........

080a22b4 <_ZTV11USARTSerial>:
	...
 80a22bc:	1243 080a 1293 080a 12a1 080a 0b85 080a     C...............
 80a22cc:	1257 080a 1279 080a 1265 080a 128d 080a     W...y...e.......
 80a22dc:	1245 080a 1249 080a                         E...I...

080a22e4 <_ZTV9USBSerial>:
	...
 80a22ec:	1349 080a 1399 080a 13a7 080a 0b85 080a     I...............
 80a22fc:	1385 080a 134b 080a 1361 080a 1393 080a     ....K...a.......
 80a230c:	1377 080a 1345 080a                         w...E...

080a2314 <_ZTVN5spark9WiFiClassE>:
	...
 80a231c:	1597 080a 158d 080a 1583 080a 14f5 080a     ................
 80a232c:	1577 080a 156b 080a 155f 080a 1557 080a     w...k..._...W...
 80a233c:	154d 080a 1543 080a 14ff 080a               M...C.......

080a2348 <__sf_fake_stdin>:
	...

080a2368 <__sf_fake_stdout>:
	...

080a2388 <__sf_fake_stderr>:
	...
 80a23a8:	0043                                        C.

080a23aa <link_const_variable_data_end>:
	...

080a23ac <link_constructors_location>:
 80a23ac:	080a024d 	.word	0x080a024d
 80a23b0:	080a02e9 	.word	0x080a02e9
 80a23b4:	080a0393 	.word	0x080a0393
 80a23b8:	080a0559 	.word	0x080a0559
 80a23bc:	080a0a91 	.word	0x080a0a91
 80a23c0:	080a0b71 	.word	0x080a0b71
 80a23c4:	080a0ce1 	.word	0x080a0ce1
 80a23c8:	080a0e11 	.word	0x080a0e11
 80a23cc:	080a0e29 	.word	0x080a0e29
 80a23d0:	080a15a1 	.word	0x080a15a1
 80a23d4:	080a17c9 	.word	0x080a17c9
 80a23d8:	080a17f9 	.word	0x080a17f9
 80a23dc:	080a184d 	.word	0x080a184d
 80a23e0:	080a1911 	.word	0x080a1911
 80a23e4:	080a1995 	.word	0x080a1995
 80a23e8:	080a1a19 	.word	0x080a1a19

080a23ec <link_constructors_end>:
 80a23ec:	00000000 	.word	0x00000000
