
/Users/ninjacat/Documents/Particle/TakeHeed/algue/target/1.4.0/photon/algue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003c94  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3cb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080a3cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b8  20000080  20000080  00030080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3d34  080a3d34  00023d34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3d5c  080a3d5c  00023d5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b5ec0  00000000  00000000  00023d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010997  00000000  00000000  000d9c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016c0d  00000000  00000000  000ea5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002290  00000000  00000000  001011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000036c8  00000000  00000000  00103454  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025a36  00000000  00000000  00106b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000269cf  00000000  00000000  0012c552  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6eb9  00000000  00000000  00152f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c210  00000000  00000000  001f9ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fb8f 	bl	80a3750 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fb94 	bl	80a3766 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3cb4 	.word	0x080a3cb4
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	20000738 	.word	0x20000738
 80a0058:	20000738 	.word	0x20000738

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fa59 	bl	80a2514 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3c64 	.word	0x080a3c64
 80a0084:	080a3ca4 	.word	0x080a3ca4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8e8 	b.w	80a025c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa4b 	bl	80a0528 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b9ff 	b.w	80a2498 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 bae9 	b.w	80a1670 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 baef 	b.w	80a1680 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f001 fe68 	bl	80a1d94 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f001 ff9d 	bl	80a2004 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a3b04 	.word	0x080a3b04

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f002 faf4 	bl	80a26c6 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f002 faea 	bl	80a26c6 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <_Z15calibrateSensorv>:
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
}

void calibrateSensor(){
 80a00f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a00fc:	f002 f8d8 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a0100:	4929      	ldr	r1, [pc, #164]	; (80a01a8 <_Z15calibrateSensorv+0xb0>)
 80a0102:	f001 fc3d 	bl	80a1980 <_ZN5Print5printEPKc>
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
 80a0106:	4e29      	ldr	r6, [pc, #164]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0108:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80a01bc <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a010c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80a01c0 <_Z15calibrateSensorv+0xc8>
  Serial.println("Calibration finished");
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
 80a0110:	2564      	movs	r5, #100	; 0x64
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
 80a0112:	4826      	ldr	r0, [pc, #152]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
 80a0114:	f000 fd27 	bl	80a0b66 <_ZN7LSM9DS114accelAvailableEv>
 80a0118:	b110      	cbz	r0, 80a0120 <_Z15calibrateSensorv+0x28>
    {
      imu.readAccel();
 80a011a:	4824      	ldr	r0, [pc, #144]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
 80a011c:	f000 fdee 	bl	80a0cfc <_ZN7LSM9DS19readAccelEv>
    }
    refX += imu.calcAccel(imu.ax);
 80a0120:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 80a0124:	4821      	ldr	r0, [pc, #132]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
 80a0126:	f000 faca 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
 80a012a:	4601      	mov	r1, r0
 80a012c:	f8db 0000 	ldr.w	r0, [fp]
 80a0130:	f003 f80c 	bl	80a314c <__addsf3>
    refY += imu.calcAccel(imu.ay);
 80a0134:	f9b6 1030 	ldrsh.w	r1, [r6, #48]	; 0x30
  for(int i = 0; i < count; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0138:	f8cb 0000 	str.w	r0, [fp]
    refY += imu.calcAccel(imu.ay);
 80a013c:	481b      	ldr	r0, [pc, #108]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
 80a013e:	f000 fabe 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
 80a0142:	4601      	mov	r1, r0
 80a0144:	f8da 0000 	ldr.w	r0, [sl]
 80a0148:	f003 f800 	bl	80a314c <__addsf3>
    refZ += imu.calcAccel(imu.az);
 80a014c:	4c18      	ldr	r4, [pc, #96]	; (80a01b0 <_Z15calibrateSensorv+0xb8>)
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
 80a014e:	f8ca 0000 	str.w	r0, [sl]
    refZ += imu.calcAccel(imu.az);
 80a0152:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
 80a0156:	4815      	ldr	r0, [pc, #84]	; (80a01ac <_Z15calibrateSensorv+0xb4>)
 80a0158:	f000 fab1 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
 80a015c:	6821      	ldr	r1, [r4, #0]
 80a015e:	f002 fff5 	bl	80a314c <__addsf3>
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a0162:	3d01      	subs	r5, #1
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    refX += imu.calcAccel(imu.ax);
 80a0164:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a01bc <_Z15calibrateSensorv+0xc4>
    refY += imu.calcAccel(imu.ay);
 80a0168:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a01c0 <_Z15calibrateSensorv+0xc8>
    refZ += imu.calcAccel(imu.az);
 80a016c:	4607      	mov	r7, r0
 80a016e:	6020      	str	r0, [r4, #0]
}

void calibrateSensor(){
  int count = 100;
  Serial.print("calibrating sensor. acc.");
  for(int i = 0; i < count; i++){
 80a0170:	d1cf      	bne.n	80a0112 <_Z15calibrateSensorv+0x1a>
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a0172:	f8d9 0000 	ldr.w	r0, [r9]
 80a0176:	490f      	ldr	r1, [pc, #60]	; (80a01b4 <_Z15calibrateSensorv+0xbc>)
 80a0178:	f003 f9a4 	bl	80a34c4 <__aeabi_fdiv>
  refY = refY / count;
 80a017c:	490d      	ldr	r1, [pc, #52]	; (80a01b4 <_Z15calibrateSensorv+0xbc>)
    }
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
 80a017e:	f8c9 0000 	str.w	r0, [r9]
  refY = refY / count;
 80a0182:	f8d8 0000 	ldr.w	r0, [r8]
 80a0186:	f003 f99d 	bl	80a34c4 <__aeabi_fdiv>
  refZ = refZ / count; 
 80a018a:	490a      	ldr	r1, [pc, #40]	; (80a01b4 <_Z15calibrateSensorv+0xbc>)
    refX += imu.calcAccel(imu.ax);
    refY += imu.calcAccel(imu.ay);
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
 80a018c:	f8c8 0000 	str.w	r0, [r8]
  refZ = refZ / count; 
 80a0190:	4638      	mov	r0, r7
 80a0192:	f003 f997 	bl	80a34c4 <__aeabi_fdiv>
 80a0196:	6020      	str	r0, [r4, #0]
  Serial.println("done");
 80a0198:	f002 f88a 	bl	80a22b0 <_Z16_fetch_usbserialv>
//  Serial.print(" refY: ");
//  Serial.print(refY);
//  Serial.print(" refZ: ");
//  Serial.print(refZ);
//  Serial.println(" ");
}
 80a019c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refZ += imu.calcAccel(imu.az);
  }
  refX = refX / count;
  refY = refY / count;
  refZ = refZ / count; 
  Serial.println("done");
 80a01a0:	4905      	ldr	r1, [pc, #20]	; (80a01b8 <_Z15calibrateSensorv+0xc0>)
 80a01a2:	f001 bc06 	b.w	80a19b2 <_ZN5Print7printlnEPKc>
 80a01a6:	bf00      	nop
 80a01a8:	080a37fc 	.word	0x080a37fc
 80a01ac:	200000a0 	.word	0x200000a0
 80a01b0:	2000008c 	.word	0x2000008c
 80a01b4:	42c80000 	.word	0x42c80000
 80a01b8:	080a3815 	.word	0x080a3815
 80a01bc:	20000084 	.word	0x20000084
 80a01c0:	20000088 	.word	0x20000088

080a01c4 <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a01c4:	b538      	push	{r3, r4, r5, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01c6:	4c1c      	ldr	r4, [pc, #112]	; (80a0238 <_Z8setupImuv+0x74>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a01c8:	231e      	movs	r3, #30
 80a01ca:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01cc:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a01ce:	4a1b      	ldr	r2, [pc, #108]	; (80a023c <_Z8setupImuv+0x78>)
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01d0:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a01d2:	4b1b      	ldr	r3, [pc, #108]	; (80a0240 <_Z8setupImuv+0x7c>)
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01d4:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a01d6:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a01d8:	4b1a      	ldr	r3, [pc, #104]	; (80a0244 <_Z8setupImuv+0x80>)
 80a01da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a01de:	4620      	mov	r0, r4
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01e0:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a01e2:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a01e4:	f000 fce7 	bl	80a0bb6 <_ZN7LSM9DS15beginEv>
 80a01e8:	b978      	cbnz	r0, 80a020a <_Z8setupImuv+0x46>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a01ea:	f002 f861 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a01ee:	4916      	ldr	r1, [pc, #88]	; (80a0248 <_Z8setupImuv+0x84>)
 80a01f0:	f001 fbdf 	bl	80a19b2 <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a01f4:	f002 f85c 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a01f8:	4914      	ldr	r1, [pc, #80]	; (80a024c <_Z8setupImuv+0x88>)
 80a01fa:	f001 fbda 	bl	80a19b2 <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a01fe:	f002 f857 	bl	80a22b0 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0202:	4913      	ldr	r1, [pc, #76]	; (80a0250 <_Z8setupImuv+0x8c>)
 80a0204:	f001 fbd5 	bl	80a19b2 <_ZN5Print7printlnEPKc>
 80a0208:	e7fe      	b.n	80a0208 <_Z8setupImuv+0x44>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a020a:	f002 f851 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a020e:	4911      	ldr	r1, [pc, #68]	; (80a0254 <_Z8setupImuv+0x90>)
 80a0210:	f001 fbcf 	bl	80a19b2 <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a0214:	4629      	mov	r1, r5
 80a0216:	4620      	mov	r0, r4
 80a0218:	f000 fdd2 	bl	80a0dc0 <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a021c:	4629      	mov	r1, r5
 80a021e:	4620      	mov	r0, r4
 80a0220:	f000 fe9a 	bl	80a0f58 <_ZN7LSM9DS112calibrateMagEb>
  calibrateSensor();
 80a0224:	f7ff ff68 	bl	80a00f8 <_Z15calibrateSensorv>
  Serial.println("Calibration finished");
 80a0228:	f002 f842 	bl	80a22b0 <_Z16_fetch_usbserialv>
}
 80a022c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  calibrateSensor();
  Serial.println("Calibration finished");
 80a0230:	4909      	ldr	r1, [pc, #36]	; (80a0258 <_Z8setupImuv+0x94>)
 80a0232:	f001 bbbe 	b.w	80a19b2 <_ZN5Print7printlnEPKc>
 80a0236:	bf00      	nop
 80a0238:	200000a0 	.word	0x200000a0
 80a023c:	40a00000 	.word	0x40a00000
 80a0240:	2000009c 	.word	0x2000009c
 80a0244:	20000180 	.word	0x20000180
 80a0248:	080a381a 	.word	0x080a381a
 80a024c:	080a383e 	.word	0x080a383e
 80a0250:	080a3853 	.word	0x080a3853
 80a0254:	080a38db 	.word	0x080a38db
 80a0258:	080a38ef 	.word	0x080a38ef

080a025c <setup>:

/////---------------------------------------------------------------- IMU


// setup() runs once, when the device is first turned on.
void setup() {
 80a025c:	b570      	push	{r4, r5, r6, lr}
 80a025e:	b096      	sub	sp, #88	; 0x58
  //waiting for serial to correctly initialze and allocate memory
  //serial object
  while(!Serial);
 80a0260:	f002 f826 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a0264:	f002 f80b 	bl	80a227e <_ZN9USBSerialcvbEv>
 80a0268:	2800      	cmp	r0, #0
 80a026a:	d0f9      	beq.n	80a0260 <setup+0x4>
 80a026c:	4c2c      	ldr	r4, [pc, #176]	; (80a0320 <setup+0xc4>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a026e:	2300      	movs	r3, #0
 80a0270:	461a      	mov	r2, r3
 80a0272:	4619      	mov	r1, r3
 80a0274:	6860      	ldr	r0, [r4, #4]
 80a0276:	f001 f99b 	bl	80a15b0 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a027a:	2200      	movs	r2, #0
 80a027c:	4611      	mov	r1, r2
 80a027e:	6860      	ldr	r0, [r4, #4]
 80a0280:	4d27      	ldr	r5, [pc, #156]	; (80a0320 <setup+0xc4>)
 80a0282:	f001 f9ad 	bl	80a15e0 <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a0286:	2800      	cmp	r0, #0
 80a0288:	d0f7      	beq.n	80a027a <setup+0x1e>
  Serial.println("Setup");
 80a028a:	f002 f811 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a028e:	4925      	ldr	r1, [pc, #148]	; (80a0324 <setup+0xc8>)
 80a0290:	f001 fb8f 	bl	80a19b2 <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a0294:	4b24      	ldr	r3, [pc, #144]	; (80a0328 <setup+0xcc>)
 80a0296:	2200      	movs	r2, #0
 80a0298:	8819      	ldrh	r1, [r3, #0]
 80a029a:	4824      	ldr	r0, [pc, #144]	; (80a032c <setup+0xd0>)
 80a029c:	f001 fd55 	bl	80a1d4a <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a02a0:	2300      	movs	r3, #0
 80a02a2:	4619      	mov	r1, r3
 80a02a4:	4a22      	ldr	r2, [pc, #136]	; (80a0330 <setup+0xd4>)
 80a02a6:	6868      	ldr	r0, [r5, #4]
 80a02a8:	f001 f9d2 	bl	80a1650 <network_set_hostname>
  WiFi.setHostname("HQRouter_PUBLISH");
  Serial.println(WiFi.hostname());
 80a02ac:	f002 f800 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a02b0:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02b2:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a02b4:	2240      	movs	r2, #64	; 0x40
 80a02b6:	2100      	movs	r1, #0
 80a02b8:	a806      	add	r0, sp, #24
 80a02ba:	f003 fa54 	bl	80a3766 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a02be:	2340      	movs	r3, #64	; 0x40
 80a02c0:	aa06      	add	r2, sp, #24
 80a02c2:	4621      	mov	r1, r4
 80a02c4:	9400      	str	r4, [sp, #0]
 80a02c6:	6868      	ldr	r0, [r5, #4]
 80a02c8:	f001 f9ca 	bl	80a1660 <network_get_hostname>
        return String(buf);
 80a02cc:	a906      	add	r1, sp, #24
 80a02ce:	a802      	add	r0, sp, #8
 80a02d0:	f001 fc96 	bl	80a1c00 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02d4:	9902      	ldr	r1, [sp, #8]
 80a02d6:	4630      	mov	r0, r6
 80a02d8:	f001 fb6b 	bl	80a19b2 <_ZN5Print7printlnEPKc>
 80a02dc:	a802      	add	r0, sp, #8
 80a02de:	f001 fc48 	bl	80a1b72 <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a02e2:	f001 ffe5 	bl	80a22b0 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a02e6:	4622      	mov	r2, r4
 80a02e8:	4606      	mov	r6, r0
 80a02ea:	4621      	mov	r1, r4
 80a02ec:	6868      	ldr	r0, [r5, #4]
 80a02ee:	f001 f957 	bl	80a15a0 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a02f2:	1c81      	adds	r1, r0, #2
 80a02f4:	a806      	add	r0, sp, #24
 80a02f6:	f001 fa63 	bl	80a17c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a02fa:	a906      	add	r1, sp, #24
 80a02fc:	4630      	mov	r0, r6
 80a02fe:	f001 fb62 	bl	80a19c6 <_ZN5Print7printlnERK9Printable>
   Serial.begin(9600);
 80a0302:	f001 ffd5 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a0306:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a030a:	f001 ffb1 	bl	80a2270 <_ZN9USBSerial5beginEl>
    iVx = 0;
    iVy = 0;
    iVz = 0;

  setupImu();
 80a030e:	f7ff ff59 	bl	80a01c4 <_Z8setupImuv>
    
  updateTimer.SetCallback(OnTimer);
 80a0312:	4908      	ldr	r1, [pc, #32]	; (80a0334 <setup+0xd8>)
 80a0314:	4808      	ldr	r0, [pc, #32]	; (80a0338 <setup+0xdc>)
 80a0316:	f000 f97b 	bl	80a0610 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>
  }
 80a031a:	b016      	add	sp, #88	; 0x58
 80a031c:	bd70      	pop	{r4, r5, r6, pc}
 80a031e:	bf00      	nop
 80a0320:	20000634 	.word	0x20000634
 80a0324:	080a3904 	.word	0x080a3904
 80a0328:	20000000 	.word	0x20000000
 80a032c:	20000124 	.word	0x20000124
 80a0330:	080a390a 	.word	0x080a390a
 80a0334:	080a03ed 	.word	0x080a03ed
 80a0338:	20000170 	.word	0x20000170

080a033c <_Z10checkSpeedv>:
     fluxY = 0;
     fluxZ = 0;

}

boolean checkSpeed(){
 80a033c:	b538      	push	{r3, r4, r5, lr}
  if((fluxX + fluxY + fluxZ) <= speedLimit){
 80a033e:	4b0c      	ldr	r3, [pc, #48]	; (80a0370 <_Z10checkSpeedv+0x34>)
 80a0340:	f04f 0401 	mov.w	r4, #1
 80a0344:	6819      	ldr	r1, [r3, #0]
 80a0346:	4b0b      	ldr	r3, [pc, #44]	; (80a0374 <_Z10checkSpeedv+0x38>)
 80a0348:	6818      	ldr	r0, [r3, #0]
 80a034a:	f002 feff 	bl	80a314c <__addsf3>
 80a034e:	4b0a      	ldr	r3, [pc, #40]	; (80a0378 <_Z10checkSpeedv+0x3c>)
 80a0350:	6819      	ldr	r1, [r3, #0]
 80a0352:	f002 fefb 	bl	80a314c <__addsf3>
 80a0356:	4b09      	ldr	r3, [pc, #36]	; (80a037c <_Z10checkSpeedv+0x40>)
 80a0358:	4605      	mov	r5, r0
 80a035a:	6818      	ldr	r0, [r3, #0]
 80a035c:	f002 ffaa 	bl	80a32b4 <__aeabi_i2f>
 80a0360:	4601      	mov	r1, r0
 80a0362:	4628      	mov	r0, r5
 80a0364:	f003 f9a2 	bl	80a36ac <__aeabi_fcmple>
 80a0368:	b900      	cbnz	r0, 80a036c <_Z10checkSpeedv+0x30>
 80a036a:	4604      	mov	r4, r0
    return true;
  }else{
    return false;
  }
}
 80a036c:	b2e0      	uxtb	r0, r4
 80a036e:	bd38      	pop	{r3, r4, r5, pc}
 80a0370:	200001a0 	.word	0x200001a0
 80a0374:	2000019c 	.word	0x2000019c
 80a0378:	200001a4 	.word	0x200001a4
 80a037c:	20000004 	.word	0x20000004

080a0380 <_Z4sendv>:
void loop() {
getMouvement();
updateTimer.Update();
}

void send(){
 80a0380:	b530      	push	{r4, r5, lr}
  IPAddress ipAddress(192,168,0,100);
 80a0382:	2364      	movs	r3, #100	; 0x64
void loop() {
getMouvement();
updateTimer.Update();
}

void send(){
 80a0384:	b0a5      	sub	sp, #148	; 0x94
  IPAddress ipAddress(192,168,0,100);
 80a0386:	22a8      	movs	r2, #168	; 0xa8
 80a0388:	9300      	str	r3, [sp, #0]
 80a038a:	21c0      	movs	r1, #192	; 0xc0
 80a038c:	2300      	movs	r3, #0
 80a038e:	a803      	add	r0, sp, #12
 80a0390:	f001 fa3e 	bl	80a1810 <_ZN9IPAddressC1Ehhhh>
  unsigned int localPort = 8888;

///from 
  OSCMessage outMessage("/izzyParticle");
 80a0394:	4911      	ldr	r1, [pc, #68]	; (80a03dc <_Z4sendv+0x5c>)
 80a0396:	a80f      	add	r0, sp, #60	; 0x3c
 80a0398:	f000 fe4a 	bl	80a1030 <_ZN10OSCMessageC1EPKc>
  int speedInt = 0;
  if(checkSpeed()){
 80a039c:	f7ff ffce 	bl	80a033c <_Z10checkSpeedv>
    speedInt = 1;
  }else{
    speedInt = 0;
  }
  outMessage.addInt(speedInt);
 80a03a0:	4601      	mov	r1, r0
 80a03a2:	a80f      	add	r0, sp, #60	; 0x3c
 80a03a4:	f000 fe85 	bl	80a10b2 <_ZN10OSCMessage6addIntEi>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a03a8:	4b0d      	ldr	r3, [pc, #52]	; (80a03e0 <_Z4sendv+0x60>)
 80a03aa:	ac0a      	add	r4, sp, #40	; 0x28
 80a03ac:	ad04      	add	r5, sp, #16
 80a03ae:	9309      	str	r3, [sp, #36]	; 0x24
 80a03b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a03b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a03b4:	682b      	ldr	r3, [r5, #0]
  outMessage.send(udp, ipAddress, localPort);
 80a03b6:	aa09      	add	r2, sp, #36	; 0x24
 80a03b8:	7023      	strb	r3, [r4, #0]
 80a03ba:	490a      	ldr	r1, [pc, #40]	; (80a03e4 <_Z4sendv+0x64>)
 80a03bc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80a03c0:	a80f      	add	r0, sp, #60	; 0x3c
 80a03c2:	f000 fe9d 	bl	80a1100 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  Serial.println("in send method");
 80a03c6:	f001 ff73 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a03ca:	4907      	ldr	r1, [pc, #28]	; (80a03e8 <_Z4sendv+0x68>)
 80a03cc:	f001 faf1 	bl	80a19b2 <_ZN5Print7printlnEPKc>
void send(){
  IPAddress ipAddress(192,168,0,100);
  unsigned int localPort = 8888;

///from 
  OSCMessage outMessage("/izzyParticle");
 80a03d0:	a80f      	add	r0, sp, #60	; 0x3c
 80a03d2:	f000 fe51 	bl	80a1078 <_ZN10OSCMessageD1Ev>
    speedInt = 0;
  }
  outMessage.addInt(speedInt);
  outMessage.send(udp, ipAddress, localPort);
  Serial.println("in send method");
}
 80a03d6:	b025      	add	sp, #148	; 0x94
 80a03d8:	bd30      	pop	{r4, r5, pc}
 80a03da:	bf00      	nop
 80a03dc:	080a391b 	.word	0x080a391b
 80a03e0:	080a3994 	.word	0x080a3994
 80a03e4:	20000124 	.word	0x20000124
 80a03e8:	080a3929 	.word	0x080a3929

080a03ec <_Z7OnTimerv>:

void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a03ec:	b508      	push	{r3, lr}
 send();
 80a03ee:	f7ff ffc7 	bl	80a0380 <_Z4sendv>

     fluxX = 0;
 80a03f2:	4a04      	ldr	r2, [pc, #16]	; (80a0404 <_Z7OnTimerv+0x18>)
 80a03f4:	2300      	movs	r3, #0
 80a03f6:	6013      	str	r3, [r2, #0]
     fluxY = 0;
 80a03f8:	4a03      	ldr	r2, [pc, #12]	; (80a0408 <_Z7OnTimerv+0x1c>)
 80a03fa:	6013      	str	r3, [r2, #0]
     fluxZ = 0;
 80a03fc:	4a03      	ldr	r2, [pc, #12]	; (80a040c <_Z7OnTimerv+0x20>)
 80a03fe:	6013      	str	r3, [r2, #0]
 80a0400:	bd08      	pop	{r3, pc}
 80a0402:	bf00      	nop
 80a0404:	2000019c 	.word	0x2000019c
 80a0408:	200001a0 	.word	0x200001a0
 80a040c:	200001a4 	.word	0x200001a4

080a0410 <_Z12getMouvementv>:
    return true;
  }else{
    return false;
  }
}
void getMouvement(){
 80a0410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
 80a0414:	4a39      	ldr	r2, [pc, #228]	; (80a04fc <_Z12getMouvementv+0xec>)
    return false;
  }
}
void getMouvement(){
//    reset values
    dX = 0;
 80a0416:	4f3a      	ldr	r7, [pc, #232]	; (80a0500 <_Z12getMouvementv+0xf0>)
    dY = 0;
 80a0418:	4e3a      	ldr	r6, [pc, #232]	; (80a0504 <_Z12getMouvementv+0xf4>)
    dZ = 0;
 80a041a:	4d3b      	ldr	r5, [pc, #236]	; (80a0508 <_Z12getMouvementv+0xf8>)
    return false;
  }
}
void getMouvement(){
//    reset values
    dX = 0;
 80a041c:	2300      	movs	r3, #0
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
 80a041e:	4c3b      	ldr	r4, [pc, #236]	; (80a050c <_Z12getMouvementv+0xfc>)
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a0420:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80a0518 <_Z12getMouvementv+0x108>
 80a0424:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80a051c <_Z12getMouvementv+0x10c>
    return false;
  }
}
void getMouvement(){
//    reset values
    dX = 0;
 80a0428:	603b      	str	r3, [r7, #0]
    dY = 0;
 80a042a:	6033      	str	r3, [r6, #0]
    dZ = 0;
 80a042c:	602b      	str	r3, [r5, #0]
    avMvmt = 0;
 80a042e:	6013      	str	r3, [r2, #0]
 80a0430:	f04f 0864 	mov.w	r8, #100	; 0x64


    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
 80a0434:	4835      	ldr	r0, [pc, #212]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a0436:	f000 fb96 	bl	80a0b66 <_ZN7LSM9DS114accelAvailableEv>
 80a043a:	b110      	cbz	r0, 80a0442 <_Z12getMouvementv+0x32>
    {
      imu.readAccel();
 80a043c:	4833      	ldr	r0, [pc, #204]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a043e:	f000 fc5d 	bl	80a0cfc <_ZN7LSM9DS19readAccelEv>
    }
    dX=imu.calcAccel(imu.ax);
 80a0442:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a0446:	4831      	ldr	r0, [pc, #196]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a0448:	f000 f939 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
    dY=imu.calcAccel(imu.ay);
 80a044c:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    for (int i = 0; i < 100; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
 80a0450:	6038      	str	r0, [r7, #0]
    dY=imu.calcAccel(imu.ay);
 80a0452:	482e      	ldr	r0, [pc, #184]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a0454:	f000 f933 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
    dZ=imu.calcAccel(imu.az);
 80a0458:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
 80a045c:	6030      	str	r0, [r6, #0]
    dZ=imu.calcAccel(imu.az);
 80a045e:	482b      	ldr	r0, [pc, #172]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a0460:	f000 f92d 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a0464:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
    {
      imu.readAccel();
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);
 80a0468:	6028      	str	r0, [r5, #0]

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a046a:	4828      	ldr	r0, [pc, #160]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a046c:	f000 f927 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
 80a0470:	f8db 1000 	ldr.w	r1, [fp]
 80a0474:	f002 fe68 	bl	80a3148 <__aeabi_fsub>
 80a0478:	f003 f936 	bl	80a36e8 <__aeabi_f2iz>
 80a047c:	2800      	cmp	r0, #0
 80a047e:	bfb8      	it	lt
 80a0480:	4240      	neglt	r0, r0
 80a0482:	f002 ff17 	bl	80a32b4 <__aeabi_i2f>
 80a0486:	f8da 1000 	ldr.w	r1, [sl]
 80a048a:	f002 fe5f 	bl	80a314c <__addsf3>
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a048e:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    }
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
 80a0492:	f8ca 0000 	str.w	r0, [sl]
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a0496:	481d      	ldr	r0, [pc, #116]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a0498:	f000 f911 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
 80a049c:	4b1c      	ldr	r3, [pc, #112]	; (80a0510 <_Z12getMouvementv+0x100>)
 80a049e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80a0520 <_Z12getMouvementv+0x110>
 80a04a2:	6819      	ldr	r1, [r3, #0]
 80a04a4:	f002 fe50 	bl	80a3148 <__aeabi_fsub>
 80a04a8:	f003 f91e 	bl	80a36e8 <__aeabi_f2iz>
 80a04ac:	2800      	cmp	r0, #0
 80a04ae:	bfb8      	it	lt
 80a04b0:	4240      	neglt	r0, r0
 80a04b2:	f002 feff 	bl	80a32b4 <__aeabi_i2f>
 80a04b6:	f8d9 1000 	ldr.w	r1, [r9]
 80a04ba:	f002 fe47 	bl	80a314c <__addsf3>
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a04be:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
    dX=imu.calcAccel(imu.ax);
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
 80a04c2:	f8c9 0000 	str.w	r0, [r9]
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a04c6:	4811      	ldr	r0, [pc, #68]	; (80a050c <_Z12getMouvementv+0xfc>)
 80a04c8:	f000 f8f9 	bl	80a06be <_ZN7LSM9DS19calcAccelEs>
 80a04cc:	4b11      	ldr	r3, [pc, #68]	; (80a0514 <_Z12getMouvementv+0x104>)
 80a04ce:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a0524 <_Z12getMouvementv+0x114>
 80a04d2:	6819      	ldr	r1, [r3, #0]
 80a04d4:	f002 fe38 	bl	80a3148 <__aeabi_fsub>
 80a04d8:	f003 f906 	bl	80a36e8 <__aeabi_f2iz>
 80a04dc:	2800      	cmp	r0, #0
 80a04de:	bfb8      	it	lt
 80a04e0:	4240      	neglt	r0, r0
 80a04e2:	f002 fee7 	bl	80a32b4 <__aeabi_i2f>
 80a04e6:	f8d9 1000 	ldr.w	r1, [r9]
 80a04ea:	f002 fe2f 	bl	80a314c <__addsf3>
    dY = 0;
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
 80a04ee:	f1b8 0801 	subs.w	r8, r8, #1
    dY=imu.calcAccel(imu.ay);
    dZ=imu.calcAccel(imu.az);

    fluxX += abs(imu.calcAccel(imu.ax) - refX);
    fluxY += abs(imu.calcAccel(imu.ay) - refY);
    fluxZ += abs(imu.calcAccel(imu.az) - refZ);
 80a04f2:	f8c9 0000 	str.w	r0, [r9]
    dY = 0;
    dZ = 0;
    avMvmt = 0;


    for (int i = 0; i < 100; i++){
 80a04f6:	d19d      	bne.n	80a0434 <_Z12getMouvementv+0x24>
    // if (avMvmt > lossThreshold && pixelPointer >= 0){
    // //   pixels[pixelPointer] = 0;
    //   pixelPointer--;
    // }
    
}
 80a04f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a04fc:	2000017c 	.word	0x2000017c
 80a0500:	20000098 	.word	0x20000098
 80a0504:	200001a8 	.word	0x200001a8
 80a0508:	200001ac 	.word	0x200001ac
 80a050c:	200000a0 	.word	0x200000a0
 80a0510:	20000088 	.word	0x20000088
 80a0514:	2000008c 	.word	0x2000008c
 80a0518:	2000019c 	.word	0x2000019c
 80a051c:	20000084 	.word	0x20000084
 80a0520:	200001a0 	.word	0x200001a0
 80a0524:	200001a4 	.word	0x200001a4

080a0528 <loop>:
    
  updateTimer.SetCallback(OnTimer);
  }


void loop() {
 80a0528:	b508      	push	{r3, lr}
getMouvement();
 80a052a:	f7ff ff71 	bl	80a0410 <_Z12getMouvementv>
updateTimer.Update();
}
 80a052e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }


void loop() {
getMouvement();
updateTimer.Update();
 80a0532:	4801      	ldr	r0, [pc, #4]	; (80a0538 <loop+0x10>)
 80a0534:	f000 b860 	b.w	80a05f8 <_ZN20SparkCorePolledTimer6UpdateEv>
 80a0538:	20000170 	.word	0x20000170

080a053c <_GLOBAL__sub_I_SystemMode>:
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
 80a053c:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a053e:	f000 fe91 	bl	80a1264 <HAL_Pin_Map>
#include "LSM9DS1_Types.h"
#include "simple-OSC.h"
#include "math.h"
#include "SparkCorePolledTimer.h"

SYSTEM_THREAD(ENABLED);
 80a0542:	2100      	movs	r1, #0
 80a0544:	2001      	movs	r0, #1
 80a0546:	f001 f807 	bl	80a1558 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a054a:	4b13      	ldr	r3, [pc, #76]	; (80a0598 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a054c:	2200      	movs	r2, #0
 80a054e:	701a      	strb	r2, [r3, #0]
 80a0550:	805a      	strh	r2, [r3, #2]
 80a0552:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0556:	4c11      	ldr	r4, [pc, #68]	; (80a059c <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0558:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a055a:	2002      	movs	r0, #2
 80a055c:	f000 fff4 	bl	80a1548 <set_system_mode>
 80a0560:	4d0f      	ldr	r5, [pc, #60]	; (80a05a0 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a0562:	4620      	mov	r0, r4
 80a0564:	f001 f91e 	bl	80a17a4 <_ZN9IPAddressC1Ev>
 80a0568:	4620      	mov	r0, r4
int port;
UDP udp;
 80a056a:	4c0e      	ldr	r4, [pc, #56]	; (80a05a4 <_GLOBAL__sub_I_SystemMode+0x68>)

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

unsigned int localPort = 8888;
IPAddress ipAddress;
 80a056c:	462a      	mov	r2, r5
 80a056e:	490e      	ldr	r1, [pc, #56]	; (80a05a8 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0570:	f002 f8a4 	bl	80a26bc <__aeabi_atexit>
int port;
UDP udp;
 80a0574:	4620      	mov	r0, r4
 80a0576:	f001 fd27 	bl	80a1fc8 <_ZN3UDPC1Ev>
 80a057a:	462a      	mov	r2, r5
 80a057c:	490b      	ldr	r1, [pc, #44]	; (80a05ac <_GLOBAL__sub_I_SystemMode+0x70>)
 80a057e:	4620      	mov	r0, r4
 80a0580:	f002 f89c 	bl	80a26bc <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a0584:	480a      	ldr	r0, [pc, #40]	; (80a05b0 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0586:	f000 f893 	bl	80a06b0 <_ZN7LSM9DS1C1Ev>
    Serial.println(fluxX);
    Serial.print("fluxY : ");
    Serial.println(fluxY);
    Serial.print("fluxZ : ");
    Serial.println(fluxZ);
 80a058a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a058e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0592:	4808      	ldr	r0, [pc, #32]	; (80a05b4 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a0594:	f000 b816 	b.w	80a05c4 <_ZN20SparkCorePolledTimerC1Em>
 80a0598:	20000090 	.word	0x20000090
 80a059c:	20000184 	.word	0x20000184
 80a05a0:	20000080 	.word	0x20000080
 80a05a4:	20000124 	.word	0x20000124
 80a05a8:	080a00b3 	.word	0x080a00b3
 80a05ac:	080a00b5 	.word	0x080a00b5
 80a05b0:	200000a0 	.word	0x200000a0
 80a05b4:	20000170 	.word	0x20000170

080a05b8 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a05b8:	b510      	push	{r4, lr}
 80a05ba:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05bc:	f000 fe4a 	bl	80a1254 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a05c0:	6020      	str	r0, [r4, #0]
 80a05c2:	bd10      	pop	{r4, pc}

080a05c4 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a05c4:	b538      	push	{r3, r4, r5, lr}
 80a05c6:	4604      	mov	r4, r0
 80a05c8:	460d      	mov	r5, r1
    Reset();
 80a05ca:	f7ff fff5 	bl	80a05b8 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a05ce:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a05d0:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a05d2:	60a3      	str	r3, [r4, #8]
}
 80a05d4:	4620      	mov	r0, r4
 80a05d6:	bd38      	pop	{r3, r4, r5, pc}

080a05d8 <_ZN20SparkCorePolledTimer10HasElapsedEv>:

void SparkCorePolledTimer::Reset(void){
    timeMark=millis();
}

int SparkCorePolledTimer::HasElapsed(){
 80a05d8:	b510      	push	{r4, lr}
 80a05da:	4604      	mov	r4, r0
 80a05dc:	f000 fe3a 	bl	80a1254 <HAL_Timer_Get_Milli_Seconds>
  
    timeCurrent=millis();
    timeElapsed=timeCurrent-timeMark;  


    if(timeElapsed>=intervalMS) {
 80a05e0:	6823      	ldr	r3, [r4, #0]
 80a05e2:	1ac0      	subs	r0, r0, r3
 80a05e4:	6863      	ldr	r3, [r4, #4]
 80a05e6:	4298      	cmp	r0, r3
 80a05e8:	d304      	bcc.n	80a05f4 <_ZN20SparkCorePolledTimer10HasElapsedEv+0x1c>
        Reset();
 80a05ea:	4620      	mov	r0, r4
 80a05ec:	f7ff ffe4 	bl	80a05b8 <_ZN20SparkCorePolledTimer5ResetEv>
        result=true;
 80a05f0:	2001      	movs	r0, #1
 80a05f2:	bd10      	pop	{r4, pc}
}

int SparkCorePolledTimer::HasElapsed(){
    unsigned long timeCurrent;
    unsigned long timeElapsed;
    int result=false;
 80a05f4:	2000      	movs	r0, #0
    if(timeElapsed>=intervalMS) {
        Reset();
        result=true;
    }
    return(result);  
}
 80a05f6:	bd10      	pop	{r4, pc}

080a05f8 <_ZN20SparkCorePolledTimer6UpdateEv>:

void SparkCorePolledTimer::Update(void){
 80a05f8:	b510      	push	{r4, lr}
    if (callback!=NULL) {
 80a05fa:	6883      	ldr	r3, [r0, #8]
        result=true;
    }
    return(result);  
}

void SparkCorePolledTimer::Update(void){
 80a05fc:	4604      	mov	r4, r0
    if (callback!=NULL) {
 80a05fe:	b133      	cbz	r3, 80a060e <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
        if(HasElapsed()) {
 80a0600:	f7ff ffea 	bl	80a05d8 <_ZN20SparkCorePolledTimer10HasElapsedEv>
 80a0604:	b118      	cbz	r0, 80a060e <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
            callback();
 80a0606:	68a3      	ldr	r3, [r4, #8]
        }
    }
}
 80a0608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SparkCorePolledTimer::Update(void){
    if (callback!=NULL) {
        if(HasElapsed()) {
            callback();
 80a060c:	4718      	bx	r3
 80a060e:	bd10      	pop	{r4, pc}

080a0610 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a0610:	6081      	str	r1, [r0, #8]
 80a0612:	4770      	bx	lr

080a0614 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0614:	f000 be26 	b.w	80a1264 <HAL_Pin_Map>

080a0618 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0618:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a061a:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a061c:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a061e:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0620:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0622:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0624:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0626:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0628:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a062a:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a062c:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a062e:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0630:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0632:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0634:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0638:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a063a:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a063c:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a063e:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0640:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0642:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0644:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0646:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0648:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a064a:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a064c:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a064e:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0650:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0654:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0656:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0658:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a065a:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a065c:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a065e:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0660:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0662:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0664:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0666:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0668:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a066a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a066e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0670:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0674:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0678:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a067a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a067e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0682:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0686:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0688:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a068a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a068c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a068e:	6565      	str	r5, [r4, #84]	; 0x54
 80a0690:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0694:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0698:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a069c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a06a0:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a06a4:	d1f0      	bne.n	80a0688 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a06a6:	f04f 0300 	mov.w	r3, #0
 80a06aa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a06ae:	bd30      	pop	{r4, r5, pc}

080a06b0 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a06b0:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a06b2:	231e      	movs	r3, #30
 80a06b4:	226b      	movs	r2, #107	; 0x6b
 80a06b6:	2101      	movs	r1, #1
 80a06b8:	f7ff ffae 	bl	80a0618 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a06bc:	bd10      	pop	{r4, pc}

080a06be <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a06be:	b510      	push	{r4, lr}
 80a06c0:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a06c2:	4608      	mov	r0, r1
 80a06c4:	f002 fdf6 	bl	80a32b4 <__aeabi_i2f>
 80a06c8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a06ca:	f002 fe47 	bl	80a335c <__aeabi_fmul>
}
 80a06ce:	bd10      	pop	{r4, pc}

080a06d0 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a06d0:	b510      	push	{r4, lr}
 80a06d2:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a06d4:	88c0      	ldrh	r0, [r0, #6]
 80a06d6:	f002 fde9 	bl	80a32ac <__aeabi_ui2f>
 80a06da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a06de:	f002 fe3d 	bl	80a335c <__aeabi_fmul>
 80a06e2:	6760      	str	r0, [r4, #116]	; 0x74
 80a06e4:	bd10      	pop	{r4, pc}

080a06e6 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a06e6:	b510      	push	{r4, lr}
 80a06e8:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a06ea:	7dc0      	ldrb	r0, [r0, #23]
 80a06ec:	f002 fdde 	bl	80a32ac <__aeabi_ui2f>
 80a06f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a06f4:	f002 fe32 	bl	80a335c <__aeabi_fmul>
 80a06f8:	67a0      	str	r0, [r4, #120]	; 0x78
 80a06fa:	bd10      	pop	{r4, pc}

080a06fc <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a06fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0700:	3b04      	subs	r3, #4
 80a0702:	2b0c      	cmp	r3, #12
 80a0704:	d814      	bhi.n	80a0730 <_ZN7LSM9DS18calcmResEv+0x34>
 80a0706:	e8df f003 	tbb	[pc, r3]
 80a070a:	1307      	.short	0x1307
 80a070c:	130a1313 	.word	0x130a1313
 80a0710:	130d1313 	.word	0x130d1313
 80a0714:	1313      	.short	0x1313
 80a0716:	10          	.byte	0x10
 80a0717:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0718:	4b06      	ldr	r3, [pc, #24]	; (80a0734 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a071a:	681b      	ldr	r3, [r3, #0]
 80a071c:	e007      	b.n	80a072e <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a071e:	4b05      	ldr	r3, [pc, #20]	; (80a0734 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0720:	685b      	ldr	r3, [r3, #4]
 80a0722:	e004      	b.n	80a072e <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0724:	4b03      	ldr	r3, [pc, #12]	; (80a0734 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0726:	689b      	ldr	r3, [r3, #8]
 80a0728:	e001      	b.n	80a072e <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a072a:	4b02      	ldr	r3, [pc, #8]	; (80a0734 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a072c:	68db      	ldr	r3, [r3, #12]
 80a072e:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a0730:	4770      	bx	lr
 80a0732:	bf00      	nop
 80a0734:	20000008 	.word	0x20000008

080a0738 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0738:	88c3      	ldrh	r3, [r0, #6]
 80a073a:	2bf5      	cmp	r3, #245	; 0xf5
 80a073c:	d007      	beq.n	80a074e <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a073e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0742:	d004      	beq.n	80a074e <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0744:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0748:	bf1c      	itt	ne
 80a074a:	23f5      	movne	r3, #245	; 0xf5
 80a074c:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a074e:	7dc2      	ldrb	r2, [r0, #23]
 80a0750:	2a10      	cmp	r2, #16
 80a0752:	d803      	bhi.n	80a075c <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0754:	4b08      	ldr	r3, [pc, #32]	; (80a0778 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0756:	40d3      	lsrs	r3, r2
 80a0758:	07da      	lsls	r2, r3, #31
 80a075a:	d401      	bmi.n	80a0760 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a075c:	2302      	movs	r3, #2
 80a075e:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0760:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0764:	2a10      	cmp	r2, #16
 80a0766:	d803      	bhi.n	80a0770 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0768:	4b04      	ldr	r3, [pc, #16]	; (80a077c <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a076a:	40d3      	lsrs	r3, r2
 80a076c:	07db      	lsls	r3, r3, #31
 80a076e:	d402      	bmi.n	80a0776 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0770:	2304      	movs	r3, #4
 80a0772:	f880 3020 	strb.w	r3, [r0, #32]
 80a0776:	4770      	bx	lr
 80a0778:	00010114 	.word	0x00010114
 80a077c:	00011110 	.word	0x00011110

080a0780 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0780:	b510      	push	{r4, lr}
 80a0782:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0784:	2101      	movs	r1, #1
 80a0786:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a078a:	f001 ff13 	bl	80a25b4 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a078e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0792:	2101      	movs	r1, #1
 80a0794:	f001 ff1f 	bl	80a25d6 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0798:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a079c:	2101      	movs	r1, #1
 80a079e:	f001 ff09 	bl	80a25b4 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a07a2:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a07a6:	4c0a      	ldr	r4, [pc, #40]	; (80a07d0 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a07a8:	2101      	movs	r1, #1
 80a07aa:	f001 ff14 	bl	80a25d6 <digitalWrite>
	
	SPI.begin();
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	f001 f970 	bl	80a1a94 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a07b4:	4620      	mov	r0, r4
 80a07b6:	2108      	movs	r1, #8
 80a07b8:	f001 f9be 	bl	80a1b38 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a07bc:	4620      	mov	r0, r4
 80a07be:	2101      	movs	r1, #1
 80a07c0:	f001 f96d 	bl	80a1a9e <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a07c4:	4620      	mov	r0, r4
}
 80a07c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a07ca:	2100      	movs	r1, #0
 80a07cc:	f001 b96a 	b.w	80a1aa4 <_ZN8SPIClass11setDataModeEh>
 80a07d0:	20000678 	.word	0x20000678

080a07d4 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a07d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a07d6:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a07d8:	4617      	mov	r7, r2
 80a07da:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a07dc:	4d09      	ldr	r5, [pc, #36]	; (80a0804 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a07de:	4620      	mov	r0, r4
 80a07e0:	2100      	movs	r1, #0
 80a07e2:	f001 fef8 	bl	80a25d6 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a07e6:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a07ea:	4628      	mov	r0, r5
 80a07ec:	f001 f9b8 	bl	80a1b60 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a07f0:	4631      	mov	r1, r6
 80a07f2:	4628      	mov	r0, r5
 80a07f4:	f001 f9b4 	bl	80a1b60 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a07f8:	4620      	mov	r0, r4
}
 80a07fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a07fe:	2101      	movs	r1, #1
 80a0800:	f001 bee9 	b.w	80a25d6 <digitalWrite>
 80a0804:	20000678 	.word	0x20000678

080a0808 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a080a:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a080c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0810:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0814:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0816:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a081a:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a081e:	d103      	bne.n	80a0828 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0820:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0822:	bf88      	it	hi
 80a0824:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0828:	b28c      	uxth	r4, r1
 80a082a:	4620      	mov	r0, r4
 80a082c:	2100      	movs	r1, #0
 80a082e:	f001 fed2 	bl	80a25d6 <digitalWrite>
	SPI.transfer(rAddress);
 80a0832:	4629      	mov	r1, r5
 80a0834:	4809      	ldr	r0, [pc, #36]	; (80a085c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0836:	f001 f993 	bl	80a1b60 <_ZN8SPIClass8transferEh>
 80a083a:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a083c:	1bab      	subs	r3, r5, r6
 80a083e:	429f      	cmp	r7, r3
 80a0840:	dd06      	ble.n	80a0850 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a0842:	2100      	movs	r1, #0
 80a0844:	4805      	ldr	r0, [pc, #20]	; (80a085c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0846:	f001 f98b 	bl	80a1b60 <_ZN8SPIClass8transferEh>
 80a084a:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a084e:	e7f5      	b.n	80a083c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0850:	4620      	mov	r0, r4
 80a0852:	2101      	movs	r1, #1
 80a0854:	f001 febf 	bl	80a25d6 <digitalWrite>
	
	return 1;
}
 80a0858:	2001      	movs	r0, #1
 80a085a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a085c:	20000678 	.word	0x20000678

080a0860 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0862:	2301      	movs	r3, #1
 80a0864:	9300      	str	r3, [sp, #0]
 80a0866:	f10d 030f 	add.w	r3, sp, #15
 80a086a:	f7ff ffcd 	bl	80a0808 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a086e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0872:	b005      	add	sp, #20
 80a0874:	f85d fb04 	ldr.w	pc, [sp], #4

080a0878 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0878:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a087a:	f001 fec5 	bl	80a2608 <_Z19__fetch_global_Wirev>
}
 80a087e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0882:	f000 bf55 	b.w	80a1730 <_ZN7TwoWire5beginEv>

080a0886 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0886:	b570      	push	{r4, r5, r6, lr}
 80a0888:	460e      	mov	r6, r1
 80a088a:	4615      	mov	r5, r2
 80a088c:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a088e:	f001 febb 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0892:	4631      	mov	r1, r6
 80a0894:	f000 ff5e 	bl	80a1754 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0898:	f001 feb6 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a089c:	6803      	ldr	r3, [r0, #0]
 80a089e:	4629      	mov	r1, r5
 80a08a0:	689b      	ldr	r3, [r3, #8]
 80a08a2:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a08a4:	f001 feb0 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a08a8:	6803      	ldr	r3, [r0, #0]
 80a08aa:	4621      	mov	r1, r4
 80a08ac:	689a      	ldr	r2, [r3, #8]
 80a08ae:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a08b0:	f001 feaa 	bl	80a2608 <_Z19__fetch_global_Wirev>
}
 80a08b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a08b8:	f000 bf54 	b.w	80a1764 <_ZN7TwoWire15endTransmissionEv>

080a08bc <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a08bc:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a08be:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a08c0:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a08c2:	2a01      	cmp	r2, #1
 80a08c4:	d105      	bne.n	80a08d2 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a08c6:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a08c8:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a08ca:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a08ce:	f7ff bfda 	b.w	80a0886 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a08d2:	b92a      	cbnz	r2, 80a08e0 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a08d4:	460a      	mov	r2, r1
}
 80a08d6:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a08d8:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a08dc:	f7ff bf7a 	b.w	80a07d4 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a08e0:	bc10      	pop	{r4}
 80a08e2:	4770      	bx	lr

080a08e4 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a08e4:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a08e6:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a08e8:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a08ea:	b113      	cbz	r3, 80a08f2 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a08ec:	7a03      	ldrb	r3, [r0, #8]
 80a08ee:	015b      	lsls	r3, r3, #5
 80a08f0:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a08f2:	88e2      	ldrh	r2, [r4, #6]
 80a08f4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a08f8:	d005      	beq.n	80a0906 <_ZN7LSM9DS18initGyroEv+0x22>
 80a08fa:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a08fe:	d104      	bne.n	80a090a <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0900:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0904:	e001      	b.n	80a090a <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0906:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a090a:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a090c:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a090e:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0912:	431a      	orrs	r2, r3
 80a0914:	4620      	mov	r0, r4
 80a0916:	f7ff ffd1 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a091a:	2200      	movs	r2, #0
 80a091c:	2111      	movs	r1, #17
 80a091e:	4620      	mov	r0, r4
 80a0920:	f7ff ffcc 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0924:	7aa3      	ldrb	r3, [r4, #10]
 80a0926:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0928:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a092a:	bf14      	ite	ne
 80a092c:	2280      	movne	r2, #128	; 0x80
 80a092e:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0930:	b12b      	cbz	r3, 80a093e <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0932:	7b23      	ldrb	r3, [r4, #12]
 80a0934:	f003 030f 	and.w	r3, r3, #15
 80a0938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a093c:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a093e:	2112      	movs	r1, #18
 80a0940:	4620      	mov	r0, r4
 80a0942:	f7ff ffbb 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0946:	7ce3      	ldrb	r3, [r4, #19]
 80a0948:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a094a:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a094c:	bf0c      	ite	eq
 80a094e:	2200      	moveq	r2, #0
 80a0950:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0952:	b113      	cbz	r3, 80a095a <_ZN7LSM9DS18initGyroEv+0x76>
 80a0954:	f042 0210 	orr.w	r2, r2, #16
 80a0958:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a095a:	7c63      	ldrb	r3, [r4, #17]
 80a095c:	b10b      	cbz	r3, 80a0962 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a095e:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0962:	7d23      	ldrb	r3, [r4, #20]
 80a0964:	b10b      	cbz	r3, 80a096a <_ZN7LSM9DS18initGyroEv+0x86>
 80a0966:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a096a:	211e      	movs	r1, #30
 80a096c:	4620      	mov	r0, r4
 80a096e:	f7ff ffa5 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0972:	7b63      	ldrb	r3, [r4, #13]
 80a0974:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0976:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0978:	bf0c      	ite	eq
 80a097a:	2200      	moveq	r2, #0
 80a097c:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a097e:	b113      	cbz	r3, 80a0986 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0980:	f042 0210 	orr.w	r2, r2, #16
 80a0984:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0986:	7be3      	ldrb	r3, [r4, #15]
 80a0988:	b10b      	cbz	r3, 80a098e <_ZN7LSM9DS18initGyroEv+0xaa>
 80a098a:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a098e:	4620      	mov	r0, r4
}
 80a0990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0994:	2113      	movs	r1, #19
 80a0996:	f7ff bf91 	b.w	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>

080a099a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a099a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a099c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a099e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a09a0:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a09a2:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a09a4:	bf0c      	ite	eq
 80a09a6:	2200      	moveq	r2, #0
 80a09a8:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a09aa:	b113      	cbz	r3, 80a09b2 <_ZN7LSM9DS19initAccelEv+0x18>
 80a09ac:	f042 0210 	orr.w	r2, r2, #16
 80a09b0:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a09b2:	7e63      	ldrb	r3, [r4, #25]
 80a09b4:	b10b      	cbz	r3, 80a09ba <_ZN7LSM9DS19initAccelEv+0x20>
 80a09b6:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a09ba:	211f      	movs	r1, #31
 80a09bc:	4620      	mov	r0, r4
 80a09be:	f7ff ff7d 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a09c2:	7da2      	ldrb	r2, [r4, #22]
 80a09c4:	b112      	cbz	r2, 80a09cc <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a09c6:	7e22      	ldrb	r2, [r4, #24]
 80a09c8:	0152      	lsls	r2, r2, #5
 80a09ca:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a09cc:	7de3      	ldrb	r3, [r4, #23]
 80a09ce:	2b08      	cmp	r3, #8
 80a09d0:	d006      	beq.n	80a09e0 <_ZN7LSM9DS19initAccelEv+0x46>
 80a09d2:	2b10      	cmp	r3, #16
 80a09d4:	d007      	beq.n	80a09e6 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a09d6:	2b04      	cmp	r3, #4
 80a09d8:	d107      	bne.n	80a09ea <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a09da:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a09de:	e004      	b.n	80a09ea <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a09e0:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a09e4:	e001      	b.n	80a09ea <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a09e6:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a09ea:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a09ee:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a09f0:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a09f2:	bfa2      	ittt	ge
 80a09f4:	f003 0303 	andge.w	r3, r3, #3
 80a09f8:	431a      	orrge	r2, r3
 80a09fa:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a09fe:	4620      	mov	r0, r4
 80a0a00:	f7ff ff5c 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0a04:	7f62      	ldrb	r2, [r4, #29]
 80a0a06:	b12a      	cbz	r2, 80a0a14 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0a08:	7fa2      	ldrb	r2, [r4, #30]
 80a0a0a:	0152      	lsls	r2, r2, #5
 80a0a0c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0a14:	4620      	mov	r0, r4
}
 80a0a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0a1a:	2121      	movs	r1, #33	; 0x21
 80a0a1c:	f7ff bf4e 	b.w	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>

080a0a20 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0a20:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0a22:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0a24:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0a26:	2a01      	cmp	r2, #1
 80a0a28:	d105      	bne.n	80a0a36 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0a2a:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0a2c:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0a2e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0a32:	f7ff bf28 	b.w	80a0886 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0a36:	b92a      	cbnz	r2, 80a0a44 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0a38:	460a      	mov	r2, r1
}
 80a0a3a:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0a3c:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0a40:	f7ff bec8 	b.w	80a07d4 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0a44:	bc10      	pop	{r4}
 80a0a46:	4770      	bx	lr

080a0a48 <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0a48:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0a4a:	b570      	push	{r4, r5, r6, lr}
 80a0a4c:	4606      	mov	r6, r0
 80a0a4e:	460c      	mov	r4, r1
 80a0a50:	4615      	mov	r5, r2
	if (axis > 2)
 80a0a52:	d810      	bhi.n	80a0a76 <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0a54:	0049      	lsls	r1, r1, #1
 80a0a56:	3105      	adds	r1, #5
 80a0a58:	b2d2      	uxtb	r2, r2
 80a0a5a:	b2c9      	uxtb	r1, r1
 80a0a5c:	f7ff ffe0 	bl	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0a60:	1ce1      	adds	r1, r4, #3
 80a0a62:	0049      	lsls	r1, r1, #1
 80a0a64:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0a68:	4630      	mov	r0, r6
}
 80a0a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0a6e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0a72:	f7ff bfd5 	b.w	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
 80a0a76:	bd70      	pop	{r4, r5, r6, pc}

080a0a78 <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a0a78:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0a7a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0a7e:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0a80:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0a82:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0a86:	bf08      	it	eq
 80a0a88:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0a8a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a0a8e:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0a92:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0a96:	bf18      	it	ne
 80a0a98:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0a9a:	009b      	lsls	r3, r3, #2
 80a0a9c:	f003 031c 	and.w	r3, r3, #28
 80a0aa0:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0aa2:	431a      	orrs	r2, r3
 80a0aa4:	2120      	movs	r1, #32
 80a0aa6:	f7ff ffbb 	bl	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
 80a0aaa:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	3b08      	subs	r3, #8
 80a0ab2:	b2db      	uxtb	r3, r3
 80a0ab4:	2b08      	cmp	r3, #8
 80a0ab6:	bf96      	itet	ls
 80a0ab8:	4a12      	ldrls	r2, [pc, #72]	; (80a0b04 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a0aba:	2200      	movhi	r2, #0
 80a0abc:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0abe:	2121      	movs	r1, #33	; 0x21
 80a0ac0:	f7ff ffae 	bl	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0ac4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0ac8:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0aca:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0acc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0ad0:	bf0c      	ite	eq
 80a0ad2:	2200      	moveq	r2, #0
 80a0ad4:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0ad6:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0ada:	431a      	orrs	r2, r3
 80a0adc:	2122      	movs	r1, #34	; 0x22
 80a0ade:	f7ff ff9f 	bl	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0ae2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	0092      	lsls	r2, r2, #2
 80a0aea:	f002 020c 	and.w	r2, r2, #12
 80a0aee:	2123      	movs	r1, #35	; 0x23
 80a0af0:	f7ff ff96 	bl	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0af4:	4620      	mov	r0, r4
}
 80a0af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0afa:	2200      	movs	r2, #0
 80a0afc:	2124      	movs	r1, #36	; 0x24
 80a0afe:	f7ff bf8f 	b.w	80a0a20 <_ZN7LSM9DS110mWriteByteEhh>
 80a0b02:	bf00      	nop
 80a0b04:	080a3953 	.word	0x080a3953

080a0b08 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0b08:	b538      	push	{r3, r4, r5, lr}
 80a0b0a:	460c      	mov	r4, r1
 80a0b0c:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0b0e:	f001 fd7b 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0b12:	4621      	mov	r1, r4
 80a0b14:	f000 fe1e 	bl	80a1754 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0b18:	f001 fd76 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0b1c:	6803      	ldr	r3, [r0, #0]
 80a0b1e:	4629      	mov	r1, r5
 80a0b20:	689b      	ldr	r3, [r3, #8]
 80a0b22:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0b24:	f001 fd70 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0b28:	2100      	movs	r1, #0
 80a0b2a:	f000 fe17 	bl	80a175c <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0b2e:	f001 fd6b 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0b32:	2201      	movs	r2, #1
 80a0b34:	4621      	mov	r1, r4
 80a0b36:	f000 fe0a 	bl	80a174e <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0b3a:	f001 fd65 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0b3e:	6803      	ldr	r3, [r0, #0]
 80a0b40:	695b      	ldr	r3, [r3, #20]
 80a0b42:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0b44:	b2c0      	uxtb	r0, r0
 80a0b46:	bd38      	pop	{r3, r4, r5, pc}

080a0b48 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0b48:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0b4a:	7801      	ldrb	r1, [r0, #0]
 80a0b4c:	2901      	cmp	r1, #1
 80a0b4e:	d103      	bne.n	80a0b58 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0b50:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0b54:	f7ff bfd8 	b.w	80a0b08 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0b58:	b919      	cbnz	r1, 80a0b62 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0b5a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0b5e:	f7ff be7f 	b.w	80a0860 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0b62:	2000      	movs	r0, #0
 80a0b64:	4770      	bx	lr

080a0b66 <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a0b66:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a0b68:	2127      	movs	r1, #39	; 0x27
 80a0b6a:	f7ff ffed 	bl	80a0b48 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a0b6e:	f000 0001 	and.w	r0, r0, #1
 80a0b72:	bd08      	pop	{r3, pc}

080a0b74 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0b74:	b538      	push	{r3, r4, r5, lr}
 80a0b76:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0b78:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0b7a:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0b7c:	f7ff ffe4 	bl	80a0b48 <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a0b80:	b11d      	cbz	r5, 80a0b8a <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a0b82:	f040 0202 	orr.w	r2, r0, #2
 80a0b86:	b2d2      	uxtb	r2, r2
 80a0b88:	e001      	b.n	80a0b8e <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a0b8a:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a0b8e:	4620      	mov	r0, r4
}
 80a0b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a0b94:	2123      	movs	r1, #35	; 0x23
 80a0b96:	f7ff be91 	b.w	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>

080a0b9a <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a0b9a:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0b9c:	7801      	ldrb	r1, [r0, #0]
 80a0b9e:	2901      	cmp	r1, #1
 80a0ba0:	d103      	bne.n	80a0baa <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0ba2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0ba6:	f7ff bfaf 	b.w	80a0b08 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0baa:	b919      	cbnz	r1, 80a0bb4 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a0bac:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0bb0:	f7ff be56 	b.w	80a0860 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0bb4:	4770      	bx	lr

080a0bb6 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0bb6:	b538      	push	{r3, r4, r5, lr}
 80a0bb8:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a0bba:	7843      	ldrb	r3, [r0, #1]
 80a0bbc:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0bc0:	7883      	ldrb	r3, [r0, #2]
 80a0bc2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0bc6:	f7ff fdb7 	bl	80a0738 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a0bca:	f7ff fd81 	bl	80a06d0 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	f7ff fd94 	bl	80a06fc <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0bd4:	4620      	mov	r0, r4
 80a0bd6:	f7ff fd86 	bl	80a06e6 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0bda:	7823      	ldrb	r3, [r4, #0]
 80a0bdc:	2b01      	cmp	r3, #1
 80a0bde:	d103      	bne.n	80a0be8 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0be0:	4620      	mov	r0, r4
 80a0be2:	f7ff fe49 	bl	80a0878 <_ZN7LSM9DS17initI2CEv>
 80a0be6:	e003      	b.n	80a0bf0 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0be8:	b913      	cbnz	r3, 80a0bf0 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0bea:	4620      	mov	r0, r4
 80a0bec:	f7ff fdc8 	bl	80a0780 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0bf0:	210f      	movs	r1, #15
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	f7ff ffd1 	bl	80a0b9a <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0bf8:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0bfa:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	f7ff ffa3 	bl	80a0b48 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0c02:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0c06:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0c0a:	b205      	sxth	r5, r0
 80a0c0c:	429d      	cmp	r5, r3
 80a0c0e:	d10a      	bne.n	80a0c26 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0c10:	4620      	mov	r0, r4
 80a0c12:	f7ff fe67 	bl	80a08e4 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	f7ff febf 	bl	80a099a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0c1c:	4620      	mov	r0, r4
 80a0c1e:	f7ff ff2b 	bl	80a0a78 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0c22:	4628      	mov	r0, r5
 80a0c24:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0c26:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0c28:	bd38      	pop	{r3, r4, r5, pc}

080a0c2a <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a0c2a:	b510      	push	{r4, lr}
 80a0c2c:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a0c2e:	2127      	movs	r1, #39	; 0x27
 80a0c30:	f7ff ffb3 	bl	80a0b9a <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a0c34:	2101      	movs	r1, #1
 80a0c36:	40a1      	lsls	r1, r4
 80a0c38:	4008      	ands	r0, r1
 80a0c3a:	4120      	asrs	r0, r4
}
 80a0c3c:	b2c0      	uxtb	r0, r0
 80a0c3e:	bd10      	pop	{r4, pc}

080a0c40 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a0c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c44:	4690      	mov	r8, r2
 80a0c46:	460c      	mov	r4, r1
 80a0c48:	461d      	mov	r5, r3
 80a0c4a:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a0c4e:	f000 fb01 	bl	80a1254 <HAL_Timer_Get_Milli_Seconds>
 80a0c52:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a0c54:	f001 fcd8 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0c58:	4621      	mov	r1, r4
 80a0c5a:	f000 fd7b 	bl	80a1754 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0c5e:	f001 fcd3 	bl	80a2608 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0c62:	6803      	ldr	r3, [r0, #0]
 80a0c64:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a0c68:	689b      	ldr	r3, [r3, #8]
 80a0c6a:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0c6c:	f001 fccc 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0c70:	2100      	movs	r1, #0
 80a0c72:	f000 fd73 	bl	80a175c <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0c76:	f001 fcc7 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0c7a:	4621      	mov	r1, r4
 80a0c7c:	4632      	mov	r2, r6
 80a0c7e:	f000 fd66 	bl	80a174e <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0c82:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0c84:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a0c88:	42b4      	cmp	r4, r6
 80a0c8a:	da1a      	bge.n	80a0cc2 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a0c8c:	f001 fcbc 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0c90:	6803      	ldr	r3, [r0, #0]
 80a0c92:	691b      	ldr	r3, [r3, #16]
 80a0c94:	4798      	blx	r3
 80a0c96:	b140      	cbz	r0, 80a0caa <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a0c98:	f001 fcb6 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a0c9c:	6803      	ldr	r3, [r0, #0]
 80a0c9e:	f104 0801 	add.w	r8, r4, #1
 80a0ca2:	695b      	ldr	r3, [r3, #20]
 80a0ca4:	4798      	blx	r3
 80a0ca6:	5528      	strb	r0, [r5, r4]
 80a0ca8:	4644      	mov	r4, r8
 80a0caa:	f000 fad3 	bl	80a1254 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0cae:	42b8      	cmp	r0, r7
 80a0cb0:	d9ea      	bls.n	80a0c88 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a0cb2:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a0cb4:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0cb6:	1b62      	subs	r2, r4, r5
 80a0cb8:	4296      	cmp	r6, r2
 80a0cba:	dd05      	ble.n	80a0cc8 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a0cbc:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0cc0:	e7f9      	b.n	80a0cb6 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a0cc2:	2001      	movs	r0, #1
 80a0cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a0cc8:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a0cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0cce <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0cce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0cd0:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0cd2:	7801      	ldrb	r1, [r0, #0]
 80a0cd4:	2901      	cmp	r1, #1
 80a0cd6:	d107      	bne.n	80a0ce8 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a0cd8:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0cdc:	9300      	str	r3, [sp, #0]
 80a0cde:	4613      	mov	r3, r2
 80a0ce0:	462a      	mov	r2, r5
 80a0ce2:	f7ff ffad 	bl	80a0c40 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0ce6:	e007      	b.n	80a0cf8 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0ce8:	b931      	cbnz	r1, 80a0cf8 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0cea:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0cee:	9300      	str	r3, [sp, #0]
 80a0cf0:	4613      	mov	r3, r2
 80a0cf2:	462a      	mov	r2, r5
 80a0cf4:	f7ff fd88 	bl	80a0808 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0cf8:	b003      	add	sp, #12
 80a0cfa:	bd30      	pop	{r4, r5, pc}

080a0cfc <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0cfe:	2306      	movs	r3, #6
 80a0d00:	466a      	mov	r2, sp
 80a0d02:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0d04:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0d06:	f7ff ffe2 	bl	80a0cce <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0d0a:	b330      	cbz	r0, 80a0d5a <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0d0c:	f89d 3000 	ldrb.w	r3, [sp]
 80a0d10:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0d14:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0d18:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0d1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0d20:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0d24:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0d28:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0d2c:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0d2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0d32:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0d36:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0d38:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0d3a:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0d3c:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0d3e:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0d40:	b15d      	cbz	r5, 80a0d5a <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0d42:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a0d46:	1b49      	subs	r1, r1, r5
 80a0d48:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0d4a:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0d4e:	1a52      	subs	r2, r2, r1
 80a0d50:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0d52:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a0d56:	1a9b      	subs	r3, r3, r2
 80a0d58:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0d5a:	b003      	add	sp, #12
 80a0d5c:	bd30      	pop	{r4, r5, pc}

080a0d5e <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0d60:	2306      	movs	r3, #6
 80a0d62:	466a      	mov	r2, sp
 80a0d64:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0d66:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0d68:	f7ff ffb1 	bl	80a0cce <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0d6c:	b330      	cbz	r0, 80a0dbc <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0d6e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0d72:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0d76:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0d7a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0d7e:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0d82:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0d86:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0d8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0d8e:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0d90:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0d94:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0d98:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0d9a:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0d9c:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0d9e:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0da0:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a0da2:	b15d      	cbz	r5, 80a0dbc <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a0da4:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a0da8:	1b49      	subs	r1, r1, r5
 80a0daa:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a0dac:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a0db0:	1a52      	subs	r2, r2, r1
 80a0db2:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a0db4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a0db8:	1a9b      	subs	r3, r3, r2
 80a0dba:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a0dbc:	b003      	add	sp, #12
 80a0dbe:	bd30      	pop	{r4, r5, pc}

080a0dc0 <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0dc4:	4604      	mov	r4, r0
 80a0dc6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0dc8:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0dca:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0dcc:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0dce:	9304      	str	r3, [sp, #16]
 80a0dd0:	9305      	str	r3, [sp, #20]
 80a0dd2:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a0dd4:	9307      	str	r3, [sp, #28]
 80a0dd6:	9308      	str	r3, [sp, #32]
 80a0dd8:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0dda:	f7ff fecb 	bl	80a0b74 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0dde:	223f      	movs	r2, #63	; 0x3f
 80a0de0:	212e      	movs	r1, #46	; 0x2e
 80a0de2:	4620      	mov	r0, r4
 80a0de4:	f7ff fd6a 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a0de8:	212f      	movs	r1, #47	; 0x2f
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	f7ff feac 	bl	80a0b48 <_ZN7LSM9DS110xgReadByteEh>
 80a0df0:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a0df4:	2e1e      	cmp	r6, #30
 80a0df6:	d9f7      	bls.n	80a0de8 <_ZN7LSM9DS19calibrateEb+0x28>
 80a0df8:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0dfa:	42b7      	cmp	r7, r6
 80a0dfc:	da32      	bge.n	80a0e64 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a0dfe:	4620      	mov	r0, r4
 80a0e00:	f7ff ffad 	bl	80a0d5e <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a0e04:	9a07      	ldr	r2, [sp, #28]
 80a0e06:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a0e0a:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a0e0c:	4413      	add	r3, r2
 80a0e0e:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a0e10:	9a08      	ldr	r2, [sp, #32]
 80a0e12:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0e16:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a0e18:	4413      	add	r3, r2
 80a0e1a:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a0e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0e1e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a0e22:	4413      	add	r3, r2
 80a0e24:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a0e26:	f7ff ff69 	bl	80a0cfc <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a0e2a:	9a04      	ldr	r2, [sp, #16]
 80a0e2c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0e30:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a0e32:	4413      	add	r3, r2
 80a0e34:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a0e36:	9a05      	ldr	r2, [sp, #20]
 80a0e38:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0e3c:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a0e40:	4413      	add	r3, r2
 80a0e42:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0e44:	f001 feee 	bl	80a2c24 <__aeabi_f2d>
 80a0e48:	4602      	mov	r2, r0
 80a0e4a:	460b      	mov	r3, r1
 80a0e4c:	2000      	movs	r0, #0
 80a0e4e:	4926      	ldr	r1, [pc, #152]	; (80a0ee8 <_ZN7LSM9DS19calibrateEb+0x128>)
 80a0e50:	f002 f866 	bl	80a2f20 <__aeabi_ddiv>
 80a0e54:	f002 f94c 	bl	80a30f0 <__aeabi_d2iz>
 80a0e58:	b200      	sxth	r0, r0
 80a0e5a:	1a2d      	subs	r5, r5, r0
 80a0e5c:	9806      	ldr	r0, [sp, #24]
 80a0e5e:	4405      	add	r5, r0
 80a0e60:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0e62:	e7ca      	b.n	80a0dfa <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a0e64:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0e68:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a0e6c:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a0e70:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a0e74:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a0e78:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a0e7c:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a0e7e:	a907      	add	r1, sp, #28
 80a0e80:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a0e84:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0e88:	b200      	sxth	r0, r0
 80a0e8a:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a0e8e:	9202      	str	r2, [sp, #8]
 80a0e90:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0e92:	f002 fa0f 	bl	80a32b4 <__aeabi_i2f>
 80a0e96:	4659      	mov	r1, fp
 80a0e98:	f002 fa60 	bl	80a335c <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0e9c:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0e9e:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0ea6:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0ea8:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0eac:	b200      	sxth	r0, r0
 80a0eae:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0eb2:	f002 f9ff 	bl	80a32b4 <__aeabi_i2f>
 80a0eb6:	4651      	mov	r1, sl
 80a0eb8:	f002 fa50 	bl	80a335c <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0ebc:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0ebe:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0ec2:	9a02      	ldr	r2, [sp, #8]
 80a0ec4:	d1db      	bne.n	80a0e7e <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a0ec6:	2100      	movs	r1, #0
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	f7ff fe53 	bl	80a0b74 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0ece:	2200      	movs	r2, #0
 80a0ed0:	212e      	movs	r1, #46	; 0x2e
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	f7ff fcf2 	bl	80a08bc <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a0ed8:	9b01      	ldr	r3, [sp, #4]
 80a0eda:	b113      	cbz	r3, 80a0ee2 <_ZN7LSM9DS19calibrateEb+0x122>
 80a0edc:	2301      	movs	r3, #1
 80a0ede:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a0ee2:	b00b      	add	sp, #44	; 0x2c
 80a0ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0ee8:	3ff00000 	.word	0x3ff00000

080a0eec <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0eee:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0ef0:	7801      	ldrb	r1, [r0, #0]
 80a0ef2:	2901      	cmp	r1, #1
 80a0ef4:	d107      	bne.n	80a0f06 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a0ef6:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0efa:	9300      	str	r3, [sp, #0]
 80a0efc:	4613      	mov	r3, r2
 80a0efe:	462a      	mov	r2, r5
 80a0f00:	f7ff fe9e 	bl	80a0c40 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0f04:	e007      	b.n	80a0f16 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0f06:	b931      	cbnz	r1, 80a0f16 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a0f08:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f0c:	9300      	str	r3, [sp, #0]
 80a0f0e:	4613      	mov	r3, r2
 80a0f10:	462a      	mov	r2, r5
 80a0f12:	f7ff fc79 	bl	80a0808 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0f16:	b003      	add	sp, #12
 80a0f18:	bd30      	pop	{r4, r5, pc}

080a0f1a <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0f1a:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0f1c:	2306      	movs	r3, #6
 80a0f1e:	466a      	mov	r2, sp
 80a0f20:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0f22:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0f24:	f7ff ffe2 	bl	80a0eec <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a0f28:	b1a0      	cbz	r0, 80a0f54 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a0f2a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a0f2e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0f32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0f36:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a0f38:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a0f3c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0f44:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a0f46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0f4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0f4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0f52:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a0f54:	b002      	add	sp, #8
 80a0f56:	bd10      	pop	{r4, pc}

080a0f58 <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a0f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f5c:	4605      	mov	r5, r0
 80a0f5e:	468a      	mov	sl, r1
 80a0f60:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a0f62:	2300      	movs	r3, #0
 80a0f64:	f8ad 3000 	strh.w	r3, [sp]
 80a0f68:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a0f6c:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a0f70:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a0f74:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a0f78:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0f7c:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0f7e:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a0f80:	2103      	movs	r1, #3
 80a0f82:	4628      	mov	r0, r5
 80a0f84:	f7ff fe51 	bl	80a0c2a <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a0f88:	2800      	cmp	r0, #0
 80a0f8a:	d0f9      	beq.n	80a0f80 <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a0f8c:	4628      	mov	r0, r5
 80a0f8e:	f7ff ffc4 	bl	80a0f1a <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a0f92:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a0f94:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a0f98:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a0f9a:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a0f9e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a0fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a0fa4:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0fa6:	aa04      	add	r2, sp, #16
 80a0fa8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a0fac:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a0fb0:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a0fb2:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0fb6:	bfb8      	it	lt
 80a0fb8:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a0fbc:	4291      	cmp	r1, r2
 80a0fbe:	bfc8      	it	gt
 80a0fc0:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a0fc4:	3301      	adds	r3, #1
 80a0fc6:	2b03      	cmp	r3, #3
 80a0fc8:	d1ed      	bne.n	80a0fa6 <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a0fca:	3c01      	subs	r4, #1
 80a0fcc:	d1d8      	bne.n	80a0f80 <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a0fce:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a0fd2:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a0fd6:	f04f 0b02 	mov.w	fp, #2
 80a0fda:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a0fde:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a0fe2:	441e      	add	r6, r3
 80a0fe4:	fb96 f6fb 	sdiv	r6, r6, fp
 80a0fe8:	b236      	sxth	r6, r6
 80a0fea:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a0fee:	4630      	mov	r0, r6
 80a0ff0:	f002 f960 	bl	80a32b4 <__aeabi_i2f>
 80a0ff4:	4601      	mov	r1, r0
 80a0ff6:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a0ff8:	f002 f9b0 	bl	80a335c <__aeabi_fmul>
 80a0ffc:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a1000:	f1ba 0f00 	cmp.w	sl, #0
 80a1004:	d004      	beq.n	80a1010 <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a1006:	4632      	mov	r2, r6
 80a1008:	b2e1      	uxtb	r1, r4
 80a100a:	4628      	mov	r0, r5
 80a100c:	f7ff fd1c 	bl	80a0a48 <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a1010:	3401      	adds	r4, #1
 80a1012:	2c03      	cmp	r4, #3
 80a1014:	d1e1      	bne.n	80a0fda <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a1016:	b007      	add	sp, #28
 80a1018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a101c <_GLOBAL__sub_I_magSensitivity>:
 80a101c:	f000 b922 	b.w	80a1264 <HAL_Pin_Map>

080a1020 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a1020:	2300      	movs	r3, #0
 80a1022:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a1024:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a1026:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a1028:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a102a:	6503      	str	r3, [r0, #80]	; 0x50
 80a102c:	4770      	bx	lr
	...

080a1030 <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage()
{
    setupMessage();
}

OSCMessage::OSCMessage(const char * address)
 80a1030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1032:	4604      	mov	r4, r0
 80a1034:	460f      	mov	r7, r1
 80a1036:	4d0f      	ldr	r5, [pc, #60]	; (80a1074 <_ZN10OSCMessageC1EPKc+0x44>)
 80a1038:	3008      	adds	r0, #8
 80a103a:	4629      	mov	r1, r5
 80a103c:	f000 fde0 	bl	80a1c00 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1040:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80a1044:	4629      	mov	r1, r5
 80a1046:	f104 0018 	add.w	r0, r4, #24
 80a104a:	f000 fdd9 	bl	80a1c00 <_ZN6StringC1EPK19__FlashStringHelper>
 80a104e:	4629      	mov	r1, r5
 80a1050:	4630      	mov	r0, r6
 80a1052:	f000 fdd5 	bl	80a1c00 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1056:	4629      	mov	r1, r5
 80a1058:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a105c:	f000 fdd0 	bl	80a1c00 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a1060:	4620      	mov	r0, r4
 80a1062:	f7ff ffdd 	bl	80a1020 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
 80a1066:	4639      	mov	r1, r7
 80a1068:	4630      	mov	r0, r6
 80a106a:	f000 fddc 	bl	80a1c26 <_ZN6StringaSEPKc>
}
 80a106e:	4620      	mov	r0, r4
 80a1070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1072:	bf00      	nop
 80a1074:	080a3a4a 	.word	0x080a3a4a

080a1078 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a1078:	b510      	push	{r4, lr}
 80a107a:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a107c:	6800      	ldr	r0, [r0, #0]
 80a107e:	f000 faff 	bl	80a1680 <free>
    free(inputDatas);
 80a1082:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1084:	f000 fafc 	bl	80a1680 <free>
    free(outputDatas);
 80a1088:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a108a:	f000 faf9 	bl	80a1680 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a108e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a1092:	f000 fd6e 	bl	80a1b72 <_ZN6StringD1Ev>
 80a1096:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a109a:	f000 fd6a 	bl	80a1b72 <_ZN6StringD1Ev>
 80a109e:	f104 0018 	add.w	r0, r4, #24
 80a10a2:	f000 fd66 	bl	80a1b72 <_ZN6StringD1Ev>
 80a10a6:	f104 0008 	add.w	r0, r4, #8
 80a10aa:	f000 fd62 	bl	80a1b72 <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	bd10      	pop	{r4, pc}

080a10b2 <_ZN10OSCMessage6addIntEi>:
    return u.f;
}

///SENDING
void OSCMessage::addInt(int value)
{
 80a10b2:	b538      	push	{r3, r4, r5, lr}
 80a10b4:	460d      	mov	r5, r1
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
 80a10b6:	6d01      	ldr	r1, [r0, #80]	; 0x50
    return u.f;
}

///SENDING
void OSCMessage::addInt(int value)
{
 80a10b8:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
 80a10ba:	3104      	adds	r1, #4
 80a10bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80a10be:	f000 fae7 	bl	80a1690 <realloc>
 80a10c2:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
 80a10c4:	b1d0      	cbz	r0, 80a10fc <_ZN10OSCMessage6addIntEi+0x4a>
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
 80a10c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a10c8:	0e2a      	lsrs	r2, r5, #24
 80a10ca:	54c2      	strb	r2, [r0, r3]
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
 80a10cc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a10ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
 80a10d0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
{
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
    if (outputDatas != NULL)
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
 80a10d4:	4413      	add	r3, r2
 80a10d6:	142a      	asrs	r2, r5, #16
 80a10d8:	705a      	strb	r2, [r3, #1]
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
 80a10da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a10dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
 80a10de:	2169      	movs	r1, #105	; 0x69
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
    if (outputDatas != NULL)
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
 80a10e0:	4413      	add	r3, r2
 80a10e2:	122a      	asrs	r2, r5, #8
 80a10e4:	709a      	strb	r2, [r3, #2]
        outputDatas[outputDatasSize+3] = value & 0xFF;
 80a10e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a10e8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a10ea:	4413      	add	r3, r2
 80a10ec:	70dd      	strb	r5, [r3, #3]
        outputDatasSize += 4;
 80a10ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a10f0:	3304      	adds	r3, #4
 80a10f2:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('i');
    }
}
 80a10f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
 80a10f8:	f000 bdbd 	b.w	80a1c76 <_ZN6String6concatEc>
 80a10fc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1100 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a1100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1104:	b08b      	sub	sp, #44	; 0x2c
 80a1106:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80a110a:	af00      	add	r7, sp, #0
 80a110c:	4681      	mov	r9, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a110e:	4640      	mov	r0, r8
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a1110:	460e      	mov	r6, r1
 80a1112:	60fa      	str	r2, [r7, #12]
 80a1114:	60bb      	str	r3, [r7, #8]
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a1116:	f002 fb5f 	bl	80a37d8 <strlen>
 80a111a:	4605      	mov	r5, r0
 80a111c:	3003      	adds	r0, #3
 80a111e:	0880      	lsrs	r0, r0, #2
 80a1120:	f001 fd5e 	bl	80a2be0 <__aeabi_ui2d>
 80a1124:	2200      	movs	r2, #0
 80a1126:	4b40      	ldr	r3, [pc, #256]	; (80a1228 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a1128:	f001 fc1e 	bl	80a2968 <__adddf3>
 80a112c:	f001 ffe0 	bl	80a30f0 <__aeabi_d2iz>
 80a1130:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
 80a1134:	0084      	lsls	r4, r0, #2
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a1136:	4650      	mov	r0, sl
 80a1138:	f002 fb4e 	bl	80a37d8 <strlen>
{
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
    int addresszeroCount = addressBitCount-strlen(outputAddress);
 80a113c:	1b65      	subs	r5, r4, r5
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a113e:	3401      	adds	r4, #1
 80a1140:	4683      	mov	fp, r0
 80a1142:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a1144:	3001      	adds	r0, #1
 80a1146:	0880      	lsrs	r0, r0, #2
 80a1148:	f001 fd4a 	bl	80a2be0 <__aeabi_ui2d>
 80a114c:	2200      	movs	r2, #0
 80a114e:	4b36      	ldr	r3, [pc, #216]	; (80a1228 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a1150:	f001 fc0a 	bl	80a2968 <__adddf3>
 80a1154:	f001 ffcc 	bl	80a30f0 <__aeabi_d2iz>
 80a1158:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a115c:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a1160:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
 80a1164:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
 80a1166:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
 80a1168:	1de2      	adds	r2, r4, #7
 80a116a:	f022 0207 	bic.w	r2, r2, #7
 80a116e:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
 80a1172:	2100      	movs	r1, #0
 80a1174:	4622      	mov	r2, r4
 80a1176:	4668      	mov	r0, sp
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a1178:	603b      	str	r3, [r7, #0]
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
    memset(outputBuffer,nullChar,outputBufferSize);
 80a117a:	f002 faf4 	bl	80a3766 <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
 80a117e:	4640      	mov	r0, r8
 80a1180:	f002 fb2a 	bl	80a37d8 <strlen>
 80a1184:	4641      	mov	r1, r8
 80a1186:	4602      	mov	r2, r0
 80a1188:	4668      	mov	r0, sp
 80a118a:	f002 fae1 	bl	80a3750 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
 80a118e:	4640      	mov	r0, r8
 80a1190:	f002 fb22 	bl	80a37d8 <strlen>
 80a1194:	eb0d 0205 	add.w	r2, sp, r5
 80a1198:	212c      	movs	r1, #44	; 0x2c
 80a119a:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
 80a119c:	4640      	mov	r0, r8
 80a119e:	f002 fb1b 	bl	80a37d8 <strlen>
 80a11a2:	6078      	str	r0, [r7, #4]
 80a11a4:	4650      	mov	r0, sl
 80a11a6:	f002 fb17 	bl	80a37d8 <strlen>
 80a11aa:	687a      	ldr	r2, [r7, #4]
 80a11ac:	4651      	mov	r1, sl
 80a11ae:	f102 0e01 	add.w	lr, r2, #1
 80a11b2:	44ae      	add	lr, r5
 80a11b4:	4602      	mov	r2, r0
 80a11b6:	eb0d 000e 	add.w	r0, sp, lr
 80a11ba:	f002 fac9 	bl	80a3750 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
 80a11be:	4640      	mov	r0, r8
 80a11c0:	f002 fb0a 	bl	80a37d8 <strlen>
 80a11c4:	4680      	mov	r8, r0
 80a11c6:	4650      	mov	r0, sl
 80a11c8:	f002 fb06 	bl	80a37d8 <strlen>
 80a11cc:	4440      	add	r0, r8
 80a11ce:	3001      	adds	r0, #1
 80a11d0:	683b      	ldr	r3, [r7, #0]
 80a11d2:	4405      	add	r5, r0
 80a11d4:	eb05 000b 	add.w	r0, r5, fp
 80a11d8:	461a      	mov	r2, r3
 80a11da:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
 80a11de:	4468      	add	r0, sp
 80a11e0:	f002 fab6 	bl	80a3750 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
 80a11e4:	6833      	ldr	r3, [r6, #0]
 80a11e6:	68fd      	ldr	r5, [r7, #12]
 80a11e8:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a11ec:	4b0f      	ldr	r3, [pc, #60]	; (80a122c <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x12c>)
 80a11ee:	f107 0e14 	add.w	lr, r7, #20
 80a11f2:	3504      	adds	r5, #4
 80a11f4:	613b      	str	r3, [r7, #16]
 80a11f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a11f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a11fc:	682b      	ldr	r3, [r5, #0]
 80a11fe:	893a      	ldrh	r2, [r7, #8]
 80a1200:	f88e 3000 	strb.w	r3, [lr]
 80a1204:	f107 0110 	add.w	r1, r7, #16
 80a1208:	4630      	mov	r0, r6
 80a120a:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
 80a120c:	6833      	ldr	r3, [r6, #0]
 80a120e:	4622      	mov	r2, r4
 80a1210:	4669      	mov	r1, sp
 80a1212:	68db      	ldr	r3, [r3, #12]
 80a1214:	4630      	mov	r0, r6
 80a1216:	4798      	blx	r3
    udp.endPacket();
 80a1218:	6833      	ldr	r3, [r6, #0]
 80a121a:	4630      	mov	r0, r6
 80a121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a121e:	4798      	blx	r3
}
 80a1220:	372c      	adds	r7, #44	; 0x2c
 80a1222:	46bd      	mov	sp, r7
 80a1224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1228:	3fe00000 	.word	0x3fe00000
 80a122c:	080a3994 	.word	0x080a3994

080a1230 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a1230:	f000 b818 	b.w	80a1264 <HAL_Pin_Map>

080a1234 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1234:	b508      	push	{r3, lr}
 80a1236:	4b02      	ldr	r3, [pc, #8]	; (80a1240 <os_mutex_create+0xc>)
 80a1238:	681b      	ldr	r3, [r3, #0]
 80a123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	bd08      	pop	{r3, pc}
 80a1240:	080601d0 	.word	0x080601d0

080a1244 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1244:	b508      	push	{r3, lr}
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <HAL_RNG_GetRandomNumber+0xc>)
 80a1248:	681b      	ldr	r3, [r3, #0]
 80a124a:	685b      	ldr	r3, [r3, #4]
 80a124c:	9301      	str	r3, [sp, #4]
 80a124e:	bd08      	pop	{r3, pc}
 80a1250:	0806019c 	.word	0x0806019c

080a1254 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1254:	b508      	push	{r3, lr}
 80a1256:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	695b      	ldr	r3, [r3, #20]
 80a125c:	9301      	str	r3, [sp, #4]
 80a125e:	bd08      	pop	{r3, pc}
 80a1260:	0806019c 	.word	0x0806019c

080a1264 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1264:	b508      	push	{r3, lr}
 80a1266:	4b02      	ldr	r3, [pc, #8]	; (80a1270 <HAL_Pin_Map+0xc>)
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	681b      	ldr	r3, [r3, #0]
 80a126c:	9301      	str	r3, [sp, #4]
 80a126e:	bd08      	pop	{r3, pc}
 80a1270:	080601b0 	.word	0x080601b0

080a1274 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1274:	b508      	push	{r3, lr}
 80a1276:	4b02      	ldr	r3, [pc, #8]	; (80a1280 <HAL_Pin_Mode+0xc>)
 80a1278:	681b      	ldr	r3, [r3, #0]
 80a127a:	689b      	ldr	r3, [r3, #8]
 80a127c:	9301      	str	r3, [sp, #4]
 80a127e:	bd08      	pop	{r3, pc}
 80a1280:	080601b0 	.word	0x080601b0

080a1284 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1284:	b508      	push	{r3, lr}
 80a1286:	4b02      	ldr	r3, [pc, #8]	; (80a1290 <HAL_Get_Pin_Mode+0xc>)
 80a1288:	681b      	ldr	r3, [r3, #0]
 80a128a:	68db      	ldr	r3, [r3, #12]
 80a128c:	9301      	str	r3, [sp, #4]
 80a128e:	bd08      	pop	{r3, pc}
 80a1290:	080601b0 	.word	0x080601b0

080a1294 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1294:	b508      	push	{r3, lr}
 80a1296:	4b02      	ldr	r3, [pc, #8]	; (80a12a0 <HAL_GPIO_Write+0xc>)
 80a1298:	681b      	ldr	r3, [r3, #0]
 80a129a:	691b      	ldr	r3, [r3, #16]
 80a129c:	9301      	str	r3, [sp, #4]
 80a129e:	bd08      	pop	{r3, pc}
 80a12a0:	080601b0 	.word	0x080601b0

080a12a4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a12a4:	b508      	push	{r3, lr}
 80a12a6:	4b02      	ldr	r3, [pc, #8]	; (80a12b0 <HAL_I2C_Begin+0xc>)
 80a12a8:	681b      	ldr	r3, [r3, #0]
 80a12aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a12ac:	9301      	str	r3, [sp, #4]
 80a12ae:	bd08      	pop	{r3, pc}
 80a12b0:	080601ac 	.word	0x080601ac

080a12b4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a12b4:	b508      	push	{r3, lr}
 80a12b6:	4b02      	ldr	r3, [pc, #8]	; (80a12c0 <HAL_I2C_Request_Data+0xc>)
 80a12b8:	681b      	ldr	r3, [r3, #0]
 80a12ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a12bc:	9301      	str	r3, [sp, #4]
 80a12be:	bd08      	pop	{r3, pc}
 80a12c0:	080601ac 	.word	0x080601ac

080a12c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a12c4:	b508      	push	{r3, lr}
 80a12c6:	4b02      	ldr	r3, [pc, #8]	; (80a12d0 <HAL_I2C_Begin_Transmission+0xc>)
 80a12c8:	681b      	ldr	r3, [r3, #0]
 80a12ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a12cc:	9301      	str	r3, [sp, #4]
 80a12ce:	bd08      	pop	{r3, pc}
 80a12d0:	080601ac 	.word	0x080601ac

080a12d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a12d4:	b508      	push	{r3, lr}
 80a12d6:	4b02      	ldr	r3, [pc, #8]	; (80a12e0 <HAL_I2C_End_Transmission+0xc>)
 80a12d8:	681b      	ldr	r3, [r3, #0]
 80a12da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a12dc:	9301      	str	r3, [sp, #4]
 80a12de:	bd08      	pop	{r3, pc}
 80a12e0:	080601ac 	.word	0x080601ac

080a12e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a12e4:	b508      	push	{r3, lr}
 80a12e6:	4b02      	ldr	r3, [pc, #8]	; (80a12f0 <HAL_I2C_Write_Data+0xc>)
 80a12e8:	681b      	ldr	r3, [r3, #0]
 80a12ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a12ec:	9301      	str	r3, [sp, #4]
 80a12ee:	bd08      	pop	{r3, pc}
 80a12f0:	080601ac 	.word	0x080601ac

080a12f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a12f4:	b508      	push	{r3, lr}
 80a12f6:	4b02      	ldr	r3, [pc, #8]	; (80a1300 <HAL_I2C_Available_Data+0xc>)
 80a12f8:	681b      	ldr	r3, [r3, #0]
 80a12fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a12fc:	9301      	str	r3, [sp, #4]
 80a12fe:	bd08      	pop	{r3, pc}
 80a1300:	080601ac 	.word	0x080601ac

080a1304 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1304:	b508      	push	{r3, lr}
 80a1306:	4b02      	ldr	r3, [pc, #8]	; (80a1310 <HAL_I2C_Read_Data+0xc>)
 80a1308:	681b      	ldr	r3, [r3, #0]
 80a130a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a130c:	9301      	str	r3, [sp, #4]
 80a130e:	bd08      	pop	{r3, pc}
 80a1310:	080601ac 	.word	0x080601ac

080a1314 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1314:	b508      	push	{r3, lr}
 80a1316:	4b02      	ldr	r3, [pc, #8]	; (80a1320 <HAL_I2C_Peek_Data+0xc>)
 80a1318:	681b      	ldr	r3, [r3, #0]
 80a131a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a131c:	9301      	str	r3, [sp, #4]
 80a131e:	bd08      	pop	{r3, pc}
 80a1320:	080601ac 	.word	0x080601ac

080a1324 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1324:	b508      	push	{r3, lr}
 80a1326:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <HAL_I2C_Flush_Data+0xc>)
 80a1328:	681b      	ldr	r3, [r3, #0]
 80a132a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a132c:	9301      	str	r3, [sp, #4]
 80a132e:	bd08      	pop	{r3, pc}
 80a1330:	080601ac 	.word	0x080601ac

080a1334 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1334:	b508      	push	{r3, lr}
 80a1336:	4b02      	ldr	r3, [pc, #8]	; (80a1340 <HAL_I2C_Is_Enabled+0xc>)
 80a1338:	681b      	ldr	r3, [r3, #0]
 80a133a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a133c:	9301      	str	r3, [sp, #4]
 80a133e:	bd08      	pop	{r3, pc}
 80a1340:	080601ac 	.word	0x080601ac

080a1344 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1344:	b508      	push	{r3, lr}
 80a1346:	4b03      	ldr	r3, [pc, #12]	; (80a1354 <HAL_I2C_Init+0x10>)
 80a1348:	681b      	ldr	r3, [r3, #0]
 80a134a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a134e:	9301      	str	r3, [sp, #4]
 80a1350:	bd08      	pop	{r3, pc}
 80a1352:	0000      	.short	0x0000
 80a1354:	080601ac 	.word	0x080601ac

080a1358 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <socket_handle_valid+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	685b      	ldr	r3, [r3, #4]
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601bc 	.word	0x080601bc

080a1368 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <socket_create+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	689b      	ldr	r3, [r3, #8]
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601bc 	.word	0x080601bc

080a1378 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <socket_receivefrom+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	695b      	ldr	r3, [r3, #20]
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601bc 	.word	0x080601bc

080a1388 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <socket_sendto+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	69db      	ldr	r3, [r3, #28]
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080601bc 	.word	0x080601bc

080a1398 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <socket_close+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	6a1b      	ldr	r3, [r3, #32]
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601bc 	.word	0x080601bc

080a13a8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <socket_handle_invalid+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601bc 	.word	0x080601bc

080a13b8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <HAL_SPI_Begin+0xc>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	681b      	ldr	r3, [r3, #0]
 80a13c0:	9301      	str	r3, [sp, #4]
 80a13c2:	bd08      	pop	{r3, pc}
 80a13c4:	080601b4 	.word	0x080601b4

080a13c8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a13c8:	b508      	push	{r3, lr}
 80a13ca:	4b02      	ldr	r3, [pc, #8]	; (80a13d4 <HAL_SPI_Set_Bit_Order+0xc>)
 80a13cc:	681b      	ldr	r3, [r3, #0]
 80a13ce:	689b      	ldr	r3, [r3, #8]
 80a13d0:	9301      	str	r3, [sp, #4]
 80a13d2:	bd08      	pop	{r3, pc}
 80a13d4:	080601b4 	.word	0x080601b4

080a13d8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a13d8:	b508      	push	{r3, lr}
 80a13da:	4b02      	ldr	r3, [pc, #8]	; (80a13e4 <HAL_SPI_Set_Data_Mode+0xc>)
 80a13dc:	681b      	ldr	r3, [r3, #0]
 80a13de:	68db      	ldr	r3, [r3, #12]
 80a13e0:	9301      	str	r3, [sp, #4]
 80a13e2:	bd08      	pop	{r3, pc}
 80a13e4:	080601b4 	.word	0x080601b4

080a13e8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a13e8:	b508      	push	{r3, lr}
 80a13ea:	4b02      	ldr	r3, [pc, #8]	; (80a13f4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a13ec:	681b      	ldr	r3, [r3, #0]
 80a13ee:	691b      	ldr	r3, [r3, #16]
 80a13f0:	9301      	str	r3, [sp, #4]
 80a13f2:	bd08      	pop	{r3, pc}
 80a13f4:	080601b4 	.word	0x080601b4

080a13f8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a13f8:	b508      	push	{r3, lr}
 80a13fa:	4b02      	ldr	r3, [pc, #8]	; (80a1404 <HAL_SPI_Send_Receive_Data+0xc>)
 80a13fc:	681b      	ldr	r3, [r3, #0]
 80a13fe:	695b      	ldr	r3, [r3, #20]
 80a1400:	9301      	str	r3, [sp, #4]
 80a1402:	bd08      	pop	{r3, pc}
 80a1404:	080601b4 	.word	0x080601b4

080a1408 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1408:	b508      	push	{r3, lr}
 80a140a:	4b02      	ldr	r3, [pc, #8]	; (80a1414 <HAL_SPI_Init+0xc>)
 80a140c:	681b      	ldr	r3, [r3, #0]
 80a140e:	69db      	ldr	r3, [r3, #28]
 80a1410:	9301      	str	r3, [sp, #4]
 80a1412:	bd08      	pop	{r3, pc}
 80a1414:	080601b4 	.word	0x080601b4

080a1418 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1418:	b508      	push	{r3, lr}
 80a141a:	4b02      	ldr	r3, [pc, #8]	; (80a1424 <HAL_SPI_Is_Enabled+0xc>)
 80a141c:	681b      	ldr	r3, [r3, #0]
 80a141e:	6a1b      	ldr	r3, [r3, #32]
 80a1420:	9301      	str	r3, [sp, #4]
 80a1422:	bd08      	pop	{r3, pc}
 80a1424:	080601b4 	.word	0x080601b4

080a1428 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1428:	b508      	push	{r3, lr}
 80a142a:	4b02      	ldr	r3, [pc, #8]	; (80a1434 <HAL_SPI_Info+0xc>)
 80a142c:	681b      	ldr	r3, [r3, #0]
 80a142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1430:	9301      	str	r3, [sp, #4]
 80a1432:	bd08      	pop	{r3, pc}
 80a1434:	080601b4 	.word	0x080601b4

080a1438 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1438:	b508      	push	{r3, lr}
 80a143a:	4b02      	ldr	r3, [pc, #8]	; (80a1444 <HAL_USART_Init+0xc>)
 80a143c:	681b      	ldr	r3, [r3, #0]
 80a143e:	699b      	ldr	r3, [r3, #24]
 80a1440:	9301      	str	r3, [sp, #4]
 80a1442:	bd08      	pop	{r3, pc}
 80a1444:	080601c4 	.word	0x080601c4

080a1448 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1448:	b508      	push	{r3, lr}
 80a144a:	4b02      	ldr	r3, [pc, #8]	; (80a1454 <HAL_USART_Write_Data+0xc>)
 80a144c:	681b      	ldr	r3, [r3, #0]
 80a144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1450:	9301      	str	r3, [sp, #4]
 80a1452:	bd08      	pop	{r3, pc}
 80a1454:	080601c4 	.word	0x080601c4

080a1458 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1458:	b508      	push	{r3, lr}
 80a145a:	4b02      	ldr	r3, [pc, #8]	; (80a1464 <HAL_USART_Available_Data+0xc>)
 80a145c:	681b      	ldr	r3, [r3, #0]
 80a145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1460:	9301      	str	r3, [sp, #4]
 80a1462:	bd08      	pop	{r3, pc}
 80a1464:	080601c4 	.word	0x080601c4

080a1468 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1468:	b508      	push	{r3, lr}
 80a146a:	4b02      	ldr	r3, [pc, #8]	; (80a1474 <HAL_USART_Read_Data+0xc>)
 80a146c:	681b      	ldr	r3, [r3, #0]
 80a146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1470:	9301      	str	r3, [sp, #4]
 80a1472:	bd08      	pop	{r3, pc}
 80a1474:	080601c4 	.word	0x080601c4

080a1478 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1478:	b508      	push	{r3, lr}
 80a147a:	4b02      	ldr	r3, [pc, #8]	; (80a1484 <HAL_USART_Peek_Data+0xc>)
 80a147c:	681b      	ldr	r3, [r3, #0]
 80a147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1480:	9301      	str	r3, [sp, #4]
 80a1482:	bd08      	pop	{r3, pc}
 80a1484:	080601c4 	.word	0x080601c4

080a1488 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1488:	b508      	push	{r3, lr}
 80a148a:	4b02      	ldr	r3, [pc, #8]	; (80a1494 <HAL_USART_Flush_Data+0xc>)
 80a148c:	681b      	ldr	r3, [r3, #0]
 80a148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1490:	9301      	str	r3, [sp, #4]
 80a1492:	bd08      	pop	{r3, pc}
 80a1494:	080601c4 	.word	0x080601c4

080a1498 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b02      	ldr	r3, [pc, #8]	; (80a14a4 <HAL_USART_Is_Enabled+0xc>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a14a0:	9301      	str	r3, [sp, #4]
 80a14a2:	bd08      	pop	{r3, pc}
 80a14a4:	080601c4 	.word	0x080601c4

080a14a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601c4 	.word	0x080601c4

080a14b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <HAL_USB_USART_Init+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	681b      	ldr	r3, [r3, #0]
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601d8 	.word	0x080601d8

080a14c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a14c8:	b508      	push	{r3, lr}
 80a14ca:	4b02      	ldr	r3, [pc, #8]	; (80a14d4 <HAL_USB_USART_Begin+0xc>)
 80a14cc:	681b      	ldr	r3, [r3, #0]
 80a14ce:	685b      	ldr	r3, [r3, #4]
 80a14d0:	9301      	str	r3, [sp, #4]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	080601d8 	.word	0x080601d8

080a14d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b02      	ldr	r3, [pc, #8]	; (80a14e4 <HAL_USB_USART_Available_Data+0xc>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	691b      	ldr	r3, [r3, #16]
 80a14e0:	9301      	str	r3, [sp, #4]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	080601d8 	.word	0x080601d8

080a14e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a14e8:	b508      	push	{r3, lr}
 80a14ea:	4b02      	ldr	r3, [pc, #8]	; (80a14f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a14ec:	681b      	ldr	r3, [r3, #0]
 80a14ee:	695b      	ldr	r3, [r3, #20]
 80a14f0:	9301      	str	r3, [sp, #4]
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	080601d8 	.word	0x080601d8

080a14f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <HAL_USB_USART_Receive_Data+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	699b      	ldr	r3, [r3, #24]
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601d8 	.word	0x080601d8

080a1508 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <HAL_USB_USART_Send_Data+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	69db      	ldr	r3, [r3, #28]
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	080601d8 	.word	0x080601d8

080a1518 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <HAL_USB_USART_Flush_Data+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	6a1b      	ldr	r3, [r3, #32]
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	080601d8 	.word	0x080601d8

080a1528 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <HAL_USB_USART_Is_Enabled+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	080601d8 	.word	0x080601d8

080a1538 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1538:	b508      	push	{r3, lr}
 80a153a:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <inet_gethostbyname+0xc>)
 80a153c:	681b      	ldr	r3, [r3, #0]
 80a153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1540:	9301      	str	r3, [sp, #4]
 80a1542:	bd08      	pop	{r3, pc}
 80a1544:	080601c0 	.word	0x080601c0

080a1548 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1548:	b508      	push	{r3, lr}
 80a154a:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <set_system_mode+0xc>)
 80a154c:	681b      	ldr	r3, [r3, #0]
 80a154e:	685b      	ldr	r3, [r3, #4]
 80a1550:	9301      	str	r3, [sp, #4]
 80a1552:	bd08      	pop	{r3, pc}
 80a1554:	080601a4 	.word	0x080601a4

080a1558 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1558:	b508      	push	{r3, lr}
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <system_thread_set_state+0xc>)
 80a155c:	681b      	ldr	r3, [r3, #0]
 80a155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1560:	9301      	str	r3, [sp, #4]
 80a1562:	bd08      	pop	{r3, pc}
 80a1564:	080601a4 	.word	0x080601a4

080a1568 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1568:	b508      	push	{r3, lr}
 80a156a:	4b03      	ldr	r3, [pc, #12]	; (80a1578 <system_ctrl_set_app_request_handler+0x10>)
 80a156c:	681b      	ldr	r3, [r3, #0]
 80a156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1572:	9301      	str	r3, [sp, #4]
 80a1574:	bd08      	pop	{r3, pc}
 80a1576:	0000      	.short	0x0000
 80a1578:	080601a4 	.word	0x080601a4

080a157c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b03      	ldr	r3, [pc, #12]	; (80a158c <system_ctrl_set_result+0x10>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1586:	9301      	str	r3, [sp, #4]
 80a1588:	bd08      	pop	{r3, pc}
 80a158a:	0000      	.short	0x0000
 80a158c:	080601a4 	.word	0x080601a4

080a1590 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601cc 	.word	0x080601cc

080a15a0 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <network_config+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	681b      	ldr	r3, [r3, #0]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601c8 	.word	0x080601c8

080a15b0 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <network_connect+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	685b      	ldr	r3, [r3, #4]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601c8 	.word	0x080601c8

080a15c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <network_connecting+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	689b      	ldr	r3, [r3, #8]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	080601c8 	.word	0x080601c8

080a15d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <network_disconnect+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	68db      	ldr	r3, [r3, #12]
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601c8 	.word	0x080601c8

080a15e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <network_ready+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	691b      	ldr	r3, [r3, #16]
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601c8 	.word	0x080601c8

080a15f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <network_on+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	695b      	ldr	r3, [r3, #20]
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601c8 	.word	0x080601c8

080a1600 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <network_off+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	699b      	ldr	r3, [r3, #24]
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080601c8 	.word	0x080601c8

080a1610 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <network_listen+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	69db      	ldr	r3, [r3, #28]
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601c8 	.word	0x080601c8

080a1620 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <network_listening+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	6a1b      	ldr	r3, [r3, #32]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601c8 	.word	0x080601c8

080a1630 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <network_set_listen_timeout+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601c8 	.word	0x080601c8

080a1640 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <network_get_listen_timeout+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601c8 	.word	0x080601c8

080a1650 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <network_set_hostname+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601c8 	.word	0x080601c8

080a1660 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <network_get_hostname+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601c8 	.word	0x080601c8

080a1670 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <malloc+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	681b      	ldr	r3, [r3, #0]
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601a0 	.word	0x080601a0

080a1680 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <free+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	685b      	ldr	r3, [r3, #4]
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601a0 	.word	0x080601a0

080a1690 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <realloc+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	689b      	ldr	r3, [r3, #8]
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601a0 	.word	0x080601a0

080a16a0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a16a0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a16a2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a16a4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a16a6:	b113      	cbz	r3, 80a16ae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a16a8:	2203      	movs	r2, #3
 80a16aa:	4601      	mov	r1, r0
 80a16ac:	4798      	blx	r3
    }
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	bd10      	pop	{r4, pc}

080a16b2 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a16b2:	4770      	bx	lr

080a16b4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a16b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16b6:	4606      	mov	r6, r0
 80a16b8:	4615      	mov	r5, r2
 80a16ba:	460c      	mov	r4, r1
 80a16bc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a16be:	42bc      	cmp	r4, r7
 80a16c0:	d006      	beq.n	80a16d0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a16c2:	6833      	ldr	r3, [r6, #0]
 80a16c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a16c8:	689b      	ldr	r3, [r3, #8]
 80a16ca:	4630      	mov	r0, r6
 80a16cc:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a16ce:	e7f6      	b.n	80a16be <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a16d0:	4628      	mov	r0, r5
 80a16d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a16d4 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a16d4:	2200      	movs	r2, #0
 80a16d6:	7c00      	ldrb	r0, [r0, #16]
 80a16d8:	f7ff be04 	b.w	80a12e4 <HAL_I2C_Write_Data>

080a16dc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a16dc:	2100      	movs	r1, #0
 80a16de:	7c00      	ldrb	r0, [r0, #16]
 80a16e0:	f7ff be08 	b.w	80a12f4 <HAL_I2C_Available_Data>

080a16e4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a16e4:	2100      	movs	r1, #0
 80a16e6:	7c00      	ldrb	r0, [r0, #16]
 80a16e8:	f7ff be0c 	b.w	80a1304 <HAL_I2C_Read_Data>

080a16ec <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a16ec:	2100      	movs	r1, #0
 80a16ee:	7c00      	ldrb	r0, [r0, #16]
 80a16f0:	f7ff be10 	b.w	80a1314 <HAL_I2C_Peek_Data>

080a16f4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a16f4:	2100      	movs	r1, #0
 80a16f6:	7c00      	ldrb	r0, [r0, #16]
 80a16f8:	f7ff be14 	b.w	80a1324 <HAL_I2C_Flush_Data>

080a16fc <_ZN7TwoWireD0Ev>:
 80a16fc:	b510      	push	{r4, lr}
 80a16fe:	4604      	mov	r4, r0
 80a1700:	2114      	movs	r1, #20
 80a1702:	f000 ffe0 	bl	80a26c6 <_ZdlPvj>
 80a1706:	4620      	mov	r0, r4
 80a1708:	bd10      	pop	{r4, pc}
	...

080a170c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a170c:	b510      	push	{r4, lr}
 80a170e:	4604      	mov	r4, r0
 80a1710:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1716:	60a3      	str	r3, [r4, #8]
 80a1718:	4b04      	ldr	r3, [pc, #16]	; (80a172c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a171a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a171c:	7420      	strb	r0, [r4, #16]
 80a171e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1720:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1722:	f7ff fe0f 	bl	80a1344 <HAL_I2C_Init>

}
 80a1726:	4620      	mov	r0, r4
 80a1728:	bd10      	pop	{r4, pc}
 80a172a:	bf00      	nop
 80a172c:	080a396c 	.word	0x080a396c

080a1730 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1730:	2300      	movs	r3, #0
 80a1732:	461a      	mov	r2, r3
 80a1734:	4619      	mov	r1, r3
 80a1736:	7c00      	ldrb	r0, [r0, #16]
 80a1738:	f7ff bdb4 	b.w	80a12a4 <HAL_I2C_Begin>

080a173c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a173c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a173e:	2400      	movs	r4, #0
 80a1740:	7c00      	ldrb	r0, [r0, #16]
 80a1742:	9400      	str	r4, [sp, #0]
 80a1744:	f7ff fdb6 	bl	80a12b4 <HAL_I2C_Request_Data>
  return result;
}
 80a1748:	b2c0      	uxtb	r0, r0
 80a174a:	b002      	add	sp, #8
 80a174c:	bd10      	pop	{r4, pc}

080a174e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a174e:	2301      	movs	r3, #1
 80a1750:	f7ff bff4 	b.w	80a173c <_ZN7TwoWire11requestFromEhhh>

080a1754 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1754:	2200      	movs	r2, #0
 80a1756:	7c00      	ldrb	r0, [r0, #16]
 80a1758:	f7ff bdb4 	b.w	80a12c4 <HAL_I2C_Begin_Transmission>

080a175c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a175c:	2200      	movs	r2, #0
 80a175e:	7c00      	ldrb	r0, [r0, #16]
 80a1760:	f7ff bdb8 	b.w	80a12d4 <HAL_I2C_End_Transmission>

080a1764 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1764:	2101      	movs	r1, #1
 80a1766:	f7ff bff9 	b.w	80a175c <_ZN7TwoWire15endTransmissionEh>

080a176a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a176a:	2100      	movs	r1, #0
 80a176c:	7c00      	ldrb	r0, [r0, #16]
 80a176e:	f7ff bde1 	b.w	80a1334 <HAL_I2C_Is_Enabled>

080a1772 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1774:	460f      	mov	r7, r1
 80a1776:	f100 0608 	add.w	r6, r0, #8
 80a177a:	1d05      	adds	r5, r0, #4
 80a177c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a177e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1782:	220a      	movs	r2, #10
 80a1784:	4638      	mov	r0, r7
 80a1786:	f000 f952 	bl	80a1a2e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a178a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a178c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a178e:	d007      	beq.n	80a17a0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1790:	2c00      	cmp	r4, #0
 80a1792:	d0f4      	beq.n	80a177e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1794:	212e      	movs	r1, #46	; 0x2e
 80a1796:	4638      	mov	r0, r7
 80a1798:	f000 f8f6 	bl	80a1988 <_ZN5Print5printEc>
 80a179c:	4404      	add	r4, r0
 80a179e:	e7ee      	b.n	80a177e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a17a0:	4620      	mov	r0, r4
 80a17a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17a4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a17a4:	b510      	push	{r4, lr}
 80a17a6:	4604      	mov	r4, r0
 80a17a8:	4b04      	ldr	r3, [pc, #16]	; (80a17bc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a17aa:	2211      	movs	r2, #17
 80a17ac:	f840 3b04 	str.w	r3, [r0], #4
 80a17b0:	2100      	movs	r1, #0
 80a17b2:	f001 ffd8 	bl	80a3766 <memset>
{
    clear();
}
 80a17b6:	4620      	mov	r0, r4
 80a17b8:	bd10      	pop	{r4, pc}
 80a17ba:	bf00      	nop
 80a17bc:	080a3994 	.word	0x080a3994

080a17c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a17c0:	4603      	mov	r3, r0
 80a17c2:	4a07      	ldr	r2, [pc, #28]	; (80a17e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a17c4:	b510      	push	{r4, lr}
 80a17c6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a17ca:	f101 0210 	add.w	r2, r1, #16
 80a17ce:	f851 4b04 	ldr.w	r4, [r1], #4
 80a17d2:	4291      	cmp	r1, r2
 80a17d4:	f843 4b04 	str.w	r4, [r3], #4
 80a17d8:	d1f9      	bne.n	80a17ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a17da:	780a      	ldrb	r2, [r1, #0]
 80a17dc:	701a      	strb	r2, [r3, #0]
}
 80a17de:	bd10      	pop	{r4, pc}
 80a17e0:	080a3994 	.word	0x080a3994

080a17e4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a17e4:	4a02      	ldr	r2, [pc, #8]	; (80a17f0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a17e6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a17e8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a17ea:	2204      	movs	r2, #4
 80a17ec:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a17ee:	4770      	bx	lr
 80a17f0:	080a3994 	.word	0x080a3994

080a17f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a17f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a17f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a17fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a17fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1802:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1806:	2304      	movs	r3, #4
 80a1808:	6041      	str	r1, [r0, #4]
 80a180a:	7503      	strb	r3, [r0, #20]
 80a180c:	bd10      	pop	{r4, pc}
	...

080a1810 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1812:	4d04      	ldr	r5, [pc, #16]	; (80a1824 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1814:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1816:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a181a:	9500      	str	r5, [sp, #0]
 80a181c:	f7ff ffea 	bl	80a17f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1820:	b003      	add	sp, #12
 80a1822:	bd30      	pop	{r4, r5, pc}
 80a1824:	080a3994 	.word	0x080a3994

080a1828 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1828:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a182a:	780d      	ldrb	r5, [r1, #0]
 80a182c:	788b      	ldrb	r3, [r1, #2]
 80a182e:	784a      	ldrb	r2, [r1, #1]
 80a1830:	78c9      	ldrb	r1, [r1, #3]
 80a1832:	9100      	str	r1, [sp, #0]
 80a1834:	4629      	mov	r1, r5
 80a1836:	f7ff ffdd 	bl	80a17f4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a183a:	b003      	add	sp, #12
 80a183c:	bd30      	pop	{r4, r5, pc}
	...

080a1840 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1840:	4a01      	ldr	r2, [pc, #4]	; (80a1848 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1844:	601a      	str	r2, [r3, #0]
 80a1846:	4770      	bx	lr
 80a1848:	080a3a16 	.word	0x080a3a16
 80a184c:	200001b0 	.word	0x200001b0

080a1850 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1850:	2300      	movs	r3, #0
 80a1852:	461a      	mov	r2, r3
 80a1854:	6840      	ldr	r0, [r0, #4]
 80a1856:	f7ff beab 	b.w	80a15b0 <network_connect>

080a185a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a185a:	2200      	movs	r2, #0
 80a185c:	2102      	movs	r1, #2
 80a185e:	6840      	ldr	r0, [r0, #4]
 80a1860:	f7ff beb6 	b.w	80a15d0 <network_disconnect>

080a1864 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1864:	2200      	movs	r2, #0
 80a1866:	4611      	mov	r1, r2
 80a1868:	6840      	ldr	r0, [r0, #4]
 80a186a:	f7ff bea9 	b.w	80a15c0 <network_connecting>

080a186e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a186e:	2200      	movs	r2, #0
 80a1870:	4611      	mov	r1, r2
 80a1872:	6840      	ldr	r0, [r0, #4]
 80a1874:	f7ff beb4 	b.w	80a15e0 <network_ready>

080a1878 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1878:	2300      	movs	r3, #0
 80a187a:	461a      	mov	r2, r3
 80a187c:	4619      	mov	r1, r3
 80a187e:	6840      	ldr	r0, [r0, #4]
 80a1880:	f7ff beb6 	b.w	80a15f0 <network_on>

080a1884 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1884:	2300      	movs	r3, #0
 80a1886:	461a      	mov	r2, r3
 80a1888:	4619      	mov	r1, r3
 80a188a:	6840      	ldr	r0, [r0, #4]
 80a188c:	f7ff beb8 	b.w	80a1600 <network_off>

080a1890 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1890:	2200      	movs	r2, #0
 80a1892:	f081 0101 	eor.w	r1, r1, #1
 80a1896:	6840      	ldr	r0, [r0, #4]
 80a1898:	f7ff beba 	b.w	80a1610 <network_listen>

080a189c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a189c:	2200      	movs	r2, #0
 80a189e:	6840      	ldr	r0, [r0, #4]
 80a18a0:	f7ff bec6 	b.w	80a1630 <network_set_listen_timeout>

080a18a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a18a4:	2200      	movs	r2, #0
 80a18a6:	4611      	mov	r1, r2
 80a18a8:	6840      	ldr	r0, [r0, #4]
 80a18aa:	f7ff bec9 	b.w	80a1640 <network_get_listen_timeout>

080a18ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a18ae:	2200      	movs	r2, #0
 80a18b0:	4611      	mov	r1, r2
 80a18b2:	6840      	ldr	r0, [r0, #4]
 80a18b4:	f7ff beb4 	b.w	80a1620 <network_listening>

080a18b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a18b8:	b570      	push	{r4, r5, r6, lr}
 80a18ba:	4616      	mov	r6, r2
 80a18bc:	b08e      	sub	sp, #56	; 0x38
 80a18be:	4604      	mov	r4, r0
    IPAddress addr;
 80a18c0:	a808      	add	r0, sp, #32
 80a18c2:	f7ff ff6f 	bl	80a17a4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a18c6:	2211      	movs	r2, #17
 80a18c8:	2100      	movs	r1, #0
 80a18ca:	a803      	add	r0, sp, #12
 80a18cc:	f001 ff4b 	bl	80a3766 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a18d0:	4630      	mov	r0, r6
 80a18d2:	f001 ff81 	bl	80a37d8 <strlen>
 80a18d6:	2500      	movs	r5, #0
 80a18d8:	4b0a      	ldr	r3, [pc, #40]	; (80a1904 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a18da:	9500      	str	r5, [sp, #0]
 80a18dc:	b281      	uxth	r1, r0
 80a18de:	685b      	ldr	r3, [r3, #4]
 80a18e0:	aa03      	add	r2, sp, #12
 80a18e2:	4630      	mov	r0, r6
 80a18e4:	f7ff fe28 	bl	80a1538 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a18e8:	b120      	cbz	r0, 80a18f4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a18ea:	4629      	mov	r1, r5
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	f7ff ff79 	bl	80a17e4 <_ZN9IPAddressC1Em>
 80a18f2:	e003      	b.n	80a18fc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a18f4:	a903      	add	r1, sp, #12
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	f7ff ff62 	bl	80a17c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a18fc:	4620      	mov	r0, r4
 80a18fe:	b00e      	add	sp, #56	; 0x38
 80a1900:	bd70      	pop	{r4, r5, r6, pc}
 80a1902:	bf00      	nop
 80a1904:	20000634 	.word	0x20000634

080a1908 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1908:	4b03      	ldr	r3, [pc, #12]	; (80a1918 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a190a:	4a04      	ldr	r2, [pc, #16]	; (80a191c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a190c:	2804      	cmp	r0, #4
 80a190e:	bf0c      	ite	eq
 80a1910:	4610      	moveq	r0, r2
 80a1912:	4618      	movne	r0, r3
 80a1914:	4770      	bx	lr
 80a1916:	bf00      	nop
 80a1918:	200001b4 	.word	0x200001b4
 80a191c:	20000634 	.word	0x20000634

080a1920 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1920:	4b02      	ldr	r3, [pc, #8]	; (80a192c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1922:	4a03      	ldr	r2, [pc, #12]	; (80a1930 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1924:	601a      	str	r2, [r3, #0]
 80a1926:	2200      	movs	r2, #0
 80a1928:	605a      	str	r2, [r3, #4]
 80a192a:	4770      	bx	lr
 80a192c:	200001b4 	.word	0x200001b4
 80a1930:	080a3a8c 	.word	0x080a3a8c

080a1934 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1936:	4606      	mov	r6, r0
 80a1938:	460d      	mov	r5, r1
 80a193a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a193c:	2400      	movs	r4, #0
  while (size--) {
 80a193e:	42bd      	cmp	r5, r7
 80a1940:	d00c      	beq.n	80a195c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1942:	6833      	ldr	r3, [r6, #0]
 80a1944:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1948:	689b      	ldr	r3, [r3, #8]
 80a194a:	4630      	mov	r0, r6
 80a194c:	4798      	blx	r3
     if (chunk>=0)
 80a194e:	2800      	cmp	r0, #0
 80a1950:	db01      	blt.n	80a1956 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1952:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1954:	e7f3      	b.n	80a193e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1956:	2c00      	cmp	r4, #0
 80a1958:	bf08      	it	eq
 80a195a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a195c:	4620      	mov	r0, r4
 80a195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1960 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1960:	b570      	push	{r4, r5, r6, lr}
 80a1962:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1964:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1966:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1968:	b149      	cbz	r1, 80a197e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a196a:	f001 ff35 	bl	80a37d8 <strlen>
 80a196e:	682b      	ldr	r3, [r5, #0]
 80a1970:	4602      	mov	r2, r0
 80a1972:	4621      	mov	r1, r4
 80a1974:	4628      	mov	r0, r5
    }
 80a1976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a197a:	68db      	ldr	r3, [r3, #12]
 80a197c:	4718      	bx	r3
    }
 80a197e:	bd70      	pop	{r4, r5, r6, pc}

080a1980 <_ZN5Print5printEPKc>:
 80a1980:	b508      	push	{r3, lr}
 80a1982:	f7ff ffed 	bl	80a1960 <_ZN5Print5writeEPKc>
 80a1986:	bd08      	pop	{r3, pc}

080a1988 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1988:	6803      	ldr	r3, [r0, #0]
 80a198a:	689b      	ldr	r3, [r3, #8]
 80a198c:	4718      	bx	r3

080a198e <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a198e:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a1990:	680a      	ldr	r2, [r1, #0]
 80a1992:	4601      	mov	r1, r0
 80a1994:	6812      	ldr	r2, [r2, #0]
 80a1996:	4618      	mov	r0, r3
 80a1998:	4710      	bx	r2

080a199a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a199a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a199c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a199e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a19a0:	f7ff fff2 	bl	80a1988 <_ZN5Print5printEc>
  n += print('\n');
 80a19a4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a19a6:	4604      	mov	r4, r0
  n += print('\n');
 80a19a8:	4628      	mov	r0, r5
 80a19aa:	f7ff ffed 	bl	80a1988 <_ZN5Print5printEc>
  return n;
}
 80a19ae:	4420      	add	r0, r4
 80a19b0:	bd38      	pop	{r3, r4, r5, pc}

080a19b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a19b2:	b538      	push	{r3, r4, r5, lr}
 80a19b4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a19b6:	f7ff ffd3 	bl	80a1960 <_ZN5Print5writeEPKc>
 80a19ba:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a19bc:	4628      	mov	r0, r5
 80a19be:	f7ff ffec 	bl	80a199a <_ZN5Print7printlnEv>
  return n;
}
 80a19c2:	4420      	add	r0, r4
 80a19c4:	bd38      	pop	{r3, r4, r5, pc}

080a19c6 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a19c6:	b538      	push	{r3, r4, r5, lr}
 80a19c8:	4605      	mov	r5, r0
   size_t n = print(x);
 80a19ca:	f7ff ffe0 	bl	80a198e <_ZN5Print5printERK9Printable>
 80a19ce:	4604      	mov	r4, r0
   n += println();
 80a19d0:	4628      	mov	r0, r5
 80a19d2:	f7ff ffe2 	bl	80a199a <_ZN5Print7printlnEv>
   return n;
 }
 80a19d6:	4420      	add	r0, r4
 80a19d8:	bd38      	pop	{r3, r4, r5, pc}

080a19da <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a19da:	2a01      	cmp	r2, #1
 80a19dc:	bf98      	it	ls
 80a19de:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a19e0:	b530      	push	{r4, r5, lr}
 80a19e2:	460b      	mov	r3, r1
 80a19e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a19e6:	2100      	movs	r1, #0
 80a19e8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a19ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a19f0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a19f4:	fb05 3312 	mls	r3, r5, r2, r3
 80a19f8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a19fa:	2b09      	cmp	r3, #9
 80a19fc:	bf94      	ite	ls
 80a19fe:	3330      	addls	r3, #48	; 0x30
 80a1a00:	3337      	addhi	r3, #55	; 0x37
 80a1a02:	b2db      	uxtb	r3, r3
 80a1a04:	4621      	mov	r1, r4
 80a1a06:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a0a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a0c:	2d00      	cmp	r5, #0
 80a1a0e:	d1ef      	bne.n	80a19f0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a10:	f7ff ffa6 	bl	80a1960 <_ZN5Print5writeEPKc>
}
 80a1a14:	b00b      	add	sp, #44	; 0x2c
 80a1a16:	bd30      	pop	{r4, r5, pc}

080a1a18 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a18:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a1a:	b922      	cbnz	r2, 80a1a26 <_ZN5Print5printEmi+0xe>
 80a1a1c:	6803      	ldr	r3, [r0, #0]
 80a1a1e:	b2c9      	uxtb	r1, r1
 80a1a20:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a22:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1a24:	4718      	bx	r3
  else return printNumber(n, base);
 80a1a26:	b2d2      	uxtb	r2, r2
}
 80a1a28:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1a2a:	f7ff bfd6 	b.w	80a19da <_ZN5Print11printNumberEmh>

080a1a2e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1a2e:	f7ff bff3 	b.w	80a1a18 <_ZN5Print5printEmi>

080a1a32 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1a32:	b510      	push	{r4, lr}
 80a1a34:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a36:	f7ff fe33 	bl	80a16a0 <_ZNSt14_Function_baseD1Ev>
 80a1a3a:	4620      	mov	r0, r4
 80a1a3c:	bd10      	pop	{r4, pc}
	...

080a1a40 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1a40:	4803      	ldr	r0, [pc, #12]	; (80a1a50 <_GLOBAL__sub_I_RGB+0x10>)
 80a1a42:	2300      	movs	r3, #0
 80a1a44:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1a46:	4a03      	ldr	r2, [pc, #12]	; (80a1a54 <_GLOBAL__sub_I_RGB+0x14>)
 80a1a48:	4903      	ldr	r1, [pc, #12]	; (80a1a58 <_GLOBAL__sub_I_RGB+0x18>)
 80a1a4a:	f000 be37 	b.w	80a26bc <__aeabi_atexit>
 80a1a4e:	bf00      	nop
 80a1a50:	200001bc 	.word	0x200001bc
 80a1a54:	20000080 	.word	0x20000080
 80a1a58:	080a1a33 	.word	0x080a1a33

080a1a5c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1a5c:	4770      	bx	lr

080a1a5e <_ZN8SPIClassD0Ev>:
 80a1a5e:	b510      	push	{r4, lr}
 80a1a60:	4604      	mov	r4, r0
 80a1a62:	2110      	movs	r1, #16
 80a1a64:	f000 fe2f 	bl	80a26c6 <_ZdlPvj>
 80a1a68:	4620      	mov	r0, r4
 80a1a6a:	bd10      	pop	{r4, pc}

080a1a6c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1a6c:	b570      	push	{r4, r5, r6, lr}
 80a1a6e:	4604      	mov	r4, r0
 80a1a70:	460e      	mov	r6, r1
 80a1a72:	4b07      	ldr	r3, [pc, #28]	; (80a1a90 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1a74:	2500      	movs	r5, #0
 80a1a76:	6003      	str	r3, [r0, #0]
 80a1a78:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1a7c:	f7ff fbda 	bl	80a1234 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1a80:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1a82:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1a84:	f7ff fcc0 	bl	80a1408 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1a88:	60a5      	str	r5, [r4, #8]
}
 80a1a8a:	4620      	mov	r0, r4
 80a1a8c:	bd70      	pop	{r4, r5, r6, pc}
 80a1a8e:	bf00      	nop
 80a1a90:	080a3ac0 	.word	0x080a3ac0

080a1a94 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1a94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1a98:	7900      	ldrb	r0, [r0, #4]
 80a1a9a:	f7ff bc8d 	b.w	80a13b8 <HAL_SPI_Begin>

080a1a9e <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a1a9e:	7900      	ldrb	r0, [r0, #4]
 80a1aa0:	f7ff bc92 	b.w	80a13c8 <HAL_SPI_Set_Bit_Order>

080a1aa4 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1aa4:	7900      	ldrb	r0, [r0, #4]
 80a1aa6:	f7ff bc97 	b.w	80a13d8 <HAL_SPI_Set_Data_Mode>
	...

080a1aac <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1aac:	4a05      	ldr	r2, [pc, #20]	; (80a1ac4 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a1aae:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1ab0:	5c99      	ldrb	r1, [r3, r2]
 80a1ab2:	4281      	cmp	r1, r0
 80a1ab4:	d002      	beq.n	80a1abc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a1ab6:	3301      	adds	r3, #1
 80a1ab8:	2b08      	cmp	r3, #8
 80a1aba:	d1f9      	bne.n	80a1ab0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a1abc:	1c58      	adds	r0, r3, #1
}
 80a1abe:	b2c0      	uxtb	r0, r0
 80a1ac0:	4770      	bx	lr
 80a1ac2:	bf00      	nop
 80a1ac4:	080a3ac8 	.word	0x080a3ac8

080a1ac8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1ac8:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1aca:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1acc:	6018      	str	r0, [r3, #0]
 80a1ace:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1ad0:	6818      	ldr	r0, [r3, #0]
 80a1ad2:	b2e5      	uxtb	r5, r4
 80a1ad4:	4288      	cmp	r0, r1
 80a1ad6:	d906      	bls.n	80a1ae6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1ad8:	3401      	adds	r4, #1
 80a1ada:	2c08      	cmp	r4, #8
 80a1adc:	d002      	beq.n	80a1ae4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1ade:	0840      	lsrs	r0, r0, #1
 80a1ae0:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1ae2:	e7f5      	b.n	80a1ad0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1ae4:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1ae8:	5d5b      	ldrb	r3, [r3, r5]
 80a1aea:	7013      	strb	r3, [r2, #0]
 80a1aec:	bd30      	pop	{r4, r5, pc}
 80a1aee:	bf00      	nop
 80a1af0:	080a3ac8 	.word	0x080a3ac8

080a1af4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1af4:	b570      	push	{r4, r5, r6, lr}
 80a1af6:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a1af8:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1afc:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a1afe:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1b00:	2214      	movs	r2, #20
 80a1b02:	2100      	movs	r1, #0
 80a1b04:	a803      	add	r0, sp, #12
 80a1b06:	f001 fe2e 	bl	80a3766 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1b0a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1b0c:	a903      	add	r1, sp, #12
 80a1b0e:	4630      	mov	r0, r6
 80a1b10:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1b12:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a1b16:	f7ff fc87 	bl	80a1428 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a1b1a:	ab02      	add	r3, sp, #8
 80a1b1c:	f10d 0207 	add.w	r2, sp, #7
 80a1b20:	4629      	mov	r1, r5
 80a1b22:	9804      	ldr	r0, [sp, #16]
 80a1b24:	f7ff ffd0 	bl	80a1ac8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b28:	7920      	ldrb	r0, [r4, #4]
 80a1b2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1b2e:	f7ff fc5b 	bl	80a13e8 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a1b32:	9802      	ldr	r0, [sp, #8]
 80a1b34:	b008      	add	sp, #32
 80a1b36:	bd70      	pop	{r4, r5, r6, pc}

080a1b38 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1b38:	b538      	push	{r3, r4, r5, lr}
 80a1b3a:	4604      	mov	r4, r0
    if (dividerReference)
 80a1b3c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1b3e:	4608      	mov	r0, r1
    if (dividerReference)
 80a1b40:	b14d      	cbz	r5, 80a1b56 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a1b42:	f7ff ffb3 	bl	80a1aac <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1b46:	2201      	movs	r2, #1
 80a1b48:	fa25 f100 	lsr.w	r1, r5, r0
 80a1b4c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a1b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1b52:	f7ff bfcf 	b.w	80a1af4 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b56:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b5c:	f7ff bc44 	b.w	80a13e8 <HAL_SPI_Set_Clock_Divider>

080a1b60 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1b60:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1b62:	7900      	ldrb	r0, [r0, #4]
 80a1b64:	f7ff fc48 	bl	80a13f8 <HAL_SPI_Send_Receive_Data>
}
 80a1b68:	b2c0      	uxtb	r0, r0
 80a1b6a:	bd08      	pop	{r3, pc}

080a1b6c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b6c:	7900      	ldrb	r0, [r0, #4]
 80a1b6e:	f7ff bc53 	b.w	80a1418 <HAL_SPI_Is_Enabled>

080a1b72 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b72:	b510      	push	{r4, lr}
 80a1b74:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b76:	6800      	ldr	r0, [r0, #0]
 80a1b78:	f7ff fd82 	bl	80a1680 <free>
}
 80a1b7c:	4620      	mov	r0, r4
 80a1b7e:	bd10      	pop	{r4, pc}

080a1b80 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b80:	b510      	push	{r4, lr}
 80a1b82:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b84:	6800      	ldr	r0, [r0, #0]
 80a1b86:	b108      	cbz	r0, 80a1b8c <_ZN6String10invalidateEv+0xc>
 80a1b88:	f7ff fd7a 	bl	80a1680 <free>
	buffer = NULL;
 80a1b8c:	2300      	movs	r3, #0
 80a1b8e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1b90:	60a3      	str	r3, [r4, #8]
 80a1b92:	6063      	str	r3, [r4, #4]
 80a1b94:	bd10      	pop	{r4, pc}

080a1b96 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1b96:	b538      	push	{r3, r4, r5, lr}
 80a1b98:	4604      	mov	r4, r0
 80a1b9a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1b9c:	6800      	ldr	r0, [r0, #0]
 80a1b9e:	3101      	adds	r1, #1
 80a1ba0:	f7ff fd76 	bl	80a1690 <realloc>
	if (newbuffer) {
 80a1ba4:	b110      	cbz	r0, 80a1bac <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1ba6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1baa:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1bac:	bd38      	pop	{r3, r4, r5, pc}

080a1bae <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1bae:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1bb0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1bb2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1bb4:	b113      	cbz	r3, 80a1bbc <_ZN6String7reserveEj+0xe>
 80a1bb6:	6843      	ldr	r3, [r0, #4]
 80a1bb8:	428b      	cmp	r3, r1
 80a1bba:	d207      	bcs.n	80a1bcc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1bbc:	4620      	mov	r0, r4
 80a1bbe:	f7ff ffea 	bl	80a1b96 <_ZN6String12changeBufferEj>
 80a1bc2:	b120      	cbz	r0, 80a1bce <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1bc4:	68a3      	ldr	r3, [r4, #8]
 80a1bc6:	b90b      	cbnz	r3, 80a1bcc <_ZN6String7reserveEj+0x1e>
 80a1bc8:	6822      	ldr	r2, [r4, #0]
 80a1bca:	7013      	strb	r3, [r2, #0]
 80a1bcc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1bce:	bd10      	pop	{r4, pc}

080a1bd0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1bd0:	b570      	push	{r4, r5, r6, lr}
 80a1bd2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1bd4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1bd6:	4604      	mov	r4, r0
 80a1bd8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1bda:	f7ff ffe8 	bl	80a1bae <_ZN6String7reserveEj>
 80a1bde:	b918      	cbnz	r0, 80a1be8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1be0:	4620      	mov	r0, r4
 80a1be2:	f7ff ffcd 	bl	80a1b80 <_ZN6String10invalidateEv>
		return *this;
 80a1be6:	e009      	b.n	80a1bfc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1be8:	462a      	mov	r2, r5
 80a1bea:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1bec:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1bee:	6820      	ldr	r0, [r4, #0]
 80a1bf0:	f001 fdae 	bl	80a3750 <memcpy>
	buffer[len] = 0;
 80a1bf4:	6822      	ldr	r2, [r4, #0]
 80a1bf6:	68a3      	ldr	r3, [r4, #8]
 80a1bf8:	2100      	movs	r1, #0
 80a1bfa:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	bd70      	pop	{r4, r5, r6, pc}

080a1c00 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1c00:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c02:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1c04:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c06:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1c08:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1c0a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c0c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1c0e:	460d      	mov	r5, r1
 80a1c10:	b139      	cbz	r1, 80a1c22 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1c12:	4608      	mov	r0, r1
 80a1c14:	f001 fde0 	bl	80a37d8 <strlen>
 80a1c18:	4629      	mov	r1, r5
 80a1c1a:	4602      	mov	r2, r0
 80a1c1c:	4620      	mov	r0, r4
 80a1c1e:	f7ff ffd7 	bl	80a1bd0 <_ZN6String4copyEPKcj>
}
 80a1c22:	4620      	mov	r0, r4
 80a1c24:	bd38      	pop	{r3, r4, r5, pc}

080a1c26 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1c26:	b538      	push	{r3, r4, r5, lr}
 80a1c28:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c2a:	460c      	mov	r4, r1
 80a1c2c:	b141      	cbz	r1, 80a1c40 <_ZN6StringaSEPKc+0x1a>
 80a1c2e:	4608      	mov	r0, r1
 80a1c30:	f001 fdd2 	bl	80a37d8 <strlen>
 80a1c34:	4621      	mov	r1, r4
 80a1c36:	4602      	mov	r2, r0
 80a1c38:	4628      	mov	r0, r5
 80a1c3a:	f7ff ffc9 	bl	80a1bd0 <_ZN6String4copyEPKcj>
 80a1c3e:	e001      	b.n	80a1c44 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1c40:	f7ff ff9e 	bl	80a1b80 <_ZN6String10invalidateEv>

	return *this;
}
 80a1c44:	4628      	mov	r0, r5
 80a1c46:	bd38      	pop	{r3, r4, r5, pc}

080a1c48 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1c48:	b570      	push	{r4, r5, r6, lr}
 80a1c4a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1c4c:	460e      	mov	r6, r1
 80a1c4e:	b909      	cbnz	r1, 80a1c54 <_ZN6String6concatEPKcj+0xc>
 80a1c50:	2000      	movs	r0, #0
 80a1c52:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1c54:	b16a      	cbz	r2, 80a1c72 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1c56:	6883      	ldr	r3, [r0, #8]
 80a1c58:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a1c5a:	4629      	mov	r1, r5
 80a1c5c:	f7ff ffa7 	bl	80a1bae <_ZN6String7reserveEj>
 80a1c60:	2800      	cmp	r0, #0
 80a1c62:	d0f5      	beq.n	80a1c50 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1c64:	6820      	ldr	r0, [r4, #0]
 80a1c66:	68a3      	ldr	r3, [r4, #8]
 80a1c68:	4631      	mov	r1, r6
 80a1c6a:	4418      	add	r0, r3
 80a1c6c:	f001 fdac 	bl	80a37c8 <strcpy>
	len = newlen;
 80a1c70:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1c72:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1c74:	bd70      	pop	{r4, r5, r6, pc}

080a1c76 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a1c76:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a1c78:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a1c7a:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a1c7e:	2201      	movs	r2, #1
 80a1c80:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a1c82:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a1c86:	f7ff ffdf 	bl	80a1c48 <_ZN6String6concatEPKcj>
}
 80a1c8a:	b003      	add	sp, #12
 80a1c8c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c90 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1c94:	4b03      	ldr	r3, [pc, #12]	; (80a1ca4 <_GLOBAL__sub_I_System+0x14>)
 80a1c96:	2000      	movs	r0, #0
 80a1c98:	7018      	strb	r0, [r3, #0]
 80a1c9a:	8058      	strh	r0, [r3, #2]
 80a1c9c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c9e:	f7ff bc53 	b.w	80a1548 <set_system_mode>
 80a1ca2:	bf00      	nop
 80a1ca4:	200001cc 	.word	0x200001cc

080a1ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1ca8:	4b02      	ldr	r3, [pc, #8]	; (80a1cb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1caa:	681a      	ldr	r2, [r3, #0]
 80a1cac:	4b02      	ldr	r3, [pc, #8]	; (80a1cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1cae:	601a      	str	r2, [r3, #0]
 80a1cb0:	4770      	bx	lr
 80a1cb2:	bf00      	nop
 80a1cb4:	20000018 	.word	0x20000018
 80a1cb8:	200001d4 	.word	0x200001d4

080a1cbc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1cbc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1cbe:	6804      	ldr	r4, [r0, #0]
 80a1cc0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1cc2:	46a4      	mov	ip, r4
    }
 80a1cc4:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1cc6:	4760      	bx	ip

080a1cc8 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1cc8:	6803      	ldr	r3, [r0, #0]
 80a1cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ccc:	4718      	bx	r3

080a1cce <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1cce:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1cd0:	4770      	bx	lr

080a1cd2 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1cd2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1cd4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1cd6:	1a10      	subs	r0, r2, r0
 80a1cd8:	4770      	bx	lr

080a1cda <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1cda:	b513      	push	{r0, r1, r4, lr}
 80a1cdc:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1cde:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1ce0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1ce4:	68d4      	ldr	r4, [r2, #12]
 80a1ce6:	4619      	mov	r1, r3
 80a1ce8:	2201      	movs	r2, #1
 80a1cea:	47a0      	blx	r4
}
 80a1cec:	b002      	add	sp, #8
 80a1cee:	bd10      	pop	{r4, pc}

080a1cf0 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1cf0:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1cf2:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1cf4:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1cf6:	691b      	ldr	r3, [r3, #16]
 80a1cf8:	4798      	blx	r3
 80a1cfa:	b128      	cbz	r0, 80a1d08 <_ZN3UDP4readEv+0x18>
 80a1cfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1cfe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1d00:	1c59      	adds	r1, r3, #1
 80a1d02:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1d04:	5cd0      	ldrb	r0, [r2, r3]
 80a1d06:	bd10      	pop	{r4, pc}
 80a1d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1d0c:	bd10      	pop	{r4, pc}

080a1d0e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1d0e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1d10:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1d12:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1d14:	691b      	ldr	r3, [r3, #16]
 80a1d16:	4798      	blx	r3
 80a1d18:	b118      	cbz	r0, 80a1d22 <_ZN3UDP4peekEv+0x14>
 80a1d1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1d1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1d1e:	5cd0      	ldrb	r0, [r2, r3]
 80a1d20:	bd10      	pop	{r4, pc}
 80a1d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1d26:	bd10      	pop	{r4, pc}

080a1d28 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1d28:	4770      	bx	lr

080a1d2a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1d2a:	4603      	mov	r3, r0
 80a1d2c:	4608      	mov	r0, r1
 80a1d2e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1d30:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1d32:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1d34:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1d36:	6803      	ldr	r3, [r0, #0]
 80a1d38:	1a52      	subs	r2, r2, r1
 80a1d3a:	68db      	ldr	r3, [r3, #12]
 80a1d3c:	4421      	add	r1, r4
}
 80a1d3e:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1d40:	4718      	bx	r3

080a1d42 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1d42:	f1a0 0010 	sub.w	r0, r0, #16
 80a1d46:	f7ff bff0 	b.w	80a1d2a <_ZNK3UDP7printToER5Print>

080a1d4a <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1d4c:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1d4e:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1d50:	460f      	mov	r7, r1
 80a1d52:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1d54:	f7ff fdd8 	bl	80a1908 <_ZN5spark12NetworkClass4fromEm>
 80a1d58:	6803      	ldr	r3, [r0, #0]
 80a1d5a:	68db      	ldr	r3, [r3, #12]
 80a1d5c:	4798      	blx	r3
 80a1d5e:	b1b8      	cbz	r0, 80a1d90 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1d60:	2102      	movs	r1, #2
 80a1d62:	463b      	mov	r3, r7
 80a1d64:	2211      	movs	r2, #17
 80a1d66:	4608      	mov	r0, r1
 80a1d68:	9600      	str	r6, [sp, #0]
 80a1d6a:	f7ff fafd 	bl	80a1368 <socket_create>
 80a1d6e:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1d70:	f7ff faf2 	bl	80a1358 <socket_handle_valid>
 80a1d74:	4604      	mov	r4, r0
 80a1d76:	b130      	cbz	r0, 80a1d86 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1d78:	2300      	movs	r3, #0
 80a1d7a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1d7c:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1d7e:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1d80:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1d82:	2001      	movs	r0, #1
 80a1d84:	e004      	b.n	80a1d90 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a1d86:	682b      	ldr	r3, [r5, #0]
 80a1d88:	4628      	mov	r0, r5
 80a1d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1d8c:	4798      	blx	r3
            bound = false;
 80a1d8e:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1d90:	b003      	add	sp, #12
 80a1d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d94 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1d94:	b538      	push	{r3, r4, r5, lr}
 80a1d96:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1d98:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1d9a:	f7ff fb05 	bl	80a13a8 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1d9e:	4285      	cmp	r5, r0
 80a1da0:	d002      	beq.n	80a1da8 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1da2:	6960      	ldr	r0, [r4, #20]
 80a1da4:	f7ff faf8 	bl	80a1398 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1da8:	f7ff fafe 	bl	80a13a8 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1dac:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1dae:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1db0:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1db2:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1db4:	bd38      	pop	{r3, r4, r5, pc}

080a1db6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1db6:	b530      	push	{r4, r5, lr}
 80a1db8:	b087      	sub	sp, #28
 80a1dba:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1dbe:	2502      	movs	r5, #2
 80a1dc0:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1dc4:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1dc8:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1dca:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1dcc:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1dd0:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1dd4:	799c      	ldrb	r4, [r3, #6]
 80a1dd6:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1dda:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1ddc:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1dde:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1de2:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1de6:	2310      	movs	r3, #16
 80a1de8:	9301      	str	r3, [sp, #4]
 80a1dea:	ab02      	add	r3, sp, #8
 80a1dec:	9300      	str	r3, [sp, #0]
 80a1dee:	6940      	ldr	r0, [r0, #20]
 80a1df0:	2300      	movs	r3, #0
 80a1df2:	f7ff fac9 	bl	80a1388 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1df6:	b007      	add	sp, #28
 80a1df8:	bd30      	pop	{r4, r5, pc}

080a1dfa <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1dfa:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1dfc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1dfe:	4605      	mov	r5, r0
 80a1e00:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1e02:	b113      	cbz	r3, 80a1e0a <_ZN3UDP5writeEPKhj+0x10>
 80a1e04:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1e06:	1a24      	subs	r4, r4, r0
 80a1e08:	e000      	b.n	80a1e0c <_ZN3UDP5writeEPKhj+0x12>
 80a1e0a:	461c      	mov	r4, r3
 80a1e0c:	4294      	cmp	r4, r2
 80a1e0e:	bf28      	it	cs
 80a1e10:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1e12:	4418      	add	r0, r3
 80a1e14:	4622      	mov	r2, r4
 80a1e16:	f001 fc9b 	bl	80a3750 <memcpy>
    _offset += size;
 80a1e1a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1e1c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1e1e:	4423      	add	r3, r4
 80a1e20:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1e22:	bd38      	pop	{r3, r4, r5, pc}

080a1e24 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1e24:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1e26:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1e28:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1e2a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1e2c:	460e      	mov	r6, r1
 80a1e2e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1e30:	4798      	blx	r3
 80a1e32:	b188      	cbz	r0, 80a1e58 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1e34:	6823      	ldr	r3, [r4, #0]
 80a1e36:	4620      	mov	r0, r4
 80a1e38:	691b      	ldr	r3, [r3, #16]
 80a1e3a:	4798      	blx	r3
 80a1e3c:	4285      	cmp	r5, r0
 80a1e3e:	bfa8      	it	ge
 80a1e40:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1e42:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1e44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1e46:	462a      	mov	r2, r5
 80a1e48:	4419      	add	r1, r3
 80a1e4a:	4630      	mov	r0, r6
 80a1e4c:	f001 fc80 	bl	80a3750 <memcpy>
      _offset += read;
 80a1e50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1e52:	442b      	add	r3, r5
 80a1e54:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a1e56:	e001      	b.n	80a1e5c <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a1e58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a1e5c:	4628      	mov	r0, r5
 80a1e5e:	bd70      	pop	{r4, r5, r6, pc}

080a1e60 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e62:	4604      	mov	r4, r0
 80a1e64:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1e66:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1e68:	460d      	mov	r5, r1
 80a1e6a:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1e6c:	f7ff fd4c 	bl	80a1908 <_ZN5spark12NetworkClass4fromEm>
 80a1e70:	6803      	ldr	r3, [r0, #0]
 80a1e72:	68db      	ldr	r3, [r3, #12]
 80a1e74:	4798      	blx	r3
 80a1e76:	b310      	cbz	r0, 80a1ebe <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1e78:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1e7a:	f7ff fa95 	bl	80a13a8 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1e7e:	4287      	cmp	r7, r0
 80a1e80:	d01d      	beq.n	80a1ebe <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1e82:	b1e5      	cbz	r5, 80a1ebe <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1e84:	ab08      	add	r3, sp, #32
 80a1e86:	2210      	movs	r2, #16
 80a1e88:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a1e8c:	9301      	str	r3, [sp, #4]
 80a1e8e:	eb0d 0302 	add.w	r3, sp, r2
 80a1e92:	9300      	str	r3, [sp, #0]
 80a1e94:	4629      	mov	r1, r5
 80a1e96:	2300      	movs	r3, #0
 80a1e98:	4632      	mov	r2, r6
 80a1e9a:	6960      	ldr	r0, [r4, #20]
 80a1e9c:	f7ff fa6c 	bl	80a1378 <socket_receivefrom>
        if (ret >= 0)
 80a1ea0:	1e05      	subs	r5, r0, #0
 80a1ea2:	db0e      	blt.n	80a1ec2 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1ea4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1ea8:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1eac:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1eae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1eb2:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1eb4:	f104 001c 	add.w	r0, r4, #28
 80a1eb8:	f7ff fcb6 	bl	80a1828 <_ZN9IPAddressaSEPKh>
 80a1ebc:	e001      	b.n	80a1ec2 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1ebe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1ec2:	4628      	mov	r0, r5
 80a1ec4:	b009      	add	sp, #36	; 0x24
 80a1ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1ec8 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ecc:	4606      	mov	r6, r0
 80a1ece:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1ed0:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1ed2:	460d      	mov	r5, r1
 80a1ed4:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1ed6:	f7ff fd17 	bl	80a1908 <_ZN5spark12NetworkClass4fromEm>
 80a1eda:	6803      	ldr	r3, [r0, #0]
 80a1edc:	68db      	ldr	r3, [r3, #12]
 80a1ede:	4798      	blx	r3
 80a1ee0:	b1f8      	cbz	r0, 80a1f22 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1ee2:	4628      	mov	r0, r5
 80a1ee4:	f001 fc78 	bl	80a37d8 <strlen>
 80a1ee8:	2400      	movs	r4, #0
 80a1eea:	b281      	uxth	r1, r0
 80a1eec:	9400      	str	r4, [sp, #0]
 80a1eee:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1ef0:	aa03      	add	r2, sp, #12
 80a1ef2:	4628      	mov	r0, r5
 80a1ef4:	f7ff fb20 	bl	80a1538 <inet_gethostbyname>
 80a1ef8:	b990      	cbnz	r0, 80a1f20 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a1efa:	a903      	add	r1, sp, #12
 80a1efc:	a808      	add	r0, sp, #32
 80a1efe:	f7ff fc5f 	bl	80a17c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1f02:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1f04:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1f06:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1f08:	4b07      	ldr	r3, [pc, #28]	; (80a1f28 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a1f0a:	ad09      	add	r5, sp, #36	; 0x24
 80a1f0c:	930e      	str	r3, [sp, #56]	; 0x38
 80a1f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1f12:	682b      	ldr	r3, [r5, #0]
 80a1f14:	4642      	mov	r2, r8
 80a1f16:	7023      	strb	r3, [r4, #0]
 80a1f18:	a90e      	add	r1, sp, #56	; 0x38
 80a1f1a:	4630      	mov	r0, r6
 80a1f1c:	47b8      	blx	r7
 80a1f1e:	e000      	b.n	80a1f22 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1f20:	4620      	mov	r0, r4
}
 80a1f22:	b014      	add	sp, #80	; 0x50
 80a1f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1f28:	080a3994 	.word	0x080a3994

080a1f2c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1f2c:	b570      	push	{r4, r5, r6, lr}
 80a1f2e:	4604      	mov	r4, r0
 80a1f30:	4606      	mov	r6, r0
 80a1f32:	4b05      	ldr	r3, [pc, #20]	; (80a1f48 <_ZN3UDP8remoteIPEv+0x1c>)
 80a1f34:	f101 0520 	add.w	r5, r1, #32
 80a1f38:	f844 3b04 	str.w	r3, [r4], #4
 80a1f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1f40:	682b      	ldr	r3, [r5, #0]
 80a1f42:	4630      	mov	r0, r6
 80a1f44:	7023      	strb	r3, [r4, #0]
 80a1f46:	bd70      	pop	{r4, r5, r6, pc}
 80a1f48:	080a3994 	.word	0x080a3994

080a1f4c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f4e:	4694      	mov	ip, r2
 80a1f50:	468e      	mov	lr, r1
 80a1f52:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1f54:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1f56:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1f58:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a1f5a:	4a09      	ldr	r2, [pc, #36]	; (80a1f80 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a1f5c:	ac03      	add	r4, sp, #12
 80a1f5e:	1d1d      	adds	r5, r3, #4
 80a1f60:	9202      	str	r2, [sp, #8]
 80a1f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1f66:	682b      	ldr	r3, [r5, #0]
 80a1f68:	4662      	mov	r2, ip
 80a1f6a:	7023      	strb	r3, [r4, #0]
 80a1f6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a1f70:	4671      	mov	r1, lr
 80a1f72:	9300      	str	r3, [sp, #0]
 80a1f74:	4630      	mov	r0, r6
 80a1f76:	ab02      	add	r3, sp, #8
 80a1f78:	47b8      	blx	r7
    }
 80a1f7a:	b009      	add	sp, #36	; 0x24
 80a1f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f7e:	bf00      	nop
 80a1f80:	080a3994 	.word	0x080a3994

080a1f84 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f86:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1f88:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1f8a:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1f8c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1f8e:	4b0d      	ldr	r3, [pc, #52]	; (80a1fc4 <_ZN3UDP9endPacketEv+0x40>)
 80a1f90:	ad03      	add	r5, sp, #12
 80a1f92:	f100 0620 	add.w	r6, r0, #32
 80a1f96:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a1f9a:	9302      	str	r3, [sp, #8]
 80a1f9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1fa0:	6833      	ldr	r3, [r6, #0]
 80a1fa2:	4672      	mov	r2, lr
 80a1fa4:	702b      	strb	r3, [r5, #0]
 80a1fa6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1fa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1faa:	9300      	str	r3, [sp, #0]
 80a1fac:	4620      	mov	r0, r4
 80a1fae:	ab02      	add	r3, sp, #8
 80a1fb0:	47b8      	blx	r7
 80a1fb2:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1fb4:	6823      	ldr	r3, [r4, #0]
 80a1fb6:	4620      	mov	r0, r4
 80a1fb8:	69db      	ldr	r3, [r3, #28]
 80a1fba:	4798      	blx	r3
    return result;
}
 80a1fbc:	4628      	mov	r0, r5
 80a1fbe:	b009      	add	sp, #36	; 0x24
 80a1fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1fc2:	bf00      	nop
 80a1fc4:	080a3994 	.word	0x080a3994

080a1fc8 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1fc8:	b538      	push	{r3, r4, r5, lr}
 80a1fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fce:	6083      	str	r3, [r0, #8]
 80a1fd0:	4b0b      	ldr	r3, [pc, #44]	; (80a2000 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1fd2:	2500      	movs	r5, #0
 80a1fd4:	f103 0208 	add.w	r2, r3, #8
 80a1fd8:	336c      	adds	r3, #108	; 0x6c
 80a1fda:	6002      	str	r2, [r0, #0]
 80a1fdc:	6103      	str	r3, [r0, #16]
 80a1fde:	6045      	str	r5, [r0, #4]
 80a1fe0:	4604      	mov	r4, r0
 80a1fe2:	f7ff f9e1 	bl	80a13a8 <socket_handle_invalid>
 80a1fe6:	6160      	str	r0, [r4, #20]
 80a1fe8:	f104 001c 	add.w	r0, r4, #28
 80a1fec:	f7ff fbda 	bl	80a17a4 <_ZN9IPAddressC1Ev>
 80a1ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1ff4:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1ff6:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1ff8:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1ffa:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	bd38      	pop	{r3, r4, r5, pc}
 80a2000:	080a3afc 	.word	0x080a3afc

080a2004 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a2004:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a2006:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a200a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a200c:	b123      	cbz	r3, 80a2018 <_ZN3UDP13releaseBufferEv+0x14>
 80a200e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a2010:	b110      	cbz	r0, 80a2018 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a2012:	2101      	movs	r1, #1
 80a2014:	f000 fb57 	bl	80a26c6 <_ZdlPvj>
    }
    _buffer = NULL;
 80a2018:	2300      	movs	r3, #0
 80a201a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a201c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a2020:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2022:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2024:	8723      	strh	r3, [r4, #56]	; 0x38
 80a2026:	bd10      	pop	{r4, pc}

080a2028 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a2028:	b570      	push	{r4, r5, r6, lr}
 80a202a:	4604      	mov	r4, r0
 80a202c:	4616      	mov	r6, r2
 80a202e:	460d      	mov	r5, r1
    releaseBuffer();
 80a2030:	f7ff ffe8 	bl	80a2004 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a2034:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a2036:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a2038:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a203a:	b93e      	cbnz	r6, 80a204c <_ZN3UDP9setBufferEjPh+0x24>
 80a203c:	b135      	cbz	r5, 80a204c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a203e:	4628      	mov	r0, r5
 80a2040:	f7fe f82b 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a2044:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a2046:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a2048:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a204c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a204e:	b103      	cbz	r3, 80a2052 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a2050:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a2052:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a2054:	3000      	adds	r0, #0
 80a2056:	bf18      	it	ne
 80a2058:	2001      	movne	r0, #1
 80a205a:	bd70      	pop	{r4, r5, r6, pc}

080a205c <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a205e:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2060:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2062:	4605      	mov	r5, r0
 80a2064:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2066:	b91a      	cbnz	r2, 80a2070 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2068:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a206a:	b109      	cbz	r1, 80a2070 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a206c:	f7ff ffdc 	bl	80a2028 <_ZN3UDP9setBufferEjPh>
 80a2070:	f105 0620 	add.w	r6, r5, #32
 80a2074:	3404      	adds	r4, #4
 80a2076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2078:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a207a:	6823      	ldr	r3, [r4, #0]
 80a207c:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a207e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a2080:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2082:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2084:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2086:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a208a <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a208a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a208c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a208e:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a2090:	b91a      	cbnz	r2, 80a209a <_ZN3UDP11parsePacketEm+0x10>
 80a2092:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2094:	b109      	cbz	r1, 80a209a <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a2096:	f7ff ffc7 	bl	80a2028 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a209a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a209c:	2300      	movs	r3, #0
 80a209e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a20a0:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a20a2:	b141      	cbz	r1, 80a20b6 <_ZN3UDP11parsePacketEm+0x2c>
 80a20a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a20a6:	b132      	cbz	r2, 80a20b6 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a20a8:	6820      	ldr	r0, [r4, #0]
 80a20aa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a20ac:	4620      	mov	r0, r4
 80a20ae:	47a8      	blx	r5
        if (result>0) {
 80a20b0:	2800      	cmp	r0, #0
            _total = result;
 80a20b2:	bfc8      	it	gt
 80a20b4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a20b6:	6823      	ldr	r3, [r4, #0]
 80a20b8:	4620      	mov	r0, r4
}
 80a20ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a20be:	691b      	ldr	r3, [r3, #16]
 80a20c0:	4718      	bx	r3

080a20c2 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a20c2:	4770      	bx	lr

080a20c4 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a20c4:	7441      	strb	r1, [r0, #17]
 80a20c6:	4770      	bx	lr

080a20c8 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a20c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a20ca:	7c00      	ldrb	r0, [r0, #16]
 80a20cc:	f7ff f9ec 	bl	80a14a8 <HAL_USART_Available_Data_For_Write>
}
 80a20d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a20d4:	bd08      	pop	{r3, pc}

080a20d6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a20d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a20d8:	7c00      	ldrb	r0, [r0, #16]
 80a20da:	f7ff f9bd 	bl	80a1458 <HAL_USART_Available_Data>
}
 80a20de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a20e2:	bd08      	pop	{r3, pc}

080a20e4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a20e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a20e6:	7c00      	ldrb	r0, [r0, #16]
 80a20e8:	f7ff f9c6 	bl	80a1478 <HAL_USART_Peek_Data>
}
 80a20ec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a20f0:	bf28      	it	cs
 80a20f2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a20f6:	bd08      	pop	{r3, pc}

080a20f8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a20f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a20fa:	7c00      	ldrb	r0, [r0, #16]
 80a20fc:	f7ff f9b4 	bl	80a1468 <HAL_USART_Read_Data>
}
 80a2100:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2104:	bf28      	it	cs
 80a2106:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a210a:	bd08      	pop	{r3, pc}

080a210c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a210c:	7c00      	ldrb	r0, [r0, #16]
 80a210e:	f7ff b9bb 	b.w	80a1488 <HAL_USART_Flush_Data>

080a2112 <_ZN11USARTSerialD0Ev>:
 80a2112:	b510      	push	{r4, lr}
 80a2114:	4604      	mov	r4, r0
 80a2116:	2114      	movs	r1, #20
 80a2118:	f000 fad5 	bl	80a26c6 <_ZdlPvj>
 80a211c:	4620      	mov	r0, r4
 80a211e:	bd10      	pop	{r4, pc}

080a2120 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2120:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2122:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2124:	4604      	mov	r4, r0
 80a2126:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2128:	b925      	cbnz	r5, 80a2134 <_ZN11USARTSerial5writeEh+0x14>
 80a212a:	7c00      	ldrb	r0, [r0, #16]
 80a212c:	f7ff f9bc 	bl	80a14a8 <HAL_USART_Available_Data_For_Write>
 80a2130:	2800      	cmp	r0, #0
 80a2132:	dd05      	ble.n	80a2140 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2134:	4631      	mov	r1, r6
 80a2136:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a213c:	f7ff b984 	b.w	80a1448 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2140:	4628      	mov	r0, r5
 80a2142:	bd70      	pop	{r4, r5, r6, pc}

080a2144 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2144:	b510      	push	{r4, lr}
 80a2146:	4604      	mov	r4, r0
 80a2148:	4608      	mov	r0, r1
 80a214a:	4611      	mov	r1, r2
 80a214c:	2200      	movs	r2, #0
 80a214e:	6062      	str	r2, [r4, #4]
 80a2150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2154:	60a2      	str	r2, [r4, #8]
 80a2156:	4a05      	ldr	r2, [pc, #20]	; (80a216c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2158:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a215a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a215c:	2201      	movs	r2, #1
 80a215e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2160:	461a      	mov	r2, r3
 80a2162:	f7ff f969 	bl	80a1438 <HAL_USART_Init>
}
 80a2166:	4620      	mov	r0, r4
 80a2168:	bd10      	pop	{r4, pc}
 80a216a:	bf00      	nop
 80a216c:	080a3b74 	.word	0x080a3b74

080a2170 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2170:	7c00      	ldrb	r0, [r0, #16]
 80a2172:	f7ff b991 	b.w	80a1498 <HAL_USART_Is_Enabled>
	...

080a2178 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2178:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a217a:	4d0c      	ldr	r5, [pc, #48]	; (80a21ac <_Z22__fetch_global_Serial1v+0x34>)
 80a217c:	6829      	ldr	r1, [r5, #0]
 80a217e:	f011 0401 	ands.w	r4, r1, #1
 80a2182:	d111      	bne.n	80a21a8 <_Z22__fetch_global_Serial1v+0x30>
 80a2184:	4628      	mov	r0, r5
 80a2186:	f7fd ff8c 	bl	80a00a2 <__cxa_guard_acquire>
 80a218a:	b168      	cbz	r0, 80a21a8 <_Z22__fetch_global_Serial1v+0x30>
 80a218c:	4a08      	ldr	r2, [pc, #32]	; (80a21b0 <_Z22__fetch_global_Serial1v+0x38>)
 80a218e:	4621      	mov	r1, r4
 80a2190:	4b08      	ldr	r3, [pc, #32]	; (80a21b4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2192:	4809      	ldr	r0, [pc, #36]	; (80a21b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a2194:	f7ff ffd6 	bl	80a2144 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2198:	4628      	mov	r0, r5
 80a219a:	f7fd ff87 	bl	80a00ac <__cxa_guard_release>
 80a219e:	4a07      	ldr	r2, [pc, #28]	; (80a21bc <_Z22__fetch_global_Serial1v+0x44>)
 80a21a0:	4907      	ldr	r1, [pc, #28]	; (80a21c0 <_Z22__fetch_global_Serial1v+0x48>)
 80a21a2:	4805      	ldr	r0, [pc, #20]	; (80a21b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a21a4:	f000 fa8a 	bl	80a26bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a21a8:	4803      	ldr	r0, [pc, #12]	; (80a21b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a21aa:	bd38      	pop	{r3, r4, r5, pc}
 80a21ac:	20000270 	.word	0x20000270
 80a21b0:	20000274 	.word	0x20000274
 80a21b4:	200001ec 	.word	0x200001ec
 80a21b8:	200001d8 	.word	0x200001d8
 80a21bc:	20000080 	.word	0x20000080
 80a21c0:	080a20c3 	.word	0x080a20c3

080a21c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a21c4:	7441      	strb	r1, [r0, #17]
 80a21c6:	4770      	bx	lr

080a21c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a21c8:	4770      	bx	lr

080a21ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a21ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a21cc:	2100      	movs	r1, #0
 80a21ce:	7c00      	ldrb	r0, [r0, #16]
 80a21d0:	f7ff f992 	bl	80a14f8 <HAL_USB_USART_Receive_Data>
}
 80a21d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21d8:	bf28      	it	cs
 80a21da:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a21de:	bd08      	pop	{r3, pc}

080a21e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a21e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a21e2:	2101      	movs	r1, #1
 80a21e4:	7c00      	ldrb	r0, [r0, #16]
 80a21e6:	f7ff f987 	bl	80a14f8 <HAL_USB_USART_Receive_Data>
}
 80a21ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21ee:	bf28      	it	cs
 80a21f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a21f4:	bd08      	pop	{r3, pc}

080a21f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a21f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a21f8:	7c00      	ldrb	r0, [r0, #16]
 80a21fa:	f7ff f975 	bl	80a14e8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a21fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2202:	bd08      	pop	{r3, pc}

080a2204 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2204:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2206:	7c00      	ldrb	r0, [r0, #16]
 80a2208:	f7ff f966 	bl	80a14d8 <HAL_USB_USART_Available_Data>
}
 80a220c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2210:	bd08      	pop	{r3, pc}

080a2212 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2212:	7c00      	ldrb	r0, [r0, #16]
 80a2214:	f7ff b980 	b.w	80a1518 <HAL_USB_USART_Flush_Data>

080a2218 <_ZN9USBSerialD0Ev>:
 80a2218:	b510      	push	{r4, lr}
 80a221a:	4604      	mov	r4, r0
 80a221c:	2114      	movs	r1, #20
 80a221e:	f000 fa52 	bl	80a26c6 <_ZdlPvj>
 80a2222:	4620      	mov	r0, r4
 80a2224:	bd10      	pop	{r4, pc}

080a2226 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2226:	b538      	push	{r3, r4, r5, lr}
 80a2228:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a222a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a222c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a222e:	f7ff f95b 	bl	80a14e8 <HAL_USB_USART_Available_Data_For_Write>
 80a2232:	2800      	cmp	r0, #0
 80a2234:	dc01      	bgt.n	80a223a <_ZN9USBSerial5writeEh+0x14>
 80a2236:	7c60      	ldrb	r0, [r4, #17]
 80a2238:	b128      	cbz	r0, 80a2246 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a223a:	4629      	mov	r1, r5
 80a223c:	7c20      	ldrb	r0, [r4, #16]
 80a223e:	f7ff f963 	bl	80a1508 <HAL_USB_USART_Send_Data>
 80a2242:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2246:	bd38      	pop	{r3, r4, r5, pc}

080a2248 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2248:	b510      	push	{r4, lr}
 80a224a:	4604      	mov	r4, r0
 80a224c:	2300      	movs	r3, #0
 80a224e:	6063      	str	r3, [r4, #4]
 80a2250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2254:	60a3      	str	r3, [r4, #8]
 80a2256:	4b05      	ldr	r3, [pc, #20]	; (80a226c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2258:	4608      	mov	r0, r1
 80a225a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a225c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a225e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2260:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2262:	4611      	mov	r1, r2
 80a2264:	f7ff f928 	bl	80a14b8 <HAL_USB_USART_Init>
}
 80a2268:	4620      	mov	r0, r4
 80a226a:	bd10      	pop	{r4, pc}
 80a226c:	080a3ba4 	.word	0x080a3ba4

080a2270 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2270:	2200      	movs	r2, #0
 80a2272:	7c00      	ldrb	r0, [r0, #16]
 80a2274:	f7ff b928 	b.w	80a14c8 <HAL_USB_USART_Begin>

080a2278 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2278:	7c00      	ldrb	r0, [r0, #16]
 80a227a:	f7ff b955 	b.w	80a1528 <HAL_USB_USART_Is_Enabled>

080a227e <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a227e:	f7ff bffb 	b.w	80a2278 <_ZN9USBSerial9isEnabledEv>
	...

080a2284 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2284:	b510      	push	{r4, lr}
 80a2286:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2288:	2214      	movs	r2, #20
 80a228a:	2100      	movs	r1, #0
 80a228c:	f001 fa6b 	bl	80a3766 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2290:	4b05      	ldr	r3, [pc, #20]	; (80a22a8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2292:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2294:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2296:	4b05      	ldr	r3, [pc, #20]	; (80a22ac <_Z19acquireSerialBufferv+0x28>)
 80a2298:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a229a:	f240 1301 	movw	r3, #257	; 0x101
 80a229e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a22a0:	2381      	movs	r3, #129	; 0x81
 80a22a2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a22a4:	bd10      	pop	{r4, pc}
 80a22a6:	bf00      	nop
 80a22a8:	2000037d 	.word	0x2000037d
 80a22ac:	200002fc 	.word	0x200002fc

080a22b0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a22b0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22b2:	4d0e      	ldr	r5, [pc, #56]	; (80a22ec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a22b4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a22b6:	a801      	add	r0, sp, #4
 80a22b8:	f7ff ffe4 	bl	80a2284 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22bc:	6829      	ldr	r1, [r5, #0]
 80a22be:	f011 0401 	ands.w	r4, r1, #1
 80a22c2:	d110      	bne.n	80a22e6 <_Z16_fetch_usbserialv+0x36>
 80a22c4:	4628      	mov	r0, r5
 80a22c6:	f7fd feec 	bl	80a00a2 <__cxa_guard_acquire>
 80a22ca:	b160      	cbz	r0, 80a22e6 <_Z16_fetch_usbserialv+0x36>
 80a22cc:	aa01      	add	r2, sp, #4
 80a22ce:	4621      	mov	r1, r4
 80a22d0:	4807      	ldr	r0, [pc, #28]	; (80a22f0 <_Z16_fetch_usbserialv+0x40>)
 80a22d2:	f7ff ffb9 	bl	80a2248 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22d6:	4628      	mov	r0, r5
 80a22d8:	f7fd fee8 	bl	80a00ac <__cxa_guard_release>
 80a22dc:	4a05      	ldr	r2, [pc, #20]	; (80a22f4 <_Z16_fetch_usbserialv+0x44>)
 80a22de:	4906      	ldr	r1, [pc, #24]	; (80a22f8 <_Z16_fetch_usbserialv+0x48>)
 80a22e0:	4803      	ldr	r0, [pc, #12]	; (80a22f0 <_Z16_fetch_usbserialv+0x40>)
 80a22e2:	f000 f9eb 	bl	80a26bc <__aeabi_atexit>
	return _usbserial;
}
 80a22e6:	4802      	ldr	r0, [pc, #8]	; (80a22f0 <_Z16_fetch_usbserialv+0x40>)
 80a22e8:	b007      	add	sp, #28
 80a22ea:	bd30      	pop	{r4, r5, pc}
 80a22ec:	200002f8 	.word	0x200002f8
 80a22f0:	20000480 	.word	0x20000480
 80a22f4:	20000080 	.word	0x20000080
 80a22f8:	080a21c9 	.word	0x080a21c9

080a22fc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a22fc:	b510      	push	{r4, lr}
 80a22fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2300:	2214      	movs	r2, #20
 80a2302:	2100      	movs	r1, #0
 80a2304:	f001 fa2f 	bl	80a3766 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2308:	4b05      	ldr	r3, [pc, #20]	; (80a2320 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a230a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a230c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a230e:	4b05      	ldr	r3, [pc, #20]	; (80a2324 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2310:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2312:	f240 1301 	movw	r3, #257	; 0x101
 80a2316:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2318:	2381      	movs	r3, #129	; 0x81
 80a231a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a231c:	bd10      	pop	{r4, pc}
 80a231e:	bf00      	nop
 80a2320:	20000530 	.word	0x20000530
 80a2324:	20000498 	.word	0x20000498

080a2328 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2328:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a232a:	4c0e      	ldr	r4, [pc, #56]	; (80a2364 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a232c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a232e:	a801      	add	r0, sp, #4
 80a2330:	f7ff ffe4 	bl	80a22fc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2334:	6823      	ldr	r3, [r4, #0]
 80a2336:	07db      	lsls	r3, r3, #31
 80a2338:	d410      	bmi.n	80a235c <_Z17_fetch_usbserial1v+0x34>
 80a233a:	4620      	mov	r0, r4
 80a233c:	f7fd feb1 	bl	80a00a2 <__cxa_guard_acquire>
 80a2340:	b160      	cbz	r0, 80a235c <_Z17_fetch_usbserial1v+0x34>
 80a2342:	aa01      	add	r2, sp, #4
 80a2344:	2101      	movs	r1, #1
 80a2346:	4808      	ldr	r0, [pc, #32]	; (80a2368 <_Z17_fetch_usbserial1v+0x40>)
 80a2348:	f7ff ff7e 	bl	80a2248 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a234c:	4620      	mov	r0, r4
 80a234e:	f7fd fead 	bl	80a00ac <__cxa_guard_release>
 80a2352:	4a06      	ldr	r2, [pc, #24]	; (80a236c <_Z17_fetch_usbserial1v+0x44>)
 80a2354:	4906      	ldr	r1, [pc, #24]	; (80a2370 <_Z17_fetch_usbserial1v+0x48>)
 80a2356:	4804      	ldr	r0, [pc, #16]	; (80a2368 <_Z17_fetch_usbserial1v+0x40>)
 80a2358:	f000 f9b0 	bl	80a26bc <__aeabi_atexit>
  return _usbserial1;
}
 80a235c:	4802      	ldr	r0, [pc, #8]	; (80a2368 <_Z17_fetch_usbserial1v+0x40>)
 80a235e:	b006      	add	sp, #24
 80a2360:	bd10      	pop	{r4, pc}
 80a2362:	bf00      	nop
 80a2364:	20000494 	.word	0x20000494
 80a2368:	2000051c 	.word	0x2000051c
 80a236c:	20000080 	.word	0x20000080
 80a2370:	080a21c9 	.word	0x080a21c9

080a2374 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2374:	2200      	movs	r2, #0
 80a2376:	4611      	mov	r1, r2
 80a2378:	6840      	ldr	r0, [r0, #4]
 80a237a:	f7ff b931 	b.w	80a15e0 <network_ready>

080a237e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a237e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2380:	4616      	mov	r6, r2
 80a2382:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2384:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2386:	460f      	mov	r7, r1
 80a2388:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a238a:	2100      	movs	r1, #0
 80a238c:	a803      	add	r0, sp, #12
 80a238e:	f001 f9ea 	bl	80a3766 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2392:	4630      	mov	r0, r6
 80a2394:	f001 fa20 	bl	80a37d8 <strlen>
 80a2398:	2500      	movs	r5, #0
 80a239a:	9500      	str	r5, [sp, #0]
 80a239c:	b281      	uxth	r1, r0
 80a239e:	687b      	ldr	r3, [r7, #4]
 80a23a0:	aa03      	add	r2, sp, #12
 80a23a2:	4630      	mov	r0, r6
 80a23a4:	f7ff f8c8 	bl	80a1538 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a23a8:	b120      	cbz	r0, 80a23b4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a23aa:	4629      	mov	r1, r5
 80a23ac:	4620      	mov	r0, r4
 80a23ae:	f7ff fa19 	bl	80a17e4 <_ZN9IPAddressC1Em>
 80a23b2:	e003      	b.n	80a23bc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a23b4:	a903      	add	r1, sp, #12
 80a23b6:	4620      	mov	r0, r4
 80a23b8:	f7ff fa02 	bl	80a17c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a23bc:	4620      	mov	r0, r4
 80a23be:	b009      	add	sp, #36	; 0x24
 80a23c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a23c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a23c2:	2200      	movs	r2, #0
 80a23c4:	4611      	mov	r1, r2
 80a23c6:	6840      	ldr	r0, [r0, #4]
 80a23c8:	f7ff b92a 	b.w	80a1620 <network_listening>

080a23cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a23cc:	2200      	movs	r2, #0
 80a23ce:	4611      	mov	r1, r2
 80a23d0:	6840      	ldr	r0, [r0, #4]
 80a23d2:	f7ff b935 	b.w	80a1640 <network_get_listen_timeout>

080a23d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a23d6:	2200      	movs	r2, #0
 80a23d8:	6840      	ldr	r0, [r0, #4]
 80a23da:	f7ff b929 	b.w	80a1630 <network_set_listen_timeout>

080a23de <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a23de:	2200      	movs	r2, #0
 80a23e0:	f081 0101 	eor.w	r1, r1, #1
 80a23e4:	6840      	ldr	r0, [r0, #4]
 80a23e6:	f7ff b913 	b.w	80a1610 <network_listen>

080a23ea <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a23ea:	2300      	movs	r3, #0
 80a23ec:	461a      	mov	r2, r3
 80a23ee:	4619      	mov	r1, r3
 80a23f0:	6840      	ldr	r0, [r0, #4]
 80a23f2:	f7ff b905 	b.w	80a1600 <network_off>

080a23f6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a23f6:	2300      	movs	r3, #0
 80a23f8:	461a      	mov	r2, r3
 80a23fa:	4619      	mov	r1, r3
 80a23fc:	6840      	ldr	r0, [r0, #4]
 80a23fe:	f7ff b8f7 	b.w	80a15f0 <network_on>

080a2402 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2402:	2200      	movs	r2, #0
 80a2404:	4611      	mov	r1, r2
 80a2406:	6840      	ldr	r0, [r0, #4]
 80a2408:	f7ff b8da 	b.w	80a15c0 <network_connecting>

080a240c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a240c:	2200      	movs	r2, #0
 80a240e:	2102      	movs	r1, #2
 80a2410:	6840      	ldr	r0, [r0, #4]
 80a2412:	f7ff b8dd 	b.w	80a15d0 <network_disconnect>

080a2416 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2416:	2300      	movs	r3, #0
 80a2418:	461a      	mov	r2, r3
 80a241a:	6840      	ldr	r0, [r0, #4]
 80a241c:	f7ff b8c8 	b.w	80a15b0 <network_connect>

080a2420 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2420:	4b02      	ldr	r3, [pc, #8]	; (80a242c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2422:	2204      	movs	r2, #4
 80a2424:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2426:	4a02      	ldr	r2, [pc, #8]	; (80a2430 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2428:	601a      	str	r2, [r3, #0]
 80a242a:	4770      	bx	lr
 80a242c:	20000634 	.word	0x20000634
 80a2430:	080a3bd4 	.word	0x080a3bd4

080a2434 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2434:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2436:	4b14      	ldr	r3, [pc, #80]	; (80a2488 <serialEventRun+0x54>)
 80a2438:	b133      	cbz	r3, 80a2448 <serialEventRun+0x14>
 80a243a:	f7ff ff39 	bl	80a22b0 <_Z16_fetch_usbserialv>
 80a243e:	6803      	ldr	r3, [r0, #0]
 80a2440:	691b      	ldr	r3, [r3, #16]
 80a2442:	4798      	blx	r3
 80a2444:	2800      	cmp	r0, #0
 80a2446:	dc16      	bgt.n	80a2476 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2448:	4b10      	ldr	r3, [pc, #64]	; (80a248c <serialEventRun+0x58>)
 80a244a:	b133      	cbz	r3, 80a245a <serialEventRun+0x26>
 80a244c:	f7ff fe94 	bl	80a2178 <_Z22__fetch_global_Serial1v>
 80a2450:	6803      	ldr	r3, [r0, #0]
 80a2452:	691b      	ldr	r3, [r3, #16]
 80a2454:	4798      	blx	r3
 80a2456:	2800      	cmp	r0, #0
 80a2458:	dc10      	bgt.n	80a247c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a245a:	4b0d      	ldr	r3, [pc, #52]	; (80a2490 <serialEventRun+0x5c>)
 80a245c:	b10b      	cbz	r3, 80a2462 <serialEventRun+0x2e>
 80a245e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2462:	4b0c      	ldr	r3, [pc, #48]	; (80a2494 <serialEventRun+0x60>)
 80a2464:	b17b      	cbz	r3, 80a2486 <serialEventRun+0x52>
 80a2466:	f7ff ff5f 	bl	80a2328 <_Z17_fetch_usbserial1v>
 80a246a:	6803      	ldr	r3, [r0, #0]
 80a246c:	691b      	ldr	r3, [r3, #16]
 80a246e:	4798      	blx	r3
 80a2470:	2800      	cmp	r0, #0
 80a2472:	dc06      	bgt.n	80a2482 <serialEventRun+0x4e>
 80a2474:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2476:	f3af 8000 	nop.w
 80a247a:	e7e5      	b.n	80a2448 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a247c:	f3af 8000 	nop.w
 80a2480:	e7eb      	b.n	80a245a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2482:	f3af 8000 	nop.w
 80a2486:	bd08      	pop	{r3, pc}
	...

080a2498 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2498:	b508      	push	{r3, lr}
	serialEventRun();
 80a249a:	f7ff ffcb 	bl	80a2434 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a249e:	f7fe fed9 	bl	80a1254 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a24a2:	4b01      	ldr	r3, [pc, #4]	; (80a24a8 <_post_loop+0x10>)
 80a24a4:	6018      	str	r0, [r3, #0]
 80a24a6:	bd08      	pop	{r3, pc}
 80a24a8:	20000644 	.word	0x20000644

080a24ac <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a24ac:	4802      	ldr	r0, [pc, #8]	; (80a24b8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a24ae:	4a03      	ldr	r2, [pc, #12]	; (80a24bc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a24b0:	4903      	ldr	r1, [pc, #12]	; (80a24c0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a24b2:	1a12      	subs	r2, r2, r0
 80a24b4:	f001 b94c 	b.w	80a3750 <memcpy>
 80a24b8:	40024000 	.word	0x40024000
 80a24bc:	40024004 	.word	0x40024004
 80a24c0:	080a3cb0 	.word	0x080a3cb0

080a24c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a24c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a24c6:	2300      	movs	r3, #0
 80a24c8:	9300      	str	r3, [sp, #0]
 80a24ca:	461a      	mov	r2, r3
 80a24cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a24d0:	f7ff f854 	bl	80a157c <system_ctrl_set_result>
}
 80a24d4:	b003      	add	sp, #12
 80a24d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a24dc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a24dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a24de:	8843      	ldrh	r3, [r0, #2]
 80a24e0:	2b0a      	cmp	r3, #10
 80a24e2:	d008      	beq.n	80a24f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a24e4:	2b50      	cmp	r3, #80	; 0x50
 80a24e6:	d109      	bne.n	80a24fc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a24e8:	4b09      	ldr	r3, [pc, #36]	; (80a2510 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a24ea:	681b      	ldr	r3, [r3, #0]
 80a24ec:	b13b      	cbz	r3, 80a24fe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a24ee:	b003      	add	sp, #12
 80a24f0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a24f4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a24f6:	f7ff ffe5 	bl	80a24c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a24fa:	e006      	b.n	80a250a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a24fc:	2300      	movs	r3, #0
 80a24fe:	9300      	str	r3, [sp, #0]
 80a2500:	461a      	mov	r2, r3
 80a2502:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2506:	f7ff f839 	bl	80a157c <system_ctrl_set_result>
        break;
    }
}
 80a250a:	b003      	add	sp, #12
 80a250c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2510:	2000063c 	.word	0x2000063c

080a2514 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2514:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2516:	4c10      	ldr	r4, [pc, #64]	; (80a2558 <module_user_init_hook+0x44>)
 80a2518:	4d10      	ldr	r5, [pc, #64]	; (80a255c <module_user_init_hook+0x48>)
 80a251a:	6823      	ldr	r3, [r4, #0]
 80a251c:	42ab      	cmp	r3, r5
 80a251e:	4b10      	ldr	r3, [pc, #64]	; (80a2560 <module_user_init_hook+0x4c>)
 80a2520:	bf0c      	ite	eq
 80a2522:	2201      	moveq	r2, #1
 80a2524:	2200      	movne	r2, #0
 80a2526:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2528:	d002      	beq.n	80a2530 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a252a:	f7ff ffbf 	bl	80a24ac <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a252e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2530:	f7fe fe88 	bl	80a1244 <HAL_RNG_GetRandomNumber>
 80a2534:	4604      	mov	r4, r0
    srand(seed);
 80a2536:	f001 f91f 	bl	80a3778 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a253a:	4b0a      	ldr	r3, [pc, #40]	; (80a2564 <module_user_init_hook+0x50>)
 80a253c:	b113      	cbz	r3, 80a2544 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a253e:	4620      	mov	r0, r4
 80a2540:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2544:	2100      	movs	r1, #0
 80a2546:	4807      	ldr	r0, [pc, #28]	; (80a2564 <module_user_init_hook+0x50>)
 80a2548:	f7ff f822 	bl	80a1590 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a254c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2550:	2100      	movs	r1, #0
 80a2552:	4805      	ldr	r0, [pc, #20]	; (80a2568 <module_user_init_hook+0x54>)
 80a2554:	f7ff b808 	b.w	80a1568 <system_ctrl_set_app_request_handler>
 80a2558:	40024000 	.word	0x40024000
 80a255c:	9a271c1e 	.word	0x9a271c1e
 80a2560:	20000640 	.word	0x20000640
 80a2564:	00000000 	.word	0x00000000
 80a2568:	080a24dd 	.word	0x080a24dd

080a256c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a256c:	b510      	push	{r4, lr}
 80a256e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2570:	480f      	ldr	r0, [pc, #60]	; (80a25b0 <pinAvailable+0x44>)
 80a2572:	f7ff fafb 	bl	80a1b6c <_ZN8SPIClass9isEnabledEv>
 80a2576:	b128      	cbz	r0, 80a2584 <pinAvailable+0x18>
 80a2578:	f1a4 030d 	sub.w	r3, r4, #13
 80a257c:	2b02      	cmp	r3, #2
 80a257e:	d801      	bhi.n	80a2584 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2580:	2000      	movs	r0, #0
 80a2582:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2584:	f000 f840 	bl	80a2608 <_Z19__fetch_global_Wirev>
 80a2588:	f7ff f8ef 	bl	80a176a <_ZN7TwoWire9isEnabledEv>
 80a258c:	b108      	cbz	r0, 80a2592 <pinAvailable+0x26>
 80a258e:	2c01      	cmp	r4, #1
 80a2590:	d9f6      	bls.n	80a2580 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2592:	f7ff fdf1 	bl	80a2178 <_Z22__fetch_global_Serial1v>
 80a2596:	f7ff fdeb 	bl	80a2170 <_ZN11USARTSerial9isEnabledEv>
 80a259a:	b118      	cbz	r0, 80a25a4 <pinAvailable+0x38>
 80a259c:	f1a4 0312 	sub.w	r3, r4, #18
 80a25a0:	2b01      	cmp	r3, #1
 80a25a2:	d9ed      	bls.n	80a2580 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a25a4:	2c17      	cmp	r4, #23
 80a25a6:	bf8c      	ite	hi
 80a25a8:	2000      	movhi	r0, #0
 80a25aa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a25ac:	bd10      	pop	{r4, pc}
 80a25ae:	bf00      	nop
 80a25b0:	20000678 	.word	0x20000678

080a25b4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25b4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a25b6:	b538      	push	{r3, r4, r5, lr}
 80a25b8:	4604      	mov	r4, r0
 80a25ba:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25bc:	d80a      	bhi.n	80a25d4 <pinMode+0x20>
 80a25be:	29ff      	cmp	r1, #255	; 0xff
 80a25c0:	d008      	beq.n	80a25d4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a25c2:	f7ff ffd3 	bl	80a256c <pinAvailable>
 80a25c6:	b128      	cbz	r0, 80a25d4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25c8:	4629      	mov	r1, r5
 80a25ca:	4620      	mov	r0, r4
}
 80a25cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25d0:	f7fe be50 	b.w	80a1274 <HAL_Pin_Mode>
 80a25d4:	bd38      	pop	{r3, r4, r5, pc}

080a25d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a25d6:	b538      	push	{r3, r4, r5, lr}
 80a25d8:	4604      	mov	r4, r0
 80a25da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a25dc:	f7fe fe52 	bl	80a1284 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a25e0:	28ff      	cmp	r0, #255	; 0xff
 80a25e2:	d010      	beq.n	80a2606 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a25e4:	2806      	cmp	r0, #6
 80a25e6:	d804      	bhi.n	80a25f2 <digitalWrite+0x1c>
 80a25e8:	234d      	movs	r3, #77	; 0x4d
 80a25ea:	fa23 f000 	lsr.w	r0, r3, r0
 80a25ee:	07c3      	lsls	r3, r0, #31
 80a25f0:	d409      	bmi.n	80a2606 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a25f2:	4620      	mov	r0, r4
 80a25f4:	f7ff ffba 	bl	80a256c <pinAvailable>
 80a25f8:	b128      	cbz	r0, 80a2606 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a25fa:	4629      	mov	r1, r5
 80a25fc:	4620      	mov	r0, r4
}
 80a25fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2602:	f7fe be47 	b.w	80a1294 <HAL_GPIO_Write>
 80a2606:	bd38      	pop	{r3, r4, r5, pc}

080a2608 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2608:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a260a:	4d0b      	ldr	r5, [pc, #44]	; (80a2638 <_Z19__fetch_global_Wirev+0x30>)
 80a260c:	6829      	ldr	r1, [r5, #0]
 80a260e:	f011 0401 	ands.w	r4, r1, #1
 80a2612:	d10f      	bne.n	80a2634 <_Z19__fetch_global_Wirev+0x2c>
 80a2614:	4628      	mov	r0, r5
 80a2616:	f7fd fd44 	bl	80a00a2 <__cxa_guard_acquire>
 80a261a:	b158      	cbz	r0, 80a2634 <_Z19__fetch_global_Wirev+0x2c>
 80a261c:	4621      	mov	r1, r4
 80a261e:	4807      	ldr	r0, [pc, #28]	; (80a263c <_Z19__fetch_global_Wirev+0x34>)
 80a2620:	f7ff f874 	bl	80a170c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2624:	4628      	mov	r0, r5
 80a2626:	f7fd fd41 	bl	80a00ac <__cxa_guard_release>
 80a262a:	4a05      	ldr	r2, [pc, #20]	; (80a2640 <_Z19__fetch_global_Wirev+0x38>)
 80a262c:	4905      	ldr	r1, [pc, #20]	; (80a2644 <_Z19__fetch_global_Wirev+0x3c>)
 80a262e:	4803      	ldr	r0, [pc, #12]	; (80a263c <_Z19__fetch_global_Wirev+0x34>)
 80a2630:	f000 f844 	bl	80a26bc <__aeabi_atexit>
	return wire;
}
 80a2634:	4801      	ldr	r0, [pc, #4]	; (80a263c <_Z19__fetch_global_Wirev+0x34>)
 80a2636:	bd38      	pop	{r3, r4, r5, pc}
 80a2638:	20000648 	.word	0x20000648
 80a263c:	2000064c 	.word	0x2000064c
 80a2640:	20000080 	.word	0x20000080
 80a2644:	080a16b3 	.word	0x080a16b3

080a2648 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2648:	b513      	push	{r0, r1, r4, lr}
 80a264a:	4c08      	ldr	r4, [pc, #32]	; (80a266c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a264c:	2300      	movs	r3, #0
 80a264e:	461a      	mov	r2, r3
 80a2650:	4619      	mov	r1, r3
 80a2652:	9300      	str	r3, [sp, #0]
 80a2654:	4620      	mov	r0, r4
 80a2656:	f7ff f8db 	bl	80a1810 <_ZN9IPAddressC1Ehhhh>
 80a265a:	4620      	mov	r0, r4
 80a265c:	4a04      	ldr	r2, [pc, #16]	; (80a2670 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a265e:	4905      	ldr	r1, [pc, #20]	; (80a2674 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2660:	b002      	add	sp, #8
 80a2662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2666:	f000 b829 	b.w	80a26bc <__aeabi_atexit>
 80a266a:	bf00      	nop
 80a266c:	20000660 	.word	0x20000660
 80a2670:	20000080 	.word	0x20000080
 80a2674:	080a00b3 	.word	0x080a00b3

080a2678 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2678:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a267a:	4c0c      	ldr	r4, [pc, #48]	; (80a26ac <_GLOBAL__sub_I_SPI+0x34>)
 80a267c:	4e0c      	ldr	r6, [pc, #48]	; (80a26b0 <_GLOBAL__sub_I_SPI+0x38>)
 80a267e:	4d0d      	ldr	r5, [pc, #52]	; (80a26b4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2680:	2100      	movs	r1, #0
 80a2682:	4620      	mov	r0, r4
 80a2684:	f7ff f9f2 	bl	80a1a6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2688:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a268a:	4c0b      	ldr	r4, [pc, #44]	; (80a26b8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a268c:	4632      	mov	r2, r6
 80a268e:	4629      	mov	r1, r5
 80a2690:	f000 f814 	bl	80a26bc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2694:	2101      	movs	r1, #1
 80a2696:	4620      	mov	r0, r4
 80a2698:	f7ff f9e8 	bl	80a1a6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a269c:	4632      	mov	r2, r6
 80a269e:	4629      	mov	r1, r5
 80a26a0:	4620      	mov	r0, r4
 80a26a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a26a6:	f000 b809 	b.w	80a26bc <__aeabi_atexit>
 80a26aa:	bf00      	nop
 80a26ac:	20000678 	.word	0x20000678
 80a26b0:	20000080 	.word	0x20000080
 80a26b4:	080a1a5d 	.word	0x080a1a5d
 80a26b8:	20000688 	.word	0x20000688

080a26bc <__aeabi_atexit>:
 80a26bc:	460b      	mov	r3, r1
 80a26be:	4601      	mov	r1, r0
 80a26c0:	4618      	mov	r0, r3
 80a26c2:	f001 b837 	b.w	80a3734 <__cxa_atexit>

080a26c6 <_ZdlPvj>:
 80a26c6:	f7fd bcea 	b.w	80a009e <_ZdlPv>
	...

080a26cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a26cc:	4b24      	ldr	r3, [pc, #144]	; (80a2760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a26ce:	681a      	ldr	r2, [r3, #0]
 80a26d0:	07d0      	lsls	r0, r2, #31
 80a26d2:	bf5c      	itt	pl
 80a26d4:	2201      	movpl	r2, #1
 80a26d6:	601a      	strpl	r2, [r3, #0]
 80a26d8:	4b22      	ldr	r3, [pc, #136]	; (80a2764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a26da:	681a      	ldr	r2, [r3, #0]
 80a26dc:	07d1      	lsls	r1, r2, #31
 80a26de:	bf5c      	itt	pl
 80a26e0:	2201      	movpl	r2, #1
 80a26e2:	601a      	strpl	r2, [r3, #0]
 80a26e4:	4b20      	ldr	r3, [pc, #128]	; (80a2768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a26e6:	681a      	ldr	r2, [r3, #0]
 80a26e8:	07d2      	lsls	r2, r2, #31
 80a26ea:	bf5c      	itt	pl
 80a26ec:	2201      	movpl	r2, #1
 80a26ee:	601a      	strpl	r2, [r3, #0]
 80a26f0:	4b1e      	ldr	r3, [pc, #120]	; (80a276c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a26f2:	681a      	ldr	r2, [r3, #0]
 80a26f4:	07d0      	lsls	r0, r2, #31
 80a26f6:	bf5c      	itt	pl
 80a26f8:	2201      	movpl	r2, #1
 80a26fa:	601a      	strpl	r2, [r3, #0]
 80a26fc:	4b1c      	ldr	r3, [pc, #112]	; (80a2770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a26fe:	681a      	ldr	r2, [r3, #0]
 80a2700:	07d1      	lsls	r1, r2, #31
 80a2702:	bf5c      	itt	pl
 80a2704:	2201      	movpl	r2, #1
 80a2706:	601a      	strpl	r2, [r3, #0]
 80a2708:	4b1a      	ldr	r3, [pc, #104]	; (80a2774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a270a:	681a      	ldr	r2, [r3, #0]
 80a270c:	07d2      	lsls	r2, r2, #31
 80a270e:	bf5c      	itt	pl
 80a2710:	2201      	movpl	r2, #1
 80a2712:	601a      	strpl	r2, [r3, #0]
 80a2714:	4b18      	ldr	r3, [pc, #96]	; (80a2778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2716:	681a      	ldr	r2, [r3, #0]
 80a2718:	07d0      	lsls	r0, r2, #31
 80a271a:	bf5c      	itt	pl
 80a271c:	2201      	movpl	r2, #1
 80a271e:	601a      	strpl	r2, [r3, #0]
 80a2720:	4b16      	ldr	r3, [pc, #88]	; (80a277c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2722:	681a      	ldr	r2, [r3, #0]
 80a2724:	07d1      	lsls	r1, r2, #31
 80a2726:	bf5c      	itt	pl
 80a2728:	2201      	movpl	r2, #1
 80a272a:	601a      	strpl	r2, [r3, #0]
 80a272c:	4b14      	ldr	r3, [pc, #80]	; (80a2780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a272e:	681a      	ldr	r2, [r3, #0]
 80a2730:	07d2      	lsls	r2, r2, #31
 80a2732:	bf5c      	itt	pl
 80a2734:	2201      	movpl	r2, #1
 80a2736:	601a      	strpl	r2, [r3, #0]
 80a2738:	4b12      	ldr	r3, [pc, #72]	; (80a2784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a273a:	681a      	ldr	r2, [r3, #0]
 80a273c:	07d0      	lsls	r0, r2, #31
 80a273e:	bf5c      	itt	pl
 80a2740:	2201      	movpl	r2, #1
 80a2742:	601a      	strpl	r2, [r3, #0]
 80a2744:	4b10      	ldr	r3, [pc, #64]	; (80a2788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2746:	681a      	ldr	r2, [r3, #0]
 80a2748:	07d1      	lsls	r1, r2, #31
 80a274a:	bf5c      	itt	pl
 80a274c:	2201      	movpl	r2, #1
 80a274e:	601a      	strpl	r2, [r3, #0]
 80a2750:	4b0e      	ldr	r3, [pc, #56]	; (80a278c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2752:	681a      	ldr	r2, [r3, #0]
 80a2754:	07d2      	lsls	r2, r2, #31
 80a2756:	bf5c      	itt	pl
 80a2758:	2201      	movpl	r2, #1
 80a275a:	601a      	strpl	r2, [r3, #0]
 80a275c:	4770      	bx	lr
 80a275e:	bf00      	nop
 80a2760:	200006c4 	.word	0x200006c4
 80a2764:	200006c0 	.word	0x200006c0
 80a2768:	200006bc 	.word	0x200006bc
 80a276c:	200006b8 	.word	0x200006b8
 80a2770:	200006b4 	.word	0x200006b4
 80a2774:	200006b0 	.word	0x200006b0
 80a2778:	200006ac 	.word	0x200006ac
 80a277c:	200006a8 	.word	0x200006a8
 80a2780:	200006a4 	.word	0x200006a4
 80a2784:	200006a0 	.word	0x200006a0
 80a2788:	2000069c 	.word	0x2000069c
 80a278c:	20000698 	.word	0x20000698

080a2790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2790:	4b18      	ldr	r3, [pc, #96]	; (80a27f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2792:	681a      	ldr	r2, [r3, #0]
 80a2794:	07d1      	lsls	r1, r2, #31
 80a2796:	bf5c      	itt	pl
 80a2798:	2201      	movpl	r2, #1
 80a279a:	601a      	strpl	r2, [r3, #0]
 80a279c:	4b16      	ldr	r3, [pc, #88]	; (80a27f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a279e:	681a      	ldr	r2, [r3, #0]
 80a27a0:	07d2      	lsls	r2, r2, #31
 80a27a2:	bf5c      	itt	pl
 80a27a4:	2201      	movpl	r2, #1
 80a27a6:	601a      	strpl	r2, [r3, #0]
 80a27a8:	4b14      	ldr	r3, [pc, #80]	; (80a27fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a27aa:	681a      	ldr	r2, [r3, #0]
 80a27ac:	07d0      	lsls	r0, r2, #31
 80a27ae:	bf5c      	itt	pl
 80a27b0:	2201      	movpl	r2, #1
 80a27b2:	601a      	strpl	r2, [r3, #0]
 80a27b4:	4b12      	ldr	r3, [pc, #72]	; (80a2800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a27b6:	681a      	ldr	r2, [r3, #0]
 80a27b8:	07d1      	lsls	r1, r2, #31
 80a27ba:	bf5c      	itt	pl
 80a27bc:	2201      	movpl	r2, #1
 80a27be:	601a      	strpl	r2, [r3, #0]
 80a27c0:	4b10      	ldr	r3, [pc, #64]	; (80a2804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a27c2:	681a      	ldr	r2, [r3, #0]
 80a27c4:	07d2      	lsls	r2, r2, #31
 80a27c6:	bf5c      	itt	pl
 80a27c8:	2201      	movpl	r2, #1
 80a27ca:	601a      	strpl	r2, [r3, #0]
 80a27cc:	4b0e      	ldr	r3, [pc, #56]	; (80a2808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a27ce:	681a      	ldr	r2, [r3, #0]
 80a27d0:	07d0      	lsls	r0, r2, #31
 80a27d2:	bf5c      	itt	pl
 80a27d4:	2201      	movpl	r2, #1
 80a27d6:	601a      	strpl	r2, [r3, #0]
 80a27d8:	4b0c      	ldr	r3, [pc, #48]	; (80a280c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a27da:	681a      	ldr	r2, [r3, #0]
 80a27dc:	07d1      	lsls	r1, r2, #31
 80a27de:	bf5c      	itt	pl
 80a27e0:	2201      	movpl	r2, #1
 80a27e2:	601a      	strpl	r2, [r3, #0]
 80a27e4:	4b0a      	ldr	r3, [pc, #40]	; (80a2810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a27e6:	681a      	ldr	r2, [r3, #0]
 80a27e8:	07d2      	lsls	r2, r2, #31
 80a27ea:	bf5c      	itt	pl
 80a27ec:	2201      	movpl	r2, #1
 80a27ee:	601a      	strpl	r2, [r3, #0]
 80a27f0:	4770      	bx	lr
 80a27f2:	bf00      	nop
 80a27f4:	200006e4 	.word	0x200006e4
 80a27f8:	200006e0 	.word	0x200006e0
 80a27fc:	200006dc 	.word	0x200006dc
 80a2800:	200006d8 	.word	0x200006d8
 80a2804:	200006d4 	.word	0x200006d4
 80a2808:	200006d0 	.word	0x200006d0
 80a280c:	200006cc 	.word	0x200006cc
 80a2810:	200006c8 	.word	0x200006c8

080a2814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2814:	4b18      	ldr	r3, [pc, #96]	; (80a2878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2816:	681a      	ldr	r2, [r3, #0]
 80a2818:	07d1      	lsls	r1, r2, #31
 80a281a:	bf5c      	itt	pl
 80a281c:	2201      	movpl	r2, #1
 80a281e:	601a      	strpl	r2, [r3, #0]
 80a2820:	4b16      	ldr	r3, [pc, #88]	; (80a287c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2822:	681a      	ldr	r2, [r3, #0]
 80a2824:	07d2      	lsls	r2, r2, #31
 80a2826:	bf5c      	itt	pl
 80a2828:	2201      	movpl	r2, #1
 80a282a:	601a      	strpl	r2, [r3, #0]
 80a282c:	4b14      	ldr	r3, [pc, #80]	; (80a2880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a282e:	681a      	ldr	r2, [r3, #0]
 80a2830:	07d0      	lsls	r0, r2, #31
 80a2832:	bf5c      	itt	pl
 80a2834:	2201      	movpl	r2, #1
 80a2836:	601a      	strpl	r2, [r3, #0]
 80a2838:	4b12      	ldr	r3, [pc, #72]	; (80a2884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a283a:	681a      	ldr	r2, [r3, #0]
 80a283c:	07d1      	lsls	r1, r2, #31
 80a283e:	bf5c      	itt	pl
 80a2840:	2201      	movpl	r2, #1
 80a2842:	601a      	strpl	r2, [r3, #0]
 80a2844:	4b10      	ldr	r3, [pc, #64]	; (80a2888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2846:	681a      	ldr	r2, [r3, #0]
 80a2848:	07d2      	lsls	r2, r2, #31
 80a284a:	bf5c      	itt	pl
 80a284c:	2201      	movpl	r2, #1
 80a284e:	601a      	strpl	r2, [r3, #0]
 80a2850:	4b0e      	ldr	r3, [pc, #56]	; (80a288c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2852:	681a      	ldr	r2, [r3, #0]
 80a2854:	07d0      	lsls	r0, r2, #31
 80a2856:	bf5c      	itt	pl
 80a2858:	2201      	movpl	r2, #1
 80a285a:	601a      	strpl	r2, [r3, #0]
 80a285c:	4b0c      	ldr	r3, [pc, #48]	; (80a2890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a285e:	681a      	ldr	r2, [r3, #0]
 80a2860:	07d1      	lsls	r1, r2, #31
 80a2862:	bf5c      	itt	pl
 80a2864:	2201      	movpl	r2, #1
 80a2866:	601a      	strpl	r2, [r3, #0]
 80a2868:	4b0a      	ldr	r3, [pc, #40]	; (80a2894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a286a:	681a      	ldr	r2, [r3, #0]
 80a286c:	07d2      	lsls	r2, r2, #31
 80a286e:	bf5c      	itt	pl
 80a2870:	2201      	movpl	r2, #1
 80a2872:	601a      	strpl	r2, [r3, #0]
 80a2874:	4770      	bx	lr
 80a2876:	bf00      	nop
 80a2878:	20000704 	.word	0x20000704
 80a287c:	20000700 	.word	0x20000700
 80a2880:	200006fc 	.word	0x200006fc
 80a2884:	200006f8 	.word	0x200006f8
 80a2888:	200006f4 	.word	0x200006f4
 80a288c:	200006f0 	.word	0x200006f0
 80a2890:	200006ec 	.word	0x200006ec
 80a2894:	200006e8 	.word	0x200006e8

080a2898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2898:	4b24      	ldr	r3, [pc, #144]	; (80a292c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a289a:	681a      	ldr	r2, [r3, #0]
 80a289c:	07d0      	lsls	r0, r2, #31
 80a289e:	bf5c      	itt	pl
 80a28a0:	2201      	movpl	r2, #1
 80a28a2:	601a      	strpl	r2, [r3, #0]
 80a28a4:	4b22      	ldr	r3, [pc, #136]	; (80a2930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a28a6:	681a      	ldr	r2, [r3, #0]
 80a28a8:	07d1      	lsls	r1, r2, #31
 80a28aa:	bf5c      	itt	pl
 80a28ac:	2201      	movpl	r2, #1
 80a28ae:	601a      	strpl	r2, [r3, #0]
 80a28b0:	4b20      	ldr	r3, [pc, #128]	; (80a2934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a28b2:	681a      	ldr	r2, [r3, #0]
 80a28b4:	07d2      	lsls	r2, r2, #31
 80a28b6:	bf5c      	itt	pl
 80a28b8:	2201      	movpl	r2, #1
 80a28ba:	601a      	strpl	r2, [r3, #0]
 80a28bc:	4b1e      	ldr	r3, [pc, #120]	; (80a2938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a28be:	681a      	ldr	r2, [r3, #0]
 80a28c0:	07d0      	lsls	r0, r2, #31
 80a28c2:	bf5c      	itt	pl
 80a28c4:	2201      	movpl	r2, #1
 80a28c6:	601a      	strpl	r2, [r3, #0]
 80a28c8:	4b1c      	ldr	r3, [pc, #112]	; (80a293c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a28ca:	681a      	ldr	r2, [r3, #0]
 80a28cc:	07d1      	lsls	r1, r2, #31
 80a28ce:	bf5c      	itt	pl
 80a28d0:	2201      	movpl	r2, #1
 80a28d2:	601a      	strpl	r2, [r3, #0]
 80a28d4:	4b1a      	ldr	r3, [pc, #104]	; (80a2940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a28d6:	681a      	ldr	r2, [r3, #0]
 80a28d8:	07d2      	lsls	r2, r2, #31
 80a28da:	bf5c      	itt	pl
 80a28dc:	2201      	movpl	r2, #1
 80a28de:	601a      	strpl	r2, [r3, #0]
 80a28e0:	4b18      	ldr	r3, [pc, #96]	; (80a2944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a28e2:	681a      	ldr	r2, [r3, #0]
 80a28e4:	07d0      	lsls	r0, r2, #31
 80a28e6:	bf5c      	itt	pl
 80a28e8:	2201      	movpl	r2, #1
 80a28ea:	601a      	strpl	r2, [r3, #0]
 80a28ec:	4b16      	ldr	r3, [pc, #88]	; (80a2948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a28ee:	681a      	ldr	r2, [r3, #0]
 80a28f0:	07d1      	lsls	r1, r2, #31
 80a28f2:	bf5c      	itt	pl
 80a28f4:	2201      	movpl	r2, #1
 80a28f6:	601a      	strpl	r2, [r3, #0]
 80a28f8:	4b14      	ldr	r3, [pc, #80]	; (80a294c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a28fa:	681a      	ldr	r2, [r3, #0]
 80a28fc:	07d2      	lsls	r2, r2, #31
 80a28fe:	bf5c      	itt	pl
 80a2900:	2201      	movpl	r2, #1
 80a2902:	601a      	strpl	r2, [r3, #0]
 80a2904:	4b12      	ldr	r3, [pc, #72]	; (80a2950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2906:	681a      	ldr	r2, [r3, #0]
 80a2908:	07d0      	lsls	r0, r2, #31
 80a290a:	bf5c      	itt	pl
 80a290c:	2201      	movpl	r2, #1
 80a290e:	601a      	strpl	r2, [r3, #0]
 80a2910:	4b10      	ldr	r3, [pc, #64]	; (80a2954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2912:	681a      	ldr	r2, [r3, #0]
 80a2914:	07d1      	lsls	r1, r2, #31
 80a2916:	bf5c      	itt	pl
 80a2918:	2201      	movpl	r2, #1
 80a291a:	601a      	strpl	r2, [r3, #0]
 80a291c:	4b0e      	ldr	r3, [pc, #56]	; (80a2958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a291e:	681a      	ldr	r2, [r3, #0]
 80a2920:	07d2      	lsls	r2, r2, #31
 80a2922:	bf5c      	itt	pl
 80a2924:	2201      	movpl	r2, #1
 80a2926:	601a      	strpl	r2, [r3, #0]
 80a2928:	4770      	bx	lr
 80a292a:	bf00      	nop
 80a292c:	20000734 	.word	0x20000734
 80a2930:	20000730 	.word	0x20000730
 80a2934:	2000072c 	.word	0x2000072c
 80a2938:	20000728 	.word	0x20000728
 80a293c:	20000724 	.word	0x20000724
 80a2940:	20000720 	.word	0x20000720
 80a2944:	2000071c 	.word	0x2000071c
 80a2948:	20000718 	.word	0x20000718
 80a294c:	20000714 	.word	0x20000714
 80a2950:	20000710 	.word	0x20000710
 80a2954:	2000070c 	.word	0x2000070c
 80a2958:	20000708 	.word	0x20000708

080a295c <__aeabi_drsub>:
 80a295c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2960:	e002      	b.n	80a2968 <__adddf3>
 80a2962:	bf00      	nop

080a2964 <__aeabi_dsub>:
 80a2964:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2968 <__adddf3>:
 80a2968:	b530      	push	{r4, r5, lr}
 80a296a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a296e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2972:	ea94 0f05 	teq	r4, r5
 80a2976:	bf08      	it	eq
 80a2978:	ea90 0f02 	teqeq	r0, r2
 80a297c:	bf1f      	itttt	ne
 80a297e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2982:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2986:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a298a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a298e:	f000 80e2 	beq.w	80a2b56 <__adddf3+0x1ee>
 80a2992:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2996:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a299a:	bfb8      	it	lt
 80a299c:	426d      	neglt	r5, r5
 80a299e:	dd0c      	ble.n	80a29ba <__adddf3+0x52>
 80a29a0:	442c      	add	r4, r5
 80a29a2:	ea80 0202 	eor.w	r2, r0, r2
 80a29a6:	ea81 0303 	eor.w	r3, r1, r3
 80a29aa:	ea82 0000 	eor.w	r0, r2, r0
 80a29ae:	ea83 0101 	eor.w	r1, r3, r1
 80a29b2:	ea80 0202 	eor.w	r2, r0, r2
 80a29b6:	ea81 0303 	eor.w	r3, r1, r3
 80a29ba:	2d36      	cmp	r5, #54	; 0x36
 80a29bc:	bf88      	it	hi
 80a29be:	bd30      	pophi	{r4, r5, pc}
 80a29c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a29c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a29c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a29cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a29d0:	d002      	beq.n	80a29d8 <__adddf3+0x70>
 80a29d2:	4240      	negs	r0, r0
 80a29d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a29d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a29dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a29e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a29e4:	d002      	beq.n	80a29ec <__adddf3+0x84>
 80a29e6:	4252      	negs	r2, r2
 80a29e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a29ec:	ea94 0f05 	teq	r4, r5
 80a29f0:	f000 80a7 	beq.w	80a2b42 <__adddf3+0x1da>
 80a29f4:	f1a4 0401 	sub.w	r4, r4, #1
 80a29f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a29fc:	db0d      	blt.n	80a2a1a <__adddf3+0xb2>
 80a29fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2a02:	fa22 f205 	lsr.w	r2, r2, r5
 80a2a06:	1880      	adds	r0, r0, r2
 80a2a08:	f141 0100 	adc.w	r1, r1, #0
 80a2a0c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2a10:	1880      	adds	r0, r0, r2
 80a2a12:	fa43 f305 	asr.w	r3, r3, r5
 80a2a16:	4159      	adcs	r1, r3
 80a2a18:	e00e      	b.n	80a2a38 <__adddf3+0xd0>
 80a2a1a:	f1a5 0520 	sub.w	r5, r5, #32
 80a2a1e:	f10e 0e20 	add.w	lr, lr, #32
 80a2a22:	2a01      	cmp	r2, #1
 80a2a24:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2a28:	bf28      	it	cs
 80a2a2a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2a2e:	fa43 f305 	asr.w	r3, r3, r5
 80a2a32:	18c0      	adds	r0, r0, r3
 80a2a34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2a38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a3c:	d507      	bpl.n	80a2a4e <__adddf3+0xe6>
 80a2a3e:	f04f 0e00 	mov.w	lr, #0
 80a2a42:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2a46:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2a4a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2a4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2a52:	d31b      	bcc.n	80a2a8c <__adddf3+0x124>
 80a2a54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2a58:	d30c      	bcc.n	80a2a74 <__adddf3+0x10c>
 80a2a5a:	0849      	lsrs	r1, r1, #1
 80a2a5c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2a60:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2a64:	f104 0401 	add.w	r4, r4, #1
 80a2a68:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2a6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2a70:	f080 809a 	bcs.w	80a2ba8 <__adddf3+0x240>
 80a2a74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2a78:	bf08      	it	eq
 80a2a7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2a7e:	f150 0000 	adcs.w	r0, r0, #0
 80a2a82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2a86:	ea41 0105 	orr.w	r1, r1, r5
 80a2a8a:	bd30      	pop	{r4, r5, pc}
 80a2a8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2a90:	4140      	adcs	r0, r0
 80a2a92:	eb41 0101 	adc.w	r1, r1, r1
 80a2a96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2a9a:	f1a4 0401 	sub.w	r4, r4, #1
 80a2a9e:	d1e9      	bne.n	80a2a74 <__adddf3+0x10c>
 80a2aa0:	f091 0f00 	teq	r1, #0
 80a2aa4:	bf04      	itt	eq
 80a2aa6:	4601      	moveq	r1, r0
 80a2aa8:	2000      	moveq	r0, #0
 80a2aaa:	fab1 f381 	clz	r3, r1
 80a2aae:	bf08      	it	eq
 80a2ab0:	3320      	addeq	r3, #32
 80a2ab2:	f1a3 030b 	sub.w	r3, r3, #11
 80a2ab6:	f1b3 0220 	subs.w	r2, r3, #32
 80a2aba:	da0c      	bge.n	80a2ad6 <__adddf3+0x16e>
 80a2abc:	320c      	adds	r2, #12
 80a2abe:	dd08      	ble.n	80a2ad2 <__adddf3+0x16a>
 80a2ac0:	f102 0c14 	add.w	ip, r2, #20
 80a2ac4:	f1c2 020c 	rsb	r2, r2, #12
 80a2ac8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2acc:	fa21 f102 	lsr.w	r1, r1, r2
 80a2ad0:	e00c      	b.n	80a2aec <__adddf3+0x184>
 80a2ad2:	f102 0214 	add.w	r2, r2, #20
 80a2ad6:	bfd8      	it	le
 80a2ad8:	f1c2 0c20 	rsble	ip, r2, #32
 80a2adc:	fa01 f102 	lsl.w	r1, r1, r2
 80a2ae0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2ae4:	bfdc      	itt	le
 80a2ae6:	ea41 010c 	orrle.w	r1, r1, ip
 80a2aea:	4090      	lslle	r0, r2
 80a2aec:	1ae4      	subs	r4, r4, r3
 80a2aee:	bfa2      	ittt	ge
 80a2af0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2af4:	4329      	orrge	r1, r5
 80a2af6:	bd30      	popge	{r4, r5, pc}
 80a2af8:	ea6f 0404 	mvn.w	r4, r4
 80a2afc:	3c1f      	subs	r4, #31
 80a2afe:	da1c      	bge.n	80a2b3a <__adddf3+0x1d2>
 80a2b00:	340c      	adds	r4, #12
 80a2b02:	dc0e      	bgt.n	80a2b22 <__adddf3+0x1ba>
 80a2b04:	f104 0414 	add.w	r4, r4, #20
 80a2b08:	f1c4 0220 	rsb	r2, r4, #32
 80a2b0c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2b10:	fa01 f302 	lsl.w	r3, r1, r2
 80a2b14:	ea40 0003 	orr.w	r0, r0, r3
 80a2b18:	fa21 f304 	lsr.w	r3, r1, r4
 80a2b1c:	ea45 0103 	orr.w	r1, r5, r3
 80a2b20:	bd30      	pop	{r4, r5, pc}
 80a2b22:	f1c4 040c 	rsb	r4, r4, #12
 80a2b26:	f1c4 0220 	rsb	r2, r4, #32
 80a2b2a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b2e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2b32:	ea40 0003 	orr.w	r0, r0, r3
 80a2b36:	4629      	mov	r1, r5
 80a2b38:	bd30      	pop	{r4, r5, pc}
 80a2b3a:	fa21 f004 	lsr.w	r0, r1, r4
 80a2b3e:	4629      	mov	r1, r5
 80a2b40:	bd30      	pop	{r4, r5, pc}
 80a2b42:	f094 0f00 	teq	r4, #0
 80a2b46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2b4a:	bf06      	itte	eq
 80a2b4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2b50:	3401      	addeq	r4, #1
 80a2b52:	3d01      	subne	r5, #1
 80a2b54:	e74e      	b.n	80a29f4 <__adddf3+0x8c>
 80a2b56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2b5a:	bf18      	it	ne
 80a2b5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b60:	d029      	beq.n	80a2bb6 <__adddf3+0x24e>
 80a2b62:	ea94 0f05 	teq	r4, r5
 80a2b66:	bf08      	it	eq
 80a2b68:	ea90 0f02 	teqeq	r0, r2
 80a2b6c:	d005      	beq.n	80a2b7a <__adddf3+0x212>
 80a2b6e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2b72:	bf04      	itt	eq
 80a2b74:	4619      	moveq	r1, r3
 80a2b76:	4610      	moveq	r0, r2
 80a2b78:	bd30      	pop	{r4, r5, pc}
 80a2b7a:	ea91 0f03 	teq	r1, r3
 80a2b7e:	bf1e      	ittt	ne
 80a2b80:	2100      	movne	r1, #0
 80a2b82:	2000      	movne	r0, #0
 80a2b84:	bd30      	popne	{r4, r5, pc}
 80a2b86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2b8a:	d105      	bne.n	80a2b98 <__adddf3+0x230>
 80a2b8c:	0040      	lsls	r0, r0, #1
 80a2b8e:	4149      	adcs	r1, r1
 80a2b90:	bf28      	it	cs
 80a2b92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2b96:	bd30      	pop	{r4, r5, pc}
 80a2b98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2b9c:	bf3c      	itt	cc
 80a2b9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2ba2:	bd30      	popcc	{r4, r5, pc}
 80a2ba4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ba8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2bac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2bb0:	f04f 0000 	mov.w	r0, #0
 80a2bb4:	bd30      	pop	{r4, r5, pc}
 80a2bb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2bba:	bf1a      	itte	ne
 80a2bbc:	4619      	movne	r1, r3
 80a2bbe:	4610      	movne	r0, r2
 80a2bc0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2bc4:	bf1c      	itt	ne
 80a2bc6:	460b      	movne	r3, r1
 80a2bc8:	4602      	movne	r2, r0
 80a2bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2bce:	bf06      	itte	eq
 80a2bd0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2bd4:	ea91 0f03 	teqeq	r1, r3
 80a2bd8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2bdc:	bd30      	pop	{r4, r5, pc}
 80a2bde:	bf00      	nop

080a2be0 <__aeabi_ui2d>:
 80a2be0:	f090 0f00 	teq	r0, #0
 80a2be4:	bf04      	itt	eq
 80a2be6:	2100      	moveq	r1, #0
 80a2be8:	4770      	bxeq	lr
 80a2bea:	b530      	push	{r4, r5, lr}
 80a2bec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2bf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2bf4:	f04f 0500 	mov.w	r5, #0
 80a2bf8:	f04f 0100 	mov.w	r1, #0
 80a2bfc:	e750      	b.n	80a2aa0 <__adddf3+0x138>
 80a2bfe:	bf00      	nop

080a2c00 <__aeabi_i2d>:
 80a2c00:	f090 0f00 	teq	r0, #0
 80a2c04:	bf04      	itt	eq
 80a2c06:	2100      	moveq	r1, #0
 80a2c08:	4770      	bxeq	lr
 80a2c0a:	b530      	push	{r4, r5, lr}
 80a2c0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c10:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2c18:	bf48      	it	mi
 80a2c1a:	4240      	negmi	r0, r0
 80a2c1c:	f04f 0100 	mov.w	r1, #0
 80a2c20:	e73e      	b.n	80a2aa0 <__adddf3+0x138>
 80a2c22:	bf00      	nop

080a2c24 <__aeabi_f2d>:
 80a2c24:	0042      	lsls	r2, r0, #1
 80a2c26:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2c2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2c32:	bf1f      	itttt	ne
 80a2c34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2c38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2c3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2c40:	4770      	bxne	lr
 80a2c42:	f092 0f00 	teq	r2, #0
 80a2c46:	bf14      	ite	ne
 80a2c48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2c4c:	4770      	bxeq	lr
 80a2c4e:	b530      	push	{r4, r5, lr}
 80a2c50:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2c54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c5c:	e720      	b.n	80a2aa0 <__adddf3+0x138>
 80a2c5e:	bf00      	nop

080a2c60 <__aeabi_ul2d>:
 80a2c60:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c64:	bf08      	it	eq
 80a2c66:	4770      	bxeq	lr
 80a2c68:	b530      	push	{r4, r5, lr}
 80a2c6a:	f04f 0500 	mov.w	r5, #0
 80a2c6e:	e00a      	b.n	80a2c86 <__aeabi_l2d+0x16>

080a2c70 <__aeabi_l2d>:
 80a2c70:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c74:	bf08      	it	eq
 80a2c76:	4770      	bxeq	lr
 80a2c78:	b530      	push	{r4, r5, lr}
 80a2c7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2c7e:	d502      	bpl.n	80a2c86 <__aeabi_l2d+0x16>
 80a2c80:	4240      	negs	r0, r0
 80a2c82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2c86:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2c92:	f43f aedc 	beq.w	80a2a4e <__adddf3+0xe6>
 80a2c96:	f04f 0203 	mov.w	r2, #3
 80a2c9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c9e:	bf18      	it	ne
 80a2ca0:	3203      	addne	r2, #3
 80a2ca2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2ca6:	bf18      	it	ne
 80a2ca8:	3203      	addne	r2, #3
 80a2caa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2cae:	f1c2 0320 	rsb	r3, r2, #32
 80a2cb2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2cb6:	fa20 f002 	lsr.w	r0, r0, r2
 80a2cba:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2cbe:	ea40 000e 	orr.w	r0, r0, lr
 80a2cc2:	fa21 f102 	lsr.w	r1, r1, r2
 80a2cc6:	4414      	add	r4, r2
 80a2cc8:	e6c1      	b.n	80a2a4e <__adddf3+0xe6>
 80a2cca:	bf00      	nop

080a2ccc <__aeabi_dmul>:
 80a2ccc:	b570      	push	{r4, r5, r6, lr}
 80a2cce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2cd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2cd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2cda:	bf1d      	ittte	ne
 80a2cdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ce0:	ea94 0f0c 	teqne	r4, ip
 80a2ce4:	ea95 0f0c 	teqne	r5, ip
 80a2ce8:	f000 f8de 	bleq	80a2ea8 <__aeabi_dmul+0x1dc>
 80a2cec:	442c      	add	r4, r5
 80a2cee:	ea81 0603 	eor.w	r6, r1, r3
 80a2cf2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2cf6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2cfa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2cfe:	bf18      	it	ne
 80a2d00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2d0c:	d038      	beq.n	80a2d80 <__aeabi_dmul+0xb4>
 80a2d0e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2d12:	f04f 0500 	mov.w	r5, #0
 80a2d16:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2d1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2d1e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2d22:	f04f 0600 	mov.w	r6, #0
 80a2d26:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2d2a:	f09c 0f00 	teq	ip, #0
 80a2d2e:	bf18      	it	ne
 80a2d30:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2d34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2d38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2d3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2d40:	d204      	bcs.n	80a2d4c <__aeabi_dmul+0x80>
 80a2d42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2d46:	416d      	adcs	r5, r5
 80a2d48:	eb46 0606 	adc.w	r6, r6, r6
 80a2d4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2d50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2d54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2d58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2d5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2d60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2d64:	bf88      	it	hi
 80a2d66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2d6a:	d81e      	bhi.n	80a2daa <__aeabi_dmul+0xde>
 80a2d6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2d70:	bf08      	it	eq
 80a2d72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2d76:	f150 0000 	adcs.w	r0, r0, #0
 80a2d7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d7e:	bd70      	pop	{r4, r5, r6, pc}
 80a2d80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2d84:	ea46 0101 	orr.w	r1, r6, r1
 80a2d88:	ea40 0002 	orr.w	r0, r0, r2
 80a2d8c:	ea81 0103 	eor.w	r1, r1, r3
 80a2d90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2d94:	bfc2      	ittt	gt
 80a2d96:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2d9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2d9e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2da4:	f04f 0e00 	mov.w	lr, #0
 80a2da8:	3c01      	subs	r4, #1
 80a2daa:	f300 80ab 	bgt.w	80a2f04 <__aeabi_dmul+0x238>
 80a2dae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2db2:	bfde      	ittt	le
 80a2db4:	2000      	movle	r0, #0
 80a2db6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2dba:	bd70      	pople	{r4, r5, r6, pc}
 80a2dbc:	f1c4 0400 	rsb	r4, r4, #0
 80a2dc0:	3c20      	subs	r4, #32
 80a2dc2:	da35      	bge.n	80a2e30 <__aeabi_dmul+0x164>
 80a2dc4:	340c      	adds	r4, #12
 80a2dc6:	dc1b      	bgt.n	80a2e00 <__aeabi_dmul+0x134>
 80a2dc8:	f104 0414 	add.w	r4, r4, #20
 80a2dcc:	f1c4 0520 	rsb	r5, r4, #32
 80a2dd0:	fa00 f305 	lsl.w	r3, r0, r5
 80a2dd4:	fa20 f004 	lsr.w	r0, r0, r4
 80a2dd8:	fa01 f205 	lsl.w	r2, r1, r5
 80a2ddc:	ea40 0002 	orr.w	r0, r0, r2
 80a2de0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2de8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2dec:	fa21 f604 	lsr.w	r6, r1, r4
 80a2df0:	eb42 0106 	adc.w	r1, r2, r6
 80a2df4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2df8:	bf08      	it	eq
 80a2dfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2dfe:	bd70      	pop	{r4, r5, r6, pc}
 80a2e00:	f1c4 040c 	rsb	r4, r4, #12
 80a2e04:	f1c4 0520 	rsb	r5, r4, #32
 80a2e08:	fa00 f304 	lsl.w	r3, r0, r4
 80a2e0c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2e10:	fa01 f204 	lsl.w	r2, r1, r4
 80a2e14:	ea40 0002 	orr.w	r0, r0, r2
 80a2e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2e20:	f141 0100 	adc.w	r1, r1, #0
 80a2e24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e28:	bf08      	it	eq
 80a2e2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e2e:	bd70      	pop	{r4, r5, r6, pc}
 80a2e30:	f1c4 0520 	rsb	r5, r4, #32
 80a2e34:	fa00 f205 	lsl.w	r2, r0, r5
 80a2e38:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2e3c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2e40:	fa01 f205 	lsl.w	r2, r1, r5
 80a2e44:	ea43 0302 	orr.w	r3, r3, r2
 80a2e48:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e50:	fa21 f204 	lsr.w	r2, r1, r4
 80a2e54:	ea20 0002 	bic.w	r0, r0, r2
 80a2e58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e60:	bf08      	it	eq
 80a2e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e66:	bd70      	pop	{r4, r5, r6, pc}
 80a2e68:	f094 0f00 	teq	r4, #0
 80a2e6c:	d10f      	bne.n	80a2e8e <__aeabi_dmul+0x1c2>
 80a2e6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2e72:	0040      	lsls	r0, r0, #1
 80a2e74:	eb41 0101 	adc.w	r1, r1, r1
 80a2e78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e7c:	bf08      	it	eq
 80a2e7e:	3c01      	subeq	r4, #1
 80a2e80:	d0f7      	beq.n	80a2e72 <__aeabi_dmul+0x1a6>
 80a2e82:	ea41 0106 	orr.w	r1, r1, r6
 80a2e86:	f095 0f00 	teq	r5, #0
 80a2e8a:	bf18      	it	ne
 80a2e8c:	4770      	bxne	lr
 80a2e8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2e92:	0052      	lsls	r2, r2, #1
 80a2e94:	eb43 0303 	adc.w	r3, r3, r3
 80a2e98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2e9c:	bf08      	it	eq
 80a2e9e:	3d01      	subeq	r5, #1
 80a2ea0:	d0f7      	beq.n	80a2e92 <__aeabi_dmul+0x1c6>
 80a2ea2:	ea43 0306 	orr.w	r3, r3, r6
 80a2ea6:	4770      	bx	lr
 80a2ea8:	ea94 0f0c 	teq	r4, ip
 80a2eac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2eb0:	bf18      	it	ne
 80a2eb2:	ea95 0f0c 	teqne	r5, ip
 80a2eb6:	d00c      	beq.n	80a2ed2 <__aeabi_dmul+0x206>
 80a2eb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2ebc:	bf18      	it	ne
 80a2ebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2ec2:	d1d1      	bne.n	80a2e68 <__aeabi_dmul+0x19c>
 80a2ec4:	ea81 0103 	eor.w	r1, r1, r3
 80a2ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2ecc:	f04f 0000 	mov.w	r0, #0
 80a2ed0:	bd70      	pop	{r4, r5, r6, pc}
 80a2ed2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2ed6:	bf06      	itte	eq
 80a2ed8:	4610      	moveq	r0, r2
 80a2eda:	4619      	moveq	r1, r3
 80a2edc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2ee0:	d019      	beq.n	80a2f16 <__aeabi_dmul+0x24a>
 80a2ee2:	ea94 0f0c 	teq	r4, ip
 80a2ee6:	d102      	bne.n	80a2eee <__aeabi_dmul+0x222>
 80a2ee8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2eec:	d113      	bne.n	80a2f16 <__aeabi_dmul+0x24a>
 80a2eee:	ea95 0f0c 	teq	r5, ip
 80a2ef2:	d105      	bne.n	80a2f00 <__aeabi_dmul+0x234>
 80a2ef4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2ef8:	bf1c      	itt	ne
 80a2efa:	4610      	movne	r0, r2
 80a2efc:	4619      	movne	r1, r3
 80a2efe:	d10a      	bne.n	80a2f16 <__aeabi_dmul+0x24a>
 80a2f00:	ea81 0103 	eor.w	r1, r1, r3
 80a2f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2f10:	f04f 0000 	mov.w	r0, #0
 80a2f14:	bd70      	pop	{r4, r5, r6, pc}
 80a2f16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2f1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2f1e:	bd70      	pop	{r4, r5, r6, pc}

080a2f20 <__aeabi_ddiv>:
 80a2f20:	b570      	push	{r4, r5, r6, lr}
 80a2f22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2f26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2f2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2f2e:	bf1d      	ittte	ne
 80a2f30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2f34:	ea94 0f0c 	teqne	r4, ip
 80a2f38:	ea95 0f0c 	teqne	r5, ip
 80a2f3c:	f000 f8a7 	bleq	80a308e <__aeabi_ddiv+0x16e>
 80a2f40:	eba4 0405 	sub.w	r4, r4, r5
 80a2f44:	ea81 0e03 	eor.w	lr, r1, r3
 80a2f48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2f50:	f000 8088 	beq.w	80a3064 <__aeabi_ddiv+0x144>
 80a2f54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2f58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2f5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2f60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2f64:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2f68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2f6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2f70:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2f74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2f78:	429d      	cmp	r5, r3
 80a2f7a:	bf08      	it	eq
 80a2f7c:	4296      	cmpeq	r6, r2
 80a2f7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2f82:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2f86:	d202      	bcs.n	80a2f8e <__aeabi_ddiv+0x6e>
 80a2f88:	085b      	lsrs	r3, r3, #1
 80a2f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f8e:	1ab6      	subs	r6, r6, r2
 80a2f90:	eb65 0503 	sbc.w	r5, r5, r3
 80a2f94:	085b      	lsrs	r3, r3, #1
 80a2f96:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2f9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2fa2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2faa:	bf22      	ittt	cs
 80a2fac:	1ab6      	subcs	r6, r6, r2
 80a2fae:	4675      	movcs	r5, lr
 80a2fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2fb4:	085b      	lsrs	r3, r3, #1
 80a2fb6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2fc2:	bf22      	ittt	cs
 80a2fc4:	1ab6      	subcs	r6, r6, r2
 80a2fc6:	4675      	movcs	r5, lr
 80a2fc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2fcc:	085b      	lsrs	r3, r3, #1
 80a2fce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fd2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2fda:	bf22      	ittt	cs
 80a2fdc:	1ab6      	subcs	r6, r6, r2
 80a2fde:	4675      	movcs	r5, lr
 80a2fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2fe4:	085b      	lsrs	r3, r3, #1
 80a2fe6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2fee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2ff2:	bf22      	ittt	cs
 80a2ff4:	1ab6      	subcs	r6, r6, r2
 80a2ff6:	4675      	movcs	r5, lr
 80a2ff8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2ffc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3000:	d018      	beq.n	80a3034 <__aeabi_ddiv+0x114>
 80a3002:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3006:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a300a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a300e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3012:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3016:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a301a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a301e:	d1c0      	bne.n	80a2fa2 <__aeabi_ddiv+0x82>
 80a3020:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3024:	d10b      	bne.n	80a303e <__aeabi_ddiv+0x11e>
 80a3026:	ea41 0100 	orr.w	r1, r1, r0
 80a302a:	f04f 0000 	mov.w	r0, #0
 80a302e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3032:	e7b6      	b.n	80a2fa2 <__aeabi_ddiv+0x82>
 80a3034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3038:	bf04      	itt	eq
 80a303a:	4301      	orreq	r1, r0
 80a303c:	2000      	moveq	r0, #0
 80a303e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3042:	bf88      	it	hi
 80a3044:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3048:	f63f aeaf 	bhi.w	80a2daa <__aeabi_dmul+0xde>
 80a304c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3050:	bf04      	itt	eq
 80a3052:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3056:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a305a:	f150 0000 	adcs.w	r0, r0, #0
 80a305e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3062:	bd70      	pop	{r4, r5, r6, pc}
 80a3064:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3068:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a306c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3070:	bfc2      	ittt	gt
 80a3072:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3076:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a307a:	bd70      	popgt	{r4, r5, r6, pc}
 80a307c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3080:	f04f 0e00 	mov.w	lr, #0
 80a3084:	3c01      	subs	r4, #1
 80a3086:	e690      	b.n	80a2daa <__aeabi_dmul+0xde>
 80a3088:	ea45 0e06 	orr.w	lr, r5, r6
 80a308c:	e68d      	b.n	80a2daa <__aeabi_dmul+0xde>
 80a308e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3092:	ea94 0f0c 	teq	r4, ip
 80a3096:	bf08      	it	eq
 80a3098:	ea95 0f0c 	teqeq	r5, ip
 80a309c:	f43f af3b 	beq.w	80a2f16 <__aeabi_dmul+0x24a>
 80a30a0:	ea94 0f0c 	teq	r4, ip
 80a30a4:	d10a      	bne.n	80a30bc <__aeabi_ddiv+0x19c>
 80a30a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a30aa:	f47f af34 	bne.w	80a2f16 <__aeabi_dmul+0x24a>
 80a30ae:	ea95 0f0c 	teq	r5, ip
 80a30b2:	f47f af25 	bne.w	80a2f00 <__aeabi_dmul+0x234>
 80a30b6:	4610      	mov	r0, r2
 80a30b8:	4619      	mov	r1, r3
 80a30ba:	e72c      	b.n	80a2f16 <__aeabi_dmul+0x24a>
 80a30bc:	ea95 0f0c 	teq	r5, ip
 80a30c0:	d106      	bne.n	80a30d0 <__aeabi_ddiv+0x1b0>
 80a30c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a30c6:	f43f aefd 	beq.w	80a2ec4 <__aeabi_dmul+0x1f8>
 80a30ca:	4610      	mov	r0, r2
 80a30cc:	4619      	mov	r1, r3
 80a30ce:	e722      	b.n	80a2f16 <__aeabi_dmul+0x24a>
 80a30d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a30d4:	bf18      	it	ne
 80a30d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a30da:	f47f aec5 	bne.w	80a2e68 <__aeabi_dmul+0x19c>
 80a30de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a30e2:	f47f af0d 	bne.w	80a2f00 <__aeabi_dmul+0x234>
 80a30e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a30ea:	f47f aeeb 	bne.w	80a2ec4 <__aeabi_dmul+0x1f8>
 80a30ee:	e712      	b.n	80a2f16 <__aeabi_dmul+0x24a>

080a30f0 <__aeabi_d2iz>:
 80a30f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a30f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a30f8:	d215      	bcs.n	80a3126 <__aeabi_d2iz+0x36>
 80a30fa:	d511      	bpl.n	80a3120 <__aeabi_d2iz+0x30>
 80a30fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3100:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3104:	d912      	bls.n	80a312c <__aeabi_d2iz+0x3c>
 80a3106:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a310a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a310e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3116:	fa23 f002 	lsr.w	r0, r3, r2
 80a311a:	bf18      	it	ne
 80a311c:	4240      	negne	r0, r0
 80a311e:	4770      	bx	lr
 80a3120:	f04f 0000 	mov.w	r0, #0
 80a3124:	4770      	bx	lr
 80a3126:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a312a:	d105      	bne.n	80a3138 <__aeabi_d2iz+0x48>
 80a312c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3130:	bf08      	it	eq
 80a3132:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3136:	4770      	bx	lr
 80a3138:	f04f 0000 	mov.w	r0, #0
 80a313c:	4770      	bx	lr
 80a313e:	bf00      	nop

080a3140 <__aeabi_frsub>:
 80a3140:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3144:	e002      	b.n	80a314c <__addsf3>
 80a3146:	bf00      	nop

080a3148 <__aeabi_fsub>:
 80a3148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a314c <__addsf3>:
 80a314c:	0042      	lsls	r2, r0, #1
 80a314e:	bf1f      	itttt	ne
 80a3150:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3154:	ea92 0f03 	teqne	r2, r3
 80a3158:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a315c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3160:	d06a      	beq.n	80a3238 <__addsf3+0xec>
 80a3162:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3166:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a316a:	bfc1      	itttt	gt
 80a316c:	18d2      	addgt	r2, r2, r3
 80a316e:	4041      	eorgt	r1, r0
 80a3170:	4048      	eorgt	r0, r1
 80a3172:	4041      	eorgt	r1, r0
 80a3174:	bfb8      	it	lt
 80a3176:	425b      	neglt	r3, r3
 80a3178:	2b19      	cmp	r3, #25
 80a317a:	bf88      	it	hi
 80a317c:	4770      	bxhi	lr
 80a317e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3182:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3186:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a318a:	bf18      	it	ne
 80a318c:	4240      	negne	r0, r0
 80a318e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3192:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3196:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a319a:	bf18      	it	ne
 80a319c:	4249      	negne	r1, r1
 80a319e:	ea92 0f03 	teq	r2, r3
 80a31a2:	d03f      	beq.n	80a3224 <__addsf3+0xd8>
 80a31a4:	f1a2 0201 	sub.w	r2, r2, #1
 80a31a8:	fa41 fc03 	asr.w	ip, r1, r3
 80a31ac:	eb10 000c 	adds.w	r0, r0, ip
 80a31b0:	f1c3 0320 	rsb	r3, r3, #32
 80a31b4:	fa01 f103 	lsl.w	r1, r1, r3
 80a31b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a31bc:	d502      	bpl.n	80a31c4 <__addsf3+0x78>
 80a31be:	4249      	negs	r1, r1
 80a31c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a31c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a31c8:	d313      	bcc.n	80a31f2 <__addsf3+0xa6>
 80a31ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a31ce:	d306      	bcc.n	80a31de <__addsf3+0x92>
 80a31d0:	0840      	lsrs	r0, r0, #1
 80a31d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a31d6:	f102 0201 	add.w	r2, r2, #1
 80a31da:	2afe      	cmp	r2, #254	; 0xfe
 80a31dc:	d251      	bcs.n	80a3282 <__addsf3+0x136>
 80a31de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a31e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a31e6:	bf08      	it	eq
 80a31e8:	f020 0001 	biceq.w	r0, r0, #1
 80a31ec:	ea40 0003 	orr.w	r0, r0, r3
 80a31f0:	4770      	bx	lr
 80a31f2:	0049      	lsls	r1, r1, #1
 80a31f4:	eb40 0000 	adc.w	r0, r0, r0
 80a31f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a31fc:	f1a2 0201 	sub.w	r2, r2, #1
 80a3200:	d1ed      	bne.n	80a31de <__addsf3+0x92>
 80a3202:	fab0 fc80 	clz	ip, r0
 80a3206:	f1ac 0c08 	sub.w	ip, ip, #8
 80a320a:	ebb2 020c 	subs.w	r2, r2, ip
 80a320e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3212:	bfaa      	itet	ge
 80a3214:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3218:	4252      	neglt	r2, r2
 80a321a:	4318      	orrge	r0, r3
 80a321c:	bfbc      	itt	lt
 80a321e:	40d0      	lsrlt	r0, r2
 80a3220:	4318      	orrlt	r0, r3
 80a3222:	4770      	bx	lr
 80a3224:	f092 0f00 	teq	r2, #0
 80a3228:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a322c:	bf06      	itte	eq
 80a322e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3232:	3201      	addeq	r2, #1
 80a3234:	3b01      	subne	r3, #1
 80a3236:	e7b5      	b.n	80a31a4 <__addsf3+0x58>
 80a3238:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a323c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3240:	bf18      	it	ne
 80a3242:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3246:	d021      	beq.n	80a328c <__addsf3+0x140>
 80a3248:	ea92 0f03 	teq	r2, r3
 80a324c:	d004      	beq.n	80a3258 <__addsf3+0x10c>
 80a324e:	f092 0f00 	teq	r2, #0
 80a3252:	bf08      	it	eq
 80a3254:	4608      	moveq	r0, r1
 80a3256:	4770      	bx	lr
 80a3258:	ea90 0f01 	teq	r0, r1
 80a325c:	bf1c      	itt	ne
 80a325e:	2000      	movne	r0, #0
 80a3260:	4770      	bxne	lr
 80a3262:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3266:	d104      	bne.n	80a3272 <__addsf3+0x126>
 80a3268:	0040      	lsls	r0, r0, #1
 80a326a:	bf28      	it	cs
 80a326c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3270:	4770      	bx	lr
 80a3272:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3276:	bf3c      	itt	cc
 80a3278:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a327c:	4770      	bxcc	lr
 80a327e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3282:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3286:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a328a:	4770      	bx	lr
 80a328c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3290:	bf16      	itet	ne
 80a3292:	4608      	movne	r0, r1
 80a3294:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3298:	4601      	movne	r1, r0
 80a329a:	0242      	lsls	r2, r0, #9
 80a329c:	bf06      	itte	eq
 80a329e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a32a2:	ea90 0f01 	teqeq	r0, r1
 80a32a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a32aa:	4770      	bx	lr

080a32ac <__aeabi_ui2f>:
 80a32ac:	f04f 0300 	mov.w	r3, #0
 80a32b0:	e004      	b.n	80a32bc <__aeabi_i2f+0x8>
 80a32b2:	bf00      	nop

080a32b4 <__aeabi_i2f>:
 80a32b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a32b8:	bf48      	it	mi
 80a32ba:	4240      	negmi	r0, r0
 80a32bc:	ea5f 0c00 	movs.w	ip, r0
 80a32c0:	bf08      	it	eq
 80a32c2:	4770      	bxeq	lr
 80a32c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a32c8:	4601      	mov	r1, r0
 80a32ca:	f04f 0000 	mov.w	r0, #0
 80a32ce:	e01c      	b.n	80a330a <__aeabi_l2f+0x2a>

080a32d0 <__aeabi_ul2f>:
 80a32d0:	ea50 0201 	orrs.w	r2, r0, r1
 80a32d4:	bf08      	it	eq
 80a32d6:	4770      	bxeq	lr
 80a32d8:	f04f 0300 	mov.w	r3, #0
 80a32dc:	e00a      	b.n	80a32f4 <__aeabi_l2f+0x14>
 80a32de:	bf00      	nop

080a32e0 <__aeabi_l2f>:
 80a32e0:	ea50 0201 	orrs.w	r2, r0, r1
 80a32e4:	bf08      	it	eq
 80a32e6:	4770      	bxeq	lr
 80a32e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a32ec:	d502      	bpl.n	80a32f4 <__aeabi_l2f+0x14>
 80a32ee:	4240      	negs	r0, r0
 80a32f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a32f4:	ea5f 0c01 	movs.w	ip, r1
 80a32f8:	bf02      	ittt	eq
 80a32fa:	4684      	moveq	ip, r0
 80a32fc:	4601      	moveq	r1, r0
 80a32fe:	2000      	moveq	r0, #0
 80a3300:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3304:	bf08      	it	eq
 80a3306:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a330a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a330e:	fabc f28c 	clz	r2, ip
 80a3312:	3a08      	subs	r2, #8
 80a3314:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3318:	db10      	blt.n	80a333c <__aeabi_l2f+0x5c>
 80a331a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a331e:	4463      	add	r3, ip
 80a3320:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3324:	f1c2 0220 	rsb	r2, r2, #32
 80a3328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a332c:	fa20 f202 	lsr.w	r2, r0, r2
 80a3330:	eb43 0002 	adc.w	r0, r3, r2
 80a3334:	bf08      	it	eq
 80a3336:	f020 0001 	biceq.w	r0, r0, #1
 80a333a:	4770      	bx	lr
 80a333c:	f102 0220 	add.w	r2, r2, #32
 80a3340:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3344:	f1c2 0220 	rsb	r2, r2, #32
 80a3348:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a334c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3350:	eb43 0002 	adc.w	r0, r3, r2
 80a3354:	bf08      	it	eq
 80a3356:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a335a:	4770      	bx	lr

080a335c <__aeabi_fmul>:
 80a335c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3360:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3364:	bf1e      	ittt	ne
 80a3366:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a336a:	ea92 0f0c 	teqne	r2, ip
 80a336e:	ea93 0f0c 	teqne	r3, ip
 80a3372:	d06f      	beq.n	80a3454 <__aeabi_fmul+0xf8>
 80a3374:	441a      	add	r2, r3
 80a3376:	ea80 0c01 	eor.w	ip, r0, r1
 80a337a:	0240      	lsls	r0, r0, #9
 80a337c:	bf18      	it	ne
 80a337e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3382:	d01e      	beq.n	80a33c2 <__aeabi_fmul+0x66>
 80a3384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3388:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a338c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3390:	fba0 3101 	umull	r3, r1, r0, r1
 80a3394:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3398:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a339c:	bf3e      	ittt	cc
 80a339e:	0049      	lslcc	r1, r1, #1
 80a33a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a33a4:	005b      	lslcc	r3, r3, #1
 80a33a6:	ea40 0001 	orr.w	r0, r0, r1
 80a33aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a33ae:	2afd      	cmp	r2, #253	; 0xfd
 80a33b0:	d81d      	bhi.n	80a33ee <__aeabi_fmul+0x92>
 80a33b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a33b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a33ba:	bf08      	it	eq
 80a33bc:	f020 0001 	biceq.w	r0, r0, #1
 80a33c0:	4770      	bx	lr
 80a33c2:	f090 0f00 	teq	r0, #0
 80a33c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a33ca:	bf08      	it	eq
 80a33cc:	0249      	lsleq	r1, r1, #9
 80a33ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a33d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a33d6:	3a7f      	subs	r2, #127	; 0x7f
 80a33d8:	bfc2      	ittt	gt
 80a33da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a33de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a33e2:	4770      	bxgt	lr
 80a33e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a33e8:	f04f 0300 	mov.w	r3, #0
 80a33ec:	3a01      	subs	r2, #1
 80a33ee:	dc5d      	bgt.n	80a34ac <__aeabi_fmul+0x150>
 80a33f0:	f112 0f19 	cmn.w	r2, #25
 80a33f4:	bfdc      	itt	le
 80a33f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a33fa:	4770      	bxle	lr
 80a33fc:	f1c2 0200 	rsb	r2, r2, #0
 80a3400:	0041      	lsls	r1, r0, #1
 80a3402:	fa21 f102 	lsr.w	r1, r1, r2
 80a3406:	f1c2 0220 	rsb	r2, r2, #32
 80a340a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a340e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3412:	f140 0000 	adc.w	r0, r0, #0
 80a3416:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a341a:	bf08      	it	eq
 80a341c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3420:	4770      	bx	lr
 80a3422:	f092 0f00 	teq	r2, #0
 80a3426:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a342a:	bf02      	ittt	eq
 80a342c:	0040      	lsleq	r0, r0, #1
 80a342e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3432:	3a01      	subeq	r2, #1
 80a3434:	d0f9      	beq.n	80a342a <__aeabi_fmul+0xce>
 80a3436:	ea40 000c 	orr.w	r0, r0, ip
 80a343a:	f093 0f00 	teq	r3, #0
 80a343e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3442:	bf02      	ittt	eq
 80a3444:	0049      	lsleq	r1, r1, #1
 80a3446:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a344a:	3b01      	subeq	r3, #1
 80a344c:	d0f9      	beq.n	80a3442 <__aeabi_fmul+0xe6>
 80a344e:	ea41 010c 	orr.w	r1, r1, ip
 80a3452:	e78f      	b.n	80a3374 <__aeabi_fmul+0x18>
 80a3454:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3458:	ea92 0f0c 	teq	r2, ip
 80a345c:	bf18      	it	ne
 80a345e:	ea93 0f0c 	teqne	r3, ip
 80a3462:	d00a      	beq.n	80a347a <__aeabi_fmul+0x11e>
 80a3464:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3468:	bf18      	it	ne
 80a346a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a346e:	d1d8      	bne.n	80a3422 <__aeabi_fmul+0xc6>
 80a3470:	ea80 0001 	eor.w	r0, r0, r1
 80a3474:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3478:	4770      	bx	lr
 80a347a:	f090 0f00 	teq	r0, #0
 80a347e:	bf17      	itett	ne
 80a3480:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3484:	4608      	moveq	r0, r1
 80a3486:	f091 0f00 	teqne	r1, #0
 80a348a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a348e:	d014      	beq.n	80a34ba <__aeabi_fmul+0x15e>
 80a3490:	ea92 0f0c 	teq	r2, ip
 80a3494:	d101      	bne.n	80a349a <__aeabi_fmul+0x13e>
 80a3496:	0242      	lsls	r2, r0, #9
 80a3498:	d10f      	bne.n	80a34ba <__aeabi_fmul+0x15e>
 80a349a:	ea93 0f0c 	teq	r3, ip
 80a349e:	d103      	bne.n	80a34a8 <__aeabi_fmul+0x14c>
 80a34a0:	024b      	lsls	r3, r1, #9
 80a34a2:	bf18      	it	ne
 80a34a4:	4608      	movne	r0, r1
 80a34a6:	d108      	bne.n	80a34ba <__aeabi_fmul+0x15e>
 80a34a8:	ea80 0001 	eor.w	r0, r0, r1
 80a34ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a34b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a34b8:	4770      	bx	lr
 80a34ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a34c2:	4770      	bx	lr

080a34c4 <__aeabi_fdiv>:
 80a34c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a34cc:	bf1e      	ittt	ne
 80a34ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a34d2:	ea92 0f0c 	teqne	r2, ip
 80a34d6:	ea93 0f0c 	teqne	r3, ip
 80a34da:	d069      	beq.n	80a35b0 <__aeabi_fdiv+0xec>
 80a34dc:	eba2 0203 	sub.w	r2, r2, r3
 80a34e0:	ea80 0c01 	eor.w	ip, r0, r1
 80a34e4:	0249      	lsls	r1, r1, #9
 80a34e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a34ea:	d037      	beq.n	80a355c <__aeabi_fdiv+0x98>
 80a34ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a34f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a34f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a34f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a34fc:	428b      	cmp	r3, r1
 80a34fe:	bf38      	it	cc
 80a3500:	005b      	lslcc	r3, r3, #1
 80a3502:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3506:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a350a:	428b      	cmp	r3, r1
 80a350c:	bf24      	itt	cs
 80a350e:	1a5b      	subcs	r3, r3, r1
 80a3510:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3514:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3518:	bf24      	itt	cs
 80a351a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a351e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3522:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3526:	bf24      	itt	cs
 80a3528:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a352c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3530:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3534:	bf24      	itt	cs
 80a3536:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a353a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a353e:	011b      	lsls	r3, r3, #4
 80a3540:	bf18      	it	ne
 80a3542:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3546:	d1e0      	bne.n	80a350a <__aeabi_fdiv+0x46>
 80a3548:	2afd      	cmp	r2, #253	; 0xfd
 80a354a:	f63f af50 	bhi.w	80a33ee <__aeabi_fmul+0x92>
 80a354e:	428b      	cmp	r3, r1
 80a3550:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3554:	bf08      	it	eq
 80a3556:	f020 0001 	biceq.w	r0, r0, #1
 80a355a:	4770      	bx	lr
 80a355c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3560:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3564:	327f      	adds	r2, #127	; 0x7f
 80a3566:	bfc2      	ittt	gt
 80a3568:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a356c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3570:	4770      	bxgt	lr
 80a3572:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3576:	f04f 0300 	mov.w	r3, #0
 80a357a:	3a01      	subs	r2, #1
 80a357c:	e737      	b.n	80a33ee <__aeabi_fmul+0x92>
 80a357e:	f092 0f00 	teq	r2, #0
 80a3582:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3586:	bf02      	ittt	eq
 80a3588:	0040      	lsleq	r0, r0, #1
 80a358a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a358e:	3a01      	subeq	r2, #1
 80a3590:	d0f9      	beq.n	80a3586 <__aeabi_fdiv+0xc2>
 80a3592:	ea40 000c 	orr.w	r0, r0, ip
 80a3596:	f093 0f00 	teq	r3, #0
 80a359a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a359e:	bf02      	ittt	eq
 80a35a0:	0049      	lsleq	r1, r1, #1
 80a35a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a35a6:	3b01      	subeq	r3, #1
 80a35a8:	d0f9      	beq.n	80a359e <__aeabi_fdiv+0xda>
 80a35aa:	ea41 010c 	orr.w	r1, r1, ip
 80a35ae:	e795      	b.n	80a34dc <__aeabi_fdiv+0x18>
 80a35b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a35b4:	ea92 0f0c 	teq	r2, ip
 80a35b8:	d108      	bne.n	80a35cc <__aeabi_fdiv+0x108>
 80a35ba:	0242      	lsls	r2, r0, #9
 80a35bc:	f47f af7d 	bne.w	80a34ba <__aeabi_fmul+0x15e>
 80a35c0:	ea93 0f0c 	teq	r3, ip
 80a35c4:	f47f af70 	bne.w	80a34a8 <__aeabi_fmul+0x14c>
 80a35c8:	4608      	mov	r0, r1
 80a35ca:	e776      	b.n	80a34ba <__aeabi_fmul+0x15e>
 80a35cc:	ea93 0f0c 	teq	r3, ip
 80a35d0:	d104      	bne.n	80a35dc <__aeabi_fdiv+0x118>
 80a35d2:	024b      	lsls	r3, r1, #9
 80a35d4:	f43f af4c 	beq.w	80a3470 <__aeabi_fmul+0x114>
 80a35d8:	4608      	mov	r0, r1
 80a35da:	e76e      	b.n	80a34ba <__aeabi_fmul+0x15e>
 80a35dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a35e0:	bf18      	it	ne
 80a35e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a35e6:	d1ca      	bne.n	80a357e <__aeabi_fdiv+0xba>
 80a35e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a35ec:	f47f af5c 	bne.w	80a34a8 <__aeabi_fmul+0x14c>
 80a35f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a35f4:	f47f af3c 	bne.w	80a3470 <__aeabi_fmul+0x114>
 80a35f8:	e75f      	b.n	80a34ba <__aeabi_fmul+0x15e>
 80a35fa:	bf00      	nop

080a35fc <__gesf2>:
 80a35fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3600:	e006      	b.n	80a3610 <__cmpsf2+0x4>
 80a3602:	bf00      	nop

080a3604 <__lesf2>:
 80a3604:	f04f 0c01 	mov.w	ip, #1
 80a3608:	e002      	b.n	80a3610 <__cmpsf2+0x4>
 80a360a:	bf00      	nop

080a360c <__cmpsf2>:
 80a360c:	f04f 0c01 	mov.w	ip, #1
 80a3610:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3614:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3618:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a361c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3620:	bf18      	it	ne
 80a3622:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3626:	d011      	beq.n	80a364c <__cmpsf2+0x40>
 80a3628:	b001      	add	sp, #4
 80a362a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a362e:	bf18      	it	ne
 80a3630:	ea90 0f01 	teqne	r0, r1
 80a3634:	bf58      	it	pl
 80a3636:	ebb2 0003 	subspl.w	r0, r2, r3
 80a363a:	bf88      	it	hi
 80a363c:	17c8      	asrhi	r0, r1, #31
 80a363e:	bf38      	it	cc
 80a3640:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3644:	bf18      	it	ne
 80a3646:	f040 0001 	orrne.w	r0, r0, #1
 80a364a:	4770      	bx	lr
 80a364c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3650:	d102      	bne.n	80a3658 <__cmpsf2+0x4c>
 80a3652:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3656:	d105      	bne.n	80a3664 <__cmpsf2+0x58>
 80a3658:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a365c:	d1e4      	bne.n	80a3628 <__cmpsf2+0x1c>
 80a365e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3662:	d0e1      	beq.n	80a3628 <__cmpsf2+0x1c>
 80a3664:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3668:	4770      	bx	lr
 80a366a:	bf00      	nop

080a366c <__aeabi_cfrcmple>:
 80a366c:	4684      	mov	ip, r0
 80a366e:	4608      	mov	r0, r1
 80a3670:	4661      	mov	r1, ip
 80a3672:	e7ff      	b.n	80a3674 <__aeabi_cfcmpeq>

080a3674 <__aeabi_cfcmpeq>:
 80a3674:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3676:	f7ff ffc9 	bl	80a360c <__cmpsf2>
 80a367a:	2800      	cmp	r0, #0
 80a367c:	bf48      	it	mi
 80a367e:	f110 0f00 	cmnmi.w	r0, #0
 80a3682:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3684 <__aeabi_fcmpeq>:
 80a3684:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3688:	f7ff fff4 	bl	80a3674 <__aeabi_cfcmpeq>
 80a368c:	bf0c      	ite	eq
 80a368e:	2001      	moveq	r0, #1
 80a3690:	2000      	movne	r0, #0
 80a3692:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3696:	bf00      	nop

080a3698 <__aeabi_fcmplt>:
 80a3698:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a369c:	f7ff ffea 	bl	80a3674 <__aeabi_cfcmpeq>
 80a36a0:	bf34      	ite	cc
 80a36a2:	2001      	movcc	r0, #1
 80a36a4:	2000      	movcs	r0, #0
 80a36a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36aa:	bf00      	nop

080a36ac <__aeabi_fcmple>:
 80a36ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36b0:	f7ff ffe0 	bl	80a3674 <__aeabi_cfcmpeq>
 80a36b4:	bf94      	ite	ls
 80a36b6:	2001      	movls	r0, #1
 80a36b8:	2000      	movhi	r0, #0
 80a36ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36be:	bf00      	nop

080a36c0 <__aeabi_fcmpge>:
 80a36c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36c4:	f7ff ffd2 	bl	80a366c <__aeabi_cfrcmple>
 80a36c8:	bf94      	ite	ls
 80a36ca:	2001      	movls	r0, #1
 80a36cc:	2000      	movhi	r0, #0
 80a36ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36d2:	bf00      	nop

080a36d4 <__aeabi_fcmpgt>:
 80a36d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36d8:	f7ff ffc8 	bl	80a366c <__aeabi_cfrcmple>
 80a36dc:	bf34      	ite	cc
 80a36de:	2001      	movcc	r0, #1
 80a36e0:	2000      	movcs	r0, #0
 80a36e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36e6:	bf00      	nop

080a36e8 <__aeabi_f2iz>:
 80a36e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a36ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a36f0:	d30f      	bcc.n	80a3712 <__aeabi_f2iz+0x2a>
 80a36f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a36f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a36fa:	d90d      	bls.n	80a3718 <__aeabi_f2iz+0x30>
 80a36fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3704:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3708:	fa23 f002 	lsr.w	r0, r3, r2
 80a370c:	bf18      	it	ne
 80a370e:	4240      	negne	r0, r0
 80a3710:	4770      	bx	lr
 80a3712:	f04f 0000 	mov.w	r0, #0
 80a3716:	4770      	bx	lr
 80a3718:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a371c:	d101      	bne.n	80a3722 <__aeabi_f2iz+0x3a>
 80a371e:	0242      	lsls	r2, r0, #9
 80a3720:	d105      	bne.n	80a372e <__aeabi_f2iz+0x46>
 80a3722:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a3726:	bf08      	it	eq
 80a3728:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a372c:	4770      	bx	lr
 80a372e:	f04f 0000 	mov.w	r0, #0
 80a3732:	4770      	bx	lr

080a3734 <__cxa_atexit>:
 80a3734:	b510      	push	{r4, lr}
 80a3736:	4c05      	ldr	r4, [pc, #20]	; (80a374c <__cxa_atexit+0x18>)
 80a3738:	4613      	mov	r3, r2
 80a373a:	b12c      	cbz	r4, 80a3748 <__cxa_atexit+0x14>
 80a373c:	460a      	mov	r2, r1
 80a373e:	4601      	mov	r1, r0
 80a3740:	2002      	movs	r0, #2
 80a3742:	f3af 8000 	nop.w
 80a3746:	bd10      	pop	{r4, pc}
 80a3748:	4620      	mov	r0, r4
 80a374a:	bd10      	pop	{r4, pc}
 80a374c:	00000000 	.word	0x00000000

080a3750 <memcpy>:
 80a3750:	b510      	push	{r4, lr}
 80a3752:	1e43      	subs	r3, r0, #1
 80a3754:	440a      	add	r2, r1
 80a3756:	4291      	cmp	r1, r2
 80a3758:	d004      	beq.n	80a3764 <memcpy+0x14>
 80a375a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a375e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3762:	e7f8      	b.n	80a3756 <memcpy+0x6>
 80a3764:	bd10      	pop	{r4, pc}

080a3766 <memset>:
 80a3766:	4603      	mov	r3, r0
 80a3768:	4402      	add	r2, r0
 80a376a:	4293      	cmp	r3, r2
 80a376c:	d002      	beq.n	80a3774 <memset+0xe>
 80a376e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3772:	e7fa      	b.n	80a376a <memset+0x4>
 80a3774:	4770      	bx	lr
	...

080a3778 <srand>:
 80a3778:	b538      	push	{r3, r4, r5, lr}
 80a377a:	4b12      	ldr	r3, [pc, #72]	; (80a37c4 <srand+0x4c>)
 80a377c:	4605      	mov	r5, r0
 80a377e:	681c      	ldr	r4, [r3, #0]
 80a3780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3782:	b9d3      	cbnz	r3, 80a37ba <srand+0x42>
 80a3784:	2018      	movs	r0, #24
 80a3786:	f7fd ff73 	bl	80a1670 <malloc>
 80a378a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a378e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3790:	8003      	strh	r3, [r0, #0]
 80a3792:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3796:	8043      	strh	r3, [r0, #2]
 80a3798:	f241 2334 	movw	r3, #4660	; 0x1234
 80a379c:	8083      	strh	r3, [r0, #4]
 80a379e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a37a2:	80c3      	strh	r3, [r0, #6]
 80a37a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a37a8:	8103      	strh	r3, [r0, #8]
 80a37aa:	2305      	movs	r3, #5
 80a37ac:	8143      	strh	r3, [r0, #10]
 80a37ae:	230b      	movs	r3, #11
 80a37b0:	8183      	strh	r3, [r0, #12]
 80a37b2:	2201      	movs	r2, #1
 80a37b4:	2300      	movs	r3, #0
 80a37b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a37ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a37bc:	2200      	movs	r2, #0
 80a37be:	611d      	str	r5, [r3, #16]
 80a37c0:	615a      	str	r2, [r3, #20]
 80a37c2:	bd38      	pop	{r3, r4, r5, pc}
 80a37c4:	2000007c 	.word	0x2000007c

080a37c8 <strcpy>:
 80a37c8:	4603      	mov	r3, r0
 80a37ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a37ce:	f803 2b01 	strb.w	r2, [r3], #1
 80a37d2:	2a00      	cmp	r2, #0
 80a37d4:	d1f9      	bne.n	80a37ca <strcpy+0x2>
 80a37d6:	4770      	bx	lr

080a37d8 <strlen>:
 80a37d8:	4603      	mov	r3, r0
 80a37da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a37de:	2a00      	cmp	r2, #0
 80a37e0:	d1fb      	bne.n	80a37da <strlen+0x2>
 80a37e2:	1a18      	subs	r0, r3, r0
 80a37e4:	3801      	subs	r0, #1
 80a37e6:	4770      	bx	lr

080a37e8 <dynalib_user>:
 80a37e8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a37f8:	0000 0000 6163 696c 7262 7461 6e69 2067     ....calibrating 
 80a3808:	6573 736e 726f 202e 6361 2e63 6400 6e6f     sensor. acc..don
 80a3818:	0065 6146 6c69 6465 7420 206f 6f63 6d6d     e.Failed to comm
 80a3828:	6e75 6369 7461 2065 6977 6874 4c20 4d53     unicate with LSM
 80a3838:	4439 3153 002e 6f44 6275 656c 632d 6568     9DS1..Double-che
 80a3848:	6b63 7720 7269 6e69 2e67 4400 6665 7561     ck wiring..Defau
 80a3858:	746c 7320 7465 6974 676e 2073 6e69 7420     lt settings in t
 80a3868:	6968 2073 6b73 7465 6863 7720 6c69 206c     his sketch will 
 80a3878:	6f77 6b72 6620 726f 6120 206e 756f 2074     work for an out 
 80a3888:	666f 7420 6568 6220 786f 4c20 4d53 4439     of the box LSM9D
 80a3898:	3153 4220 6572 6b61 756f 2c74 6220 7475     S1 Breakout, but
 80a38a8:	6d20 7961 6e20 6565 2064 6f74 6220 2065      may need to be 
 80a38b8:	6f6d 6964 6966 6465 6920 2066 6874 2065     modified if the 
 80a38c8:	6f62 7261 2064 756a 706d 7265 2073 7261     board jumpers ar
 80a38d8:	2e65 6300 6c61 6269 6172 6974 6e6f 7320     e..calibration s
 80a38e8:	6174 7472 6465 4300 6c61 6269 6172 6974     tarted.Calibrati
 80a38f8:	6e6f 6620 6e69 7369 6568 0064 6553 7574     on finished.Setu
 80a3908:	0070 5148 6f52 7475 7265 505f 4255 494c     p.HQRouter_PUBLI
 80a3918:	4853 2f00 7a69 797a 6150 7472 6369 656c     SH./izzyParticle
 80a3928:	6900 206e 6573 646e 6d20 7465 6f68 0064     .in send method.
 80a3938:	6c66 7875 2058 203a 6600 756c 5978 3a20     fluxX : .fluxY :
 80a3948:	0020 6c66 7875 205a 203a 2000                     .fluxZ : .

080a3953 <CSWTCH.57>:
 80a3953:	0020 0000 0040 0000 0a60 2d2d 2d2d 0000      ...@...`.----..
	...

080a3964 <_ZTV7TwoWire>:
	...
 80a396c:	16b3 080a 16fd 080a 16d5 080a 16b5 080a     ................
 80a397c:	16dd 080a 16e5 080a 16ed 080a 16f5 080a     ................

080a398c <_ZTV9IPAddress>:
	...
 80a3994:	1773 080a 00b3 080a 00d5 080a 6162 6475     s...........baud
 80a39a4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a39b4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a39c4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a39d4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a39e4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a39f4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3a04:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3a14:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3a24:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3a34:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3a44:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3a54:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3a64:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3a74:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3a84 <_ZTVN5spark12NetworkClassE>:
	...
 80a3a8c:	1851 080a 185b 080a 1865 080a 186f 080a     Q...[...e...o...
 80a3a9c:	1879 080a 1885 080a 1891 080a 189d 080a     y...............
 80a3aac:	18a5 080a 18af 080a 18b9 080a               ............

080a3ab8 <_ZTV8SPIClass>:
	...
 80a3ac0:	1a5d 080a 1a5f 080a                         ]..._...

080a3ac8 <_ZL14clock_divisors>:
 80a3ac8:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a3ad8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3ae8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3af8:	0000 0000                                   ....

080a3afc <_ZTV3UDP>:
	...
 80a3b04:	00b5 080a 00e3 080a 1cdb 080a 1dfb 080a     ................
 80a3b14:	1cd3 080a 1cf1 080a 1d0f 080a 1d29 080a     ............)...
 80a3b24:	1d4b 080a 1d95 080a 1db7 080a 1f4d 080a     K...........M...
 80a3b34:	1e61 080a 1cbd 080a 205d 080a 1ec9 080a     a.......] ......
 80a3b44:	1f85 080a 208b 080a 1e25 080a 1cc9 080a     ..... ..%.......
 80a3b54:	1f2d 080a 1ccf 080a 1d2b 080a fff0 ffff     -.......+.......
 80a3b64:	0000 0000 1d43 080a                         ....C...

080a3b6c <_ZTV11USARTSerial>:
	...
 80a3b74:	20c3 080a 2113 080a 2121 080a 1935 080a     . ...!..!!..5...
 80a3b84:	20d7 080a 20f9 080a 20e5 080a 210d 080a     . ... ... ...!..
 80a3b94:	20c5 080a 20c9 080a                         . ... ..

080a3b9c <_ZTV9USBSerial>:
	...
 80a3ba4:	21c9 080a 2219 080a 2227 080a 1935 080a     .!..."..'"..5...
 80a3bb4:	2205 080a 21cb 080a 21e1 080a 2213 080a     ."...!...!..."..
 80a3bc4:	21f7 080a 21c5 080a                         .!...!..

080a3bcc <_ZTVN5spark9WiFiClassE>:
	...
 80a3bd4:	2417 080a 240d 080a 2403 080a 2375 080a     .$...$...$..u#..
 80a3be4:	23f7 080a 23eb 080a 23df 080a 23d7 080a     .#...#...#...#..
 80a3bf4:	23cd 080a 23c3 080a 237f 080a               .#...#...#..

080a3c00 <__sf_fake_stdin>:
	...

080a3c20 <__sf_fake_stdout>:
	...

080a3c40 <__sf_fake_stderr>:
	...
 80a3c60:	0043                                        C.

080a3c62 <link_const_variable_data_end>:
	...

080a3c64 <link_constructors_location>:
 80a3c64:	080a053d 	.word	0x080a053d
 80a3c68:	080a0615 	.word	0x080a0615
 80a3c6c:	080a101d 	.word	0x080a101d
 80a3c70:	080a1231 	.word	0x080a1231
 80a3c74:	080a1841 	.word	0x080a1841
 80a3c78:	080a1921 	.word	0x080a1921
 80a3c7c:	080a1a41 	.word	0x080a1a41
 80a3c80:	080a1c91 	.word	0x080a1c91
 80a3c84:	080a1ca9 	.word	0x080a1ca9
 80a3c88:	080a2421 	.word	0x080a2421
 80a3c8c:	080a2649 	.word	0x080a2649
 80a3c90:	080a2679 	.word	0x080a2679
 80a3c94:	080a26cd 	.word	0x080a26cd
 80a3c98:	080a2791 	.word	0x080a2791
 80a3c9c:	080a2815 	.word	0x080a2815
 80a3ca0:	080a2899 	.word	0x080a2899

080a3ca4 <link_constructors_end>:
	...
