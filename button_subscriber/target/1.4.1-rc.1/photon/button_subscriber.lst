
/Users/ninjacat/Documents/Particle/TakeHeed/button_subscriber/target/1.4.1-rc.1/photon/button_subscriber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002404  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2420  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a2424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f4  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a24a0  080a24a0  000224a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a24c8  080a24c8  000224c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000aa1ab  00000000  00000000  000224cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000faa2  00000000  00000000  000cc677  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014315  00000000  00000000  000dc119  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002040  00000000  00000000  000f042e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000033c8  00000000  00000000  000f246e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002507f  00000000  00000000  000f5836  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023ad0  00000000  00000000  0011a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5959  00000000  00000000  0013e385  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ba10  00000000  00000000  001e3ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 ffb7 	bl	80a1fa0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 ffbc 	bl	80a1fb6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2424 	.word	0x080a2424
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000270 	.word	0x20000270
 80a0058:	20000270 	.word	0x20000270

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb79 	bl	80a1754 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a23e0 	.word	0x080a23e0
 80a0084:	080a2418 	.word	0x080a2418

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b838 	b.w	80a00fc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8e5 	bl	80a025c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bb1f 	b.w	80a16d8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bc95 	b.w	80a09c8 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f000 bc93 	b.w	80a09c8 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bc99 	b.w	80a09d8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b6:	4770      	bx	lr

080a00b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <_ZN3UDPD1Ev+0x1c>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	3364      	adds	r3, #100	; 0x64
 80a00c2:	6103      	str	r3, [r0, #16]
 80a00c4:	f000 ff88 	bl	80a0fd8 <_ZN3UDP4stopEv>
 80a00c8:	4620      	mov	r0, r4
 80a00ca:	f001 f8bd 	bl	80a1248 <_ZN3UDP13releaseBufferEv>
 80a00ce:	4620      	mov	r0, r4
 80a00d0:	bd10      	pop	{r4, pc}
 80a00d2:	bf00      	nop
 80a00d4:	080a2280 	.word	0x080a2280

080a00d8 <_ZN9IPAddressD0Ev>:
 80a00d8:	b510      	push	{r4, lr}
 80a00da:	4604      	mov	r4, r0
 80a00dc:	2118      	movs	r1, #24
 80a00de:	f001 fc26 	bl	80a192e <_ZdlPvj>
 80a00e2:	4620      	mov	r0, r4
 80a00e4:	bd10      	pop	{r4, pc}

080a00e6 <_ZN3UDPD0Ev>:
 80a00e6:	b510      	push	{r4, lr}
 80a00e8:	4604      	mov	r4, r0
 80a00ea:	f7ff ffe5 	bl	80a00b8 <_ZN3UDPD1Ev>
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	214c      	movs	r1, #76	; 0x4c
 80a00f2:	f001 fc1c 	bl	80a192e <_ZdlPvj>
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	bd10      	pop	{r4, pc}
	...

080a00fc <setup>:
int buttonState = 0;         // variable for reading the pushbutton status
int LEDpin = D2;
int buttonPin = D0;

int testPin =D7;
void setup() {
 80a00fc:	b570      	push	{r4, r5, r6, lr}
 80a00fe:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
 80a0100:	f001 fa04 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0104:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0108:	f001 f9ee 	bl	80a14e8 <_ZN9USBSerial5beginEl>
   bool pressed = false;
  
    // initialize the LED pin as an output:
  pinMode(LEDpin, OUTPUT);     
 80a010c:	4b30      	ldr	r3, [pc, #192]	; (80a01d0 <setup+0xd4>)
 80a010e:	2101      	movs	r1, #1
 80a0110:	8818      	ldrh	r0, [r3, #0]
 80a0112:	f001 fb6f 	bl	80a17f4 <pinMode>
    pinMode(testPin, OUTPUT);                                            
 80a0116:	4b2f      	ldr	r3, [pc, #188]	; (80a01d4 <setup+0xd8>)
 80a0118:	2101      	movs	r1, #1
 80a011a:	8818      	ldrh	r0, [r3, #0]
 80a011c:	f001 fb6a 	bl	80a17f4 <pinMode>
  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);
 80a0120:	4b2d      	ldr	r3, [pc, #180]	; (80a01d8 <setup+0xdc>)
 80a0122:	2100      	movs	r1, #0
 80a0124:	8818      	ldrh	r0, [r3, #0]
 80a0126:	f001 fb65 	bl	80a17f4 <pinMode>

  

    //waiting for serial to correctly initialze and allocate memory
    //serial object
    while(!Serial);
 80a012a:	f001 f9ef 	bl	80a150c <_Z16_fetch_usbserialv>
 80a012e:	f001 f9e2 	bl	80a14f6 <_ZN9USBSerialcvbEv>
 80a0132:	2800      	cmp	r0, #0
 80a0134:	d0f9      	beq.n	80a012a <setup+0x2e>
 80a0136:	4c29      	ldr	r4, [pc, #164]	; (80a01dc <setup+0xe0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0138:	2300      	movs	r3, #0
 80a013a:	461a      	mov	r2, r3
 80a013c:	4619      	mov	r1, r3
 80a013e:	6860      	ldr	r0, [r4, #4]
 80a0140:	f000 fbe2 	bl	80a0908 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0144:	2200      	movs	r2, #0
 80a0146:	4611      	mov	r1, r2
 80a0148:	6860      	ldr	r0, [r4, #4]
 80a014a:	4d24      	ldr	r5, [pc, #144]	; (80a01dc <setup+0xe0>)
 80a014c:	f000 fbf4 	bl	80a0938 <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a0150:	2800      	cmp	r0, #0
 80a0152:	d0f7      	beq.n	80a0144 <setup+0x48>
    Serial.println("Setup");
 80a0154:	f001 f9da 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0158:	4921      	ldr	r1, [pc, #132]	; (80a01e0 <setup+0xe4>)
 80a015a:	f000 fdb8 	bl	80a0cce <_ZN5Print7printlnEPKc>
   udp.begin(localPort);
 80a015e:	4b21      	ldr	r3, [pc, #132]	; (80a01e4 <setup+0xe8>)
 80a0160:	2200      	movs	r2, #0
 80a0162:	8819      	ldrh	r1, [r3, #0]
 80a0164:	4820      	ldr	r0, [pc, #128]	; (80a01e8 <setup+0xec>)
 80a0166:	f000 ff12 	bl	80a0f8e <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a016a:	2300      	movs	r3, #0
 80a016c:	4619      	mov	r1, r3
 80a016e:	4a1f      	ldr	r2, [pc, #124]	; (80a01ec <setup+0xf0>)
 80a0170:	6868      	ldr	r0, [r5, #4]
 80a0172:	f000 fc19 	bl	80a09a8 <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a0176:	f001 f9c9 	bl	80a150c <_Z16_fetch_usbserialv>
 80a017a:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a017c:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a017e:	2240      	movs	r2, #64	; 0x40
 80a0180:	2100      	movs	r1, #0
 80a0182:	a806      	add	r0, sp, #24
 80a0184:	f001 ff17 	bl	80a1fb6 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0188:	2340      	movs	r3, #64	; 0x40
 80a018a:	aa06      	add	r2, sp, #24
 80a018c:	4621      	mov	r1, r4
 80a018e:	9400      	str	r4, [sp, #0]
 80a0190:	6868      	ldr	r0, [r5, #4]
 80a0192:	f000 fc11 	bl	80a09b8 <network_get_hostname>
        return String(buf);
 80a0196:	a906      	add	r1, sp, #24
 80a0198:	a802      	add	r0, sp, #8
 80a019a:	f000 fe53 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a019e:	9902      	ldr	r1, [sp, #8]
 80a01a0:	4630      	mov	r0, r6
 80a01a2:	f000 fd94 	bl	80a0cce <_ZN5Print7printlnEPKc>
 80a01a6:	a802      	add	r0, sp, #8
 80a01a8:	f000 fe05 	bl	80a0db6 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a01ac:	f001 f9ae 	bl	80a150c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01b0:	4622      	mov	r2, r4
 80a01b2:	4606      	mov	r6, r0
 80a01b4:	4621      	mov	r1, r4
 80a01b6:	6868      	ldr	r0, [r5, #4]
 80a01b8:	f000 fb9e 	bl	80a08f8 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01bc:	1c81      	adds	r1, r0, #2
 80a01be:	a806      	add	r0, sp, #24
 80a01c0:	f000 fc90 	bl	80a0ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01c4:	a906      	add	r1, sp, #24
 80a01c6:	4630      	mov	r0, r6
 80a01c8:	f000 fd8b 	bl	80a0ce2 <_ZN5Print7printlnERK9Printable>
    
    // Set the initial state of subscriber
    // to off just in case.
    //  Particle.publish("elaEvent", "high", 60, PUBLIC); //PUBLIC OR PRIVATE OR DEVICE ID
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);
}
 80a01cc:	b016      	add	sp, #88	; 0x58
 80a01ce:	bd70      	pop	{r4, r5, r6, pc}
 80a01d0:	20000000 	.word	0x20000000
 80a01d4:	20000004 	.word	0x20000004
 80a01d8:	20000088 	.word	0x20000088
 80a01dc:	2000016c 	.word	0x2000016c
 80a01e0:	080a204c 	.word	0x080a204c
 80a01e4:	20000008 	.word	0x20000008
 80a01e8:	2000008c 	.word	0x2000008c
 80a01ec:	080a2052 	.word	0x080a2052

080a01f0 <_Z4sendv>:
  }

  delay(period);
}

void send(){
 80a01f0:	b530      	push	{r4, r5, lr}
  IPAddress ipAddress(192,168,0,101);
 80a01f2:	2365      	movs	r3, #101	; 0x65
  }

  delay(period);
}

void send(){
 80a01f4:	b0a5      	sub	sp, #148	; 0x94
  IPAddress ipAddress(192,168,0,101);
 80a01f6:	22a8      	movs	r2, #168	; 0xa8
 80a01f8:	9300      	str	r3, [sp, #0]
 80a01fa:	21c0      	movs	r1, #192	; 0xc0
 80a01fc:	2300      	movs	r3, #0
 80a01fe:	a803      	add	r0, sp, #12
 80a0200:	f000 fc98 	bl	80a0b34 <_ZN9IPAddressC1Ehhhh>
  unsigned int localPort = 8888;

  OSCMessage outMessage("from sender Particle1");
 80a0204:	4910      	ldr	r1, [pc, #64]	; (80a0248 <_Z4sendv+0x58>)
 80a0206:	a80f      	add	r0, sp, #60	; 0x3c
 80a0208:	f000 f8ea 	bl	80a03e0 <_ZN10OSCMessageC1EPKc>
  /* OSC DATA */ 
    // outMessage.addString("a");
    outMessage.addString("a");
 80a020c:	a80f      	add	r0, sp, #60	; 0x3c
 80a020e:	490f      	ldr	r1, [pc, #60]	; (80a024c <_Z4sendv+0x5c>)
 80a0210:	f000 f92e 	bl	80a0470 <_ZN10OSCMessage9addStringEPKc>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0214:	4b0e      	ldr	r3, [pc, #56]	; (80a0250 <_Z4sendv+0x60>)
 80a0216:	ac0a      	add	r4, sp, #40	; 0x28
 80a0218:	ad04      	add	r5, sp, #16
 80a021a:	9309      	str	r3, [sp, #36]	; 0x24
 80a021c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a021e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0220:	682b      	ldr	r3, [r5, #0]
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 80a0222:	aa09      	add	r2, sp, #36	; 0x24
 80a0224:	7023      	strb	r3, [r4, #0]
 80a0226:	490b      	ldr	r1, [pc, #44]	; (80a0254 <_Z4sendv+0x64>)
 80a0228:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80a022c:	a80f      	add	r0, sp, #60	; 0x3c
 80a022e:	f000 f953 	bl	80a04d8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  Serial.println("in send method");
 80a0232:	f001 f96b 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0236:	4908      	ldr	r1, [pc, #32]	; (80a0258 <_Z4sendv+0x68>)
 80a0238:	f000 fd49 	bl	80a0cce <_ZN5Print7printlnEPKc>

void send(){
  IPAddress ipAddress(192,168,0,101);
  unsigned int localPort = 8888;

  OSCMessage outMessage("from sender Particle1");
 80a023c:	a80f      	add	r0, sp, #60	; 0x3c
 80a023e:	f000 f900 	bl	80a0442 <_ZN10OSCMessageD1Ev>
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
  Serial.println("in send method");
 80a0242:	b025      	add	sp, #148	; 0x94
 80a0244:	bd30      	pop	{r4, r5, pc}
 80a0246:	bf00      	nop
 80a0248:	080a2063 	.word	0x080a2063
 80a024c:	080a2079 	.word	0x080a2079
 80a0250:	080a2118 	.word	0x080a2118
 80a0254:	2000008c 	.word	0x2000008c
 80a0258:	080a207b 	.word	0x080a207b

080a025c <loop>:
    // to off just in case.
    //  Particle.publish("elaEvent", "high", 60, PUBLIC); //PUBLIC OR PRIVATE OR DEVICE ID
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);
}

void loop() {
 80a025c:	b570      	push	{r4, r5, r6, lr}
buttonState = digitalRead(buttonPin);
 80a025e:	4b29      	ldr	r3, [pc, #164]	; (80a0304 <loop+0xa8>)
    // to off just in case.
    //  Particle.publish("elaEvent", "high", 60, PUBLIC); //PUBLIC OR PRIVATE OR DEVICE ID
    //  Particle.publish("ledToggle", "off", 60, PUBLIC);
}

void loop() {
 80a0260:	b096      	sub	sp, #88	; 0x58
buttonState = digitalRead(buttonPin);
 80a0262:	8818      	ldrh	r0, [r3, #0]
 80a0264:	f001 faf0 	bl	80a1848 <digitalRead>
 80a0268:	4c27      	ldr	r4, [pc, #156]	; (80a0308 <loop+0xac>)
 80a026a:	4d28      	ldr	r5, [pc, #160]	; (80a030c <loop+0xb0>)
 80a026c:	6020      	str	r0, [r4, #0]
  //RECEIVE
     int size = 0;
     OSCMessage inMessage;
 80a026e:	a801      	add	r0, sp, #4
 80a0270:	f000 f898 	bl	80a03a4 <_ZN10OSCMessageC1Ev>
        
       
    // Check if data has been received
      if (udp.parsePacket() > 0) {
 80a0274:	2100      	movs	r1, #0
 80a0276:	4826      	ldr	r0, [pc, #152]	; (80a0310 <loop+0xb4>)
 80a0278:	f001 f829 	bl	80a12ce <_ZN3UDP11parsePacketEm>
 80a027c:	2800      	cmp	r0, #0
 80a027e:	dd16      	ble.n	80a02ae <loop+0x52>
        Serial.println("receiving message");
 80a0280:	f001 f944 	bl	80a150c <_Z16_fetch_usbserialv>
 80a0284:	4923      	ldr	r1, [pc, #140]	; (80a0314 <loop+0xb8>)
 80a0286:	f000 fd22 	bl	80a0cce <_ZN5Print7printlnEPKc>
       toggle=!toggle;
 80a028a:	782b      	ldrb	r3, [r5, #0]
 80a028c:	f083 0301 	eor.w	r3, r3, #1
 80a0290:	702b      	strb	r3, [r5, #0]
        // Read first char of data received
        char c;

        // Ignore other chars
        while(udp.available()){
 80a0292:	481f      	ldr	r0, [pc, #124]	; (80a0310 <loop+0xb4>)
 80a0294:	f000 fe3f 	bl	80a0f16 <_ZN3UDP9availableEv>
 80a0298:	b148      	cbz	r0, 80a02ae <loop+0x52>
          
          c=udp.read();
 80a029a:	481d      	ldr	r0, [pc, #116]	; (80a0310 <loop+0xb4>)
 80a029c:	f000 fe4a 	bl	80a0f34 <_ZN3UDP4readEv>
 80a02a0:	4606      	mov	r6, r0
          Serial.print(c);
 80a02a2:	f001 f933 	bl	80a150c <_Z16_fetch_usbserialv>
 80a02a6:	b2f1      	uxtb	r1, r6
 80a02a8:	f000 fcfc 	bl	80a0ca4 <_ZN5Print5printEc>
       toggle=!toggle;
        // Read first char of data received
        char c;

        // Ignore other chars
        while(udp.available()){
 80a02ac:	e7f1      	b.n	80a0292 <loop+0x36>
          c=udp.read();
          Serial.print(c);
        }
      }
    
    if(toggle){
 80a02ae:	7829      	ldrb	r1, [r5, #0]
 80a02b0:	4b19      	ldr	r3, [pc, #100]	; (80a0318 <loop+0xbc>)
 80a02b2:	b101      	cbz	r1, 80a02b6 <loop+0x5a>
 digitalWrite(testPin, HIGH);
 80a02b4:	2101      	movs	r1, #1
    }else{
 digitalWrite(testPin, LOW);
 80a02b6:	8818      	ldrh	r0, [r3, #0]
 80a02b8:	f001 faad 	bl	80a1816 <digitalWrite>
    }

    
  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
  if (buttonState == HIGH) {
 80a02bc:	6822      	ldr	r2, [r4, #0]
 80a02be:	4b17      	ldr	r3, [pc, #92]	; (80a031c <loop+0xc0>)
 80a02c0:	2a01      	cmp	r2, #1
 80a02c2:	d10d      	bne.n	80a02e0 <loop+0x84>

      if(pressed == true)
 80a02c4:	7819      	ldrb	r1, [r3, #0]
 80a02c6:	b9c1      	cbnz	r1, 80a02fa <loop+0x9e>
            return;
        
        // The flag has not been set so set it now.
        
        pressed = true;
 80a02c8:	701a      	strb	r2, [r3, #0]
        
        // Publish the off event.
        Serial.println("Pressing button. Publishing from button script.");
 80a02ca:	f001 f91f 	bl	80a150c <_Z16_fetch_usbserialv>
 80a02ce:	4914      	ldr	r1, [pc, #80]	; (80a0320 <loop+0xc4>)
 80a02d0:	f000 fcfd 	bl	80a0cce <_ZN5Print7printlnEPKc>
        send();
 80a02d4:	f7ff ff8c 	bl	80a01f0 <_Z4sendv>
        Serial.println("message sent");
 80a02d8:	f001 f918 	bl	80a150c <_Z16_fetch_usbserialv>
 80a02dc:	4911      	ldr	r1, [pc, #68]	; (80a0324 <loop+0xc8>)
 80a02de:	e006      	b.n	80a02ee <loop+0x92>
    //     digitalWrite(testPin, HIGH);
    // Serial.println("HIGH");
  } else {
    // turn LED off:
     
         if(pressed == false)
 80a02e0:	781a      	ldrb	r2, [r3, #0]
 80a02e2:	b152      	cbz	r2, 80a02fa <loop+0x9e>
            return;
        
        // The flag has not been set so set it now.
        
        pressed = false;
 80a02e4:	2200      	movs	r2, #0
 80a02e6:	701a      	strb	r2, [r3, #0]
        
        // Publish the on event.
        Serial.println("NOT Pressing button. Publishing from button script.");
 80a02e8:	f001 f910 	bl	80a150c <_Z16_fetch_usbserialv>
 80a02ec:	490e      	ldr	r1, [pc, #56]	; (80a0328 <loop+0xcc>)
 80a02ee:	f000 fcee 	bl	80a0cce <_ZN5Print7printlnEPKc>

    //     digitalWrite(testPin, LOW);
    // Serial.println("LOW");
  }

  delay(period);
 80a02f2:	4b0e      	ldr	r3, [pc, #56]	; (80a032c <loop+0xd0>)
 80a02f4:	6818      	ldr	r0, [r3, #0]
 80a02f6:	f000 fb7f 	bl	80a09f8 <delay>
    
  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
  if (buttonState == HIGH) {

      if(pressed == true)
            return;
 80a02fa:	a801      	add	r0, sp, #4
 80a02fc:	f000 f8a1 	bl	80a0442 <_ZN10OSCMessageD1Ev>
    //     digitalWrite(testPin, LOW);
    // Serial.println("LOW");
  }

  delay(period);
}
 80a0300:	b016      	add	sp, #88	; 0x58
 80a0302:	bd70      	pop	{r4, r5, r6, pc}
 80a0304:	20000088 	.word	0x20000088
 80a0308:	200000f0 	.word	0x200000f0
 80a030c:	20000010 	.word	0x20000010
 80a0310:	2000008c 	.word	0x2000008c
 80a0314:	080a208a 	.word	0x080a208a
 80a0318:	20000004 	.word	0x20000004
 80a031c:	20000080 	.word	0x20000080
 80a0320:	080a20ad 	.word	0x080a20ad
 80a0324:	080a209c 	.word	0x080a209c
 80a0328:	080a20a9 	.word	0x080a20a9
 80a032c:	2000000c 	.word	0x2000000c

080a0330 <_GLOBAL__sub_I_pressed>:
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
  Serial.println("in send method");
 80a0330:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0332:	f000 f983 	bl	80a063c <HAL_Pin_Map>


void setup();
void loop();

SYSTEM_THREAD(ENABLED);
 80a0336:	2100      	movs	r1, #0
 80a0338:	2001      	movs	r0, #1
 80a033a:	f000 fab9 	bl	80a08b0 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a033e:	4b0f      	ldr	r3, [pc, #60]	; (80a037c <_GLOBAL__sub_I_pressed+0x4c>)
 80a0340:	2200      	movs	r2, #0
 80a0342:	701a      	strb	r2, [r3, #0]
 80a0344:	805a      	strh	r2, [r3, #2]
 80a0346:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a034a:	4c0d      	ldr	r4, [pc, #52]	; (80a0380 <_GLOBAL__sub_I_pressed+0x50>)
 80a034c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a034e:	2002      	movs	r0, #2
 80a0350:	f000 fa9e 	bl	80a0890 <set_system_mode>
 80a0354:	4d0b      	ldr	r5, [pc, #44]	; (80a0384 <_GLOBAL__sub_I_pressed+0x54>)
 80a0356:	4620      	mov	r0, r4
 80a0358:	f000 fbb6 	bl	80a0ac8 <_ZN9IPAddressC1Ev>
 80a035c:	4620      	mov	r0, r4
int port;
UDP udp;
 80a035e:	4c0a      	ldr	r4, [pc, #40]	; (80a0388 <_GLOBAL__sub_I_pressed+0x58>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0360:	462a      	mov	r2, r5
 80a0362:	490a      	ldr	r1, [pc, #40]	; (80a038c <_GLOBAL__sub_I_pressed+0x5c>)
 80a0364:	f001 fade 	bl	80a1924 <__aeabi_atexit>
int port;
UDP udp;
 80a0368:	4620      	mov	r0, r4
 80a036a:	f000 ff4f 	bl	80a120c <_ZN3UDPC1Ev>
 80a036e:	462a      	mov	r2, r5
 80a0370:	4620      	mov	r0, r4
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
  Serial.println("in send method");
 80a0372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}


unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a0376:	4906      	ldr	r1, [pc, #24]	; (80a0390 <_GLOBAL__sub_I_pressed+0x60>)
 80a0378:	f001 bad4 	b.w	80a1924 <__aeabi_atexit>
 80a037c:	20000082 	.word	0x20000082
 80a0380:	200000d8 	.word	0x200000d8
 80a0384:	2000007c 	.word	0x2000007c
 80a0388:	2000008c 	.word	0x2000008c
 80a038c:	080a00b7 	.word	0x080a00b7
 80a0390:	080a00b9 	.word	0x080a00b9

080a0394 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a0394:	2300      	movs	r3, #0
 80a0396:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a0398:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a039a:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a039c:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a039e:	6503      	str	r3, [r0, #80]	; 0x50
 80a03a0:	4770      	bx	lr
	...

080a03a4 <_ZN10OSCMessageC1Ev>:
//SOURCE: https://github.com/ameisso/simple-OSC
#include "simple-OSC.h"

OSCMessage::OSCMessage()
 80a03a4:	b538      	push	{r3, r4, r5, lr}
 80a03a6:	4604      	mov	r4, r0
 80a03a8:	4d0c      	ldr	r5, [pc, #48]	; (80a03dc <_ZN10OSCMessageC1Ev+0x38>)
 80a03aa:	3008      	adds	r0, #8
 80a03ac:	4629      	mov	r1, r5
 80a03ae:	f000 fd49 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03b2:	4629      	mov	r1, r5
 80a03b4:	f104 0018 	add.w	r0, r4, #24
 80a03b8:	f000 fd44 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03bc:	4629      	mov	r1, r5
 80a03be:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a03c2:	f000 fd3f 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03c6:	4629      	mov	r1, r5
 80a03c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a03cc:	f000 fd3a 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	f7ff ffdf 	bl	80a0394 <_ZN10OSCMessage12setupMessageEv>
}
 80a03d6:	4620      	mov	r0, r4
 80a03d8:	bd38      	pop	{r3, r4, r5, pc}
 80a03da:	bf00      	nop
 80a03dc:	080a21ce 	.word	0x080a21ce

080a03e0 <_ZN10OSCMessageC1EPKc>:

OSCMessage::OSCMessage(const char * address)
 80a03e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03e2:	4604      	mov	r4, r0
 80a03e4:	460f      	mov	r7, r1
 80a03e6:	4d0f      	ldr	r5, [pc, #60]	; (80a0424 <_ZN10OSCMessageC1EPKc+0x44>)
 80a03e8:	3008      	adds	r0, #8
 80a03ea:	4629      	mov	r1, r5
 80a03ec:	f000 fd2a 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03f0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80a03f4:	4629      	mov	r1, r5
 80a03f6:	f104 0018 	add.w	r0, r4, #24
 80a03fa:	f000 fd23 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03fe:	4629      	mov	r1, r5
 80a0400:	4630      	mov	r0, r6
 80a0402:	f000 fd1f 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0406:	4629      	mov	r1, r5
 80a0408:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a040c:	f000 fd1a 	bl	80a0e44 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a0410:	4620      	mov	r0, r4
 80a0412:	f7ff ffbf 	bl	80a0394 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
 80a0416:	4639      	mov	r1, r7
 80a0418:	4630      	mov	r0, r6
 80a041a:	f000 fd26 	bl	80a0e6a <_ZN6StringaSEPKc>
}
 80a041e:	4620      	mov	r0, r4
 80a0420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0422:	bf00      	nop
 80a0424:	080a21ce 	.word	0x080a21ce

080a0428 <_ZN10OSCMessage5emptyEv>:
{
    empty();
}

void OSCMessage::empty()
{
 80a0428:	b510      	push	{r4, lr}
 80a042a:	4604      	mov	r4, r0
    free(incomingBuffer);
 80a042c:	6800      	ldr	r0, [r0, #0]
 80a042e:	f000 fad3 	bl	80a09d8 <free>
    free(inputDatas);
 80a0432:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0434:	f000 fad0 	bl	80a09d8 <free>
    free(outputDatas);
 80a0438:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
}
 80a043a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void OSCMessage::empty()
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
 80a043e:	f000 bacb 	b.w	80a09d8 <free>

080a0442 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a0442:	b510      	push	{r4, lr}
 80a0444:	4604      	mov	r4, r0
{
    empty();
 80a0446:	f7ff ffef 	bl	80a0428 <_ZN10OSCMessage5emptyEv>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a044a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a044e:	f000 fcb2 	bl	80a0db6 <_ZN6StringD1Ev>
 80a0452:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a0456:	f000 fcae 	bl	80a0db6 <_ZN6StringD1Ev>
 80a045a:	f104 0018 	add.w	r0, r4, #24
 80a045e:	f000 fcaa 	bl	80a0db6 <_ZN6StringD1Ev>
 80a0462:	f104 0008 	add.w	r0, r4, #8
 80a0466:	f000 fca6 	bl	80a0db6 <_ZN6StringD1Ev>
{
    empty();
}
 80a046a:	4620      	mov	r0, r4
 80a046c:	bd10      	pop	{r4, pc}
	...

080a0470 <_ZN10OSCMessage9addStringEPKc>:
        outputTypes.concat('f');
    }
}

void OSCMessage::addString(const char * value)
{
 80a0470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0472:	4604      	mov	r4, r0
    int stringLength = strlen(value);
 80a0474:	4608      	mov	r0, r1
        outputTypes.concat('f');
    }
}

void OSCMessage::addString(const char * value)
{
 80a0476:	460e      	mov	r6, r1
    int stringLength = strlen(value);
 80a0478:	f001 fdd6 	bl	80a2028 <strlen>
 80a047c:	4607      	mov	r7, r0
    int bitCount = 4*round((strlen(value)+1)/4)+4;
 80a047e:	3001      	adds	r0, #1
 80a0480:	0880      	lsrs	r0, r0, #2
 80a0482:	f001 fce1 	bl	80a1e48 <__aeabi_ui2d>
 80a0486:	2200      	movs	r2, #0
 80a0488:	4b12      	ldr	r3, [pc, #72]	; (80a04d4 <_ZN10OSCMessage9addStringEPKc+0x64>)
 80a048a:	f001 fba1 	bl	80a1bd0 <__adddf3>
 80a048e:	f001 fd51 	bl	80a1f34 <__aeabi_d2iz>
    int zeroCount = bitCount - stringLength+1;
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + bitCount );
 80a0492:	6d21      	ldr	r1, [r4, #80]	; 0x50
}

void OSCMessage::addString(const char * value)
{
    int stringLength = strlen(value);
    int bitCount = 4*round((strlen(value)+1)/4)+4;
 80a0494:	3001      	adds	r0, #1
 80a0496:	0085      	lsls	r5, r0, #2
    int zeroCount = bitCount - stringLength+1;
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + bitCount );
 80a0498:	4429      	add	r1, r5
 80a049a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a049c:	f000 faa4 	bl	80a09e8 <realloc>
 80a04a0:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
 80a04a2:	b1b0      	cbz	r0, 80a04d2 <_ZN10OSCMessage9addStringEPKc+0x62>
    {
        memset(&outputDatas[outputDatasSize],0,bitCount);
 80a04a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a04a6:	462a      	mov	r2, r5
 80a04a8:	2100      	movs	r1, #0
 80a04aa:	4418      	add	r0, r3
 80a04ac:	f001 fd83 	bl	80a1fb6 <memset>
        memcpy(&outputDatas[outputDatasSize],value,stringLength);
 80a04b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a04b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a04b4:	4631      	mov	r1, r6
 80a04b6:	463a      	mov	r2, r7
 80a04b8:	4418      	add	r0, r3
 80a04ba:	f001 fd71 	bl	80a1fa0 <memcpy>
        outputDatasSize += bitCount;
 80a04be:	6d20      	ldr	r0, [r4, #80]	; 0x50
        outputTypes.concat('s');
 80a04c0:	2173      	movs	r1, #115	; 0x73
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + bitCount );
    if (outputDatas != NULL)
    {
        memset(&outputDatas[outputDatasSize],0,bitCount);
        memcpy(&outputDatas[outputDatasSize],value,stringLength);
        outputDatasSize += bitCount;
 80a04c2:	4405      	add	r5, r0
 80a04c4:	6525      	str	r5, [r4, #80]	; 0x50
        outputTypes.concat('s');
 80a04c6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    }
}
 80a04ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (outputDatas != NULL)
    {
        memset(&outputDatas[outputDatasSize],0,bitCount);
        memcpy(&outputDatas[outputDatasSize],value,stringLength);
        outputDatasSize += bitCount;
        outputTypes.concat('s');
 80a04ce:	f000 bcf4 	b.w	80a0eba <_ZN6String6concatEc>
 80a04d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a04d4:	3fe00000 	.word	0x3fe00000

080a04d8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a04d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a04dc:	b08b      	sub	sp, #44	; 0x2c
 80a04de:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80a04e2:	af00      	add	r7, sp, #0
 80a04e4:	4681      	mov	r9, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a04e6:	4640      	mov	r0, r8
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a04e8:	460e      	mov	r6, r1
 80a04ea:	60fa      	str	r2, [r7, #12]
 80a04ec:	60bb      	str	r3, [r7, #8]
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a04ee:	f001 fd9b 	bl	80a2028 <strlen>
 80a04f2:	4605      	mov	r5, r0
 80a04f4:	3003      	adds	r0, #3
 80a04f6:	0880      	lsrs	r0, r0, #2
 80a04f8:	f001 fca6 	bl	80a1e48 <__aeabi_ui2d>
 80a04fc:	2200      	movs	r2, #0
 80a04fe:	4b40      	ldr	r3, [pc, #256]	; (80a0600 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a0500:	f001 fb66 	bl	80a1bd0 <__adddf3>
 80a0504:	f001 fd16 	bl	80a1f34 <__aeabi_d2iz>
 80a0508:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
 80a050c:	0084      	lsls	r4, r0, #2
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a050e:	4650      	mov	r0, sl
 80a0510:	f001 fd8a 	bl	80a2028 <strlen>
{
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
    int addresszeroCount = addressBitCount-strlen(outputAddress);
 80a0514:	1b65      	subs	r5, r4, r5
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a0516:	3401      	adds	r4, #1
 80a0518:	4683      	mov	fp, r0
 80a051a:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a051c:	3001      	adds	r0, #1
 80a051e:	0880      	lsrs	r0, r0, #2
 80a0520:	f001 fc92 	bl	80a1e48 <__aeabi_ui2d>
 80a0524:	2200      	movs	r2, #0
 80a0526:	4b36      	ldr	r3, [pc, #216]	; (80a0600 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a0528:	f001 fb52 	bl	80a1bd0 <__adddf3>
 80a052c:	f001 fd02 	bl	80a1f34 <__aeabi_d2iz>
 80a0530:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a0534:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a0538:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
 80a053c:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
 80a053e:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
 80a0540:	1de2      	adds	r2, r4, #7
 80a0542:	f022 0207 	bic.w	r2, r2, #7
 80a0546:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
 80a054a:	2100      	movs	r1, #0
 80a054c:	4622      	mov	r2, r4
 80a054e:	4668      	mov	r0, sp
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a0550:	603b      	str	r3, [r7, #0]
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
    memset(outputBuffer,nullChar,outputBufferSize);
 80a0552:	f001 fd30 	bl	80a1fb6 <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
 80a0556:	4640      	mov	r0, r8
 80a0558:	f001 fd66 	bl	80a2028 <strlen>
 80a055c:	4641      	mov	r1, r8
 80a055e:	4602      	mov	r2, r0
 80a0560:	4668      	mov	r0, sp
 80a0562:	f001 fd1d 	bl	80a1fa0 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
 80a0566:	4640      	mov	r0, r8
 80a0568:	f001 fd5e 	bl	80a2028 <strlen>
 80a056c:	eb0d 0205 	add.w	r2, sp, r5
 80a0570:	212c      	movs	r1, #44	; 0x2c
 80a0572:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
 80a0574:	4640      	mov	r0, r8
 80a0576:	f001 fd57 	bl	80a2028 <strlen>
 80a057a:	6078      	str	r0, [r7, #4]
 80a057c:	4650      	mov	r0, sl
 80a057e:	f001 fd53 	bl	80a2028 <strlen>
 80a0582:	687a      	ldr	r2, [r7, #4]
 80a0584:	4651      	mov	r1, sl
 80a0586:	f102 0e01 	add.w	lr, r2, #1
 80a058a:	44ae      	add	lr, r5
 80a058c:	4602      	mov	r2, r0
 80a058e:	eb0d 000e 	add.w	r0, sp, lr
 80a0592:	f001 fd05 	bl	80a1fa0 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
 80a0596:	4640      	mov	r0, r8
 80a0598:	f001 fd46 	bl	80a2028 <strlen>
 80a059c:	4680      	mov	r8, r0
 80a059e:	4650      	mov	r0, sl
 80a05a0:	f001 fd42 	bl	80a2028 <strlen>
 80a05a4:	4440      	add	r0, r8
 80a05a6:	3001      	adds	r0, #1
 80a05a8:	683b      	ldr	r3, [r7, #0]
 80a05aa:	4405      	add	r5, r0
 80a05ac:	eb05 000b 	add.w	r0, r5, fp
 80a05b0:	461a      	mov	r2, r3
 80a05b2:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
 80a05b6:	4468      	add	r0, sp
 80a05b8:	f001 fcf2 	bl	80a1fa0 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
 80a05bc:	6833      	ldr	r3, [r6, #0]
 80a05be:	68fd      	ldr	r5, [r7, #12]
 80a05c0:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a05c4:	4b0f      	ldr	r3, [pc, #60]	; (80a0604 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x12c>)
 80a05c6:	f107 0e14 	add.w	lr, r7, #20
 80a05ca:	3504      	adds	r5, #4
 80a05cc:	613b      	str	r3, [r7, #16]
 80a05ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a05d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a05d4:	682b      	ldr	r3, [r5, #0]
 80a05d6:	893a      	ldrh	r2, [r7, #8]
 80a05d8:	f88e 3000 	strb.w	r3, [lr]
 80a05dc:	f107 0110 	add.w	r1, r7, #16
 80a05e0:	4630      	mov	r0, r6
 80a05e2:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
 80a05e4:	6833      	ldr	r3, [r6, #0]
 80a05e6:	4622      	mov	r2, r4
 80a05e8:	4669      	mov	r1, sp
 80a05ea:	68db      	ldr	r3, [r3, #12]
 80a05ec:	4630      	mov	r0, r6
 80a05ee:	4798      	blx	r3
    udp.endPacket();
 80a05f0:	6833      	ldr	r3, [r6, #0]
 80a05f2:	4630      	mov	r0, r6
 80a05f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a05f6:	4798      	blx	r3
}
 80a05f8:	372c      	adds	r7, #44	; 0x2c
 80a05fa:	46bd      	mov	sp, r7
 80a05fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0600:	3fe00000 	.word	0x3fe00000
 80a0604:	080a2118 	.word	0x080a2118

080a0608 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a0608:	f000 b818 	b.w	80a063c <HAL_Pin_Map>

080a060c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <os_mutex_create+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601d0 	.word	0x080601d0

080a061c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <HAL_RNG_GetRandomNumber+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	685b      	ldr	r3, [r3, #4]
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	0806019c 	.word	0x0806019c

080a062c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	695b      	ldr	r3, [r3, #20]
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	0806019c 	.word	0x0806019c

080a063c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <HAL_Pin_Map+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	681b      	ldr	r3, [r3, #0]
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601b0 	.word	0x080601b0

080a064c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <HAL_Pin_Mode+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	689b      	ldr	r3, [r3, #8]
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601b0 	.word	0x080601b0

080a065c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <HAL_Get_Pin_Mode+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	68db      	ldr	r3, [r3, #12]
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601b0 	.word	0x080601b0

080a066c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <HAL_GPIO_Write+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	691b      	ldr	r3, [r3, #16]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601b0 	.word	0x080601b0

080a067c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <HAL_GPIO_Read+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	695b      	ldr	r3, [r3, #20]
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601b0 	.word	0x080601b0

080a068c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <HAL_I2C_Write_Data+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601ac 	.word	0x080601ac

080a069c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <HAL_I2C_Available_Data+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601ac 	.word	0x080601ac

080a06ac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <HAL_I2C_Read_Data+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601ac 	.word	0x080601ac

080a06bc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <HAL_I2C_Peek_Data+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601ac 	.word	0x080601ac

080a06cc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <HAL_I2C_Flush_Data+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601ac 	.word	0x080601ac

080a06dc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <HAL_I2C_Is_Enabled+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601ac 	.word	0x080601ac

080a06ec <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b03      	ldr	r3, [pc, #12]	; (80a06fc <HAL_I2C_Init+0x10>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a06f6:	9301      	str	r3, [sp, #4]
 80a06f8:	bd08      	pop	{r3, pc}
 80a06fa:	0000      	.short	0x0000
 80a06fc:	080601ac 	.word	0x080601ac

080a0700 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <socket_handle_valid+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	685b      	ldr	r3, [r3, #4]
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601bc 	.word	0x080601bc

080a0710 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <socket_create+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	689b      	ldr	r3, [r3, #8]
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601bc 	.word	0x080601bc

080a0720 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <socket_receivefrom+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	695b      	ldr	r3, [r3, #20]
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601bc 	.word	0x080601bc

080a0730 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <socket_sendto+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	69db      	ldr	r3, [r3, #28]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601bc 	.word	0x080601bc

080a0740 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <socket_close+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6a1b      	ldr	r3, [r3, #32]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601bc 	.word	0x080601bc

080a0750 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <socket_handle_invalid+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601bc 	.word	0x080601bc

080a0760 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <HAL_SPI_Init+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	69db      	ldr	r3, [r3, #28]
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601b4 	.word	0x080601b4

080a0770 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <HAL_SPI_Is_Enabled+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	6a1b      	ldr	r3, [r3, #32]
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601b4 	.word	0x080601b4

080a0780 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <HAL_USART_Init+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	699b      	ldr	r3, [r3, #24]
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601c4 	.word	0x080601c4

080a0790 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <HAL_USART_Write_Data+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601c4 	.word	0x080601c4

080a07a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <HAL_USART_Available_Data+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601c4 	.word	0x080601c4

080a07b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <HAL_USART_Read_Data+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601c4 	.word	0x080601c4

080a07c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <HAL_USART_Peek_Data+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601c4 	.word	0x080601c4

080a07d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <HAL_USART_Flush_Data+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601c4 	.word	0x080601c4

080a07e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <HAL_USART_Is_Enabled+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601c4 	.word	0x080601c4

080a07f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b02      	ldr	r3, [pc, #8]	; (80a07fc <HAL_USART_Available_Data_For_Write+0xc>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a07f8:	9301      	str	r3, [sp, #4]
 80a07fa:	bd08      	pop	{r3, pc}
 80a07fc:	080601c4 	.word	0x080601c4

080a0800 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <HAL_USB_USART_Init+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	681b      	ldr	r3, [r3, #0]
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601d8 	.word	0x080601d8

080a0810 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <HAL_USB_USART_Begin+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	685b      	ldr	r3, [r3, #4]
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601d8 	.word	0x080601d8

080a0820 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <HAL_USB_USART_Available_Data+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	691b      	ldr	r3, [r3, #16]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	080601d8 	.word	0x080601d8

080a0830 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	695b      	ldr	r3, [r3, #20]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	080601d8 	.word	0x080601d8

080a0840 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <HAL_USB_USART_Receive_Data+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	699b      	ldr	r3, [r3, #24]
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	080601d8 	.word	0x080601d8

080a0850 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <HAL_USB_USART_Send_Data+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	69db      	ldr	r3, [r3, #28]
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080601d8 	.word	0x080601d8

080a0860 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <HAL_USB_USART_Flush_Data+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	6a1b      	ldr	r3, [r3, #32]
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080601d8 	.word	0x080601d8

080a0870 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <HAL_USB_USART_Is_Enabled+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601d8 	.word	0x080601d8

080a0880 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <inet_gethostbyname+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601c0 	.word	0x080601c0

080a0890 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <set_system_mode+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	685b      	ldr	r3, [r3, #4]
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601a4 	.word	0x080601a4

080a08a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <system_delay_ms+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	695b      	ldr	r3, [r3, #20]
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601a4 	.word	0x080601a4

080a08b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <system_thread_set_state+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601a4 	.word	0x080601a4

080a08c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b03      	ldr	r3, [pc, #12]	; (80a08d0 <system_ctrl_set_app_request_handler+0x10>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08ca:	9301      	str	r3, [sp, #4]
 80a08cc:	bd08      	pop	{r3, pc}
 80a08ce:	0000      	.short	0x0000
 80a08d0:	080601a4 	.word	0x080601a4

080a08d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b03      	ldr	r3, [pc, #12]	; (80a08e4 <system_ctrl_set_result+0x10>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08de:	9301      	str	r3, [sp, #4]
 80a08e0:	bd08      	pop	{r3, pc}
 80a08e2:	0000      	.short	0x0000
 80a08e4:	080601a4 	.word	0x080601a4

080a08e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601cc 	.word	0x080601cc

080a08f8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <network_config+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	681b      	ldr	r3, [r3, #0]
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601c8 	.word	0x080601c8

080a0908 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <network_connect+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	685b      	ldr	r3, [r3, #4]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601c8 	.word	0x080601c8

080a0918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <network_connecting+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	689b      	ldr	r3, [r3, #8]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601c8 	.word	0x080601c8

080a0928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <network_disconnect+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	68db      	ldr	r3, [r3, #12]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c8 	.word	0x080601c8

080a0938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <network_ready+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	691b      	ldr	r3, [r3, #16]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601c8 	.word	0x080601c8

080a0948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <network_on+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	695b      	ldr	r3, [r3, #20]
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601c8 	.word	0x080601c8

080a0958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <network_off+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	699b      	ldr	r3, [r3, #24]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601c8 	.word	0x080601c8

080a0968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <network_listen+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	69db      	ldr	r3, [r3, #28]
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601c8 	.word	0x080601c8

080a0978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <network_listening+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6a1b      	ldr	r3, [r3, #32]
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601c8 	.word	0x080601c8

080a0988 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <network_set_listen_timeout+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601c8 	.word	0x080601c8

080a0998 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <network_get_listen_timeout+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601c8 	.word	0x080601c8

080a09a8 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <network_set_hostname+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601c8 	.word	0x080601c8

080a09b8 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <network_get_hostname+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601c8 	.word	0x080601c8

080a09c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <malloc+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	681b      	ldr	r3, [r3, #0]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601a0 	.word	0x080601a0

080a09d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <free+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	685b      	ldr	r3, [r3, #4]
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601a0 	.word	0x080601a0

080a09e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <realloc+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	689b      	ldr	r3, [r3, #8]
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601a0 	.word	0x080601a0

080a09f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a09f8:	2100      	movs	r1, #0
 80a09fa:	f7ff bf51 	b.w	80a08a0 <system_delay_ms>

080a09fe <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a09fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a00:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a02:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0a04:	b113      	cbz	r3, 80a0a0c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a06:	2203      	movs	r2, #3
 80a0a08:	4601      	mov	r1, r0
 80a0a0a:	4798      	blx	r3
    }
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	bd10      	pop	{r4, pc}

080a0a10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0a10:	4770      	bx	lr

080a0a12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a14:	4606      	mov	r6, r0
 80a0a16:	4615      	mov	r5, r2
 80a0a18:	460c      	mov	r4, r1
 80a0a1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a1c:	42bc      	cmp	r4, r7
 80a0a1e:	d006      	beq.n	80a0a2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0a20:	6833      	ldr	r3, [r6, #0]
 80a0a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0a26:	689b      	ldr	r3, [r3, #8]
 80a0a28:	4630      	mov	r0, r6
 80a0a2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a2c:	e7f6      	b.n	80a0a1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0a2e:	4628      	mov	r0, r5
 80a0a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0a32:	2200      	movs	r2, #0
 80a0a34:	7c00      	ldrb	r0, [r0, #16]
 80a0a36:	f7ff be29 	b.w	80a068c <HAL_I2C_Write_Data>

080a0a3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0a3a:	2100      	movs	r1, #0
 80a0a3c:	7c00      	ldrb	r0, [r0, #16]
 80a0a3e:	f7ff be2d 	b.w	80a069c <HAL_I2C_Available_Data>

080a0a42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0a42:	2100      	movs	r1, #0
 80a0a44:	7c00      	ldrb	r0, [r0, #16]
 80a0a46:	f7ff be31 	b.w	80a06ac <HAL_I2C_Read_Data>

080a0a4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0a4a:	2100      	movs	r1, #0
 80a0a4c:	7c00      	ldrb	r0, [r0, #16]
 80a0a4e:	f7ff be35 	b.w	80a06bc <HAL_I2C_Peek_Data>

080a0a52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0a52:	2100      	movs	r1, #0
 80a0a54:	7c00      	ldrb	r0, [r0, #16]
 80a0a56:	f7ff be39 	b.w	80a06cc <HAL_I2C_Flush_Data>

080a0a5a <_ZN7TwoWireD0Ev>:
 80a0a5a:	b510      	push	{r4, lr}
 80a0a5c:	4604      	mov	r4, r0
 80a0a5e:	2114      	movs	r1, #20
 80a0a60:	f000 ff65 	bl	80a192e <_ZdlPvj>
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	bd10      	pop	{r4, pc}

080a0a68 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0a68:	b510      	push	{r4, lr}
 80a0a6a:	4604      	mov	r4, r0
 80a0a6c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a72:	60a3      	str	r3, [r4, #8]
 80a0a74:	4b04      	ldr	r3, [pc, #16]	; (80a0a88 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0a76:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0a78:	7420      	strb	r0, [r4, #16]
 80a0a7a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0a7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0a7e:	f7ff fe35 	bl	80a06ec <HAL_I2C_Init>

}
 80a0a82:	4620      	mov	r0, r4
 80a0a84:	bd10      	pop	{r4, pc}
 80a0a86:	bf00      	nop
 80a0a88:	080a20f0 	.word	0x080a20f0

080a0a8c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0a8c:	2100      	movs	r1, #0
 80a0a8e:	7c00      	ldrb	r0, [r0, #16]
 80a0a90:	f7ff be24 	b.w	80a06dc <HAL_I2C_Is_Enabled>

080a0a94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a96:	460f      	mov	r7, r1
 80a0a98:	f100 0608 	add.w	r6, r0, #8
 80a0a9c:	1d05      	adds	r5, r0, #4
 80a0a9e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0aa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0aa4:	220a      	movs	r2, #10
 80a0aa6:	4638      	mov	r0, r7
 80a0aa8:	f000 f94f 	bl	80a0d4a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0aac:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0aae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ab0:	d007      	beq.n	80a0ac2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0ab2:	2c00      	cmp	r4, #0
 80a0ab4:	d0f4      	beq.n	80a0aa0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0ab6:	212e      	movs	r1, #46	; 0x2e
 80a0ab8:	4638      	mov	r0, r7
 80a0aba:	f000 f8f3 	bl	80a0ca4 <_ZN5Print5printEc>
 80a0abe:	4404      	add	r4, r0
 80a0ac0:	e7ee      	b.n	80a0aa0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0ac2:	4620      	mov	r0, r4
 80a0ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0ac8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0ac8:	b510      	push	{r4, lr}
 80a0aca:	4604      	mov	r4, r0
 80a0acc:	4b04      	ldr	r3, [pc, #16]	; (80a0ae0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0ace:	2211      	movs	r2, #17
 80a0ad0:	f840 3b04 	str.w	r3, [r0], #4
 80a0ad4:	2100      	movs	r1, #0
 80a0ad6:	f001 fa6e 	bl	80a1fb6 <memset>
{
    clear();
}
 80a0ada:	4620      	mov	r0, r4
 80a0adc:	bd10      	pop	{r4, pc}
 80a0ade:	bf00      	nop
 80a0ae0:	080a2118 	.word	0x080a2118

080a0ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0ae4:	4603      	mov	r3, r0
 80a0ae6:	4a07      	ldr	r2, [pc, #28]	; (80a0b04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0ae8:	b510      	push	{r4, lr}
 80a0aea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0aee:	f101 0210 	add.w	r2, r1, #16
 80a0af2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0af6:	4291      	cmp	r1, r2
 80a0af8:	f843 4b04 	str.w	r4, [r3], #4
 80a0afc:	d1f9      	bne.n	80a0af2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0afe:	780a      	ldrb	r2, [r1, #0]
 80a0b00:	701a      	strb	r2, [r3, #0]
}
 80a0b02:	bd10      	pop	{r4, pc}
 80a0b04:	080a2118 	.word	0x080a2118

080a0b08 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b08:	4a02      	ldr	r2, [pc, #8]	; (80a0b14 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0b0a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b0c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0b0e:	2204      	movs	r2, #4
 80a0b10:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0b12:	4770      	bx	lr
 80a0b14:	080a2118 	.word	0x080a2118

080a0b18 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0b18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0b22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0b26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0b2a:	2304      	movs	r3, #4
 80a0b2c:	6041      	str	r1, [r0, #4]
 80a0b2e:	7503      	strb	r3, [r0, #20]
 80a0b30:	bd10      	pop	{r4, pc}
	...

080a0b34 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b36:	4d04      	ldr	r5, [pc, #16]	; (80a0b48 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0b38:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0b3a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0b3e:	9500      	str	r5, [sp, #0]
 80a0b40:	f7ff ffea 	bl	80a0b18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b44:	b003      	add	sp, #12
 80a0b46:	bd30      	pop	{r4, r5, pc}
 80a0b48:	080a2118 	.word	0x080a2118

080a0b4c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0b4e:	780d      	ldrb	r5, [r1, #0]
 80a0b50:	788b      	ldrb	r3, [r1, #2]
 80a0b52:	784a      	ldrb	r2, [r1, #1]
 80a0b54:	78c9      	ldrb	r1, [r1, #3]
 80a0b56:	9100      	str	r1, [sp, #0]
 80a0b58:	4629      	mov	r1, r5
 80a0b5a:	f7ff ffdd 	bl	80a0b18 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a0b5e:	b003      	add	sp, #12
 80a0b60:	bd30      	pop	{r4, r5, pc}
	...

080a0b64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b64:	4a01      	ldr	r2, [pc, #4]	; (80a0b6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b68:	601a      	str	r2, [r3, #0]
 80a0b6a:	4770      	bx	lr
 80a0b6c:	080a219a 	.word	0x080a219a
 80a0b70:	200000f4 	.word	0x200000f4

080a0b74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0b74:	2300      	movs	r3, #0
 80a0b76:	461a      	mov	r2, r3
 80a0b78:	6840      	ldr	r0, [r0, #4]
 80a0b7a:	f7ff bec5 	b.w	80a0908 <network_connect>

080a0b7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0b7e:	2200      	movs	r2, #0
 80a0b80:	2102      	movs	r1, #2
 80a0b82:	6840      	ldr	r0, [r0, #4]
 80a0b84:	f7ff bed0 	b.w	80a0928 <network_disconnect>

080a0b88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0b88:	2200      	movs	r2, #0
 80a0b8a:	4611      	mov	r1, r2
 80a0b8c:	6840      	ldr	r0, [r0, #4]
 80a0b8e:	f7ff bec3 	b.w	80a0918 <network_connecting>

080a0b92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0b92:	2200      	movs	r2, #0
 80a0b94:	4611      	mov	r1, r2
 80a0b96:	6840      	ldr	r0, [r0, #4]
 80a0b98:	f7ff bece 	b.w	80a0938 <network_ready>

080a0b9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0b9c:	2300      	movs	r3, #0
 80a0b9e:	461a      	mov	r2, r3
 80a0ba0:	4619      	mov	r1, r3
 80a0ba2:	6840      	ldr	r0, [r0, #4]
 80a0ba4:	f7ff bed0 	b.w	80a0948 <network_on>

080a0ba8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0ba8:	2300      	movs	r3, #0
 80a0baa:	461a      	mov	r2, r3
 80a0bac:	4619      	mov	r1, r3
 80a0bae:	6840      	ldr	r0, [r0, #4]
 80a0bb0:	f7ff bed2 	b.w	80a0958 <network_off>

080a0bb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0bb4:	2200      	movs	r2, #0
 80a0bb6:	f081 0101 	eor.w	r1, r1, #1
 80a0bba:	6840      	ldr	r0, [r0, #4]
 80a0bbc:	f7ff bed4 	b.w	80a0968 <network_listen>

080a0bc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0bc0:	2200      	movs	r2, #0
 80a0bc2:	6840      	ldr	r0, [r0, #4]
 80a0bc4:	f7ff bee0 	b.w	80a0988 <network_set_listen_timeout>

080a0bc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0bc8:	2200      	movs	r2, #0
 80a0bca:	4611      	mov	r1, r2
 80a0bcc:	6840      	ldr	r0, [r0, #4]
 80a0bce:	f7ff bee3 	b.w	80a0998 <network_get_listen_timeout>

080a0bd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0bd2:	2200      	movs	r2, #0
 80a0bd4:	4611      	mov	r1, r2
 80a0bd6:	6840      	ldr	r0, [r0, #4]
 80a0bd8:	f7ff bece 	b.w	80a0978 <network_listening>

080a0bdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0bdc:	b570      	push	{r4, r5, r6, lr}
 80a0bde:	4616      	mov	r6, r2
 80a0be0:	b08e      	sub	sp, #56	; 0x38
 80a0be2:	4604      	mov	r4, r0
    IPAddress addr;
 80a0be4:	a808      	add	r0, sp, #32
 80a0be6:	f7ff ff6f 	bl	80a0ac8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0bea:	2211      	movs	r2, #17
 80a0bec:	2100      	movs	r1, #0
 80a0bee:	a803      	add	r0, sp, #12
 80a0bf0:	f001 f9e1 	bl	80a1fb6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0bf4:	4630      	mov	r0, r6
 80a0bf6:	f001 fa17 	bl	80a2028 <strlen>
 80a0bfa:	2500      	movs	r5, #0
 80a0bfc:	4b0a      	ldr	r3, [pc, #40]	; (80a0c28 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0bfe:	9500      	str	r5, [sp, #0]
 80a0c00:	b281      	uxth	r1, r0
 80a0c02:	685b      	ldr	r3, [r3, #4]
 80a0c04:	aa03      	add	r2, sp, #12
 80a0c06:	4630      	mov	r0, r6
 80a0c08:	f7ff fe3a 	bl	80a0880 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c0c:	b120      	cbz	r0, 80a0c18 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0c0e:	4629      	mov	r1, r5
 80a0c10:	4620      	mov	r0, r4
 80a0c12:	f7ff ff79 	bl	80a0b08 <_ZN9IPAddressC1Em>
 80a0c16:	e003      	b.n	80a0c20 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0c18:	a903      	add	r1, sp, #12
 80a0c1a:	4620      	mov	r0, r4
 80a0c1c:	f7ff ff62 	bl	80a0ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0c20:	4620      	mov	r0, r4
 80a0c22:	b00e      	add	sp, #56	; 0x38
 80a0c24:	bd70      	pop	{r4, r5, r6, pc}
 80a0c26:	bf00      	nop
 80a0c28:	2000016c 	.word	0x2000016c

080a0c2c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0c2c:	4b03      	ldr	r3, [pc, #12]	; (80a0c3c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0c2e:	4a04      	ldr	r2, [pc, #16]	; (80a0c40 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0c30:	2804      	cmp	r0, #4
 80a0c32:	bf0c      	ite	eq
 80a0c34:	4610      	moveq	r0, r2
 80a0c36:	4618      	movne	r0, r3
 80a0c38:	4770      	bx	lr
 80a0c3a:	bf00      	nop
 80a0c3c:	200000f8 	.word	0x200000f8
 80a0c40:	2000016c 	.word	0x2000016c

080a0c44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0c44:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0c46:	4a03      	ldr	r2, [pc, #12]	; (80a0c54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0c48:	601a      	str	r2, [r3, #0]
 80a0c4a:	2200      	movs	r2, #0
 80a0c4c:	605a      	str	r2, [r3, #4]
 80a0c4e:	4770      	bx	lr
 80a0c50:	200000f8 	.word	0x200000f8
 80a0c54:	080a2210 	.word	0x080a2210

080a0c58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c5a:	4606      	mov	r6, r0
 80a0c5c:	460d      	mov	r5, r1
 80a0c5e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0c60:	2400      	movs	r4, #0
  while (size--) {
 80a0c62:	42bd      	cmp	r5, r7
 80a0c64:	d00c      	beq.n	80a0c80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0c66:	6833      	ldr	r3, [r6, #0]
 80a0c68:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0c6c:	689b      	ldr	r3, [r3, #8]
 80a0c6e:	4630      	mov	r0, r6
 80a0c70:	4798      	blx	r3
     if (chunk>=0)
 80a0c72:	2800      	cmp	r0, #0
 80a0c74:	db01      	blt.n	80a0c7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0c76:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0c78:	e7f3      	b.n	80a0c62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0c7a:	2c00      	cmp	r4, #0
 80a0c7c:	bf08      	it	eq
 80a0c7e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0c80:	4620      	mov	r0, r4
 80a0c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0c84:	b570      	push	{r4, r5, r6, lr}
 80a0c86:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0c88:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0c8a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0c8c:	b149      	cbz	r1, 80a0ca2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0c8e:	f001 f9cb 	bl	80a2028 <strlen>
 80a0c92:	682b      	ldr	r3, [r5, #0]
 80a0c94:	4602      	mov	r2, r0
 80a0c96:	4621      	mov	r1, r4
 80a0c98:	4628      	mov	r0, r5
    }
 80a0c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0c9e:	68db      	ldr	r3, [r3, #12]
 80a0ca0:	4718      	bx	r3
    }
 80a0ca2:	bd70      	pop	{r4, r5, r6, pc}

080a0ca4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0ca4:	6803      	ldr	r3, [r0, #0]
 80a0ca6:	689b      	ldr	r3, [r3, #8]
 80a0ca8:	4718      	bx	r3

080a0caa <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a0caa:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a0cac:	680a      	ldr	r2, [r1, #0]
 80a0cae:	4601      	mov	r1, r0
 80a0cb0:	6812      	ldr	r2, [r2, #0]
 80a0cb2:	4618      	mov	r0, r3
 80a0cb4:	4710      	bx	r2

080a0cb6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0cb6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0cb8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0cba:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0cbc:	f7ff fff2 	bl	80a0ca4 <_ZN5Print5printEc>
  n += print('\n');
 80a0cc0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0cc2:	4604      	mov	r4, r0
  n += print('\n');
 80a0cc4:	4628      	mov	r0, r5
 80a0cc6:	f7ff ffed 	bl	80a0ca4 <_ZN5Print5printEc>
  return n;
}
 80a0cca:	4420      	add	r0, r4
 80a0ccc:	bd38      	pop	{r3, r4, r5, pc}

080a0cce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0cce:	b538      	push	{r3, r4, r5, lr}
 80a0cd0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0cd2:	f7ff ffd7 	bl	80a0c84 <_ZN5Print5writeEPKc>
 80a0cd6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0cd8:	4628      	mov	r0, r5
 80a0cda:	f7ff ffec 	bl	80a0cb6 <_ZN5Print7printlnEv>
  return n;
}
 80a0cde:	4420      	add	r0, r4
 80a0ce0:	bd38      	pop	{r3, r4, r5, pc}

080a0ce2 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a0ce2:	b538      	push	{r3, r4, r5, lr}
 80a0ce4:	4605      	mov	r5, r0
   size_t n = print(x);
 80a0ce6:	f7ff ffe0 	bl	80a0caa <_ZN5Print5printERK9Printable>
 80a0cea:	4604      	mov	r4, r0
   n += println();
 80a0cec:	4628      	mov	r0, r5
 80a0cee:	f7ff ffe2 	bl	80a0cb6 <_ZN5Print7printlnEv>
   return n;
 }
 80a0cf2:	4420      	add	r0, r4
 80a0cf4:	bd38      	pop	{r3, r4, r5, pc}

080a0cf6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0cf6:	2a01      	cmp	r2, #1
 80a0cf8:	bf98      	it	ls
 80a0cfa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0cfc:	b530      	push	{r4, r5, lr}
 80a0cfe:	460b      	mov	r3, r1
 80a0d00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0d02:	2100      	movs	r1, #0
 80a0d04:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0d08:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0d0c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0d10:	fb05 3312 	mls	r3, r5, r2, r3
 80a0d14:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0d16:	2b09      	cmp	r3, #9
 80a0d18:	bf94      	ite	ls
 80a0d1a:	3330      	addls	r3, #48	; 0x30
 80a0d1c:	3337      	addhi	r3, #55	; 0x37
 80a0d1e:	b2db      	uxtb	r3, r3
 80a0d20:	4621      	mov	r1, r4
 80a0d22:	f804 3901 	strb.w	r3, [r4], #-1
 80a0d26:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0d28:	2d00      	cmp	r5, #0
 80a0d2a:	d1ef      	bne.n	80a0d0c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0d2c:	f7ff ffaa 	bl	80a0c84 <_ZN5Print5writeEPKc>
}
 80a0d30:	b00b      	add	sp, #44	; 0x2c
 80a0d32:	bd30      	pop	{r4, r5, pc}

080a0d34 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0d34:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0d36:	b922      	cbnz	r2, 80a0d42 <_ZN5Print5printEmi+0xe>
 80a0d38:	6803      	ldr	r3, [r0, #0]
 80a0d3a:	b2c9      	uxtb	r1, r1
 80a0d3c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0d3e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0d40:	4718      	bx	r3
  else return printNumber(n, base);
 80a0d42:	b2d2      	uxtb	r2, r2
}
 80a0d44:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0d46:	f7ff bfd6 	b.w	80a0cf6 <_ZN5Print11printNumberEmh>

080a0d4a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0d4a:	f7ff bff3 	b.w	80a0d34 <_ZN5Print5printEmi>

080a0d4e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0d4e:	b510      	push	{r4, lr}
 80a0d50:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d52:	f7ff fe54 	bl	80a09fe <_ZNSt14_Function_baseD1Ev>
 80a0d56:	4620      	mov	r0, r4
 80a0d58:	bd10      	pop	{r4, pc}
	...

080a0d5c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d5c:	4803      	ldr	r0, [pc, #12]	; (80a0d6c <_GLOBAL__sub_I_RGB+0x10>)
 80a0d5e:	2300      	movs	r3, #0
 80a0d60:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0d62:	4a03      	ldr	r2, [pc, #12]	; (80a0d70 <_GLOBAL__sub_I_RGB+0x14>)
 80a0d64:	4903      	ldr	r1, [pc, #12]	; (80a0d74 <_GLOBAL__sub_I_RGB+0x18>)
 80a0d66:	f000 bddd 	b.w	80a1924 <__aeabi_atexit>
 80a0d6a:	bf00      	nop
 80a0d6c:	20000100 	.word	0x20000100
 80a0d70:	2000007c 	.word	0x2000007c
 80a0d74:	080a0d4f 	.word	0x080a0d4f

080a0d78 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0d78:	4770      	bx	lr

080a0d7a <_ZN8SPIClassD0Ev>:
 80a0d7a:	b510      	push	{r4, lr}
 80a0d7c:	4604      	mov	r4, r0
 80a0d7e:	2110      	movs	r1, #16
 80a0d80:	f000 fdd5 	bl	80a192e <_ZdlPvj>
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	bd10      	pop	{r4, pc}

080a0d88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0d88:	b570      	push	{r4, r5, r6, lr}
 80a0d8a:	4604      	mov	r4, r0
 80a0d8c:	460e      	mov	r6, r1
 80a0d8e:	4b07      	ldr	r3, [pc, #28]	; (80a0dac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0d90:	2500      	movs	r5, #0
 80a0d92:	6003      	str	r3, [r0, #0]
 80a0d94:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0d98:	f7ff fc38 	bl	80a060c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0d9c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0d9e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0da0:	f7ff fcde 	bl	80a0760 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0da4:	60a5      	str	r5, [r4, #8]
}
 80a0da6:	4620      	mov	r0, r4
 80a0da8:	bd70      	pop	{r4, r5, r6, pc}
 80a0daa:	bf00      	nop
 80a0dac:	080a2244 	.word	0x080a2244

080a0db0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0db0:	7900      	ldrb	r0, [r0, #4]
 80a0db2:	f7ff bcdd 	b.w	80a0770 <HAL_SPI_Is_Enabled>

080a0db6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0db6:	b510      	push	{r4, lr}
 80a0db8:	4604      	mov	r4, r0
{
	free(buffer);
 80a0dba:	6800      	ldr	r0, [r0, #0]
 80a0dbc:	f7ff fe0c 	bl	80a09d8 <free>
}
 80a0dc0:	4620      	mov	r0, r4
 80a0dc2:	bd10      	pop	{r4, pc}

080a0dc4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0dc4:	b510      	push	{r4, lr}
 80a0dc6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0dc8:	6800      	ldr	r0, [r0, #0]
 80a0dca:	b108      	cbz	r0, 80a0dd0 <_ZN6String10invalidateEv+0xc>
 80a0dcc:	f7ff fe04 	bl	80a09d8 <free>
	buffer = NULL;
 80a0dd0:	2300      	movs	r3, #0
 80a0dd2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0dd4:	60a3      	str	r3, [r4, #8]
 80a0dd6:	6063      	str	r3, [r4, #4]
 80a0dd8:	bd10      	pop	{r4, pc}

080a0dda <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0dda:	b538      	push	{r3, r4, r5, lr}
 80a0ddc:	4604      	mov	r4, r0
 80a0dde:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0de0:	6800      	ldr	r0, [r0, #0]
 80a0de2:	3101      	adds	r1, #1
 80a0de4:	f7ff fe00 	bl	80a09e8 <realloc>
	if (newbuffer) {
 80a0de8:	b110      	cbz	r0, 80a0df0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0dea:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0dee:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0df0:	bd38      	pop	{r3, r4, r5, pc}

080a0df2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0df2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0df4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0df6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0df8:	b113      	cbz	r3, 80a0e00 <_ZN6String7reserveEj+0xe>
 80a0dfa:	6843      	ldr	r3, [r0, #4]
 80a0dfc:	428b      	cmp	r3, r1
 80a0dfe:	d207      	bcs.n	80a0e10 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	f7ff ffea 	bl	80a0dda <_ZN6String12changeBufferEj>
 80a0e06:	b120      	cbz	r0, 80a0e12 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0e08:	68a3      	ldr	r3, [r4, #8]
 80a0e0a:	b90b      	cbnz	r3, 80a0e10 <_ZN6String7reserveEj+0x1e>
 80a0e0c:	6822      	ldr	r2, [r4, #0]
 80a0e0e:	7013      	strb	r3, [r2, #0]
 80a0e10:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0e12:	bd10      	pop	{r4, pc}

080a0e14 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0e14:	b570      	push	{r4, r5, r6, lr}
 80a0e16:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0e18:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0e1a:	4604      	mov	r4, r0
 80a0e1c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0e1e:	f7ff ffe8 	bl	80a0df2 <_ZN6String7reserveEj>
 80a0e22:	b918      	cbnz	r0, 80a0e2c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0e24:	4620      	mov	r0, r4
 80a0e26:	f7ff ffcd 	bl	80a0dc4 <_ZN6String10invalidateEv>
		return *this;
 80a0e2a:	e009      	b.n	80a0e40 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0e2c:	462a      	mov	r2, r5
 80a0e2e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0e30:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0e32:	6820      	ldr	r0, [r4, #0]
 80a0e34:	f001 f8b4 	bl	80a1fa0 <memcpy>
	buffer[len] = 0;
 80a0e38:	6822      	ldr	r2, [r4, #0]
 80a0e3a:	68a3      	ldr	r3, [r4, #8]
 80a0e3c:	2100      	movs	r1, #0
 80a0e3e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0e40:	4620      	mov	r0, r4
 80a0e42:	bd70      	pop	{r4, r5, r6, pc}

080a0e44 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0e44:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0e46:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0e48:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0e4a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0e4c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0e4e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0e50:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0e52:	460d      	mov	r5, r1
 80a0e54:	b139      	cbz	r1, 80a0e66 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0e56:	4608      	mov	r0, r1
 80a0e58:	f001 f8e6 	bl	80a2028 <strlen>
 80a0e5c:	4629      	mov	r1, r5
 80a0e5e:	4602      	mov	r2, r0
 80a0e60:	4620      	mov	r0, r4
 80a0e62:	f7ff ffd7 	bl	80a0e14 <_ZN6String4copyEPKcj>
}
 80a0e66:	4620      	mov	r0, r4
 80a0e68:	bd38      	pop	{r3, r4, r5, pc}

080a0e6a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0e6a:	b538      	push	{r3, r4, r5, lr}
 80a0e6c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0e6e:	460c      	mov	r4, r1
 80a0e70:	b141      	cbz	r1, 80a0e84 <_ZN6StringaSEPKc+0x1a>
 80a0e72:	4608      	mov	r0, r1
 80a0e74:	f001 f8d8 	bl	80a2028 <strlen>
 80a0e78:	4621      	mov	r1, r4
 80a0e7a:	4602      	mov	r2, r0
 80a0e7c:	4628      	mov	r0, r5
 80a0e7e:	f7ff ffc9 	bl	80a0e14 <_ZN6String4copyEPKcj>
 80a0e82:	e001      	b.n	80a0e88 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0e84:	f7ff ff9e 	bl	80a0dc4 <_ZN6String10invalidateEv>

	return *this;
}
 80a0e88:	4628      	mov	r0, r5
 80a0e8a:	bd38      	pop	{r3, r4, r5, pc}

080a0e8c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a0e8c:	b570      	push	{r4, r5, r6, lr}
 80a0e8e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a0e90:	460e      	mov	r6, r1
 80a0e92:	b909      	cbnz	r1, 80a0e98 <_ZN6String6concatEPKcj+0xc>
 80a0e94:	2000      	movs	r0, #0
 80a0e96:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a0e98:	b16a      	cbz	r2, 80a0eb6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a0e9a:	6883      	ldr	r3, [r0, #8]
 80a0e9c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a0e9e:	4629      	mov	r1, r5
 80a0ea0:	f7ff ffa7 	bl	80a0df2 <_ZN6String7reserveEj>
 80a0ea4:	2800      	cmp	r0, #0
 80a0ea6:	d0f5      	beq.n	80a0e94 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a0ea8:	6820      	ldr	r0, [r4, #0]
 80a0eaa:	68a3      	ldr	r3, [r4, #8]
 80a0eac:	4631      	mov	r1, r6
 80a0eae:	4418      	add	r0, r3
 80a0eb0:	f001 f8b2 	bl	80a2018 <strcpy>
	len = newlen;
 80a0eb4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a0eb6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0eb8:	bd70      	pop	{r4, r5, r6, pc}

080a0eba <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a0eba:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a0ebc:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a0ebe:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a0ec2:	2201      	movs	r2, #1
 80a0ec4:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a0ec6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a0eca:	f7ff ffdf 	bl	80a0e8c <_ZN6String6concatEPKcj>
}
 80a0ece:	b003      	add	sp, #12
 80a0ed0:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ed4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0ed8:	4b03      	ldr	r3, [pc, #12]	; (80a0ee8 <_GLOBAL__sub_I_System+0x14>)
 80a0eda:	2000      	movs	r0, #0
 80a0edc:	7018      	strb	r0, [r3, #0]
 80a0ede:	8058      	strh	r0, [r3, #2]
 80a0ee0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0ee2:	f7ff bcd5 	b.w	80a0890 <set_system_mode>
 80a0ee6:	bf00      	nop
 80a0ee8:	20000110 	.word	0x20000110

080a0eec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0eec:	4b02      	ldr	r3, [pc, #8]	; (80a0ef8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0eee:	681a      	ldr	r2, [r3, #0]
 80a0ef0:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0ef2:	601a      	str	r2, [r3, #0]
 80a0ef4:	4770      	bx	lr
 80a0ef6:	bf00      	nop
 80a0ef8:	20000014 	.word	0x20000014
 80a0efc:	20000118 	.word	0x20000118

080a0f00 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0f00:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0f02:	6804      	ldr	r4, [r0, #0]
 80a0f04:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a0f06:	46a4      	mov	ip, r4
    }
 80a0f08:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0f0a:	4760      	bx	ip

080a0f0c <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0f0c:	6803      	ldr	r3, [r0, #0]
 80a0f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0f10:	4718      	bx	r3

080a0f12 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0f12:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0f14:	4770      	bx	lr

080a0f16 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a0f16:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a0f18:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a0f1a:	1a10      	subs	r0, r2, r0
 80a0f1c:	4770      	bx	lr

080a0f1e <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0f1e:	b513      	push	{r0, r1, r4, lr}
 80a0f20:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0f22:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0f24:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a0f28:	68d4      	ldr	r4, [r2, #12]
 80a0f2a:	4619      	mov	r1, r3
 80a0f2c:	2201      	movs	r2, #1
 80a0f2e:	47a0      	blx	r4
}
 80a0f30:	b002      	add	sp, #8
 80a0f32:	bd10      	pop	{r4, pc}

080a0f34 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0f34:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a0f36:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a0f38:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a0f3a:	691b      	ldr	r3, [r3, #16]
 80a0f3c:	4798      	blx	r3
 80a0f3e:	b128      	cbz	r0, 80a0f4c <_ZN3UDP4readEv+0x18>
 80a0f40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0f42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0f44:	1c59      	adds	r1, r3, #1
 80a0f46:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a0f48:	5cd0      	ldrb	r0, [r2, r3]
 80a0f4a:	bd10      	pop	{r4, pc}
 80a0f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0f50:	bd10      	pop	{r4, pc}

080a0f52 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0f52:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0f54:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a0f56:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a0f58:	691b      	ldr	r3, [r3, #16]
 80a0f5a:	4798      	blx	r3
 80a0f5c:	b118      	cbz	r0, 80a0f66 <_ZN3UDP4peekEv+0x14>
 80a0f5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0f60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0f62:	5cd0      	ldrb	r0, [r2, r3]
 80a0f64:	bd10      	pop	{r4, pc}
 80a0f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0f6a:	bd10      	pop	{r4, pc}

080a0f6c <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0f6c:	4770      	bx	lr

080a0f6e <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0f6e:	4603      	mov	r3, r0
 80a0f70:	4608      	mov	r0, r1
 80a0f72:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0f74:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a0f76:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0f78:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a0f7a:	6803      	ldr	r3, [r0, #0]
 80a0f7c:	1a52      	subs	r2, r2, r1
 80a0f7e:	68db      	ldr	r3, [r3, #12]
 80a0f80:	4421      	add	r1, r4
}
 80a0f82:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a0f84:	4718      	bx	r3

080a0f86 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a0f86:	f1a0 0010 	sub.w	r0, r0, #16
 80a0f8a:	f7ff bff0 	b.w	80a0f6e <_ZNK3UDP7printToER5Print>

080a0f8e <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0f90:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0f92:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a0f94:	460f      	mov	r7, r1
 80a0f96:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a0f98:	f7ff fe48 	bl	80a0c2c <_ZN5spark12NetworkClass4fromEm>
 80a0f9c:	6803      	ldr	r3, [r0, #0]
 80a0f9e:	68db      	ldr	r3, [r3, #12]
 80a0fa0:	4798      	blx	r3
 80a0fa2:	b1b8      	cbz	r0, 80a0fd4 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a0fa4:	2102      	movs	r1, #2
 80a0fa6:	463b      	mov	r3, r7
 80a0fa8:	2211      	movs	r2, #17
 80a0faa:	4608      	mov	r0, r1
 80a0fac:	9600      	str	r6, [sp, #0]
 80a0fae:	f7ff fbaf 	bl	80a0710 <socket_create>
 80a0fb2:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a0fb4:	f7ff fba4 	bl	80a0700 <socket_handle_valid>
 80a0fb8:	4604      	mov	r4, r0
 80a0fba:	b130      	cbz	r0, 80a0fca <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0fbc:	2300      	movs	r3, #0
 80a0fbe:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0fc0:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a0fc2:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a0fc4:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a0fc6:	2001      	movs	r0, #1
 80a0fc8:	e004      	b.n	80a0fd4 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a0fca:	682b      	ldr	r3, [r5, #0]
 80a0fcc:	4628      	mov	r0, r5
 80a0fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0fd0:	4798      	blx	r3
            bound = false;
 80a0fd2:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a0fd4:	b003      	add	sp, #12
 80a0fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0fd8 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a0fd8:	b538      	push	{r3, r4, r5, lr}
 80a0fda:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0fdc:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0fde:	f7ff fbb7 	bl	80a0750 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0fe2:	4285      	cmp	r5, r0
 80a0fe4:	d002      	beq.n	80a0fec <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0fe6:	6960      	ldr	r0, [r4, #20]
 80a0fe8:	f7ff fbaa 	bl	80a0740 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0fec:	f7ff fbb0 	bl	80a0750 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0ff0:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0ff2:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0ff4:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0ff6:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0ff8:	bd38      	pop	{r3, r4, r5, pc}

080a0ffa <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0ffa:	b530      	push	{r4, r5, lr}
 80a0ffc:	b087      	sub	sp, #28
 80a0ffe:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1002:	2502      	movs	r5, #2
 80a1004:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1008:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a100c:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a100e:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1010:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1014:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1018:	799c      	ldrb	r4, [r3, #6]
 80a101a:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a101e:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1020:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1022:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1026:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a102a:	2310      	movs	r3, #16
 80a102c:	9301      	str	r3, [sp, #4]
 80a102e:	ab02      	add	r3, sp, #8
 80a1030:	9300      	str	r3, [sp, #0]
 80a1032:	6940      	ldr	r0, [r0, #20]
 80a1034:	2300      	movs	r3, #0
 80a1036:	f7ff fb7b 	bl	80a0730 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a103a:	b007      	add	sp, #28
 80a103c:	bd30      	pop	{r4, r5, pc}

080a103e <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a103e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1040:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1042:	4605      	mov	r5, r0
 80a1044:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1046:	b113      	cbz	r3, 80a104e <_ZN3UDP5writeEPKhj+0x10>
 80a1048:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a104a:	1a24      	subs	r4, r4, r0
 80a104c:	e000      	b.n	80a1050 <_ZN3UDP5writeEPKhj+0x12>
 80a104e:	461c      	mov	r4, r3
 80a1050:	4294      	cmp	r4, r2
 80a1052:	bf28      	it	cs
 80a1054:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1056:	4418      	add	r0, r3
 80a1058:	4622      	mov	r2, r4
 80a105a:	f000 ffa1 	bl	80a1fa0 <memcpy>
    _offset += size;
 80a105e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1060:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1062:	4423      	add	r3, r4
 80a1064:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1066:	bd38      	pop	{r3, r4, r5, pc}

080a1068 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1068:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a106a:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a106c:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a106e:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1070:	460e      	mov	r6, r1
 80a1072:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1074:	4798      	blx	r3
 80a1076:	b188      	cbz	r0, 80a109c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1078:	6823      	ldr	r3, [r4, #0]
 80a107a:	4620      	mov	r0, r4
 80a107c:	691b      	ldr	r3, [r3, #16]
 80a107e:	4798      	blx	r3
 80a1080:	4285      	cmp	r5, r0
 80a1082:	bfa8      	it	ge
 80a1084:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1086:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a108a:	462a      	mov	r2, r5
 80a108c:	4419      	add	r1, r3
 80a108e:	4630      	mov	r0, r6
 80a1090:	f000 ff86 	bl	80a1fa0 <memcpy>
      _offset += read;
 80a1094:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1096:	442b      	add	r3, r5
 80a1098:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a109a:	e001      	b.n	80a10a0 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a109c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a10a0:	4628      	mov	r0, r5
 80a10a2:	bd70      	pop	{r4, r5, r6, pc}

080a10a4 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a10a6:	4604      	mov	r4, r0
 80a10a8:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a10aa:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a10ac:	460d      	mov	r5, r1
 80a10ae:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a10b0:	f7ff fdbc 	bl	80a0c2c <_ZN5spark12NetworkClass4fromEm>
 80a10b4:	6803      	ldr	r3, [r0, #0]
 80a10b6:	68db      	ldr	r3, [r3, #12]
 80a10b8:	4798      	blx	r3
 80a10ba:	b310      	cbz	r0, 80a1102 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a10bc:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a10be:	f7ff fb47 	bl	80a0750 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a10c2:	4287      	cmp	r7, r0
 80a10c4:	d01d      	beq.n	80a1102 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a10c6:	b1e5      	cbz	r5, 80a1102 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a10c8:	ab08      	add	r3, sp, #32
 80a10ca:	2210      	movs	r2, #16
 80a10cc:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a10d0:	9301      	str	r3, [sp, #4]
 80a10d2:	eb0d 0302 	add.w	r3, sp, r2
 80a10d6:	9300      	str	r3, [sp, #0]
 80a10d8:	4629      	mov	r1, r5
 80a10da:	2300      	movs	r3, #0
 80a10dc:	4632      	mov	r2, r6
 80a10de:	6960      	ldr	r0, [r4, #20]
 80a10e0:	f7ff fb1e 	bl	80a0720 <socket_receivefrom>
        if (ret >= 0)
 80a10e4:	1e05      	subs	r5, r0, #0
 80a10e6:	db0e      	blt.n	80a1106 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a10e8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a10ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a10f0:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a10f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a10f6:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a10f8:	f104 001c 	add.w	r0, r4, #28
 80a10fc:	f7ff fd26 	bl	80a0b4c <_ZN9IPAddressaSEPKh>
 80a1100:	e001      	b.n	80a1106 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1102:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1106:	4628      	mov	r0, r5
 80a1108:	b009      	add	sp, #36	; 0x24
 80a110a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a110c <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1110:	4606      	mov	r6, r0
 80a1112:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1114:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1116:	460d      	mov	r5, r1
 80a1118:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a111a:	f7ff fd87 	bl	80a0c2c <_ZN5spark12NetworkClass4fromEm>
 80a111e:	6803      	ldr	r3, [r0, #0]
 80a1120:	68db      	ldr	r3, [r3, #12]
 80a1122:	4798      	blx	r3
 80a1124:	b1f8      	cbz	r0, 80a1166 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1126:	4628      	mov	r0, r5
 80a1128:	f000 ff7e 	bl	80a2028 <strlen>
 80a112c:	2400      	movs	r4, #0
 80a112e:	b281      	uxth	r1, r0
 80a1130:	9400      	str	r4, [sp, #0]
 80a1132:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1134:	aa03      	add	r2, sp, #12
 80a1136:	4628      	mov	r0, r5
 80a1138:	f7ff fba2 	bl	80a0880 <inet_gethostbyname>
 80a113c:	b990      	cbnz	r0, 80a1164 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a113e:	a903      	add	r1, sp, #12
 80a1140:	a808      	add	r0, sp, #32
 80a1142:	f7ff fccf 	bl	80a0ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1146:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1148:	ac0f      	add	r4, sp, #60	; 0x3c
 80a114a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a114c:	4b07      	ldr	r3, [pc, #28]	; (80a116c <_ZN3UDP11beginPacketEPKct+0x60>)
 80a114e:	ad09      	add	r5, sp, #36	; 0x24
 80a1150:	930e      	str	r3, [sp, #56]	; 0x38
 80a1152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1156:	682b      	ldr	r3, [r5, #0]
 80a1158:	4642      	mov	r2, r8
 80a115a:	7023      	strb	r3, [r4, #0]
 80a115c:	a90e      	add	r1, sp, #56	; 0x38
 80a115e:	4630      	mov	r0, r6
 80a1160:	47b8      	blx	r7
 80a1162:	e000      	b.n	80a1166 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1164:	4620      	mov	r0, r4
}
 80a1166:	b014      	add	sp, #80	; 0x50
 80a1168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a116c:	080a2118 	.word	0x080a2118

080a1170 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1170:	b570      	push	{r4, r5, r6, lr}
 80a1172:	4604      	mov	r4, r0
 80a1174:	4606      	mov	r6, r0
 80a1176:	4b05      	ldr	r3, [pc, #20]	; (80a118c <_ZN3UDP8remoteIPEv+0x1c>)
 80a1178:	f101 0520 	add.w	r5, r1, #32
 80a117c:	f844 3b04 	str.w	r3, [r4], #4
 80a1180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1184:	682b      	ldr	r3, [r5, #0]
 80a1186:	4630      	mov	r0, r6
 80a1188:	7023      	strb	r3, [r4, #0]
 80a118a:	bd70      	pop	{r4, r5, r6, pc}
 80a118c:	080a2118 	.word	0x080a2118

080a1190 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1190:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1192:	4694      	mov	ip, r2
 80a1194:	468e      	mov	lr, r1
 80a1196:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1198:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a119a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a119c:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a119e:	4a09      	ldr	r2, [pc, #36]	; (80a11c4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a11a0:	ac03      	add	r4, sp, #12
 80a11a2:	1d1d      	adds	r5, r3, #4
 80a11a4:	9202      	str	r2, [sp, #8]
 80a11a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a11a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a11aa:	682b      	ldr	r3, [r5, #0]
 80a11ac:	4662      	mov	r2, ip
 80a11ae:	7023      	strb	r3, [r4, #0]
 80a11b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a11b4:	4671      	mov	r1, lr
 80a11b6:	9300      	str	r3, [sp, #0]
 80a11b8:	4630      	mov	r0, r6
 80a11ba:	ab02      	add	r3, sp, #8
 80a11bc:	47b8      	blx	r7
    }
 80a11be:	b009      	add	sp, #36	; 0x24
 80a11c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a11c2:	bf00      	nop
 80a11c4:	080a2118 	.word	0x080a2118

080a11c8 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a11c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11ca:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a11cc:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a11ce:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a11d0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a11d2:	4b0d      	ldr	r3, [pc, #52]	; (80a1208 <_ZN3UDP9endPacketEv+0x40>)
 80a11d4:	ad03      	add	r5, sp, #12
 80a11d6:	f100 0620 	add.w	r6, r0, #32
 80a11da:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a11de:	9302      	str	r3, [sp, #8]
 80a11e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a11e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a11e4:	6833      	ldr	r3, [r6, #0]
 80a11e6:	4672      	mov	r2, lr
 80a11e8:	702b      	strb	r3, [r5, #0]
 80a11ea:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a11ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a11ee:	9300      	str	r3, [sp, #0]
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	ab02      	add	r3, sp, #8
 80a11f4:	47b8      	blx	r7
 80a11f6:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a11f8:	6823      	ldr	r3, [r4, #0]
 80a11fa:	4620      	mov	r0, r4
 80a11fc:	69db      	ldr	r3, [r3, #28]
 80a11fe:	4798      	blx	r3
    return result;
}
 80a1200:	4628      	mov	r0, r5
 80a1202:	b009      	add	sp, #36	; 0x24
 80a1204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1206:	bf00      	nop
 80a1208:	080a2118 	.word	0x080a2118

080a120c <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a120c:	b538      	push	{r3, r4, r5, lr}
 80a120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1212:	6083      	str	r3, [r0, #8]
 80a1214:	4b0b      	ldr	r3, [pc, #44]	; (80a1244 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1216:	2500      	movs	r5, #0
 80a1218:	f103 0208 	add.w	r2, r3, #8
 80a121c:	336c      	adds	r3, #108	; 0x6c
 80a121e:	6002      	str	r2, [r0, #0]
 80a1220:	6103      	str	r3, [r0, #16]
 80a1222:	6045      	str	r5, [r0, #4]
 80a1224:	4604      	mov	r4, r0
 80a1226:	f7ff fa93 	bl	80a0750 <socket_handle_invalid>
 80a122a:	6160      	str	r0, [r4, #20]
 80a122c:	f104 001c 	add.w	r0, r4, #28
 80a1230:	f7ff fc4a 	bl	80a0ac8 <_ZN9IPAddressC1Ev>
 80a1234:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1238:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a123a:	8725      	strh	r5, [r4, #56]	; 0x38
 80a123c:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a123e:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1240:	4620      	mov	r0, r4
 80a1242:	bd38      	pop	{r3, r4, r5, pc}
 80a1244:	080a2278 	.word	0x080a2278

080a1248 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1248:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a124a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a124e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1250:	b123      	cbz	r3, 80a125c <_ZN3UDP13releaseBufferEv+0x14>
 80a1252:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1254:	b110      	cbz	r0, 80a125c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1256:	2101      	movs	r1, #1
 80a1258:	f000 fb69 	bl	80a192e <_ZdlPvj>
    }
    _buffer = NULL;
 80a125c:	2300      	movs	r3, #0
 80a125e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1260:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1264:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1266:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1268:	8723      	strh	r3, [r4, #56]	; 0x38
 80a126a:	bd10      	pop	{r4, pc}

080a126c <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a126c:	b570      	push	{r4, r5, r6, lr}
 80a126e:	4604      	mov	r4, r0
 80a1270:	4616      	mov	r6, r2
 80a1272:	460d      	mov	r5, r1
    releaseBuffer();
 80a1274:	f7ff ffe8 	bl	80a1248 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1278:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a127a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a127c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a127e:	b93e      	cbnz	r6, 80a1290 <_ZN3UDP9setBufferEjPh+0x24>
 80a1280:	b135      	cbz	r5, 80a1290 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1282:	4628      	mov	r0, r5
 80a1284:	f7fe ff0b 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a1288:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a128a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a128c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1290:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1292:	b103      	cbz	r3, 80a1296 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1294:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1296:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1298:	3000      	adds	r0, #0
 80a129a:	bf18      	it	ne
 80a129c:	2001      	movne	r0, #1
 80a129e:	bd70      	pop	{r4, r5, r6, pc}

080a12a0 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a12a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12a2:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a12a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a12a6:	4605      	mov	r5, r0
 80a12a8:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a12aa:	b91a      	cbnz	r2, 80a12b4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a12ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a12ae:	b109      	cbz	r1, 80a12b4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a12b0:	f7ff ffdc 	bl	80a126c <_ZN3UDP9setBufferEjPh>
 80a12b4:	f105 0620 	add.w	r6, r5, #32
 80a12b8:	3404      	adds	r4, #4
 80a12ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a12bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a12be:	6823      	ldr	r3, [r4, #0]
 80a12c0:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a12c2:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a12c4:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a12c6:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a12c8:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a12ca:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a12cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12ce <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a12ce:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a12d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a12d2:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a12d4:	b91a      	cbnz	r2, 80a12de <_ZN3UDP11parsePacketEm+0x10>
 80a12d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a12d8:	b109      	cbz	r1, 80a12de <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a12da:	f7ff ffc7 	bl	80a126c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a12de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a12e0:	2300      	movs	r3, #0
 80a12e2:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a12e4:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a12e6:	b141      	cbz	r1, 80a12fa <_ZN3UDP11parsePacketEm+0x2c>
 80a12e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a12ea:	b132      	cbz	r2, 80a12fa <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a12ec:	6820      	ldr	r0, [r4, #0]
 80a12ee:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a12f0:	4620      	mov	r0, r4
 80a12f2:	47a8      	blx	r5
        if (result>0) {
 80a12f4:	2800      	cmp	r0, #0
            _total = result;
 80a12f6:	bfc8      	it	gt
 80a12f8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a12fa:	6823      	ldr	r3, [r4, #0]
 80a12fc:	4620      	mov	r0, r4
}
 80a12fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a1302:	691b      	ldr	r3, [r3, #16]
 80a1304:	4718      	bx	r3

080a1306 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1306:	4770      	bx	lr

080a1308 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1308:	7441      	strb	r1, [r0, #17]
 80a130a:	4770      	bx	lr

080a130c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a130c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a130e:	7c00      	ldrb	r0, [r0, #16]
 80a1310:	f7ff fa6e 	bl	80a07f0 <HAL_USART_Available_Data_For_Write>
}
 80a1314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1318:	bd08      	pop	{r3, pc}

080a131a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a131a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a131c:	7c00      	ldrb	r0, [r0, #16]
 80a131e:	f7ff fa3f 	bl	80a07a0 <HAL_USART_Available_Data>
}
 80a1322:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1326:	bd08      	pop	{r3, pc}

080a1328 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1328:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a132a:	7c00      	ldrb	r0, [r0, #16]
 80a132c:	f7ff fa48 	bl	80a07c0 <HAL_USART_Peek_Data>
}
 80a1330:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1334:	bf28      	it	cs
 80a1336:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a133a:	bd08      	pop	{r3, pc}

080a133c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a133c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a133e:	7c00      	ldrb	r0, [r0, #16]
 80a1340:	f7ff fa36 	bl	80a07b0 <HAL_USART_Read_Data>
}
 80a1344:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1348:	bf28      	it	cs
 80a134a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a134e:	bd08      	pop	{r3, pc}

080a1350 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1350:	7c00      	ldrb	r0, [r0, #16]
 80a1352:	f7ff ba3d 	b.w	80a07d0 <HAL_USART_Flush_Data>

080a1356 <_ZN11USARTSerialD0Ev>:
 80a1356:	b510      	push	{r4, lr}
 80a1358:	4604      	mov	r4, r0
 80a135a:	2114      	movs	r1, #20
 80a135c:	f000 fae7 	bl	80a192e <_ZdlPvj>
 80a1360:	4620      	mov	r0, r4
 80a1362:	bd10      	pop	{r4, pc}

080a1364 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1364:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1366:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1368:	4604      	mov	r4, r0
 80a136a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a136c:	b925      	cbnz	r5, 80a1378 <_ZN11USARTSerial5writeEh+0x14>
 80a136e:	7c00      	ldrb	r0, [r0, #16]
 80a1370:	f7ff fa3e 	bl	80a07f0 <HAL_USART_Available_Data_For_Write>
 80a1374:	2800      	cmp	r0, #0
 80a1376:	dd05      	ble.n	80a1384 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1378:	4631      	mov	r1, r6
 80a137a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a137c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1380:	f7ff ba06 	b.w	80a0790 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1384:	4628      	mov	r0, r5
 80a1386:	bd70      	pop	{r4, r5, r6, pc}

080a1388 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1388:	b510      	push	{r4, lr}
 80a138a:	4604      	mov	r4, r0
 80a138c:	4608      	mov	r0, r1
 80a138e:	4611      	mov	r1, r2
 80a1390:	2200      	movs	r2, #0
 80a1392:	6062      	str	r2, [r4, #4]
 80a1394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1398:	60a2      	str	r2, [r4, #8]
 80a139a:	4a05      	ldr	r2, [pc, #20]	; (80a13b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a139c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a139e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a13a0:	2201      	movs	r2, #1
 80a13a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a13a4:	461a      	mov	r2, r3
 80a13a6:	f7ff f9eb 	bl	80a0780 <HAL_USART_Init>
}
 80a13aa:	4620      	mov	r0, r4
 80a13ac:	bd10      	pop	{r4, pc}
 80a13ae:	bf00      	nop
 80a13b0:	080a22f0 	.word	0x080a22f0

080a13b4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a13b4:	7c00      	ldrb	r0, [r0, #16]
 80a13b6:	f7ff ba13 	b.w	80a07e0 <HAL_USART_Is_Enabled>
	...

080a13bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a13be:	4c19      	ldr	r4, [pc, #100]	; (80a1424 <_Z22__fetch_global_Serial1v+0x68>)
 80a13c0:	6825      	ldr	r5, [r4, #0]
 80a13c2:	b94d      	cbnz	r5, 80a13d8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a13c4:	2084      	movs	r0, #132	; 0x84
 80a13c6:	f7fe fe68 	bl	80a009a <_Znwj>
 80a13ca:	4606      	mov	r6, r0
 80a13cc:	b118      	cbz	r0, 80a13d6 <_Z22__fetch_global_Serial1v+0x1a>
 80a13ce:	2284      	movs	r2, #132	; 0x84
 80a13d0:	4629      	mov	r1, r5
 80a13d2:	f000 fdf0 	bl	80a1fb6 <memset>
 80a13d6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a13d8:	4d13      	ldr	r5, [pc, #76]	; (80a1428 <_Z22__fetch_global_Serial1v+0x6c>)
 80a13da:	682e      	ldr	r6, [r5, #0]
 80a13dc:	b94e      	cbnz	r6, 80a13f2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a13de:	2084      	movs	r0, #132	; 0x84
 80a13e0:	f7fe fe5b 	bl	80a009a <_Znwj>
 80a13e4:	4607      	mov	r7, r0
 80a13e6:	b118      	cbz	r0, 80a13f0 <_Z22__fetch_global_Serial1v+0x34>
 80a13e8:	2284      	movs	r2, #132	; 0x84
 80a13ea:	4631      	mov	r1, r6
 80a13ec:	f000 fde3 	bl	80a1fb6 <memset>
 80a13f0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a13f2:	4f0e      	ldr	r7, [pc, #56]	; (80a142c <_Z22__fetch_global_Serial1v+0x70>)
 80a13f4:	6839      	ldr	r1, [r7, #0]
 80a13f6:	f011 0601 	ands.w	r6, r1, #1
 80a13fa:	d111      	bne.n	80a1420 <_Z22__fetch_global_Serial1v+0x64>
 80a13fc:	4638      	mov	r0, r7
 80a13fe:	f7fe fe52 	bl	80a00a6 <__cxa_guard_acquire>
 80a1402:	b168      	cbz	r0, 80a1420 <_Z22__fetch_global_Serial1v+0x64>
 80a1404:	6822      	ldr	r2, [r4, #0]
 80a1406:	4631      	mov	r1, r6
 80a1408:	682b      	ldr	r3, [r5, #0]
 80a140a:	4809      	ldr	r0, [pc, #36]	; (80a1430 <_Z22__fetch_global_Serial1v+0x74>)
 80a140c:	f7ff ffbc 	bl	80a1388 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1410:	4638      	mov	r0, r7
 80a1412:	f7fe fe4d 	bl	80a00b0 <__cxa_guard_release>
 80a1416:	4a07      	ldr	r2, [pc, #28]	; (80a1434 <_Z22__fetch_global_Serial1v+0x78>)
 80a1418:	4907      	ldr	r1, [pc, #28]	; (80a1438 <_Z22__fetch_global_Serial1v+0x7c>)
 80a141a:	4805      	ldr	r0, [pc, #20]	; (80a1430 <_Z22__fetch_global_Serial1v+0x74>)
 80a141c:	f000 fa82 	bl	80a1924 <__aeabi_atexit>
#endif
	return serial1;
}
 80a1420:	4803      	ldr	r0, [pc, #12]	; (80a1430 <_Z22__fetch_global_Serial1v+0x74>)
 80a1422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1424:	20000138 	.word	0x20000138
 80a1428:	20000130 	.word	0x20000130
 80a142c:	20000134 	.word	0x20000134
 80a1430:	2000011c 	.word	0x2000011c
 80a1434:	2000007c 	.word	0x2000007c
 80a1438:	080a1307 	.word	0x080a1307

080a143c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a143c:	7441      	strb	r1, [r0, #17]
 80a143e:	4770      	bx	lr

080a1440 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1440:	4770      	bx	lr

080a1442 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1442:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1444:	2100      	movs	r1, #0
 80a1446:	7c00      	ldrb	r0, [r0, #16]
 80a1448:	f7ff f9fa 	bl	80a0840 <HAL_USB_USART_Receive_Data>
}
 80a144c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1450:	bf28      	it	cs
 80a1452:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1456:	bd08      	pop	{r3, pc}

080a1458 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1458:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a145a:	2101      	movs	r1, #1
 80a145c:	7c00      	ldrb	r0, [r0, #16]
 80a145e:	f7ff f9ef 	bl	80a0840 <HAL_USB_USART_Receive_Data>
}
 80a1462:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1466:	bf28      	it	cs
 80a1468:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a146c:	bd08      	pop	{r3, pc}

080a146e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a146e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1470:	7c00      	ldrb	r0, [r0, #16]
 80a1472:	f7ff f9dd 	bl	80a0830 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a147a:	bd08      	pop	{r3, pc}

080a147c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a147c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a147e:	7c00      	ldrb	r0, [r0, #16]
 80a1480:	f7ff f9ce 	bl	80a0820 <HAL_USB_USART_Available_Data>
}
 80a1484:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1488:	bd08      	pop	{r3, pc}

080a148a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a148a:	7c00      	ldrb	r0, [r0, #16]
 80a148c:	f7ff b9e8 	b.w	80a0860 <HAL_USB_USART_Flush_Data>

080a1490 <_ZN9USBSerialD0Ev>:
 80a1490:	b510      	push	{r4, lr}
 80a1492:	4604      	mov	r4, r0
 80a1494:	2114      	movs	r1, #20
 80a1496:	f000 fa4a 	bl	80a192e <_ZdlPvj>
 80a149a:	4620      	mov	r0, r4
 80a149c:	bd10      	pop	{r4, pc}

080a149e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a149e:	b538      	push	{r3, r4, r5, lr}
 80a14a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14a2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a14a4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14a6:	f7ff f9c3 	bl	80a0830 <HAL_USB_USART_Available_Data_For_Write>
 80a14aa:	2800      	cmp	r0, #0
 80a14ac:	dc01      	bgt.n	80a14b2 <_ZN9USBSerial5writeEh+0x14>
 80a14ae:	7c60      	ldrb	r0, [r4, #17]
 80a14b0:	b128      	cbz	r0, 80a14be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a14b2:	4629      	mov	r1, r5
 80a14b4:	7c20      	ldrb	r0, [r4, #16]
 80a14b6:	f7ff f9cb 	bl	80a0850 <HAL_USB_USART_Send_Data>
 80a14ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a14be:	bd38      	pop	{r3, r4, r5, pc}

080a14c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a14c0:	b510      	push	{r4, lr}
 80a14c2:	4604      	mov	r4, r0
 80a14c4:	2300      	movs	r3, #0
 80a14c6:	6063      	str	r3, [r4, #4]
 80a14c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14cc:	60a3      	str	r3, [r4, #8]
 80a14ce:	4b05      	ldr	r3, [pc, #20]	; (80a14e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a14d0:	4608      	mov	r0, r1
 80a14d2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a14d4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a14d6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a14d8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a14da:	4611      	mov	r1, r2
 80a14dc:	f7ff f990 	bl	80a0800 <HAL_USB_USART_Init>
}
 80a14e0:	4620      	mov	r0, r4
 80a14e2:	bd10      	pop	{r4, pc}
 80a14e4:	080a2320 	.word	0x080a2320

080a14e8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a14e8:	2200      	movs	r2, #0
 80a14ea:	7c00      	ldrb	r0, [r0, #16]
 80a14ec:	f7ff b990 	b.w	80a0810 <HAL_USB_USART_Begin>

080a14f0 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a14f0:	7c00      	ldrb	r0, [r0, #16]
 80a14f2:	f7ff b9bd 	b.w	80a0870 <HAL_USB_USART_Is_Enabled>

080a14f6 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a14f6:	f7ff bffb 	b.w	80a14f0 <_ZN9USBSerial9isEnabledEv>

080a14fa <_Z19acquireSerialBufferv>:
 80a14fa:	b510      	push	{r4, lr}
 80a14fc:	4604      	mov	r4, r0
 80a14fe:	2214      	movs	r2, #20
 80a1500:	2100      	movs	r1, #0
 80a1502:	f000 fd58 	bl	80a1fb6 <memset>
 80a1506:	4620      	mov	r0, r4
 80a1508:	bd10      	pop	{r4, pc}
	...

080a150c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a150c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a150e:	4d0e      	ldr	r5, [pc, #56]	; (80a1548 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1510:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1512:	a801      	add	r0, sp, #4
 80a1514:	f7ff fff1 	bl	80a14fa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1518:	6829      	ldr	r1, [r5, #0]
 80a151a:	f011 0401 	ands.w	r4, r1, #1
 80a151e:	d110      	bne.n	80a1542 <_Z16_fetch_usbserialv+0x36>
 80a1520:	4628      	mov	r0, r5
 80a1522:	f7fe fdc0 	bl	80a00a6 <__cxa_guard_acquire>
 80a1526:	b160      	cbz	r0, 80a1542 <_Z16_fetch_usbserialv+0x36>
 80a1528:	aa01      	add	r2, sp, #4
 80a152a:	4621      	mov	r1, r4
 80a152c:	4807      	ldr	r0, [pc, #28]	; (80a154c <_Z16_fetch_usbserialv+0x40>)
 80a152e:	f7ff ffc7 	bl	80a14c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1532:	4628      	mov	r0, r5
 80a1534:	f7fe fdbc 	bl	80a00b0 <__cxa_guard_release>
 80a1538:	4a05      	ldr	r2, [pc, #20]	; (80a1550 <_Z16_fetch_usbserialv+0x44>)
 80a153a:	4906      	ldr	r1, [pc, #24]	; (80a1554 <_Z16_fetch_usbserialv+0x48>)
 80a153c:	4803      	ldr	r0, [pc, #12]	; (80a154c <_Z16_fetch_usbserialv+0x40>)
 80a153e:	f000 f9f1 	bl	80a1924 <__aeabi_atexit>
	return _usbserial;
}
 80a1542:	4802      	ldr	r0, [pc, #8]	; (80a154c <_Z16_fetch_usbserialv+0x40>)
 80a1544:	b007      	add	sp, #28
 80a1546:	bd30      	pop	{r4, r5, pc}
 80a1548:	2000013c 	.word	0x2000013c
 80a154c:	20000144 	.word	0x20000144
 80a1550:	2000007c 	.word	0x2000007c
 80a1554:	080a1441 	.word	0x080a1441

080a1558 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1558:	b510      	push	{r4, lr}
 80a155a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a155c:	2214      	movs	r2, #20
 80a155e:	2100      	movs	r1, #0
 80a1560:	f000 fd29 	bl	80a1fb6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1564:	4620      	mov	r0, r4
 80a1566:	bd10      	pop	{r4, pc}

080a1568 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1568:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a156a:	4c0e      	ldr	r4, [pc, #56]	; (80a15a4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a156c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a156e:	a801      	add	r0, sp, #4
 80a1570:	f7ff fff2 	bl	80a1558 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1574:	6823      	ldr	r3, [r4, #0]
 80a1576:	07db      	lsls	r3, r3, #31
 80a1578:	d410      	bmi.n	80a159c <_Z17_fetch_usbserial1v+0x34>
 80a157a:	4620      	mov	r0, r4
 80a157c:	f7fe fd93 	bl	80a00a6 <__cxa_guard_acquire>
 80a1580:	b160      	cbz	r0, 80a159c <_Z17_fetch_usbserial1v+0x34>
 80a1582:	aa01      	add	r2, sp, #4
 80a1584:	2101      	movs	r1, #1
 80a1586:	4808      	ldr	r0, [pc, #32]	; (80a15a8 <_Z17_fetch_usbserial1v+0x40>)
 80a1588:	f7ff ff9a 	bl	80a14c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a158c:	4620      	mov	r0, r4
 80a158e:	f7fe fd8f 	bl	80a00b0 <__cxa_guard_release>
 80a1592:	4a06      	ldr	r2, [pc, #24]	; (80a15ac <_Z17_fetch_usbserial1v+0x44>)
 80a1594:	4906      	ldr	r1, [pc, #24]	; (80a15b0 <_Z17_fetch_usbserial1v+0x48>)
 80a1596:	4804      	ldr	r0, [pc, #16]	; (80a15a8 <_Z17_fetch_usbserial1v+0x40>)
 80a1598:	f000 f9c4 	bl	80a1924 <__aeabi_atexit>
  return _usbserial1;
}
 80a159c:	4802      	ldr	r0, [pc, #8]	; (80a15a8 <_Z17_fetch_usbserial1v+0x40>)
 80a159e:	b006      	add	sp, #24
 80a15a0:	bd10      	pop	{r4, pc}
 80a15a2:	bf00      	nop
 80a15a4:	20000140 	.word	0x20000140
 80a15a8:	20000158 	.word	0x20000158
 80a15ac:	2000007c 	.word	0x2000007c
 80a15b0:	080a1441 	.word	0x080a1441

080a15b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a15b4:	2200      	movs	r2, #0
 80a15b6:	4611      	mov	r1, r2
 80a15b8:	6840      	ldr	r0, [r0, #4]
 80a15ba:	f7ff b9bd 	b.w	80a0938 <network_ready>

080a15be <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a15be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a15c0:	4616      	mov	r6, r2
 80a15c2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a15c4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a15c6:	460f      	mov	r7, r1
 80a15c8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a15ca:	2100      	movs	r1, #0
 80a15cc:	a803      	add	r0, sp, #12
 80a15ce:	f000 fcf2 	bl	80a1fb6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a15d2:	4630      	mov	r0, r6
 80a15d4:	f000 fd28 	bl	80a2028 <strlen>
 80a15d8:	2500      	movs	r5, #0
 80a15da:	9500      	str	r5, [sp, #0]
 80a15dc:	b281      	uxth	r1, r0
 80a15de:	687b      	ldr	r3, [r7, #4]
 80a15e0:	aa03      	add	r2, sp, #12
 80a15e2:	4630      	mov	r0, r6
 80a15e4:	f7ff f94c 	bl	80a0880 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a15e8:	b120      	cbz	r0, 80a15f4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a15ea:	4629      	mov	r1, r5
 80a15ec:	4620      	mov	r0, r4
 80a15ee:	f7ff fa8b 	bl	80a0b08 <_ZN9IPAddressC1Em>
 80a15f2:	e003      	b.n	80a15fc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a15f4:	a903      	add	r1, sp, #12
 80a15f6:	4620      	mov	r0, r4
 80a15f8:	f7ff fa74 	bl	80a0ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a15fc:	4620      	mov	r0, r4
 80a15fe:	b009      	add	sp, #36	; 0x24
 80a1600:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1602 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1602:	2200      	movs	r2, #0
 80a1604:	4611      	mov	r1, r2
 80a1606:	6840      	ldr	r0, [r0, #4]
 80a1608:	f7ff b9b6 	b.w	80a0978 <network_listening>

080a160c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a160c:	2200      	movs	r2, #0
 80a160e:	4611      	mov	r1, r2
 80a1610:	6840      	ldr	r0, [r0, #4]
 80a1612:	f7ff b9c1 	b.w	80a0998 <network_get_listen_timeout>

080a1616 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1616:	2200      	movs	r2, #0
 80a1618:	6840      	ldr	r0, [r0, #4]
 80a161a:	f7ff b9b5 	b.w	80a0988 <network_set_listen_timeout>

080a161e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a161e:	2200      	movs	r2, #0
 80a1620:	f081 0101 	eor.w	r1, r1, #1
 80a1624:	6840      	ldr	r0, [r0, #4]
 80a1626:	f7ff b99f 	b.w	80a0968 <network_listen>

080a162a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a162a:	2300      	movs	r3, #0
 80a162c:	461a      	mov	r2, r3
 80a162e:	4619      	mov	r1, r3
 80a1630:	6840      	ldr	r0, [r0, #4]
 80a1632:	f7ff b991 	b.w	80a0958 <network_off>

080a1636 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1636:	2300      	movs	r3, #0
 80a1638:	461a      	mov	r2, r3
 80a163a:	4619      	mov	r1, r3
 80a163c:	6840      	ldr	r0, [r0, #4]
 80a163e:	f7ff b983 	b.w	80a0948 <network_on>

080a1642 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1642:	2200      	movs	r2, #0
 80a1644:	4611      	mov	r1, r2
 80a1646:	6840      	ldr	r0, [r0, #4]
 80a1648:	f7ff b966 	b.w	80a0918 <network_connecting>

080a164c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a164c:	2200      	movs	r2, #0
 80a164e:	2102      	movs	r1, #2
 80a1650:	6840      	ldr	r0, [r0, #4]
 80a1652:	f7ff b969 	b.w	80a0928 <network_disconnect>

080a1656 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1656:	2300      	movs	r3, #0
 80a1658:	461a      	mov	r2, r3
 80a165a:	6840      	ldr	r0, [r0, #4]
 80a165c:	f7ff b954 	b.w	80a0908 <network_connect>

080a1660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1660:	4b02      	ldr	r3, [pc, #8]	; (80a166c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1662:	2204      	movs	r2, #4
 80a1664:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1666:	4a02      	ldr	r2, [pc, #8]	; (80a1670 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1668:	601a      	str	r2, [r3, #0]
 80a166a:	4770      	bx	lr
 80a166c:	2000016c 	.word	0x2000016c
 80a1670:	080a2350 	.word	0x080a2350

080a1674 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1674:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1676:	4b14      	ldr	r3, [pc, #80]	; (80a16c8 <serialEventRun+0x54>)
 80a1678:	b133      	cbz	r3, 80a1688 <serialEventRun+0x14>
 80a167a:	f7ff ff47 	bl	80a150c <_Z16_fetch_usbserialv>
 80a167e:	6803      	ldr	r3, [r0, #0]
 80a1680:	691b      	ldr	r3, [r3, #16]
 80a1682:	4798      	blx	r3
 80a1684:	2800      	cmp	r0, #0
 80a1686:	dc16      	bgt.n	80a16b6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1688:	4b10      	ldr	r3, [pc, #64]	; (80a16cc <serialEventRun+0x58>)
 80a168a:	b133      	cbz	r3, 80a169a <serialEventRun+0x26>
 80a168c:	f7ff fe96 	bl	80a13bc <_Z22__fetch_global_Serial1v>
 80a1690:	6803      	ldr	r3, [r0, #0]
 80a1692:	691b      	ldr	r3, [r3, #16]
 80a1694:	4798      	blx	r3
 80a1696:	2800      	cmp	r0, #0
 80a1698:	dc10      	bgt.n	80a16bc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a169a:	4b0d      	ldr	r3, [pc, #52]	; (80a16d0 <serialEventRun+0x5c>)
 80a169c:	b10b      	cbz	r3, 80a16a2 <serialEventRun+0x2e>
 80a169e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a16a2:	4b0c      	ldr	r3, [pc, #48]	; (80a16d4 <serialEventRun+0x60>)
 80a16a4:	b17b      	cbz	r3, 80a16c6 <serialEventRun+0x52>
 80a16a6:	f7ff ff5f 	bl	80a1568 <_Z17_fetch_usbserial1v>
 80a16aa:	6803      	ldr	r3, [r0, #0]
 80a16ac:	691b      	ldr	r3, [r3, #16]
 80a16ae:	4798      	blx	r3
 80a16b0:	2800      	cmp	r0, #0
 80a16b2:	dc06      	bgt.n	80a16c2 <serialEventRun+0x4e>
 80a16b4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a16b6:	f3af 8000 	nop.w
 80a16ba:	e7e5      	b.n	80a1688 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a16bc:	f3af 8000 	nop.w
 80a16c0:	e7eb      	b.n	80a169a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a16c2:	f3af 8000 	nop.w
 80a16c6:	bd08      	pop	{r3, pc}
	...

080a16d8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a16d8:	b508      	push	{r3, lr}
	serialEventRun();
 80a16da:	f7ff ffcb 	bl	80a1674 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a16de:	f7fe ffa5 	bl	80a062c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a16e2:	4b01      	ldr	r3, [pc, #4]	; (80a16e8 <_post_loop+0x10>)
 80a16e4:	6018      	str	r0, [r3, #0]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	2000017c 	.word	0x2000017c

080a16ec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a16ec:	4802      	ldr	r0, [pc, #8]	; (80a16f8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a16ee:	4a03      	ldr	r2, [pc, #12]	; (80a16fc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a16f0:	4903      	ldr	r1, [pc, #12]	; (80a1700 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a16f2:	1a12      	subs	r2, r2, r0
 80a16f4:	f000 bc54 	b.w	80a1fa0 <memcpy>
 80a16f8:	40024000 	.word	0x40024000
 80a16fc:	40024004 	.word	0x40024004
 80a1700:	080a2420 	.word	0x080a2420

080a1704 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1704:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1706:	2300      	movs	r3, #0
 80a1708:	9300      	str	r3, [sp, #0]
 80a170a:	461a      	mov	r2, r3
 80a170c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1710:	f7ff f8e0 	bl	80a08d4 <system_ctrl_set_result>
}
 80a1714:	b003      	add	sp, #12
 80a1716:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a171c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a171c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a171e:	8843      	ldrh	r3, [r0, #2]
 80a1720:	2b0a      	cmp	r3, #10
 80a1722:	d008      	beq.n	80a1736 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1724:	2b50      	cmp	r3, #80	; 0x50
 80a1726:	d109      	bne.n	80a173c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1728:	4b09      	ldr	r3, [pc, #36]	; (80a1750 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a172a:	681b      	ldr	r3, [r3, #0]
 80a172c:	b13b      	cbz	r3, 80a173e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a172e:	b003      	add	sp, #12
 80a1730:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1734:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1736:	f7ff ffe5 	bl	80a1704 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a173a:	e006      	b.n	80a174a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a173c:	2300      	movs	r3, #0
 80a173e:	9300      	str	r3, [sp, #0]
 80a1740:	461a      	mov	r2, r3
 80a1742:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1746:	f7ff f8c5 	bl	80a08d4 <system_ctrl_set_result>
        break;
    }
}
 80a174a:	b003      	add	sp, #12
 80a174c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1750:	20000174 	.word	0x20000174

080a1754 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1754:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1756:	4c10      	ldr	r4, [pc, #64]	; (80a1798 <module_user_init_hook+0x44>)
 80a1758:	4d10      	ldr	r5, [pc, #64]	; (80a179c <module_user_init_hook+0x48>)
 80a175a:	6823      	ldr	r3, [r4, #0]
 80a175c:	42ab      	cmp	r3, r5
 80a175e:	4b10      	ldr	r3, [pc, #64]	; (80a17a0 <module_user_init_hook+0x4c>)
 80a1760:	bf0c      	ite	eq
 80a1762:	2201      	moveq	r2, #1
 80a1764:	2200      	movne	r2, #0
 80a1766:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1768:	d002      	beq.n	80a1770 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a176a:	f7ff ffbf 	bl	80a16ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a176e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1770:	f7fe ff54 	bl	80a061c <HAL_RNG_GetRandomNumber>
 80a1774:	4604      	mov	r4, r0
    srand(seed);
 80a1776:	f000 fc27 	bl	80a1fc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a177a:	4b0a      	ldr	r3, [pc, #40]	; (80a17a4 <module_user_init_hook+0x50>)
 80a177c:	b113      	cbz	r3, 80a1784 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a177e:	4620      	mov	r0, r4
 80a1780:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1784:	2100      	movs	r1, #0
 80a1786:	4807      	ldr	r0, [pc, #28]	; (80a17a4 <module_user_init_hook+0x50>)
 80a1788:	f7ff f8ae 	bl	80a08e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a178c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1790:	2100      	movs	r1, #0
 80a1792:	4805      	ldr	r0, [pc, #20]	; (80a17a8 <module_user_init_hook+0x54>)
 80a1794:	f7ff b894 	b.w	80a08c0 <system_ctrl_set_app_request_handler>
 80a1798:	40024000 	.word	0x40024000
 80a179c:	9a271c1e 	.word	0x9a271c1e
 80a17a0:	20000178 	.word	0x20000178
 80a17a4:	00000000 	.word	0x00000000
 80a17a8:	080a171d 	.word	0x080a171d

080a17ac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a17ac:	b510      	push	{r4, lr}
 80a17ae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a17b0:	480f      	ldr	r0, [pc, #60]	; (80a17f0 <pinAvailable+0x44>)
 80a17b2:	f7ff fafd 	bl	80a0db0 <_ZN8SPIClass9isEnabledEv>
 80a17b6:	b128      	cbz	r0, 80a17c4 <pinAvailable+0x18>
 80a17b8:	f1a4 030d 	sub.w	r3, r4, #13
 80a17bc:	2b02      	cmp	r3, #2
 80a17be:	d801      	bhi.n	80a17c4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a17c0:	2000      	movs	r0, #0
 80a17c2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a17c4:	f000 f854 	bl	80a1870 <_Z19__fetch_global_Wirev>
 80a17c8:	f7ff f960 	bl	80a0a8c <_ZN7TwoWire9isEnabledEv>
 80a17cc:	b108      	cbz	r0, 80a17d2 <pinAvailable+0x26>
 80a17ce:	2c01      	cmp	r4, #1
 80a17d0:	d9f6      	bls.n	80a17c0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a17d2:	f7ff fdf3 	bl	80a13bc <_Z22__fetch_global_Serial1v>
 80a17d6:	f7ff fded 	bl	80a13b4 <_ZN11USARTSerial9isEnabledEv>
 80a17da:	b118      	cbz	r0, 80a17e4 <pinAvailable+0x38>
 80a17dc:	f1a4 0312 	sub.w	r3, r4, #18
 80a17e0:	2b01      	cmp	r3, #1
 80a17e2:	d9ed      	bls.n	80a17c0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a17e4:	2c17      	cmp	r4, #23
 80a17e6:	bf8c      	ite	hi
 80a17e8:	2000      	movhi	r0, #0
 80a17ea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a17ec:	bd10      	pop	{r4, pc}
 80a17ee:	bf00      	nop
 80a17f0:	200001b0 	.word	0x200001b0

080a17f4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a17f4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a17f6:	b538      	push	{r3, r4, r5, lr}
 80a17f8:	4604      	mov	r4, r0
 80a17fa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a17fc:	d80a      	bhi.n	80a1814 <pinMode+0x20>
 80a17fe:	29ff      	cmp	r1, #255	; 0xff
 80a1800:	d008      	beq.n	80a1814 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1802:	f7ff ffd3 	bl	80a17ac <pinAvailable>
 80a1806:	b128      	cbz	r0, 80a1814 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1808:	4629      	mov	r1, r5
 80a180a:	4620      	mov	r0, r4
}
 80a180c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1810:	f7fe bf1c 	b.w	80a064c <HAL_Pin_Mode>
 80a1814:	bd38      	pop	{r3, r4, r5, pc}

080a1816 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1816:	b538      	push	{r3, r4, r5, lr}
 80a1818:	4604      	mov	r4, r0
 80a181a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a181c:	f7fe ff1e 	bl	80a065c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1820:	28ff      	cmp	r0, #255	; 0xff
 80a1822:	d010      	beq.n	80a1846 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1824:	2806      	cmp	r0, #6
 80a1826:	d804      	bhi.n	80a1832 <digitalWrite+0x1c>
 80a1828:	234d      	movs	r3, #77	; 0x4d
 80a182a:	fa23 f000 	lsr.w	r0, r3, r0
 80a182e:	07c3      	lsls	r3, r0, #31
 80a1830:	d409      	bmi.n	80a1846 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1832:	4620      	mov	r0, r4
 80a1834:	f7ff ffba 	bl	80a17ac <pinAvailable>
 80a1838:	b128      	cbz	r0, 80a1846 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a183a:	4629      	mov	r1, r5
 80a183c:	4620      	mov	r0, r4
}
 80a183e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1842:	f7fe bf13 	b.w	80a066c <HAL_GPIO_Write>
 80a1846:	bd38      	pop	{r3, r4, r5, pc}

080a1848 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1848:	b510      	push	{r4, lr}
 80a184a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a184c:	f7fe ff06 	bl	80a065c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1850:	3804      	subs	r0, #4
 80a1852:	b2c0      	uxtb	r0, r0
 80a1854:	2801      	cmp	r0, #1
 80a1856:	d908      	bls.n	80a186a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1858:	4620      	mov	r0, r4
 80a185a:	f7ff ffa7 	bl	80a17ac <pinAvailable>
 80a185e:	b120      	cbz	r0, 80a186a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1860:	4620      	mov	r0, r4
}
 80a1862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1866:	f7fe bf09 	b.w	80a067c <HAL_GPIO_Read>
}
 80a186a:	2000      	movs	r0, #0
 80a186c:	bd10      	pop	{r4, pc}
	...

080a1870 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1870:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1872:	4d0b      	ldr	r5, [pc, #44]	; (80a18a0 <_Z19__fetch_global_Wirev+0x30>)
 80a1874:	6829      	ldr	r1, [r5, #0]
 80a1876:	f011 0401 	ands.w	r4, r1, #1
 80a187a:	d10f      	bne.n	80a189c <_Z19__fetch_global_Wirev+0x2c>
 80a187c:	4628      	mov	r0, r5
 80a187e:	f7fe fc12 	bl	80a00a6 <__cxa_guard_acquire>
 80a1882:	b158      	cbz	r0, 80a189c <_Z19__fetch_global_Wirev+0x2c>
 80a1884:	4621      	mov	r1, r4
 80a1886:	4807      	ldr	r0, [pc, #28]	; (80a18a4 <_Z19__fetch_global_Wirev+0x34>)
 80a1888:	f7ff f8ee 	bl	80a0a68 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a188c:	4628      	mov	r0, r5
 80a188e:	f7fe fc0f 	bl	80a00b0 <__cxa_guard_release>
 80a1892:	4a05      	ldr	r2, [pc, #20]	; (80a18a8 <_Z19__fetch_global_Wirev+0x38>)
 80a1894:	4905      	ldr	r1, [pc, #20]	; (80a18ac <_Z19__fetch_global_Wirev+0x3c>)
 80a1896:	4803      	ldr	r0, [pc, #12]	; (80a18a4 <_Z19__fetch_global_Wirev+0x34>)
 80a1898:	f000 f844 	bl	80a1924 <__aeabi_atexit>
	return wire;
}
 80a189c:	4801      	ldr	r0, [pc, #4]	; (80a18a4 <_Z19__fetch_global_Wirev+0x34>)
 80a189e:	bd38      	pop	{r3, r4, r5, pc}
 80a18a0:	20000180 	.word	0x20000180
 80a18a4:	20000184 	.word	0x20000184
 80a18a8:	2000007c 	.word	0x2000007c
 80a18ac:	080a0a11 	.word	0x080a0a11

080a18b0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a18b0:	b513      	push	{r0, r1, r4, lr}
 80a18b2:	4c08      	ldr	r4, [pc, #32]	; (80a18d4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a18b4:	2300      	movs	r3, #0
 80a18b6:	461a      	mov	r2, r3
 80a18b8:	4619      	mov	r1, r3
 80a18ba:	9300      	str	r3, [sp, #0]
 80a18bc:	4620      	mov	r0, r4
 80a18be:	f7ff f939 	bl	80a0b34 <_ZN9IPAddressC1Ehhhh>
 80a18c2:	4620      	mov	r0, r4
 80a18c4:	4a04      	ldr	r2, [pc, #16]	; (80a18d8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a18c6:	4905      	ldr	r1, [pc, #20]	; (80a18dc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a18c8:	b002      	add	sp, #8
 80a18ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a18ce:	f000 b829 	b.w	80a1924 <__aeabi_atexit>
 80a18d2:	bf00      	nop
 80a18d4:	20000198 	.word	0x20000198
 80a18d8:	2000007c 	.word	0x2000007c
 80a18dc:	080a00b7 	.word	0x080a00b7

080a18e0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a18e0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a18e2:	4c0c      	ldr	r4, [pc, #48]	; (80a1914 <_GLOBAL__sub_I_SPI+0x34>)
 80a18e4:	4e0c      	ldr	r6, [pc, #48]	; (80a1918 <_GLOBAL__sub_I_SPI+0x38>)
 80a18e6:	4d0d      	ldr	r5, [pc, #52]	; (80a191c <_GLOBAL__sub_I_SPI+0x3c>)
 80a18e8:	2100      	movs	r1, #0
 80a18ea:	4620      	mov	r0, r4
 80a18ec:	f7ff fa4c 	bl	80a0d88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a18f0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a18f2:	4c0b      	ldr	r4, [pc, #44]	; (80a1920 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a18f4:	4632      	mov	r2, r6
 80a18f6:	4629      	mov	r1, r5
 80a18f8:	f000 f814 	bl	80a1924 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a18fc:	2101      	movs	r1, #1
 80a18fe:	4620      	mov	r0, r4
 80a1900:	f7ff fa42 	bl	80a0d88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1904:	4632      	mov	r2, r6
 80a1906:	4629      	mov	r1, r5
 80a1908:	4620      	mov	r0, r4
 80a190a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a190e:	f000 b809 	b.w	80a1924 <__aeabi_atexit>
 80a1912:	bf00      	nop
 80a1914:	200001b0 	.word	0x200001b0
 80a1918:	2000007c 	.word	0x2000007c
 80a191c:	080a0d79 	.word	0x080a0d79
 80a1920:	200001c0 	.word	0x200001c0

080a1924 <__aeabi_atexit>:
 80a1924:	460b      	mov	r3, r1
 80a1926:	4601      	mov	r1, r0
 80a1928:	4618      	mov	r0, r3
 80a192a:	f000 bb2b 	b.w	80a1f84 <__cxa_atexit>

080a192e <_ZdlPvj>:
 80a192e:	f7fe bbb8 	b.w	80a00a2 <_ZdlPv>
	...

080a1934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1934:	4b24      	ldr	r3, [pc, #144]	; (80a19c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	07d0      	lsls	r0, r2, #31
 80a193a:	bf5c      	itt	pl
 80a193c:	2201      	movpl	r2, #1
 80a193e:	601a      	strpl	r2, [r3, #0]
 80a1940:	4b22      	ldr	r3, [pc, #136]	; (80a19cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1942:	681a      	ldr	r2, [r3, #0]
 80a1944:	07d1      	lsls	r1, r2, #31
 80a1946:	bf5c      	itt	pl
 80a1948:	2201      	movpl	r2, #1
 80a194a:	601a      	strpl	r2, [r3, #0]
 80a194c:	4b20      	ldr	r3, [pc, #128]	; (80a19d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a194e:	681a      	ldr	r2, [r3, #0]
 80a1950:	07d2      	lsls	r2, r2, #31
 80a1952:	bf5c      	itt	pl
 80a1954:	2201      	movpl	r2, #1
 80a1956:	601a      	strpl	r2, [r3, #0]
 80a1958:	4b1e      	ldr	r3, [pc, #120]	; (80a19d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a195a:	681a      	ldr	r2, [r3, #0]
 80a195c:	07d0      	lsls	r0, r2, #31
 80a195e:	bf5c      	itt	pl
 80a1960:	2201      	movpl	r2, #1
 80a1962:	601a      	strpl	r2, [r3, #0]
 80a1964:	4b1c      	ldr	r3, [pc, #112]	; (80a19d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1966:	681a      	ldr	r2, [r3, #0]
 80a1968:	07d1      	lsls	r1, r2, #31
 80a196a:	bf5c      	itt	pl
 80a196c:	2201      	movpl	r2, #1
 80a196e:	601a      	strpl	r2, [r3, #0]
 80a1970:	4b1a      	ldr	r3, [pc, #104]	; (80a19dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1972:	681a      	ldr	r2, [r3, #0]
 80a1974:	07d2      	lsls	r2, r2, #31
 80a1976:	bf5c      	itt	pl
 80a1978:	2201      	movpl	r2, #1
 80a197a:	601a      	strpl	r2, [r3, #0]
 80a197c:	4b18      	ldr	r3, [pc, #96]	; (80a19e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a197e:	681a      	ldr	r2, [r3, #0]
 80a1980:	07d0      	lsls	r0, r2, #31
 80a1982:	bf5c      	itt	pl
 80a1984:	2201      	movpl	r2, #1
 80a1986:	601a      	strpl	r2, [r3, #0]
 80a1988:	4b16      	ldr	r3, [pc, #88]	; (80a19e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a198a:	681a      	ldr	r2, [r3, #0]
 80a198c:	07d1      	lsls	r1, r2, #31
 80a198e:	bf5c      	itt	pl
 80a1990:	2201      	movpl	r2, #1
 80a1992:	601a      	strpl	r2, [r3, #0]
 80a1994:	4b14      	ldr	r3, [pc, #80]	; (80a19e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1996:	681a      	ldr	r2, [r3, #0]
 80a1998:	07d2      	lsls	r2, r2, #31
 80a199a:	bf5c      	itt	pl
 80a199c:	2201      	movpl	r2, #1
 80a199e:	601a      	strpl	r2, [r3, #0]
 80a19a0:	4b12      	ldr	r3, [pc, #72]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a19a2:	681a      	ldr	r2, [r3, #0]
 80a19a4:	07d0      	lsls	r0, r2, #31
 80a19a6:	bf5c      	itt	pl
 80a19a8:	2201      	movpl	r2, #1
 80a19aa:	601a      	strpl	r2, [r3, #0]
 80a19ac:	4b10      	ldr	r3, [pc, #64]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a19ae:	681a      	ldr	r2, [r3, #0]
 80a19b0:	07d1      	lsls	r1, r2, #31
 80a19b2:	bf5c      	itt	pl
 80a19b4:	2201      	movpl	r2, #1
 80a19b6:	601a      	strpl	r2, [r3, #0]
 80a19b8:	4b0e      	ldr	r3, [pc, #56]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a19ba:	681a      	ldr	r2, [r3, #0]
 80a19bc:	07d2      	lsls	r2, r2, #31
 80a19be:	bf5c      	itt	pl
 80a19c0:	2201      	movpl	r2, #1
 80a19c2:	601a      	strpl	r2, [r3, #0]
 80a19c4:	4770      	bx	lr
 80a19c6:	bf00      	nop
 80a19c8:	200001fc 	.word	0x200001fc
 80a19cc:	200001f8 	.word	0x200001f8
 80a19d0:	200001f4 	.word	0x200001f4
 80a19d4:	200001f0 	.word	0x200001f0
 80a19d8:	200001ec 	.word	0x200001ec
 80a19dc:	200001e8 	.word	0x200001e8
 80a19e0:	200001e4 	.word	0x200001e4
 80a19e4:	200001e0 	.word	0x200001e0
 80a19e8:	200001dc 	.word	0x200001dc
 80a19ec:	200001d8 	.word	0x200001d8
 80a19f0:	200001d4 	.word	0x200001d4
 80a19f4:	200001d0 	.word	0x200001d0

080a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a19f8:	4b18      	ldr	r3, [pc, #96]	; (80a1a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a19fa:	681a      	ldr	r2, [r3, #0]
 80a19fc:	07d1      	lsls	r1, r2, #31
 80a19fe:	bf5c      	itt	pl
 80a1a00:	2201      	movpl	r2, #1
 80a1a02:	601a      	strpl	r2, [r3, #0]
 80a1a04:	4b16      	ldr	r3, [pc, #88]	; (80a1a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a06:	681a      	ldr	r2, [r3, #0]
 80a1a08:	07d2      	lsls	r2, r2, #31
 80a1a0a:	bf5c      	itt	pl
 80a1a0c:	2201      	movpl	r2, #1
 80a1a0e:	601a      	strpl	r2, [r3, #0]
 80a1a10:	4b14      	ldr	r3, [pc, #80]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a12:	681a      	ldr	r2, [r3, #0]
 80a1a14:	07d0      	lsls	r0, r2, #31
 80a1a16:	bf5c      	itt	pl
 80a1a18:	2201      	movpl	r2, #1
 80a1a1a:	601a      	strpl	r2, [r3, #0]
 80a1a1c:	4b12      	ldr	r3, [pc, #72]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a1e:	681a      	ldr	r2, [r3, #0]
 80a1a20:	07d1      	lsls	r1, r2, #31
 80a1a22:	bf5c      	itt	pl
 80a1a24:	2201      	movpl	r2, #1
 80a1a26:	601a      	strpl	r2, [r3, #0]
 80a1a28:	4b10      	ldr	r3, [pc, #64]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a2a:	681a      	ldr	r2, [r3, #0]
 80a1a2c:	07d2      	lsls	r2, r2, #31
 80a1a2e:	bf5c      	itt	pl
 80a1a30:	2201      	movpl	r2, #1
 80a1a32:	601a      	strpl	r2, [r3, #0]
 80a1a34:	4b0e      	ldr	r3, [pc, #56]	; (80a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a36:	681a      	ldr	r2, [r3, #0]
 80a1a38:	07d0      	lsls	r0, r2, #31
 80a1a3a:	bf5c      	itt	pl
 80a1a3c:	2201      	movpl	r2, #1
 80a1a3e:	601a      	strpl	r2, [r3, #0]
 80a1a40:	4b0c      	ldr	r3, [pc, #48]	; (80a1a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a42:	681a      	ldr	r2, [r3, #0]
 80a1a44:	07d1      	lsls	r1, r2, #31
 80a1a46:	bf5c      	itt	pl
 80a1a48:	2201      	movpl	r2, #1
 80a1a4a:	601a      	strpl	r2, [r3, #0]
 80a1a4c:	4b0a      	ldr	r3, [pc, #40]	; (80a1a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a4e:	681a      	ldr	r2, [r3, #0]
 80a1a50:	07d2      	lsls	r2, r2, #31
 80a1a52:	bf5c      	itt	pl
 80a1a54:	2201      	movpl	r2, #1
 80a1a56:	601a      	strpl	r2, [r3, #0]
 80a1a58:	4770      	bx	lr
 80a1a5a:	bf00      	nop
 80a1a5c:	2000021c 	.word	0x2000021c
 80a1a60:	20000218 	.word	0x20000218
 80a1a64:	20000214 	.word	0x20000214
 80a1a68:	20000210 	.word	0x20000210
 80a1a6c:	2000020c 	.word	0x2000020c
 80a1a70:	20000208 	.word	0x20000208
 80a1a74:	20000204 	.word	0x20000204
 80a1a78:	20000200 	.word	0x20000200

080a1a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a7c:	4b18      	ldr	r3, [pc, #96]	; (80a1ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a7e:	681a      	ldr	r2, [r3, #0]
 80a1a80:	07d1      	lsls	r1, r2, #31
 80a1a82:	bf5c      	itt	pl
 80a1a84:	2201      	movpl	r2, #1
 80a1a86:	601a      	strpl	r2, [r3, #0]
 80a1a88:	4b16      	ldr	r3, [pc, #88]	; (80a1ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a8a:	681a      	ldr	r2, [r3, #0]
 80a1a8c:	07d2      	lsls	r2, r2, #31
 80a1a8e:	bf5c      	itt	pl
 80a1a90:	2201      	movpl	r2, #1
 80a1a92:	601a      	strpl	r2, [r3, #0]
 80a1a94:	4b14      	ldr	r3, [pc, #80]	; (80a1ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a96:	681a      	ldr	r2, [r3, #0]
 80a1a98:	07d0      	lsls	r0, r2, #31
 80a1a9a:	bf5c      	itt	pl
 80a1a9c:	2201      	movpl	r2, #1
 80a1a9e:	601a      	strpl	r2, [r3, #0]
 80a1aa0:	4b12      	ldr	r3, [pc, #72]	; (80a1aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1aa2:	681a      	ldr	r2, [r3, #0]
 80a1aa4:	07d1      	lsls	r1, r2, #31
 80a1aa6:	bf5c      	itt	pl
 80a1aa8:	2201      	movpl	r2, #1
 80a1aaa:	601a      	strpl	r2, [r3, #0]
 80a1aac:	4b10      	ldr	r3, [pc, #64]	; (80a1af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1aae:	681a      	ldr	r2, [r3, #0]
 80a1ab0:	07d2      	lsls	r2, r2, #31
 80a1ab2:	bf5c      	itt	pl
 80a1ab4:	2201      	movpl	r2, #1
 80a1ab6:	601a      	strpl	r2, [r3, #0]
 80a1ab8:	4b0e      	ldr	r3, [pc, #56]	; (80a1af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1aba:	681a      	ldr	r2, [r3, #0]
 80a1abc:	07d0      	lsls	r0, r2, #31
 80a1abe:	bf5c      	itt	pl
 80a1ac0:	2201      	movpl	r2, #1
 80a1ac2:	601a      	strpl	r2, [r3, #0]
 80a1ac4:	4b0c      	ldr	r3, [pc, #48]	; (80a1af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1ac6:	681a      	ldr	r2, [r3, #0]
 80a1ac8:	07d1      	lsls	r1, r2, #31
 80a1aca:	bf5c      	itt	pl
 80a1acc:	2201      	movpl	r2, #1
 80a1ace:	601a      	strpl	r2, [r3, #0]
 80a1ad0:	4b0a      	ldr	r3, [pc, #40]	; (80a1afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1ad2:	681a      	ldr	r2, [r3, #0]
 80a1ad4:	07d2      	lsls	r2, r2, #31
 80a1ad6:	bf5c      	itt	pl
 80a1ad8:	2201      	movpl	r2, #1
 80a1ada:	601a      	strpl	r2, [r3, #0]
 80a1adc:	4770      	bx	lr
 80a1ade:	bf00      	nop
 80a1ae0:	2000023c 	.word	0x2000023c
 80a1ae4:	20000238 	.word	0x20000238
 80a1ae8:	20000234 	.word	0x20000234
 80a1aec:	20000230 	.word	0x20000230
 80a1af0:	2000022c 	.word	0x2000022c
 80a1af4:	20000228 	.word	0x20000228
 80a1af8:	20000224 	.word	0x20000224
 80a1afc:	20000220 	.word	0x20000220

080a1b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b00:	4b24      	ldr	r3, [pc, #144]	; (80a1b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b02:	681a      	ldr	r2, [r3, #0]
 80a1b04:	07d0      	lsls	r0, r2, #31
 80a1b06:	bf5c      	itt	pl
 80a1b08:	2201      	movpl	r2, #1
 80a1b0a:	601a      	strpl	r2, [r3, #0]
 80a1b0c:	4b22      	ldr	r3, [pc, #136]	; (80a1b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b0e:	681a      	ldr	r2, [r3, #0]
 80a1b10:	07d1      	lsls	r1, r2, #31
 80a1b12:	bf5c      	itt	pl
 80a1b14:	2201      	movpl	r2, #1
 80a1b16:	601a      	strpl	r2, [r3, #0]
 80a1b18:	4b20      	ldr	r3, [pc, #128]	; (80a1b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b1a:	681a      	ldr	r2, [r3, #0]
 80a1b1c:	07d2      	lsls	r2, r2, #31
 80a1b1e:	bf5c      	itt	pl
 80a1b20:	2201      	movpl	r2, #1
 80a1b22:	601a      	strpl	r2, [r3, #0]
 80a1b24:	4b1e      	ldr	r3, [pc, #120]	; (80a1ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b26:	681a      	ldr	r2, [r3, #0]
 80a1b28:	07d0      	lsls	r0, r2, #31
 80a1b2a:	bf5c      	itt	pl
 80a1b2c:	2201      	movpl	r2, #1
 80a1b2e:	601a      	strpl	r2, [r3, #0]
 80a1b30:	4b1c      	ldr	r3, [pc, #112]	; (80a1ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b32:	681a      	ldr	r2, [r3, #0]
 80a1b34:	07d1      	lsls	r1, r2, #31
 80a1b36:	bf5c      	itt	pl
 80a1b38:	2201      	movpl	r2, #1
 80a1b3a:	601a      	strpl	r2, [r3, #0]
 80a1b3c:	4b1a      	ldr	r3, [pc, #104]	; (80a1ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b3e:	681a      	ldr	r2, [r3, #0]
 80a1b40:	07d2      	lsls	r2, r2, #31
 80a1b42:	bf5c      	itt	pl
 80a1b44:	2201      	movpl	r2, #1
 80a1b46:	601a      	strpl	r2, [r3, #0]
 80a1b48:	4b18      	ldr	r3, [pc, #96]	; (80a1bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b4a:	681a      	ldr	r2, [r3, #0]
 80a1b4c:	07d0      	lsls	r0, r2, #31
 80a1b4e:	bf5c      	itt	pl
 80a1b50:	2201      	movpl	r2, #1
 80a1b52:	601a      	strpl	r2, [r3, #0]
 80a1b54:	4b16      	ldr	r3, [pc, #88]	; (80a1bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b56:	681a      	ldr	r2, [r3, #0]
 80a1b58:	07d1      	lsls	r1, r2, #31
 80a1b5a:	bf5c      	itt	pl
 80a1b5c:	2201      	movpl	r2, #1
 80a1b5e:	601a      	strpl	r2, [r3, #0]
 80a1b60:	4b14      	ldr	r3, [pc, #80]	; (80a1bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1b62:	681a      	ldr	r2, [r3, #0]
 80a1b64:	07d2      	lsls	r2, r2, #31
 80a1b66:	bf5c      	itt	pl
 80a1b68:	2201      	movpl	r2, #1
 80a1b6a:	601a      	strpl	r2, [r3, #0]
 80a1b6c:	4b12      	ldr	r3, [pc, #72]	; (80a1bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1b6e:	681a      	ldr	r2, [r3, #0]
 80a1b70:	07d0      	lsls	r0, r2, #31
 80a1b72:	bf5c      	itt	pl
 80a1b74:	2201      	movpl	r2, #1
 80a1b76:	601a      	strpl	r2, [r3, #0]
 80a1b78:	4b10      	ldr	r3, [pc, #64]	; (80a1bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1b7a:	681a      	ldr	r2, [r3, #0]
 80a1b7c:	07d1      	lsls	r1, r2, #31
 80a1b7e:	bf5c      	itt	pl
 80a1b80:	2201      	movpl	r2, #1
 80a1b82:	601a      	strpl	r2, [r3, #0]
 80a1b84:	4b0e      	ldr	r3, [pc, #56]	; (80a1bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1b86:	681a      	ldr	r2, [r3, #0]
 80a1b88:	07d2      	lsls	r2, r2, #31
 80a1b8a:	bf5c      	itt	pl
 80a1b8c:	2201      	movpl	r2, #1
 80a1b8e:	601a      	strpl	r2, [r3, #0]
 80a1b90:	4770      	bx	lr
 80a1b92:	bf00      	nop
 80a1b94:	2000026c 	.word	0x2000026c
 80a1b98:	20000268 	.word	0x20000268
 80a1b9c:	20000264 	.word	0x20000264
 80a1ba0:	20000260 	.word	0x20000260
 80a1ba4:	2000025c 	.word	0x2000025c
 80a1ba8:	20000258 	.word	0x20000258
 80a1bac:	20000254 	.word	0x20000254
 80a1bb0:	20000250 	.word	0x20000250
 80a1bb4:	2000024c 	.word	0x2000024c
 80a1bb8:	20000248 	.word	0x20000248
 80a1bbc:	20000244 	.word	0x20000244
 80a1bc0:	20000240 	.word	0x20000240

080a1bc4 <__aeabi_drsub>:
 80a1bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1bc8:	e002      	b.n	80a1bd0 <__adddf3>
 80a1bca:	bf00      	nop

080a1bcc <__aeabi_dsub>:
 80a1bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1bd0 <__adddf3>:
 80a1bd0:	b530      	push	{r4, r5, lr}
 80a1bd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1bd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1bda:	ea94 0f05 	teq	r4, r5
 80a1bde:	bf08      	it	eq
 80a1be0:	ea90 0f02 	teqeq	r0, r2
 80a1be4:	bf1f      	itttt	ne
 80a1be6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1bea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1bee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1bf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1bf6:	f000 80e2 	beq.w	80a1dbe <__adddf3+0x1ee>
 80a1bfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1bfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1c02:	bfb8      	it	lt
 80a1c04:	426d      	neglt	r5, r5
 80a1c06:	dd0c      	ble.n	80a1c22 <__adddf3+0x52>
 80a1c08:	442c      	add	r4, r5
 80a1c0a:	ea80 0202 	eor.w	r2, r0, r2
 80a1c0e:	ea81 0303 	eor.w	r3, r1, r3
 80a1c12:	ea82 0000 	eor.w	r0, r2, r0
 80a1c16:	ea83 0101 	eor.w	r1, r3, r1
 80a1c1a:	ea80 0202 	eor.w	r2, r0, r2
 80a1c1e:	ea81 0303 	eor.w	r3, r1, r3
 80a1c22:	2d36      	cmp	r5, #54	; 0x36
 80a1c24:	bf88      	it	hi
 80a1c26:	bd30      	pophi	{r4, r5, pc}
 80a1c28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1c30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1c34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1c38:	d002      	beq.n	80a1c40 <__adddf3+0x70>
 80a1c3a:	4240      	negs	r0, r0
 80a1c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1c44:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1c48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1c4c:	d002      	beq.n	80a1c54 <__adddf3+0x84>
 80a1c4e:	4252      	negs	r2, r2
 80a1c50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1c54:	ea94 0f05 	teq	r4, r5
 80a1c58:	f000 80a7 	beq.w	80a1daa <__adddf3+0x1da>
 80a1c5c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c60:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1c64:	db0d      	blt.n	80a1c82 <__adddf3+0xb2>
 80a1c66:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1c6a:	fa22 f205 	lsr.w	r2, r2, r5
 80a1c6e:	1880      	adds	r0, r0, r2
 80a1c70:	f141 0100 	adc.w	r1, r1, #0
 80a1c74:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1c78:	1880      	adds	r0, r0, r2
 80a1c7a:	fa43 f305 	asr.w	r3, r3, r5
 80a1c7e:	4159      	adcs	r1, r3
 80a1c80:	e00e      	b.n	80a1ca0 <__adddf3+0xd0>
 80a1c82:	f1a5 0520 	sub.w	r5, r5, #32
 80a1c86:	f10e 0e20 	add.w	lr, lr, #32
 80a1c8a:	2a01      	cmp	r2, #1
 80a1c8c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1c90:	bf28      	it	cs
 80a1c92:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1c96:	fa43 f305 	asr.w	r3, r3, r5
 80a1c9a:	18c0      	adds	r0, r0, r3
 80a1c9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ca4:	d507      	bpl.n	80a1cb6 <__adddf3+0xe6>
 80a1ca6:	f04f 0e00 	mov.w	lr, #0
 80a1caa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1cae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1cb2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1cb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1cba:	d31b      	bcc.n	80a1cf4 <__adddf3+0x124>
 80a1cbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1cc0:	d30c      	bcc.n	80a1cdc <__adddf3+0x10c>
 80a1cc2:	0849      	lsrs	r1, r1, #1
 80a1cc4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1cc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1ccc:	f104 0401 	add.w	r4, r4, #1
 80a1cd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1cd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1cd8:	f080 809a 	bcs.w	80a1e10 <__adddf3+0x240>
 80a1cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1ce0:	bf08      	it	eq
 80a1ce2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1ce6:	f150 0000 	adcs.w	r0, r0, #0
 80a1cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cee:	ea41 0105 	orr.w	r1, r1, r5
 80a1cf2:	bd30      	pop	{r4, r5, pc}
 80a1cf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1cf8:	4140      	adcs	r0, r0
 80a1cfa:	eb41 0101 	adc.w	r1, r1, r1
 80a1cfe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1d02:	f1a4 0401 	sub.w	r4, r4, #1
 80a1d06:	d1e9      	bne.n	80a1cdc <__adddf3+0x10c>
 80a1d08:	f091 0f00 	teq	r1, #0
 80a1d0c:	bf04      	itt	eq
 80a1d0e:	4601      	moveq	r1, r0
 80a1d10:	2000      	moveq	r0, #0
 80a1d12:	fab1 f381 	clz	r3, r1
 80a1d16:	bf08      	it	eq
 80a1d18:	3320      	addeq	r3, #32
 80a1d1a:	f1a3 030b 	sub.w	r3, r3, #11
 80a1d1e:	f1b3 0220 	subs.w	r2, r3, #32
 80a1d22:	da0c      	bge.n	80a1d3e <__adddf3+0x16e>
 80a1d24:	320c      	adds	r2, #12
 80a1d26:	dd08      	ble.n	80a1d3a <__adddf3+0x16a>
 80a1d28:	f102 0c14 	add.w	ip, r2, #20
 80a1d2c:	f1c2 020c 	rsb	r2, r2, #12
 80a1d30:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1d34:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d38:	e00c      	b.n	80a1d54 <__adddf3+0x184>
 80a1d3a:	f102 0214 	add.w	r2, r2, #20
 80a1d3e:	bfd8      	it	le
 80a1d40:	f1c2 0c20 	rsble	ip, r2, #32
 80a1d44:	fa01 f102 	lsl.w	r1, r1, r2
 80a1d48:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1d4c:	bfdc      	itt	le
 80a1d4e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1d52:	4090      	lslle	r0, r2
 80a1d54:	1ae4      	subs	r4, r4, r3
 80a1d56:	bfa2      	ittt	ge
 80a1d58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1d5c:	4329      	orrge	r1, r5
 80a1d5e:	bd30      	popge	{r4, r5, pc}
 80a1d60:	ea6f 0404 	mvn.w	r4, r4
 80a1d64:	3c1f      	subs	r4, #31
 80a1d66:	da1c      	bge.n	80a1da2 <__adddf3+0x1d2>
 80a1d68:	340c      	adds	r4, #12
 80a1d6a:	dc0e      	bgt.n	80a1d8a <__adddf3+0x1ba>
 80a1d6c:	f104 0414 	add.w	r4, r4, #20
 80a1d70:	f1c4 0220 	rsb	r2, r4, #32
 80a1d74:	fa20 f004 	lsr.w	r0, r0, r4
 80a1d78:	fa01 f302 	lsl.w	r3, r1, r2
 80a1d7c:	ea40 0003 	orr.w	r0, r0, r3
 80a1d80:	fa21 f304 	lsr.w	r3, r1, r4
 80a1d84:	ea45 0103 	orr.w	r1, r5, r3
 80a1d88:	bd30      	pop	{r4, r5, pc}
 80a1d8a:	f1c4 040c 	rsb	r4, r4, #12
 80a1d8e:	f1c4 0220 	rsb	r2, r4, #32
 80a1d92:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d96:	fa01 f304 	lsl.w	r3, r1, r4
 80a1d9a:	ea40 0003 	orr.w	r0, r0, r3
 80a1d9e:	4629      	mov	r1, r5
 80a1da0:	bd30      	pop	{r4, r5, pc}
 80a1da2:	fa21 f004 	lsr.w	r0, r1, r4
 80a1da6:	4629      	mov	r1, r5
 80a1da8:	bd30      	pop	{r4, r5, pc}
 80a1daa:	f094 0f00 	teq	r4, #0
 80a1dae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1db2:	bf06      	itte	eq
 80a1db4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1db8:	3401      	addeq	r4, #1
 80a1dba:	3d01      	subne	r5, #1
 80a1dbc:	e74e      	b.n	80a1c5c <__adddf3+0x8c>
 80a1dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1dc2:	bf18      	it	ne
 80a1dc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1dc8:	d029      	beq.n	80a1e1e <__adddf3+0x24e>
 80a1dca:	ea94 0f05 	teq	r4, r5
 80a1dce:	bf08      	it	eq
 80a1dd0:	ea90 0f02 	teqeq	r0, r2
 80a1dd4:	d005      	beq.n	80a1de2 <__adddf3+0x212>
 80a1dd6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1dda:	bf04      	itt	eq
 80a1ddc:	4619      	moveq	r1, r3
 80a1dde:	4610      	moveq	r0, r2
 80a1de0:	bd30      	pop	{r4, r5, pc}
 80a1de2:	ea91 0f03 	teq	r1, r3
 80a1de6:	bf1e      	ittt	ne
 80a1de8:	2100      	movne	r1, #0
 80a1dea:	2000      	movne	r0, #0
 80a1dec:	bd30      	popne	{r4, r5, pc}
 80a1dee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1df2:	d105      	bne.n	80a1e00 <__adddf3+0x230>
 80a1df4:	0040      	lsls	r0, r0, #1
 80a1df6:	4149      	adcs	r1, r1
 80a1df8:	bf28      	it	cs
 80a1dfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1dfe:	bd30      	pop	{r4, r5, pc}
 80a1e00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1e04:	bf3c      	itt	cc
 80a1e06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1e0a:	bd30      	popcc	{r4, r5, pc}
 80a1e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1e14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e18:	f04f 0000 	mov.w	r0, #0
 80a1e1c:	bd30      	pop	{r4, r5, pc}
 80a1e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e22:	bf1a      	itte	ne
 80a1e24:	4619      	movne	r1, r3
 80a1e26:	4610      	movne	r0, r2
 80a1e28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1e2c:	bf1c      	itt	ne
 80a1e2e:	460b      	movne	r3, r1
 80a1e30:	4602      	movne	r2, r0
 80a1e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1e36:	bf06      	itte	eq
 80a1e38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1e3c:	ea91 0f03 	teqeq	r1, r3
 80a1e40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1e44:	bd30      	pop	{r4, r5, pc}
 80a1e46:	bf00      	nop

080a1e48 <__aeabi_ui2d>:
 80a1e48:	f090 0f00 	teq	r0, #0
 80a1e4c:	bf04      	itt	eq
 80a1e4e:	2100      	moveq	r1, #0
 80a1e50:	4770      	bxeq	lr
 80a1e52:	b530      	push	{r4, r5, lr}
 80a1e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e5c:	f04f 0500 	mov.w	r5, #0
 80a1e60:	f04f 0100 	mov.w	r1, #0
 80a1e64:	e750      	b.n	80a1d08 <__adddf3+0x138>
 80a1e66:	bf00      	nop

080a1e68 <__aeabi_i2d>:
 80a1e68:	f090 0f00 	teq	r0, #0
 80a1e6c:	bf04      	itt	eq
 80a1e6e:	2100      	moveq	r1, #0
 80a1e70:	4770      	bxeq	lr
 80a1e72:	b530      	push	{r4, r5, lr}
 80a1e74:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e78:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1e80:	bf48      	it	mi
 80a1e82:	4240      	negmi	r0, r0
 80a1e84:	f04f 0100 	mov.w	r1, #0
 80a1e88:	e73e      	b.n	80a1d08 <__adddf3+0x138>
 80a1e8a:	bf00      	nop

080a1e8c <__aeabi_f2d>:
 80a1e8c:	0042      	lsls	r2, r0, #1
 80a1e8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1e92:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1e96:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1e9a:	bf1f      	itttt	ne
 80a1e9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1ea0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ea4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1ea8:	4770      	bxne	lr
 80a1eaa:	f092 0f00 	teq	r2, #0
 80a1eae:	bf14      	ite	ne
 80a1eb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1eb4:	4770      	bxeq	lr
 80a1eb6:	b530      	push	{r4, r5, lr}
 80a1eb8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ec4:	e720      	b.n	80a1d08 <__adddf3+0x138>
 80a1ec6:	bf00      	nop

080a1ec8 <__aeabi_ul2d>:
 80a1ec8:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ecc:	bf08      	it	eq
 80a1ece:	4770      	bxeq	lr
 80a1ed0:	b530      	push	{r4, r5, lr}
 80a1ed2:	f04f 0500 	mov.w	r5, #0
 80a1ed6:	e00a      	b.n	80a1eee <__aeabi_l2d+0x16>

080a1ed8 <__aeabi_l2d>:
 80a1ed8:	ea50 0201 	orrs.w	r2, r0, r1
 80a1edc:	bf08      	it	eq
 80a1ede:	4770      	bxeq	lr
 80a1ee0:	b530      	push	{r4, r5, lr}
 80a1ee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1ee6:	d502      	bpl.n	80a1eee <__aeabi_l2d+0x16>
 80a1ee8:	4240      	negs	r0, r0
 80a1eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1eee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1ef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1efa:	f43f aedc 	beq.w	80a1cb6 <__adddf3+0xe6>
 80a1efe:	f04f 0203 	mov.w	r2, #3
 80a1f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f06:	bf18      	it	ne
 80a1f08:	3203      	addne	r2, #3
 80a1f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f0e:	bf18      	it	ne
 80a1f10:	3203      	addne	r2, #3
 80a1f12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1f16:	f1c2 0320 	rsb	r3, r2, #32
 80a1f1a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1f1e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1f22:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1f26:	ea40 000e 	orr.w	r0, r0, lr
 80a1f2a:	fa21 f102 	lsr.w	r1, r1, r2
 80a1f2e:	4414      	add	r4, r2
 80a1f30:	e6c1      	b.n	80a1cb6 <__adddf3+0xe6>
 80a1f32:	bf00      	nop

080a1f34 <__aeabi_d2iz>:
 80a1f34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1f38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1f3c:	d215      	bcs.n	80a1f6a <__aeabi_d2iz+0x36>
 80a1f3e:	d511      	bpl.n	80a1f64 <__aeabi_d2iz+0x30>
 80a1f40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1f44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1f48:	d912      	bls.n	80a1f70 <__aeabi_d2iz+0x3c>
 80a1f4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1f52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1f56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1f5a:	fa23 f002 	lsr.w	r0, r3, r2
 80a1f5e:	bf18      	it	ne
 80a1f60:	4240      	negne	r0, r0
 80a1f62:	4770      	bx	lr
 80a1f64:	f04f 0000 	mov.w	r0, #0
 80a1f68:	4770      	bx	lr
 80a1f6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1f6e:	d105      	bne.n	80a1f7c <__aeabi_d2iz+0x48>
 80a1f70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1f74:	bf08      	it	eq
 80a1f76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1f7a:	4770      	bx	lr
 80a1f7c:	f04f 0000 	mov.w	r0, #0
 80a1f80:	4770      	bx	lr
 80a1f82:	bf00      	nop

080a1f84 <__cxa_atexit>:
 80a1f84:	b510      	push	{r4, lr}
 80a1f86:	4c05      	ldr	r4, [pc, #20]	; (80a1f9c <__cxa_atexit+0x18>)
 80a1f88:	4613      	mov	r3, r2
 80a1f8a:	b12c      	cbz	r4, 80a1f98 <__cxa_atexit+0x14>
 80a1f8c:	460a      	mov	r2, r1
 80a1f8e:	4601      	mov	r1, r0
 80a1f90:	2002      	movs	r0, #2
 80a1f92:	f3af 8000 	nop.w
 80a1f96:	bd10      	pop	{r4, pc}
 80a1f98:	4620      	mov	r0, r4
 80a1f9a:	bd10      	pop	{r4, pc}
 80a1f9c:	00000000 	.word	0x00000000

080a1fa0 <memcpy>:
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	1e43      	subs	r3, r0, #1
 80a1fa4:	440a      	add	r2, r1
 80a1fa6:	4291      	cmp	r1, r2
 80a1fa8:	d004      	beq.n	80a1fb4 <memcpy+0x14>
 80a1faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1fb2:	e7f8      	b.n	80a1fa6 <memcpy+0x6>
 80a1fb4:	bd10      	pop	{r4, pc}

080a1fb6 <memset>:
 80a1fb6:	4603      	mov	r3, r0
 80a1fb8:	4402      	add	r2, r0
 80a1fba:	4293      	cmp	r3, r2
 80a1fbc:	d002      	beq.n	80a1fc4 <memset+0xe>
 80a1fbe:	f803 1b01 	strb.w	r1, [r3], #1
 80a1fc2:	e7fa      	b.n	80a1fba <memset+0x4>
 80a1fc4:	4770      	bx	lr
	...

080a1fc8 <srand>:
 80a1fc8:	b538      	push	{r3, r4, r5, lr}
 80a1fca:	4b12      	ldr	r3, [pc, #72]	; (80a2014 <srand+0x4c>)
 80a1fcc:	4605      	mov	r5, r0
 80a1fce:	681c      	ldr	r4, [r3, #0]
 80a1fd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1fd2:	b9d3      	cbnz	r3, 80a200a <srand+0x42>
 80a1fd4:	2018      	movs	r0, #24
 80a1fd6:	f7fe fcf7 	bl	80a09c8 <malloc>
 80a1fda:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1fde:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1fe0:	8003      	strh	r3, [r0, #0]
 80a1fe2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1fe6:	8043      	strh	r3, [r0, #2]
 80a1fe8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1fec:	8083      	strh	r3, [r0, #4]
 80a1fee:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1ff2:	80c3      	strh	r3, [r0, #6]
 80a1ff4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1ff8:	8103      	strh	r3, [r0, #8]
 80a1ffa:	2305      	movs	r3, #5
 80a1ffc:	8143      	strh	r3, [r0, #10]
 80a1ffe:	230b      	movs	r3, #11
 80a2000:	8183      	strh	r3, [r0, #12]
 80a2002:	2201      	movs	r2, #1
 80a2004:	2300      	movs	r3, #0
 80a2006:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a200a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a200c:	2200      	movs	r2, #0
 80a200e:	611d      	str	r5, [r3, #16]
 80a2010:	615a      	str	r2, [r3, #20]
 80a2012:	bd38      	pop	{r3, r4, r5, pc}
 80a2014:	20000078 	.word	0x20000078

080a2018 <strcpy>:
 80a2018:	4603      	mov	r3, r0
 80a201a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a201e:	f803 2b01 	strb.w	r2, [r3], #1
 80a2022:	2a00      	cmp	r2, #0
 80a2024:	d1f9      	bne.n	80a201a <strcpy+0x2>
 80a2026:	4770      	bx	lr

080a2028 <strlen>:
 80a2028:	4603      	mov	r3, r0
 80a202a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a202e:	2a00      	cmp	r2, #0
 80a2030:	d1fb      	bne.n	80a202a <strlen+0x2>
 80a2032:	1a18      	subs	r0, r3, r0
 80a2034:	3801      	subs	r0, #1
 80a2036:	4770      	bx	lr

080a2038 <dynalib_user>:
 80a2038:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2048:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a2058:	7265 505f 4255 494c 4853 6600 6f72 206d     er_PUBLISH.from 
 80a2068:	6573 646e 7265 5020 7261 6974 6c63 3165     sender Particle1
 80a2078:	6100 6900 206e 6573 646e 6d20 7465 6f68     .a.in send metho
 80a2088:	0064 6572 6563 7669 6e69 2067 656d 7373     d.receiving mess
 80a2098:	6761 0065 656d 7373 6761 2065 6573 746e     age.message sent
 80a20a8:	4e00 544f 5020 6572 7373 6e69 2067 7562     .NOT Pressing bu
 80a20b8:	7474 6e6f 202e 7550 6c62 7369 6968 676e     tton. Publishing
 80a20c8:	6620 6f72 206d 7562 7474 6e6f 7320 7263      from button scr
 80a20d8:	7069 2e74 2000 203a 0a00 2d2d 2d2d 0000     ipt.. : ..----..

080a20e8 <_ZTV7TwoWire>:
	...
 80a20f0:	0a11 080a 0a5b 080a 0a33 080a 0a13 080a     ....[...3.......
 80a2100:	0a3b 080a 0a43 080a 0a4b 080a 0a53 080a     ;...C...K...S...

080a2110 <_ZTV9IPAddress>:
	...
 80a2118:	0a95 080a 00b7 080a 00d9 080a 6162 6475     ............baud
 80a2128:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2138:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2148:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2158:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2168:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2178:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2188:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2198:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a21a8:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a21b8:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a21c8:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a21d8:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a21e8:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a21f8:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2208 <_ZTVN5spark12NetworkClassE>:
	...
 80a2210:	0b75 080a 0b7f 080a 0b89 080a 0b93 080a     u...............
 80a2220:	0b9d 080a 0ba9 080a 0bb5 080a 0bc1 080a     ................
 80a2230:	0bc9 080a 0bd3 080a 0bdd 080a               ............

080a223c <_ZTV8SPIClass>:
	...
 80a2244:	0d79 080a 0d7b 080a 005a 2b25 3330 3a64     y...{...Z.%+03d:
 80a2254:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2264:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2274:	0000 0000                                   ....

080a2278 <_ZTV3UDP>:
	...
 80a2280:	00b9 080a 00e7 080a 0f1f 080a 103f 080a     ............?...
 80a2290:	0f17 080a 0f35 080a 0f53 080a 0f6d 080a     ....5...S...m...
 80a22a0:	0f8f 080a 0fd9 080a 0ffb 080a 1191 080a     ................
 80a22b0:	10a5 080a 0f01 080a 12a1 080a 110d 080a     ................
 80a22c0:	11c9 080a 12cf 080a 1069 080a 0f0d 080a     ........i.......
 80a22d0:	1171 080a 0f13 080a 0f6f 080a fff0 ffff     q.......o.......
 80a22e0:	0000 0000 0f87 080a                         ........

080a22e8 <_ZTV11USARTSerial>:
	...
 80a22f0:	1307 080a 1357 080a 1365 080a 0c59 080a     ....W...e...Y...
 80a2300:	131b 080a 133d 080a 1329 080a 1351 080a     ....=...)...Q...
 80a2310:	1309 080a 130d 080a                         ........

080a2318 <_ZTV9USBSerial>:
	...
 80a2320:	1441 080a 1491 080a 149f 080a 0c59 080a     A...........Y...
 80a2330:	147d 080a 1443 080a 1459 080a 148b 080a     }...C...Y.......
 80a2340:	146f 080a 143d 080a                         o...=...

080a2348 <_ZTVN5spark9WiFiClassE>:
	...
 80a2350:	1657 080a 164d 080a 1643 080a 15b5 080a     W...M...C.......
 80a2360:	1637 080a 162b 080a 161f 080a 1617 080a     7...+...........
 80a2370:	160d 080a 1603 080a 15bf 080a               ............

080a237c <__sf_fake_stdin>:
	...

080a239c <__sf_fake_stdout>:
	...

080a23bc <__sf_fake_stderr>:
	...
 80a23dc:	0043                                        C.

080a23de <link_const_variable_data_end>:
	...

080a23e0 <link_constructors_location>:
 80a23e0:	080a0331 	.word	0x080a0331
 80a23e4:	080a0609 	.word	0x080a0609
 80a23e8:	080a0b65 	.word	0x080a0b65
 80a23ec:	080a0c45 	.word	0x080a0c45
 80a23f0:	080a0d5d 	.word	0x080a0d5d
 80a23f4:	080a0ed5 	.word	0x080a0ed5
 80a23f8:	080a0eed 	.word	0x080a0eed
 80a23fc:	080a1661 	.word	0x080a1661
 80a2400:	080a18b1 	.word	0x080a18b1
 80a2404:	080a18e1 	.word	0x080a18e1
 80a2408:	080a1935 	.word	0x080a1935
 80a240c:	080a19f9 	.word	0x080a19f9
 80a2410:	080a1a7d 	.word	0x080a1a7d
 80a2414:	080a1b01 	.word	0x080a1b01

080a2418 <link_constructors_end>:
	...
