
/Users/ninjacat/Documents/Particle/TakeHeed/test_circuit/target/1.4.0/photon/test_circuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004ba4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4bc0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080a4bc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006dc  20000080  20000080  00040080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4c44  080a4c44  00034c44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4c6c  080a4c6c  00034c6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c9bf4  00000000  00000000  00034c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012b1a  00000000  00000000  000fe864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018d17  00000000  00000000  0011137e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002438  00000000  00000000  0012a095  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003898  00000000  00000000  0012c4cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a0a8  00000000  00000000  0012fd65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c541  00000000  00000000  00159e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa7bd  00000000  00000000  0018634e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6c8  00000000  00000000  00230b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 fb1b 	bl	80a4668 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fb20 	bl	80a467e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a4bc4 	.word	0x080a4bc4
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	2000075c 	.word	0x2000075c
 80a0058:	2000075c 	.word	0x2000075c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fa81 	bl	80a3564 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4b74 	.word	0x080a4b74
 80a0084:	080a4bbc 	.word	0x080a4bbc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8a6 	b.w	80a01d8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f852 	bl	80a0136 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 ba27 	b.w	80a34e8 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f002 bb47 	b.w	80a272c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f002 bb4d 	b.w	80a273c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_Z7OnTimerv>:
}

//-----------------------//-----------------------//-----------------------//-----------------------LOOPING

//-----------------------//-----------------------//-----------------------//-----------------------TIMER
void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <_ZN3UDPD1Ev+0x1c>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	3364      	adds	r3, #100	; 0x64
 80a00c2:	6103      	str	r3, [r0, #16]
 80a00c4:	f002 fe8e 	bl	80a2de4 <_ZN3UDP4stopEv>
 80a00c8:	4620      	mov	r0, r4
 80a00ca:	f002 ffc3 	bl	80a3054 <_ZN3UDP13releaseBufferEv>
 80a00ce:	4620      	mov	r0, r4
 80a00d0:	bd10      	pop	{r4, pc}
 80a00d2:	bf00      	nop
 80a00d4:	080a4a14 	.word	0x080a4a14

080a00d8 <_Z8testCasei.part.3>:
 //somethings
}
//-----------------------//-----------------------//-----------------------//-----------------------TIMER

//-----------------------//-----------------------//-----------------------//-----------------------SWTITCH CASE
void testCase(int component){
 80a00d8:	b510      	push	{r4, lr}
int steps = 3000;
  switch(component){
    case 0:
    //PIN SETUP: Stepper stepper(STEPS, A1, A2, A3, A4);
    stepper.setSpeed(50);
 80a00da:	4c0c      	ldr	r4, [pc, #48]	; (80a010c <_Z8testCasei.part.3+0x34>)
 80a00dc:	2132      	movs	r1, #50	; 0x32
 80a00de:	4620      	mov	r0, r4
 80a00e0:	f000 fe92 	bl	80a0e08 <_ZN7Stepper8setSpeedEl>
    stepper.step(steps);
 80a00e4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80a00e8:	4620      	mov	r0, r4
 80a00ea:	f000 ff5d 	bl	80a0fa8 <_ZN7Stepper4stepEi>
    delay(1000);
 80a00ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00f2:	f002 fb33 	bl	80a275c <delay>
    stepper.setSpeed(80); 
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	2150      	movs	r1, #80	; 0x50
 80a00fa:	f000 fe85 	bl	80a0e08 <_ZN7Stepper8setSpeedEl>
    stepper.step(-steps);
 80a00fe:	4620      	mov	r0, r4
    break;

    default:
    break;
  }
}
 80a0100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    //PIN SETUP: Stepper stepper(STEPS, A1, A2, A3, A4);
    stepper.setSpeed(50);
    stepper.step(steps);
    delay(1000);
    stepper.setSpeed(80); 
    stepper.step(-steps);
 80a0104:	4902      	ldr	r1, [pc, #8]	; (80a0110 <_Z8testCasei.part.3+0x38>)
 80a0106:	f000 bf4f 	b.w	80a0fa8 <_ZN7Stepper4stepEi>
 80a010a:	bf00      	nop
 80a010c:	20000188 	.word	0x20000188
 80a0110:	fffff448 	.word	0xfffff448

080a0114 <_ZN9IPAddressD0Ev>:
 80a0114:	b510      	push	{r4, lr}
 80a0116:	4604      	mov	r4, r0
 80a0118:	2118      	movs	r1, #24
 80a011a:	f003 fafc 	bl	80a3716 <_ZdlPvj>
 80a011e:	4620      	mov	r0, r4
 80a0120:	bd10      	pop	{r4, pc}

080a0122 <_ZN3UDPD0Ev>:
 80a0122:	b510      	push	{r4, lr}
 80a0124:	4604      	mov	r4, r0
 80a0126:	f7ff ffc7 	bl	80a00b8 <_ZN3UDPD1Ev>
 80a012a:	4620      	mov	r0, r4
 80a012c:	214c      	movs	r1, #76	; 0x4c
 80a012e:	f003 faf2 	bl	80a3716 <_ZdlPvj>
 80a0132:	4620      	mov	r0, r4
 80a0134:	bd10      	pop	{r4, pc}

080a0136 <loop>:
  strip.show();
}
//-----------------------//-----------------------//-----------------------//-----------------------SETUP

//-----------------------//-----------------------//-----------------------//-----------------------LOOPING
void loop() {
 80a0136:	f7ff bfcf 	b.w	80a00d8 <_Z8testCasei.part.3>
	...

080a013c <_Z8setupImuv>:
}
//-----------------------//-----------------------//-----------------------//-----------------------SWTITCH CASE


//-----------------------//-----------------------//-----------------------//-----------------------IMU 
void setupImu(){
 80a013c:	b538      	push	{r3, r4, r5, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a013e:	4c1d      	ldr	r4, [pc, #116]	; (80a01b4 <_Z8setupImuv+0x78>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a0140:	231e      	movs	r3, #30
 80a0142:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0144:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a0146:	4a1c      	ldr	r2, [pc, #112]	; (80a01b8 <_Z8setupImuv+0x7c>)

//-----------------------//-----------------------//-----------------------//-----------------------IMU 
void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0148:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a014a:	4b1c      	ldr	r3, [pc, #112]	; (80a01bc <_Z8setupImuv+0x80>)
//-----------------------//-----------------------//-----------------------//-----------------------SWTITCH CASE


//-----------------------//-----------------------//-----------------------//-----------------------IMU 
void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a014c:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a014e:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a0150:	4b1b      	ldr	r3, [pc, #108]	; (80a01c0 <_Z8setupImuv+0x84>)
 80a0152:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0156:	4620      	mov	r0, r4
//-----------------------//-----------------------//-----------------------//-----------------------SWTITCH CASE


//-----------------------//-----------------------//-----------------------//-----------------------IMU 
void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a0158:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a015a:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a015c:	f000 fbfc 	bl	80a0958 <_ZN7LSM9DS15beginEv>
 80a0160:	b998      	cbnz	r0, 80a018a <_Z8setupImuv+0x4e>
  {
    digitalWrite(D7, HIGH); //LED lights up on particle when the IMU cannot begin (usually because of bad circuit connections)
 80a0162:	4629      	mov	r1, r5
 80a0164:	2007      	movs	r0, #7
 80a0166:	f003 fa5e 	bl	80a3626 <digitalWrite>
    Serial.println("Failed to communicate with LSM9DS1.");
 80a016a:	f003 f8c9 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a016e:	4915      	ldr	r1, [pc, #84]	; (80a01c4 <_Z8setupImuv+0x88>)
 80a0170:	f002 fc7b 	bl	80a2a6a <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a0174:	f003 f8c4 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a0178:	4913      	ldr	r1, [pc, #76]	; (80a01c8 <_Z8setupImuv+0x8c>)
 80a017a:	f002 fc76 	bl	80a2a6a <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a017e:	f003 f8bf 	bl	80a3300 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0182:	4912      	ldr	r1, [pc, #72]	; (80a01cc <_Z8setupImuv+0x90>)
 80a0184:	f002 fc71 	bl	80a2a6a <_ZN5Print7printlnEPKc>
 80a0188:	e7fe      	b.n	80a0188 <_Z8setupImuv+0x4c>
    while (1)
      ;
  }
    // imu.begin();
  Serial.println("calibration started");
 80a018a:	f003 f8b9 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a018e:	4910      	ldr	r1, [pc, #64]	; (80a01d0 <_Z8setupImuv+0x94>)
 80a0190:	f002 fc6b 	bl	80a2a6a <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a0194:	4629      	mov	r1, r5
 80a0196:	4620      	mov	r0, r4
 80a0198:	f000 fce4 	bl	80a0b64 <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a019c:	4629      	mov	r1, r5
 80a019e:	4620      	mov	r0, r4
 80a01a0:	f000 fdac 	bl	80a0cfc <_ZN7LSM9DS112calibrateMagEb>
  
  Serial.println("Calibration finished");
 80a01a4:	f003 f8ac 	bl	80a3300 <_Z16_fetch_usbserialv>
}
 80a01a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  
  Serial.println("Calibration finished");
 80a01ac:	4909      	ldr	r1, [pc, #36]	; (80a01d4 <_Z8setupImuv+0x98>)
 80a01ae:	f002 bc5c 	b.w	80a2a6a <_ZN5Print7printlnEPKc>
 80a01b2:	bf00      	nop
 80a01b4:	200000dc 	.word	0x200000dc
 80a01b8:	40a00000 	.word	0x40a00000
 80a01bc:	200000d8 	.word	0x200000d8
 80a01c0:	200001b4 	.word	0x200001b4
 80a01c4:	080a4704 	.word	0x080a4704
 80a01c8:	080a4728 	.word	0x080a4728
 80a01cc:	080a473d 	.word	0x080a473d
 80a01d0:	080a47c5 	.word	0x080a47c5
 80a01d4:	080a47d9 	.word	0x080a47d9

080a01d8 <setup>:
static int16_t iDivide(int16_t iy, int16_t ix);
//NEOPIXELS
void colorWipe(uint8_t wait);

//-----------------------//-----------------------//-----------------------//-----------------------SETUP
void setup() {
 80a01d8:	b570      	push	{r4, r5, r6, lr}
 80a01da:	b096      	sub	sp, #88	; 0x58
  //-----------------------//-----------------------//-----------------------//SETUP-WIFI
  while(!Serial);
 80a01dc:	f003 f890 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a01e0:	f003 f875 	bl	80a32ce <_ZN9USBSerialcvbEv>
 80a01e4:	2800      	cmp	r0, #0
 80a01e6:	d0f9      	beq.n	80a01dc <setup+0x4>
 80a01e8:	4c37      	ldr	r4, [pc, #220]	; (80a02c8 <setup+0xf0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a01ea:	2300      	movs	r3, #0
 80a01ec:	461a      	mov	r2, r3
 80a01ee:	4619      	mov	r1, r3
 80a01f0:	6860      	ldr	r0, [r4, #4]
 80a01f2:	f002 fa3b 	bl	80a266c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a01f6:	2200      	movs	r2, #0
 80a01f8:	4611      	mov	r1, r2
 80a01fa:	6860      	ldr	r0, [r4, #4]
 80a01fc:	4d32      	ldr	r5, [pc, #200]	; (80a02c8 <setup+0xf0>)
 80a01fe:	f002 fa4d 	bl	80a269c <network_ready>
  WiFi.connect();

  //wifi function
  while(!WiFi.ready());
 80a0202:	2800      	cmp	r0, #0
 80a0204:	d0f7      	beq.n	80a01f6 <setup+0x1e>
  Serial.println("Setup");
 80a0206:	f003 f87b 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a020a:	4930      	ldr	r1, [pc, #192]	; (80a02cc <setup+0xf4>)
 80a020c:	f002 fc2d 	bl	80a2a6a <_ZN5Print7printlnEPKc>
  udp.begin(localPort);
 80a0210:	4b2f      	ldr	r3, [pc, #188]	; (80a02d0 <setup+0xf8>)
 80a0212:	2200      	movs	r2, #0
 80a0214:	8819      	ldrh	r1, [r3, #0]
 80a0216:	482f      	ldr	r0, [pc, #188]	; (80a02d4 <setup+0xfc>)
 80a0218:	f002 fdbf 	bl	80a2d9a <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a021c:	2300      	movs	r3, #0
 80a021e:	4619      	mov	r1, r3
 80a0220:	4a2d      	ldr	r2, [pc, #180]	; (80a02d8 <setup+0x100>)
 80a0222:	6868      	ldr	r0, [r5, #4]
 80a0224:	f002 fa72 	bl	80a270c <network_set_hostname>
  WiFi.setHostname("HQRouter_TestingCircuit");
  Serial.println(WiFi.hostname());
 80a0228:	f003 f86a 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a022c:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a022e:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0230:	2240      	movs	r2, #64	; 0x40
 80a0232:	2100      	movs	r1, #0
 80a0234:	a806      	add	r0, sp, #24
 80a0236:	f004 fa22 	bl	80a467e <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a023a:	2340      	movs	r3, #64	; 0x40
 80a023c:	aa06      	add	r2, sp, #24
 80a023e:	4621      	mov	r1, r4
 80a0240:	9400      	str	r4, [sp, #0]
 80a0242:	6868      	ldr	r0, [r5, #4]
 80a0244:	f002 fa6a 	bl	80a271c <network_get_hostname>
        return String(buf);
 80a0248:	a906      	add	r1, sp, #24
 80a024a:	a802      	add	r0, sp, #8
 80a024c:	f002 fd34 	bl	80a2cb8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0250:	9902      	ldr	r1, [sp, #8]
 80a0252:	4630      	mov	r0, r6
 80a0254:	f002 fc09 	bl	80a2a6a <_ZN5Print7printlnEPKc>
 80a0258:	a802      	add	r0, sp, #8
 80a025a:	f002 fce6 	bl	80a2c2a <_ZN6StringD1Ev>
  Serial.println(WiFi.localIP());
 80a025e:	f003 f84f 	bl	80a3300 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0262:	4622      	mov	r2, r4
 80a0264:	4621      	mov	r1, r4
 80a0266:	4606      	mov	r6, r0
 80a0268:	6868      	ldr	r0, [r5, #4]
 80a026a:	f002 f9f7 	bl	80a265c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a026e:	1c81      	adds	r1, r0, #2
 80a0270:	a806      	add	r0, sp, #24
 80a0272:	f002 fb05 	bl	80a2880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0276:	a906      	add	r1, sp, #24
 80a0278:	4630      	mov	r0, r6
 80a027a:	f002 fc00 	bl	80a2a7e <_ZN5Print7printlnERK9Printable>
  Serial.begin(9600); //possibly : 115200
 80a027e:	f003 f83f 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a0282:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0286:	f003 f81b 	bl	80a32c0 <_ZN9USBSerial5beginEl>

  //-----------------------//-----------------------//-----------------------//SETUP-IMU
  iVx = 0;
 80a028a:	4b14      	ldr	r3, [pc, #80]	; (80a02dc <setup+0x104>)
 80a028c:	801c      	strh	r4, [r3, #0]
  iVy = 0;
 80a028e:	4b14      	ldr	r3, [pc, #80]	; (80a02e0 <setup+0x108>)
 80a0290:	801c      	strh	r4, [r3, #0]
  iVz = 0;
 80a0292:	4b14      	ldr	r3, [pc, #80]	; (80a02e4 <setup+0x10c>)
 80a0294:	801c      	strh	r4, [r3, #0]
  if(!onlyMotor)setupImu();
 80a0296:	4b14      	ldr	r3, [pc, #80]	; (80a02e8 <setup+0x110>)
 80a0298:	781a      	ldrb	r2, [r3, #0]
 80a029a:	461c      	mov	r4, r3
 80a029c:	b90a      	cbnz	r2, 80a02a2 <setup+0xca>
 80a029e:	f7ff ff4d 	bl	80a013c <_Z8setupImuv>
    
  //-----------------------//-----------------------//-----------------------//SETUP-TIMER
  if(!onlyMotor)updateTimer.SetCallback(OnTimer);
 80a02a2:	7823      	ldrb	r3, [r4, #0]
 80a02a4:	b91b      	cbnz	r3, 80a02ae <setup+0xd6>
 80a02a6:	4911      	ldr	r1, [pc, #68]	; (80a02ec <setup+0x114>)
 80a02a8:	4811      	ldr	r0, [pc, #68]	; (80a02f0 <setup+0x118>)
 80a02aa:	f000 f891 	bl	80a03d0 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>
  //-----------------------//-----------------------//-----------------------//SETUP-LED_STRIP
  strip.setBrightness(BRIGHTNESS);
 80a02ae:	2132      	movs	r1, #50	; 0x32
 80a02b0:	4810      	ldr	r0, [pc, #64]	; (80a02f4 <setup+0x11c>)
 80a02b2:	f001 ffdb 	bl	80a226c <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a02b6:	480f      	ldr	r0, [pc, #60]	; (80a02f4 <setup+0x11c>)
 80a02b8:	f000 fee8 	bl	80a108c <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a02bc:	480d      	ldr	r0, [pc, #52]	; (80a02f4 <setup+0x11c>)
 80a02be:	f000 ff1b 	bl	80a10f8 <_ZN17Adafruit_NeoPixel4showEv>
}
 80a02c2:	b016      	add	sp, #88	; 0x58
 80a02c4:	bd70      	pop	{r4, r5, r6, pc}
 80a02c6:	bf00      	nop
 80a02c8:	20000658 	.word	0x20000658
 80a02cc:	080a47ee 	.word	0x080a47ee
 80a02d0:	20000000 	.word	0x20000000
 80a02d4:	20000084 	.word	0x20000084
 80a02d8:	080a47f4 	.word	0x080a47f4
 80a02dc:	20000160 	.word	0x20000160
 80a02e0:	20000162 	.word	0x20000162
 80a02e4:	20000164 	.word	0x20000164
 80a02e8:	20000004 	.word	0x20000004
 80a02ec:	080a00b5 	.word	0x080a00b5
 80a02f0:	2000017c 	.word	0x2000017c
 80a02f4:	20000168 	.word	0x20000168

080a02f8 <_GLOBAL__sub_I_SystemMode>:
      j++;

      delay(_wait);
    }
  }
}
 80a02f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02fa:	f002 f809 	bl	80a2310 <HAL_Pin_Map>
#include "SparkCorePolledTimer.h"
//COMMUNITION BETWEEN PARTICLES
#include "simple-OSC.h"

//-----------------------//-----------------------//-----------------------//-----------------------PARTICLE
SYSTEM_THREAD(ENABLED);
 80a02fe:	2100      	movs	r1, #0
 80a0300:	2001      	movs	r0, #1
 80a0302:	f002 f987 	bl	80a2614 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0306:	4b1f      	ldr	r3, [pc, #124]	; (80a0384 <_GLOBAL__sub_I_SystemMode+0x8c>)
 80a0308:	2200      	movs	r2, #0
 80a030a:	701a      	strb	r2, [r3, #0]
 80a030c:	805a      	strh	r2, [r3, #2]
 80a030e:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC); //avoid automatic connection to the cloud

//-----------------------//-----------------------//-----------------------//-----------------------WIFI
unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0312:	4d1d      	ldr	r5, [pc, #116]	; (80a0388 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a0314:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0316:	2002      	movs	r0, #2
 80a0318:	f002 f96c 	bl	80a25f4 <set_system_mode>
 80a031c:	4c1b      	ldr	r4, [pc, #108]	; (80a038c <_GLOBAL__sub_I_SystemMode+0x94>)
 80a031e:	4628      	mov	r0, r5
 80a0320:	f002 faa0 	bl	80a2864 <_ZN9IPAddressC1Ev>
 80a0324:	4628      	mov	r0, r5
int port;
UDP udp;
 80a0326:	4d1a      	ldr	r5, [pc, #104]	; (80a0390 <_GLOBAL__sub_I_SystemMode+0x98>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC); //avoid automatic connection to the cloud

//-----------------------//-----------------------//-----------------------//-----------------------WIFI
unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0328:	4622      	mov	r2, r4
 80a032a:	491a      	ldr	r1, [pc, #104]	; (80a0394 <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a032c:	f003 f9ee 	bl	80a370c <__aeabi_atexit>
int port;
UDP udp;
 80a0330:	4628      	mov	r0, r5
 80a0332:	f002 fe71 	bl	80a3018 <_ZN3UDPC1Ev>
 80a0336:	4622      	mov	r2, r4
 80a0338:	4917      	ldr	r1, [pc, #92]	; (80a0398 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a033a:	4628      	mov	r0, r5
 80a033c:	f003 f9e6 	bl	80a370c <__aeabi_atexit>
//-----------------------//-----------------------//-----------------------//-----------------------NEOPIXELS
#define PIXEL_PIN D2
#define PIXEL_COUNT 24
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0340:	4d16      	ldr	r5, [pc, #88]	; (80a039c <_GLOBAL__sub_I_SystemMode+0xa4>)
IPAddress ipAddress;
int port;
UDP udp;

//-----------------------//-----------------------//-----------------------//-----------------------IMU
LSM9DS1 imu;
 80a0342:	4817      	ldr	r0, [pc, #92]	; (80a03a0 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a0344:	f000 f894 	bl	80a0470 <_ZN7LSM9DS1C1Ev>
//-----------------------//-----------------------//-----------------------//-----------------------NEOPIXELS
#define PIXEL_PIN D2
#define PIXEL_COUNT 24
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0348:	2302      	movs	r3, #2
 80a034a:	461a      	mov	r2, r3
 80a034c:	2118      	movs	r1, #24
 80a034e:	4628      	mov	r0, r5
 80a0350:	f000 fec1 	bl	80a10d6 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0354:	4622      	mov	r2, r4
 80a0356:	4913      	ldr	r1, [pc, #76]	; (80a03a4 <_GLOBAL__sub_I_SystemMode+0xac>)
 80a0358:	4628      	mov	r0, r5
 80a035a:	f003 f9d7 	bl	80a370c <__aeabi_atexit>
uint32_t  colorArrSaved[PIXEL_COUNT];

//-----------------------//-----------------------//-----------------------//-----------------------MOTORS
#define STEPS 300
Stepper stepper(STEPS, A1, A2, A3, A4);
 80a035e:	220d      	movs	r2, #13
 80a0360:	230e      	movs	r3, #14
 80a0362:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0366:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a036a:	230c      	movs	r3, #12
 80a036c:	220b      	movs	r2, #11
 80a036e:	480e      	ldr	r0, [pc, #56]	; (80a03a8 <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a0370:	f000 fd28 	bl	80a0dc4 <_ZN7StepperC1Eiiiii>
bool onlyMotor = true;

//-----------------------//-----------------------//-----------------------//-----------------------TIMER
SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a0374:	480d      	ldr	r0, [pc, #52]	; (80a03ac <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a0376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
      j++;

      delay(_wait);
    }
  }
}
 80a037a:	b003      	add	sp, #12
 80a037c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
#define STEPS 300
Stepper stepper(STEPS, A1, A2, A3, A4);
bool onlyMotor = true;

//-----------------------//-----------------------//-----------------------//-----------------------TIMER
SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a0380:	f000 b81c 	b.w	80a03bc <_ZN20SparkCorePolledTimerC1Em>
 80a0384:	200000d0 	.word	0x200000d0
 80a0388:	200001b8 	.word	0x200001b8
 80a038c:	20000080 	.word	0x20000080
 80a0390:	20000084 	.word	0x20000084
 80a0394:	080a00b3 	.word	0x080a00b3
 80a0398:	080a00b9 	.word	0x080a00b9
 80a039c:	20000168 	.word	0x20000168
 80a03a0:	200000dc 	.word	0x200000dc
 80a03a4:	080a1039 	.word	0x080a1039
 80a03a8:	20000188 	.word	0x20000188
 80a03ac:	2000017c 	.word	0x2000017c

080a03b0 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a03b0:	b510      	push	{r4, lr}
 80a03b2:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a03b4:	f001 ffa4 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a03b8:	6020      	str	r0, [r4, #0]
 80a03ba:	bd10      	pop	{r4, pc}

080a03bc <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a03bc:	b538      	push	{r3, r4, r5, lr}
 80a03be:	4604      	mov	r4, r0
 80a03c0:	460d      	mov	r5, r1
    Reset();
 80a03c2:	f7ff fff5 	bl	80a03b0 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a03c6:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a03c8:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a03ca:	60a3      	str	r3, [r4, #8]
}
 80a03cc:	4620      	mov	r0, r4
 80a03ce:	bd38      	pop	{r3, r4, r5, pc}

080a03d0 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a03d0:	6081      	str	r1, [r0, #8]
 80a03d2:	4770      	bx	lr

080a03d4 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a03d4:	f001 bf9c 	b.w	80a2310 <HAL_Pin_Map>

080a03d8 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a03d8:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a03da:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a03dc:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a03de:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a03e0:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a03e2:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a03e4:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a03e6:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a03e8:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a03ea:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a03ec:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a03ee:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a03f0:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a03f2:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a03f4:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a03f8:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a03fa:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a03fc:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a03fe:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0400:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0402:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0404:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0406:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0408:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a040a:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a040c:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a040e:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0410:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0414:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0416:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0418:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a041a:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a041c:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a041e:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0420:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0422:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0424:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0426:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0428:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a042a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a042e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0430:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0434:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0438:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a043a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a043e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0442:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0446:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0448:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a044a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a044c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a044e:	6565      	str	r5, [r4, #84]	; 0x54
 80a0450:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0454:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0458:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a045c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a0460:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0464:	d1f0      	bne.n	80a0448 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a0466:	f04f 0300 	mov.w	r3, #0
 80a046a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a046e:	bd30      	pop	{r4, r5, pc}

080a0470 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a0470:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a0472:	231e      	movs	r3, #30
 80a0474:	226b      	movs	r2, #107	; 0x6b
 80a0476:	2101      	movs	r1, #1
 80a0478:	f7ff ffae 	bl	80a03d8 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a047c:	bd10      	pop	{r4, pc}

080a047e <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a047e:	b510      	push	{r4, lr}
 80a0480:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0482:	88c0      	ldrh	r0, [r0, #6]
 80a0484:	f003 ff3a 	bl	80a42fc <__aeabi_ui2f>
 80a0488:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a048c:	f003 ff8e 	bl	80a43ac <__aeabi_fmul>
 80a0490:	6760      	str	r0, [r4, #116]	; 0x74
 80a0492:	bd10      	pop	{r4, pc}

080a0494 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0494:	b510      	push	{r4, lr}
 80a0496:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0498:	7dc0      	ldrb	r0, [r0, #23]
 80a049a:	f003 ff2f 	bl	80a42fc <__aeabi_ui2f>
 80a049e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a04a2:	f003 ff83 	bl	80a43ac <__aeabi_fmul>
 80a04a6:	67a0      	str	r0, [r4, #120]	; 0x78
 80a04a8:	bd10      	pop	{r4, pc}
	...

080a04ac <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a04ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a04b0:	3b04      	subs	r3, #4
 80a04b2:	2b0c      	cmp	r3, #12
 80a04b4:	d814      	bhi.n	80a04e0 <_ZN7LSM9DS18calcmResEv+0x34>
 80a04b6:	e8df f003 	tbb	[pc, r3]
 80a04ba:	1307      	.short	0x1307
 80a04bc:	130a1313 	.word	0x130a1313
 80a04c0:	130d1313 	.word	0x130d1313
 80a04c4:	1313      	.short	0x1313
 80a04c6:	10          	.byte	0x10
 80a04c7:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a04c8:	4b06      	ldr	r3, [pc, #24]	; (80a04e4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a04ca:	681b      	ldr	r3, [r3, #0]
 80a04cc:	e007      	b.n	80a04de <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a04ce:	4b05      	ldr	r3, [pc, #20]	; (80a04e4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a04d0:	685b      	ldr	r3, [r3, #4]
 80a04d2:	e004      	b.n	80a04de <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a04d4:	4b03      	ldr	r3, [pc, #12]	; (80a04e4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a04d6:	689b      	ldr	r3, [r3, #8]
 80a04d8:	e001      	b.n	80a04de <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a04dc:	68db      	ldr	r3, [r3, #12]
 80a04de:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a04e0:	4770      	bx	lr
 80a04e2:	bf00      	nop
 80a04e4:	20000008 	.word	0x20000008

080a04e8 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a04e8:	88c3      	ldrh	r3, [r0, #6]
 80a04ea:	2bf5      	cmp	r3, #245	; 0xf5
 80a04ec:	d007      	beq.n	80a04fe <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a04ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a04f2:	d004      	beq.n	80a04fe <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a04f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a04f8:	bf1c      	itt	ne
 80a04fa:	23f5      	movne	r3, #245	; 0xf5
 80a04fc:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a04fe:	7dc2      	ldrb	r2, [r0, #23]
 80a0500:	2a10      	cmp	r2, #16
 80a0502:	d803      	bhi.n	80a050c <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0504:	4b08      	ldr	r3, [pc, #32]	; (80a0528 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0506:	40d3      	lsrs	r3, r2
 80a0508:	07da      	lsls	r2, r3, #31
 80a050a:	d401      	bmi.n	80a0510 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a050c:	2302      	movs	r3, #2
 80a050e:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0510:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0514:	2a10      	cmp	r2, #16
 80a0516:	d803      	bhi.n	80a0520 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0518:	4b04      	ldr	r3, [pc, #16]	; (80a052c <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a051a:	40d3      	lsrs	r3, r2
 80a051c:	07db      	lsls	r3, r3, #31
 80a051e:	d402      	bmi.n	80a0526 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0520:	2304      	movs	r3, #4
 80a0522:	f880 3020 	strb.w	r3, [r0, #32]
 80a0526:	4770      	bx	lr
 80a0528:	00010114 	.word	0x00010114
 80a052c:	00011110 	.word	0x00011110

080a0530 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a0530:	b510      	push	{r4, lr}
 80a0532:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a0534:	2101      	movs	r1, #1
 80a0536:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a053a:	f003 f863 	bl	80a3604 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a053e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a0542:	2101      	movs	r1, #1
 80a0544:	f003 f86f 	bl	80a3626 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a0548:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a054c:	2101      	movs	r1, #1
 80a054e:	f003 f859 	bl	80a3604 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a0552:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a0556:	4c0a      	ldr	r4, [pc, #40]	; (80a0580 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a0558:	2101      	movs	r1, #1
 80a055a:	f003 f864 	bl	80a3626 <digitalWrite>
	
	SPI.begin();
 80a055e:	4620      	mov	r0, r4
 80a0560:	f002 faf4 	bl	80a2b4c <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a0564:	4620      	mov	r0, r4
 80a0566:	2108      	movs	r1, #8
 80a0568:	f002 fb42 	bl	80a2bf0 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a056c:	4620      	mov	r0, r4
 80a056e:	2101      	movs	r1, #1
 80a0570:	f002 faf1 	bl	80a2b56 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a0574:	4620      	mov	r0, r4
}
 80a0576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a057a:	2100      	movs	r1, #0
 80a057c:	f002 baee 	b.w	80a2b5c <_ZN8SPIClass11setDataModeEh>
 80a0580:	2000069c 	.word	0x2000069c

080a0584 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0586:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0588:	4617      	mov	r7, r2
 80a058a:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a058c:	4d09      	ldr	r5, [pc, #36]	; (80a05b4 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a058e:	4620      	mov	r0, r4
 80a0590:	2100      	movs	r1, #0
 80a0592:	f003 f848 	bl	80a3626 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0596:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a059a:	4628      	mov	r0, r5
 80a059c:	f002 fb3c 	bl	80a2c18 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a05a0:	4631      	mov	r1, r6
 80a05a2:	4628      	mov	r0, r5
 80a05a4:	f002 fb38 	bl	80a2c18 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a05a8:	4620      	mov	r0, r4
}
 80a05aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a05ae:	2101      	movs	r1, #1
 80a05b0:	f003 b839 	b.w	80a3626 <digitalWrite>
 80a05b4:	2000069c 	.word	0x2000069c

080a05b8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a05b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05ba:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a05bc:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a05c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a05c4:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a05c6:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a05ca:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a05ce:	d103      	bne.n	80a05d8 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a05d0:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a05d2:	bf88      	it	hi
 80a05d4:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a05d8:	b28c      	uxth	r4, r1
 80a05da:	4620      	mov	r0, r4
 80a05dc:	2100      	movs	r1, #0
 80a05de:	f003 f822 	bl	80a3626 <digitalWrite>
	SPI.transfer(rAddress);
 80a05e2:	4629      	mov	r1, r5
 80a05e4:	4809      	ldr	r0, [pc, #36]	; (80a060c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a05e6:	f002 fb17 	bl	80a2c18 <_ZN8SPIClass8transferEh>
 80a05ea:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a05ec:	1bab      	subs	r3, r5, r6
 80a05ee:	429f      	cmp	r7, r3
 80a05f0:	dd06      	ble.n	80a0600 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a05f2:	2100      	movs	r1, #0
 80a05f4:	4805      	ldr	r0, [pc, #20]	; (80a060c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a05f6:	f002 fb0f 	bl	80a2c18 <_ZN8SPIClass8transferEh>
 80a05fa:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a05fe:	e7f5      	b.n	80a05ec <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0600:	4620      	mov	r0, r4
 80a0602:	2101      	movs	r1, #1
 80a0604:	f003 f80f 	bl	80a3626 <digitalWrite>
	
	return 1;
}
 80a0608:	2001      	movs	r0, #1
 80a060a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a060c:	2000069c 	.word	0x2000069c

080a0610 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0612:	2301      	movs	r3, #1
 80a0614:	9300      	str	r3, [sp, #0]
 80a0616:	f10d 030f 	add.w	r3, sp, #15
 80a061a:	f7ff ffcd 	bl	80a05b8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a061e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0622:	b005      	add	sp, #20
 80a0624:	f85d fb04 	ldr.w	pc, [sp], #4

080a0628 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0628:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a062a:	f003 f815 	bl	80a3658 <_Z19__fetch_global_Wirev>
}
 80a062e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0632:	f002 b8dd 	b.w	80a27f0 <_ZN7TwoWire5beginEv>

080a0636 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0636:	b570      	push	{r4, r5, r6, lr}
 80a0638:	460e      	mov	r6, r1
 80a063a:	4615      	mov	r5, r2
 80a063c:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a063e:	f003 f80b 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a0642:	4631      	mov	r1, r6
 80a0644:	f002 f8e6 	bl	80a2814 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0648:	f003 f806 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a064c:	6803      	ldr	r3, [r0, #0]
 80a064e:	4629      	mov	r1, r5
 80a0650:	689b      	ldr	r3, [r3, #8]
 80a0652:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0654:	f003 f800 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a0658:	6803      	ldr	r3, [r0, #0]
 80a065a:	4621      	mov	r1, r4
 80a065c:	689a      	ldr	r2, [r3, #8]
 80a065e:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0660:	f002 fffa 	bl	80a3658 <_Z19__fetch_global_Wirev>
}
 80a0664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0668:	f002 b8dc 	b.w	80a2824 <_ZN7TwoWire15endTransmissionEv>

080a066c <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a066c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a066e:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0670:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0672:	2a01      	cmp	r2, #1
 80a0674:	d105      	bne.n	80a0682 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0676:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0678:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a067a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a067e:	f7ff bfda 	b.w	80a0636 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0682:	b92a      	cbnz	r2, 80a0690 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0684:	460a      	mov	r2, r1
}
 80a0686:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0688:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a068c:	f7ff bf7a 	b.w	80a0584 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0690:	bc10      	pop	{r4}
 80a0692:	4770      	bx	lr

080a0694 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0694:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0696:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0698:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a069a:	b113      	cbz	r3, 80a06a2 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a069c:	7a03      	ldrb	r3, [r0, #8]
 80a069e:	015b      	lsls	r3, r3, #5
 80a06a0:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a06a2:	88e2      	ldrh	r2, [r4, #6]
 80a06a4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a06a8:	d005      	beq.n	80a06b6 <_ZN7LSM9DS18initGyroEv+0x22>
 80a06aa:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a06ae:	d104      	bne.n	80a06ba <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a06b0:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a06b4:	e001      	b.n	80a06ba <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a06b6:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a06ba:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a06bc:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a06be:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a06c2:	431a      	orrs	r2, r3
 80a06c4:	4620      	mov	r0, r4
 80a06c6:	f7ff ffd1 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a06ca:	2200      	movs	r2, #0
 80a06cc:	2111      	movs	r1, #17
 80a06ce:	4620      	mov	r0, r4
 80a06d0:	f7ff ffcc 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a06d4:	7aa3      	ldrb	r3, [r4, #10]
 80a06d6:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a06d8:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a06da:	bf14      	ite	ne
 80a06dc:	2280      	movne	r2, #128	; 0x80
 80a06de:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a06e0:	b12b      	cbz	r3, 80a06ee <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a06e2:	7b23      	ldrb	r3, [r4, #12]
 80a06e4:	f003 030f 	and.w	r3, r3, #15
 80a06e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a06ec:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a06ee:	2112      	movs	r1, #18
 80a06f0:	4620      	mov	r0, r4
 80a06f2:	f7ff ffbb 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a06f6:	7ce3      	ldrb	r3, [r4, #19]
 80a06f8:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a06fa:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a06fc:	bf0c      	ite	eq
 80a06fe:	2200      	moveq	r2, #0
 80a0700:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0702:	b113      	cbz	r3, 80a070a <_ZN7LSM9DS18initGyroEv+0x76>
 80a0704:	f042 0210 	orr.w	r2, r2, #16
 80a0708:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a070a:	7c63      	ldrb	r3, [r4, #17]
 80a070c:	b10b      	cbz	r3, 80a0712 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a070e:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0712:	7d23      	ldrb	r3, [r4, #20]
 80a0714:	b10b      	cbz	r3, 80a071a <_ZN7LSM9DS18initGyroEv+0x86>
 80a0716:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a071a:	211e      	movs	r1, #30
 80a071c:	4620      	mov	r0, r4
 80a071e:	f7ff ffa5 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0722:	7b63      	ldrb	r3, [r4, #13]
 80a0724:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0726:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0728:	bf0c      	ite	eq
 80a072a:	2200      	moveq	r2, #0
 80a072c:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a072e:	b113      	cbz	r3, 80a0736 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0730:	f042 0210 	orr.w	r2, r2, #16
 80a0734:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0736:	7be3      	ldrb	r3, [r4, #15]
 80a0738:	b10b      	cbz	r3, 80a073e <_ZN7LSM9DS18initGyroEv+0xaa>
 80a073a:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a073e:	4620      	mov	r0, r4
}
 80a0740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0744:	2113      	movs	r1, #19
 80a0746:	f7ff bf91 	b.w	80a066c <_ZN7LSM9DS111xgWriteByteEhh>

080a074a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a074a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a074c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a074e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0750:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0752:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0754:	bf0c      	ite	eq
 80a0756:	2200      	moveq	r2, #0
 80a0758:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a075a:	b113      	cbz	r3, 80a0762 <_ZN7LSM9DS19initAccelEv+0x18>
 80a075c:	f042 0210 	orr.w	r2, r2, #16
 80a0760:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0762:	7e63      	ldrb	r3, [r4, #25]
 80a0764:	b10b      	cbz	r3, 80a076a <_ZN7LSM9DS19initAccelEv+0x20>
 80a0766:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a076a:	211f      	movs	r1, #31
 80a076c:	4620      	mov	r0, r4
 80a076e:	f7ff ff7d 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0772:	7da2      	ldrb	r2, [r4, #22]
 80a0774:	b112      	cbz	r2, 80a077c <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0776:	7e22      	ldrb	r2, [r4, #24]
 80a0778:	0152      	lsls	r2, r2, #5
 80a077a:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a077c:	7de3      	ldrb	r3, [r4, #23]
 80a077e:	2b08      	cmp	r3, #8
 80a0780:	d006      	beq.n	80a0790 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0782:	2b10      	cmp	r3, #16
 80a0784:	d007      	beq.n	80a0796 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0786:	2b04      	cmp	r3, #4
 80a0788:	d107      	bne.n	80a079a <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a078a:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a078e:	e004      	b.n	80a079a <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0790:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0794:	e001      	b.n	80a079a <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0796:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a079a:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a079e:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a07a0:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a07a2:	bfa2      	ittt	ge
 80a07a4:	f003 0303 	andge.w	r3, r3, #3
 80a07a8:	431a      	orrge	r2, r3
 80a07aa:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	f7ff ff5c 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a07b4:	7f62      	ldrb	r2, [r4, #29]
 80a07b6:	b12a      	cbz	r2, 80a07c4 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a07b8:	7fa2      	ldrb	r2, [r4, #30]
 80a07ba:	0152      	lsls	r2, r2, #5
 80a07bc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a07c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a07c4:	4620      	mov	r0, r4
}
 80a07c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a07ca:	2121      	movs	r1, #33	; 0x21
 80a07cc:	f7ff bf4e 	b.w	80a066c <_ZN7LSM9DS111xgWriteByteEhh>

080a07d0 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a07d0:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07d2:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a07d4:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07d6:	2a01      	cmp	r2, #1
 80a07d8:	d105      	bne.n	80a07e6 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a07da:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a07dc:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a07de:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a07e2:	f7ff bf28 	b.w	80a0636 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a07e6:	b92a      	cbnz	r2, 80a07f4 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a07e8:	460a      	mov	r2, r1
}
 80a07ea:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a07ec:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a07f0:	f7ff bec8 	b.w	80a0584 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a07f4:	bc10      	pop	{r4}
 80a07f6:	4770      	bx	lr

080a07f8 <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a07f8:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a07fa:	b570      	push	{r4, r5, r6, lr}
 80a07fc:	4606      	mov	r6, r0
 80a07fe:	460c      	mov	r4, r1
 80a0800:	4615      	mov	r5, r2
	if (axis > 2)
 80a0802:	d810      	bhi.n	80a0826 <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0804:	0049      	lsls	r1, r1, #1
 80a0806:	3105      	adds	r1, #5
 80a0808:	b2d2      	uxtb	r2, r2
 80a080a:	b2c9      	uxtb	r1, r1
 80a080c:	f7ff ffe0 	bl	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a0810:	1ce1      	adds	r1, r4, #3
 80a0812:	0049      	lsls	r1, r1, #1
 80a0814:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0818:	4630      	mov	r0, r6
}
 80a081a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a081e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0822:	f7ff bfd5 	b.w	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
 80a0826:	bd70      	pop	{r4, r5, r6, pc}

080a0828 <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a0828:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a082a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a082e:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0830:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0832:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0836:	bf08      	it	eq
 80a0838:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a083a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a083e:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0842:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0846:	bf18      	it	ne
 80a0848:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a084a:	009b      	lsls	r3, r3, #2
 80a084c:	f003 031c 	and.w	r3, r3, #28
 80a0850:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0852:	431a      	orrs	r2, r3
 80a0854:	2120      	movs	r1, #32
 80a0856:	f7ff ffbb 	bl	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
 80a085a:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a085e:	4620      	mov	r0, r4
 80a0860:	3b08      	subs	r3, #8
 80a0862:	b2db      	uxtb	r3, r3
 80a0864:	2b08      	cmp	r3, #8
 80a0866:	bf96      	itet	ls
 80a0868:	4a12      	ldrls	r2, [pc, #72]	; (80a08b4 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a086a:	2200      	movhi	r2, #0
 80a086c:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a086e:	2121      	movs	r1, #33	; 0x21
 80a0870:	f7ff ffae 	bl	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0874:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0878:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a087a:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a087c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0880:	bf0c      	ite	eq
 80a0882:	2200      	moveq	r2, #0
 80a0884:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0886:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a088a:	431a      	orrs	r2, r3
 80a088c:	2122      	movs	r1, #34	; 0x22
 80a088e:	f7ff ff9f 	bl	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0892:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0896:	4620      	mov	r0, r4
 80a0898:	0092      	lsls	r2, r2, #2
 80a089a:	f002 020c 	and.w	r2, r2, #12
 80a089e:	2123      	movs	r1, #35	; 0x23
 80a08a0:	f7ff ff96 	bl	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a08a4:	4620      	mov	r0, r4
}
 80a08a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a08aa:	2200      	movs	r2, #0
 80a08ac:	2124      	movs	r1, #36	; 0x24
 80a08ae:	f7ff bf8f 	b.w	80a07d0 <_ZN7LSM9DS110mWriteByteEhh>
 80a08b2:	bf00      	nop
 80a08b4:	080a4854 	.word	0x080a4854

080a08b8 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a08b8:	b538      	push	{r3, r4, r5, lr}
 80a08ba:	460c      	mov	r4, r1
 80a08bc:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a08be:	f002 fecb 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a08c2:	4621      	mov	r1, r4
 80a08c4:	f001 ffa6 	bl	80a2814 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a08c8:	f002 fec6 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a08cc:	6803      	ldr	r3, [r0, #0]
 80a08ce:	4629      	mov	r1, r5
 80a08d0:	689b      	ldr	r3, [r3, #8]
 80a08d2:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a08d4:	f002 fec0 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a08d8:	2100      	movs	r1, #0
 80a08da:	f001 ff9f 	bl	80a281c <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a08de:	f002 febb 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a08e2:	2201      	movs	r2, #1
 80a08e4:	4621      	mov	r1, r4
 80a08e6:	f001 ff92 	bl	80a280e <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a08ea:	f002 feb5 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a08ee:	6803      	ldr	r3, [r0, #0]
 80a08f0:	695b      	ldr	r3, [r3, #20]
 80a08f2:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a08f4:	b2c0      	uxtb	r0, r0
 80a08f6:	bd38      	pop	{r3, r4, r5, pc}

080a08f8 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a08f8:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a08fa:	7801      	ldrb	r1, [r0, #0]
 80a08fc:	2901      	cmp	r1, #1
 80a08fe:	d103      	bne.n	80a0908 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0900:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0904:	f7ff bfd8 	b.w	80a08b8 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0908:	b919      	cbnz	r1, 80a0912 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a090a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a090e:	f7ff be7f 	b.w	80a0610 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0912:	2000      	movs	r0, #0
 80a0914:	4770      	bx	lr

080a0916 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0916:	b538      	push	{r3, r4, r5, lr}
 80a0918:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a091a:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a091c:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a091e:	f7ff ffeb 	bl	80a08f8 <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a0922:	b11d      	cbz	r5, 80a092c <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a0924:	f040 0202 	orr.w	r2, r0, #2
 80a0928:	b2d2      	uxtb	r2, r2
 80a092a:	e001      	b.n	80a0930 <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a092c:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a0930:	4620      	mov	r0, r4
}
 80a0932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a0936:	2123      	movs	r1, #35	; 0x23
 80a0938:	f7ff be98 	b.w	80a066c <_ZN7LSM9DS111xgWriteByteEhh>

080a093c <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a093c:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a093e:	7801      	ldrb	r1, [r0, #0]
 80a0940:	2901      	cmp	r1, #1
 80a0942:	d103      	bne.n	80a094c <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0944:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0948:	f7ff bfb6 	b.w	80a08b8 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a094c:	b919      	cbnz	r1, 80a0956 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a094e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0952:	f7ff be5d 	b.w	80a0610 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0956:	4770      	bx	lr

080a0958 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0958:	b538      	push	{r3, r4, r5, lr}
 80a095a:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a095c:	7843      	ldrb	r3, [r0, #1]
 80a095e:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0962:	7883      	ldrb	r3, [r0, #2]
 80a0964:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0968:	f7ff fdbe 	bl	80a04e8 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a096c:	f7ff fd87 	bl	80a047e <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0970:	4620      	mov	r0, r4
 80a0972:	f7ff fd9b 	bl	80a04ac <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0976:	4620      	mov	r0, r4
 80a0978:	f7ff fd8c 	bl	80a0494 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a097c:	7823      	ldrb	r3, [r4, #0]
 80a097e:	2b01      	cmp	r3, #1
 80a0980:	d103      	bne.n	80a098a <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0982:	4620      	mov	r0, r4
 80a0984:	f7ff fe50 	bl	80a0628 <_ZN7LSM9DS17initI2CEv>
 80a0988:	e003      	b.n	80a0992 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a098a:	b913      	cbnz	r3, 80a0992 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a098c:	4620      	mov	r0, r4
 80a098e:	f7ff fdcf 	bl	80a0530 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0992:	210f      	movs	r1, #15
 80a0994:	4620      	mov	r0, r4
 80a0996:	f7ff ffd1 	bl	80a093c <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a099a:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a099c:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a099e:	4620      	mov	r0, r4
 80a09a0:	f7ff ffaa 	bl	80a08f8 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a09a4:	f646 033d 	movw	r3, #26685	; 0x683d
 80a09a8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a09ac:	b205      	sxth	r5, r0
 80a09ae:	429d      	cmp	r5, r3
 80a09b0:	d10a      	bne.n	80a09c8 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a09b2:	4620      	mov	r0, r4
 80a09b4:	f7ff fe6e 	bl	80a0694 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a09b8:	4620      	mov	r0, r4
 80a09ba:	f7ff fec6 	bl	80a074a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a09be:	4620      	mov	r0, r4
 80a09c0:	f7ff ff32 	bl	80a0828 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a09c4:	4628      	mov	r0, r5
 80a09c6:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a09c8:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a09ca:	bd38      	pop	{r3, r4, r5, pc}

080a09cc <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a09cc:	b510      	push	{r4, lr}
 80a09ce:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a09d0:	2127      	movs	r1, #39	; 0x27
 80a09d2:	f7ff ffb3 	bl	80a093c <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a09d6:	2101      	movs	r1, #1
 80a09d8:	40a1      	lsls	r1, r4
 80a09da:	4008      	ands	r0, r1
 80a09dc:	4120      	asrs	r0, r4
}
 80a09de:	b2c0      	uxtb	r0, r0
 80a09e0:	bd10      	pop	{r4, pc}

080a09e2 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a09e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a09e6:	4690      	mov	r8, r2
 80a09e8:	460c      	mov	r4, r1
 80a09ea:	461d      	mov	r5, r3
 80a09ec:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a09f0:	f001 fc86 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
 80a09f4:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a09f6:	f002 fe2f 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a09fa:	4621      	mov	r1, r4
 80a09fc:	f001 ff0a 	bl	80a2814 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0a00:	f002 fe2a 	bl	80a3658 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0a04:	6803      	ldr	r3, [r0, #0]
 80a0a06:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a0a0a:	689b      	ldr	r3, [r3, #8]
 80a0a0c:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0a0e:	f002 fe23 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a0a12:	2100      	movs	r1, #0
 80a0a14:	f001 ff02 	bl	80a281c <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0a18:	f002 fe1e 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a0a1c:	4621      	mov	r1, r4
 80a0a1e:	4632      	mov	r2, r6
 80a0a20:	f001 fef5 	bl	80a280e <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0a24:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0a26:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a0a2a:	42b4      	cmp	r4, r6
 80a0a2c:	da1a      	bge.n	80a0a64 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a0a2e:	f002 fe13 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a0a32:	6803      	ldr	r3, [r0, #0]
 80a0a34:	691b      	ldr	r3, [r3, #16]
 80a0a36:	4798      	blx	r3
 80a0a38:	b140      	cbz	r0, 80a0a4c <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a0a3a:	f002 fe0d 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a0a3e:	6803      	ldr	r3, [r0, #0]
 80a0a40:	f104 0801 	add.w	r8, r4, #1
 80a0a44:	695b      	ldr	r3, [r3, #20]
 80a0a46:	4798      	blx	r3
 80a0a48:	5528      	strb	r0, [r5, r4]
 80a0a4a:	4644      	mov	r4, r8
 80a0a4c:	f001 fc58 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0a50:	42b8      	cmp	r0, r7
 80a0a52:	d9ea      	bls.n	80a0a2a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a0a54:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a0a56:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0a58:	1b62      	subs	r2, r4, r5
 80a0a5a:	4296      	cmp	r6, r2
 80a0a5c:	dd05      	ble.n	80a0a6a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a0a5e:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0a62:	e7f9      	b.n	80a0a58 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a0a64:	2001      	movs	r0, #1
 80a0a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a0a6a:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a0a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a70 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a72:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0a74:	7801      	ldrb	r1, [r0, #0]
 80a0a76:	2901      	cmp	r1, #1
 80a0a78:	d107      	bne.n	80a0a8a <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a0a7a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0a7e:	9300      	str	r3, [sp, #0]
 80a0a80:	4613      	mov	r3, r2
 80a0a82:	462a      	mov	r2, r5
 80a0a84:	f7ff ffad 	bl	80a09e2 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0a88:	e007      	b.n	80a0a9a <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0a8a:	b931      	cbnz	r1, 80a0a9a <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0a8c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0a90:	9300      	str	r3, [sp, #0]
 80a0a92:	4613      	mov	r3, r2
 80a0a94:	462a      	mov	r2, r5
 80a0a96:	f7ff fd8f 	bl	80a05b8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0a9a:	b003      	add	sp, #12
 80a0a9c:	bd30      	pop	{r4, r5, pc}

080a0a9e <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0a9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0aa0:	2306      	movs	r3, #6
 80a0aa2:	466a      	mov	r2, sp
 80a0aa4:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0aa6:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0aa8:	f7ff ffe2 	bl	80a0a70 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0aac:	b330      	cbz	r0, 80a0afc <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0aae:	f89d 3000 	ldrb.w	r3, [sp]
 80a0ab2:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ab6:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0aba:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0abe:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ac2:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ac6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0aca:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0ace:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ad0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0ad4:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ad8:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ada:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0adc:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ade:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ae0:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0ae2:	b15d      	cbz	r5, 80a0afc <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0ae4:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a0ae8:	1b49      	subs	r1, r1, r5
 80a0aea:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0aec:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0af0:	1a52      	subs	r2, r2, r1
 80a0af2:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0af4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a0af8:	1a9b      	subs	r3, r3, r2
 80a0afa:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0afc:	b003      	add	sp, #12
 80a0afe:	bd30      	pop	{r4, r5, pc}

080a0b00 <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0b02:	2306      	movs	r3, #6
 80a0b04:	466a      	mov	r2, sp
 80a0b06:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0b08:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0b0a:	f7ff ffb1 	bl	80a0a70 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0b0e:	b330      	cbz	r0, 80a0b5e <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0b10:	f89d 3000 	ldrb.w	r3, [sp]
 80a0b14:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0b18:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0b1c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0b20:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0b24:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0b28:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0b2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0b30:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0b32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0b36:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0b3a:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0b3c:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0b3e:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0b40:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0b42:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a0b44:	b15d      	cbz	r5, 80a0b5e <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a0b46:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a0b4a:	1b49      	subs	r1, r1, r5
 80a0b4c:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a0b4e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a0b52:	1a52      	subs	r2, r2, r1
 80a0b54:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a0b56:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a0b5a:	1a9b      	subs	r3, r3, r2
 80a0b5c:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a0b5e:	b003      	add	sp, #12
 80a0b60:	bd30      	pop	{r4, r5, pc}
	...

080a0b64 <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b68:	4604      	mov	r4, r0
 80a0b6a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0b6c:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0b6e:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0b70:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0b72:	9304      	str	r3, [sp, #16]
 80a0b74:	9305      	str	r3, [sp, #20]
 80a0b76:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a0b78:	9307      	str	r3, [sp, #28]
 80a0b7a:	9308      	str	r3, [sp, #32]
 80a0b7c:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0b7e:	f7ff feca 	bl	80a0916 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0b82:	223f      	movs	r2, #63	; 0x3f
 80a0b84:	212e      	movs	r1, #46	; 0x2e
 80a0b86:	4620      	mov	r0, r4
 80a0b88:	f7ff fd70 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a0b8c:	212f      	movs	r1, #47	; 0x2f
 80a0b8e:	4620      	mov	r0, r4
 80a0b90:	f7ff feb2 	bl	80a08f8 <_ZN7LSM9DS110xgReadByteEh>
 80a0b94:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a0b98:	2e1e      	cmp	r6, #30
 80a0b9a:	d9f7      	bls.n	80a0b8c <_ZN7LSM9DS19calibrateEb+0x28>
 80a0b9c:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0b9e:	42b7      	cmp	r7, r6
 80a0ba0:	da32      	bge.n	80a0c08 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a0ba2:	4620      	mov	r0, r4
 80a0ba4:	f7ff ffac 	bl	80a0b00 <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a0ba8:	9a07      	ldr	r2, [sp, #28]
 80a0baa:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a0bae:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a0bb0:	4413      	add	r3, r2
 80a0bb2:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a0bb4:	9a08      	ldr	r2, [sp, #32]
 80a0bb6:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0bba:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a0bbc:	4413      	add	r3, r2
 80a0bbe:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a0bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0bc2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a0bc6:	4413      	add	r3, r2
 80a0bc8:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a0bca:	f7ff ff68 	bl	80a0a9e <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a0bce:	9a04      	ldr	r2, [sp, #16]
 80a0bd0:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0bd4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a0bd6:	4413      	add	r3, r2
 80a0bd8:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a0bda:	9a05      	ldr	r2, [sp, #20]
 80a0bdc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0be0:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a0be4:	4413      	add	r3, r2
 80a0be6:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0be8:	f003 f844 	bl	80a3c74 <__aeabi_f2d>
 80a0bec:	4602      	mov	r2, r0
 80a0bee:	460b      	mov	r3, r1
 80a0bf0:	2000      	movs	r0, #0
 80a0bf2:	4926      	ldr	r1, [pc, #152]	; (80a0c8c <_ZN7LSM9DS19calibrateEb+0x128>)
 80a0bf4:	f003 f9bc 	bl	80a3f70 <__aeabi_ddiv>
 80a0bf8:	f003 faa2 	bl	80a4140 <__aeabi_d2iz>
 80a0bfc:	b200      	sxth	r0, r0
 80a0bfe:	1a2d      	subs	r5, r5, r0
 80a0c00:	9806      	ldr	r0, [sp, #24]
 80a0c02:	4405      	add	r5, r0
 80a0c04:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0c06:	e7ca      	b.n	80a0b9e <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a0c08:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0c0c:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a0c10:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a0c14:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a0c18:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a0c1c:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a0c20:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a0c22:	a907      	add	r1, sp, #28
 80a0c24:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a0c28:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0c2c:	b200      	sxth	r0, r0
 80a0c2e:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a0c32:	9202      	str	r2, [sp, #8]
 80a0c34:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0c36:	f003 fb65 	bl	80a4304 <__aeabi_i2f>
 80a0c3a:	4659      	mov	r1, fp
 80a0c3c:	f003 fbb6 	bl	80a43ac <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0c40:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0c42:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0c4a:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0c4c:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0c50:	b200      	sxth	r0, r0
 80a0c52:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0c56:	f003 fb55 	bl	80a4304 <__aeabi_i2f>
 80a0c5a:	4651      	mov	r1, sl
 80a0c5c:	f003 fba6 	bl	80a43ac <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0c60:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0c62:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0c66:	9a02      	ldr	r2, [sp, #8]
 80a0c68:	d1db      	bne.n	80a0c22 <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a0c6a:	2100      	movs	r1, #0
 80a0c6c:	4620      	mov	r0, r4
 80a0c6e:	f7ff fe52 	bl	80a0916 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0c72:	2200      	movs	r2, #0
 80a0c74:	212e      	movs	r1, #46	; 0x2e
 80a0c76:	4620      	mov	r0, r4
 80a0c78:	f7ff fcf8 	bl	80a066c <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a0c7c:	9b01      	ldr	r3, [sp, #4]
 80a0c7e:	b113      	cbz	r3, 80a0c86 <_ZN7LSM9DS19calibrateEb+0x122>
 80a0c80:	2301      	movs	r3, #1
 80a0c82:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a0c86:	b00b      	add	sp, #44	; 0x2c
 80a0c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c8c:	3ff00000 	.word	0x3ff00000

080a0c90 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0c92:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0c94:	7801      	ldrb	r1, [r0, #0]
 80a0c96:	2901      	cmp	r1, #1
 80a0c98:	d107      	bne.n	80a0caa <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a0c9a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0c9e:	9300      	str	r3, [sp, #0]
 80a0ca0:	4613      	mov	r3, r2
 80a0ca2:	462a      	mov	r2, r5
 80a0ca4:	f7ff fe9d 	bl	80a09e2 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0ca8:	e007      	b.n	80a0cba <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0caa:	b931      	cbnz	r1, 80a0cba <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a0cac:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0cb0:	9300      	str	r3, [sp, #0]
 80a0cb2:	4613      	mov	r3, r2
 80a0cb4:	462a      	mov	r2, r5
 80a0cb6:	f7ff fc7f 	bl	80a05b8 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0cba:	b003      	add	sp, #12
 80a0cbc:	bd30      	pop	{r4, r5, pc}

080a0cbe <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0cbe:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0cc0:	2306      	movs	r3, #6
 80a0cc2:	466a      	mov	r2, sp
 80a0cc4:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0cc6:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0cc8:	f7ff ffe2 	bl	80a0c90 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a0ccc:	b1a0      	cbz	r0, 80a0cf8 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a0cce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a0cd2:	f89d 3000 	ldrb.w	r3, [sp]
 80a0cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0cda:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a0cdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a0ce0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0ce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0ce8:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a0cea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0cee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0cf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0cf6:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a0cf8:	b002      	add	sp, #8
 80a0cfa:	bd10      	pop	{r4, pc}

080a0cfc <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a0cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d00:	4605      	mov	r5, r0
 80a0d02:	468a      	mov	sl, r1
 80a0d04:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a0d06:	2300      	movs	r3, #0
 80a0d08:	f8ad 3000 	strh.w	r3, [sp]
 80a0d0c:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a0d10:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a0d14:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a0d18:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a0d1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0d20:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0d22:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a0d24:	2103      	movs	r1, #3
 80a0d26:	4628      	mov	r0, r5
 80a0d28:	f7ff fe50 	bl	80a09cc <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a0d2c:	2800      	cmp	r0, #0
 80a0d2e:	d0f9      	beq.n	80a0d24 <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a0d30:	4628      	mov	r0, r5
 80a0d32:	f7ff ffc4 	bl	80a0cbe <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a0d36:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a0d38:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a0d3c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a0d3e:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a0d42:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a0d44:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a0d48:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0d4a:	aa04      	add	r2, sp, #16
 80a0d4c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a0d50:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a0d54:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a0d56:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0d5a:	bfb8      	it	lt
 80a0d5c:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a0d60:	4291      	cmp	r1, r2
 80a0d62:	bfc8      	it	gt
 80a0d64:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a0d68:	3301      	adds	r3, #1
 80a0d6a:	2b03      	cmp	r3, #3
 80a0d6c:	d1ed      	bne.n	80a0d4a <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a0d6e:	3c01      	subs	r4, #1
 80a0d70:	d1d8      	bne.n	80a0d24 <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a0d72:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a0d76:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a0d7a:	f04f 0b02 	mov.w	fp, #2
 80a0d7e:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a0d82:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a0d86:	441e      	add	r6, r3
 80a0d88:	fb96 f6fb 	sdiv	r6, r6, fp
 80a0d8c:	b236      	sxth	r6, r6
 80a0d8e:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a0d92:	4630      	mov	r0, r6
 80a0d94:	f003 fab6 	bl	80a4304 <__aeabi_i2f>
 80a0d98:	4601      	mov	r1, r0
 80a0d9a:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a0d9c:	f003 fb06 	bl	80a43ac <__aeabi_fmul>
 80a0da0:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a0da4:	f1ba 0f00 	cmp.w	sl, #0
 80a0da8:	d004      	beq.n	80a0db4 <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a0daa:	4632      	mov	r2, r6
 80a0dac:	b2e1      	uxtb	r1, r4
 80a0dae:	4628      	mov	r0, r5
 80a0db0:	f7ff fd22 	bl	80a07f8 <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a0db4:	3401      	adds	r4, #1
 80a0db6:	2c03      	cmp	r4, #3
 80a0db8:	d1e1      	bne.n	80a0d7e <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a0dba:	b007      	add	sp, #28
 80a0dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0dc0 <_GLOBAL__sub_I_magSensitivity>:
 80a0dc0:	f001 baa6 	b.w	80a2310 <HAL_Pin_Map>

080a0dc4 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 80a0dc4:	b538      	push	{r3, r4, r5, lr}
 80a0dc6:	4604      	mov	r4, r0
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
 80a0dc8:	6183      	str	r3, [r0, #24]
  this->motor_pin_3 = motor_pin_3;
 80a0dca:	9b04      	ldr	r3, [sp, #16]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a0dcc:	2500      	movs	r5, #0
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
 80a0dce:	61c3      	str	r3, [r0, #28]
  this->motor_pin_4 = motor_pin_4;
 80a0dd0:	9b05      	ldr	r3, [sp, #20]
  this->direction = 0;      // motor direction
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80a0dd2:	6142      	str	r2, [r0, #20]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;
 80a0dd4:	6203      	str	r3, [r0, #32]
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 80a0dd6:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
 80a0dd8:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80a0dda:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80a0ddc:	6081      	str	r1, [r0, #8]
  this->motor_pin_2 = motor_pin_2;
  this->motor_pin_3 = motor_pin_3;
  this->motor_pin_4 = motor_pin_4;

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 80a0dde:	b290      	uxth	r0, r2
 80a0de0:	2101      	movs	r1, #1
 80a0de2:	f002 fc0f 	bl	80a3604 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
 80a0de6:	8b20      	ldrh	r0, [r4, #24]
 80a0de8:	2101      	movs	r1, #1
 80a0dea:	f002 fc0b 	bl	80a3604 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
 80a0dee:	8ba0      	ldrh	r0, [r4, #28]
 80a0df0:	2101      	movs	r1, #1
 80a0df2:	f002 fc07 	bl	80a3604 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
 80a0df6:	8c20      	ldrh	r0, [r4, #32]
 80a0df8:	2101      	movs	r1, #1
 80a0dfa:	f002 fc03 	bl	80a3604 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a0dfe:	2304      	movs	r3, #4
  pinMode(this->motor_pin_2, OUTPUT);
  pinMode(this->motor_pin_3, OUTPUT);
  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80a0e00:	6265      	str	r5, [r4, #36]	; 0x24

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80a0e02:	60e3      	str	r3, [r4, #12]
}
 80a0e04:	4620      	mov	r0, r4
 80a0e06:	bd38      	pop	{r3, r4, r5, pc}

080a0e08 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 80a0e08:	6882      	ldr	r2, [r0, #8]
 80a0e0a:	4b03      	ldr	r3, [pc, #12]	; (80a0e18 <_ZN7Stepper8setSpeedEl+0x10>)
 80a0e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0e10:	fb93 f1f1 	sdiv	r1, r3, r1
 80a0e14:	6041      	str	r1, [r0, #4]
 80a0e16:	4770      	bx	lr
 80a0e18:	03938700 	.word	0x03938700

080a0e1c <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a0e1c:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
 80a0e1e:	68c3      	ldr	r3, [r0, #12]

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a0e20:	4604      	mov	r4, r0
  if (this->pin_count == 2) {
 80a0e22:	2b02      	cmp	r3, #2

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80a0e24:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
 80a0e26:	d117      	bne.n	80a0e58 <_ZN7Stepper9stepMotorEi+0x3c>
    switch (thisStep) {
 80a0e28:	2903      	cmp	r1, #3
 80a0e2a:	d815      	bhi.n	80a0e58 <_ZN7Stepper9stepMotorEi+0x3c>
 80a0e2c:	e8df f001 	tbb	[pc, r1]
 80a0e30:	0c0a0402 	.word	0x0c0a0402
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
 80a0e34:	2100      	movs	r1, #0
 80a0e36:	e000      	b.n	80a0e3a <_ZN7Stepper9stepMotorEi+0x1e>
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
 80a0e38:	2101      	movs	r1, #1
 80a0e3a:	8aa0      	ldrh	r0, [r4, #20]
 80a0e3c:	f002 fbf3 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0e40:	2101      	movs	r1, #1
 80a0e42:	e006      	b.n	80a0e52 <_ZN7Stepper9stepMotorEi+0x36>
      break;
      case 2:  // 10
        digitalWrite(motor_pin_1, HIGH);
 80a0e44:	2101      	movs	r1, #1
 80a0e46:	e000      	b.n	80a0e4a <_ZN7Stepper9stepMotorEi+0x2e>
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
 80a0e48:	2100      	movs	r1, #0
 80a0e4a:	8aa0      	ldrh	r0, [r4, #20]
 80a0e4c:	f002 fbeb 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0e50:	2100      	movs	r1, #0
 80a0e52:	8b20      	ldrh	r0, [r4, #24]
 80a0e54:	f002 fbe7 	bl	80a3626 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
 80a0e58:	68e3      	ldr	r3, [r4, #12]
 80a0e5a:	2b04      	cmp	r3, #4
 80a0e5c:	d12f      	bne.n	80a0ebe <_ZN7Stepper9stepMotorEi+0xa2>
    switch (thisStep) {
 80a0e5e:	2d03      	cmp	r5, #3
 80a0e60:	d82d      	bhi.n	80a0ebe <_ZN7Stepper9stepMotorEi+0xa2>
 80a0e62:	e8df f005 	tbb	[pc, r5]
 80a0e66:	0802      	.short	0x0802
 80a0e68:	1c16      	.short	0x1c16
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 80a0e6a:	2101      	movs	r1, #1
 80a0e6c:	8aa0      	ldrh	r0, [r4, #20]
 80a0e6e:	f002 fbda 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0e72:	2100      	movs	r1, #0
 80a0e74:	e004      	b.n	80a0e80 <_ZN7Stepper9stepMotorEi+0x64>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
 80a0e76:	2100      	movs	r1, #0
 80a0e78:	8aa0      	ldrh	r0, [r4, #20]
 80a0e7a:	f002 fbd4 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0e7e:	2101      	movs	r1, #1
 80a0e80:	8b20      	ldrh	r0, [r4, #24]
 80a0e82:	f002 fbd0 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a0e86:	2101      	movs	r1, #1
 80a0e88:	8ba0      	ldrh	r0, [r4, #28]
 80a0e8a:	f002 fbcc 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a0e8e:	2100      	movs	r1, #0
 80a0e90:	e012      	b.n	80a0eb8 <_ZN7Stepper9stepMotorEi+0x9c>
      break;
      case 2:  //0101
        digitalWrite(motor_pin_1, LOW);
 80a0e92:	2100      	movs	r1, #0
 80a0e94:	8aa0      	ldrh	r0, [r4, #20]
 80a0e96:	f002 fbc6 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0e9a:	2101      	movs	r1, #1
 80a0e9c:	e004      	b.n	80a0ea8 <_ZN7Stepper9stepMotorEi+0x8c>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
 80a0e9e:	2101      	movs	r1, #1
 80a0ea0:	8aa0      	ldrh	r0, [r4, #20]
 80a0ea2:	f002 fbc0 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0ea6:	2100      	movs	r1, #0
 80a0ea8:	8b20      	ldrh	r0, [r4, #24]
 80a0eaa:	f002 fbbc 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a0eae:	2100      	movs	r1, #0
 80a0eb0:	8ba0      	ldrh	r0, [r4, #28]
 80a0eb2:	f002 fbb8 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a0eb6:	2101      	movs	r1, #1
 80a0eb8:	8c20      	ldrh	r0, [r4, #32]
 80a0eba:	f002 fbb4 	bl	80a3626 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
 80a0ebe:	68e3      	ldr	r3, [r4, #12]
 80a0ec0:	2b05      	cmp	r3, #5
 80a0ec2:	d170      	bne.n	80a0fa6 <_ZN7Stepper9stepMotorEi+0x18a>
    switch (thisStep) {
 80a0ec4:	2d09      	cmp	r5, #9
 80a0ec6:	d86e      	bhi.n	80a0fa6 <_ZN7Stepper9stepMotorEi+0x18a>
 80a0ec8:	e8df f005 	tbb	[pc, r5]
 80a0ecc:	23150b05 	.word	0x23150b05
 80a0ed0:	43352b25 	.word	0x43352b25
 80a0ed4:	5755      	.short	0x5755
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
 80a0ed6:	2100      	movs	r1, #0
 80a0ed8:	8aa0      	ldrh	r0, [r4, #20]
 80a0eda:	f002 fba4 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0ede:	2101      	movs	r1, #1
 80a0ee0:	e050      	b.n	80a0f84 <_ZN7Stepper9stepMotorEi+0x168>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 1:  // 01001
        digitalWrite(motor_pin_1, LOW);
 80a0ee2:	2100      	movs	r1, #0
 80a0ee4:	8aa0      	ldrh	r0, [r4, #20]
 80a0ee6:	f002 fb9e 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0eea:	2101      	movs	r1, #1
 80a0eec:	8b20      	ldrh	r0, [r4, #24]
 80a0eee:	f002 fb9a 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a0ef2:	2100      	movs	r1, #0
 80a0ef4:	e04a      	b.n	80a0f8c <_ZN7Stepper9stepMotorEi+0x170>
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 2:  // 01011
        digitalWrite(motor_pin_1, LOW);
 80a0ef6:	2100      	movs	r1, #0
 80a0ef8:	8aa0      	ldrh	r0, [r4, #20]
 80a0efa:	f002 fb94 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0efe:	2101      	movs	r1, #1
 80a0f00:	8b20      	ldrh	r0, [r4, #24]
 80a0f02:	f002 fb90 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a0f06:	2100      	movs	r1, #0
 80a0f08:	8ba0      	ldrh	r0, [r4, #28]
 80a0f0a:	f002 fb8c 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a0f0e:	2101      	movs	r1, #1
 80a0f10:	e040      	b.n	80a0f94 <_ZN7Stepper9stepMotorEi+0x178>
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 3:  // 01010
        digitalWrite(motor_pin_1, LOW);
 80a0f12:	2100      	movs	r1, #0
 80a0f14:	e000      	b.n	80a0f18 <_ZN7Stepper9stepMotorEi+0xfc>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 4:  // 11010
        digitalWrite(motor_pin_1, HIGH);
 80a0f16:	2101      	movs	r1, #1
 80a0f18:	8aa0      	ldrh	r0, [r4, #20]
 80a0f1a:	f002 fb84 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 80a0f1e:	2101      	movs	r1, #1
 80a0f20:	e004      	b.n	80a0f2c <_ZN7Stepper9stepMotorEi+0x110>
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 5:  // 10010
        digitalWrite(motor_pin_1, HIGH);
 80a0f22:	2101      	movs	r1, #1
 80a0f24:	8aa0      	ldrh	r0, [r4, #20]
 80a0f26:	f002 fb7e 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0f2a:	2100      	movs	r1, #0
 80a0f2c:	8b20      	ldrh	r0, [r4, #24]
 80a0f2e:	f002 fb7a 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 80a0f32:	2100      	movs	r1, #0
 80a0f34:	e008      	b.n	80a0f48 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_4, HIGH);
        digitalWrite(motor_pin_5, LOW);
        break;
      case 6:  // 10110
        digitalWrite(motor_pin_1, HIGH);
 80a0f36:	2101      	movs	r1, #1
 80a0f38:	8aa0      	ldrh	r0, [r4, #20]
 80a0f3a:	f002 fb74 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0f3e:	2100      	movs	r1, #0
 80a0f40:	8b20      	ldrh	r0, [r4, #24]
 80a0f42:	f002 fb70 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a0f46:	2101      	movs	r1, #1
 80a0f48:	8ba0      	ldrh	r0, [r4, #28]
 80a0f4a:	f002 fb6c 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 80a0f4e:	2101      	movs	r1, #1
 80a0f50:	e00c      	b.n	80a0f6c <_ZN7Stepper9stepMotorEi+0x150>
        digitalWrite(motor_pin_5, LOW);
        break;
      case 7:  // 10100
        digitalWrite(motor_pin_1, HIGH);
 80a0f52:	2101      	movs	r1, #1
 80a0f54:	8aa0      	ldrh	r0, [r4, #20]
 80a0f56:	f002 fb66 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0f5a:	2100      	movs	r1, #0
 80a0f5c:	8b20      	ldrh	r0, [r4, #24]
 80a0f5e:	f002 fb62 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a0f62:	2101      	movs	r1, #1
 80a0f64:	8ba0      	ldrh	r0, [r4, #28]
 80a0f66:	f002 fb5e 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a0f6a:	2100      	movs	r1, #0
 80a0f6c:	8c20      	ldrh	r0, [r4, #32]
 80a0f6e:	f002 fb5a 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
 80a0f72:	2100      	movs	r1, #0
 80a0f74:	e012      	b.n	80a0f9c <_ZN7Stepper9stepMotorEi+0x180>
        break;
      case 8:  // 10101
        digitalWrite(motor_pin_1, HIGH);
 80a0f76:	2101      	movs	r1, #1
 80a0f78:	e000      	b.n	80a0f7c <_ZN7Stepper9stepMotorEi+0x160>
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
 80a0f7a:	2100      	movs	r1, #0
 80a0f7c:	8aa0      	ldrh	r0, [r4, #20]
 80a0f7e:	f002 fb52 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 80a0f82:	2100      	movs	r1, #0
 80a0f84:	8b20      	ldrh	r0, [r4, #24]
 80a0f86:	f002 fb4e 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 80a0f8a:	2101      	movs	r1, #1
 80a0f8c:	8ba0      	ldrh	r0, [r4, #28]
 80a0f8e:	f002 fb4a 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 80a0f92:	2100      	movs	r1, #0
 80a0f94:	8c20      	ldrh	r0, [r4, #32]
 80a0f96:	f002 fb46 	bl	80a3626 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
 80a0f9a:	2101      	movs	r1, #1
 80a0f9c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
 80a0f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
 80a0fa2:	f002 bb40 	b.w	80a3626 <digitalWrite>
 80a0fa6:	bd38      	pop	{r3, r4, r5, pc}

080a0fa8 <_ZN7Stepper4stepEi>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a0fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int steps_left = abs(steps_to_move);  // how many steps to take

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a0faa:	2900      	cmp	r1, #0
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a0fac:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 80a0fb0:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
 80a0fb2:	eba5 75e1 	sub.w	r5, r5, r1, asr #31

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80a0fb6:	dd01      	ble.n	80a0fbc <_ZN7Stepper4stepEi+0x14>
 80a0fb8:	2301      	movs	r3, #1
 80a0fba:	e001      	b.n	80a0fc0 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
 80a0fbc:	d001      	beq.n	80a0fc2 <_ZN7Stepper4stepEi+0x1a>
 80a0fbe:	2300      	movs	r3, #0
 80a0fc0:	6023      	str	r3, [r4, #0]
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
          this->step_number = 0;
 80a0fc2:	2700      	movs	r7, #0
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
        stepMotor(this->step_number % 10);
 80a0fc4:	260a      	movs	r6, #10
  if (steps_to_move > 0) { this->direction = 1; }
  if (steps_to_move < 0) { this->direction = 0; }


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80a0fc6:	2d00      	cmp	r5, #0
 80a0fc8:	d02f      	beq.n	80a102a <_ZN7Stepper4stepEi+0x82>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0fca:	f001 f991 	bl	80a22f0 <HAL_Timer_Get_Micro_Seconds>
  {
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
 80a0fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0fd0:	6862      	ldr	r2, [r4, #4]
 80a0fd2:	1ac3      	subs	r3, r0, r3
 80a0fd4:	4293      	cmp	r3, r2
 80a0fd6:	d3f6      	bcc.n	80a0fc6 <_ZN7Stepper4stepEi+0x1e>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a0fd8:	6823      	ldr	r3, [r4, #0]
    unsigned long now = micros();
    // move only if the appropriate delay has passed:
    if (now - this->last_step_time >= this->step_delay)
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80a0fda:	62a0      	str	r0, [r4, #40]	; 0x28
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80a0fdc:	2b01      	cmp	r3, #1
 80a0fde:	6923      	ldr	r3, [r4, #16]
 80a0fe0:	d106      	bne.n	80a0ff0 <_ZN7Stepper4stepEi+0x48>
      {
        this->step_number++;
        if (this->step_number == this->number_of_steps) {
 80a0fe2:	68a2      	ldr	r2, [r4, #8]
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a0fe4:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
 80a0fe6:	4293      	cmp	r3, r2
      this->last_step_time = now;
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
      {
        this->step_number++;
 80a0fe8:	6123      	str	r3, [r4, #16]
        if (this->step_number == this->number_of_steps) {
 80a0fea:	d107      	bne.n	80a0ffc <_ZN7Stepper4stepEi+0x54>
          this->step_number = 0;
 80a0fec:	6127      	str	r7, [r4, #16]
 80a0fee:	e005      	b.n	80a0ffc <_ZN7Stepper4stepEi+0x54>
        }
      }
      else
      {
        if (this->step_number == 0) {
 80a0ff0:	b90b      	cbnz	r3, 80a0ff6 <_ZN7Stepper4stepEi+0x4e>
          this->step_number = this->number_of_steps;
 80a0ff2:	68a3      	ldr	r3, [r4, #8]
 80a0ff4:	6123      	str	r3, [r4, #16]
        }
        this->step_number--;
 80a0ff6:	6923      	ldr	r3, [r4, #16]
 80a0ff8:	3b01      	subs	r3, #1
 80a0ffa:	6123      	str	r3, [r4, #16]
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a0ffc:	68e3      	ldr	r3, [r4, #12]
          this->step_number = this->number_of_steps;
        }
        this->step_number--;
      }
      // decrement the steps left:
      steps_left--;
 80a0ffe:	3d01      	subs	r5, #1
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 80a1000:	2b05      	cmp	r3, #5
 80a1002:	6923      	ldr	r3, [r4, #16]
 80a1004:	d104      	bne.n	80a1010 <_ZN7Stepper4stepEi+0x68>
        stepMotor(this->step_number % 10);
 80a1006:	fb93 f1f6 	sdiv	r1, r3, r6
 80a100a:	fb06 3111 	mls	r1, r6, r1, r3
 80a100e:	e008      	b.n	80a1022 <_ZN7Stepper4stepEi+0x7a>
      else
        stepMotor(this->step_number % 4);
 80a1010:	4906      	ldr	r1, [pc, #24]	; (80a102c <_ZN7Stepper4stepEi+0x84>)
 80a1012:	4019      	ands	r1, r3
 80a1014:	2900      	cmp	r1, #0
 80a1016:	bfbe      	ittt	lt
 80a1018:	f101 31ff 	addlt.w	r1, r1, #4294967295	; 0xffffffff
 80a101c:	f061 0103 	ornlt	r1, r1, #3
 80a1020:	3101      	addlt	r1, #1
 80a1022:	4620      	mov	r0, r4
 80a1024:	f7ff fefa 	bl	80a0e1c <_ZN7Stepper9stepMotorEi>
 80a1028:	e7cd      	b.n	80a0fc6 <_ZN7Stepper4stepEi+0x1e>
 80a102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a102c:	80000003 	.word	0x80000003

080a1030 <_GLOBAL__sub_I__ZN7StepperC2Eiii>:
 80a1030:	f001 b96e 	b.w	80a2310 <HAL_Pin_Map>

080a1034 <micros>:
 80a1034:	f001 b95c 	b.w	80a22f0 <HAL_Timer_Get_Micro_Seconds>

080a1038 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a1038:	b510      	push	{r4, lr}
 80a103a:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a103c:	68c0      	ldr	r0, [r0, #12]
 80a103e:	b108      	cbz	r0, 80a1044 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a1040:	f001 fb7c 	bl	80a273c <free>
  if (begun) pinMode(pin, INPUT);
 80a1044:	7823      	ldrb	r3, [r4, #0]
 80a1046:	b11b      	cbz	r3, 80a1050 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a1048:	2100      	movs	r1, #0
 80a104a:	79e0      	ldrb	r0, [r4, #7]
 80a104c:	f002 fada 	bl	80a3604 <pinMode>
}
 80a1050:	4620      	mov	r0, r4
 80a1052:	bd10      	pop	{r4, pc}

080a1054 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a1054:	b538      	push	{r3, r4, r5, lr}
 80a1056:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a1058:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a105a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a105c:	b108      	cbz	r0, 80a1062 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a105e:	f001 fb6d 	bl	80a273c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a1062:	79a3      	ldrb	r3, [r4, #6]
 80a1064:	2b06      	cmp	r3, #6
 80a1066:	bf0c      	ite	eq
 80a1068:	2004      	moveq	r0, #4
 80a106a:	2003      	movne	r0, #3
 80a106c:	4368      	muls	r0, r5
 80a106e:	b280      	uxth	r0, r0
 80a1070:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a1072:	f001 fb5b 	bl	80a272c <malloc>
 80a1076:	60e0      	str	r0, [r4, #12]
 80a1078:	b128      	cbz	r0, 80a1086 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a107a:	88a2      	ldrh	r2, [r4, #4]
 80a107c:	2100      	movs	r1, #0
 80a107e:	f003 fafe 	bl	80a467e <memset>
    numLEDs = n;
 80a1082:	8065      	strh	r5, [r4, #2]
 80a1084:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a1086:	80a0      	strh	r0, [r4, #4]
 80a1088:	8060      	strh	r0, [r4, #2]
 80a108a:	bd38      	pop	{r3, r4, r5, pc}

080a108c <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a108c:	b510      	push	{r4, lr}
 80a108e:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a1090:	2101      	movs	r1, #1
 80a1092:	79c0      	ldrb	r0, [r0, #7]
 80a1094:	f002 fab6 	bl	80a3604 <pinMode>
  digitalWrite(pin, LOW);
 80a1098:	2100      	movs	r1, #0
 80a109a:	79e0      	ldrb	r0, [r4, #7]
 80a109c:	f002 fac3 	bl	80a3626 <digitalWrite>
  begun = true;
 80a10a0:	2301      	movs	r3, #1
 80a10a2:	7023      	strb	r3, [r4, #0]
 80a10a4:	bd10      	pop	{r4, pc}

080a10a6 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a10a6:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a10a8:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a10aa:	4605      	mov	r5, r0
 80a10ac:	460c      	mov	r4, r1
    if (begun) {
 80a10ae:	b11b      	cbz	r3, 80a10b8 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a10b0:	2100      	movs	r1, #0
 80a10b2:	79c0      	ldrb	r0, [r0, #7]
 80a10b4:	f002 faa6 	bl	80a3604 <pinMode>
    }
    pin = p;
    if (begun) {
 80a10b8:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a10ba:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a10bc:	b153      	cbz	r3, 80a10d4 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a10be:	b2a4      	uxth	r4, r4
 80a10c0:	4620      	mov	r0, r4
 80a10c2:	2101      	movs	r1, #1
 80a10c4:	f002 fa9e 	bl	80a3604 <pinMode>
        digitalWrite(p, LOW);
 80a10c8:	4620      	mov	r0, r4
    }
}
 80a10ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a10ce:	2100      	movs	r1, #0
 80a10d0:	f002 baa9 	b.w	80a3626 <digitalWrite>
 80a10d4:	bd38      	pop	{r3, r4, r5, pc}

080a10d6 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a10d6:	b570      	push	{r4, r5, r6, lr}
 80a10d8:	4604      	mov	r4, r0
 80a10da:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a10dc:	2500      	movs	r5, #0
 80a10de:	7183      	strb	r3, [r0, #6]
 80a10e0:	7005      	strb	r5, [r0, #0]
 80a10e2:	7205      	strb	r5, [r0, #8]
 80a10e4:	60c5      	str	r5, [r0, #12]
 80a10e6:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a10e8:	f7ff ffb4 	bl	80a1054 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a10ec:	4620      	mov	r0, r4
 80a10ee:	4631      	mov	r1, r6
 80a10f0:	f7ff ffd9 	bl	80a10a6 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a10f4:	4620      	mov	r0, r4
 80a10f6:	bd70      	pop	{r4, r5, r6, pc}

080a10f8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a10f8:	68c3      	ldr	r3, [r0, #12]
 80a10fa:	2b00      	cmp	r3, #0
 80a10fc:	f000 858e 	beq.w	80a1c1c <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a1100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1104:	4604      	mov	r4, r0
 80a1106:	7983      	ldrb	r3, [r0, #6]
 80a1108:	b086      	sub	sp, #24
 80a110a:	3b02      	subs	r3, #2
 80a110c:	b2db      	uxtb	r3, r3
 80a110e:	2b04      	cmp	r3, #4
 80a1110:	bf96      	itet	ls
 80a1112:	4a29      	ldrls	r2, [pc, #164]	; (80a11b8 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a1114:	2532      	movhi	r5, #50	; 0x32
 80a1116:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a111a:	f7ff ff8b 	bl	80a1034 <micros>
 80a111e:	6923      	ldr	r3, [r4, #16]
 80a1120:	1ac0      	subs	r0, r0, r3
 80a1122:	42a8      	cmp	r0, r5
 80a1124:	d3f9      	bcc.n	80a111a <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a1126:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1128:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a112a:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a112c:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a112e:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a1132:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a1136:	f000 8272 	beq.w	80a161e <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a113a:	2907      	cmp	r1, #7
 80a113c:	f000 826f 	beq.w	80a161e <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a1140:	2906      	cmp	r1, #6
 80a1142:	f000 8432 	beq.w	80a19aa <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a1146:	2905      	cmp	r1, #5
 80a1148:	f000 83ab 	beq.w	80a18a2 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a114c:	2908      	cmp	r1, #8
 80a114e:	f000 83a8 	beq.w	80a18a2 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a1152:	2900      	cmp	r1, #0
 80a1154:	f040 8563 	bne.w	80a1c1e <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a1158:	4a18      	ldr	r2, [pc, #96]	; (80a11bc <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a115a:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a115e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1162:	b29b      	uxth	r3, r3
 80a1164:	2b00      	cmp	r3, #0
 80a1166:	f000 8395 	beq.w	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a116a:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a116c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1170:	f10e 0503 	add.w	r5, lr, #3
 80a1174:	3b03      	subs	r3, #3
 80a1176:	b29b      	uxth	r3, r3
 80a1178:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a117c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1180:	b2db      	uxtb	r3, r3
 80a1182:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1186:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a118a:	b2db      	uxtb	r3, r3
 80a118c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1190:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1194:	b2db      	uxtb	r3, r3
 80a1196:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a119a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a119e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11a6:	021b      	lsls	r3, r3, #8
 80a11a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a11ac:	4303      	orrs	r3, r0
 80a11ae:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a11b0:	f88d 1005 	strb.w	r1, [sp, #5]
 80a11b4:	e11b      	b.n	80a13ee <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a11b6:	bf00      	nop
 80a11b8:	080a4860 	.word	0x080a4860
 80a11bc:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11c0:	4600      	mov	r0, r0
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a12c8:	79e3      	ldrb	r3, [r4, #7]
 80a12ca:	6810      	ldr	r0, [r2, #0]
 80a12cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12d0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12d4:	88bf      	ldrh	r7, [r7, #4]
 80a12d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12da:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12dc:	4600      	mov	r0, r0
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a13d6:	9b04      	ldr	r3, [sp, #16]
 80a13d8:	085b      	lsrs	r3, r3, #1
 80a13da:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a13dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a13e0:	3301      	adds	r3, #1
 80a13e2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a13e4:	2b17      	cmp	r3, #23
 80a13e6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a13ea:	f200 82db 	bhi.w	80a19a4 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a13ee:	79e3      	ldrb	r3, [r4, #7]
 80a13f0:	6810      	ldr	r0, [r2, #0]
 80a13f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13fa:	88bf      	ldrh	r7, [r7, #4]
 80a13fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1400:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1402:	9803      	ldr	r0, [sp, #12]
 80a1404:	9b04      	ldr	r3, [sp, #16]
 80a1406:	4218      	tst	r0, r3
 80a1408:	f47f aeda 	bne.w	80a11c0 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a140c:	4600      	mov	r0, r0
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a145e:	79e3      	ldrb	r3, [r4, #7]
 80a1460:	6810      	ldr	r0, [r2, #0]
 80a1462:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1466:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a146a:	88bf      	ldrh	r7, [r7, #4]
 80a146c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1470:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1472:	4600      	mov	r0, r0
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	e6db      	b.n	80a13d6 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a161e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1622:	4a17      	ldr	r2, [pc, #92]	; (80a1680 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a1624:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a1626:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a162a:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a162c:	2b00      	cmp	r3, #0
 80a162e:	f000 8131 	beq.w	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1632:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1634:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1638:	f10e 0103 	add.w	r1, lr, #3
 80a163c:	3b03      	subs	r3, #3
 80a163e:	b29b      	uxth	r3, r3
 80a1640:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1644:	f89e 3000 	ldrb.w	r3, [lr]
 80a1648:	b2db      	uxtb	r3, r3
 80a164a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a164e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1652:	b2db      	uxtb	r3, r3
 80a1654:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1658:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a165c:	b2db      	uxtb	r3, r3
 80a165e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1662:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1666:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a166a:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a166e:	0200      	lsls	r0, r0, #8
 80a1670:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a1674:	433b      	orrs	r3, r7
 80a1676:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1678:	f88d 6005 	strb.w	r6, [sp, #5]
 80a167c:	e080      	b.n	80a1780 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a167e:	bf00      	nop
 80a1680:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1684:	4600      	mov	r0, r0
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a171e:	79e3      	ldrb	r3, [r4, #7]
 80a1720:	6810      	ldr	r0, [r2, #0]
 80a1722:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1726:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a172a:	88bf      	ldrh	r7, [r7, #4]
 80a172c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1730:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1732:	4600      	mov	r0, r0
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1768:	9b04      	ldr	r3, [sp, #16]
 80a176a:	085b      	lsrs	r3, r3, #1
 80a176c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a176e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1772:	3301      	adds	r3, #1
 80a1774:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1776:	2b17      	cmp	r3, #23
 80a1778:	f88d 3005 	strb.w	r3, [sp, #5]
 80a177c:	f200 8083 	bhi.w	80a1886 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1780:	79e3      	ldrb	r3, [r4, #7]
 80a1782:	6810      	ldr	r0, [r2, #0]
 80a1784:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1788:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a178c:	88bf      	ldrh	r7, [r7, #4]
 80a178e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1792:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1794:	9803      	ldr	r0, [sp, #12]
 80a1796:	9b04      	ldr	r3, [sp, #16]
 80a1798:	4218      	tst	r0, r3
 80a179a:	f47f af73 	bne.w	80a1684 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a179e:	4600      	mov	r0, r0
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a17c6:	79e3      	ldrb	r3, [r4, #7]
 80a17c8:	6810      	ldr	r0, [r2, #0]
 80a17ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17ce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17d2:	88bf      	ldrh	r7, [r7, #4]
 80a17d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17d8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17da:	4600      	mov	r0, r0
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	e770      	b.n	80a1768 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1886:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a188a:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a188c:	b29b      	uxth	r3, r3
 80a188e:	2b00      	cmp	r3, #0
 80a1890:	f47f aecf 	bne.w	80a1632 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a1894:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1896:	f7ff fbcd 	bl	80a1034 <micros>
 80a189a:	6120      	str	r0, [r4, #16]
}
 80a189c:	b006      	add	sp, #24
 80a189e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a18a2:	4b5e      	ldr	r3, [pc, #376]	; (80a1a1c <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a18a4:	4a5e      	ldr	r2, [pc, #376]	; (80a1a20 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a18a6:	4618      	mov	r0, r3
 80a18a8:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a18aa:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a18ae:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a18b0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a18b4:	b292      	uxth	r2, r2
 80a18b6:	2a00      	cmp	r2, #0
 80a18b8:	d0ec      	beq.n	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a18ba:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a18be:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a18c2:	f10e 0503 	add.w	r5, lr, #3
 80a18c6:	3a03      	subs	r2, #3
 80a18c8:	b292      	uxth	r2, r2
 80a18ca:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a18ce:	f89e 2000 	ldrb.w	r2, [lr]
 80a18d2:	b2d2      	uxtb	r2, r2
 80a18d4:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a18d8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a18dc:	b2d2      	uxtb	r2, r2
 80a18de:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a18e2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a18e6:	b2d2      	uxtb	r2, r2
 80a18e8:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a18ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a18f0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a18f4:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a18f8:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a18fc:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1900:	ea42 020c 	orr.w	r2, r2, ip
 80a1904:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1906:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a190a:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a190c:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a190e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1912:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1916:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a191a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a191e:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1920:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1924:	9e03      	ldr	r6, [sp, #12]
 80a1926:	9a04      	ldr	r2, [sp, #16]
 80a1928:	4216      	tst	r6, r2
 80a192a:	d023      	beq.n	80a1974 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a192c:	685a      	ldr	r2, [r3, #4]
 80a192e:	9e05      	ldr	r6, [sp, #20]
 80a1930:	1b92      	subs	r2, r2, r6
 80a1932:	2a4f      	cmp	r2, #79	; 0x4f
 80a1934:	d9fa      	bls.n	80a192c <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a1936:	79e2      	ldrb	r2, [r4, #7]
 80a1938:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a193c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1940:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1944:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1948:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a194c:	6842      	ldr	r2, [r0, #4]
 80a194e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1950:	685a      	ldr	r2, [r3, #4]
 80a1952:	9e05      	ldr	r6, [sp, #20]
 80a1954:	1b92      	subs	r2, r2, r6
 80a1956:	2a07      	cmp	r2, #7
 80a1958:	d9fa      	bls.n	80a1950 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a195a:	9a04      	ldr	r2, [sp, #16]
 80a195c:	0852      	lsrs	r2, r2, #1
 80a195e:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1960:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1964:	3201      	adds	r2, #1
 80a1966:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1968:	2a17      	cmp	r2, #23
 80a196a:	f88d 2005 	strb.w	r2, [sp, #5]
 80a196e:	d9cc      	bls.n	80a190a <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1970:	46ae      	mov	lr, r5
 80a1972:	e79d      	b.n	80a18b0 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1974:	685a      	ldr	r2, [r3, #4]
 80a1976:	9e05      	ldr	r6, [sp, #20]
 80a1978:	1b92      	subs	r2, r2, r6
 80a197a:	2a18      	cmp	r2, #24
 80a197c:	d9fa      	bls.n	80a1974 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a197e:	79e2      	ldrb	r2, [r4, #7]
 80a1980:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1984:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1988:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a198c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1990:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1994:	6842      	ldr	r2, [r0, #4]
 80a1996:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1998:	685a      	ldr	r2, [r3, #4]
 80a199a:	9e05      	ldr	r6, [sp, #20]
 80a199c:	1b92      	subs	r2, r2, r6
 80a199e:	2a45      	cmp	r2, #69	; 0x45
 80a19a0:	d9fa      	bls.n	80a1998 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a19a2:	e7da      	b.n	80a195a <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a19a4:	46ae      	mov	lr, r5
 80a19a6:	f7ff bbda 	b.w	80a115e <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a19aa:	4a1d      	ldr	r2, [pc, #116]	; (80a1a20 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a19ac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a19b0:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a19b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a19b6:	b29b      	uxth	r3, r3
 80a19b8:	2b00      	cmp	r3, #0
 80a19ba:	f43f af6b 	beq.w	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a19be:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a19c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a19c4:	f10e 0104 	add.w	r1, lr, #4
 80a19c8:	3b04      	subs	r3, #4
 80a19ca:	b29b      	uxth	r3, r3
 80a19cc:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a19d0:	f89e 3000 	ldrb.w	r3, [lr]
 80a19d4:	b2db      	uxtb	r3, r3
 80a19d6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a19da:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a19de:	b2db      	uxtb	r3, r3
 80a19e0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a19e4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a19e8:	b2db      	uxtb	r3, r3
 80a19ea:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a19ee:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a19f2:	b2db      	uxtb	r3, r3
 80a19f4:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a19f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a19fc:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1a00:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a1a04:	043f      	lsls	r7, r7, #16
 80a1a06:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1a0a:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1a0e:	4303      	orrs	r3, r0
 80a1a10:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a1a14:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1a16:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1a1a:	e07e      	b.n	80a1b1a <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1a1c:	e0001000 	.word	0xe0001000
 80a1a20:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1a24:	4600      	mov	r0, r0
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a1a92:	79e3      	ldrb	r3, [r4, #7]
 80a1a94:	6810      	ldr	r0, [r2, #0]
 80a1a96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1a9a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1a9e:	88bf      	ldrh	r7, [r7, #4]
 80a1aa0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1aa4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1aa6:	4600      	mov	r0, r0
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1b04:	9b04      	ldr	r3, [sp, #16]
 80a1b06:	085b      	lsrs	r3, r3, #1
 80a1b08:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1b0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b0e:	3301      	adds	r3, #1
 80a1b10:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a1b12:	2b1f      	cmp	r3, #31
 80a1b14:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1b18:	d87e      	bhi.n	80a1c18 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1b1a:	79e3      	ldrb	r3, [r4, #7]
 80a1b1c:	6810      	ldr	r0, [r2, #0]
 80a1b1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b22:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b26:	88bf      	ldrh	r7, [r7, #4]
 80a1b28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b2c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1b2e:	9803      	ldr	r0, [sp, #12]
 80a1b30:	9b04      	ldr	r3, [sp, #16]
 80a1b32:	4218      	tst	r0, r3
 80a1b34:	f47f af76 	bne.w	80a1a24 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b38:	4600      	mov	r0, r0
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1b60:	79e3      	ldrb	r3, [r4, #7]
 80a1b62:	6810      	ldr	r0, [r2, #0]
 80a1b64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b68:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b6c:	88bf      	ldrh	r7, [r7, #4]
 80a1b6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b72:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b74:	4600      	mov	r0, r0
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
 80a1bbc:	bf00      	nop
 80a1bbe:	bf00      	nop
 80a1bc0:	bf00      	nop
 80a1bc2:	bf00      	nop
 80a1bc4:	bf00      	nop
 80a1bc6:	bf00      	nop
 80a1bc8:	bf00      	nop
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	e775      	b.n	80a1b04 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1c18:	468e      	mov	lr, r1
 80a1c1a:	e6ca      	b.n	80a19b2 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1c1c:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1c1e:	2903      	cmp	r1, #3
 80a1c20:	f000 812e 	beq.w	80a1e80 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1c24:	4a1e      	ldr	r2, [pc, #120]	; (80a1ca0 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1c26:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1c2a:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1c2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1c30:	b29b      	uxth	r3, r3
 80a1c32:	2b00      	cmp	r3, #0
 80a1c34:	f43f ae2e 	beq.w	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1c38:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1c3a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1c3e:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1c40:	3b03      	subs	r3, #3
 80a1c42:	b29b      	uxth	r3, r3
 80a1c44:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1c48:	f89e 3000 	ldrb.w	r3, [lr]
 80a1c4c:	f10e 0103 	add.w	r1, lr, #3
 80a1c50:	b2db      	uxtb	r3, r3
 80a1c52:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1c56:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1c5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1c5e:	b2db      	uxtb	r3, r3
 80a1c60:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1c64:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1c68:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1c6c:	b2db      	uxtb	r3, r3
 80a1c6e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1c72:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1c76:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1c7a:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1c7e:	021b      	lsls	r3, r3, #8
 80a1c80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1c84:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1c88:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1c8c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1c90:	433b      	orrs	r3, r7
 80a1c92:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1c94:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1c98:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1c9c:	e07d      	b.n	80a1d9a <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1c9e:	bf00      	nop
 80a1ca0:	200001d0 	.word	0x200001d0
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a1ca4:	9b04      	ldr	r3, [sp, #16]
 80a1ca6:	085b      	lsrs	r3, r3, #1
 80a1ca8:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1caa:	4600      	mov	r0, r0
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1d30:	79e0      	ldrb	r0, [r4, #7]
 80a1d32:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1d34:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1d38:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1d3c:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1d40:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1d44:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1d48:	3301      	adds	r3, #1
 80a1d4a:	b2db      	uxtb	r3, r3
 80a1d4c:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1d50:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1d54:	4600      	mov	r0, r0
 80a1d56:	bf00      	nop
 80a1d58:	bf00      	nop
 80a1d5a:	bf00      	nop
 80a1d5c:	bf00      	nop
 80a1d5e:	bf00      	nop
 80a1d60:	bf00      	nop
 80a1d62:	bf00      	nop
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
          if(j==24) break;
 80a1d7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1d82:	2b18      	cmp	r3, #24
 80a1d84:	d07a      	beq.n	80a1e7c <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1d86:	79e3      	ldrb	r3, [r4, #7]
 80a1d88:	6810      	ldr	r0, [r2, #0]
 80a1d8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1d8e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1d92:	88bf      	ldrh	r7, [r7, #4]
 80a1d94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1d98:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1d9a:	9803      	ldr	r0, [sp, #12]
 80a1d9c:	9b04      	ldr	r3, [sp, #16]
 80a1d9e:	4218      	tst	r0, r3
 80a1da0:	d180      	bne.n	80a1ca4 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1da2:	4600      	mov	r0, r0
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1dc4:	79e3      	ldrb	r3, [r4, #7]
 80a1dc6:	6810      	ldr	r0, [r2, #0]
 80a1dc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1dcc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1dd0:	88bf      	ldrh	r7, [r7, #4]
 80a1dd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1dd6:	831f      	strh	r7, [r3, #24]
          j++;
 80a1dd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1ddc:	3301      	adds	r3, #1
 80a1dde:	b2db      	uxtb	r3, r3
 80a1de0:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1de4:	9b04      	ldr	r3, [sp, #16]
 80a1de6:	085b      	lsrs	r3, r3, #1
 80a1de8:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1dea:	4600      	mov	r0, r0
 80a1dec:	bf00      	nop
 80a1dee:	bf00      	nop
 80a1df0:	bf00      	nop
 80a1df2:	bf00      	nop
 80a1df4:	bf00      	nop
 80a1df6:	bf00      	nop
 80a1df8:	bf00      	nop
 80a1dfa:	bf00      	nop
 80a1dfc:	bf00      	nop
 80a1dfe:	bf00      	nop
 80a1e00:	bf00      	nop
 80a1e02:	bf00      	nop
 80a1e04:	bf00      	nop
 80a1e06:	bf00      	nop
 80a1e08:	bf00      	nop
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
 80a1e40:	bf00      	nop
 80a1e42:	bf00      	nop
 80a1e44:	bf00      	nop
 80a1e46:	bf00      	nop
 80a1e48:	bf00      	nop
 80a1e4a:	bf00      	nop
 80a1e4c:	bf00      	nop
 80a1e4e:	bf00      	nop
 80a1e50:	bf00      	nop
 80a1e52:	bf00      	nop
 80a1e54:	bf00      	nop
 80a1e56:	bf00      	nop
 80a1e58:	bf00      	nop
 80a1e5a:	bf00      	nop
 80a1e5c:	bf00      	nop
 80a1e5e:	bf00      	nop
 80a1e60:	bf00      	nop
 80a1e62:	bf00      	nop
 80a1e64:	bf00      	nop
 80a1e66:	bf00      	nop
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
 80a1e6e:	bf00      	nop
 80a1e70:	bf00      	nop
 80a1e72:	bf00      	nop
          if(j==24) break;
 80a1e74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1e78:	2b18      	cmp	r3, #24
 80a1e7a:	d184      	bne.n	80a1d86 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1e7c:	468e      	mov	lr, r1
 80a1e7e:	e6d5      	b.n	80a1c2c <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1e80:	4a17      	ldr	r2, [pc, #92]	; (80a1ee0 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1e82:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1e86:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1e88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1e8c:	b29b      	uxth	r3, r3
 80a1e8e:	2b00      	cmp	r3, #0
 80a1e90:	f43f ad00 	beq.w	80a1894 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1e94:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1e96:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1e9a:	f10e 0103 	add.w	r1, lr, #3
 80a1e9e:	3b03      	subs	r3, #3
 80a1ea0:	b29b      	uxth	r3, r3
 80a1ea2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1ea6:	f89e 3000 	ldrb.w	r3, [lr]
 80a1eaa:	b2db      	uxtb	r3, r3
 80a1eac:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1eb0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1eb4:	b2db      	uxtb	r3, r3
 80a1eb6:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1eba:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1ebe:	b2db      	uxtb	r3, r3
 80a1ec0:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1ec4:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1ec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1ecc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1ed0:	021b      	lsls	r3, r3, #8
 80a1ed2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1ed6:	4303      	orrs	r3, r0
 80a1ed8:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1eda:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1ede:	e0e0      	b.n	80a20a2 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1ee0:	200001d0 	.word	0x200001d0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1ee4:	4600      	mov	r0, r0
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
 80a1ef0:	bf00      	nop
 80a1ef2:	bf00      	nop
 80a1ef4:	bf00      	nop
 80a1ef6:	bf00      	nop
 80a1ef8:	bf00      	nop
 80a1efa:	bf00      	nop
 80a1efc:	bf00      	nop
 80a1efe:	bf00      	nop
 80a1f00:	bf00      	nop
 80a1f02:	bf00      	nop
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
 80a1f10:	bf00      	nop
 80a1f12:	bf00      	nop
 80a1f14:	bf00      	nop
 80a1f16:	bf00      	nop
 80a1f18:	bf00      	nop
 80a1f1a:	bf00      	nop
 80a1f1c:	bf00      	nop
 80a1f1e:	bf00      	nop
 80a1f20:	bf00      	nop
 80a1f22:	bf00      	nop
 80a1f24:	bf00      	nop
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
 80a1f92:	bf00      	nop
 80a1f94:	bf00      	nop
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
 80a1fbc:	bf00      	nop
 80a1fbe:	bf00      	nop
 80a1fc0:	bf00      	nop
 80a1fc2:	bf00      	nop
 80a1fc4:	bf00      	nop
 80a1fc6:	bf00      	nop
 80a1fc8:	bf00      	nop
 80a1fca:	bf00      	nop
 80a1fcc:	bf00      	nop
 80a1fce:	bf00      	nop
 80a1fd0:	bf00      	nop
 80a1fd2:	bf00      	nop
 80a1fd4:	bf00      	nop
 80a1fd6:	bf00      	nop
 80a1fd8:	bf00      	nop
 80a1fda:	bf00      	nop
 80a1fdc:	bf00      	nop
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
 80a2004:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a2006:	79e3      	ldrb	r3, [r4, #7]
 80a2008:	6810      	ldr	r0, [r2, #0]
 80a200a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a200e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2012:	88bf      	ldrh	r7, [r7, #4]
 80a2014:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2018:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a201a:	4600      	mov	r0, r0
 80a201c:	bf00      	nop
 80a201e:	bf00      	nop
 80a2020:	bf00      	nop
 80a2022:	bf00      	nop
 80a2024:	bf00      	nop
 80a2026:	bf00      	nop
 80a2028:	bf00      	nop
 80a202a:	bf00      	nop
 80a202c:	bf00      	nop
 80a202e:	bf00      	nop
 80a2030:	bf00      	nop
 80a2032:	bf00      	nop
 80a2034:	bf00      	nop
 80a2036:	bf00      	nop
 80a2038:	bf00      	nop
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	bf00      	nop
 80a204c:	bf00      	nop
 80a204e:	bf00      	nop
 80a2050:	bf00      	nop
 80a2052:	bf00      	nop
 80a2054:	bf00      	nop
 80a2056:	bf00      	nop
 80a2058:	bf00      	nop
 80a205a:	bf00      	nop
 80a205c:	bf00      	nop
 80a205e:	bf00      	nop
 80a2060:	bf00      	nop
 80a2062:	bf00      	nop
 80a2064:	bf00      	nop
 80a2066:	bf00      	nop
 80a2068:	bf00      	nop
 80a206a:	bf00      	nop
 80a206c:	bf00      	nop
 80a206e:	bf00      	nop
 80a2070:	bf00      	nop
 80a2072:	bf00      	nop
 80a2074:	bf00      	nop
 80a2076:	bf00      	nop
 80a2078:	bf00      	nop
 80a207a:	bf00      	nop
 80a207c:	bf00      	nop
 80a207e:	bf00      	nop
 80a2080:	bf00      	nop
 80a2082:	bf00      	nop
 80a2084:	bf00      	nop
 80a2086:	bf00      	nop
 80a2088:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a208a:	9b04      	ldr	r3, [sp, #16]
 80a208c:	085b      	lsrs	r3, r3, #1
 80a208e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2090:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2094:	3301      	adds	r3, #1
 80a2096:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a2098:	2b17      	cmp	r3, #23
 80a209a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a209e:	f200 80e3 	bhi.w	80a2268 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a20a2:	79e3      	ldrb	r3, [r4, #7]
 80a20a4:	6810      	ldr	r0, [r2, #0]
 80a20a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a20aa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a20ae:	88bf      	ldrh	r7, [r7, #4]
 80a20b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a20b4:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a20b6:	9803      	ldr	r0, [sp, #12]
 80a20b8:	9b04      	ldr	r3, [sp, #16]
 80a20ba:	4218      	tst	r0, r3
 80a20bc:	f47f af12 	bne.w	80a1ee4 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a20c0:	4600      	mov	r0, r0
 80a20c2:	bf00      	nop
 80a20c4:	bf00      	nop
 80a20c6:	bf00      	nop
 80a20c8:	bf00      	nop
 80a20ca:	bf00      	nop
 80a20cc:	bf00      	nop
 80a20ce:	bf00      	nop
 80a20d0:	bf00      	nop
 80a20d2:	bf00      	nop
 80a20d4:	bf00      	nop
 80a20d6:	bf00      	nop
 80a20d8:	bf00      	nop
 80a20da:	bf00      	nop
 80a20dc:	bf00      	nop
 80a20de:	bf00      	nop
 80a20e0:	bf00      	nop
 80a20e2:	bf00      	nop
 80a20e4:	bf00      	nop
 80a20e6:	bf00      	nop
 80a20e8:	bf00      	nop
 80a20ea:	bf00      	nop
 80a20ec:	bf00      	nop
 80a20ee:	bf00      	nop
 80a20f0:	bf00      	nop
 80a20f2:	bf00      	nop
 80a20f4:	bf00      	nop
 80a20f6:	bf00      	nop
 80a20f8:	bf00      	nop
 80a20fa:	bf00      	nop
 80a20fc:	bf00      	nop
 80a20fe:	bf00      	nop
 80a2100:	bf00      	nop
 80a2102:	bf00      	nop
 80a2104:	bf00      	nop
 80a2106:	bf00      	nop
 80a2108:	bf00      	nop
 80a210a:	bf00      	nop
 80a210c:	bf00      	nop
 80a210e:	bf00      	nop
 80a2110:	bf00      	nop
 80a2112:	bf00      	nop
 80a2114:	bf00      	nop
 80a2116:	bf00      	nop
 80a2118:	bf00      	nop
 80a211a:	bf00      	nop
 80a211c:	bf00      	nop
 80a211e:	bf00      	nop
 80a2120:	bf00      	nop
 80a2122:	bf00      	nop
 80a2124:	bf00      	nop
 80a2126:	bf00      	nop
 80a2128:	bf00      	nop
 80a212a:	bf00      	nop
 80a212c:	bf00      	nop
 80a212e:	bf00      	nop
 80a2130:	bf00      	nop
 80a2132:	bf00      	nop
 80a2134:	bf00      	nop
 80a2136:	bf00      	nop
 80a2138:	bf00      	nop
 80a213a:	bf00      	nop
 80a213c:	bf00      	nop
 80a213e:	bf00      	nop
 80a2140:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a2142:	79e3      	ldrb	r3, [r4, #7]
 80a2144:	6810      	ldr	r0, [r2, #0]
 80a2146:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a214a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a214e:	88bf      	ldrh	r7, [r7, #4]
 80a2150:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2154:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2156:	4600      	mov	r0, r0
 80a2158:	bf00      	nop
 80a215a:	bf00      	nop
 80a215c:	bf00      	nop
 80a215e:	bf00      	nop
 80a2160:	bf00      	nop
 80a2162:	bf00      	nop
 80a2164:	bf00      	nop
 80a2166:	bf00      	nop
 80a2168:	bf00      	nop
 80a216a:	bf00      	nop
 80a216c:	bf00      	nop
 80a216e:	bf00      	nop
 80a2170:	bf00      	nop
 80a2172:	bf00      	nop
 80a2174:	bf00      	nop
 80a2176:	bf00      	nop
 80a2178:	bf00      	nop
 80a217a:	bf00      	nop
 80a217c:	bf00      	nop
 80a217e:	bf00      	nop
 80a2180:	bf00      	nop
 80a2182:	bf00      	nop
 80a2184:	bf00      	nop
 80a2186:	bf00      	nop
 80a2188:	bf00      	nop
 80a218a:	bf00      	nop
 80a218c:	bf00      	nop
 80a218e:	bf00      	nop
 80a2190:	bf00      	nop
 80a2192:	bf00      	nop
 80a2194:	bf00      	nop
 80a2196:	bf00      	nop
 80a2198:	bf00      	nop
 80a219a:	bf00      	nop
 80a219c:	bf00      	nop
 80a219e:	bf00      	nop
 80a21a0:	bf00      	nop
 80a21a2:	bf00      	nop
 80a21a4:	bf00      	nop
 80a21a6:	bf00      	nop
 80a21a8:	bf00      	nop
 80a21aa:	bf00      	nop
 80a21ac:	bf00      	nop
 80a21ae:	bf00      	nop
 80a21b0:	bf00      	nop
 80a21b2:	bf00      	nop
 80a21b4:	bf00      	nop
 80a21b6:	bf00      	nop
 80a21b8:	bf00      	nop
 80a21ba:	bf00      	nop
 80a21bc:	bf00      	nop
 80a21be:	bf00      	nop
 80a21c0:	bf00      	nop
 80a21c2:	bf00      	nop
 80a21c4:	bf00      	nop
 80a21c6:	bf00      	nop
 80a21c8:	bf00      	nop
 80a21ca:	bf00      	nop
 80a21cc:	bf00      	nop
 80a21ce:	bf00      	nop
 80a21d0:	bf00      	nop
 80a21d2:	bf00      	nop
 80a21d4:	bf00      	nop
 80a21d6:	bf00      	nop
 80a21d8:	bf00      	nop
 80a21da:	bf00      	nop
 80a21dc:	bf00      	nop
 80a21de:	bf00      	nop
 80a21e0:	bf00      	nop
 80a21e2:	bf00      	nop
 80a21e4:	bf00      	nop
 80a21e6:	bf00      	nop
 80a21e8:	bf00      	nop
 80a21ea:	bf00      	nop
 80a21ec:	bf00      	nop
 80a21ee:	bf00      	nop
 80a21f0:	bf00      	nop
 80a21f2:	bf00      	nop
 80a21f4:	bf00      	nop
 80a21f6:	bf00      	nop
 80a21f8:	bf00      	nop
 80a21fa:	bf00      	nop
 80a21fc:	bf00      	nop
 80a21fe:	bf00      	nop
 80a2200:	bf00      	nop
 80a2202:	bf00      	nop
 80a2204:	bf00      	nop
 80a2206:	bf00      	nop
 80a2208:	bf00      	nop
 80a220a:	bf00      	nop
 80a220c:	bf00      	nop
 80a220e:	bf00      	nop
 80a2210:	bf00      	nop
 80a2212:	bf00      	nop
 80a2214:	bf00      	nop
 80a2216:	bf00      	nop
 80a2218:	bf00      	nop
 80a221a:	bf00      	nop
 80a221c:	bf00      	nop
 80a221e:	bf00      	nop
 80a2220:	bf00      	nop
 80a2222:	bf00      	nop
 80a2224:	bf00      	nop
 80a2226:	bf00      	nop
 80a2228:	bf00      	nop
 80a222a:	bf00      	nop
 80a222c:	bf00      	nop
 80a222e:	bf00      	nop
 80a2230:	bf00      	nop
 80a2232:	bf00      	nop
 80a2234:	bf00      	nop
 80a2236:	bf00      	nop
 80a2238:	bf00      	nop
 80a223a:	bf00      	nop
 80a223c:	bf00      	nop
 80a223e:	bf00      	nop
 80a2240:	bf00      	nop
 80a2242:	bf00      	nop
 80a2244:	bf00      	nop
 80a2246:	bf00      	nop
 80a2248:	bf00      	nop
 80a224a:	bf00      	nop
 80a224c:	bf00      	nop
 80a224e:	bf00      	nop
 80a2250:	bf00      	nop
 80a2252:	bf00      	nop
 80a2254:	bf00      	nop
 80a2256:	bf00      	nop
 80a2258:	bf00      	nop
 80a225a:	bf00      	nop
 80a225c:	bf00      	nop
 80a225e:	bf00      	nop
 80a2260:	bf00      	nop
 80a2262:	bf00      	nop
 80a2264:	bf00      	nop
 80a2266:	e710      	b.n	80a208a <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a2268:	468e      	mov	lr, r1
 80a226a:	e60d      	b.n	80a1e88 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a226c <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a226c:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a226e:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a2270:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a2272:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a2274:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a2276:	d01e      	beq.n	80a22b6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a2278:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a227a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a227e:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2280:	d00c      	beq.n	80a229c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2282:	29ff      	cmp	r1, #255	; 0xff
 80a2284:	bf0f      	iteee	eq
 80a2286:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a228a:	0211      	lslne	r1, r2, #8
 80a228c:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a2290:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2294:	bf0c      	ite	eq
 80a2296:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a229a:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a229c:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a229e:	1b29      	subs	r1, r5, r4
 80a22a0:	8886      	ldrh	r6, [r0, #4]
 80a22a2:	b289      	uxth	r1, r1
 80a22a4:	428e      	cmp	r6, r1
 80a22a6:	d905      	bls.n	80a22b4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a22a8:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a22aa:	4359      	muls	r1, r3
 80a22ac:	1209      	asrs	r1, r1, #8
 80a22ae:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a22b2:	e7f4      	b.n	80a229e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a22b4:	7202      	strb	r2, [r0, #8]
 80a22b6:	bd70      	pop	{r4, r5, r6, pc}

080a22b8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a22b8:	b508      	push	{r3, lr}
 80a22ba:	f000 f829 	bl	80a2310 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a22be:	f000 f827 	bl	80a2310 <HAL_Pin_Map>
 80a22c2:	4b01      	ldr	r3, [pc, #4]	; (80a22c8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a22c4:	6018      	str	r0, [r3, #0]
 80a22c6:	bd08      	pop	{r3, pc}
 80a22c8:	200001d0 	.word	0x200001d0

080a22cc <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a22cc:	f000 b820 	b.w	80a2310 <HAL_Pin_Map>

080a22d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a22d0:	b508      	push	{r3, lr}
 80a22d2:	4b02      	ldr	r3, [pc, #8]	; (80a22dc <os_mutex_create+0xc>)
 80a22d4:	681b      	ldr	r3, [r3, #0]
 80a22d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a22d8:	9301      	str	r3, [sp, #4]
 80a22da:	bd08      	pop	{r3, pc}
 80a22dc:	080601d0 	.word	0x080601d0

080a22e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a22e0:	b508      	push	{r3, lr}
 80a22e2:	4b02      	ldr	r3, [pc, #8]	; (80a22ec <HAL_RNG_GetRandomNumber+0xc>)
 80a22e4:	681b      	ldr	r3, [r3, #0]
 80a22e6:	685b      	ldr	r3, [r3, #4]
 80a22e8:	9301      	str	r3, [sp, #4]
 80a22ea:	bd08      	pop	{r3, pc}
 80a22ec:	0806019c 	.word	0x0806019c

080a22f0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a22f0:	b508      	push	{r3, lr}
 80a22f2:	4b02      	ldr	r3, [pc, #8]	; (80a22fc <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a22f4:	681b      	ldr	r3, [r3, #0]
 80a22f6:	691b      	ldr	r3, [r3, #16]
 80a22f8:	9301      	str	r3, [sp, #4]
 80a22fa:	bd08      	pop	{r3, pc}
 80a22fc:	0806019c 	.word	0x0806019c

080a2300 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2300:	b508      	push	{r3, lr}
 80a2302:	4b02      	ldr	r3, [pc, #8]	; (80a230c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2304:	681b      	ldr	r3, [r3, #0]
 80a2306:	695b      	ldr	r3, [r3, #20]
 80a2308:	9301      	str	r3, [sp, #4]
 80a230a:	bd08      	pop	{r3, pc}
 80a230c:	0806019c 	.word	0x0806019c

080a2310 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2310:	b508      	push	{r3, lr}
 80a2312:	4b02      	ldr	r3, [pc, #8]	; (80a231c <HAL_Pin_Map+0xc>)
 80a2314:	681b      	ldr	r3, [r3, #0]
 80a2316:	681b      	ldr	r3, [r3, #0]
 80a2318:	9301      	str	r3, [sp, #4]
 80a231a:	bd08      	pop	{r3, pc}
 80a231c:	080601b0 	.word	0x080601b0

080a2320 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2320:	b508      	push	{r3, lr}
 80a2322:	4b02      	ldr	r3, [pc, #8]	; (80a232c <HAL_Pin_Mode+0xc>)
 80a2324:	681b      	ldr	r3, [r3, #0]
 80a2326:	689b      	ldr	r3, [r3, #8]
 80a2328:	9301      	str	r3, [sp, #4]
 80a232a:	bd08      	pop	{r3, pc}
 80a232c:	080601b0 	.word	0x080601b0

080a2330 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2330:	b508      	push	{r3, lr}
 80a2332:	4b02      	ldr	r3, [pc, #8]	; (80a233c <HAL_Get_Pin_Mode+0xc>)
 80a2334:	681b      	ldr	r3, [r3, #0]
 80a2336:	68db      	ldr	r3, [r3, #12]
 80a2338:	9301      	str	r3, [sp, #4]
 80a233a:	bd08      	pop	{r3, pc}
 80a233c:	080601b0 	.word	0x080601b0

080a2340 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2340:	b508      	push	{r3, lr}
 80a2342:	4b02      	ldr	r3, [pc, #8]	; (80a234c <HAL_GPIO_Write+0xc>)
 80a2344:	681b      	ldr	r3, [r3, #0]
 80a2346:	691b      	ldr	r3, [r3, #16]
 80a2348:	9301      	str	r3, [sp, #4]
 80a234a:	bd08      	pop	{r3, pc}
 80a234c:	080601b0 	.word	0x080601b0

080a2350 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2350:	b508      	push	{r3, lr}
 80a2352:	4b02      	ldr	r3, [pc, #8]	; (80a235c <HAL_I2C_Begin+0xc>)
 80a2354:	681b      	ldr	r3, [r3, #0]
 80a2356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2358:	9301      	str	r3, [sp, #4]
 80a235a:	bd08      	pop	{r3, pc}
 80a235c:	080601ac 	.word	0x080601ac

080a2360 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2360:	b508      	push	{r3, lr}
 80a2362:	4b02      	ldr	r3, [pc, #8]	; (80a236c <HAL_I2C_Request_Data+0xc>)
 80a2364:	681b      	ldr	r3, [r3, #0]
 80a2366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2368:	9301      	str	r3, [sp, #4]
 80a236a:	bd08      	pop	{r3, pc}
 80a236c:	080601ac 	.word	0x080601ac

080a2370 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2370:	b508      	push	{r3, lr}
 80a2372:	4b02      	ldr	r3, [pc, #8]	; (80a237c <HAL_I2C_Begin_Transmission+0xc>)
 80a2374:	681b      	ldr	r3, [r3, #0]
 80a2376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2378:	9301      	str	r3, [sp, #4]
 80a237a:	bd08      	pop	{r3, pc}
 80a237c:	080601ac 	.word	0x080601ac

080a2380 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2380:	b508      	push	{r3, lr}
 80a2382:	4b02      	ldr	r3, [pc, #8]	; (80a238c <HAL_I2C_End_Transmission+0xc>)
 80a2384:	681b      	ldr	r3, [r3, #0]
 80a2386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2388:	9301      	str	r3, [sp, #4]
 80a238a:	bd08      	pop	{r3, pc}
 80a238c:	080601ac 	.word	0x080601ac

080a2390 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2390:	b508      	push	{r3, lr}
 80a2392:	4b02      	ldr	r3, [pc, #8]	; (80a239c <HAL_I2C_Write_Data+0xc>)
 80a2394:	681b      	ldr	r3, [r3, #0]
 80a2396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2398:	9301      	str	r3, [sp, #4]
 80a239a:	bd08      	pop	{r3, pc}
 80a239c:	080601ac 	.word	0x080601ac

080a23a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a23a0:	b508      	push	{r3, lr}
 80a23a2:	4b02      	ldr	r3, [pc, #8]	; (80a23ac <HAL_I2C_Available_Data+0xc>)
 80a23a4:	681b      	ldr	r3, [r3, #0]
 80a23a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a23a8:	9301      	str	r3, [sp, #4]
 80a23aa:	bd08      	pop	{r3, pc}
 80a23ac:	080601ac 	.word	0x080601ac

080a23b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a23b0:	b508      	push	{r3, lr}
 80a23b2:	4b02      	ldr	r3, [pc, #8]	; (80a23bc <HAL_I2C_Read_Data+0xc>)
 80a23b4:	681b      	ldr	r3, [r3, #0]
 80a23b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a23b8:	9301      	str	r3, [sp, #4]
 80a23ba:	bd08      	pop	{r3, pc}
 80a23bc:	080601ac 	.word	0x080601ac

080a23c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a23c0:	b508      	push	{r3, lr}
 80a23c2:	4b02      	ldr	r3, [pc, #8]	; (80a23cc <HAL_I2C_Peek_Data+0xc>)
 80a23c4:	681b      	ldr	r3, [r3, #0]
 80a23c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a23c8:	9301      	str	r3, [sp, #4]
 80a23ca:	bd08      	pop	{r3, pc}
 80a23cc:	080601ac 	.word	0x080601ac

080a23d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a23d0:	b508      	push	{r3, lr}
 80a23d2:	4b02      	ldr	r3, [pc, #8]	; (80a23dc <HAL_I2C_Flush_Data+0xc>)
 80a23d4:	681b      	ldr	r3, [r3, #0]
 80a23d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a23d8:	9301      	str	r3, [sp, #4]
 80a23da:	bd08      	pop	{r3, pc}
 80a23dc:	080601ac 	.word	0x080601ac

080a23e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a23e0:	b508      	push	{r3, lr}
 80a23e2:	4b02      	ldr	r3, [pc, #8]	; (80a23ec <HAL_I2C_Is_Enabled+0xc>)
 80a23e4:	681b      	ldr	r3, [r3, #0]
 80a23e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a23e8:	9301      	str	r3, [sp, #4]
 80a23ea:	bd08      	pop	{r3, pc}
 80a23ec:	080601ac 	.word	0x080601ac

080a23f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a23f0:	b508      	push	{r3, lr}
 80a23f2:	4b03      	ldr	r3, [pc, #12]	; (80a2400 <HAL_I2C_Init+0x10>)
 80a23f4:	681b      	ldr	r3, [r3, #0]
 80a23f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a23fa:	9301      	str	r3, [sp, #4]
 80a23fc:	bd08      	pop	{r3, pc}
 80a23fe:	0000      	.short	0x0000
 80a2400:	080601ac 	.word	0x080601ac

080a2404 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2404:	b508      	push	{r3, lr}
 80a2406:	4b02      	ldr	r3, [pc, #8]	; (80a2410 <socket_handle_valid+0xc>)
 80a2408:	681b      	ldr	r3, [r3, #0]
 80a240a:	685b      	ldr	r3, [r3, #4]
 80a240c:	9301      	str	r3, [sp, #4]
 80a240e:	bd08      	pop	{r3, pc}
 80a2410:	080601bc 	.word	0x080601bc

080a2414 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2414:	b508      	push	{r3, lr}
 80a2416:	4b02      	ldr	r3, [pc, #8]	; (80a2420 <socket_create+0xc>)
 80a2418:	681b      	ldr	r3, [r3, #0]
 80a241a:	689b      	ldr	r3, [r3, #8]
 80a241c:	9301      	str	r3, [sp, #4]
 80a241e:	bd08      	pop	{r3, pc}
 80a2420:	080601bc 	.word	0x080601bc

080a2424 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a2424:	b508      	push	{r3, lr}
 80a2426:	4b02      	ldr	r3, [pc, #8]	; (80a2430 <socket_receivefrom+0xc>)
 80a2428:	681b      	ldr	r3, [r3, #0]
 80a242a:	695b      	ldr	r3, [r3, #20]
 80a242c:	9301      	str	r3, [sp, #4]
 80a242e:	bd08      	pop	{r3, pc}
 80a2430:	080601bc 	.word	0x080601bc

080a2434 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a2434:	b508      	push	{r3, lr}
 80a2436:	4b02      	ldr	r3, [pc, #8]	; (80a2440 <socket_sendto+0xc>)
 80a2438:	681b      	ldr	r3, [r3, #0]
 80a243a:	69db      	ldr	r3, [r3, #28]
 80a243c:	9301      	str	r3, [sp, #4]
 80a243e:	bd08      	pop	{r3, pc}
 80a2440:	080601bc 	.word	0x080601bc

080a2444 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2444:	b508      	push	{r3, lr}
 80a2446:	4b02      	ldr	r3, [pc, #8]	; (80a2450 <socket_close+0xc>)
 80a2448:	681b      	ldr	r3, [r3, #0]
 80a244a:	6a1b      	ldr	r3, [r3, #32]
 80a244c:	9301      	str	r3, [sp, #4]
 80a244e:	bd08      	pop	{r3, pc}
 80a2450:	080601bc 	.word	0x080601bc

080a2454 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2454:	b508      	push	{r3, lr}
 80a2456:	4b02      	ldr	r3, [pc, #8]	; (80a2460 <socket_handle_invalid+0xc>)
 80a2458:	681b      	ldr	r3, [r3, #0]
 80a245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a245c:	9301      	str	r3, [sp, #4]
 80a245e:	bd08      	pop	{r3, pc}
 80a2460:	080601bc 	.word	0x080601bc

080a2464 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2464:	b508      	push	{r3, lr}
 80a2466:	4b02      	ldr	r3, [pc, #8]	; (80a2470 <HAL_SPI_Begin+0xc>)
 80a2468:	681b      	ldr	r3, [r3, #0]
 80a246a:	681b      	ldr	r3, [r3, #0]
 80a246c:	9301      	str	r3, [sp, #4]
 80a246e:	bd08      	pop	{r3, pc}
 80a2470:	080601b4 	.word	0x080601b4

080a2474 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a2474:	b508      	push	{r3, lr}
 80a2476:	4b02      	ldr	r3, [pc, #8]	; (80a2480 <HAL_SPI_Set_Bit_Order+0xc>)
 80a2478:	681b      	ldr	r3, [r3, #0]
 80a247a:	689b      	ldr	r3, [r3, #8]
 80a247c:	9301      	str	r3, [sp, #4]
 80a247e:	bd08      	pop	{r3, pc}
 80a2480:	080601b4 	.word	0x080601b4

080a2484 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a2484:	b508      	push	{r3, lr}
 80a2486:	4b02      	ldr	r3, [pc, #8]	; (80a2490 <HAL_SPI_Set_Data_Mode+0xc>)
 80a2488:	681b      	ldr	r3, [r3, #0]
 80a248a:	68db      	ldr	r3, [r3, #12]
 80a248c:	9301      	str	r3, [sp, #4]
 80a248e:	bd08      	pop	{r3, pc}
 80a2490:	080601b4 	.word	0x080601b4

080a2494 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a2494:	b508      	push	{r3, lr}
 80a2496:	4b02      	ldr	r3, [pc, #8]	; (80a24a0 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a2498:	681b      	ldr	r3, [r3, #0]
 80a249a:	691b      	ldr	r3, [r3, #16]
 80a249c:	9301      	str	r3, [sp, #4]
 80a249e:	bd08      	pop	{r3, pc}
 80a24a0:	080601b4 	.word	0x080601b4

080a24a4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a24a4:	b508      	push	{r3, lr}
 80a24a6:	4b02      	ldr	r3, [pc, #8]	; (80a24b0 <HAL_SPI_Send_Receive_Data+0xc>)
 80a24a8:	681b      	ldr	r3, [r3, #0]
 80a24aa:	695b      	ldr	r3, [r3, #20]
 80a24ac:	9301      	str	r3, [sp, #4]
 80a24ae:	bd08      	pop	{r3, pc}
 80a24b0:	080601b4 	.word	0x080601b4

080a24b4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a24b4:	b508      	push	{r3, lr}
 80a24b6:	4b02      	ldr	r3, [pc, #8]	; (80a24c0 <HAL_SPI_Init+0xc>)
 80a24b8:	681b      	ldr	r3, [r3, #0]
 80a24ba:	69db      	ldr	r3, [r3, #28]
 80a24bc:	9301      	str	r3, [sp, #4]
 80a24be:	bd08      	pop	{r3, pc}
 80a24c0:	080601b4 	.word	0x080601b4

080a24c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a24c4:	b508      	push	{r3, lr}
 80a24c6:	4b02      	ldr	r3, [pc, #8]	; (80a24d0 <HAL_SPI_Is_Enabled+0xc>)
 80a24c8:	681b      	ldr	r3, [r3, #0]
 80a24ca:	6a1b      	ldr	r3, [r3, #32]
 80a24cc:	9301      	str	r3, [sp, #4]
 80a24ce:	bd08      	pop	{r3, pc}
 80a24d0:	080601b4 	.word	0x080601b4

080a24d4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a24d4:	b508      	push	{r3, lr}
 80a24d6:	4b02      	ldr	r3, [pc, #8]	; (80a24e0 <HAL_SPI_Info+0xc>)
 80a24d8:	681b      	ldr	r3, [r3, #0]
 80a24da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a24dc:	9301      	str	r3, [sp, #4]
 80a24de:	bd08      	pop	{r3, pc}
 80a24e0:	080601b4 	.word	0x080601b4

080a24e4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a24e4:	b508      	push	{r3, lr}
 80a24e6:	4b02      	ldr	r3, [pc, #8]	; (80a24f0 <HAL_USART_Init+0xc>)
 80a24e8:	681b      	ldr	r3, [r3, #0]
 80a24ea:	699b      	ldr	r3, [r3, #24]
 80a24ec:	9301      	str	r3, [sp, #4]
 80a24ee:	bd08      	pop	{r3, pc}
 80a24f0:	080601c4 	.word	0x080601c4

080a24f4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a24f4:	b508      	push	{r3, lr}
 80a24f6:	4b02      	ldr	r3, [pc, #8]	; (80a2500 <HAL_USART_Write_Data+0xc>)
 80a24f8:	681b      	ldr	r3, [r3, #0]
 80a24fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a24fc:	9301      	str	r3, [sp, #4]
 80a24fe:	bd08      	pop	{r3, pc}
 80a2500:	080601c4 	.word	0x080601c4

080a2504 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2504:	b508      	push	{r3, lr}
 80a2506:	4b02      	ldr	r3, [pc, #8]	; (80a2510 <HAL_USART_Available_Data+0xc>)
 80a2508:	681b      	ldr	r3, [r3, #0]
 80a250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a250c:	9301      	str	r3, [sp, #4]
 80a250e:	bd08      	pop	{r3, pc}
 80a2510:	080601c4 	.word	0x080601c4

080a2514 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2514:	b508      	push	{r3, lr}
 80a2516:	4b02      	ldr	r3, [pc, #8]	; (80a2520 <HAL_USART_Read_Data+0xc>)
 80a2518:	681b      	ldr	r3, [r3, #0]
 80a251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a251c:	9301      	str	r3, [sp, #4]
 80a251e:	bd08      	pop	{r3, pc}
 80a2520:	080601c4 	.word	0x080601c4

080a2524 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2524:	b508      	push	{r3, lr}
 80a2526:	4b02      	ldr	r3, [pc, #8]	; (80a2530 <HAL_USART_Peek_Data+0xc>)
 80a2528:	681b      	ldr	r3, [r3, #0]
 80a252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a252c:	9301      	str	r3, [sp, #4]
 80a252e:	bd08      	pop	{r3, pc}
 80a2530:	080601c4 	.word	0x080601c4

080a2534 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2534:	b508      	push	{r3, lr}
 80a2536:	4b02      	ldr	r3, [pc, #8]	; (80a2540 <HAL_USART_Flush_Data+0xc>)
 80a2538:	681b      	ldr	r3, [r3, #0]
 80a253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a253c:	9301      	str	r3, [sp, #4]
 80a253e:	bd08      	pop	{r3, pc}
 80a2540:	080601c4 	.word	0x080601c4

080a2544 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2544:	b508      	push	{r3, lr}
 80a2546:	4b02      	ldr	r3, [pc, #8]	; (80a2550 <HAL_USART_Is_Enabled+0xc>)
 80a2548:	681b      	ldr	r3, [r3, #0]
 80a254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a254c:	9301      	str	r3, [sp, #4]
 80a254e:	bd08      	pop	{r3, pc}
 80a2550:	080601c4 	.word	0x080601c4

080a2554 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2554:	b508      	push	{r3, lr}
 80a2556:	4b02      	ldr	r3, [pc, #8]	; (80a2560 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2558:	681b      	ldr	r3, [r3, #0]
 80a255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a255c:	9301      	str	r3, [sp, #4]
 80a255e:	bd08      	pop	{r3, pc}
 80a2560:	080601c4 	.word	0x080601c4

080a2564 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2564:	b508      	push	{r3, lr}
 80a2566:	4b02      	ldr	r3, [pc, #8]	; (80a2570 <HAL_USB_USART_Init+0xc>)
 80a2568:	681b      	ldr	r3, [r3, #0]
 80a256a:	681b      	ldr	r3, [r3, #0]
 80a256c:	9301      	str	r3, [sp, #4]
 80a256e:	bd08      	pop	{r3, pc}
 80a2570:	080601d8 	.word	0x080601d8

080a2574 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2574:	b508      	push	{r3, lr}
 80a2576:	4b02      	ldr	r3, [pc, #8]	; (80a2580 <HAL_USB_USART_Begin+0xc>)
 80a2578:	681b      	ldr	r3, [r3, #0]
 80a257a:	685b      	ldr	r3, [r3, #4]
 80a257c:	9301      	str	r3, [sp, #4]
 80a257e:	bd08      	pop	{r3, pc}
 80a2580:	080601d8 	.word	0x080601d8

080a2584 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2584:	b508      	push	{r3, lr}
 80a2586:	4b02      	ldr	r3, [pc, #8]	; (80a2590 <HAL_USB_USART_Available_Data+0xc>)
 80a2588:	681b      	ldr	r3, [r3, #0]
 80a258a:	691b      	ldr	r3, [r3, #16]
 80a258c:	9301      	str	r3, [sp, #4]
 80a258e:	bd08      	pop	{r3, pc}
 80a2590:	080601d8 	.word	0x080601d8

080a2594 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2594:	b508      	push	{r3, lr}
 80a2596:	4b02      	ldr	r3, [pc, #8]	; (80a25a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2598:	681b      	ldr	r3, [r3, #0]
 80a259a:	695b      	ldr	r3, [r3, #20]
 80a259c:	9301      	str	r3, [sp, #4]
 80a259e:	bd08      	pop	{r3, pc}
 80a25a0:	080601d8 	.word	0x080601d8

080a25a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a25a4:	b508      	push	{r3, lr}
 80a25a6:	4b02      	ldr	r3, [pc, #8]	; (80a25b0 <HAL_USB_USART_Receive_Data+0xc>)
 80a25a8:	681b      	ldr	r3, [r3, #0]
 80a25aa:	699b      	ldr	r3, [r3, #24]
 80a25ac:	9301      	str	r3, [sp, #4]
 80a25ae:	bd08      	pop	{r3, pc}
 80a25b0:	080601d8 	.word	0x080601d8

080a25b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a25b4:	b508      	push	{r3, lr}
 80a25b6:	4b02      	ldr	r3, [pc, #8]	; (80a25c0 <HAL_USB_USART_Send_Data+0xc>)
 80a25b8:	681b      	ldr	r3, [r3, #0]
 80a25ba:	69db      	ldr	r3, [r3, #28]
 80a25bc:	9301      	str	r3, [sp, #4]
 80a25be:	bd08      	pop	{r3, pc}
 80a25c0:	080601d8 	.word	0x080601d8

080a25c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a25c4:	b508      	push	{r3, lr}
 80a25c6:	4b02      	ldr	r3, [pc, #8]	; (80a25d0 <HAL_USB_USART_Flush_Data+0xc>)
 80a25c8:	681b      	ldr	r3, [r3, #0]
 80a25ca:	6a1b      	ldr	r3, [r3, #32]
 80a25cc:	9301      	str	r3, [sp, #4]
 80a25ce:	bd08      	pop	{r3, pc}
 80a25d0:	080601d8 	.word	0x080601d8

080a25d4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a25d4:	b508      	push	{r3, lr}
 80a25d6:	4b02      	ldr	r3, [pc, #8]	; (80a25e0 <HAL_USB_USART_Is_Enabled+0xc>)
 80a25d8:	681b      	ldr	r3, [r3, #0]
 80a25da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a25dc:	9301      	str	r3, [sp, #4]
 80a25de:	bd08      	pop	{r3, pc}
 80a25e0:	080601d8 	.word	0x080601d8

080a25e4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a25e4:	b508      	push	{r3, lr}
 80a25e6:	4b02      	ldr	r3, [pc, #8]	; (80a25f0 <inet_gethostbyname+0xc>)
 80a25e8:	681b      	ldr	r3, [r3, #0]
 80a25ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a25ec:	9301      	str	r3, [sp, #4]
 80a25ee:	bd08      	pop	{r3, pc}
 80a25f0:	080601c0 	.word	0x080601c0

080a25f4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a25f4:	b508      	push	{r3, lr}
 80a25f6:	4b02      	ldr	r3, [pc, #8]	; (80a2600 <set_system_mode+0xc>)
 80a25f8:	681b      	ldr	r3, [r3, #0]
 80a25fa:	685b      	ldr	r3, [r3, #4]
 80a25fc:	9301      	str	r3, [sp, #4]
 80a25fe:	bd08      	pop	{r3, pc}
 80a2600:	080601a4 	.word	0x080601a4

080a2604 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2604:	b508      	push	{r3, lr}
 80a2606:	4b02      	ldr	r3, [pc, #8]	; (80a2610 <system_delay_ms+0xc>)
 80a2608:	681b      	ldr	r3, [r3, #0]
 80a260a:	695b      	ldr	r3, [r3, #20]
 80a260c:	9301      	str	r3, [sp, #4]
 80a260e:	bd08      	pop	{r3, pc}
 80a2610:	080601a4 	.word	0x080601a4

080a2614 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2614:	b508      	push	{r3, lr}
 80a2616:	4b02      	ldr	r3, [pc, #8]	; (80a2620 <system_thread_set_state+0xc>)
 80a2618:	681b      	ldr	r3, [r3, #0]
 80a261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a261c:	9301      	str	r3, [sp, #4]
 80a261e:	bd08      	pop	{r3, pc}
 80a2620:	080601a4 	.word	0x080601a4

080a2624 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2624:	b508      	push	{r3, lr}
 80a2626:	4b03      	ldr	r3, [pc, #12]	; (80a2634 <system_ctrl_set_app_request_handler+0x10>)
 80a2628:	681b      	ldr	r3, [r3, #0]
 80a262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a262e:	9301      	str	r3, [sp, #4]
 80a2630:	bd08      	pop	{r3, pc}
 80a2632:	0000      	.short	0x0000
 80a2634:	080601a4 	.word	0x080601a4

080a2638 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2638:	b508      	push	{r3, lr}
 80a263a:	4b03      	ldr	r3, [pc, #12]	; (80a2648 <system_ctrl_set_result+0x10>)
 80a263c:	681b      	ldr	r3, [r3, #0]
 80a263e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2642:	9301      	str	r3, [sp, #4]
 80a2644:	bd08      	pop	{r3, pc}
 80a2646:	0000      	.short	0x0000
 80a2648:	080601a4 	.word	0x080601a4

080a264c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a264c:	b508      	push	{r3, lr}
 80a264e:	4b02      	ldr	r3, [pc, #8]	; (80a2658 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2650:	681b      	ldr	r3, [r3, #0]
 80a2652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2654:	9301      	str	r3, [sp, #4]
 80a2656:	bd08      	pop	{r3, pc}
 80a2658:	080601cc 	.word	0x080601cc

080a265c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a265c:	b508      	push	{r3, lr}
 80a265e:	4b02      	ldr	r3, [pc, #8]	; (80a2668 <network_config+0xc>)
 80a2660:	681b      	ldr	r3, [r3, #0]
 80a2662:	681b      	ldr	r3, [r3, #0]
 80a2664:	9301      	str	r3, [sp, #4]
 80a2666:	bd08      	pop	{r3, pc}
 80a2668:	080601c8 	.word	0x080601c8

080a266c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a266c:	b508      	push	{r3, lr}
 80a266e:	4b02      	ldr	r3, [pc, #8]	; (80a2678 <network_connect+0xc>)
 80a2670:	681b      	ldr	r3, [r3, #0]
 80a2672:	685b      	ldr	r3, [r3, #4]
 80a2674:	9301      	str	r3, [sp, #4]
 80a2676:	bd08      	pop	{r3, pc}
 80a2678:	080601c8 	.word	0x080601c8

080a267c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a267c:	b508      	push	{r3, lr}
 80a267e:	4b02      	ldr	r3, [pc, #8]	; (80a2688 <network_connecting+0xc>)
 80a2680:	681b      	ldr	r3, [r3, #0]
 80a2682:	689b      	ldr	r3, [r3, #8]
 80a2684:	9301      	str	r3, [sp, #4]
 80a2686:	bd08      	pop	{r3, pc}
 80a2688:	080601c8 	.word	0x080601c8

080a268c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a268c:	b508      	push	{r3, lr}
 80a268e:	4b02      	ldr	r3, [pc, #8]	; (80a2698 <network_disconnect+0xc>)
 80a2690:	681b      	ldr	r3, [r3, #0]
 80a2692:	68db      	ldr	r3, [r3, #12]
 80a2694:	9301      	str	r3, [sp, #4]
 80a2696:	bd08      	pop	{r3, pc}
 80a2698:	080601c8 	.word	0x080601c8

080a269c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a269c:	b508      	push	{r3, lr}
 80a269e:	4b02      	ldr	r3, [pc, #8]	; (80a26a8 <network_ready+0xc>)
 80a26a0:	681b      	ldr	r3, [r3, #0]
 80a26a2:	691b      	ldr	r3, [r3, #16]
 80a26a4:	9301      	str	r3, [sp, #4]
 80a26a6:	bd08      	pop	{r3, pc}
 80a26a8:	080601c8 	.word	0x080601c8

080a26ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a26ac:	b508      	push	{r3, lr}
 80a26ae:	4b02      	ldr	r3, [pc, #8]	; (80a26b8 <network_on+0xc>)
 80a26b0:	681b      	ldr	r3, [r3, #0]
 80a26b2:	695b      	ldr	r3, [r3, #20]
 80a26b4:	9301      	str	r3, [sp, #4]
 80a26b6:	bd08      	pop	{r3, pc}
 80a26b8:	080601c8 	.word	0x080601c8

080a26bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a26bc:	b508      	push	{r3, lr}
 80a26be:	4b02      	ldr	r3, [pc, #8]	; (80a26c8 <network_off+0xc>)
 80a26c0:	681b      	ldr	r3, [r3, #0]
 80a26c2:	699b      	ldr	r3, [r3, #24]
 80a26c4:	9301      	str	r3, [sp, #4]
 80a26c6:	bd08      	pop	{r3, pc}
 80a26c8:	080601c8 	.word	0x080601c8

080a26cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a26cc:	b508      	push	{r3, lr}
 80a26ce:	4b02      	ldr	r3, [pc, #8]	; (80a26d8 <network_listen+0xc>)
 80a26d0:	681b      	ldr	r3, [r3, #0]
 80a26d2:	69db      	ldr	r3, [r3, #28]
 80a26d4:	9301      	str	r3, [sp, #4]
 80a26d6:	bd08      	pop	{r3, pc}
 80a26d8:	080601c8 	.word	0x080601c8

080a26dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a26dc:	b508      	push	{r3, lr}
 80a26de:	4b02      	ldr	r3, [pc, #8]	; (80a26e8 <network_listening+0xc>)
 80a26e0:	681b      	ldr	r3, [r3, #0]
 80a26e2:	6a1b      	ldr	r3, [r3, #32]
 80a26e4:	9301      	str	r3, [sp, #4]
 80a26e6:	bd08      	pop	{r3, pc}
 80a26e8:	080601c8 	.word	0x080601c8

080a26ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a26ec:	b508      	push	{r3, lr}
 80a26ee:	4b02      	ldr	r3, [pc, #8]	; (80a26f8 <network_set_listen_timeout+0xc>)
 80a26f0:	681b      	ldr	r3, [r3, #0]
 80a26f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a26f4:	9301      	str	r3, [sp, #4]
 80a26f6:	bd08      	pop	{r3, pc}
 80a26f8:	080601c8 	.word	0x080601c8

080a26fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a26fc:	b508      	push	{r3, lr}
 80a26fe:	4b02      	ldr	r3, [pc, #8]	; (80a2708 <network_get_listen_timeout+0xc>)
 80a2700:	681b      	ldr	r3, [r3, #0]
 80a2702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2704:	9301      	str	r3, [sp, #4]
 80a2706:	bd08      	pop	{r3, pc}
 80a2708:	080601c8 	.word	0x080601c8

080a270c <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a270c:	b508      	push	{r3, lr}
 80a270e:	4b02      	ldr	r3, [pc, #8]	; (80a2718 <network_set_hostname+0xc>)
 80a2710:	681b      	ldr	r3, [r3, #0]
 80a2712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2714:	9301      	str	r3, [sp, #4]
 80a2716:	bd08      	pop	{r3, pc}
 80a2718:	080601c8 	.word	0x080601c8

080a271c <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a271c:	b508      	push	{r3, lr}
 80a271e:	4b02      	ldr	r3, [pc, #8]	; (80a2728 <network_get_hostname+0xc>)
 80a2720:	681b      	ldr	r3, [r3, #0]
 80a2722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2724:	9301      	str	r3, [sp, #4]
 80a2726:	bd08      	pop	{r3, pc}
 80a2728:	080601c8 	.word	0x080601c8

080a272c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a272c:	b508      	push	{r3, lr}
 80a272e:	4b02      	ldr	r3, [pc, #8]	; (80a2738 <malloc+0xc>)
 80a2730:	681b      	ldr	r3, [r3, #0]
 80a2732:	681b      	ldr	r3, [r3, #0]
 80a2734:	9301      	str	r3, [sp, #4]
 80a2736:	bd08      	pop	{r3, pc}
 80a2738:	080601a0 	.word	0x080601a0

080a273c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a273c:	b508      	push	{r3, lr}
 80a273e:	4b02      	ldr	r3, [pc, #8]	; (80a2748 <free+0xc>)
 80a2740:	681b      	ldr	r3, [r3, #0]
 80a2742:	685b      	ldr	r3, [r3, #4]
 80a2744:	9301      	str	r3, [sp, #4]
 80a2746:	bd08      	pop	{r3, pc}
 80a2748:	080601a0 	.word	0x080601a0

080a274c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a274c:	b508      	push	{r3, lr}
 80a274e:	4b02      	ldr	r3, [pc, #8]	; (80a2758 <realloc+0xc>)
 80a2750:	681b      	ldr	r3, [r3, #0]
 80a2752:	689b      	ldr	r3, [r3, #8]
 80a2754:	9301      	str	r3, [sp, #4]
 80a2756:	bd08      	pop	{r3, pc}
 80a2758:	080601a0 	.word	0x080601a0

080a275c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a275c:	2100      	movs	r1, #0
 80a275e:	f7ff bf51 	b.w	80a2604 <system_delay_ms>

080a2762 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2762:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2764:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2766:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2768:	b113      	cbz	r3, 80a2770 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a276a:	2203      	movs	r2, #3
 80a276c:	4601      	mov	r1, r0
 80a276e:	4798      	blx	r3
    }
 80a2770:	4620      	mov	r0, r4
 80a2772:	bd10      	pop	{r4, pc}

080a2774 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2774:	4770      	bx	lr

080a2776 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2778:	4606      	mov	r6, r0
 80a277a:	4615      	mov	r5, r2
 80a277c:	460c      	mov	r4, r1
 80a277e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2780:	42bc      	cmp	r4, r7
 80a2782:	d006      	beq.n	80a2792 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2784:	6833      	ldr	r3, [r6, #0]
 80a2786:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a278a:	689b      	ldr	r3, [r3, #8]
 80a278c:	4630      	mov	r0, r6
 80a278e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2790:	e7f6      	b.n	80a2780 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2792:	4628      	mov	r0, r5
 80a2794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2796 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2796:	2200      	movs	r2, #0
 80a2798:	7c00      	ldrb	r0, [r0, #16]
 80a279a:	f7ff bdf9 	b.w	80a2390 <HAL_I2C_Write_Data>

080a279e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a279e:	2100      	movs	r1, #0
 80a27a0:	7c00      	ldrb	r0, [r0, #16]
 80a27a2:	f7ff bdfd 	b.w	80a23a0 <HAL_I2C_Available_Data>

080a27a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a27a6:	2100      	movs	r1, #0
 80a27a8:	7c00      	ldrb	r0, [r0, #16]
 80a27aa:	f7ff be01 	b.w	80a23b0 <HAL_I2C_Read_Data>

080a27ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a27ae:	2100      	movs	r1, #0
 80a27b0:	7c00      	ldrb	r0, [r0, #16]
 80a27b2:	f7ff be05 	b.w	80a23c0 <HAL_I2C_Peek_Data>

080a27b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a27b6:	2100      	movs	r1, #0
 80a27b8:	7c00      	ldrb	r0, [r0, #16]
 80a27ba:	f7ff be09 	b.w	80a23d0 <HAL_I2C_Flush_Data>

080a27be <_ZN7TwoWireD0Ev>:
 80a27be:	b510      	push	{r4, lr}
 80a27c0:	4604      	mov	r4, r0
 80a27c2:	2114      	movs	r1, #20
 80a27c4:	f000 ffa7 	bl	80a3716 <_ZdlPvj>
 80a27c8:	4620      	mov	r0, r4
 80a27ca:	bd10      	pop	{r4, pc}

080a27cc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a27cc:	b510      	push	{r4, lr}
 80a27ce:	4604      	mov	r4, r0
 80a27d0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a27d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a27d6:	60a3      	str	r3, [r4, #8]
 80a27d8:	4b04      	ldr	r3, [pc, #16]	; (80a27ec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a27da:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a27dc:	7420      	strb	r0, [r4, #16]
 80a27de:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a27e0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a27e2:	f7ff fe05 	bl	80a23f0 <HAL_I2C_Init>

}
 80a27e6:	4620      	mov	r0, r4
 80a27e8:	bd10      	pop	{r4, pc}
 80a27ea:	bf00      	nop
 80a27ec:	080a487c 	.word	0x080a487c

080a27f0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a27f0:	2300      	movs	r3, #0
 80a27f2:	461a      	mov	r2, r3
 80a27f4:	4619      	mov	r1, r3
 80a27f6:	7c00      	ldrb	r0, [r0, #16]
 80a27f8:	f7ff bdaa 	b.w	80a2350 <HAL_I2C_Begin>

080a27fc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a27fc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a27fe:	2400      	movs	r4, #0
 80a2800:	7c00      	ldrb	r0, [r0, #16]
 80a2802:	9400      	str	r4, [sp, #0]
 80a2804:	f7ff fdac 	bl	80a2360 <HAL_I2C_Request_Data>
  return result;
}
 80a2808:	b2c0      	uxtb	r0, r0
 80a280a:	b002      	add	sp, #8
 80a280c:	bd10      	pop	{r4, pc}

080a280e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a280e:	2301      	movs	r3, #1
 80a2810:	f7ff bff4 	b.w	80a27fc <_ZN7TwoWire11requestFromEhhh>

080a2814 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2814:	2200      	movs	r2, #0
 80a2816:	7c00      	ldrb	r0, [r0, #16]
 80a2818:	f7ff bdaa 	b.w	80a2370 <HAL_I2C_Begin_Transmission>

080a281c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a281c:	2200      	movs	r2, #0
 80a281e:	7c00      	ldrb	r0, [r0, #16]
 80a2820:	f7ff bdae 	b.w	80a2380 <HAL_I2C_End_Transmission>

080a2824 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2824:	2101      	movs	r1, #1
 80a2826:	f7ff bff9 	b.w	80a281c <_ZN7TwoWire15endTransmissionEh>

080a282a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a282a:	2100      	movs	r1, #0
 80a282c:	7c00      	ldrb	r0, [r0, #16]
 80a282e:	f7ff bdd7 	b.w	80a23e0 <HAL_I2C_Is_Enabled>

080a2832 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2834:	460f      	mov	r7, r1
 80a2836:	f100 0608 	add.w	r6, r0, #8
 80a283a:	1d05      	adds	r5, r0, #4
 80a283c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a283e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2842:	220a      	movs	r2, #10
 80a2844:	4638      	mov	r0, r7
 80a2846:	f000 f94e 	bl	80a2ae6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a284a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a284c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a284e:	d007      	beq.n	80a2860 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2850:	2c00      	cmp	r4, #0
 80a2852:	d0f4      	beq.n	80a283e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2854:	212e      	movs	r1, #46	; 0x2e
 80a2856:	4638      	mov	r0, r7
 80a2858:	f000 f8f2 	bl	80a2a40 <_ZN5Print5printEc>
 80a285c:	4404      	add	r4, r0
 80a285e:	e7ee      	b.n	80a283e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2860:	4620      	mov	r0, r4
 80a2862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2864 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2864:	b510      	push	{r4, lr}
 80a2866:	4604      	mov	r4, r0
 80a2868:	4b04      	ldr	r3, [pc, #16]	; (80a287c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a286a:	2211      	movs	r2, #17
 80a286c:	f840 3b04 	str.w	r3, [r0], #4
 80a2870:	2100      	movs	r1, #0
 80a2872:	f001 ff04 	bl	80a467e <memset>
{
    clear();
}
 80a2876:	4620      	mov	r0, r4
 80a2878:	bd10      	pop	{r4, pc}
 80a287a:	bf00      	nop
 80a287c:	080a48a4 	.word	0x080a48a4

080a2880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2880:	4603      	mov	r3, r0
 80a2882:	4a07      	ldr	r2, [pc, #28]	; (80a28a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2884:	b510      	push	{r4, lr}
 80a2886:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a288a:	f101 0210 	add.w	r2, r1, #16
 80a288e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2892:	4291      	cmp	r1, r2
 80a2894:	f843 4b04 	str.w	r4, [r3], #4
 80a2898:	d1f9      	bne.n	80a288e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a289a:	780a      	ldrb	r2, [r1, #0]
 80a289c:	701a      	strb	r2, [r3, #0]
}
 80a289e:	bd10      	pop	{r4, pc}
 80a28a0:	080a48a4 	.word	0x080a48a4

080a28a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a28a4:	4a02      	ldr	r2, [pc, #8]	; (80a28b0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a28a6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a28a8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a28aa:	2204      	movs	r2, #4
 80a28ac:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a28ae:	4770      	bx	lr
 80a28b0:	080a48a4 	.word	0x080a48a4

080a28b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a28b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a28b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a28ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a28be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a28c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a28c6:	2304      	movs	r3, #4
 80a28c8:	6041      	str	r1, [r0, #4]
 80a28ca:	7503      	strb	r3, [r0, #20]
 80a28cc:	bd10      	pop	{r4, pc}
	...

080a28d0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a28d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a28d2:	4d04      	ldr	r5, [pc, #16]	; (80a28e4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a28d4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a28d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a28da:	9500      	str	r5, [sp, #0]
 80a28dc:	f7ff ffea 	bl	80a28b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a28e0:	b003      	add	sp, #12
 80a28e2:	bd30      	pop	{r4, r5, pc}
 80a28e4:	080a48a4 	.word	0x080a48a4

080a28e8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a28e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a28ea:	780d      	ldrb	r5, [r1, #0]
 80a28ec:	788b      	ldrb	r3, [r1, #2]
 80a28ee:	784a      	ldrb	r2, [r1, #1]
 80a28f0:	78c9      	ldrb	r1, [r1, #3]
 80a28f2:	9100      	str	r1, [sp, #0]
 80a28f4:	4629      	mov	r1, r5
 80a28f6:	f7ff ffdd 	bl	80a28b4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a28fa:	b003      	add	sp, #12
 80a28fc:	bd30      	pop	{r4, r5, pc}
	...

080a2900 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2900:	4a01      	ldr	r2, [pc, #4]	; (80a2908 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2902:	4b02      	ldr	r3, [pc, #8]	; (80a290c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2904:	601a      	str	r2, [r3, #0]
 80a2906:	4770      	bx	lr
 80a2908:	080a4926 	.word	0x080a4926
 80a290c:	200001d4 	.word	0x200001d4

080a2910 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2910:	2300      	movs	r3, #0
 80a2912:	461a      	mov	r2, r3
 80a2914:	6840      	ldr	r0, [r0, #4]
 80a2916:	f7ff bea9 	b.w	80a266c <network_connect>

080a291a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a291a:	2200      	movs	r2, #0
 80a291c:	2102      	movs	r1, #2
 80a291e:	6840      	ldr	r0, [r0, #4]
 80a2920:	f7ff beb4 	b.w	80a268c <network_disconnect>

080a2924 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2924:	2200      	movs	r2, #0
 80a2926:	4611      	mov	r1, r2
 80a2928:	6840      	ldr	r0, [r0, #4]
 80a292a:	f7ff bea7 	b.w	80a267c <network_connecting>

080a292e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a292e:	2200      	movs	r2, #0
 80a2930:	4611      	mov	r1, r2
 80a2932:	6840      	ldr	r0, [r0, #4]
 80a2934:	f7ff beb2 	b.w	80a269c <network_ready>

080a2938 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2938:	2300      	movs	r3, #0
 80a293a:	461a      	mov	r2, r3
 80a293c:	4619      	mov	r1, r3
 80a293e:	6840      	ldr	r0, [r0, #4]
 80a2940:	f7ff beb4 	b.w	80a26ac <network_on>

080a2944 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2944:	2300      	movs	r3, #0
 80a2946:	461a      	mov	r2, r3
 80a2948:	4619      	mov	r1, r3
 80a294a:	6840      	ldr	r0, [r0, #4]
 80a294c:	f7ff beb6 	b.w	80a26bc <network_off>

080a2950 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2950:	2200      	movs	r2, #0
 80a2952:	f081 0101 	eor.w	r1, r1, #1
 80a2956:	6840      	ldr	r0, [r0, #4]
 80a2958:	f7ff beb8 	b.w	80a26cc <network_listen>

080a295c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a295c:	2200      	movs	r2, #0
 80a295e:	6840      	ldr	r0, [r0, #4]
 80a2960:	f7ff bec4 	b.w	80a26ec <network_set_listen_timeout>

080a2964 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2964:	2200      	movs	r2, #0
 80a2966:	4611      	mov	r1, r2
 80a2968:	6840      	ldr	r0, [r0, #4]
 80a296a:	f7ff bec7 	b.w	80a26fc <network_get_listen_timeout>

080a296e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a296e:	2200      	movs	r2, #0
 80a2970:	4611      	mov	r1, r2
 80a2972:	6840      	ldr	r0, [r0, #4]
 80a2974:	f7ff beb2 	b.w	80a26dc <network_listening>

080a2978 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2978:	b570      	push	{r4, r5, r6, lr}
 80a297a:	4616      	mov	r6, r2
 80a297c:	b08e      	sub	sp, #56	; 0x38
 80a297e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2980:	a808      	add	r0, sp, #32
 80a2982:	f7ff ff6f 	bl	80a2864 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2986:	2211      	movs	r2, #17
 80a2988:	2100      	movs	r1, #0
 80a298a:	a803      	add	r0, sp, #12
 80a298c:	f001 fe77 	bl	80a467e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2990:	4630      	mov	r0, r6
 80a2992:	f001 fea5 	bl	80a46e0 <strlen>
 80a2996:	2500      	movs	r5, #0
 80a2998:	4b0a      	ldr	r3, [pc, #40]	; (80a29c4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a299a:	9500      	str	r5, [sp, #0]
 80a299c:	b281      	uxth	r1, r0
 80a299e:	685b      	ldr	r3, [r3, #4]
 80a29a0:	aa03      	add	r2, sp, #12
 80a29a2:	4630      	mov	r0, r6
 80a29a4:	f7ff fe1e 	bl	80a25e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a29a8:	b120      	cbz	r0, 80a29b4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a29aa:	4629      	mov	r1, r5
 80a29ac:	4620      	mov	r0, r4
 80a29ae:	f7ff ff79 	bl	80a28a4 <_ZN9IPAddressC1Em>
 80a29b2:	e003      	b.n	80a29bc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a29b4:	a903      	add	r1, sp, #12
 80a29b6:	4620      	mov	r0, r4
 80a29b8:	f7ff ff62 	bl	80a2880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a29bc:	4620      	mov	r0, r4
 80a29be:	b00e      	add	sp, #56	; 0x38
 80a29c0:	bd70      	pop	{r4, r5, r6, pc}
 80a29c2:	bf00      	nop
 80a29c4:	20000658 	.word	0x20000658

080a29c8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a29c8:	4b03      	ldr	r3, [pc, #12]	; (80a29d8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a29ca:	4a04      	ldr	r2, [pc, #16]	; (80a29dc <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a29cc:	2804      	cmp	r0, #4
 80a29ce:	bf0c      	ite	eq
 80a29d0:	4610      	moveq	r0, r2
 80a29d2:	4618      	movne	r0, r3
 80a29d4:	4770      	bx	lr
 80a29d6:	bf00      	nop
 80a29d8:	200001d8 	.word	0x200001d8
 80a29dc:	20000658 	.word	0x20000658

080a29e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a29e0:	4b02      	ldr	r3, [pc, #8]	; (80a29ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a29e2:	4a03      	ldr	r2, [pc, #12]	; (80a29f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a29e4:	601a      	str	r2, [r3, #0]
 80a29e6:	2200      	movs	r2, #0
 80a29e8:	605a      	str	r2, [r3, #4]
 80a29ea:	4770      	bx	lr
 80a29ec:	200001d8 	.word	0x200001d8
 80a29f0:	080a499c 	.word	0x080a499c

080a29f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a29f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29f6:	4606      	mov	r6, r0
 80a29f8:	460d      	mov	r5, r1
 80a29fa:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a29fc:	2400      	movs	r4, #0
  while (size--) {
 80a29fe:	42bd      	cmp	r5, r7
 80a2a00:	d00c      	beq.n	80a2a1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2a02:	6833      	ldr	r3, [r6, #0]
 80a2a04:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2a08:	689b      	ldr	r3, [r3, #8]
 80a2a0a:	4630      	mov	r0, r6
 80a2a0c:	4798      	blx	r3
     if (chunk>=0)
 80a2a0e:	2800      	cmp	r0, #0
 80a2a10:	db01      	blt.n	80a2a16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2a12:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2a14:	e7f3      	b.n	80a29fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2a16:	2c00      	cmp	r4, #0
 80a2a18:	bf08      	it	eq
 80a2a1a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2a1c:	4620      	mov	r0, r4
 80a2a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2a20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2a20:	b570      	push	{r4, r5, r6, lr}
 80a2a22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2a24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2a26:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2a28:	b149      	cbz	r1, 80a2a3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2a2a:	f001 fe59 	bl	80a46e0 <strlen>
 80a2a2e:	682b      	ldr	r3, [r5, #0]
 80a2a30:	4602      	mov	r2, r0
 80a2a32:	4621      	mov	r1, r4
 80a2a34:	4628      	mov	r0, r5
    }
 80a2a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2a3a:	68db      	ldr	r3, [r3, #12]
 80a2a3c:	4718      	bx	r3
    }
 80a2a3e:	bd70      	pop	{r4, r5, r6, pc}

080a2a40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2a40:	6803      	ldr	r3, [r0, #0]
 80a2a42:	689b      	ldr	r3, [r3, #8]
 80a2a44:	4718      	bx	r3

080a2a46 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a2a46:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a2a48:	680a      	ldr	r2, [r1, #0]
 80a2a4a:	4601      	mov	r1, r0
 80a2a4c:	6812      	ldr	r2, [r2, #0]
 80a2a4e:	4618      	mov	r0, r3
 80a2a50:	4710      	bx	r2

080a2a52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2a52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2a54:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2a56:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2a58:	f7ff fff2 	bl	80a2a40 <_ZN5Print5printEc>
  n += print('\n');
 80a2a5c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2a5e:	4604      	mov	r4, r0
  n += print('\n');
 80a2a60:	4628      	mov	r0, r5
 80a2a62:	f7ff ffed 	bl	80a2a40 <_ZN5Print5printEc>
  return n;
}
 80a2a66:	4420      	add	r0, r4
 80a2a68:	bd38      	pop	{r3, r4, r5, pc}

080a2a6a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2a6a:	b538      	push	{r3, r4, r5, lr}
 80a2a6c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2a6e:	f7ff ffd7 	bl	80a2a20 <_ZN5Print5writeEPKc>
 80a2a72:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2a74:	4628      	mov	r0, r5
 80a2a76:	f7ff ffec 	bl	80a2a52 <_ZN5Print7printlnEv>
  return n;
}
 80a2a7a:	4420      	add	r0, r4
 80a2a7c:	bd38      	pop	{r3, r4, r5, pc}

080a2a7e <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a2a7e:	b538      	push	{r3, r4, r5, lr}
 80a2a80:	4605      	mov	r5, r0
   size_t n = print(x);
 80a2a82:	f7ff ffe0 	bl	80a2a46 <_ZN5Print5printERK9Printable>
 80a2a86:	4604      	mov	r4, r0
   n += println();
 80a2a88:	4628      	mov	r0, r5
 80a2a8a:	f7ff ffe2 	bl	80a2a52 <_ZN5Print7printlnEv>
   return n;
 }
 80a2a8e:	4420      	add	r0, r4
 80a2a90:	bd38      	pop	{r3, r4, r5, pc}

080a2a92 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2a92:	2a01      	cmp	r2, #1
 80a2a94:	bf98      	it	ls
 80a2a96:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2a98:	b530      	push	{r4, r5, lr}
 80a2a9a:	460b      	mov	r3, r1
 80a2a9c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2a9e:	2100      	movs	r1, #0
 80a2aa0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2aa4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2aa8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2aac:	fb05 3312 	mls	r3, r5, r2, r3
 80a2ab0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2ab2:	2b09      	cmp	r3, #9
 80a2ab4:	bf94      	ite	ls
 80a2ab6:	3330      	addls	r3, #48	; 0x30
 80a2ab8:	3337      	addhi	r3, #55	; 0x37
 80a2aba:	b2db      	uxtb	r3, r3
 80a2abc:	4621      	mov	r1, r4
 80a2abe:	f804 3901 	strb.w	r3, [r4], #-1
 80a2ac2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2ac4:	2d00      	cmp	r5, #0
 80a2ac6:	d1ef      	bne.n	80a2aa8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2ac8:	f7ff ffaa 	bl	80a2a20 <_ZN5Print5writeEPKc>
}
 80a2acc:	b00b      	add	sp, #44	; 0x2c
 80a2ace:	bd30      	pop	{r4, r5, pc}

080a2ad0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2ad0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2ad2:	b922      	cbnz	r2, 80a2ade <_ZN5Print5printEmi+0xe>
 80a2ad4:	6803      	ldr	r3, [r0, #0]
 80a2ad6:	b2c9      	uxtb	r1, r1
 80a2ad8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2ada:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2adc:	4718      	bx	r3
  else return printNumber(n, base);
 80a2ade:	b2d2      	uxtb	r2, r2
}
 80a2ae0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2ae2:	f7ff bfd6 	b.w	80a2a92 <_ZN5Print11printNumberEmh>

080a2ae6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2ae6:	f7ff bff3 	b.w	80a2ad0 <_ZN5Print5printEmi>

080a2aea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2aea:	b510      	push	{r4, lr}
 80a2aec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2aee:	f7ff fe38 	bl	80a2762 <_ZNSt14_Function_baseD1Ev>
 80a2af2:	4620      	mov	r0, r4
 80a2af4:	bd10      	pop	{r4, pc}
	...

080a2af8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2af8:	4803      	ldr	r0, [pc, #12]	; (80a2b08 <_GLOBAL__sub_I_RGB+0x10>)
 80a2afa:	2300      	movs	r3, #0
 80a2afc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2afe:	4a03      	ldr	r2, [pc, #12]	; (80a2b0c <_GLOBAL__sub_I_RGB+0x14>)
 80a2b00:	4903      	ldr	r1, [pc, #12]	; (80a2b10 <_GLOBAL__sub_I_RGB+0x18>)
 80a2b02:	f000 be03 	b.w	80a370c <__aeabi_atexit>
 80a2b06:	bf00      	nop
 80a2b08:	200001e0 	.word	0x200001e0
 80a2b0c:	20000080 	.word	0x20000080
 80a2b10:	080a2aeb 	.word	0x080a2aeb

080a2b14 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2b14:	4770      	bx	lr

080a2b16 <_ZN8SPIClassD0Ev>:
 80a2b16:	b510      	push	{r4, lr}
 80a2b18:	4604      	mov	r4, r0
 80a2b1a:	2110      	movs	r1, #16
 80a2b1c:	f000 fdfb 	bl	80a3716 <_ZdlPvj>
 80a2b20:	4620      	mov	r0, r4
 80a2b22:	bd10      	pop	{r4, pc}

080a2b24 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2b24:	b570      	push	{r4, r5, r6, lr}
 80a2b26:	4604      	mov	r4, r0
 80a2b28:	460e      	mov	r6, r1
 80a2b2a:	4b07      	ldr	r3, [pc, #28]	; (80a2b48 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2b2c:	2500      	movs	r5, #0
 80a2b2e:	6003      	str	r3, [r0, #0]
 80a2b30:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2b34:	f7ff fbcc 	bl	80a22d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2b38:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2b3a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2b3c:	f7ff fcba 	bl	80a24b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2b40:	60a5      	str	r5, [r4, #8]
}
 80a2b42:	4620      	mov	r0, r4
 80a2b44:	bd70      	pop	{r4, r5, r6, pc}
 80a2b46:	bf00      	nop
 80a2b48:	080a49d0 	.word	0x080a49d0

080a2b4c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2b50:	7900      	ldrb	r0, [r0, #4]
 80a2b52:	f7ff bc87 	b.w	80a2464 <HAL_SPI_Begin>

080a2b56 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2b56:	7900      	ldrb	r0, [r0, #4]
 80a2b58:	f7ff bc8c 	b.w	80a2474 <HAL_SPI_Set_Bit_Order>

080a2b5c <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2b5c:	7900      	ldrb	r0, [r0, #4]
 80a2b5e:	f7ff bc91 	b.w	80a2484 <HAL_SPI_Set_Data_Mode>
	...

080a2b64 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2b64:	4a05      	ldr	r2, [pc, #20]	; (80a2b7c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a2b66:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2b68:	5c99      	ldrb	r1, [r3, r2]
 80a2b6a:	4281      	cmp	r1, r0
 80a2b6c:	d002      	beq.n	80a2b74 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a2b6e:	3301      	adds	r3, #1
 80a2b70:	2b08      	cmp	r3, #8
 80a2b72:	d1f9      	bne.n	80a2b68 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a2b74:	1c58      	adds	r0, r3, #1
}
 80a2b76:	b2c0      	uxtb	r0, r0
 80a2b78:	4770      	bx	lr
 80a2b7a:	bf00      	nop
 80a2b7c:	080a49d8 	.word	0x080a49d8

080a2b80 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2b80:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2b82:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2b84:	6018      	str	r0, [r3, #0]
 80a2b86:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2b88:	6818      	ldr	r0, [r3, #0]
 80a2b8a:	b2e5      	uxtb	r5, r4
 80a2b8c:	4288      	cmp	r0, r1
 80a2b8e:	d906      	bls.n	80a2b9e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2b90:	3401      	adds	r4, #1
 80a2b92:	2c08      	cmp	r4, #8
 80a2b94:	d002      	beq.n	80a2b9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2b96:	0840      	lsrs	r0, r0, #1
 80a2b98:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2b9a:	e7f5      	b.n	80a2b88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2b9c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2b9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ba8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2ba0:	5d5b      	ldrb	r3, [r3, r5]
 80a2ba2:	7013      	strb	r3, [r2, #0]
 80a2ba4:	bd30      	pop	{r4, r5, pc}
 80a2ba6:	bf00      	nop
 80a2ba8:	080a49d8 	.word	0x080a49d8

080a2bac <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2bac:	b570      	push	{r4, r5, r6, lr}
 80a2bae:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2bb0:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2bb4:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2bb6:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2bb8:	2214      	movs	r2, #20
 80a2bba:	2100      	movs	r1, #0
 80a2bbc:	a803      	add	r0, sp, #12
 80a2bbe:	f001 fd5e 	bl	80a467e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2bc2:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2bc4:	a903      	add	r1, sp, #12
 80a2bc6:	4630      	mov	r0, r6
 80a2bc8:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2bca:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2bce:	f7ff fc81 	bl	80a24d4 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a2bd2:	ab02      	add	r3, sp, #8
 80a2bd4:	f10d 0207 	add.w	r2, sp, #7
 80a2bd8:	4629      	mov	r1, r5
 80a2bda:	9804      	ldr	r0, [sp, #16]
 80a2bdc:	f7ff ffd0 	bl	80a2b80 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2be0:	7920      	ldrb	r0, [r4, #4]
 80a2be2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2be6:	f7ff fc55 	bl	80a2494 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a2bea:	9802      	ldr	r0, [sp, #8]
 80a2bec:	b008      	add	sp, #32
 80a2bee:	bd70      	pop	{r4, r5, r6, pc}

080a2bf0 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2bf0:	b538      	push	{r3, r4, r5, lr}
 80a2bf2:	4604      	mov	r4, r0
    if (dividerReference)
 80a2bf4:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2bf6:	4608      	mov	r0, r1
    if (dividerReference)
 80a2bf8:	b14d      	cbz	r5, 80a2c0e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a2bfa:	f7ff ffb3 	bl	80a2b64 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2bfe:	2201      	movs	r2, #1
 80a2c00:	fa25 f100 	lsr.w	r1, r5, r0
 80a2c04:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a2c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2c0a:	f7ff bfcf 	b.w	80a2bac <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2c0e:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a2c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2c14:	f7ff bc3e 	b.w	80a2494 <HAL_SPI_Set_Clock_Divider>

080a2c18 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2c18:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2c1a:	7900      	ldrb	r0, [r0, #4]
 80a2c1c:	f7ff fc42 	bl	80a24a4 <HAL_SPI_Send_Receive_Data>
}
 80a2c20:	b2c0      	uxtb	r0, r0
 80a2c22:	bd08      	pop	{r3, pc}

080a2c24 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2c24:	7900      	ldrb	r0, [r0, #4]
 80a2c26:	f7ff bc4d 	b.w	80a24c4 <HAL_SPI_Is_Enabled>

080a2c2a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2c2a:	b510      	push	{r4, lr}
 80a2c2c:	4604      	mov	r4, r0
{
	free(buffer);
 80a2c2e:	6800      	ldr	r0, [r0, #0]
 80a2c30:	f7ff fd84 	bl	80a273c <free>
}
 80a2c34:	4620      	mov	r0, r4
 80a2c36:	bd10      	pop	{r4, pc}

080a2c38 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2c38:	b510      	push	{r4, lr}
 80a2c3a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2c3c:	6800      	ldr	r0, [r0, #0]
 80a2c3e:	b108      	cbz	r0, 80a2c44 <_ZN6String10invalidateEv+0xc>
 80a2c40:	f7ff fd7c 	bl	80a273c <free>
	buffer = NULL;
 80a2c44:	2300      	movs	r3, #0
 80a2c46:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2c48:	60a3      	str	r3, [r4, #8]
 80a2c4a:	6063      	str	r3, [r4, #4]
 80a2c4c:	bd10      	pop	{r4, pc}

080a2c4e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2c4e:	b538      	push	{r3, r4, r5, lr}
 80a2c50:	4604      	mov	r4, r0
 80a2c52:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2c54:	6800      	ldr	r0, [r0, #0]
 80a2c56:	3101      	adds	r1, #1
 80a2c58:	f7ff fd78 	bl	80a274c <realloc>
	if (newbuffer) {
 80a2c5c:	b110      	cbz	r0, 80a2c64 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2c5e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2c62:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2c64:	bd38      	pop	{r3, r4, r5, pc}

080a2c66 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2c66:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2c68:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2c6a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2c6c:	b113      	cbz	r3, 80a2c74 <_ZN6String7reserveEj+0xe>
 80a2c6e:	6843      	ldr	r3, [r0, #4]
 80a2c70:	428b      	cmp	r3, r1
 80a2c72:	d207      	bcs.n	80a2c84 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2c74:	4620      	mov	r0, r4
 80a2c76:	f7ff ffea 	bl	80a2c4e <_ZN6String12changeBufferEj>
 80a2c7a:	b120      	cbz	r0, 80a2c86 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2c7c:	68a3      	ldr	r3, [r4, #8]
 80a2c7e:	b90b      	cbnz	r3, 80a2c84 <_ZN6String7reserveEj+0x1e>
 80a2c80:	6822      	ldr	r2, [r4, #0]
 80a2c82:	7013      	strb	r3, [r2, #0]
 80a2c84:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2c86:	bd10      	pop	{r4, pc}

080a2c88 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2c88:	b570      	push	{r4, r5, r6, lr}
 80a2c8a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2c8c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2c8e:	4604      	mov	r4, r0
 80a2c90:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2c92:	f7ff ffe8 	bl	80a2c66 <_ZN6String7reserveEj>
 80a2c96:	b918      	cbnz	r0, 80a2ca0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2c98:	4620      	mov	r0, r4
 80a2c9a:	f7ff ffcd 	bl	80a2c38 <_ZN6String10invalidateEv>
		return *this;
 80a2c9e:	e009      	b.n	80a2cb4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2ca0:	462a      	mov	r2, r5
 80a2ca2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2ca4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2ca6:	6820      	ldr	r0, [r4, #0]
 80a2ca8:	f001 fcde 	bl	80a4668 <memcpy>
	buffer[len] = 0;
 80a2cac:	6822      	ldr	r2, [r4, #0]
 80a2cae:	68a3      	ldr	r3, [r4, #8]
 80a2cb0:	2100      	movs	r1, #0
 80a2cb2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2cb4:	4620      	mov	r0, r4
 80a2cb6:	bd70      	pop	{r4, r5, r6, pc}

080a2cb8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2cb8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2cba:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2cbc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2cbe:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2cc0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2cc2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2cc4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2cc6:	460d      	mov	r5, r1
 80a2cc8:	b139      	cbz	r1, 80a2cda <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2cca:	4608      	mov	r0, r1
 80a2ccc:	f001 fd08 	bl	80a46e0 <strlen>
 80a2cd0:	4629      	mov	r1, r5
 80a2cd2:	4602      	mov	r2, r0
 80a2cd4:	4620      	mov	r0, r4
 80a2cd6:	f7ff ffd7 	bl	80a2c88 <_ZN6String4copyEPKcj>
}
 80a2cda:	4620      	mov	r0, r4
 80a2cdc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2ce0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2ce4:	4b03      	ldr	r3, [pc, #12]	; (80a2cf4 <_GLOBAL__sub_I_System+0x14>)
 80a2ce6:	2000      	movs	r0, #0
 80a2ce8:	7018      	strb	r0, [r3, #0]
 80a2cea:	8058      	strh	r0, [r3, #2]
 80a2cec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2cee:	f7ff bc81 	b.w	80a25f4 <set_system_mode>
 80a2cf2:	bf00      	nop
 80a2cf4:	200001f0 	.word	0x200001f0

080a2cf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2cf8:	4b02      	ldr	r3, [pc, #8]	; (80a2d04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2cfa:	681a      	ldr	r2, [r3, #0]
 80a2cfc:	4b02      	ldr	r3, [pc, #8]	; (80a2d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2cfe:	601a      	str	r2, [r3, #0]
 80a2d00:	4770      	bx	lr
 80a2d02:	bf00      	nop
 80a2d04:	20000018 	.word	0x20000018
 80a2d08:	200001f8 	.word	0x200001f8

080a2d0c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a2d0c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a2d0e:	6804      	ldr	r4, [r0, #0]
 80a2d10:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a2d12:	46a4      	mov	ip, r4
    }
 80a2d14:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a2d16:	4760      	bx	ip

080a2d18 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a2d18:	6803      	ldr	r3, [r0, #0]
 80a2d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2d1c:	4718      	bx	r3

080a2d1e <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a2d1e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a2d20:	4770      	bx	lr

080a2d22 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a2d22:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a2d24:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a2d26:	1a10      	subs	r0, r2, r0
 80a2d28:	4770      	bx	lr

080a2d2a <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a2d2a:	b513      	push	{r0, r1, r4, lr}
 80a2d2c:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a2d2e:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a2d30:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a2d34:	68d4      	ldr	r4, [r2, #12]
 80a2d36:	4619      	mov	r1, r3
 80a2d38:	2201      	movs	r2, #1
 80a2d3a:	47a0      	blx	r4
}
 80a2d3c:	b002      	add	sp, #8
 80a2d3e:	bd10      	pop	{r4, pc}

080a2d40 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a2d40:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a2d42:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a2d44:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a2d46:	691b      	ldr	r3, [r3, #16]
 80a2d48:	4798      	blx	r3
 80a2d4a:	b128      	cbz	r0, 80a2d58 <_ZN3UDP4readEv+0x18>
 80a2d4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2d4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a2d50:	1c59      	adds	r1, r3, #1
 80a2d52:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a2d54:	5cd0      	ldrb	r0, [r2, r3]
 80a2d56:	bd10      	pop	{r4, pc}
 80a2d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2d5c:	bd10      	pop	{r4, pc}

080a2d5e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a2d5e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a2d60:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a2d62:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a2d64:	691b      	ldr	r3, [r3, #16]
 80a2d66:	4798      	blx	r3
 80a2d68:	b118      	cbz	r0, 80a2d72 <_ZN3UDP4peekEv+0x14>
 80a2d6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2d6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a2d6e:	5cd0      	ldrb	r0, [r2, r3]
 80a2d70:	bd10      	pop	{r4, pc}
 80a2d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2d76:	bd10      	pop	{r4, pc}

080a2d78 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a2d78:	4770      	bx	lr

080a2d7a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a2d7a:	4603      	mov	r3, r0
 80a2d7c:	4608      	mov	r0, r1
 80a2d7e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a2d80:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a2d82:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2d84:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a2d86:	6803      	ldr	r3, [r0, #0]
 80a2d88:	1a52      	subs	r2, r2, r1
 80a2d8a:	68db      	ldr	r3, [r3, #12]
 80a2d8c:	4421      	add	r1, r4
}
 80a2d8e:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a2d90:	4718      	bx	r3

080a2d92 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a2d92:	f1a0 0010 	sub.w	r0, r0, #16
 80a2d96:	f7ff bff0 	b.w	80a2d7a <_ZNK3UDP7printToER5Print>

080a2d9a <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a2d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2d9c:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a2d9e:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a2da0:	460f      	mov	r7, r1
 80a2da2:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a2da4:	f7ff fe10 	bl	80a29c8 <_ZN5spark12NetworkClass4fromEm>
 80a2da8:	6803      	ldr	r3, [r0, #0]
 80a2daa:	68db      	ldr	r3, [r3, #12]
 80a2dac:	4798      	blx	r3
 80a2dae:	b1b8      	cbz	r0, 80a2de0 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a2db0:	2102      	movs	r1, #2
 80a2db2:	463b      	mov	r3, r7
 80a2db4:	2211      	movs	r2, #17
 80a2db6:	4608      	mov	r0, r1
 80a2db8:	9600      	str	r6, [sp, #0]
 80a2dba:	f7ff fb2b 	bl	80a2414 <socket_create>
 80a2dbe:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a2dc0:	f7ff fb20 	bl	80a2404 <socket_handle_valid>
 80a2dc4:	4604      	mov	r4, r0
 80a2dc6:	b130      	cbz	r0, 80a2dd6 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2dc8:	2300      	movs	r3, #0
 80a2dca:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2dcc:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a2dce:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a2dd0:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a2dd2:	2001      	movs	r0, #1
 80a2dd4:	e004      	b.n	80a2de0 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a2dd6:	682b      	ldr	r3, [r5, #0]
 80a2dd8:	4628      	mov	r0, r5
 80a2dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2ddc:	4798      	blx	r3
            bound = false;
 80a2dde:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a2de0:	b003      	add	sp, #12
 80a2de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2de4 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a2de4:	b538      	push	{r3, r4, r5, lr}
 80a2de6:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a2de8:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2dea:	f7ff fb33 	bl	80a2454 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a2dee:	4285      	cmp	r5, r0
 80a2df0:	d002      	beq.n	80a2df8 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a2df2:	6960      	ldr	r0, [r4, #20]
 80a2df4:	f7ff fb26 	bl	80a2444 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a2df8:	f7ff fb2c 	bl	80a2454 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2dfc:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a2dfe:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2e00:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2e02:	8723      	strh	r3, [r4, #56]	; 0x38
 80a2e04:	bd38      	pop	{r3, r4, r5, pc}

080a2e06 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a2e06:	b530      	push	{r4, r5, lr}
 80a2e08:	b087      	sub	sp, #28
 80a2e0a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a2e0e:	2502      	movs	r5, #2
 80a2e10:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a2e14:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2e18:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a2e1a:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2e1c:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a2e20:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a2e24:	799c      	ldrb	r4, [r3, #6]
 80a2e26:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a2e2a:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a2e2c:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a2e2e:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a2e32:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a2e36:	2310      	movs	r3, #16
 80a2e38:	9301      	str	r3, [sp, #4]
 80a2e3a:	ab02      	add	r3, sp, #8
 80a2e3c:	9300      	str	r3, [sp, #0]
 80a2e3e:	6940      	ldr	r0, [r0, #20]
 80a2e40:	2300      	movs	r3, #0
 80a2e42:	f7ff faf7 	bl	80a2434 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a2e46:	b007      	add	sp, #28
 80a2e48:	bd30      	pop	{r4, r5, pc}

080a2e4a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a2e4a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2e4c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a2e4e:	4605      	mov	r5, r0
 80a2e50:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2e52:	b113      	cbz	r3, 80a2e5a <_ZN3UDP5writeEPKhj+0x10>
 80a2e54:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a2e56:	1a24      	subs	r4, r4, r0
 80a2e58:	e000      	b.n	80a2e5c <_ZN3UDP5writeEPKhj+0x12>
 80a2e5a:	461c      	mov	r4, r3
 80a2e5c:	4294      	cmp	r4, r2
 80a2e5e:	bf28      	it	cs
 80a2e60:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a2e62:	4418      	add	r0, r3
 80a2e64:	4622      	mov	r2, r4
 80a2e66:	f001 fbff 	bl	80a4668 <memcpy>
    _offset += size;
 80a2e6a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2e6c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a2e6e:	4423      	add	r3, r4
 80a2e70:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2e72:	bd38      	pop	{r3, r4, r5, pc}

080a2e74 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2e74:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a2e76:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2e78:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a2e7a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2e7c:	460e      	mov	r6, r1
 80a2e7e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a2e80:	4798      	blx	r3
 80a2e82:	b188      	cbz	r0, 80a2ea8 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a2e84:	6823      	ldr	r3, [r4, #0]
 80a2e86:	4620      	mov	r0, r4
 80a2e88:	691b      	ldr	r3, [r3, #16]
 80a2e8a:	4798      	blx	r3
 80a2e8c:	4285      	cmp	r5, r0
 80a2e8e:	bfa8      	it	ge
 80a2e90:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a2e92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2e94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2e96:	462a      	mov	r2, r5
 80a2e98:	4419      	add	r1, r3
 80a2e9a:	4630      	mov	r0, r6
 80a2e9c:	f001 fbe4 	bl	80a4668 <memcpy>
      _offset += read;
 80a2ea0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2ea2:	442b      	add	r3, r5
 80a2ea4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a2ea6:	e001      	b.n	80a2eac <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a2ea8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a2eac:	4628      	mov	r0, r5
 80a2eae:	bd70      	pop	{r4, r5, r6, pc}

080a2eb0 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2eb2:	4604      	mov	r4, r0
 80a2eb4:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2eb6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2eb8:	460d      	mov	r5, r1
 80a2eba:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2ebc:	f7ff fd84 	bl	80a29c8 <_ZN5spark12NetworkClass4fromEm>
 80a2ec0:	6803      	ldr	r3, [r0, #0]
 80a2ec2:	68db      	ldr	r3, [r3, #12]
 80a2ec4:	4798      	blx	r3
 80a2ec6:	b310      	cbz	r0, 80a2f0e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2ec8:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2eca:	f7ff fac3 	bl	80a2454 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2ece:	4287      	cmp	r7, r0
 80a2ed0:	d01d      	beq.n	80a2f0e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2ed2:	b1e5      	cbz	r5, 80a2f0e <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a2ed4:	ab08      	add	r3, sp, #32
 80a2ed6:	2210      	movs	r2, #16
 80a2ed8:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a2edc:	9301      	str	r3, [sp, #4]
 80a2ede:	eb0d 0302 	add.w	r3, sp, r2
 80a2ee2:	9300      	str	r3, [sp, #0]
 80a2ee4:	4629      	mov	r1, r5
 80a2ee6:	2300      	movs	r3, #0
 80a2ee8:	4632      	mov	r2, r6
 80a2eea:	6960      	ldr	r0, [r4, #20]
 80a2eec:	f7ff fa9a 	bl	80a2424 <socket_receivefrom>
        if (ret >= 0)
 80a2ef0:	1e05      	subs	r5, r0, #0
 80a2ef2:	db0e      	blt.n	80a2f12 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2ef4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a2ef8:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2efc:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2f02:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2f04:	f104 001c 	add.w	r0, r4, #28
 80a2f08:	f7ff fcee 	bl	80a28e8 <_ZN9IPAddressaSEPKh>
 80a2f0c:	e001      	b.n	80a2f12 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a2f0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a2f12:	4628      	mov	r0, r5
 80a2f14:	b009      	add	sp, #36	; 0x24
 80a2f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2f18 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2f1c:	4606      	mov	r6, r0
 80a2f1e:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a2f20:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2f22:	460d      	mov	r5, r1
 80a2f24:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a2f26:	f7ff fd4f 	bl	80a29c8 <_ZN5spark12NetworkClass4fromEm>
 80a2f2a:	6803      	ldr	r3, [r0, #0]
 80a2f2c:	68db      	ldr	r3, [r3, #12]
 80a2f2e:	4798      	blx	r3
 80a2f30:	b1f8      	cbz	r0, 80a2f72 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a2f32:	4628      	mov	r0, r5
 80a2f34:	f001 fbd4 	bl	80a46e0 <strlen>
 80a2f38:	2400      	movs	r4, #0
 80a2f3a:	b281      	uxth	r1, r0
 80a2f3c:	9400      	str	r4, [sp, #0]
 80a2f3e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a2f40:	aa03      	add	r2, sp, #12
 80a2f42:	4628      	mov	r0, r5
 80a2f44:	f7ff fb4e 	bl	80a25e4 <inet_gethostbyname>
 80a2f48:	b990      	cbnz	r0, 80a2f70 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a2f4a:	a903      	add	r1, sp, #12
 80a2f4c:	a808      	add	r0, sp, #32
 80a2f4e:	f7ff fc97 	bl	80a2880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a2f52:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2f54:	ac0f      	add	r4, sp, #60	; 0x3c
 80a2f56:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a2f58:	4b07      	ldr	r3, [pc, #28]	; (80a2f78 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a2f5a:	ad09      	add	r5, sp, #36	; 0x24
 80a2f5c:	930e      	str	r3, [sp, #56]	; 0x38
 80a2f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2f62:	682b      	ldr	r3, [r5, #0]
 80a2f64:	4642      	mov	r2, r8
 80a2f66:	7023      	strb	r3, [r4, #0]
 80a2f68:	a90e      	add	r1, sp, #56	; 0x38
 80a2f6a:	4630      	mov	r0, r6
 80a2f6c:	47b8      	blx	r7
 80a2f6e:	e000      	b.n	80a2f72 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a2f70:	4620      	mov	r0, r4
}
 80a2f72:	b014      	add	sp, #80	; 0x50
 80a2f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2f78:	080a48a4 	.word	0x080a48a4

080a2f7c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a2f7c:	b570      	push	{r4, r5, r6, lr}
 80a2f7e:	4604      	mov	r4, r0
 80a2f80:	4606      	mov	r6, r0
 80a2f82:	4b05      	ldr	r3, [pc, #20]	; (80a2f98 <_ZN3UDP8remoteIPEv+0x1c>)
 80a2f84:	f101 0520 	add.w	r5, r1, #32
 80a2f88:	f844 3b04 	str.w	r3, [r4], #4
 80a2f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2f90:	682b      	ldr	r3, [r5, #0]
 80a2f92:	4630      	mov	r0, r6
 80a2f94:	7023      	strb	r3, [r4, #0]
 80a2f96:	bd70      	pop	{r4, r5, r6, pc}
 80a2f98:	080a48a4 	.word	0x080a48a4

080a2f9c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2f9e:	4694      	mov	ip, r2
 80a2fa0:	468e      	mov	lr, r1
 80a2fa2:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2fa4:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2fa6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2fa8:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a2faa:	4a09      	ldr	r2, [pc, #36]	; (80a2fd0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a2fac:	ac03      	add	r4, sp, #12
 80a2fae:	1d1d      	adds	r5, r3, #4
 80a2fb0:	9202      	str	r2, [sp, #8]
 80a2fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2fb6:	682b      	ldr	r3, [r5, #0]
 80a2fb8:	4662      	mov	r2, ip
 80a2fba:	7023      	strb	r3, [r4, #0]
 80a2fbc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a2fc0:	4671      	mov	r1, lr
 80a2fc2:	9300      	str	r3, [sp, #0]
 80a2fc4:	4630      	mov	r0, r6
 80a2fc6:	ab02      	add	r3, sp, #8
 80a2fc8:	47b8      	blx	r7
    }
 80a2fca:	b009      	add	sp, #36	; 0x24
 80a2fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2fce:	bf00      	nop
 80a2fd0:	080a48a4 	.word	0x080a48a4

080a2fd4 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2fd6:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2fd8:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2fda:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2fdc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a2fde:	4b0d      	ldr	r3, [pc, #52]	; (80a3014 <_ZN3UDP9endPacketEv+0x40>)
 80a2fe0:	ad03      	add	r5, sp, #12
 80a2fe2:	f100 0620 	add.w	r6, r0, #32
 80a2fe6:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a2fea:	9302      	str	r3, [sp, #8]
 80a2fec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a2fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2ff0:	6833      	ldr	r3, [r6, #0]
 80a2ff2:	4672      	mov	r2, lr
 80a2ff4:	702b      	strb	r3, [r5, #0]
 80a2ff6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a2ff8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2ffa:	9300      	str	r3, [sp, #0]
 80a2ffc:	4620      	mov	r0, r4
 80a2ffe:	ab02      	add	r3, sp, #8
 80a3000:	47b8      	blx	r7
 80a3002:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a3004:	6823      	ldr	r3, [r4, #0]
 80a3006:	4620      	mov	r0, r4
 80a3008:	69db      	ldr	r3, [r3, #28]
 80a300a:	4798      	blx	r3
    return result;
}
 80a300c:	4628      	mov	r0, r5
 80a300e:	b009      	add	sp, #36	; 0x24
 80a3010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3012:	bf00      	nop
 80a3014:	080a48a4 	.word	0x080a48a4

080a3018 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a3018:	b538      	push	{r3, r4, r5, lr}
 80a301a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a301e:	6083      	str	r3, [r0, #8]
 80a3020:	4b0b      	ldr	r3, [pc, #44]	; (80a3050 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3022:	2500      	movs	r5, #0
 80a3024:	f103 0208 	add.w	r2, r3, #8
 80a3028:	336c      	adds	r3, #108	; 0x6c
 80a302a:	6002      	str	r2, [r0, #0]
 80a302c:	6103      	str	r3, [r0, #16]
 80a302e:	6045      	str	r5, [r0, #4]
 80a3030:	4604      	mov	r4, r0
 80a3032:	f7ff fa0f 	bl	80a2454 <socket_handle_invalid>
 80a3036:	6160      	str	r0, [r4, #20]
 80a3038:	f104 001c 	add.w	r0, r4, #28
 80a303c:	f7ff fc12 	bl	80a2864 <_ZN9IPAddressC1Ev>
 80a3040:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a3044:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a3046:	8725      	strh	r5, [r4, #56]	; 0x38
 80a3048:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a304a:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a304c:	4620      	mov	r0, r4
 80a304e:	bd38      	pop	{r3, r4, r5, pc}
 80a3050:	080a4a0c 	.word	0x080a4a0c

080a3054 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a3054:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a3056:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a305a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a305c:	b123      	cbz	r3, 80a3068 <_ZN3UDP13releaseBufferEv+0x14>
 80a305e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a3060:	b110      	cbz	r0, 80a3068 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a3062:	2101      	movs	r1, #1
 80a3064:	f000 fb57 	bl	80a3716 <_ZdlPvj>
    }
    _buffer = NULL;
 80a3068:	2300      	movs	r3, #0
 80a306a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a306c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a3070:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a3072:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a3074:	8723      	strh	r3, [r4, #56]	; 0x38
 80a3076:	bd10      	pop	{r4, pc}

080a3078 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a3078:	b570      	push	{r4, r5, r6, lr}
 80a307a:	4604      	mov	r4, r0
 80a307c:	4616      	mov	r6, r2
 80a307e:	460d      	mov	r5, r1
    releaseBuffer();
 80a3080:	f7ff ffe8 	bl	80a3054 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a3084:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a3086:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a3088:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a308a:	b93e      	cbnz	r6, 80a309c <_ZN3UDP9setBufferEjPh+0x24>
 80a308c:	b135      	cbz	r5, 80a309c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a308e:	4628      	mov	r0, r5
 80a3090:	f7fd f803 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a3094:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a3096:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a3098:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a309c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a309e:	b103      	cbz	r3, 80a30a2 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a30a0:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a30a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a30a4:	3000      	adds	r0, #0
 80a30a6:	bf18      	it	ne
 80a30a8:	2001      	movne	r0, #1
 80a30aa:	bd70      	pop	{r4, r5, r6, pc}

080a30ac <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a30ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a30ae:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a30b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a30b2:	4605      	mov	r5, r0
 80a30b4:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a30b6:	b91a      	cbnz	r2, 80a30c0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a30b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a30ba:	b109      	cbz	r1, 80a30c0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a30bc:	f7ff ffdc 	bl	80a3078 <_ZN3UDP9setBufferEjPh>
 80a30c0:	f105 0620 	add.w	r6, r5, #32
 80a30c4:	3404      	adds	r4, #4
 80a30c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a30c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a30ca:	6823      	ldr	r3, [r4, #0]
 80a30cc:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a30ce:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a30d0:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a30d2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a30d4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a30d6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a30d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a30da <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a30da:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a30dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a30de:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a30e0:	b91a      	cbnz	r2, 80a30ea <_ZN3UDP11parsePacketEm+0x10>
 80a30e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a30e4:	b109      	cbz	r1, 80a30ea <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a30e6:	f7ff ffc7 	bl	80a3078 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a30ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a30ec:	2300      	movs	r3, #0
 80a30ee:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a30f0:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a30f2:	b141      	cbz	r1, 80a3106 <_ZN3UDP11parsePacketEm+0x2c>
 80a30f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a30f6:	b132      	cbz	r2, 80a3106 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a30f8:	6820      	ldr	r0, [r4, #0]
 80a30fa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a30fc:	4620      	mov	r0, r4
 80a30fe:	47a8      	blx	r5
        if (result>0) {
 80a3100:	2800      	cmp	r0, #0
            _total = result;
 80a3102:	bfc8      	it	gt
 80a3104:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a3106:	6823      	ldr	r3, [r4, #0]
 80a3108:	4620      	mov	r0, r4
}
 80a310a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a310e:	691b      	ldr	r3, [r3, #16]
 80a3110:	4718      	bx	r3

080a3112 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3112:	4770      	bx	lr

080a3114 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3114:	7441      	strb	r1, [r0, #17]
 80a3116:	4770      	bx	lr

080a3118 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a3118:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a311a:	7c00      	ldrb	r0, [r0, #16]
 80a311c:	f7ff fa1a 	bl	80a2554 <HAL_USART_Available_Data_For_Write>
}
 80a3120:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3124:	bd08      	pop	{r3, pc}

080a3126 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3126:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3128:	7c00      	ldrb	r0, [r0, #16]
 80a312a:	f7ff f9eb 	bl	80a2504 <HAL_USART_Available_Data>
}
 80a312e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3132:	bd08      	pop	{r3, pc}

080a3134 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3134:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3136:	7c00      	ldrb	r0, [r0, #16]
 80a3138:	f7ff f9f4 	bl	80a2524 <HAL_USART_Peek_Data>
}
 80a313c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3140:	bf28      	it	cs
 80a3142:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3146:	bd08      	pop	{r3, pc}

080a3148 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3148:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a314a:	7c00      	ldrb	r0, [r0, #16]
 80a314c:	f7ff f9e2 	bl	80a2514 <HAL_USART_Read_Data>
}
 80a3150:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3154:	bf28      	it	cs
 80a3156:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a315a:	bd08      	pop	{r3, pc}

080a315c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a315c:	7c00      	ldrb	r0, [r0, #16]
 80a315e:	f7ff b9e9 	b.w	80a2534 <HAL_USART_Flush_Data>

080a3162 <_ZN11USARTSerialD0Ev>:
 80a3162:	b510      	push	{r4, lr}
 80a3164:	4604      	mov	r4, r0
 80a3166:	2114      	movs	r1, #20
 80a3168:	f000 fad5 	bl	80a3716 <_ZdlPvj>
 80a316c:	4620      	mov	r0, r4
 80a316e:	bd10      	pop	{r4, pc}

080a3170 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3170:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3172:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3174:	4604      	mov	r4, r0
 80a3176:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3178:	b925      	cbnz	r5, 80a3184 <_ZN11USARTSerial5writeEh+0x14>
 80a317a:	7c00      	ldrb	r0, [r0, #16]
 80a317c:	f7ff f9ea 	bl	80a2554 <HAL_USART_Available_Data_For_Write>
 80a3180:	2800      	cmp	r0, #0
 80a3182:	dd05      	ble.n	80a3190 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3184:	4631      	mov	r1, r6
 80a3186:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a318c:	f7ff b9b2 	b.w	80a24f4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3190:	4628      	mov	r0, r5
 80a3192:	bd70      	pop	{r4, r5, r6, pc}

080a3194 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3194:	b510      	push	{r4, lr}
 80a3196:	4604      	mov	r4, r0
 80a3198:	4608      	mov	r0, r1
 80a319a:	4611      	mov	r1, r2
 80a319c:	2200      	movs	r2, #0
 80a319e:	6062      	str	r2, [r4, #4]
 80a31a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a31a4:	60a2      	str	r2, [r4, #8]
 80a31a6:	4a05      	ldr	r2, [pc, #20]	; (80a31bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a31a8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a31aa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a31ac:	2201      	movs	r2, #1
 80a31ae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a31b0:	461a      	mov	r2, r3
 80a31b2:	f7ff f997 	bl	80a24e4 <HAL_USART_Init>
}
 80a31b6:	4620      	mov	r0, r4
 80a31b8:	bd10      	pop	{r4, pc}
 80a31ba:	bf00      	nop
 80a31bc:	080a4a84 	.word	0x080a4a84

080a31c0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a31c0:	7c00      	ldrb	r0, [r0, #16]
 80a31c2:	f7ff b9bf 	b.w	80a2544 <HAL_USART_Is_Enabled>
	...

080a31c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a31c8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a31ca:	4d0c      	ldr	r5, [pc, #48]	; (80a31fc <_Z22__fetch_global_Serial1v+0x34>)
 80a31cc:	6829      	ldr	r1, [r5, #0]
 80a31ce:	f011 0401 	ands.w	r4, r1, #1
 80a31d2:	d111      	bne.n	80a31f8 <_Z22__fetch_global_Serial1v+0x30>
 80a31d4:	4628      	mov	r0, r5
 80a31d6:	f7fc ff64 	bl	80a00a2 <__cxa_guard_acquire>
 80a31da:	b168      	cbz	r0, 80a31f8 <_Z22__fetch_global_Serial1v+0x30>
 80a31dc:	4a08      	ldr	r2, [pc, #32]	; (80a3200 <_Z22__fetch_global_Serial1v+0x38>)
 80a31de:	4621      	mov	r1, r4
 80a31e0:	4b08      	ldr	r3, [pc, #32]	; (80a3204 <_Z22__fetch_global_Serial1v+0x3c>)
 80a31e2:	4809      	ldr	r0, [pc, #36]	; (80a3208 <_Z22__fetch_global_Serial1v+0x40>)
 80a31e4:	f7ff ffd6 	bl	80a3194 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a31e8:	4628      	mov	r0, r5
 80a31ea:	f7fc ff5f 	bl	80a00ac <__cxa_guard_release>
 80a31ee:	4a07      	ldr	r2, [pc, #28]	; (80a320c <_Z22__fetch_global_Serial1v+0x44>)
 80a31f0:	4907      	ldr	r1, [pc, #28]	; (80a3210 <_Z22__fetch_global_Serial1v+0x48>)
 80a31f2:	4805      	ldr	r0, [pc, #20]	; (80a3208 <_Z22__fetch_global_Serial1v+0x40>)
 80a31f4:	f000 fa8a 	bl	80a370c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a31f8:	4803      	ldr	r0, [pc, #12]	; (80a3208 <_Z22__fetch_global_Serial1v+0x40>)
 80a31fa:	bd38      	pop	{r3, r4, r5, pc}
 80a31fc:	20000294 	.word	0x20000294
 80a3200:	20000298 	.word	0x20000298
 80a3204:	20000210 	.word	0x20000210
 80a3208:	200001fc 	.word	0x200001fc
 80a320c:	20000080 	.word	0x20000080
 80a3210:	080a3113 	.word	0x080a3113

080a3214 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3214:	7441      	strb	r1, [r0, #17]
 80a3216:	4770      	bx	lr

080a3218 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3218:	4770      	bx	lr

080a321a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a321a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a321c:	2100      	movs	r1, #0
 80a321e:	7c00      	ldrb	r0, [r0, #16]
 80a3220:	f7ff f9c0 	bl	80a25a4 <HAL_USB_USART_Receive_Data>
}
 80a3224:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3228:	bf28      	it	cs
 80a322a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a322e:	bd08      	pop	{r3, pc}

080a3230 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3230:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3232:	2101      	movs	r1, #1
 80a3234:	7c00      	ldrb	r0, [r0, #16]
 80a3236:	f7ff f9b5 	bl	80a25a4 <HAL_USB_USART_Receive_Data>
}
 80a323a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a323e:	bf28      	it	cs
 80a3240:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3244:	bd08      	pop	{r3, pc}

080a3246 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3246:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3248:	7c00      	ldrb	r0, [r0, #16]
 80a324a:	f7ff f9a3 	bl	80a2594 <HAL_USB_USART_Available_Data_For_Write>
}
 80a324e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3252:	bd08      	pop	{r3, pc}

080a3254 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3254:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3256:	7c00      	ldrb	r0, [r0, #16]
 80a3258:	f7ff f994 	bl	80a2584 <HAL_USB_USART_Available_Data>
}
 80a325c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3260:	bd08      	pop	{r3, pc}

080a3262 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3262:	7c00      	ldrb	r0, [r0, #16]
 80a3264:	f7ff b9ae 	b.w	80a25c4 <HAL_USB_USART_Flush_Data>

080a3268 <_ZN9USBSerialD0Ev>:
 80a3268:	b510      	push	{r4, lr}
 80a326a:	4604      	mov	r4, r0
 80a326c:	2114      	movs	r1, #20
 80a326e:	f000 fa52 	bl	80a3716 <_ZdlPvj>
 80a3272:	4620      	mov	r0, r4
 80a3274:	bd10      	pop	{r4, pc}

080a3276 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3276:	b538      	push	{r3, r4, r5, lr}
 80a3278:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a327a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a327c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a327e:	f7ff f989 	bl	80a2594 <HAL_USB_USART_Available_Data_For_Write>
 80a3282:	2800      	cmp	r0, #0
 80a3284:	dc01      	bgt.n	80a328a <_ZN9USBSerial5writeEh+0x14>
 80a3286:	7c60      	ldrb	r0, [r4, #17]
 80a3288:	b128      	cbz	r0, 80a3296 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a328a:	4629      	mov	r1, r5
 80a328c:	7c20      	ldrb	r0, [r4, #16]
 80a328e:	f7ff f991 	bl	80a25b4 <HAL_USB_USART_Send_Data>
 80a3292:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3296:	bd38      	pop	{r3, r4, r5, pc}

080a3298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3298:	b510      	push	{r4, lr}
 80a329a:	4604      	mov	r4, r0
 80a329c:	2300      	movs	r3, #0
 80a329e:	6063      	str	r3, [r4, #4]
 80a32a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a32a4:	60a3      	str	r3, [r4, #8]
 80a32a6:	4b05      	ldr	r3, [pc, #20]	; (80a32bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a32a8:	4608      	mov	r0, r1
 80a32aa:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a32ac:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a32ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a32b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a32b2:	4611      	mov	r1, r2
 80a32b4:	f7ff f956 	bl	80a2564 <HAL_USB_USART_Init>
}
 80a32b8:	4620      	mov	r0, r4
 80a32ba:	bd10      	pop	{r4, pc}
 80a32bc:	080a4ab4 	.word	0x080a4ab4

080a32c0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a32c0:	2200      	movs	r2, #0
 80a32c2:	7c00      	ldrb	r0, [r0, #16]
 80a32c4:	f7ff b956 	b.w	80a2574 <HAL_USB_USART_Begin>

080a32c8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a32c8:	7c00      	ldrb	r0, [r0, #16]
 80a32ca:	f7ff b983 	b.w	80a25d4 <HAL_USB_USART_Is_Enabled>

080a32ce <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a32ce:	f7ff bffb 	b.w	80a32c8 <_ZN9USBSerial9isEnabledEv>
	...

080a32d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a32d4:	b510      	push	{r4, lr}
 80a32d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a32d8:	2214      	movs	r2, #20
 80a32da:	2100      	movs	r1, #0
 80a32dc:	f001 f9cf 	bl	80a467e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a32e0:	4b05      	ldr	r3, [pc, #20]	; (80a32f8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a32e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a32e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a32e6:	4b05      	ldr	r3, [pc, #20]	; (80a32fc <_Z19acquireSerialBufferv+0x28>)
 80a32e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a32ea:	f240 1301 	movw	r3, #257	; 0x101
 80a32ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a32f0:	2381      	movs	r3, #129	; 0x81
 80a32f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a32f4:	bd10      	pop	{r4, pc}
 80a32f6:	bf00      	nop
 80a32f8:	200003a1 	.word	0x200003a1
 80a32fc:	20000320 	.word	0x20000320

080a3300 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3300:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3302:	4d0e      	ldr	r5, [pc, #56]	; (80a333c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3304:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3306:	a801      	add	r0, sp, #4
 80a3308:	f7ff ffe4 	bl	80a32d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a330c:	6829      	ldr	r1, [r5, #0]
 80a330e:	f011 0401 	ands.w	r4, r1, #1
 80a3312:	d110      	bne.n	80a3336 <_Z16_fetch_usbserialv+0x36>
 80a3314:	4628      	mov	r0, r5
 80a3316:	f7fc fec4 	bl	80a00a2 <__cxa_guard_acquire>
 80a331a:	b160      	cbz	r0, 80a3336 <_Z16_fetch_usbserialv+0x36>
 80a331c:	aa01      	add	r2, sp, #4
 80a331e:	4621      	mov	r1, r4
 80a3320:	4807      	ldr	r0, [pc, #28]	; (80a3340 <_Z16_fetch_usbserialv+0x40>)
 80a3322:	f7ff ffb9 	bl	80a3298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3326:	4628      	mov	r0, r5
 80a3328:	f7fc fec0 	bl	80a00ac <__cxa_guard_release>
 80a332c:	4a05      	ldr	r2, [pc, #20]	; (80a3344 <_Z16_fetch_usbserialv+0x44>)
 80a332e:	4906      	ldr	r1, [pc, #24]	; (80a3348 <_Z16_fetch_usbserialv+0x48>)
 80a3330:	4803      	ldr	r0, [pc, #12]	; (80a3340 <_Z16_fetch_usbserialv+0x40>)
 80a3332:	f000 f9eb 	bl	80a370c <__aeabi_atexit>
	return _usbserial;
}
 80a3336:	4802      	ldr	r0, [pc, #8]	; (80a3340 <_Z16_fetch_usbserialv+0x40>)
 80a3338:	b007      	add	sp, #28
 80a333a:	bd30      	pop	{r4, r5, pc}
 80a333c:	2000031c 	.word	0x2000031c
 80a3340:	200004a4 	.word	0x200004a4
 80a3344:	20000080 	.word	0x20000080
 80a3348:	080a3219 	.word	0x080a3219

080a334c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a334c:	b510      	push	{r4, lr}
 80a334e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3350:	2214      	movs	r2, #20
 80a3352:	2100      	movs	r1, #0
 80a3354:	f001 f993 	bl	80a467e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3358:	4b05      	ldr	r3, [pc, #20]	; (80a3370 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a335a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a335c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a335e:	4b05      	ldr	r3, [pc, #20]	; (80a3374 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3360:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3362:	f240 1301 	movw	r3, #257	; 0x101
 80a3366:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3368:	2381      	movs	r3, #129	; 0x81
 80a336a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a336c:	bd10      	pop	{r4, pc}
 80a336e:	bf00      	nop
 80a3370:	20000554 	.word	0x20000554
 80a3374:	200004bc 	.word	0x200004bc

080a3378 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3378:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a337a:	4c0e      	ldr	r4, [pc, #56]	; (80a33b4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a337c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a337e:	a801      	add	r0, sp, #4
 80a3380:	f7ff ffe4 	bl	80a334c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3384:	6823      	ldr	r3, [r4, #0]
 80a3386:	07db      	lsls	r3, r3, #31
 80a3388:	d410      	bmi.n	80a33ac <_Z17_fetch_usbserial1v+0x34>
 80a338a:	4620      	mov	r0, r4
 80a338c:	f7fc fe89 	bl	80a00a2 <__cxa_guard_acquire>
 80a3390:	b160      	cbz	r0, 80a33ac <_Z17_fetch_usbserial1v+0x34>
 80a3392:	aa01      	add	r2, sp, #4
 80a3394:	2101      	movs	r1, #1
 80a3396:	4808      	ldr	r0, [pc, #32]	; (80a33b8 <_Z17_fetch_usbserial1v+0x40>)
 80a3398:	f7ff ff7e 	bl	80a3298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a339c:	4620      	mov	r0, r4
 80a339e:	f7fc fe85 	bl	80a00ac <__cxa_guard_release>
 80a33a2:	4a06      	ldr	r2, [pc, #24]	; (80a33bc <_Z17_fetch_usbserial1v+0x44>)
 80a33a4:	4906      	ldr	r1, [pc, #24]	; (80a33c0 <_Z17_fetch_usbserial1v+0x48>)
 80a33a6:	4804      	ldr	r0, [pc, #16]	; (80a33b8 <_Z17_fetch_usbserial1v+0x40>)
 80a33a8:	f000 f9b0 	bl	80a370c <__aeabi_atexit>
  return _usbserial1;
}
 80a33ac:	4802      	ldr	r0, [pc, #8]	; (80a33b8 <_Z17_fetch_usbserial1v+0x40>)
 80a33ae:	b006      	add	sp, #24
 80a33b0:	bd10      	pop	{r4, pc}
 80a33b2:	bf00      	nop
 80a33b4:	200004b8 	.word	0x200004b8
 80a33b8:	20000540 	.word	0x20000540
 80a33bc:	20000080 	.word	0x20000080
 80a33c0:	080a3219 	.word	0x080a3219

080a33c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a33c4:	2200      	movs	r2, #0
 80a33c6:	4611      	mov	r1, r2
 80a33c8:	6840      	ldr	r0, [r0, #4]
 80a33ca:	f7ff b967 	b.w	80a269c <network_ready>

080a33ce <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a33ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a33d0:	4616      	mov	r6, r2
 80a33d2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a33d4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a33d6:	460f      	mov	r7, r1
 80a33d8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a33da:	2100      	movs	r1, #0
 80a33dc:	a803      	add	r0, sp, #12
 80a33de:	f001 f94e 	bl	80a467e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a33e2:	4630      	mov	r0, r6
 80a33e4:	f001 f97c 	bl	80a46e0 <strlen>
 80a33e8:	2500      	movs	r5, #0
 80a33ea:	9500      	str	r5, [sp, #0]
 80a33ec:	b281      	uxth	r1, r0
 80a33ee:	687b      	ldr	r3, [r7, #4]
 80a33f0:	aa03      	add	r2, sp, #12
 80a33f2:	4630      	mov	r0, r6
 80a33f4:	f7ff f8f6 	bl	80a25e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a33f8:	b120      	cbz	r0, 80a3404 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a33fa:	4629      	mov	r1, r5
 80a33fc:	4620      	mov	r0, r4
 80a33fe:	f7ff fa51 	bl	80a28a4 <_ZN9IPAddressC1Em>
 80a3402:	e003      	b.n	80a340c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3404:	a903      	add	r1, sp, #12
 80a3406:	4620      	mov	r0, r4
 80a3408:	f7ff fa3a 	bl	80a2880 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a340c:	4620      	mov	r0, r4
 80a340e:	b009      	add	sp, #36	; 0x24
 80a3410:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3412 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3412:	2200      	movs	r2, #0
 80a3414:	4611      	mov	r1, r2
 80a3416:	6840      	ldr	r0, [r0, #4]
 80a3418:	f7ff b960 	b.w	80a26dc <network_listening>

080a341c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a341c:	2200      	movs	r2, #0
 80a341e:	4611      	mov	r1, r2
 80a3420:	6840      	ldr	r0, [r0, #4]
 80a3422:	f7ff b96b 	b.w	80a26fc <network_get_listen_timeout>

080a3426 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3426:	2200      	movs	r2, #0
 80a3428:	6840      	ldr	r0, [r0, #4]
 80a342a:	f7ff b95f 	b.w	80a26ec <network_set_listen_timeout>

080a342e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a342e:	2200      	movs	r2, #0
 80a3430:	f081 0101 	eor.w	r1, r1, #1
 80a3434:	6840      	ldr	r0, [r0, #4]
 80a3436:	f7ff b949 	b.w	80a26cc <network_listen>

080a343a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a343a:	2300      	movs	r3, #0
 80a343c:	461a      	mov	r2, r3
 80a343e:	4619      	mov	r1, r3
 80a3440:	6840      	ldr	r0, [r0, #4]
 80a3442:	f7ff b93b 	b.w	80a26bc <network_off>

080a3446 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3446:	2300      	movs	r3, #0
 80a3448:	461a      	mov	r2, r3
 80a344a:	4619      	mov	r1, r3
 80a344c:	6840      	ldr	r0, [r0, #4]
 80a344e:	f7ff b92d 	b.w	80a26ac <network_on>

080a3452 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3452:	2200      	movs	r2, #0
 80a3454:	4611      	mov	r1, r2
 80a3456:	6840      	ldr	r0, [r0, #4]
 80a3458:	f7ff b910 	b.w	80a267c <network_connecting>

080a345c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a345c:	2200      	movs	r2, #0
 80a345e:	2102      	movs	r1, #2
 80a3460:	6840      	ldr	r0, [r0, #4]
 80a3462:	f7ff b913 	b.w	80a268c <network_disconnect>

080a3466 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3466:	2300      	movs	r3, #0
 80a3468:	461a      	mov	r2, r3
 80a346a:	6840      	ldr	r0, [r0, #4]
 80a346c:	f7ff b8fe 	b.w	80a266c <network_connect>

080a3470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a3470:	4b02      	ldr	r3, [pc, #8]	; (80a347c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3472:	2204      	movs	r2, #4
 80a3474:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3476:	4a02      	ldr	r2, [pc, #8]	; (80a3480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3478:	601a      	str	r2, [r3, #0]
 80a347a:	4770      	bx	lr
 80a347c:	20000658 	.word	0x20000658
 80a3480:	080a4ae4 	.word	0x080a4ae4

080a3484 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3484:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3486:	4b14      	ldr	r3, [pc, #80]	; (80a34d8 <serialEventRun+0x54>)
 80a3488:	b133      	cbz	r3, 80a3498 <serialEventRun+0x14>
 80a348a:	f7ff ff39 	bl	80a3300 <_Z16_fetch_usbserialv>
 80a348e:	6803      	ldr	r3, [r0, #0]
 80a3490:	691b      	ldr	r3, [r3, #16]
 80a3492:	4798      	blx	r3
 80a3494:	2800      	cmp	r0, #0
 80a3496:	dc16      	bgt.n	80a34c6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3498:	4b10      	ldr	r3, [pc, #64]	; (80a34dc <serialEventRun+0x58>)
 80a349a:	b133      	cbz	r3, 80a34aa <serialEventRun+0x26>
 80a349c:	f7ff fe94 	bl	80a31c8 <_Z22__fetch_global_Serial1v>
 80a34a0:	6803      	ldr	r3, [r0, #0]
 80a34a2:	691b      	ldr	r3, [r3, #16]
 80a34a4:	4798      	blx	r3
 80a34a6:	2800      	cmp	r0, #0
 80a34a8:	dc10      	bgt.n	80a34cc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a34aa:	4b0d      	ldr	r3, [pc, #52]	; (80a34e0 <serialEventRun+0x5c>)
 80a34ac:	b10b      	cbz	r3, 80a34b2 <serialEventRun+0x2e>
 80a34ae:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a34b2:	4b0c      	ldr	r3, [pc, #48]	; (80a34e4 <serialEventRun+0x60>)
 80a34b4:	b17b      	cbz	r3, 80a34d6 <serialEventRun+0x52>
 80a34b6:	f7ff ff5f 	bl	80a3378 <_Z17_fetch_usbserial1v>
 80a34ba:	6803      	ldr	r3, [r0, #0]
 80a34bc:	691b      	ldr	r3, [r3, #16]
 80a34be:	4798      	blx	r3
 80a34c0:	2800      	cmp	r0, #0
 80a34c2:	dc06      	bgt.n	80a34d2 <serialEventRun+0x4e>
 80a34c4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a34c6:	f3af 8000 	nop.w
 80a34ca:	e7e5      	b.n	80a3498 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a34cc:	f3af 8000 	nop.w
 80a34d0:	e7eb      	b.n	80a34aa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a34d2:	f3af 8000 	nop.w
 80a34d6:	bd08      	pop	{r3, pc}
	...

080a34e8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a34e8:	b508      	push	{r3, lr}
	serialEventRun();
 80a34ea:	f7ff ffcb 	bl	80a3484 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a34ee:	f7fe ff07 	bl	80a2300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a34f2:	4b01      	ldr	r3, [pc, #4]	; (80a34f8 <_post_loop+0x10>)
 80a34f4:	6018      	str	r0, [r3, #0]
 80a34f6:	bd08      	pop	{r3, pc}
 80a34f8:	20000668 	.word	0x20000668

080a34fc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a34fc:	4802      	ldr	r0, [pc, #8]	; (80a3508 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a34fe:	4a03      	ldr	r2, [pc, #12]	; (80a350c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3500:	4903      	ldr	r1, [pc, #12]	; (80a3510 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3502:	1a12      	subs	r2, r2, r0
 80a3504:	f001 b8b0 	b.w	80a4668 <memcpy>
 80a3508:	40024000 	.word	0x40024000
 80a350c:	40024004 	.word	0x40024004
 80a3510:	080a4bc0 	.word	0x080a4bc0

080a3514 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3514:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3516:	2300      	movs	r3, #0
 80a3518:	9300      	str	r3, [sp, #0]
 80a351a:	461a      	mov	r2, r3
 80a351c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3520:	f7ff f88a 	bl	80a2638 <system_ctrl_set_result>
}
 80a3524:	b003      	add	sp, #12
 80a3526:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a352c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a352c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a352e:	8843      	ldrh	r3, [r0, #2]
 80a3530:	2b0a      	cmp	r3, #10
 80a3532:	d008      	beq.n	80a3546 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3534:	2b50      	cmp	r3, #80	; 0x50
 80a3536:	d109      	bne.n	80a354c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3538:	4b09      	ldr	r3, [pc, #36]	; (80a3560 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a353a:	681b      	ldr	r3, [r3, #0]
 80a353c:	b13b      	cbz	r3, 80a354e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a353e:	b003      	add	sp, #12
 80a3540:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3544:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3546:	f7ff ffe5 	bl	80a3514 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a354a:	e006      	b.n	80a355a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a354c:	2300      	movs	r3, #0
 80a354e:	9300      	str	r3, [sp, #0]
 80a3550:	461a      	mov	r2, r3
 80a3552:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3556:	f7ff f86f 	bl	80a2638 <system_ctrl_set_result>
        break;
    }
}
 80a355a:	b003      	add	sp, #12
 80a355c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3560:	20000660 	.word	0x20000660

080a3564 <module_user_init_hook>:

void module_user_init_hook()
{
 80a3564:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3566:	4c10      	ldr	r4, [pc, #64]	; (80a35a8 <module_user_init_hook+0x44>)
 80a3568:	4d10      	ldr	r5, [pc, #64]	; (80a35ac <module_user_init_hook+0x48>)
 80a356a:	6823      	ldr	r3, [r4, #0]
 80a356c:	42ab      	cmp	r3, r5
 80a356e:	4b10      	ldr	r3, [pc, #64]	; (80a35b0 <module_user_init_hook+0x4c>)
 80a3570:	bf0c      	ite	eq
 80a3572:	2201      	moveq	r2, #1
 80a3574:	2200      	movne	r2, #0
 80a3576:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3578:	d002      	beq.n	80a3580 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a357a:	f7ff ffbf 	bl	80a34fc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a357e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3580:	f7fe feae 	bl	80a22e0 <HAL_RNG_GetRandomNumber>
 80a3584:	4604      	mov	r4, r0
    srand(seed);
 80a3586:	f001 f883 	bl	80a4690 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a358a:	4b0a      	ldr	r3, [pc, #40]	; (80a35b4 <module_user_init_hook+0x50>)
 80a358c:	b113      	cbz	r3, 80a3594 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a358e:	4620      	mov	r0, r4
 80a3590:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3594:	2100      	movs	r1, #0
 80a3596:	4807      	ldr	r0, [pc, #28]	; (80a35b4 <module_user_init_hook+0x50>)
 80a3598:	f7ff f858 	bl	80a264c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a359c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a35a0:	2100      	movs	r1, #0
 80a35a2:	4805      	ldr	r0, [pc, #20]	; (80a35b8 <module_user_init_hook+0x54>)
 80a35a4:	f7ff b83e 	b.w	80a2624 <system_ctrl_set_app_request_handler>
 80a35a8:	40024000 	.word	0x40024000
 80a35ac:	9a271c1e 	.word	0x9a271c1e
 80a35b0:	20000664 	.word	0x20000664
 80a35b4:	00000000 	.word	0x00000000
 80a35b8:	080a352d 	.word	0x080a352d

080a35bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a35bc:	b510      	push	{r4, lr}
 80a35be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a35c0:	480f      	ldr	r0, [pc, #60]	; (80a3600 <pinAvailable+0x44>)
 80a35c2:	f7ff fb2f 	bl	80a2c24 <_ZN8SPIClass9isEnabledEv>
 80a35c6:	b128      	cbz	r0, 80a35d4 <pinAvailable+0x18>
 80a35c8:	f1a4 030d 	sub.w	r3, r4, #13
 80a35cc:	2b02      	cmp	r3, #2
 80a35ce:	d801      	bhi.n	80a35d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a35d0:	2000      	movs	r0, #0
 80a35d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a35d4:	f000 f840 	bl	80a3658 <_Z19__fetch_global_Wirev>
 80a35d8:	f7ff f927 	bl	80a282a <_ZN7TwoWire9isEnabledEv>
 80a35dc:	b108      	cbz	r0, 80a35e2 <pinAvailable+0x26>
 80a35de:	2c01      	cmp	r4, #1
 80a35e0:	d9f6      	bls.n	80a35d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a35e2:	f7ff fdf1 	bl	80a31c8 <_Z22__fetch_global_Serial1v>
 80a35e6:	f7ff fdeb 	bl	80a31c0 <_ZN11USARTSerial9isEnabledEv>
 80a35ea:	b118      	cbz	r0, 80a35f4 <pinAvailable+0x38>
 80a35ec:	f1a4 0312 	sub.w	r3, r4, #18
 80a35f0:	2b01      	cmp	r3, #1
 80a35f2:	d9ed      	bls.n	80a35d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a35f4:	2c17      	cmp	r4, #23
 80a35f6:	bf8c      	ite	hi
 80a35f8:	2000      	movhi	r0, #0
 80a35fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a35fc:	bd10      	pop	{r4, pc}
 80a35fe:	bf00      	nop
 80a3600:	2000069c 	.word	0x2000069c

080a3604 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3604:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3606:	b538      	push	{r3, r4, r5, lr}
 80a3608:	4604      	mov	r4, r0
 80a360a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a360c:	d80a      	bhi.n	80a3624 <pinMode+0x20>
 80a360e:	29ff      	cmp	r1, #255	; 0xff
 80a3610:	d008      	beq.n	80a3624 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3612:	f7ff ffd3 	bl	80a35bc <pinAvailable>
 80a3616:	b128      	cbz	r0, 80a3624 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3618:	4629      	mov	r1, r5
 80a361a:	4620      	mov	r0, r4
}
 80a361c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3620:	f7fe be7e 	b.w	80a2320 <HAL_Pin_Mode>
 80a3624:	bd38      	pop	{r3, r4, r5, pc}

080a3626 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3626:	b538      	push	{r3, r4, r5, lr}
 80a3628:	4604      	mov	r4, r0
 80a362a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a362c:	f7fe fe80 	bl	80a2330 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3630:	28ff      	cmp	r0, #255	; 0xff
 80a3632:	d010      	beq.n	80a3656 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3634:	2806      	cmp	r0, #6
 80a3636:	d804      	bhi.n	80a3642 <digitalWrite+0x1c>
 80a3638:	234d      	movs	r3, #77	; 0x4d
 80a363a:	fa23 f000 	lsr.w	r0, r3, r0
 80a363e:	07c3      	lsls	r3, r0, #31
 80a3640:	d409      	bmi.n	80a3656 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3642:	4620      	mov	r0, r4
 80a3644:	f7ff ffba 	bl	80a35bc <pinAvailable>
 80a3648:	b128      	cbz	r0, 80a3656 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a364a:	4629      	mov	r1, r5
 80a364c:	4620      	mov	r0, r4
}
 80a364e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3652:	f7fe be75 	b.w	80a2340 <HAL_GPIO_Write>
 80a3656:	bd38      	pop	{r3, r4, r5, pc}

080a3658 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3658:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a365a:	4d0b      	ldr	r5, [pc, #44]	; (80a3688 <_Z19__fetch_global_Wirev+0x30>)
 80a365c:	6829      	ldr	r1, [r5, #0]
 80a365e:	f011 0401 	ands.w	r4, r1, #1
 80a3662:	d10f      	bne.n	80a3684 <_Z19__fetch_global_Wirev+0x2c>
 80a3664:	4628      	mov	r0, r5
 80a3666:	f7fc fd1c 	bl	80a00a2 <__cxa_guard_acquire>
 80a366a:	b158      	cbz	r0, 80a3684 <_Z19__fetch_global_Wirev+0x2c>
 80a366c:	4621      	mov	r1, r4
 80a366e:	4807      	ldr	r0, [pc, #28]	; (80a368c <_Z19__fetch_global_Wirev+0x34>)
 80a3670:	f7ff f8ac 	bl	80a27cc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3674:	4628      	mov	r0, r5
 80a3676:	f7fc fd19 	bl	80a00ac <__cxa_guard_release>
 80a367a:	4a05      	ldr	r2, [pc, #20]	; (80a3690 <_Z19__fetch_global_Wirev+0x38>)
 80a367c:	4905      	ldr	r1, [pc, #20]	; (80a3694 <_Z19__fetch_global_Wirev+0x3c>)
 80a367e:	4803      	ldr	r0, [pc, #12]	; (80a368c <_Z19__fetch_global_Wirev+0x34>)
 80a3680:	f000 f844 	bl	80a370c <__aeabi_atexit>
	return wire;
}
 80a3684:	4801      	ldr	r0, [pc, #4]	; (80a368c <_Z19__fetch_global_Wirev+0x34>)
 80a3686:	bd38      	pop	{r3, r4, r5, pc}
 80a3688:	2000066c 	.word	0x2000066c
 80a368c:	20000670 	.word	0x20000670
 80a3690:	20000080 	.word	0x20000080
 80a3694:	080a2775 	.word	0x080a2775

080a3698 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3698:	b513      	push	{r0, r1, r4, lr}
 80a369a:	4c08      	ldr	r4, [pc, #32]	; (80a36bc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a369c:	2300      	movs	r3, #0
 80a369e:	461a      	mov	r2, r3
 80a36a0:	4619      	mov	r1, r3
 80a36a2:	9300      	str	r3, [sp, #0]
 80a36a4:	4620      	mov	r0, r4
 80a36a6:	f7ff f913 	bl	80a28d0 <_ZN9IPAddressC1Ehhhh>
 80a36aa:	4620      	mov	r0, r4
 80a36ac:	4a04      	ldr	r2, [pc, #16]	; (80a36c0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a36ae:	4905      	ldr	r1, [pc, #20]	; (80a36c4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a36b0:	b002      	add	sp, #8
 80a36b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a36b6:	f000 b829 	b.w	80a370c <__aeabi_atexit>
 80a36ba:	bf00      	nop
 80a36bc:	20000684 	.word	0x20000684
 80a36c0:	20000080 	.word	0x20000080
 80a36c4:	080a00b3 	.word	0x080a00b3

080a36c8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a36c8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a36ca:	4c0c      	ldr	r4, [pc, #48]	; (80a36fc <_GLOBAL__sub_I_SPI+0x34>)
 80a36cc:	4e0c      	ldr	r6, [pc, #48]	; (80a3700 <_GLOBAL__sub_I_SPI+0x38>)
 80a36ce:	4d0d      	ldr	r5, [pc, #52]	; (80a3704 <_GLOBAL__sub_I_SPI+0x3c>)
 80a36d0:	2100      	movs	r1, #0
 80a36d2:	4620      	mov	r0, r4
 80a36d4:	f7ff fa26 	bl	80a2b24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a36d8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a36da:	4c0b      	ldr	r4, [pc, #44]	; (80a3708 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a36dc:	4632      	mov	r2, r6
 80a36de:	4629      	mov	r1, r5
 80a36e0:	f000 f814 	bl	80a370c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a36e4:	2101      	movs	r1, #1
 80a36e6:	4620      	mov	r0, r4
 80a36e8:	f7ff fa1c 	bl	80a2b24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a36ec:	4632      	mov	r2, r6
 80a36ee:	4629      	mov	r1, r5
 80a36f0:	4620      	mov	r0, r4
 80a36f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a36f6:	f000 b809 	b.w	80a370c <__aeabi_atexit>
 80a36fa:	bf00      	nop
 80a36fc:	2000069c 	.word	0x2000069c
 80a3700:	20000080 	.word	0x20000080
 80a3704:	080a2b15 	.word	0x080a2b15
 80a3708:	200006ac 	.word	0x200006ac

080a370c <__aeabi_atexit>:
 80a370c:	460b      	mov	r3, r1
 80a370e:	4601      	mov	r1, r0
 80a3710:	4618      	mov	r0, r3
 80a3712:	f000 bf9b 	b.w	80a464c <__cxa_atexit>

080a3716 <_ZdlPvj>:
 80a3716:	f7fc bcc2 	b.w	80a009e <_ZdlPv>
	...

080a371c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a371c:	4b24      	ldr	r3, [pc, #144]	; (80a37b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a371e:	681a      	ldr	r2, [r3, #0]
 80a3720:	07d0      	lsls	r0, r2, #31
 80a3722:	bf5c      	itt	pl
 80a3724:	2201      	movpl	r2, #1
 80a3726:	601a      	strpl	r2, [r3, #0]
 80a3728:	4b22      	ldr	r3, [pc, #136]	; (80a37b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a372a:	681a      	ldr	r2, [r3, #0]
 80a372c:	07d1      	lsls	r1, r2, #31
 80a372e:	bf5c      	itt	pl
 80a3730:	2201      	movpl	r2, #1
 80a3732:	601a      	strpl	r2, [r3, #0]
 80a3734:	4b20      	ldr	r3, [pc, #128]	; (80a37b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3736:	681a      	ldr	r2, [r3, #0]
 80a3738:	07d2      	lsls	r2, r2, #31
 80a373a:	bf5c      	itt	pl
 80a373c:	2201      	movpl	r2, #1
 80a373e:	601a      	strpl	r2, [r3, #0]
 80a3740:	4b1e      	ldr	r3, [pc, #120]	; (80a37bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3742:	681a      	ldr	r2, [r3, #0]
 80a3744:	07d0      	lsls	r0, r2, #31
 80a3746:	bf5c      	itt	pl
 80a3748:	2201      	movpl	r2, #1
 80a374a:	601a      	strpl	r2, [r3, #0]
 80a374c:	4b1c      	ldr	r3, [pc, #112]	; (80a37c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a374e:	681a      	ldr	r2, [r3, #0]
 80a3750:	07d1      	lsls	r1, r2, #31
 80a3752:	bf5c      	itt	pl
 80a3754:	2201      	movpl	r2, #1
 80a3756:	601a      	strpl	r2, [r3, #0]
 80a3758:	4b1a      	ldr	r3, [pc, #104]	; (80a37c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a375a:	681a      	ldr	r2, [r3, #0]
 80a375c:	07d2      	lsls	r2, r2, #31
 80a375e:	bf5c      	itt	pl
 80a3760:	2201      	movpl	r2, #1
 80a3762:	601a      	strpl	r2, [r3, #0]
 80a3764:	4b18      	ldr	r3, [pc, #96]	; (80a37c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3766:	681a      	ldr	r2, [r3, #0]
 80a3768:	07d0      	lsls	r0, r2, #31
 80a376a:	bf5c      	itt	pl
 80a376c:	2201      	movpl	r2, #1
 80a376e:	601a      	strpl	r2, [r3, #0]
 80a3770:	4b16      	ldr	r3, [pc, #88]	; (80a37cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3772:	681a      	ldr	r2, [r3, #0]
 80a3774:	07d1      	lsls	r1, r2, #31
 80a3776:	bf5c      	itt	pl
 80a3778:	2201      	movpl	r2, #1
 80a377a:	601a      	strpl	r2, [r3, #0]
 80a377c:	4b14      	ldr	r3, [pc, #80]	; (80a37d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a377e:	681a      	ldr	r2, [r3, #0]
 80a3780:	07d2      	lsls	r2, r2, #31
 80a3782:	bf5c      	itt	pl
 80a3784:	2201      	movpl	r2, #1
 80a3786:	601a      	strpl	r2, [r3, #0]
 80a3788:	4b12      	ldr	r3, [pc, #72]	; (80a37d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a378a:	681a      	ldr	r2, [r3, #0]
 80a378c:	07d0      	lsls	r0, r2, #31
 80a378e:	bf5c      	itt	pl
 80a3790:	2201      	movpl	r2, #1
 80a3792:	601a      	strpl	r2, [r3, #0]
 80a3794:	4b10      	ldr	r3, [pc, #64]	; (80a37d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3796:	681a      	ldr	r2, [r3, #0]
 80a3798:	07d1      	lsls	r1, r2, #31
 80a379a:	bf5c      	itt	pl
 80a379c:	2201      	movpl	r2, #1
 80a379e:	601a      	strpl	r2, [r3, #0]
 80a37a0:	4b0e      	ldr	r3, [pc, #56]	; (80a37dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a37a2:	681a      	ldr	r2, [r3, #0]
 80a37a4:	07d2      	lsls	r2, r2, #31
 80a37a6:	bf5c      	itt	pl
 80a37a8:	2201      	movpl	r2, #1
 80a37aa:	601a      	strpl	r2, [r3, #0]
 80a37ac:	4770      	bx	lr
 80a37ae:	bf00      	nop
 80a37b0:	200006e8 	.word	0x200006e8
 80a37b4:	200006e4 	.word	0x200006e4
 80a37b8:	200006e0 	.word	0x200006e0
 80a37bc:	200006dc 	.word	0x200006dc
 80a37c0:	200006d8 	.word	0x200006d8
 80a37c4:	200006d4 	.word	0x200006d4
 80a37c8:	200006d0 	.word	0x200006d0
 80a37cc:	200006cc 	.word	0x200006cc
 80a37d0:	200006c8 	.word	0x200006c8
 80a37d4:	200006c4 	.word	0x200006c4
 80a37d8:	200006c0 	.word	0x200006c0
 80a37dc:	200006bc 	.word	0x200006bc

080a37e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a37e0:	4b18      	ldr	r3, [pc, #96]	; (80a3844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a37e2:	681a      	ldr	r2, [r3, #0]
 80a37e4:	07d1      	lsls	r1, r2, #31
 80a37e6:	bf5c      	itt	pl
 80a37e8:	2201      	movpl	r2, #1
 80a37ea:	601a      	strpl	r2, [r3, #0]
 80a37ec:	4b16      	ldr	r3, [pc, #88]	; (80a3848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a37ee:	681a      	ldr	r2, [r3, #0]
 80a37f0:	07d2      	lsls	r2, r2, #31
 80a37f2:	bf5c      	itt	pl
 80a37f4:	2201      	movpl	r2, #1
 80a37f6:	601a      	strpl	r2, [r3, #0]
 80a37f8:	4b14      	ldr	r3, [pc, #80]	; (80a384c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a37fa:	681a      	ldr	r2, [r3, #0]
 80a37fc:	07d0      	lsls	r0, r2, #31
 80a37fe:	bf5c      	itt	pl
 80a3800:	2201      	movpl	r2, #1
 80a3802:	601a      	strpl	r2, [r3, #0]
 80a3804:	4b12      	ldr	r3, [pc, #72]	; (80a3850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3806:	681a      	ldr	r2, [r3, #0]
 80a3808:	07d1      	lsls	r1, r2, #31
 80a380a:	bf5c      	itt	pl
 80a380c:	2201      	movpl	r2, #1
 80a380e:	601a      	strpl	r2, [r3, #0]
 80a3810:	4b10      	ldr	r3, [pc, #64]	; (80a3854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3812:	681a      	ldr	r2, [r3, #0]
 80a3814:	07d2      	lsls	r2, r2, #31
 80a3816:	bf5c      	itt	pl
 80a3818:	2201      	movpl	r2, #1
 80a381a:	601a      	strpl	r2, [r3, #0]
 80a381c:	4b0e      	ldr	r3, [pc, #56]	; (80a3858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a381e:	681a      	ldr	r2, [r3, #0]
 80a3820:	07d0      	lsls	r0, r2, #31
 80a3822:	bf5c      	itt	pl
 80a3824:	2201      	movpl	r2, #1
 80a3826:	601a      	strpl	r2, [r3, #0]
 80a3828:	4b0c      	ldr	r3, [pc, #48]	; (80a385c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a382a:	681a      	ldr	r2, [r3, #0]
 80a382c:	07d1      	lsls	r1, r2, #31
 80a382e:	bf5c      	itt	pl
 80a3830:	2201      	movpl	r2, #1
 80a3832:	601a      	strpl	r2, [r3, #0]
 80a3834:	4b0a      	ldr	r3, [pc, #40]	; (80a3860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3836:	681a      	ldr	r2, [r3, #0]
 80a3838:	07d2      	lsls	r2, r2, #31
 80a383a:	bf5c      	itt	pl
 80a383c:	2201      	movpl	r2, #1
 80a383e:	601a      	strpl	r2, [r3, #0]
 80a3840:	4770      	bx	lr
 80a3842:	bf00      	nop
 80a3844:	20000708 	.word	0x20000708
 80a3848:	20000704 	.word	0x20000704
 80a384c:	20000700 	.word	0x20000700
 80a3850:	200006fc 	.word	0x200006fc
 80a3854:	200006f8 	.word	0x200006f8
 80a3858:	200006f4 	.word	0x200006f4
 80a385c:	200006f0 	.word	0x200006f0
 80a3860:	200006ec 	.word	0x200006ec

080a3864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3864:	4b18      	ldr	r3, [pc, #96]	; (80a38c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3866:	681a      	ldr	r2, [r3, #0]
 80a3868:	07d1      	lsls	r1, r2, #31
 80a386a:	bf5c      	itt	pl
 80a386c:	2201      	movpl	r2, #1
 80a386e:	601a      	strpl	r2, [r3, #0]
 80a3870:	4b16      	ldr	r3, [pc, #88]	; (80a38cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3872:	681a      	ldr	r2, [r3, #0]
 80a3874:	07d2      	lsls	r2, r2, #31
 80a3876:	bf5c      	itt	pl
 80a3878:	2201      	movpl	r2, #1
 80a387a:	601a      	strpl	r2, [r3, #0]
 80a387c:	4b14      	ldr	r3, [pc, #80]	; (80a38d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a387e:	681a      	ldr	r2, [r3, #0]
 80a3880:	07d0      	lsls	r0, r2, #31
 80a3882:	bf5c      	itt	pl
 80a3884:	2201      	movpl	r2, #1
 80a3886:	601a      	strpl	r2, [r3, #0]
 80a3888:	4b12      	ldr	r3, [pc, #72]	; (80a38d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a388a:	681a      	ldr	r2, [r3, #0]
 80a388c:	07d1      	lsls	r1, r2, #31
 80a388e:	bf5c      	itt	pl
 80a3890:	2201      	movpl	r2, #1
 80a3892:	601a      	strpl	r2, [r3, #0]
 80a3894:	4b10      	ldr	r3, [pc, #64]	; (80a38d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3896:	681a      	ldr	r2, [r3, #0]
 80a3898:	07d2      	lsls	r2, r2, #31
 80a389a:	bf5c      	itt	pl
 80a389c:	2201      	movpl	r2, #1
 80a389e:	601a      	strpl	r2, [r3, #0]
 80a38a0:	4b0e      	ldr	r3, [pc, #56]	; (80a38dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a38a2:	681a      	ldr	r2, [r3, #0]
 80a38a4:	07d0      	lsls	r0, r2, #31
 80a38a6:	bf5c      	itt	pl
 80a38a8:	2201      	movpl	r2, #1
 80a38aa:	601a      	strpl	r2, [r3, #0]
 80a38ac:	4b0c      	ldr	r3, [pc, #48]	; (80a38e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a38ae:	681a      	ldr	r2, [r3, #0]
 80a38b0:	07d1      	lsls	r1, r2, #31
 80a38b2:	bf5c      	itt	pl
 80a38b4:	2201      	movpl	r2, #1
 80a38b6:	601a      	strpl	r2, [r3, #0]
 80a38b8:	4b0a      	ldr	r3, [pc, #40]	; (80a38e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a38ba:	681a      	ldr	r2, [r3, #0]
 80a38bc:	07d2      	lsls	r2, r2, #31
 80a38be:	bf5c      	itt	pl
 80a38c0:	2201      	movpl	r2, #1
 80a38c2:	601a      	strpl	r2, [r3, #0]
 80a38c4:	4770      	bx	lr
 80a38c6:	bf00      	nop
 80a38c8:	20000728 	.word	0x20000728
 80a38cc:	20000724 	.word	0x20000724
 80a38d0:	20000720 	.word	0x20000720
 80a38d4:	2000071c 	.word	0x2000071c
 80a38d8:	20000718 	.word	0x20000718
 80a38dc:	20000714 	.word	0x20000714
 80a38e0:	20000710 	.word	0x20000710
 80a38e4:	2000070c 	.word	0x2000070c

080a38e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a38e8:	4b24      	ldr	r3, [pc, #144]	; (80a397c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a38ea:	681a      	ldr	r2, [r3, #0]
 80a38ec:	07d0      	lsls	r0, r2, #31
 80a38ee:	bf5c      	itt	pl
 80a38f0:	2201      	movpl	r2, #1
 80a38f2:	601a      	strpl	r2, [r3, #0]
 80a38f4:	4b22      	ldr	r3, [pc, #136]	; (80a3980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a38f6:	681a      	ldr	r2, [r3, #0]
 80a38f8:	07d1      	lsls	r1, r2, #31
 80a38fa:	bf5c      	itt	pl
 80a38fc:	2201      	movpl	r2, #1
 80a38fe:	601a      	strpl	r2, [r3, #0]
 80a3900:	4b20      	ldr	r3, [pc, #128]	; (80a3984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3902:	681a      	ldr	r2, [r3, #0]
 80a3904:	07d2      	lsls	r2, r2, #31
 80a3906:	bf5c      	itt	pl
 80a3908:	2201      	movpl	r2, #1
 80a390a:	601a      	strpl	r2, [r3, #0]
 80a390c:	4b1e      	ldr	r3, [pc, #120]	; (80a3988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a390e:	681a      	ldr	r2, [r3, #0]
 80a3910:	07d0      	lsls	r0, r2, #31
 80a3912:	bf5c      	itt	pl
 80a3914:	2201      	movpl	r2, #1
 80a3916:	601a      	strpl	r2, [r3, #0]
 80a3918:	4b1c      	ldr	r3, [pc, #112]	; (80a398c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a391a:	681a      	ldr	r2, [r3, #0]
 80a391c:	07d1      	lsls	r1, r2, #31
 80a391e:	bf5c      	itt	pl
 80a3920:	2201      	movpl	r2, #1
 80a3922:	601a      	strpl	r2, [r3, #0]
 80a3924:	4b1a      	ldr	r3, [pc, #104]	; (80a3990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3926:	681a      	ldr	r2, [r3, #0]
 80a3928:	07d2      	lsls	r2, r2, #31
 80a392a:	bf5c      	itt	pl
 80a392c:	2201      	movpl	r2, #1
 80a392e:	601a      	strpl	r2, [r3, #0]
 80a3930:	4b18      	ldr	r3, [pc, #96]	; (80a3994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3932:	681a      	ldr	r2, [r3, #0]
 80a3934:	07d0      	lsls	r0, r2, #31
 80a3936:	bf5c      	itt	pl
 80a3938:	2201      	movpl	r2, #1
 80a393a:	601a      	strpl	r2, [r3, #0]
 80a393c:	4b16      	ldr	r3, [pc, #88]	; (80a3998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a393e:	681a      	ldr	r2, [r3, #0]
 80a3940:	07d1      	lsls	r1, r2, #31
 80a3942:	bf5c      	itt	pl
 80a3944:	2201      	movpl	r2, #1
 80a3946:	601a      	strpl	r2, [r3, #0]
 80a3948:	4b14      	ldr	r3, [pc, #80]	; (80a399c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a394a:	681a      	ldr	r2, [r3, #0]
 80a394c:	07d2      	lsls	r2, r2, #31
 80a394e:	bf5c      	itt	pl
 80a3950:	2201      	movpl	r2, #1
 80a3952:	601a      	strpl	r2, [r3, #0]
 80a3954:	4b12      	ldr	r3, [pc, #72]	; (80a39a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3956:	681a      	ldr	r2, [r3, #0]
 80a3958:	07d0      	lsls	r0, r2, #31
 80a395a:	bf5c      	itt	pl
 80a395c:	2201      	movpl	r2, #1
 80a395e:	601a      	strpl	r2, [r3, #0]
 80a3960:	4b10      	ldr	r3, [pc, #64]	; (80a39a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3962:	681a      	ldr	r2, [r3, #0]
 80a3964:	07d1      	lsls	r1, r2, #31
 80a3966:	bf5c      	itt	pl
 80a3968:	2201      	movpl	r2, #1
 80a396a:	601a      	strpl	r2, [r3, #0]
 80a396c:	4b0e      	ldr	r3, [pc, #56]	; (80a39a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a396e:	681a      	ldr	r2, [r3, #0]
 80a3970:	07d2      	lsls	r2, r2, #31
 80a3972:	bf5c      	itt	pl
 80a3974:	2201      	movpl	r2, #1
 80a3976:	601a      	strpl	r2, [r3, #0]
 80a3978:	4770      	bx	lr
 80a397a:	bf00      	nop
 80a397c:	20000758 	.word	0x20000758
 80a3980:	20000754 	.word	0x20000754
 80a3984:	20000750 	.word	0x20000750
 80a3988:	2000074c 	.word	0x2000074c
 80a398c:	20000748 	.word	0x20000748
 80a3990:	20000744 	.word	0x20000744
 80a3994:	20000740 	.word	0x20000740
 80a3998:	2000073c 	.word	0x2000073c
 80a399c:	20000738 	.word	0x20000738
 80a39a0:	20000734 	.word	0x20000734
 80a39a4:	20000730 	.word	0x20000730
 80a39a8:	2000072c 	.word	0x2000072c

080a39ac <__aeabi_drsub>:
 80a39ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a39b0:	e002      	b.n	80a39b8 <__adddf3>
 80a39b2:	bf00      	nop

080a39b4 <__aeabi_dsub>:
 80a39b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a39b8 <__adddf3>:
 80a39b8:	b530      	push	{r4, r5, lr}
 80a39ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a39be:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a39c2:	ea94 0f05 	teq	r4, r5
 80a39c6:	bf08      	it	eq
 80a39c8:	ea90 0f02 	teqeq	r0, r2
 80a39cc:	bf1f      	itttt	ne
 80a39ce:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a39d2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a39d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a39da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a39de:	f000 80e2 	beq.w	80a3ba6 <__adddf3+0x1ee>
 80a39e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a39e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a39ea:	bfb8      	it	lt
 80a39ec:	426d      	neglt	r5, r5
 80a39ee:	dd0c      	ble.n	80a3a0a <__adddf3+0x52>
 80a39f0:	442c      	add	r4, r5
 80a39f2:	ea80 0202 	eor.w	r2, r0, r2
 80a39f6:	ea81 0303 	eor.w	r3, r1, r3
 80a39fa:	ea82 0000 	eor.w	r0, r2, r0
 80a39fe:	ea83 0101 	eor.w	r1, r3, r1
 80a3a02:	ea80 0202 	eor.w	r2, r0, r2
 80a3a06:	ea81 0303 	eor.w	r3, r1, r3
 80a3a0a:	2d36      	cmp	r5, #54	; 0x36
 80a3a0c:	bf88      	it	hi
 80a3a0e:	bd30      	pophi	{r4, r5, pc}
 80a3a10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3a14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3a18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3a1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3a20:	d002      	beq.n	80a3a28 <__adddf3+0x70>
 80a3a22:	4240      	negs	r0, r0
 80a3a24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3a28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3a2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3a30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3a34:	d002      	beq.n	80a3a3c <__adddf3+0x84>
 80a3a36:	4252      	negs	r2, r2
 80a3a38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3a3c:	ea94 0f05 	teq	r4, r5
 80a3a40:	f000 80a7 	beq.w	80a3b92 <__adddf3+0x1da>
 80a3a44:	f1a4 0401 	sub.w	r4, r4, #1
 80a3a48:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3a4c:	db0d      	blt.n	80a3a6a <__adddf3+0xb2>
 80a3a4e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3a52:	fa22 f205 	lsr.w	r2, r2, r5
 80a3a56:	1880      	adds	r0, r0, r2
 80a3a58:	f141 0100 	adc.w	r1, r1, #0
 80a3a5c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3a60:	1880      	adds	r0, r0, r2
 80a3a62:	fa43 f305 	asr.w	r3, r3, r5
 80a3a66:	4159      	adcs	r1, r3
 80a3a68:	e00e      	b.n	80a3a88 <__adddf3+0xd0>
 80a3a6a:	f1a5 0520 	sub.w	r5, r5, #32
 80a3a6e:	f10e 0e20 	add.w	lr, lr, #32
 80a3a72:	2a01      	cmp	r2, #1
 80a3a74:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3a78:	bf28      	it	cs
 80a3a7a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3a7e:	fa43 f305 	asr.w	r3, r3, r5
 80a3a82:	18c0      	adds	r0, r0, r3
 80a3a84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3a8c:	d507      	bpl.n	80a3a9e <__adddf3+0xe6>
 80a3a8e:	f04f 0e00 	mov.w	lr, #0
 80a3a92:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3a96:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3a9a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3a9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3aa2:	d31b      	bcc.n	80a3adc <__adddf3+0x124>
 80a3aa4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3aa8:	d30c      	bcc.n	80a3ac4 <__adddf3+0x10c>
 80a3aaa:	0849      	lsrs	r1, r1, #1
 80a3aac:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3ab0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3ab4:	f104 0401 	add.w	r4, r4, #1
 80a3ab8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3abc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3ac0:	f080 809a 	bcs.w	80a3bf8 <__adddf3+0x240>
 80a3ac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3ac8:	bf08      	it	eq
 80a3aca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3ace:	f150 0000 	adcs.w	r0, r0, #0
 80a3ad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3ad6:	ea41 0105 	orr.w	r1, r1, r5
 80a3ada:	bd30      	pop	{r4, r5, pc}
 80a3adc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3ae0:	4140      	adcs	r0, r0
 80a3ae2:	eb41 0101 	adc.w	r1, r1, r1
 80a3ae6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3aea:	f1a4 0401 	sub.w	r4, r4, #1
 80a3aee:	d1e9      	bne.n	80a3ac4 <__adddf3+0x10c>
 80a3af0:	f091 0f00 	teq	r1, #0
 80a3af4:	bf04      	itt	eq
 80a3af6:	4601      	moveq	r1, r0
 80a3af8:	2000      	moveq	r0, #0
 80a3afa:	fab1 f381 	clz	r3, r1
 80a3afe:	bf08      	it	eq
 80a3b00:	3320      	addeq	r3, #32
 80a3b02:	f1a3 030b 	sub.w	r3, r3, #11
 80a3b06:	f1b3 0220 	subs.w	r2, r3, #32
 80a3b0a:	da0c      	bge.n	80a3b26 <__adddf3+0x16e>
 80a3b0c:	320c      	adds	r2, #12
 80a3b0e:	dd08      	ble.n	80a3b22 <__adddf3+0x16a>
 80a3b10:	f102 0c14 	add.w	ip, r2, #20
 80a3b14:	f1c2 020c 	rsb	r2, r2, #12
 80a3b18:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3b1c:	fa21 f102 	lsr.w	r1, r1, r2
 80a3b20:	e00c      	b.n	80a3b3c <__adddf3+0x184>
 80a3b22:	f102 0214 	add.w	r2, r2, #20
 80a3b26:	bfd8      	it	le
 80a3b28:	f1c2 0c20 	rsble	ip, r2, #32
 80a3b2c:	fa01 f102 	lsl.w	r1, r1, r2
 80a3b30:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3b34:	bfdc      	itt	le
 80a3b36:	ea41 010c 	orrle.w	r1, r1, ip
 80a3b3a:	4090      	lslle	r0, r2
 80a3b3c:	1ae4      	subs	r4, r4, r3
 80a3b3e:	bfa2      	ittt	ge
 80a3b40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3b44:	4329      	orrge	r1, r5
 80a3b46:	bd30      	popge	{r4, r5, pc}
 80a3b48:	ea6f 0404 	mvn.w	r4, r4
 80a3b4c:	3c1f      	subs	r4, #31
 80a3b4e:	da1c      	bge.n	80a3b8a <__adddf3+0x1d2>
 80a3b50:	340c      	adds	r4, #12
 80a3b52:	dc0e      	bgt.n	80a3b72 <__adddf3+0x1ba>
 80a3b54:	f104 0414 	add.w	r4, r4, #20
 80a3b58:	f1c4 0220 	rsb	r2, r4, #32
 80a3b5c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3b60:	fa01 f302 	lsl.w	r3, r1, r2
 80a3b64:	ea40 0003 	orr.w	r0, r0, r3
 80a3b68:	fa21 f304 	lsr.w	r3, r1, r4
 80a3b6c:	ea45 0103 	orr.w	r1, r5, r3
 80a3b70:	bd30      	pop	{r4, r5, pc}
 80a3b72:	f1c4 040c 	rsb	r4, r4, #12
 80a3b76:	f1c4 0220 	rsb	r2, r4, #32
 80a3b7a:	fa20 f002 	lsr.w	r0, r0, r2
 80a3b7e:	fa01 f304 	lsl.w	r3, r1, r4
 80a3b82:	ea40 0003 	orr.w	r0, r0, r3
 80a3b86:	4629      	mov	r1, r5
 80a3b88:	bd30      	pop	{r4, r5, pc}
 80a3b8a:	fa21 f004 	lsr.w	r0, r1, r4
 80a3b8e:	4629      	mov	r1, r5
 80a3b90:	bd30      	pop	{r4, r5, pc}
 80a3b92:	f094 0f00 	teq	r4, #0
 80a3b96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3b9a:	bf06      	itte	eq
 80a3b9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3ba0:	3401      	addeq	r4, #1
 80a3ba2:	3d01      	subne	r5, #1
 80a3ba4:	e74e      	b.n	80a3a44 <__adddf3+0x8c>
 80a3ba6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3baa:	bf18      	it	ne
 80a3bac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3bb0:	d029      	beq.n	80a3c06 <__adddf3+0x24e>
 80a3bb2:	ea94 0f05 	teq	r4, r5
 80a3bb6:	bf08      	it	eq
 80a3bb8:	ea90 0f02 	teqeq	r0, r2
 80a3bbc:	d005      	beq.n	80a3bca <__adddf3+0x212>
 80a3bbe:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3bc2:	bf04      	itt	eq
 80a3bc4:	4619      	moveq	r1, r3
 80a3bc6:	4610      	moveq	r0, r2
 80a3bc8:	bd30      	pop	{r4, r5, pc}
 80a3bca:	ea91 0f03 	teq	r1, r3
 80a3bce:	bf1e      	ittt	ne
 80a3bd0:	2100      	movne	r1, #0
 80a3bd2:	2000      	movne	r0, #0
 80a3bd4:	bd30      	popne	{r4, r5, pc}
 80a3bd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3bda:	d105      	bne.n	80a3be8 <__adddf3+0x230>
 80a3bdc:	0040      	lsls	r0, r0, #1
 80a3bde:	4149      	adcs	r1, r1
 80a3be0:	bf28      	it	cs
 80a3be2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3be6:	bd30      	pop	{r4, r5, pc}
 80a3be8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3bec:	bf3c      	itt	cc
 80a3bee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3bf2:	bd30      	popcc	{r4, r5, pc}
 80a3bf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3bf8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3bfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3c00:	f04f 0000 	mov.w	r0, #0
 80a3c04:	bd30      	pop	{r4, r5, pc}
 80a3c06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3c0a:	bf1a      	itte	ne
 80a3c0c:	4619      	movne	r1, r3
 80a3c0e:	4610      	movne	r0, r2
 80a3c10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3c14:	bf1c      	itt	ne
 80a3c16:	460b      	movne	r3, r1
 80a3c18:	4602      	movne	r2, r0
 80a3c1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3c1e:	bf06      	itte	eq
 80a3c20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3c24:	ea91 0f03 	teqeq	r1, r3
 80a3c28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3c2c:	bd30      	pop	{r4, r5, pc}
 80a3c2e:	bf00      	nop

080a3c30 <__aeabi_ui2d>:
 80a3c30:	f090 0f00 	teq	r0, #0
 80a3c34:	bf04      	itt	eq
 80a3c36:	2100      	moveq	r1, #0
 80a3c38:	4770      	bxeq	lr
 80a3c3a:	b530      	push	{r4, r5, lr}
 80a3c3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3c40:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3c44:	f04f 0500 	mov.w	r5, #0
 80a3c48:	f04f 0100 	mov.w	r1, #0
 80a3c4c:	e750      	b.n	80a3af0 <__adddf3+0x138>
 80a3c4e:	bf00      	nop

080a3c50 <__aeabi_i2d>:
 80a3c50:	f090 0f00 	teq	r0, #0
 80a3c54:	bf04      	itt	eq
 80a3c56:	2100      	moveq	r1, #0
 80a3c58:	4770      	bxeq	lr
 80a3c5a:	b530      	push	{r4, r5, lr}
 80a3c5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3c60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3c64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3c68:	bf48      	it	mi
 80a3c6a:	4240      	negmi	r0, r0
 80a3c6c:	f04f 0100 	mov.w	r1, #0
 80a3c70:	e73e      	b.n	80a3af0 <__adddf3+0x138>
 80a3c72:	bf00      	nop

080a3c74 <__aeabi_f2d>:
 80a3c74:	0042      	lsls	r2, r0, #1
 80a3c76:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3c7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3c82:	bf1f      	itttt	ne
 80a3c84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3c88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3c8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3c90:	4770      	bxne	lr
 80a3c92:	f092 0f00 	teq	r2, #0
 80a3c96:	bf14      	ite	ne
 80a3c98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3c9c:	4770      	bxeq	lr
 80a3c9e:	b530      	push	{r4, r5, lr}
 80a3ca0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3ca4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3ca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3cac:	e720      	b.n	80a3af0 <__adddf3+0x138>
 80a3cae:	bf00      	nop

080a3cb0 <__aeabi_ul2d>:
 80a3cb0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3cb4:	bf08      	it	eq
 80a3cb6:	4770      	bxeq	lr
 80a3cb8:	b530      	push	{r4, r5, lr}
 80a3cba:	f04f 0500 	mov.w	r5, #0
 80a3cbe:	e00a      	b.n	80a3cd6 <__aeabi_l2d+0x16>

080a3cc0 <__aeabi_l2d>:
 80a3cc0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3cc4:	bf08      	it	eq
 80a3cc6:	4770      	bxeq	lr
 80a3cc8:	b530      	push	{r4, r5, lr}
 80a3cca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3cce:	d502      	bpl.n	80a3cd6 <__aeabi_l2d+0x16>
 80a3cd0:	4240      	negs	r0, r0
 80a3cd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3cd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3cda:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3cde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3ce2:	f43f aedc 	beq.w	80a3a9e <__adddf3+0xe6>
 80a3ce6:	f04f 0203 	mov.w	r2, #3
 80a3cea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3cee:	bf18      	it	ne
 80a3cf0:	3203      	addne	r2, #3
 80a3cf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3cf6:	bf18      	it	ne
 80a3cf8:	3203      	addne	r2, #3
 80a3cfa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3cfe:	f1c2 0320 	rsb	r3, r2, #32
 80a3d02:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3d06:	fa20 f002 	lsr.w	r0, r0, r2
 80a3d0a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3d0e:	ea40 000e 	orr.w	r0, r0, lr
 80a3d12:	fa21 f102 	lsr.w	r1, r1, r2
 80a3d16:	4414      	add	r4, r2
 80a3d18:	e6c1      	b.n	80a3a9e <__adddf3+0xe6>
 80a3d1a:	bf00      	nop

080a3d1c <__aeabi_dmul>:
 80a3d1c:	b570      	push	{r4, r5, r6, lr}
 80a3d1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3d22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3d26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3d2a:	bf1d      	ittte	ne
 80a3d2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3d30:	ea94 0f0c 	teqne	r4, ip
 80a3d34:	ea95 0f0c 	teqne	r5, ip
 80a3d38:	f000 f8de 	bleq	80a3ef8 <__aeabi_dmul+0x1dc>
 80a3d3c:	442c      	add	r4, r5
 80a3d3e:	ea81 0603 	eor.w	r6, r1, r3
 80a3d42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3d46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3d4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3d4e:	bf18      	it	ne
 80a3d50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3d54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3d5c:	d038      	beq.n	80a3dd0 <__aeabi_dmul+0xb4>
 80a3d5e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3d62:	f04f 0500 	mov.w	r5, #0
 80a3d66:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3d6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3d6e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3d72:	f04f 0600 	mov.w	r6, #0
 80a3d76:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3d7a:	f09c 0f00 	teq	ip, #0
 80a3d7e:	bf18      	it	ne
 80a3d80:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3d84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3d88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3d8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3d90:	d204      	bcs.n	80a3d9c <__aeabi_dmul+0x80>
 80a3d92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3d96:	416d      	adcs	r5, r5
 80a3d98:	eb46 0606 	adc.w	r6, r6, r6
 80a3d9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3da0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3da4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3da8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3dac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3db0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3db4:	bf88      	it	hi
 80a3db6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3dba:	d81e      	bhi.n	80a3dfa <__aeabi_dmul+0xde>
 80a3dbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3dc0:	bf08      	it	eq
 80a3dc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3dc6:	f150 0000 	adcs.w	r0, r0, #0
 80a3dca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3dce:	bd70      	pop	{r4, r5, r6, pc}
 80a3dd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3dd4:	ea46 0101 	orr.w	r1, r6, r1
 80a3dd8:	ea40 0002 	orr.w	r0, r0, r2
 80a3ddc:	ea81 0103 	eor.w	r1, r1, r3
 80a3de0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3de4:	bfc2      	ittt	gt
 80a3de6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3dea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3dee:	bd70      	popgt	{r4, r5, r6, pc}
 80a3df0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3df4:	f04f 0e00 	mov.w	lr, #0
 80a3df8:	3c01      	subs	r4, #1
 80a3dfa:	f300 80ab 	bgt.w	80a3f54 <__aeabi_dmul+0x238>
 80a3dfe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3e02:	bfde      	ittt	le
 80a3e04:	2000      	movle	r0, #0
 80a3e06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3e0a:	bd70      	pople	{r4, r5, r6, pc}
 80a3e0c:	f1c4 0400 	rsb	r4, r4, #0
 80a3e10:	3c20      	subs	r4, #32
 80a3e12:	da35      	bge.n	80a3e80 <__aeabi_dmul+0x164>
 80a3e14:	340c      	adds	r4, #12
 80a3e16:	dc1b      	bgt.n	80a3e50 <__aeabi_dmul+0x134>
 80a3e18:	f104 0414 	add.w	r4, r4, #20
 80a3e1c:	f1c4 0520 	rsb	r5, r4, #32
 80a3e20:	fa00 f305 	lsl.w	r3, r0, r5
 80a3e24:	fa20 f004 	lsr.w	r0, r0, r4
 80a3e28:	fa01 f205 	lsl.w	r2, r1, r5
 80a3e2c:	ea40 0002 	orr.w	r0, r0, r2
 80a3e30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3e34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3e38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3e3c:	fa21 f604 	lsr.w	r6, r1, r4
 80a3e40:	eb42 0106 	adc.w	r1, r2, r6
 80a3e44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3e48:	bf08      	it	eq
 80a3e4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3e4e:	bd70      	pop	{r4, r5, r6, pc}
 80a3e50:	f1c4 040c 	rsb	r4, r4, #12
 80a3e54:	f1c4 0520 	rsb	r5, r4, #32
 80a3e58:	fa00 f304 	lsl.w	r3, r0, r4
 80a3e5c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3e60:	fa01 f204 	lsl.w	r2, r1, r4
 80a3e64:	ea40 0002 	orr.w	r0, r0, r2
 80a3e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3e6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3e70:	f141 0100 	adc.w	r1, r1, #0
 80a3e74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3e78:	bf08      	it	eq
 80a3e7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3e7e:	bd70      	pop	{r4, r5, r6, pc}
 80a3e80:	f1c4 0520 	rsb	r5, r4, #32
 80a3e84:	fa00 f205 	lsl.w	r2, r0, r5
 80a3e88:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3e8c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3e90:	fa01 f205 	lsl.w	r2, r1, r5
 80a3e94:	ea43 0302 	orr.w	r3, r3, r2
 80a3e98:	fa21 f004 	lsr.w	r0, r1, r4
 80a3e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3ea0:	fa21 f204 	lsr.w	r2, r1, r4
 80a3ea4:	ea20 0002 	bic.w	r0, r0, r2
 80a3ea8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3eac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3eb0:	bf08      	it	eq
 80a3eb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3eb6:	bd70      	pop	{r4, r5, r6, pc}
 80a3eb8:	f094 0f00 	teq	r4, #0
 80a3ebc:	d10f      	bne.n	80a3ede <__aeabi_dmul+0x1c2>
 80a3ebe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3ec2:	0040      	lsls	r0, r0, #1
 80a3ec4:	eb41 0101 	adc.w	r1, r1, r1
 80a3ec8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3ecc:	bf08      	it	eq
 80a3ece:	3c01      	subeq	r4, #1
 80a3ed0:	d0f7      	beq.n	80a3ec2 <__aeabi_dmul+0x1a6>
 80a3ed2:	ea41 0106 	orr.w	r1, r1, r6
 80a3ed6:	f095 0f00 	teq	r5, #0
 80a3eda:	bf18      	it	ne
 80a3edc:	4770      	bxne	lr
 80a3ede:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3ee2:	0052      	lsls	r2, r2, #1
 80a3ee4:	eb43 0303 	adc.w	r3, r3, r3
 80a3ee8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3eec:	bf08      	it	eq
 80a3eee:	3d01      	subeq	r5, #1
 80a3ef0:	d0f7      	beq.n	80a3ee2 <__aeabi_dmul+0x1c6>
 80a3ef2:	ea43 0306 	orr.w	r3, r3, r6
 80a3ef6:	4770      	bx	lr
 80a3ef8:	ea94 0f0c 	teq	r4, ip
 80a3efc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3f00:	bf18      	it	ne
 80a3f02:	ea95 0f0c 	teqne	r5, ip
 80a3f06:	d00c      	beq.n	80a3f22 <__aeabi_dmul+0x206>
 80a3f08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3f0c:	bf18      	it	ne
 80a3f0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3f12:	d1d1      	bne.n	80a3eb8 <__aeabi_dmul+0x19c>
 80a3f14:	ea81 0103 	eor.w	r1, r1, r3
 80a3f18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3f1c:	f04f 0000 	mov.w	r0, #0
 80a3f20:	bd70      	pop	{r4, r5, r6, pc}
 80a3f22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3f26:	bf06      	itte	eq
 80a3f28:	4610      	moveq	r0, r2
 80a3f2a:	4619      	moveq	r1, r3
 80a3f2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3f30:	d019      	beq.n	80a3f66 <__aeabi_dmul+0x24a>
 80a3f32:	ea94 0f0c 	teq	r4, ip
 80a3f36:	d102      	bne.n	80a3f3e <__aeabi_dmul+0x222>
 80a3f38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3f3c:	d113      	bne.n	80a3f66 <__aeabi_dmul+0x24a>
 80a3f3e:	ea95 0f0c 	teq	r5, ip
 80a3f42:	d105      	bne.n	80a3f50 <__aeabi_dmul+0x234>
 80a3f44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3f48:	bf1c      	itt	ne
 80a3f4a:	4610      	movne	r0, r2
 80a3f4c:	4619      	movne	r1, r3
 80a3f4e:	d10a      	bne.n	80a3f66 <__aeabi_dmul+0x24a>
 80a3f50:	ea81 0103 	eor.w	r1, r1, r3
 80a3f54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3f58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3f5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3f60:	f04f 0000 	mov.w	r0, #0
 80a3f64:	bd70      	pop	{r4, r5, r6, pc}
 80a3f66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3f6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3f6e:	bd70      	pop	{r4, r5, r6, pc}

080a3f70 <__aeabi_ddiv>:
 80a3f70:	b570      	push	{r4, r5, r6, lr}
 80a3f72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3f76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3f7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3f7e:	bf1d      	ittte	ne
 80a3f80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3f84:	ea94 0f0c 	teqne	r4, ip
 80a3f88:	ea95 0f0c 	teqne	r5, ip
 80a3f8c:	f000 f8a7 	bleq	80a40de <__aeabi_ddiv+0x16e>
 80a3f90:	eba4 0405 	sub.w	r4, r4, r5
 80a3f94:	ea81 0e03 	eor.w	lr, r1, r3
 80a3f98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3f9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3fa0:	f000 8088 	beq.w	80a40b4 <__aeabi_ddiv+0x144>
 80a3fa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3fa8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3fac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3fb0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3fb4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3fb8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3fbc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3fc0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3fc4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3fc8:	429d      	cmp	r5, r3
 80a3fca:	bf08      	it	eq
 80a3fcc:	4296      	cmpeq	r6, r2
 80a3fce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3fd2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3fd6:	d202      	bcs.n	80a3fde <__aeabi_ddiv+0x6e>
 80a3fd8:	085b      	lsrs	r3, r3, #1
 80a3fda:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3fde:	1ab6      	subs	r6, r6, r2
 80a3fe0:	eb65 0503 	sbc.w	r5, r5, r3
 80a3fe4:	085b      	lsrs	r3, r3, #1
 80a3fe6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3fea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3fee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3ff2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3ff6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3ffa:	bf22      	ittt	cs
 80a3ffc:	1ab6      	subcs	r6, r6, r2
 80a3ffe:	4675      	movcs	r5, lr
 80a4000:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4004:	085b      	lsrs	r3, r3, #1
 80a4006:	ea4f 0232 	mov.w	r2, r2, rrx
 80a400a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a400e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4012:	bf22      	ittt	cs
 80a4014:	1ab6      	subcs	r6, r6, r2
 80a4016:	4675      	movcs	r5, lr
 80a4018:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a401c:	085b      	lsrs	r3, r3, #1
 80a401e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4022:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4026:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a402a:	bf22      	ittt	cs
 80a402c:	1ab6      	subcs	r6, r6, r2
 80a402e:	4675      	movcs	r5, lr
 80a4030:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4034:	085b      	lsrs	r3, r3, #1
 80a4036:	ea4f 0232 	mov.w	r2, r2, rrx
 80a403a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a403e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4042:	bf22      	ittt	cs
 80a4044:	1ab6      	subcs	r6, r6, r2
 80a4046:	4675      	movcs	r5, lr
 80a4048:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a404c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4050:	d018      	beq.n	80a4084 <__aeabi_ddiv+0x114>
 80a4052:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4056:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a405a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a405e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4062:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4066:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a406a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a406e:	d1c0      	bne.n	80a3ff2 <__aeabi_ddiv+0x82>
 80a4070:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4074:	d10b      	bne.n	80a408e <__aeabi_ddiv+0x11e>
 80a4076:	ea41 0100 	orr.w	r1, r1, r0
 80a407a:	f04f 0000 	mov.w	r0, #0
 80a407e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4082:	e7b6      	b.n	80a3ff2 <__aeabi_ddiv+0x82>
 80a4084:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4088:	bf04      	itt	eq
 80a408a:	4301      	orreq	r1, r0
 80a408c:	2000      	moveq	r0, #0
 80a408e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4092:	bf88      	it	hi
 80a4094:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4098:	f63f aeaf 	bhi.w	80a3dfa <__aeabi_dmul+0xde>
 80a409c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a40a0:	bf04      	itt	eq
 80a40a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a40a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a40aa:	f150 0000 	adcs.w	r0, r0, #0
 80a40ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a40b2:	bd70      	pop	{r4, r5, r6, pc}
 80a40b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a40b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a40bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a40c0:	bfc2      	ittt	gt
 80a40c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a40c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a40ca:	bd70      	popgt	{r4, r5, r6, pc}
 80a40cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a40d0:	f04f 0e00 	mov.w	lr, #0
 80a40d4:	3c01      	subs	r4, #1
 80a40d6:	e690      	b.n	80a3dfa <__aeabi_dmul+0xde>
 80a40d8:	ea45 0e06 	orr.w	lr, r5, r6
 80a40dc:	e68d      	b.n	80a3dfa <__aeabi_dmul+0xde>
 80a40de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a40e2:	ea94 0f0c 	teq	r4, ip
 80a40e6:	bf08      	it	eq
 80a40e8:	ea95 0f0c 	teqeq	r5, ip
 80a40ec:	f43f af3b 	beq.w	80a3f66 <__aeabi_dmul+0x24a>
 80a40f0:	ea94 0f0c 	teq	r4, ip
 80a40f4:	d10a      	bne.n	80a410c <__aeabi_ddiv+0x19c>
 80a40f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a40fa:	f47f af34 	bne.w	80a3f66 <__aeabi_dmul+0x24a>
 80a40fe:	ea95 0f0c 	teq	r5, ip
 80a4102:	f47f af25 	bne.w	80a3f50 <__aeabi_dmul+0x234>
 80a4106:	4610      	mov	r0, r2
 80a4108:	4619      	mov	r1, r3
 80a410a:	e72c      	b.n	80a3f66 <__aeabi_dmul+0x24a>
 80a410c:	ea95 0f0c 	teq	r5, ip
 80a4110:	d106      	bne.n	80a4120 <__aeabi_ddiv+0x1b0>
 80a4112:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4116:	f43f aefd 	beq.w	80a3f14 <__aeabi_dmul+0x1f8>
 80a411a:	4610      	mov	r0, r2
 80a411c:	4619      	mov	r1, r3
 80a411e:	e722      	b.n	80a3f66 <__aeabi_dmul+0x24a>
 80a4120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4124:	bf18      	it	ne
 80a4126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a412a:	f47f aec5 	bne.w	80a3eb8 <__aeabi_dmul+0x19c>
 80a412e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4132:	f47f af0d 	bne.w	80a3f50 <__aeabi_dmul+0x234>
 80a4136:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a413a:	f47f aeeb 	bne.w	80a3f14 <__aeabi_dmul+0x1f8>
 80a413e:	e712      	b.n	80a3f66 <__aeabi_dmul+0x24a>

080a4140 <__aeabi_d2iz>:
 80a4140:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4144:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4148:	d215      	bcs.n	80a4176 <__aeabi_d2iz+0x36>
 80a414a:	d511      	bpl.n	80a4170 <__aeabi_d2iz+0x30>
 80a414c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4150:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4154:	d912      	bls.n	80a417c <__aeabi_d2iz+0x3c>
 80a4156:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a415a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a415e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4162:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4166:	fa23 f002 	lsr.w	r0, r3, r2
 80a416a:	bf18      	it	ne
 80a416c:	4240      	negne	r0, r0
 80a416e:	4770      	bx	lr
 80a4170:	f04f 0000 	mov.w	r0, #0
 80a4174:	4770      	bx	lr
 80a4176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a417a:	d105      	bne.n	80a4188 <__aeabi_d2iz+0x48>
 80a417c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4180:	bf08      	it	eq
 80a4182:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4186:	4770      	bx	lr
 80a4188:	f04f 0000 	mov.w	r0, #0
 80a418c:	4770      	bx	lr
 80a418e:	bf00      	nop

080a4190 <__aeabi_frsub>:
 80a4190:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4194:	e002      	b.n	80a419c <__addsf3>
 80a4196:	bf00      	nop

080a4198 <__aeabi_fsub>:
 80a4198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a419c <__addsf3>:
 80a419c:	0042      	lsls	r2, r0, #1
 80a419e:	bf1f      	itttt	ne
 80a41a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a41a4:	ea92 0f03 	teqne	r2, r3
 80a41a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a41ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a41b0:	d06a      	beq.n	80a4288 <__addsf3+0xec>
 80a41b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a41b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a41ba:	bfc1      	itttt	gt
 80a41bc:	18d2      	addgt	r2, r2, r3
 80a41be:	4041      	eorgt	r1, r0
 80a41c0:	4048      	eorgt	r0, r1
 80a41c2:	4041      	eorgt	r1, r0
 80a41c4:	bfb8      	it	lt
 80a41c6:	425b      	neglt	r3, r3
 80a41c8:	2b19      	cmp	r3, #25
 80a41ca:	bf88      	it	hi
 80a41cc:	4770      	bxhi	lr
 80a41ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a41d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a41d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a41da:	bf18      	it	ne
 80a41dc:	4240      	negne	r0, r0
 80a41de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a41e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a41e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a41ea:	bf18      	it	ne
 80a41ec:	4249      	negne	r1, r1
 80a41ee:	ea92 0f03 	teq	r2, r3
 80a41f2:	d03f      	beq.n	80a4274 <__addsf3+0xd8>
 80a41f4:	f1a2 0201 	sub.w	r2, r2, #1
 80a41f8:	fa41 fc03 	asr.w	ip, r1, r3
 80a41fc:	eb10 000c 	adds.w	r0, r0, ip
 80a4200:	f1c3 0320 	rsb	r3, r3, #32
 80a4204:	fa01 f103 	lsl.w	r1, r1, r3
 80a4208:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a420c:	d502      	bpl.n	80a4214 <__addsf3+0x78>
 80a420e:	4249      	negs	r1, r1
 80a4210:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4214:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4218:	d313      	bcc.n	80a4242 <__addsf3+0xa6>
 80a421a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a421e:	d306      	bcc.n	80a422e <__addsf3+0x92>
 80a4220:	0840      	lsrs	r0, r0, #1
 80a4222:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4226:	f102 0201 	add.w	r2, r2, #1
 80a422a:	2afe      	cmp	r2, #254	; 0xfe
 80a422c:	d251      	bcs.n	80a42d2 <__addsf3+0x136>
 80a422e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4232:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4236:	bf08      	it	eq
 80a4238:	f020 0001 	biceq.w	r0, r0, #1
 80a423c:	ea40 0003 	orr.w	r0, r0, r3
 80a4240:	4770      	bx	lr
 80a4242:	0049      	lsls	r1, r1, #1
 80a4244:	eb40 0000 	adc.w	r0, r0, r0
 80a4248:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a424c:	f1a2 0201 	sub.w	r2, r2, #1
 80a4250:	d1ed      	bne.n	80a422e <__addsf3+0x92>
 80a4252:	fab0 fc80 	clz	ip, r0
 80a4256:	f1ac 0c08 	sub.w	ip, ip, #8
 80a425a:	ebb2 020c 	subs.w	r2, r2, ip
 80a425e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4262:	bfaa      	itet	ge
 80a4264:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4268:	4252      	neglt	r2, r2
 80a426a:	4318      	orrge	r0, r3
 80a426c:	bfbc      	itt	lt
 80a426e:	40d0      	lsrlt	r0, r2
 80a4270:	4318      	orrlt	r0, r3
 80a4272:	4770      	bx	lr
 80a4274:	f092 0f00 	teq	r2, #0
 80a4278:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a427c:	bf06      	itte	eq
 80a427e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4282:	3201      	addeq	r2, #1
 80a4284:	3b01      	subne	r3, #1
 80a4286:	e7b5      	b.n	80a41f4 <__addsf3+0x58>
 80a4288:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a428c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4290:	bf18      	it	ne
 80a4292:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4296:	d021      	beq.n	80a42dc <__addsf3+0x140>
 80a4298:	ea92 0f03 	teq	r2, r3
 80a429c:	d004      	beq.n	80a42a8 <__addsf3+0x10c>
 80a429e:	f092 0f00 	teq	r2, #0
 80a42a2:	bf08      	it	eq
 80a42a4:	4608      	moveq	r0, r1
 80a42a6:	4770      	bx	lr
 80a42a8:	ea90 0f01 	teq	r0, r1
 80a42ac:	bf1c      	itt	ne
 80a42ae:	2000      	movne	r0, #0
 80a42b0:	4770      	bxne	lr
 80a42b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a42b6:	d104      	bne.n	80a42c2 <__addsf3+0x126>
 80a42b8:	0040      	lsls	r0, r0, #1
 80a42ba:	bf28      	it	cs
 80a42bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a42c0:	4770      	bx	lr
 80a42c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a42c6:	bf3c      	itt	cc
 80a42c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a42cc:	4770      	bxcc	lr
 80a42ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a42d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a42d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a42da:	4770      	bx	lr
 80a42dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a42e0:	bf16      	itet	ne
 80a42e2:	4608      	movne	r0, r1
 80a42e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a42e8:	4601      	movne	r1, r0
 80a42ea:	0242      	lsls	r2, r0, #9
 80a42ec:	bf06      	itte	eq
 80a42ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a42f2:	ea90 0f01 	teqeq	r0, r1
 80a42f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a42fa:	4770      	bx	lr

080a42fc <__aeabi_ui2f>:
 80a42fc:	f04f 0300 	mov.w	r3, #0
 80a4300:	e004      	b.n	80a430c <__aeabi_i2f+0x8>
 80a4302:	bf00      	nop

080a4304 <__aeabi_i2f>:
 80a4304:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4308:	bf48      	it	mi
 80a430a:	4240      	negmi	r0, r0
 80a430c:	ea5f 0c00 	movs.w	ip, r0
 80a4310:	bf08      	it	eq
 80a4312:	4770      	bxeq	lr
 80a4314:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4318:	4601      	mov	r1, r0
 80a431a:	f04f 0000 	mov.w	r0, #0
 80a431e:	e01c      	b.n	80a435a <__aeabi_l2f+0x2a>

080a4320 <__aeabi_ul2f>:
 80a4320:	ea50 0201 	orrs.w	r2, r0, r1
 80a4324:	bf08      	it	eq
 80a4326:	4770      	bxeq	lr
 80a4328:	f04f 0300 	mov.w	r3, #0
 80a432c:	e00a      	b.n	80a4344 <__aeabi_l2f+0x14>
 80a432e:	bf00      	nop

080a4330 <__aeabi_l2f>:
 80a4330:	ea50 0201 	orrs.w	r2, r0, r1
 80a4334:	bf08      	it	eq
 80a4336:	4770      	bxeq	lr
 80a4338:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a433c:	d502      	bpl.n	80a4344 <__aeabi_l2f+0x14>
 80a433e:	4240      	negs	r0, r0
 80a4340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4344:	ea5f 0c01 	movs.w	ip, r1
 80a4348:	bf02      	ittt	eq
 80a434a:	4684      	moveq	ip, r0
 80a434c:	4601      	moveq	r1, r0
 80a434e:	2000      	moveq	r0, #0
 80a4350:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4354:	bf08      	it	eq
 80a4356:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a435a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a435e:	fabc f28c 	clz	r2, ip
 80a4362:	3a08      	subs	r2, #8
 80a4364:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4368:	db10      	blt.n	80a438c <__aeabi_l2f+0x5c>
 80a436a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a436e:	4463      	add	r3, ip
 80a4370:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4374:	f1c2 0220 	rsb	r2, r2, #32
 80a4378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a437c:	fa20 f202 	lsr.w	r2, r0, r2
 80a4380:	eb43 0002 	adc.w	r0, r3, r2
 80a4384:	bf08      	it	eq
 80a4386:	f020 0001 	biceq.w	r0, r0, #1
 80a438a:	4770      	bx	lr
 80a438c:	f102 0220 	add.w	r2, r2, #32
 80a4390:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4394:	f1c2 0220 	rsb	r2, r2, #32
 80a4398:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a439c:	fa21 f202 	lsr.w	r2, r1, r2
 80a43a0:	eb43 0002 	adc.w	r0, r3, r2
 80a43a4:	bf08      	it	eq
 80a43a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a43aa:	4770      	bx	lr

080a43ac <__aeabi_fmul>:
 80a43ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a43b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a43b4:	bf1e      	ittt	ne
 80a43b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a43ba:	ea92 0f0c 	teqne	r2, ip
 80a43be:	ea93 0f0c 	teqne	r3, ip
 80a43c2:	d06f      	beq.n	80a44a4 <__aeabi_fmul+0xf8>
 80a43c4:	441a      	add	r2, r3
 80a43c6:	ea80 0c01 	eor.w	ip, r0, r1
 80a43ca:	0240      	lsls	r0, r0, #9
 80a43cc:	bf18      	it	ne
 80a43ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a43d2:	d01e      	beq.n	80a4412 <__aeabi_fmul+0x66>
 80a43d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a43d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a43dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a43e0:	fba0 3101 	umull	r3, r1, r0, r1
 80a43e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a43e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a43ec:	bf3e      	ittt	cc
 80a43ee:	0049      	lslcc	r1, r1, #1
 80a43f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a43f4:	005b      	lslcc	r3, r3, #1
 80a43f6:	ea40 0001 	orr.w	r0, r0, r1
 80a43fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a43fe:	2afd      	cmp	r2, #253	; 0xfd
 80a4400:	d81d      	bhi.n	80a443e <__aeabi_fmul+0x92>
 80a4402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4406:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a440a:	bf08      	it	eq
 80a440c:	f020 0001 	biceq.w	r0, r0, #1
 80a4410:	4770      	bx	lr
 80a4412:	f090 0f00 	teq	r0, #0
 80a4416:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a441a:	bf08      	it	eq
 80a441c:	0249      	lsleq	r1, r1, #9
 80a441e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4422:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4426:	3a7f      	subs	r2, #127	; 0x7f
 80a4428:	bfc2      	ittt	gt
 80a442a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a442e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4432:	4770      	bxgt	lr
 80a4434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4438:	f04f 0300 	mov.w	r3, #0
 80a443c:	3a01      	subs	r2, #1
 80a443e:	dc5d      	bgt.n	80a44fc <__aeabi_fmul+0x150>
 80a4440:	f112 0f19 	cmn.w	r2, #25
 80a4444:	bfdc      	itt	le
 80a4446:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a444a:	4770      	bxle	lr
 80a444c:	f1c2 0200 	rsb	r2, r2, #0
 80a4450:	0041      	lsls	r1, r0, #1
 80a4452:	fa21 f102 	lsr.w	r1, r1, r2
 80a4456:	f1c2 0220 	rsb	r2, r2, #32
 80a445a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a445e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4462:	f140 0000 	adc.w	r0, r0, #0
 80a4466:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a446a:	bf08      	it	eq
 80a446c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4470:	4770      	bx	lr
 80a4472:	f092 0f00 	teq	r2, #0
 80a4476:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a447a:	bf02      	ittt	eq
 80a447c:	0040      	lsleq	r0, r0, #1
 80a447e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4482:	3a01      	subeq	r2, #1
 80a4484:	d0f9      	beq.n	80a447a <__aeabi_fmul+0xce>
 80a4486:	ea40 000c 	orr.w	r0, r0, ip
 80a448a:	f093 0f00 	teq	r3, #0
 80a448e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4492:	bf02      	ittt	eq
 80a4494:	0049      	lsleq	r1, r1, #1
 80a4496:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a449a:	3b01      	subeq	r3, #1
 80a449c:	d0f9      	beq.n	80a4492 <__aeabi_fmul+0xe6>
 80a449e:	ea41 010c 	orr.w	r1, r1, ip
 80a44a2:	e78f      	b.n	80a43c4 <__aeabi_fmul+0x18>
 80a44a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a44a8:	ea92 0f0c 	teq	r2, ip
 80a44ac:	bf18      	it	ne
 80a44ae:	ea93 0f0c 	teqne	r3, ip
 80a44b2:	d00a      	beq.n	80a44ca <__aeabi_fmul+0x11e>
 80a44b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a44b8:	bf18      	it	ne
 80a44ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a44be:	d1d8      	bne.n	80a4472 <__aeabi_fmul+0xc6>
 80a44c0:	ea80 0001 	eor.w	r0, r0, r1
 80a44c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a44c8:	4770      	bx	lr
 80a44ca:	f090 0f00 	teq	r0, #0
 80a44ce:	bf17      	itett	ne
 80a44d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a44d4:	4608      	moveq	r0, r1
 80a44d6:	f091 0f00 	teqne	r1, #0
 80a44da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a44de:	d014      	beq.n	80a450a <__aeabi_fmul+0x15e>
 80a44e0:	ea92 0f0c 	teq	r2, ip
 80a44e4:	d101      	bne.n	80a44ea <__aeabi_fmul+0x13e>
 80a44e6:	0242      	lsls	r2, r0, #9
 80a44e8:	d10f      	bne.n	80a450a <__aeabi_fmul+0x15e>
 80a44ea:	ea93 0f0c 	teq	r3, ip
 80a44ee:	d103      	bne.n	80a44f8 <__aeabi_fmul+0x14c>
 80a44f0:	024b      	lsls	r3, r1, #9
 80a44f2:	bf18      	it	ne
 80a44f4:	4608      	movne	r0, r1
 80a44f6:	d108      	bne.n	80a450a <__aeabi_fmul+0x15e>
 80a44f8:	ea80 0001 	eor.w	r0, r0, r1
 80a44fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4500:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4504:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4508:	4770      	bx	lr
 80a450a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a450e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4512:	4770      	bx	lr

080a4514 <__aeabi_fdiv>:
 80a4514:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4518:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a451c:	bf1e      	ittt	ne
 80a451e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4522:	ea92 0f0c 	teqne	r2, ip
 80a4526:	ea93 0f0c 	teqne	r3, ip
 80a452a:	d069      	beq.n	80a4600 <__aeabi_fdiv+0xec>
 80a452c:	eba2 0203 	sub.w	r2, r2, r3
 80a4530:	ea80 0c01 	eor.w	ip, r0, r1
 80a4534:	0249      	lsls	r1, r1, #9
 80a4536:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a453a:	d037      	beq.n	80a45ac <__aeabi_fdiv+0x98>
 80a453c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4540:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4544:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4548:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a454c:	428b      	cmp	r3, r1
 80a454e:	bf38      	it	cc
 80a4550:	005b      	lslcc	r3, r3, #1
 80a4552:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4556:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a455a:	428b      	cmp	r3, r1
 80a455c:	bf24      	itt	cs
 80a455e:	1a5b      	subcs	r3, r3, r1
 80a4560:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4564:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4568:	bf24      	itt	cs
 80a456a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a456e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4572:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4576:	bf24      	itt	cs
 80a4578:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a457c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4580:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4584:	bf24      	itt	cs
 80a4586:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a458a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a458e:	011b      	lsls	r3, r3, #4
 80a4590:	bf18      	it	ne
 80a4592:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4596:	d1e0      	bne.n	80a455a <__aeabi_fdiv+0x46>
 80a4598:	2afd      	cmp	r2, #253	; 0xfd
 80a459a:	f63f af50 	bhi.w	80a443e <__aeabi_fmul+0x92>
 80a459e:	428b      	cmp	r3, r1
 80a45a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a45a4:	bf08      	it	eq
 80a45a6:	f020 0001 	biceq.w	r0, r0, #1
 80a45aa:	4770      	bx	lr
 80a45ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a45b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a45b4:	327f      	adds	r2, #127	; 0x7f
 80a45b6:	bfc2      	ittt	gt
 80a45b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a45bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a45c0:	4770      	bxgt	lr
 80a45c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a45c6:	f04f 0300 	mov.w	r3, #0
 80a45ca:	3a01      	subs	r2, #1
 80a45cc:	e737      	b.n	80a443e <__aeabi_fmul+0x92>
 80a45ce:	f092 0f00 	teq	r2, #0
 80a45d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a45d6:	bf02      	ittt	eq
 80a45d8:	0040      	lsleq	r0, r0, #1
 80a45da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a45de:	3a01      	subeq	r2, #1
 80a45e0:	d0f9      	beq.n	80a45d6 <__aeabi_fdiv+0xc2>
 80a45e2:	ea40 000c 	orr.w	r0, r0, ip
 80a45e6:	f093 0f00 	teq	r3, #0
 80a45ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a45ee:	bf02      	ittt	eq
 80a45f0:	0049      	lsleq	r1, r1, #1
 80a45f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a45f6:	3b01      	subeq	r3, #1
 80a45f8:	d0f9      	beq.n	80a45ee <__aeabi_fdiv+0xda>
 80a45fa:	ea41 010c 	orr.w	r1, r1, ip
 80a45fe:	e795      	b.n	80a452c <__aeabi_fdiv+0x18>
 80a4600:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4604:	ea92 0f0c 	teq	r2, ip
 80a4608:	d108      	bne.n	80a461c <__aeabi_fdiv+0x108>
 80a460a:	0242      	lsls	r2, r0, #9
 80a460c:	f47f af7d 	bne.w	80a450a <__aeabi_fmul+0x15e>
 80a4610:	ea93 0f0c 	teq	r3, ip
 80a4614:	f47f af70 	bne.w	80a44f8 <__aeabi_fmul+0x14c>
 80a4618:	4608      	mov	r0, r1
 80a461a:	e776      	b.n	80a450a <__aeabi_fmul+0x15e>
 80a461c:	ea93 0f0c 	teq	r3, ip
 80a4620:	d104      	bne.n	80a462c <__aeabi_fdiv+0x118>
 80a4622:	024b      	lsls	r3, r1, #9
 80a4624:	f43f af4c 	beq.w	80a44c0 <__aeabi_fmul+0x114>
 80a4628:	4608      	mov	r0, r1
 80a462a:	e76e      	b.n	80a450a <__aeabi_fmul+0x15e>
 80a462c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4630:	bf18      	it	ne
 80a4632:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4636:	d1ca      	bne.n	80a45ce <__aeabi_fdiv+0xba>
 80a4638:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a463c:	f47f af5c 	bne.w	80a44f8 <__aeabi_fmul+0x14c>
 80a4640:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4644:	f47f af3c 	bne.w	80a44c0 <__aeabi_fmul+0x114>
 80a4648:	e75f      	b.n	80a450a <__aeabi_fmul+0x15e>
 80a464a:	bf00      	nop

080a464c <__cxa_atexit>:
 80a464c:	b510      	push	{r4, lr}
 80a464e:	4c05      	ldr	r4, [pc, #20]	; (80a4664 <__cxa_atexit+0x18>)
 80a4650:	4613      	mov	r3, r2
 80a4652:	b12c      	cbz	r4, 80a4660 <__cxa_atexit+0x14>
 80a4654:	460a      	mov	r2, r1
 80a4656:	4601      	mov	r1, r0
 80a4658:	2002      	movs	r0, #2
 80a465a:	f3af 8000 	nop.w
 80a465e:	bd10      	pop	{r4, pc}
 80a4660:	4620      	mov	r0, r4
 80a4662:	bd10      	pop	{r4, pc}
 80a4664:	00000000 	.word	0x00000000

080a4668 <memcpy>:
 80a4668:	b510      	push	{r4, lr}
 80a466a:	1e43      	subs	r3, r0, #1
 80a466c:	440a      	add	r2, r1
 80a466e:	4291      	cmp	r1, r2
 80a4670:	d004      	beq.n	80a467c <memcpy+0x14>
 80a4672:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4676:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a467a:	e7f8      	b.n	80a466e <memcpy+0x6>
 80a467c:	bd10      	pop	{r4, pc}

080a467e <memset>:
 80a467e:	4603      	mov	r3, r0
 80a4680:	4402      	add	r2, r0
 80a4682:	4293      	cmp	r3, r2
 80a4684:	d002      	beq.n	80a468c <memset+0xe>
 80a4686:	f803 1b01 	strb.w	r1, [r3], #1
 80a468a:	e7fa      	b.n	80a4682 <memset+0x4>
 80a468c:	4770      	bx	lr
	...

080a4690 <srand>:
 80a4690:	b538      	push	{r3, r4, r5, lr}
 80a4692:	4b12      	ldr	r3, [pc, #72]	; (80a46dc <srand+0x4c>)
 80a4694:	4605      	mov	r5, r0
 80a4696:	681c      	ldr	r4, [r3, #0]
 80a4698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a469a:	b9d3      	cbnz	r3, 80a46d2 <srand+0x42>
 80a469c:	2018      	movs	r0, #24
 80a469e:	f7fe f845 	bl	80a272c <malloc>
 80a46a2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a46a6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a46a8:	8003      	strh	r3, [r0, #0]
 80a46aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a46ae:	8043      	strh	r3, [r0, #2]
 80a46b0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a46b4:	8083      	strh	r3, [r0, #4]
 80a46b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a46ba:	80c3      	strh	r3, [r0, #6]
 80a46bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a46c0:	8103      	strh	r3, [r0, #8]
 80a46c2:	2305      	movs	r3, #5
 80a46c4:	8143      	strh	r3, [r0, #10]
 80a46c6:	230b      	movs	r3, #11
 80a46c8:	8183      	strh	r3, [r0, #12]
 80a46ca:	2201      	movs	r2, #1
 80a46cc:	2300      	movs	r3, #0
 80a46ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a46d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a46d4:	2200      	movs	r2, #0
 80a46d6:	611d      	str	r5, [r3, #16]
 80a46d8:	615a      	str	r2, [r3, #20]
 80a46da:	bd38      	pop	{r3, r4, r5, pc}
 80a46dc:	2000007c 	.word	0x2000007c

080a46e0 <strlen>:
 80a46e0:	4603      	mov	r3, r0
 80a46e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a46e6:	2a00      	cmp	r2, #0
 80a46e8:	d1fb      	bne.n	80a46e2 <strlen+0x2>
 80a46ea:	1a18      	subs	r0, r3, r0
 80a46ec:	3801      	subs	r0, #1
 80a46ee:	4770      	bx	lr

080a46f0 <dynalib_user>:
 80a46f0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a4700:	0000 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
 80a4710:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80a4720:	4d53 4439 3153 002e 6f44 6275 656c 632d     SM9DS1..Double-c
 80a4730:	6568 6b63 7720 7269 6e69 2e67 4400 6665     heck wiring..Def
 80a4740:	7561 746c 7320 7465 6974 676e 2073 6e69     ault settings in
 80a4750:	7420 6968 2073 6b73 7465 6863 7720 6c69      this sketch wil
 80a4760:	206c 6f77 6b72 6620 726f 6120 206e 756f     l work for an ou
 80a4770:	2074 666f 7420 6568 6220 786f 4c20 4d53     t of the box LSM
 80a4780:	4439 3153 4220 6572 6b61 756f 2c74 6220     9DS1 Breakout, b
 80a4790:	7475 6d20 7961 6e20 6565 2064 6f74 6220     ut may need to b
 80a47a0:	2065 6f6d 6964 6966 6465 6920 2066 6874     e modified if th
 80a47b0:	2065 6f62 7261 2064 756a 706d 7265 2073     e board jumpers 
 80a47c0:	7261 2e65 6300 6c61 6269 6172 6974 6e6f     are..calibration
 80a47d0:	7320 6174 7472 6465 4300 6c61 6269 6172      started.Calibra
 80a47e0:	6974 6e6f 6620 6e69 7369 6568 0064 6553     tion finished.Se
 80a47f0:	7574 0070 5148 6f52 7475 7265 545f 7365     tup.HQRouter_Tes
 80a4800:	6974 676e 6943 6372 6975 0074 3a78 0020     tingCircuit.x: .
 80a4810:	5920 003a 5a20 003a 6120 3a76 0020 6950      Y:. Z:. av: .Pi
 80a4820:	6374 2068 203d 5200 6c6f 206c 3d20 0020     tch = .Roll  = .
 80a4830:	6159 2077 2020 203d 4100 6363 7065 6574     Yaw   = .Accepte
 80a4840:	2064 6172 676e 3a65 3a20 0020 2c20 0020     d range: : . , .
 80a4850:	6552 0064                                   Red.

080a4854 <CSWTCH.57>:
 80a4854:	0020 0000 0040 0000 0060 0000                ...@...`...

080a4860 <CSWTCH.215>:
 80a4860:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4870:	0050 0000                                   P...

080a4874 <_ZTV7TwoWire>:
	...
 80a487c:	2775 080a 27bf 080a 2797 080a 2777 080a     u'...'...'..w'..
 80a488c:	279f 080a 27a7 080a 27af 080a 27b7 080a     .'...'...'...'..

080a489c <_ZTV9IPAddress>:
	...
 80a48a4:	2833 080a 00b3 080a 0115 080a 6162 6475     3(..........baud
 80a48b4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a48c4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a48d4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a48e4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a48f4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a4904:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a4914:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a4924:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a4934:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a4944:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a4954:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
 80a4964:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 80a4974:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 80a4984:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

080a4994 <_ZTVN5spark12NetworkClassE>:
	...
 80a499c:	2911 080a 291b 080a 2925 080a 292f 080a     .)...)..%)../)..
 80a49ac:	2939 080a 2945 080a 2951 080a 295d 080a     9)..E)..Q)..])..
 80a49bc:	2965 080a 296f 080a 2979 080a               e)..o)..y)..

080a49c8 <_ZTV8SPIClass>:
	...
 80a49d0:	2b15 080a 2b17 080a                         .+...+..

080a49d8 <_ZL14clock_divisors>:
 80a49d8:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a49e8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a49f8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a4a08:	0000 0000                                   ....

080a4a0c <_ZTV3UDP>:
	...
 80a4a14:	00b9 080a 0123 080a 2d2b 080a 2e4b 080a     ....#...+-..K...
 80a4a24:	2d23 080a 2d41 080a 2d5f 080a 2d79 080a     #-..A-.._-..y-..
 80a4a34:	2d9b 080a 2de5 080a 2e07 080a 2f9d 080a     .-...-......./..
 80a4a44:	2eb1 080a 2d0d 080a 30ad 080a 2f19 080a     .....-...0.../..
 80a4a54:	2fd5 080a 30db 080a 2e75 080a 2d19 080a     ./...0..u....-..
 80a4a64:	2f7d 080a 2d1f 080a 2d7b 080a fff0 ffff     }/...-..{-......
 80a4a74:	0000 0000 2d93 080a                         .....-..

080a4a7c <_ZTV11USARTSerial>:
	...
 80a4a84:	3113 080a 3163 080a 3171 080a 29f5 080a     .1..c1..q1...)..
 80a4a94:	3127 080a 3149 080a 3135 080a 315d 080a     '1..I1..51..]1..
 80a4aa4:	3115 080a 3119 080a                         .1...1..

080a4aac <_ZTV9USBSerial>:
	...
 80a4ab4:	3219 080a 3269 080a 3277 080a 29f5 080a     .2..i2..w2...)..
 80a4ac4:	3255 080a 321b 080a 3231 080a 3263 080a     U2...2..12..c2..
 80a4ad4:	3247 080a 3215 080a                         G2...2..

080a4adc <_ZTVN5spark9WiFiClassE>:
	...
 80a4ae4:	3467 080a 345d 080a 3453 080a 33c5 080a     g4..]4..S4...3..
 80a4af4:	3447 080a 343b 080a 342f 080a 3427 080a     G4..;4../4..'4..
 80a4b04:	341d 080a 3413 080a 33cf 080a               .4...4...3..

080a4b10 <__sf_fake_stdin>:
	...

080a4b30 <__sf_fake_stdout>:
	...

080a4b50 <__sf_fake_stderr>:
	...
 80a4b70:	0043                                        C.

080a4b72 <link_const_variable_data_end>:
	...

080a4b74 <link_constructors_location>:
 80a4b74:	080a02f9 	.word	0x080a02f9
 80a4b78:	080a03d5 	.word	0x080a03d5
 80a4b7c:	080a0dc1 	.word	0x080a0dc1
 80a4b80:	080a1031 	.word	0x080a1031
 80a4b84:	080a22b9 	.word	0x080a22b9
 80a4b88:	080a22cd 	.word	0x080a22cd
 80a4b8c:	080a2901 	.word	0x080a2901
 80a4b90:	080a29e1 	.word	0x080a29e1
 80a4b94:	080a2af9 	.word	0x080a2af9
 80a4b98:	080a2ce1 	.word	0x080a2ce1
 80a4b9c:	080a2cf9 	.word	0x080a2cf9
 80a4ba0:	080a3471 	.word	0x080a3471
 80a4ba4:	080a3699 	.word	0x080a3699
 80a4ba8:	080a36c9 	.word	0x080a36c9
 80a4bac:	080a371d 	.word	0x080a371d
 80a4bb0:	080a37e1 	.word	0x080a37e1
 80a4bb4:	080a3865 	.word	0x080a3865
 80a4bb8:	080a38e9 	.word	0x080a38e9

080a4bbc <link_constructors_end>:
 80a4bbc:	00000000 	.word	0x00000000
