
/Users/ninjacat/Documents/Particle/TakeHeed/neopixelActivity/target/1.4.0/photon/neopixelActivity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2f80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2ff0  080a2ff0  00022ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3018  080a3018  00023018  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000aaf0d  00000000  00000000  0002301c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fbf7  00000000  00000000  000cdf29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001527a  00000000  00000000  000ddb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020e8  00000000  00000000  000f2d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000034c0  00000000  00000000  000f4e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002482a  00000000  00000000  000f8342  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023fa6  00000000  00000000  0011cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5d74  00000000  00000000  00140b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bbd8  00000000  00000000  001e6888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fd75 	bl	80a2b1c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fd7a 	bl	80a2b32 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2f84 	.word	0x080a2f84
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000067c 	.word	0x2000067c
 80a0058:	2000067c 	.word	0x2000067c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb2b 	bl	80a26b8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2f48 	.word	0x080a2f48
 80a0084:	080a2f80 	.word	0x080a2f80

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8c1 	bl	80a0214 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bad1 	b.w	80a263c <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 bc7d 	b.w	80a1998 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bc83 	b.w	80a19a8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f001 ff3e 	bl	80a1f40 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f002 f873 	bl	80a21b0 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a2de8 	.word	0x080a2de8

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f002 fbc6 	bl	80a286a <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f002 fbbc 	bl	80a286a <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

void setup() {
 80a00f8:	b570      	push	{r4, r5, r6, lr}
 80a00fa:	b096      	sub	sp, #88	; 0x58

    while(!Serial);
 80a00fc:	f002 f9aa 	bl	80a2454 <_Z16_fetch_usbserialv>
 80a0100:	f002 f98f 	bl	80a2422 <_ZN9USBSerialcvbEv>
 80a0104:	2800      	cmp	r0, #0
 80a0106:	d0f9      	beq.n	80a00fc <setup+0x4>
 80a0108:	4c2b      	ldr	r4, [pc, #172]	; (80a01b8 <setup+0xc0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a010a:	2300      	movs	r3, #0
 80a010c:	461a      	mov	r2, r3
 80a010e:	4619      	mov	r1, r3
 80a0110:	6860      	ldr	r0, [r4, #4]
 80a0112:	f001 fbe1 	bl	80a18d8 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0116:	2200      	movs	r2, #0
 80a0118:	4611      	mov	r1, r2
 80a011a:	6860      	ldr	r0, [r4, #4]
 80a011c:	4d26      	ldr	r5, [pc, #152]	; (80a01b8 <setup+0xc0>)
 80a011e:	f001 fbf3 	bl	80a1908 <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a0122:	2800      	cmp	r0, #0
 80a0124:	d0f7      	beq.n	80a0116 <setup+0x1e>
    Serial.println("Setup");
 80a0126:	f002 f995 	bl	80a2454 <_Z16_fetch_usbserialv>
 80a012a:	4924      	ldr	r1, [pc, #144]	; (80a01bc <setup+0xc4>)
 80a012c:	f001 fdb7 	bl	80a1c9e <_ZN5Print7printlnEPKc>
    udp.begin(localPort);
 80a0130:	4b23      	ldr	r3, [pc, #140]	; (80a01c0 <setup+0xc8>)
 80a0132:	2200      	movs	r2, #0
 80a0134:	8819      	ldrh	r1, [r3, #0]
 80a0136:	4823      	ldr	r0, [pc, #140]	; (80a01c4 <setup+0xcc>)
 80a0138:	f001 fedd 	bl	80a1ef6 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a013c:	2300      	movs	r3, #0
 80a013e:	4619      	mov	r1, r3
 80a0140:	4a21      	ldr	r2, [pc, #132]	; (80a01c8 <setup+0xd0>)
 80a0142:	6868      	ldr	r0, [r5, #4]
 80a0144:	f001 fc18 	bl	80a1978 <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a0148:	f002 f984 	bl	80a2454 <_Z16_fetch_usbserialv>
 80a014c:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a014e:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0150:	2240      	movs	r2, #64	; 0x40
 80a0152:	2100      	movs	r1, #0
 80a0154:	a806      	add	r0, sp, #24
 80a0156:	f002 fcec 	bl	80a2b32 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a015a:	2340      	movs	r3, #64	; 0x40
 80a015c:	aa06      	add	r2, sp, #24
 80a015e:	4621      	mov	r1, r4
 80a0160:	9400      	str	r4, [sp, #0]
 80a0162:	6868      	ldr	r0, [r5, #4]
 80a0164:	f001 fc10 	bl	80a1988 <network_get_hostname>
        return String(buf);
 80a0168:	a906      	add	r1, sp, #24
 80a016a:	a802      	add	r0, sp, #8
 80a016c:	f001 fe52 	bl	80a1e14 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0170:	9902      	ldr	r1, [sp, #8]
 80a0172:	4630      	mov	r0, r6
 80a0174:	f001 fd93 	bl	80a1c9e <_ZN5Print7printlnEPKc>
 80a0178:	a802      	add	r0, sp, #8
 80a017a:	f001 fe04 	bl	80a1d86 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a017e:	f002 f969 	bl	80a2454 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0182:	4622      	mov	r2, r4
 80a0184:	4606      	mov	r6, r0
 80a0186:	4621      	mov	r1, r4
 80a0188:	6868      	ldr	r0, [r5, #4]
 80a018a:	f001 fb9d 	bl	80a18c8 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a018e:	1c81      	adds	r1, r0, #2
 80a0190:	a806      	add	r0, sp, #24
 80a0192:	f001 fc8f 	bl	80a1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0196:	a906      	add	r1, sp, #24
 80a0198:	4630      	mov	r0, r6
 80a019a:	f001 fd8a 	bl	80a1cb2 <_ZN5Print7printlnERK9Printable>


  strip.setBrightness(BRIGHTNESS);
 80a019e:	2132      	movs	r1, #50	; 0x32
 80a01a0:	480a      	ldr	r0, [pc, #40]	; (80a01cc <setup+0xd4>)
 80a01a2:	f001 f9f3 	bl	80a158c <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a01a6:	4809      	ldr	r0, [pc, #36]	; (80a01cc <setup+0xd4>)
 80a01a8:	f000 f8ae 	bl	80a0308 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show(); // Initialize all pixels to 'off'
 80a01ac:	4807      	ldr	r0, [pc, #28]	; (80a01cc <setup+0xd4>)
 80a01ae:	f000 f8e1 	bl	80a0374 <_ZN17Adafruit_NeoPixel4showEv>
}
 80a01b2:	b016      	add	sp, #88	; 0x58
 80a01b4:	bd70      	pop	{r4, r5, r6, pc}
 80a01b6:	bf00      	nop
 80a01b8:	20000578 	.word	0x20000578
 80a01bc:	080a2bb8 	.word	0x080a2bb8
 80a01c0:	20000000 	.word	0x20000000
 80a01c4:	2000008c 	.word	0x2000008c
 80a01c8:	080a2bbe 	.word	0x080a2bbe
 80a01cc:	20000070 	.word	0x20000070

080a01d0 <_Z9colorWipemh>:
uint8_t blue(uint32_t c) {
  return (c);
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
 80a01d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a01d2:	460e      	mov	r6, r1
 80a01d4:	4607      	mov	r7, r0
  Serial.println("IN COLOR WIPE");
 80a01d6:	f002 f93d 	bl	80a2454 <_Z16_fetch_usbserialv>
 80a01da:	490c      	ldr	r1, [pc, #48]	; (80a020c <_Z9colorWipemh+0x3c>)
 80a01dc:	f001 fd5f 	bl	80a1c9e <_ZN5Print7printlnEPKc>
 80a01e0:	2400      	movs	r4, #0
  for(uint16_t i=0; i<strip.numPixels(); i++) {
 80a01e2:	480b      	ldr	r0, [pc, #44]	; (80a0210 <_Z9colorWipemh+0x40>)
 80a01e4:	f001 f9d0 	bl	80a1588 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a01e8:	b2a5      	uxth	r5, r4
 80a01ea:	4285      	cmp	r5, r0
 80a01ec:	f104 0401 	add.w	r4, r4, #1
 80a01f0:	d20b      	bcs.n	80a020a <_Z9colorWipemh+0x3a>
    strip.setPixelColor(i, c);
 80a01f2:	463a      	mov	r2, r7
 80a01f4:	4629      	mov	r1, r5
 80a01f6:	4806      	ldr	r0, [pc, #24]	; (80a0210 <_Z9colorWipemh+0x40>)
 80a01f8:	f001 f976 	bl	80a14e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
 80a01fc:	4804      	ldr	r0, [pc, #16]	; (80a0210 <_Z9colorWipemh+0x40>)
 80a01fe:	f000 f8b9 	bl	80a0374 <_ZN17Adafruit_NeoPixel4showEv>
    delay(wait);
 80a0202:	4630      	mov	r0, r6
 80a0204:	f001 fbe0 	bl	80a19c8 <delay>
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
  Serial.println("IN COLOR WIPE");
  for(uint16_t i=0; i<strip.numPixels(); i++) {
 80a0208:	e7eb      	b.n	80a01e2 <_Z9colorWipemh+0x12>
 80a020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a020c:	080a2bcf 	.word	0x080a2bcf
 80a0210:	20000070 	.word	0x20000070

080a0214 <loop>:
  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

void loop() {
 80a0214:	b508      	push	{r3, lr}
  // Some example procedures showing how to display to the pixels:
  // Do not run more than 15 seconds of these, or the b/g tasks
  // will be blocked.
  // --------------------------------------------------------------
  colorWipe(strip.Color(255, 0, 0), 50); // Red
 80a0216:	2200      	movs	r2, #0
 80a0218:	4611      	mov	r1, r2
 80a021a:	20ff      	movs	r0, #255	; 0xff
 80a021c:	f001 f9af 	bl	80a157e <_ZN17Adafruit_NeoPixel5ColorEhhh>

  // fullWhite();
  // delay(2000);

  // rainbowFade2White(3,3,1);
}
 80a0220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void loop() {
  // Some example procedures showing how to display to the pixels:
  // Do not run more than 15 seconds of these, or the b/g tasks
  // will be blocked.
  // --------------------------------------------------------------
  colorWipe(strip.Color(255, 0, 0), 50); // Red
 80a0224:	2132      	movs	r1, #50	; 0x32
 80a0226:	f7ff bfd3 	b.w	80a01d0 <_Z9colorWipemh>
	...

080a022c <_GLOBAL__sub_I_SystemMode>:
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
 80a022c:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a022e:	f001 f9fd 	bl	80a162c <HAL_Pin_Map>
#include <Particle.h>
// #include <Arduino.h>
// #include <math.h>
#include "neopixel.h"

SYSTEM_THREAD(ENABLED);
 80a0232:	2100      	movs	r1, #0
 80a0234:	2001      	movs	r0, #1
 80a0236:	f001 fb23 	bl	80a1880 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a023a:	4b15      	ldr	r3, [pc, #84]	; (80a0290 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a023c:	2200      	movs	r2, #0
 80a023e:	701a      	strb	r2, [r3, #0]
 80a0240:	805a      	strh	r2, [r3, #2]
 80a0242:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0246:	4d13      	ldr	r5, [pc, #76]	; (80a0294 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0248:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a024a:	2002      	movs	r0, #2
 80a024c:	f001 fb08 	bl	80a1860 <set_system_mode>
 80a0250:	4c11      	ldr	r4, [pc, #68]	; (80a0298 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a0252:	4628      	mov	r0, r5
 80a0254:	f001 fc20 	bl	80a1a98 <_ZN9IPAddressC1Ev>
 80a0258:	4628      	mov	r0, r5
int port;
UDP udp;
 80a025a:	4d10      	ldr	r5, [pc, #64]	; (80a029c <_GLOBAL__sub_I_SystemMode+0x70>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a025c:	4622      	mov	r2, r4
 80a025e:	4910      	ldr	r1, [pc, #64]	; (80a02a0 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a0260:	f002 fafe 	bl	80a2860 <__aeabi_atexit>
int port;
UDP udp;
 80a0264:	4628      	mov	r0, r5
 80a0266:	f001 ff85 	bl	80a2174 <_ZN3UDPC1Ev>
 80a026a:	4628      	mov	r0, r5
#define PIXEL_PIN D2
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a026c:	4d0d      	ldr	r5, [pc, #52]	; (80a02a4 <_GLOBAL__sub_I_SystemMode+0x78>)


unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a026e:	4622      	mov	r2, r4
 80a0270:	490d      	ldr	r1, [pc, #52]	; (80a02a8 <_GLOBAL__sub_I_SystemMode+0x7c>)
 80a0272:	f002 faf5 	bl	80a2860 <__aeabi_atexit>
#define PIXEL_PIN D2
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0276:	2306      	movs	r3, #6
 80a0278:	2202      	movs	r2, #2
 80a027a:	2114      	movs	r1, #20
 80a027c:	4628      	mov	r0, r5
 80a027e:	f000 f868 	bl	80a0352 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0282:	4622      	mov	r2, r4
 80a0284:	4628      	mov	r0, r5
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
 80a0286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define PIXEL_PIN D2
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a028a:	4908      	ldr	r1, [pc, #32]	; (80a02ac <_GLOBAL__sub_I_SystemMode+0x80>)
 80a028c:	f002 bae8 	b.w	80a2860 <__aeabi_atexit>
 80a0290:	20000084 	.word	0x20000084
 80a0294:	200000d8 	.word	0x200000d8
 80a0298:	2000006c 	.word	0x2000006c
 80a029c:	2000008c 	.word	0x2000008c
 80a02a0:	080a00b3 	.word	0x080a00b3
 80a02a4:	20000070 	.word	0x20000070
 80a02a8:	080a00b5 	.word	0x080a00b5
 80a02ac:	080a02b5 	.word	0x080a02b5

080a02b0 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a02b0:	f001 b9ac 	b.w	80a160c <HAL_Timer_Get_Micro_Seconds>

080a02b4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a02b4:	b510      	push	{r4, lr}
 80a02b6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a02b8:	68c0      	ldr	r0, [r0, #12]
 80a02ba:	b108      	cbz	r0, 80a02c0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a02bc:	f001 fb74 	bl	80a19a8 <free>
  if (begun) pinMode(pin, INPUT);
 80a02c0:	7823      	ldrb	r3, [r4, #0]
 80a02c2:	b11b      	cbz	r3, 80a02cc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a02c4:	2100      	movs	r1, #0
 80a02c6:	79e0      	ldrb	r0, [r4, #7]
 80a02c8:	f002 fa46 	bl	80a2758 <pinMode>
}
 80a02cc:	4620      	mov	r0, r4
 80a02ce:	bd10      	pop	{r4, pc}

080a02d0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02d0:	b538      	push	{r3, r4, r5, lr}
 80a02d2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a02d4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02d6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a02d8:	b108      	cbz	r0, 80a02de <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a02da:	f001 fb65 	bl	80a19a8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a02de:	79a3      	ldrb	r3, [r4, #6]
 80a02e0:	2b06      	cmp	r3, #6
 80a02e2:	bf0c      	ite	eq
 80a02e4:	2004      	moveq	r0, #4
 80a02e6:	2003      	movne	r0, #3
 80a02e8:	4368      	muls	r0, r5
 80a02ea:	b280      	uxth	r0, r0
 80a02ec:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a02ee:	f001 fb53 	bl	80a1998 <malloc>
 80a02f2:	60e0      	str	r0, [r4, #12]
 80a02f4:	b128      	cbz	r0, 80a0302 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a02f6:	88a2      	ldrh	r2, [r4, #4]
 80a02f8:	2100      	movs	r1, #0
 80a02fa:	f002 fc1a 	bl	80a2b32 <memset>
    numLEDs = n;
 80a02fe:	8065      	strh	r5, [r4, #2]
 80a0300:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0302:	80a0      	strh	r0, [r4, #4]
 80a0304:	8060      	strh	r0, [r4, #2]
 80a0306:	bd38      	pop	{r3, r4, r5, pc}

080a0308 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0308:	b510      	push	{r4, lr}
 80a030a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a030c:	2101      	movs	r1, #1
 80a030e:	79c0      	ldrb	r0, [r0, #7]
 80a0310:	f002 fa22 	bl	80a2758 <pinMode>
  digitalWrite(pin, LOW);
 80a0314:	2100      	movs	r1, #0
 80a0316:	79e0      	ldrb	r0, [r4, #7]
 80a0318:	f002 fa2f 	bl	80a277a <digitalWrite>
  begun = true;
 80a031c:	2301      	movs	r3, #1
 80a031e:	7023      	strb	r3, [r4, #0]
 80a0320:	bd10      	pop	{r4, pc}

080a0322 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0322:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0324:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0326:	4605      	mov	r5, r0
 80a0328:	460c      	mov	r4, r1
    if (begun) {
 80a032a:	b11b      	cbz	r3, 80a0334 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a032c:	2100      	movs	r1, #0
 80a032e:	79c0      	ldrb	r0, [r0, #7]
 80a0330:	f002 fa12 	bl	80a2758 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0334:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0336:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0338:	b153      	cbz	r3, 80a0350 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a033a:	b2a4      	uxth	r4, r4
 80a033c:	4620      	mov	r0, r4
 80a033e:	2101      	movs	r1, #1
 80a0340:	f002 fa0a 	bl	80a2758 <pinMode>
        digitalWrite(p, LOW);
 80a0344:	4620      	mov	r0, r4
    }
}
 80a0346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a034a:	2100      	movs	r1, #0
 80a034c:	f002 ba15 	b.w	80a277a <digitalWrite>
 80a0350:	bd38      	pop	{r3, r4, r5, pc}

080a0352 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0352:	b570      	push	{r4, r5, r6, lr}
 80a0354:	4604      	mov	r4, r0
 80a0356:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0358:	2500      	movs	r5, #0
 80a035a:	7183      	strb	r3, [r0, #6]
 80a035c:	7005      	strb	r5, [r0, #0]
 80a035e:	7205      	strb	r5, [r0, #8]
 80a0360:	60c5      	str	r5, [r0, #12]
 80a0362:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0364:	f7ff ffb4 	bl	80a02d0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0368:	4620      	mov	r0, r4
 80a036a:	4631      	mov	r1, r6
 80a036c:	f7ff ffd9 	bl	80a0322 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0370:	4620      	mov	r0, r4
 80a0372:	bd70      	pop	{r4, r5, r6, pc}

080a0374 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0374:	68c3      	ldr	r3, [r0, #12]
 80a0376:	2b00      	cmp	r3, #0
 80a0378:	f000 858e 	beq.w	80a0e98 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0380:	4604      	mov	r4, r0
 80a0382:	7983      	ldrb	r3, [r0, #6]
 80a0384:	b086      	sub	sp, #24
 80a0386:	3b02      	subs	r3, #2
 80a0388:	b2db      	uxtb	r3, r3
 80a038a:	2b04      	cmp	r3, #4
 80a038c:	bf96      	itet	ls
 80a038e:	4a29      	ldrls	r2, [pc, #164]	; (80a0434 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0390:	2532      	movhi	r5, #50	; 0x32
 80a0392:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0396:	f7ff ff8b 	bl	80a02b0 <micros>
 80a039a:	6923      	ldr	r3, [r4, #16]
 80a039c:	1ac0      	subs	r0, r0, r3
 80a039e:	42a8      	cmp	r0, r5
 80a03a0:	d3f9      	bcc.n	80a0396 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a03a2:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03a4:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a03a6:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03a8:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a03aa:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a03ae:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03b2:	f000 8272 	beq.w	80a089a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a03b6:	2907      	cmp	r1, #7
 80a03b8:	f000 826f 	beq.w	80a089a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a03bc:	2906      	cmp	r1, #6
 80a03be:	f000 8432 	beq.w	80a0c26 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a03c2:	2905      	cmp	r1, #5
 80a03c4:	f000 83ab 	beq.w	80a0b1e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a03c8:	2908      	cmp	r1, #8
 80a03ca:	f000 83a8 	beq.w	80a0b1e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a03ce:	2900      	cmp	r1, #0
 80a03d0:	f040 8563 	bne.w	80a0e9a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a03d4:	4a18      	ldr	r2, [pc, #96]	; (80a0438 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a03d6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a03da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03de:	b29b      	uxth	r3, r3
 80a03e0:	2b00      	cmp	r3, #0
 80a03e2:	f000 8395 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a03e6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a03e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03ec:	f10e 0503 	add.w	r5, lr, #3
 80a03f0:	3b03      	subs	r3, #3
 80a03f2:	b29b      	uxth	r3, r3
 80a03f4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a03f8:	f89e 3000 	ldrb.w	r3, [lr]
 80a03fc:	b2db      	uxtb	r3, r3
 80a03fe:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0402:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0406:	b2db      	uxtb	r3, r3
 80a0408:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a040c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0410:	b2db      	uxtb	r3, r3
 80a0412:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0416:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a041a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a041e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0422:	021b      	lsls	r3, r3, #8
 80a0424:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0428:	4303      	orrs	r3, r0
 80a042a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a042c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0430:	e11b      	b.n	80a066a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0432:	bf00      	nop
 80a0434:	080a2c3c 	.word	0x080a2c3c
 80a0438:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a043c:	4600      	mov	r0, r0
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0544:	79e3      	ldrb	r3, [r4, #7]
 80a0546:	6810      	ldr	r0, [r2, #0]
 80a0548:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a054c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0550:	88bf      	ldrh	r7, [r7, #4]
 80a0552:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0556:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0558:	4600      	mov	r0, r0
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0652:	9b04      	ldr	r3, [sp, #16]
 80a0654:	085b      	lsrs	r3, r3, #1
 80a0656:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0658:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a065c:	3301      	adds	r3, #1
 80a065e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0660:	2b17      	cmp	r3, #23
 80a0662:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0666:	f200 82db 	bhi.w	80a0c20 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a066a:	79e3      	ldrb	r3, [r4, #7]
 80a066c:	6810      	ldr	r0, [r2, #0]
 80a066e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0672:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0676:	88bf      	ldrh	r7, [r7, #4]
 80a0678:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a067c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a067e:	9803      	ldr	r0, [sp, #12]
 80a0680:	9b04      	ldr	r3, [sp, #16]
 80a0682:	4218      	tst	r0, r3
 80a0684:	f47f aeda 	bne.w	80a043c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0688:	4600      	mov	r0, r0
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a06da:	79e3      	ldrb	r3, [r4, #7]
 80a06dc:	6810      	ldr	r0, [r2, #0]
 80a06de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06e6:	88bf      	ldrh	r7, [r7, #4]
 80a06e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a06ec:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a06ee:	4600      	mov	r0, r0
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	e6db      	b.n	80a0652 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a089a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a089e:	4a17      	ldr	r2, [pc, #92]	; (80a08fc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a08a0:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a08a2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a08a6:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a08a8:	2b00      	cmp	r3, #0
 80a08aa:	f000 8131 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a08ae:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a08b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a08b4:	f10e 0103 	add.w	r1, lr, #3
 80a08b8:	3b03      	subs	r3, #3
 80a08ba:	b29b      	uxth	r3, r3
 80a08bc:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a08c0:	f89e 3000 	ldrb.w	r3, [lr]
 80a08c4:	b2db      	uxtb	r3, r3
 80a08c6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a08ca:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a08ce:	b2db      	uxtb	r3, r3
 80a08d0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a08d4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a08d8:	b2db      	uxtb	r3, r3
 80a08da:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a08de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a08e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a08e6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a08ea:	0200      	lsls	r0, r0, #8
 80a08ec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a08f0:	433b      	orrs	r3, r7
 80a08f2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a08f4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a08f8:	e080      	b.n	80a09fc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a08fa:	bf00      	nop
 80a08fc:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0900:	4600      	mov	r0, r0
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a099a:	79e3      	ldrb	r3, [r4, #7]
 80a099c:	6810      	ldr	r0, [r2, #0]
 80a099e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09a6:	88bf      	ldrh	r7, [r7, #4]
 80a09a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09ac:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09ae:	4600      	mov	r0, r0
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a09e4:	9b04      	ldr	r3, [sp, #16]
 80a09e6:	085b      	lsrs	r3, r3, #1
 80a09e8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a09ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a09ee:	3301      	adds	r3, #1
 80a09f0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a09f2:	2b17      	cmp	r3, #23
 80a09f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09f8:	f200 8083 	bhi.w	80a0b02 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a09fc:	79e3      	ldrb	r3, [r4, #7]
 80a09fe:	6810      	ldr	r0, [r2, #0]
 80a0a00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a04:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a08:	88bf      	ldrh	r7, [r7, #4]
 80a0a0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a0e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a10:	9803      	ldr	r0, [sp, #12]
 80a0a12:	9b04      	ldr	r3, [sp, #16]
 80a0a14:	4218      	tst	r0, r3
 80a0a16:	f47f af73 	bne.w	80a0900 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a1a:	4600      	mov	r0, r0
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0a42:	79e3      	ldrb	r3, [r4, #7]
 80a0a44:	6810      	ldr	r0, [r2, #0]
 80a0a46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a4a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a4e:	88bf      	ldrh	r7, [r7, #4]
 80a0a50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a54:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a56:	4600      	mov	r0, r0
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	e770      	b.n	80a09e4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b06:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b08:	b29b      	uxth	r3, r3
 80a0b0a:	2b00      	cmp	r3, #0
 80a0b0c:	f47f aecf 	bne.w	80a08ae <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b10:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b12:	f7ff fbcd 	bl	80a02b0 <micros>
 80a0b16:	6120      	str	r0, [r4, #16]
}
 80a0b18:	b006      	add	sp, #24
 80a0b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b1e:	4b5e      	ldr	r3, [pc, #376]	; (80a0c98 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0b20:	4a5e      	ldr	r2, [pc, #376]	; (80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b22:	4618      	mov	r0, r3
 80a0b24:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0b26:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0b2a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b2c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b30:	b292      	uxth	r2, r2
 80a0b32:	2a00      	cmp	r2, #0
 80a0b34:	d0ec      	beq.n	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0b36:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0b3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b3e:	f10e 0503 	add.w	r5, lr, #3
 80a0b42:	3a03      	subs	r2, #3
 80a0b44:	b292      	uxth	r2, r2
 80a0b46:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0b4a:	f89e 2000 	ldrb.w	r2, [lr]
 80a0b4e:	b2d2      	uxtb	r2, r2
 80a0b50:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0b54:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0b58:	b2d2      	uxtb	r2, r2
 80a0b5a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b5e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0b62:	b2d2      	uxtb	r2, r2
 80a0b64:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0b6c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0b70:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0b74:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0b78:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0b7c:	ea42 020c 	orr.w	r2, r2, ip
 80a0b80:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b82:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0b86:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b88:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0b8a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b8e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b92:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b9a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0b9c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0ba0:	9e03      	ldr	r6, [sp, #12]
 80a0ba2:	9a04      	ldr	r2, [sp, #16]
 80a0ba4:	4216      	tst	r6, r2
 80a0ba6:	d023      	beq.n	80a0bf0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0ba8:	685a      	ldr	r2, [r3, #4]
 80a0baa:	9e05      	ldr	r6, [sp, #20]
 80a0bac:	1b92      	subs	r2, r2, r6
 80a0bae:	2a4f      	cmp	r2, #79	; 0x4f
 80a0bb0:	d9fa      	bls.n	80a0ba8 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0bb2:	79e2      	ldrb	r2, [r4, #7]
 80a0bb4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0bb8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0bbc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0bc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0bc4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0bc8:	6842      	ldr	r2, [r0, #4]
 80a0bca:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0bcc:	685a      	ldr	r2, [r3, #4]
 80a0bce:	9e05      	ldr	r6, [sp, #20]
 80a0bd0:	1b92      	subs	r2, r2, r6
 80a0bd2:	2a07      	cmp	r2, #7
 80a0bd4:	d9fa      	bls.n	80a0bcc <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0bd6:	9a04      	ldr	r2, [sp, #16]
 80a0bd8:	0852      	lsrs	r2, r2, #1
 80a0bda:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bdc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0be0:	3201      	adds	r2, #1
 80a0be2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0be4:	2a17      	cmp	r2, #23
 80a0be6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0bea:	d9cc      	bls.n	80a0b86 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0bec:	46ae      	mov	lr, r5
 80a0bee:	e79d      	b.n	80a0b2c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0bf0:	685a      	ldr	r2, [r3, #4]
 80a0bf2:	9e05      	ldr	r6, [sp, #20]
 80a0bf4:	1b92      	subs	r2, r2, r6
 80a0bf6:	2a18      	cmp	r2, #24
 80a0bf8:	d9fa      	bls.n	80a0bf0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0bfa:	79e2      	ldrb	r2, [r4, #7]
 80a0bfc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c00:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c04:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c0c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c10:	6842      	ldr	r2, [r0, #4]
 80a0c12:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0c14:	685a      	ldr	r2, [r3, #4]
 80a0c16:	9e05      	ldr	r6, [sp, #20]
 80a0c18:	1b92      	subs	r2, r2, r6
 80a0c1a:	2a45      	cmp	r2, #69	; 0x45
 80a0c1c:	d9fa      	bls.n	80a0c14 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0c1e:	e7da      	b.n	80a0bd6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0c20:	46ae      	mov	lr, r5
 80a0c22:	f7ff bbda 	b.w	80a03da <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0c26:	4a1d      	ldr	r2, [pc, #116]	; (80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0c28:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0c2c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0c2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c32:	b29b      	uxth	r3, r3
 80a0c34:	2b00      	cmp	r3, #0
 80a0c36:	f43f af6b 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0c3a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0c3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c40:	f10e 0104 	add.w	r1, lr, #4
 80a0c44:	3b04      	subs	r3, #4
 80a0c46:	b29b      	uxth	r3, r3
 80a0c48:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0c4c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0c50:	b2db      	uxtb	r3, r3
 80a0c52:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0c56:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0c5a:	b2db      	uxtb	r3, r3
 80a0c5c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c60:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c64:	b2db      	uxtb	r3, r3
 80a0c66:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0c6a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0c6e:	b2db      	uxtb	r3, r3
 80a0c70:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0c78:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0c7c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0c80:	043f      	lsls	r7, r7, #16
 80a0c82:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0c86:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0c8a:	4303      	orrs	r3, r0
 80a0c8c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0c90:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0c92:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0c96:	e07e      	b.n	80a0d96 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0c98:	e0001000 	.word	0xe0001000
 80a0c9c:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ca0:	4600      	mov	r0, r0
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d0e:	79e3      	ldrb	r3, [r4, #7]
 80a0d10:	6810      	ldr	r0, [r2, #0]
 80a0d12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d16:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d1a:	88bf      	ldrh	r7, [r7, #4]
 80a0d1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d20:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d22:	4600      	mov	r0, r0
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d80:	9b04      	ldr	r3, [sp, #16]
 80a0d82:	085b      	lsrs	r3, r3, #1
 80a0d84:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0d86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d8a:	3301      	adds	r3, #1
 80a0d8c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0d8e:	2b1f      	cmp	r3, #31
 80a0d90:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d94:	d87e      	bhi.n	80a0e94 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0d96:	79e3      	ldrb	r3, [r4, #7]
 80a0d98:	6810      	ldr	r0, [r2, #0]
 80a0d9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d9e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0da2:	88bf      	ldrh	r7, [r7, #4]
 80a0da4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0da8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0daa:	9803      	ldr	r0, [sp, #12]
 80a0dac:	9b04      	ldr	r3, [sp, #16]
 80a0dae:	4218      	tst	r0, r3
 80a0db0:	f47f af76 	bne.w	80a0ca0 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0db4:	4600      	mov	r0, r0
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0ddc:	79e3      	ldrb	r3, [r4, #7]
 80a0dde:	6810      	ldr	r0, [r2, #0]
 80a0de0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0de4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0de8:	88bf      	ldrh	r7, [r7, #4]
 80a0dea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dee:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0df0:	4600      	mov	r0, r0
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	e775      	b.n	80a0d80 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0e94:	468e      	mov	lr, r1
 80a0e96:	e6ca      	b.n	80a0c2e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0e98:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0e9a:	2903      	cmp	r1, #3
 80a0e9c:	f000 812e 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ea0:	4a1e      	ldr	r2, [pc, #120]	; (80a0f1c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0ea2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0ea6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ea8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0eac:	b29b      	uxth	r3, r3
 80a0eae:	2b00      	cmp	r3, #0
 80a0eb0:	f43f ae2e 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0eb4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0eb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eba:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0ebc:	3b03      	subs	r3, #3
 80a0ebe:	b29b      	uxth	r3, r3
 80a0ec0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ec4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ec8:	f10e 0103 	add.w	r1, lr, #3
 80a0ecc:	b2db      	uxtb	r3, r3
 80a0ece:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ed2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ed6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0eda:	b2db      	uxtb	r3, r3
 80a0edc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0ee0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ee4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0ee8:	b2db      	uxtb	r3, r3
 80a0eea:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0eee:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0ef2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ef6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0efa:	021b      	lsls	r3, r3, #8
 80a0efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f00:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f04:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f08:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f0c:	433b      	orrs	r3, r7
 80a0f0e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f10:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0f14:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0f18:	e07d      	b.n	80a1016 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0f1a:	bf00      	nop
 80a0f1c:	200000f0 	.word	0x200000f0
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f20:	9b04      	ldr	r3, [sp, #16]
 80a0f22:	085b      	lsrs	r3, r3, #1
 80a0f24:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f26:	4600      	mov	r0, r0
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fac:	79e0      	ldrb	r0, [r4, #7]
 80a0fae:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0fb8:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a0fbc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0fc0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fc4:	3301      	adds	r3, #1
 80a0fc6:	b2db      	uxtb	r3, r3
 80a0fc8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fcc:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fd0:	4600      	mov	r0, r0
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
          if(j==24) break;
 80a0ffa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ffe:	2b18      	cmp	r3, #24
 80a1000:	d07a      	beq.n	80a10f8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1002:	79e3      	ldrb	r3, [r4, #7]
 80a1004:	6810      	ldr	r0, [r2, #0]
 80a1006:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a100a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a100e:	88bf      	ldrh	r7, [r7, #4]
 80a1010:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1014:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1016:	9803      	ldr	r0, [sp, #12]
 80a1018:	9b04      	ldr	r3, [sp, #16]
 80a101a:	4218      	tst	r0, r3
 80a101c:	d180      	bne.n	80a0f20 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a101e:	4600      	mov	r0, r0
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1040:	79e3      	ldrb	r3, [r4, #7]
 80a1042:	6810      	ldr	r0, [r2, #0]
 80a1044:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1048:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a104c:	88bf      	ldrh	r7, [r7, #4]
 80a104e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1052:	831f      	strh	r7, [r3, #24]
          j++;
 80a1054:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1058:	3301      	adds	r3, #1
 80a105a:	b2db      	uxtb	r3, r3
 80a105c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1060:	9b04      	ldr	r3, [sp, #16]
 80a1062:	085b      	lsrs	r3, r3, #1
 80a1064:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1066:	4600      	mov	r0, r0
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
          if(j==24) break;
 80a10f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10f4:	2b18      	cmp	r3, #24
 80a10f6:	d184      	bne.n	80a1002 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a10f8:	468e      	mov	lr, r1
 80a10fa:	e6d5      	b.n	80a0ea8 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a10fc:	4a17      	ldr	r2, [pc, #92]	; (80a115c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10fe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1102:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1104:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1108:	b29b      	uxth	r3, r3
 80a110a:	2b00      	cmp	r3, #0
 80a110c:	f43f ad00 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1110:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1112:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1116:	f10e 0103 	add.w	r1, lr, #3
 80a111a:	3b03      	subs	r3, #3
 80a111c:	b29b      	uxth	r3, r3
 80a111e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1122:	f89e 3000 	ldrb.w	r3, [lr]
 80a1126:	b2db      	uxtb	r3, r3
 80a1128:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a112c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1130:	b2db      	uxtb	r3, r3
 80a1132:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1136:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a113a:	b2db      	uxtb	r3, r3
 80a113c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1140:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1144:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1148:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a114c:	021b      	lsls	r3, r3, #8
 80a114e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1152:	4303      	orrs	r3, r0
 80a1154:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1156:	f88d 6005 	strb.w	r6, [sp, #5]
 80a115a:	e0e0      	b.n	80a131e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a115c:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1160:	4600      	mov	r0, r0
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1282:	79e3      	ldrb	r3, [r4, #7]
 80a1284:	6810      	ldr	r0, [r2, #0]
 80a1286:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a128a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a128e:	88bf      	ldrh	r7, [r7, #4]
 80a1290:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1294:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1296:	4600      	mov	r0, r0
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1306:	9b04      	ldr	r3, [sp, #16]
 80a1308:	085b      	lsrs	r3, r3, #1
 80a130a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a130c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1310:	3301      	adds	r3, #1
 80a1312:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1314:	2b17      	cmp	r3, #23
 80a1316:	f88d 3005 	strb.w	r3, [sp, #5]
 80a131a:	f200 80e3 	bhi.w	80a14e4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a131e:	79e3      	ldrb	r3, [r4, #7]
 80a1320:	6810      	ldr	r0, [r2, #0]
 80a1322:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1326:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a132a:	88bf      	ldrh	r7, [r7, #4]
 80a132c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1330:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1332:	9803      	ldr	r0, [sp, #12]
 80a1334:	9b04      	ldr	r3, [sp, #16]
 80a1336:	4218      	tst	r0, r3
 80a1338:	f47f af12 	bne.w	80a1160 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a133c:	4600      	mov	r0, r0
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a13be:	79e3      	ldrb	r3, [r4, #7]
 80a13c0:	6810      	ldr	r0, [r2, #0]
 80a13c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13c6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13ca:	88bf      	ldrh	r7, [r7, #4]
 80a13cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13d0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13d2:	4600      	mov	r0, r0
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	e710      	b.n	80a1306 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a14e4:	468e      	mov	lr, r1
 80a14e6:	e60d      	b.n	80a1104 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a14e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a14e8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a14ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a14ec:	428b      	cmp	r3, r1
 80a14ee:	d945      	bls.n	80a157c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a14f0:	7a05      	ldrb	r5, [r0, #8]
 80a14f2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a14f6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a14fa:	b2d6      	uxtb	r6, r2
 80a14fc:	b145      	cbz	r5, 80a1510 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a14fe:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1500:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1502:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1504:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1508:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a150c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1510:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1514:	68c7      	ldr	r7, [r0, #12]
 80a1516:	f1bc 0f06 	cmp.w	ip, #6
 80a151a:	bf0c      	ite	eq
 80a151c:	2504      	moveq	r5, #4
 80a151e:	2503      	movne	r5, #3
 80a1520:	4369      	muls	r1, r5
 80a1522:	f1bc 0f08 	cmp.w	ip, #8
 80a1526:	eb07 0501 	add.w	r5, r7, r1
 80a152a:	d824      	bhi.n	80a1576 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a152c:	f04f 0e01 	mov.w	lr, #1
 80a1530:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1534:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1538:	d10c      	bne.n	80a1554 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a153a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a153e:	d10d      	bne.n	80a155c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1540:	f01e 0f10 	tst.w	lr, #16
 80a1544:	d017      	beq.n	80a1576 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1546:	2bff      	cmp	r3, #255	; 0xff
 80a1548:	bf08      	it	eq
 80a154a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a154c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a154e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1550:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1554:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1556:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1558:	70ae      	strb	r6, [r5, #2]
        } break;
 80a155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a155c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a155e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1560:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1562:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1564:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1566:	b90b      	cbnz	r3, 80a156c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1568:	b2d2      	uxtb	r2, r2
 80a156a:	e002      	b.n	80a1572 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a156c:	435a      	muls	r2, r3
 80a156e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1572:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1574:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1576:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1578:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a157a:	70ae      	strb	r6, [r5, #2]
 80a157c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a157e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a157e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1582:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1586:	4770      	bx	lr

080a1588 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a1588:	8840      	ldrh	r0, [r0, #2]
 80a158a:	4770      	bx	lr

080a158c <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a158c:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a158e:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1590:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a1592:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1594:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1596:	d01e      	beq.n	80a15d6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1598:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a159a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a159e:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a15a0:	d00c      	beq.n	80a15bc <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a15a2:	29ff      	cmp	r1, #255	; 0xff
 80a15a4:	bf0f      	iteee	eq
 80a15a6:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a15aa:	0211      	lslne	r1, r2, #8
 80a15ac:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a15b0:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a15b4:	bf0c      	ite	eq
 80a15b6:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a15ba:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a15bc:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15be:	1b29      	subs	r1, r5, r4
 80a15c0:	8886      	ldrh	r6, [r0, #4]
 80a15c2:	b289      	uxth	r1, r1
 80a15c4:	428e      	cmp	r6, r1
 80a15c6:	d905      	bls.n	80a15d4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a15c8:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a15ca:	4359      	muls	r1, r3
 80a15cc:	1209      	asrs	r1, r1, #8
 80a15ce:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15d2:	e7f4      	b.n	80a15be <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a15d4:	7202      	strb	r2, [r0, #8]
 80a15d6:	bd70      	pop	{r4, r5, r6, pc}

080a15d8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	f000 f827 	bl	80a162c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a15de:	f000 f825 	bl	80a162c <HAL_Pin_Map>
 80a15e2:	4b01      	ldr	r3, [pc, #4]	; (80a15e8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a15e4:	6018      	str	r0, [r3, #0]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	200000f0 	.word	0x200000f0

080a15ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <os_mutex_create+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601d0 	.word	0x080601d0

080a15fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <HAL_RNG_GetRandomNumber+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	685b      	ldr	r3, [r3, #4]
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	0806019c 	.word	0x0806019c

080a160c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	691b      	ldr	r3, [r3, #16]
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	0806019c 	.word	0x0806019c

080a161c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	695b      	ldr	r3, [r3, #20]
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	0806019c 	.word	0x0806019c

080a162c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <HAL_Pin_Map+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	681b      	ldr	r3, [r3, #0]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601b0 	.word	0x080601b0

080a163c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_Pin_Mode+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	689b      	ldr	r3, [r3, #8]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601b0 	.word	0x080601b0

080a164c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_Get_Pin_Mode+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	68db      	ldr	r3, [r3, #12]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601b0 	.word	0x080601b0

080a165c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_GPIO_Write+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	691b      	ldr	r3, [r3, #16]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601b0 	.word	0x080601b0

080a166c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_I2C_Write_Data+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601ac 	.word	0x080601ac

080a167c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_I2C_Available_Data+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601ac 	.word	0x080601ac

080a168c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_I2C_Read_Data+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601ac 	.word	0x080601ac

080a169c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_I2C_Peek_Data+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601ac 	.word	0x080601ac

080a16ac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <HAL_I2C_Flush_Data+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601ac 	.word	0x080601ac

080a16bc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <HAL_I2C_Is_Enabled+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601ac 	.word	0x080601ac

080a16cc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b03      	ldr	r3, [pc, #12]	; (80a16dc <HAL_I2C_Init+0x10>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a16d6:	9301      	str	r3, [sp, #4]
 80a16d8:	bd08      	pop	{r3, pc}
 80a16da:	0000      	.short	0x0000
 80a16dc:	080601ac 	.word	0x080601ac

080a16e0 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <socket_handle_valid+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	685b      	ldr	r3, [r3, #4]
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601bc 	.word	0x080601bc

080a16f0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <socket_create+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	689b      	ldr	r3, [r3, #8]
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601bc 	.word	0x080601bc

080a1700 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <socket_receivefrom+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	695b      	ldr	r3, [r3, #20]
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601bc 	.word	0x080601bc

080a1710 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <socket_sendto+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	69db      	ldr	r3, [r3, #28]
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601bc 	.word	0x080601bc

080a1720 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <socket_close+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	6a1b      	ldr	r3, [r3, #32]
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601bc 	.word	0x080601bc

080a1730 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <socket_handle_invalid+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601bc 	.word	0x080601bc

080a1740 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_SPI_Init+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	69db      	ldr	r3, [r3, #28]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601b4 	.word	0x080601b4

080a1750 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_SPI_Is_Enabled+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	6a1b      	ldr	r3, [r3, #32]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601b4 	.word	0x080601b4

080a1760 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <HAL_USART_Init+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	699b      	ldr	r3, [r3, #24]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c4 	.word	0x080601c4

080a1770 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <HAL_USART_Write_Data+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c4 	.word	0x080601c4

080a1780 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_USART_Available_Data+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c4 	.word	0x080601c4

080a1790 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <HAL_USART_Read_Data+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601c4 	.word	0x080601c4

080a17a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <HAL_USART_Peek_Data+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601c4 	.word	0x080601c4

080a17b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_USART_Flush_Data+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601c4 	.word	0x080601c4

080a17c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_USART_Is_Enabled+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601c4 	.word	0x080601c4

080a17d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <HAL_USART_Available_Data_For_Write+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601c4 	.word	0x080601c4

080a17e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_USB_USART_Init+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	681b      	ldr	r3, [r3, #0]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601d8 	.word	0x080601d8

080a17f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_USB_USART_Available_Data+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	691b      	ldr	r3, [r3, #16]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d8 	.word	0x080601d8

080a1800 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	695b      	ldr	r3, [r3, #20]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d8 	.word	0x080601d8

080a1810 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_USB_USART_Receive_Data+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	699b      	ldr	r3, [r3, #24]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601d8 	.word	0x080601d8

080a1820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_USB_USART_Send_Data+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	69db      	ldr	r3, [r3, #28]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601d8 	.word	0x080601d8

080a1830 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_USB_USART_Flush_Data+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	6a1b      	ldr	r3, [r3, #32]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601d8 	.word	0x080601d8

080a1840 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_USB_USART_Is_Enabled+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601d8 	.word	0x080601d8

080a1850 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <inet_gethostbyname+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601c0 	.word	0x080601c0

080a1860 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <set_system_mode+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	685b      	ldr	r3, [r3, #4]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601a4 	.word	0x080601a4

080a1870 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <system_delay_ms+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	695b      	ldr	r3, [r3, #20]
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601a4 	.word	0x080601a4

080a1880 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <system_thread_set_state+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601a4 	.word	0x080601a4

080a1890 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b03      	ldr	r3, [pc, #12]	; (80a18a0 <system_ctrl_set_app_request_handler+0x10>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a189a:	9301      	str	r3, [sp, #4]
 80a189c:	bd08      	pop	{r3, pc}
 80a189e:	0000      	.short	0x0000
 80a18a0:	080601a4 	.word	0x080601a4

080a18a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b03      	ldr	r3, [pc, #12]	; (80a18b4 <system_ctrl_set_result+0x10>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a18ae:	9301      	str	r3, [sp, #4]
 80a18b0:	bd08      	pop	{r3, pc}
 80a18b2:	0000      	.short	0x0000
 80a18b4:	080601a4 	.word	0x080601a4

080a18b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601cc 	.word	0x080601cc

080a18c8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <network_config+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	681b      	ldr	r3, [r3, #0]
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601c8 	.word	0x080601c8

080a18d8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <network_connect+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	685b      	ldr	r3, [r3, #4]
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601c8 	.word	0x080601c8

080a18e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <network_connecting+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	689b      	ldr	r3, [r3, #8]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c8 	.word	0x080601c8

080a18f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <network_disconnect+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	68db      	ldr	r3, [r3, #12]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601c8 	.word	0x080601c8

080a1908 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <network_ready+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	691b      	ldr	r3, [r3, #16]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601c8 	.word	0x080601c8

080a1918 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <network_on+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	695b      	ldr	r3, [r3, #20]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601c8 	.word	0x080601c8

080a1928 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <network_off+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	699b      	ldr	r3, [r3, #24]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601c8 	.word	0x080601c8

080a1938 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <network_listen+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	69db      	ldr	r3, [r3, #28]
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601c8 	.word	0x080601c8

080a1948 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <network_listening+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6a1b      	ldr	r3, [r3, #32]
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601c8 	.word	0x080601c8

080a1958 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <network_set_listen_timeout+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601c8 	.word	0x080601c8

080a1968 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <network_get_listen_timeout+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601c8 	.word	0x080601c8

080a1978 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <network_set_hostname+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601c8 	.word	0x080601c8

080a1988 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <network_get_hostname+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601c8 	.word	0x080601c8

080a1998 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <malloc+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	681b      	ldr	r3, [r3, #0]
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601a0 	.word	0x080601a0

080a19a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <free+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	685b      	ldr	r3, [r3, #4]
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601a0 	.word	0x080601a0

080a19b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <realloc+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	689b      	ldr	r3, [r3, #8]
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601a0 	.word	0x080601a0

080a19c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a19c8:	2100      	movs	r1, #0
 80a19ca:	f7ff bf51 	b.w	80a1870 <system_delay_ms>

080a19ce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a19d0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19d2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a19d4:	b113      	cbz	r3, 80a19dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a19d6:	2203      	movs	r2, #3
 80a19d8:	4601      	mov	r1, r0
 80a19da:	4798      	blx	r3
    }
 80a19dc:	4620      	mov	r0, r4
 80a19de:	bd10      	pop	{r4, pc}

080a19e0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a19e0:	4770      	bx	lr

080a19e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a19e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19e4:	4606      	mov	r6, r0
 80a19e6:	4615      	mov	r5, r2
 80a19e8:	460c      	mov	r4, r1
 80a19ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19ec:	42bc      	cmp	r4, r7
 80a19ee:	d006      	beq.n	80a19fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a19f0:	6833      	ldr	r3, [r6, #0]
 80a19f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a19f6:	689b      	ldr	r3, [r3, #8]
 80a19f8:	4630      	mov	r0, r6
 80a19fa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19fc:	e7f6      	b.n	80a19ec <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a19fe:	4628      	mov	r0, r5
 80a1a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a02 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1a02:	2200      	movs	r2, #0
 80a1a04:	7c00      	ldrb	r0, [r0, #16]
 80a1a06:	f7ff be31 	b.w	80a166c <HAL_I2C_Write_Data>

080a1a0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1a0a:	2100      	movs	r1, #0
 80a1a0c:	7c00      	ldrb	r0, [r0, #16]
 80a1a0e:	f7ff be35 	b.w	80a167c <HAL_I2C_Available_Data>

080a1a12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1a12:	2100      	movs	r1, #0
 80a1a14:	7c00      	ldrb	r0, [r0, #16]
 80a1a16:	f7ff be39 	b.w	80a168c <HAL_I2C_Read_Data>

080a1a1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1a1a:	2100      	movs	r1, #0
 80a1a1c:	7c00      	ldrb	r0, [r0, #16]
 80a1a1e:	f7ff be3d 	b.w	80a169c <HAL_I2C_Peek_Data>

080a1a22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1a22:	2100      	movs	r1, #0
 80a1a24:	7c00      	ldrb	r0, [r0, #16]
 80a1a26:	f7ff be41 	b.w	80a16ac <HAL_I2C_Flush_Data>

080a1a2a <_ZN7TwoWireD0Ev>:
 80a1a2a:	b510      	push	{r4, lr}
 80a1a2c:	4604      	mov	r4, r0
 80a1a2e:	2114      	movs	r1, #20
 80a1a30:	f000 ff1b 	bl	80a286a <_ZdlPvj>
 80a1a34:	4620      	mov	r0, r4
 80a1a36:	bd10      	pop	{r4, pc}

080a1a38 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a38:	b510      	push	{r4, lr}
 80a1a3a:	4604      	mov	r4, r0
 80a1a3c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a42:	60a3      	str	r3, [r4, #8]
 80a1a44:	4b04      	ldr	r3, [pc, #16]	; (80a1a58 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1a46:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1a48:	7420      	strb	r0, [r4, #16]
 80a1a4a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a4c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1a4e:	f7ff fe3d 	bl	80a16cc <HAL_I2C_Init>

}
 80a1a52:	4620      	mov	r0, r4
 80a1a54:	bd10      	pop	{r4, pc}
 80a1a56:	bf00      	nop
 80a1a58:	080a2c58 	.word	0x080a2c58

080a1a5c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1a5c:	2100      	movs	r1, #0
 80a1a5e:	7c00      	ldrb	r0, [r0, #16]
 80a1a60:	f7ff be2c 	b.w	80a16bc <HAL_I2C_Is_Enabled>

080a1a64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a66:	460f      	mov	r7, r1
 80a1a68:	f100 0608 	add.w	r6, r0, #8
 80a1a6c:	1d05      	adds	r5, r0, #4
 80a1a6e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1a74:	220a      	movs	r2, #10
 80a1a76:	4638      	mov	r0, r7
 80a1a78:	f000 f94f 	bl	80a1d1a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a7c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a7e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a80:	d007      	beq.n	80a1a92 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1a82:	2c00      	cmp	r4, #0
 80a1a84:	d0f4      	beq.n	80a1a70 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1a86:	212e      	movs	r1, #46	; 0x2e
 80a1a88:	4638      	mov	r0, r7
 80a1a8a:	f000 f8f3 	bl	80a1c74 <_ZN5Print5printEc>
 80a1a8e:	4404      	add	r4, r0
 80a1a90:	e7ee      	b.n	80a1a70 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1a92:	4620      	mov	r0, r4
 80a1a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1a98 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1a98:	b510      	push	{r4, lr}
 80a1a9a:	4604      	mov	r4, r0
 80a1a9c:	4b04      	ldr	r3, [pc, #16]	; (80a1ab0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1a9e:	2211      	movs	r2, #17
 80a1aa0:	f840 3b04 	str.w	r3, [r0], #4
 80a1aa4:	2100      	movs	r1, #0
 80a1aa6:	f001 f844 	bl	80a2b32 <memset>
{
    clear();
}
 80a1aaa:	4620      	mov	r0, r4
 80a1aac:	bd10      	pop	{r4, pc}
 80a1aae:	bf00      	nop
 80a1ab0:	080a2c80 	.word	0x080a2c80

080a1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ab4:	4603      	mov	r3, r0
 80a1ab6:	4a07      	ldr	r2, [pc, #28]	; (80a1ad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1ab8:	b510      	push	{r4, lr}
 80a1aba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1abe:	f101 0210 	add.w	r2, r1, #16
 80a1ac2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1ac6:	4291      	cmp	r1, r2
 80a1ac8:	f843 4b04 	str.w	r4, [r3], #4
 80a1acc:	d1f9      	bne.n	80a1ac2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1ace:	780a      	ldrb	r2, [r1, #0]
 80a1ad0:	701a      	strb	r2, [r3, #0]
}
 80a1ad2:	bd10      	pop	{r4, pc}
 80a1ad4:	080a2c80 	.word	0x080a2c80

080a1ad8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1ad8:	4a02      	ldr	r2, [pc, #8]	; (80a1ae4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1ada:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1adc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1ade:	2204      	movs	r2, #4
 80a1ae0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1ae2:	4770      	bx	lr
 80a1ae4:	080a2c80 	.word	0x080a2c80

080a1ae8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1ae8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1aea:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1aee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1af2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1af6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1afa:	2304      	movs	r3, #4
 80a1afc:	6041      	str	r1, [r0, #4]
 80a1afe:	7503      	strb	r3, [r0, #20]
 80a1b00:	bd10      	pop	{r4, pc}
	...

080a1b04 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b06:	4d04      	ldr	r5, [pc, #16]	; (80a1b18 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b08:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b0a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b0e:	9500      	str	r5, [sp, #0]
 80a1b10:	f7ff ffea 	bl	80a1ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b14:	b003      	add	sp, #12
 80a1b16:	bd30      	pop	{r4, r5, pc}
 80a1b18:	080a2c80 	.word	0x080a2c80

080a1b1c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1b1e:	780d      	ldrb	r5, [r1, #0]
 80a1b20:	788b      	ldrb	r3, [r1, #2]
 80a1b22:	784a      	ldrb	r2, [r1, #1]
 80a1b24:	78c9      	ldrb	r1, [r1, #3]
 80a1b26:	9100      	str	r1, [sp, #0]
 80a1b28:	4629      	mov	r1, r5
 80a1b2a:	f7ff ffdd 	bl	80a1ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1b2e:	b003      	add	sp, #12
 80a1b30:	bd30      	pop	{r4, r5, pc}
	...

080a1b34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1b34:	4a01      	ldr	r2, [pc, #4]	; (80a1b3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1b36:	4b02      	ldr	r3, [pc, #8]	; (80a1b40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1b38:	601a      	str	r2, [r3, #0]
 80a1b3a:	4770      	bx	lr
 80a1b3c:	080a2d02 	.word	0x080a2d02
 80a1b40:	200000f4 	.word	0x200000f4

080a1b44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1b44:	2300      	movs	r3, #0
 80a1b46:	461a      	mov	r2, r3
 80a1b48:	6840      	ldr	r0, [r0, #4]
 80a1b4a:	f7ff bec5 	b.w	80a18d8 <network_connect>

080a1b4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1b4e:	2200      	movs	r2, #0
 80a1b50:	2102      	movs	r1, #2
 80a1b52:	6840      	ldr	r0, [r0, #4]
 80a1b54:	f7ff bed0 	b.w	80a18f8 <network_disconnect>

080a1b58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1b58:	2200      	movs	r2, #0
 80a1b5a:	4611      	mov	r1, r2
 80a1b5c:	6840      	ldr	r0, [r0, #4]
 80a1b5e:	f7ff bec3 	b.w	80a18e8 <network_connecting>

080a1b62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1b62:	2200      	movs	r2, #0
 80a1b64:	4611      	mov	r1, r2
 80a1b66:	6840      	ldr	r0, [r0, #4]
 80a1b68:	f7ff bece 	b.w	80a1908 <network_ready>

080a1b6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1b6c:	2300      	movs	r3, #0
 80a1b6e:	461a      	mov	r2, r3
 80a1b70:	4619      	mov	r1, r3
 80a1b72:	6840      	ldr	r0, [r0, #4]
 80a1b74:	f7ff bed0 	b.w	80a1918 <network_on>

080a1b78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1b78:	2300      	movs	r3, #0
 80a1b7a:	461a      	mov	r2, r3
 80a1b7c:	4619      	mov	r1, r3
 80a1b7e:	6840      	ldr	r0, [r0, #4]
 80a1b80:	f7ff bed2 	b.w	80a1928 <network_off>

080a1b84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1b84:	2200      	movs	r2, #0
 80a1b86:	f081 0101 	eor.w	r1, r1, #1
 80a1b8a:	6840      	ldr	r0, [r0, #4]
 80a1b8c:	f7ff bed4 	b.w	80a1938 <network_listen>

080a1b90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1b90:	2200      	movs	r2, #0
 80a1b92:	6840      	ldr	r0, [r0, #4]
 80a1b94:	f7ff bee0 	b.w	80a1958 <network_set_listen_timeout>

080a1b98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1b98:	2200      	movs	r2, #0
 80a1b9a:	4611      	mov	r1, r2
 80a1b9c:	6840      	ldr	r0, [r0, #4]
 80a1b9e:	f7ff bee3 	b.w	80a1968 <network_get_listen_timeout>

080a1ba2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1ba2:	2200      	movs	r2, #0
 80a1ba4:	4611      	mov	r1, r2
 80a1ba6:	6840      	ldr	r0, [r0, #4]
 80a1ba8:	f7ff bece 	b.w	80a1948 <network_listening>

080a1bac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1bac:	b570      	push	{r4, r5, r6, lr}
 80a1bae:	4616      	mov	r6, r2
 80a1bb0:	b08e      	sub	sp, #56	; 0x38
 80a1bb2:	4604      	mov	r4, r0
    IPAddress addr;
 80a1bb4:	a808      	add	r0, sp, #32
 80a1bb6:	f7ff ff6f 	bl	80a1a98 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1bba:	2211      	movs	r2, #17
 80a1bbc:	2100      	movs	r1, #0
 80a1bbe:	a803      	add	r0, sp, #12
 80a1bc0:	f000 ffb7 	bl	80a2b32 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1bc4:	4630      	mov	r0, r6
 80a1bc6:	f000 ffe5 	bl	80a2b94 <strlen>
 80a1bca:	2500      	movs	r5, #0
 80a1bcc:	4b0a      	ldr	r3, [pc, #40]	; (80a1bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1bce:	9500      	str	r5, [sp, #0]
 80a1bd0:	b281      	uxth	r1, r0
 80a1bd2:	685b      	ldr	r3, [r3, #4]
 80a1bd4:	aa03      	add	r2, sp, #12
 80a1bd6:	4630      	mov	r0, r6
 80a1bd8:	f7ff fe3a 	bl	80a1850 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1bdc:	b120      	cbz	r0, 80a1be8 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1bde:	4629      	mov	r1, r5
 80a1be0:	4620      	mov	r0, r4
 80a1be2:	f7ff ff79 	bl	80a1ad8 <_ZN9IPAddressC1Em>
 80a1be6:	e003      	b.n	80a1bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1be8:	a903      	add	r1, sp, #12
 80a1bea:	4620      	mov	r0, r4
 80a1bec:	f7ff ff62 	bl	80a1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1bf0:	4620      	mov	r0, r4
 80a1bf2:	b00e      	add	sp, #56	; 0x38
 80a1bf4:	bd70      	pop	{r4, r5, r6, pc}
 80a1bf6:	bf00      	nop
 80a1bf8:	20000578 	.word	0x20000578

080a1bfc <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1bfc:	4b03      	ldr	r3, [pc, #12]	; (80a1c0c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1bfe:	4a04      	ldr	r2, [pc, #16]	; (80a1c10 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1c00:	2804      	cmp	r0, #4
 80a1c02:	bf0c      	ite	eq
 80a1c04:	4610      	moveq	r0, r2
 80a1c06:	4618      	movne	r0, r3
 80a1c08:	4770      	bx	lr
 80a1c0a:	bf00      	nop
 80a1c0c:	200000f8 	.word	0x200000f8
 80a1c10:	20000578 	.word	0x20000578

080a1c14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1c14:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1c16:	4a03      	ldr	r2, [pc, #12]	; (80a1c24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1c18:	601a      	str	r2, [r3, #0]
 80a1c1a:	2200      	movs	r2, #0
 80a1c1c:	605a      	str	r2, [r3, #4]
 80a1c1e:	4770      	bx	lr
 80a1c20:	200000f8 	.word	0x200000f8
 80a1c24:	080a2d78 	.word	0x080a2d78

080a1c28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c2a:	4606      	mov	r6, r0
 80a1c2c:	460d      	mov	r5, r1
 80a1c2e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1c30:	2400      	movs	r4, #0
  while (size--) {
 80a1c32:	42bd      	cmp	r5, r7
 80a1c34:	d00c      	beq.n	80a1c50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c36:	6833      	ldr	r3, [r6, #0]
 80a1c38:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c3c:	689b      	ldr	r3, [r3, #8]
 80a1c3e:	4630      	mov	r0, r6
 80a1c40:	4798      	blx	r3
     if (chunk>=0)
 80a1c42:	2800      	cmp	r0, #0
 80a1c44:	db01      	blt.n	80a1c4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c46:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1c48:	e7f3      	b.n	80a1c32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c4a:	2c00      	cmp	r4, #0
 80a1c4c:	bf08      	it	eq
 80a1c4e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c50:	4620      	mov	r0, r4
 80a1c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c54 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c54:	b570      	push	{r4, r5, r6, lr}
 80a1c56:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c58:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c5a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1c5c:	b149      	cbz	r1, 80a1c72 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c5e:	f000 ff99 	bl	80a2b94 <strlen>
 80a1c62:	682b      	ldr	r3, [r5, #0]
 80a1c64:	4602      	mov	r2, r0
 80a1c66:	4621      	mov	r1, r4
 80a1c68:	4628      	mov	r0, r5
    }
 80a1c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1c6e:	68db      	ldr	r3, [r3, #12]
 80a1c70:	4718      	bx	r3
    }
 80a1c72:	bd70      	pop	{r4, r5, r6, pc}

080a1c74 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1c74:	6803      	ldr	r3, [r0, #0]
 80a1c76:	689b      	ldr	r3, [r3, #8]
 80a1c78:	4718      	bx	r3

080a1c7a <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a1c7a:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a1c7c:	680a      	ldr	r2, [r1, #0]
 80a1c7e:	4601      	mov	r1, r0
 80a1c80:	6812      	ldr	r2, [r2, #0]
 80a1c82:	4618      	mov	r0, r3
 80a1c84:	4710      	bx	r2

080a1c86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1c88:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c8a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1c8c:	f7ff fff2 	bl	80a1c74 <_ZN5Print5printEc>
  n += print('\n');
 80a1c90:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1c92:	4604      	mov	r4, r0
  n += print('\n');
 80a1c94:	4628      	mov	r0, r5
 80a1c96:	f7ff ffed 	bl	80a1c74 <_ZN5Print5printEc>
  return n;
}
 80a1c9a:	4420      	add	r0, r4
 80a1c9c:	bd38      	pop	{r3, r4, r5, pc}

080a1c9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1c9e:	b538      	push	{r3, r4, r5, lr}
 80a1ca0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ca2:	f7ff ffd7 	bl	80a1c54 <_ZN5Print5writeEPKc>
 80a1ca6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1ca8:	4628      	mov	r0, r5
 80a1caa:	f7ff ffec 	bl	80a1c86 <_ZN5Print7printlnEv>
  return n;
}
 80a1cae:	4420      	add	r0, r4
 80a1cb0:	bd38      	pop	{r3, r4, r5, pc}

080a1cb2 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a1cb2:	b538      	push	{r3, r4, r5, lr}
 80a1cb4:	4605      	mov	r5, r0
   size_t n = print(x);
 80a1cb6:	f7ff ffe0 	bl	80a1c7a <_ZN5Print5printERK9Printable>
 80a1cba:	4604      	mov	r4, r0
   n += println();
 80a1cbc:	4628      	mov	r0, r5
 80a1cbe:	f7ff ffe2 	bl	80a1c86 <_ZN5Print7printlnEv>
   return n;
 }
 80a1cc2:	4420      	add	r0, r4
 80a1cc4:	bd38      	pop	{r3, r4, r5, pc}

080a1cc6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1cc6:	2a01      	cmp	r2, #1
 80a1cc8:	bf98      	it	ls
 80a1cca:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1ccc:	b530      	push	{r4, r5, lr}
 80a1cce:	460b      	mov	r3, r1
 80a1cd0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1cd2:	2100      	movs	r1, #0
 80a1cd4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1cd8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1cdc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1ce0:	fb05 3312 	mls	r3, r5, r2, r3
 80a1ce4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1ce6:	2b09      	cmp	r3, #9
 80a1ce8:	bf94      	ite	ls
 80a1cea:	3330      	addls	r3, #48	; 0x30
 80a1cec:	3337      	addhi	r3, #55	; 0x37
 80a1cee:	b2db      	uxtb	r3, r3
 80a1cf0:	4621      	mov	r1, r4
 80a1cf2:	f804 3901 	strb.w	r3, [r4], #-1
 80a1cf6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1cf8:	2d00      	cmp	r5, #0
 80a1cfa:	d1ef      	bne.n	80a1cdc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1cfc:	f7ff ffaa 	bl	80a1c54 <_ZN5Print5writeEPKc>
}
 80a1d00:	b00b      	add	sp, #44	; 0x2c
 80a1d02:	bd30      	pop	{r4, r5, pc}

080a1d04 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1d04:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1d06:	b922      	cbnz	r2, 80a1d12 <_ZN5Print5printEmi+0xe>
 80a1d08:	6803      	ldr	r3, [r0, #0]
 80a1d0a:	b2c9      	uxtb	r1, r1
 80a1d0c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1d0e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1d10:	4718      	bx	r3
  else return printNumber(n, base);
 80a1d12:	b2d2      	uxtb	r2, r2
}
 80a1d14:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1d16:	f7ff bfd6 	b.w	80a1cc6 <_ZN5Print11printNumberEmh>

080a1d1a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1d1a:	f7ff bff3 	b.w	80a1d04 <_ZN5Print5printEmi>

080a1d1e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1d1e:	b510      	push	{r4, lr}
 80a1d20:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d22:	f7ff fe54 	bl	80a19ce <_ZNSt14_Function_baseD1Ev>
 80a1d26:	4620      	mov	r0, r4
 80a1d28:	bd10      	pop	{r4, pc}
	...

080a1d2c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d2c:	4803      	ldr	r0, [pc, #12]	; (80a1d3c <_GLOBAL__sub_I_RGB+0x10>)
 80a1d2e:	2300      	movs	r3, #0
 80a1d30:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1d32:	4a03      	ldr	r2, [pc, #12]	; (80a1d40 <_GLOBAL__sub_I_RGB+0x14>)
 80a1d34:	4903      	ldr	r1, [pc, #12]	; (80a1d44 <_GLOBAL__sub_I_RGB+0x18>)
 80a1d36:	f000 bd93 	b.w	80a2860 <__aeabi_atexit>
 80a1d3a:	bf00      	nop
 80a1d3c:	20000100 	.word	0x20000100
 80a1d40:	2000006c 	.word	0x2000006c
 80a1d44:	080a1d1f 	.word	0x080a1d1f

080a1d48 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1d48:	4770      	bx	lr

080a1d4a <_ZN8SPIClassD0Ev>:
 80a1d4a:	b510      	push	{r4, lr}
 80a1d4c:	4604      	mov	r4, r0
 80a1d4e:	2110      	movs	r1, #16
 80a1d50:	f000 fd8b 	bl	80a286a <_ZdlPvj>
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	bd10      	pop	{r4, pc}

080a1d58 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1d58:	b570      	push	{r4, r5, r6, lr}
 80a1d5a:	4604      	mov	r4, r0
 80a1d5c:	460e      	mov	r6, r1
 80a1d5e:	4b07      	ldr	r3, [pc, #28]	; (80a1d7c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1d60:	2500      	movs	r5, #0
 80a1d62:	6003      	str	r3, [r0, #0]
 80a1d64:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1d68:	f7ff fc40 	bl	80a15ec <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1d6c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1d6e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1d70:	f7ff fce6 	bl	80a1740 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1d74:	60a5      	str	r5, [r4, #8]
}
 80a1d76:	4620      	mov	r0, r4
 80a1d78:	bd70      	pop	{r4, r5, r6, pc}
 80a1d7a:	bf00      	nop
 80a1d7c:	080a2dac 	.word	0x080a2dac

080a1d80 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1d80:	7900      	ldrb	r0, [r0, #4]
 80a1d82:	f7ff bce5 	b.w	80a1750 <HAL_SPI_Is_Enabled>

080a1d86 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1d86:	b510      	push	{r4, lr}
 80a1d88:	4604      	mov	r4, r0
{
	free(buffer);
 80a1d8a:	6800      	ldr	r0, [r0, #0]
 80a1d8c:	f7ff fe0c 	bl	80a19a8 <free>
}
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	bd10      	pop	{r4, pc}

080a1d94 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1d94:	b510      	push	{r4, lr}
 80a1d96:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1d98:	6800      	ldr	r0, [r0, #0]
 80a1d9a:	b108      	cbz	r0, 80a1da0 <_ZN6String10invalidateEv+0xc>
 80a1d9c:	f7ff fe04 	bl	80a19a8 <free>
	buffer = NULL;
 80a1da0:	2300      	movs	r3, #0
 80a1da2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1da4:	60a3      	str	r3, [r4, #8]
 80a1da6:	6063      	str	r3, [r4, #4]
 80a1da8:	bd10      	pop	{r4, pc}

080a1daa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1daa:	b538      	push	{r3, r4, r5, lr}
 80a1dac:	4604      	mov	r4, r0
 80a1dae:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1db0:	6800      	ldr	r0, [r0, #0]
 80a1db2:	3101      	adds	r1, #1
 80a1db4:	f7ff fe00 	bl	80a19b8 <realloc>
	if (newbuffer) {
 80a1db8:	b110      	cbz	r0, 80a1dc0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1dba:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1dbe:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1dc0:	bd38      	pop	{r3, r4, r5, pc}

080a1dc2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1dc2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1dc4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1dc6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1dc8:	b113      	cbz	r3, 80a1dd0 <_ZN6String7reserveEj+0xe>
 80a1dca:	6843      	ldr	r3, [r0, #4]
 80a1dcc:	428b      	cmp	r3, r1
 80a1dce:	d207      	bcs.n	80a1de0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1dd0:	4620      	mov	r0, r4
 80a1dd2:	f7ff ffea 	bl	80a1daa <_ZN6String12changeBufferEj>
 80a1dd6:	b120      	cbz	r0, 80a1de2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1dd8:	68a3      	ldr	r3, [r4, #8]
 80a1dda:	b90b      	cbnz	r3, 80a1de0 <_ZN6String7reserveEj+0x1e>
 80a1ddc:	6822      	ldr	r2, [r4, #0]
 80a1dde:	7013      	strb	r3, [r2, #0]
 80a1de0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1de2:	bd10      	pop	{r4, pc}

080a1de4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1de4:	b570      	push	{r4, r5, r6, lr}
 80a1de6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1de8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1dea:	4604      	mov	r4, r0
 80a1dec:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1dee:	f7ff ffe8 	bl	80a1dc2 <_ZN6String7reserveEj>
 80a1df2:	b918      	cbnz	r0, 80a1dfc <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	f7ff ffcd 	bl	80a1d94 <_ZN6String10invalidateEv>
		return *this;
 80a1dfa:	e009      	b.n	80a1e10 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1dfc:	462a      	mov	r2, r5
 80a1dfe:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1e00:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1e02:	6820      	ldr	r0, [r4, #0]
 80a1e04:	f000 fe8a 	bl	80a2b1c <memcpy>
	buffer[len] = 0;
 80a1e08:	6822      	ldr	r2, [r4, #0]
 80a1e0a:	68a3      	ldr	r3, [r4, #8]
 80a1e0c:	2100      	movs	r1, #0
 80a1e0e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1e10:	4620      	mov	r0, r4
 80a1e12:	bd70      	pop	{r4, r5, r6, pc}

080a1e14 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1e14:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1e16:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1e18:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1e1a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1e1c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1e1e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1e20:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1e22:	460d      	mov	r5, r1
 80a1e24:	b139      	cbz	r1, 80a1e36 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1e26:	4608      	mov	r0, r1
 80a1e28:	f000 feb4 	bl	80a2b94 <strlen>
 80a1e2c:	4629      	mov	r1, r5
 80a1e2e:	4602      	mov	r2, r0
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	f7ff ffd7 	bl	80a1de4 <_ZN6String4copyEPKcj>
}
 80a1e36:	4620      	mov	r0, r4
 80a1e38:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1e3c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1e40:	4b03      	ldr	r3, [pc, #12]	; (80a1e50 <_GLOBAL__sub_I_System+0x14>)
 80a1e42:	2000      	movs	r0, #0
 80a1e44:	7018      	strb	r0, [r3, #0]
 80a1e46:	8058      	strh	r0, [r3, #2]
 80a1e48:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1e4a:	f7ff bd09 	b.w	80a1860 <set_system_mode>
 80a1e4e:	bf00      	nop
 80a1e50:	20000110 	.word	0x20000110

080a1e54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1e54:	4b02      	ldr	r3, [pc, #8]	; (80a1e60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1e56:	681a      	ldr	r2, [r3, #0]
 80a1e58:	4b02      	ldr	r3, [pc, #8]	; (80a1e64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1e5a:	601a      	str	r2, [r3, #0]
 80a1e5c:	4770      	bx	lr
 80a1e5e:	bf00      	nop
 80a1e60:	20000004 	.word	0x20000004
 80a1e64:	20000118 	.word	0x20000118

080a1e68 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1e68:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1e6a:	6804      	ldr	r4, [r0, #0]
 80a1e6c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1e6e:	46a4      	mov	ip, r4
    }
 80a1e70:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1e72:	4760      	bx	ip

080a1e74 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1e74:	6803      	ldr	r3, [r0, #0]
 80a1e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e78:	4718      	bx	r3

080a1e7a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1e7a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1e7c:	4770      	bx	lr

080a1e7e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1e7e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1e80:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1e82:	1a10      	subs	r0, r2, r0
 80a1e84:	4770      	bx	lr

080a1e86 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1e86:	b513      	push	{r0, r1, r4, lr}
 80a1e88:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1e8a:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1e8c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1e90:	68d4      	ldr	r4, [r2, #12]
 80a1e92:	4619      	mov	r1, r3
 80a1e94:	2201      	movs	r2, #1
 80a1e96:	47a0      	blx	r4
}
 80a1e98:	b002      	add	sp, #8
 80a1e9a:	bd10      	pop	{r4, pc}

080a1e9c <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1e9c:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1e9e:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1ea0:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1ea2:	691b      	ldr	r3, [r3, #16]
 80a1ea4:	4798      	blx	r3
 80a1ea6:	b128      	cbz	r0, 80a1eb4 <_ZN3UDP4readEv+0x18>
 80a1ea8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1eaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1eac:	1c59      	adds	r1, r3, #1
 80a1eae:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1eb0:	5cd0      	ldrb	r0, [r2, r3]
 80a1eb2:	bd10      	pop	{r4, pc}
 80a1eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1eb8:	bd10      	pop	{r4, pc}

080a1eba <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1eba:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1ebc:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1ebe:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1ec0:	691b      	ldr	r3, [r3, #16]
 80a1ec2:	4798      	blx	r3
 80a1ec4:	b118      	cbz	r0, 80a1ece <_ZN3UDP4peekEv+0x14>
 80a1ec6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1ec8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1eca:	5cd0      	ldrb	r0, [r2, r3]
 80a1ecc:	bd10      	pop	{r4, pc}
 80a1ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1ed2:	bd10      	pop	{r4, pc}

080a1ed4 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1ed4:	4770      	bx	lr

080a1ed6 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1ed6:	4603      	mov	r3, r0
 80a1ed8:	4608      	mov	r0, r1
 80a1eda:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1edc:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1ede:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1ee0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1ee2:	6803      	ldr	r3, [r0, #0]
 80a1ee4:	1a52      	subs	r2, r2, r1
 80a1ee6:	68db      	ldr	r3, [r3, #12]
 80a1ee8:	4421      	add	r1, r4
}
 80a1eea:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1eec:	4718      	bx	r3

080a1eee <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1eee:	f1a0 0010 	sub.w	r0, r0, #16
 80a1ef2:	f7ff bff0 	b.w	80a1ed6 <_ZNK3UDP7printToER5Print>

080a1ef6 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1ef8:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1efa:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1efc:	460f      	mov	r7, r1
 80a1efe:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1f00:	f7ff fe7c 	bl	80a1bfc <_ZN5spark12NetworkClass4fromEm>
 80a1f04:	6803      	ldr	r3, [r0, #0]
 80a1f06:	68db      	ldr	r3, [r3, #12]
 80a1f08:	4798      	blx	r3
 80a1f0a:	b1b8      	cbz	r0, 80a1f3c <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1f0c:	2102      	movs	r1, #2
 80a1f0e:	463b      	mov	r3, r7
 80a1f10:	2211      	movs	r2, #17
 80a1f12:	4608      	mov	r0, r1
 80a1f14:	9600      	str	r6, [sp, #0]
 80a1f16:	f7ff fbeb 	bl	80a16f0 <socket_create>
 80a1f1a:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1f1c:	f7ff fbe0 	bl	80a16e0 <socket_handle_valid>
 80a1f20:	4604      	mov	r4, r0
 80a1f22:	b130      	cbz	r0, 80a1f32 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1f24:	2300      	movs	r3, #0
 80a1f26:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1f28:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1f2a:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1f2c:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1f2e:	2001      	movs	r0, #1
 80a1f30:	e004      	b.n	80a1f3c <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a1f32:	682b      	ldr	r3, [r5, #0]
 80a1f34:	4628      	mov	r0, r5
 80a1f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1f38:	4798      	blx	r3
            bound = false;
 80a1f3a:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1f3c:	b003      	add	sp, #12
 80a1f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1f40 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1f40:	b538      	push	{r3, r4, r5, lr}
 80a1f42:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1f44:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1f46:	f7ff fbf3 	bl	80a1730 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1f4a:	4285      	cmp	r5, r0
 80a1f4c:	d002      	beq.n	80a1f54 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1f4e:	6960      	ldr	r0, [r4, #20]
 80a1f50:	f7ff fbe6 	bl	80a1720 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1f54:	f7ff fbec 	bl	80a1730 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1f58:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1f5a:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1f5c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1f5e:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1f60:	bd38      	pop	{r3, r4, r5, pc}

080a1f62 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1f62:	b530      	push	{r4, r5, lr}
 80a1f64:	b087      	sub	sp, #28
 80a1f66:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1f6a:	2502      	movs	r5, #2
 80a1f6c:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1f70:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1f74:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1f76:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1f78:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1f7c:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1f80:	799c      	ldrb	r4, [r3, #6]
 80a1f82:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1f86:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1f88:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1f8a:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1f8e:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1f92:	2310      	movs	r3, #16
 80a1f94:	9301      	str	r3, [sp, #4]
 80a1f96:	ab02      	add	r3, sp, #8
 80a1f98:	9300      	str	r3, [sp, #0]
 80a1f9a:	6940      	ldr	r0, [r0, #20]
 80a1f9c:	2300      	movs	r3, #0
 80a1f9e:	f7ff fbb7 	bl	80a1710 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1fa2:	b007      	add	sp, #28
 80a1fa4:	bd30      	pop	{r4, r5, pc}

080a1fa6 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1fa6:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1fa8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1faa:	4605      	mov	r5, r0
 80a1fac:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1fae:	b113      	cbz	r3, 80a1fb6 <_ZN3UDP5writeEPKhj+0x10>
 80a1fb0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1fb2:	1a24      	subs	r4, r4, r0
 80a1fb4:	e000      	b.n	80a1fb8 <_ZN3UDP5writeEPKhj+0x12>
 80a1fb6:	461c      	mov	r4, r3
 80a1fb8:	4294      	cmp	r4, r2
 80a1fba:	bf28      	it	cs
 80a1fbc:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1fbe:	4418      	add	r0, r3
 80a1fc0:	4622      	mov	r2, r4
 80a1fc2:	f000 fdab 	bl	80a2b1c <memcpy>
    _offset += size;
 80a1fc6:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1fc8:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1fca:	4423      	add	r3, r4
 80a1fcc:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1fce:	bd38      	pop	{r3, r4, r5, pc}

080a1fd0 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1fd0:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1fd2:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1fd4:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1fd6:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1fd8:	460e      	mov	r6, r1
 80a1fda:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1fdc:	4798      	blx	r3
 80a1fde:	b188      	cbz	r0, 80a2004 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1fe0:	6823      	ldr	r3, [r4, #0]
 80a1fe2:	4620      	mov	r0, r4
 80a1fe4:	691b      	ldr	r3, [r3, #16]
 80a1fe6:	4798      	blx	r3
 80a1fe8:	4285      	cmp	r5, r0
 80a1fea:	bfa8      	it	ge
 80a1fec:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1fee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1ff0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1ff2:	462a      	mov	r2, r5
 80a1ff4:	4419      	add	r1, r3
 80a1ff6:	4630      	mov	r0, r6
 80a1ff8:	f000 fd90 	bl	80a2b1c <memcpy>
      _offset += read;
 80a1ffc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1ffe:	442b      	add	r3, r5
 80a2000:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a2002:	e001      	b.n	80a2008 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a2004:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a2008:	4628      	mov	r0, r5
 80a200a:	bd70      	pop	{r4, r5, r6, pc}

080a200c <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a200e:	4604      	mov	r4, r0
 80a2010:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2012:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2014:	460d      	mov	r5, r1
 80a2016:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2018:	f7ff fdf0 	bl	80a1bfc <_ZN5spark12NetworkClass4fromEm>
 80a201c:	6803      	ldr	r3, [r0, #0]
 80a201e:	68db      	ldr	r3, [r3, #12]
 80a2020:	4798      	blx	r3
 80a2022:	b310      	cbz	r0, 80a206a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2024:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2026:	f7ff fb83 	bl	80a1730 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a202a:	4287      	cmp	r7, r0
 80a202c:	d01d      	beq.n	80a206a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a202e:	b1e5      	cbz	r5, 80a206a <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a2030:	ab08      	add	r3, sp, #32
 80a2032:	2210      	movs	r2, #16
 80a2034:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a2038:	9301      	str	r3, [sp, #4]
 80a203a:	eb0d 0302 	add.w	r3, sp, r2
 80a203e:	9300      	str	r3, [sp, #0]
 80a2040:	4629      	mov	r1, r5
 80a2042:	2300      	movs	r3, #0
 80a2044:	4632      	mov	r2, r6
 80a2046:	6960      	ldr	r0, [r4, #20]
 80a2048:	f7ff fb5a 	bl	80a1700 <socket_receivefrom>
        if (ret >= 0)
 80a204c:	1e05      	subs	r5, r0, #0
 80a204e:	db0e      	blt.n	80a206e <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2050:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a2054:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2058:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a205a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a205e:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2060:	f104 001c 	add.w	r0, r4, #28
 80a2064:	f7ff fd5a 	bl	80a1b1c <_ZN9IPAddressaSEPKh>
 80a2068:	e001      	b.n	80a206e <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a206a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a206e:	4628      	mov	r0, r5
 80a2070:	b009      	add	sp, #36	; 0x24
 80a2072:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2074 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2078:	4606      	mov	r6, r0
 80a207a:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a207c:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a207e:	460d      	mov	r5, r1
 80a2080:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a2082:	f7ff fdbb 	bl	80a1bfc <_ZN5spark12NetworkClass4fromEm>
 80a2086:	6803      	ldr	r3, [r0, #0]
 80a2088:	68db      	ldr	r3, [r3, #12]
 80a208a:	4798      	blx	r3
 80a208c:	b1f8      	cbz	r0, 80a20ce <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a208e:	4628      	mov	r0, r5
 80a2090:	f000 fd80 	bl	80a2b94 <strlen>
 80a2094:	2400      	movs	r4, #0
 80a2096:	b281      	uxth	r1, r0
 80a2098:	9400      	str	r4, [sp, #0]
 80a209a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a209c:	aa03      	add	r2, sp, #12
 80a209e:	4628      	mov	r0, r5
 80a20a0:	f7ff fbd6 	bl	80a1850 <inet_gethostbyname>
 80a20a4:	b990      	cbnz	r0, 80a20cc <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a20a6:	a903      	add	r1, sp, #12
 80a20a8:	a808      	add	r0, sp, #32
 80a20aa:	f7ff fd03 	bl	80a1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a20ae:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a20b0:	ac0f      	add	r4, sp, #60	; 0x3c
 80a20b2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a20b4:	4b07      	ldr	r3, [pc, #28]	; (80a20d4 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a20b6:	ad09      	add	r5, sp, #36	; 0x24
 80a20b8:	930e      	str	r3, [sp, #56]	; 0x38
 80a20ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a20bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a20be:	682b      	ldr	r3, [r5, #0]
 80a20c0:	4642      	mov	r2, r8
 80a20c2:	7023      	strb	r3, [r4, #0]
 80a20c4:	a90e      	add	r1, sp, #56	; 0x38
 80a20c6:	4630      	mov	r0, r6
 80a20c8:	47b8      	blx	r7
 80a20ca:	e000      	b.n	80a20ce <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a20cc:	4620      	mov	r0, r4
}
 80a20ce:	b014      	add	sp, #80	; 0x50
 80a20d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a20d4:	080a2c80 	.word	0x080a2c80

080a20d8 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a20d8:	b570      	push	{r4, r5, r6, lr}
 80a20da:	4604      	mov	r4, r0
 80a20dc:	4606      	mov	r6, r0
 80a20de:	4b05      	ldr	r3, [pc, #20]	; (80a20f4 <_ZN3UDP8remoteIPEv+0x1c>)
 80a20e0:	f101 0520 	add.w	r5, r1, #32
 80a20e4:	f844 3b04 	str.w	r3, [r4], #4
 80a20e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a20ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a20ec:	682b      	ldr	r3, [r5, #0]
 80a20ee:	4630      	mov	r0, r6
 80a20f0:	7023      	strb	r3, [r4, #0]
 80a20f2:	bd70      	pop	{r4, r5, r6, pc}
 80a20f4:	080a2c80 	.word	0x080a2c80

080a20f8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20fa:	4694      	mov	ip, r2
 80a20fc:	468e      	mov	lr, r1
 80a20fe:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2100:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2102:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2104:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a2106:	4a09      	ldr	r2, [pc, #36]	; (80a212c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a2108:	ac03      	add	r4, sp, #12
 80a210a:	1d1d      	adds	r5, r3, #4
 80a210c:	9202      	str	r2, [sp, #8]
 80a210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2112:	682b      	ldr	r3, [r5, #0]
 80a2114:	4662      	mov	r2, ip
 80a2116:	7023      	strb	r3, [r4, #0]
 80a2118:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a211c:	4671      	mov	r1, lr
 80a211e:	9300      	str	r3, [sp, #0]
 80a2120:	4630      	mov	r0, r6
 80a2122:	ab02      	add	r3, sp, #8
 80a2124:	47b8      	blx	r7
    }
 80a2126:	b009      	add	sp, #36	; 0x24
 80a2128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a212a:	bf00      	nop
 80a212c:	080a2c80 	.word	0x080a2c80

080a2130 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2130:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2132:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2134:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2136:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2138:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a213a:	4b0d      	ldr	r3, [pc, #52]	; (80a2170 <_ZN3UDP9endPacketEv+0x40>)
 80a213c:	ad03      	add	r5, sp, #12
 80a213e:	f100 0620 	add.w	r6, r0, #32
 80a2142:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a2146:	9302      	str	r3, [sp, #8]
 80a2148:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a214a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a214c:	6833      	ldr	r3, [r6, #0]
 80a214e:	4672      	mov	r2, lr
 80a2150:	702b      	strb	r3, [r5, #0]
 80a2152:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a2154:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2156:	9300      	str	r3, [sp, #0]
 80a2158:	4620      	mov	r0, r4
 80a215a:	ab02      	add	r3, sp, #8
 80a215c:	47b8      	blx	r7
 80a215e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a2160:	6823      	ldr	r3, [r4, #0]
 80a2162:	4620      	mov	r0, r4
 80a2164:	69db      	ldr	r3, [r3, #28]
 80a2166:	4798      	blx	r3
    return result;
}
 80a2168:	4628      	mov	r0, r5
 80a216a:	b009      	add	sp, #36	; 0x24
 80a216c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a216e:	bf00      	nop
 80a2170:	080a2c80 	.word	0x080a2c80

080a2174 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a2174:	b538      	push	{r3, r4, r5, lr}
 80a2176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a217a:	6083      	str	r3, [r0, #8]
 80a217c:	4b0b      	ldr	r3, [pc, #44]	; (80a21ac <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a217e:	2500      	movs	r5, #0
 80a2180:	f103 0208 	add.w	r2, r3, #8
 80a2184:	336c      	adds	r3, #108	; 0x6c
 80a2186:	6002      	str	r2, [r0, #0]
 80a2188:	6103      	str	r3, [r0, #16]
 80a218a:	6045      	str	r5, [r0, #4]
 80a218c:	4604      	mov	r4, r0
 80a218e:	f7ff facf 	bl	80a1730 <socket_handle_invalid>
 80a2192:	6160      	str	r0, [r4, #20]
 80a2194:	f104 001c 	add.w	r0, r4, #28
 80a2198:	f7ff fc7e 	bl	80a1a98 <_ZN9IPAddressC1Ev>
 80a219c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a21a0:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a21a2:	8725      	strh	r5, [r4, #56]	; 0x38
 80a21a4:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a21a6:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	bd38      	pop	{r3, r4, r5, pc}
 80a21ac:	080a2de0 	.word	0x080a2de0

080a21b0 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a21b0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a21b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a21b6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a21b8:	b123      	cbz	r3, 80a21c4 <_ZN3UDP13releaseBufferEv+0x14>
 80a21ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a21bc:	b110      	cbz	r0, 80a21c4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a21be:	2101      	movs	r1, #1
 80a21c0:	f000 fb53 	bl	80a286a <_ZdlPvj>
    }
    _buffer = NULL;
 80a21c4:	2300      	movs	r3, #0
 80a21c6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a21c8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a21cc:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a21ce:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a21d0:	8723      	strh	r3, [r4, #56]	; 0x38
 80a21d2:	bd10      	pop	{r4, pc}

080a21d4 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a21d4:	b570      	push	{r4, r5, r6, lr}
 80a21d6:	4604      	mov	r4, r0
 80a21d8:	4616      	mov	r6, r2
 80a21da:	460d      	mov	r5, r1
    releaseBuffer();
 80a21dc:	f7ff ffe8 	bl	80a21b0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a21e0:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a21e2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a21e4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a21e6:	b93e      	cbnz	r6, 80a21f8 <_ZN3UDP9setBufferEjPh+0x24>
 80a21e8:	b135      	cbz	r5, 80a21f8 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a21ea:	4628      	mov	r0, r5
 80a21ec:	f7fd ff55 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a21f0:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a21f2:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a21f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a21f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a21fa:	b103      	cbz	r3, 80a21fe <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a21fc:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a21fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a2200:	3000      	adds	r0, #0
 80a2202:	bf18      	it	ne
 80a2204:	2001      	movne	r0, #1
 80a2206:	bd70      	pop	{r4, r5, r6, pc}

080a2208 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a220a:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a220c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a220e:	4605      	mov	r5, r0
 80a2210:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2212:	b91a      	cbnz	r2, 80a221c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2214:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2216:	b109      	cbz	r1, 80a221c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a2218:	f7ff ffdc 	bl	80a21d4 <_ZN3UDP9setBufferEjPh>
 80a221c:	f105 0620 	add.w	r6, r5, #32
 80a2220:	3404      	adds	r4, #4
 80a2222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2224:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2226:	6823      	ldr	r3, [r4, #0]
 80a2228:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a222a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a222c:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a222e:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2230:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2232:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2236 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2236:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a2238:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a223a:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a223c:	b91a      	cbnz	r2, 80a2246 <_ZN3UDP11parsePacketEm+0x10>
 80a223e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2240:	b109      	cbz	r1, 80a2246 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a2242:	f7ff ffc7 	bl	80a21d4 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2246:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2248:	2300      	movs	r3, #0
 80a224a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a224c:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a224e:	b141      	cbz	r1, 80a2262 <_ZN3UDP11parsePacketEm+0x2c>
 80a2250:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a2252:	b132      	cbz	r2, 80a2262 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a2254:	6820      	ldr	r0, [r4, #0]
 80a2256:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a2258:	4620      	mov	r0, r4
 80a225a:	47a8      	blx	r5
        if (result>0) {
 80a225c:	2800      	cmp	r0, #0
            _total = result;
 80a225e:	bfc8      	it	gt
 80a2260:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a2262:	6823      	ldr	r3, [r4, #0]
 80a2264:	4620      	mov	r0, r4
}
 80a2266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a226a:	691b      	ldr	r3, [r3, #16]
 80a226c:	4718      	bx	r3

080a226e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a226e:	4770      	bx	lr

080a2270 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2270:	7441      	strb	r1, [r0, #17]
 80a2272:	4770      	bx	lr

080a2274 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2274:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2276:	7c00      	ldrb	r0, [r0, #16]
 80a2278:	f7ff faaa 	bl	80a17d0 <HAL_USART_Available_Data_For_Write>
}
 80a227c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2280:	bd08      	pop	{r3, pc}

080a2282 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2282:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2284:	7c00      	ldrb	r0, [r0, #16]
 80a2286:	f7ff fa7b 	bl	80a1780 <HAL_USART_Available_Data>
}
 80a228a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a228e:	bd08      	pop	{r3, pc}

080a2290 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2290:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2292:	7c00      	ldrb	r0, [r0, #16]
 80a2294:	f7ff fa84 	bl	80a17a0 <HAL_USART_Peek_Data>
}
 80a2298:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a229c:	bf28      	it	cs
 80a229e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a22a2:	bd08      	pop	{r3, pc}

080a22a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a22a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a22a6:	7c00      	ldrb	r0, [r0, #16]
 80a22a8:	f7ff fa72 	bl	80a1790 <HAL_USART_Read_Data>
}
 80a22ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a22b0:	bf28      	it	cs
 80a22b2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a22b6:	bd08      	pop	{r3, pc}

080a22b8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a22b8:	7c00      	ldrb	r0, [r0, #16]
 80a22ba:	f7ff ba79 	b.w	80a17b0 <HAL_USART_Flush_Data>

080a22be <_ZN11USARTSerialD0Ev>:
 80a22be:	b510      	push	{r4, lr}
 80a22c0:	4604      	mov	r4, r0
 80a22c2:	2114      	movs	r1, #20
 80a22c4:	f000 fad1 	bl	80a286a <_ZdlPvj>
 80a22c8:	4620      	mov	r0, r4
 80a22ca:	bd10      	pop	{r4, pc}

080a22cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a22cc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a22ce:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a22d0:	4604      	mov	r4, r0
 80a22d2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a22d4:	b925      	cbnz	r5, 80a22e0 <_ZN11USARTSerial5writeEh+0x14>
 80a22d6:	7c00      	ldrb	r0, [r0, #16]
 80a22d8:	f7ff fa7a 	bl	80a17d0 <HAL_USART_Available_Data_For_Write>
 80a22dc:	2800      	cmp	r0, #0
 80a22de:	dd05      	ble.n	80a22ec <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a22e0:	4631      	mov	r1, r6
 80a22e2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a22e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a22e8:	f7ff ba42 	b.w	80a1770 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a22ec:	4628      	mov	r0, r5
 80a22ee:	bd70      	pop	{r4, r5, r6, pc}

080a22f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a22f0:	b510      	push	{r4, lr}
 80a22f2:	4604      	mov	r4, r0
 80a22f4:	4608      	mov	r0, r1
 80a22f6:	4611      	mov	r1, r2
 80a22f8:	2200      	movs	r2, #0
 80a22fa:	6062      	str	r2, [r4, #4]
 80a22fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2300:	60a2      	str	r2, [r4, #8]
 80a2302:	4a05      	ldr	r2, [pc, #20]	; (80a2318 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2304:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2306:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2308:	2201      	movs	r2, #1
 80a230a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a230c:	461a      	mov	r2, r3
 80a230e:	f7ff fa27 	bl	80a1760 <HAL_USART_Init>
}
 80a2312:	4620      	mov	r0, r4
 80a2314:	bd10      	pop	{r4, pc}
 80a2316:	bf00      	nop
 80a2318:	080a2e58 	.word	0x080a2e58

080a231c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a231c:	7c00      	ldrb	r0, [r0, #16]
 80a231e:	f7ff ba4f 	b.w	80a17c0 <HAL_USART_Is_Enabled>
	...

080a2324 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2324:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2326:	4d0c      	ldr	r5, [pc, #48]	; (80a2358 <_Z22__fetch_global_Serial1v+0x34>)
 80a2328:	6829      	ldr	r1, [r5, #0]
 80a232a:	f011 0401 	ands.w	r4, r1, #1
 80a232e:	d111      	bne.n	80a2354 <_Z22__fetch_global_Serial1v+0x30>
 80a2330:	4628      	mov	r0, r5
 80a2332:	f7fd feb6 	bl	80a00a2 <__cxa_guard_acquire>
 80a2336:	b168      	cbz	r0, 80a2354 <_Z22__fetch_global_Serial1v+0x30>
 80a2338:	4a08      	ldr	r2, [pc, #32]	; (80a235c <_Z22__fetch_global_Serial1v+0x38>)
 80a233a:	4621      	mov	r1, r4
 80a233c:	4b08      	ldr	r3, [pc, #32]	; (80a2360 <_Z22__fetch_global_Serial1v+0x3c>)
 80a233e:	4809      	ldr	r0, [pc, #36]	; (80a2364 <_Z22__fetch_global_Serial1v+0x40>)
 80a2340:	f7ff ffd6 	bl	80a22f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2344:	4628      	mov	r0, r5
 80a2346:	f7fd feb1 	bl	80a00ac <__cxa_guard_release>
 80a234a:	4a07      	ldr	r2, [pc, #28]	; (80a2368 <_Z22__fetch_global_Serial1v+0x44>)
 80a234c:	4907      	ldr	r1, [pc, #28]	; (80a236c <_Z22__fetch_global_Serial1v+0x48>)
 80a234e:	4805      	ldr	r0, [pc, #20]	; (80a2364 <_Z22__fetch_global_Serial1v+0x40>)
 80a2350:	f000 fa86 	bl	80a2860 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2354:	4803      	ldr	r0, [pc, #12]	; (80a2364 <_Z22__fetch_global_Serial1v+0x40>)
 80a2356:	bd38      	pop	{r3, r4, r5, pc}
 80a2358:	200001b4 	.word	0x200001b4
 80a235c:	200001b8 	.word	0x200001b8
 80a2360:	20000130 	.word	0x20000130
 80a2364:	2000011c 	.word	0x2000011c
 80a2368:	2000006c 	.word	0x2000006c
 80a236c:	080a226f 	.word	0x080a226f

080a2370 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2370:	7441      	strb	r1, [r0, #17]
 80a2372:	4770      	bx	lr

080a2374 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2374:	4770      	bx	lr

080a2376 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2376:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2378:	2100      	movs	r1, #0
 80a237a:	7c00      	ldrb	r0, [r0, #16]
 80a237c:	f7ff fa48 	bl	80a1810 <HAL_USB_USART_Receive_Data>
}
 80a2380:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2384:	bf28      	it	cs
 80a2386:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a238a:	bd08      	pop	{r3, pc}

080a238c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a238c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a238e:	2101      	movs	r1, #1
 80a2390:	7c00      	ldrb	r0, [r0, #16]
 80a2392:	f7ff fa3d 	bl	80a1810 <HAL_USB_USART_Receive_Data>
}
 80a2396:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a239a:	bf28      	it	cs
 80a239c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a23a0:	bd08      	pop	{r3, pc}

080a23a2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a23a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a23a4:	7c00      	ldrb	r0, [r0, #16]
 80a23a6:	f7ff fa2b 	bl	80a1800 <HAL_USB_USART_Available_Data_For_Write>
}
 80a23aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23ae:	bd08      	pop	{r3, pc}

080a23b0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a23b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a23b2:	7c00      	ldrb	r0, [r0, #16]
 80a23b4:	f7ff fa1c 	bl	80a17f0 <HAL_USB_USART_Available_Data>
}
 80a23b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23bc:	bd08      	pop	{r3, pc}

080a23be <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a23be:	7c00      	ldrb	r0, [r0, #16]
 80a23c0:	f7ff ba36 	b.w	80a1830 <HAL_USB_USART_Flush_Data>

080a23c4 <_ZN9USBSerialD0Ev>:
 80a23c4:	b510      	push	{r4, lr}
 80a23c6:	4604      	mov	r4, r0
 80a23c8:	2114      	movs	r1, #20
 80a23ca:	f000 fa4e 	bl	80a286a <_ZdlPvj>
 80a23ce:	4620      	mov	r0, r4
 80a23d0:	bd10      	pop	{r4, pc}

080a23d2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a23d2:	b538      	push	{r3, r4, r5, lr}
 80a23d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23d6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a23d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23da:	f7ff fa11 	bl	80a1800 <HAL_USB_USART_Available_Data_For_Write>
 80a23de:	2800      	cmp	r0, #0
 80a23e0:	dc01      	bgt.n	80a23e6 <_ZN9USBSerial5writeEh+0x14>
 80a23e2:	7c60      	ldrb	r0, [r4, #17]
 80a23e4:	b128      	cbz	r0, 80a23f2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a23e6:	4629      	mov	r1, r5
 80a23e8:	7c20      	ldrb	r0, [r4, #16]
 80a23ea:	f7ff fa19 	bl	80a1820 <HAL_USB_USART_Send_Data>
 80a23ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a23f2:	bd38      	pop	{r3, r4, r5, pc}

080a23f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a23f4:	b510      	push	{r4, lr}
 80a23f6:	4604      	mov	r4, r0
 80a23f8:	2300      	movs	r3, #0
 80a23fa:	6063      	str	r3, [r4, #4]
 80a23fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2400:	60a3      	str	r3, [r4, #8]
 80a2402:	4b05      	ldr	r3, [pc, #20]	; (80a2418 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2404:	4608      	mov	r0, r1
 80a2406:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2408:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a240a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a240c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a240e:	4611      	mov	r1, r2
 80a2410:	f7ff f9e6 	bl	80a17e0 <HAL_USB_USART_Init>
}
 80a2414:	4620      	mov	r0, r4
 80a2416:	bd10      	pop	{r4, pc}
 80a2418:	080a2e88 	.word	0x080a2e88

080a241c <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a241c:	7c00      	ldrb	r0, [r0, #16]
 80a241e:	f7ff ba0f 	b.w	80a1840 <HAL_USB_USART_Is_Enabled>

080a2422 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a2422:	f7ff bffb 	b.w	80a241c <_ZN9USBSerial9isEnabledEv>
	...

080a2428 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2428:	b510      	push	{r4, lr}
 80a242a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a242c:	2214      	movs	r2, #20
 80a242e:	2100      	movs	r1, #0
 80a2430:	f000 fb7f 	bl	80a2b32 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2434:	4b05      	ldr	r3, [pc, #20]	; (80a244c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2436:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2438:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a243a:	4b05      	ldr	r3, [pc, #20]	; (80a2450 <_Z19acquireSerialBufferv+0x28>)
 80a243c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a243e:	f240 1301 	movw	r3, #257	; 0x101
 80a2442:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2444:	2381      	movs	r3, #129	; 0x81
 80a2446:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2448:	bd10      	pop	{r4, pc}
 80a244a:	bf00      	nop
 80a244c:	200002c1 	.word	0x200002c1
 80a2450:	20000240 	.word	0x20000240

080a2454 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2454:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2456:	4d0e      	ldr	r5, [pc, #56]	; (80a2490 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2458:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a245a:	a801      	add	r0, sp, #4
 80a245c:	f7ff ffe4 	bl	80a2428 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2460:	6829      	ldr	r1, [r5, #0]
 80a2462:	f011 0401 	ands.w	r4, r1, #1
 80a2466:	d110      	bne.n	80a248a <_Z16_fetch_usbserialv+0x36>
 80a2468:	4628      	mov	r0, r5
 80a246a:	f7fd fe1a 	bl	80a00a2 <__cxa_guard_acquire>
 80a246e:	b160      	cbz	r0, 80a248a <_Z16_fetch_usbserialv+0x36>
 80a2470:	aa01      	add	r2, sp, #4
 80a2472:	4621      	mov	r1, r4
 80a2474:	4807      	ldr	r0, [pc, #28]	; (80a2494 <_Z16_fetch_usbserialv+0x40>)
 80a2476:	f7ff ffbd 	bl	80a23f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a247a:	4628      	mov	r0, r5
 80a247c:	f7fd fe16 	bl	80a00ac <__cxa_guard_release>
 80a2480:	4a05      	ldr	r2, [pc, #20]	; (80a2498 <_Z16_fetch_usbserialv+0x44>)
 80a2482:	4906      	ldr	r1, [pc, #24]	; (80a249c <_Z16_fetch_usbserialv+0x48>)
 80a2484:	4803      	ldr	r0, [pc, #12]	; (80a2494 <_Z16_fetch_usbserialv+0x40>)
 80a2486:	f000 f9eb 	bl	80a2860 <__aeabi_atexit>
	return _usbserial;
}
 80a248a:	4802      	ldr	r0, [pc, #8]	; (80a2494 <_Z16_fetch_usbserialv+0x40>)
 80a248c:	b007      	add	sp, #28
 80a248e:	bd30      	pop	{r4, r5, pc}
 80a2490:	2000023c 	.word	0x2000023c
 80a2494:	200003c4 	.word	0x200003c4
 80a2498:	2000006c 	.word	0x2000006c
 80a249c:	080a2375 	.word	0x080a2375

080a24a0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a24a0:	b510      	push	{r4, lr}
 80a24a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a24a4:	2214      	movs	r2, #20
 80a24a6:	2100      	movs	r1, #0
 80a24a8:	f000 fb43 	bl	80a2b32 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a24ac:	4b05      	ldr	r3, [pc, #20]	; (80a24c4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a24ae:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a24b0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a24b2:	4b05      	ldr	r3, [pc, #20]	; (80a24c8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a24b4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a24b6:	f240 1301 	movw	r3, #257	; 0x101
 80a24ba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a24bc:	2381      	movs	r3, #129	; 0x81
 80a24be:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a24c0:	bd10      	pop	{r4, pc}
 80a24c2:	bf00      	nop
 80a24c4:	20000474 	.word	0x20000474
 80a24c8:	200003dc 	.word	0x200003dc

080a24cc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a24cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24ce:	4c0e      	ldr	r4, [pc, #56]	; (80a2508 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a24d0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a24d2:	a801      	add	r0, sp, #4
 80a24d4:	f7ff ffe4 	bl	80a24a0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24d8:	6823      	ldr	r3, [r4, #0]
 80a24da:	07db      	lsls	r3, r3, #31
 80a24dc:	d410      	bmi.n	80a2500 <_Z17_fetch_usbserial1v+0x34>
 80a24de:	4620      	mov	r0, r4
 80a24e0:	f7fd fddf 	bl	80a00a2 <__cxa_guard_acquire>
 80a24e4:	b160      	cbz	r0, 80a2500 <_Z17_fetch_usbserial1v+0x34>
 80a24e6:	aa01      	add	r2, sp, #4
 80a24e8:	2101      	movs	r1, #1
 80a24ea:	4808      	ldr	r0, [pc, #32]	; (80a250c <_Z17_fetch_usbserial1v+0x40>)
 80a24ec:	f7ff ff82 	bl	80a23f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a24f0:	4620      	mov	r0, r4
 80a24f2:	f7fd fddb 	bl	80a00ac <__cxa_guard_release>
 80a24f6:	4a06      	ldr	r2, [pc, #24]	; (80a2510 <_Z17_fetch_usbserial1v+0x44>)
 80a24f8:	4906      	ldr	r1, [pc, #24]	; (80a2514 <_Z17_fetch_usbserial1v+0x48>)
 80a24fa:	4804      	ldr	r0, [pc, #16]	; (80a250c <_Z17_fetch_usbserial1v+0x40>)
 80a24fc:	f000 f9b0 	bl	80a2860 <__aeabi_atexit>
  return _usbserial1;
}
 80a2500:	4802      	ldr	r0, [pc, #8]	; (80a250c <_Z17_fetch_usbserial1v+0x40>)
 80a2502:	b006      	add	sp, #24
 80a2504:	bd10      	pop	{r4, pc}
 80a2506:	bf00      	nop
 80a2508:	200003d8 	.word	0x200003d8
 80a250c:	20000460 	.word	0x20000460
 80a2510:	2000006c 	.word	0x2000006c
 80a2514:	080a2375 	.word	0x080a2375

080a2518 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2518:	2200      	movs	r2, #0
 80a251a:	4611      	mov	r1, r2
 80a251c:	6840      	ldr	r0, [r0, #4]
 80a251e:	f7ff b9f3 	b.w	80a1908 <network_ready>

080a2522 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2522:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2524:	4616      	mov	r6, r2
 80a2526:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2528:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a252a:	460f      	mov	r7, r1
 80a252c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a252e:	2100      	movs	r1, #0
 80a2530:	a803      	add	r0, sp, #12
 80a2532:	f000 fafe 	bl	80a2b32 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2536:	4630      	mov	r0, r6
 80a2538:	f000 fb2c 	bl	80a2b94 <strlen>
 80a253c:	2500      	movs	r5, #0
 80a253e:	9500      	str	r5, [sp, #0]
 80a2540:	b281      	uxth	r1, r0
 80a2542:	687b      	ldr	r3, [r7, #4]
 80a2544:	aa03      	add	r2, sp, #12
 80a2546:	4630      	mov	r0, r6
 80a2548:	f7ff f982 	bl	80a1850 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a254c:	b120      	cbz	r0, 80a2558 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a254e:	4629      	mov	r1, r5
 80a2550:	4620      	mov	r0, r4
 80a2552:	f7ff fac1 	bl	80a1ad8 <_ZN9IPAddressC1Em>
 80a2556:	e003      	b.n	80a2560 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2558:	a903      	add	r1, sp, #12
 80a255a:	4620      	mov	r0, r4
 80a255c:	f7ff faaa 	bl	80a1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2560:	4620      	mov	r0, r4
 80a2562:	b009      	add	sp, #36	; 0x24
 80a2564:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2566 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2566:	2200      	movs	r2, #0
 80a2568:	4611      	mov	r1, r2
 80a256a:	6840      	ldr	r0, [r0, #4]
 80a256c:	f7ff b9ec 	b.w	80a1948 <network_listening>

080a2570 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2570:	2200      	movs	r2, #0
 80a2572:	4611      	mov	r1, r2
 80a2574:	6840      	ldr	r0, [r0, #4]
 80a2576:	f7ff b9f7 	b.w	80a1968 <network_get_listen_timeout>

080a257a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a257a:	2200      	movs	r2, #0
 80a257c:	6840      	ldr	r0, [r0, #4]
 80a257e:	f7ff b9eb 	b.w	80a1958 <network_set_listen_timeout>

080a2582 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2582:	2200      	movs	r2, #0
 80a2584:	f081 0101 	eor.w	r1, r1, #1
 80a2588:	6840      	ldr	r0, [r0, #4]
 80a258a:	f7ff b9d5 	b.w	80a1938 <network_listen>

080a258e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a258e:	2300      	movs	r3, #0
 80a2590:	461a      	mov	r2, r3
 80a2592:	4619      	mov	r1, r3
 80a2594:	6840      	ldr	r0, [r0, #4]
 80a2596:	f7ff b9c7 	b.w	80a1928 <network_off>

080a259a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a259a:	2300      	movs	r3, #0
 80a259c:	461a      	mov	r2, r3
 80a259e:	4619      	mov	r1, r3
 80a25a0:	6840      	ldr	r0, [r0, #4]
 80a25a2:	f7ff b9b9 	b.w	80a1918 <network_on>

080a25a6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a25a6:	2200      	movs	r2, #0
 80a25a8:	4611      	mov	r1, r2
 80a25aa:	6840      	ldr	r0, [r0, #4]
 80a25ac:	f7ff b99c 	b.w	80a18e8 <network_connecting>

080a25b0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a25b0:	2200      	movs	r2, #0
 80a25b2:	2102      	movs	r1, #2
 80a25b4:	6840      	ldr	r0, [r0, #4]
 80a25b6:	f7ff b99f 	b.w	80a18f8 <network_disconnect>

080a25ba <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a25ba:	2300      	movs	r3, #0
 80a25bc:	461a      	mov	r2, r3
 80a25be:	6840      	ldr	r0, [r0, #4]
 80a25c0:	f7ff b98a 	b.w	80a18d8 <network_connect>

080a25c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a25c4:	4b02      	ldr	r3, [pc, #8]	; (80a25d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a25c6:	2204      	movs	r2, #4
 80a25c8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a25ca:	4a02      	ldr	r2, [pc, #8]	; (80a25d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a25cc:	601a      	str	r2, [r3, #0]
 80a25ce:	4770      	bx	lr
 80a25d0:	20000578 	.word	0x20000578
 80a25d4:	080a2eb8 	.word	0x080a2eb8

080a25d8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a25d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a25da:	4b14      	ldr	r3, [pc, #80]	; (80a262c <serialEventRun+0x54>)
 80a25dc:	b133      	cbz	r3, 80a25ec <serialEventRun+0x14>
 80a25de:	f7ff ff39 	bl	80a2454 <_Z16_fetch_usbserialv>
 80a25e2:	6803      	ldr	r3, [r0, #0]
 80a25e4:	691b      	ldr	r3, [r3, #16]
 80a25e6:	4798      	blx	r3
 80a25e8:	2800      	cmp	r0, #0
 80a25ea:	dc16      	bgt.n	80a261a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a25ec:	4b10      	ldr	r3, [pc, #64]	; (80a2630 <serialEventRun+0x58>)
 80a25ee:	b133      	cbz	r3, 80a25fe <serialEventRun+0x26>
 80a25f0:	f7ff fe98 	bl	80a2324 <_Z22__fetch_global_Serial1v>
 80a25f4:	6803      	ldr	r3, [r0, #0]
 80a25f6:	691b      	ldr	r3, [r3, #16]
 80a25f8:	4798      	blx	r3
 80a25fa:	2800      	cmp	r0, #0
 80a25fc:	dc10      	bgt.n	80a2620 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a25fe:	4b0d      	ldr	r3, [pc, #52]	; (80a2634 <serialEventRun+0x5c>)
 80a2600:	b10b      	cbz	r3, 80a2606 <serialEventRun+0x2e>
 80a2602:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2606:	4b0c      	ldr	r3, [pc, #48]	; (80a2638 <serialEventRun+0x60>)
 80a2608:	b17b      	cbz	r3, 80a262a <serialEventRun+0x52>
 80a260a:	f7ff ff5f 	bl	80a24cc <_Z17_fetch_usbserial1v>
 80a260e:	6803      	ldr	r3, [r0, #0]
 80a2610:	691b      	ldr	r3, [r3, #16]
 80a2612:	4798      	blx	r3
 80a2614:	2800      	cmp	r0, #0
 80a2616:	dc06      	bgt.n	80a2626 <serialEventRun+0x4e>
 80a2618:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a261a:	f3af 8000 	nop.w
 80a261e:	e7e5      	b.n	80a25ec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2620:	f3af 8000 	nop.w
 80a2624:	e7eb      	b.n	80a25fe <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2626:	f3af 8000 	nop.w
 80a262a:	bd08      	pop	{r3, pc}
	...

080a263c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a263c:	b508      	push	{r3, lr}
	serialEventRun();
 80a263e:	f7ff ffcb 	bl	80a25d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2642:	f7fe ffeb 	bl	80a161c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2646:	4b01      	ldr	r3, [pc, #4]	; (80a264c <_post_loop+0x10>)
 80a2648:	6018      	str	r0, [r3, #0]
 80a264a:	bd08      	pop	{r3, pc}
 80a264c:	20000588 	.word	0x20000588

080a2650 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2650:	4802      	ldr	r0, [pc, #8]	; (80a265c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2652:	4a03      	ldr	r2, [pc, #12]	; (80a2660 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2654:	4903      	ldr	r1, [pc, #12]	; (80a2664 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2656:	1a12      	subs	r2, r2, r0
 80a2658:	f000 ba60 	b.w	80a2b1c <memcpy>
 80a265c:	40024000 	.word	0x40024000
 80a2660:	40024004 	.word	0x40024004
 80a2664:	080a2f80 	.word	0x080a2f80

080a2668 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2668:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a266a:	2300      	movs	r3, #0
 80a266c:	9300      	str	r3, [sp, #0]
 80a266e:	461a      	mov	r2, r3
 80a2670:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2674:	f7ff f916 	bl	80a18a4 <system_ctrl_set_result>
}
 80a2678:	b003      	add	sp, #12
 80a267a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2680 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2680:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2682:	8843      	ldrh	r3, [r0, #2]
 80a2684:	2b0a      	cmp	r3, #10
 80a2686:	d008      	beq.n	80a269a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2688:	2b50      	cmp	r3, #80	; 0x50
 80a268a:	d109      	bne.n	80a26a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a268c:	4b09      	ldr	r3, [pc, #36]	; (80a26b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a268e:	681b      	ldr	r3, [r3, #0]
 80a2690:	b13b      	cbz	r3, 80a26a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2692:	b003      	add	sp, #12
 80a2694:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2698:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a269a:	f7ff ffe5 	bl	80a2668 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a269e:	e006      	b.n	80a26ae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a26a0:	2300      	movs	r3, #0
 80a26a2:	9300      	str	r3, [sp, #0]
 80a26a4:	461a      	mov	r2, r3
 80a26a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a26aa:	f7ff f8fb 	bl	80a18a4 <system_ctrl_set_result>
        break;
    }
}
 80a26ae:	b003      	add	sp, #12
 80a26b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a26b4:	20000580 	.word	0x20000580

080a26b8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a26b8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a26ba:	4c10      	ldr	r4, [pc, #64]	; (80a26fc <module_user_init_hook+0x44>)
 80a26bc:	4d10      	ldr	r5, [pc, #64]	; (80a2700 <module_user_init_hook+0x48>)
 80a26be:	6823      	ldr	r3, [r4, #0]
 80a26c0:	42ab      	cmp	r3, r5
 80a26c2:	4b10      	ldr	r3, [pc, #64]	; (80a2704 <module_user_init_hook+0x4c>)
 80a26c4:	bf0c      	ite	eq
 80a26c6:	2201      	moveq	r2, #1
 80a26c8:	2200      	movne	r2, #0
 80a26ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a26cc:	d002      	beq.n	80a26d4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a26ce:	f7ff ffbf 	bl	80a2650 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a26d2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a26d4:	f7fe ff92 	bl	80a15fc <HAL_RNG_GetRandomNumber>
 80a26d8:	4604      	mov	r4, r0
    srand(seed);
 80a26da:	f000 fa33 	bl	80a2b44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a26de:	4b0a      	ldr	r3, [pc, #40]	; (80a2708 <module_user_init_hook+0x50>)
 80a26e0:	b113      	cbz	r3, 80a26e8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a26e2:	4620      	mov	r0, r4
 80a26e4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a26e8:	2100      	movs	r1, #0
 80a26ea:	4807      	ldr	r0, [pc, #28]	; (80a2708 <module_user_init_hook+0x50>)
 80a26ec:	f7ff f8e4 	bl	80a18b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a26f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a26f4:	2100      	movs	r1, #0
 80a26f6:	4805      	ldr	r0, [pc, #20]	; (80a270c <module_user_init_hook+0x54>)
 80a26f8:	f7ff b8ca 	b.w	80a1890 <system_ctrl_set_app_request_handler>
 80a26fc:	40024000 	.word	0x40024000
 80a2700:	9a271c1e 	.word	0x9a271c1e
 80a2704:	20000584 	.word	0x20000584
 80a2708:	00000000 	.word	0x00000000
 80a270c:	080a2681 	.word	0x080a2681

080a2710 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2710:	b510      	push	{r4, lr}
 80a2712:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2714:	480f      	ldr	r0, [pc, #60]	; (80a2754 <pinAvailable+0x44>)
 80a2716:	f7ff fb33 	bl	80a1d80 <_ZN8SPIClass9isEnabledEv>
 80a271a:	b128      	cbz	r0, 80a2728 <pinAvailable+0x18>
 80a271c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2720:	2b02      	cmp	r3, #2
 80a2722:	d801      	bhi.n	80a2728 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2724:	2000      	movs	r0, #0
 80a2726:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2728:	f000 f840 	bl	80a27ac <_Z19__fetch_global_Wirev>
 80a272c:	f7ff f996 	bl	80a1a5c <_ZN7TwoWire9isEnabledEv>
 80a2730:	b108      	cbz	r0, 80a2736 <pinAvailable+0x26>
 80a2732:	2c01      	cmp	r4, #1
 80a2734:	d9f6      	bls.n	80a2724 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2736:	f7ff fdf5 	bl	80a2324 <_Z22__fetch_global_Serial1v>
 80a273a:	f7ff fdef 	bl	80a231c <_ZN11USARTSerial9isEnabledEv>
 80a273e:	b118      	cbz	r0, 80a2748 <pinAvailable+0x38>
 80a2740:	f1a4 0312 	sub.w	r3, r4, #18
 80a2744:	2b01      	cmp	r3, #1
 80a2746:	d9ed      	bls.n	80a2724 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2748:	2c17      	cmp	r4, #23
 80a274a:	bf8c      	ite	hi
 80a274c:	2000      	movhi	r0, #0
 80a274e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2750:	bd10      	pop	{r4, pc}
 80a2752:	bf00      	nop
 80a2754:	200005bc 	.word	0x200005bc

080a2758 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2758:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a275a:	b538      	push	{r3, r4, r5, lr}
 80a275c:	4604      	mov	r4, r0
 80a275e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2760:	d80a      	bhi.n	80a2778 <pinMode+0x20>
 80a2762:	29ff      	cmp	r1, #255	; 0xff
 80a2764:	d008      	beq.n	80a2778 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2766:	f7ff ffd3 	bl	80a2710 <pinAvailable>
 80a276a:	b128      	cbz	r0, 80a2778 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a276c:	4629      	mov	r1, r5
 80a276e:	4620      	mov	r0, r4
}
 80a2770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2774:	f7fe bf62 	b.w	80a163c <HAL_Pin_Mode>
 80a2778:	bd38      	pop	{r3, r4, r5, pc}

080a277a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a277a:	b538      	push	{r3, r4, r5, lr}
 80a277c:	4604      	mov	r4, r0
 80a277e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2780:	f7fe ff64 	bl	80a164c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2784:	28ff      	cmp	r0, #255	; 0xff
 80a2786:	d010      	beq.n	80a27aa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2788:	2806      	cmp	r0, #6
 80a278a:	d804      	bhi.n	80a2796 <digitalWrite+0x1c>
 80a278c:	234d      	movs	r3, #77	; 0x4d
 80a278e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2792:	07c3      	lsls	r3, r0, #31
 80a2794:	d409      	bmi.n	80a27aa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2796:	4620      	mov	r0, r4
 80a2798:	f7ff ffba 	bl	80a2710 <pinAvailable>
 80a279c:	b128      	cbz	r0, 80a27aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a279e:	4629      	mov	r1, r5
 80a27a0:	4620      	mov	r0, r4
}
 80a27a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a27a6:	f7fe bf59 	b.w	80a165c <HAL_GPIO_Write>
 80a27aa:	bd38      	pop	{r3, r4, r5, pc}

080a27ac <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a27ac:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a27ae:	4d0b      	ldr	r5, [pc, #44]	; (80a27dc <_Z19__fetch_global_Wirev+0x30>)
 80a27b0:	6829      	ldr	r1, [r5, #0]
 80a27b2:	f011 0401 	ands.w	r4, r1, #1
 80a27b6:	d10f      	bne.n	80a27d8 <_Z19__fetch_global_Wirev+0x2c>
 80a27b8:	4628      	mov	r0, r5
 80a27ba:	f7fd fc72 	bl	80a00a2 <__cxa_guard_acquire>
 80a27be:	b158      	cbz	r0, 80a27d8 <_Z19__fetch_global_Wirev+0x2c>
 80a27c0:	4621      	mov	r1, r4
 80a27c2:	4807      	ldr	r0, [pc, #28]	; (80a27e0 <_Z19__fetch_global_Wirev+0x34>)
 80a27c4:	f7ff f938 	bl	80a1a38 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a27c8:	4628      	mov	r0, r5
 80a27ca:	f7fd fc6f 	bl	80a00ac <__cxa_guard_release>
 80a27ce:	4a05      	ldr	r2, [pc, #20]	; (80a27e4 <_Z19__fetch_global_Wirev+0x38>)
 80a27d0:	4905      	ldr	r1, [pc, #20]	; (80a27e8 <_Z19__fetch_global_Wirev+0x3c>)
 80a27d2:	4803      	ldr	r0, [pc, #12]	; (80a27e0 <_Z19__fetch_global_Wirev+0x34>)
 80a27d4:	f000 f844 	bl	80a2860 <__aeabi_atexit>
	return wire;
}
 80a27d8:	4801      	ldr	r0, [pc, #4]	; (80a27e0 <_Z19__fetch_global_Wirev+0x34>)
 80a27da:	bd38      	pop	{r3, r4, r5, pc}
 80a27dc:	2000058c 	.word	0x2000058c
 80a27e0:	20000590 	.word	0x20000590
 80a27e4:	2000006c 	.word	0x2000006c
 80a27e8:	080a19e1 	.word	0x080a19e1

080a27ec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a27ec:	b513      	push	{r0, r1, r4, lr}
 80a27ee:	4c08      	ldr	r4, [pc, #32]	; (80a2810 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a27f0:	2300      	movs	r3, #0
 80a27f2:	461a      	mov	r2, r3
 80a27f4:	4619      	mov	r1, r3
 80a27f6:	9300      	str	r3, [sp, #0]
 80a27f8:	4620      	mov	r0, r4
 80a27fa:	f7ff f983 	bl	80a1b04 <_ZN9IPAddressC1Ehhhh>
 80a27fe:	4620      	mov	r0, r4
 80a2800:	4a04      	ldr	r2, [pc, #16]	; (80a2814 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2802:	4905      	ldr	r1, [pc, #20]	; (80a2818 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2804:	b002      	add	sp, #8
 80a2806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a280a:	f000 b829 	b.w	80a2860 <__aeabi_atexit>
 80a280e:	bf00      	nop
 80a2810:	200005a4 	.word	0x200005a4
 80a2814:	2000006c 	.word	0x2000006c
 80a2818:	080a00b3 	.word	0x080a00b3

080a281c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a281c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a281e:	4c0c      	ldr	r4, [pc, #48]	; (80a2850 <_GLOBAL__sub_I_SPI+0x34>)
 80a2820:	4e0c      	ldr	r6, [pc, #48]	; (80a2854 <_GLOBAL__sub_I_SPI+0x38>)
 80a2822:	4d0d      	ldr	r5, [pc, #52]	; (80a2858 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2824:	2100      	movs	r1, #0
 80a2826:	4620      	mov	r0, r4
 80a2828:	f7ff fa96 	bl	80a1d58 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a282c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a282e:	4c0b      	ldr	r4, [pc, #44]	; (80a285c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2830:	4632      	mov	r2, r6
 80a2832:	4629      	mov	r1, r5
 80a2834:	f000 f814 	bl	80a2860 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2838:	2101      	movs	r1, #1
 80a283a:	4620      	mov	r0, r4
 80a283c:	f7ff fa8c 	bl	80a1d58 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2840:	4632      	mov	r2, r6
 80a2842:	4629      	mov	r1, r5
 80a2844:	4620      	mov	r0, r4
 80a2846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a284a:	f000 b809 	b.w	80a2860 <__aeabi_atexit>
 80a284e:	bf00      	nop
 80a2850:	200005bc 	.word	0x200005bc
 80a2854:	2000006c 	.word	0x2000006c
 80a2858:	080a1d49 	.word	0x080a1d49
 80a285c:	200005cc 	.word	0x200005cc

080a2860 <__aeabi_atexit>:
 80a2860:	460b      	mov	r3, r1
 80a2862:	4601      	mov	r1, r0
 80a2864:	4618      	mov	r0, r3
 80a2866:	f000 b94b 	b.w	80a2b00 <__cxa_atexit>

080a286a <_ZdlPvj>:
 80a286a:	f7fd bc18 	b.w	80a009e <_ZdlPv>
	...

080a2870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2870:	4b24      	ldr	r3, [pc, #144]	; (80a2904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2872:	681a      	ldr	r2, [r3, #0]
 80a2874:	07d0      	lsls	r0, r2, #31
 80a2876:	bf5c      	itt	pl
 80a2878:	2201      	movpl	r2, #1
 80a287a:	601a      	strpl	r2, [r3, #0]
 80a287c:	4b22      	ldr	r3, [pc, #136]	; (80a2908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a287e:	681a      	ldr	r2, [r3, #0]
 80a2880:	07d1      	lsls	r1, r2, #31
 80a2882:	bf5c      	itt	pl
 80a2884:	2201      	movpl	r2, #1
 80a2886:	601a      	strpl	r2, [r3, #0]
 80a2888:	4b20      	ldr	r3, [pc, #128]	; (80a290c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a288a:	681a      	ldr	r2, [r3, #0]
 80a288c:	07d2      	lsls	r2, r2, #31
 80a288e:	bf5c      	itt	pl
 80a2890:	2201      	movpl	r2, #1
 80a2892:	601a      	strpl	r2, [r3, #0]
 80a2894:	4b1e      	ldr	r3, [pc, #120]	; (80a2910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2896:	681a      	ldr	r2, [r3, #0]
 80a2898:	07d0      	lsls	r0, r2, #31
 80a289a:	bf5c      	itt	pl
 80a289c:	2201      	movpl	r2, #1
 80a289e:	601a      	strpl	r2, [r3, #0]
 80a28a0:	4b1c      	ldr	r3, [pc, #112]	; (80a2914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a28a2:	681a      	ldr	r2, [r3, #0]
 80a28a4:	07d1      	lsls	r1, r2, #31
 80a28a6:	bf5c      	itt	pl
 80a28a8:	2201      	movpl	r2, #1
 80a28aa:	601a      	strpl	r2, [r3, #0]
 80a28ac:	4b1a      	ldr	r3, [pc, #104]	; (80a2918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a28ae:	681a      	ldr	r2, [r3, #0]
 80a28b0:	07d2      	lsls	r2, r2, #31
 80a28b2:	bf5c      	itt	pl
 80a28b4:	2201      	movpl	r2, #1
 80a28b6:	601a      	strpl	r2, [r3, #0]
 80a28b8:	4b18      	ldr	r3, [pc, #96]	; (80a291c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a28ba:	681a      	ldr	r2, [r3, #0]
 80a28bc:	07d0      	lsls	r0, r2, #31
 80a28be:	bf5c      	itt	pl
 80a28c0:	2201      	movpl	r2, #1
 80a28c2:	601a      	strpl	r2, [r3, #0]
 80a28c4:	4b16      	ldr	r3, [pc, #88]	; (80a2920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a28c6:	681a      	ldr	r2, [r3, #0]
 80a28c8:	07d1      	lsls	r1, r2, #31
 80a28ca:	bf5c      	itt	pl
 80a28cc:	2201      	movpl	r2, #1
 80a28ce:	601a      	strpl	r2, [r3, #0]
 80a28d0:	4b14      	ldr	r3, [pc, #80]	; (80a2924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a28d2:	681a      	ldr	r2, [r3, #0]
 80a28d4:	07d2      	lsls	r2, r2, #31
 80a28d6:	bf5c      	itt	pl
 80a28d8:	2201      	movpl	r2, #1
 80a28da:	601a      	strpl	r2, [r3, #0]
 80a28dc:	4b12      	ldr	r3, [pc, #72]	; (80a2928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a28de:	681a      	ldr	r2, [r3, #0]
 80a28e0:	07d0      	lsls	r0, r2, #31
 80a28e2:	bf5c      	itt	pl
 80a28e4:	2201      	movpl	r2, #1
 80a28e6:	601a      	strpl	r2, [r3, #0]
 80a28e8:	4b10      	ldr	r3, [pc, #64]	; (80a292c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a28ea:	681a      	ldr	r2, [r3, #0]
 80a28ec:	07d1      	lsls	r1, r2, #31
 80a28ee:	bf5c      	itt	pl
 80a28f0:	2201      	movpl	r2, #1
 80a28f2:	601a      	strpl	r2, [r3, #0]
 80a28f4:	4b0e      	ldr	r3, [pc, #56]	; (80a2930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a28f6:	681a      	ldr	r2, [r3, #0]
 80a28f8:	07d2      	lsls	r2, r2, #31
 80a28fa:	bf5c      	itt	pl
 80a28fc:	2201      	movpl	r2, #1
 80a28fe:	601a      	strpl	r2, [r3, #0]
 80a2900:	4770      	bx	lr
 80a2902:	bf00      	nop
 80a2904:	20000608 	.word	0x20000608
 80a2908:	20000604 	.word	0x20000604
 80a290c:	20000600 	.word	0x20000600
 80a2910:	200005fc 	.word	0x200005fc
 80a2914:	200005f8 	.word	0x200005f8
 80a2918:	200005f4 	.word	0x200005f4
 80a291c:	200005f0 	.word	0x200005f0
 80a2920:	200005ec 	.word	0x200005ec
 80a2924:	200005e8 	.word	0x200005e8
 80a2928:	200005e4 	.word	0x200005e4
 80a292c:	200005e0 	.word	0x200005e0
 80a2930:	200005dc 	.word	0x200005dc

080a2934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2934:	4b18      	ldr	r3, [pc, #96]	; (80a2998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2936:	681a      	ldr	r2, [r3, #0]
 80a2938:	07d1      	lsls	r1, r2, #31
 80a293a:	bf5c      	itt	pl
 80a293c:	2201      	movpl	r2, #1
 80a293e:	601a      	strpl	r2, [r3, #0]
 80a2940:	4b16      	ldr	r3, [pc, #88]	; (80a299c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2942:	681a      	ldr	r2, [r3, #0]
 80a2944:	07d2      	lsls	r2, r2, #31
 80a2946:	bf5c      	itt	pl
 80a2948:	2201      	movpl	r2, #1
 80a294a:	601a      	strpl	r2, [r3, #0]
 80a294c:	4b14      	ldr	r3, [pc, #80]	; (80a29a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a294e:	681a      	ldr	r2, [r3, #0]
 80a2950:	07d0      	lsls	r0, r2, #31
 80a2952:	bf5c      	itt	pl
 80a2954:	2201      	movpl	r2, #1
 80a2956:	601a      	strpl	r2, [r3, #0]
 80a2958:	4b12      	ldr	r3, [pc, #72]	; (80a29a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a295a:	681a      	ldr	r2, [r3, #0]
 80a295c:	07d1      	lsls	r1, r2, #31
 80a295e:	bf5c      	itt	pl
 80a2960:	2201      	movpl	r2, #1
 80a2962:	601a      	strpl	r2, [r3, #0]
 80a2964:	4b10      	ldr	r3, [pc, #64]	; (80a29a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2966:	681a      	ldr	r2, [r3, #0]
 80a2968:	07d2      	lsls	r2, r2, #31
 80a296a:	bf5c      	itt	pl
 80a296c:	2201      	movpl	r2, #1
 80a296e:	601a      	strpl	r2, [r3, #0]
 80a2970:	4b0e      	ldr	r3, [pc, #56]	; (80a29ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2972:	681a      	ldr	r2, [r3, #0]
 80a2974:	07d0      	lsls	r0, r2, #31
 80a2976:	bf5c      	itt	pl
 80a2978:	2201      	movpl	r2, #1
 80a297a:	601a      	strpl	r2, [r3, #0]
 80a297c:	4b0c      	ldr	r3, [pc, #48]	; (80a29b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a297e:	681a      	ldr	r2, [r3, #0]
 80a2980:	07d1      	lsls	r1, r2, #31
 80a2982:	bf5c      	itt	pl
 80a2984:	2201      	movpl	r2, #1
 80a2986:	601a      	strpl	r2, [r3, #0]
 80a2988:	4b0a      	ldr	r3, [pc, #40]	; (80a29b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a298a:	681a      	ldr	r2, [r3, #0]
 80a298c:	07d2      	lsls	r2, r2, #31
 80a298e:	bf5c      	itt	pl
 80a2990:	2201      	movpl	r2, #1
 80a2992:	601a      	strpl	r2, [r3, #0]
 80a2994:	4770      	bx	lr
 80a2996:	bf00      	nop
 80a2998:	20000628 	.word	0x20000628
 80a299c:	20000624 	.word	0x20000624
 80a29a0:	20000620 	.word	0x20000620
 80a29a4:	2000061c 	.word	0x2000061c
 80a29a8:	20000618 	.word	0x20000618
 80a29ac:	20000614 	.word	0x20000614
 80a29b0:	20000610 	.word	0x20000610
 80a29b4:	2000060c 	.word	0x2000060c

080a29b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a29b8:	4b18      	ldr	r3, [pc, #96]	; (80a2a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a29ba:	681a      	ldr	r2, [r3, #0]
 80a29bc:	07d1      	lsls	r1, r2, #31
 80a29be:	bf5c      	itt	pl
 80a29c0:	2201      	movpl	r2, #1
 80a29c2:	601a      	strpl	r2, [r3, #0]
 80a29c4:	4b16      	ldr	r3, [pc, #88]	; (80a2a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a29c6:	681a      	ldr	r2, [r3, #0]
 80a29c8:	07d2      	lsls	r2, r2, #31
 80a29ca:	bf5c      	itt	pl
 80a29cc:	2201      	movpl	r2, #1
 80a29ce:	601a      	strpl	r2, [r3, #0]
 80a29d0:	4b14      	ldr	r3, [pc, #80]	; (80a2a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a29d2:	681a      	ldr	r2, [r3, #0]
 80a29d4:	07d0      	lsls	r0, r2, #31
 80a29d6:	bf5c      	itt	pl
 80a29d8:	2201      	movpl	r2, #1
 80a29da:	601a      	strpl	r2, [r3, #0]
 80a29dc:	4b12      	ldr	r3, [pc, #72]	; (80a2a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a29de:	681a      	ldr	r2, [r3, #0]
 80a29e0:	07d1      	lsls	r1, r2, #31
 80a29e2:	bf5c      	itt	pl
 80a29e4:	2201      	movpl	r2, #1
 80a29e6:	601a      	strpl	r2, [r3, #0]
 80a29e8:	4b10      	ldr	r3, [pc, #64]	; (80a2a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a29ea:	681a      	ldr	r2, [r3, #0]
 80a29ec:	07d2      	lsls	r2, r2, #31
 80a29ee:	bf5c      	itt	pl
 80a29f0:	2201      	movpl	r2, #1
 80a29f2:	601a      	strpl	r2, [r3, #0]
 80a29f4:	4b0e      	ldr	r3, [pc, #56]	; (80a2a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a29f6:	681a      	ldr	r2, [r3, #0]
 80a29f8:	07d0      	lsls	r0, r2, #31
 80a29fa:	bf5c      	itt	pl
 80a29fc:	2201      	movpl	r2, #1
 80a29fe:	601a      	strpl	r2, [r3, #0]
 80a2a00:	4b0c      	ldr	r3, [pc, #48]	; (80a2a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a02:	681a      	ldr	r2, [r3, #0]
 80a2a04:	07d1      	lsls	r1, r2, #31
 80a2a06:	bf5c      	itt	pl
 80a2a08:	2201      	movpl	r2, #1
 80a2a0a:	601a      	strpl	r2, [r3, #0]
 80a2a0c:	4b0a      	ldr	r3, [pc, #40]	; (80a2a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2a0e:	681a      	ldr	r2, [r3, #0]
 80a2a10:	07d2      	lsls	r2, r2, #31
 80a2a12:	bf5c      	itt	pl
 80a2a14:	2201      	movpl	r2, #1
 80a2a16:	601a      	strpl	r2, [r3, #0]
 80a2a18:	4770      	bx	lr
 80a2a1a:	bf00      	nop
 80a2a1c:	20000648 	.word	0x20000648
 80a2a20:	20000644 	.word	0x20000644
 80a2a24:	20000640 	.word	0x20000640
 80a2a28:	2000063c 	.word	0x2000063c
 80a2a2c:	20000638 	.word	0x20000638
 80a2a30:	20000634 	.word	0x20000634
 80a2a34:	20000630 	.word	0x20000630
 80a2a38:	2000062c 	.word	0x2000062c

080a2a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2a3c:	4b24      	ldr	r3, [pc, #144]	; (80a2ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2a3e:	681a      	ldr	r2, [r3, #0]
 80a2a40:	07d0      	lsls	r0, r2, #31
 80a2a42:	bf5c      	itt	pl
 80a2a44:	2201      	movpl	r2, #1
 80a2a46:	601a      	strpl	r2, [r3, #0]
 80a2a48:	4b22      	ldr	r3, [pc, #136]	; (80a2ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2a4a:	681a      	ldr	r2, [r3, #0]
 80a2a4c:	07d1      	lsls	r1, r2, #31
 80a2a4e:	bf5c      	itt	pl
 80a2a50:	2201      	movpl	r2, #1
 80a2a52:	601a      	strpl	r2, [r3, #0]
 80a2a54:	4b20      	ldr	r3, [pc, #128]	; (80a2ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2a56:	681a      	ldr	r2, [r3, #0]
 80a2a58:	07d2      	lsls	r2, r2, #31
 80a2a5a:	bf5c      	itt	pl
 80a2a5c:	2201      	movpl	r2, #1
 80a2a5e:	601a      	strpl	r2, [r3, #0]
 80a2a60:	4b1e      	ldr	r3, [pc, #120]	; (80a2adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2a62:	681a      	ldr	r2, [r3, #0]
 80a2a64:	07d0      	lsls	r0, r2, #31
 80a2a66:	bf5c      	itt	pl
 80a2a68:	2201      	movpl	r2, #1
 80a2a6a:	601a      	strpl	r2, [r3, #0]
 80a2a6c:	4b1c      	ldr	r3, [pc, #112]	; (80a2ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2a6e:	681a      	ldr	r2, [r3, #0]
 80a2a70:	07d1      	lsls	r1, r2, #31
 80a2a72:	bf5c      	itt	pl
 80a2a74:	2201      	movpl	r2, #1
 80a2a76:	601a      	strpl	r2, [r3, #0]
 80a2a78:	4b1a      	ldr	r3, [pc, #104]	; (80a2ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2a7a:	681a      	ldr	r2, [r3, #0]
 80a2a7c:	07d2      	lsls	r2, r2, #31
 80a2a7e:	bf5c      	itt	pl
 80a2a80:	2201      	movpl	r2, #1
 80a2a82:	601a      	strpl	r2, [r3, #0]
 80a2a84:	4b18      	ldr	r3, [pc, #96]	; (80a2ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2a86:	681a      	ldr	r2, [r3, #0]
 80a2a88:	07d0      	lsls	r0, r2, #31
 80a2a8a:	bf5c      	itt	pl
 80a2a8c:	2201      	movpl	r2, #1
 80a2a8e:	601a      	strpl	r2, [r3, #0]
 80a2a90:	4b16      	ldr	r3, [pc, #88]	; (80a2aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2a92:	681a      	ldr	r2, [r3, #0]
 80a2a94:	07d1      	lsls	r1, r2, #31
 80a2a96:	bf5c      	itt	pl
 80a2a98:	2201      	movpl	r2, #1
 80a2a9a:	601a      	strpl	r2, [r3, #0]
 80a2a9c:	4b14      	ldr	r3, [pc, #80]	; (80a2af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2a9e:	681a      	ldr	r2, [r3, #0]
 80a2aa0:	07d2      	lsls	r2, r2, #31
 80a2aa2:	bf5c      	itt	pl
 80a2aa4:	2201      	movpl	r2, #1
 80a2aa6:	601a      	strpl	r2, [r3, #0]
 80a2aa8:	4b12      	ldr	r3, [pc, #72]	; (80a2af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2aaa:	681a      	ldr	r2, [r3, #0]
 80a2aac:	07d0      	lsls	r0, r2, #31
 80a2aae:	bf5c      	itt	pl
 80a2ab0:	2201      	movpl	r2, #1
 80a2ab2:	601a      	strpl	r2, [r3, #0]
 80a2ab4:	4b10      	ldr	r3, [pc, #64]	; (80a2af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2ab6:	681a      	ldr	r2, [r3, #0]
 80a2ab8:	07d1      	lsls	r1, r2, #31
 80a2aba:	bf5c      	itt	pl
 80a2abc:	2201      	movpl	r2, #1
 80a2abe:	601a      	strpl	r2, [r3, #0]
 80a2ac0:	4b0e      	ldr	r3, [pc, #56]	; (80a2afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2ac2:	681a      	ldr	r2, [r3, #0]
 80a2ac4:	07d2      	lsls	r2, r2, #31
 80a2ac6:	bf5c      	itt	pl
 80a2ac8:	2201      	movpl	r2, #1
 80a2aca:	601a      	strpl	r2, [r3, #0]
 80a2acc:	4770      	bx	lr
 80a2ace:	bf00      	nop
 80a2ad0:	20000678 	.word	0x20000678
 80a2ad4:	20000674 	.word	0x20000674
 80a2ad8:	20000670 	.word	0x20000670
 80a2adc:	2000066c 	.word	0x2000066c
 80a2ae0:	20000668 	.word	0x20000668
 80a2ae4:	20000664 	.word	0x20000664
 80a2ae8:	20000660 	.word	0x20000660
 80a2aec:	2000065c 	.word	0x2000065c
 80a2af0:	20000658 	.word	0x20000658
 80a2af4:	20000654 	.word	0x20000654
 80a2af8:	20000650 	.word	0x20000650
 80a2afc:	2000064c 	.word	0x2000064c

080a2b00 <__cxa_atexit>:
 80a2b00:	b510      	push	{r4, lr}
 80a2b02:	4c05      	ldr	r4, [pc, #20]	; (80a2b18 <__cxa_atexit+0x18>)
 80a2b04:	4613      	mov	r3, r2
 80a2b06:	b12c      	cbz	r4, 80a2b14 <__cxa_atexit+0x14>
 80a2b08:	460a      	mov	r2, r1
 80a2b0a:	4601      	mov	r1, r0
 80a2b0c:	2002      	movs	r0, #2
 80a2b0e:	f3af 8000 	nop.w
 80a2b12:	bd10      	pop	{r4, pc}
 80a2b14:	4620      	mov	r0, r4
 80a2b16:	bd10      	pop	{r4, pc}
 80a2b18:	00000000 	.word	0x00000000

080a2b1c <memcpy>:
 80a2b1c:	b510      	push	{r4, lr}
 80a2b1e:	1e43      	subs	r3, r0, #1
 80a2b20:	440a      	add	r2, r1
 80a2b22:	4291      	cmp	r1, r2
 80a2b24:	d004      	beq.n	80a2b30 <memcpy+0x14>
 80a2b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b2e:	e7f8      	b.n	80a2b22 <memcpy+0x6>
 80a2b30:	bd10      	pop	{r4, pc}

080a2b32 <memset>:
 80a2b32:	4603      	mov	r3, r0
 80a2b34:	4402      	add	r2, r0
 80a2b36:	4293      	cmp	r3, r2
 80a2b38:	d002      	beq.n	80a2b40 <memset+0xe>
 80a2b3a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2b3e:	e7fa      	b.n	80a2b36 <memset+0x4>
 80a2b40:	4770      	bx	lr
	...

080a2b44 <srand>:
 80a2b44:	b538      	push	{r3, r4, r5, lr}
 80a2b46:	4b12      	ldr	r3, [pc, #72]	; (80a2b90 <srand+0x4c>)
 80a2b48:	4605      	mov	r5, r0
 80a2b4a:	681c      	ldr	r4, [r3, #0]
 80a2b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b4e:	b9d3      	cbnz	r3, 80a2b86 <srand+0x42>
 80a2b50:	2018      	movs	r0, #24
 80a2b52:	f7fe ff21 	bl	80a1998 <malloc>
 80a2b56:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2b5a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2b5c:	8003      	strh	r3, [r0, #0]
 80a2b5e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2b62:	8043      	strh	r3, [r0, #2]
 80a2b64:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2b68:	8083      	strh	r3, [r0, #4]
 80a2b6a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2b6e:	80c3      	strh	r3, [r0, #6]
 80a2b70:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2b74:	8103      	strh	r3, [r0, #8]
 80a2b76:	2305      	movs	r3, #5
 80a2b78:	8143      	strh	r3, [r0, #10]
 80a2b7a:	230b      	movs	r3, #11
 80a2b7c:	8183      	strh	r3, [r0, #12]
 80a2b7e:	2201      	movs	r2, #1
 80a2b80:	2300      	movs	r3, #0
 80a2b82:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b88:	2200      	movs	r2, #0
 80a2b8a:	611d      	str	r5, [r3, #16]
 80a2b8c:	615a      	str	r2, [r3, #20]
 80a2b8e:	bd38      	pop	{r3, r4, r5, pc}
 80a2b90:	20000068 	.word	0x20000068

080a2b94 <strlen>:
 80a2b94:	4603      	mov	r3, r0
 80a2b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2b9a:	2a00      	cmp	r2, #0
 80a2b9c:	d1fb      	bne.n	80a2b96 <strlen+0x2>
 80a2b9e:	1a18      	subs	r0, r3, r0
 80a2ba0:	3801      	subs	r0, #1
 80a2ba2:	4770      	bx	lr

080a2ba4 <dynalib_user>:
 80a2ba4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2bb4:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a2bc4:	7265 505f 4255 494c 4853 4900 204e 4f43     er_PUBLISH.IN CO
 80a2bd4:	4f4c 2052 4957 4550 4900 204e 5550 534c     LOR WIPE.IN PULS
 80a2be4:	2045 4857 5449 0045 4e49 5220 4941 424e     E WHITE.IN RAINB
 80a2bf4:	574f 4620 4441 0045 4e49 7720 6968 6574     OW FADE.IN white
 80a2c04:	6f20 6576 2072 6172 6e69 6f62 0077 4e49      over rainbow.IN
 80a2c14:	6620 6c75 206c 6877 7469 0065 4e49 7220      full white.IN r
 80a2c24:	6961 626e 776f 6320 6379 656c 4900 204e     ainbow cycle.IN 
 80a2c34:	6172 6e69 6f62 0077                         rainbow.

080a2c3c <CSWTCH.215>:
 80a2c3c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2c4c:	0050 0000                                   P...

080a2c50 <_ZTV7TwoWire>:
	...
 80a2c58:	19e1 080a 1a2b 080a 1a03 080a 19e3 080a     ....+...........
 80a2c68:	1a0b 080a 1a13 080a 1a1b 080a 1a23 080a     ............#...

080a2c78 <_ZTV9IPAddress>:
	...
 80a2c80:	1a65 080a 00b3 080a 00d5 080a 6162 6475     e...........baud
 80a2c90:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2ca0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2cb0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2cc0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2cd0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2ce0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2cf0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2d00:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2d10:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2d20:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2d30:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a2d40:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a2d50:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2d60:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2d70 <_ZTVN5spark12NetworkClassE>:
	...
 80a2d78:	1b45 080a 1b4f 080a 1b59 080a 1b63 080a     E...O...Y...c...
 80a2d88:	1b6d 080a 1b79 080a 1b85 080a 1b91 080a     m...y...........
 80a2d98:	1b99 080a 1ba3 080a 1bad 080a               ............

080a2da4 <_ZTV8SPIClass>:
	...
 80a2dac:	1d49 080a 1d4b 080a 005a 2b25 3330 3a64     I...K...Z.%+03d:
 80a2dbc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2dcc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2ddc:	0000 0000                                   ....

080a2de0 <_ZTV3UDP>:
	...
 80a2de8:	00b5 080a 00e3 080a 1e87 080a 1fa7 080a     ................
 80a2df8:	1e7f 080a 1e9d 080a 1ebb 080a 1ed5 080a     ................
 80a2e08:	1ef7 080a 1f41 080a 1f63 080a 20f9 080a     ....A...c.... ..
 80a2e18:	200d 080a 1e69 080a 2209 080a 2075 080a     . ..i...."..u ..
 80a2e28:	2131 080a 2237 080a 1fd1 080a 1e75 080a     1!..7"......u...
 80a2e38:	20d9 080a 1e7b 080a 1ed7 080a fff0 ffff     . ..{...........
 80a2e48:	0000 0000 1eef 080a                         ........

080a2e50 <_ZTV11USARTSerial>:
	...
 80a2e58:	226f 080a 22bf 080a 22cd 080a 1c29 080a     o"..."..."..)...
 80a2e68:	2283 080a 22a5 080a 2291 080a 22b9 080a     ."..."..."..."..
 80a2e78:	2271 080a 2275 080a                         q"..u"..

080a2e80 <_ZTV9USBSerial>:
	...
 80a2e88:	2375 080a 23c5 080a 23d3 080a 1c29 080a     u#...#...#..)...
 80a2e98:	23b1 080a 2377 080a 238d 080a 23bf 080a     .#..w#...#...#..
 80a2ea8:	23a3 080a 2371 080a                         .#..q#..

080a2eb0 <_ZTVN5spark9WiFiClassE>:
	...
 80a2eb8:	25bb 080a 25b1 080a 25a7 080a 2519 080a     .%...%...%...%..
 80a2ec8:	259b 080a 258f 080a 2583 080a 257b 080a     .%...%...%..{%..
 80a2ed8:	2571 080a 2567 080a 2523 080a               q%..g%..#%..

080a2ee4 <__sf_fake_stdin>:
	...

080a2f04 <__sf_fake_stdout>:
	...

080a2f24 <__sf_fake_stderr>:
	...
 80a2f44:	0043                                        C.

080a2f46 <link_const_variable_data_end>:
	...

080a2f48 <link_constructors_location>:
 80a2f48:	080a022d 	.word	0x080a022d
 80a2f4c:	080a15d9 	.word	0x080a15d9
 80a2f50:	080a1b35 	.word	0x080a1b35
 80a2f54:	080a1c15 	.word	0x080a1c15
 80a2f58:	080a1d2d 	.word	0x080a1d2d
 80a2f5c:	080a1e3d 	.word	0x080a1e3d
 80a2f60:	080a1e55 	.word	0x080a1e55
 80a2f64:	080a25c5 	.word	0x080a25c5
 80a2f68:	080a27ed 	.word	0x080a27ed
 80a2f6c:	080a281d 	.word	0x080a281d
 80a2f70:	080a2871 	.word	0x080a2871
 80a2f74:	080a2935 	.word	0x080a2935
 80a2f78:	080a29b9 	.word	0x080a29b9
 80a2f7c:	080a2a3d 	.word	0x080a2a3d
