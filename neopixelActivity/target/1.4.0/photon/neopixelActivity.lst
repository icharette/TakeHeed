
/Users/ninjacat/Documents/Particle/TakeHeed/neopixelActivity/target/1.4.0/photon/neopixelActivity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003344  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3360  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a3364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a33d0  080a33d0  000233d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a33f8  080a33f8  000233f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000aaf6a  00000000  00000000  000233fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fc99  00000000  00000000  000ce366  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001525f  00000000  00000000  000ddfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020e8  00000000  00000000  000f325e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000034a8  00000000  00000000  000f5346  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002482a  00000000  00000000  000f87ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023f64  00000000  00000000  0011d018  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5da8  00000000  00000000  00140f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bbd0  00000000  00000000  001e6d24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 ff21 	bl	80a2e74 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 ff26 	bl	80a2e8a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3364 	.word	0x080a3364
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000067c 	.word	0x2000067c
 80a0058:	2000067c 	.word	0x2000067c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fba9 	bl	80a27b4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3328 	.word	0x080a3328
 80a0084:	080a3360 	.word	0x080a3360

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f92d 	bl	80a02ec <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bb4f 	b.w	80a2738 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 bced 	b.w	80a1a78 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bcf3 	b.w	80a1a88 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f001 ffbc 	bl	80a203c <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f002 f8f1 	bl	80a22ac <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a31c8 	.word	0x080a31c8

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f002 fc44 	bl	80a2966 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f002 fc3a 	bl	80a2966 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

void setup() {
 80a00f8:	b570      	push	{r4, r5, r6, lr}
 80a00fa:	b096      	sub	sp, #88	; 0x58

    while(!Serial);
 80a00fc:	f002 fa28 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a0100:	f002 fa0d 	bl	80a251e <_ZN9USBSerialcvbEv>
 80a0104:	2800      	cmp	r0, #0
 80a0106:	d0f9      	beq.n	80a00fc <setup+0x4>
 80a0108:	4c2b      	ldr	r4, [pc, #172]	; (80a01b8 <setup+0xc0>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a010a:	2300      	movs	r3, #0
 80a010c:	461a      	mov	r2, r3
 80a010e:	4619      	mov	r1, r3
 80a0110:	6860      	ldr	r0, [r4, #4]
 80a0112:	f001 fc51 	bl	80a19b8 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0116:	2200      	movs	r2, #0
 80a0118:	4611      	mov	r1, r2
 80a011a:	6860      	ldr	r0, [r4, #4]
 80a011c:	4d26      	ldr	r5, [pc, #152]	; (80a01b8 <setup+0xc0>)
 80a011e:	f001 fc63 	bl	80a19e8 <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a0122:	2800      	cmp	r0, #0
 80a0124:	d0f7      	beq.n	80a0116 <setup+0x1e>
    Serial.println("Setup");
 80a0126:	f002 fa13 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a012a:	4924      	ldr	r1, [pc, #144]	; (80a01bc <setup+0xc4>)
 80a012c:	f001 fe2b 	bl	80a1d86 <_ZN5Print7printlnEPKc>
    udp.begin(localPort);
 80a0130:	4b23      	ldr	r3, [pc, #140]	; (80a01c0 <setup+0xc8>)
 80a0132:	2200      	movs	r2, #0
 80a0134:	8819      	ldrh	r1, [r3, #0]
 80a0136:	4823      	ldr	r0, [pc, #140]	; (80a01c4 <setup+0xcc>)
 80a0138:	f001 ff5b 	bl	80a1ff2 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a013c:	2300      	movs	r3, #0
 80a013e:	4619      	mov	r1, r3
 80a0140:	4a21      	ldr	r2, [pc, #132]	; (80a01c8 <setup+0xd0>)
 80a0142:	6868      	ldr	r0, [r5, #4]
 80a0144:	f001 fc88 	bl	80a1a58 <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a0148:	f002 fa02 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a014c:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a014e:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0150:	2240      	movs	r2, #64	; 0x40
 80a0152:	2100      	movs	r1, #0
 80a0154:	a806      	add	r0, sp, #24
 80a0156:	f002 fe98 	bl	80a2e8a <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a015a:	2340      	movs	r3, #64	; 0x40
 80a015c:	aa06      	add	r2, sp, #24
 80a015e:	4621      	mov	r1, r4
 80a0160:	9400      	str	r4, [sp, #0]
 80a0162:	6868      	ldr	r0, [r5, #4]
 80a0164:	f001 fc80 	bl	80a1a68 <network_get_hostname>
        return String(buf);
 80a0168:	a906      	add	r1, sp, #24
 80a016a:	a802      	add	r0, sp, #8
 80a016c:	f001 fed0 	bl	80a1f10 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0170:	9902      	ldr	r1, [sp, #8]
 80a0172:	4630      	mov	r0, r6
 80a0174:	f001 fe07 	bl	80a1d86 <_ZN5Print7printlnEPKc>
 80a0178:	a802      	add	r0, sp, #8
 80a017a:	f001 fe82 	bl	80a1e82 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a017e:	f002 f9e7 	bl	80a2550 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0182:	4622      	mov	r2, r4
 80a0184:	4606      	mov	r6, r0
 80a0186:	4621      	mov	r1, r4
 80a0188:	6868      	ldr	r0, [r5, #4]
 80a018a:	f001 fc0d 	bl	80a19a8 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a018e:	1c81      	adds	r1, r0, #2
 80a0190:	a806      	add	r0, sp, #24
 80a0192:	f001 fcff 	bl	80a1b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0196:	a906      	add	r1, sp, #24
 80a0198:	4630      	mov	r0, r6
 80a019a:	f001 fdfe 	bl	80a1d9a <_ZN5Print7printlnERK9Printable>


  strip.setBrightness(BRIGHTNESS);
 80a019e:	2132      	movs	r1, #50	; 0x32
 80a01a0:	480a      	ldr	r0, [pc, #40]	; (80a01cc <setup+0xd4>)
 80a01a2:	f001 fa62 	bl	80a166a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
 80a01a6:	4809      	ldr	r0, [pc, #36]	; (80a01cc <setup+0xd4>)
 80a01a8:	f000 f914 	bl	80a03d4 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show(); // Initialize all pixels to 'off'
 80a01ac:	4807      	ldr	r0, [pc, #28]	; (80a01cc <setup+0xd4>)
 80a01ae:	f000 f947 	bl	80a0440 <_ZN17Adafruit_NeoPixel4showEv>
}
 80a01b2:	b016      	add	sp, #88	; 0x58
 80a01b4:	bd70      	pop	{r4, r5, r6, pc}
 80a01b6:	bf00      	nop
 80a01b8:	20000578 	.word	0x20000578
 80a01bc:	080a2f84 	.word	0x080a2f84
 80a01c0:	20000000 	.word	0x20000000
 80a01c4:	2000008c 	.word	0x2000008c
 80a01c8:	080a2f8a 	.word	0x080a2f8a
 80a01cc:	20000070 	.word	0x20000070

080a01d0 <_Z5Wheelh>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
 80a01d0:	43c0      	mvns	r0, r0
 80a01d2:	b2c0      	uxtb	r0, r0
  if(WheelPos < 85) {
 80a01d4:	2854      	cmp	r0, #84	; 0x54
 80a01d6:	d80a      	bhi.n	80a01ee <_Z5Wheelh+0x1e>
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3,0);
 80a01d8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a01dc:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a01e0:	3801      	subs	r0, #1
 80a01e2:	2300      	movs	r3, #0
 80a01e4:	b2d2      	uxtb	r2, r2
 80a01e6:	4619      	mov	r1, r3
 80a01e8:	b2c0      	uxtb	r0, r0
 80a01ea:	f001 ba35 	b.w	80a1658 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  if(WheelPos < 170) {
 80a01ee:	28a9      	cmp	r0, #169	; 0xa9
 80a01f0:	d80c      	bhi.n	80a020c <_Z5Wheelh+0x3c>
    WheelPos -= 85;
 80a01f2:	3855      	subs	r0, #85	; 0x55
 80a01f4:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3,0);
 80a01f6:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a01fa:	3a01      	subs	r2, #1
 80a01fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0200:	2300      	movs	r3, #0
 80a0202:	b2d2      	uxtb	r2, r2
 80a0204:	b2c9      	uxtb	r1, r1
 80a0206:	4618      	mov	r0, r3
 80a0208:	f001 ba26 	b.w	80a1658 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  WheelPos -= 170;
 80a020c:	3056      	adds	r0, #86	; 0x56
 80a020e:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0,0);
 80a0210:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a0214:	3901      	subs	r1, #1
 80a0216:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a021a:	2300      	movs	r3, #0
 80a021c:	461a      	mov	r2, r3
 80a021e:	b2c9      	uxtb	r1, r1
 80a0220:	b2c0      	uxtb	r0, r0
 80a0222:	f001 ba19 	b.w	80a1658 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
	...

080a0228 <_Z17rainbowFade2Whitehii>:
    strip.show();
  }
}


void rainbowFade2White(uint8_t wait, int rainbowLoops, int whiteLoops) {
 80a0228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a022c:	460f      	mov	r7, r1
 80a022e:	4606      	mov	r6, r0
  Serial.println("IN RAINBOW FADE");
 80a0230:	f002 f98e 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a0234:	492a      	ldr	r1, [pc, #168]	; (80a02e0 <_Z17rainbowFade2Whitehii+0xb8>)
 80a0236:	f001 fda6 	bl	80a1d86 <_ZN5Print7printlnEPKc>
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;
float count = 0;
  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a023a:	2500      	movs	r5, #0
 80a023c:	42bd      	cmp	r5, r7
 80a023e:	da4b      	bge.n	80a02d8 <_Z17rainbowFade2Whitehii+0xb0>
 80a0240:	2400      	movs	r4, #0
 80a0242:	f04f 0800 	mov.w	r8, #0
    for(int j=0; j<1000; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a0246:	4827      	ldr	r0, [pc, #156]	; (80a02e4 <_Z17rainbowFade2Whitehii+0xbc>)
 80a0248:	f001 fa0d 	bl	80a1666 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a024c:	4580      	cmp	r8, r0
 80a024e:	da19      	bge.n	80a0284 <_Z17rainbowFade2Whitehii+0x5c>

        wheelVal = Wheel(((i * 256 / strip.numPixels()) + j) & 255);
 80a0250:	4824      	ldr	r0, [pc, #144]	; (80a02e4 <_Z17rainbowFade2Whitehii+0xbc>)
 80a0252:	f001 fa08 	bl	80a1666 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0256:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a025a:	fb93 f0f0 	sdiv	r0, r3, r0
 80a025e:	4420      	add	r0, r4
 80a0260:	b2c0      	uxtb	r0, r0
 80a0262:	f7ff ffb5 	bl	80a01d0 <_Z5Wheelh>
 80a0266:	4681      	mov	r9, r0
        redVal = red(wheelVal) * float(fadeVal/fadeMax);
        Serial.print("wheelVal : " );
 80a0268:	f002 f972 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a026c:	491e      	ldr	r1, [pc, #120]	; (80a02e8 <_Z17rainbowFade2Whitehii+0xc0>)
 80a026e:	f001 fd71 	bl	80a1d54 <_ZN5Print5printEPKc>
        Serial.println(wheelVal);
 80a0272:	f002 f96d 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a0276:	220a      	movs	r2, #10
 80a0278:	4649      	mov	r1, r9
 80a027a:	f001 fdc4 	bl	80a1e06 <_ZN5Print7printlnEmi>
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;
float count = 0;
  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<1000; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a027e:	f108 0801 	add.w	r8, r8, #1
 80a0282:	e7e0      	b.n	80a0246 <_Z17rainbowFade2Whitehii+0x1e>
            // strip.setColorDimmed(7, 255, 128,0, wheelVal); //orange wave
        
      }
      
    // while(count<500){
      float val = (rand() % (strip.numPixels() - 0 + 1));
 80a0284:	f002 fe32 	bl	80a2eec <rand>
 80a0288:	4681      	mov	r9, r0
 80a028a:	4816      	ldr	r0, [pc, #88]	; (80a02e4 <_Z17rainbowFade2Whitehii+0xbc>)
 80a028c:	f001 f9eb 	bl	80a1666 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0290:	4680      	mov	r8, r0
            // strip.show();
      delay(wait);
 80a0292:	4630      	mov	r0, r6
 80a0294:	f001 fc08 	bl	80a1aa8 <delay>
      // strip.setPixelColor(val, 255, 128,0);
       strip.show();
 80a0298:	4812      	ldr	r0, [pc, #72]	; (80a02e4 <_Z17rainbowFade2Whitehii+0xbc>)
 80a029a:	f000 f8d1 	bl	80a0440 <_ZN17Adafruit_NeoPixel4showEv>
      delay(wait);
 80a029e:	4630      	mov	r0, r6
 80a02a0:	f001 fc02 	bl	80a1aa8 <delay>
       strip.setColorDimmed(val, 255, 128,0, j);
 80a02a4:	f108 0001 	add.w	r0, r8, #1
 80a02a8:	fb99 f3f0 	sdiv	r3, r9, r0
 80a02ac:	fb00 9013 	mls	r0, r0, r3, r9
 80a02b0:	f002 fd5e 	bl	80a2d70 <__aeabi_i2f>
 80a02b4:	f002 fdb0 	bl	80a2e18 <__aeabi_f2uiz>
 80a02b8:	b2e3      	uxtb	r3, r4
 80a02ba:	9301      	str	r3, [sp, #4]
 80a02bc:	2300      	movs	r3, #0
 80a02be:	9300      	str	r3, [sp, #0]
 80a02c0:	b281      	uxth	r1, r0
 80a02c2:	2380      	movs	r3, #128	; 0x80
 80a02c4:	22ff      	movs	r2, #255	; 0xff
 80a02c6:	4807      	ldr	r0, [pc, #28]	; (80a02e4 <_Z17rainbowFade2Whitehii+0xbc>)
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;
float count = 0;
  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<1000; j++) { // 5 cycles of all colors on wheel
 80a02c8:	3401      	adds	r4, #1
            // strip.show();
      delay(wait);
      // strip.setPixelColor(val, 255, 128,0);
       strip.show();
      delay(wait);
       strip.setColorDimmed(val, 255, 128,0, j);
 80a02ca:	f001 f9b5 	bl	80a1638 <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh>
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;
float count = 0;
  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<1000; j++) { // 5 cycles of all colors on wheel
 80a02ce:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80a02d2:	d1b6      	bne.n	80a0242 <_Z17rainbowFade2Whitehii+0x1a>
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;
float count = 0;
  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a02d4:	3501      	adds	r5, #1
 80a02d6:	e7b1      	b.n	80a023c <_Z17rainbowFade2Whitehii+0x14>
  //     strip.show();
  //   }
  // }

  // delay(500);
}
 80a02d8:	b003      	add	sp, #12
 80a02da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a02de:	bf00      	nop
 80a02e0:	080a2fb8 	.word	0x080a2fb8
 80a02e4:	20000070 	.word	0x20000070
 80a02e8:	080a2fc8 	.word	0x080a2fc8

080a02ec <loop>:
  // pulseWhite(5);

  // fullWhite();
  // delay(2000);

  rainbowFade2White(3,3,1);
 80a02ec:	2103      	movs	r1, #3
 80a02ee:	2201      	movs	r2, #1
 80a02f0:	4608      	mov	r0, r1
 80a02f2:	f7ff bf99 	b.w	80a0228 <_Z17rainbowFade2Whitehii>
	...

080a02f8 <_GLOBAL__sub_I_SystemMode>:
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
 80a02f8:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02fa:	f001 fa07 	bl	80a170c <HAL_Pin_Map>
#include <Particle.h>
// #include <Arduino.h>
// #include <math.h>
#include "neopixel.h"

SYSTEM_THREAD(ENABLED);
 80a02fe:	2100      	movs	r1, #0
 80a0300:	2001      	movs	r0, #1
 80a0302:	f001 fb2d 	bl	80a1960 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0306:	4b15      	ldr	r3, [pc, #84]	; (80a035c <_GLOBAL__sub_I_SystemMode+0x64>)
 80a0308:	2200      	movs	r2, #0
 80a030a:	701a      	strb	r2, [r3, #0]
 80a030c:	805a      	strh	r2, [r3, #2]
 80a030e:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0312:	4d13      	ldr	r5, [pc, #76]	; (80a0360 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a0314:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0316:	2002      	movs	r0, #2
 80a0318:	f001 fb12 	bl	80a1940 <set_system_mode>
 80a031c:	4c11      	ldr	r4, [pc, #68]	; (80a0364 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a031e:	4628      	mov	r0, r5
 80a0320:	f001 fc2a 	bl	80a1b78 <_ZN9IPAddressC1Ev>
 80a0324:	4628      	mov	r0, r5
int port;
UDP udp;
 80a0326:	4d10      	ldr	r5, [pc, #64]	; (80a0368 <_GLOBAL__sub_I_SystemMode+0x70>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0328:	4622      	mov	r2, r4
 80a032a:	4910      	ldr	r1, [pc, #64]	; (80a036c <_GLOBAL__sub_I_SystemMode+0x74>)
 80a032c:	f002 fb16 	bl	80a295c <__aeabi_atexit>
int port;
UDP udp;
 80a0330:	4628      	mov	r0, r5
 80a0332:	f001 ff9d 	bl	80a2270 <_ZN3UDPC1Ev>
 80a0336:	4622      	mov	r2, r4
 80a0338:	490d      	ldr	r1, [pc, #52]	; (80a0370 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a033a:	4628      	mov	r0, r5
#define PIXEL_PIN D2
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a033c:	4d0d      	ldr	r5, [pc, #52]	; (80a0374 <_GLOBAL__sub_I_SystemMode+0x7c>)


unsigned int localPort = 8888;
IPAddress ipAddress;
int port;
UDP udp;
 80a033e:	f002 fb0d 	bl	80a295c <__aeabi_atexit>
#define PIXEL_PIN D2
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0342:	2302      	movs	r3, #2
 80a0344:	461a      	mov	r2, r3
 80a0346:	2114      	movs	r1, #20
 80a0348:	4628      	mov	r0, r5
 80a034a:	f000 f868 	bl	80a041e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a034e:	4622      	mov	r2, r4
 80a0350:	4628      	mov	r0, r5
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
 80a0352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define PIXEL_PIN D2
#define PIXEL_COUNT 20
#define PIXEL_TYPE SK6812RGBW
#define BRIGHTNESS 50 // 0 - 255

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);
 80a0356:	4908      	ldr	r1, [pc, #32]	; (80a0378 <_GLOBAL__sub_I_SystemMode+0x80>)
 80a0358:	f002 bb00 	b.w	80a295c <__aeabi_atexit>
 80a035c:	20000084 	.word	0x20000084
 80a0360:	200000d8 	.word	0x200000d8
 80a0364:	2000006c 	.word	0x2000006c
 80a0368:	2000008c 	.word	0x2000008c
 80a036c:	080a00b3 	.word	0x080a00b3
 80a0370:	080a00b5 	.word	0x080a00b5
 80a0374:	20000070 	.word	0x20000070
 80a0378:	080a0381 	.word	0x080a0381

080a037c <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a037c:	f001 b9b6 	b.w	80a16ec <HAL_Timer_Get_Micro_Seconds>

080a0380 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0380:	b510      	push	{r4, lr}
 80a0382:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0384:	68c0      	ldr	r0, [r0, #12]
 80a0386:	b108      	cbz	r0, 80a038c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0388:	f001 fb7e 	bl	80a1a88 <free>
  if (begun) pinMode(pin, INPUT);
 80a038c:	7823      	ldrb	r3, [r4, #0]
 80a038e:	b11b      	cbz	r3, 80a0398 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0390:	2100      	movs	r1, #0
 80a0392:	79e0      	ldrb	r0, [r4, #7]
 80a0394:	f002 fa5e 	bl	80a2854 <pinMode>
}
 80a0398:	4620      	mov	r0, r4
 80a039a:	bd10      	pop	{r4, pc}

080a039c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a039c:	b538      	push	{r3, r4, r5, lr}
 80a039e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a0:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a4:	b108      	cbz	r0, 80a03aa <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a03a6:	f001 fb6f 	bl	80a1a88 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a03aa:	79a3      	ldrb	r3, [r4, #6]
 80a03ac:	2b06      	cmp	r3, #6
 80a03ae:	bf0c      	ite	eq
 80a03b0:	2004      	moveq	r0, #4
 80a03b2:	2003      	movne	r0, #3
 80a03b4:	4368      	muls	r0, r5
 80a03b6:	b280      	uxth	r0, r0
 80a03b8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a03ba:	f001 fb5d 	bl	80a1a78 <malloc>
 80a03be:	60e0      	str	r0, [r4, #12]
 80a03c0:	b128      	cbz	r0, 80a03ce <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a03c2:	88a2      	ldrh	r2, [r4, #4]
 80a03c4:	2100      	movs	r1, #0
 80a03c6:	f002 fd60 	bl	80a2e8a <memset>
    numLEDs = n;
 80a03ca:	8065      	strh	r5, [r4, #2]
 80a03cc:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a03ce:	80a0      	strh	r0, [r4, #4]
 80a03d0:	8060      	strh	r0, [r4, #2]
 80a03d2:	bd38      	pop	{r3, r4, r5, pc}

080a03d4 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a03d4:	b510      	push	{r4, lr}
 80a03d6:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a03d8:	2101      	movs	r1, #1
 80a03da:	79c0      	ldrb	r0, [r0, #7]
 80a03dc:	f002 fa3a 	bl	80a2854 <pinMode>
  digitalWrite(pin, LOW);
 80a03e0:	2100      	movs	r1, #0
 80a03e2:	79e0      	ldrb	r0, [r4, #7]
 80a03e4:	f002 fa47 	bl	80a2876 <digitalWrite>
  begun = true;
 80a03e8:	2301      	movs	r3, #1
 80a03ea:	7023      	strb	r3, [r4, #0]
 80a03ec:	bd10      	pop	{r4, pc}

080a03ee <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03ee:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03f0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03f2:	4605      	mov	r5, r0
 80a03f4:	460c      	mov	r4, r1
    if (begun) {
 80a03f6:	b11b      	cbz	r3, 80a0400 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03f8:	2100      	movs	r1, #0
 80a03fa:	79c0      	ldrb	r0, [r0, #7]
 80a03fc:	f002 fa2a 	bl	80a2854 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0400:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0402:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0404:	b153      	cbz	r3, 80a041c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0406:	b2a4      	uxth	r4, r4
 80a0408:	4620      	mov	r0, r4
 80a040a:	2101      	movs	r1, #1
 80a040c:	f002 fa22 	bl	80a2854 <pinMode>
        digitalWrite(p, LOW);
 80a0410:	4620      	mov	r0, r4
    }
}
 80a0412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0416:	2100      	movs	r1, #0
 80a0418:	f002 ba2d 	b.w	80a2876 <digitalWrite>
 80a041c:	bd38      	pop	{r3, r4, r5, pc}

080a041e <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a041e:	b570      	push	{r4, r5, r6, lr}
 80a0420:	4604      	mov	r4, r0
 80a0422:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0424:	2500      	movs	r5, #0
 80a0426:	7183      	strb	r3, [r0, #6]
 80a0428:	7005      	strb	r5, [r0, #0]
 80a042a:	7205      	strb	r5, [r0, #8]
 80a042c:	60c5      	str	r5, [r0, #12]
 80a042e:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0430:	f7ff ffb4 	bl	80a039c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0434:	4620      	mov	r0, r4
 80a0436:	4631      	mov	r1, r6
 80a0438:	f7ff ffd9 	bl	80a03ee <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a043c:	4620      	mov	r0, r4
 80a043e:	bd70      	pop	{r4, r5, r6, pc}

080a0440 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0440:	68c3      	ldr	r3, [r0, #12]
 80a0442:	2b00      	cmp	r3, #0
 80a0444:	f000 858e 	beq.w	80a0f64 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a044c:	4604      	mov	r4, r0
 80a044e:	7983      	ldrb	r3, [r0, #6]
 80a0450:	b086      	sub	sp, #24
 80a0452:	3b02      	subs	r3, #2
 80a0454:	b2db      	uxtb	r3, r3
 80a0456:	2b04      	cmp	r3, #4
 80a0458:	bf96      	itet	ls
 80a045a:	4a29      	ldrls	r2, [pc, #164]	; (80a0500 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a045c:	2532      	movhi	r5, #50	; 0x32
 80a045e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0462:	f7ff ff8b 	bl	80a037c <micros>
 80a0466:	6923      	ldr	r3, [r4, #16]
 80a0468:	1ac0      	subs	r0, r0, r3
 80a046a:	42a8      	cmp	r0, r5
 80a046c:	d3f9      	bcc.n	80a0462 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a046e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0470:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0472:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0474:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0476:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a047a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a047e:	f000 8272 	beq.w	80a0966 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0482:	2907      	cmp	r1, #7
 80a0484:	f000 826f 	beq.w	80a0966 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0488:	2906      	cmp	r1, #6
 80a048a:	f000 8432 	beq.w	80a0cf2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a048e:	2905      	cmp	r1, #5
 80a0490:	f000 83ab 	beq.w	80a0bea <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0494:	2908      	cmp	r1, #8
 80a0496:	f000 83a8 	beq.w	80a0bea <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a049a:	2900      	cmp	r1, #0
 80a049c:	f040 8563 	bne.w	80a0f66 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a04a0:	4a18      	ldr	r2, [pc, #96]	; (80a0504 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a04a2:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a04a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a04aa:	b29b      	uxth	r3, r3
 80a04ac:	2b00      	cmp	r3, #0
 80a04ae:	f000 8395 	beq.w	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a04b2:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a04b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a04b8:	f10e 0503 	add.w	r5, lr, #3
 80a04bc:	3b03      	subs	r3, #3
 80a04be:	b29b      	uxth	r3, r3
 80a04c0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a04c4:	f89e 3000 	ldrb.w	r3, [lr]
 80a04c8:	b2db      	uxtb	r3, r3
 80a04ca:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a04ce:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a04d2:	b2db      	uxtb	r3, r3
 80a04d4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a04d8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a04dc:	b2db      	uxtb	r3, r3
 80a04de:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a04e2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a04e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a04ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a04ee:	021b      	lsls	r3, r3, #8
 80a04f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a04f4:	4303      	orrs	r3, r0
 80a04f6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a04f8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a04fc:	e11b      	b.n	80a0736 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a04fe:	bf00      	nop
 80a0500:	080a300c 	.word	0x080a300c
 80a0504:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0508:	4600      	mov	r0, r0
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0610:	79e3      	ldrb	r3, [r4, #7]
 80a0612:	6810      	ldr	r0, [r2, #0]
 80a0614:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0618:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a061c:	88bf      	ldrh	r7, [r7, #4]
 80a061e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0622:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0624:	4600      	mov	r0, r0
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a071e:	9b04      	ldr	r3, [sp, #16]
 80a0720:	085b      	lsrs	r3, r3, #1
 80a0722:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0724:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0728:	3301      	adds	r3, #1
 80a072a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a072c:	2b17      	cmp	r3, #23
 80a072e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0732:	f200 82db 	bhi.w	80a0cec <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0736:	79e3      	ldrb	r3, [r4, #7]
 80a0738:	6810      	ldr	r0, [r2, #0]
 80a073a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a073e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0742:	88bf      	ldrh	r7, [r7, #4]
 80a0744:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0748:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a074a:	9803      	ldr	r0, [sp, #12]
 80a074c:	9b04      	ldr	r3, [sp, #16]
 80a074e:	4218      	tst	r0, r3
 80a0750:	f47f aeda 	bne.w	80a0508 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0754:	4600      	mov	r0, r0
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a07a6:	79e3      	ldrb	r3, [r4, #7]
 80a07a8:	6810      	ldr	r0, [r2, #0]
 80a07aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a07ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a07b2:	88bf      	ldrh	r7, [r7, #4]
 80a07b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a07b8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a07ba:	4600      	mov	r0, r0
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	e6db      	b.n	80a071e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0966:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a096a:	4a17      	ldr	r2, [pc, #92]	; (80a09c8 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a096c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a096e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0972:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0974:	2b00      	cmp	r3, #0
 80a0976:	f000 8131 	beq.w	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a097a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a097c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0980:	f10e 0103 	add.w	r1, lr, #3
 80a0984:	3b03      	subs	r3, #3
 80a0986:	b29b      	uxth	r3, r3
 80a0988:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a098c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0990:	b2db      	uxtb	r3, r3
 80a0992:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0996:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a099a:	b2db      	uxtb	r3, r3
 80a099c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a09a0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a09a4:	b2db      	uxtb	r3, r3
 80a09a6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a09aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a09ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a09b2:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a09b6:	0200      	lsls	r0, r0, #8
 80a09b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a09bc:	433b      	orrs	r3, r7
 80a09be:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a09c0:	f88d 6005 	strb.w	r6, [sp, #5]
 80a09c4:	e080      	b.n	80a0ac8 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a09c6:	bf00      	nop
 80a09c8:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09cc:	4600      	mov	r0, r0
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0a66:	79e3      	ldrb	r3, [r4, #7]
 80a0a68:	6810      	ldr	r0, [r2, #0]
 80a0a6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a6e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a72:	88bf      	ldrh	r7, [r7, #4]
 80a0a74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a78:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a7a:	4600      	mov	r0, r0
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0ab0:	9b04      	ldr	r3, [sp, #16]
 80a0ab2:	085b      	lsrs	r3, r3, #1
 80a0ab4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0ab6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0aba:	3301      	adds	r3, #1
 80a0abc:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0abe:	2b17      	cmp	r3, #23
 80a0ac0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0ac4:	f200 8083 	bhi.w	80a0bce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0ac8:	79e3      	ldrb	r3, [r4, #7]
 80a0aca:	6810      	ldr	r0, [r2, #0]
 80a0acc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ad0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ad4:	88bf      	ldrh	r7, [r7, #4]
 80a0ad6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ada:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0adc:	9803      	ldr	r0, [sp, #12]
 80a0ade:	9b04      	ldr	r3, [sp, #16]
 80a0ae0:	4218      	tst	r0, r3
 80a0ae2:	f47f af73 	bne.w	80a09cc <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ae6:	4600      	mov	r0, r0
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0b0e:	79e3      	ldrb	r3, [r4, #7]
 80a0b10:	6810      	ldr	r0, [r2, #0]
 80a0b12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b16:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b1a:	88bf      	ldrh	r7, [r7, #4]
 80a0b1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b20:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b22:	4600      	mov	r0, r0
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	e770      	b.n	80a0ab0 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0bd2:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bd4:	b29b      	uxth	r3, r3
 80a0bd6:	2b00      	cmp	r3, #0
 80a0bd8:	f47f aecf 	bne.w	80a097a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0bdc:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0bde:	f7ff fbcd 	bl	80a037c <micros>
 80a0be2:	6120      	str	r0, [r4, #16]
}
 80a0be4:	b006      	add	sp, #24
 80a0be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0bea:	4b5e      	ldr	r3, [pc, #376]	; (80a0d64 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0bec:	4a5e      	ldr	r2, [pc, #376]	; (80a0d68 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0bee:	4618      	mov	r0, r3
 80a0bf0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0bf2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0bf6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bf8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bfc:	b292      	uxth	r2, r2
 80a0bfe:	2a00      	cmp	r2, #0
 80a0c00:	d0ec      	beq.n	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0c02:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0c06:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0c0a:	f10e 0503 	add.w	r5, lr, #3
 80a0c0e:	3a03      	subs	r2, #3
 80a0c10:	b292      	uxth	r2, r2
 80a0c12:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0c16:	f89e 2000 	ldrb.w	r2, [lr]
 80a0c1a:	b2d2      	uxtb	r2, r2
 80a0c1c:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0c20:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0c24:	b2d2      	uxtb	r2, r2
 80a0c26:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0c2a:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0c2e:	b2d2      	uxtb	r2, r2
 80a0c30:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0c34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0c38:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0c3c:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0c40:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0c44:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0c48:	ea42 020c 	orr.w	r2, r2, ip
 80a0c4c:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0c4e:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0c52:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c54:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0c56:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c5a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c5e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c66:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c68:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c6c:	9e03      	ldr	r6, [sp, #12]
 80a0c6e:	9a04      	ldr	r2, [sp, #16]
 80a0c70:	4216      	tst	r6, r2
 80a0c72:	d023      	beq.n	80a0cbc <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c74:	685a      	ldr	r2, [r3, #4]
 80a0c76:	9e05      	ldr	r6, [sp, #20]
 80a0c78:	1b92      	subs	r2, r2, r6
 80a0c7a:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c7c:	d9fa      	bls.n	80a0c74 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0c7e:	79e2      	ldrb	r2, [r4, #7]
 80a0c80:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c84:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c88:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c90:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c94:	6842      	ldr	r2, [r0, #4]
 80a0c96:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c98:	685a      	ldr	r2, [r3, #4]
 80a0c9a:	9e05      	ldr	r6, [sp, #20]
 80a0c9c:	1b92      	subs	r2, r2, r6
 80a0c9e:	2a07      	cmp	r2, #7
 80a0ca0:	d9fa      	bls.n	80a0c98 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0ca2:	9a04      	ldr	r2, [sp, #16]
 80a0ca4:	0852      	lsrs	r2, r2, #1
 80a0ca6:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0ca8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0cac:	3201      	adds	r2, #1
 80a0cae:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0cb0:	2a17      	cmp	r2, #23
 80a0cb2:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0cb6:	d9cc      	bls.n	80a0c52 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0cb8:	46ae      	mov	lr, r5
 80a0cba:	e79d      	b.n	80a0bf8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0cbc:	685a      	ldr	r2, [r3, #4]
 80a0cbe:	9e05      	ldr	r6, [sp, #20]
 80a0cc0:	1b92      	subs	r2, r2, r6
 80a0cc2:	2a18      	cmp	r2, #24
 80a0cc4:	d9fa      	bls.n	80a0cbc <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0cc6:	79e2      	ldrb	r2, [r4, #7]
 80a0cc8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0ccc:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0cd0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0cd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0cd8:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0cdc:	6842      	ldr	r2, [r0, #4]
 80a0cde:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0ce0:	685a      	ldr	r2, [r3, #4]
 80a0ce2:	9e05      	ldr	r6, [sp, #20]
 80a0ce4:	1b92      	subs	r2, r2, r6
 80a0ce6:	2a45      	cmp	r2, #69	; 0x45
 80a0ce8:	d9fa      	bls.n	80a0ce0 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0cea:	e7da      	b.n	80a0ca2 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0cec:	46ae      	mov	lr, r5
 80a0cee:	f7ff bbda 	b.w	80a04a6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0cf2:	4a1d      	ldr	r2, [pc, #116]	; (80a0d68 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0cf4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0cf8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0cfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cfe:	b29b      	uxth	r3, r3
 80a0d00:	2b00      	cmp	r3, #0
 80a0d02:	f43f af6b 	beq.w	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0d06:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0d08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d0c:	f10e 0104 	add.w	r1, lr, #4
 80a0d10:	3b04      	subs	r3, #4
 80a0d12:	b29b      	uxth	r3, r3
 80a0d14:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0d18:	f89e 3000 	ldrb.w	r3, [lr]
 80a0d1c:	b2db      	uxtb	r3, r3
 80a0d1e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0d22:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0d26:	b2db      	uxtb	r3, r3
 80a0d28:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0d2c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0d30:	b2db      	uxtb	r3, r3
 80a0d32:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0d36:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0d3a:	b2db      	uxtb	r3, r3
 80a0d3c:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0d40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0d44:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0d48:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0d4c:	043f      	lsls	r7, r7, #16
 80a0d4e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0d52:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0d56:	4303      	orrs	r3, r0
 80a0d58:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0d5c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d5e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d62:	e07e      	b.n	80a0e62 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0d64:	e0001000 	.word	0xe0001000
 80a0d68:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d6c:	4600      	mov	r0, r0
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0dda:	79e3      	ldrb	r3, [r4, #7]
 80a0ddc:	6810      	ldr	r0, [r2, #0]
 80a0dde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0de2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0de6:	88bf      	ldrh	r7, [r7, #4]
 80a0de8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dec:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0dee:	4600      	mov	r0, r0
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0e4c:	9b04      	ldr	r3, [sp, #16]
 80a0e4e:	085b      	lsrs	r3, r3, #1
 80a0e50:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0e52:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e56:	3301      	adds	r3, #1
 80a0e58:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0e5a:	2b1f      	cmp	r3, #31
 80a0e5c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e60:	d87e      	bhi.n	80a0f60 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0e62:	79e3      	ldrb	r3, [r4, #7]
 80a0e64:	6810      	ldr	r0, [r2, #0]
 80a0e66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e6a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e6e:	88bf      	ldrh	r7, [r7, #4]
 80a0e70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e74:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e76:	9803      	ldr	r0, [sp, #12]
 80a0e78:	9b04      	ldr	r3, [sp, #16]
 80a0e7a:	4218      	tst	r0, r3
 80a0e7c:	f47f af76 	bne.w	80a0d6c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e80:	4600      	mov	r0, r0
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0ea8:	79e3      	ldrb	r3, [r4, #7]
 80a0eaa:	6810      	ldr	r0, [r2, #0]
 80a0eac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0eb0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0eb4:	88bf      	ldrh	r7, [r7, #4]
 80a0eb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0eba:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ebc:	4600      	mov	r0, r0
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	e775      	b.n	80a0e4c <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0f60:	468e      	mov	lr, r1
 80a0f62:	e6ca      	b.n	80a0cfa <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0f64:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f66:	2903      	cmp	r1, #3
 80a0f68:	f000 812e 	beq.w	80a11c8 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f6c:	4a1e      	ldr	r2, [pc, #120]	; (80a0fe8 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0f6e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f72:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f78:	b29b      	uxth	r3, r3
 80a0f7a:	2b00      	cmp	r3, #0
 80a0f7c:	f43f ae2e 	beq.w	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f80:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f86:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0f88:	3b03      	subs	r3, #3
 80a0f8a:	b29b      	uxth	r3, r3
 80a0f8c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f90:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f94:	f10e 0103 	add.w	r1, lr, #3
 80a0f98:	b2db      	uxtb	r3, r3
 80a0f9a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f9e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fa2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0fa6:	b2db      	uxtb	r3, r3
 80a0fa8:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0fac:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fb0:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0fb4:	b2db      	uxtb	r3, r3
 80a0fb6:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fba:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0fbe:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fc2:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fc6:	021b      	lsls	r3, r3, #8
 80a0fc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0fcc:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fd0:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0fd4:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fd8:	433b      	orrs	r3, r7
 80a0fda:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0fdc:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0fe0:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0fe4:	e07d      	b.n	80a10e2 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0fe6:	bf00      	nop
 80a0fe8:	200000f0 	.word	0x200000f0
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0fec:	9b04      	ldr	r3, [sp, #16]
 80a0fee:	085b      	lsrs	r3, r3, #1
 80a0ff0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ff2:	4600      	mov	r0, r0
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1078:	79e0      	ldrb	r0, [r4, #7]
 80a107a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a107c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1080:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1084:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1088:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a108c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1090:	3301      	adds	r3, #1
 80a1092:	b2db      	uxtb	r3, r3
 80a1094:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1098:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a109c:	4600      	mov	r0, r0
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
          if(j==24) break;
 80a10c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10ca:	2b18      	cmp	r3, #24
 80a10cc:	d07a      	beq.n	80a11c4 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a10ce:	79e3      	ldrb	r3, [r4, #7]
 80a10d0:	6810      	ldr	r0, [r2, #0]
 80a10d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10d6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10da:	88bf      	ldrh	r7, [r7, #4]
 80a10dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10e0:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a10e2:	9803      	ldr	r0, [sp, #12]
 80a10e4:	9b04      	ldr	r3, [sp, #16]
 80a10e6:	4218      	tst	r0, r3
 80a10e8:	d180      	bne.n	80a0fec <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a10ea:	4600      	mov	r0, r0
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a110c:	79e3      	ldrb	r3, [r4, #7]
 80a110e:	6810      	ldr	r0, [r2, #0]
 80a1110:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1114:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1118:	88bf      	ldrh	r7, [r7, #4]
 80a111a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a111e:	831f      	strh	r7, [r3, #24]
          j++;
 80a1120:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1124:	3301      	adds	r3, #1
 80a1126:	b2db      	uxtb	r3, r3
 80a1128:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a112c:	9b04      	ldr	r3, [sp, #16]
 80a112e:	085b      	lsrs	r3, r3, #1
 80a1130:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1132:	4600      	mov	r0, r0
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
          if(j==24) break;
 80a11bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a11c0:	2b18      	cmp	r3, #24
 80a11c2:	d184      	bne.n	80a10ce <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a11c4:	468e      	mov	lr, r1
 80a11c6:	e6d5      	b.n	80a0f74 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a11c8:	4a17      	ldr	r2, [pc, #92]	; (80a1228 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a11ca:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a11ce:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11d4:	b29b      	uxth	r3, r3
 80a11d6:	2b00      	cmp	r3, #0
 80a11d8:	f43f ad00 	beq.w	80a0bdc <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a11dc:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a11de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11e2:	f10e 0103 	add.w	r1, lr, #3
 80a11e6:	3b03      	subs	r3, #3
 80a11e8:	b29b      	uxth	r3, r3
 80a11ea:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11ee:	f89e 3000 	ldrb.w	r3, [lr]
 80a11f2:	b2db      	uxtb	r3, r3
 80a11f4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a11f8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a11fc:	b2db      	uxtb	r3, r3
 80a11fe:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1202:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1206:	b2db      	uxtb	r3, r3
 80a1208:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a120c:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1210:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1214:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1218:	021b      	lsls	r3, r3, #8
 80a121a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a121e:	4303      	orrs	r3, r0
 80a1220:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1222:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1226:	e0e0      	b.n	80a13ea <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1228:	200000f0 	.word	0x200000f0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a122c:	4600      	mov	r0, r0
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a134e:	79e3      	ldrb	r3, [r4, #7]
 80a1350:	6810      	ldr	r0, [r2, #0]
 80a1352:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1356:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a135a:	88bf      	ldrh	r7, [r7, #4]
 80a135c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1360:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1362:	4600      	mov	r0, r0
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a13d2:	9b04      	ldr	r3, [sp, #16]
 80a13d4:	085b      	lsrs	r3, r3, #1
 80a13d6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a13d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a13dc:	3301      	adds	r3, #1
 80a13de:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a13e0:	2b17      	cmp	r3, #23
 80a13e2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a13e6:	f200 80e3 	bhi.w	80a15b0 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a13ea:	79e3      	ldrb	r3, [r4, #7]
 80a13ec:	6810      	ldr	r0, [r2, #0]
 80a13ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13f6:	88bf      	ldrh	r7, [r7, #4]
 80a13f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13fc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a13fe:	9803      	ldr	r0, [sp, #12]
 80a1400:	9b04      	ldr	r3, [sp, #16]
 80a1402:	4218      	tst	r0, r3
 80a1404:	f47f af12 	bne.w	80a122c <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1408:	4600      	mov	r0, r0
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a148a:	79e3      	ldrb	r3, [r4, #7]
 80a148c:	6810      	ldr	r0, [r2, #0]
 80a148e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1492:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1496:	88bf      	ldrh	r7, [r7, #4]
 80a1498:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a149c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a149e:	4600      	mov	r0, r0
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	e710      	b.n	80a13d2 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a15b0:	468e      	mov	lr, r1
 80a15b2:	e60d      	b.n	80a11d0 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a15b4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a15b6:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a15b8:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a15bc:	428c      	cmp	r4, r1
 80a15be:	d927      	bls.n	80a1610 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a15c0:	7a04      	ldrb	r4, [r0, #8]
 80a15c2:	b144      	cbz	r4, 80a15d6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a15c4:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a15c6:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a15c8:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a15ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a15ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a15d2:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a15d6:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a15d8:	68c6      	ldr	r6, [r0, #12]
 80a15da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a15de:	2f08      	cmp	r7, #8
 80a15e0:	eb06 0401 	add.w	r4, r6, r1
 80a15e4:	d811      	bhi.n	80a160a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a15e6:	2001      	movs	r0, #1
 80a15e8:	40b8      	lsls	r0, r7
 80a15ea:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a15ee:	d108      	bne.n	80a1602 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a15f0:	06c0      	lsls	r0, r0, #27
 80a15f2:	d50a      	bpl.n	80a160a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a15f4:	2aff      	cmp	r2, #255	; 0xff
 80a15f6:	bf08      	it	eq
 80a15f8:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a15fa:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a15fc:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a15fe:	70a3      	strb	r3, [r4, #2]
 80a1600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1602:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a1604:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a1606:	70a5      	strb	r5, [r4, #2]
 80a1608:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a160a:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a160c:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a160e:	70a5      	strb	r5, [r4, #2]
 80a1610:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1612 <_ZN17Adafruit_NeoPixel14setColorScaledEthhhh>:

void Adafruit_NeoPixel::setColor(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aWhite) {
  return setPixelColor(aLedNumber, (uint8_t) aRed, (uint8_t) aGreen, (uint8_t) aBlue, (uint8_t) aWhite);
}

void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aScaling) {
 80a1612:	b430      	push	{r4, r5}
 80a1614:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80a1618:	f89d 5008 	ldrb.w	r5, [sp, #8]
    }
  }
}

void Adafruit_NeoPixel::setColor(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue) {
  return setPixelColor(aLedNumber, (uint8_t) aRed, (uint8_t) aGreen, (uint8_t) aBlue);
 80a161c:	4363      	muls	r3, r4
 80a161e:	4362      	muls	r2, r4
 80a1620:	436c      	muls	r4, r5
 80a1622:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80a1626:	9402      	str	r4, [sp, #8]
 80a1628:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80a162c:	f3c2 2207 	ubfx	r2, r2, #8, #8
}

void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aScaling) {
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8);
}
 80a1630:	bc30      	pop	{r4, r5}
    }
  }
}

void Adafruit_NeoPixel::setColor(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue) {
  return setPixelColor(aLedNumber, (uint8_t) aRed, (uint8_t) aGreen, (uint8_t) aBlue);
 80a1632:	f7ff bfbf 	b.w	80a15b4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
	...

080a1638 <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh>:
void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aWhite, byte aScaling) {
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8, (aWhite*aScaling)>>8);
}

void Adafruit_NeoPixel::setColorDimmed(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aBrightness) {
 80a1638:	b470      	push	{r4, r5, r6}
 80a163a:	f89d 4010 	ldrb.w	r4, [sp, #16]
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, brightnessToPWM(aBrightness));
 80a163e:	4e05      	ldr	r6, [pc, #20]	; (80a1654 <_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh+0x1c>)
//    90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
//   115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
//   144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
//   177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
//   215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
  return pwmLevels[aBrightness>>4];
 80a1640:	1124      	asrs	r4, r4, #4
void Adafruit_NeoPixel::setColorScaled(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aWhite, byte aScaling) {
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8, (aWhite*aScaling)>>8);
}

void Adafruit_NeoPixel::setColorDimmed(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aBrightness) {
 80a1642:	f89d 500c 	ldrb.w	r5, [sp, #12]
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, brightnessToPWM(aBrightness));
 80a1646:	5d34      	ldrb	r4, [r6, r4]
 80a1648:	9503      	str	r5, [sp, #12]
 80a164a:	9404      	str	r4, [sp, #16]
}
 80a164c:	bc70      	pop	{r4, r5, r6}
  // scale RGB with a common brightness parameter
  setColor(aLedNumber, (aRed*aScaling)>>8, (aGreen*aScaling)>>8, (aBlue*aScaling)>>8, (aWhite*aScaling)>>8);
}

void Adafruit_NeoPixel::setColorDimmed(uint16_t aLedNumber, byte aRed, byte aGreen, byte aBlue, byte aBrightness) {
  setColorScaled(aLedNumber, aRed, aGreen, aBlue, brightnessToPWM(aBrightness));
 80a164e:	f7ff bfe0 	b.w	80a1612 <_ZN17Adafruit_NeoPixel14setColorScaledEthhhh>
 80a1652:	bf00      	nop
 80a1654:	080a3020 	.word	0x080a3020

080a1658 <_ZN17Adafruit_NeoPixel5ColorEhhhh>:
}

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1658:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80a165c:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
}
 80a1660:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a1664:	4770      	bx	lr

080a1666 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a1666:	8840      	ldrh	r0, [r0, #2]
 80a1668:	4770      	bx	lr

080a166a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a166a:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a166c:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a166e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a1670:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1672:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1674:	d01e      	beq.n	80a16b4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1676:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1678:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a167c:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a167e:	d00c      	beq.n	80a169a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1680:	29ff      	cmp	r1, #255	; 0xff
 80a1682:	bf0f      	iteee	eq
 80a1684:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1688:	0211      	lslne	r1, r2, #8
 80a168a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a168e:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1692:	bf0c      	ite	eq
 80a1694:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1698:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a169a:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a169c:	1b29      	subs	r1, r5, r4
 80a169e:	8886      	ldrh	r6, [r0, #4]
 80a16a0:	b289      	uxth	r1, r1
 80a16a2:	428e      	cmp	r6, r1
 80a16a4:	d905      	bls.n	80a16b2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a16a6:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a16a8:	4359      	muls	r1, r3
 80a16aa:	1209      	asrs	r1, r1, #8
 80a16ac:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a16b0:	e7f4      	b.n	80a169c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a16b2:	7202      	strb	r2, [r0, #8]
 80a16b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a16b8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	f000 f827 	bl	80a170c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a16be:	f000 f825 	bl	80a170c <HAL_Pin_Map>
 80a16c2:	4b01      	ldr	r3, [pc, #4]	; (80a16c8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a16c4:	6018      	str	r0, [r3, #0]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	200000f0 	.word	0x200000f0

080a16cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <os_mutex_create+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601d0 	.word	0x080601d0

080a16dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_RNG_GetRandomNumber+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	685b      	ldr	r3, [r3, #4]
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	0806019c 	.word	0x0806019c

080a16ec <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	691b      	ldr	r3, [r3, #16]
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	0806019c 	.word	0x0806019c

080a16fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	695b      	ldr	r3, [r3, #20]
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	0806019c 	.word	0x0806019c

080a170c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_Pin_Map+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	681b      	ldr	r3, [r3, #0]
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601b0 	.word	0x080601b0

080a171c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_Pin_Mode+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	689b      	ldr	r3, [r3, #8]
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601b0 	.word	0x080601b0

080a172c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <HAL_Get_Pin_Mode+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	68db      	ldr	r3, [r3, #12]
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601b0 	.word	0x080601b0

080a173c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <HAL_GPIO_Write+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	691b      	ldr	r3, [r3, #16]
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601b0 	.word	0x080601b0

080a174c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <HAL_I2C_Write_Data+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601ac 	.word	0x080601ac

080a175c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <HAL_I2C_Available_Data+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601ac 	.word	0x080601ac

080a176c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <HAL_I2C_Read_Data+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601ac 	.word	0x080601ac

080a177c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <HAL_I2C_Peek_Data+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601ac 	.word	0x080601ac

080a178c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <HAL_I2C_Flush_Data+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601ac 	.word	0x080601ac

080a179c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b02      	ldr	r3, [pc, #8]	; (80a17a8 <HAL_I2C_Is_Enabled+0xc>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a17a4:	9301      	str	r3, [sp, #4]
 80a17a6:	bd08      	pop	{r3, pc}
 80a17a8:	080601ac 	.word	0x080601ac

080a17ac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b03      	ldr	r3, [pc, #12]	; (80a17bc <HAL_I2C_Init+0x10>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a17b6:	9301      	str	r3, [sp, #4]
 80a17b8:	bd08      	pop	{r3, pc}
 80a17ba:	0000      	.short	0x0000
 80a17bc:	080601ac 	.word	0x080601ac

080a17c0 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <socket_handle_valid+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	685b      	ldr	r3, [r3, #4]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601bc 	.word	0x080601bc

080a17d0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <socket_create+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	689b      	ldr	r3, [r3, #8]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601bc 	.word	0x080601bc

080a17e0 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <socket_receivefrom+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	695b      	ldr	r3, [r3, #20]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601bc 	.word	0x080601bc

080a17f0 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <socket_sendto+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	69db      	ldr	r3, [r3, #28]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601bc 	.word	0x080601bc

080a1800 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <socket_close+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	6a1b      	ldr	r3, [r3, #32]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601bc 	.word	0x080601bc

080a1810 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <socket_handle_invalid+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601bc 	.word	0x080601bc

080a1820 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_SPI_Init+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	69db      	ldr	r3, [r3, #28]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601b4 	.word	0x080601b4

080a1830 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_SPI_Is_Enabled+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	6a1b      	ldr	r3, [r3, #32]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601b4 	.word	0x080601b4

080a1840 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_USART_Init+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	699b      	ldr	r3, [r3, #24]
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601c4 	.word	0x080601c4

080a1850 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <HAL_USART_Write_Data+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601c4 	.word	0x080601c4

080a1860 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <HAL_USART_Available_Data+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601c4 	.word	0x080601c4

080a1870 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <HAL_USART_Read_Data+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601c4 	.word	0x080601c4

080a1880 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <HAL_USART_Peek_Data+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601c4 	.word	0x080601c4

080a1890 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <HAL_USART_Flush_Data+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601c4 	.word	0x080601c4

080a18a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <HAL_USART_Is_Enabled+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601c4 	.word	0x080601c4

080a18b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <HAL_USART_Available_Data_For_Write+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601c4 	.word	0x080601c4

080a18c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <HAL_USB_USART_Init+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	681b      	ldr	r3, [r3, #0]
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601d8 	.word	0x080601d8

080a18d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <HAL_USB_USART_Available_Data+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	691b      	ldr	r3, [r3, #16]
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601d8 	.word	0x080601d8

080a18e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	695b      	ldr	r3, [r3, #20]
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080601d8 	.word	0x080601d8

080a18f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <HAL_USB_USART_Receive_Data+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	699b      	ldr	r3, [r3, #24]
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601d8 	.word	0x080601d8

080a1900 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <HAL_USB_USART_Send_Data+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	69db      	ldr	r3, [r3, #28]
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601d8 	.word	0x080601d8

080a1910 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <HAL_USB_USART_Flush_Data+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	6a1b      	ldr	r3, [r3, #32]
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601d8 	.word	0x080601d8

080a1920 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <HAL_USB_USART_Is_Enabled+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601d8 	.word	0x080601d8

080a1930 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <inet_gethostbyname+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601c0 	.word	0x080601c0

080a1940 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b02      	ldr	r3, [pc, #8]	; (80a194c <set_system_mode+0xc>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	685b      	ldr	r3, [r3, #4]
 80a1948:	9301      	str	r3, [sp, #4]
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	080601a4 	.word	0x080601a4

080a1950 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1950:	b508      	push	{r3, lr}
 80a1952:	4b02      	ldr	r3, [pc, #8]	; (80a195c <system_delay_ms+0xc>)
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	695b      	ldr	r3, [r3, #20]
 80a1958:	9301      	str	r3, [sp, #4]
 80a195a:	bd08      	pop	{r3, pc}
 80a195c:	080601a4 	.word	0x080601a4

080a1960 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1960:	b508      	push	{r3, lr}
 80a1962:	4b02      	ldr	r3, [pc, #8]	; (80a196c <system_thread_set_state+0xc>)
 80a1964:	681b      	ldr	r3, [r3, #0]
 80a1966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1968:	9301      	str	r3, [sp, #4]
 80a196a:	bd08      	pop	{r3, pc}
 80a196c:	080601a4 	.word	0x080601a4

080a1970 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1970:	b508      	push	{r3, lr}
 80a1972:	4b03      	ldr	r3, [pc, #12]	; (80a1980 <system_ctrl_set_app_request_handler+0x10>)
 80a1974:	681b      	ldr	r3, [r3, #0]
 80a1976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a197a:	9301      	str	r3, [sp, #4]
 80a197c:	bd08      	pop	{r3, pc}
 80a197e:	0000      	.short	0x0000
 80a1980:	080601a4 	.word	0x080601a4

080a1984 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b03      	ldr	r3, [pc, #12]	; (80a1994 <system_ctrl_set_result+0x10>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a198e:	9301      	str	r3, [sp, #4]
 80a1990:	bd08      	pop	{r3, pc}
 80a1992:	0000      	.short	0x0000
 80a1994:	080601a4 	.word	0x080601a4

080a1998 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601cc 	.word	0x080601cc

080a19a8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <network_config+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	681b      	ldr	r3, [r3, #0]
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601c8 	.word	0x080601c8

080a19b8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <network_connect+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	685b      	ldr	r3, [r3, #4]
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601c8 	.word	0x080601c8

080a19c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a19c8:	b508      	push	{r3, lr}
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <network_connecting+0xc>)
 80a19cc:	681b      	ldr	r3, [r3, #0]
 80a19ce:	689b      	ldr	r3, [r3, #8]
 80a19d0:	9301      	str	r3, [sp, #4]
 80a19d2:	bd08      	pop	{r3, pc}
 80a19d4:	080601c8 	.word	0x080601c8

080a19d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a19d8:	b508      	push	{r3, lr}
 80a19da:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <network_disconnect+0xc>)
 80a19dc:	681b      	ldr	r3, [r3, #0]
 80a19de:	68db      	ldr	r3, [r3, #12]
 80a19e0:	9301      	str	r3, [sp, #4]
 80a19e2:	bd08      	pop	{r3, pc}
 80a19e4:	080601c8 	.word	0x080601c8

080a19e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <network_ready+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	691b      	ldr	r3, [r3, #16]
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601c8 	.word	0x080601c8

080a19f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19f8:	b508      	push	{r3, lr}
 80a19fa:	4b02      	ldr	r3, [pc, #8]	; (80a1a04 <network_on+0xc>)
 80a19fc:	681b      	ldr	r3, [r3, #0]
 80a19fe:	695b      	ldr	r3, [r3, #20]
 80a1a00:	9301      	str	r3, [sp, #4]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	080601c8 	.word	0x080601c8

080a1a08 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1a08:	b508      	push	{r3, lr}
 80a1a0a:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <network_off+0xc>)
 80a1a0c:	681b      	ldr	r3, [r3, #0]
 80a1a0e:	699b      	ldr	r3, [r3, #24]
 80a1a10:	9301      	str	r3, [sp, #4]
 80a1a12:	bd08      	pop	{r3, pc}
 80a1a14:	080601c8 	.word	0x080601c8

080a1a18 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <network_listen+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	69db      	ldr	r3, [r3, #28]
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601c8 	.word	0x080601c8

080a1a28 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1a28:	b508      	push	{r3, lr}
 80a1a2a:	4b02      	ldr	r3, [pc, #8]	; (80a1a34 <network_listening+0xc>)
 80a1a2c:	681b      	ldr	r3, [r3, #0]
 80a1a2e:	6a1b      	ldr	r3, [r3, #32]
 80a1a30:	9301      	str	r3, [sp, #4]
 80a1a32:	bd08      	pop	{r3, pc}
 80a1a34:	080601c8 	.word	0x080601c8

080a1a38 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b02      	ldr	r3, [pc, #8]	; (80a1a44 <network_set_listen_timeout+0xc>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a40:	9301      	str	r3, [sp, #4]
 80a1a42:	bd08      	pop	{r3, pc}
 80a1a44:	080601c8 	.word	0x080601c8

080a1a48 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1a48:	b508      	push	{r3, lr}
 80a1a4a:	4b02      	ldr	r3, [pc, #8]	; (80a1a54 <network_get_listen_timeout+0xc>)
 80a1a4c:	681b      	ldr	r3, [r3, #0]
 80a1a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1a50:	9301      	str	r3, [sp, #4]
 80a1a52:	bd08      	pop	{r3, pc}
 80a1a54:	080601c8 	.word	0x080601c8

080a1a58 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1a58:	b508      	push	{r3, lr}
 80a1a5a:	4b02      	ldr	r3, [pc, #8]	; (80a1a64 <network_set_hostname+0xc>)
 80a1a5c:	681b      	ldr	r3, [r3, #0]
 80a1a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1a60:	9301      	str	r3, [sp, #4]
 80a1a62:	bd08      	pop	{r3, pc}
 80a1a64:	080601c8 	.word	0x080601c8

080a1a68 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1a68:	b508      	push	{r3, lr}
 80a1a6a:	4b02      	ldr	r3, [pc, #8]	; (80a1a74 <network_get_hostname+0xc>)
 80a1a6c:	681b      	ldr	r3, [r3, #0]
 80a1a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a70:	9301      	str	r3, [sp, #4]
 80a1a72:	bd08      	pop	{r3, pc}
 80a1a74:	080601c8 	.word	0x080601c8

080a1a78 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1a78:	b508      	push	{r3, lr}
 80a1a7a:	4b02      	ldr	r3, [pc, #8]	; (80a1a84 <malloc+0xc>)
 80a1a7c:	681b      	ldr	r3, [r3, #0]
 80a1a7e:	681b      	ldr	r3, [r3, #0]
 80a1a80:	9301      	str	r3, [sp, #4]
 80a1a82:	bd08      	pop	{r3, pc}
 80a1a84:	080601a0 	.word	0x080601a0

080a1a88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1a88:	b508      	push	{r3, lr}
 80a1a8a:	4b02      	ldr	r3, [pc, #8]	; (80a1a94 <free+0xc>)
 80a1a8c:	681b      	ldr	r3, [r3, #0]
 80a1a8e:	685b      	ldr	r3, [r3, #4]
 80a1a90:	9301      	str	r3, [sp, #4]
 80a1a92:	bd08      	pop	{r3, pc}
 80a1a94:	080601a0 	.word	0x080601a0

080a1a98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1a98:	b508      	push	{r3, lr}
 80a1a9a:	4b02      	ldr	r3, [pc, #8]	; (80a1aa4 <realloc+0xc>)
 80a1a9c:	681b      	ldr	r3, [r3, #0]
 80a1a9e:	689b      	ldr	r3, [r3, #8]
 80a1aa0:	9301      	str	r3, [sp, #4]
 80a1aa2:	bd08      	pop	{r3, pc}
 80a1aa4:	080601a0 	.word	0x080601a0

080a1aa8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1aa8:	2100      	movs	r1, #0
 80a1aaa:	f7ff bf51 	b.w	80a1950 <system_delay_ms>

080a1aae <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1aae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1ab0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1ab2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1ab4:	b113      	cbz	r3, 80a1abc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1ab6:	2203      	movs	r2, #3
 80a1ab8:	4601      	mov	r1, r0
 80a1aba:	4798      	blx	r3
    }
 80a1abc:	4620      	mov	r0, r4
 80a1abe:	bd10      	pop	{r4, pc}

080a1ac0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1ac0:	4770      	bx	lr

080a1ac2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ac4:	4606      	mov	r6, r0
 80a1ac6:	4615      	mov	r5, r2
 80a1ac8:	460c      	mov	r4, r1
 80a1aca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1acc:	42bc      	cmp	r4, r7
 80a1ace:	d006      	beq.n	80a1ade <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1ad0:	6833      	ldr	r3, [r6, #0]
 80a1ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1ad6:	689b      	ldr	r3, [r3, #8]
 80a1ad8:	4630      	mov	r0, r6
 80a1ada:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1adc:	e7f6      	b.n	80a1acc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1ade:	4628      	mov	r0, r5
 80a1ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ae2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1ae2:	2200      	movs	r2, #0
 80a1ae4:	7c00      	ldrb	r0, [r0, #16]
 80a1ae6:	f7ff be31 	b.w	80a174c <HAL_I2C_Write_Data>

080a1aea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1aea:	2100      	movs	r1, #0
 80a1aec:	7c00      	ldrb	r0, [r0, #16]
 80a1aee:	f7ff be35 	b.w	80a175c <HAL_I2C_Available_Data>

080a1af2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1af2:	2100      	movs	r1, #0
 80a1af4:	7c00      	ldrb	r0, [r0, #16]
 80a1af6:	f7ff be39 	b.w	80a176c <HAL_I2C_Read_Data>

080a1afa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1afa:	2100      	movs	r1, #0
 80a1afc:	7c00      	ldrb	r0, [r0, #16]
 80a1afe:	f7ff be3d 	b.w	80a177c <HAL_I2C_Peek_Data>

080a1b02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1b02:	2100      	movs	r1, #0
 80a1b04:	7c00      	ldrb	r0, [r0, #16]
 80a1b06:	f7ff be41 	b.w	80a178c <HAL_I2C_Flush_Data>

080a1b0a <_ZN7TwoWireD0Ev>:
 80a1b0a:	b510      	push	{r4, lr}
 80a1b0c:	4604      	mov	r4, r0
 80a1b0e:	2114      	movs	r1, #20
 80a1b10:	f000 ff29 	bl	80a2966 <_ZdlPvj>
 80a1b14:	4620      	mov	r0, r4
 80a1b16:	bd10      	pop	{r4, pc}

080a1b18 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1b18:	b510      	push	{r4, lr}
 80a1b1a:	4604      	mov	r4, r0
 80a1b1c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1b22:	60a3      	str	r3, [r4, #8]
 80a1b24:	4b04      	ldr	r3, [pc, #16]	; (80a1b38 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1b26:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1b28:	7420      	strb	r0, [r4, #16]
 80a1b2a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1b2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1b2e:	f7ff fe3d 	bl	80a17ac <HAL_I2C_Init>

}
 80a1b32:	4620      	mov	r0, r4
 80a1b34:	bd10      	pop	{r4, pc}
 80a1b36:	bf00      	nop
 80a1b38:	080a3038 	.word	0x080a3038

080a1b3c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1b3c:	2100      	movs	r1, #0
 80a1b3e:	7c00      	ldrb	r0, [r0, #16]
 80a1b40:	f7ff be2c 	b.w	80a179c <HAL_I2C_Is_Enabled>

080a1b44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b46:	460f      	mov	r7, r1
 80a1b48:	f100 0608 	add.w	r6, r0, #8
 80a1b4c:	1d05      	adds	r5, r0, #4
 80a1b4e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1b50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1b54:	220a      	movs	r2, #10
 80a1b56:	4638      	mov	r0, r7
 80a1b58:	f000 f953 	bl	80a1e02 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1b5c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1b5e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1b60:	d007      	beq.n	80a1b72 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1b62:	2c00      	cmp	r4, #0
 80a1b64:	d0f4      	beq.n	80a1b50 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1b66:	212e      	movs	r1, #46	; 0x2e
 80a1b68:	4638      	mov	r0, r7
 80a1b6a:	f000 f8f7 	bl	80a1d5c <_ZN5Print5printEc>
 80a1b6e:	4404      	add	r4, r0
 80a1b70:	e7ee      	b.n	80a1b50 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1b72:	4620      	mov	r0, r4
 80a1b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1b78 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1b78:	b510      	push	{r4, lr}
 80a1b7a:	4604      	mov	r4, r0
 80a1b7c:	4b04      	ldr	r3, [pc, #16]	; (80a1b90 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b7e:	2211      	movs	r2, #17
 80a1b80:	f840 3b04 	str.w	r3, [r0], #4
 80a1b84:	2100      	movs	r1, #0
 80a1b86:	f001 f980 	bl	80a2e8a <memset>
{
    clear();
}
 80a1b8a:	4620      	mov	r0, r4
 80a1b8c:	bd10      	pop	{r4, pc}
 80a1b8e:	bf00      	nop
 80a1b90:	080a3060 	.word	0x080a3060

080a1b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b94:	4603      	mov	r3, r0
 80a1b96:	4a07      	ldr	r2, [pc, #28]	; (80a1bb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b98:	b510      	push	{r4, lr}
 80a1b9a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1b9e:	f101 0210 	add.w	r2, r1, #16
 80a1ba2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1ba6:	4291      	cmp	r1, r2
 80a1ba8:	f843 4b04 	str.w	r4, [r3], #4
 80a1bac:	d1f9      	bne.n	80a1ba2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1bae:	780a      	ldrb	r2, [r1, #0]
 80a1bb0:	701a      	strb	r2, [r3, #0]
}
 80a1bb2:	bd10      	pop	{r4, pc}
 80a1bb4:	080a3060 	.word	0x080a3060

080a1bb8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1bb8:	4a02      	ldr	r2, [pc, #8]	; (80a1bc4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1bba:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1bbc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1bbe:	2204      	movs	r2, #4
 80a1bc0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1bc2:	4770      	bx	lr
 80a1bc4:	080a3060 	.word	0x080a3060

080a1bc8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1bc8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1bca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1bce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1bd2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1bd6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1bda:	2304      	movs	r3, #4
 80a1bdc:	6041      	str	r1, [r0, #4]
 80a1bde:	7503      	strb	r3, [r0, #20]
 80a1be0:	bd10      	pop	{r4, pc}
	...

080a1be4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1be6:	4d04      	ldr	r5, [pc, #16]	; (80a1bf8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1be8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1bea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1bee:	9500      	str	r5, [sp, #0]
 80a1bf0:	f7ff ffea 	bl	80a1bc8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1bf4:	b003      	add	sp, #12
 80a1bf6:	bd30      	pop	{r4, r5, pc}
 80a1bf8:	080a3060 	.word	0x080a3060

080a1bfc <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1bfe:	780d      	ldrb	r5, [r1, #0]
 80a1c00:	788b      	ldrb	r3, [r1, #2]
 80a1c02:	784a      	ldrb	r2, [r1, #1]
 80a1c04:	78c9      	ldrb	r1, [r1, #3]
 80a1c06:	9100      	str	r1, [sp, #0]
 80a1c08:	4629      	mov	r1, r5
 80a1c0a:	f7ff ffdd 	bl	80a1bc8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1c0e:	b003      	add	sp, #12
 80a1c10:	bd30      	pop	{r4, r5, pc}
	...

080a1c14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1c14:	4a01      	ldr	r2, [pc, #4]	; (80a1c1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1c16:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1c18:	601a      	str	r2, [r3, #0]
 80a1c1a:	4770      	bx	lr
 80a1c1c:	080a30e2 	.word	0x080a30e2
 80a1c20:	200000f4 	.word	0x200000f4

080a1c24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1c24:	2300      	movs	r3, #0
 80a1c26:	461a      	mov	r2, r3
 80a1c28:	6840      	ldr	r0, [r0, #4]
 80a1c2a:	f7ff bec5 	b.w	80a19b8 <network_connect>

080a1c2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1c2e:	2200      	movs	r2, #0
 80a1c30:	2102      	movs	r1, #2
 80a1c32:	6840      	ldr	r0, [r0, #4]
 80a1c34:	f7ff bed0 	b.w	80a19d8 <network_disconnect>

080a1c38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1c38:	2200      	movs	r2, #0
 80a1c3a:	4611      	mov	r1, r2
 80a1c3c:	6840      	ldr	r0, [r0, #4]
 80a1c3e:	f7ff bec3 	b.w	80a19c8 <network_connecting>

080a1c42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1c42:	2200      	movs	r2, #0
 80a1c44:	4611      	mov	r1, r2
 80a1c46:	6840      	ldr	r0, [r0, #4]
 80a1c48:	f7ff bece 	b.w	80a19e8 <network_ready>

080a1c4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1c4c:	2300      	movs	r3, #0
 80a1c4e:	461a      	mov	r2, r3
 80a1c50:	4619      	mov	r1, r3
 80a1c52:	6840      	ldr	r0, [r0, #4]
 80a1c54:	f7ff bed0 	b.w	80a19f8 <network_on>

080a1c58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1c58:	2300      	movs	r3, #0
 80a1c5a:	461a      	mov	r2, r3
 80a1c5c:	4619      	mov	r1, r3
 80a1c5e:	6840      	ldr	r0, [r0, #4]
 80a1c60:	f7ff bed2 	b.w	80a1a08 <network_off>

080a1c64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1c64:	2200      	movs	r2, #0
 80a1c66:	f081 0101 	eor.w	r1, r1, #1
 80a1c6a:	6840      	ldr	r0, [r0, #4]
 80a1c6c:	f7ff bed4 	b.w	80a1a18 <network_listen>

080a1c70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1c70:	2200      	movs	r2, #0
 80a1c72:	6840      	ldr	r0, [r0, #4]
 80a1c74:	f7ff bee0 	b.w	80a1a38 <network_set_listen_timeout>

080a1c78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1c78:	2200      	movs	r2, #0
 80a1c7a:	4611      	mov	r1, r2
 80a1c7c:	6840      	ldr	r0, [r0, #4]
 80a1c7e:	f7ff bee3 	b.w	80a1a48 <network_get_listen_timeout>

080a1c82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1c82:	2200      	movs	r2, #0
 80a1c84:	4611      	mov	r1, r2
 80a1c86:	6840      	ldr	r0, [r0, #4]
 80a1c88:	f7ff bece 	b.w	80a1a28 <network_listening>

080a1c8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1c8c:	b570      	push	{r4, r5, r6, lr}
 80a1c8e:	4616      	mov	r6, r2
 80a1c90:	b08e      	sub	sp, #56	; 0x38
 80a1c92:	4604      	mov	r4, r0
    IPAddress addr;
 80a1c94:	a808      	add	r0, sp, #32
 80a1c96:	f7ff ff6f 	bl	80a1b78 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1c9a:	2211      	movs	r2, #17
 80a1c9c:	2100      	movs	r1, #0
 80a1c9e:	a803      	add	r0, sp, #12
 80a1ca0:	f001 f8f3 	bl	80a2e8a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ca4:	4630      	mov	r0, r6
 80a1ca6:	f001 f95b 	bl	80a2f60 <strlen>
 80a1caa:	2500      	movs	r5, #0
 80a1cac:	4b0a      	ldr	r3, [pc, #40]	; (80a1cd8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1cae:	9500      	str	r5, [sp, #0]
 80a1cb0:	b281      	uxth	r1, r0
 80a1cb2:	685b      	ldr	r3, [r3, #4]
 80a1cb4:	aa03      	add	r2, sp, #12
 80a1cb6:	4630      	mov	r0, r6
 80a1cb8:	f7ff fe3a 	bl	80a1930 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1cbc:	b120      	cbz	r0, 80a1cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1cbe:	4629      	mov	r1, r5
 80a1cc0:	4620      	mov	r0, r4
 80a1cc2:	f7ff ff79 	bl	80a1bb8 <_ZN9IPAddressC1Em>
 80a1cc6:	e003      	b.n	80a1cd0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1cc8:	a903      	add	r1, sp, #12
 80a1cca:	4620      	mov	r0, r4
 80a1ccc:	f7ff ff62 	bl	80a1b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1cd0:	4620      	mov	r0, r4
 80a1cd2:	b00e      	add	sp, #56	; 0x38
 80a1cd4:	bd70      	pop	{r4, r5, r6, pc}
 80a1cd6:	bf00      	nop
 80a1cd8:	20000578 	.word	0x20000578

080a1cdc <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1cdc:	4b03      	ldr	r3, [pc, #12]	; (80a1cec <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1cde:	4a04      	ldr	r2, [pc, #16]	; (80a1cf0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1ce0:	2804      	cmp	r0, #4
 80a1ce2:	bf0c      	ite	eq
 80a1ce4:	4610      	moveq	r0, r2
 80a1ce6:	4618      	movne	r0, r3
 80a1ce8:	4770      	bx	lr
 80a1cea:	bf00      	nop
 80a1cec:	200000f8 	.word	0x200000f8
 80a1cf0:	20000578 	.word	0x20000578

080a1cf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1cf4:	4b02      	ldr	r3, [pc, #8]	; (80a1d00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1cf6:	4a03      	ldr	r2, [pc, #12]	; (80a1d04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1cf8:	601a      	str	r2, [r3, #0]
 80a1cfa:	2200      	movs	r2, #0
 80a1cfc:	605a      	str	r2, [r3, #4]
 80a1cfe:	4770      	bx	lr
 80a1d00:	200000f8 	.word	0x200000f8
 80a1d04:	080a3158 	.word	0x080a3158

080a1d08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d0a:	4606      	mov	r6, r0
 80a1d0c:	460d      	mov	r5, r1
 80a1d0e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1d10:	2400      	movs	r4, #0
  while (size--) {
 80a1d12:	42bd      	cmp	r5, r7
 80a1d14:	d00c      	beq.n	80a1d30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1d16:	6833      	ldr	r3, [r6, #0]
 80a1d18:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1d1c:	689b      	ldr	r3, [r3, #8]
 80a1d1e:	4630      	mov	r0, r6
 80a1d20:	4798      	blx	r3
     if (chunk>=0)
 80a1d22:	2800      	cmp	r0, #0
 80a1d24:	db01      	blt.n	80a1d2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1d26:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1d28:	e7f3      	b.n	80a1d12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1d2a:	2c00      	cmp	r4, #0
 80a1d2c:	bf08      	it	eq
 80a1d2e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1d30:	4620      	mov	r0, r4
 80a1d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1d34:	b570      	push	{r4, r5, r6, lr}
 80a1d36:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1d38:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1d3a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1d3c:	b149      	cbz	r1, 80a1d52 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1d3e:	f001 f90f 	bl	80a2f60 <strlen>
 80a1d42:	682b      	ldr	r3, [r5, #0]
 80a1d44:	4602      	mov	r2, r0
 80a1d46:	4621      	mov	r1, r4
 80a1d48:	4628      	mov	r0, r5
    }
 80a1d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1d4e:	68db      	ldr	r3, [r3, #12]
 80a1d50:	4718      	bx	r3
    }
 80a1d52:	bd70      	pop	{r4, r5, r6, pc}

080a1d54 <_ZN5Print5printEPKc>:
 80a1d54:	b508      	push	{r3, lr}
 80a1d56:	f7ff ffed 	bl	80a1d34 <_ZN5Print5writeEPKc>
 80a1d5a:	bd08      	pop	{r3, pc}

080a1d5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1d5c:	6803      	ldr	r3, [r0, #0]
 80a1d5e:	689b      	ldr	r3, [r3, #8]
 80a1d60:	4718      	bx	r3

080a1d62 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a1d62:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a1d64:	680a      	ldr	r2, [r1, #0]
 80a1d66:	4601      	mov	r1, r0
 80a1d68:	6812      	ldr	r2, [r2, #0]
 80a1d6a:	4618      	mov	r0, r3
 80a1d6c:	4710      	bx	r2

080a1d6e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1d6e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1d70:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1d72:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1d74:	f7ff fff2 	bl	80a1d5c <_ZN5Print5printEc>
  n += print('\n');
 80a1d78:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1d7a:	4604      	mov	r4, r0
  n += print('\n');
 80a1d7c:	4628      	mov	r0, r5
 80a1d7e:	f7ff ffed 	bl	80a1d5c <_ZN5Print5printEc>
  return n;
}
 80a1d82:	4420      	add	r0, r4
 80a1d84:	bd38      	pop	{r3, r4, r5, pc}

080a1d86 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1d86:	b538      	push	{r3, r4, r5, lr}
 80a1d88:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d8a:	f7ff ffd3 	bl	80a1d34 <_ZN5Print5writeEPKc>
 80a1d8e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1d90:	4628      	mov	r0, r5
 80a1d92:	f7ff ffec 	bl	80a1d6e <_ZN5Print7printlnEv>
  return n;
}
 80a1d96:	4420      	add	r0, r4
 80a1d98:	bd38      	pop	{r3, r4, r5, pc}

080a1d9a <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a1d9a:	b538      	push	{r3, r4, r5, lr}
 80a1d9c:	4605      	mov	r5, r0
   size_t n = print(x);
 80a1d9e:	f7ff ffe0 	bl	80a1d62 <_ZN5Print5printERK9Printable>
 80a1da2:	4604      	mov	r4, r0
   n += println();
 80a1da4:	4628      	mov	r0, r5
 80a1da6:	f7ff ffe2 	bl	80a1d6e <_ZN5Print7printlnEv>
   return n;
 }
 80a1daa:	4420      	add	r0, r4
 80a1dac:	bd38      	pop	{r3, r4, r5, pc}

080a1dae <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1dae:	2a01      	cmp	r2, #1
 80a1db0:	bf98      	it	ls
 80a1db2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1db4:	b530      	push	{r4, r5, lr}
 80a1db6:	460b      	mov	r3, r1
 80a1db8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1dba:	2100      	movs	r1, #0
 80a1dbc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1dc0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1dc4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1dc8:	fb05 3312 	mls	r3, r5, r2, r3
 80a1dcc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1dce:	2b09      	cmp	r3, #9
 80a1dd0:	bf94      	ite	ls
 80a1dd2:	3330      	addls	r3, #48	; 0x30
 80a1dd4:	3337      	addhi	r3, #55	; 0x37
 80a1dd6:	b2db      	uxtb	r3, r3
 80a1dd8:	4621      	mov	r1, r4
 80a1dda:	f804 3901 	strb.w	r3, [r4], #-1
 80a1dde:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1de0:	2d00      	cmp	r5, #0
 80a1de2:	d1ef      	bne.n	80a1dc4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1de4:	f7ff ffa6 	bl	80a1d34 <_ZN5Print5writeEPKc>
}
 80a1de8:	b00b      	add	sp, #44	; 0x2c
 80a1dea:	bd30      	pop	{r4, r5, pc}

080a1dec <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1dec:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1dee:	b922      	cbnz	r2, 80a1dfa <_ZN5Print5printEmi+0xe>
 80a1df0:	6803      	ldr	r3, [r0, #0]
 80a1df2:	b2c9      	uxtb	r1, r1
 80a1df4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1df6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1df8:	4718      	bx	r3
  else return printNumber(n, base);
 80a1dfa:	b2d2      	uxtb	r2, r2
}
 80a1dfc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1dfe:	f7ff bfd6 	b.w	80a1dae <_ZN5Print11printNumberEmh>

080a1e02 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1e02:	f7ff bff3 	b.w	80a1dec <_ZN5Print5printEmi>

080a1e06 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a1e06:	b538      	push	{r3, r4, r5, lr}
 80a1e08:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a1e0a:	f7ff ffef 	bl	80a1dec <_ZN5Print5printEmi>
 80a1e0e:	4604      	mov	r4, r0
  n += println();
 80a1e10:	4628      	mov	r0, r5
 80a1e12:	f7ff ffac 	bl	80a1d6e <_ZN5Print7printlnEv>
  return n;
}
 80a1e16:	4420      	add	r0, r4
 80a1e18:	bd38      	pop	{r3, r4, r5, pc}

080a1e1a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e1a:	b510      	push	{r4, lr}
 80a1e1c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e1e:	f7ff fe46 	bl	80a1aae <_ZNSt14_Function_baseD1Ev>
 80a1e22:	4620      	mov	r0, r4
 80a1e24:	bd10      	pop	{r4, pc}
	...

080a1e28 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e28:	4803      	ldr	r0, [pc, #12]	; (80a1e38 <_GLOBAL__sub_I_RGB+0x10>)
 80a1e2a:	2300      	movs	r3, #0
 80a1e2c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1e2e:	4a03      	ldr	r2, [pc, #12]	; (80a1e3c <_GLOBAL__sub_I_RGB+0x14>)
 80a1e30:	4903      	ldr	r1, [pc, #12]	; (80a1e40 <_GLOBAL__sub_I_RGB+0x18>)
 80a1e32:	f000 bd93 	b.w	80a295c <__aeabi_atexit>
 80a1e36:	bf00      	nop
 80a1e38:	20000100 	.word	0x20000100
 80a1e3c:	2000006c 	.word	0x2000006c
 80a1e40:	080a1e1b 	.word	0x080a1e1b

080a1e44 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1e44:	4770      	bx	lr

080a1e46 <_ZN8SPIClassD0Ev>:
 80a1e46:	b510      	push	{r4, lr}
 80a1e48:	4604      	mov	r4, r0
 80a1e4a:	2110      	movs	r1, #16
 80a1e4c:	f000 fd8b 	bl	80a2966 <_ZdlPvj>
 80a1e50:	4620      	mov	r0, r4
 80a1e52:	bd10      	pop	{r4, pc}

080a1e54 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1e54:	b570      	push	{r4, r5, r6, lr}
 80a1e56:	4604      	mov	r4, r0
 80a1e58:	460e      	mov	r6, r1
 80a1e5a:	4b07      	ldr	r3, [pc, #28]	; (80a1e78 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1e5c:	2500      	movs	r5, #0
 80a1e5e:	6003      	str	r3, [r0, #0]
 80a1e60:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1e64:	f7ff fc32 	bl	80a16cc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1e68:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1e6a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1e6c:	f7ff fcd8 	bl	80a1820 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1e70:	60a5      	str	r5, [r4, #8]
}
 80a1e72:	4620      	mov	r0, r4
 80a1e74:	bd70      	pop	{r4, r5, r6, pc}
 80a1e76:	bf00      	nop
 80a1e78:	080a318c 	.word	0x080a318c

080a1e7c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1e7c:	7900      	ldrb	r0, [r0, #4]
 80a1e7e:	f7ff bcd7 	b.w	80a1830 <HAL_SPI_Is_Enabled>

080a1e82 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1e82:	b510      	push	{r4, lr}
 80a1e84:	4604      	mov	r4, r0
{
	free(buffer);
 80a1e86:	6800      	ldr	r0, [r0, #0]
 80a1e88:	f7ff fdfe 	bl	80a1a88 <free>
}
 80a1e8c:	4620      	mov	r0, r4
 80a1e8e:	bd10      	pop	{r4, pc}

080a1e90 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1e90:	b510      	push	{r4, lr}
 80a1e92:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1e94:	6800      	ldr	r0, [r0, #0]
 80a1e96:	b108      	cbz	r0, 80a1e9c <_ZN6String10invalidateEv+0xc>
 80a1e98:	f7ff fdf6 	bl	80a1a88 <free>
	buffer = NULL;
 80a1e9c:	2300      	movs	r3, #0
 80a1e9e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1ea0:	60a3      	str	r3, [r4, #8]
 80a1ea2:	6063      	str	r3, [r4, #4]
 80a1ea4:	bd10      	pop	{r4, pc}

080a1ea6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1ea6:	b538      	push	{r3, r4, r5, lr}
 80a1ea8:	4604      	mov	r4, r0
 80a1eaa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1eac:	6800      	ldr	r0, [r0, #0]
 80a1eae:	3101      	adds	r1, #1
 80a1eb0:	f7ff fdf2 	bl	80a1a98 <realloc>
	if (newbuffer) {
 80a1eb4:	b110      	cbz	r0, 80a1ebc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1eb6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1eba:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1ebc:	bd38      	pop	{r3, r4, r5, pc}

080a1ebe <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1ebe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1ec0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1ec2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1ec4:	b113      	cbz	r3, 80a1ecc <_ZN6String7reserveEj+0xe>
 80a1ec6:	6843      	ldr	r3, [r0, #4]
 80a1ec8:	428b      	cmp	r3, r1
 80a1eca:	d207      	bcs.n	80a1edc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1ecc:	4620      	mov	r0, r4
 80a1ece:	f7ff ffea 	bl	80a1ea6 <_ZN6String12changeBufferEj>
 80a1ed2:	b120      	cbz	r0, 80a1ede <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1ed4:	68a3      	ldr	r3, [r4, #8]
 80a1ed6:	b90b      	cbnz	r3, 80a1edc <_ZN6String7reserveEj+0x1e>
 80a1ed8:	6822      	ldr	r2, [r4, #0]
 80a1eda:	7013      	strb	r3, [r2, #0]
 80a1edc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1ede:	bd10      	pop	{r4, pc}

080a1ee0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1ee0:	b570      	push	{r4, r5, r6, lr}
 80a1ee2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1ee4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1ee6:	4604      	mov	r4, r0
 80a1ee8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1eea:	f7ff ffe8 	bl	80a1ebe <_ZN6String7reserveEj>
 80a1eee:	b918      	cbnz	r0, 80a1ef8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	f7ff ffcd 	bl	80a1e90 <_ZN6String10invalidateEv>
		return *this;
 80a1ef6:	e009      	b.n	80a1f0c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1ef8:	462a      	mov	r2, r5
 80a1efa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1efc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1efe:	6820      	ldr	r0, [r4, #0]
 80a1f00:	f000 ffb8 	bl	80a2e74 <memcpy>
	buffer[len] = 0;
 80a1f04:	6822      	ldr	r2, [r4, #0]
 80a1f06:	68a3      	ldr	r3, [r4, #8]
 80a1f08:	2100      	movs	r1, #0
 80a1f0a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1f0c:	4620      	mov	r0, r4
 80a1f0e:	bd70      	pop	{r4, r5, r6, pc}

080a1f10 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1f10:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1f12:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1f14:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1f16:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1f18:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1f1a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1f1c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1f1e:	460d      	mov	r5, r1
 80a1f20:	b139      	cbz	r1, 80a1f32 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1f22:	4608      	mov	r0, r1
 80a1f24:	f001 f81c 	bl	80a2f60 <strlen>
 80a1f28:	4629      	mov	r1, r5
 80a1f2a:	4602      	mov	r2, r0
 80a1f2c:	4620      	mov	r0, r4
 80a1f2e:	f7ff ffd7 	bl	80a1ee0 <_ZN6String4copyEPKcj>
}
 80a1f32:	4620      	mov	r0, r4
 80a1f34:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1f38 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1f3c:	4b03      	ldr	r3, [pc, #12]	; (80a1f4c <_GLOBAL__sub_I_System+0x14>)
 80a1f3e:	2000      	movs	r0, #0
 80a1f40:	7018      	strb	r0, [r3, #0]
 80a1f42:	8058      	strh	r0, [r3, #2]
 80a1f44:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1f46:	f7ff bcfb 	b.w	80a1940 <set_system_mode>
 80a1f4a:	bf00      	nop
 80a1f4c:	20000110 	.word	0x20000110

080a1f50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1f50:	4b02      	ldr	r3, [pc, #8]	; (80a1f5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1f52:	681a      	ldr	r2, [r3, #0]
 80a1f54:	4b02      	ldr	r3, [pc, #8]	; (80a1f60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1f56:	601a      	str	r2, [r3, #0]
 80a1f58:	4770      	bx	lr
 80a1f5a:	bf00      	nop
 80a1f5c:	20000004 	.word	0x20000004
 80a1f60:	20000118 	.word	0x20000118

080a1f64 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1f64:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1f66:	6804      	ldr	r4, [r0, #0]
 80a1f68:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1f6a:	46a4      	mov	ip, r4
    }
 80a1f6c:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1f6e:	4760      	bx	ip

080a1f70 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1f70:	6803      	ldr	r3, [r0, #0]
 80a1f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1f74:	4718      	bx	r3

080a1f76 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1f76:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1f78:	4770      	bx	lr

080a1f7a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1f7a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1f7c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1f7e:	1a10      	subs	r0, r2, r0
 80a1f80:	4770      	bx	lr

080a1f82 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1f82:	b513      	push	{r0, r1, r4, lr}
 80a1f84:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1f86:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1f88:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1f8c:	68d4      	ldr	r4, [r2, #12]
 80a1f8e:	4619      	mov	r1, r3
 80a1f90:	2201      	movs	r2, #1
 80a1f92:	47a0      	blx	r4
}
 80a1f94:	b002      	add	sp, #8
 80a1f96:	bd10      	pop	{r4, pc}

080a1f98 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1f98:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1f9a:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1f9c:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1f9e:	691b      	ldr	r3, [r3, #16]
 80a1fa0:	4798      	blx	r3
 80a1fa2:	b128      	cbz	r0, 80a1fb0 <_ZN3UDP4readEv+0x18>
 80a1fa4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1fa6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1fa8:	1c59      	adds	r1, r3, #1
 80a1faa:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1fac:	5cd0      	ldrb	r0, [r2, r3]
 80a1fae:	bd10      	pop	{r4, pc}
 80a1fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1fb4:	bd10      	pop	{r4, pc}

080a1fb6 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1fb6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1fb8:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1fba:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1fbc:	691b      	ldr	r3, [r3, #16]
 80a1fbe:	4798      	blx	r3
 80a1fc0:	b118      	cbz	r0, 80a1fca <_ZN3UDP4peekEv+0x14>
 80a1fc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1fc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1fc6:	5cd0      	ldrb	r0, [r2, r3]
 80a1fc8:	bd10      	pop	{r4, pc}
 80a1fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1fce:	bd10      	pop	{r4, pc}

080a1fd0 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1fd0:	4770      	bx	lr

080a1fd2 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1fd2:	4603      	mov	r3, r0
 80a1fd4:	4608      	mov	r0, r1
 80a1fd6:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1fd8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1fda:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1fdc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1fde:	6803      	ldr	r3, [r0, #0]
 80a1fe0:	1a52      	subs	r2, r2, r1
 80a1fe2:	68db      	ldr	r3, [r3, #12]
 80a1fe4:	4421      	add	r1, r4
}
 80a1fe6:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1fe8:	4718      	bx	r3

080a1fea <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1fea:	f1a0 0010 	sub.w	r0, r0, #16
 80a1fee:	f7ff bff0 	b.w	80a1fd2 <_ZNK3UDP7printToER5Print>

080a1ff2 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1ff4:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1ff6:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1ff8:	460f      	mov	r7, r1
 80a1ffa:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1ffc:	f7ff fe6e 	bl	80a1cdc <_ZN5spark12NetworkClass4fromEm>
 80a2000:	6803      	ldr	r3, [r0, #0]
 80a2002:	68db      	ldr	r3, [r3, #12]
 80a2004:	4798      	blx	r3
 80a2006:	b1b8      	cbz	r0, 80a2038 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a2008:	2102      	movs	r1, #2
 80a200a:	463b      	mov	r3, r7
 80a200c:	2211      	movs	r2, #17
 80a200e:	4608      	mov	r0, r1
 80a2010:	9600      	str	r6, [sp, #0]
 80a2012:	f7ff fbdd 	bl	80a17d0 <socket_create>
 80a2016:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a2018:	f7ff fbd2 	bl	80a17c0 <socket_handle_valid>
 80a201c:	4604      	mov	r4, r0
 80a201e:	b130      	cbz	r0, 80a202e <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2020:	2300      	movs	r3, #0
 80a2022:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2024:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a2026:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a2028:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a202a:	2001      	movs	r0, #1
 80a202c:	e004      	b.n	80a2038 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a202e:	682b      	ldr	r3, [r5, #0]
 80a2030:	4628      	mov	r0, r5
 80a2032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2034:	4798      	blx	r3
            bound = false;
 80a2036:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a2038:	b003      	add	sp, #12
 80a203a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a203c <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a203c:	b538      	push	{r3, r4, r5, lr}
 80a203e:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a2040:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2042:	f7ff fbe5 	bl	80a1810 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a2046:	4285      	cmp	r5, r0
 80a2048:	d002      	beq.n	80a2050 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a204a:	6960      	ldr	r0, [r4, #20]
 80a204c:	f7ff fbd8 	bl	80a1800 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a2050:	f7ff fbde 	bl	80a1810 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2054:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a2056:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2058:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a205a:	8723      	strh	r3, [r4, #56]	; 0x38
 80a205c:	bd38      	pop	{r3, r4, r5, pc}

080a205e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a205e:	b530      	push	{r4, r5, lr}
 80a2060:	b087      	sub	sp, #28
 80a2062:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a2066:	2502      	movs	r5, #2
 80a2068:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a206c:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2070:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a2072:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2074:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a2078:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a207c:	799c      	ldrb	r4, [r3, #6]
 80a207e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a2082:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a2084:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a2086:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a208a:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a208e:	2310      	movs	r3, #16
 80a2090:	9301      	str	r3, [sp, #4]
 80a2092:	ab02      	add	r3, sp, #8
 80a2094:	9300      	str	r3, [sp, #0]
 80a2096:	6940      	ldr	r0, [r0, #20]
 80a2098:	2300      	movs	r3, #0
 80a209a:	f7ff fba9 	bl	80a17f0 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a209e:	b007      	add	sp, #28
 80a20a0:	bd30      	pop	{r4, r5, pc}

080a20a2 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a20a2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a20a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a20a6:	4605      	mov	r5, r0
 80a20a8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a20aa:	b113      	cbz	r3, 80a20b2 <_ZN3UDP5writeEPKhj+0x10>
 80a20ac:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a20ae:	1a24      	subs	r4, r4, r0
 80a20b0:	e000      	b.n	80a20b4 <_ZN3UDP5writeEPKhj+0x12>
 80a20b2:	461c      	mov	r4, r3
 80a20b4:	4294      	cmp	r4, r2
 80a20b6:	bf28      	it	cs
 80a20b8:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a20ba:	4418      	add	r0, r3
 80a20bc:	4622      	mov	r2, r4
 80a20be:	f000 fed9 	bl	80a2e74 <memcpy>
    _offset += size;
 80a20c2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a20c4:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a20c6:	4423      	add	r3, r4
 80a20c8:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a20ca:	bd38      	pop	{r3, r4, r5, pc}

080a20cc <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a20cc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a20ce:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a20d0:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a20d2:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a20d4:	460e      	mov	r6, r1
 80a20d6:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a20d8:	4798      	blx	r3
 80a20da:	b188      	cbz	r0, 80a2100 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a20dc:	6823      	ldr	r3, [r4, #0]
 80a20de:	4620      	mov	r0, r4
 80a20e0:	691b      	ldr	r3, [r3, #16]
 80a20e2:	4798      	blx	r3
 80a20e4:	4285      	cmp	r5, r0
 80a20e6:	bfa8      	it	ge
 80a20e8:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a20ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a20ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a20ee:	462a      	mov	r2, r5
 80a20f0:	4419      	add	r1, r3
 80a20f2:	4630      	mov	r0, r6
 80a20f4:	f000 febe 	bl	80a2e74 <memcpy>
      _offset += read;
 80a20f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a20fa:	442b      	add	r3, r5
 80a20fc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a20fe:	e001      	b.n	80a2104 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a2100:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a2104:	4628      	mov	r0, r5
 80a2106:	bd70      	pop	{r4, r5, r6, pc}

080a2108 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2108:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a210a:	4604      	mov	r4, r0
 80a210c:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a210e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a2110:	460d      	mov	r5, r1
 80a2112:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2114:	f7ff fde2 	bl	80a1cdc <_ZN5spark12NetworkClass4fromEm>
 80a2118:	6803      	ldr	r3, [r0, #0]
 80a211a:	68db      	ldr	r3, [r3, #12]
 80a211c:	4798      	blx	r3
 80a211e:	b310      	cbz	r0, 80a2166 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a2120:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a2122:	f7ff fb75 	bl	80a1810 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2126:	4287      	cmp	r7, r0
 80a2128:	d01d      	beq.n	80a2166 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a212a:	b1e5      	cbz	r5, 80a2166 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a212c:	ab08      	add	r3, sp, #32
 80a212e:	2210      	movs	r2, #16
 80a2130:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a2134:	9301      	str	r3, [sp, #4]
 80a2136:	eb0d 0302 	add.w	r3, sp, r2
 80a213a:	9300      	str	r3, [sp, #0]
 80a213c:	4629      	mov	r1, r5
 80a213e:	2300      	movs	r3, #0
 80a2140:	4632      	mov	r2, r6
 80a2142:	6960      	ldr	r0, [r4, #20]
 80a2144:	f7ff fb4c 	bl	80a17e0 <socket_receivefrom>
        if (ret >= 0)
 80a2148:	1e05      	subs	r5, r0, #0
 80a214a:	db0e      	blt.n	80a216a <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a214c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a2150:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a2154:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a215a:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a215c:	f104 001c 	add.w	r0, r4, #28
 80a2160:	f7ff fd4c 	bl	80a1bfc <_ZN9IPAddressaSEPKh>
 80a2164:	e001      	b.n	80a216a <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a2166:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a216a:	4628      	mov	r0, r5
 80a216c:	b009      	add	sp, #36	; 0x24
 80a216e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2170 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a2170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2174:	4606      	mov	r6, r0
 80a2176:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a2178:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a217a:	460d      	mov	r5, r1
 80a217c:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a217e:	f7ff fdad 	bl	80a1cdc <_ZN5spark12NetworkClass4fromEm>
 80a2182:	6803      	ldr	r3, [r0, #0]
 80a2184:	68db      	ldr	r3, [r3, #12]
 80a2186:	4798      	blx	r3
 80a2188:	b1f8      	cbz	r0, 80a21ca <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a218a:	4628      	mov	r0, r5
 80a218c:	f000 fee8 	bl	80a2f60 <strlen>
 80a2190:	2400      	movs	r4, #0
 80a2192:	b281      	uxth	r1, r0
 80a2194:	9400      	str	r4, [sp, #0]
 80a2196:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a2198:	aa03      	add	r2, sp, #12
 80a219a:	4628      	mov	r0, r5
 80a219c:	f7ff fbc8 	bl	80a1930 <inet_gethostbyname>
 80a21a0:	b990      	cbnz	r0, 80a21c8 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a21a2:	a903      	add	r1, sp, #12
 80a21a4:	a808      	add	r0, sp, #32
 80a21a6:	f7ff fcf5 	bl	80a1b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a21aa:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a21ac:	ac0f      	add	r4, sp, #60	; 0x3c
 80a21ae:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a21b0:	4b07      	ldr	r3, [pc, #28]	; (80a21d0 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a21b2:	ad09      	add	r5, sp, #36	; 0x24
 80a21b4:	930e      	str	r3, [sp, #56]	; 0x38
 80a21b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a21b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a21ba:	682b      	ldr	r3, [r5, #0]
 80a21bc:	4642      	mov	r2, r8
 80a21be:	7023      	strb	r3, [r4, #0]
 80a21c0:	a90e      	add	r1, sp, #56	; 0x38
 80a21c2:	4630      	mov	r0, r6
 80a21c4:	47b8      	blx	r7
 80a21c6:	e000      	b.n	80a21ca <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a21c8:	4620      	mov	r0, r4
}
 80a21ca:	b014      	add	sp, #80	; 0x50
 80a21cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a21d0:	080a3060 	.word	0x080a3060

080a21d4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a21d4:	b570      	push	{r4, r5, r6, lr}
 80a21d6:	4604      	mov	r4, r0
 80a21d8:	4606      	mov	r6, r0
 80a21da:	4b05      	ldr	r3, [pc, #20]	; (80a21f0 <_ZN3UDP8remoteIPEv+0x1c>)
 80a21dc:	f101 0520 	add.w	r5, r1, #32
 80a21e0:	f844 3b04 	str.w	r3, [r4], #4
 80a21e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a21e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a21e8:	682b      	ldr	r3, [r5, #0]
 80a21ea:	4630      	mov	r0, r6
 80a21ec:	7023      	strb	r3, [r4, #0]
 80a21ee:	bd70      	pop	{r4, r5, r6, pc}
 80a21f0:	080a3060 	.word	0x080a3060

080a21f4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a21f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21f6:	4694      	mov	ip, r2
 80a21f8:	468e      	mov	lr, r1
 80a21fa:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a21fc:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a21fe:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2200:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a2202:	4a09      	ldr	r2, [pc, #36]	; (80a2228 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a2204:	ac03      	add	r4, sp, #12
 80a2206:	1d1d      	adds	r5, r3, #4
 80a2208:	9202      	str	r2, [sp, #8]
 80a220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a220e:	682b      	ldr	r3, [r5, #0]
 80a2210:	4662      	mov	r2, ip
 80a2212:	7023      	strb	r3, [r4, #0]
 80a2214:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a2218:	4671      	mov	r1, lr
 80a221a:	9300      	str	r3, [sp, #0]
 80a221c:	4630      	mov	r0, r6
 80a221e:	ab02      	add	r3, sp, #8
 80a2220:	47b8      	blx	r7
    }
 80a2222:	b009      	add	sp, #36	; 0x24
 80a2224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2226:	bf00      	nop
 80a2228:	080a3060 	.word	0x080a3060

080a222c <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a222e:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2230:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2232:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2234:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a2236:	4b0d      	ldr	r3, [pc, #52]	; (80a226c <_ZN3UDP9endPacketEv+0x40>)
 80a2238:	ad03      	add	r5, sp, #12
 80a223a:	f100 0620 	add.w	r6, r0, #32
 80a223e:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a2242:	9302      	str	r3, [sp, #8]
 80a2244:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a2246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2248:	6833      	ldr	r3, [r6, #0]
 80a224a:	4672      	mov	r2, lr
 80a224c:	702b      	strb	r3, [r5, #0]
 80a224e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a2250:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2252:	9300      	str	r3, [sp, #0]
 80a2254:	4620      	mov	r0, r4
 80a2256:	ab02      	add	r3, sp, #8
 80a2258:	47b8      	blx	r7
 80a225a:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a225c:	6823      	ldr	r3, [r4, #0]
 80a225e:	4620      	mov	r0, r4
 80a2260:	69db      	ldr	r3, [r3, #28]
 80a2262:	4798      	blx	r3
    return result;
}
 80a2264:	4628      	mov	r0, r5
 80a2266:	b009      	add	sp, #36	; 0x24
 80a2268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a226a:	bf00      	nop
 80a226c:	080a3060 	.word	0x080a3060

080a2270 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a2270:	b538      	push	{r3, r4, r5, lr}
 80a2272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2276:	6083      	str	r3, [r0, #8]
 80a2278:	4b0b      	ldr	r3, [pc, #44]	; (80a22a8 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a227a:	2500      	movs	r5, #0
 80a227c:	f103 0208 	add.w	r2, r3, #8
 80a2280:	336c      	adds	r3, #108	; 0x6c
 80a2282:	6002      	str	r2, [r0, #0]
 80a2284:	6103      	str	r3, [r0, #16]
 80a2286:	6045      	str	r5, [r0, #4]
 80a2288:	4604      	mov	r4, r0
 80a228a:	f7ff fac1 	bl	80a1810 <socket_handle_invalid>
 80a228e:	6160      	str	r0, [r4, #20]
 80a2290:	f104 001c 	add.w	r0, r4, #28
 80a2294:	f7ff fc70 	bl	80a1b78 <_ZN9IPAddressC1Ev>
 80a2298:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a229c:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a229e:	8725      	strh	r5, [r4, #56]	; 0x38
 80a22a0:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a22a2:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a22a4:	4620      	mov	r0, r4
 80a22a6:	bd38      	pop	{r3, r4, r5, pc}
 80a22a8:	080a31c0 	.word	0x080a31c0

080a22ac <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a22ac:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a22ae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a22b2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a22b4:	b123      	cbz	r3, 80a22c0 <_ZN3UDP13releaseBufferEv+0x14>
 80a22b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a22b8:	b110      	cbz	r0, 80a22c0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a22ba:	2101      	movs	r1, #1
 80a22bc:	f000 fb53 	bl	80a2966 <_ZdlPvj>
    }
    _buffer = NULL;
 80a22c0:	2300      	movs	r3, #0
 80a22c2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a22c4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a22c8:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a22ca:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a22cc:	8723      	strh	r3, [r4, #56]	; 0x38
 80a22ce:	bd10      	pop	{r4, pc}

080a22d0 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a22d0:	b570      	push	{r4, r5, r6, lr}
 80a22d2:	4604      	mov	r4, r0
 80a22d4:	4616      	mov	r6, r2
 80a22d6:	460d      	mov	r5, r1
    releaseBuffer();
 80a22d8:	f7ff ffe8 	bl	80a22ac <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a22dc:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a22de:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a22e0:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a22e2:	b93e      	cbnz	r6, 80a22f4 <_ZN3UDP9setBufferEjPh+0x24>
 80a22e4:	b135      	cbz	r5, 80a22f4 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a22e6:	4628      	mov	r0, r5
 80a22e8:	f7fd fed7 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a22ec:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a22ee:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a22f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a22f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a22f6:	b103      	cbz	r3, 80a22fa <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a22f8:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a22fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a22fc:	3000      	adds	r0, #0
 80a22fe:	bf18      	it	ne
 80a2300:	2001      	movne	r0, #1
 80a2302:	bd70      	pop	{r4, r5, r6, pc}

080a2304 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2306:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2308:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a230a:	4605      	mov	r5, r0
 80a230c:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a230e:	b91a      	cbnz	r2, 80a2318 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2310:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2312:	b109      	cbz	r1, 80a2318 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a2314:	f7ff ffdc 	bl	80a22d0 <_ZN3UDP9setBufferEjPh>
 80a2318:	f105 0620 	add.w	r6, r5, #32
 80a231c:	3404      	adds	r4, #4
 80a231e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2320:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2322:	6823      	ldr	r3, [r4, #0]
 80a2324:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2326:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a2328:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a232a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a232c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a232e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2332 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2332:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a2334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2336:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a2338:	b91a      	cbnz	r2, 80a2342 <_ZN3UDP11parsePacketEm+0x10>
 80a233a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a233c:	b109      	cbz	r1, 80a2342 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a233e:	f7ff ffc7 	bl	80a22d0 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2342:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2344:	2300      	movs	r3, #0
 80a2346:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2348:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a234a:	b141      	cbz	r1, 80a235e <_ZN3UDP11parsePacketEm+0x2c>
 80a234c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a234e:	b132      	cbz	r2, 80a235e <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a2350:	6820      	ldr	r0, [r4, #0]
 80a2352:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a2354:	4620      	mov	r0, r4
 80a2356:	47a8      	blx	r5
        if (result>0) {
 80a2358:	2800      	cmp	r0, #0
            _total = result;
 80a235a:	bfc8      	it	gt
 80a235c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a235e:	6823      	ldr	r3, [r4, #0]
 80a2360:	4620      	mov	r0, r4
}
 80a2362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a2366:	691b      	ldr	r3, [r3, #16]
 80a2368:	4718      	bx	r3

080a236a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a236a:	4770      	bx	lr

080a236c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a236c:	7441      	strb	r1, [r0, #17]
 80a236e:	4770      	bx	lr

080a2370 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2370:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2372:	7c00      	ldrb	r0, [r0, #16]
 80a2374:	f7ff fa9c 	bl	80a18b0 <HAL_USART_Available_Data_For_Write>
}
 80a2378:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a237c:	bd08      	pop	{r3, pc}

080a237e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a237e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2380:	7c00      	ldrb	r0, [r0, #16]
 80a2382:	f7ff fa6d 	bl	80a1860 <HAL_USART_Available_Data>
}
 80a2386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a238a:	bd08      	pop	{r3, pc}

080a238c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a238c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a238e:	7c00      	ldrb	r0, [r0, #16]
 80a2390:	f7ff fa76 	bl	80a1880 <HAL_USART_Peek_Data>
}
 80a2394:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2398:	bf28      	it	cs
 80a239a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a239e:	bd08      	pop	{r3, pc}

080a23a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a23a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a23a2:	7c00      	ldrb	r0, [r0, #16]
 80a23a4:	f7ff fa64 	bl	80a1870 <HAL_USART_Read_Data>
}
 80a23a8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a23ac:	bf28      	it	cs
 80a23ae:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a23b2:	bd08      	pop	{r3, pc}

080a23b4 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a23b4:	7c00      	ldrb	r0, [r0, #16]
 80a23b6:	f7ff ba6b 	b.w	80a1890 <HAL_USART_Flush_Data>

080a23ba <_ZN11USARTSerialD0Ev>:
 80a23ba:	b510      	push	{r4, lr}
 80a23bc:	4604      	mov	r4, r0
 80a23be:	2114      	movs	r1, #20
 80a23c0:	f000 fad1 	bl	80a2966 <_ZdlPvj>
 80a23c4:	4620      	mov	r0, r4
 80a23c6:	bd10      	pop	{r4, pc}

080a23c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a23c8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23ca:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a23cc:	4604      	mov	r4, r0
 80a23ce:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a23d0:	b925      	cbnz	r5, 80a23dc <_ZN11USARTSerial5writeEh+0x14>
 80a23d2:	7c00      	ldrb	r0, [r0, #16]
 80a23d4:	f7ff fa6c 	bl	80a18b0 <HAL_USART_Available_Data_For_Write>
 80a23d8:	2800      	cmp	r0, #0
 80a23da:	dd05      	ble.n	80a23e8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23dc:	4631      	mov	r1, r6
 80a23de:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a23e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23e4:	f7ff ba34 	b.w	80a1850 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a23e8:	4628      	mov	r0, r5
 80a23ea:	bd70      	pop	{r4, r5, r6, pc}

080a23ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23ec:	b510      	push	{r4, lr}
 80a23ee:	4604      	mov	r4, r0
 80a23f0:	4608      	mov	r0, r1
 80a23f2:	4611      	mov	r1, r2
 80a23f4:	2200      	movs	r2, #0
 80a23f6:	6062      	str	r2, [r4, #4]
 80a23f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a23fc:	60a2      	str	r2, [r4, #8]
 80a23fe:	4a05      	ldr	r2, [pc, #20]	; (80a2414 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2400:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2402:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2404:	2201      	movs	r2, #1
 80a2406:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2408:	461a      	mov	r2, r3
 80a240a:	f7ff fa19 	bl	80a1840 <HAL_USART_Init>
}
 80a240e:	4620      	mov	r0, r4
 80a2410:	bd10      	pop	{r4, pc}
 80a2412:	bf00      	nop
 80a2414:	080a3238 	.word	0x080a3238

080a2418 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2418:	7c00      	ldrb	r0, [r0, #16]
 80a241a:	f7ff ba41 	b.w	80a18a0 <HAL_USART_Is_Enabled>
	...

080a2420 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2420:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2422:	4d0c      	ldr	r5, [pc, #48]	; (80a2454 <_Z22__fetch_global_Serial1v+0x34>)
 80a2424:	6829      	ldr	r1, [r5, #0]
 80a2426:	f011 0401 	ands.w	r4, r1, #1
 80a242a:	d111      	bne.n	80a2450 <_Z22__fetch_global_Serial1v+0x30>
 80a242c:	4628      	mov	r0, r5
 80a242e:	f7fd fe38 	bl	80a00a2 <__cxa_guard_acquire>
 80a2432:	b168      	cbz	r0, 80a2450 <_Z22__fetch_global_Serial1v+0x30>
 80a2434:	4a08      	ldr	r2, [pc, #32]	; (80a2458 <_Z22__fetch_global_Serial1v+0x38>)
 80a2436:	4621      	mov	r1, r4
 80a2438:	4b08      	ldr	r3, [pc, #32]	; (80a245c <_Z22__fetch_global_Serial1v+0x3c>)
 80a243a:	4809      	ldr	r0, [pc, #36]	; (80a2460 <_Z22__fetch_global_Serial1v+0x40>)
 80a243c:	f7ff ffd6 	bl	80a23ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2440:	4628      	mov	r0, r5
 80a2442:	f7fd fe33 	bl	80a00ac <__cxa_guard_release>
 80a2446:	4a07      	ldr	r2, [pc, #28]	; (80a2464 <_Z22__fetch_global_Serial1v+0x44>)
 80a2448:	4907      	ldr	r1, [pc, #28]	; (80a2468 <_Z22__fetch_global_Serial1v+0x48>)
 80a244a:	4805      	ldr	r0, [pc, #20]	; (80a2460 <_Z22__fetch_global_Serial1v+0x40>)
 80a244c:	f000 fa86 	bl	80a295c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2450:	4803      	ldr	r0, [pc, #12]	; (80a2460 <_Z22__fetch_global_Serial1v+0x40>)
 80a2452:	bd38      	pop	{r3, r4, r5, pc}
 80a2454:	200001b4 	.word	0x200001b4
 80a2458:	200001b8 	.word	0x200001b8
 80a245c:	20000130 	.word	0x20000130
 80a2460:	2000011c 	.word	0x2000011c
 80a2464:	2000006c 	.word	0x2000006c
 80a2468:	080a236b 	.word	0x080a236b

080a246c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a246c:	7441      	strb	r1, [r0, #17]
 80a246e:	4770      	bx	lr

080a2470 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2470:	4770      	bx	lr

080a2472 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2472:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2474:	2100      	movs	r1, #0
 80a2476:	7c00      	ldrb	r0, [r0, #16]
 80a2478:	f7ff fa3a 	bl	80a18f0 <HAL_USB_USART_Receive_Data>
}
 80a247c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2480:	bf28      	it	cs
 80a2482:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2486:	bd08      	pop	{r3, pc}

080a2488 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2488:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a248a:	2101      	movs	r1, #1
 80a248c:	7c00      	ldrb	r0, [r0, #16]
 80a248e:	f7ff fa2f 	bl	80a18f0 <HAL_USB_USART_Receive_Data>
}
 80a2492:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2496:	bf28      	it	cs
 80a2498:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a249c:	bd08      	pop	{r3, pc}

080a249e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a249e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a24a0:	7c00      	ldrb	r0, [r0, #16]
 80a24a2:	f7ff fa1d 	bl	80a18e0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a24a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24aa:	bd08      	pop	{r3, pc}

080a24ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a24ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a24ae:	7c00      	ldrb	r0, [r0, #16]
 80a24b0:	f7ff fa0e 	bl	80a18d0 <HAL_USB_USART_Available_Data>
}
 80a24b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24b8:	bd08      	pop	{r3, pc}

080a24ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a24ba:	7c00      	ldrb	r0, [r0, #16]
 80a24bc:	f7ff ba28 	b.w	80a1910 <HAL_USB_USART_Flush_Data>

080a24c0 <_ZN9USBSerialD0Ev>:
 80a24c0:	b510      	push	{r4, lr}
 80a24c2:	4604      	mov	r4, r0
 80a24c4:	2114      	movs	r1, #20
 80a24c6:	f000 fa4e 	bl	80a2966 <_ZdlPvj>
 80a24ca:	4620      	mov	r0, r4
 80a24cc:	bd10      	pop	{r4, pc}

080a24ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a24ce:	b538      	push	{r3, r4, r5, lr}
 80a24d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a24d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24d6:	f7ff fa03 	bl	80a18e0 <HAL_USB_USART_Available_Data_For_Write>
 80a24da:	2800      	cmp	r0, #0
 80a24dc:	dc01      	bgt.n	80a24e2 <_ZN9USBSerial5writeEh+0x14>
 80a24de:	7c60      	ldrb	r0, [r4, #17]
 80a24e0:	b128      	cbz	r0, 80a24ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a24e2:	4629      	mov	r1, r5
 80a24e4:	7c20      	ldrb	r0, [r4, #16]
 80a24e6:	f7ff fa0b 	bl	80a1900 <HAL_USB_USART_Send_Data>
 80a24ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a24ee:	bd38      	pop	{r3, r4, r5, pc}

080a24f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a24f0:	b510      	push	{r4, lr}
 80a24f2:	4604      	mov	r4, r0
 80a24f4:	2300      	movs	r3, #0
 80a24f6:	6063      	str	r3, [r4, #4]
 80a24f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24fc:	60a3      	str	r3, [r4, #8]
 80a24fe:	4b05      	ldr	r3, [pc, #20]	; (80a2514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2500:	4608      	mov	r0, r1
 80a2502:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2504:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2506:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2508:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a250a:	4611      	mov	r1, r2
 80a250c:	f7ff f9d8 	bl	80a18c0 <HAL_USB_USART_Init>
}
 80a2510:	4620      	mov	r0, r4
 80a2512:	bd10      	pop	{r4, pc}
 80a2514:	080a3268 	.word	0x080a3268

080a2518 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2518:	7c00      	ldrb	r0, [r0, #16]
 80a251a:	f7ff ba01 	b.w	80a1920 <HAL_USB_USART_Is_Enabled>

080a251e <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a251e:	f7ff bffb 	b.w	80a2518 <_ZN9USBSerial9isEnabledEv>
	...

080a2524 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2524:	b510      	push	{r4, lr}
 80a2526:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2528:	2214      	movs	r2, #20
 80a252a:	2100      	movs	r1, #0
 80a252c:	f000 fcad 	bl	80a2e8a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2530:	4b05      	ldr	r3, [pc, #20]	; (80a2548 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2532:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2534:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2536:	4b05      	ldr	r3, [pc, #20]	; (80a254c <_Z19acquireSerialBufferv+0x28>)
 80a2538:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a253a:	f240 1301 	movw	r3, #257	; 0x101
 80a253e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2540:	2381      	movs	r3, #129	; 0x81
 80a2542:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2544:	bd10      	pop	{r4, pc}
 80a2546:	bf00      	nop
 80a2548:	200002c1 	.word	0x200002c1
 80a254c:	20000240 	.word	0x20000240

080a2550 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2550:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2552:	4d0e      	ldr	r5, [pc, #56]	; (80a258c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2554:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2556:	a801      	add	r0, sp, #4
 80a2558:	f7ff ffe4 	bl	80a2524 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a255c:	6829      	ldr	r1, [r5, #0]
 80a255e:	f011 0401 	ands.w	r4, r1, #1
 80a2562:	d110      	bne.n	80a2586 <_Z16_fetch_usbserialv+0x36>
 80a2564:	4628      	mov	r0, r5
 80a2566:	f7fd fd9c 	bl	80a00a2 <__cxa_guard_acquire>
 80a256a:	b160      	cbz	r0, 80a2586 <_Z16_fetch_usbserialv+0x36>
 80a256c:	aa01      	add	r2, sp, #4
 80a256e:	4621      	mov	r1, r4
 80a2570:	4807      	ldr	r0, [pc, #28]	; (80a2590 <_Z16_fetch_usbserialv+0x40>)
 80a2572:	f7ff ffbd 	bl	80a24f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2576:	4628      	mov	r0, r5
 80a2578:	f7fd fd98 	bl	80a00ac <__cxa_guard_release>
 80a257c:	4a05      	ldr	r2, [pc, #20]	; (80a2594 <_Z16_fetch_usbserialv+0x44>)
 80a257e:	4906      	ldr	r1, [pc, #24]	; (80a2598 <_Z16_fetch_usbserialv+0x48>)
 80a2580:	4803      	ldr	r0, [pc, #12]	; (80a2590 <_Z16_fetch_usbserialv+0x40>)
 80a2582:	f000 f9eb 	bl	80a295c <__aeabi_atexit>
	return _usbserial;
}
 80a2586:	4802      	ldr	r0, [pc, #8]	; (80a2590 <_Z16_fetch_usbserialv+0x40>)
 80a2588:	b007      	add	sp, #28
 80a258a:	bd30      	pop	{r4, r5, pc}
 80a258c:	2000023c 	.word	0x2000023c
 80a2590:	200003c4 	.word	0x200003c4
 80a2594:	2000006c 	.word	0x2000006c
 80a2598:	080a2471 	.word	0x080a2471

080a259c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a259c:	b510      	push	{r4, lr}
 80a259e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a25a0:	2214      	movs	r2, #20
 80a25a2:	2100      	movs	r1, #0
 80a25a4:	f000 fc71 	bl	80a2e8a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25a8:	4b05      	ldr	r3, [pc, #20]	; (80a25c0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a25aa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25ac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a25ae:	4b05      	ldr	r3, [pc, #20]	; (80a25c4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a25b0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25b2:	f240 1301 	movw	r3, #257	; 0x101
 80a25b6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25b8:	2381      	movs	r3, #129	; 0x81
 80a25ba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a25bc:	bd10      	pop	{r4, pc}
 80a25be:	bf00      	nop
 80a25c0:	20000474 	.word	0x20000474
 80a25c4:	200003dc 	.word	0x200003dc

080a25c8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a25c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25ca:	4c0e      	ldr	r4, [pc, #56]	; (80a2604 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a25cc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25ce:	a801      	add	r0, sp, #4
 80a25d0:	f7ff ffe4 	bl	80a259c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25d4:	6823      	ldr	r3, [r4, #0]
 80a25d6:	07db      	lsls	r3, r3, #31
 80a25d8:	d410      	bmi.n	80a25fc <_Z17_fetch_usbserial1v+0x34>
 80a25da:	4620      	mov	r0, r4
 80a25dc:	f7fd fd61 	bl	80a00a2 <__cxa_guard_acquire>
 80a25e0:	b160      	cbz	r0, 80a25fc <_Z17_fetch_usbserial1v+0x34>
 80a25e2:	aa01      	add	r2, sp, #4
 80a25e4:	2101      	movs	r1, #1
 80a25e6:	4808      	ldr	r0, [pc, #32]	; (80a2608 <_Z17_fetch_usbserial1v+0x40>)
 80a25e8:	f7ff ff82 	bl	80a24f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25ec:	4620      	mov	r0, r4
 80a25ee:	f7fd fd5d 	bl	80a00ac <__cxa_guard_release>
 80a25f2:	4a06      	ldr	r2, [pc, #24]	; (80a260c <_Z17_fetch_usbserial1v+0x44>)
 80a25f4:	4906      	ldr	r1, [pc, #24]	; (80a2610 <_Z17_fetch_usbserial1v+0x48>)
 80a25f6:	4804      	ldr	r0, [pc, #16]	; (80a2608 <_Z17_fetch_usbserial1v+0x40>)
 80a25f8:	f000 f9b0 	bl	80a295c <__aeabi_atexit>
  return _usbserial1;
}
 80a25fc:	4802      	ldr	r0, [pc, #8]	; (80a2608 <_Z17_fetch_usbserial1v+0x40>)
 80a25fe:	b006      	add	sp, #24
 80a2600:	bd10      	pop	{r4, pc}
 80a2602:	bf00      	nop
 80a2604:	200003d8 	.word	0x200003d8
 80a2608:	20000460 	.word	0x20000460
 80a260c:	2000006c 	.word	0x2000006c
 80a2610:	080a2471 	.word	0x080a2471

080a2614 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2614:	2200      	movs	r2, #0
 80a2616:	4611      	mov	r1, r2
 80a2618:	6840      	ldr	r0, [r0, #4]
 80a261a:	f7ff b9e5 	b.w	80a19e8 <network_ready>

080a261e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a261e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2620:	4616      	mov	r6, r2
 80a2622:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2624:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2626:	460f      	mov	r7, r1
 80a2628:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a262a:	2100      	movs	r1, #0
 80a262c:	a803      	add	r0, sp, #12
 80a262e:	f000 fc2c 	bl	80a2e8a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2632:	4630      	mov	r0, r6
 80a2634:	f000 fc94 	bl	80a2f60 <strlen>
 80a2638:	2500      	movs	r5, #0
 80a263a:	9500      	str	r5, [sp, #0]
 80a263c:	b281      	uxth	r1, r0
 80a263e:	687b      	ldr	r3, [r7, #4]
 80a2640:	aa03      	add	r2, sp, #12
 80a2642:	4630      	mov	r0, r6
 80a2644:	f7ff f974 	bl	80a1930 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2648:	b120      	cbz	r0, 80a2654 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a264a:	4629      	mov	r1, r5
 80a264c:	4620      	mov	r0, r4
 80a264e:	f7ff fab3 	bl	80a1bb8 <_ZN9IPAddressC1Em>
 80a2652:	e003      	b.n	80a265c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2654:	a903      	add	r1, sp, #12
 80a2656:	4620      	mov	r0, r4
 80a2658:	f7ff fa9c 	bl	80a1b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a265c:	4620      	mov	r0, r4
 80a265e:	b009      	add	sp, #36	; 0x24
 80a2660:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2662 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2662:	2200      	movs	r2, #0
 80a2664:	4611      	mov	r1, r2
 80a2666:	6840      	ldr	r0, [r0, #4]
 80a2668:	f7ff b9de 	b.w	80a1a28 <network_listening>

080a266c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a266c:	2200      	movs	r2, #0
 80a266e:	4611      	mov	r1, r2
 80a2670:	6840      	ldr	r0, [r0, #4]
 80a2672:	f7ff b9e9 	b.w	80a1a48 <network_get_listen_timeout>

080a2676 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2676:	2200      	movs	r2, #0
 80a2678:	6840      	ldr	r0, [r0, #4]
 80a267a:	f7ff b9dd 	b.w	80a1a38 <network_set_listen_timeout>

080a267e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a267e:	2200      	movs	r2, #0
 80a2680:	f081 0101 	eor.w	r1, r1, #1
 80a2684:	6840      	ldr	r0, [r0, #4]
 80a2686:	f7ff b9c7 	b.w	80a1a18 <network_listen>

080a268a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a268a:	2300      	movs	r3, #0
 80a268c:	461a      	mov	r2, r3
 80a268e:	4619      	mov	r1, r3
 80a2690:	6840      	ldr	r0, [r0, #4]
 80a2692:	f7ff b9b9 	b.w	80a1a08 <network_off>

080a2696 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2696:	2300      	movs	r3, #0
 80a2698:	461a      	mov	r2, r3
 80a269a:	4619      	mov	r1, r3
 80a269c:	6840      	ldr	r0, [r0, #4]
 80a269e:	f7ff b9ab 	b.w	80a19f8 <network_on>

080a26a2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a26a2:	2200      	movs	r2, #0
 80a26a4:	4611      	mov	r1, r2
 80a26a6:	6840      	ldr	r0, [r0, #4]
 80a26a8:	f7ff b98e 	b.w	80a19c8 <network_connecting>

080a26ac <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a26ac:	2200      	movs	r2, #0
 80a26ae:	2102      	movs	r1, #2
 80a26b0:	6840      	ldr	r0, [r0, #4]
 80a26b2:	f7ff b991 	b.w	80a19d8 <network_disconnect>

080a26b6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a26b6:	2300      	movs	r3, #0
 80a26b8:	461a      	mov	r2, r3
 80a26ba:	6840      	ldr	r0, [r0, #4]
 80a26bc:	f7ff b97c 	b.w	80a19b8 <network_connect>

080a26c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a26c0:	4b02      	ldr	r3, [pc, #8]	; (80a26cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a26c2:	2204      	movs	r2, #4
 80a26c4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a26c6:	4a02      	ldr	r2, [pc, #8]	; (80a26d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a26c8:	601a      	str	r2, [r3, #0]
 80a26ca:	4770      	bx	lr
 80a26cc:	20000578 	.word	0x20000578
 80a26d0:	080a3298 	.word	0x080a3298

080a26d4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a26d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a26d6:	4b14      	ldr	r3, [pc, #80]	; (80a2728 <serialEventRun+0x54>)
 80a26d8:	b133      	cbz	r3, 80a26e8 <serialEventRun+0x14>
 80a26da:	f7ff ff39 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a26de:	6803      	ldr	r3, [r0, #0]
 80a26e0:	691b      	ldr	r3, [r3, #16]
 80a26e2:	4798      	blx	r3
 80a26e4:	2800      	cmp	r0, #0
 80a26e6:	dc16      	bgt.n	80a2716 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a26e8:	4b10      	ldr	r3, [pc, #64]	; (80a272c <serialEventRun+0x58>)
 80a26ea:	b133      	cbz	r3, 80a26fa <serialEventRun+0x26>
 80a26ec:	f7ff fe98 	bl	80a2420 <_Z22__fetch_global_Serial1v>
 80a26f0:	6803      	ldr	r3, [r0, #0]
 80a26f2:	691b      	ldr	r3, [r3, #16]
 80a26f4:	4798      	blx	r3
 80a26f6:	2800      	cmp	r0, #0
 80a26f8:	dc10      	bgt.n	80a271c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a26fa:	4b0d      	ldr	r3, [pc, #52]	; (80a2730 <serialEventRun+0x5c>)
 80a26fc:	b10b      	cbz	r3, 80a2702 <serialEventRun+0x2e>
 80a26fe:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2702:	4b0c      	ldr	r3, [pc, #48]	; (80a2734 <serialEventRun+0x60>)
 80a2704:	b17b      	cbz	r3, 80a2726 <serialEventRun+0x52>
 80a2706:	f7ff ff5f 	bl	80a25c8 <_Z17_fetch_usbserial1v>
 80a270a:	6803      	ldr	r3, [r0, #0]
 80a270c:	691b      	ldr	r3, [r3, #16]
 80a270e:	4798      	blx	r3
 80a2710:	2800      	cmp	r0, #0
 80a2712:	dc06      	bgt.n	80a2722 <serialEventRun+0x4e>
 80a2714:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2716:	f3af 8000 	nop.w
 80a271a:	e7e5      	b.n	80a26e8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a271c:	f3af 8000 	nop.w
 80a2720:	e7eb      	b.n	80a26fa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2722:	f3af 8000 	nop.w
 80a2726:	bd08      	pop	{r3, pc}
	...

080a2738 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2738:	b508      	push	{r3, lr}
	serialEventRun();
 80a273a:	f7ff ffcb 	bl	80a26d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a273e:	f7fe ffdd 	bl	80a16fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2742:	4b01      	ldr	r3, [pc, #4]	; (80a2748 <_post_loop+0x10>)
 80a2744:	6018      	str	r0, [r3, #0]
 80a2746:	bd08      	pop	{r3, pc}
 80a2748:	20000588 	.word	0x20000588

080a274c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a274c:	4802      	ldr	r0, [pc, #8]	; (80a2758 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a274e:	4a03      	ldr	r2, [pc, #12]	; (80a275c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2750:	4903      	ldr	r1, [pc, #12]	; (80a2760 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2752:	1a12      	subs	r2, r2, r0
 80a2754:	f000 bb8e 	b.w	80a2e74 <memcpy>
 80a2758:	40024000 	.word	0x40024000
 80a275c:	40024004 	.word	0x40024004
 80a2760:	080a3360 	.word	0x080a3360

080a2764 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2764:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2766:	2300      	movs	r3, #0
 80a2768:	9300      	str	r3, [sp, #0]
 80a276a:	461a      	mov	r2, r3
 80a276c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2770:	f7ff f908 	bl	80a1984 <system_ctrl_set_result>
}
 80a2774:	b003      	add	sp, #12
 80a2776:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a277c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a277c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a277e:	8843      	ldrh	r3, [r0, #2]
 80a2780:	2b0a      	cmp	r3, #10
 80a2782:	d008      	beq.n	80a2796 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2784:	2b50      	cmp	r3, #80	; 0x50
 80a2786:	d109      	bne.n	80a279c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2788:	4b09      	ldr	r3, [pc, #36]	; (80a27b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a278a:	681b      	ldr	r3, [r3, #0]
 80a278c:	b13b      	cbz	r3, 80a279e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a278e:	b003      	add	sp, #12
 80a2790:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2794:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2796:	f7ff ffe5 	bl	80a2764 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a279a:	e006      	b.n	80a27aa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a279c:	2300      	movs	r3, #0
 80a279e:	9300      	str	r3, [sp, #0]
 80a27a0:	461a      	mov	r2, r3
 80a27a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a27a6:	f7ff f8ed 	bl	80a1984 <system_ctrl_set_result>
        break;
    }
}
 80a27aa:	b003      	add	sp, #12
 80a27ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80a27b0:	20000580 	.word	0x20000580

080a27b4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a27b4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a27b6:	4c10      	ldr	r4, [pc, #64]	; (80a27f8 <module_user_init_hook+0x44>)
 80a27b8:	4d10      	ldr	r5, [pc, #64]	; (80a27fc <module_user_init_hook+0x48>)
 80a27ba:	6823      	ldr	r3, [r4, #0]
 80a27bc:	42ab      	cmp	r3, r5
 80a27be:	4b10      	ldr	r3, [pc, #64]	; (80a2800 <module_user_init_hook+0x4c>)
 80a27c0:	bf0c      	ite	eq
 80a27c2:	2201      	moveq	r2, #1
 80a27c4:	2200      	movne	r2, #0
 80a27c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a27c8:	d002      	beq.n	80a27d0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a27ca:	f7ff ffbf 	bl	80a274c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a27ce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a27d0:	f7fe ff84 	bl	80a16dc <HAL_RNG_GetRandomNumber>
 80a27d4:	4604      	mov	r4, r0
    srand(seed);
 80a27d6:	f000 fb61 	bl	80a2e9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a27da:	4b0a      	ldr	r3, [pc, #40]	; (80a2804 <module_user_init_hook+0x50>)
 80a27dc:	b113      	cbz	r3, 80a27e4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a27de:	4620      	mov	r0, r4
 80a27e0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a27e4:	2100      	movs	r1, #0
 80a27e6:	4807      	ldr	r0, [pc, #28]	; (80a2804 <module_user_init_hook+0x50>)
 80a27e8:	f7ff f8d6 	bl	80a1998 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a27ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a27f0:	2100      	movs	r1, #0
 80a27f2:	4805      	ldr	r0, [pc, #20]	; (80a2808 <module_user_init_hook+0x54>)
 80a27f4:	f7ff b8bc 	b.w	80a1970 <system_ctrl_set_app_request_handler>
 80a27f8:	40024000 	.word	0x40024000
 80a27fc:	9a271c1e 	.word	0x9a271c1e
 80a2800:	20000584 	.word	0x20000584
 80a2804:	00000000 	.word	0x00000000
 80a2808:	080a277d 	.word	0x080a277d

080a280c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a280c:	b510      	push	{r4, lr}
 80a280e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2810:	480f      	ldr	r0, [pc, #60]	; (80a2850 <pinAvailable+0x44>)
 80a2812:	f7ff fb33 	bl	80a1e7c <_ZN8SPIClass9isEnabledEv>
 80a2816:	b128      	cbz	r0, 80a2824 <pinAvailable+0x18>
 80a2818:	f1a4 030d 	sub.w	r3, r4, #13
 80a281c:	2b02      	cmp	r3, #2
 80a281e:	d801      	bhi.n	80a2824 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2820:	2000      	movs	r0, #0
 80a2822:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2824:	f000 f840 	bl	80a28a8 <_Z19__fetch_global_Wirev>
 80a2828:	f7ff f988 	bl	80a1b3c <_ZN7TwoWire9isEnabledEv>
 80a282c:	b108      	cbz	r0, 80a2832 <pinAvailable+0x26>
 80a282e:	2c01      	cmp	r4, #1
 80a2830:	d9f6      	bls.n	80a2820 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2832:	f7ff fdf5 	bl	80a2420 <_Z22__fetch_global_Serial1v>
 80a2836:	f7ff fdef 	bl	80a2418 <_ZN11USARTSerial9isEnabledEv>
 80a283a:	b118      	cbz	r0, 80a2844 <pinAvailable+0x38>
 80a283c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2840:	2b01      	cmp	r3, #1
 80a2842:	d9ed      	bls.n	80a2820 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2844:	2c17      	cmp	r4, #23
 80a2846:	bf8c      	ite	hi
 80a2848:	2000      	movhi	r0, #0
 80a284a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a284c:	bd10      	pop	{r4, pc}
 80a284e:	bf00      	nop
 80a2850:	200005bc 	.word	0x200005bc

080a2854 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2854:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2856:	b538      	push	{r3, r4, r5, lr}
 80a2858:	4604      	mov	r4, r0
 80a285a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a285c:	d80a      	bhi.n	80a2874 <pinMode+0x20>
 80a285e:	29ff      	cmp	r1, #255	; 0xff
 80a2860:	d008      	beq.n	80a2874 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2862:	f7ff ffd3 	bl	80a280c <pinAvailable>
 80a2866:	b128      	cbz	r0, 80a2874 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2868:	4629      	mov	r1, r5
 80a286a:	4620      	mov	r0, r4
}
 80a286c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2870:	f7fe bf54 	b.w	80a171c <HAL_Pin_Mode>
 80a2874:	bd38      	pop	{r3, r4, r5, pc}

080a2876 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2876:	b538      	push	{r3, r4, r5, lr}
 80a2878:	4604      	mov	r4, r0
 80a287a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a287c:	f7fe ff56 	bl	80a172c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2880:	28ff      	cmp	r0, #255	; 0xff
 80a2882:	d010      	beq.n	80a28a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2884:	2806      	cmp	r0, #6
 80a2886:	d804      	bhi.n	80a2892 <digitalWrite+0x1c>
 80a2888:	234d      	movs	r3, #77	; 0x4d
 80a288a:	fa23 f000 	lsr.w	r0, r3, r0
 80a288e:	07c3      	lsls	r3, r0, #31
 80a2890:	d409      	bmi.n	80a28a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2892:	4620      	mov	r0, r4
 80a2894:	f7ff ffba 	bl	80a280c <pinAvailable>
 80a2898:	b128      	cbz	r0, 80a28a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a289a:	4629      	mov	r1, r5
 80a289c:	4620      	mov	r0, r4
}
 80a289e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a28a2:	f7fe bf4b 	b.w	80a173c <HAL_GPIO_Write>
 80a28a6:	bd38      	pop	{r3, r4, r5, pc}

080a28a8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a28a8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a28aa:	4d0b      	ldr	r5, [pc, #44]	; (80a28d8 <_Z19__fetch_global_Wirev+0x30>)
 80a28ac:	6829      	ldr	r1, [r5, #0]
 80a28ae:	f011 0401 	ands.w	r4, r1, #1
 80a28b2:	d10f      	bne.n	80a28d4 <_Z19__fetch_global_Wirev+0x2c>
 80a28b4:	4628      	mov	r0, r5
 80a28b6:	f7fd fbf4 	bl	80a00a2 <__cxa_guard_acquire>
 80a28ba:	b158      	cbz	r0, 80a28d4 <_Z19__fetch_global_Wirev+0x2c>
 80a28bc:	4621      	mov	r1, r4
 80a28be:	4807      	ldr	r0, [pc, #28]	; (80a28dc <_Z19__fetch_global_Wirev+0x34>)
 80a28c0:	f7ff f92a 	bl	80a1b18 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a28c4:	4628      	mov	r0, r5
 80a28c6:	f7fd fbf1 	bl	80a00ac <__cxa_guard_release>
 80a28ca:	4a05      	ldr	r2, [pc, #20]	; (80a28e0 <_Z19__fetch_global_Wirev+0x38>)
 80a28cc:	4905      	ldr	r1, [pc, #20]	; (80a28e4 <_Z19__fetch_global_Wirev+0x3c>)
 80a28ce:	4803      	ldr	r0, [pc, #12]	; (80a28dc <_Z19__fetch_global_Wirev+0x34>)
 80a28d0:	f000 f844 	bl	80a295c <__aeabi_atexit>
	return wire;
}
 80a28d4:	4801      	ldr	r0, [pc, #4]	; (80a28dc <_Z19__fetch_global_Wirev+0x34>)
 80a28d6:	bd38      	pop	{r3, r4, r5, pc}
 80a28d8:	2000058c 	.word	0x2000058c
 80a28dc:	20000590 	.word	0x20000590
 80a28e0:	2000006c 	.word	0x2000006c
 80a28e4:	080a1ac1 	.word	0x080a1ac1

080a28e8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a28e8:	b513      	push	{r0, r1, r4, lr}
 80a28ea:	4c08      	ldr	r4, [pc, #32]	; (80a290c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a28ec:	2300      	movs	r3, #0
 80a28ee:	461a      	mov	r2, r3
 80a28f0:	4619      	mov	r1, r3
 80a28f2:	9300      	str	r3, [sp, #0]
 80a28f4:	4620      	mov	r0, r4
 80a28f6:	f7ff f975 	bl	80a1be4 <_ZN9IPAddressC1Ehhhh>
 80a28fa:	4620      	mov	r0, r4
 80a28fc:	4a04      	ldr	r2, [pc, #16]	; (80a2910 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a28fe:	4905      	ldr	r1, [pc, #20]	; (80a2914 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2900:	b002      	add	sp, #8
 80a2902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2906:	f000 b829 	b.w	80a295c <__aeabi_atexit>
 80a290a:	bf00      	nop
 80a290c:	200005a4 	.word	0x200005a4
 80a2910:	2000006c 	.word	0x2000006c
 80a2914:	080a00b3 	.word	0x080a00b3

080a2918 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2918:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a291a:	4c0c      	ldr	r4, [pc, #48]	; (80a294c <_GLOBAL__sub_I_SPI+0x34>)
 80a291c:	4e0c      	ldr	r6, [pc, #48]	; (80a2950 <_GLOBAL__sub_I_SPI+0x38>)
 80a291e:	4d0d      	ldr	r5, [pc, #52]	; (80a2954 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2920:	2100      	movs	r1, #0
 80a2922:	4620      	mov	r0, r4
 80a2924:	f7ff fa96 	bl	80a1e54 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2928:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a292a:	4c0b      	ldr	r4, [pc, #44]	; (80a2958 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a292c:	4632      	mov	r2, r6
 80a292e:	4629      	mov	r1, r5
 80a2930:	f000 f814 	bl	80a295c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2934:	2101      	movs	r1, #1
 80a2936:	4620      	mov	r0, r4
 80a2938:	f7ff fa8c 	bl	80a1e54 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a293c:	4632      	mov	r2, r6
 80a293e:	4629      	mov	r1, r5
 80a2940:	4620      	mov	r0, r4
 80a2942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2946:	f000 b809 	b.w	80a295c <__aeabi_atexit>
 80a294a:	bf00      	nop
 80a294c:	200005bc 	.word	0x200005bc
 80a2950:	2000006c 	.word	0x2000006c
 80a2954:	080a1e45 	.word	0x080a1e45
 80a2958:	200005cc 	.word	0x200005cc

080a295c <__aeabi_atexit>:
 80a295c:	460b      	mov	r3, r1
 80a295e:	4601      	mov	r1, r0
 80a2960:	4618      	mov	r0, r3
 80a2962:	f000 ba79 	b.w	80a2e58 <__cxa_atexit>

080a2966 <_ZdlPvj>:
 80a2966:	f7fd bb9a 	b.w	80a009e <_ZdlPv>
	...

080a296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a296c:	4b24      	ldr	r3, [pc, #144]	; (80a2a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a296e:	681a      	ldr	r2, [r3, #0]
 80a2970:	07d0      	lsls	r0, r2, #31
 80a2972:	bf5c      	itt	pl
 80a2974:	2201      	movpl	r2, #1
 80a2976:	601a      	strpl	r2, [r3, #0]
 80a2978:	4b22      	ldr	r3, [pc, #136]	; (80a2a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a297a:	681a      	ldr	r2, [r3, #0]
 80a297c:	07d1      	lsls	r1, r2, #31
 80a297e:	bf5c      	itt	pl
 80a2980:	2201      	movpl	r2, #1
 80a2982:	601a      	strpl	r2, [r3, #0]
 80a2984:	4b20      	ldr	r3, [pc, #128]	; (80a2a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2986:	681a      	ldr	r2, [r3, #0]
 80a2988:	07d2      	lsls	r2, r2, #31
 80a298a:	bf5c      	itt	pl
 80a298c:	2201      	movpl	r2, #1
 80a298e:	601a      	strpl	r2, [r3, #0]
 80a2990:	4b1e      	ldr	r3, [pc, #120]	; (80a2a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2992:	681a      	ldr	r2, [r3, #0]
 80a2994:	07d0      	lsls	r0, r2, #31
 80a2996:	bf5c      	itt	pl
 80a2998:	2201      	movpl	r2, #1
 80a299a:	601a      	strpl	r2, [r3, #0]
 80a299c:	4b1c      	ldr	r3, [pc, #112]	; (80a2a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a299e:	681a      	ldr	r2, [r3, #0]
 80a29a0:	07d1      	lsls	r1, r2, #31
 80a29a2:	bf5c      	itt	pl
 80a29a4:	2201      	movpl	r2, #1
 80a29a6:	601a      	strpl	r2, [r3, #0]
 80a29a8:	4b1a      	ldr	r3, [pc, #104]	; (80a2a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a29aa:	681a      	ldr	r2, [r3, #0]
 80a29ac:	07d2      	lsls	r2, r2, #31
 80a29ae:	bf5c      	itt	pl
 80a29b0:	2201      	movpl	r2, #1
 80a29b2:	601a      	strpl	r2, [r3, #0]
 80a29b4:	4b18      	ldr	r3, [pc, #96]	; (80a2a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a29b6:	681a      	ldr	r2, [r3, #0]
 80a29b8:	07d0      	lsls	r0, r2, #31
 80a29ba:	bf5c      	itt	pl
 80a29bc:	2201      	movpl	r2, #1
 80a29be:	601a      	strpl	r2, [r3, #0]
 80a29c0:	4b16      	ldr	r3, [pc, #88]	; (80a2a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a29c2:	681a      	ldr	r2, [r3, #0]
 80a29c4:	07d1      	lsls	r1, r2, #31
 80a29c6:	bf5c      	itt	pl
 80a29c8:	2201      	movpl	r2, #1
 80a29ca:	601a      	strpl	r2, [r3, #0]
 80a29cc:	4b14      	ldr	r3, [pc, #80]	; (80a2a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a29ce:	681a      	ldr	r2, [r3, #0]
 80a29d0:	07d2      	lsls	r2, r2, #31
 80a29d2:	bf5c      	itt	pl
 80a29d4:	2201      	movpl	r2, #1
 80a29d6:	601a      	strpl	r2, [r3, #0]
 80a29d8:	4b12      	ldr	r3, [pc, #72]	; (80a2a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a29da:	681a      	ldr	r2, [r3, #0]
 80a29dc:	07d0      	lsls	r0, r2, #31
 80a29de:	bf5c      	itt	pl
 80a29e0:	2201      	movpl	r2, #1
 80a29e2:	601a      	strpl	r2, [r3, #0]
 80a29e4:	4b10      	ldr	r3, [pc, #64]	; (80a2a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a29e6:	681a      	ldr	r2, [r3, #0]
 80a29e8:	07d1      	lsls	r1, r2, #31
 80a29ea:	bf5c      	itt	pl
 80a29ec:	2201      	movpl	r2, #1
 80a29ee:	601a      	strpl	r2, [r3, #0]
 80a29f0:	4b0e      	ldr	r3, [pc, #56]	; (80a2a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a29f2:	681a      	ldr	r2, [r3, #0]
 80a29f4:	07d2      	lsls	r2, r2, #31
 80a29f6:	bf5c      	itt	pl
 80a29f8:	2201      	movpl	r2, #1
 80a29fa:	601a      	strpl	r2, [r3, #0]
 80a29fc:	4770      	bx	lr
 80a29fe:	bf00      	nop
 80a2a00:	20000608 	.word	0x20000608
 80a2a04:	20000604 	.word	0x20000604
 80a2a08:	20000600 	.word	0x20000600
 80a2a0c:	200005fc 	.word	0x200005fc
 80a2a10:	200005f8 	.word	0x200005f8
 80a2a14:	200005f4 	.word	0x200005f4
 80a2a18:	200005f0 	.word	0x200005f0
 80a2a1c:	200005ec 	.word	0x200005ec
 80a2a20:	200005e8 	.word	0x200005e8
 80a2a24:	200005e4 	.word	0x200005e4
 80a2a28:	200005e0 	.word	0x200005e0
 80a2a2c:	200005dc 	.word	0x200005dc

080a2a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2a30:	4b18      	ldr	r3, [pc, #96]	; (80a2a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2a32:	681a      	ldr	r2, [r3, #0]
 80a2a34:	07d1      	lsls	r1, r2, #31
 80a2a36:	bf5c      	itt	pl
 80a2a38:	2201      	movpl	r2, #1
 80a2a3a:	601a      	strpl	r2, [r3, #0]
 80a2a3c:	4b16      	ldr	r3, [pc, #88]	; (80a2a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2a3e:	681a      	ldr	r2, [r3, #0]
 80a2a40:	07d2      	lsls	r2, r2, #31
 80a2a42:	bf5c      	itt	pl
 80a2a44:	2201      	movpl	r2, #1
 80a2a46:	601a      	strpl	r2, [r3, #0]
 80a2a48:	4b14      	ldr	r3, [pc, #80]	; (80a2a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2a4a:	681a      	ldr	r2, [r3, #0]
 80a2a4c:	07d0      	lsls	r0, r2, #31
 80a2a4e:	bf5c      	itt	pl
 80a2a50:	2201      	movpl	r2, #1
 80a2a52:	601a      	strpl	r2, [r3, #0]
 80a2a54:	4b12      	ldr	r3, [pc, #72]	; (80a2aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2a56:	681a      	ldr	r2, [r3, #0]
 80a2a58:	07d1      	lsls	r1, r2, #31
 80a2a5a:	bf5c      	itt	pl
 80a2a5c:	2201      	movpl	r2, #1
 80a2a5e:	601a      	strpl	r2, [r3, #0]
 80a2a60:	4b10      	ldr	r3, [pc, #64]	; (80a2aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2a62:	681a      	ldr	r2, [r3, #0]
 80a2a64:	07d2      	lsls	r2, r2, #31
 80a2a66:	bf5c      	itt	pl
 80a2a68:	2201      	movpl	r2, #1
 80a2a6a:	601a      	strpl	r2, [r3, #0]
 80a2a6c:	4b0e      	ldr	r3, [pc, #56]	; (80a2aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2a6e:	681a      	ldr	r2, [r3, #0]
 80a2a70:	07d0      	lsls	r0, r2, #31
 80a2a72:	bf5c      	itt	pl
 80a2a74:	2201      	movpl	r2, #1
 80a2a76:	601a      	strpl	r2, [r3, #0]
 80a2a78:	4b0c      	ldr	r3, [pc, #48]	; (80a2aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a7a:	681a      	ldr	r2, [r3, #0]
 80a2a7c:	07d1      	lsls	r1, r2, #31
 80a2a7e:	bf5c      	itt	pl
 80a2a80:	2201      	movpl	r2, #1
 80a2a82:	601a      	strpl	r2, [r3, #0]
 80a2a84:	4b0a      	ldr	r3, [pc, #40]	; (80a2ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2a86:	681a      	ldr	r2, [r3, #0]
 80a2a88:	07d2      	lsls	r2, r2, #31
 80a2a8a:	bf5c      	itt	pl
 80a2a8c:	2201      	movpl	r2, #1
 80a2a8e:	601a      	strpl	r2, [r3, #0]
 80a2a90:	4770      	bx	lr
 80a2a92:	bf00      	nop
 80a2a94:	20000628 	.word	0x20000628
 80a2a98:	20000624 	.word	0x20000624
 80a2a9c:	20000620 	.word	0x20000620
 80a2aa0:	2000061c 	.word	0x2000061c
 80a2aa4:	20000618 	.word	0x20000618
 80a2aa8:	20000614 	.word	0x20000614
 80a2aac:	20000610 	.word	0x20000610
 80a2ab0:	2000060c 	.word	0x2000060c

080a2ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2ab4:	4b18      	ldr	r3, [pc, #96]	; (80a2b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2ab6:	681a      	ldr	r2, [r3, #0]
 80a2ab8:	07d1      	lsls	r1, r2, #31
 80a2aba:	bf5c      	itt	pl
 80a2abc:	2201      	movpl	r2, #1
 80a2abe:	601a      	strpl	r2, [r3, #0]
 80a2ac0:	4b16      	ldr	r3, [pc, #88]	; (80a2b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2ac2:	681a      	ldr	r2, [r3, #0]
 80a2ac4:	07d2      	lsls	r2, r2, #31
 80a2ac6:	bf5c      	itt	pl
 80a2ac8:	2201      	movpl	r2, #1
 80a2aca:	601a      	strpl	r2, [r3, #0]
 80a2acc:	4b14      	ldr	r3, [pc, #80]	; (80a2b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2ace:	681a      	ldr	r2, [r3, #0]
 80a2ad0:	07d0      	lsls	r0, r2, #31
 80a2ad2:	bf5c      	itt	pl
 80a2ad4:	2201      	movpl	r2, #1
 80a2ad6:	601a      	strpl	r2, [r3, #0]
 80a2ad8:	4b12      	ldr	r3, [pc, #72]	; (80a2b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ada:	681a      	ldr	r2, [r3, #0]
 80a2adc:	07d1      	lsls	r1, r2, #31
 80a2ade:	bf5c      	itt	pl
 80a2ae0:	2201      	movpl	r2, #1
 80a2ae2:	601a      	strpl	r2, [r3, #0]
 80a2ae4:	4b10      	ldr	r3, [pc, #64]	; (80a2b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ae6:	681a      	ldr	r2, [r3, #0]
 80a2ae8:	07d2      	lsls	r2, r2, #31
 80a2aea:	bf5c      	itt	pl
 80a2aec:	2201      	movpl	r2, #1
 80a2aee:	601a      	strpl	r2, [r3, #0]
 80a2af0:	4b0e      	ldr	r3, [pc, #56]	; (80a2b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2af2:	681a      	ldr	r2, [r3, #0]
 80a2af4:	07d0      	lsls	r0, r2, #31
 80a2af6:	bf5c      	itt	pl
 80a2af8:	2201      	movpl	r2, #1
 80a2afa:	601a      	strpl	r2, [r3, #0]
 80a2afc:	4b0c      	ldr	r3, [pc, #48]	; (80a2b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2afe:	681a      	ldr	r2, [r3, #0]
 80a2b00:	07d1      	lsls	r1, r2, #31
 80a2b02:	bf5c      	itt	pl
 80a2b04:	2201      	movpl	r2, #1
 80a2b06:	601a      	strpl	r2, [r3, #0]
 80a2b08:	4b0a      	ldr	r3, [pc, #40]	; (80a2b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2b0a:	681a      	ldr	r2, [r3, #0]
 80a2b0c:	07d2      	lsls	r2, r2, #31
 80a2b0e:	bf5c      	itt	pl
 80a2b10:	2201      	movpl	r2, #1
 80a2b12:	601a      	strpl	r2, [r3, #0]
 80a2b14:	4770      	bx	lr
 80a2b16:	bf00      	nop
 80a2b18:	20000648 	.word	0x20000648
 80a2b1c:	20000644 	.word	0x20000644
 80a2b20:	20000640 	.word	0x20000640
 80a2b24:	2000063c 	.word	0x2000063c
 80a2b28:	20000638 	.word	0x20000638
 80a2b2c:	20000634 	.word	0x20000634
 80a2b30:	20000630 	.word	0x20000630
 80a2b34:	2000062c 	.word	0x2000062c

080a2b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2b38:	4b24      	ldr	r3, [pc, #144]	; (80a2bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2b3a:	681a      	ldr	r2, [r3, #0]
 80a2b3c:	07d0      	lsls	r0, r2, #31
 80a2b3e:	bf5c      	itt	pl
 80a2b40:	2201      	movpl	r2, #1
 80a2b42:	601a      	strpl	r2, [r3, #0]
 80a2b44:	4b22      	ldr	r3, [pc, #136]	; (80a2bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2b46:	681a      	ldr	r2, [r3, #0]
 80a2b48:	07d1      	lsls	r1, r2, #31
 80a2b4a:	bf5c      	itt	pl
 80a2b4c:	2201      	movpl	r2, #1
 80a2b4e:	601a      	strpl	r2, [r3, #0]
 80a2b50:	4b20      	ldr	r3, [pc, #128]	; (80a2bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2b52:	681a      	ldr	r2, [r3, #0]
 80a2b54:	07d2      	lsls	r2, r2, #31
 80a2b56:	bf5c      	itt	pl
 80a2b58:	2201      	movpl	r2, #1
 80a2b5a:	601a      	strpl	r2, [r3, #0]
 80a2b5c:	4b1e      	ldr	r3, [pc, #120]	; (80a2bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2b5e:	681a      	ldr	r2, [r3, #0]
 80a2b60:	07d0      	lsls	r0, r2, #31
 80a2b62:	bf5c      	itt	pl
 80a2b64:	2201      	movpl	r2, #1
 80a2b66:	601a      	strpl	r2, [r3, #0]
 80a2b68:	4b1c      	ldr	r3, [pc, #112]	; (80a2bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2b6a:	681a      	ldr	r2, [r3, #0]
 80a2b6c:	07d1      	lsls	r1, r2, #31
 80a2b6e:	bf5c      	itt	pl
 80a2b70:	2201      	movpl	r2, #1
 80a2b72:	601a      	strpl	r2, [r3, #0]
 80a2b74:	4b1a      	ldr	r3, [pc, #104]	; (80a2be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2b76:	681a      	ldr	r2, [r3, #0]
 80a2b78:	07d2      	lsls	r2, r2, #31
 80a2b7a:	bf5c      	itt	pl
 80a2b7c:	2201      	movpl	r2, #1
 80a2b7e:	601a      	strpl	r2, [r3, #0]
 80a2b80:	4b18      	ldr	r3, [pc, #96]	; (80a2be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2b82:	681a      	ldr	r2, [r3, #0]
 80a2b84:	07d0      	lsls	r0, r2, #31
 80a2b86:	bf5c      	itt	pl
 80a2b88:	2201      	movpl	r2, #1
 80a2b8a:	601a      	strpl	r2, [r3, #0]
 80a2b8c:	4b16      	ldr	r3, [pc, #88]	; (80a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2b8e:	681a      	ldr	r2, [r3, #0]
 80a2b90:	07d1      	lsls	r1, r2, #31
 80a2b92:	bf5c      	itt	pl
 80a2b94:	2201      	movpl	r2, #1
 80a2b96:	601a      	strpl	r2, [r3, #0]
 80a2b98:	4b14      	ldr	r3, [pc, #80]	; (80a2bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2b9a:	681a      	ldr	r2, [r3, #0]
 80a2b9c:	07d2      	lsls	r2, r2, #31
 80a2b9e:	bf5c      	itt	pl
 80a2ba0:	2201      	movpl	r2, #1
 80a2ba2:	601a      	strpl	r2, [r3, #0]
 80a2ba4:	4b12      	ldr	r3, [pc, #72]	; (80a2bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2ba6:	681a      	ldr	r2, [r3, #0]
 80a2ba8:	07d0      	lsls	r0, r2, #31
 80a2baa:	bf5c      	itt	pl
 80a2bac:	2201      	movpl	r2, #1
 80a2bae:	601a      	strpl	r2, [r3, #0]
 80a2bb0:	4b10      	ldr	r3, [pc, #64]	; (80a2bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2bb2:	681a      	ldr	r2, [r3, #0]
 80a2bb4:	07d1      	lsls	r1, r2, #31
 80a2bb6:	bf5c      	itt	pl
 80a2bb8:	2201      	movpl	r2, #1
 80a2bba:	601a      	strpl	r2, [r3, #0]
 80a2bbc:	4b0e      	ldr	r3, [pc, #56]	; (80a2bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2bbe:	681a      	ldr	r2, [r3, #0]
 80a2bc0:	07d2      	lsls	r2, r2, #31
 80a2bc2:	bf5c      	itt	pl
 80a2bc4:	2201      	movpl	r2, #1
 80a2bc6:	601a      	strpl	r2, [r3, #0]
 80a2bc8:	4770      	bx	lr
 80a2bca:	bf00      	nop
 80a2bcc:	20000678 	.word	0x20000678
 80a2bd0:	20000674 	.word	0x20000674
 80a2bd4:	20000670 	.word	0x20000670
 80a2bd8:	2000066c 	.word	0x2000066c
 80a2bdc:	20000668 	.word	0x20000668
 80a2be0:	20000664 	.word	0x20000664
 80a2be4:	20000660 	.word	0x20000660
 80a2be8:	2000065c 	.word	0x2000065c
 80a2bec:	20000658 	.word	0x20000658
 80a2bf0:	20000654 	.word	0x20000654
 80a2bf4:	20000650 	.word	0x20000650
 80a2bf8:	2000064c 	.word	0x2000064c

080a2bfc <__aeabi_frsub>:
 80a2bfc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2c00:	e002      	b.n	80a2c08 <__addsf3>
 80a2c02:	bf00      	nop

080a2c04 <__aeabi_fsub>:
 80a2c04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2c08 <__addsf3>:
 80a2c08:	0042      	lsls	r2, r0, #1
 80a2c0a:	bf1f      	itttt	ne
 80a2c0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2c10:	ea92 0f03 	teqne	r2, r3
 80a2c14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2c18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2c1c:	d06a      	beq.n	80a2cf4 <__addsf3+0xec>
 80a2c1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2c22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2c26:	bfc1      	itttt	gt
 80a2c28:	18d2      	addgt	r2, r2, r3
 80a2c2a:	4041      	eorgt	r1, r0
 80a2c2c:	4048      	eorgt	r0, r1
 80a2c2e:	4041      	eorgt	r1, r0
 80a2c30:	bfb8      	it	lt
 80a2c32:	425b      	neglt	r3, r3
 80a2c34:	2b19      	cmp	r3, #25
 80a2c36:	bf88      	it	hi
 80a2c38:	4770      	bxhi	lr
 80a2c3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2c3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2c42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2c46:	bf18      	it	ne
 80a2c48:	4240      	negne	r0, r0
 80a2c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2c4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2c52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2c56:	bf18      	it	ne
 80a2c58:	4249      	negne	r1, r1
 80a2c5a:	ea92 0f03 	teq	r2, r3
 80a2c5e:	d03f      	beq.n	80a2ce0 <__addsf3+0xd8>
 80a2c60:	f1a2 0201 	sub.w	r2, r2, #1
 80a2c64:	fa41 fc03 	asr.w	ip, r1, r3
 80a2c68:	eb10 000c 	adds.w	r0, r0, ip
 80a2c6c:	f1c3 0320 	rsb	r3, r3, #32
 80a2c70:	fa01 f103 	lsl.w	r1, r1, r3
 80a2c74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2c78:	d502      	bpl.n	80a2c80 <__addsf3+0x78>
 80a2c7a:	4249      	negs	r1, r1
 80a2c7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2c80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2c84:	d313      	bcc.n	80a2cae <__addsf3+0xa6>
 80a2c86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2c8a:	d306      	bcc.n	80a2c9a <__addsf3+0x92>
 80a2c8c:	0840      	lsrs	r0, r0, #1
 80a2c8e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2c92:	f102 0201 	add.w	r2, r2, #1
 80a2c96:	2afe      	cmp	r2, #254	; 0xfe
 80a2c98:	d251      	bcs.n	80a2d3e <__addsf3+0x136>
 80a2c9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2ca2:	bf08      	it	eq
 80a2ca4:	f020 0001 	biceq.w	r0, r0, #1
 80a2ca8:	ea40 0003 	orr.w	r0, r0, r3
 80a2cac:	4770      	bx	lr
 80a2cae:	0049      	lsls	r1, r1, #1
 80a2cb0:	eb40 0000 	adc.w	r0, r0, r0
 80a2cb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2cb8:	f1a2 0201 	sub.w	r2, r2, #1
 80a2cbc:	d1ed      	bne.n	80a2c9a <__addsf3+0x92>
 80a2cbe:	fab0 fc80 	clz	ip, r0
 80a2cc2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2cc6:	ebb2 020c 	subs.w	r2, r2, ip
 80a2cca:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2cce:	bfaa      	itet	ge
 80a2cd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2cd4:	4252      	neglt	r2, r2
 80a2cd6:	4318      	orrge	r0, r3
 80a2cd8:	bfbc      	itt	lt
 80a2cda:	40d0      	lsrlt	r0, r2
 80a2cdc:	4318      	orrlt	r0, r3
 80a2cde:	4770      	bx	lr
 80a2ce0:	f092 0f00 	teq	r2, #0
 80a2ce4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2ce8:	bf06      	itte	eq
 80a2cea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2cee:	3201      	addeq	r2, #1
 80a2cf0:	3b01      	subne	r3, #1
 80a2cf2:	e7b5      	b.n	80a2c60 <__addsf3+0x58>
 80a2cf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2cf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2cfc:	bf18      	it	ne
 80a2cfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2d02:	d021      	beq.n	80a2d48 <__addsf3+0x140>
 80a2d04:	ea92 0f03 	teq	r2, r3
 80a2d08:	d004      	beq.n	80a2d14 <__addsf3+0x10c>
 80a2d0a:	f092 0f00 	teq	r2, #0
 80a2d0e:	bf08      	it	eq
 80a2d10:	4608      	moveq	r0, r1
 80a2d12:	4770      	bx	lr
 80a2d14:	ea90 0f01 	teq	r0, r1
 80a2d18:	bf1c      	itt	ne
 80a2d1a:	2000      	movne	r0, #0
 80a2d1c:	4770      	bxne	lr
 80a2d1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2d22:	d104      	bne.n	80a2d2e <__addsf3+0x126>
 80a2d24:	0040      	lsls	r0, r0, #1
 80a2d26:	bf28      	it	cs
 80a2d28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2d2c:	4770      	bx	lr
 80a2d2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2d32:	bf3c      	itt	cc
 80a2d34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2d38:	4770      	bxcc	lr
 80a2d3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2d3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2d42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2d46:	4770      	bx	lr
 80a2d48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2d4c:	bf16      	itet	ne
 80a2d4e:	4608      	movne	r0, r1
 80a2d50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2d54:	4601      	movne	r1, r0
 80a2d56:	0242      	lsls	r2, r0, #9
 80a2d58:	bf06      	itte	eq
 80a2d5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2d5e:	ea90 0f01 	teqeq	r0, r1
 80a2d62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2d66:	4770      	bx	lr

080a2d68 <__aeabi_ui2f>:
 80a2d68:	f04f 0300 	mov.w	r3, #0
 80a2d6c:	e004      	b.n	80a2d78 <__aeabi_i2f+0x8>
 80a2d6e:	bf00      	nop

080a2d70 <__aeabi_i2f>:
 80a2d70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2d74:	bf48      	it	mi
 80a2d76:	4240      	negmi	r0, r0
 80a2d78:	ea5f 0c00 	movs.w	ip, r0
 80a2d7c:	bf08      	it	eq
 80a2d7e:	4770      	bxeq	lr
 80a2d80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2d84:	4601      	mov	r1, r0
 80a2d86:	f04f 0000 	mov.w	r0, #0
 80a2d8a:	e01c      	b.n	80a2dc6 <__aeabi_l2f+0x2a>

080a2d8c <__aeabi_ul2f>:
 80a2d8c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2d90:	bf08      	it	eq
 80a2d92:	4770      	bxeq	lr
 80a2d94:	f04f 0300 	mov.w	r3, #0
 80a2d98:	e00a      	b.n	80a2db0 <__aeabi_l2f+0x14>
 80a2d9a:	bf00      	nop

080a2d9c <__aeabi_l2f>:
 80a2d9c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2da0:	bf08      	it	eq
 80a2da2:	4770      	bxeq	lr
 80a2da4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2da8:	d502      	bpl.n	80a2db0 <__aeabi_l2f+0x14>
 80a2daa:	4240      	negs	r0, r0
 80a2dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2db0:	ea5f 0c01 	movs.w	ip, r1
 80a2db4:	bf02      	ittt	eq
 80a2db6:	4684      	moveq	ip, r0
 80a2db8:	4601      	moveq	r1, r0
 80a2dba:	2000      	moveq	r0, #0
 80a2dbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2dc0:	bf08      	it	eq
 80a2dc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2dc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2dca:	fabc f28c 	clz	r2, ip
 80a2dce:	3a08      	subs	r2, #8
 80a2dd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2dd4:	db10      	blt.n	80a2df8 <__aeabi_l2f+0x5c>
 80a2dd6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2dda:	4463      	add	r3, ip
 80a2ddc:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2de0:	f1c2 0220 	rsb	r2, r2, #32
 80a2de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2de8:	fa20 f202 	lsr.w	r2, r0, r2
 80a2dec:	eb43 0002 	adc.w	r0, r3, r2
 80a2df0:	bf08      	it	eq
 80a2df2:	f020 0001 	biceq.w	r0, r0, #1
 80a2df6:	4770      	bx	lr
 80a2df8:	f102 0220 	add.w	r2, r2, #32
 80a2dfc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2e00:	f1c2 0220 	rsb	r2, r2, #32
 80a2e04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2e08:	fa21 f202 	lsr.w	r2, r1, r2
 80a2e0c:	eb43 0002 	adc.w	r0, r3, r2
 80a2e10:	bf08      	it	eq
 80a2e12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2e16:	4770      	bx	lr

080a2e18 <__aeabi_f2uiz>:
 80a2e18:	0042      	lsls	r2, r0, #1
 80a2e1a:	d20e      	bcs.n	80a2e3a <__aeabi_f2uiz+0x22>
 80a2e1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2e20:	d30b      	bcc.n	80a2e3a <__aeabi_f2uiz+0x22>
 80a2e22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2e26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2e2a:	d409      	bmi.n	80a2e40 <__aeabi_f2uiz+0x28>
 80a2e2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2e34:	fa23 f002 	lsr.w	r0, r3, r2
 80a2e38:	4770      	bx	lr
 80a2e3a:	f04f 0000 	mov.w	r0, #0
 80a2e3e:	4770      	bx	lr
 80a2e40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2e44:	d101      	bne.n	80a2e4a <__aeabi_f2uiz+0x32>
 80a2e46:	0242      	lsls	r2, r0, #9
 80a2e48:	d102      	bne.n	80a2e50 <__aeabi_f2uiz+0x38>
 80a2e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2e4e:	4770      	bx	lr
 80a2e50:	f04f 0000 	mov.w	r0, #0
 80a2e54:	4770      	bx	lr
 80a2e56:	bf00      	nop

080a2e58 <__cxa_atexit>:
 80a2e58:	b510      	push	{r4, lr}
 80a2e5a:	4c05      	ldr	r4, [pc, #20]	; (80a2e70 <__cxa_atexit+0x18>)
 80a2e5c:	4613      	mov	r3, r2
 80a2e5e:	b12c      	cbz	r4, 80a2e6c <__cxa_atexit+0x14>
 80a2e60:	460a      	mov	r2, r1
 80a2e62:	4601      	mov	r1, r0
 80a2e64:	2002      	movs	r0, #2
 80a2e66:	f3af 8000 	nop.w
 80a2e6a:	bd10      	pop	{r4, pc}
 80a2e6c:	4620      	mov	r0, r4
 80a2e6e:	bd10      	pop	{r4, pc}
 80a2e70:	00000000 	.word	0x00000000

080a2e74 <memcpy>:
 80a2e74:	b510      	push	{r4, lr}
 80a2e76:	1e43      	subs	r3, r0, #1
 80a2e78:	440a      	add	r2, r1
 80a2e7a:	4291      	cmp	r1, r2
 80a2e7c:	d004      	beq.n	80a2e88 <memcpy+0x14>
 80a2e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2e86:	e7f8      	b.n	80a2e7a <memcpy+0x6>
 80a2e88:	bd10      	pop	{r4, pc}

080a2e8a <memset>:
 80a2e8a:	4603      	mov	r3, r0
 80a2e8c:	4402      	add	r2, r0
 80a2e8e:	4293      	cmp	r3, r2
 80a2e90:	d002      	beq.n	80a2e98 <memset+0xe>
 80a2e92:	f803 1b01 	strb.w	r1, [r3], #1
 80a2e96:	e7fa      	b.n	80a2e8e <memset+0x4>
 80a2e98:	4770      	bx	lr
	...

080a2e9c <srand>:
 80a2e9c:	b538      	push	{r3, r4, r5, lr}
 80a2e9e:	4b12      	ldr	r3, [pc, #72]	; (80a2ee8 <srand+0x4c>)
 80a2ea0:	4605      	mov	r5, r0
 80a2ea2:	681c      	ldr	r4, [r3, #0]
 80a2ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2ea6:	b9d3      	cbnz	r3, 80a2ede <srand+0x42>
 80a2ea8:	2018      	movs	r0, #24
 80a2eaa:	f7fe fde5 	bl	80a1a78 <malloc>
 80a2eae:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2eb2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2eb4:	8003      	strh	r3, [r0, #0]
 80a2eb6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2eba:	8043      	strh	r3, [r0, #2]
 80a2ebc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2ec0:	8083      	strh	r3, [r0, #4]
 80a2ec2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2ec6:	80c3      	strh	r3, [r0, #6]
 80a2ec8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2ecc:	8103      	strh	r3, [r0, #8]
 80a2ece:	2305      	movs	r3, #5
 80a2ed0:	8143      	strh	r3, [r0, #10]
 80a2ed2:	230b      	movs	r3, #11
 80a2ed4:	8183      	strh	r3, [r0, #12]
 80a2ed6:	2201      	movs	r2, #1
 80a2ed8:	2300      	movs	r3, #0
 80a2eda:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2ee0:	2200      	movs	r2, #0
 80a2ee2:	611d      	str	r5, [r3, #16]
 80a2ee4:	615a      	str	r2, [r3, #20]
 80a2ee6:	bd38      	pop	{r3, r4, r5, pc}
 80a2ee8:	20000068 	.word	0x20000068

080a2eec <rand>:
 80a2eec:	4b19      	ldr	r3, [pc, #100]	; (80a2f54 <rand+0x68>)
 80a2eee:	b510      	push	{r4, lr}
 80a2ef0:	681c      	ldr	r4, [r3, #0]
 80a2ef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2ef4:	b9d3      	cbnz	r3, 80a2f2c <rand+0x40>
 80a2ef6:	2018      	movs	r0, #24
 80a2ef8:	f7fe fdbe 	bl	80a1a78 <malloc>
 80a2efc:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2f00:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2f02:	8003      	strh	r3, [r0, #0]
 80a2f04:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2f08:	8043      	strh	r3, [r0, #2]
 80a2f0a:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2f0e:	8083      	strh	r3, [r0, #4]
 80a2f10:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2f14:	80c3      	strh	r3, [r0, #6]
 80a2f16:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2f1a:	8103      	strh	r3, [r0, #8]
 80a2f1c:	2305      	movs	r3, #5
 80a2f1e:	8143      	strh	r3, [r0, #10]
 80a2f20:	230b      	movs	r3, #11
 80a2f22:	8183      	strh	r3, [r0, #12]
 80a2f24:	2201      	movs	r2, #1
 80a2f26:	2300      	movs	r3, #0
 80a2f28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2f2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2f2e:	4c0a      	ldr	r4, [pc, #40]	; (80a2f58 <rand+0x6c>)
 80a2f30:	690b      	ldr	r3, [r1, #16]
 80a2f32:	6948      	ldr	r0, [r1, #20]
 80a2f34:	435c      	muls	r4, r3
 80a2f36:	4a09      	ldr	r2, [pc, #36]	; (80a2f5c <rand+0x70>)
 80a2f38:	fb02 4000 	mla	r0, r2, r0, r4
 80a2f3c:	fba3 2302 	umull	r2, r3, r3, r2
 80a2f40:	3201      	adds	r2, #1
 80a2f42:	4403      	add	r3, r0
 80a2f44:	f143 0300 	adc.w	r3, r3, #0
 80a2f48:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a2f4c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a2f50:	bd10      	pop	{r4, pc}
 80a2f52:	bf00      	nop
 80a2f54:	20000068 	.word	0x20000068
 80a2f58:	5851f42d 	.word	0x5851f42d
 80a2f5c:	4c957f2d 	.word	0x4c957f2d

080a2f60 <strlen>:
 80a2f60:	4603      	mov	r3, r0
 80a2f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2f66:	2a00      	cmp	r2, #0
 80a2f68:	d1fb      	bne.n	80a2f62 <strlen+0x2>
 80a2f6a:	1a18      	subs	r0, r3, r0
 80a2f6c:	3801      	subs	r0, #1
 80a2f6e:	4770      	bx	lr

080a2f70 <dynalib_user>:
 80a2f70:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2f80:	0000 0000 6553 7574 0070 5148 6f52 7475     ....Setup.HQRout
 80a2f90:	7265 505f 4255 494c 4853 4900 204e 4f43     er_PUBLISH.IN CO
 80a2fa0:	4f4c 2052 4957 4550 4900 204e 5550 534c     LOR WIPE.IN PULS
 80a2fb0:	2045 4857 5449 0045 4e49 5220 4941 424e     E WHITE.IN RAINB
 80a2fc0:	574f 4620 4441 0045 6877 6565 566c 6c61     OW FADE.wheelVal
 80a2fd0:	3a20 0020 4e49 7720 6968 6574 6f20 6576      : .IN white ove
 80a2fe0:	2072 6172 6e69 6f62 0077 4e49 6620 6c75     r rainbow.IN ful
 80a2ff0:	206c 6877 7469 0065 4e49 7220 6961 626e     l white.IN rainb
 80a3000:	776f 6320 6379 656c 0000 0000               ow cycle....

080a300c <CSWTCH.215>:
 80a300c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a301c:	0050 0000                                   P...

080a3020 <_ZZN17Adafruit_NeoPixel15brightnessToPWMEhE9pwmLevels>:
 80a3020:	0100 0302 0604 0c08 2417 4630 875f ffbe     .........$0F_...

080a3030 <_ZTV7TwoWire>:
	...
 80a3038:	1ac1 080a 1b0b 080a 1ae3 080a 1ac3 080a     ................
 80a3048:	1aeb 080a 1af3 080a 1afb 080a 1b03 080a     ................

080a3058 <_ZTV9IPAddress>:
	...
 80a3060:	1b45 080a 00b3 080a 00d5 080a 6162 6475     E...........baud
 80a3070:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3080:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3090:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a30a0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a30b0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a30c0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a30d0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a30e0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a30f0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3100:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3110:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3120:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3130:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3140:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3150 <_ZTVN5spark12NetworkClassE>:
	...
 80a3158:	1c25 080a 1c2f 080a 1c39 080a 1c43 080a     %.../...9...C...
 80a3168:	1c4d 080a 1c59 080a 1c65 080a 1c71 080a     M...Y...e...q...
 80a3178:	1c79 080a 1c83 080a 1c8d 080a               y...........

080a3184 <_ZTV8SPIClass>:
	...
 80a318c:	1e45 080a 1e47 080a 005a 2b25 3330 3a64     E...G...Z.%+03d:
 80a319c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a31ac:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a31bc:	0000 0000                                   ....

080a31c0 <_ZTV3UDP>:
	...
 80a31c8:	00b5 080a 00e3 080a 1f83 080a 20a3 080a     ............. ..
 80a31d8:	1f7b 080a 1f99 080a 1fb7 080a 1fd1 080a     {...............
 80a31e8:	1ff3 080a 203d 080a 205f 080a 21f5 080a     ....= .._ ...!..
 80a31f8:	2109 080a 1f65 080a 2305 080a 2171 080a     .!..e....#..q!..
 80a3208:	222d 080a 2333 080a 20cd 080a 1f71 080a     -"..3#... ..q...
 80a3218:	21d5 080a 1f77 080a 1fd3 080a fff0 ffff     .!..w...........
 80a3228:	0000 0000 1feb 080a                         ........

080a3230 <_ZTV11USARTSerial>:
	...
 80a3238:	236b 080a 23bb 080a 23c9 080a 1d09 080a     k#...#...#......
 80a3248:	237f 080a 23a1 080a 238d 080a 23b5 080a     .#...#...#...#..
 80a3258:	236d 080a 2371 080a                         m#..q#..

080a3260 <_ZTV9USBSerial>:
	...
 80a3268:	2471 080a 24c1 080a 24cf 080a 1d09 080a     q$...$...$......
 80a3278:	24ad 080a 2473 080a 2489 080a 24bb 080a     .$..s$...$...$..
 80a3288:	249f 080a 246d 080a                         .$..m$..

080a3290 <_ZTVN5spark9WiFiClassE>:
	...
 80a3298:	26b7 080a 26ad 080a 26a3 080a 2615 080a     .&...&...&...&..
 80a32a8:	2697 080a 268b 080a 267f 080a 2677 080a     .&...&...&..w&..
 80a32b8:	266d 080a 2663 080a 261f 080a               m&..c&...&..

080a32c4 <__sf_fake_stdin>:
	...

080a32e4 <__sf_fake_stdout>:
	...

080a3304 <__sf_fake_stderr>:
	...
 80a3324:	0043                                        C.

080a3326 <link_const_variable_data_end>:
	...

080a3328 <link_constructors_location>:
 80a3328:	080a02f9 	.word	0x080a02f9
 80a332c:	080a16b9 	.word	0x080a16b9
 80a3330:	080a1c15 	.word	0x080a1c15
 80a3334:	080a1cf5 	.word	0x080a1cf5
 80a3338:	080a1e29 	.word	0x080a1e29
 80a333c:	080a1f39 	.word	0x080a1f39
 80a3340:	080a1f51 	.word	0x080a1f51
 80a3344:	080a26c1 	.word	0x080a26c1
 80a3348:	080a28e9 	.word	0x080a28e9
 80a334c:	080a2919 	.word	0x080a2919
 80a3350:	080a296d 	.word	0x080a296d
 80a3354:	080a2a31 	.word	0x080a2a31
 80a3358:	080a2ab5 	.word	0x080a2ab5
 80a335c:	080a2b39 	.word	0x080a2b39
