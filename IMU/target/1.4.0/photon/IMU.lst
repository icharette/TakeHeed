
/Users/ninjacat/Documents/Particle/TakeHeed/IMU/target/1.4.0/photon/IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004570  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4590  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a4594  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000698  20000088  20000088  00040088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a461c  080a461c  0003461c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4644  080a4644  00034644  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b4410  00000000  00000000  00034648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010703  00000000  00000000  000e8a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000164e5  00000000  00000000  000f915b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002250  00000000  00000000  0010f640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000035d0  00000000  00000000  00111890  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025c38  00000000  00000000  00114e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026214  00000000  00000000  0013aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6b37  00000000  00000000  00160cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c264  00000000  00000000  002077e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 ffcf 	bl	80a3fd4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 ffd4 	bl	80a3fea <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4594 	.word	0x080a4594
 80a0050:	20000088 	.word	0x20000088
 80a0054:	20000088 	.word	0x20000088
 80a0058:	20000720 	.word	0x20000720
 80a005c:	20000720 	.word	0x20000720

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fa1f 	bl	80a24a4 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a4554 	.word	0x080a4554
 80a0088:	080a4590 	.word	0x080a4590

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b850 	b.w	80a0130 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fb39 	bl	80a0708 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b9c5 	b.w	80a2428 <_post_loop>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 b9f3 	b.w	80a1488 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 b9f9 	b.w	80a1498 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b6:	4770      	bx	lr

080a00b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <_ZN3UDPD1Ev+0x1c>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	3364      	adds	r3, #100	; 0x64
 80a00c2:	6103      	str	r3, [r0, #16]
 80a00c4:	f001 fe2c 	bl	80a1d20 <_ZN3UDP4stopEv>
 80a00c8:	4620      	mov	r0, r4
 80a00ca:	f001 ff61 	bl	80a1f90 <_ZN3UDP13releaseBufferEv>
 80a00ce:	4620      	mov	r0, r4
 80a00d0:	bd10      	pop	{r4, pc}
 80a00d2:	bf00      	nop
 80a00d4:	080a43a8 	.word	0x080a43a8

080a00d8 <_Z7OnTimerv>:
  originPitch = originPitch / 100;
  Serial.println("==================HEADING CALIBRATED");
}

boolean toggle = true;
void OnTimer(void) {  //Handler for the timer, will be called automatically
 80a00d8:	b510      	push	{r4, lr}
  Serial1.println("Hello");
  if(toggle){
 80a00da:	4c0a      	ldr	r4, [pc, #40]	; (80a0104 <_Z7OnTimerv+0x2c>)
  Serial.println("==================HEADING CALIBRATED");
}

boolean toggle = true;
void OnTimer(void) {  //Handler for the timer, will be called automatically
  Serial1.println("Hello");
 80a00dc:	f002 f818 	bl	80a2110 <_Z22__fetch_global_Serial1v>
 80a00e0:	4909      	ldr	r1, [pc, #36]	; (80a0108 <_Z7OnTimerv+0x30>)
 80a00e2:	f001 fb7c 	bl	80a17de <_ZN5Print7printlnEPKc>
  if(toggle){
 80a00e6:	7821      	ldrb	r1, [r4, #0]
 80a00e8:	b129      	cbz	r1, 80a00f6 <_Z7OnTimerv+0x1e>
    digitalWrite(D7,HIGH);
 80a00ea:	2101      	movs	r1, #1
 80a00ec:	2007      	movs	r0, #7
 80a00ee:	f002 fa3a 	bl	80a2566 <digitalWrite>
    toggle = false;
 80a00f2:	2300      	movs	r3, #0
 80a00f4:	e003      	b.n	80a00fe <_Z7OnTimerv+0x26>
  }else{
    digitalWrite(D7,LOW);
 80a00f6:	2007      	movs	r0, #7
 80a00f8:	f002 fa35 	bl	80a2566 <digitalWrite>
    toggle = true;
 80a00fc:	2301      	movs	r3, #1
 80a00fe:	7023      	strb	r3, [r4, #0]
 80a0100:	bd10      	pop	{r4, pc}
 80a0102:	bf00      	nop
 80a0104:	20000008 	.word	0x20000008
 80a0108:	080a4070 	.word	0x080a4070

080a010c <_ZN9IPAddressD0Ev>:
 80a010c:	b510      	push	{r4, lr}
 80a010e:	4604      	mov	r4, r0
 80a0110:	2118      	movs	r1, #24
 80a0112:	f002 faa0 	bl	80a2656 <_ZdlPvj>
 80a0116:	4620      	mov	r0, r4
 80a0118:	bd10      	pop	{r4, pc}

080a011a <_ZN3UDPD0Ev>:
 80a011a:	b510      	push	{r4, lr}
 80a011c:	4604      	mov	r4, r0
 80a011e:	f7ff ffcb 	bl	80a00b8 <_ZN3UDPD1Ev>
 80a0122:	4620      	mov	r0, r4
 80a0124:	214c      	movs	r1, #76	; 0x4c
 80a0126:	f002 fa96 	bl	80a2656 <_ZdlPvj>
 80a012a:	4620      	mov	r0, r4
 80a012c:	bd10      	pop	{r4, pc}
	...

080a0130 <setup>:
SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
void OnTimer(void);   //Prototype for timer callback method


void setup() 
{
 80a0130:	b570      	push	{r4, r5, r6, lr}
 80a0132:	b096      	sub	sp, #88	; 0x58
  
 Serial1.begin(115200);  
 80a0134:	f001 ffec 	bl	80a2110 <_Z22__fetch_global_Serial1v>
 80a0138:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a013c:	f001 ffe2 	bl	80a2104 <_ZN11USARTSerial5beginEm>
  updateTimer.SetCallback(OnTimer);
 80a0140:	493a      	ldr	r1, [pc, #232]	; (80a022c <setup+0xfc>)
 80a0142:	483b      	ldr	r0, [pc, #236]	; (80a0230 <setup+0x100>)
 80a0144:	f000 ff75 	bl	80a1032 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>
  pinMode(testPin, OUTPUT);
 80a0148:	4b3a      	ldr	r3, [pc, #232]	; (80a0234 <setup+0x104>)
 80a014a:	2101      	movs	r1, #1
 80a014c:	8818      	ldrh	r0, [r3, #0]
 80a014e:	f002 f9f9 	bl	80a2544 <pinMode>
  //waiting for serial to correctly initialze and allocate memory
    //serial object
    while(!Serial);
 80a0152:	f002 f875 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0156:	f002 f85a 	bl	80a220e <_ZN9USBSerialcvbEv>
 80a015a:	2800      	cmp	r0, #0
 80a015c:	d0f9      	beq.n	80a0152 <setup+0x22>
 80a015e:	4c36      	ldr	r4, [pc, #216]	; (80a0238 <setup+0x108>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0160:	2300      	movs	r3, #0
 80a0162:	461a      	mov	r2, r3
 80a0164:	4619      	mov	r1, r3
 80a0166:	6860      	ldr	r0, [r4, #4]
 80a0168:	f001 f92e 	bl	80a13c8 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a016c:	2200      	movs	r2, #0
 80a016e:	4611      	mov	r1, r2
 80a0170:	6860      	ldr	r0, [r4, #4]
 80a0172:	4d31      	ldr	r5, [pc, #196]	; (80a0238 <setup+0x108>)
 80a0174:	f001 f940 	bl	80a13f8 <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a0178:	2800      	cmp	r0, #0
 80a017a:	d0f7      	beq.n	80a016c <setup+0x3c>
    Serial.println("Setup");
 80a017c:	f002 f860 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0180:	492e      	ldr	r1, [pc, #184]	; (80a023c <setup+0x10c>)
 80a0182:	f001 fb2c 	bl	80a17de <_ZN5Print7printlnEPKc>
   udp.begin(localPort);
 80a0186:	4b2e      	ldr	r3, [pc, #184]	; (80a0240 <setup+0x110>)
 80a0188:	2200      	movs	r2, #0
 80a018a:	8819      	ldrh	r1, [r3, #0]
 80a018c:	482d      	ldr	r0, [pc, #180]	; (80a0244 <setup+0x114>)
 80a018e:	f001 fda2 	bl	80a1cd6 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a0192:	2300      	movs	r3, #0
 80a0194:	4619      	mov	r1, r3
 80a0196:	4a2c      	ldr	r2, [pc, #176]	; (80a0248 <setup+0x118>)
 80a0198:	6868      	ldr	r0, [r5, #4]
 80a019a:	f001 f965 	bl	80a1468 <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a019e:	f002 f84f 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a01a2:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01a4:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a01a6:	2240      	movs	r2, #64	; 0x40
 80a01a8:	2100      	movs	r1, #0
 80a01aa:	a806      	add	r0, sp, #24
 80a01ac:	f003 ff1d 	bl	80a3fea <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01b0:	2340      	movs	r3, #64	; 0x40
 80a01b2:	aa06      	add	r2, sp, #24
 80a01b4:	4621      	mov	r1, r4
 80a01b6:	9400      	str	r4, [sp, #0]
 80a01b8:	6868      	ldr	r0, [r5, #4]
 80a01ba:	f001 f95d 	bl	80a1478 <network_get_hostname>
        return String(buf);
 80a01be:	a906      	add	r1, sp, #24
 80a01c0:	a802      	add	r0, sp, #8
 80a01c2:	f001 fd17 	bl	80a1bf4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01c6:	9902      	ldr	r1, [sp, #8]
 80a01c8:	4630      	mov	r0, r6
 80a01ca:	f001 fb08 	bl	80a17de <_ZN5Print7printlnEPKc>
 80a01ce:	a802      	add	r0, sp, #8
 80a01d0:	f001 fcc9 	bl	80a1b66 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a01d4:	f002 f834 	bl	80a2240 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a01d8:	4622      	mov	r2, r4
 80a01da:	4606      	mov	r6, r0
 80a01dc:	4621      	mov	r1, r4
 80a01de:	6868      	ldr	r0, [r5, #4]
 80a01e0:	f001 f8ea 	bl	80a13b8 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a01e4:	1c81      	adds	r1, r0, #2
 80a01e6:	a806      	add	r0, sp, #24
 80a01e8:	f001 fa00 	bl	80a15ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a01ec:	a906      	add	r1, sp, #24
 80a01ee:	4630      	mov	r0, r6
 80a01f0:	f001 faff 	bl	80a17f2 <_ZN5Print7printlnERK9Printable>
  // Before initializing the IMU, there are a few settings
  // we may need to adjust. Use the settings struct to set
  // the device's communication mode and addresses:
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a01f4:	4815      	ldr	r0, [pc, #84]	; (80a024c <setup+0x11c>)
 80a01f6:	2301      	movs	r3, #1
 80a01f8:	7003      	strb	r3, [r0, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
 80a01fa:	231e      	movs	r3, #30
 80a01fc:	7083      	strb	r3, [r0, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a01fe:	236b      	movs	r3, #107	; 0x6b
 80a0200:	7043      	strb	r3, [r0, #1]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0202:	f000 fdb8 	bl	80a0d76 <_ZN7LSM9DS15beginEv>
 80a0206:	b978      	cbnz	r0, 80a0228 <setup+0xf8>
  {
    Serial.println("Failed to communicate with LSM9DS1.");
 80a0208:	f002 f81a 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a020c:	4910      	ldr	r1, [pc, #64]	; (80a0250 <setup+0x120>)
 80a020e:	f001 fae6 	bl	80a17de <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a0212:	f002 f815 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0216:	490f      	ldr	r1, [pc, #60]	; (80a0254 <setup+0x124>)
 80a0218:	f001 fae1 	bl	80a17de <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a021c:	f002 f810 	bl	80a2240 <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a0220:	490d      	ldr	r1, [pc, #52]	; (80a0258 <setup+0x128>)
 80a0222:	f001 fadc 	bl	80a17de <_ZN5Print7printlnEPKc>
 80a0226:	e7fe      	b.n	80a0226 <setup+0xf6>
    while (1)
      ;
  }
}
 80a0228:	b016      	add	sp, #88	; 0x58
 80a022a:	bd70      	pop	{r4, r5, r6, pc}
 80a022c:	080a00d9 	.word	0x080a00d9
 80a0230:	20000180 	.word	0x20000180
 80a0234:	20000000 	.word	0x20000000
 80a0238:	2000061c 	.word	0x2000061c
 80a023c:	080a4076 	.word	0x080a4076
 80a0240:	20000004 	.word	0x20000004
 80a0244:	2000011c 	.word	0x2000011c
 80a0248:	080a407c 	.word	0x080a407c
 80a024c:	20000098 	.word	0x20000098
 80a0250:	080a408d 	.word	0x080a408d
 80a0254:	080a40b1 	.word	0x080a40b1
 80a0258:	080a40c6 	.word	0x080a40c6

080a025c <_Z14calibratePitchf>:
    }
  origin = origin / 100;
  Serial.println("==================HEADING CALIBRATED");
}

void calibratePitch(float _pitch){
 80a025c:	4b0b      	ldr	r3, [pc, #44]	; (80a028c <_Z14calibratePitchf+0x30>)
 80a025e:	b570      	push	{r4, r5, r6, lr}
 80a0260:	4606      	mov	r6, r0
 80a0262:	461c      	mov	r4, r3
 80a0264:	681a      	ldr	r2, [r3, #0]
 80a0266:	2564      	movs	r5, #100	; 0x64
    for(int i = 0; i < 100; i++){
    originPitch += _pitch;
 80a0268:	4610      	mov	r0, r2
 80a026a:	4631      	mov	r1, r6
 80a026c:	f003 fbd6 	bl	80a3a1c <__addsf3>
  origin = origin / 100;
  Serial.println("==================HEADING CALIBRATED");
}

void calibratePitch(float _pitch){
    for(int i = 0; i < 100; i++){
 80a0270:	3d01      	subs	r5, #1
    originPitch += _pitch;
 80a0272:	4602      	mov	r2, r0
  origin = origin / 100;
  Serial.println("==================HEADING CALIBRATED");
}

void calibratePitch(float _pitch){
    for(int i = 0; i < 100; i++){
 80a0274:	d1f8      	bne.n	80a0268 <_Z14calibratePitchf+0xc>
    originPitch += _pitch;
    }
  originPitch = originPitch / 100;
 80a0276:	4906      	ldr	r1, [pc, #24]	; (80a0290 <_Z14calibratePitchf+0x34>)
 80a0278:	f003 fd8c 	bl	80a3d94 <__aeabi_fdiv>
 80a027c:	6020      	str	r0, [r4, #0]
  Serial.println("==================HEADING CALIBRATED");
 80a027e:	f001 ffdf 	bl	80a2240 <_Z16_fetch_usbserialv>
}
 80a0282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void calibratePitch(float _pitch){
    for(int i = 0; i < 100; i++){
    originPitch += _pitch;
    }
  originPitch = originPitch / 100;
  Serial.println("==================HEADING CALIBRATED");
 80a0286:	4903      	ldr	r1, [pc, #12]	; (80a0294 <_Z14calibratePitchf+0x38>)
 80a0288:	f001 baa9 	b.w	80a17de <_ZN5Print7printlnEPKc>
 80a028c:	2000018c 	.word	0x2000018c
 80a0290:	42c80000 	.word	0x42c80000
 80a0294:	080a414e 	.word	0x080a414e

080a0298 <_Z13calibrateRollf>:
    toggle = true;
  }
  
}

void calibrateRoll(float _roll){
 80a0298:	4b0b      	ldr	r3, [pc, #44]	; (80a02c8 <_Z13calibrateRollf+0x30>)
 80a029a:	b570      	push	{r4, r5, r6, lr}
 80a029c:	4606      	mov	r6, r0
 80a029e:	461c      	mov	r4, r3
 80a02a0:	681a      	ldr	r2, [r3, #0]
 80a02a2:	2564      	movs	r5, #100	; 0x64
    for(int i = 0; i < 100; i++){
    originRoll += _roll;
 80a02a4:	4610      	mov	r0, r2
 80a02a6:	4631      	mov	r1, r6
 80a02a8:	f003 fbb8 	bl	80a3a1c <__addsf3>
  }
  
}

void calibrateRoll(float _roll){
    for(int i = 0; i < 100; i++){
 80a02ac:	3d01      	subs	r5, #1
    originRoll += _roll;
 80a02ae:	4602      	mov	r2, r0
  }
  
}

void calibrateRoll(float _roll){
    for(int i = 0; i < 100; i++){
 80a02b0:	d1f8      	bne.n	80a02a4 <_Z13calibrateRollf+0xc>
    originRoll += _roll;
    }
  originRoll = originRoll / 100;
 80a02b2:	4906      	ldr	r1, [pc, #24]	; (80a02cc <_Z13calibrateRollf+0x34>)
 80a02b4:	f003 fd6e 	bl	80a3d94 <__aeabi_fdiv>
 80a02b8:	6020      	str	r0, [r4, #0]
  Serial.println("==================HEADING CALIBRATED");
 80a02ba:	f001 ffc1 	bl	80a2240 <_Z16_fetch_usbserialv>
}
 80a02be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void calibrateRoll(float _roll){
    for(int i = 0; i < 100; i++){
    originRoll += _roll;
    }
  originRoll = originRoll / 100;
  Serial.println("==================HEADING CALIBRATED");
 80a02c2:	4903      	ldr	r1, [pc, #12]	; (80a02d0 <_Z13calibrateRollf+0x38>)
 80a02c4:	f001 ba8b 	b.w	80a17de <_ZN5Print7printlnEPKc>
 80a02c8:	20000190 	.word	0x20000190
 80a02cc:	42c80000 	.word	0x42c80000
 80a02d0:	080a414e 	.word	0x080a414e

080a02d4 <_Z9printGyrov>:
 Serial.print(" refZ: ");
 Serial.print(refZ);
 Serial.println(" ");
}
void printGyro()
{
 80a02d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // To read from the gyroscope, you must first call the
  // readGyro() function. When this exits, it'll update the
  // gx, gy, and gz variables with the most current data.
  imu.readGyro();
 80a02d6:	4c26      	ldr	r4, [pc, #152]	; (80a0370 <_Z9printGyrov+0x9c>)
  Serial.print("G: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcGyro helper function to convert a raw ADC value to
  // DPS. Give the function the value that you want to convert.
  Serial.print(imu.calcGyro(imu.gx), 2);
 80a02d8:	2502      	movs	r5, #2
void printGyro()
{
  // To read from the gyroscope, you must first call the
  // readGyro() function. When this exits, it'll update the
  // gx, gy, and gz variables with the most current data.
  imu.readGyro();
 80a02da:	4620      	mov	r0, r4
 80a02dc:	f000 fe14 	bl	80a0f08 <_ZN7LSM9DS18readGyroEv>
  
  // Now we can use the gx, gy, and gz variables as we please.
  // Either print them as raw ADC values, or calculated in DPS.
  Serial.print("G: ");
 80a02e0:	f001 ffae 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a02e4:	4923      	ldr	r1, [pc, #140]	; (80a0374 <_Z9printGyrov+0xa0>)
 80a02e6:	f001 fa61 	bl	80a17ac <_ZN5Print5printEPKc>
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcGyro helper function to convert a raw ADC value to
  // DPS. Give the function the value that you want to convert.
  Serial.print(imu.calcGyro(imu.gx), 2);
 80a02ea:	f001 ffa9 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a02ee:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
 80a02f2:	4606      	mov	r6, r0
 80a02f4:	4620      	mov	r0, r4
 80a02f6:	f000 fae2 	bl	80a08be <_ZN7LSM9DS18calcGyroEs>
 80a02fa:	f002 ffed 	bl	80a32d8 <__aeabi_f2d>
 80a02fe:	4602      	mov	r2, r0
 80a0300:	4630      	mov	r0, r6
  Serial.print(", ");
 80a0302:	4e1d      	ldr	r6, [pc, #116]	; (80a0378 <_Z9printGyrov+0xa4>)
  Serial.print("G: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcGyro helper function to convert a raw ADC value to
  // DPS. Give the function the value that you want to convert.
  Serial.print(imu.calcGyro(imu.gx), 2);
 80a0304:	460b      	mov	r3, r1
 80a0306:	9500      	str	r5, [sp, #0]
 80a0308:	f001 fb7a 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a030c:	f001 ff98 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0310:	4631      	mov	r1, r6
 80a0312:	f001 fa4b 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(imu.calcGyro(imu.gy), 2);
 80a0316:	f001 ff93 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a031a:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 80a031e:	4607      	mov	r7, r0
 80a0320:	4620      	mov	r0, r4
 80a0322:	f000 facc 	bl	80a08be <_ZN7LSM9DS18calcGyroEs>
 80a0326:	f002 ffd7 	bl	80a32d8 <__aeabi_f2d>
 80a032a:	9500      	str	r5, [sp, #0]
 80a032c:	4602      	mov	r2, r0
 80a032e:	460b      	mov	r3, r1
 80a0330:	4638      	mov	r0, r7
 80a0332:	f001 fb65 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a0336:	f001 ff83 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a033a:	4631      	mov	r1, r6
 80a033c:	f001 fa36 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(imu.calcGyro(imu.gz), 2);
 80a0340:	f001 ff7e 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0344:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 80a0348:	4606      	mov	r6, r0
 80a034a:	4620      	mov	r0, r4
 80a034c:	f000 fab7 	bl	80a08be <_ZN7LSM9DS18calcGyroEs>
 80a0350:	f002 ffc2 	bl	80a32d8 <__aeabi_f2d>
 80a0354:	9500      	str	r5, [sp, #0]
 80a0356:	4602      	mov	r2, r0
 80a0358:	460b      	mov	r3, r1
 80a035a:	4630      	mov	r0, r6
 80a035c:	f001 fb50 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.println(" deg/s");
 80a0360:	f001 ff6e 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0364:	4905      	ldr	r1, [pc, #20]	; (80a037c <_Z9printGyrov+0xa8>)
  Serial.print(", ");
  Serial.print(imu.gy);
  Serial.print(", ");
  Serial.println(imu.gz);
#endif
}
 80a0366:	b003      	add	sp, #12
 80a0368:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Serial.print(imu.calcGyro(imu.gx), 2);
  Serial.print(", ");
  Serial.print(imu.calcGyro(imu.gy), 2);
  Serial.print(", ");
  Serial.print(imu.calcGyro(imu.gz), 2);
  Serial.println(" deg/s");
 80a036c:	f001 ba37 	b.w	80a17de <_ZN5Print7printlnEPKc>
 80a0370:	20000098 	.word	0x20000098
 80a0374:	080a41a6 	.word	0x080a41a6
 80a0378:	080a41aa 	.word	0x080a41aa
 80a037c:	080a41ad 	.word	0x080a41ad

080a0380 <_Z10printAccelv>:
  Serial.println(imu.gz);
#endif
}

void printAccel()
{
 80a0380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // To read from the accelerometer, you must first call the
  // readAccel() function. When this exits, it'll update the
  // ax, ay, and az variables with the most current data.
  imu.readAccel();
 80a0382:	4c26      	ldr	r4, [pc, #152]	; (80a041c <_Z10printAccelv+0x9c>)
  Serial.print("A: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcAccel helper function to convert a raw ADC value to
  // g's. Give the function the value that you want to convert.
  Serial.print(imu.calcAccel(imu.ax), 2);
 80a0384:	2502      	movs	r5, #2
void printAccel()
{
  // To read from the accelerometer, you must first call the
  // readAccel() function. When this exits, it'll update the
  // ax, ay, and az variables with the most current data.
  imu.readAccel();
 80a0386:	4620      	mov	r0, r4
 80a0388:	f000 fd8d 	bl	80a0ea6 <_ZN7LSM9DS19readAccelEv>
  
  // Now we can use the ax, ay, and az variables as we please.
  // Either print them as raw ADC values, or calculated in g's.
  Serial.print("A: ");
 80a038c:	f001 ff58 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0390:	4923      	ldr	r1, [pc, #140]	; (80a0420 <_Z10printAccelv+0xa0>)
 80a0392:	f001 fa0b 	bl	80a17ac <_ZN5Print5printEPKc>
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcAccel helper function to convert a raw ADC value to
  // g's. Give the function the value that you want to convert.
  Serial.print(imu.calcAccel(imu.ax), 2);
 80a0396:	f001 ff53 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a039a:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80a039e:	4606      	mov	r6, r0
 80a03a0:	4620      	mov	r0, r4
 80a03a2:	f000 fa95 	bl	80a08d0 <_ZN7LSM9DS19calcAccelEs>
 80a03a6:	f002 ff97 	bl	80a32d8 <__aeabi_f2d>
 80a03aa:	4602      	mov	r2, r0
 80a03ac:	4630      	mov	r0, r6
  Serial.print(", ");
 80a03ae:	4e1d      	ldr	r6, [pc, #116]	; (80a0424 <_Z10printAccelv+0xa4>)
  Serial.print("A: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcAccel helper function to convert a raw ADC value to
  // g's. Give the function the value that you want to convert.
  Serial.print(imu.calcAccel(imu.ax), 2);
 80a03b0:	460b      	mov	r3, r1
 80a03b2:	9500      	str	r5, [sp, #0]
 80a03b4:	f001 fb24 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a03b8:	f001 ff42 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a03bc:	4631      	mov	r1, r6
 80a03be:	f001 f9f5 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(imu.calcAccel(imu.ay), 2);
 80a03c2:	f001 ff3d 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a03c6:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 80a03ca:	4607      	mov	r7, r0
 80a03cc:	4620      	mov	r0, r4
 80a03ce:	f000 fa7f 	bl	80a08d0 <_ZN7LSM9DS19calcAccelEs>
 80a03d2:	f002 ff81 	bl	80a32d8 <__aeabi_f2d>
 80a03d6:	9500      	str	r5, [sp, #0]
 80a03d8:	4602      	mov	r2, r0
 80a03da:	460b      	mov	r3, r1
 80a03dc:	4638      	mov	r0, r7
 80a03de:	f001 fb0f 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a03e2:	f001 ff2d 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a03e6:	4631      	mov	r1, r6
 80a03e8:	f001 f9e0 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(imu.calcAccel(imu.az), 2);
 80a03ec:	f001 ff28 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a03f0:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
 80a03f4:	4606      	mov	r6, r0
 80a03f6:	4620      	mov	r0, r4
 80a03f8:	f000 fa6a 	bl	80a08d0 <_ZN7LSM9DS19calcAccelEs>
 80a03fc:	f002 ff6c 	bl	80a32d8 <__aeabi_f2d>
 80a0400:	9500      	str	r5, [sp, #0]
 80a0402:	4602      	mov	r2, r0
 80a0404:	460b      	mov	r3, r1
 80a0406:	4630      	mov	r0, r6
 80a0408:	f001 fafa 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.println(" g");
 80a040c:	f001 ff18 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0410:	4905      	ldr	r1, [pc, #20]	; (80a0428 <_Z10printAccelv+0xa8>)
  Serial.print(imu.ay);
  Serial.print(", ");
  Serial.println(imu.az);
#endif

}
 80a0412:	b003      	add	sp, #12
 80a0414:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Serial.print(imu.calcAccel(imu.ax), 2);
  Serial.print(", ");
  Serial.print(imu.calcAccel(imu.ay), 2);
  Serial.print(", ");
  Serial.print(imu.calcAccel(imu.az), 2);
  Serial.println(" g");
 80a0418:	f001 b9e1 	b.w	80a17de <_ZN5Print7printlnEPKc>
 80a041c:	20000098 	.word	0x20000098
 80a0420:	080a41b4 	.word	0x080a41b4
 80a0424:	080a41aa 	.word	0x080a41aa
 80a0428:	080a41b8 	.word	0x080a41b8

080a042c <_Z8printMagv>:
#endif

}

void printMag()
{
 80a042c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // To read from the magnetometer, you must first call the
  // readMag() function. When this exits, it'll update the
  // mx, my, and mz variables with the most current data.
  imu.readMag();
 80a042e:	4c26      	ldr	r4, [pc, #152]	; (80a04c8 <_Z8printMagv+0x9c>)
  Serial.print("M: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcMag helper function to convert a raw ADC value to
  // Gauss. Give the function the value that you want to convert.
  Serial.print(imu.calcMag(imu.mx), 2);
 80a0430:	2502      	movs	r5, #2
void printMag()
{
  // To read from the magnetometer, you must first call the
  // readMag() function. When this exits, it'll update the
  // mx, my, and mz variables with the most current data.
  imu.readMag();
 80a0432:	4620      	mov	r0, r4
 80a0434:	f000 fdb0 	bl	80a0f98 <_ZN7LSM9DS17readMagEv>
  
  // Now we can use the mx, my, and mz variables as we please.
  // Either print them as raw ADC values, or calculated in Gauss.
  Serial.print("M: ");
 80a0438:	f001 ff02 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a043c:	4923      	ldr	r1, [pc, #140]	; (80a04cc <_Z8printMagv+0xa0>)
 80a043e:	f001 f9b5 	bl	80a17ac <_ZN5Print5printEPKc>
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcMag helper function to convert a raw ADC value to
  // Gauss. Give the function the value that you want to convert.
  Serial.print(imu.calcMag(imu.mx), 2);
 80a0442:	f001 fefd 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0446:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80a044a:	4606      	mov	r6, r0
 80a044c:	4620      	mov	r0, r4
 80a044e:	f000 fa48 	bl	80a08e2 <_ZN7LSM9DS17calcMagEs>
 80a0452:	f002 ff41 	bl	80a32d8 <__aeabi_f2d>
 80a0456:	4602      	mov	r2, r0
 80a0458:	4630      	mov	r0, r6
  Serial.print(", ");
 80a045a:	4e1d      	ldr	r6, [pc, #116]	; (80a04d0 <_Z8printMagv+0xa4>)
  Serial.print("M: ");
#ifdef PRINT_CALCULATED
  // If you want to print calculated values, you can use the
  // calcMag helper function to convert a raw ADC value to
  // Gauss. Give the function the value that you want to convert.
  Serial.print(imu.calcMag(imu.mx), 2);
 80a045c:	460b      	mov	r3, r1
 80a045e:	9500      	str	r5, [sp, #0]
 80a0460:	f001 face 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a0464:	f001 feec 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0468:	4631      	mov	r1, r6
 80a046a:	f001 f99f 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(imu.calcMag(imu.my), 2);
 80a046e:	f001 fee7 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0472:	f9b4 1036 	ldrsh.w	r1, [r4, #54]	; 0x36
 80a0476:	4607      	mov	r7, r0
 80a0478:	4620      	mov	r0, r4
 80a047a:	f000 fa32 	bl	80a08e2 <_ZN7LSM9DS17calcMagEs>
 80a047e:	f002 ff2b 	bl	80a32d8 <__aeabi_f2d>
 80a0482:	9500      	str	r5, [sp, #0]
 80a0484:	4602      	mov	r2, r0
 80a0486:	460b      	mov	r3, r1
 80a0488:	4638      	mov	r0, r7
 80a048a:	f001 fab9 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a048e:	f001 fed7 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0492:	4631      	mov	r1, r6
 80a0494:	f001 f98a 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(imu.calcMag(imu.mz), 2);
 80a0498:	f001 fed2 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a049c:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80a04a0:	4606      	mov	r6, r0
 80a04a2:	4620      	mov	r0, r4
 80a04a4:	f000 fa1d 	bl	80a08e2 <_ZN7LSM9DS17calcMagEs>
 80a04a8:	f002 ff16 	bl	80a32d8 <__aeabi_f2d>
 80a04ac:	9500      	str	r5, [sp, #0]
 80a04ae:	4602      	mov	r2, r0
 80a04b0:	460b      	mov	r3, r1
 80a04b2:	4630      	mov	r0, r6
 80a04b4:	f001 faa4 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.println(" gauss");
 80a04b8:	f001 fec2 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a04bc:	4905      	ldr	r1, [pc, #20]	; (80a04d4 <_Z8printMagv+0xa8>)
  Serial.print(", ");
  Serial.print(imu.my);
  Serial.print(", ");
  Serial.println(imu.mz);
#endif
}
 80a04be:	b003      	add	sp, #12
 80a04c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Serial.print(imu.calcMag(imu.mx), 2);
  Serial.print(", ");
  Serial.print(imu.calcMag(imu.my), 2);
  Serial.print(", ");
  Serial.print(imu.calcMag(imu.mz), 2);
  Serial.println(" gauss");
 80a04c4:	f001 b98b 	b.w	80a17de <_ZN5Print7printlnEPKc>
 80a04c8:	20000098 	.word	0x20000098
 80a04cc:	080a41bb 	.word	0x080a41bb
 80a04d0:	080a41aa 	.word	0x080a41aa
 80a04d4:	080a41bf 	.word	0x080a41bf

080a04d8 <_Z13printAttitudeffffff>:
// http://cache.freescale.com/files/sensors/doc/app_note/AN3461.pdf?fpsp=1
// Heading calculations taken from this app note:
// http://www51.honeywell.com/aero/common/documents/myaerospacecatalog-documents/Defense_Brochures-documents/Magnetic__Literature_Application_notes-documents/AN203_Compass_Heading_Using_Magnetometers.pdf
void printAttitude(
float ax, float ay, float az, float mx, float my, float mz)
{
 80a04d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a04dc:	4604      	mov	r4, r0
  float roll = atan2(ay, az);
 80a04de:	4610      	mov	r0, r2
// http://cache.freescale.com/files/sensors/doc/app_note/AN3461.pdf?fpsp=1
// Heading calculations taken from this app note:
// http://www51.honeywell.com/aero/common/documents/myaerospacecatalog-documents/Defense_Brochures-documents/Magnetic__Literature_Application_notes-documents/AN203_Compass_Heading_Using_Magnetometers.pdf
void printAttitude(
float ax, float ay, float az, float mx, float my, float mz)
{
 80a04e0:	4692      	mov	sl, r2
 80a04e2:	468b      	mov	fp, r1
 80a04e4:	461d      	mov	r5, r3
  float roll = atan2(ay, az);
 80a04e6:	f002 fef7 	bl	80a32d8 <__aeabi_f2d>
 80a04ea:	4680      	mov	r8, r0
 80a04ec:	4689      	mov	r9, r1
 80a04ee:	4658      	mov	r0, fp
 80a04f0:	f002 fef2 	bl	80a32d8 <__aeabi_f2d>
 80a04f4:	4642      	mov	r2, r8
 80a04f6:	464b      	mov	r3, r9
// http://cache.freescale.com/files/sensors/doc/app_note/AN3461.pdf?fpsp=1
// Heading calculations taken from this app note:
// http://www51.honeywell.com/aero/common/documents/myaerospacecatalog-documents/Defense_Brochures-documents/Magnetic__Literature_Application_notes-documents/AN203_Compass_Heading_Using_Magnetometers.pdf
void printAttitude(
float ax, float ay, float az, float mx, float my, float mz)
{
 80a04f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  float roll = atan2(ay, az);
 80a04fa:	f002 f9f7 	bl	80a28ec <atan2>
 80a04fe:	f003 fa37 	bl	80a3970 <__aeabi_d2f>
  float pitch = atan2(-ax, sqrt(ay * ay + az * az));
 80a0502:	4659      	mov	r1, fp
// Heading calculations taken from this app note:
// http://www51.honeywell.com/aero/common/documents/myaerospacecatalog-documents/Defense_Brochures-documents/Magnetic__Literature_Application_notes-documents/AN203_Compass_Heading_Using_Magnetometers.pdf
void printAttitude(
float ax, float ay, float az, float mx, float my, float mz)
{
  float roll = atan2(ay, az);
 80a0504:	4606      	mov	r6, r0
  float pitch = atan2(-ax, sqrt(ay * ay + az * az));
 80a0506:	4658      	mov	r0, fp
 80a0508:	f003 fb90 	bl	80a3c2c <__aeabi_fmul>
 80a050c:	4651      	mov	r1, sl
 80a050e:	4680      	mov	r8, r0
 80a0510:	4650      	mov	r0, sl
 80a0512:	f003 fb8b 	bl	80a3c2c <__aeabi_fmul>
 80a0516:	4601      	mov	r1, r0
 80a0518:	4640      	mov	r0, r8
 80a051a:	f003 fa7f 	bl	80a3a1c <__addsf3>
 80a051e:	f002 fedb 	bl	80a32d8 <__aeabi_f2d>
 80a0522:	f002 f9e5 	bl	80a28f0 <sqrt>
 80a0526:	4680      	mov	r8, r0
 80a0528:	4689      	mov	r9, r1
 80a052a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a052e:	f002 fed3 	bl	80a32d8 <__aeabi_f2d>
 80a0532:	4642      	mov	r2, r8
 80a0534:	464b      	mov	r3, r9
 80a0536:	f002 f9d9 	bl	80a28ec <atan2>
 80a053a:	f003 fa19 	bl	80a3970 <__aeabi_d2f>
 80a053e:	4680      	mov	r8, r0
  
  float heading;

heading = atan2(mx, mz) * 180.0 / M_PI;
 80a0540:	4638      	mov	r0, r7
 80a0542:	f002 fec9 	bl	80a32d8 <__aeabi_f2d>
 80a0546:	4682      	mov	sl, r0
 80a0548:	468b      	mov	fp, r1
 80a054a:	4628      	mov	r0, r5
 80a054c:	f002 fec4 	bl	80a32d8 <__aeabi_f2d>
 80a0550:	4652      	mov	r2, sl
 80a0552:	465b      	mov	r3, fp
 80a0554:	f002 f9ca 	bl	80a28ec <atan2>
 80a0558:	2200      	movs	r2, #0
 80a055a:	4b61      	ldr	r3, [pc, #388]	; (80a06e0 <_Z13printAttitudeffffff+0x208>)
 80a055c:	f002 ff10 	bl	80a3380 <__aeabi_dmul>
 80a0560:	a359      	add	r3, pc, #356	; (adr r3, 80a06c8 <_Z13printAttitudeffffff+0x1f0>)
 80a0562:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0566:	f003 f835 	bl	80a35d4 <__aeabi_ddiv>
 80a056a:	f003 fa01 	bl	80a3970 <__aeabi_d2f>

    if(heading < 0.0)                         // Convert -180...+180 to 0...360
 80a056e:	2100      	movs	r1, #0
  float roll = atan2(ay, az);
  float pitch = atan2(-ax, sqrt(ay * ay + az * az));
  
  float heading;

heading = atan2(mx, mz) * 180.0 / M_PI;
 80a0570:	4604      	mov	r4, r0

    if(heading < 0.0)                         // Convert -180...+180 to 0...360
 80a0572:	f003 fcf9 	bl	80a3f68 <__aeabi_fcmplt>
 80a0576:	b120      	cbz	r0, 80a0582 <_Z13printAttitudeffffff+0xaa>
      heading = (360.0 + heading);
 80a0578:	4620      	mov	r0, r4
 80a057a:	495a      	ldr	r1, [pc, #360]	; (80a06e4 <_Z13printAttitudeffffff+0x20c>)
 80a057c:	f003 fa4e 	bl	80a3a1c <__addsf3>
 80a0580:	4604      	mov	r4, r0


       heading -= DECLINATION * M_PI / 180;
 80a0582:	4620      	mov	r0, r4
 80a0584:	f002 fea8 	bl	80a32d8 <__aeabi_f2d>
 80a0588:	a351      	add	r3, pc, #324	; (adr r3, 80a06d0 <_Z13printAttitudeffffff+0x1f8>)
 80a058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a058e:	f002 fd45 	bl	80a301c <__adddf3>
 80a0592:	f003 f9ed 	bl	80a3970 <__aeabi_d2f>
 80a0596:	4607      	mov	r7, r0
  // else if (heading < 0) heading += 2 * M_PI;
  
  // Convert everything from radians to degrees:
  // heading *= 180.0 / M_PI;

  pitch *= 180.0 / M_PI;
 80a0598:	4640      	mov	r0, r8
 80a059a:	f002 fe9d 	bl	80a32d8 <__aeabi_f2d>
 80a059e:	a34e      	add	r3, pc, #312	; (adr r3, 80a06d8 <_Z13printAttitudeffffff+0x200>)
 80a05a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05a4:	f002 feec 	bl	80a3380 <__aeabi_dmul>
 80a05a8:	f003 f9e2 	bl	80a3970 <__aeabi_d2f>
 80a05ac:	4605      	mov	r5, r0
  roll  *= 180.0 / M_PI;
 80a05ae:	4630      	mov	r0, r6
 80a05b0:	f002 fe92 	bl	80a32d8 <__aeabi_f2d>
 80a05b4:	a348      	add	r3, pc, #288	; (adr r3, 80a06d8 <_Z13printAttitudeffffff+0x200>)
 80a05b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05ba:	f002 fee1 	bl	80a3380 <__aeabi_dmul>
 80a05be:	f003 f9d7 	bl	80a3970 <__aeabi_d2f>

  if(!calibrated){
 80a05c2:	4e49      	ldr	r6, [pc, #292]	; (80a06e8 <_Z13printAttitudeffffff+0x210>)
  
  // Convert everything from radians to degrees:
  // heading *= 180.0 / M_PI;

  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
 80a05c4:	4604      	mov	r4, r0

  if(!calibrated){
 80a05c6:	7833      	ldrb	r3, [r6, #0]
 80a05c8:	b93b      	cbnz	r3, 80a05da <_Z13printAttitudeffffff+0x102>
    calibratePitch(pitch);
 80a05ca:	4628      	mov	r0, r5
 80a05cc:	f7ff fe46 	bl	80a025c <_Z14calibratePitchf>
    calibrateRoll(roll);
 80a05d0:	4620      	mov	r0, r4
 80a05d2:	f7ff fe61 	bl	80a0298 <_Z13calibrateRollf>
    // calibrate(heading);
    calibrated = true;
 80a05d6:	2301      	movs	r3, #1
 80a05d8:	7033      	strb	r3, [r6, #0]
  }
  // heading-=origin;
  pitch -= originPitch;
 80a05da:	4e44      	ldr	r6, [pc, #272]	; (80a06ec <_Z13printAttitudeffffff+0x214>)
 80a05dc:	4628      	mov	r0, r5
 80a05de:	6831      	ldr	r1, [r6, #0]
 80a05e0:	f003 fa1a 	bl	80a3a18 <__aeabi_fsub>
  roll -= originRoll;
 80a05e4:	4d42      	ldr	r5, [pc, #264]	; (80a06f0 <_Z13printAttitudeffffff+0x218>)
    calibrateRoll(roll);
    // calibrate(heading);
    calibrated = true;
  }
  // heading-=origin;
  pitch -= originPitch;
 80a05e6:	4682      	mov	sl, r0
  roll -= originRoll;
 80a05e8:	6829      	ldr	r1, [r5, #0]
 80a05ea:	4620      	mov	r0, r4
 80a05ec:	f003 fa14 	bl	80a3a18 <__aeabi_fsub>
 80a05f0:	4681      	mov	r9, r0
  Serial.print("Pitch, Roll: ");
 80a05f2:	f001 fe25 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a05f6:	493f      	ldr	r1, [pc, #252]	; (80a06f4 <_Z13printAttitudeffffff+0x21c>)
 80a05f8:	f001 f8d8 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(pitch, 2);
 80a05fc:	f001 fe20 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0600:	4680      	mov	r8, r0
 80a0602:	4650      	mov	r0, sl
 80a0604:	f002 fe68 	bl	80a32d8 <__aeabi_f2d>
 80a0608:	2402      	movs	r4, #2
 80a060a:	4602      	mov	r2, r0
 80a060c:	460b      	mov	r3, r1
 80a060e:	9400      	str	r4, [sp, #0]
 80a0610:	4640      	mov	r0, r8
 80a0612:	f001 f9f5 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a0616:	f001 fe13 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a061a:	4937      	ldr	r1, [pc, #220]	; (80a06f8 <_Z13printAttitudeffffff+0x220>)
 80a061c:	f001 f8c6 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.println(roll, 2);
 80a0620:	f001 fe0e 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0624:	4680      	mov	r8, r0
 80a0626:	4648      	mov	r0, r9
 80a0628:	f002 fe56 	bl	80a32d8 <__aeabi_f2d>
 80a062c:	9400      	str	r4, [sp, #0]
 80a062e:	4602      	mov	r2, r0
 80a0630:	460b      	mov	r3, r1
 80a0632:	4640      	mov	r0, r8
 80a0634:	f001 f9e9 	bl	80a1a0a <_ZN5Print7printlnEdi>
  Serial.println("Heading: "); Serial.println(heading, 2);
 80a0638:	f001 fe02 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a063c:	492f      	ldr	r1, [pc, #188]	; (80a06fc <_Z13printAttitudeffffff+0x224>)
 80a063e:	f001 f8ce 	bl	80a17de <_ZN5Print7printlnEPKc>
 80a0642:	f001 fdfd 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0646:	4680      	mov	r8, r0
 80a0648:	4638      	mov	r0, r7
 80a064a:	f002 fe45 	bl	80a32d8 <__aeabi_f2d>
 80a064e:	9400      	str	r4, [sp, #0]
 80a0650:	4602      	mov	r2, r0
 80a0652:	460b      	mov	r3, r1
 80a0654:	4640      	mov	r0, r8
 80a0656:	f001 f9d8 	bl	80a1a0a <_ZN5Print7printlnEdi>
  Serial.print("origin , pitchH, rollH: ");
 80a065a:	f001 fdf1 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a065e:	4928      	ldr	r1, [pc, #160]	; (80a0700 <_Z13printAttitudeffffff+0x228>)
 80a0660:	f001 f8a4 	bl	80a17ac <_ZN5Print5printEPKc>
  Serial.print(origin);
 80a0664:	f001 fdec 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0668:	4b26      	ldr	r3, [pc, #152]	; (80a0704 <_Z13printAttitudeffffff+0x22c>)
 80a066a:	4607      	mov	r7, r0
 80a066c:	6818      	ldr	r0, [r3, #0]
 80a066e:	f002 fe33 	bl	80a32d8 <__aeabi_f2d>
 80a0672:	9400      	str	r4, [sp, #0]
 80a0674:	4602      	mov	r2, r0
 80a0676:	460b      	mov	r3, r1
 80a0678:	4638      	mov	r0, r7
 80a067a:	f001 f9c1 	bl	80a1a00 <_ZN5Print5printEdi>
  Serial.print(", ");
 80a067e:	f001 fddf 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0682:	491d      	ldr	r1, [pc, #116]	; (80a06f8 <_Z13printAttitudeffffff+0x220>)
 80a0684:	f001 f892 	bl	80a17ac <_ZN5Print5printEPKc>
    Serial.print(originPitch);
 80a0688:	f001 fdda 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a068c:	4607      	mov	r7, r0
 80a068e:	6830      	ldr	r0, [r6, #0]
 80a0690:	f002 fe22 	bl	80a32d8 <__aeabi_f2d>
 80a0694:	9400      	str	r4, [sp, #0]
 80a0696:	4602      	mov	r2, r0
 80a0698:	460b      	mov	r3, r1
 80a069a:	4638      	mov	r0, r7
 80a069c:	f001 f9b0 	bl	80a1a00 <_ZN5Print5printEdi>
    Serial.print(", ");
 80a06a0:	f001 fdce 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a06a4:	4914      	ldr	r1, [pc, #80]	; (80a06f8 <_Z13printAttitudeffffff+0x220>)
 80a06a6:	f001 f881 	bl	80a17ac <_ZN5Print5printEPKc>
      Serial.println(originRoll);
 80a06aa:	f001 fdc9 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a06ae:	4606      	mov	r6, r0
 80a06b0:	6828      	ldr	r0, [r5, #0]
 80a06b2:	f002 fe11 	bl	80a32d8 <__aeabi_f2d>
 80a06b6:	4602      	mov	r2, r0
 80a06b8:	460b      	mov	r3, r1
 80a06ba:	4630      	mov	r0, r6
 80a06bc:	940c      	str	r4, [sp, #48]	; 0x30
}
 80a06be:	b003      	add	sp, #12
 80a06c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.print("origin , pitchH, rollH: ");
  Serial.print(origin);
  Serial.print(", ");
    Serial.print(originPitch);
    Serial.print(", ");
      Serial.println(originRoll);
 80a06c4:	f001 b9a1 	b.w	80a1a0a <_ZN5Print7printlnEdi>
 80a06c8:	54442d18 	.word	0x54442d18
 80a06cc:	400921fb 	.word	0x400921fb
 80a06d0:	1c4f2997 	.word	0x1c4f2997
 80a06d4:	3fcfa8fe 	.word	0x3fcfa8fe
 80a06d8:	1a63c1f8 	.word	0x1a63c1f8
 80a06dc:	404ca5dc 	.word	0x404ca5dc
 80a06e0:	40668000 	.word	0x40668000
 80a06e4:	43b40000 	.word	0x43b40000
 80a06e8:	20000194 	.word	0x20000194
 80a06ec:	2000018c 	.word	0x2000018c
 80a06f0:	20000190 	.word	0x20000190
 80a06f4:	080a41c6 	.word	0x080a41c6
 80a06f8:	080a41aa 	.word	0x080a41aa
 80a06fc:	080a41d4 	.word	0x080a41d4
 80a0700:	080a41de 	.word	0x080a41de
 80a0704:	2000008c 	.word	0x2000008c

080a0708 <loop>:
  }
}


void loop()
{
 80a0708:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

updateTimer.Update();
   imu.readGyro();
 80a070c:	4c21      	ldr	r4, [pc, #132]	; (80a0794 <loop+0x8c>)


void loop()
{

updateTimer.Update();
 80a070e:	4822      	ldr	r0, [pc, #136]	; (80a0798 <loop+0x90>)
 80a0710:	f000 fc83 	bl	80a101a <_ZN20SparkCorePolledTimer6UpdateEv>
   imu.readGyro();
 80a0714:	4620      	mov	r0, r4
 80a0716:	f000 fbf7 	bl	80a0f08 <_ZN7LSM9DS18readGyroEv>
   imu.readAccel();
 80a071a:	4620      	mov	r0, r4
 80a071c:	f000 fbc3 	bl	80a0ea6 <_ZN7LSM9DS19readAccelEv>
   imu.readMag();
 80a0720:	4620      	mov	r0, r4
 80a0722:	f000 fc39 	bl	80a0f98 <_ZN7LSM9DS17readMagEv>
  printGyro();  // Print "G: gx, gy, gz"
 80a0726:	f7ff fdd5 	bl	80a02d4 <_Z9printGyrov>
  printAccel(); // Print "A: ax, ay, az"
 80a072a:	f7ff fe29 	bl	80a0380 <_Z10printAccelv>
  printMag();   // Print "M: mx, my, mz"
 80a072e:	f7ff fe7d 	bl	80a042c <_Z8printMagv>
  
  // Print the heading and orientation for fun!
  // Call print attitude. The LSM9DS1's magnetometer x and y
  // axes are opposite to the accelerometer, so my and mx are
  // substituted for each other.
  printAttitude(imu.ax, imu.ay, imu.az, -imu.my, -imu.mx, imu.mz);
 80a0732:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 80a0736:	4240      	negs	r0, r0
 80a0738:	f003 fa24 	bl	80a3b84 <__aeabi_i2f>
 80a073c:	4680      	mov	r8, r0
 80a073e:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
 80a0742:	f003 fa1f 	bl	80a3b84 <__aeabi_i2f>
 80a0746:	4607      	mov	r7, r0
 80a0748:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80a074c:	f003 fa1a 	bl	80a3b84 <__aeabi_i2f>
 80a0750:	4606      	mov	r6, r0
 80a0752:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
 80a0756:	f003 fa15 	bl	80a3b84 <__aeabi_i2f>
 80a075a:	4605      	mov	r5, r0
 80a075c:	f9b4 0038 	ldrsh.w	r0, [r4, #56]	; 0x38
 80a0760:	f003 fa10 	bl	80a3b84 <__aeabi_i2f>
 80a0764:	9001      	str	r0, [sp, #4]
 80a0766:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 80a076a:	4240      	negs	r0, r0
 80a076c:	f003 fa0a 	bl	80a3b84 <__aeabi_i2f>
 80a0770:	4643      	mov	r3, r8
 80a0772:	463a      	mov	r2, r7
 80a0774:	4631      	mov	r1, r6
 80a0776:	9000      	str	r0, [sp, #0]
 80a0778:	4628      	mov	r0, r5
 80a077a:	f7ff fead 	bl	80a04d8 <_Z13printAttitudeffffff>
  Serial.println();
 80a077e:	f001 fd5f 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0782:	f001 f820 	bl	80a17c6 <_ZN5Print7printlnEv>
  
  delay(PRINT_SPEED);
 80a0786:	20fa      	movs	r0, #250	; 0xfa
}
 80a0788:	b002      	add	sp, #8
 80a078a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  // axes are opposite to the accelerometer, so my and mx are
  // substituted for each other.
  printAttitude(imu.ax, imu.ay, imu.az, -imu.my, -imu.mx, imu.mz);
  Serial.println();
  
  delay(PRINT_SPEED);
 80a078e:	f000 be9b 	b.w	80a14c8 <delay>
 80a0792:	bf00      	nop
 80a0794:	20000098 	.word	0x20000098
 80a0798:	20000180 	.word	0x20000180

080a079c <_GLOBAL__sub_I_SystemMode>:
  Serial.print(origin);
  Serial.print(", ");
    Serial.print(originPitch);
    Serial.print(", ");
      Serial.println(originRoll);
}
 80a079c:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a079e:	f000 fc65 	bl	80a106c <HAL_Pin_Map>

//  #include "/Users/ninjacat/Documents/Particle/TakeHeed/Particle-NeoPixel-master/src/neopixel.h"
// #include "libfixmath.h"


SYSTEM_THREAD(ENABLED);
 80a07a2:	2100      	movs	r1, #0
 80a07a4:	2001      	movs	r0, #1
 80a07a6:	f000 fde3 	bl	80a1370 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a07aa:	4b13      	ldr	r3, [pc, #76]	; (80a07f8 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a07ac:	2200      	movs	r2, #0
 80a07ae:	701a      	strb	r2, [r3, #0]
 80a07b0:	805a      	strh	r2, [r3, #2]
 80a07b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a07b6:	4c11      	ldr	r4, [pc, #68]	; (80a07fc <_GLOBAL__sub_I_SystemMode+0x60>)
 80a07b8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07ba:	2002      	movs	r0, #2
 80a07bc:	f000 fdc8 	bl	80a1350 <set_system_mode>
 80a07c0:	4d0f      	ldr	r5, [pc, #60]	; (80a0800 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a07c2:	4620      	mov	r0, r4
 80a07c4:	f000 ff04 	bl	80a15d0 <_ZN9IPAddressC1Ev>
 80a07c8:	4620      	mov	r0, r4
int port;
UDP udp;
 80a07ca:	4c0e      	ldr	r4, [pc, #56]	; (80a0804 <_GLOBAL__sub_I_SystemMode+0x68>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a07cc:	462a      	mov	r2, r5
 80a07ce:	490e      	ldr	r1, [pc, #56]	; (80a0808 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a07d0:	f001 ff3c 	bl	80a264c <__aeabi_atexit>
int port;
UDP udp;
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	f001 fbbd 	bl	80a1f54 <_ZN3UDPC1Ev>
 80a07da:	462a      	mov	r2, r5
 80a07dc:	490b      	ldr	r1, [pc, #44]	; (80a080c <_GLOBAL__sub_I_SystemMode+0x70>)
 80a07de:	4620      	mov	r0, r4
 80a07e0:	f001 ff34 	bl	80a264c <__aeabi_atexit>
//////////////////////////
// LSM9DS1 Library Init //
//////////////////////////
// Use the LSM9DS1 class to create an object. [imu] can be
// named anything, we'll refer to that throught the sketch.
LSM9DS1 imu;
 80a07e4:	480a      	ldr	r0, [pc, #40]	; (80a0810 <_GLOBAL__sub_I_SystemMode+0x74>)
 80a07e6:	f000 f863 	bl	80a08b0 <_ZN7LSM9DS1C1Ev>
  Serial.print(origin);
  Serial.print(", ");
    Serial.print(originPitch);
    Serial.print(", ");
      Serial.println(originRoll);
}
 80a07ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// your's here:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal
int testPin =D7;
#include "SparkCorePolledTimer.h"
SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a07ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a07f2:	4808      	ldr	r0, [pc, #32]	; (80a0814 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a07f4:	f000 bbf7 	b.w	80a0fe6 <_ZN20SparkCorePolledTimerC1Em>
 80a07f8:	20000090 	.word	0x20000090
 80a07fc:	20000168 	.word	0x20000168
 80a0800:	20000088 	.word	0x20000088
 80a0804:	2000011c 	.word	0x2000011c
 80a0808:	080a00b7 	.word	0x080a00b7
 80a080c:	080a00b9 	.word	0x080a00b9
 80a0810:	20000098 	.word	0x20000098
 80a0814:	20000180 	.word	0x20000180

080a0818 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0818:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a081a:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a081c:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a081e:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0820:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0822:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0824:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0826:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0828:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a082a:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a082c:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a082e:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a0830:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a0832:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0834:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0838:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a083a:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a083c:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a083e:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a0840:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a0842:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0844:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0846:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0848:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a084a:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a084c:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a084e:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0850:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0854:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0856:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0858:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a085a:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a085c:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a085e:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a0860:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a0862:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0864:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0866:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0868:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a086a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a086e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a0870:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a0874:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a0878:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a087a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a087e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a0882:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a0886:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a0888:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a088a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a088c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a088e:	6565      	str	r5, [r4, #84]	; 0x54
 80a0890:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a0894:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a0898:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a089c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a08a0:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a08a4:	d1f0      	bne.n	80a0888 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a08a6:	f04f 0300 	mov.w	r3, #0
 80a08aa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a08ae:	bd30      	pop	{r4, r5, pc}

080a08b0 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a08b0:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a08b2:	231e      	movs	r3, #30
 80a08b4:	226b      	movs	r2, #107	; 0x6b
 80a08b6:	2101      	movs	r1, #1
 80a08b8:	f7ff ffae 	bl	80a0818 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a08bc:	bd10      	pop	{r4, pc}

080a08be <_ZN7LSM9DS18calcGyroEs>:
	
	return value;
}

float LSM9DS1::calcGyro(int16_t gyro)
{
 80a08be:	b510      	push	{r4, lr}
 80a08c0:	4604      	mov	r4, r0
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a08c2:	4608      	mov	r0, r1
 80a08c4:	f003 f95e 	bl	80a3b84 <__aeabi_i2f>
 80a08c8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80a08ca:	f003 f9af 	bl	80a3c2c <__aeabi_fmul>
}
 80a08ce:	bd10      	pop	{r4, pc}

080a08d0 <_ZN7LSM9DS19calcAccelEs>:

float LSM9DS1::calcAccel(int16_t accel)
{
 80a08d0:	b510      	push	{r4, lr}
 80a08d2:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a08d4:	4608      	mov	r0, r1
 80a08d6:	f003 f955 	bl	80a3b84 <__aeabi_i2f>
 80a08da:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a08dc:	f003 f9a6 	bl	80a3c2c <__aeabi_fmul>
}
 80a08e0:	bd10      	pop	{r4, pc}

080a08e2 <_ZN7LSM9DS17calcMagEs>:

float LSM9DS1::calcMag(int16_t mag)
{
 80a08e2:	b510      	push	{r4, lr}
 80a08e4:	4604      	mov	r4, r0
	// Return the mag raw reading times our pre-calculated Gs / (ADC tick):
	return mRes * mag;
 80a08e6:	4608      	mov	r0, r1
 80a08e8:	f003 f94c 	bl	80a3b84 <__aeabi_i2f>
 80a08ec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80a08ee:	f003 f99d 	bl	80a3c2c <__aeabi_fmul>
}
 80a08f2:	bd10      	pop	{r4, pc}

080a08f4 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a08f4:	b510      	push	{r4, lr}
 80a08f6:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a08f8:	88c0      	ldrh	r0, [r0, #6]
 80a08fa:	f003 f93f 	bl	80a3b7c <__aeabi_ui2f>
 80a08fe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0902:	f003 f993 	bl	80a3c2c <__aeabi_fmul>
 80a0906:	6760      	str	r0, [r4, #116]	; 0x74
 80a0908:	bd10      	pop	{r4, pc}

080a090a <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a090a:	b510      	push	{r4, lr}
 80a090c:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a090e:	7dc0      	ldrb	r0, [r0, #23]
 80a0910:	f003 f934 	bl	80a3b7c <__aeabi_ui2f>
 80a0914:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0918:	f003 f988 	bl	80a3c2c <__aeabi_fmul>
 80a091c:	67a0      	str	r0, [r4, #120]	; 0x78
 80a091e:	bd10      	pop	{r4, pc}

080a0920 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0920:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0924:	3b04      	subs	r3, #4
 80a0926:	2b0c      	cmp	r3, #12
 80a0928:	d814      	bhi.n	80a0954 <_ZN7LSM9DS18calcmResEv+0x34>
 80a092a:	e8df f003 	tbb	[pc, r3]
 80a092e:	1307      	.short	0x1307
 80a0930:	130a1313 	.word	0x130a1313
 80a0934:	130d1313 	.word	0x130d1313
 80a0938:	1313      	.short	0x1313
 80a093a:	10          	.byte	0x10
 80a093b:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a093c:	4b06      	ldr	r3, [pc, #24]	; (80a0958 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a093e:	681b      	ldr	r3, [r3, #0]
 80a0940:	e007      	b.n	80a0952 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a0942:	4b05      	ldr	r3, [pc, #20]	; (80a0958 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0944:	685b      	ldr	r3, [r3, #4]
 80a0946:	e004      	b.n	80a0952 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0948:	4b03      	ldr	r3, [pc, #12]	; (80a0958 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a094a:	689b      	ldr	r3, [r3, #8]
 80a094c:	e001      	b.n	80a0952 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0950:	68db      	ldr	r3, [r3, #12]
 80a0952:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a0954:	4770      	bx	lr
 80a0956:	bf00      	nop
 80a0958:	2000000c 	.word	0x2000000c

080a095c <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a095c:	88c3      	ldrh	r3, [r0, #6]
 80a095e:	2bf5      	cmp	r3, #245	; 0xf5
 80a0960:	d007      	beq.n	80a0972 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0962:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0966:	d004      	beq.n	80a0972 <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0968:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a096c:	bf1c      	itt	ne
 80a096e:	23f5      	movne	r3, #245	; 0xf5
 80a0970:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a0972:	7dc2      	ldrb	r2, [r0, #23]
 80a0974:	2a10      	cmp	r2, #16
 80a0976:	d803      	bhi.n	80a0980 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0978:	4b08      	ldr	r3, [pc, #32]	; (80a099c <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a097a:	40d3      	lsrs	r3, r2
 80a097c:	07da      	lsls	r2, r3, #31
 80a097e:	d401      	bmi.n	80a0984 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0980:	2302      	movs	r3, #2
 80a0982:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a0984:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0988:	2a10      	cmp	r2, #16
 80a098a:	d803      	bhi.n	80a0994 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a098c:	4b04      	ldr	r3, [pc, #16]	; (80a09a0 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a098e:	40d3      	lsrs	r3, r2
 80a0990:	07db      	lsls	r3, r3, #31
 80a0992:	d402      	bmi.n	80a099a <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a0994:	2304      	movs	r3, #4
 80a0996:	f880 3020 	strb.w	r3, [r0, #32]
 80a099a:	4770      	bx	lr
 80a099c:	00010114 	.word	0x00010114
 80a09a0:	00011110 	.word	0x00011110

080a09a4 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a09a4:	b510      	push	{r4, lr}
 80a09a6:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a09a8:	2101      	movs	r1, #1
 80a09aa:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a09ae:	f001 fdc9 	bl	80a2544 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a09b2:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a09b6:	2101      	movs	r1, #1
 80a09b8:	f001 fdd5 	bl	80a2566 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a09bc:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a09c0:	2101      	movs	r1, #1
 80a09c2:	f001 fdbf 	bl	80a2544 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a09c6:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a09ca:	4c0a      	ldr	r4, [pc, #40]	; (80a09f4 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a09cc:	2101      	movs	r1, #1
 80a09ce:	f001 fdca 	bl	80a2566 <digitalWrite>
	
	SPI.begin();
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	f001 f858 	bl	80a1a88 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a09d8:	4620      	mov	r0, r4
 80a09da:	2108      	movs	r1, #8
 80a09dc:	f001 f8a6 	bl	80a1b2c <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a09e0:	4620      	mov	r0, r4
 80a09e2:	2101      	movs	r1, #1
 80a09e4:	f001 f855 	bl	80a1a92 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a09e8:	4620      	mov	r0, r4
}
 80a09ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a09ee:	2100      	movs	r1, #0
 80a09f0:	f001 b852 	b.w	80a1a98 <_ZN8SPIClass11setDataModeEh>
 80a09f4:	20000660 	.word	0x20000660

080a09f8 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a09f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a09fa:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a09fc:	4617      	mov	r7, r2
 80a09fe:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0a00:	4d09      	ldr	r5, [pc, #36]	; (80a0a28 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a0a02:	4620      	mov	r0, r4
 80a0a04:	2100      	movs	r1, #0
 80a0a06:	f001 fdae 	bl	80a2566 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0a0a:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0a0e:	4628      	mov	r0, r5
 80a0a10:	f001 f8a0 	bl	80a1b54 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a0a14:	4631      	mov	r1, r6
 80a0a16:	4628      	mov	r0, r5
 80a0a18:	f001 f89c 	bl	80a1b54 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0a1c:	4620      	mov	r0, r4
}
 80a0a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0a22:	2101      	movs	r1, #1
 80a0a24:	f001 bd9f 	b.w	80a2566 <digitalWrite>
 80a0a28:	20000660 	.word	0x20000660

080a0a2c <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a2e:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0a30:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0a34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0a38:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0a3a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0a3e:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0a42:	d103      	bne.n	80a0a4c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a0a44:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a0a46:	bf88      	it	hi
 80a0a48:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0a4c:	b28c      	uxth	r4, r1
 80a0a4e:	4620      	mov	r0, r4
 80a0a50:	2100      	movs	r1, #0
 80a0a52:	f001 fd88 	bl	80a2566 <digitalWrite>
	SPI.transfer(rAddress);
 80a0a56:	4629      	mov	r1, r5
 80a0a58:	4809      	ldr	r0, [pc, #36]	; (80a0a80 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0a5a:	f001 f87b 	bl	80a1b54 <_ZN8SPIClass8transferEh>
 80a0a5e:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0a60:	1bab      	subs	r3, r5, r6
 80a0a62:	429f      	cmp	r7, r3
 80a0a64:	dd06      	ble.n	80a0a74 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a0a66:	2100      	movs	r1, #0
 80a0a68:	4805      	ldr	r0, [pc, #20]	; (80a0a80 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0a6a:	f001 f873 	bl	80a1b54 <_ZN8SPIClass8transferEh>
 80a0a6e:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a0a72:	e7f5      	b.n	80a0a60 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	2101      	movs	r1, #1
 80a0a78:	f001 fd75 	bl	80a2566 <digitalWrite>
	
	return 1;
}
 80a0a7c:	2001      	movs	r0, #1
 80a0a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0a80:	20000660 	.word	0x20000660

080a0a84 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a0a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a0a86:	2301      	movs	r3, #1
 80a0a88:	9300      	str	r3, [sp, #0]
 80a0a8a:	f10d 030f 	add.w	r3, sp, #15
 80a0a8e:	f7ff ffcd 	bl	80a0a2c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a0a92:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a0a96:	b005      	add	sp, #20
 80a0a98:	f85d fb04 	ldr.w	pc, [sp], #4

080a0a9c <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a0a9c:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a0a9e:	f001 fd7b 	bl	80a2598 <_Z19__fetch_global_Wirev>
}
 80a0aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a0aa6:	f000 bd59 	b.w	80a155c <_ZN7TwoWire5beginEv>

080a0aaa <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a0aaa:	b570      	push	{r4, r5, r6, lr}
 80a0aac:	460e      	mov	r6, r1
 80a0aae:	4615      	mov	r5, r2
 80a0ab0:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a0ab2:	f001 fd71 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0ab6:	4631      	mov	r1, r6
 80a0ab8:	f000 fd62 	bl	80a1580 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a0abc:	f001 fd6c 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0ac0:	6803      	ldr	r3, [r0, #0]
 80a0ac2:	4629      	mov	r1, r5
 80a0ac4:	689b      	ldr	r3, [r3, #8]
 80a0ac6:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a0ac8:	f001 fd66 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0acc:	6803      	ldr	r3, [r0, #0]
 80a0ace:	4621      	mov	r1, r4
 80a0ad0:	689a      	ldr	r2, [r3, #8]
 80a0ad2:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a0ad4:	f001 fd60 	bl	80a2598 <_Z19__fetch_global_Wirev>
}
 80a0ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a0adc:	f000 bd58 	b.w	80a1590 <_ZN7TwoWire15endTransmissionEv>

080a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0ae0:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0ae2:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0ae4:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0ae6:	2a01      	cmp	r2, #1
 80a0ae8:	d105      	bne.n	80a0af6 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0aea:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a0aec:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a0aee:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0af2:	f7ff bfda 	b.w	80a0aaa <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0af6:	b92a      	cbnz	r2, 80a0b04 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0af8:	460a      	mov	r2, r1
}
 80a0afa:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0afc:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0b00:	f7ff bf7a 	b.w	80a09f8 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0b04:	bc10      	pop	{r4}
 80a0b06:	4770      	bx	lr

080a0b08 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0b08:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0b0a:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0b0c:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0b0e:	b113      	cbz	r3, 80a0b16 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0b10:	7a03      	ldrb	r3, [r0, #8]
 80a0b12:	015b      	lsls	r3, r3, #5
 80a0b14:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a0b16:	88e2      	ldrh	r2, [r4, #6]
 80a0b18:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0b1c:	d005      	beq.n	80a0b2a <_ZN7LSM9DS18initGyroEv+0x22>
 80a0b1e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a0b22:	d104      	bne.n	80a0b2e <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a0b24:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0b28:	e001      	b.n	80a0b2e <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0b2a:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0b2e:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0b30:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0b32:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0b36:	431a      	orrs	r2, r3
 80a0b38:	4620      	mov	r0, r4
 80a0b3a:	f7ff ffd1 	bl	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0b3e:	2200      	movs	r2, #0
 80a0b40:	2111      	movs	r1, #17
 80a0b42:	4620      	mov	r0, r4
 80a0b44:	f7ff ffcc 	bl	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0b48:	7aa3      	ldrb	r3, [r4, #10]
 80a0b4a:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0b4c:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0b4e:	bf14      	ite	ne
 80a0b50:	2280      	movne	r2, #128	; 0x80
 80a0b52:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a0b54:	b12b      	cbz	r3, 80a0b62 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a0b56:	7b23      	ldrb	r3, [r4, #12]
 80a0b58:	f003 030f 	and.w	r3, r3, #15
 80a0b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0b60:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a0b62:	2112      	movs	r1, #18
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff ffbb 	bl	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0b6a:	7ce3      	ldrb	r3, [r4, #19]
 80a0b6c:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0b6e:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0b70:	bf0c      	ite	eq
 80a0b72:	2200      	moveq	r2, #0
 80a0b74:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0b76:	b113      	cbz	r3, 80a0b7e <_ZN7LSM9DS18initGyroEv+0x76>
 80a0b78:	f042 0210 	orr.w	r2, r2, #16
 80a0b7c:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0b7e:	7c63      	ldrb	r3, [r4, #17]
 80a0b80:	b10b      	cbz	r3, 80a0b86 <_ZN7LSM9DS18initGyroEv+0x7e>
 80a0b82:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a0b86:	7d23      	ldrb	r3, [r4, #20]
 80a0b88:	b10b      	cbz	r3, 80a0b8e <_ZN7LSM9DS18initGyroEv+0x86>
 80a0b8a:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0b8e:	211e      	movs	r1, #30
 80a0b90:	4620      	mov	r0, r4
 80a0b92:	f7ff ffa5 	bl	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0b96:	7b63      	ldrb	r3, [r4, #13]
 80a0b98:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0b9a:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a0b9c:	bf0c      	ite	eq
 80a0b9e:	2200      	moveq	r2, #0
 80a0ba0:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a0ba2:	b113      	cbz	r3, 80a0baa <_ZN7LSM9DS18initGyroEv+0xa2>
 80a0ba4:	f042 0210 	orr.w	r2, r2, #16
 80a0ba8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a0baa:	7be3      	ldrb	r3, [r4, #15]
 80a0bac:	b10b      	cbz	r3, 80a0bb2 <_ZN7LSM9DS18initGyroEv+0xaa>
 80a0bae:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0bb2:	4620      	mov	r0, r4
}
 80a0bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a0bb8:	2113      	movs	r1, #19
 80a0bba:	f7ff bf91 	b.w	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>

080a0bbe <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a0bbe:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0bc0:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a0bc2:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0bc4:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0bc6:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a0bc8:	bf0c      	ite	eq
 80a0bca:	2200      	moveq	r2, #0
 80a0bcc:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a0bce:	b113      	cbz	r3, 80a0bd6 <_ZN7LSM9DS19initAccelEv+0x18>
 80a0bd0:	f042 0210 	orr.w	r2, r2, #16
 80a0bd4:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a0bd6:	7e63      	ldrb	r3, [r4, #25]
 80a0bd8:	b10b      	cbz	r3, 80a0bde <_ZN7LSM9DS19initAccelEv+0x20>
 80a0bda:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a0bde:	211f      	movs	r1, #31
 80a0be0:	4620      	mov	r0, r4
 80a0be2:	f7ff ff7d 	bl	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a0be6:	7da2      	ldrb	r2, [r4, #22]
 80a0be8:	b112      	cbz	r2, 80a0bf0 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a0bea:	7e22      	ldrb	r2, [r4, #24]
 80a0bec:	0152      	lsls	r2, r2, #5
 80a0bee:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a0bf0:	7de3      	ldrb	r3, [r4, #23]
 80a0bf2:	2b08      	cmp	r3, #8
 80a0bf4:	d006      	beq.n	80a0c04 <_ZN7LSM9DS19initAccelEv+0x46>
 80a0bf6:	2b10      	cmp	r3, #16
 80a0bf8:	d007      	beq.n	80a0c0a <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0bfa:	2b04      	cmp	r3, #4
 80a0bfc:	d107      	bne.n	80a0c0e <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0bfe:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a0c02:	e004      	b.n	80a0c0e <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a0c04:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0c08:	e001      	b.n	80a0c0e <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0c0a:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0c0e:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0c12:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0c14:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a0c16:	bfa2      	ittt	ge
 80a0c18:	f003 0303 	andge.w	r3, r3, #3
 80a0c1c:	431a      	orrge	r2, r3
 80a0c1e:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	f7ff ff5c 	bl	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0c28:	7f62      	ldrb	r2, [r4, #29]
 80a0c2a:	b12a      	cbz	r2, 80a0c38 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0c2c:	7fa2      	ldrb	r2, [r4, #30]
 80a0c2e:	0152      	lsls	r2, r2, #5
 80a0c30:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0c38:	4620      	mov	r0, r4
}
 80a0c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0c3e:	2121      	movs	r1, #33	; 0x21
 80a0c40:	f7ff bf4e 	b.w	80a0ae0 <_ZN7LSM9DS111xgWriteByteEhh>

080a0c44 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0c44:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0c46:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0c48:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0c4a:	2a01      	cmp	r2, #1
 80a0c4c:	d105      	bne.n	80a0c5a <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0c4e:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0c50:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0c52:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0c56:	f7ff bf28 	b.w	80a0aaa <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0c5a:	b92a      	cbnz	r2, 80a0c68 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0c5c:	460a      	mov	r2, r1
}
 80a0c5e:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0c60:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0c64:	f7ff bec8 	b.w	80a09f8 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0c68:	bc10      	pop	{r4}
 80a0c6a:	4770      	bx	lr

080a0c6c <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0c6c:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0c6e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a0c72:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0c74:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0c76:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0c7a:	bf08      	it	eq
 80a0c7c:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0c7e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a0c82:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a0c86:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a0c8a:	bf18      	it	ne
 80a0c8c:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a0c8e:	009b      	lsls	r3, r3, #2
 80a0c90:	f003 031c 	and.w	r3, r3, #28
 80a0c94:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a0c96:	431a      	orrs	r2, r3
 80a0c98:	2120      	movs	r1, #32
 80a0c9a:	f7ff ffd3 	bl	80a0c44 <_ZN7LSM9DS110mWriteByteEhh>
 80a0c9e:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0ca2:	4620      	mov	r0, r4
 80a0ca4:	3b08      	subs	r3, #8
 80a0ca6:	b2db      	uxtb	r3, r3
 80a0ca8:	2b08      	cmp	r3, #8
 80a0caa:	bf96      	itet	ls
 80a0cac:	4a12      	ldrls	r2, [pc, #72]	; (80a0cf8 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a0cae:	2200      	movhi	r2, #0
 80a0cb0:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a0cb2:	2121      	movs	r1, #33	; 0x21
 80a0cb4:	f7ff ffc6 	bl	80a0c44 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0cb8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0cbc:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0cbe:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0cc0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a0cc4:	bf0c      	ite	eq
 80a0cc6:	2200      	moveq	r2, #0
 80a0cc8:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0cca:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0cce:	431a      	orrs	r2, r3
 80a0cd0:	2122      	movs	r1, #34	; 0x22
 80a0cd2:	f7ff ffb7 	bl	80a0c44 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0cd6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	0092      	lsls	r2, r2, #2
 80a0cde:	f002 020c 	and.w	r2, r2, #12
 80a0ce2:	2123      	movs	r1, #35	; 0x23
 80a0ce4:	f7ff ffae 	bl	80a0c44 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0ce8:	4620      	mov	r0, r4
}
 80a0cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0cee:	2200      	movs	r2, #0
 80a0cf0:	2124      	movs	r1, #36	; 0x24
 80a0cf2:	f7ff bfa7 	b.w	80a0c44 <_ZN7LSM9DS110mWriteByteEhh>
 80a0cf6:	bf00      	nop
 80a0cf8:	080a41f7 	.word	0x080a41f7

080a0cfc <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0cfc:	b538      	push	{r3, r4, r5, lr}
 80a0cfe:	460c      	mov	r4, r1
 80a0d00:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0d02:	f001 fc49 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0d06:	4621      	mov	r1, r4
 80a0d08:	f000 fc3a 	bl	80a1580 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0d0c:	f001 fc44 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0d10:	6803      	ldr	r3, [r0, #0]
 80a0d12:	4629      	mov	r1, r5
 80a0d14:	689b      	ldr	r3, [r3, #8]
 80a0d16:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0d18:	f001 fc3e 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0d1c:	2100      	movs	r1, #0
 80a0d1e:	f000 fc33 	bl	80a1588 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0d22:	f001 fc39 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0d26:	2201      	movs	r2, #1
 80a0d28:	4621      	mov	r1, r4
 80a0d2a:	f000 fc26 	bl	80a157a <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0d2e:	f001 fc33 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0d32:	6803      	ldr	r3, [r0, #0]
 80a0d34:	695b      	ldr	r3, [r3, #20]
 80a0d36:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0d38:	b2c0      	uxtb	r0, r0
 80a0d3a:	bd38      	pop	{r3, r4, r5, pc}

080a0d3c <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0d3c:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0d3e:	7801      	ldrb	r1, [r0, #0]
 80a0d40:	2901      	cmp	r1, #1
 80a0d42:	d103      	bne.n	80a0d4c <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0d44:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0d48:	f7ff bfd8 	b.w	80a0cfc <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0d4c:	b919      	cbnz	r1, 80a0d56 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0d4e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0d52:	f7ff be97 	b.w	80a0a84 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0d56:	2000      	movs	r0, #0
 80a0d58:	4770      	bx	lr

080a0d5a <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a0d5a:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0d5c:	7801      	ldrb	r1, [r0, #0]
 80a0d5e:	2901      	cmp	r1, #1
 80a0d60:	d103      	bne.n	80a0d6a <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0d62:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0d66:	f7ff bfc9 	b.w	80a0cfc <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0d6a:	b919      	cbnz	r1, 80a0d74 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a0d6c:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0d70:	f7ff be88 	b.w	80a0a84 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0d74:	4770      	bx	lr

080a0d76 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0d76:	b538      	push	{r3, r4, r5, lr}
 80a0d78:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a0d7a:	7843      	ldrb	r3, [r0, #1]
 80a0d7c:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0d80:	7883      	ldrb	r3, [r0, #2]
 80a0d82:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0d86:	f7ff fde9 	bl	80a095c <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a0d8a:	f7ff fdb3 	bl	80a08f4 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0d8e:	4620      	mov	r0, r4
 80a0d90:	f7ff fdc6 	bl	80a0920 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0d94:	4620      	mov	r0, r4
 80a0d96:	f7ff fdb8 	bl	80a090a <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0d9a:	7823      	ldrb	r3, [r4, #0]
 80a0d9c:	2b01      	cmp	r3, #1
 80a0d9e:	d103      	bne.n	80a0da8 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	f7ff fe7b 	bl	80a0a9c <_ZN7LSM9DS17initI2CEv>
 80a0da6:	e003      	b.n	80a0db0 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0da8:	b913      	cbnz	r3, 80a0db0 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0daa:	4620      	mov	r0, r4
 80a0dac:	f7ff fdfa 	bl	80a09a4 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0db0:	210f      	movs	r1, #15
 80a0db2:	4620      	mov	r0, r4
 80a0db4:	f7ff ffd1 	bl	80a0d5a <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0db8:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0dba:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0dbc:	4620      	mov	r0, r4
 80a0dbe:	f7ff ffbd 	bl	80a0d3c <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0dc2:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0dc6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0dca:	b205      	sxth	r5, r0
 80a0dcc:	429d      	cmp	r5, r3
 80a0dce:	d10a      	bne.n	80a0de6 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0dd0:	4620      	mov	r0, r4
 80a0dd2:	f7ff fe99 	bl	80a0b08 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0dd6:	4620      	mov	r0, r4
 80a0dd8:	f7ff fef1 	bl	80a0bbe <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	f7ff ff45 	bl	80a0c6c <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0de2:	4628      	mov	r0, r5
 80a0de4:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0de6:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0de8:	bd38      	pop	{r3, r4, r5, pc}

080a0dea <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a0dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0dee:	4690      	mov	r8, r2
 80a0df0:	460c      	mov	r4, r1
 80a0df2:	461d      	mov	r5, r3
 80a0df4:	f89d 6018 	ldrb.w	r6, [sp, #24]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0df8:	f000 f930 	bl	80a105c <HAL_Timer_Get_Milli_Seconds>
 80a0dfc:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a0dfe:	f001 fbcb 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0e02:	4621      	mov	r1, r4
 80a0e04:	f000 fbbc 	bl	80a1580 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0e08:	f001 fbc6 	bl	80a2598 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0e0c:	6803      	ldr	r3, [r0, #0]
 80a0e0e:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a0e12:	689b      	ldr	r3, [r3, #8]
 80a0e14:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0e16:	f001 fbbf 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0e1a:	2100      	movs	r1, #0
 80a0e1c:	f000 fbb4 	bl	80a1588 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0e20:	f001 fbba 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0e24:	4621      	mov	r1, r4
 80a0e26:	4632      	mov	r2, r6
 80a0e28:	f000 fba7 	bl	80a157a <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0e2c:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0e2e:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a0e32:	42b4      	cmp	r4, r6
 80a0e34:	da1a      	bge.n	80a0e6c <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a0e36:	f001 fbaf 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0e3a:	6803      	ldr	r3, [r0, #0]
 80a0e3c:	691b      	ldr	r3, [r3, #16]
 80a0e3e:	4798      	blx	r3
 80a0e40:	b140      	cbz	r0, 80a0e54 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a0e42:	f001 fba9 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a0e46:	6803      	ldr	r3, [r0, #0]
 80a0e48:	f104 0801 	add.w	r8, r4, #1
 80a0e4c:	695b      	ldr	r3, [r3, #20]
 80a0e4e:	4798      	blx	r3
 80a0e50:	5528      	strb	r0, [r5, r4]
 80a0e52:	4644      	mov	r4, r8
 80a0e54:	f000 f902 	bl	80a105c <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0e58:	42b8      	cmp	r0, r7
 80a0e5a:	d9ea      	bls.n	80a0e32 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a0e5c:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a0e5e:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0e60:	1b62      	subs	r2, r4, r5
 80a0e62:	4296      	cmp	r6, r2
 80a0e64:	dd05      	ble.n	80a0e72 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a0e66:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0e6a:	e7f9      	b.n	80a0e60 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a0e6c:	2001      	movs	r0, #1
 80a0e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a0e72:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a0e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0e78 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e7a:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0e7c:	7801      	ldrb	r1, [r0, #0]
 80a0e7e:	2901      	cmp	r1, #1
 80a0e80:	d107      	bne.n	80a0e92 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a0e82:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0e86:	9300      	str	r3, [sp, #0]
 80a0e88:	4613      	mov	r3, r2
 80a0e8a:	462a      	mov	r2, r5
 80a0e8c:	f7ff ffad 	bl	80a0dea <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0e90:	e007      	b.n	80a0ea2 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0e92:	b931      	cbnz	r1, 80a0ea2 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0e94:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0e98:	9300      	str	r3, [sp, #0]
 80a0e9a:	4613      	mov	r3, r2
 80a0e9c:	462a      	mov	r2, r5
 80a0e9e:	f7ff fdc5 	bl	80a0a2c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0ea2:	b003      	add	sp, #12
 80a0ea4:	bd30      	pop	{r4, r5, pc}

080a0ea6 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0ea8:	2306      	movs	r3, #6
 80a0eaa:	466a      	mov	r2, sp
 80a0eac:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0eae:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0eb0:	f7ff ffe2 	bl	80a0e78 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0eb4:	b330      	cbz	r0, 80a0f04 <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0eb6:	f89d 3000 	ldrb.w	r3, [sp]
 80a0eba:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ebe:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0ec2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ec6:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0eca:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ece:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0ed6:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ed8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0edc:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ee0:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ee2:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0ee4:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0ee6:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0ee8:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0eea:	b15d      	cbz	r5, 80a0f04 <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0eec:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a0ef0:	1b49      	subs	r1, r1, r5
 80a0ef2:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0ef4:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0ef8:	1a52      	subs	r2, r2, r1
 80a0efa:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0efc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a0f00:	1a9b      	subs	r3, r3, r2
 80a0f02:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0f04:	b003      	add	sp, #12
 80a0f06:	bd30      	pop	{r4, r5, pc}

080a0f08 <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0f0a:	2306      	movs	r3, #6
 80a0f0c:	466a      	mov	r2, sp
 80a0f0e:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0f10:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0f12:	f7ff ffb1 	bl	80a0e78 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0f16:	b330      	cbz	r0, 80a0f66 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0f18:	f89d 3000 	ldrb.w	r3, [sp]
 80a0f1c:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0f20:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0f24:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0f28:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0f2c:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0f30:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0f34:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0f38:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0f3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0f3e:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0f42:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0f44:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0f46:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0f48:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0f4a:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a0f4c:	b15d      	cbz	r5, 80a0f66 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a0f4e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a0f52:	1b49      	subs	r1, r1, r5
 80a0f54:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a0f56:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a0f5a:	1a52      	subs	r2, r2, r1
 80a0f5c:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a0f5e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a0f62:	1a9b      	subs	r3, r3, r2
 80a0f64:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a0f66:	b003      	add	sp, #12
 80a0f68:	bd30      	pop	{r4, r5, pc}

080a0f6a <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0f6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f6c:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0f6e:	7801      	ldrb	r1, [r0, #0]
 80a0f70:	2901      	cmp	r1, #1
 80a0f72:	d107      	bne.n	80a0f84 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a0f74:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f78:	9300      	str	r3, [sp, #0]
 80a0f7a:	4613      	mov	r3, r2
 80a0f7c:	462a      	mov	r2, r5
 80a0f7e:	f7ff ff34 	bl	80a0dea <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0f82:	e007      	b.n	80a0f94 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0f84:	b931      	cbnz	r1, 80a0f94 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a0f86:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0f8a:	9300      	str	r3, [sp, #0]
 80a0f8c:	4613      	mov	r3, r2
 80a0f8e:	462a      	mov	r2, r5
 80a0f90:	f7ff fd4c 	bl	80a0a2c <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0f94:	b003      	add	sp, #12
 80a0f96:	bd30      	pop	{r4, r5, pc}

080a0f98 <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0f98:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0f9a:	2306      	movs	r3, #6
 80a0f9c:	466a      	mov	r2, sp
 80a0f9e:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0fa0:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0fa2:	f7ff ffe2 	bl	80a0f6a <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a0fa6:	b1a0      	cbz	r0, 80a0fd2 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a0fa8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a0fac:	f89d 3000 	ldrb.w	r3, [sp]
 80a0fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0fb4:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a0fb6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a0fba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0fbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0fc2:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a0fc4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0fc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0fcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0fd0:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a0fd2:	b002      	add	sp, #8
 80a0fd4:	bd10      	pop	{r4, pc}

080a0fd6 <_GLOBAL__sub_I_magSensitivity>:
 80a0fd6:	f000 b849 	b.w	80a106c <HAL_Pin_Map>

080a0fda <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a0fda:	b510      	push	{r4, lr}
 80a0fdc:	4604      	mov	r4, r0
 80a0fde:	f000 f83d 	bl	80a105c <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a0fe2:	6020      	str	r0, [r4, #0]
 80a0fe4:	bd10      	pop	{r4, pc}

080a0fe6 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a0fe6:	b538      	push	{r3, r4, r5, lr}
 80a0fe8:	4604      	mov	r4, r0
 80a0fea:	460d      	mov	r5, r1
    Reset();
 80a0fec:	f7ff fff5 	bl	80a0fda <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0ff0:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a0ff2:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a0ff4:	60a3      	str	r3, [r4, #8]
}
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	bd38      	pop	{r3, r4, r5, pc}

080a0ffa <_ZN20SparkCorePolledTimer10HasElapsedEv>:

void SparkCorePolledTimer::Reset(void){
    timeMark=millis();
}

int SparkCorePolledTimer::HasElapsed(){
 80a0ffa:	b510      	push	{r4, lr}
 80a0ffc:	4604      	mov	r4, r0
 80a0ffe:	f000 f82d 	bl	80a105c <HAL_Timer_Get_Milli_Seconds>
  
    timeCurrent=millis();
    timeElapsed=timeCurrent-timeMark;  


    if(timeElapsed>=intervalMS) {
 80a1002:	6823      	ldr	r3, [r4, #0]
 80a1004:	1ac0      	subs	r0, r0, r3
 80a1006:	6863      	ldr	r3, [r4, #4]
 80a1008:	4298      	cmp	r0, r3
 80a100a:	d304      	bcc.n	80a1016 <_ZN20SparkCorePolledTimer10HasElapsedEv+0x1c>
        Reset();
 80a100c:	4620      	mov	r0, r4
 80a100e:	f7ff ffe4 	bl	80a0fda <_ZN20SparkCorePolledTimer5ResetEv>
        result=true;
 80a1012:	2001      	movs	r0, #1
 80a1014:	bd10      	pop	{r4, pc}
}

int SparkCorePolledTimer::HasElapsed(){
    unsigned long timeCurrent;
    unsigned long timeElapsed;
    int result=false;
 80a1016:	2000      	movs	r0, #0
    if(timeElapsed>=intervalMS) {
        Reset();
        result=true;
    }
    return(result);  
}
 80a1018:	bd10      	pop	{r4, pc}

080a101a <_ZN20SparkCorePolledTimer6UpdateEv>:

void SparkCorePolledTimer::Update(void){
 80a101a:	b510      	push	{r4, lr}
    if (callback!=NULL) {
 80a101c:	6883      	ldr	r3, [r0, #8]
        result=true;
    }
    return(result);  
}

void SparkCorePolledTimer::Update(void){
 80a101e:	4604      	mov	r4, r0
    if (callback!=NULL) {
 80a1020:	b133      	cbz	r3, 80a1030 <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
        if(HasElapsed()) {
 80a1022:	f7ff ffea 	bl	80a0ffa <_ZN20SparkCorePolledTimer10HasElapsedEv>
 80a1026:	b118      	cbz	r0, 80a1030 <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
            callback();
 80a1028:	68a3      	ldr	r3, [r4, #8]
        }
    }
}
 80a102a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SparkCorePolledTimer::Update(void){
    if (callback!=NULL) {
        if(HasElapsed()) {
            callback();
 80a102e:	4718      	bx	r3
 80a1030:	bd10      	pop	{r4, pc}

080a1032 <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a1032:	6081      	str	r1, [r0, #8]
 80a1034:	4770      	bx	lr

080a1036 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a1036:	f000 b819 	b.w	80a106c <HAL_Pin_Map>
	...

080a103c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a103c:	b508      	push	{r3, lr}
 80a103e:	4b02      	ldr	r3, [pc, #8]	; (80a1048 <os_mutex_create+0xc>)
 80a1040:	681b      	ldr	r3, [r3, #0]
 80a1042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1044:	9301      	str	r3, [sp, #4]
 80a1046:	bd08      	pop	{r3, pc}
 80a1048:	080601d0 	.word	0x080601d0

080a104c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a104c:	b508      	push	{r3, lr}
 80a104e:	4b02      	ldr	r3, [pc, #8]	; (80a1058 <HAL_RNG_GetRandomNumber+0xc>)
 80a1050:	681b      	ldr	r3, [r3, #0]
 80a1052:	685b      	ldr	r3, [r3, #4]
 80a1054:	9301      	str	r3, [sp, #4]
 80a1056:	bd08      	pop	{r3, pc}
 80a1058:	0806019c 	.word	0x0806019c

080a105c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b02      	ldr	r3, [pc, #8]	; (80a1068 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	695b      	ldr	r3, [r3, #20]
 80a1064:	9301      	str	r3, [sp, #4]
 80a1066:	bd08      	pop	{r3, pc}
 80a1068:	0806019c 	.word	0x0806019c

080a106c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a106c:	b508      	push	{r3, lr}
 80a106e:	4b02      	ldr	r3, [pc, #8]	; (80a1078 <HAL_Pin_Map+0xc>)
 80a1070:	681b      	ldr	r3, [r3, #0]
 80a1072:	681b      	ldr	r3, [r3, #0]
 80a1074:	9301      	str	r3, [sp, #4]
 80a1076:	bd08      	pop	{r3, pc}
 80a1078:	080601b0 	.word	0x080601b0

080a107c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a107c:	b508      	push	{r3, lr}
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <HAL_Pin_Mode+0xc>)
 80a1080:	681b      	ldr	r3, [r3, #0]
 80a1082:	689b      	ldr	r3, [r3, #8]
 80a1084:	9301      	str	r3, [sp, #4]
 80a1086:	bd08      	pop	{r3, pc}
 80a1088:	080601b0 	.word	0x080601b0

080a108c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a108c:	b508      	push	{r3, lr}
 80a108e:	4b02      	ldr	r3, [pc, #8]	; (80a1098 <HAL_Get_Pin_Mode+0xc>)
 80a1090:	681b      	ldr	r3, [r3, #0]
 80a1092:	68db      	ldr	r3, [r3, #12]
 80a1094:	9301      	str	r3, [sp, #4]
 80a1096:	bd08      	pop	{r3, pc}
 80a1098:	080601b0 	.word	0x080601b0

080a109c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a109c:	b508      	push	{r3, lr}
 80a109e:	4b02      	ldr	r3, [pc, #8]	; (80a10a8 <HAL_GPIO_Write+0xc>)
 80a10a0:	681b      	ldr	r3, [r3, #0]
 80a10a2:	691b      	ldr	r3, [r3, #16]
 80a10a4:	9301      	str	r3, [sp, #4]
 80a10a6:	bd08      	pop	{r3, pc}
 80a10a8:	080601b0 	.word	0x080601b0

080a10ac <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a10ac:	b508      	push	{r3, lr}
 80a10ae:	4b02      	ldr	r3, [pc, #8]	; (80a10b8 <HAL_I2C_Begin+0xc>)
 80a10b0:	681b      	ldr	r3, [r3, #0]
 80a10b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a10b4:	9301      	str	r3, [sp, #4]
 80a10b6:	bd08      	pop	{r3, pc}
 80a10b8:	080601ac 	.word	0x080601ac

080a10bc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a10bc:	b508      	push	{r3, lr}
 80a10be:	4b02      	ldr	r3, [pc, #8]	; (80a10c8 <HAL_I2C_Request_Data+0xc>)
 80a10c0:	681b      	ldr	r3, [r3, #0]
 80a10c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a10c4:	9301      	str	r3, [sp, #4]
 80a10c6:	bd08      	pop	{r3, pc}
 80a10c8:	080601ac 	.word	0x080601ac

080a10cc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a10cc:	b508      	push	{r3, lr}
 80a10ce:	4b02      	ldr	r3, [pc, #8]	; (80a10d8 <HAL_I2C_Begin_Transmission+0xc>)
 80a10d0:	681b      	ldr	r3, [r3, #0]
 80a10d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a10d4:	9301      	str	r3, [sp, #4]
 80a10d6:	bd08      	pop	{r3, pc}
 80a10d8:	080601ac 	.word	0x080601ac

080a10dc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a10dc:	b508      	push	{r3, lr}
 80a10de:	4b02      	ldr	r3, [pc, #8]	; (80a10e8 <HAL_I2C_End_Transmission+0xc>)
 80a10e0:	681b      	ldr	r3, [r3, #0]
 80a10e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a10e4:	9301      	str	r3, [sp, #4]
 80a10e6:	bd08      	pop	{r3, pc}
 80a10e8:	080601ac 	.word	0x080601ac

080a10ec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a10ec:	b508      	push	{r3, lr}
 80a10ee:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <HAL_I2C_Write_Data+0xc>)
 80a10f0:	681b      	ldr	r3, [r3, #0]
 80a10f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a10f4:	9301      	str	r3, [sp, #4]
 80a10f6:	bd08      	pop	{r3, pc}
 80a10f8:	080601ac 	.word	0x080601ac

080a10fc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <HAL_I2C_Available_Data+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601ac 	.word	0x080601ac

080a110c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <HAL_I2C_Read_Data+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601ac 	.word	0x080601ac

080a111c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <HAL_I2C_Peek_Data+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601ac 	.word	0x080601ac

080a112c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <HAL_I2C_Flush_Data+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601ac 	.word	0x080601ac

080a113c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <HAL_I2C_Is_Enabled+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601ac 	.word	0x080601ac

080a114c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b03      	ldr	r3, [pc, #12]	; (80a115c <HAL_I2C_Init+0x10>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1156:	9301      	str	r3, [sp, #4]
 80a1158:	bd08      	pop	{r3, pc}
 80a115a:	0000      	.short	0x0000
 80a115c:	080601ac 	.word	0x080601ac

080a1160 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1160:	b508      	push	{r3, lr}
 80a1162:	4b02      	ldr	r3, [pc, #8]	; (80a116c <socket_handle_valid+0xc>)
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	685b      	ldr	r3, [r3, #4]
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	080601bc 	.word	0x080601bc

080a1170 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1170:	b508      	push	{r3, lr}
 80a1172:	4b02      	ldr	r3, [pc, #8]	; (80a117c <socket_create+0xc>)
 80a1174:	681b      	ldr	r3, [r3, #0]
 80a1176:	689b      	ldr	r3, [r3, #8]
 80a1178:	9301      	str	r3, [sp, #4]
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	080601bc 	.word	0x080601bc

080a1180 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1180:	b508      	push	{r3, lr}
 80a1182:	4b02      	ldr	r3, [pc, #8]	; (80a118c <socket_receivefrom+0xc>)
 80a1184:	681b      	ldr	r3, [r3, #0]
 80a1186:	695b      	ldr	r3, [r3, #20]
 80a1188:	9301      	str	r3, [sp, #4]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	080601bc 	.word	0x080601bc

080a1190 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a1190:	b508      	push	{r3, lr}
 80a1192:	4b02      	ldr	r3, [pc, #8]	; (80a119c <socket_sendto+0xc>)
 80a1194:	681b      	ldr	r3, [r3, #0]
 80a1196:	69db      	ldr	r3, [r3, #28]
 80a1198:	9301      	str	r3, [sp, #4]
 80a119a:	bd08      	pop	{r3, pc}
 80a119c:	080601bc 	.word	0x080601bc

080a11a0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a11a0:	b508      	push	{r3, lr}
 80a11a2:	4b02      	ldr	r3, [pc, #8]	; (80a11ac <socket_close+0xc>)
 80a11a4:	681b      	ldr	r3, [r3, #0]
 80a11a6:	6a1b      	ldr	r3, [r3, #32]
 80a11a8:	9301      	str	r3, [sp, #4]
 80a11aa:	bd08      	pop	{r3, pc}
 80a11ac:	080601bc 	.word	0x080601bc

080a11b0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a11b0:	b508      	push	{r3, lr}
 80a11b2:	4b02      	ldr	r3, [pc, #8]	; (80a11bc <socket_handle_invalid+0xc>)
 80a11b4:	681b      	ldr	r3, [r3, #0]
 80a11b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11b8:	9301      	str	r3, [sp, #4]
 80a11ba:	bd08      	pop	{r3, pc}
 80a11bc:	080601bc 	.word	0x080601bc

080a11c0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a11c0:	b508      	push	{r3, lr}
 80a11c2:	4b02      	ldr	r3, [pc, #8]	; (80a11cc <HAL_SPI_Begin+0xc>)
 80a11c4:	681b      	ldr	r3, [r3, #0]
 80a11c6:	681b      	ldr	r3, [r3, #0]
 80a11c8:	9301      	str	r3, [sp, #4]
 80a11ca:	bd08      	pop	{r3, pc}
 80a11cc:	080601b4 	.word	0x080601b4

080a11d0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a11d0:	b508      	push	{r3, lr}
 80a11d2:	4b02      	ldr	r3, [pc, #8]	; (80a11dc <HAL_SPI_Set_Bit_Order+0xc>)
 80a11d4:	681b      	ldr	r3, [r3, #0]
 80a11d6:	689b      	ldr	r3, [r3, #8]
 80a11d8:	9301      	str	r3, [sp, #4]
 80a11da:	bd08      	pop	{r3, pc}
 80a11dc:	080601b4 	.word	0x080601b4

080a11e0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a11e0:	b508      	push	{r3, lr}
 80a11e2:	4b02      	ldr	r3, [pc, #8]	; (80a11ec <HAL_SPI_Set_Data_Mode+0xc>)
 80a11e4:	681b      	ldr	r3, [r3, #0]
 80a11e6:	68db      	ldr	r3, [r3, #12]
 80a11e8:	9301      	str	r3, [sp, #4]
 80a11ea:	bd08      	pop	{r3, pc}
 80a11ec:	080601b4 	.word	0x080601b4

080a11f0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a11f0:	b508      	push	{r3, lr}
 80a11f2:	4b02      	ldr	r3, [pc, #8]	; (80a11fc <HAL_SPI_Set_Clock_Divider+0xc>)
 80a11f4:	681b      	ldr	r3, [r3, #0]
 80a11f6:	691b      	ldr	r3, [r3, #16]
 80a11f8:	9301      	str	r3, [sp, #4]
 80a11fa:	bd08      	pop	{r3, pc}
 80a11fc:	080601b4 	.word	0x080601b4

080a1200 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1200:	b508      	push	{r3, lr}
 80a1202:	4b02      	ldr	r3, [pc, #8]	; (80a120c <HAL_SPI_Send_Receive_Data+0xc>)
 80a1204:	681b      	ldr	r3, [r3, #0]
 80a1206:	695b      	ldr	r3, [r3, #20]
 80a1208:	9301      	str	r3, [sp, #4]
 80a120a:	bd08      	pop	{r3, pc}
 80a120c:	080601b4 	.word	0x080601b4

080a1210 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <HAL_SPI_Init+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	69db      	ldr	r3, [r3, #28]
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601b4 	.word	0x080601b4

080a1220 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <HAL_SPI_Is_Enabled+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	6a1b      	ldr	r3, [r3, #32]
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601b4 	.word	0x080601b4

080a1230 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <HAL_SPI_Info+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	080601b4 	.word	0x080601b4

080a1240 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <HAL_USART_Init+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	699b      	ldr	r3, [r3, #24]
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	080601c4 	.word	0x080601c4

080a1250 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <HAL_USART_Write_Data+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	080601c4 	.word	0x080601c4

080a1260 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <HAL_USART_Available_Data+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	080601c4 	.word	0x080601c4

080a1270 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <HAL_USART_Read_Data+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601c4 	.word	0x080601c4

080a1280 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <HAL_USART_Peek_Data+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601c4 	.word	0x080601c4

080a1290 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <HAL_USART_Flush_Data+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601c4 	.word	0x080601c4

080a12a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <HAL_USART_Is_Enabled+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601c4 	.word	0x080601c4

080a12b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <HAL_USART_Available_Data_For_Write+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601c4 	.word	0x080601c4

080a12c0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <HAL_USART_BeginConfig+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601c4 	.word	0x080601c4

080a12d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <HAL_USB_USART_Init+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	681b      	ldr	r3, [r3, #0]
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601d8 	.word	0x080601d8

080a12e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <HAL_USB_USART_Available_Data+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	691b      	ldr	r3, [r3, #16]
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	080601d8 	.word	0x080601d8

080a12f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	695b      	ldr	r3, [r3, #20]
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601d8 	.word	0x080601d8

080a1300 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <HAL_USB_USART_Receive_Data+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	699b      	ldr	r3, [r3, #24]
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601d8 	.word	0x080601d8

080a1310 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <HAL_USB_USART_Send_Data+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	69db      	ldr	r3, [r3, #28]
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601d8 	.word	0x080601d8

080a1320 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <HAL_USB_USART_Flush_Data+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6a1b      	ldr	r3, [r3, #32]
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601d8 	.word	0x080601d8

080a1330 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_USB_USART_Is_Enabled+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601d8 	.word	0x080601d8

080a1340 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <inet_gethostbyname+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601c0 	.word	0x080601c0

080a1350 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <set_system_mode+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	685b      	ldr	r3, [r3, #4]
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601a4 	.word	0x080601a4

080a1360 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <system_delay_ms+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	695b      	ldr	r3, [r3, #20]
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601a4 	.word	0x080601a4

080a1370 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <system_thread_set_state+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601a4 	.word	0x080601a4

080a1380 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b03      	ldr	r3, [pc, #12]	; (80a1390 <system_ctrl_set_app_request_handler+0x10>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a138a:	9301      	str	r3, [sp, #4]
 80a138c:	bd08      	pop	{r3, pc}
 80a138e:	0000      	.short	0x0000
 80a1390:	080601a4 	.word	0x080601a4

080a1394 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1394:	b508      	push	{r3, lr}
 80a1396:	4b03      	ldr	r3, [pc, #12]	; (80a13a4 <system_ctrl_set_result+0x10>)
 80a1398:	681b      	ldr	r3, [r3, #0]
 80a139a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a139e:	9301      	str	r3, [sp, #4]
 80a13a0:	bd08      	pop	{r3, pc}
 80a13a2:	0000      	.short	0x0000
 80a13a4:	080601a4 	.word	0x080601a4

080a13a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601cc 	.word	0x080601cc

080a13b8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <network_config+0xc>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	681b      	ldr	r3, [r3, #0]
 80a13c0:	9301      	str	r3, [sp, #4]
 80a13c2:	bd08      	pop	{r3, pc}
 80a13c4:	080601c8 	.word	0x080601c8

080a13c8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a13c8:	b508      	push	{r3, lr}
 80a13ca:	4b02      	ldr	r3, [pc, #8]	; (80a13d4 <network_connect+0xc>)
 80a13cc:	681b      	ldr	r3, [r3, #0]
 80a13ce:	685b      	ldr	r3, [r3, #4]
 80a13d0:	9301      	str	r3, [sp, #4]
 80a13d2:	bd08      	pop	{r3, pc}
 80a13d4:	080601c8 	.word	0x080601c8

080a13d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a13d8:	b508      	push	{r3, lr}
 80a13da:	4b02      	ldr	r3, [pc, #8]	; (80a13e4 <network_connecting+0xc>)
 80a13dc:	681b      	ldr	r3, [r3, #0]
 80a13de:	689b      	ldr	r3, [r3, #8]
 80a13e0:	9301      	str	r3, [sp, #4]
 80a13e2:	bd08      	pop	{r3, pc}
 80a13e4:	080601c8 	.word	0x080601c8

080a13e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a13e8:	b508      	push	{r3, lr}
 80a13ea:	4b02      	ldr	r3, [pc, #8]	; (80a13f4 <network_disconnect+0xc>)
 80a13ec:	681b      	ldr	r3, [r3, #0]
 80a13ee:	68db      	ldr	r3, [r3, #12]
 80a13f0:	9301      	str	r3, [sp, #4]
 80a13f2:	bd08      	pop	{r3, pc}
 80a13f4:	080601c8 	.word	0x080601c8

080a13f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a13f8:	b508      	push	{r3, lr}
 80a13fa:	4b02      	ldr	r3, [pc, #8]	; (80a1404 <network_ready+0xc>)
 80a13fc:	681b      	ldr	r3, [r3, #0]
 80a13fe:	691b      	ldr	r3, [r3, #16]
 80a1400:	9301      	str	r3, [sp, #4]
 80a1402:	bd08      	pop	{r3, pc}
 80a1404:	080601c8 	.word	0x080601c8

080a1408 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1408:	b508      	push	{r3, lr}
 80a140a:	4b02      	ldr	r3, [pc, #8]	; (80a1414 <network_on+0xc>)
 80a140c:	681b      	ldr	r3, [r3, #0]
 80a140e:	695b      	ldr	r3, [r3, #20]
 80a1410:	9301      	str	r3, [sp, #4]
 80a1412:	bd08      	pop	{r3, pc}
 80a1414:	080601c8 	.word	0x080601c8

080a1418 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1418:	b508      	push	{r3, lr}
 80a141a:	4b02      	ldr	r3, [pc, #8]	; (80a1424 <network_off+0xc>)
 80a141c:	681b      	ldr	r3, [r3, #0]
 80a141e:	699b      	ldr	r3, [r3, #24]
 80a1420:	9301      	str	r3, [sp, #4]
 80a1422:	bd08      	pop	{r3, pc}
 80a1424:	080601c8 	.word	0x080601c8

080a1428 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1428:	b508      	push	{r3, lr}
 80a142a:	4b02      	ldr	r3, [pc, #8]	; (80a1434 <network_listen+0xc>)
 80a142c:	681b      	ldr	r3, [r3, #0]
 80a142e:	69db      	ldr	r3, [r3, #28]
 80a1430:	9301      	str	r3, [sp, #4]
 80a1432:	bd08      	pop	{r3, pc}
 80a1434:	080601c8 	.word	0x080601c8

080a1438 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1438:	b508      	push	{r3, lr}
 80a143a:	4b02      	ldr	r3, [pc, #8]	; (80a1444 <network_listening+0xc>)
 80a143c:	681b      	ldr	r3, [r3, #0]
 80a143e:	6a1b      	ldr	r3, [r3, #32]
 80a1440:	9301      	str	r3, [sp, #4]
 80a1442:	bd08      	pop	{r3, pc}
 80a1444:	080601c8 	.word	0x080601c8

080a1448 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1448:	b508      	push	{r3, lr}
 80a144a:	4b02      	ldr	r3, [pc, #8]	; (80a1454 <network_set_listen_timeout+0xc>)
 80a144c:	681b      	ldr	r3, [r3, #0]
 80a144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1450:	9301      	str	r3, [sp, #4]
 80a1452:	bd08      	pop	{r3, pc}
 80a1454:	080601c8 	.word	0x080601c8

080a1458 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1458:	b508      	push	{r3, lr}
 80a145a:	4b02      	ldr	r3, [pc, #8]	; (80a1464 <network_get_listen_timeout+0xc>)
 80a145c:	681b      	ldr	r3, [r3, #0]
 80a145e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1460:	9301      	str	r3, [sp, #4]
 80a1462:	bd08      	pop	{r3, pc}
 80a1464:	080601c8 	.word	0x080601c8

080a1468 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1468:	b508      	push	{r3, lr}
 80a146a:	4b02      	ldr	r3, [pc, #8]	; (80a1474 <network_set_hostname+0xc>)
 80a146c:	681b      	ldr	r3, [r3, #0]
 80a146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1470:	9301      	str	r3, [sp, #4]
 80a1472:	bd08      	pop	{r3, pc}
 80a1474:	080601c8 	.word	0x080601c8

080a1478 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1478:	b508      	push	{r3, lr}
 80a147a:	4b02      	ldr	r3, [pc, #8]	; (80a1484 <network_get_hostname+0xc>)
 80a147c:	681b      	ldr	r3, [r3, #0]
 80a147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1480:	9301      	str	r3, [sp, #4]
 80a1482:	bd08      	pop	{r3, pc}
 80a1484:	080601c8 	.word	0x080601c8

080a1488 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1488:	b508      	push	{r3, lr}
 80a148a:	4b02      	ldr	r3, [pc, #8]	; (80a1494 <malloc+0xc>)
 80a148c:	681b      	ldr	r3, [r3, #0]
 80a148e:	681b      	ldr	r3, [r3, #0]
 80a1490:	9301      	str	r3, [sp, #4]
 80a1492:	bd08      	pop	{r3, pc}
 80a1494:	080601a0 	.word	0x080601a0

080a1498 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b02      	ldr	r3, [pc, #8]	; (80a14a4 <free+0xc>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	685b      	ldr	r3, [r3, #4]
 80a14a0:	9301      	str	r3, [sp, #4]
 80a14a2:	bd08      	pop	{r3, pc}
 80a14a4:	080601a0 	.word	0x080601a0

080a14a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <realloc+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	689b      	ldr	r3, [r3, #8]
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601a0 	.word	0x080601a0

080a14b8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <__errno+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601a0 	.word	0x080601a0

080a14c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a14c8:	2100      	movs	r1, #0
 80a14ca:	f7ff bf49 	b.w	80a1360 <system_delay_ms>

080a14ce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a14ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a14d0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a14d2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a14d4:	b113      	cbz	r3, 80a14dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a14d6:	2203      	movs	r2, #3
 80a14d8:	4601      	mov	r1, r0
 80a14da:	4798      	blx	r3
    }
 80a14dc:	4620      	mov	r0, r4
 80a14de:	bd10      	pop	{r4, pc}

080a14e0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a14e0:	4770      	bx	lr

080a14e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a14e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14e4:	4606      	mov	r6, r0
 80a14e6:	4615      	mov	r5, r2
 80a14e8:	460c      	mov	r4, r1
 80a14ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a14ec:	42bc      	cmp	r4, r7
 80a14ee:	d006      	beq.n	80a14fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a14f0:	6833      	ldr	r3, [r6, #0]
 80a14f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a14f6:	689b      	ldr	r3, [r3, #8]
 80a14f8:	4630      	mov	r0, r6
 80a14fa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a14fc:	e7f6      	b.n	80a14ec <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a14fe:	4628      	mov	r0, r5
 80a1500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1502 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1502:	2200      	movs	r2, #0
 80a1504:	7c00      	ldrb	r0, [r0, #16]
 80a1506:	f7ff bdf1 	b.w	80a10ec <HAL_I2C_Write_Data>

080a150a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a150a:	2100      	movs	r1, #0
 80a150c:	7c00      	ldrb	r0, [r0, #16]
 80a150e:	f7ff bdf5 	b.w	80a10fc <HAL_I2C_Available_Data>

080a1512 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1512:	2100      	movs	r1, #0
 80a1514:	7c00      	ldrb	r0, [r0, #16]
 80a1516:	f7ff bdf9 	b.w	80a110c <HAL_I2C_Read_Data>

080a151a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a151a:	2100      	movs	r1, #0
 80a151c:	7c00      	ldrb	r0, [r0, #16]
 80a151e:	f7ff bdfd 	b.w	80a111c <HAL_I2C_Peek_Data>

080a1522 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1522:	2100      	movs	r1, #0
 80a1524:	7c00      	ldrb	r0, [r0, #16]
 80a1526:	f7ff be01 	b.w	80a112c <HAL_I2C_Flush_Data>

080a152a <_ZN7TwoWireD0Ev>:
 80a152a:	b510      	push	{r4, lr}
 80a152c:	4604      	mov	r4, r0
 80a152e:	2114      	movs	r1, #20
 80a1530:	f001 f891 	bl	80a2656 <_ZdlPvj>
 80a1534:	4620      	mov	r0, r4
 80a1536:	bd10      	pop	{r4, pc}

080a1538 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1538:	b510      	push	{r4, lr}
 80a153a:	4604      	mov	r4, r0
 80a153c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1542:	60a3      	str	r3, [r4, #8]
 80a1544:	4b04      	ldr	r3, [pc, #16]	; (80a1558 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1546:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1548:	7420      	strb	r0, [r4, #16]
 80a154a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a154c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a154e:	f7ff fdfd 	bl	80a114c <HAL_I2C_Init>

}
 80a1552:	4620      	mov	r0, r4
 80a1554:	bd10      	pop	{r4, pc}
 80a1556:	bf00      	nop
 80a1558:	080a4208 	.word	0x080a4208

080a155c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a155c:	2300      	movs	r3, #0
 80a155e:	461a      	mov	r2, r3
 80a1560:	4619      	mov	r1, r3
 80a1562:	7c00      	ldrb	r0, [r0, #16]
 80a1564:	f7ff bda2 	b.w	80a10ac <HAL_I2C_Begin>

080a1568 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1568:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a156a:	2400      	movs	r4, #0
 80a156c:	7c00      	ldrb	r0, [r0, #16]
 80a156e:	9400      	str	r4, [sp, #0]
 80a1570:	f7ff fda4 	bl	80a10bc <HAL_I2C_Request_Data>
  return result;
}
 80a1574:	b2c0      	uxtb	r0, r0
 80a1576:	b002      	add	sp, #8
 80a1578:	bd10      	pop	{r4, pc}

080a157a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a157a:	2301      	movs	r3, #1
 80a157c:	f7ff bff4 	b.w	80a1568 <_ZN7TwoWire11requestFromEhhh>

080a1580 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1580:	2200      	movs	r2, #0
 80a1582:	7c00      	ldrb	r0, [r0, #16]
 80a1584:	f7ff bda2 	b.w	80a10cc <HAL_I2C_Begin_Transmission>

080a1588 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1588:	2200      	movs	r2, #0
 80a158a:	7c00      	ldrb	r0, [r0, #16]
 80a158c:	f7ff bda6 	b.w	80a10dc <HAL_I2C_End_Transmission>

080a1590 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1590:	2101      	movs	r1, #1
 80a1592:	f7ff bff9 	b.w	80a1588 <_ZN7TwoWire15endTransmissionEh>

080a1596 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1596:	2100      	movs	r1, #0
 80a1598:	7c00      	ldrb	r0, [r0, #16]
 80a159a:	f7ff bdcf 	b.w	80a113c <HAL_I2C_Is_Enabled>

080a159e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a159e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15a0:	460f      	mov	r7, r1
 80a15a2:	f100 0608 	add.w	r6, r0, #8
 80a15a6:	1d05      	adds	r5, r0, #4
 80a15a8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a15aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a15ae:	220a      	movs	r2, #10
 80a15b0:	4638      	mov	r0, r7
 80a15b2:	f000 f952 	bl	80a185a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a15b6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a15b8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a15ba:	d007      	beq.n	80a15cc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a15bc:	2c00      	cmp	r4, #0
 80a15be:	d0f4      	beq.n	80a15aa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a15c0:	212e      	movs	r1, #46	; 0x2e
 80a15c2:	4638      	mov	r0, r7
 80a15c4:	f000 f8f6 	bl	80a17b4 <_ZN5Print5printEc>
 80a15c8:	4404      	add	r4, r0
 80a15ca:	e7ee      	b.n	80a15aa <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a15cc:	4620      	mov	r0, r4
 80a15ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a15d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a15d0:	b510      	push	{r4, lr}
 80a15d2:	4604      	mov	r4, r0
 80a15d4:	4b04      	ldr	r3, [pc, #16]	; (80a15e8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a15d6:	2211      	movs	r2, #17
 80a15d8:	f840 3b04 	str.w	r3, [r0], #4
 80a15dc:	2100      	movs	r1, #0
 80a15de:	f002 fd04 	bl	80a3fea <memset>
{
    clear();
}
 80a15e2:	4620      	mov	r0, r4
 80a15e4:	bd10      	pop	{r4, pc}
 80a15e6:	bf00      	nop
 80a15e8:	080a4230 	.word	0x080a4230

080a15ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a15ec:	4603      	mov	r3, r0
 80a15ee:	4a07      	ldr	r2, [pc, #28]	; (80a160c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a15f0:	b510      	push	{r4, lr}
 80a15f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a15f6:	f101 0210 	add.w	r2, r1, #16
 80a15fa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a15fe:	4291      	cmp	r1, r2
 80a1600:	f843 4b04 	str.w	r4, [r3], #4
 80a1604:	d1f9      	bne.n	80a15fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1606:	780a      	ldrb	r2, [r1, #0]
 80a1608:	701a      	strb	r2, [r3, #0]
}
 80a160a:	bd10      	pop	{r4, pc}
 80a160c:	080a4230 	.word	0x080a4230

080a1610 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1610:	4a02      	ldr	r2, [pc, #8]	; (80a161c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1612:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1614:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1616:	2204      	movs	r2, #4
 80a1618:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a161a:	4770      	bx	lr
 80a161c:	080a4230 	.word	0x080a4230

080a1620 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1620:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1622:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1626:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a162a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a162e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1632:	2304      	movs	r3, #4
 80a1634:	6041      	str	r1, [r0, #4]
 80a1636:	7503      	strb	r3, [r0, #20]
 80a1638:	bd10      	pop	{r4, pc}
	...

080a163c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a163c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a163e:	4d04      	ldr	r5, [pc, #16]	; (80a1650 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1640:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1642:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1646:	9500      	str	r5, [sp, #0]
 80a1648:	f7ff ffea 	bl	80a1620 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a164c:	b003      	add	sp, #12
 80a164e:	bd30      	pop	{r4, r5, pc}
 80a1650:	080a4230 	.word	0x080a4230

080a1654 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1654:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1656:	780d      	ldrb	r5, [r1, #0]
 80a1658:	788b      	ldrb	r3, [r1, #2]
 80a165a:	784a      	ldrb	r2, [r1, #1]
 80a165c:	78c9      	ldrb	r1, [r1, #3]
 80a165e:	9100      	str	r1, [sp, #0]
 80a1660:	4629      	mov	r1, r5
 80a1662:	f7ff ffdd 	bl	80a1620 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1666:	b003      	add	sp, #12
 80a1668:	bd30      	pop	{r4, r5, pc}
	...

080a166c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a166c:	4a01      	ldr	r2, [pc, #4]	; (80a1674 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1670:	601a      	str	r2, [r3, #0]
 80a1672:	4770      	bx	lr
 80a1674:	080a42b2 	.word	0x080a42b2
 80a1678:	20000198 	.word	0x20000198

080a167c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a167c:	2300      	movs	r3, #0
 80a167e:	461a      	mov	r2, r3
 80a1680:	6840      	ldr	r0, [r0, #4]
 80a1682:	f7ff bea1 	b.w	80a13c8 <network_connect>

080a1686 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1686:	2200      	movs	r2, #0
 80a1688:	2102      	movs	r1, #2
 80a168a:	6840      	ldr	r0, [r0, #4]
 80a168c:	f7ff beac 	b.w	80a13e8 <network_disconnect>

080a1690 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1690:	2200      	movs	r2, #0
 80a1692:	4611      	mov	r1, r2
 80a1694:	6840      	ldr	r0, [r0, #4]
 80a1696:	f7ff be9f 	b.w	80a13d8 <network_connecting>

080a169a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a169a:	2200      	movs	r2, #0
 80a169c:	4611      	mov	r1, r2
 80a169e:	6840      	ldr	r0, [r0, #4]
 80a16a0:	f7ff beaa 	b.w	80a13f8 <network_ready>

080a16a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a16a4:	2300      	movs	r3, #0
 80a16a6:	461a      	mov	r2, r3
 80a16a8:	4619      	mov	r1, r3
 80a16aa:	6840      	ldr	r0, [r0, #4]
 80a16ac:	f7ff beac 	b.w	80a1408 <network_on>

080a16b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a16b0:	2300      	movs	r3, #0
 80a16b2:	461a      	mov	r2, r3
 80a16b4:	4619      	mov	r1, r3
 80a16b6:	6840      	ldr	r0, [r0, #4]
 80a16b8:	f7ff beae 	b.w	80a1418 <network_off>

080a16bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a16bc:	2200      	movs	r2, #0
 80a16be:	f081 0101 	eor.w	r1, r1, #1
 80a16c2:	6840      	ldr	r0, [r0, #4]
 80a16c4:	f7ff beb0 	b.w	80a1428 <network_listen>

080a16c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a16c8:	2200      	movs	r2, #0
 80a16ca:	6840      	ldr	r0, [r0, #4]
 80a16cc:	f7ff bebc 	b.w	80a1448 <network_set_listen_timeout>

080a16d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a16d0:	2200      	movs	r2, #0
 80a16d2:	4611      	mov	r1, r2
 80a16d4:	6840      	ldr	r0, [r0, #4]
 80a16d6:	f7ff bebf 	b.w	80a1458 <network_get_listen_timeout>

080a16da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a16da:	2200      	movs	r2, #0
 80a16dc:	4611      	mov	r1, r2
 80a16de:	6840      	ldr	r0, [r0, #4]
 80a16e0:	f7ff beaa 	b.w	80a1438 <network_listening>

080a16e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a16e4:	b570      	push	{r4, r5, r6, lr}
 80a16e6:	4616      	mov	r6, r2
 80a16e8:	b08e      	sub	sp, #56	; 0x38
 80a16ea:	4604      	mov	r4, r0
    IPAddress addr;
 80a16ec:	a808      	add	r0, sp, #32
 80a16ee:	f7ff ff6f 	bl	80a15d0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a16f2:	2211      	movs	r2, #17
 80a16f4:	2100      	movs	r1, #0
 80a16f6:	a803      	add	r0, sp, #12
 80a16f8:	f002 fc77 	bl	80a3fea <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16fc:	4630      	mov	r0, r6
 80a16fe:	f002 fca5 	bl	80a404c <strlen>
 80a1702:	2500      	movs	r5, #0
 80a1704:	4b0a      	ldr	r3, [pc, #40]	; (80a1730 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1706:	9500      	str	r5, [sp, #0]
 80a1708:	b281      	uxth	r1, r0
 80a170a:	685b      	ldr	r3, [r3, #4]
 80a170c:	aa03      	add	r2, sp, #12
 80a170e:	4630      	mov	r0, r6
 80a1710:	f7ff fe16 	bl	80a1340 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1714:	b120      	cbz	r0, 80a1720 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1716:	4629      	mov	r1, r5
 80a1718:	4620      	mov	r0, r4
 80a171a:	f7ff ff79 	bl	80a1610 <_ZN9IPAddressC1Em>
 80a171e:	e003      	b.n	80a1728 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1720:	a903      	add	r1, sp, #12
 80a1722:	4620      	mov	r0, r4
 80a1724:	f7ff ff62 	bl	80a15ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1728:	4620      	mov	r0, r4
 80a172a:	b00e      	add	sp, #56	; 0x38
 80a172c:	bd70      	pop	{r4, r5, r6, pc}
 80a172e:	bf00      	nop
 80a1730:	2000061c 	.word	0x2000061c

080a1734 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1734:	4b03      	ldr	r3, [pc, #12]	; (80a1744 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1736:	4a04      	ldr	r2, [pc, #16]	; (80a1748 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1738:	2804      	cmp	r0, #4
 80a173a:	bf0c      	ite	eq
 80a173c:	4610      	moveq	r0, r2
 80a173e:	4618      	movne	r0, r3
 80a1740:	4770      	bx	lr
 80a1742:	bf00      	nop
 80a1744:	2000019c 	.word	0x2000019c
 80a1748:	2000061c 	.word	0x2000061c

080a174c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a174c:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a174e:	4a03      	ldr	r2, [pc, #12]	; (80a175c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1750:	601a      	str	r2, [r3, #0]
 80a1752:	2200      	movs	r2, #0
 80a1754:	605a      	str	r2, [r3, #4]
 80a1756:	4770      	bx	lr
 80a1758:	2000019c 	.word	0x2000019c
 80a175c:	080a4324 	.word	0x080a4324

080a1760 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1762:	4606      	mov	r6, r0
 80a1764:	460d      	mov	r5, r1
 80a1766:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1768:	2400      	movs	r4, #0
  while (size--) {
 80a176a:	42bd      	cmp	r5, r7
 80a176c:	d00c      	beq.n	80a1788 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a176e:	6833      	ldr	r3, [r6, #0]
 80a1770:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1774:	689b      	ldr	r3, [r3, #8]
 80a1776:	4630      	mov	r0, r6
 80a1778:	4798      	blx	r3
     if (chunk>=0)
 80a177a:	2800      	cmp	r0, #0
 80a177c:	db01      	blt.n	80a1782 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a177e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1780:	e7f3      	b.n	80a176a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1782:	2c00      	cmp	r4, #0
 80a1784:	bf08      	it	eq
 80a1786:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1788:	4620      	mov	r0, r4
 80a178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a178c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a178c:	b570      	push	{r4, r5, r6, lr}
 80a178e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1790:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1792:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1794:	b149      	cbz	r1, 80a17aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1796:	f002 fc59 	bl	80a404c <strlen>
 80a179a:	682b      	ldr	r3, [r5, #0]
 80a179c:	4602      	mov	r2, r0
 80a179e:	4621      	mov	r1, r4
 80a17a0:	4628      	mov	r0, r5
    }
 80a17a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a17a6:	68db      	ldr	r3, [r3, #12]
 80a17a8:	4718      	bx	r3
    }
 80a17aa:	bd70      	pop	{r4, r5, r6, pc}

080a17ac <_ZN5Print5printEPKc>:
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	f7ff ffed 	bl	80a178c <_ZN5Print5writeEPKc>
 80a17b2:	bd08      	pop	{r3, pc}

080a17b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a17b4:	6803      	ldr	r3, [r0, #0]
 80a17b6:	689b      	ldr	r3, [r3, #8]
 80a17b8:	4718      	bx	r3

080a17ba <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a17ba:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a17bc:	680a      	ldr	r2, [r1, #0]
 80a17be:	4601      	mov	r1, r0
 80a17c0:	6812      	ldr	r2, [r2, #0]
 80a17c2:	4618      	mov	r0, r3
 80a17c4:	4710      	bx	r2

080a17c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a17c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a17c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a17ca:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a17cc:	f7ff fff2 	bl	80a17b4 <_ZN5Print5printEc>
  n += print('\n');
 80a17d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a17d2:	4604      	mov	r4, r0
  n += print('\n');
 80a17d4:	4628      	mov	r0, r5
 80a17d6:	f7ff ffed 	bl	80a17b4 <_ZN5Print5printEc>
  return n;
}
 80a17da:	4420      	add	r0, r4
 80a17dc:	bd38      	pop	{r3, r4, r5, pc}

080a17de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a17de:	b538      	push	{r3, r4, r5, lr}
 80a17e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a17e2:	f7ff ffd3 	bl	80a178c <_ZN5Print5writeEPKc>
 80a17e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a17e8:	4628      	mov	r0, r5
 80a17ea:	f7ff ffec 	bl	80a17c6 <_ZN5Print7printlnEv>
  return n;
}
 80a17ee:	4420      	add	r0, r4
 80a17f0:	bd38      	pop	{r3, r4, r5, pc}

080a17f2 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a17f2:	b538      	push	{r3, r4, r5, lr}
 80a17f4:	4605      	mov	r5, r0
   size_t n = print(x);
 80a17f6:	f7ff ffe0 	bl	80a17ba <_ZN5Print5printERK9Printable>
 80a17fa:	4604      	mov	r4, r0
   n += println();
 80a17fc:	4628      	mov	r0, r5
 80a17fe:	f7ff ffe2 	bl	80a17c6 <_ZN5Print7printlnEv>
   return n;
 }
 80a1802:	4420      	add	r0, r4
 80a1804:	bd38      	pop	{r3, r4, r5, pc}

080a1806 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1806:	2a01      	cmp	r2, #1
 80a1808:	bf98      	it	ls
 80a180a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a180c:	b530      	push	{r4, r5, lr}
 80a180e:	460b      	mov	r3, r1
 80a1810:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1812:	2100      	movs	r1, #0
 80a1814:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1818:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a181c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1820:	fb05 3312 	mls	r3, r5, r2, r3
 80a1824:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1826:	2b09      	cmp	r3, #9
 80a1828:	bf94      	ite	ls
 80a182a:	3330      	addls	r3, #48	; 0x30
 80a182c:	3337      	addhi	r3, #55	; 0x37
 80a182e:	b2db      	uxtb	r3, r3
 80a1830:	4621      	mov	r1, r4
 80a1832:	f804 3901 	strb.w	r3, [r4], #-1
 80a1836:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1838:	2d00      	cmp	r5, #0
 80a183a:	d1ef      	bne.n	80a181c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a183c:	f7ff ffa6 	bl	80a178c <_ZN5Print5writeEPKc>
}
 80a1840:	b00b      	add	sp, #44	; 0x2c
 80a1842:	bd30      	pop	{r4, r5, pc}

080a1844 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1844:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1846:	b922      	cbnz	r2, 80a1852 <_ZN5Print5printEmi+0xe>
 80a1848:	6803      	ldr	r3, [r0, #0]
 80a184a:	b2c9      	uxtb	r1, r1
 80a184c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a184e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1850:	4718      	bx	r3
  else return printNumber(n, base);
 80a1852:	b2d2      	uxtb	r2, r2
}
 80a1854:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1856:	f7ff bfd6 	b.w	80a1806 <_ZN5Print11printNumberEmh>

080a185a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a185a:	f7ff bff3 	b.w	80a1844 <_ZN5Print5printEmi>

080a185e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a185e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1862:	4607      	mov	r7, r0
 80a1864:	460e      	mov	r6, r1
  if (base == 0) {
 80a1866:	4615      	mov	r5, r2
 80a1868:	b92a      	cbnz	r2, 80a1876 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a186a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a186e:	6803      	ldr	r3, [r0, #0]
 80a1870:	b2c9      	uxtb	r1, r1
 80a1872:	689b      	ldr	r3, [r3, #8]
 80a1874:	4718      	bx	r3
  } else if (base == 10) {
 80a1876:	2a0a      	cmp	r2, #10
 80a1878:	d102      	bne.n	80a1880 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a187a:	2900      	cmp	r1, #0
 80a187c:	da01      	bge.n	80a1882 <_ZN5Print5printEli+0x24>
 80a187e:	e004      	b.n	80a188a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1880:	b2d2      	uxtb	r2, r2
  }
}
 80a1882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1886:	f7ff bfbe 	b.w	80a1806 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a188a:	212d      	movs	r1, #45	; 0x2d
 80a188c:	f7ff ff92 	bl	80a17b4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1890:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1892:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1894:	4271      	negs	r1, r6
 80a1896:	4638      	mov	r0, r7
 80a1898:	f7ff ffb5 	bl	80a1806 <_ZN5Print11printNumberEmh>
 80a189c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a189e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a18a4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a18a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a18a8:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a18aa:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a18ac:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a18ae:	4617      	mov	r7, r2
 80a18b0:	461e      	mov	r6, r3
 80a18b2:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a18b6:	f001 fffd 	bl	80a38b4 <__aeabi_dcmpun>
 80a18ba:	b108      	cbz	r0, 80a18c0 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a18bc:	4947      	ldr	r1, [pc, #284]	; (80a19dc <_ZN5Print10printFloatEdh+0x138>)
 80a18be:	e012      	b.n	80a18e6 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a18c0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a18c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a18c8:	4b45      	ldr	r3, [pc, #276]	; (80a19e0 <_ZN5Print10printFloatEdh+0x13c>)
 80a18ca:	4638      	mov	r0, r7
 80a18cc:	4621      	mov	r1, r4
 80a18ce:	f001 fff1 	bl	80a38b4 <__aeabi_dcmpun>
 80a18d2:	b968      	cbnz	r0, 80a18f0 <_ZN5Print10printFloatEdh+0x4c>
 80a18d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a18d8:	4b41      	ldr	r3, [pc, #260]	; (80a19e0 <_ZN5Print10printFloatEdh+0x13c>)
 80a18da:	4638      	mov	r0, r7
 80a18dc:	4621      	mov	r1, r4
 80a18de:	f001 ffcb 	bl	80a3878 <__aeabi_dcmple>
 80a18e2:	b928      	cbnz	r0, 80a18f0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a18e4:	493f      	ldr	r1, [pc, #252]	; (80a19e4 <_ZN5Print10printFloatEdh+0x140>)
 80a18e6:	4640      	mov	r0, r8
 80a18e8:	f7ff ff50 	bl	80a178c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a18ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a18f0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a18f4:	4b3c      	ldr	r3, [pc, #240]	; (80a19e8 <_ZN5Print10printFloatEdh+0x144>)
 80a18f6:	4638      	mov	r0, r7
 80a18f8:	4631      	mov	r1, r6
 80a18fa:	f001 ffd1 	bl	80a38a0 <__aeabi_dcmpgt>
 80a18fe:	b108      	cbz	r0, 80a1904 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1900:	493a      	ldr	r1, [pc, #232]	; (80a19ec <_ZN5Print10printFloatEdh+0x148>)
 80a1902:	e7f0      	b.n	80a18e6 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1904:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1908:	4b39      	ldr	r3, [pc, #228]	; (80a19f0 <_ZN5Print10printFloatEdh+0x14c>)
 80a190a:	4638      	mov	r0, r7
 80a190c:	4631      	mov	r1, r6
 80a190e:	f001 ffa9 	bl	80a3864 <__aeabi_dcmplt>
 80a1912:	2800      	cmp	r0, #0
 80a1914:	d1f4      	bne.n	80a1900 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1916:	2200      	movs	r2, #0
 80a1918:	2300      	movs	r3, #0
 80a191a:	4638      	mov	r0, r7
 80a191c:	4631      	mov	r1, r6
 80a191e:	f001 ffa1 	bl	80a3864 <__aeabi_dcmplt>
 80a1922:	b138      	cbz	r0, 80a1934 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1924:	212d      	movs	r1, #45	; 0x2d
 80a1926:	4640      	mov	r0, r8
 80a1928:	f7ff ff44 	bl	80a17b4 <_ZN5Print5printEc>
     number = -number;
 80a192c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1930:	4604      	mov	r4, r0
 80a1932:	e000      	b.n	80a1936 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1934:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1936:	492f      	ldr	r1, [pc, #188]	; (80a19f4 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1938:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a193c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a193e:	fa5f f389 	uxtb.w	r3, r9
 80a1942:	429d      	cmp	r5, r3
 80a1944:	d906      	bls.n	80a1954 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1946:	2200      	movs	r2, #0
 80a1948:	4b2b      	ldr	r3, [pc, #172]	; (80a19f8 <_ZN5Print10printFloatEdh+0x154>)
 80a194a:	f001 fe43 	bl	80a35d4 <__aeabi_ddiv>
 80a194e:	f109 0901 	add.w	r9, r9, #1
 80a1952:	e7f4      	b.n	80a193e <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1954:	463a      	mov	r2, r7
 80a1956:	4633      	mov	r3, r6
 80a1958:	f001 fb60 	bl	80a301c <__adddf3>
 80a195c:	460f      	mov	r7, r1
 80a195e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1960:	f001 ffe6 	bl	80a3930 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1964:	220a      	movs	r2, #10
 80a1966:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1968:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a196a:	4640      	mov	r0, r8
 80a196c:	f7ff ff4b 	bl	80a1806 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1970:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1972:	b37d      	cbz	r5, 80a19d4 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1974:	4648      	mov	r0, r9
 80a1976:	f001 fc8d 	bl	80a3294 <__aeabi_ui2d>
 80a197a:	4602      	mov	r2, r0
 80a197c:	460b      	mov	r3, r1
 80a197e:	4630      	mov	r0, r6
 80a1980:	4639      	mov	r1, r7
 80a1982:	f001 fb49 	bl	80a3018 <__aeabi_dsub>
 80a1986:	4606      	mov	r6, r0
 80a1988:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a198a:	4640      	mov	r0, r8
 80a198c:	491b      	ldr	r1, [pc, #108]	; (80a19fc <_ZN5Print10printFloatEdh+0x158>)
 80a198e:	f7ff fefd 	bl	80a178c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1992:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1994:	4b18      	ldr	r3, [pc, #96]	; (80a19f8 <_ZN5Print10printFloatEdh+0x154>)
 80a1996:	2200      	movs	r2, #0
 80a1998:	4630      	mov	r0, r6
 80a199a:	4639      	mov	r1, r7
 80a199c:	f001 fcf0 	bl	80a3380 <__aeabi_dmul>
 80a19a0:	460f      	mov	r7, r1
 80a19a2:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a19a4:	f001 ff9c 	bl	80a38e0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a19a8:	220a      	movs	r2, #10
 80a19aa:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a19ac:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a19ae:	4640      	mov	r0, r8
 80a19b0:	f7ff ff55 	bl	80a185e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a19b4:	4404      	add	r4, r0
    remainder -= toPrint;
 80a19b6:	4648      	mov	r0, r9
 80a19b8:	f001 fc7c 	bl	80a32b4 <__aeabi_i2d>
 80a19bc:	4602      	mov	r2, r0
 80a19be:	460b      	mov	r3, r1
 80a19c0:	4630      	mov	r0, r6
 80a19c2:	4639      	mov	r1, r7
 80a19c4:	f001 fb28 	bl	80a3018 <__aeabi_dsub>
 80a19c8:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a19ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a19ce:	4606      	mov	r6, r0
 80a19d0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a19d2:	d1df      	bne.n	80a1994 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a19d4:	4620      	mov	r0, r4
 80a19d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a19da:	bf00      	nop
 80a19dc:	080a4350 	.word	0x080a4350
 80a19e0:	7fefffff 	.word	0x7fefffff
 80a19e4:	080a4358 	.word	0x080a4358
 80a19e8:	41efffff 	.word	0x41efffff
 80a19ec:	080a4354 	.word	0x080a4354
 80a19f0:	c1efffff 	.word	0xc1efffff
 80a19f4:	3fe00000 	.word	0x3fe00000
 80a19f8:	40240000 	.word	0x40240000
 80a19fc:	080a4187 	.word	0x080a4187

080a1a00 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1a00:	f89d 1000 	ldrb.w	r1, [sp]
 80a1a04:	9100      	str	r1, [sp, #0]
 80a1a06:	f7ff bf4d 	b.w	80a18a4 <_ZN5Print10printFloatEdh>

080a1a0a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1a0c:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1a10:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1a12:	9100      	str	r1, [sp, #0]
 80a1a14:	f7ff ff46 	bl	80a18a4 <_ZN5Print10printFloatEdh>
 80a1a18:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a1a1a:	4628      	mov	r0, r5
 80a1a1c:	f7ff fed3 	bl	80a17c6 <_ZN5Print7printlnEv>
  return n;
}
 80a1a20:	4420      	add	r0, r4
 80a1a22:	b003      	add	sp, #12
 80a1a24:	bd30      	pop	{r4, r5, pc}

080a1a26 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1a26:	b510      	push	{r4, lr}
 80a1a28:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a2a:	f7ff fd50 	bl	80a14ce <_ZNSt14_Function_baseD1Ev>
 80a1a2e:	4620      	mov	r0, r4
 80a1a30:	bd10      	pop	{r4, pc}
	...

080a1a34 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1a34:	4803      	ldr	r0, [pc, #12]	; (80a1a44 <_GLOBAL__sub_I_RGB+0x10>)
 80a1a36:	2300      	movs	r3, #0
 80a1a38:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1a3a:	4a03      	ldr	r2, [pc, #12]	; (80a1a48 <_GLOBAL__sub_I_RGB+0x14>)
 80a1a3c:	4903      	ldr	r1, [pc, #12]	; (80a1a4c <_GLOBAL__sub_I_RGB+0x18>)
 80a1a3e:	f000 be05 	b.w	80a264c <__aeabi_atexit>
 80a1a42:	bf00      	nop
 80a1a44:	200001a4 	.word	0x200001a4
 80a1a48:	20000088 	.word	0x20000088
 80a1a4c:	080a1a27 	.word	0x080a1a27

080a1a50 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1a50:	4770      	bx	lr

080a1a52 <_ZN8SPIClassD0Ev>:
 80a1a52:	b510      	push	{r4, lr}
 80a1a54:	4604      	mov	r4, r0
 80a1a56:	2110      	movs	r1, #16
 80a1a58:	f000 fdfd 	bl	80a2656 <_ZdlPvj>
 80a1a5c:	4620      	mov	r0, r4
 80a1a5e:	bd10      	pop	{r4, pc}

080a1a60 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1a60:	b570      	push	{r4, r5, r6, lr}
 80a1a62:	4604      	mov	r4, r0
 80a1a64:	460e      	mov	r6, r1
 80a1a66:	4b07      	ldr	r3, [pc, #28]	; (80a1a84 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1a68:	2500      	movs	r5, #0
 80a1a6a:	6003      	str	r3, [r0, #0]
 80a1a6c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1a70:	f7ff fae4 	bl	80a103c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1a74:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1a76:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1a78:	f7ff fbca 	bl	80a1210 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1a7c:	60a5      	str	r5, [r4, #8]
}
 80a1a7e:	4620      	mov	r0, r4
 80a1a80:	bd70      	pop	{r4, r5, r6, pc}
 80a1a82:	bf00      	nop
 80a1a84:	080a4364 	.word	0x080a4364

080a1a88 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1a8c:	7900      	ldrb	r0, [r0, #4]
 80a1a8e:	f7ff bb97 	b.w	80a11c0 <HAL_SPI_Begin>

080a1a92 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a1a92:	7900      	ldrb	r0, [r0, #4]
 80a1a94:	f7ff bb9c 	b.w	80a11d0 <HAL_SPI_Set_Bit_Order>

080a1a98 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1a98:	7900      	ldrb	r0, [r0, #4]
 80a1a9a:	f7ff bba1 	b.w	80a11e0 <HAL_SPI_Set_Data_Mode>
	...

080a1aa0 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1aa0:	4a05      	ldr	r2, [pc, #20]	; (80a1ab8 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a1aa2:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1aa4:	5c99      	ldrb	r1, [r3, r2]
 80a1aa6:	4281      	cmp	r1, r0
 80a1aa8:	d002      	beq.n	80a1ab0 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a1aaa:	3301      	adds	r3, #1
 80a1aac:	2b08      	cmp	r3, #8
 80a1aae:	d1f9      	bne.n	80a1aa4 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a1ab0:	1c58      	adds	r0, r3, #1
}
 80a1ab2:	b2c0      	uxtb	r0, r0
 80a1ab4:	4770      	bx	lr
 80a1ab6:	bf00      	nop
 80a1ab8:	080a436c 	.word	0x080a436c

080a1abc <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1abc:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1abe:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1ac0:	6018      	str	r0, [r3, #0]
 80a1ac2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1ac4:	6818      	ldr	r0, [r3, #0]
 80a1ac6:	b2e5      	uxtb	r5, r4
 80a1ac8:	4288      	cmp	r0, r1
 80a1aca:	d906      	bls.n	80a1ada <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1acc:	3401      	adds	r4, #1
 80a1ace:	2c08      	cmp	r4, #8
 80a1ad0:	d002      	beq.n	80a1ad8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1ad2:	0840      	lsrs	r0, r0, #1
 80a1ad4:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1ad6:	e7f5      	b.n	80a1ac4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1ad8:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1ada:	4b02      	ldr	r3, [pc, #8]	; (80a1ae4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1adc:	5d5b      	ldrb	r3, [r3, r5]
 80a1ade:	7013      	strb	r3, [r2, #0]
 80a1ae0:	bd30      	pop	{r4, r5, pc}
 80a1ae2:	bf00      	nop
 80a1ae4:	080a436c 	.word	0x080a436c

080a1ae8 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1ae8:	b570      	push	{r4, r5, r6, lr}
 80a1aea:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a1aec:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1af0:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a1af2:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1af4:	2214      	movs	r2, #20
 80a1af6:	2100      	movs	r1, #0
 80a1af8:	a803      	add	r0, sp, #12
 80a1afa:	f002 fa76 	bl	80a3fea <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1afe:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1b00:	a903      	add	r1, sp, #12
 80a1b02:	4630      	mov	r0, r6
 80a1b04:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1b06:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a1b0a:	f7ff fb91 	bl	80a1230 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a1b0e:	ab02      	add	r3, sp, #8
 80a1b10:	f10d 0207 	add.w	r2, sp, #7
 80a1b14:	4629      	mov	r1, r5
 80a1b16:	9804      	ldr	r0, [sp, #16]
 80a1b18:	f7ff ffd0 	bl	80a1abc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b1c:	7920      	ldrb	r0, [r4, #4]
 80a1b1e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1b22:	f7ff fb65 	bl	80a11f0 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a1b26:	9802      	ldr	r0, [sp, #8]
 80a1b28:	b008      	add	sp, #32
 80a1b2a:	bd70      	pop	{r4, r5, r6, pc}

080a1b2c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1b2c:	b538      	push	{r3, r4, r5, lr}
 80a1b2e:	4604      	mov	r4, r0
    if (dividerReference)
 80a1b30:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1b32:	4608      	mov	r0, r1
    if (dividerReference)
 80a1b34:	b14d      	cbz	r5, 80a1b4a <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a1b36:	f7ff ffb3 	bl	80a1aa0 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1b3a:	2201      	movs	r2, #1
 80a1b3c:	fa25 f100 	lsr.w	r1, r5, r0
 80a1b40:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a1b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1b46:	f7ff bfcf 	b.w	80a1ae8 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b4a:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b50:	f7ff bb4e 	b.w	80a11f0 <HAL_SPI_Set_Clock_Divider>

080a1b54 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1b54:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1b56:	7900      	ldrb	r0, [r0, #4]
 80a1b58:	f7ff fb52 	bl	80a1200 <HAL_SPI_Send_Receive_Data>
}
 80a1b5c:	b2c0      	uxtb	r0, r0
 80a1b5e:	bd08      	pop	{r3, pc}

080a1b60 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b60:	7900      	ldrb	r0, [r0, #4]
 80a1b62:	f7ff bb5d 	b.w	80a1220 <HAL_SPI_Is_Enabled>

080a1b66 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b66:	b510      	push	{r4, lr}
 80a1b68:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b6a:	6800      	ldr	r0, [r0, #0]
 80a1b6c:	f7ff fc94 	bl	80a1498 <free>
}
 80a1b70:	4620      	mov	r0, r4
 80a1b72:	bd10      	pop	{r4, pc}

080a1b74 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b74:	b510      	push	{r4, lr}
 80a1b76:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b78:	6800      	ldr	r0, [r0, #0]
 80a1b7a:	b108      	cbz	r0, 80a1b80 <_ZN6String10invalidateEv+0xc>
 80a1b7c:	f7ff fc8c 	bl	80a1498 <free>
	buffer = NULL;
 80a1b80:	2300      	movs	r3, #0
 80a1b82:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1b84:	60a3      	str	r3, [r4, #8]
 80a1b86:	6063      	str	r3, [r4, #4]
 80a1b88:	bd10      	pop	{r4, pc}

080a1b8a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1b8a:	b538      	push	{r3, r4, r5, lr}
 80a1b8c:	4604      	mov	r4, r0
 80a1b8e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1b90:	6800      	ldr	r0, [r0, #0]
 80a1b92:	3101      	adds	r1, #1
 80a1b94:	f7ff fc88 	bl	80a14a8 <realloc>
	if (newbuffer) {
 80a1b98:	b110      	cbz	r0, 80a1ba0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1b9a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1b9e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1ba0:	bd38      	pop	{r3, r4, r5, pc}

080a1ba2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1ba2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1ba4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1ba6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1ba8:	b113      	cbz	r3, 80a1bb0 <_ZN6String7reserveEj+0xe>
 80a1baa:	6843      	ldr	r3, [r0, #4]
 80a1bac:	428b      	cmp	r3, r1
 80a1bae:	d207      	bcs.n	80a1bc0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1bb0:	4620      	mov	r0, r4
 80a1bb2:	f7ff ffea 	bl	80a1b8a <_ZN6String12changeBufferEj>
 80a1bb6:	b120      	cbz	r0, 80a1bc2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1bb8:	68a3      	ldr	r3, [r4, #8]
 80a1bba:	b90b      	cbnz	r3, 80a1bc0 <_ZN6String7reserveEj+0x1e>
 80a1bbc:	6822      	ldr	r2, [r4, #0]
 80a1bbe:	7013      	strb	r3, [r2, #0]
 80a1bc0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1bc2:	bd10      	pop	{r4, pc}

080a1bc4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1bc4:	b570      	push	{r4, r5, r6, lr}
 80a1bc6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1bc8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1bca:	4604      	mov	r4, r0
 80a1bcc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1bce:	f7ff ffe8 	bl	80a1ba2 <_ZN6String7reserveEj>
 80a1bd2:	b918      	cbnz	r0, 80a1bdc <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1bd4:	4620      	mov	r0, r4
 80a1bd6:	f7ff ffcd 	bl	80a1b74 <_ZN6String10invalidateEv>
		return *this;
 80a1bda:	e009      	b.n	80a1bf0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1bdc:	462a      	mov	r2, r5
 80a1bde:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1be0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1be2:	6820      	ldr	r0, [r4, #0]
 80a1be4:	f002 f9f6 	bl	80a3fd4 <memcpy>
	buffer[len] = 0;
 80a1be8:	6822      	ldr	r2, [r4, #0]
 80a1bea:	68a3      	ldr	r3, [r4, #8]
 80a1bec:	2100      	movs	r1, #0
 80a1bee:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1bf0:	4620      	mov	r0, r4
 80a1bf2:	bd70      	pop	{r4, r5, r6, pc}

080a1bf4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1bf4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1bf6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1bf8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1bfa:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1bfc:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1bfe:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c00:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1c02:	460d      	mov	r5, r1
 80a1c04:	b139      	cbz	r1, 80a1c16 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1c06:	4608      	mov	r0, r1
 80a1c08:	f002 fa20 	bl	80a404c <strlen>
 80a1c0c:	4629      	mov	r1, r5
 80a1c0e:	4602      	mov	r2, r0
 80a1c10:	4620      	mov	r0, r4
 80a1c12:	f7ff ffd7 	bl	80a1bc4 <_ZN6String4copyEPKcj>
}
 80a1c16:	4620      	mov	r0, r4
 80a1c18:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1c1c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1c20:	4b03      	ldr	r3, [pc, #12]	; (80a1c30 <_GLOBAL__sub_I_System+0x14>)
 80a1c22:	2000      	movs	r0, #0
 80a1c24:	7018      	strb	r0, [r3, #0]
 80a1c26:	8058      	strh	r0, [r3, #2]
 80a1c28:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c2a:	f7ff bb91 	b.w	80a1350 <set_system_mode>
 80a1c2e:	bf00      	nop
 80a1c30:	200001b4 	.word	0x200001b4

080a1c34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1c34:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1c36:	681a      	ldr	r2, [r3, #0]
 80a1c38:	4b02      	ldr	r3, [pc, #8]	; (80a1c44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1c3a:	601a      	str	r2, [r3, #0]
 80a1c3c:	4770      	bx	lr
 80a1c3e:	bf00      	nop
 80a1c40:	2000001c 	.word	0x2000001c
 80a1c44:	200001bc 	.word	0x200001bc

080a1c48 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1c48:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1c4a:	6804      	ldr	r4, [r0, #0]
 80a1c4c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1c4e:	46a4      	mov	ip, r4
    }
 80a1c50:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1c52:	4760      	bx	ip

080a1c54 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1c54:	6803      	ldr	r3, [r0, #0]
 80a1c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1c58:	4718      	bx	r3

080a1c5a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1c5a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1c5c:	4770      	bx	lr

080a1c5e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1c5e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1c60:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1c62:	1a10      	subs	r0, r2, r0
 80a1c64:	4770      	bx	lr

080a1c66 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1c66:	b513      	push	{r0, r1, r4, lr}
 80a1c68:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1c6a:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1c6c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1c70:	68d4      	ldr	r4, [r2, #12]
 80a1c72:	4619      	mov	r1, r3
 80a1c74:	2201      	movs	r2, #1
 80a1c76:	47a0      	blx	r4
}
 80a1c78:	b002      	add	sp, #8
 80a1c7a:	bd10      	pop	{r4, pc}

080a1c7c <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1c7c:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1c7e:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1c80:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1c82:	691b      	ldr	r3, [r3, #16]
 80a1c84:	4798      	blx	r3
 80a1c86:	b128      	cbz	r0, 80a1c94 <_ZN3UDP4readEv+0x18>
 80a1c88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1c8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1c8c:	1c59      	adds	r1, r3, #1
 80a1c8e:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1c90:	5cd0      	ldrb	r0, [r2, r3]
 80a1c92:	bd10      	pop	{r4, pc}
 80a1c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1c98:	bd10      	pop	{r4, pc}

080a1c9a <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1c9a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1c9c:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1c9e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1ca0:	691b      	ldr	r3, [r3, #16]
 80a1ca2:	4798      	blx	r3
 80a1ca4:	b118      	cbz	r0, 80a1cae <_ZN3UDP4peekEv+0x14>
 80a1ca6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1ca8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1caa:	5cd0      	ldrb	r0, [r2, r3]
 80a1cac:	bd10      	pop	{r4, pc}
 80a1cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1cb2:	bd10      	pop	{r4, pc}

080a1cb4 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1cb4:	4770      	bx	lr

080a1cb6 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1cb6:	4603      	mov	r3, r0
 80a1cb8:	4608      	mov	r0, r1
 80a1cba:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1cbc:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1cbe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1cc0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1cc2:	6803      	ldr	r3, [r0, #0]
 80a1cc4:	1a52      	subs	r2, r2, r1
 80a1cc6:	68db      	ldr	r3, [r3, #12]
 80a1cc8:	4421      	add	r1, r4
}
 80a1cca:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1ccc:	4718      	bx	r3

080a1cce <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1cce:	f1a0 0010 	sub.w	r0, r0, #16
 80a1cd2:	f7ff bff0 	b.w	80a1cb6 <_ZNK3UDP7printToER5Print>

080a1cd6 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1cd8:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1cda:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1cdc:	460f      	mov	r7, r1
 80a1cde:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1ce0:	f7ff fd28 	bl	80a1734 <_ZN5spark12NetworkClass4fromEm>
 80a1ce4:	6803      	ldr	r3, [r0, #0]
 80a1ce6:	68db      	ldr	r3, [r3, #12]
 80a1ce8:	4798      	blx	r3
 80a1cea:	b1b8      	cbz	r0, 80a1d1c <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1cec:	2102      	movs	r1, #2
 80a1cee:	463b      	mov	r3, r7
 80a1cf0:	2211      	movs	r2, #17
 80a1cf2:	4608      	mov	r0, r1
 80a1cf4:	9600      	str	r6, [sp, #0]
 80a1cf6:	f7ff fa3b 	bl	80a1170 <socket_create>
 80a1cfa:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1cfc:	f7ff fa30 	bl	80a1160 <socket_handle_valid>
 80a1d00:	4604      	mov	r4, r0
 80a1d02:	b130      	cbz	r0, 80a1d12 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1d04:	2300      	movs	r3, #0
 80a1d06:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1d08:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1d0a:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1d0c:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1d0e:	2001      	movs	r0, #1
 80a1d10:	e004      	b.n	80a1d1c <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a1d12:	682b      	ldr	r3, [r5, #0]
 80a1d14:	4628      	mov	r0, r5
 80a1d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1d18:	4798      	blx	r3
            bound = false;
 80a1d1a:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1d1c:	b003      	add	sp, #12
 80a1d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d20 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1d20:	b538      	push	{r3, r4, r5, lr}
 80a1d22:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1d24:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1d26:	f7ff fa43 	bl	80a11b0 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1d2a:	4285      	cmp	r5, r0
 80a1d2c:	d002      	beq.n	80a1d34 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1d2e:	6960      	ldr	r0, [r4, #20]
 80a1d30:	f7ff fa36 	bl	80a11a0 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1d34:	f7ff fa3c 	bl	80a11b0 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1d38:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1d3a:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1d3c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1d3e:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1d40:	bd38      	pop	{r3, r4, r5, pc}

080a1d42 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1d42:	b530      	push	{r4, r5, lr}
 80a1d44:	b087      	sub	sp, #28
 80a1d46:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1d4a:	2502      	movs	r5, #2
 80a1d4c:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1d50:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1d54:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1d56:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1d58:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1d5c:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1d60:	799c      	ldrb	r4, [r3, #6]
 80a1d62:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1d66:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1d68:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1d6a:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1d6e:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1d72:	2310      	movs	r3, #16
 80a1d74:	9301      	str	r3, [sp, #4]
 80a1d76:	ab02      	add	r3, sp, #8
 80a1d78:	9300      	str	r3, [sp, #0]
 80a1d7a:	6940      	ldr	r0, [r0, #20]
 80a1d7c:	2300      	movs	r3, #0
 80a1d7e:	f7ff fa07 	bl	80a1190 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1d82:	b007      	add	sp, #28
 80a1d84:	bd30      	pop	{r4, r5, pc}

080a1d86 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1d86:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1d88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1d8a:	4605      	mov	r5, r0
 80a1d8c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1d8e:	b113      	cbz	r3, 80a1d96 <_ZN3UDP5writeEPKhj+0x10>
 80a1d90:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1d92:	1a24      	subs	r4, r4, r0
 80a1d94:	e000      	b.n	80a1d98 <_ZN3UDP5writeEPKhj+0x12>
 80a1d96:	461c      	mov	r4, r3
 80a1d98:	4294      	cmp	r4, r2
 80a1d9a:	bf28      	it	cs
 80a1d9c:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1d9e:	4418      	add	r0, r3
 80a1da0:	4622      	mov	r2, r4
 80a1da2:	f002 f917 	bl	80a3fd4 <memcpy>
    _offset += size;
 80a1da6:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1da8:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1daa:	4423      	add	r3, r4
 80a1dac:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1dae:	bd38      	pop	{r3, r4, r5, pc}

080a1db0 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1db0:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1db2:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1db4:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1db6:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1db8:	460e      	mov	r6, r1
 80a1dba:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1dbc:	4798      	blx	r3
 80a1dbe:	b188      	cbz	r0, 80a1de4 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1dc0:	6823      	ldr	r3, [r4, #0]
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	691b      	ldr	r3, [r3, #16]
 80a1dc6:	4798      	blx	r3
 80a1dc8:	4285      	cmp	r5, r0
 80a1dca:	bfa8      	it	ge
 80a1dcc:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1dce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1dd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1dd2:	462a      	mov	r2, r5
 80a1dd4:	4419      	add	r1, r3
 80a1dd6:	4630      	mov	r0, r6
 80a1dd8:	f002 f8fc 	bl	80a3fd4 <memcpy>
      _offset += read;
 80a1ddc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1dde:	442b      	add	r3, r5
 80a1de0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a1de2:	e001      	b.n	80a1de8 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a1de4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a1de8:	4628      	mov	r0, r5
 80a1dea:	bd70      	pop	{r4, r5, r6, pc}

080a1dec <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dee:	4604      	mov	r4, r0
 80a1df0:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1df2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1df4:	460d      	mov	r5, r1
 80a1df6:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1df8:	f7ff fc9c 	bl	80a1734 <_ZN5spark12NetworkClass4fromEm>
 80a1dfc:	6803      	ldr	r3, [r0, #0]
 80a1dfe:	68db      	ldr	r3, [r3, #12]
 80a1e00:	4798      	blx	r3
 80a1e02:	b310      	cbz	r0, 80a1e4a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1e04:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1e06:	f7ff f9d3 	bl	80a11b0 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1e0a:	4287      	cmp	r7, r0
 80a1e0c:	d01d      	beq.n	80a1e4a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1e0e:	b1e5      	cbz	r5, 80a1e4a <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1e10:	ab08      	add	r3, sp, #32
 80a1e12:	2210      	movs	r2, #16
 80a1e14:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a1e18:	9301      	str	r3, [sp, #4]
 80a1e1a:	eb0d 0302 	add.w	r3, sp, r2
 80a1e1e:	9300      	str	r3, [sp, #0]
 80a1e20:	4629      	mov	r1, r5
 80a1e22:	2300      	movs	r3, #0
 80a1e24:	4632      	mov	r2, r6
 80a1e26:	6960      	ldr	r0, [r4, #20]
 80a1e28:	f7ff f9aa 	bl	80a1180 <socket_receivefrom>
        if (ret >= 0)
 80a1e2c:	1e05      	subs	r5, r0, #0
 80a1e2e:	db0e      	blt.n	80a1e4e <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1e30:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1e34:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1e38:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1e3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1e3e:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1e40:	f104 001c 	add.w	r0, r4, #28
 80a1e44:	f7ff fc06 	bl	80a1654 <_ZN9IPAddressaSEPKh>
 80a1e48:	e001      	b.n	80a1e4e <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1e4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1e4e:	4628      	mov	r0, r5
 80a1e50:	b009      	add	sp, #36	; 0x24
 80a1e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1e54 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e58:	4606      	mov	r6, r0
 80a1e5a:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1e5c:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1e5e:	460d      	mov	r5, r1
 80a1e60:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1e62:	f7ff fc67 	bl	80a1734 <_ZN5spark12NetworkClass4fromEm>
 80a1e66:	6803      	ldr	r3, [r0, #0]
 80a1e68:	68db      	ldr	r3, [r3, #12]
 80a1e6a:	4798      	blx	r3
 80a1e6c:	b1f8      	cbz	r0, 80a1eae <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1e6e:	4628      	mov	r0, r5
 80a1e70:	f002 f8ec 	bl	80a404c <strlen>
 80a1e74:	2400      	movs	r4, #0
 80a1e76:	b281      	uxth	r1, r0
 80a1e78:	9400      	str	r4, [sp, #0]
 80a1e7a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1e7c:	aa03      	add	r2, sp, #12
 80a1e7e:	4628      	mov	r0, r5
 80a1e80:	f7ff fa5e 	bl	80a1340 <inet_gethostbyname>
 80a1e84:	b990      	cbnz	r0, 80a1eac <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a1e86:	a903      	add	r1, sp, #12
 80a1e88:	a808      	add	r0, sp, #32
 80a1e8a:	f7ff fbaf 	bl	80a15ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1e8e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1e90:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1e92:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1e94:	4b07      	ldr	r3, [pc, #28]	; (80a1eb4 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a1e96:	ad09      	add	r5, sp, #36	; 0x24
 80a1e98:	930e      	str	r3, [sp, #56]	; 0x38
 80a1e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1e9e:	682b      	ldr	r3, [r5, #0]
 80a1ea0:	4642      	mov	r2, r8
 80a1ea2:	7023      	strb	r3, [r4, #0]
 80a1ea4:	a90e      	add	r1, sp, #56	; 0x38
 80a1ea6:	4630      	mov	r0, r6
 80a1ea8:	47b8      	blx	r7
 80a1eaa:	e000      	b.n	80a1eae <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1eac:	4620      	mov	r0, r4
}
 80a1eae:	b014      	add	sp, #80	; 0x50
 80a1eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1eb4:	080a4230 	.word	0x080a4230

080a1eb8 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1eb8:	b570      	push	{r4, r5, r6, lr}
 80a1eba:	4604      	mov	r4, r0
 80a1ebc:	4606      	mov	r6, r0
 80a1ebe:	4b05      	ldr	r3, [pc, #20]	; (80a1ed4 <_ZN3UDP8remoteIPEv+0x1c>)
 80a1ec0:	f101 0520 	add.w	r5, r1, #32
 80a1ec4:	f844 3b04 	str.w	r3, [r4], #4
 80a1ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1ecc:	682b      	ldr	r3, [r5, #0]
 80a1ece:	4630      	mov	r0, r6
 80a1ed0:	7023      	strb	r3, [r4, #0]
 80a1ed2:	bd70      	pop	{r4, r5, r6, pc}
 80a1ed4:	080a4230 	.word	0x080a4230

080a1ed8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1eda:	4694      	mov	ip, r2
 80a1edc:	468e      	mov	lr, r1
 80a1ede:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1ee0:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1ee2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1ee4:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a1ee6:	4a09      	ldr	r2, [pc, #36]	; (80a1f0c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a1ee8:	ac03      	add	r4, sp, #12
 80a1eea:	1d1d      	adds	r5, r3, #4
 80a1eec:	9202      	str	r2, [sp, #8]
 80a1eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1ef2:	682b      	ldr	r3, [r5, #0]
 80a1ef4:	4662      	mov	r2, ip
 80a1ef6:	7023      	strb	r3, [r4, #0]
 80a1ef8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a1efc:	4671      	mov	r1, lr
 80a1efe:	9300      	str	r3, [sp, #0]
 80a1f00:	4630      	mov	r0, r6
 80a1f02:	ab02      	add	r3, sp, #8
 80a1f04:	47b8      	blx	r7
    }
 80a1f06:	b009      	add	sp, #36	; 0x24
 80a1f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f0a:	bf00      	nop
 80a1f0c:	080a4230 	.word	0x080a4230

080a1f10 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f12:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1f14:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1f16:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1f18:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1f1a:	4b0d      	ldr	r3, [pc, #52]	; (80a1f50 <_ZN3UDP9endPacketEv+0x40>)
 80a1f1c:	ad03      	add	r5, sp, #12
 80a1f1e:	f100 0620 	add.w	r6, r0, #32
 80a1f22:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a1f26:	9302      	str	r3, [sp, #8]
 80a1f28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1f2c:	6833      	ldr	r3, [r6, #0]
 80a1f2e:	4672      	mov	r2, lr
 80a1f30:	702b      	strb	r3, [r5, #0]
 80a1f32:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1f34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1f36:	9300      	str	r3, [sp, #0]
 80a1f38:	4620      	mov	r0, r4
 80a1f3a:	ab02      	add	r3, sp, #8
 80a1f3c:	47b8      	blx	r7
 80a1f3e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1f40:	6823      	ldr	r3, [r4, #0]
 80a1f42:	4620      	mov	r0, r4
 80a1f44:	69db      	ldr	r3, [r3, #28]
 80a1f46:	4798      	blx	r3
    return result;
}
 80a1f48:	4628      	mov	r0, r5
 80a1f4a:	b009      	add	sp, #36	; 0x24
 80a1f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f4e:	bf00      	nop
 80a1f50:	080a4230 	.word	0x080a4230

080a1f54 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1f54:	b538      	push	{r3, r4, r5, lr}
 80a1f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f5a:	6083      	str	r3, [r0, #8]
 80a1f5c:	4b0b      	ldr	r3, [pc, #44]	; (80a1f8c <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1f5e:	2500      	movs	r5, #0
 80a1f60:	f103 0208 	add.w	r2, r3, #8
 80a1f64:	336c      	adds	r3, #108	; 0x6c
 80a1f66:	6002      	str	r2, [r0, #0]
 80a1f68:	6103      	str	r3, [r0, #16]
 80a1f6a:	6045      	str	r5, [r0, #4]
 80a1f6c:	4604      	mov	r4, r0
 80a1f6e:	f7ff f91f 	bl	80a11b0 <socket_handle_invalid>
 80a1f72:	6160      	str	r0, [r4, #20]
 80a1f74:	f104 001c 	add.w	r0, r4, #28
 80a1f78:	f7ff fb2a 	bl	80a15d0 <_ZN9IPAddressC1Ev>
 80a1f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1f80:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1f82:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1f84:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1f86:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1f88:	4620      	mov	r0, r4
 80a1f8a:	bd38      	pop	{r3, r4, r5, pc}
 80a1f8c:	080a43a0 	.word	0x080a43a0

080a1f90 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1f90:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1f92:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1f96:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1f98:	b123      	cbz	r3, 80a1fa4 <_ZN3UDP13releaseBufferEv+0x14>
 80a1f9a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1f9c:	b110      	cbz	r0, 80a1fa4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1f9e:	2101      	movs	r1, #1
 80a1fa0:	f000 fb59 	bl	80a2656 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1fa4:	2300      	movs	r3, #0
 80a1fa6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1fa8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1fac:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1fae:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1fb0:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1fb2:	bd10      	pop	{r4, pc}

080a1fb4 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1fb4:	b570      	push	{r4, r5, r6, lr}
 80a1fb6:	4604      	mov	r4, r0
 80a1fb8:	4616      	mov	r6, r2
 80a1fba:	460d      	mov	r5, r1
    releaseBuffer();
 80a1fbc:	f7ff ffe8 	bl	80a1f90 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1fc0:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a1fc2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1fc4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a1fc6:	b93e      	cbnz	r6, 80a1fd8 <_ZN3UDP9setBufferEjPh+0x24>
 80a1fc8:	b135      	cbz	r5, 80a1fd8 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1fca:	4628      	mov	r0, r5
 80a1fcc:	f7fe f867 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a1fd0:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a1fd2:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1fd4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1fd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1fda:	b103      	cbz	r3, 80a1fde <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1fdc:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1fde:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1fe0:	3000      	adds	r0, #0
 80a1fe2:	bf18      	it	ne
 80a1fe4:	2001      	movne	r0, #1
 80a1fe6:	bd70      	pop	{r4, r5, r6, pc}

080a1fe8 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fea:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1fec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1fee:	4605      	mov	r5, r0
 80a1ff0:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1ff2:	b91a      	cbnz	r2, 80a1ffc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a1ff4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1ff6:	b109      	cbz	r1, 80a1ffc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a1ff8:	f7ff ffdc 	bl	80a1fb4 <_ZN3UDP9setBufferEjPh>
 80a1ffc:	f105 0620 	add.w	r6, r5, #32
 80a2000:	3404      	adds	r4, #4
 80a2002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2004:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2006:	6823      	ldr	r3, [r4, #0]
 80a2008:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a200a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a200c:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a200e:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2010:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2012:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2016 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a2016:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a2018:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a201a:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a201c:	b91a      	cbnz	r2, 80a2026 <_ZN3UDP11parsePacketEm+0x10>
 80a201e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2020:	b109      	cbz	r1, 80a2026 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a2022:	f7ff ffc7 	bl	80a1fb4 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2026:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2028:	2300      	movs	r3, #0
 80a202a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a202c:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a202e:	b141      	cbz	r1, 80a2042 <_ZN3UDP11parsePacketEm+0x2c>
 80a2030:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a2032:	b132      	cbz	r2, 80a2042 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a2034:	6820      	ldr	r0, [r4, #0]
 80a2036:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a2038:	4620      	mov	r0, r4
 80a203a:	47a8      	blx	r5
        if (result>0) {
 80a203c:	2800      	cmp	r0, #0
            _total = result;
 80a203e:	bfc8      	it	gt
 80a2040:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a2042:	6823      	ldr	r3, [r4, #0]
 80a2044:	4620      	mov	r0, r4
}
 80a2046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a204a:	691b      	ldr	r3, [r3, #16]
 80a204c:	4718      	bx	r3

080a204e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a204e:	4770      	bx	lr

080a2050 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2050:	7441      	strb	r1, [r0, #17]
 80a2052:	4770      	bx	lr

080a2054 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2054:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2056:	7c00      	ldrb	r0, [r0, #16]
 80a2058:	f7ff f92a 	bl	80a12b0 <HAL_USART_Available_Data_For_Write>
}
 80a205c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2060:	bd08      	pop	{r3, pc}

080a2062 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2062:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7ff f8fb 	bl	80a1260 <HAL_USART_Available_Data>
}
 80a206a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a206e:	bd08      	pop	{r3, pc}

080a2070 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2070:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2072:	7c00      	ldrb	r0, [r0, #16]
 80a2074:	f7ff f904 	bl	80a1280 <HAL_USART_Peek_Data>
}
 80a2078:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a207c:	bf28      	it	cs
 80a207e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2082:	bd08      	pop	{r3, pc}

080a2084 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2084:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2086:	7c00      	ldrb	r0, [r0, #16]
 80a2088:	f7ff f8f2 	bl	80a1270 <HAL_USART_Read_Data>
}
 80a208c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2090:	bf28      	it	cs
 80a2092:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2096:	bd08      	pop	{r3, pc}

080a2098 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2098:	7c00      	ldrb	r0, [r0, #16]
 80a209a:	f7ff b8f9 	b.w	80a1290 <HAL_USART_Flush_Data>

080a209e <_ZN11USARTSerialD0Ev>:
 80a209e:	b510      	push	{r4, lr}
 80a20a0:	4604      	mov	r4, r0
 80a20a2:	2114      	movs	r1, #20
 80a20a4:	f000 fad7 	bl	80a2656 <_ZdlPvj>
 80a20a8:	4620      	mov	r0, r4
 80a20aa:	bd10      	pop	{r4, pc}

080a20ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a20ac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a20ae:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a20b0:	4604      	mov	r4, r0
 80a20b2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a20b4:	b925      	cbnz	r5, 80a20c0 <_ZN11USARTSerial5writeEh+0x14>
 80a20b6:	7c00      	ldrb	r0, [r0, #16]
 80a20b8:	f7ff f8fa 	bl	80a12b0 <HAL_USART_Available_Data_For_Write>
 80a20bc:	2800      	cmp	r0, #0
 80a20be:	dd05      	ble.n	80a20cc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a20c0:	4631      	mov	r1, r6
 80a20c2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a20c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a20c8:	f7ff b8c2 	b.w	80a1250 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a20cc:	4628      	mov	r0, r5
 80a20ce:	bd70      	pop	{r4, r5, r6, pc}

080a20d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a20d0:	b510      	push	{r4, lr}
 80a20d2:	4604      	mov	r4, r0
 80a20d4:	4608      	mov	r0, r1
 80a20d6:	4611      	mov	r1, r2
 80a20d8:	2200      	movs	r2, #0
 80a20da:	6062      	str	r2, [r4, #4]
 80a20dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a20e0:	60a2      	str	r2, [r4, #8]
 80a20e2:	4a05      	ldr	r2, [pc, #20]	; (80a20f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a20e4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a20e6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a20e8:	2201      	movs	r2, #1
 80a20ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a20ec:	461a      	mov	r2, r3
 80a20ee:	f7ff f8a7 	bl	80a1240 <HAL_USART_Init>
}
 80a20f2:	4620      	mov	r0, r4
 80a20f4:	bd10      	pop	{r4, pc}
 80a20f6:	bf00      	nop
 80a20f8:	080a4418 	.word	0x080a4418

080a20fc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a20fc:	2300      	movs	r3, #0
 80a20fe:	7c00      	ldrb	r0, [r0, #16]
 80a2100:	f7ff b8de 	b.w	80a12c0 <HAL_USART_BeginConfig>

080a2104 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a2104:	2200      	movs	r2, #0
 80a2106:	f7ff bff9 	b.w	80a20fc <_ZN11USARTSerial5beginEmm>

080a210a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a210a:	7c00      	ldrb	r0, [r0, #16]
 80a210c:	f7ff b8c8 	b.w	80a12a0 <HAL_USART_Is_Enabled>

080a2110 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2110:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2112:	4d0c      	ldr	r5, [pc, #48]	; (80a2144 <_Z22__fetch_global_Serial1v+0x34>)
 80a2114:	6829      	ldr	r1, [r5, #0]
 80a2116:	f011 0401 	ands.w	r4, r1, #1
 80a211a:	d111      	bne.n	80a2140 <_Z22__fetch_global_Serial1v+0x30>
 80a211c:	4628      	mov	r0, r5
 80a211e:	f7fd ffc2 	bl	80a00a6 <__cxa_guard_acquire>
 80a2122:	b168      	cbz	r0, 80a2140 <_Z22__fetch_global_Serial1v+0x30>
 80a2124:	4a08      	ldr	r2, [pc, #32]	; (80a2148 <_Z22__fetch_global_Serial1v+0x38>)
 80a2126:	4621      	mov	r1, r4
 80a2128:	4b08      	ldr	r3, [pc, #32]	; (80a214c <_Z22__fetch_global_Serial1v+0x3c>)
 80a212a:	4809      	ldr	r0, [pc, #36]	; (80a2150 <_Z22__fetch_global_Serial1v+0x40>)
 80a212c:	f7ff ffd0 	bl	80a20d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2130:	4628      	mov	r0, r5
 80a2132:	f7fd ffbd 	bl	80a00b0 <__cxa_guard_release>
 80a2136:	4a07      	ldr	r2, [pc, #28]	; (80a2154 <_Z22__fetch_global_Serial1v+0x44>)
 80a2138:	4907      	ldr	r1, [pc, #28]	; (80a2158 <_Z22__fetch_global_Serial1v+0x48>)
 80a213a:	4805      	ldr	r0, [pc, #20]	; (80a2150 <_Z22__fetch_global_Serial1v+0x40>)
 80a213c:	f000 fa86 	bl	80a264c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2140:	4803      	ldr	r0, [pc, #12]	; (80a2150 <_Z22__fetch_global_Serial1v+0x40>)
 80a2142:	bd38      	pop	{r3, r4, r5, pc}
 80a2144:	20000258 	.word	0x20000258
 80a2148:	2000025c 	.word	0x2000025c
 80a214c:	200001d4 	.word	0x200001d4
 80a2150:	200001c0 	.word	0x200001c0
 80a2154:	20000088 	.word	0x20000088
 80a2158:	080a204f 	.word	0x080a204f

080a215c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a215c:	7441      	strb	r1, [r0, #17]
 80a215e:	4770      	bx	lr

080a2160 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2160:	4770      	bx	lr

080a2162 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2162:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2164:	2100      	movs	r1, #0
 80a2166:	7c00      	ldrb	r0, [r0, #16]
 80a2168:	f7ff f8ca 	bl	80a1300 <HAL_USB_USART_Receive_Data>
}
 80a216c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2170:	bf28      	it	cs
 80a2172:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2176:	bd08      	pop	{r3, pc}

080a2178 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2178:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a217a:	2101      	movs	r1, #1
 80a217c:	7c00      	ldrb	r0, [r0, #16]
 80a217e:	f7ff f8bf 	bl	80a1300 <HAL_USB_USART_Receive_Data>
}
 80a2182:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2186:	bf28      	it	cs
 80a2188:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a218c:	bd08      	pop	{r3, pc}

080a218e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a218e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2190:	7c00      	ldrb	r0, [r0, #16]
 80a2192:	f7ff f8ad 	bl	80a12f0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2196:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a219a:	bd08      	pop	{r3, pc}

080a219c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a219c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a219e:	7c00      	ldrb	r0, [r0, #16]
 80a21a0:	f7ff f89e 	bl	80a12e0 <HAL_USB_USART_Available_Data>
}
 80a21a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a21a8:	bd08      	pop	{r3, pc}

080a21aa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a21aa:	7c00      	ldrb	r0, [r0, #16]
 80a21ac:	f7ff b8b8 	b.w	80a1320 <HAL_USB_USART_Flush_Data>

080a21b0 <_ZN9USBSerialD0Ev>:
 80a21b0:	b510      	push	{r4, lr}
 80a21b2:	4604      	mov	r4, r0
 80a21b4:	2114      	movs	r1, #20
 80a21b6:	f000 fa4e 	bl	80a2656 <_ZdlPvj>
 80a21ba:	4620      	mov	r0, r4
 80a21bc:	bd10      	pop	{r4, pc}

080a21be <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a21be:	b538      	push	{r3, r4, r5, lr}
 80a21c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a21c2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a21c4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a21c6:	f7ff f893 	bl	80a12f0 <HAL_USB_USART_Available_Data_For_Write>
 80a21ca:	2800      	cmp	r0, #0
 80a21cc:	dc01      	bgt.n	80a21d2 <_ZN9USBSerial5writeEh+0x14>
 80a21ce:	7c60      	ldrb	r0, [r4, #17]
 80a21d0:	b128      	cbz	r0, 80a21de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a21d2:	4629      	mov	r1, r5
 80a21d4:	7c20      	ldrb	r0, [r4, #16]
 80a21d6:	f7ff f89b 	bl	80a1310 <HAL_USB_USART_Send_Data>
 80a21da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a21de:	bd38      	pop	{r3, r4, r5, pc}

080a21e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a21e0:	b510      	push	{r4, lr}
 80a21e2:	4604      	mov	r4, r0
 80a21e4:	2300      	movs	r3, #0
 80a21e6:	6063      	str	r3, [r4, #4]
 80a21e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a21ec:	60a3      	str	r3, [r4, #8]
 80a21ee:	4b05      	ldr	r3, [pc, #20]	; (80a2204 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a21f0:	4608      	mov	r0, r1
 80a21f2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a21f4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a21f6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a21f8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a21fa:	4611      	mov	r1, r2
 80a21fc:	f7ff f868 	bl	80a12d0 <HAL_USB_USART_Init>
}
 80a2200:	4620      	mov	r0, r4
 80a2202:	bd10      	pop	{r4, pc}
 80a2204:	080a4448 	.word	0x080a4448

080a2208 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2208:	7c00      	ldrb	r0, [r0, #16]
 80a220a:	f7ff b891 	b.w	80a1330 <HAL_USB_USART_Is_Enabled>

080a220e <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a220e:	f7ff bffb 	b.w	80a2208 <_ZN9USBSerial9isEnabledEv>
	...

080a2214 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2214:	b510      	push	{r4, lr}
 80a2216:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2218:	2214      	movs	r2, #20
 80a221a:	2100      	movs	r1, #0
 80a221c:	f001 fee5 	bl	80a3fea <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2220:	4b05      	ldr	r3, [pc, #20]	; (80a2238 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2222:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2224:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2226:	4b05      	ldr	r3, [pc, #20]	; (80a223c <_Z19acquireSerialBufferv+0x28>)
 80a2228:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a222a:	f240 1301 	movw	r3, #257	; 0x101
 80a222e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2230:	2381      	movs	r3, #129	; 0x81
 80a2232:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2234:	bd10      	pop	{r4, pc}
 80a2236:	bf00      	nop
 80a2238:	20000365 	.word	0x20000365
 80a223c:	200002e4 	.word	0x200002e4

080a2240 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2240:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2242:	4d0e      	ldr	r5, [pc, #56]	; (80a227c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2244:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2246:	a801      	add	r0, sp, #4
 80a2248:	f7ff ffe4 	bl	80a2214 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a224c:	6829      	ldr	r1, [r5, #0]
 80a224e:	f011 0401 	ands.w	r4, r1, #1
 80a2252:	d110      	bne.n	80a2276 <_Z16_fetch_usbserialv+0x36>
 80a2254:	4628      	mov	r0, r5
 80a2256:	f7fd ff26 	bl	80a00a6 <__cxa_guard_acquire>
 80a225a:	b160      	cbz	r0, 80a2276 <_Z16_fetch_usbserialv+0x36>
 80a225c:	aa01      	add	r2, sp, #4
 80a225e:	4621      	mov	r1, r4
 80a2260:	4807      	ldr	r0, [pc, #28]	; (80a2280 <_Z16_fetch_usbserialv+0x40>)
 80a2262:	f7ff ffbd 	bl	80a21e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2266:	4628      	mov	r0, r5
 80a2268:	f7fd ff22 	bl	80a00b0 <__cxa_guard_release>
 80a226c:	4a05      	ldr	r2, [pc, #20]	; (80a2284 <_Z16_fetch_usbserialv+0x44>)
 80a226e:	4906      	ldr	r1, [pc, #24]	; (80a2288 <_Z16_fetch_usbserialv+0x48>)
 80a2270:	4803      	ldr	r0, [pc, #12]	; (80a2280 <_Z16_fetch_usbserialv+0x40>)
 80a2272:	f000 f9eb 	bl	80a264c <__aeabi_atexit>
	return _usbserial;
}
 80a2276:	4802      	ldr	r0, [pc, #8]	; (80a2280 <_Z16_fetch_usbserialv+0x40>)
 80a2278:	b007      	add	sp, #28
 80a227a:	bd30      	pop	{r4, r5, pc}
 80a227c:	200002e0 	.word	0x200002e0
 80a2280:	20000468 	.word	0x20000468
 80a2284:	20000088 	.word	0x20000088
 80a2288:	080a2161 	.word	0x080a2161

080a228c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a228c:	b510      	push	{r4, lr}
 80a228e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2290:	2214      	movs	r2, #20
 80a2292:	2100      	movs	r1, #0
 80a2294:	f001 fea9 	bl	80a3fea <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2298:	4b05      	ldr	r3, [pc, #20]	; (80a22b0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a229a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a229c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a229e:	4b05      	ldr	r3, [pc, #20]	; (80a22b4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a22a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a22a2:	f240 1301 	movw	r3, #257	; 0x101
 80a22a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a22a8:	2381      	movs	r3, #129	; 0x81
 80a22aa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a22ac:	bd10      	pop	{r4, pc}
 80a22ae:	bf00      	nop
 80a22b0:	20000518 	.word	0x20000518
 80a22b4:	20000480 	.word	0x20000480

080a22b8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a22b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22ba:	4c0e      	ldr	r4, [pc, #56]	; (80a22f4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a22bc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a22be:	a801      	add	r0, sp, #4
 80a22c0:	f7ff ffe4 	bl	80a228c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22c4:	6823      	ldr	r3, [r4, #0]
 80a22c6:	07db      	lsls	r3, r3, #31
 80a22c8:	d410      	bmi.n	80a22ec <_Z17_fetch_usbserial1v+0x34>
 80a22ca:	4620      	mov	r0, r4
 80a22cc:	f7fd feeb 	bl	80a00a6 <__cxa_guard_acquire>
 80a22d0:	b160      	cbz	r0, 80a22ec <_Z17_fetch_usbserial1v+0x34>
 80a22d2:	aa01      	add	r2, sp, #4
 80a22d4:	2101      	movs	r1, #1
 80a22d6:	4808      	ldr	r0, [pc, #32]	; (80a22f8 <_Z17_fetch_usbserial1v+0x40>)
 80a22d8:	f7ff ff82 	bl	80a21e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22dc:	4620      	mov	r0, r4
 80a22de:	f7fd fee7 	bl	80a00b0 <__cxa_guard_release>
 80a22e2:	4a06      	ldr	r2, [pc, #24]	; (80a22fc <_Z17_fetch_usbserial1v+0x44>)
 80a22e4:	4906      	ldr	r1, [pc, #24]	; (80a2300 <_Z17_fetch_usbserial1v+0x48>)
 80a22e6:	4804      	ldr	r0, [pc, #16]	; (80a22f8 <_Z17_fetch_usbserial1v+0x40>)
 80a22e8:	f000 f9b0 	bl	80a264c <__aeabi_atexit>
  return _usbserial1;
}
 80a22ec:	4802      	ldr	r0, [pc, #8]	; (80a22f8 <_Z17_fetch_usbserial1v+0x40>)
 80a22ee:	b006      	add	sp, #24
 80a22f0:	bd10      	pop	{r4, pc}
 80a22f2:	bf00      	nop
 80a22f4:	2000047c 	.word	0x2000047c
 80a22f8:	20000504 	.word	0x20000504
 80a22fc:	20000088 	.word	0x20000088
 80a2300:	080a2161 	.word	0x080a2161

080a2304 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2304:	2200      	movs	r2, #0
 80a2306:	4611      	mov	r1, r2
 80a2308:	6840      	ldr	r0, [r0, #4]
 80a230a:	f7ff b875 	b.w	80a13f8 <network_ready>

080a230e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a230e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2310:	4616      	mov	r6, r2
 80a2312:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2314:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2316:	460f      	mov	r7, r1
 80a2318:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a231a:	2100      	movs	r1, #0
 80a231c:	a803      	add	r0, sp, #12
 80a231e:	f001 fe64 	bl	80a3fea <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2322:	4630      	mov	r0, r6
 80a2324:	f001 fe92 	bl	80a404c <strlen>
 80a2328:	2500      	movs	r5, #0
 80a232a:	9500      	str	r5, [sp, #0]
 80a232c:	b281      	uxth	r1, r0
 80a232e:	687b      	ldr	r3, [r7, #4]
 80a2330:	aa03      	add	r2, sp, #12
 80a2332:	4630      	mov	r0, r6
 80a2334:	f7ff f804 	bl	80a1340 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2338:	b120      	cbz	r0, 80a2344 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a233a:	4629      	mov	r1, r5
 80a233c:	4620      	mov	r0, r4
 80a233e:	f7ff f967 	bl	80a1610 <_ZN9IPAddressC1Em>
 80a2342:	e003      	b.n	80a234c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2344:	a903      	add	r1, sp, #12
 80a2346:	4620      	mov	r0, r4
 80a2348:	f7ff f950 	bl	80a15ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a234c:	4620      	mov	r0, r4
 80a234e:	b009      	add	sp, #36	; 0x24
 80a2350:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2352 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2352:	2200      	movs	r2, #0
 80a2354:	4611      	mov	r1, r2
 80a2356:	6840      	ldr	r0, [r0, #4]
 80a2358:	f7ff b86e 	b.w	80a1438 <network_listening>

080a235c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a235c:	2200      	movs	r2, #0
 80a235e:	4611      	mov	r1, r2
 80a2360:	6840      	ldr	r0, [r0, #4]
 80a2362:	f7ff b879 	b.w	80a1458 <network_get_listen_timeout>

080a2366 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2366:	2200      	movs	r2, #0
 80a2368:	6840      	ldr	r0, [r0, #4]
 80a236a:	f7ff b86d 	b.w	80a1448 <network_set_listen_timeout>

080a236e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a236e:	2200      	movs	r2, #0
 80a2370:	f081 0101 	eor.w	r1, r1, #1
 80a2374:	6840      	ldr	r0, [r0, #4]
 80a2376:	f7ff b857 	b.w	80a1428 <network_listen>

080a237a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a237a:	2300      	movs	r3, #0
 80a237c:	461a      	mov	r2, r3
 80a237e:	4619      	mov	r1, r3
 80a2380:	6840      	ldr	r0, [r0, #4]
 80a2382:	f7ff b849 	b.w	80a1418 <network_off>

080a2386 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2386:	2300      	movs	r3, #0
 80a2388:	461a      	mov	r2, r3
 80a238a:	4619      	mov	r1, r3
 80a238c:	6840      	ldr	r0, [r0, #4]
 80a238e:	f7ff b83b 	b.w	80a1408 <network_on>

080a2392 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2392:	2200      	movs	r2, #0
 80a2394:	4611      	mov	r1, r2
 80a2396:	6840      	ldr	r0, [r0, #4]
 80a2398:	f7ff b81e 	b.w	80a13d8 <network_connecting>

080a239c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a239c:	2200      	movs	r2, #0
 80a239e:	2102      	movs	r1, #2
 80a23a0:	6840      	ldr	r0, [r0, #4]
 80a23a2:	f7ff b821 	b.w	80a13e8 <network_disconnect>

080a23a6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a23a6:	2300      	movs	r3, #0
 80a23a8:	461a      	mov	r2, r3
 80a23aa:	6840      	ldr	r0, [r0, #4]
 80a23ac:	f7ff b80c 	b.w	80a13c8 <network_connect>

080a23b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a23b0:	4b02      	ldr	r3, [pc, #8]	; (80a23bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a23b2:	2204      	movs	r2, #4
 80a23b4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a23b6:	4a02      	ldr	r2, [pc, #8]	; (80a23c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a23b8:	601a      	str	r2, [r3, #0]
 80a23ba:	4770      	bx	lr
 80a23bc:	2000061c 	.word	0x2000061c
 80a23c0:	080a4478 	.word	0x080a4478

080a23c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a23c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a23c6:	4b14      	ldr	r3, [pc, #80]	; (80a2418 <serialEventRun+0x54>)
 80a23c8:	b133      	cbz	r3, 80a23d8 <serialEventRun+0x14>
 80a23ca:	f7ff ff39 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a23ce:	6803      	ldr	r3, [r0, #0]
 80a23d0:	691b      	ldr	r3, [r3, #16]
 80a23d2:	4798      	blx	r3
 80a23d4:	2800      	cmp	r0, #0
 80a23d6:	dc16      	bgt.n	80a2406 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a23d8:	4b10      	ldr	r3, [pc, #64]	; (80a241c <serialEventRun+0x58>)
 80a23da:	b133      	cbz	r3, 80a23ea <serialEventRun+0x26>
 80a23dc:	f7ff fe98 	bl	80a2110 <_Z22__fetch_global_Serial1v>
 80a23e0:	6803      	ldr	r3, [r0, #0]
 80a23e2:	691b      	ldr	r3, [r3, #16]
 80a23e4:	4798      	blx	r3
 80a23e6:	2800      	cmp	r0, #0
 80a23e8:	dc10      	bgt.n	80a240c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a23ea:	4b0d      	ldr	r3, [pc, #52]	; (80a2420 <serialEventRun+0x5c>)
 80a23ec:	b10b      	cbz	r3, 80a23f2 <serialEventRun+0x2e>
 80a23ee:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a23f2:	4b0c      	ldr	r3, [pc, #48]	; (80a2424 <serialEventRun+0x60>)
 80a23f4:	b17b      	cbz	r3, 80a2416 <serialEventRun+0x52>
 80a23f6:	f7ff ff5f 	bl	80a22b8 <_Z17_fetch_usbserial1v>
 80a23fa:	6803      	ldr	r3, [r0, #0]
 80a23fc:	691b      	ldr	r3, [r3, #16]
 80a23fe:	4798      	blx	r3
 80a2400:	2800      	cmp	r0, #0
 80a2402:	dc06      	bgt.n	80a2412 <serialEventRun+0x4e>
 80a2404:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2406:	f3af 8000 	nop.w
 80a240a:	e7e5      	b.n	80a23d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a240c:	f3af 8000 	nop.w
 80a2410:	e7eb      	b.n	80a23ea <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2412:	f3af 8000 	nop.w
 80a2416:	bd08      	pop	{r3, pc}
	...

080a2428 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2428:	b508      	push	{r3, lr}
	serialEventRun();
 80a242a:	f7ff ffcb 	bl	80a23c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a242e:	f7fe fe15 	bl	80a105c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2432:	4b01      	ldr	r3, [pc, #4]	; (80a2438 <_post_loop+0x10>)
 80a2434:	6018      	str	r0, [r3, #0]
 80a2436:	bd08      	pop	{r3, pc}
 80a2438:	2000062c 	.word	0x2000062c

080a243c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a243c:	4802      	ldr	r0, [pc, #8]	; (80a2448 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a243e:	4a03      	ldr	r2, [pc, #12]	; (80a244c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2440:	4903      	ldr	r1, [pc, #12]	; (80a2450 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2442:	1a12      	subs	r2, r2, r0
 80a2444:	f001 bdc6 	b.w	80a3fd4 <memcpy>
 80a2448:	40024000 	.word	0x40024000
 80a244c:	40024004 	.word	0x40024004
 80a2450:	080a4590 	.word	0x080a4590

080a2454 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2454:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2456:	2300      	movs	r3, #0
 80a2458:	9300      	str	r3, [sp, #0]
 80a245a:	461a      	mov	r2, r3
 80a245c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2460:	f7fe ff98 	bl	80a1394 <system_ctrl_set_result>
}
 80a2464:	b003      	add	sp, #12
 80a2466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a246c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a246c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a246e:	8843      	ldrh	r3, [r0, #2]
 80a2470:	2b0a      	cmp	r3, #10
 80a2472:	d008      	beq.n	80a2486 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2474:	2b50      	cmp	r3, #80	; 0x50
 80a2476:	d109      	bne.n	80a248c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2478:	4b09      	ldr	r3, [pc, #36]	; (80a24a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a247a:	681b      	ldr	r3, [r3, #0]
 80a247c:	b13b      	cbz	r3, 80a248e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a247e:	b003      	add	sp, #12
 80a2480:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2484:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2486:	f7ff ffe5 	bl	80a2454 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a248a:	e006      	b.n	80a249a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a248c:	2300      	movs	r3, #0
 80a248e:	9300      	str	r3, [sp, #0]
 80a2490:	461a      	mov	r2, r3
 80a2492:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2496:	f7fe ff7d 	bl	80a1394 <system_ctrl_set_result>
        break;
    }
}
 80a249a:	b003      	add	sp, #12
 80a249c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a24a0:	20000624 	.word	0x20000624

080a24a4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a24a4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a24a6:	4c10      	ldr	r4, [pc, #64]	; (80a24e8 <module_user_init_hook+0x44>)
 80a24a8:	4d10      	ldr	r5, [pc, #64]	; (80a24ec <module_user_init_hook+0x48>)
 80a24aa:	6823      	ldr	r3, [r4, #0]
 80a24ac:	42ab      	cmp	r3, r5
 80a24ae:	4b10      	ldr	r3, [pc, #64]	; (80a24f0 <module_user_init_hook+0x4c>)
 80a24b0:	bf0c      	ite	eq
 80a24b2:	2201      	moveq	r2, #1
 80a24b4:	2200      	movne	r2, #0
 80a24b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a24b8:	d002      	beq.n	80a24c0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a24ba:	f7ff ffbf 	bl	80a243c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a24be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a24c0:	f7fe fdc4 	bl	80a104c <HAL_RNG_GetRandomNumber>
 80a24c4:	4604      	mov	r4, r0
    srand(seed);
 80a24c6:	f001 fd99 	bl	80a3ffc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a24ca:	4b0a      	ldr	r3, [pc, #40]	; (80a24f4 <module_user_init_hook+0x50>)
 80a24cc:	b113      	cbz	r3, 80a24d4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a24ce:	4620      	mov	r0, r4
 80a24d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a24d4:	2100      	movs	r1, #0
 80a24d6:	4807      	ldr	r0, [pc, #28]	; (80a24f4 <module_user_init_hook+0x50>)
 80a24d8:	f7fe ff66 	bl	80a13a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a24dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a24e0:	2100      	movs	r1, #0
 80a24e2:	4805      	ldr	r0, [pc, #20]	; (80a24f8 <module_user_init_hook+0x54>)
 80a24e4:	f7fe bf4c 	b.w	80a1380 <system_ctrl_set_app_request_handler>
 80a24e8:	40024000 	.word	0x40024000
 80a24ec:	9a271c1e 	.word	0x9a271c1e
 80a24f0:	20000628 	.word	0x20000628
 80a24f4:	00000000 	.word	0x00000000
 80a24f8:	080a246d 	.word	0x080a246d

080a24fc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a24fc:	b510      	push	{r4, lr}
 80a24fe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2500:	480f      	ldr	r0, [pc, #60]	; (80a2540 <pinAvailable+0x44>)
 80a2502:	f7ff fb2d 	bl	80a1b60 <_ZN8SPIClass9isEnabledEv>
 80a2506:	b128      	cbz	r0, 80a2514 <pinAvailable+0x18>
 80a2508:	f1a4 030d 	sub.w	r3, r4, #13
 80a250c:	2b02      	cmp	r3, #2
 80a250e:	d801      	bhi.n	80a2514 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2510:	2000      	movs	r0, #0
 80a2512:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2514:	f000 f840 	bl	80a2598 <_Z19__fetch_global_Wirev>
 80a2518:	f7ff f83d 	bl	80a1596 <_ZN7TwoWire9isEnabledEv>
 80a251c:	b108      	cbz	r0, 80a2522 <pinAvailable+0x26>
 80a251e:	2c01      	cmp	r4, #1
 80a2520:	d9f6      	bls.n	80a2510 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2522:	f7ff fdf5 	bl	80a2110 <_Z22__fetch_global_Serial1v>
 80a2526:	f7ff fdf0 	bl	80a210a <_ZN11USARTSerial9isEnabledEv>
 80a252a:	b118      	cbz	r0, 80a2534 <pinAvailable+0x38>
 80a252c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2530:	2b01      	cmp	r3, #1
 80a2532:	d9ed      	bls.n	80a2510 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2534:	2c17      	cmp	r4, #23
 80a2536:	bf8c      	ite	hi
 80a2538:	2000      	movhi	r0, #0
 80a253a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a253c:	bd10      	pop	{r4, pc}
 80a253e:	bf00      	nop
 80a2540:	20000660 	.word	0x20000660

080a2544 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2544:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2546:	b538      	push	{r3, r4, r5, lr}
 80a2548:	4604      	mov	r4, r0
 80a254a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a254c:	d80a      	bhi.n	80a2564 <pinMode+0x20>
 80a254e:	29ff      	cmp	r1, #255	; 0xff
 80a2550:	d008      	beq.n	80a2564 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2552:	f7ff ffd3 	bl	80a24fc <pinAvailable>
 80a2556:	b128      	cbz	r0, 80a2564 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2558:	4629      	mov	r1, r5
 80a255a:	4620      	mov	r0, r4
}
 80a255c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2560:	f7fe bd8c 	b.w	80a107c <HAL_Pin_Mode>
 80a2564:	bd38      	pop	{r3, r4, r5, pc}

080a2566 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2566:	b538      	push	{r3, r4, r5, lr}
 80a2568:	4604      	mov	r4, r0
 80a256a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a256c:	f7fe fd8e 	bl	80a108c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2570:	28ff      	cmp	r0, #255	; 0xff
 80a2572:	d010      	beq.n	80a2596 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2574:	2806      	cmp	r0, #6
 80a2576:	d804      	bhi.n	80a2582 <digitalWrite+0x1c>
 80a2578:	234d      	movs	r3, #77	; 0x4d
 80a257a:	fa23 f000 	lsr.w	r0, r3, r0
 80a257e:	07c3      	lsls	r3, r0, #31
 80a2580:	d409      	bmi.n	80a2596 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2582:	4620      	mov	r0, r4
 80a2584:	f7ff ffba 	bl	80a24fc <pinAvailable>
 80a2588:	b128      	cbz	r0, 80a2596 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a258a:	4629      	mov	r1, r5
 80a258c:	4620      	mov	r0, r4
}
 80a258e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2592:	f7fe bd83 	b.w	80a109c <HAL_GPIO_Write>
 80a2596:	bd38      	pop	{r3, r4, r5, pc}

080a2598 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2598:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a259a:	4d0b      	ldr	r5, [pc, #44]	; (80a25c8 <_Z19__fetch_global_Wirev+0x30>)
 80a259c:	6829      	ldr	r1, [r5, #0]
 80a259e:	f011 0401 	ands.w	r4, r1, #1
 80a25a2:	d10f      	bne.n	80a25c4 <_Z19__fetch_global_Wirev+0x2c>
 80a25a4:	4628      	mov	r0, r5
 80a25a6:	f7fd fd7e 	bl	80a00a6 <__cxa_guard_acquire>
 80a25aa:	b158      	cbz	r0, 80a25c4 <_Z19__fetch_global_Wirev+0x2c>
 80a25ac:	4621      	mov	r1, r4
 80a25ae:	4807      	ldr	r0, [pc, #28]	; (80a25cc <_Z19__fetch_global_Wirev+0x34>)
 80a25b0:	f7fe ffc2 	bl	80a1538 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a25b4:	4628      	mov	r0, r5
 80a25b6:	f7fd fd7b 	bl	80a00b0 <__cxa_guard_release>
 80a25ba:	4a05      	ldr	r2, [pc, #20]	; (80a25d0 <_Z19__fetch_global_Wirev+0x38>)
 80a25bc:	4905      	ldr	r1, [pc, #20]	; (80a25d4 <_Z19__fetch_global_Wirev+0x3c>)
 80a25be:	4803      	ldr	r0, [pc, #12]	; (80a25cc <_Z19__fetch_global_Wirev+0x34>)
 80a25c0:	f000 f844 	bl	80a264c <__aeabi_atexit>
	return wire;
}
 80a25c4:	4801      	ldr	r0, [pc, #4]	; (80a25cc <_Z19__fetch_global_Wirev+0x34>)
 80a25c6:	bd38      	pop	{r3, r4, r5, pc}
 80a25c8:	20000630 	.word	0x20000630
 80a25cc:	20000634 	.word	0x20000634
 80a25d0:	20000088 	.word	0x20000088
 80a25d4:	080a14e1 	.word	0x080a14e1

080a25d8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a25d8:	b513      	push	{r0, r1, r4, lr}
 80a25da:	4c08      	ldr	r4, [pc, #32]	; (80a25fc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a25dc:	2300      	movs	r3, #0
 80a25de:	461a      	mov	r2, r3
 80a25e0:	4619      	mov	r1, r3
 80a25e2:	9300      	str	r3, [sp, #0]
 80a25e4:	4620      	mov	r0, r4
 80a25e6:	f7ff f829 	bl	80a163c <_ZN9IPAddressC1Ehhhh>
 80a25ea:	4620      	mov	r0, r4
 80a25ec:	4a04      	ldr	r2, [pc, #16]	; (80a2600 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a25ee:	4905      	ldr	r1, [pc, #20]	; (80a2604 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a25f0:	b002      	add	sp, #8
 80a25f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a25f6:	f000 b829 	b.w	80a264c <__aeabi_atexit>
 80a25fa:	bf00      	nop
 80a25fc:	20000648 	.word	0x20000648
 80a2600:	20000088 	.word	0x20000088
 80a2604:	080a00b7 	.word	0x080a00b7

080a2608 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2608:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a260a:	4c0c      	ldr	r4, [pc, #48]	; (80a263c <_GLOBAL__sub_I_SPI+0x34>)
 80a260c:	4e0c      	ldr	r6, [pc, #48]	; (80a2640 <_GLOBAL__sub_I_SPI+0x38>)
 80a260e:	4d0d      	ldr	r5, [pc, #52]	; (80a2644 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2610:	2100      	movs	r1, #0
 80a2612:	4620      	mov	r0, r4
 80a2614:	f7ff fa24 	bl	80a1a60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2618:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a261a:	4c0b      	ldr	r4, [pc, #44]	; (80a2648 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a261c:	4632      	mov	r2, r6
 80a261e:	4629      	mov	r1, r5
 80a2620:	f000 f814 	bl	80a264c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2624:	2101      	movs	r1, #1
 80a2626:	4620      	mov	r0, r4
 80a2628:	f7ff fa1a 	bl	80a1a60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a262c:	4632      	mov	r2, r6
 80a262e:	4629      	mov	r1, r5
 80a2630:	4620      	mov	r0, r4
 80a2632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2636:	f000 b809 	b.w	80a264c <__aeabi_atexit>
 80a263a:	bf00      	nop
 80a263c:	20000660 	.word	0x20000660
 80a2640:	20000088 	.word	0x20000088
 80a2644:	080a1a51 	.word	0x080a1a51
 80a2648:	20000670 	.word	0x20000670

080a264c <__aeabi_atexit>:
 80a264c:	460b      	mov	r3, r1
 80a264e:	4601      	mov	r1, r0
 80a2650:	4618      	mov	r0, r3
 80a2652:	f001 bcb1 	b.w	80a3fb8 <__cxa_atexit>

080a2656 <_ZdlPvj>:
 80a2656:	f7fd bd24 	b.w	80a00a2 <_ZdlPv>
	...

080a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a265c:	4b24      	ldr	r3, [pc, #144]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a265e:	681a      	ldr	r2, [r3, #0]
 80a2660:	07d0      	lsls	r0, r2, #31
 80a2662:	bf5c      	itt	pl
 80a2664:	2201      	movpl	r2, #1
 80a2666:	601a      	strpl	r2, [r3, #0]
 80a2668:	4b22      	ldr	r3, [pc, #136]	; (80a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a266a:	681a      	ldr	r2, [r3, #0]
 80a266c:	07d1      	lsls	r1, r2, #31
 80a266e:	bf5c      	itt	pl
 80a2670:	2201      	movpl	r2, #1
 80a2672:	601a      	strpl	r2, [r3, #0]
 80a2674:	4b20      	ldr	r3, [pc, #128]	; (80a26f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2676:	681a      	ldr	r2, [r3, #0]
 80a2678:	07d2      	lsls	r2, r2, #31
 80a267a:	bf5c      	itt	pl
 80a267c:	2201      	movpl	r2, #1
 80a267e:	601a      	strpl	r2, [r3, #0]
 80a2680:	4b1e      	ldr	r3, [pc, #120]	; (80a26fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2682:	681a      	ldr	r2, [r3, #0]
 80a2684:	07d0      	lsls	r0, r2, #31
 80a2686:	bf5c      	itt	pl
 80a2688:	2201      	movpl	r2, #1
 80a268a:	601a      	strpl	r2, [r3, #0]
 80a268c:	4b1c      	ldr	r3, [pc, #112]	; (80a2700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a268e:	681a      	ldr	r2, [r3, #0]
 80a2690:	07d1      	lsls	r1, r2, #31
 80a2692:	bf5c      	itt	pl
 80a2694:	2201      	movpl	r2, #1
 80a2696:	601a      	strpl	r2, [r3, #0]
 80a2698:	4b1a      	ldr	r3, [pc, #104]	; (80a2704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a269a:	681a      	ldr	r2, [r3, #0]
 80a269c:	07d2      	lsls	r2, r2, #31
 80a269e:	bf5c      	itt	pl
 80a26a0:	2201      	movpl	r2, #1
 80a26a2:	601a      	strpl	r2, [r3, #0]
 80a26a4:	4b18      	ldr	r3, [pc, #96]	; (80a2708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a26a6:	681a      	ldr	r2, [r3, #0]
 80a26a8:	07d0      	lsls	r0, r2, #31
 80a26aa:	bf5c      	itt	pl
 80a26ac:	2201      	movpl	r2, #1
 80a26ae:	601a      	strpl	r2, [r3, #0]
 80a26b0:	4b16      	ldr	r3, [pc, #88]	; (80a270c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a26b2:	681a      	ldr	r2, [r3, #0]
 80a26b4:	07d1      	lsls	r1, r2, #31
 80a26b6:	bf5c      	itt	pl
 80a26b8:	2201      	movpl	r2, #1
 80a26ba:	601a      	strpl	r2, [r3, #0]
 80a26bc:	4b14      	ldr	r3, [pc, #80]	; (80a2710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a26be:	681a      	ldr	r2, [r3, #0]
 80a26c0:	07d2      	lsls	r2, r2, #31
 80a26c2:	bf5c      	itt	pl
 80a26c4:	2201      	movpl	r2, #1
 80a26c6:	601a      	strpl	r2, [r3, #0]
 80a26c8:	4b12      	ldr	r3, [pc, #72]	; (80a2714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a26ca:	681a      	ldr	r2, [r3, #0]
 80a26cc:	07d0      	lsls	r0, r2, #31
 80a26ce:	bf5c      	itt	pl
 80a26d0:	2201      	movpl	r2, #1
 80a26d2:	601a      	strpl	r2, [r3, #0]
 80a26d4:	4b10      	ldr	r3, [pc, #64]	; (80a2718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a26d6:	681a      	ldr	r2, [r3, #0]
 80a26d8:	07d1      	lsls	r1, r2, #31
 80a26da:	bf5c      	itt	pl
 80a26dc:	2201      	movpl	r2, #1
 80a26de:	601a      	strpl	r2, [r3, #0]
 80a26e0:	4b0e      	ldr	r3, [pc, #56]	; (80a271c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a26e2:	681a      	ldr	r2, [r3, #0]
 80a26e4:	07d2      	lsls	r2, r2, #31
 80a26e6:	bf5c      	itt	pl
 80a26e8:	2201      	movpl	r2, #1
 80a26ea:	601a      	strpl	r2, [r3, #0]
 80a26ec:	4770      	bx	lr
 80a26ee:	bf00      	nop
 80a26f0:	200006ac 	.word	0x200006ac
 80a26f4:	200006a8 	.word	0x200006a8
 80a26f8:	200006a4 	.word	0x200006a4
 80a26fc:	200006a0 	.word	0x200006a0
 80a2700:	2000069c 	.word	0x2000069c
 80a2704:	20000698 	.word	0x20000698
 80a2708:	20000694 	.word	0x20000694
 80a270c:	20000690 	.word	0x20000690
 80a2710:	2000068c 	.word	0x2000068c
 80a2714:	20000688 	.word	0x20000688
 80a2718:	20000684 	.word	0x20000684
 80a271c:	20000680 	.word	0x20000680

080a2720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2720:	4b18      	ldr	r3, [pc, #96]	; (80a2784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2722:	681a      	ldr	r2, [r3, #0]
 80a2724:	07d1      	lsls	r1, r2, #31
 80a2726:	bf5c      	itt	pl
 80a2728:	2201      	movpl	r2, #1
 80a272a:	601a      	strpl	r2, [r3, #0]
 80a272c:	4b16      	ldr	r3, [pc, #88]	; (80a2788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a272e:	681a      	ldr	r2, [r3, #0]
 80a2730:	07d2      	lsls	r2, r2, #31
 80a2732:	bf5c      	itt	pl
 80a2734:	2201      	movpl	r2, #1
 80a2736:	601a      	strpl	r2, [r3, #0]
 80a2738:	4b14      	ldr	r3, [pc, #80]	; (80a278c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a273a:	681a      	ldr	r2, [r3, #0]
 80a273c:	07d0      	lsls	r0, r2, #31
 80a273e:	bf5c      	itt	pl
 80a2740:	2201      	movpl	r2, #1
 80a2742:	601a      	strpl	r2, [r3, #0]
 80a2744:	4b12      	ldr	r3, [pc, #72]	; (80a2790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2746:	681a      	ldr	r2, [r3, #0]
 80a2748:	07d1      	lsls	r1, r2, #31
 80a274a:	bf5c      	itt	pl
 80a274c:	2201      	movpl	r2, #1
 80a274e:	601a      	strpl	r2, [r3, #0]
 80a2750:	4b10      	ldr	r3, [pc, #64]	; (80a2794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2752:	681a      	ldr	r2, [r3, #0]
 80a2754:	07d2      	lsls	r2, r2, #31
 80a2756:	bf5c      	itt	pl
 80a2758:	2201      	movpl	r2, #1
 80a275a:	601a      	strpl	r2, [r3, #0]
 80a275c:	4b0e      	ldr	r3, [pc, #56]	; (80a2798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a275e:	681a      	ldr	r2, [r3, #0]
 80a2760:	07d0      	lsls	r0, r2, #31
 80a2762:	bf5c      	itt	pl
 80a2764:	2201      	movpl	r2, #1
 80a2766:	601a      	strpl	r2, [r3, #0]
 80a2768:	4b0c      	ldr	r3, [pc, #48]	; (80a279c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a276a:	681a      	ldr	r2, [r3, #0]
 80a276c:	07d1      	lsls	r1, r2, #31
 80a276e:	bf5c      	itt	pl
 80a2770:	2201      	movpl	r2, #1
 80a2772:	601a      	strpl	r2, [r3, #0]
 80a2774:	4b0a      	ldr	r3, [pc, #40]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2776:	681a      	ldr	r2, [r3, #0]
 80a2778:	07d2      	lsls	r2, r2, #31
 80a277a:	bf5c      	itt	pl
 80a277c:	2201      	movpl	r2, #1
 80a277e:	601a      	strpl	r2, [r3, #0]
 80a2780:	4770      	bx	lr
 80a2782:	bf00      	nop
 80a2784:	200006cc 	.word	0x200006cc
 80a2788:	200006c8 	.word	0x200006c8
 80a278c:	200006c4 	.word	0x200006c4
 80a2790:	200006c0 	.word	0x200006c0
 80a2794:	200006bc 	.word	0x200006bc
 80a2798:	200006b8 	.word	0x200006b8
 80a279c:	200006b4 	.word	0x200006b4
 80a27a0:	200006b0 	.word	0x200006b0

080a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a27a4:	4b18      	ldr	r3, [pc, #96]	; (80a2808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a27a6:	681a      	ldr	r2, [r3, #0]
 80a27a8:	07d1      	lsls	r1, r2, #31
 80a27aa:	bf5c      	itt	pl
 80a27ac:	2201      	movpl	r2, #1
 80a27ae:	601a      	strpl	r2, [r3, #0]
 80a27b0:	4b16      	ldr	r3, [pc, #88]	; (80a280c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a27b2:	681a      	ldr	r2, [r3, #0]
 80a27b4:	07d2      	lsls	r2, r2, #31
 80a27b6:	bf5c      	itt	pl
 80a27b8:	2201      	movpl	r2, #1
 80a27ba:	601a      	strpl	r2, [r3, #0]
 80a27bc:	4b14      	ldr	r3, [pc, #80]	; (80a2810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a27be:	681a      	ldr	r2, [r3, #0]
 80a27c0:	07d0      	lsls	r0, r2, #31
 80a27c2:	bf5c      	itt	pl
 80a27c4:	2201      	movpl	r2, #1
 80a27c6:	601a      	strpl	r2, [r3, #0]
 80a27c8:	4b12      	ldr	r3, [pc, #72]	; (80a2814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a27ca:	681a      	ldr	r2, [r3, #0]
 80a27cc:	07d1      	lsls	r1, r2, #31
 80a27ce:	bf5c      	itt	pl
 80a27d0:	2201      	movpl	r2, #1
 80a27d2:	601a      	strpl	r2, [r3, #0]
 80a27d4:	4b10      	ldr	r3, [pc, #64]	; (80a2818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a27d6:	681a      	ldr	r2, [r3, #0]
 80a27d8:	07d2      	lsls	r2, r2, #31
 80a27da:	bf5c      	itt	pl
 80a27dc:	2201      	movpl	r2, #1
 80a27de:	601a      	strpl	r2, [r3, #0]
 80a27e0:	4b0e      	ldr	r3, [pc, #56]	; (80a281c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a27e2:	681a      	ldr	r2, [r3, #0]
 80a27e4:	07d0      	lsls	r0, r2, #31
 80a27e6:	bf5c      	itt	pl
 80a27e8:	2201      	movpl	r2, #1
 80a27ea:	601a      	strpl	r2, [r3, #0]
 80a27ec:	4b0c      	ldr	r3, [pc, #48]	; (80a2820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a27ee:	681a      	ldr	r2, [r3, #0]
 80a27f0:	07d1      	lsls	r1, r2, #31
 80a27f2:	bf5c      	itt	pl
 80a27f4:	2201      	movpl	r2, #1
 80a27f6:	601a      	strpl	r2, [r3, #0]
 80a27f8:	4b0a      	ldr	r3, [pc, #40]	; (80a2824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a27fa:	681a      	ldr	r2, [r3, #0]
 80a27fc:	07d2      	lsls	r2, r2, #31
 80a27fe:	bf5c      	itt	pl
 80a2800:	2201      	movpl	r2, #1
 80a2802:	601a      	strpl	r2, [r3, #0]
 80a2804:	4770      	bx	lr
 80a2806:	bf00      	nop
 80a2808:	200006ec 	.word	0x200006ec
 80a280c:	200006e8 	.word	0x200006e8
 80a2810:	200006e4 	.word	0x200006e4
 80a2814:	200006e0 	.word	0x200006e0
 80a2818:	200006dc 	.word	0x200006dc
 80a281c:	200006d8 	.word	0x200006d8
 80a2820:	200006d4 	.word	0x200006d4
 80a2824:	200006d0 	.word	0x200006d0

080a2828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2828:	4b24      	ldr	r3, [pc, #144]	; (80a28bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a282a:	681a      	ldr	r2, [r3, #0]
 80a282c:	07d0      	lsls	r0, r2, #31
 80a282e:	bf5c      	itt	pl
 80a2830:	2201      	movpl	r2, #1
 80a2832:	601a      	strpl	r2, [r3, #0]
 80a2834:	4b22      	ldr	r3, [pc, #136]	; (80a28c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2836:	681a      	ldr	r2, [r3, #0]
 80a2838:	07d1      	lsls	r1, r2, #31
 80a283a:	bf5c      	itt	pl
 80a283c:	2201      	movpl	r2, #1
 80a283e:	601a      	strpl	r2, [r3, #0]
 80a2840:	4b20      	ldr	r3, [pc, #128]	; (80a28c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2842:	681a      	ldr	r2, [r3, #0]
 80a2844:	07d2      	lsls	r2, r2, #31
 80a2846:	bf5c      	itt	pl
 80a2848:	2201      	movpl	r2, #1
 80a284a:	601a      	strpl	r2, [r3, #0]
 80a284c:	4b1e      	ldr	r3, [pc, #120]	; (80a28c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a284e:	681a      	ldr	r2, [r3, #0]
 80a2850:	07d0      	lsls	r0, r2, #31
 80a2852:	bf5c      	itt	pl
 80a2854:	2201      	movpl	r2, #1
 80a2856:	601a      	strpl	r2, [r3, #0]
 80a2858:	4b1c      	ldr	r3, [pc, #112]	; (80a28cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a285a:	681a      	ldr	r2, [r3, #0]
 80a285c:	07d1      	lsls	r1, r2, #31
 80a285e:	bf5c      	itt	pl
 80a2860:	2201      	movpl	r2, #1
 80a2862:	601a      	strpl	r2, [r3, #0]
 80a2864:	4b1a      	ldr	r3, [pc, #104]	; (80a28d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2866:	681a      	ldr	r2, [r3, #0]
 80a2868:	07d2      	lsls	r2, r2, #31
 80a286a:	bf5c      	itt	pl
 80a286c:	2201      	movpl	r2, #1
 80a286e:	601a      	strpl	r2, [r3, #0]
 80a2870:	4b18      	ldr	r3, [pc, #96]	; (80a28d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2872:	681a      	ldr	r2, [r3, #0]
 80a2874:	07d0      	lsls	r0, r2, #31
 80a2876:	bf5c      	itt	pl
 80a2878:	2201      	movpl	r2, #1
 80a287a:	601a      	strpl	r2, [r3, #0]
 80a287c:	4b16      	ldr	r3, [pc, #88]	; (80a28d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a287e:	681a      	ldr	r2, [r3, #0]
 80a2880:	07d1      	lsls	r1, r2, #31
 80a2882:	bf5c      	itt	pl
 80a2884:	2201      	movpl	r2, #1
 80a2886:	601a      	strpl	r2, [r3, #0]
 80a2888:	4b14      	ldr	r3, [pc, #80]	; (80a28dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a288a:	681a      	ldr	r2, [r3, #0]
 80a288c:	07d2      	lsls	r2, r2, #31
 80a288e:	bf5c      	itt	pl
 80a2890:	2201      	movpl	r2, #1
 80a2892:	601a      	strpl	r2, [r3, #0]
 80a2894:	4b12      	ldr	r3, [pc, #72]	; (80a28e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2896:	681a      	ldr	r2, [r3, #0]
 80a2898:	07d0      	lsls	r0, r2, #31
 80a289a:	bf5c      	itt	pl
 80a289c:	2201      	movpl	r2, #1
 80a289e:	601a      	strpl	r2, [r3, #0]
 80a28a0:	4b10      	ldr	r3, [pc, #64]	; (80a28e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a28a2:	681a      	ldr	r2, [r3, #0]
 80a28a4:	07d1      	lsls	r1, r2, #31
 80a28a6:	bf5c      	itt	pl
 80a28a8:	2201      	movpl	r2, #1
 80a28aa:	601a      	strpl	r2, [r3, #0]
 80a28ac:	4b0e      	ldr	r3, [pc, #56]	; (80a28e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a28ae:	681a      	ldr	r2, [r3, #0]
 80a28b0:	07d2      	lsls	r2, r2, #31
 80a28b2:	bf5c      	itt	pl
 80a28b4:	2201      	movpl	r2, #1
 80a28b6:	601a      	strpl	r2, [r3, #0]
 80a28b8:	4770      	bx	lr
 80a28ba:	bf00      	nop
 80a28bc:	2000071c 	.word	0x2000071c
 80a28c0:	20000718 	.word	0x20000718
 80a28c4:	20000714 	.word	0x20000714
 80a28c8:	20000710 	.word	0x20000710
 80a28cc:	2000070c 	.word	0x2000070c
 80a28d0:	20000708 	.word	0x20000708
 80a28d4:	20000704 	.word	0x20000704
 80a28d8:	20000700 	.word	0x20000700
 80a28dc:	200006fc 	.word	0x200006fc
 80a28e0:	200006f8 	.word	0x200006f8
 80a28e4:	200006f4 	.word	0x200006f4
 80a28e8:	200006f0 	.word	0x200006f0

080a28ec <atan2>:
 80a28ec:	f000 b85c 	b.w	80a29a8 <__ieee754_atan2>

080a28f0 <sqrt>:
 80a28f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a28f4:	b08b      	sub	sp, #44	; 0x2c
 80a28f6:	4604      	mov	r4, r0
 80a28f8:	460d      	mov	r5, r1
 80a28fa:	f000 f91f 	bl	80a2b3c <__ieee754_sqrt>
 80a28fe:	4b28      	ldr	r3, [pc, #160]	; (80a29a0 <sqrt+0xb0>)
 80a2900:	4606      	mov	r6, r0
 80a2902:	f993 a000 	ldrsb.w	sl, [r3]
 80a2906:	460f      	mov	r7, r1
 80a2908:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a290c:	d012      	beq.n	80a2934 <sqrt+0x44>
 80a290e:	4622      	mov	r2, r4
 80a2910:	462b      	mov	r3, r5
 80a2912:	4620      	mov	r0, r4
 80a2914:	4629      	mov	r1, r5
 80a2916:	f000 ffcd 	bl	80a38b4 <__aeabi_dcmpun>
 80a291a:	4683      	mov	fp, r0
 80a291c:	b950      	cbnz	r0, 80a2934 <sqrt+0x44>
 80a291e:	f04f 0800 	mov.w	r8, #0
 80a2922:	f04f 0900 	mov.w	r9, #0
 80a2926:	4620      	mov	r0, r4
 80a2928:	4629      	mov	r1, r5
 80a292a:	4642      	mov	r2, r8
 80a292c:	464b      	mov	r3, r9
 80a292e:	f000 ff99 	bl	80a3864 <__aeabi_dcmplt>
 80a2932:	b920      	cbnz	r0, 80a293e <sqrt+0x4e>
 80a2934:	4630      	mov	r0, r6
 80a2936:	4639      	mov	r1, r7
 80a2938:	b00b      	add	sp, #44	; 0x2c
 80a293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a293e:	4a19      	ldr	r2, [pc, #100]	; (80a29a4 <sqrt+0xb4>)
 80a2940:	2301      	movs	r3, #1
 80a2942:	f8cd b020 	str.w	fp, [sp, #32]
 80a2946:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a294a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a294e:	9201      	str	r2, [sp, #4]
 80a2950:	9300      	str	r3, [sp, #0]
 80a2952:	f1ba 0f00 	cmp.w	sl, #0
 80a2956:	d015      	beq.n	80a2984 <sqrt+0x94>
 80a2958:	4642      	mov	r2, r8
 80a295a:	464b      	mov	r3, r9
 80a295c:	4640      	mov	r0, r8
 80a295e:	4649      	mov	r1, r9
 80a2960:	f000 fe38 	bl	80a35d4 <__aeabi_ddiv>
 80a2964:	f1ba 0f02 	cmp.w	sl, #2
 80a2968:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a296c:	d10c      	bne.n	80a2988 <sqrt+0x98>
 80a296e:	f7fe fda3 	bl	80a14b8 <__errno>
 80a2972:	2321      	movs	r3, #33	; 0x21
 80a2974:	6003      	str	r3, [r0, #0]
 80a2976:	9b08      	ldr	r3, [sp, #32]
 80a2978:	b963      	cbnz	r3, 80a2994 <sqrt+0xa4>
 80a297a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a297e:	b00b      	add	sp, #44	; 0x2c
 80a2980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2984:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a2988:	4668      	mov	r0, sp
 80a298a:	f000 fb3f 	bl	80a300c <matherr>
 80a298e:	2800      	cmp	r0, #0
 80a2990:	d1f1      	bne.n	80a2976 <sqrt+0x86>
 80a2992:	e7ec      	b.n	80a296e <sqrt+0x7e>
 80a2994:	f7fe fd90 	bl	80a14b8 <__errno>
 80a2998:	9b08      	ldr	r3, [sp, #32]
 80a299a:	6003      	str	r3, [r0, #0]
 80a299c:	e7ed      	b.n	80a297a <sqrt+0x8a>
 80a299e:	bf00      	nop
 80a29a0:	20000020 	.word	0x20000020
 80a29a4:	080a44a4 	.word	0x080a44a4

080a29a8 <__ieee754_atan2>:
 80a29a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a29ac:	4254      	negs	r4, r2
 80a29ae:	4314      	orrs	r4, r2
 80a29b0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80a29b4:	f8df e180 	ldr.w	lr, [pc, #384]	; 80a2b38 <__ieee754_atan2+0x190>
 80a29b8:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
 80a29bc:	4574      	cmp	r4, lr
 80a29be:	4606      	mov	r6, r0
 80a29c0:	460d      	mov	r5, r1
 80a29c2:	d83e      	bhi.n	80a2a42 <__ieee754_atan2+0x9a>
 80a29c4:	4244      	negs	r4, r0
 80a29c6:	4304      	orrs	r4, r0
 80a29c8:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 80a29cc:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
 80a29d0:	4574      	cmp	r4, lr
 80a29d2:	468a      	mov	sl, r1
 80a29d4:	d835      	bhi.n	80a2a42 <__ieee754_atan2+0x9a>
 80a29d6:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
 80a29da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a29de:	4314      	orrs	r4, r2
 80a29e0:	d044      	beq.n	80a2a6c <__ieee754_atan2+0xc4>
 80a29e2:	179c      	asrs	r4, r3, #30
 80a29e4:	f004 0402 	and.w	r4, r4, #2
 80a29e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80a29ec:	ea50 010b 	orrs.w	r1, r0, fp
 80a29f0:	d02f      	beq.n	80a2a52 <__ieee754_atan2+0xaa>
 80a29f2:	ea52 0109 	orrs.w	r1, r2, r9
 80a29f6:	d033      	beq.n	80a2a60 <__ieee754_atan2+0xb8>
 80a29f8:	45f1      	cmp	r9, lr
 80a29fa:	d046      	beq.n	80a2a8a <__ieee754_atan2+0xe2>
 80a29fc:	45f3      	cmp	fp, lr
 80a29fe:	d02f      	beq.n	80a2a60 <__ieee754_atan2+0xb8>
 80a2a00:	ebc9 090b 	rsb	r9, r9, fp
 80a2a04:	ea4f 5929 	mov.w	r9, r9, asr #20
 80a2a08:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 80a2a0c:	dc34      	bgt.n	80a2a78 <__ieee754_atan2+0xd0>
 80a2a0e:	2b00      	cmp	r3, #0
 80a2a10:	db57      	blt.n	80a2ac2 <__ieee754_atan2+0x11a>
 80a2a12:	4630      	mov	r0, r6
 80a2a14:	4629      	mov	r1, r5
 80a2a16:	f000 fddd 	bl	80a35d4 <__aeabi_ddiv>
 80a2a1a:	f000 faf3 	bl	80a3004 <fabs>
 80a2a1e:	f000 f953 	bl	80a2cc8 <atan>
 80a2a22:	2c01      	cmp	r4, #1
 80a2a24:	d04a      	beq.n	80a2abc <__ieee754_atan2+0x114>
 80a2a26:	2c02      	cmp	r4, #2
 80a2a28:	d03b      	beq.n	80a2aa2 <__ieee754_atan2+0xfa>
 80a2a2a:	b184      	cbz	r4, 80a2a4e <__ieee754_atan2+0xa6>
 80a2a2c:	a332      	add	r3, pc, #200	; (adr r3, 80a2af8 <__ieee754_atan2+0x150>)
 80a2a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a32:	f000 faf1 	bl	80a3018 <__aeabi_dsub>
 80a2a36:	a332      	add	r3, pc, #200	; (adr r3, 80a2b00 <__ieee754_atan2+0x158>)
 80a2a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a3c:	f000 faec 	bl	80a3018 <__aeabi_dsub>
 80a2a40:	e005      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2a42:	4610      	mov	r0, r2
 80a2a44:	4619      	mov	r1, r3
 80a2a46:	4632      	mov	r2, r6
 80a2a48:	462b      	mov	r3, r5
 80a2a4a:	f000 fae7 	bl	80a301c <__adddf3>
 80a2a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a52:	2c02      	cmp	r4, #2
 80a2a54:	d014      	beq.n	80a2a80 <__ieee754_atan2+0xd8>
 80a2a56:	2c03      	cmp	r4, #3
 80a2a58:	d10c      	bne.n	80a2a74 <__ieee754_atan2+0xcc>
 80a2a5a:	482d      	ldr	r0, [pc, #180]	; (80a2b10 <__ieee754_atan2+0x168>)
 80a2a5c:	492d      	ldr	r1, [pc, #180]	; (80a2b14 <__ieee754_atan2+0x16c>)
 80a2a5e:	e7f6      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2a60:	f1ba 0f00 	cmp.w	sl, #0
 80a2a64:	482a      	ldr	r0, [pc, #168]	; (80a2b10 <__ieee754_atan2+0x168>)
 80a2a66:	db0e      	blt.n	80a2a86 <__ieee754_atan2+0xde>
 80a2a68:	492b      	ldr	r1, [pc, #172]	; (80a2b18 <__ieee754_atan2+0x170>)
 80a2a6a:	e7f0      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2a6c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a70:	f000 b92a 	b.w	80a2cc8 <atan>
 80a2a74:	4629      	mov	r1, r5
 80a2a76:	e7ea      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2a78:	a123      	add	r1, pc, #140	; (adr r1, 80a2b08 <__ieee754_atan2+0x160>)
 80a2a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2a7e:	e7d0      	b.n	80a2a22 <__ieee754_atan2+0x7a>
 80a2a80:	4823      	ldr	r0, [pc, #140]	; (80a2b10 <__ieee754_atan2+0x168>)
 80a2a82:	4926      	ldr	r1, [pc, #152]	; (80a2b1c <__ieee754_atan2+0x174>)
 80a2a84:	e7e3      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2a86:	4926      	ldr	r1, [pc, #152]	; (80a2b20 <__ieee754_atan2+0x178>)
 80a2a88:	e7e1      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2a8a:	45cb      	cmp	fp, r9
 80a2a8c:	d01f      	beq.n	80a2ace <__ieee754_atan2+0x126>
 80a2a8e:	2c02      	cmp	r4, #2
 80a2a90:	d0f6      	beq.n	80a2a80 <__ieee754_atan2+0xd8>
 80a2a92:	2c03      	cmp	r4, #3
 80a2a94:	d0e1      	beq.n	80a2a5a <__ieee754_atan2+0xb2>
 80a2a96:	2c01      	cmp	r4, #1
 80a2a98:	f04f 0000 	mov.w	r0, #0
 80a2a9c:	d020      	beq.n	80a2ae0 <__ieee754_atan2+0x138>
 80a2a9e:	4601      	mov	r1, r0
 80a2aa0:	e7d5      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2aa2:	a315      	add	r3, pc, #84	; (adr r3, 80a2af8 <__ieee754_atan2+0x150>)
 80a2aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2aa8:	f000 fab6 	bl	80a3018 <__aeabi_dsub>
 80a2aac:	4602      	mov	r2, r0
 80a2aae:	460b      	mov	r3, r1
 80a2ab0:	a113      	add	r1, pc, #76	; (adr r1, 80a2b00 <__ieee754_atan2+0x158>)
 80a2ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2ab6:	f000 faaf 	bl	80a3018 <__aeabi_dsub>
 80a2aba:	e7c8      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2abc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a2ac0:	e7c5      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2ac2:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
 80a2ac6:	daa4      	bge.n	80a2a12 <__ieee754_atan2+0x6a>
 80a2ac8:	2000      	movs	r0, #0
 80a2aca:	2100      	movs	r1, #0
 80a2acc:	e7a9      	b.n	80a2a22 <__ieee754_atan2+0x7a>
 80a2ace:	2c02      	cmp	r4, #2
 80a2ad0:	d00e      	beq.n	80a2af0 <__ieee754_atan2+0x148>
 80a2ad2:	2c03      	cmp	r4, #3
 80a2ad4:	d009      	beq.n	80a2aea <__ieee754_atan2+0x142>
 80a2ad6:	2c01      	cmp	r4, #1
 80a2ad8:	480d      	ldr	r0, [pc, #52]	; (80a2b10 <__ieee754_atan2+0x168>)
 80a2ada:	d004      	beq.n	80a2ae6 <__ieee754_atan2+0x13e>
 80a2adc:	4911      	ldr	r1, [pc, #68]	; (80a2b24 <__ieee754_atan2+0x17c>)
 80a2ade:	e7b6      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2ae0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a2ae4:	e7b3      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2ae6:	4910      	ldr	r1, [pc, #64]	; (80a2b28 <__ieee754_atan2+0x180>)
 80a2ae8:	e7b1      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2aea:	4810      	ldr	r0, [pc, #64]	; (80a2b2c <__ieee754_atan2+0x184>)
 80a2aec:	4910      	ldr	r1, [pc, #64]	; (80a2b30 <__ieee754_atan2+0x188>)
 80a2aee:	e7ae      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2af0:	480e      	ldr	r0, [pc, #56]	; (80a2b2c <__ieee754_atan2+0x184>)
 80a2af2:	4910      	ldr	r1, [pc, #64]	; (80a2b34 <__ieee754_atan2+0x18c>)
 80a2af4:	e7ab      	b.n	80a2a4e <__ieee754_atan2+0xa6>
 80a2af6:	bf00      	nop
 80a2af8:	33145c07 	.word	0x33145c07
 80a2afc:	3ca1a626 	.word	0x3ca1a626
 80a2b00:	54442d18 	.word	0x54442d18
 80a2b04:	400921fb 	.word	0x400921fb
 80a2b08:	54442d18 	.word	0x54442d18
 80a2b0c:	3ff921fb 	.word	0x3ff921fb
 80a2b10:	54442d18 	.word	0x54442d18
 80a2b14:	c00921fb 	.word	0xc00921fb
 80a2b18:	3ff921fb 	.word	0x3ff921fb
 80a2b1c:	400921fb 	.word	0x400921fb
 80a2b20:	bff921fb 	.word	0xbff921fb
 80a2b24:	3fe921fb 	.word	0x3fe921fb
 80a2b28:	bfe921fb 	.word	0xbfe921fb
 80a2b2c:	7f3321d2 	.word	0x7f3321d2
 80a2b30:	c002d97c 	.word	0xc002d97c
 80a2b34:	4002d97c 	.word	0x4002d97c
 80a2b38:	7ff00000 	.word	0x7ff00000

080a2b3c <__ieee754_sqrt>:
 80a2b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b40:	4e5f      	ldr	r6, [pc, #380]	; (80a2cc0 <__ieee754_sqrt+0x184>)
 80a2b42:	460c      	mov	r4, r1
 80a2b44:	46b6      	mov	lr, r6
 80a2b46:	400e      	ands	r6, r1
 80a2b48:	4576      	cmp	r6, lr
 80a2b4a:	4605      	mov	r5, r0
 80a2b4c:	f000 8098 	beq.w	80a2c80 <__ieee754_sqrt+0x144>
 80a2b50:	2900      	cmp	r1, #0
 80a2b52:	460b      	mov	r3, r1
 80a2b54:	4602      	mov	r2, r0
 80a2b56:	dd74      	ble.n	80a2c42 <__ieee754_sqrt+0x106>
 80a2b58:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a2b5c:	d07f      	beq.n	80a2c5e <__ieee754_sqrt+0x122>
 80a2b5e:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a2b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a2b66:	f01e 0f01 	tst.w	lr, #1
 80a2b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2b6e:	d163      	bne.n	80a2c38 <__ieee754_sqrt+0xfc>
 80a2b70:	2700      	movs	r7, #0
 80a2b72:	463e      	mov	r6, r7
 80a2b74:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a2b78:	440b      	add	r3, r1
 80a2b7a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a2b7e:	0052      	lsls	r2, r2, #1
 80a2b80:	2016      	movs	r0, #22
 80a2b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a2b86:	1874      	adds	r4, r6, r1
 80a2b88:	429c      	cmp	r4, r3
 80a2b8a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a2b8e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a2b92:	dc02      	bgt.n	80a2b9a <__ieee754_sqrt+0x5e>
 80a2b94:	1b1b      	subs	r3, r3, r4
 80a2b96:	1866      	adds	r6, r4, r1
 80a2b98:	440f      	add	r7, r1
 80a2b9a:	3801      	subs	r0, #1
 80a2b9c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a2ba0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a2ba4:	d1ef      	bne.n	80a2b86 <__ieee754_sqrt+0x4a>
 80a2ba6:	4684      	mov	ip, r0
 80a2ba8:	2420      	movs	r4, #32
 80a2baa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a2bae:	e009      	b.n	80a2bc4 <__ieee754_sqrt+0x88>
 80a2bb0:	d020      	beq.n	80a2bf4 <__ieee754_sqrt+0xb8>
 80a2bb2:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a2bb6:	3c01      	subs	r4, #1
 80a2bb8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a2bbc:	442b      	add	r3, r5
 80a2bbe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a2bc2:	d020      	beq.n	80a2c06 <__ieee754_sqrt+0xca>
 80a2bc4:	429e      	cmp	r6, r3
 80a2bc6:	eb01 050c 	add.w	r5, r1, ip
 80a2bca:	daf1      	bge.n	80a2bb0 <__ieee754_sqrt+0x74>
 80a2bcc:	2d00      	cmp	r5, #0
 80a2bce:	eb05 0c01 	add.w	ip, r5, r1
 80a2bd2:	db09      	blt.n	80a2be8 <__ieee754_sqrt+0xac>
 80a2bd4:	46b0      	mov	r8, r6
 80a2bd6:	4295      	cmp	r5, r2
 80a2bd8:	eba3 0306 	sub.w	r3, r3, r6
 80a2bdc:	d900      	bls.n	80a2be0 <__ieee754_sqrt+0xa4>
 80a2bde:	3b01      	subs	r3, #1
 80a2be0:	4646      	mov	r6, r8
 80a2be2:	1b52      	subs	r2, r2, r5
 80a2be4:	4408      	add	r0, r1
 80a2be6:	e7e4      	b.n	80a2bb2 <__ieee754_sqrt+0x76>
 80a2be8:	f1bc 0f00 	cmp.w	ip, #0
 80a2bec:	dbf2      	blt.n	80a2bd4 <__ieee754_sqrt+0x98>
 80a2bee:	f106 0801 	add.w	r8, r6, #1
 80a2bf2:	e7f0      	b.n	80a2bd6 <__ieee754_sqrt+0x9a>
 80a2bf4:	4295      	cmp	r5, r2
 80a2bf6:	d817      	bhi.n	80a2c28 <__ieee754_sqrt+0xec>
 80a2bf8:	2d00      	cmp	r5, #0
 80a2bfa:	eb05 0c01 	add.w	ip, r5, r1
 80a2bfe:	db49      	blt.n	80a2c94 <__ieee754_sqrt+0x158>
 80a2c00:	4698      	mov	r8, r3
 80a2c02:	2300      	movs	r3, #0
 80a2c04:	e7ec      	b.n	80a2be0 <__ieee754_sqrt+0xa4>
 80a2c06:	4313      	orrs	r3, r2
 80a2c08:	d110      	bne.n	80a2c2c <__ieee754_sqrt+0xf0>
 80a2c0a:	0840      	lsrs	r0, r0, #1
 80a2c0c:	107b      	asrs	r3, r7, #1
 80a2c0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a2c12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a2c16:	07fa      	lsls	r2, r7, #31
 80a2c18:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a2c1c:	4639      	mov	r1, r7
 80a2c1e:	bf48      	it	mi
 80a2c20:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a2c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2c28:	4633      	mov	r3, r6
 80a2c2a:	e7c2      	b.n	80a2bb2 <__ieee754_sqrt+0x76>
 80a2c2c:	1c41      	adds	r1, r0, #1
 80a2c2e:	d035      	beq.n	80a2c9c <__ieee754_sqrt+0x160>
 80a2c30:	f000 0301 	and.w	r3, r0, #1
 80a2c34:	4418      	add	r0, r3
 80a2c36:	e7e8      	b.n	80a2c0a <__ieee754_sqrt+0xce>
 80a2c38:	005b      	lsls	r3, r3, #1
 80a2c3a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a2c3e:	0052      	lsls	r2, r2, #1
 80a2c40:	e796      	b.n	80a2b70 <__ieee754_sqrt+0x34>
 80a2c42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a2c46:	4306      	orrs	r6, r0
 80a2c48:	d0ec      	beq.n	80a2c24 <__ieee754_sqrt+0xe8>
 80a2c4a:	bb79      	cbnz	r1, 80a2cac <__ieee754_sqrt+0x170>
 80a2c4c:	468e      	mov	lr, r1
 80a2c4e:	0ad3      	lsrs	r3, r2, #11
 80a2c50:	f1ae 0e15 	sub.w	lr, lr, #21
 80a2c54:	0552      	lsls	r2, r2, #21
 80a2c56:	2b00      	cmp	r3, #0
 80a2c58:	d0f9      	beq.n	80a2c4e <__ieee754_sqrt+0x112>
 80a2c5a:	02dd      	lsls	r5, r3, #11
 80a2c5c:	d421      	bmi.n	80a2ca2 <__ieee754_sqrt+0x166>
 80a2c5e:	2100      	movs	r1, #0
 80a2c60:	e000      	b.n	80a2c64 <__ieee754_sqrt+0x128>
 80a2c62:	4601      	mov	r1, r0
 80a2c64:	005b      	lsls	r3, r3, #1
 80a2c66:	02dc      	lsls	r4, r3, #11
 80a2c68:	f101 0001 	add.w	r0, r1, #1
 80a2c6c:	d5f9      	bpl.n	80a2c62 <__ieee754_sqrt+0x126>
 80a2c6e:	f1c0 0420 	rsb	r4, r0, #32
 80a2c72:	fa22 f404 	lsr.w	r4, r2, r4
 80a2c76:	4323      	orrs	r3, r4
 80a2c78:	ebc1 0e0e 	rsb	lr, r1, lr
 80a2c7c:	4082      	lsls	r2, r0
 80a2c7e:	e76e      	b.n	80a2b5e <__ieee754_sqrt+0x22>
 80a2c80:	4602      	mov	r2, r0
 80a2c82:	460b      	mov	r3, r1
 80a2c84:	f000 fb7c 	bl	80a3380 <__aeabi_dmul>
 80a2c88:	462a      	mov	r2, r5
 80a2c8a:	4623      	mov	r3, r4
 80a2c8c:	f000 f9c6 	bl	80a301c <__adddf3>
 80a2c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2c94:	f1bc 0f00 	cmp.w	ip, #0
 80a2c98:	daa9      	bge.n	80a2bee <__ieee754_sqrt+0xb2>
 80a2c9a:	e7b1      	b.n	80a2c00 <__ieee754_sqrt+0xc4>
 80a2c9c:	3701      	adds	r7, #1
 80a2c9e:	4620      	mov	r0, r4
 80a2ca0:	e7b4      	b.n	80a2c0c <__ieee754_sqrt+0xd0>
 80a2ca2:	2420      	movs	r4, #32
 80a2ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a2ca8:	2000      	movs	r0, #0
 80a2caa:	e7e2      	b.n	80a2c72 <__ieee754_sqrt+0x136>
 80a2cac:	4602      	mov	r2, r0
 80a2cae:	460b      	mov	r3, r1
 80a2cb0:	f000 f9b2 	bl	80a3018 <__aeabi_dsub>
 80a2cb4:	4602      	mov	r2, r0
 80a2cb6:	460b      	mov	r3, r1
 80a2cb8:	f000 fc8c 	bl	80a35d4 <__aeabi_ddiv>
 80a2cbc:	e7b2      	b.n	80a2c24 <__ieee754_sqrt+0xe8>
 80a2cbe:	bf00      	nop
 80a2cc0:	7ff00000 	.word	0x7ff00000
 80a2cc4:	00000000 	.word	0x00000000

080a2cc8 <atan>:
 80a2cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2ccc:	4bc0      	ldr	r3, [pc, #768]	; (80a2fd0 <atan+0x308>)
 80a2cce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a2cd2:	429e      	cmp	r6, r3
 80a2cd4:	460d      	mov	r5, r1
 80a2cd6:	468a      	mov	sl, r1
 80a2cd8:	4604      	mov	r4, r0
 80a2cda:	dd0f      	ble.n	80a2cfc <atan+0x34>
 80a2cdc:	4bbd      	ldr	r3, [pc, #756]	; (80a2fd4 <atan+0x30c>)
 80a2cde:	429e      	cmp	r6, r3
 80a2ce0:	f300 80b2 	bgt.w	80a2e48 <atan+0x180>
 80a2ce4:	f000 80ad 	beq.w	80a2e42 <atan+0x17a>
 80a2ce8:	4bbb      	ldr	r3, [pc, #748]	; (80a2fd8 <atan+0x310>)
 80a2cea:	49bc      	ldr	r1, [pc, #752]	; (80a2fdc <atan+0x314>)
 80a2cec:	4cbc      	ldr	r4, [pc, #752]	; (80a2fe0 <atan+0x318>)
 80a2cee:	f1ba 0f00 	cmp.w	sl, #0
 80a2cf2:	bfc8      	it	gt
 80a2cf4:	4619      	movgt	r1, r3
 80a2cf6:	4620      	mov	r0, r4
 80a2cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2cfc:	4bb9      	ldr	r3, [pc, #740]	; (80a2fe4 <atan+0x31c>)
 80a2cfe:	429e      	cmp	r6, r3
 80a2d00:	f300 80bc 	bgt.w	80a2e7c <atan+0x1b4>
 80a2d04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80a2d08:	429e      	cmp	r6, r3
 80a2d0a:	f340 80a7 	ble.w	80a2e5c <atan+0x194>
 80a2d0e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80a2d12:	4622      	mov	r2, r4
 80a2d14:	462b      	mov	r3, r5
 80a2d16:	4620      	mov	r0, r4
 80a2d18:	4629      	mov	r1, r5
 80a2d1a:	f000 fb31 	bl	80a3380 <__aeabi_dmul>
 80a2d1e:	4602      	mov	r2, r0
 80a2d20:	460b      	mov	r3, r1
 80a2d22:	4680      	mov	r8, r0
 80a2d24:	4689      	mov	r9, r1
 80a2d26:	f000 fb2b 	bl	80a3380 <__aeabi_dmul>
 80a2d2a:	a391      	add	r3, pc, #580	; (adr r3, 80a2f70 <atan+0x2a8>)
 80a2d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d30:	4606      	mov	r6, r0
 80a2d32:	460f      	mov	r7, r1
 80a2d34:	f000 fb24 	bl	80a3380 <__aeabi_dmul>
 80a2d38:	a38f      	add	r3, pc, #572	; (adr r3, 80a2f78 <atan+0x2b0>)
 80a2d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d3e:	f000 f96d 	bl	80a301c <__adddf3>
 80a2d42:	4632      	mov	r2, r6
 80a2d44:	463b      	mov	r3, r7
 80a2d46:	f000 fb1b 	bl	80a3380 <__aeabi_dmul>
 80a2d4a:	a38d      	add	r3, pc, #564	; (adr r3, 80a2f80 <atan+0x2b8>)
 80a2d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d50:	f000 f964 	bl	80a301c <__adddf3>
 80a2d54:	4632      	mov	r2, r6
 80a2d56:	463b      	mov	r3, r7
 80a2d58:	f000 fb12 	bl	80a3380 <__aeabi_dmul>
 80a2d5c:	a38a      	add	r3, pc, #552	; (adr r3, 80a2f88 <atan+0x2c0>)
 80a2d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d62:	f000 f95b 	bl	80a301c <__adddf3>
 80a2d66:	4632      	mov	r2, r6
 80a2d68:	463b      	mov	r3, r7
 80a2d6a:	f000 fb09 	bl	80a3380 <__aeabi_dmul>
 80a2d6e:	a388      	add	r3, pc, #544	; (adr r3, 80a2f90 <atan+0x2c8>)
 80a2d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d74:	f000 f952 	bl	80a301c <__adddf3>
 80a2d78:	4632      	mov	r2, r6
 80a2d7a:	463b      	mov	r3, r7
 80a2d7c:	f000 fb00 	bl	80a3380 <__aeabi_dmul>
 80a2d80:	a385      	add	r3, pc, #532	; (adr r3, 80a2f98 <atan+0x2d0>)
 80a2d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d86:	f000 f949 	bl	80a301c <__adddf3>
 80a2d8a:	4642      	mov	r2, r8
 80a2d8c:	464b      	mov	r3, r9
 80a2d8e:	f000 faf7 	bl	80a3380 <__aeabi_dmul>
 80a2d92:	a383      	add	r3, pc, #524	; (adr r3, 80a2fa0 <atan+0x2d8>)
 80a2d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d98:	4680      	mov	r8, r0
 80a2d9a:	4689      	mov	r9, r1
 80a2d9c:	4630      	mov	r0, r6
 80a2d9e:	4639      	mov	r1, r7
 80a2da0:	f000 faee 	bl	80a3380 <__aeabi_dmul>
 80a2da4:	a380      	add	r3, pc, #512	; (adr r3, 80a2fa8 <atan+0x2e0>)
 80a2da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2daa:	f000 f935 	bl	80a3018 <__aeabi_dsub>
 80a2dae:	4632      	mov	r2, r6
 80a2db0:	463b      	mov	r3, r7
 80a2db2:	f000 fae5 	bl	80a3380 <__aeabi_dmul>
 80a2db6:	a37e      	add	r3, pc, #504	; (adr r3, 80a2fb0 <atan+0x2e8>)
 80a2db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2dbc:	f000 f92c 	bl	80a3018 <__aeabi_dsub>
 80a2dc0:	4632      	mov	r2, r6
 80a2dc2:	463b      	mov	r3, r7
 80a2dc4:	f000 fadc 	bl	80a3380 <__aeabi_dmul>
 80a2dc8:	a37b      	add	r3, pc, #492	; (adr r3, 80a2fb8 <atan+0x2f0>)
 80a2dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2dce:	f000 f923 	bl	80a3018 <__aeabi_dsub>
 80a2dd2:	4632      	mov	r2, r6
 80a2dd4:	463b      	mov	r3, r7
 80a2dd6:	f000 fad3 	bl	80a3380 <__aeabi_dmul>
 80a2dda:	a379      	add	r3, pc, #484	; (adr r3, 80a2fc0 <atan+0x2f8>)
 80a2ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2de0:	f000 f91a 	bl	80a3018 <__aeabi_dsub>
 80a2de4:	4632      	mov	r2, r6
 80a2de6:	463b      	mov	r3, r7
 80a2de8:	f000 faca 	bl	80a3380 <__aeabi_dmul>
 80a2dec:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80a2df0:	4602      	mov	r2, r0
 80a2df2:	460b      	mov	r3, r1
 80a2df4:	d069      	beq.n	80a2eca <atan+0x202>
 80a2df6:	4640      	mov	r0, r8
 80a2df8:	4649      	mov	r1, r9
 80a2dfa:	f000 f90f 	bl	80a301c <__adddf3>
 80a2dfe:	4622      	mov	r2, r4
 80a2e00:	462b      	mov	r3, r5
 80a2e02:	f000 fabd 	bl	80a3380 <__aeabi_dmul>
 80a2e06:	4e78      	ldr	r6, [pc, #480]	; (80a2fe8 <atan+0x320>)
 80a2e08:	4b78      	ldr	r3, [pc, #480]	; (80a2fec <atan+0x324>)
 80a2e0a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80a2e0e:	445e      	add	r6, fp
 80a2e10:	449b      	add	fp, r3
 80a2e12:	e9db 2300 	ldrd	r2, r3, [fp]
 80a2e16:	f000 f8ff 	bl	80a3018 <__aeabi_dsub>
 80a2e1a:	4622      	mov	r2, r4
 80a2e1c:	462b      	mov	r3, r5
 80a2e1e:	f000 f8fb 	bl	80a3018 <__aeabi_dsub>
 80a2e22:	4602      	mov	r2, r0
 80a2e24:	460b      	mov	r3, r1
 80a2e26:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a2e2a:	f000 f8f5 	bl	80a3018 <__aeabi_dsub>
 80a2e2e:	f1ba 0f00 	cmp.w	sl, #0
 80a2e32:	4604      	mov	r4, r0
 80a2e34:	f6bf af5f 	bge.w	80a2cf6 <atan+0x2e>
 80a2e38:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a2e3c:	4620      	mov	r0, r4
 80a2e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2e42:	2800      	cmp	r0, #0
 80a2e44:	f43f af50 	beq.w	80a2ce8 <atan+0x20>
 80a2e48:	4622      	mov	r2, r4
 80a2e4a:	4620      	mov	r0, r4
 80a2e4c:	462b      	mov	r3, r5
 80a2e4e:	4629      	mov	r1, r5
 80a2e50:	f000 f8e4 	bl	80a301c <__adddf3>
 80a2e54:	4604      	mov	r4, r0
 80a2e56:	4620      	mov	r0, r4
 80a2e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2e5c:	a35a      	add	r3, pc, #360	; (adr r3, 80a2fc8 <atan+0x300>)
 80a2e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e62:	f000 f8db 	bl	80a301c <__adddf3>
 80a2e66:	2200      	movs	r2, #0
 80a2e68:	4b61      	ldr	r3, [pc, #388]	; (80a2ff0 <atan+0x328>)
 80a2e6a:	f000 fd19 	bl	80a38a0 <__aeabi_dcmpgt>
 80a2e6e:	2800      	cmp	r0, #0
 80a2e70:	f43f af4d 	beq.w	80a2d0e <atan+0x46>
 80a2e74:	4629      	mov	r1, r5
 80a2e76:	4620      	mov	r0, r4
 80a2e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2e7c:	f000 f8c2 	bl	80a3004 <fabs>
 80a2e80:	4b5c      	ldr	r3, [pc, #368]	; (80a2ff4 <atan+0x32c>)
 80a2e82:	4604      	mov	r4, r0
 80a2e84:	429e      	cmp	r6, r3
 80a2e86:	460d      	mov	r5, r1
 80a2e88:	dc2f      	bgt.n	80a2eea <atan+0x222>
 80a2e8a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80a2e8e:	429e      	cmp	r6, r3
 80a2e90:	dc54      	bgt.n	80a2f3c <atan+0x274>
 80a2e92:	4602      	mov	r2, r0
 80a2e94:	460b      	mov	r3, r1
 80a2e96:	f000 f8c1 	bl	80a301c <__adddf3>
 80a2e9a:	2200      	movs	r2, #0
 80a2e9c:	4b54      	ldr	r3, [pc, #336]	; (80a2ff0 <atan+0x328>)
 80a2e9e:	f000 f8bb 	bl	80a3018 <__aeabi_dsub>
 80a2ea2:	2200      	movs	r2, #0
 80a2ea4:	4606      	mov	r6, r0
 80a2ea6:	460f      	mov	r7, r1
 80a2ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a2eac:	4620      	mov	r0, r4
 80a2eae:	4629      	mov	r1, r5
 80a2eb0:	f000 f8b4 	bl	80a301c <__adddf3>
 80a2eb4:	4602      	mov	r2, r0
 80a2eb6:	460b      	mov	r3, r1
 80a2eb8:	4630      	mov	r0, r6
 80a2eba:	4639      	mov	r1, r7
 80a2ebc:	f000 fb8a 	bl	80a35d4 <__aeabi_ddiv>
 80a2ec0:	f04f 0b00 	mov.w	fp, #0
 80a2ec4:	4604      	mov	r4, r0
 80a2ec6:	460d      	mov	r5, r1
 80a2ec8:	e723      	b.n	80a2d12 <atan+0x4a>
 80a2eca:	4640      	mov	r0, r8
 80a2ecc:	4649      	mov	r1, r9
 80a2ece:	f000 f8a5 	bl	80a301c <__adddf3>
 80a2ed2:	4622      	mov	r2, r4
 80a2ed4:	462b      	mov	r3, r5
 80a2ed6:	f000 fa53 	bl	80a3380 <__aeabi_dmul>
 80a2eda:	4602      	mov	r2, r0
 80a2edc:	460b      	mov	r3, r1
 80a2ede:	4620      	mov	r0, r4
 80a2ee0:	4629      	mov	r1, r5
 80a2ee2:	f000 f899 	bl	80a3018 <__aeabi_dsub>
 80a2ee6:	4604      	mov	r4, r0
 80a2ee8:	e705      	b.n	80a2cf6 <atan+0x2e>
 80a2eea:	4b43      	ldr	r3, [pc, #268]	; (80a2ff8 <atan+0x330>)
 80a2eec:	429e      	cmp	r6, r3
 80a2eee:	dc1a      	bgt.n	80a2f26 <atan+0x25e>
 80a2ef0:	2200      	movs	r2, #0
 80a2ef2:	4b42      	ldr	r3, [pc, #264]	; (80a2ffc <atan+0x334>)
 80a2ef4:	f000 f890 	bl	80a3018 <__aeabi_dsub>
 80a2ef8:	2200      	movs	r2, #0
 80a2efa:	4606      	mov	r6, r0
 80a2efc:	460f      	mov	r7, r1
 80a2efe:	4b3f      	ldr	r3, [pc, #252]	; (80a2ffc <atan+0x334>)
 80a2f00:	4620      	mov	r0, r4
 80a2f02:	4629      	mov	r1, r5
 80a2f04:	f000 fa3c 	bl	80a3380 <__aeabi_dmul>
 80a2f08:	2200      	movs	r2, #0
 80a2f0a:	4b39      	ldr	r3, [pc, #228]	; (80a2ff0 <atan+0x328>)
 80a2f0c:	f000 f886 	bl	80a301c <__adddf3>
 80a2f10:	4602      	mov	r2, r0
 80a2f12:	460b      	mov	r3, r1
 80a2f14:	4630      	mov	r0, r6
 80a2f16:	4639      	mov	r1, r7
 80a2f18:	f000 fb5c 	bl	80a35d4 <__aeabi_ddiv>
 80a2f1c:	f04f 0b02 	mov.w	fp, #2
 80a2f20:	4604      	mov	r4, r0
 80a2f22:	460d      	mov	r5, r1
 80a2f24:	e6f5      	b.n	80a2d12 <atan+0x4a>
 80a2f26:	4602      	mov	r2, r0
 80a2f28:	460b      	mov	r3, r1
 80a2f2a:	2000      	movs	r0, #0
 80a2f2c:	4934      	ldr	r1, [pc, #208]	; (80a3000 <atan+0x338>)
 80a2f2e:	f000 fb51 	bl	80a35d4 <__aeabi_ddiv>
 80a2f32:	f04f 0b03 	mov.w	fp, #3
 80a2f36:	4604      	mov	r4, r0
 80a2f38:	460d      	mov	r5, r1
 80a2f3a:	e6ea      	b.n	80a2d12 <atan+0x4a>
 80a2f3c:	2200      	movs	r2, #0
 80a2f3e:	4b2c      	ldr	r3, [pc, #176]	; (80a2ff0 <atan+0x328>)
 80a2f40:	f000 f86a 	bl	80a3018 <__aeabi_dsub>
 80a2f44:	2200      	movs	r2, #0
 80a2f46:	4606      	mov	r6, r0
 80a2f48:	460f      	mov	r7, r1
 80a2f4a:	4b29      	ldr	r3, [pc, #164]	; (80a2ff0 <atan+0x328>)
 80a2f4c:	4620      	mov	r0, r4
 80a2f4e:	4629      	mov	r1, r5
 80a2f50:	f000 f864 	bl	80a301c <__adddf3>
 80a2f54:	4602      	mov	r2, r0
 80a2f56:	460b      	mov	r3, r1
 80a2f58:	4630      	mov	r0, r6
 80a2f5a:	4639      	mov	r1, r7
 80a2f5c:	f000 fb3a 	bl	80a35d4 <__aeabi_ddiv>
 80a2f60:	f04f 0b01 	mov.w	fp, #1
 80a2f64:	4604      	mov	r4, r0
 80a2f66:	460d      	mov	r5, r1
 80a2f68:	e6d3      	b.n	80a2d12 <atan+0x4a>
 80a2f6a:	bf00      	nop
 80a2f6c:	f3af 8000 	nop.w
 80a2f70:	e322da11 	.word	0xe322da11
 80a2f74:	3f90ad3a 	.word	0x3f90ad3a
 80a2f78:	24760deb 	.word	0x24760deb
 80a2f7c:	3fa97b4b 	.word	0x3fa97b4b
 80a2f80:	a0d03d51 	.word	0xa0d03d51
 80a2f84:	3fb10d66 	.word	0x3fb10d66
 80a2f88:	c54c206e 	.word	0xc54c206e
 80a2f8c:	3fb745cd 	.word	0x3fb745cd
 80a2f90:	920083ff 	.word	0x920083ff
 80a2f94:	3fc24924 	.word	0x3fc24924
 80a2f98:	5555550d 	.word	0x5555550d
 80a2f9c:	3fd55555 	.word	0x3fd55555
 80a2fa0:	2c6a6c2f 	.word	0x2c6a6c2f
 80a2fa4:	bfa2b444 	.word	0xbfa2b444
 80a2fa8:	52defd9a 	.word	0x52defd9a
 80a2fac:	3fadde2d 	.word	0x3fadde2d
 80a2fb0:	af749a6d 	.word	0xaf749a6d
 80a2fb4:	3fb3b0f2 	.word	0x3fb3b0f2
 80a2fb8:	fe231671 	.word	0xfe231671
 80a2fbc:	3fbc71c6 	.word	0x3fbc71c6
 80a2fc0:	9998ebc4 	.word	0x9998ebc4
 80a2fc4:	3fc99999 	.word	0x3fc99999
 80a2fc8:	8800759c 	.word	0x8800759c
 80a2fcc:	7e37e43c 	.word	0x7e37e43c
 80a2fd0:	440fffff 	.word	0x440fffff
 80a2fd4:	7ff00000 	.word	0x7ff00000
 80a2fd8:	3ff921fb 	.word	0x3ff921fb
 80a2fdc:	bff921fb 	.word	0xbff921fb
 80a2fe0:	54442d18 	.word	0x54442d18
 80a2fe4:	3fdbffff 	.word	0x3fdbffff
 80a2fe8:	080a44d0 	.word	0x080a44d0
 80a2fec:	080a44b0 	.word	0x080a44b0
 80a2ff0:	3ff00000 	.word	0x3ff00000
 80a2ff4:	3ff2ffff 	.word	0x3ff2ffff
 80a2ff8:	40037fff 	.word	0x40037fff
 80a2ffc:	3ff80000 	.word	0x3ff80000
 80a3000:	bff00000 	.word	0xbff00000

080a3004 <fabs>:
 80a3004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3008:	4770      	bx	lr
 80a300a:	bf00      	nop

080a300c <matherr>:
 80a300c:	2000      	movs	r0, #0
 80a300e:	4770      	bx	lr

080a3010 <__aeabi_drsub>:
 80a3010:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3014:	e002      	b.n	80a301c <__adddf3>
 80a3016:	bf00      	nop

080a3018 <__aeabi_dsub>:
 80a3018:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a301c <__adddf3>:
 80a301c:	b530      	push	{r4, r5, lr}
 80a301e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3022:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3026:	ea94 0f05 	teq	r4, r5
 80a302a:	bf08      	it	eq
 80a302c:	ea90 0f02 	teqeq	r0, r2
 80a3030:	bf1f      	itttt	ne
 80a3032:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3036:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a303a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a303e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3042:	f000 80e2 	beq.w	80a320a <__adddf3+0x1ee>
 80a3046:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a304a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a304e:	bfb8      	it	lt
 80a3050:	426d      	neglt	r5, r5
 80a3052:	dd0c      	ble.n	80a306e <__adddf3+0x52>
 80a3054:	442c      	add	r4, r5
 80a3056:	ea80 0202 	eor.w	r2, r0, r2
 80a305a:	ea81 0303 	eor.w	r3, r1, r3
 80a305e:	ea82 0000 	eor.w	r0, r2, r0
 80a3062:	ea83 0101 	eor.w	r1, r3, r1
 80a3066:	ea80 0202 	eor.w	r2, r0, r2
 80a306a:	ea81 0303 	eor.w	r3, r1, r3
 80a306e:	2d36      	cmp	r5, #54	; 0x36
 80a3070:	bf88      	it	hi
 80a3072:	bd30      	pophi	{r4, r5, pc}
 80a3074:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3078:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a307c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3080:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3084:	d002      	beq.n	80a308c <__adddf3+0x70>
 80a3086:	4240      	negs	r0, r0
 80a3088:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a308c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3090:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3094:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3098:	d002      	beq.n	80a30a0 <__adddf3+0x84>
 80a309a:	4252      	negs	r2, r2
 80a309c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a30a0:	ea94 0f05 	teq	r4, r5
 80a30a4:	f000 80a7 	beq.w	80a31f6 <__adddf3+0x1da>
 80a30a8:	f1a4 0401 	sub.w	r4, r4, #1
 80a30ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80a30b0:	db0d      	blt.n	80a30ce <__adddf3+0xb2>
 80a30b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a30b6:	fa22 f205 	lsr.w	r2, r2, r5
 80a30ba:	1880      	adds	r0, r0, r2
 80a30bc:	f141 0100 	adc.w	r1, r1, #0
 80a30c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a30c4:	1880      	adds	r0, r0, r2
 80a30c6:	fa43 f305 	asr.w	r3, r3, r5
 80a30ca:	4159      	adcs	r1, r3
 80a30cc:	e00e      	b.n	80a30ec <__adddf3+0xd0>
 80a30ce:	f1a5 0520 	sub.w	r5, r5, #32
 80a30d2:	f10e 0e20 	add.w	lr, lr, #32
 80a30d6:	2a01      	cmp	r2, #1
 80a30d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a30dc:	bf28      	it	cs
 80a30de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a30e2:	fa43 f305 	asr.w	r3, r3, r5
 80a30e6:	18c0      	adds	r0, r0, r3
 80a30e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a30ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a30f0:	d507      	bpl.n	80a3102 <__adddf3+0xe6>
 80a30f2:	f04f 0e00 	mov.w	lr, #0
 80a30f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a30fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a30fe:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3102:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3106:	d31b      	bcc.n	80a3140 <__adddf3+0x124>
 80a3108:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a310c:	d30c      	bcc.n	80a3128 <__adddf3+0x10c>
 80a310e:	0849      	lsrs	r1, r1, #1
 80a3110:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3114:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3118:	f104 0401 	add.w	r4, r4, #1
 80a311c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3120:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3124:	f080 809a 	bcs.w	80a325c <__adddf3+0x240>
 80a3128:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a312c:	bf08      	it	eq
 80a312e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3132:	f150 0000 	adcs.w	r0, r0, #0
 80a3136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a313a:	ea41 0105 	orr.w	r1, r1, r5
 80a313e:	bd30      	pop	{r4, r5, pc}
 80a3140:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3144:	4140      	adcs	r0, r0
 80a3146:	eb41 0101 	adc.w	r1, r1, r1
 80a314a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a314e:	f1a4 0401 	sub.w	r4, r4, #1
 80a3152:	d1e9      	bne.n	80a3128 <__adddf3+0x10c>
 80a3154:	f091 0f00 	teq	r1, #0
 80a3158:	bf04      	itt	eq
 80a315a:	4601      	moveq	r1, r0
 80a315c:	2000      	moveq	r0, #0
 80a315e:	fab1 f381 	clz	r3, r1
 80a3162:	bf08      	it	eq
 80a3164:	3320      	addeq	r3, #32
 80a3166:	f1a3 030b 	sub.w	r3, r3, #11
 80a316a:	f1b3 0220 	subs.w	r2, r3, #32
 80a316e:	da0c      	bge.n	80a318a <__adddf3+0x16e>
 80a3170:	320c      	adds	r2, #12
 80a3172:	dd08      	ble.n	80a3186 <__adddf3+0x16a>
 80a3174:	f102 0c14 	add.w	ip, r2, #20
 80a3178:	f1c2 020c 	rsb	r2, r2, #12
 80a317c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3180:	fa21 f102 	lsr.w	r1, r1, r2
 80a3184:	e00c      	b.n	80a31a0 <__adddf3+0x184>
 80a3186:	f102 0214 	add.w	r2, r2, #20
 80a318a:	bfd8      	it	le
 80a318c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3190:	fa01 f102 	lsl.w	r1, r1, r2
 80a3194:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3198:	bfdc      	itt	le
 80a319a:	ea41 010c 	orrle.w	r1, r1, ip
 80a319e:	4090      	lslle	r0, r2
 80a31a0:	1ae4      	subs	r4, r4, r3
 80a31a2:	bfa2      	ittt	ge
 80a31a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a31a8:	4329      	orrge	r1, r5
 80a31aa:	bd30      	popge	{r4, r5, pc}
 80a31ac:	ea6f 0404 	mvn.w	r4, r4
 80a31b0:	3c1f      	subs	r4, #31
 80a31b2:	da1c      	bge.n	80a31ee <__adddf3+0x1d2>
 80a31b4:	340c      	adds	r4, #12
 80a31b6:	dc0e      	bgt.n	80a31d6 <__adddf3+0x1ba>
 80a31b8:	f104 0414 	add.w	r4, r4, #20
 80a31bc:	f1c4 0220 	rsb	r2, r4, #32
 80a31c0:	fa20 f004 	lsr.w	r0, r0, r4
 80a31c4:	fa01 f302 	lsl.w	r3, r1, r2
 80a31c8:	ea40 0003 	orr.w	r0, r0, r3
 80a31cc:	fa21 f304 	lsr.w	r3, r1, r4
 80a31d0:	ea45 0103 	orr.w	r1, r5, r3
 80a31d4:	bd30      	pop	{r4, r5, pc}
 80a31d6:	f1c4 040c 	rsb	r4, r4, #12
 80a31da:	f1c4 0220 	rsb	r2, r4, #32
 80a31de:	fa20 f002 	lsr.w	r0, r0, r2
 80a31e2:	fa01 f304 	lsl.w	r3, r1, r4
 80a31e6:	ea40 0003 	orr.w	r0, r0, r3
 80a31ea:	4629      	mov	r1, r5
 80a31ec:	bd30      	pop	{r4, r5, pc}
 80a31ee:	fa21 f004 	lsr.w	r0, r1, r4
 80a31f2:	4629      	mov	r1, r5
 80a31f4:	bd30      	pop	{r4, r5, pc}
 80a31f6:	f094 0f00 	teq	r4, #0
 80a31fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a31fe:	bf06      	itte	eq
 80a3200:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3204:	3401      	addeq	r4, #1
 80a3206:	3d01      	subne	r5, #1
 80a3208:	e74e      	b.n	80a30a8 <__adddf3+0x8c>
 80a320a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a320e:	bf18      	it	ne
 80a3210:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3214:	d029      	beq.n	80a326a <__adddf3+0x24e>
 80a3216:	ea94 0f05 	teq	r4, r5
 80a321a:	bf08      	it	eq
 80a321c:	ea90 0f02 	teqeq	r0, r2
 80a3220:	d005      	beq.n	80a322e <__adddf3+0x212>
 80a3222:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3226:	bf04      	itt	eq
 80a3228:	4619      	moveq	r1, r3
 80a322a:	4610      	moveq	r0, r2
 80a322c:	bd30      	pop	{r4, r5, pc}
 80a322e:	ea91 0f03 	teq	r1, r3
 80a3232:	bf1e      	ittt	ne
 80a3234:	2100      	movne	r1, #0
 80a3236:	2000      	movne	r0, #0
 80a3238:	bd30      	popne	{r4, r5, pc}
 80a323a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a323e:	d105      	bne.n	80a324c <__adddf3+0x230>
 80a3240:	0040      	lsls	r0, r0, #1
 80a3242:	4149      	adcs	r1, r1
 80a3244:	bf28      	it	cs
 80a3246:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a324a:	bd30      	pop	{r4, r5, pc}
 80a324c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3250:	bf3c      	itt	cc
 80a3252:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3256:	bd30      	popcc	{r4, r5, pc}
 80a3258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a325c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3260:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3264:	f04f 0000 	mov.w	r0, #0
 80a3268:	bd30      	pop	{r4, r5, pc}
 80a326a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a326e:	bf1a      	itte	ne
 80a3270:	4619      	movne	r1, r3
 80a3272:	4610      	movne	r0, r2
 80a3274:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3278:	bf1c      	itt	ne
 80a327a:	460b      	movne	r3, r1
 80a327c:	4602      	movne	r2, r0
 80a327e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3282:	bf06      	itte	eq
 80a3284:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3288:	ea91 0f03 	teqeq	r1, r3
 80a328c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3290:	bd30      	pop	{r4, r5, pc}
 80a3292:	bf00      	nop

080a3294 <__aeabi_ui2d>:
 80a3294:	f090 0f00 	teq	r0, #0
 80a3298:	bf04      	itt	eq
 80a329a:	2100      	moveq	r1, #0
 80a329c:	4770      	bxeq	lr
 80a329e:	b530      	push	{r4, r5, lr}
 80a32a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a32a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a32a8:	f04f 0500 	mov.w	r5, #0
 80a32ac:	f04f 0100 	mov.w	r1, #0
 80a32b0:	e750      	b.n	80a3154 <__adddf3+0x138>
 80a32b2:	bf00      	nop

080a32b4 <__aeabi_i2d>:
 80a32b4:	f090 0f00 	teq	r0, #0
 80a32b8:	bf04      	itt	eq
 80a32ba:	2100      	moveq	r1, #0
 80a32bc:	4770      	bxeq	lr
 80a32be:	b530      	push	{r4, r5, lr}
 80a32c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a32c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a32c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a32cc:	bf48      	it	mi
 80a32ce:	4240      	negmi	r0, r0
 80a32d0:	f04f 0100 	mov.w	r1, #0
 80a32d4:	e73e      	b.n	80a3154 <__adddf3+0x138>
 80a32d6:	bf00      	nop

080a32d8 <__aeabi_f2d>:
 80a32d8:	0042      	lsls	r2, r0, #1
 80a32da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a32de:	ea4f 0131 	mov.w	r1, r1, rrx
 80a32e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a32e6:	bf1f      	itttt	ne
 80a32e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a32ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a32f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a32f4:	4770      	bxne	lr
 80a32f6:	f092 0f00 	teq	r2, #0
 80a32fa:	bf14      	ite	ne
 80a32fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3300:	4770      	bxeq	lr
 80a3302:	b530      	push	{r4, r5, lr}
 80a3304:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a330c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3310:	e720      	b.n	80a3154 <__adddf3+0x138>
 80a3312:	bf00      	nop

080a3314 <__aeabi_ul2d>:
 80a3314:	ea50 0201 	orrs.w	r2, r0, r1
 80a3318:	bf08      	it	eq
 80a331a:	4770      	bxeq	lr
 80a331c:	b530      	push	{r4, r5, lr}
 80a331e:	f04f 0500 	mov.w	r5, #0
 80a3322:	e00a      	b.n	80a333a <__aeabi_l2d+0x16>

080a3324 <__aeabi_l2d>:
 80a3324:	ea50 0201 	orrs.w	r2, r0, r1
 80a3328:	bf08      	it	eq
 80a332a:	4770      	bxeq	lr
 80a332c:	b530      	push	{r4, r5, lr}
 80a332e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3332:	d502      	bpl.n	80a333a <__aeabi_l2d+0x16>
 80a3334:	4240      	negs	r0, r0
 80a3336:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a333a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a333e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3342:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3346:	f43f aedc 	beq.w	80a3102 <__adddf3+0xe6>
 80a334a:	f04f 0203 	mov.w	r2, #3
 80a334e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3352:	bf18      	it	ne
 80a3354:	3203      	addne	r2, #3
 80a3356:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a335a:	bf18      	it	ne
 80a335c:	3203      	addne	r2, #3
 80a335e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3362:	f1c2 0320 	rsb	r3, r2, #32
 80a3366:	fa00 fc03 	lsl.w	ip, r0, r3
 80a336a:	fa20 f002 	lsr.w	r0, r0, r2
 80a336e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3372:	ea40 000e 	orr.w	r0, r0, lr
 80a3376:	fa21 f102 	lsr.w	r1, r1, r2
 80a337a:	4414      	add	r4, r2
 80a337c:	e6c1      	b.n	80a3102 <__adddf3+0xe6>
 80a337e:	bf00      	nop

080a3380 <__aeabi_dmul>:
 80a3380:	b570      	push	{r4, r5, r6, lr}
 80a3382:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a338a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a338e:	bf1d      	ittte	ne
 80a3390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3394:	ea94 0f0c 	teqne	r4, ip
 80a3398:	ea95 0f0c 	teqne	r5, ip
 80a339c:	f000 f8de 	bleq	80a355c <__aeabi_dmul+0x1dc>
 80a33a0:	442c      	add	r4, r5
 80a33a2:	ea81 0603 	eor.w	r6, r1, r3
 80a33a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a33aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a33ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a33b2:	bf18      	it	ne
 80a33b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a33b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a33bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a33c0:	d038      	beq.n	80a3434 <__aeabi_dmul+0xb4>
 80a33c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a33c6:	f04f 0500 	mov.w	r5, #0
 80a33ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a33ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a33d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a33d6:	f04f 0600 	mov.w	r6, #0
 80a33da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a33de:	f09c 0f00 	teq	ip, #0
 80a33e2:	bf18      	it	ne
 80a33e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a33e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a33ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a33f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a33f4:	d204      	bcs.n	80a3400 <__aeabi_dmul+0x80>
 80a33f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a33fa:	416d      	adcs	r5, r5
 80a33fc:	eb46 0606 	adc.w	r6, r6, r6
 80a3400:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3404:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3408:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a340c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3410:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3414:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3418:	bf88      	it	hi
 80a341a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a341e:	d81e      	bhi.n	80a345e <__aeabi_dmul+0xde>
 80a3420:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3424:	bf08      	it	eq
 80a3426:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a342a:	f150 0000 	adcs.w	r0, r0, #0
 80a342e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3432:	bd70      	pop	{r4, r5, r6, pc}
 80a3434:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3438:	ea46 0101 	orr.w	r1, r6, r1
 80a343c:	ea40 0002 	orr.w	r0, r0, r2
 80a3440:	ea81 0103 	eor.w	r1, r1, r3
 80a3444:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3448:	bfc2      	ittt	gt
 80a344a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a344e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3452:	bd70      	popgt	{r4, r5, r6, pc}
 80a3454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3458:	f04f 0e00 	mov.w	lr, #0
 80a345c:	3c01      	subs	r4, #1
 80a345e:	f300 80ab 	bgt.w	80a35b8 <__aeabi_dmul+0x238>
 80a3462:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3466:	bfde      	ittt	le
 80a3468:	2000      	movle	r0, #0
 80a346a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a346e:	bd70      	pople	{r4, r5, r6, pc}
 80a3470:	f1c4 0400 	rsb	r4, r4, #0
 80a3474:	3c20      	subs	r4, #32
 80a3476:	da35      	bge.n	80a34e4 <__aeabi_dmul+0x164>
 80a3478:	340c      	adds	r4, #12
 80a347a:	dc1b      	bgt.n	80a34b4 <__aeabi_dmul+0x134>
 80a347c:	f104 0414 	add.w	r4, r4, #20
 80a3480:	f1c4 0520 	rsb	r5, r4, #32
 80a3484:	fa00 f305 	lsl.w	r3, r0, r5
 80a3488:	fa20 f004 	lsr.w	r0, r0, r4
 80a348c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3490:	ea40 0002 	orr.w	r0, r0, r2
 80a3494:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a349c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a34a0:	fa21 f604 	lsr.w	r6, r1, r4
 80a34a4:	eb42 0106 	adc.w	r1, r2, r6
 80a34a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a34ac:	bf08      	it	eq
 80a34ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a34b2:	bd70      	pop	{r4, r5, r6, pc}
 80a34b4:	f1c4 040c 	rsb	r4, r4, #12
 80a34b8:	f1c4 0520 	rsb	r5, r4, #32
 80a34bc:	fa00 f304 	lsl.w	r3, r0, r4
 80a34c0:	fa20 f005 	lsr.w	r0, r0, r5
 80a34c4:	fa01 f204 	lsl.w	r2, r1, r4
 80a34c8:	ea40 0002 	orr.w	r0, r0, r2
 80a34cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a34d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a34d4:	f141 0100 	adc.w	r1, r1, #0
 80a34d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a34dc:	bf08      	it	eq
 80a34de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a34e2:	bd70      	pop	{r4, r5, r6, pc}
 80a34e4:	f1c4 0520 	rsb	r5, r4, #32
 80a34e8:	fa00 f205 	lsl.w	r2, r0, r5
 80a34ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80a34f0:	fa20 f304 	lsr.w	r3, r0, r4
 80a34f4:	fa01 f205 	lsl.w	r2, r1, r5
 80a34f8:	ea43 0302 	orr.w	r3, r3, r2
 80a34fc:	fa21 f004 	lsr.w	r0, r1, r4
 80a3500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3504:	fa21 f204 	lsr.w	r2, r1, r4
 80a3508:	ea20 0002 	bic.w	r0, r0, r2
 80a350c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3514:	bf08      	it	eq
 80a3516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a351a:	bd70      	pop	{r4, r5, r6, pc}
 80a351c:	f094 0f00 	teq	r4, #0
 80a3520:	d10f      	bne.n	80a3542 <__aeabi_dmul+0x1c2>
 80a3522:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3526:	0040      	lsls	r0, r0, #1
 80a3528:	eb41 0101 	adc.w	r1, r1, r1
 80a352c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3530:	bf08      	it	eq
 80a3532:	3c01      	subeq	r4, #1
 80a3534:	d0f7      	beq.n	80a3526 <__aeabi_dmul+0x1a6>
 80a3536:	ea41 0106 	orr.w	r1, r1, r6
 80a353a:	f095 0f00 	teq	r5, #0
 80a353e:	bf18      	it	ne
 80a3540:	4770      	bxne	lr
 80a3542:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3546:	0052      	lsls	r2, r2, #1
 80a3548:	eb43 0303 	adc.w	r3, r3, r3
 80a354c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3550:	bf08      	it	eq
 80a3552:	3d01      	subeq	r5, #1
 80a3554:	d0f7      	beq.n	80a3546 <__aeabi_dmul+0x1c6>
 80a3556:	ea43 0306 	orr.w	r3, r3, r6
 80a355a:	4770      	bx	lr
 80a355c:	ea94 0f0c 	teq	r4, ip
 80a3560:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3564:	bf18      	it	ne
 80a3566:	ea95 0f0c 	teqne	r5, ip
 80a356a:	d00c      	beq.n	80a3586 <__aeabi_dmul+0x206>
 80a356c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3570:	bf18      	it	ne
 80a3572:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3576:	d1d1      	bne.n	80a351c <__aeabi_dmul+0x19c>
 80a3578:	ea81 0103 	eor.w	r1, r1, r3
 80a357c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3580:	f04f 0000 	mov.w	r0, #0
 80a3584:	bd70      	pop	{r4, r5, r6, pc}
 80a3586:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a358a:	bf06      	itte	eq
 80a358c:	4610      	moveq	r0, r2
 80a358e:	4619      	moveq	r1, r3
 80a3590:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3594:	d019      	beq.n	80a35ca <__aeabi_dmul+0x24a>
 80a3596:	ea94 0f0c 	teq	r4, ip
 80a359a:	d102      	bne.n	80a35a2 <__aeabi_dmul+0x222>
 80a359c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a35a0:	d113      	bne.n	80a35ca <__aeabi_dmul+0x24a>
 80a35a2:	ea95 0f0c 	teq	r5, ip
 80a35a6:	d105      	bne.n	80a35b4 <__aeabi_dmul+0x234>
 80a35a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a35ac:	bf1c      	itt	ne
 80a35ae:	4610      	movne	r0, r2
 80a35b0:	4619      	movne	r1, r3
 80a35b2:	d10a      	bne.n	80a35ca <__aeabi_dmul+0x24a>
 80a35b4:	ea81 0103 	eor.w	r1, r1, r3
 80a35b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a35bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a35c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a35c4:	f04f 0000 	mov.w	r0, #0
 80a35c8:	bd70      	pop	{r4, r5, r6, pc}
 80a35ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a35ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a35d2:	bd70      	pop	{r4, r5, r6, pc}

080a35d4 <__aeabi_ddiv>:
 80a35d4:	b570      	push	{r4, r5, r6, lr}
 80a35d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a35da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a35de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a35e2:	bf1d      	ittte	ne
 80a35e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a35e8:	ea94 0f0c 	teqne	r4, ip
 80a35ec:	ea95 0f0c 	teqne	r5, ip
 80a35f0:	f000 f8a7 	bleq	80a3742 <__aeabi_ddiv+0x16e>
 80a35f4:	eba4 0405 	sub.w	r4, r4, r5
 80a35f8:	ea81 0e03 	eor.w	lr, r1, r3
 80a35fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3600:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3604:	f000 8088 	beq.w	80a3718 <__aeabi_ddiv+0x144>
 80a3608:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a360c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3610:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3614:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3618:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a361c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3620:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3624:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3628:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a362c:	429d      	cmp	r5, r3
 80a362e:	bf08      	it	eq
 80a3630:	4296      	cmpeq	r6, r2
 80a3632:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3636:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a363a:	d202      	bcs.n	80a3642 <__aeabi_ddiv+0x6e>
 80a363c:	085b      	lsrs	r3, r3, #1
 80a363e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3642:	1ab6      	subs	r6, r6, r2
 80a3644:	eb65 0503 	sbc.w	r5, r5, r3
 80a3648:	085b      	lsrs	r3, r3, #1
 80a364a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a364e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3652:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3656:	ebb6 0e02 	subs.w	lr, r6, r2
 80a365a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a365e:	bf22      	ittt	cs
 80a3660:	1ab6      	subcs	r6, r6, r2
 80a3662:	4675      	movcs	r5, lr
 80a3664:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3668:	085b      	lsrs	r3, r3, #1
 80a366a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a366e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3672:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3676:	bf22      	ittt	cs
 80a3678:	1ab6      	subcs	r6, r6, r2
 80a367a:	4675      	movcs	r5, lr
 80a367c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3680:	085b      	lsrs	r3, r3, #1
 80a3682:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3686:	ebb6 0e02 	subs.w	lr, r6, r2
 80a368a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a368e:	bf22      	ittt	cs
 80a3690:	1ab6      	subcs	r6, r6, r2
 80a3692:	4675      	movcs	r5, lr
 80a3694:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3698:	085b      	lsrs	r3, r3, #1
 80a369a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a369e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a36a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a36a6:	bf22      	ittt	cs
 80a36a8:	1ab6      	subcs	r6, r6, r2
 80a36aa:	4675      	movcs	r5, lr
 80a36ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a36b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a36b4:	d018      	beq.n	80a36e8 <__aeabi_ddiv+0x114>
 80a36b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a36ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a36be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a36c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a36c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a36ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a36ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a36d2:	d1c0      	bne.n	80a3656 <__aeabi_ddiv+0x82>
 80a36d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a36d8:	d10b      	bne.n	80a36f2 <__aeabi_ddiv+0x11e>
 80a36da:	ea41 0100 	orr.w	r1, r1, r0
 80a36de:	f04f 0000 	mov.w	r0, #0
 80a36e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a36e6:	e7b6      	b.n	80a3656 <__aeabi_ddiv+0x82>
 80a36e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a36ec:	bf04      	itt	eq
 80a36ee:	4301      	orreq	r1, r0
 80a36f0:	2000      	moveq	r0, #0
 80a36f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a36f6:	bf88      	it	hi
 80a36f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a36fc:	f63f aeaf 	bhi.w	80a345e <__aeabi_dmul+0xde>
 80a3700:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3704:	bf04      	itt	eq
 80a3706:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a370a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a370e:	f150 0000 	adcs.w	r0, r0, #0
 80a3712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3716:	bd70      	pop	{r4, r5, r6, pc}
 80a3718:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a371c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3720:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3724:	bfc2      	ittt	gt
 80a3726:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a372a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a372e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3734:	f04f 0e00 	mov.w	lr, #0
 80a3738:	3c01      	subs	r4, #1
 80a373a:	e690      	b.n	80a345e <__aeabi_dmul+0xde>
 80a373c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3740:	e68d      	b.n	80a345e <__aeabi_dmul+0xde>
 80a3742:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3746:	ea94 0f0c 	teq	r4, ip
 80a374a:	bf08      	it	eq
 80a374c:	ea95 0f0c 	teqeq	r5, ip
 80a3750:	f43f af3b 	beq.w	80a35ca <__aeabi_dmul+0x24a>
 80a3754:	ea94 0f0c 	teq	r4, ip
 80a3758:	d10a      	bne.n	80a3770 <__aeabi_ddiv+0x19c>
 80a375a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a375e:	f47f af34 	bne.w	80a35ca <__aeabi_dmul+0x24a>
 80a3762:	ea95 0f0c 	teq	r5, ip
 80a3766:	f47f af25 	bne.w	80a35b4 <__aeabi_dmul+0x234>
 80a376a:	4610      	mov	r0, r2
 80a376c:	4619      	mov	r1, r3
 80a376e:	e72c      	b.n	80a35ca <__aeabi_dmul+0x24a>
 80a3770:	ea95 0f0c 	teq	r5, ip
 80a3774:	d106      	bne.n	80a3784 <__aeabi_ddiv+0x1b0>
 80a3776:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a377a:	f43f aefd 	beq.w	80a3578 <__aeabi_dmul+0x1f8>
 80a377e:	4610      	mov	r0, r2
 80a3780:	4619      	mov	r1, r3
 80a3782:	e722      	b.n	80a35ca <__aeabi_dmul+0x24a>
 80a3784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3788:	bf18      	it	ne
 80a378a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a378e:	f47f aec5 	bne.w	80a351c <__aeabi_dmul+0x19c>
 80a3792:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3796:	f47f af0d 	bne.w	80a35b4 <__aeabi_dmul+0x234>
 80a379a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a379e:	f47f aeeb 	bne.w	80a3578 <__aeabi_dmul+0x1f8>
 80a37a2:	e712      	b.n	80a35ca <__aeabi_dmul+0x24a>

080a37a4 <__gedf2>:
 80a37a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a37a8:	e006      	b.n	80a37b8 <__cmpdf2+0x4>
 80a37aa:	bf00      	nop

080a37ac <__ledf2>:
 80a37ac:	f04f 0c01 	mov.w	ip, #1
 80a37b0:	e002      	b.n	80a37b8 <__cmpdf2+0x4>
 80a37b2:	bf00      	nop

080a37b4 <__cmpdf2>:
 80a37b4:	f04f 0c01 	mov.w	ip, #1
 80a37b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a37bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a37c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a37c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a37c8:	bf18      	it	ne
 80a37ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a37ce:	d01b      	beq.n	80a3808 <__cmpdf2+0x54>
 80a37d0:	b001      	add	sp, #4
 80a37d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a37d6:	bf0c      	ite	eq
 80a37d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a37dc:	ea91 0f03 	teqne	r1, r3
 80a37e0:	bf02      	ittt	eq
 80a37e2:	ea90 0f02 	teqeq	r0, r2
 80a37e6:	2000      	moveq	r0, #0
 80a37e8:	4770      	bxeq	lr
 80a37ea:	f110 0f00 	cmn.w	r0, #0
 80a37ee:	ea91 0f03 	teq	r1, r3
 80a37f2:	bf58      	it	pl
 80a37f4:	4299      	cmppl	r1, r3
 80a37f6:	bf08      	it	eq
 80a37f8:	4290      	cmpeq	r0, r2
 80a37fa:	bf2c      	ite	cs
 80a37fc:	17d8      	asrcs	r0, r3, #31
 80a37fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3802:	f040 0001 	orr.w	r0, r0, #1
 80a3806:	4770      	bx	lr
 80a3808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a380c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3810:	d102      	bne.n	80a3818 <__cmpdf2+0x64>
 80a3812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3816:	d107      	bne.n	80a3828 <__cmpdf2+0x74>
 80a3818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a381c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3820:	d1d6      	bne.n	80a37d0 <__cmpdf2+0x1c>
 80a3822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3826:	d0d3      	beq.n	80a37d0 <__cmpdf2+0x1c>
 80a3828:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a382c:	4770      	bx	lr
 80a382e:	bf00      	nop

080a3830 <__aeabi_cdrcmple>:
 80a3830:	4684      	mov	ip, r0
 80a3832:	4610      	mov	r0, r2
 80a3834:	4662      	mov	r2, ip
 80a3836:	468c      	mov	ip, r1
 80a3838:	4619      	mov	r1, r3
 80a383a:	4663      	mov	r3, ip
 80a383c:	e000      	b.n	80a3840 <__aeabi_cdcmpeq>
 80a383e:	bf00      	nop

080a3840 <__aeabi_cdcmpeq>:
 80a3840:	b501      	push	{r0, lr}
 80a3842:	f7ff ffb7 	bl	80a37b4 <__cmpdf2>
 80a3846:	2800      	cmp	r0, #0
 80a3848:	bf48      	it	mi
 80a384a:	f110 0f00 	cmnmi.w	r0, #0
 80a384e:	bd01      	pop	{r0, pc}

080a3850 <__aeabi_dcmpeq>:
 80a3850:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3854:	f7ff fff4 	bl	80a3840 <__aeabi_cdcmpeq>
 80a3858:	bf0c      	ite	eq
 80a385a:	2001      	moveq	r0, #1
 80a385c:	2000      	movne	r0, #0
 80a385e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3862:	bf00      	nop

080a3864 <__aeabi_dcmplt>:
 80a3864:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3868:	f7ff ffea 	bl	80a3840 <__aeabi_cdcmpeq>
 80a386c:	bf34      	ite	cc
 80a386e:	2001      	movcc	r0, #1
 80a3870:	2000      	movcs	r0, #0
 80a3872:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3876:	bf00      	nop

080a3878 <__aeabi_dcmple>:
 80a3878:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a387c:	f7ff ffe0 	bl	80a3840 <__aeabi_cdcmpeq>
 80a3880:	bf94      	ite	ls
 80a3882:	2001      	movls	r0, #1
 80a3884:	2000      	movhi	r0, #0
 80a3886:	f85d fb08 	ldr.w	pc, [sp], #8
 80a388a:	bf00      	nop

080a388c <__aeabi_dcmpge>:
 80a388c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3890:	f7ff ffce 	bl	80a3830 <__aeabi_cdrcmple>
 80a3894:	bf94      	ite	ls
 80a3896:	2001      	movls	r0, #1
 80a3898:	2000      	movhi	r0, #0
 80a389a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a389e:	bf00      	nop

080a38a0 <__aeabi_dcmpgt>:
 80a38a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a38a4:	f7ff ffc4 	bl	80a3830 <__aeabi_cdrcmple>
 80a38a8:	bf34      	ite	cc
 80a38aa:	2001      	movcc	r0, #1
 80a38ac:	2000      	movcs	r0, #0
 80a38ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a38b2:	bf00      	nop

080a38b4 <__aeabi_dcmpun>:
 80a38b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a38b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38bc:	d102      	bne.n	80a38c4 <__aeabi_dcmpun+0x10>
 80a38be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a38c2:	d10a      	bne.n	80a38da <__aeabi_dcmpun+0x26>
 80a38c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a38c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38cc:	d102      	bne.n	80a38d4 <__aeabi_dcmpun+0x20>
 80a38ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a38d2:	d102      	bne.n	80a38da <__aeabi_dcmpun+0x26>
 80a38d4:	f04f 0000 	mov.w	r0, #0
 80a38d8:	4770      	bx	lr
 80a38da:	f04f 0001 	mov.w	r0, #1
 80a38de:	4770      	bx	lr

080a38e0 <__aeabi_d2iz>:
 80a38e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a38e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a38e8:	d215      	bcs.n	80a3916 <__aeabi_d2iz+0x36>
 80a38ea:	d511      	bpl.n	80a3910 <__aeabi_d2iz+0x30>
 80a38ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a38f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a38f4:	d912      	bls.n	80a391c <__aeabi_d2iz+0x3c>
 80a38f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a38fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a38fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3902:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3906:	fa23 f002 	lsr.w	r0, r3, r2
 80a390a:	bf18      	it	ne
 80a390c:	4240      	negne	r0, r0
 80a390e:	4770      	bx	lr
 80a3910:	f04f 0000 	mov.w	r0, #0
 80a3914:	4770      	bx	lr
 80a3916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a391a:	d105      	bne.n	80a3928 <__aeabi_d2iz+0x48>
 80a391c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3920:	bf08      	it	eq
 80a3922:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3926:	4770      	bx	lr
 80a3928:	f04f 0000 	mov.w	r0, #0
 80a392c:	4770      	bx	lr
 80a392e:	bf00      	nop

080a3930 <__aeabi_d2uiz>:
 80a3930:	004a      	lsls	r2, r1, #1
 80a3932:	d211      	bcs.n	80a3958 <__aeabi_d2uiz+0x28>
 80a3934:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3938:	d211      	bcs.n	80a395e <__aeabi_d2uiz+0x2e>
 80a393a:	d50d      	bpl.n	80a3958 <__aeabi_d2uiz+0x28>
 80a393c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3940:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3944:	d40e      	bmi.n	80a3964 <__aeabi_d2uiz+0x34>
 80a3946:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a394a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a394e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3952:	fa23 f002 	lsr.w	r0, r3, r2
 80a3956:	4770      	bx	lr
 80a3958:	f04f 0000 	mov.w	r0, #0
 80a395c:	4770      	bx	lr
 80a395e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3962:	d102      	bne.n	80a396a <__aeabi_d2uiz+0x3a>
 80a3964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3968:	4770      	bx	lr
 80a396a:	f04f 0000 	mov.w	r0, #0
 80a396e:	4770      	bx	lr

080a3970 <__aeabi_d2f>:
 80a3970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3978:	bf24      	itt	cs
 80a397a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a397e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3982:	d90d      	bls.n	80a39a0 <__aeabi_d2f+0x30>
 80a3984:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a398c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3990:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3998:	bf08      	it	eq
 80a399a:	f020 0001 	biceq.w	r0, r0, #1
 80a399e:	4770      	bx	lr
 80a39a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a39a4:	d121      	bne.n	80a39ea <__aeabi_d2f+0x7a>
 80a39a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a39aa:	bfbc      	itt	lt
 80a39ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a39b0:	4770      	bxlt	lr
 80a39b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a39b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a39ba:	f1c2 0218 	rsb	r2, r2, #24
 80a39be:	f1c2 0c20 	rsb	ip, r2, #32
 80a39c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a39c6:	fa20 f002 	lsr.w	r0, r0, r2
 80a39ca:	bf18      	it	ne
 80a39cc:	f040 0001 	orrne.w	r0, r0, #1
 80a39d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a39d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a39d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a39dc:	ea40 000c 	orr.w	r0, r0, ip
 80a39e0:	fa23 f302 	lsr.w	r3, r3, r2
 80a39e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a39e8:	e7cc      	b.n	80a3984 <__aeabi_d2f+0x14>
 80a39ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a39ee:	d107      	bne.n	80a3a00 <__aeabi_d2f+0x90>
 80a39f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a39f4:	bf1e      	ittt	ne
 80a39f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a39fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a39fe:	4770      	bxne	lr
 80a3a00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3a04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3a08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a0c:	4770      	bx	lr
 80a3a0e:	bf00      	nop

080a3a10 <__aeabi_frsub>:
 80a3a10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3a14:	e002      	b.n	80a3a1c <__addsf3>
 80a3a16:	bf00      	nop

080a3a18 <__aeabi_fsub>:
 80a3a18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3a1c <__addsf3>:
 80a3a1c:	0042      	lsls	r2, r0, #1
 80a3a1e:	bf1f      	itttt	ne
 80a3a20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3a24:	ea92 0f03 	teqne	r2, r3
 80a3a28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3a2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3a30:	d06a      	beq.n	80a3b08 <__addsf3+0xec>
 80a3a32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3a36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3a3a:	bfc1      	itttt	gt
 80a3a3c:	18d2      	addgt	r2, r2, r3
 80a3a3e:	4041      	eorgt	r1, r0
 80a3a40:	4048      	eorgt	r0, r1
 80a3a42:	4041      	eorgt	r1, r0
 80a3a44:	bfb8      	it	lt
 80a3a46:	425b      	neglt	r3, r3
 80a3a48:	2b19      	cmp	r3, #25
 80a3a4a:	bf88      	it	hi
 80a3a4c:	4770      	bxhi	lr
 80a3a4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3a52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3a5a:	bf18      	it	ne
 80a3a5c:	4240      	negne	r0, r0
 80a3a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3a62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3a66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3a6a:	bf18      	it	ne
 80a3a6c:	4249      	negne	r1, r1
 80a3a6e:	ea92 0f03 	teq	r2, r3
 80a3a72:	d03f      	beq.n	80a3af4 <__addsf3+0xd8>
 80a3a74:	f1a2 0201 	sub.w	r2, r2, #1
 80a3a78:	fa41 fc03 	asr.w	ip, r1, r3
 80a3a7c:	eb10 000c 	adds.w	r0, r0, ip
 80a3a80:	f1c3 0320 	rsb	r3, r3, #32
 80a3a84:	fa01 f103 	lsl.w	r1, r1, r3
 80a3a88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3a8c:	d502      	bpl.n	80a3a94 <__addsf3+0x78>
 80a3a8e:	4249      	negs	r1, r1
 80a3a90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3a94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3a98:	d313      	bcc.n	80a3ac2 <__addsf3+0xa6>
 80a3a9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3a9e:	d306      	bcc.n	80a3aae <__addsf3+0x92>
 80a3aa0:	0840      	lsrs	r0, r0, #1
 80a3aa2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3aa6:	f102 0201 	add.w	r2, r2, #1
 80a3aaa:	2afe      	cmp	r2, #254	; 0xfe
 80a3aac:	d251      	bcs.n	80a3b52 <__addsf3+0x136>
 80a3aae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3ab2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3ab6:	bf08      	it	eq
 80a3ab8:	f020 0001 	biceq.w	r0, r0, #1
 80a3abc:	ea40 0003 	orr.w	r0, r0, r3
 80a3ac0:	4770      	bx	lr
 80a3ac2:	0049      	lsls	r1, r1, #1
 80a3ac4:	eb40 0000 	adc.w	r0, r0, r0
 80a3ac8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3acc:	f1a2 0201 	sub.w	r2, r2, #1
 80a3ad0:	d1ed      	bne.n	80a3aae <__addsf3+0x92>
 80a3ad2:	fab0 fc80 	clz	ip, r0
 80a3ad6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3ada:	ebb2 020c 	subs.w	r2, r2, ip
 80a3ade:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3ae2:	bfaa      	itet	ge
 80a3ae4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3ae8:	4252      	neglt	r2, r2
 80a3aea:	4318      	orrge	r0, r3
 80a3aec:	bfbc      	itt	lt
 80a3aee:	40d0      	lsrlt	r0, r2
 80a3af0:	4318      	orrlt	r0, r3
 80a3af2:	4770      	bx	lr
 80a3af4:	f092 0f00 	teq	r2, #0
 80a3af8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3afc:	bf06      	itte	eq
 80a3afe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3b02:	3201      	addeq	r2, #1
 80a3b04:	3b01      	subne	r3, #1
 80a3b06:	e7b5      	b.n	80a3a74 <__addsf3+0x58>
 80a3b08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3b0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3b10:	bf18      	it	ne
 80a3b12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3b16:	d021      	beq.n	80a3b5c <__addsf3+0x140>
 80a3b18:	ea92 0f03 	teq	r2, r3
 80a3b1c:	d004      	beq.n	80a3b28 <__addsf3+0x10c>
 80a3b1e:	f092 0f00 	teq	r2, #0
 80a3b22:	bf08      	it	eq
 80a3b24:	4608      	moveq	r0, r1
 80a3b26:	4770      	bx	lr
 80a3b28:	ea90 0f01 	teq	r0, r1
 80a3b2c:	bf1c      	itt	ne
 80a3b2e:	2000      	movne	r0, #0
 80a3b30:	4770      	bxne	lr
 80a3b32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3b36:	d104      	bne.n	80a3b42 <__addsf3+0x126>
 80a3b38:	0040      	lsls	r0, r0, #1
 80a3b3a:	bf28      	it	cs
 80a3b3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3b40:	4770      	bx	lr
 80a3b42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3b46:	bf3c      	itt	cc
 80a3b48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3b4c:	4770      	bxcc	lr
 80a3b4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3b52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3b5a:	4770      	bx	lr
 80a3b5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3b60:	bf16      	itet	ne
 80a3b62:	4608      	movne	r0, r1
 80a3b64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3b68:	4601      	movne	r1, r0
 80a3b6a:	0242      	lsls	r2, r0, #9
 80a3b6c:	bf06      	itte	eq
 80a3b6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3b72:	ea90 0f01 	teqeq	r0, r1
 80a3b76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3b7a:	4770      	bx	lr

080a3b7c <__aeabi_ui2f>:
 80a3b7c:	f04f 0300 	mov.w	r3, #0
 80a3b80:	e004      	b.n	80a3b8c <__aeabi_i2f+0x8>
 80a3b82:	bf00      	nop

080a3b84 <__aeabi_i2f>:
 80a3b84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3b88:	bf48      	it	mi
 80a3b8a:	4240      	negmi	r0, r0
 80a3b8c:	ea5f 0c00 	movs.w	ip, r0
 80a3b90:	bf08      	it	eq
 80a3b92:	4770      	bxeq	lr
 80a3b94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3b98:	4601      	mov	r1, r0
 80a3b9a:	f04f 0000 	mov.w	r0, #0
 80a3b9e:	e01c      	b.n	80a3bda <__aeabi_l2f+0x2a>

080a3ba0 <__aeabi_ul2f>:
 80a3ba0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3ba4:	bf08      	it	eq
 80a3ba6:	4770      	bxeq	lr
 80a3ba8:	f04f 0300 	mov.w	r3, #0
 80a3bac:	e00a      	b.n	80a3bc4 <__aeabi_l2f+0x14>
 80a3bae:	bf00      	nop

080a3bb0 <__aeabi_l2f>:
 80a3bb0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3bb4:	bf08      	it	eq
 80a3bb6:	4770      	bxeq	lr
 80a3bb8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3bbc:	d502      	bpl.n	80a3bc4 <__aeabi_l2f+0x14>
 80a3bbe:	4240      	negs	r0, r0
 80a3bc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3bc4:	ea5f 0c01 	movs.w	ip, r1
 80a3bc8:	bf02      	ittt	eq
 80a3bca:	4684      	moveq	ip, r0
 80a3bcc:	4601      	moveq	r1, r0
 80a3bce:	2000      	moveq	r0, #0
 80a3bd0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3bd4:	bf08      	it	eq
 80a3bd6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3bda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3bde:	fabc f28c 	clz	r2, ip
 80a3be2:	3a08      	subs	r2, #8
 80a3be4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3be8:	db10      	blt.n	80a3c0c <__aeabi_l2f+0x5c>
 80a3bea:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3bee:	4463      	add	r3, ip
 80a3bf0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3bf4:	f1c2 0220 	rsb	r2, r2, #32
 80a3bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3bfc:	fa20 f202 	lsr.w	r2, r0, r2
 80a3c00:	eb43 0002 	adc.w	r0, r3, r2
 80a3c04:	bf08      	it	eq
 80a3c06:	f020 0001 	biceq.w	r0, r0, #1
 80a3c0a:	4770      	bx	lr
 80a3c0c:	f102 0220 	add.w	r2, r2, #32
 80a3c10:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3c14:	f1c2 0220 	rsb	r2, r2, #32
 80a3c18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3c1c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3c20:	eb43 0002 	adc.w	r0, r3, r2
 80a3c24:	bf08      	it	eq
 80a3c26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3c2a:	4770      	bx	lr

080a3c2c <__aeabi_fmul>:
 80a3c2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3c30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3c34:	bf1e      	ittt	ne
 80a3c36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3c3a:	ea92 0f0c 	teqne	r2, ip
 80a3c3e:	ea93 0f0c 	teqne	r3, ip
 80a3c42:	d06f      	beq.n	80a3d24 <__aeabi_fmul+0xf8>
 80a3c44:	441a      	add	r2, r3
 80a3c46:	ea80 0c01 	eor.w	ip, r0, r1
 80a3c4a:	0240      	lsls	r0, r0, #9
 80a3c4c:	bf18      	it	ne
 80a3c4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3c52:	d01e      	beq.n	80a3c92 <__aeabi_fmul+0x66>
 80a3c54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3c58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3c5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3c60:	fba0 3101 	umull	r3, r1, r0, r1
 80a3c64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3c68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3c6c:	bf3e      	ittt	cc
 80a3c6e:	0049      	lslcc	r1, r1, #1
 80a3c70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3c74:	005b      	lslcc	r3, r3, #1
 80a3c76:	ea40 0001 	orr.w	r0, r0, r1
 80a3c7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3c7e:	2afd      	cmp	r2, #253	; 0xfd
 80a3c80:	d81d      	bhi.n	80a3cbe <__aeabi_fmul+0x92>
 80a3c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3c86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3c8a:	bf08      	it	eq
 80a3c8c:	f020 0001 	biceq.w	r0, r0, #1
 80a3c90:	4770      	bx	lr
 80a3c92:	f090 0f00 	teq	r0, #0
 80a3c96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3c9a:	bf08      	it	eq
 80a3c9c:	0249      	lsleq	r1, r1, #9
 80a3c9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3ca2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3ca6:	3a7f      	subs	r2, #127	; 0x7f
 80a3ca8:	bfc2      	ittt	gt
 80a3caa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3cae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3cb2:	4770      	bxgt	lr
 80a3cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3cb8:	f04f 0300 	mov.w	r3, #0
 80a3cbc:	3a01      	subs	r2, #1
 80a3cbe:	dc5d      	bgt.n	80a3d7c <__aeabi_fmul+0x150>
 80a3cc0:	f112 0f19 	cmn.w	r2, #25
 80a3cc4:	bfdc      	itt	le
 80a3cc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3cca:	4770      	bxle	lr
 80a3ccc:	f1c2 0200 	rsb	r2, r2, #0
 80a3cd0:	0041      	lsls	r1, r0, #1
 80a3cd2:	fa21 f102 	lsr.w	r1, r1, r2
 80a3cd6:	f1c2 0220 	rsb	r2, r2, #32
 80a3cda:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3cde:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3ce2:	f140 0000 	adc.w	r0, r0, #0
 80a3ce6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3cea:	bf08      	it	eq
 80a3cec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3cf0:	4770      	bx	lr
 80a3cf2:	f092 0f00 	teq	r2, #0
 80a3cf6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3cfa:	bf02      	ittt	eq
 80a3cfc:	0040      	lsleq	r0, r0, #1
 80a3cfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3d02:	3a01      	subeq	r2, #1
 80a3d04:	d0f9      	beq.n	80a3cfa <__aeabi_fmul+0xce>
 80a3d06:	ea40 000c 	orr.w	r0, r0, ip
 80a3d0a:	f093 0f00 	teq	r3, #0
 80a3d0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3d12:	bf02      	ittt	eq
 80a3d14:	0049      	lsleq	r1, r1, #1
 80a3d16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3d1a:	3b01      	subeq	r3, #1
 80a3d1c:	d0f9      	beq.n	80a3d12 <__aeabi_fmul+0xe6>
 80a3d1e:	ea41 010c 	orr.w	r1, r1, ip
 80a3d22:	e78f      	b.n	80a3c44 <__aeabi_fmul+0x18>
 80a3d24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3d28:	ea92 0f0c 	teq	r2, ip
 80a3d2c:	bf18      	it	ne
 80a3d2e:	ea93 0f0c 	teqne	r3, ip
 80a3d32:	d00a      	beq.n	80a3d4a <__aeabi_fmul+0x11e>
 80a3d34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3d38:	bf18      	it	ne
 80a3d3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3d3e:	d1d8      	bne.n	80a3cf2 <__aeabi_fmul+0xc6>
 80a3d40:	ea80 0001 	eor.w	r0, r0, r1
 80a3d44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3d48:	4770      	bx	lr
 80a3d4a:	f090 0f00 	teq	r0, #0
 80a3d4e:	bf17      	itett	ne
 80a3d50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3d54:	4608      	moveq	r0, r1
 80a3d56:	f091 0f00 	teqne	r1, #0
 80a3d5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3d5e:	d014      	beq.n	80a3d8a <__aeabi_fmul+0x15e>
 80a3d60:	ea92 0f0c 	teq	r2, ip
 80a3d64:	d101      	bne.n	80a3d6a <__aeabi_fmul+0x13e>
 80a3d66:	0242      	lsls	r2, r0, #9
 80a3d68:	d10f      	bne.n	80a3d8a <__aeabi_fmul+0x15e>
 80a3d6a:	ea93 0f0c 	teq	r3, ip
 80a3d6e:	d103      	bne.n	80a3d78 <__aeabi_fmul+0x14c>
 80a3d70:	024b      	lsls	r3, r1, #9
 80a3d72:	bf18      	it	ne
 80a3d74:	4608      	movne	r0, r1
 80a3d76:	d108      	bne.n	80a3d8a <__aeabi_fmul+0x15e>
 80a3d78:	ea80 0001 	eor.w	r0, r0, r1
 80a3d7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3d80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d88:	4770      	bx	lr
 80a3d8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3d8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3d92:	4770      	bx	lr

080a3d94 <__aeabi_fdiv>:
 80a3d94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3d98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3d9c:	bf1e      	ittt	ne
 80a3d9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3da2:	ea92 0f0c 	teqne	r2, ip
 80a3da6:	ea93 0f0c 	teqne	r3, ip
 80a3daa:	d069      	beq.n	80a3e80 <__aeabi_fdiv+0xec>
 80a3dac:	eba2 0203 	sub.w	r2, r2, r3
 80a3db0:	ea80 0c01 	eor.w	ip, r0, r1
 80a3db4:	0249      	lsls	r1, r1, #9
 80a3db6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3dba:	d037      	beq.n	80a3e2c <__aeabi_fdiv+0x98>
 80a3dbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3dc0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3dc4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3dcc:	428b      	cmp	r3, r1
 80a3dce:	bf38      	it	cc
 80a3dd0:	005b      	lslcc	r3, r3, #1
 80a3dd2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3dd6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3dda:	428b      	cmp	r3, r1
 80a3ddc:	bf24      	itt	cs
 80a3dde:	1a5b      	subcs	r3, r3, r1
 80a3de0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3de4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3de8:	bf24      	itt	cs
 80a3dea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3dee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3df2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3df6:	bf24      	itt	cs
 80a3df8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3dfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3e00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3e04:	bf24      	itt	cs
 80a3e06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3e0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3e0e:	011b      	lsls	r3, r3, #4
 80a3e10:	bf18      	it	ne
 80a3e12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3e16:	d1e0      	bne.n	80a3dda <__aeabi_fdiv+0x46>
 80a3e18:	2afd      	cmp	r2, #253	; 0xfd
 80a3e1a:	f63f af50 	bhi.w	80a3cbe <__aeabi_fmul+0x92>
 80a3e1e:	428b      	cmp	r3, r1
 80a3e20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3e24:	bf08      	it	eq
 80a3e26:	f020 0001 	biceq.w	r0, r0, #1
 80a3e2a:	4770      	bx	lr
 80a3e2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3e30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3e34:	327f      	adds	r2, #127	; 0x7f
 80a3e36:	bfc2      	ittt	gt
 80a3e38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3e3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3e40:	4770      	bxgt	lr
 80a3e42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3e46:	f04f 0300 	mov.w	r3, #0
 80a3e4a:	3a01      	subs	r2, #1
 80a3e4c:	e737      	b.n	80a3cbe <__aeabi_fmul+0x92>
 80a3e4e:	f092 0f00 	teq	r2, #0
 80a3e52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3e56:	bf02      	ittt	eq
 80a3e58:	0040      	lsleq	r0, r0, #1
 80a3e5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3e5e:	3a01      	subeq	r2, #1
 80a3e60:	d0f9      	beq.n	80a3e56 <__aeabi_fdiv+0xc2>
 80a3e62:	ea40 000c 	orr.w	r0, r0, ip
 80a3e66:	f093 0f00 	teq	r3, #0
 80a3e6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3e6e:	bf02      	ittt	eq
 80a3e70:	0049      	lsleq	r1, r1, #1
 80a3e72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3e76:	3b01      	subeq	r3, #1
 80a3e78:	d0f9      	beq.n	80a3e6e <__aeabi_fdiv+0xda>
 80a3e7a:	ea41 010c 	orr.w	r1, r1, ip
 80a3e7e:	e795      	b.n	80a3dac <__aeabi_fdiv+0x18>
 80a3e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3e84:	ea92 0f0c 	teq	r2, ip
 80a3e88:	d108      	bne.n	80a3e9c <__aeabi_fdiv+0x108>
 80a3e8a:	0242      	lsls	r2, r0, #9
 80a3e8c:	f47f af7d 	bne.w	80a3d8a <__aeabi_fmul+0x15e>
 80a3e90:	ea93 0f0c 	teq	r3, ip
 80a3e94:	f47f af70 	bne.w	80a3d78 <__aeabi_fmul+0x14c>
 80a3e98:	4608      	mov	r0, r1
 80a3e9a:	e776      	b.n	80a3d8a <__aeabi_fmul+0x15e>
 80a3e9c:	ea93 0f0c 	teq	r3, ip
 80a3ea0:	d104      	bne.n	80a3eac <__aeabi_fdiv+0x118>
 80a3ea2:	024b      	lsls	r3, r1, #9
 80a3ea4:	f43f af4c 	beq.w	80a3d40 <__aeabi_fmul+0x114>
 80a3ea8:	4608      	mov	r0, r1
 80a3eaa:	e76e      	b.n	80a3d8a <__aeabi_fmul+0x15e>
 80a3eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3eb0:	bf18      	it	ne
 80a3eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3eb6:	d1ca      	bne.n	80a3e4e <__aeabi_fdiv+0xba>
 80a3eb8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3ebc:	f47f af5c 	bne.w	80a3d78 <__aeabi_fmul+0x14c>
 80a3ec0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3ec4:	f47f af3c 	bne.w	80a3d40 <__aeabi_fmul+0x114>
 80a3ec8:	e75f      	b.n	80a3d8a <__aeabi_fmul+0x15e>
 80a3eca:	bf00      	nop

080a3ecc <__gesf2>:
 80a3ecc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3ed0:	e006      	b.n	80a3ee0 <__cmpsf2+0x4>
 80a3ed2:	bf00      	nop

080a3ed4 <__lesf2>:
 80a3ed4:	f04f 0c01 	mov.w	ip, #1
 80a3ed8:	e002      	b.n	80a3ee0 <__cmpsf2+0x4>
 80a3eda:	bf00      	nop

080a3edc <__cmpsf2>:
 80a3edc:	f04f 0c01 	mov.w	ip, #1
 80a3ee0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3ee8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3ef0:	bf18      	it	ne
 80a3ef2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3ef6:	d011      	beq.n	80a3f1c <__cmpsf2+0x40>
 80a3ef8:	b001      	add	sp, #4
 80a3efa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3efe:	bf18      	it	ne
 80a3f00:	ea90 0f01 	teqne	r0, r1
 80a3f04:	bf58      	it	pl
 80a3f06:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3f0a:	bf88      	it	hi
 80a3f0c:	17c8      	asrhi	r0, r1, #31
 80a3f0e:	bf38      	it	cc
 80a3f10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3f14:	bf18      	it	ne
 80a3f16:	f040 0001 	orrne.w	r0, r0, #1
 80a3f1a:	4770      	bx	lr
 80a3f1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3f20:	d102      	bne.n	80a3f28 <__cmpsf2+0x4c>
 80a3f22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3f26:	d105      	bne.n	80a3f34 <__cmpsf2+0x58>
 80a3f28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3f2c:	d1e4      	bne.n	80a3ef8 <__cmpsf2+0x1c>
 80a3f2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3f32:	d0e1      	beq.n	80a3ef8 <__cmpsf2+0x1c>
 80a3f34:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3f38:	4770      	bx	lr
 80a3f3a:	bf00      	nop

080a3f3c <__aeabi_cfrcmple>:
 80a3f3c:	4684      	mov	ip, r0
 80a3f3e:	4608      	mov	r0, r1
 80a3f40:	4661      	mov	r1, ip
 80a3f42:	e7ff      	b.n	80a3f44 <__aeabi_cfcmpeq>

080a3f44 <__aeabi_cfcmpeq>:
 80a3f44:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3f46:	f7ff ffc9 	bl	80a3edc <__cmpsf2>
 80a3f4a:	2800      	cmp	r0, #0
 80a3f4c:	bf48      	it	mi
 80a3f4e:	f110 0f00 	cmnmi.w	r0, #0
 80a3f52:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3f54 <__aeabi_fcmpeq>:
 80a3f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f58:	f7ff fff4 	bl	80a3f44 <__aeabi_cfcmpeq>
 80a3f5c:	bf0c      	ite	eq
 80a3f5e:	2001      	moveq	r0, #1
 80a3f60:	2000      	movne	r0, #0
 80a3f62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f66:	bf00      	nop

080a3f68 <__aeabi_fcmplt>:
 80a3f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f6c:	f7ff ffea 	bl	80a3f44 <__aeabi_cfcmpeq>
 80a3f70:	bf34      	ite	cc
 80a3f72:	2001      	movcc	r0, #1
 80a3f74:	2000      	movcs	r0, #0
 80a3f76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f7a:	bf00      	nop

080a3f7c <__aeabi_fcmple>:
 80a3f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f80:	f7ff ffe0 	bl	80a3f44 <__aeabi_cfcmpeq>
 80a3f84:	bf94      	ite	ls
 80a3f86:	2001      	movls	r0, #1
 80a3f88:	2000      	movhi	r0, #0
 80a3f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f8e:	bf00      	nop

080a3f90 <__aeabi_fcmpge>:
 80a3f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f94:	f7ff ffd2 	bl	80a3f3c <__aeabi_cfrcmple>
 80a3f98:	bf94      	ite	ls
 80a3f9a:	2001      	movls	r0, #1
 80a3f9c:	2000      	movhi	r0, #0
 80a3f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3fa2:	bf00      	nop

080a3fa4 <__aeabi_fcmpgt>:
 80a3fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3fa8:	f7ff ffc8 	bl	80a3f3c <__aeabi_cfrcmple>
 80a3fac:	bf34      	ite	cc
 80a3fae:	2001      	movcc	r0, #1
 80a3fb0:	2000      	movcs	r0, #0
 80a3fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3fb6:	bf00      	nop

080a3fb8 <__cxa_atexit>:
 80a3fb8:	b510      	push	{r4, lr}
 80a3fba:	4c05      	ldr	r4, [pc, #20]	; (80a3fd0 <__cxa_atexit+0x18>)
 80a3fbc:	4613      	mov	r3, r2
 80a3fbe:	b12c      	cbz	r4, 80a3fcc <__cxa_atexit+0x14>
 80a3fc0:	460a      	mov	r2, r1
 80a3fc2:	4601      	mov	r1, r0
 80a3fc4:	2002      	movs	r0, #2
 80a3fc6:	f3af 8000 	nop.w
 80a3fca:	bd10      	pop	{r4, pc}
 80a3fcc:	4620      	mov	r0, r4
 80a3fce:	bd10      	pop	{r4, pc}
 80a3fd0:	00000000 	.word	0x00000000

080a3fd4 <memcpy>:
 80a3fd4:	b510      	push	{r4, lr}
 80a3fd6:	1e43      	subs	r3, r0, #1
 80a3fd8:	440a      	add	r2, r1
 80a3fda:	4291      	cmp	r1, r2
 80a3fdc:	d004      	beq.n	80a3fe8 <memcpy+0x14>
 80a3fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3fe6:	e7f8      	b.n	80a3fda <memcpy+0x6>
 80a3fe8:	bd10      	pop	{r4, pc}

080a3fea <memset>:
 80a3fea:	4603      	mov	r3, r0
 80a3fec:	4402      	add	r2, r0
 80a3fee:	4293      	cmp	r3, r2
 80a3ff0:	d002      	beq.n	80a3ff8 <memset+0xe>
 80a3ff2:	f803 1b01 	strb.w	r1, [r3], #1
 80a3ff6:	e7fa      	b.n	80a3fee <memset+0x4>
 80a3ff8:	4770      	bx	lr
	...

080a3ffc <srand>:
 80a3ffc:	b538      	push	{r3, r4, r5, lr}
 80a3ffe:	4b12      	ldr	r3, [pc, #72]	; (80a4048 <srand+0x4c>)
 80a4000:	4605      	mov	r5, r0
 80a4002:	681c      	ldr	r4, [r3, #0]
 80a4004:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4006:	b9d3      	cbnz	r3, 80a403e <srand+0x42>
 80a4008:	2018      	movs	r0, #24
 80a400a:	f7fd fa3d 	bl	80a1488 <malloc>
 80a400e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4012:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4014:	8003      	strh	r3, [r0, #0]
 80a4016:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a401a:	8043      	strh	r3, [r0, #2]
 80a401c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4020:	8083      	strh	r3, [r0, #4]
 80a4022:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4026:	80c3      	strh	r3, [r0, #6]
 80a4028:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a402c:	8103      	strh	r3, [r0, #8]
 80a402e:	2305      	movs	r3, #5
 80a4030:	8143      	strh	r3, [r0, #10]
 80a4032:	230b      	movs	r3, #11
 80a4034:	8183      	strh	r3, [r0, #12]
 80a4036:	2201      	movs	r2, #1
 80a4038:	2300      	movs	r3, #0
 80a403a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a403e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4040:	2200      	movs	r2, #0
 80a4042:	611d      	str	r5, [r3, #16]
 80a4044:	615a      	str	r2, [r3, #20]
 80a4046:	bd38      	pop	{r3, r4, r5, pc}
 80a4048:	20000084 	.word	0x20000084

080a404c <strlen>:
 80a404c:	4603      	mov	r3, r0
 80a404e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4052:	2a00      	cmp	r2, #0
 80a4054:	d1fb      	bne.n	80a404e <strlen+0x2>
 80a4056:	1a18      	subs	r0, r3, r0
 80a4058:	3801      	subs	r0, #1
 80a405a:	4770      	bx	lr

080a405c <dynalib_user>:
 80a405c:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a406c:	0000 0000 6548 6c6c 006f 6553 7574 0070     ....Hello.Setup.
 80a407c:	5148 6f52 7475 7265 505f 4255 494c 4853     HQRouter_PUBLISH
 80a408c:	4600 6961 656c 2064 6f74 6320 6d6f 756d     .Failed to commu
 80a409c:	696e 6163 6574 7720 7469 2068 534c 394d     nicate with LSM9
 80a40ac:	5344 2e31 4400 756f 6c62 2d65 6863 6365     DS1..Double-chec
 80a40bc:	206b 6977 6972 676e 002e 6544 6166 6c75     k wiring..Defaul
 80a40cc:	2074 6573 7474 6e69 7367 6920 206e 6874     t settings in th
 80a40dc:	7369 7320 656b 6374 2068 6977 6c6c 7720     is sketch will w
 80a40ec:	726f 206b 6f66 2072 6e61 6f20 7475 6f20     ork for an out o
 80a40fc:	2066 6874 2065 6f62 2078 534c 394d 5344     f the box LSM9DS
 80a410c:	2031 7242 6165 6f6b 7475 202c 7562 2074     1 Breakout, but 
 80a411c:	616d 2079 656e 6465 7420 206f 6562 6d20     may need to be m
 80a412c:	646f 6669 6569 2064 6669 7420 6568 6220     odified if the b
 80a413c:	616f 6472 6a20 6d75 6570 7372 6120 6572     oard jumpers are
 80a414c:	002e 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ..==============
 80a415c:	3d3d 3d3d 4548 4441 4e49 2047 4143 494c     ====HEADING CALI
 80a416c:	5242 5441 4445 6300 6c61 6269 6172 6974     BRATED.calibrati
 80a417c:	676e 7320 6e65 6f73 2e72 2e2e 6400 6e6f     ng sensor....don
 80a418c:	0065 6572 2066 3a58 0020 7220 6665 3a59     e.ref X: . refY:
 80a419c:	0020 7220 6665 3a5a 0020 3a47 0020 202c      . refZ: .G: ., 
 80a41ac:	2000 6564 2f67 0073 3a41 0020 6720 4d00     . deg/s.A: . g.M
 80a41bc:	203a 2000 6167 7375 0073 6950 6374 2c68     : . gauss.Pitch,
 80a41cc:	5220 6c6f 3a6c 0020 6548 6461 6e69 3a67      Roll: .Heading:
 80a41dc:	0020 726f 6769 6e69 2c20 7020 7469 6863      .origin , pitch
 80a41ec:	2c48 7220 6c6f 486c 203a 2000                    H, rollH: .

080a41f7 <CSWTCH.57>:
 80a41f7:	0020 0000 0040 0000 0060                          ...@...`

080a4200 <_ZTV7TwoWire>:
	...
 80a4208:	14e1 080a 152b 080a 1503 080a 14e3 080a     ....+...........
 80a4218:	150b 080a 1513 080a 151b 080a 1523 080a     ............#...

080a4228 <_ZTV9IPAddress>:
	...
 80a4230:	159f 080a 00b7 080a 010d 080a 6162 6475     ............baud
 80a4240:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a4250:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a4260:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a4270:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a4280:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a4290:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a42a0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a42b0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a42c0:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a42d0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a42e0:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
 80a42f0:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 80a4300:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a4310:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a431c <_ZTVN5spark12NetworkClassE>:
	...
 80a4324:	167d 080a 1687 080a 1691 080a 169b 080a     }...............
 80a4334:	16a5 080a 16b1 080a 16bd 080a 16c9 080a     ................
 80a4344:	16d1 080a 16db 080a 16e5 080a 616e 006e     ............nan.
 80a4354:	766f 0066 6e69 0066                         ovf.inf.

080a435c <_ZTV8SPIClass>:
	...
 80a4364:	1a51 080a 1a53 080a                         Q...S...

080a436c <_ZL14clock_divisors>:
 80a436c:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a437c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a438c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a439c:	0000 0000                                   ....

080a43a0 <_ZTV3UDP>:
	...
 80a43a8:	00b9 080a 011b 080a 1c67 080a 1d87 080a     ........g.......
 80a43b8:	1c5f 080a 1c7d 080a 1c9b 080a 1cb5 080a     _...}...........
 80a43c8:	1cd7 080a 1d21 080a 1d43 080a 1ed9 080a     ....!...C.......
 80a43d8:	1ded 080a 1c49 080a 1fe9 080a 1e55 080a     ....I.......U...
 80a43e8:	1f11 080a 2017 080a 1db1 080a 1c55 080a     ..... ......U...
 80a43f8:	1eb9 080a 1c5b 080a 1cb7 080a fff0 ffff     ....[...........
 80a4408:	0000 0000 1ccf 080a                         ........

080a4410 <_ZTV11USARTSerial>:
	...
 80a4418:	204f 080a 209f 080a 20ad 080a 1761 080a     O ... ... ..a...
 80a4428:	2063 080a 2085 080a 2071 080a 2099 080a     c ... ..q ... ..
 80a4438:	2051 080a 2055 080a                         Q ..U ..

080a4440 <_ZTV9USBSerial>:
	...
 80a4448:	2161 080a 21b1 080a 21bf 080a 1761 080a     a!...!...!..a...
 80a4458:	219d 080a 2163 080a 2179 080a 21ab 080a     .!..c!..y!...!..
 80a4468:	218f 080a 215d 080a                         .!..]!..

080a4470 <_ZTVN5spark9WiFiClassE>:
	...
 80a4478:	23a7 080a 239d 080a 2393 080a 2305 080a     .#...#...#...#..
 80a4488:	2387 080a 237b 080a 236f 080a 2367 080a     .#..{#..o#..g#..
 80a4498:	235d 080a 2353 080a 230f 080a 7173 7472     ]#..S#...#..sqrt
	...

080a44b0 <atanlo>:
 80a44b0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 80a44c0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

080a44d0 <atanhi>:
 80a44d0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 80a44e0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

080a44f0 <__sf_fake_stdin>:
	...

080a4510 <__sf_fake_stdout>:
	...

080a4530 <__sf_fake_stderr>:
	...
 80a4550:	0043                                        C.

080a4552 <link_const_variable_data_end>:
	...

080a4554 <link_constructors_location>:
 80a4554:	080a079d 	.word	0x080a079d
 80a4558:	080a0fd7 	.word	0x080a0fd7
 80a455c:	080a1037 	.word	0x080a1037
 80a4560:	080a166d 	.word	0x080a166d
 80a4564:	080a174d 	.word	0x080a174d
 80a4568:	080a1a35 	.word	0x080a1a35
 80a456c:	080a1c1d 	.word	0x080a1c1d
 80a4570:	080a1c35 	.word	0x080a1c35
 80a4574:	080a23b1 	.word	0x080a23b1
 80a4578:	080a25d9 	.word	0x080a25d9
 80a457c:	080a2609 	.word	0x080a2609
 80a4580:	080a265d 	.word	0x080a265d
 80a4584:	080a2721 	.word	0x080a2721
 80a4588:	080a27a5 	.word	0x080a27a5
 80a458c:	080a2829 	.word	0x080a2829
