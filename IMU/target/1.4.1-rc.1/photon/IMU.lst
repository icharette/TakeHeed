
/Users/ninjacat/Documents/Particle/TakeHeed/IMU/target/1.4.1-rc.1/photon/IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003b54  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3b70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a3b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b4  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3bf0  080a3bf0  00023bf0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3c18  080a3c18  00023c18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000aef65  00000000  00000000  00023c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fee1  00000000  00000000  000d2b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001652f  00000000  00000000  000e2a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002210  00000000  00000000  000f8f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000035c8  00000000  00000000  000fb1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000249b7  00000000  00000000  000fe769  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024a4e  00000000  00000000  00123120  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6c08  00000000  00000000  00147b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c040  00000000  00000000  001ee778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fb05 	bl	80a363c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fb0a 	bl	80a3652 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3b74 	.word	0x080a3b74
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000730 	.word	0x20000730
 80a0058:	20000730 	.word	0x20000730

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f987 	bl	80a2370 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3b30 	.word	0x080a3b30
 80a0084:	080a3b6c 	.word	0x080a3b6c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b884 	b.w	80a0194 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f97b 	bl	80a0388 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b92d 	b.w	80a22f4 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 b975 	b.w	80a1388 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 b97b 	b.w	80a1398 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f001 fd96 	bl	80a1bf0 <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f001 fecb 	bl	80a1e60 <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a39d0 	.word	0x080a39d0

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f002 fa22 	bl	80a2522 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f002 fa18 	bl	80a2522 <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <_Z8setupImuv>:
/* fifth order of polynomial approximation giving 0.05 deg max error */
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
 80a00f8:	b538      	push	{r3, r4, r5, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a00fa:	4c1d      	ldr	r4, [pc, #116]	; (80a0170 <_Z8setupImuv+0x78>)
  imu.settings.device.mAddress = LSM9DS1_M;
 80a00fc:	231e      	movs	r3, #30
 80a00fe:	70a3      	strb	r3, [r4, #2]
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0100:	236b      	movs	r3, #107	; 0x6b
  lossThreshold = 5;
 80a0102:	4a1c      	ldr	r2, [pc, #112]	; (80a0174 <_Z8setupImuv+0x7c>)
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
 80a0104:	7063      	strb	r3, [r4, #1]
  lossThreshold = 5;
 80a0106:	4b1c      	ldr	r3, [pc, #112]	; (80a0178 <_Z8setupImuv+0x80>)
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a0108:	2501      	movs	r5, #1
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
 80a010a:	601a      	str	r2, [r3, #0]
  gainThreshold = 1;
 80a010c:	4b1b      	ldr	r3, [pc, #108]	; (80a017c <_Z8setupImuv+0x84>)
 80a010e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0112:	4620      	mov	r0, r4
const int16_t K1 = 5701;
const int16_t K2 = -1645;
const int16_t K3 = 446;

void setupImu(){
  imu.settings.device.commInterface = IMU_MODE_I2C;
 80a0114:	7025      	strb	r5, [r4, #0]
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  lossThreshold = 5;
  gainThreshold = 1;
 80a0116:	601a      	str	r2, [r3, #0]
  // The above lines will only take effect AFTER calling
  // imu.begin(), which verifies communication with the IMU
  // and turns it on.
  if (!imu.begin())
 80a0118:	f000 fce3 	bl	80a0ae2 <_ZN7LSM9DS15beginEv>
 80a011c:	b998      	cbnz	r0, 80a0146 <_Z8setupImuv+0x4e>
  {
       digitalWrite(D7, HIGH);
 80a011e:	4629      	mov	r1, r5
 80a0120:	2007      	movs	r0, #7
 80a0122:	f002 f986 	bl	80a2432 <digitalWrite>
    Serial.println("Failed to communicate with LSM9DS1.");
 80a0126:	f001 fff1 	bl	80a210c <_Z16_fetch_usbserialv>
 80a012a:	4915      	ldr	r1, [pc, #84]	; (80a0180 <_Z8setupImuv+0x88>)
 80a012c:	f001 facd 	bl	80a16ca <_ZN5Print7printlnEPKc>
    Serial.println("Double-check wiring.");
 80a0130:	f001 ffec 	bl	80a210c <_Z16_fetch_usbserialv>
 80a0134:	4913      	ldr	r1, [pc, #76]	; (80a0184 <_Z8setupImuv+0x8c>)
 80a0136:	f001 fac8 	bl	80a16ca <_ZN5Print7printlnEPKc>
    Serial.println("Default settings in this sketch will " \
 80a013a:	f001 ffe7 	bl	80a210c <_Z16_fetch_usbserialv>
                  "work for an out of the box LSM9DS1 " \
                  "Breakout, but may need to be modified " \
                  "if the board jumpers are.");
 80a013e:	4912      	ldr	r1, [pc, #72]	; (80a0188 <_Z8setupImuv+0x90>)
 80a0140:	f001 fac3 	bl	80a16ca <_ZN5Print7printlnEPKc>
 80a0144:	e7fe      	b.n	80a0144 <_Z8setupImuv+0x4c>
    while (1)
      ;
  }

     // imu.begin();
  Serial.println("calibration started");
 80a0146:	f001 ffe1 	bl	80a210c <_Z16_fetch_usbserialv>
 80a014a:	4910      	ldr	r1, [pc, #64]	; (80a018c <_Z8setupImuv+0x94>)
 80a014c:	f001 fabd 	bl	80a16ca <_ZN5Print7printlnEPKc>
  imu.calibrate(true);
 80a0150:	4629      	mov	r1, r5
 80a0152:	4620      	mov	r0, r4
 80a0154:	f000 fdca 	bl	80a0cec <_ZN7LSM9DS19calibrateEb>
  imu.calibrateMag(1);
 80a0158:	4629      	mov	r1, r5
 80a015a:	4620      	mov	r0, r4
 80a015c:	f000 fe92 	bl	80a0e84 <_ZN7LSM9DS112calibrateMagEb>
  
  Serial.println("Calibration finished");
 80a0160:	f001 ffd4 	bl	80a210c <_Z16_fetch_usbserialv>
}
 80a0164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     // imu.begin();
  Serial.println("calibration started");
  imu.calibrate(true);
  imu.calibrateMag(1);
  
  Serial.println("Calibration finished");
 80a0168:	4909      	ldr	r1, [pc, #36]	; (80a0190 <_Z8setupImuv+0x98>)
 80a016a:	f001 baae 	b.w	80a16ca <_ZN5Print7printlnEPKc>
 80a016e:	bf00      	nop
 80a0170:	200000e8 	.word	0x200000e8
 80a0174:	40a00000 	.word	0x40a00000
 80a0178:	200000e4 	.word	0x200000e4
 80a017c:	20000180 	.word	0x20000180
 80a0180:	080a36d8 	.word	0x080a36d8
 80a0184:	080a36fc 	.word	0x080a36fc
 80a0188:	080a3711 	.word	0x080a3711
 80a018c:	080a3799 	.word	0x080a3799
 80a0190:	080a37ad 	.word	0x080a37ad

080a0194 <setup>:
}

void setup() 
{
 80a0194:	b570      	push	{r4, r5, r6, lr}
    pinMode(D7, OUTPUT);
 80a0196:	2101      	movs	r1, #1
  
  Serial.println("Calibration finished");
}

void setup() 
{
 80a0198:	b096      	sub	sp, #88	; 0x58
    pinMode(D7, OUTPUT);
 80a019a:	2007      	movs	r0, #7
 80a019c:	f002 f938 	bl	80a2410 <pinMode>
    while(!Serial);
 80a01a0:	f001 ffb4 	bl	80a210c <_Z16_fetch_usbserialv>
 80a01a4:	f001 ff99 	bl	80a20da <_ZN9USBSerialcvbEv>
 80a01a8:	2800      	cmp	r0, #0
 80a01aa:	d0f9      	beq.n	80a01a0 <setup+0xc>
 80a01ac:	4c2f      	ldr	r4, [pc, #188]	; (80a026c <setup+0xd8>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a01ae:	2300      	movs	r3, #0
 80a01b0:	461a      	mov	r2, r3
 80a01b2:	4619      	mov	r1, r3
 80a01b4:	6860      	ldr	r0, [r4, #4]
 80a01b6:	f001 f887 	bl	80a12c8 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a01ba:	2200      	movs	r2, #0
 80a01bc:	4611      	mov	r1, r2
 80a01be:	6860      	ldr	r0, [r4, #4]
 80a01c0:	4d2a      	ldr	r5, [pc, #168]	; (80a026c <setup+0xd8>)
 80a01c2:	f001 f899 	bl	80a12f8 <network_ready>
    WiFi.connect();

    //wifi function
    while(!WiFi.ready());
 80a01c6:	2800      	cmp	r0, #0
 80a01c8:	d0f7      	beq.n	80a01ba <setup+0x26>
    Serial.println("Setup");
 80a01ca:	f001 ff9f 	bl	80a210c <_Z16_fetch_usbserialv>
 80a01ce:	4928      	ldr	r1, [pc, #160]	; (80a0270 <setup+0xdc>)
 80a01d0:	f001 fa7b 	bl	80a16ca <_ZN5Print7printlnEPKc>
    udp.begin(localPort);
 80a01d4:	4b27      	ldr	r3, [pc, #156]	; (80a0274 <setup+0xe0>)
 80a01d6:	2200      	movs	r2, #0
 80a01d8:	8819      	ldrh	r1, [r3, #0]
 80a01da:	4827      	ldr	r0, [pc, #156]	; (80a0278 <setup+0xe4>)
 80a01dc:	f001 fce3 	bl	80a1ba6 <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a01e0:	2300      	movs	r3, #0
 80a01e2:	4619      	mov	r1, r3
 80a01e4:	4a25      	ldr	r2, [pc, #148]	; (80a027c <setup+0xe8>)
 80a01e6:	6868      	ldr	r0, [r5, #4]
 80a01e8:	f001 f8be 	bl	80a1368 <network_set_hostname>
    WiFi.setHostname("HQRouter_PUBLISH");
    Serial.println(WiFi.hostname());
 80a01ec:	f001 ff8e 	bl	80a210c <_Z16_fetch_usbserialv>
 80a01f0:	4606      	mov	r6, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01f2:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a01f4:	2240      	movs	r2, #64	; 0x40
 80a01f6:	2100      	movs	r1, #0
 80a01f8:	a806      	add	r0, sp, #24
 80a01fa:	f003 fa2a 	bl	80a3652 <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a01fe:	2340      	movs	r3, #64	; 0x40
 80a0200:	aa06      	add	r2, sp, #24
 80a0202:	4621      	mov	r1, r4
 80a0204:	9400      	str	r4, [sp, #0]
 80a0206:	6868      	ldr	r0, [r5, #4]
 80a0208:	f001 f8b6 	bl	80a1378 <network_get_hostname>
        return String(buf);
 80a020c:	a906      	add	r1, sp, #24
 80a020e:	a802      	add	r0, sp, #8
 80a0210:	f001 fc58 	bl	80a1ac4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0214:	9902      	ldr	r1, [sp, #8]
 80a0216:	4630      	mov	r0, r6
 80a0218:	f001 fa57 	bl	80a16ca <_ZN5Print7printlnEPKc>
 80a021c:	a802      	add	r0, sp, #8
 80a021e:	f001 fc0a 	bl	80a1a36 <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a0222:	f001 ff73 	bl	80a210c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0226:	4622      	mov	r2, r4
 80a0228:	4606      	mov	r6, r0
 80a022a:	4621      	mov	r1, r4
 80a022c:	6868      	ldr	r0, [r5, #4]
 80a022e:	f001 f843 	bl	80a12b8 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0232:	1c81      	adds	r1, r0, #2
 80a0234:	a806      	add	r0, sp, #24
 80a0236:	f001 f94f 	bl	80a14d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a023a:	a906      	add	r1, sp, #24
 80a023c:	4630      	mov	r0, r6
 80a023e:	f001 fa4e 	bl	80a16de <_ZN5Print7printlnERK9Printable>
    Serial.begin(115200);
 80a0242:	f001 ff63 	bl	80a210c <_Z16_fetch_usbserialv>
 80a0246:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a024a:	f001 ff3f 	bl	80a20cc <_ZN9USBSerial5beginEl>
    iVx = 0;
 80a024e:	4b0c      	ldr	r3, [pc, #48]	; (80a0280 <setup+0xec>)
 80a0250:	801c      	strh	r4, [r3, #0]
    iVy = 0;
 80a0252:	4b0c      	ldr	r3, [pc, #48]	; (80a0284 <setup+0xf0>)
 80a0254:	801c      	strh	r4, [r3, #0]
    iVz = 0;
 80a0256:	4b0c      	ldr	r3, [pc, #48]	; (80a0288 <setup+0xf4>)
 80a0258:	801c      	strh	r4, [r3, #0]

    setupImu();
 80a025a:	f7ff ff4d 	bl	80a00f8 <_Z8setupImuv>
    
  updateTimer.SetCallback(OnTimer);
 80a025e:	490b      	ldr	r1, [pc, #44]	; (80a028c <setup+0xf8>)
 80a0260:	480b      	ldr	r0, [pc, #44]	; (80a0290 <setup+0xfc>)
 80a0262:	f000 f96b 	bl	80a053c <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>
}
 80a0266:	b016      	add	sp, #88	; 0x58
 80a0268:	bd70      	pop	{r4, r5, r6, pc}
 80a026a:	bf00      	nop
 80a026c:	2000062c 	.word	0x2000062c
 80a0270:	080a37c2 	.word	0x080a37c2
 80a0274:	20000000 	.word	0x20000000
 80a0278:	2000008c 	.word	0x2000008c
 80a027c:	080a37c8 	.word	0x080a37c8
 80a0280:	2000016c 	.word	0x2000016c
 80a0284:	2000016e 	.word	0x2000016e
 80a0288:	20000170 	.word	0x20000170
 80a028c:	080a0465 	.word	0x080a0465
 80a0290:	20000174 	.word	0x20000174

080a0294 <_Z12getMouvementv>:
void getMouvement(){
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
 80a0294:	4a33      	ldr	r2, [pc, #204]	; (80a0364 <_Z12getMouvementv+0xd0>)

void OnTimer(void) {  //Handler for the timer, will be called automatically
 printMvmt();
}

void getMouvement(){
 80a0296:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a029a:	4690      	mov	r8, r2
//    reset values
    dX = 0;
 80a029c:	4c32      	ldr	r4, [pc, #200]	; (80a0368 <_Z12getMouvementv+0xd4>)
    dY = 0;
 80a029e:	4d33      	ldr	r5, [pc, #204]	; (80a036c <_Z12getMouvementv+0xd8>)
    dZ = 0;
 80a02a0:	4e33      	ldr	r6, [pc, #204]	; (80a0370 <_Z12getMouvementv+0xdc>)
 printMvmt();
}

void getMouvement(){
//    reset values
    dX = 0;
 80a02a2:	2300      	movs	r3, #0
    dY = 0;
    dZ = 0;
    avMvmt = 0;
    for (int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a02a4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80a0374 <_Z12getMouvementv+0xe0>
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
 80a02a8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80a0384 <_Z12getMouvementv+0xf0>
 printMvmt();
}

void getMouvement(){
//    reset values
    dX = 0;
 80a02ac:	6023      	str	r3, [r4, #0]
    dY = 0;
 80a02ae:	602b      	str	r3, [r5, #0]
    dZ = 0;
 80a02b0:	6033      	str	r3, [r6, #0]
    avMvmt = 0;
 80a02b2:	6013      	str	r3, [r2, #0]
 80a02b4:	f04f 090a 	mov.w	r9, #10
    for (int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
 80a02b8:	482e      	ldr	r0, [pc, #184]	; (80a0374 <_Z12getMouvementv+0xe0>)
 80a02ba:	f000 fbea 	bl	80a0a92 <_ZN7LSM9DS114accelAvailableEv>
 80a02be:	b110      	cbz	r0, 80a02c6 <_Z12getMouvementv+0x32>
    {
      imu.readAccel();
 80a02c0:	482c      	ldr	r0, [pc, #176]	; (80a0374 <_Z12getMouvementv+0xe0>)
 80a02c2:	f000 fcb1 	bl	80a0c28 <_ZN7LSM9DS19readAccelEv>
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
 80a02c6:	f9ba 102e 	ldrsh.w	r1, [sl, #46]	; 0x2e
 80a02ca:	482a      	ldr	r0, [pc, #168]	; (80a0374 <_Z12getMouvementv+0xe0>)
 80a02cc:	f000 f98d 	bl	80a05ea <_ZN7LSM9DS19calcAccelEs>
 80a02d0:	f8db 1000 	ldr.w	r1, [fp]
 80a02d4:	f002 ff24 	bl	80a3120 <__aeabi_fsub>
 80a02d8:	f003 f97c 	bl	80a35d4 <__aeabi_f2iz>
 80a02dc:	2800      	cmp	r0, #0
 80a02de:	bfb8      	it	lt
 80a02e0:	4240      	neglt	r0, r0
 80a02e2:	f002 ffd3 	bl	80a328c <__aeabi_i2f>
 80a02e6:	6821      	ldr	r1, [r4, #0]
 80a02e8:	f002 ff1c 	bl	80a3124 <__addsf3>
    dY += abs(imu.calcAccel(imu.ay) - refY);
 80a02ec:	f9ba 1030 	ldrsh.w	r1, [sl, #48]	; 0x30
    for (int i = 0; i < 10; i++){
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
 80a02f0:	6020      	str	r0, [r4, #0]
    dY += abs(imu.calcAccel(imu.ay) - refY);
 80a02f2:	4820      	ldr	r0, [pc, #128]	; (80a0374 <_Z12getMouvementv+0xe0>)
 80a02f4:	f000 f979 	bl	80a05ea <_ZN7LSM9DS19calcAccelEs>
 80a02f8:	4b1f      	ldr	r3, [pc, #124]	; (80a0378 <_Z12getMouvementv+0xe4>)
 80a02fa:	6819      	ldr	r1, [r3, #0]
 80a02fc:	f002 ff10 	bl	80a3120 <__aeabi_fsub>
 80a0300:	f003 f968 	bl	80a35d4 <__aeabi_f2iz>
 80a0304:	2800      	cmp	r0, #0
 80a0306:	bfb8      	it	lt
 80a0308:	4240      	neglt	r0, r0
 80a030a:	f002 ffbf 	bl	80a328c <__aeabi_i2f>
 80a030e:	6829      	ldr	r1, [r5, #0]
 80a0310:	f002 ff08 	bl	80a3124 <__addsf3>
    dZ += abs(imu.calcAccel(imu.az) - refZ);
 80a0314:	f9ba 1032 	ldrsh.w	r1, [sl, #50]	; 0x32
    if ( imu.accelAvailable() )
    {
      imu.readAccel();
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
    dY += abs(imu.calcAccel(imu.ay) - refY);
 80a0318:	6028      	str	r0, [r5, #0]
    dZ += abs(imu.calcAccel(imu.az) - refZ);
 80a031a:	4816      	ldr	r0, [pc, #88]	; (80a0374 <_Z12getMouvementv+0xe0>)
 80a031c:	f000 f965 	bl	80a05ea <_ZN7LSM9DS19calcAccelEs>
 80a0320:	4b16      	ldr	r3, [pc, #88]	; (80a037c <_Z12getMouvementv+0xe8>)
 80a0322:	6819      	ldr	r1, [r3, #0]
 80a0324:	f002 fefc 	bl	80a3120 <__aeabi_fsub>
 80a0328:	f003 f954 	bl	80a35d4 <__aeabi_f2iz>
 80a032c:	2800      	cmp	r0, #0
 80a032e:	bfb8      	it	lt
 80a0330:	4240      	neglt	r0, r0
 80a0332:	f002 ffab 	bl	80a328c <__aeabi_i2f>
 80a0336:	6831      	ldr	r1, [r6, #0]
 80a0338:	f002 fef4 	bl	80a3124 <__addsf3>
 80a033c:	4607      	mov	r7, r0
 80a033e:	6030      	str	r0, [r6, #0]
   
    avMvmt = (dX + dY + dZ) / 3;
 80a0340:	6829      	ldr	r1, [r5, #0]
 80a0342:	6820      	ldr	r0, [r4, #0]
 80a0344:	f002 feee 	bl	80a3124 <__addsf3>
 80a0348:	4639      	mov	r1, r7
 80a034a:	f002 feeb 	bl	80a3124 <__addsf3>
 80a034e:	490c      	ldr	r1, [pc, #48]	; (80a0380 <_Z12getMouvementv+0xec>)
 80a0350:	f003 f8a4 	bl	80a349c <__aeabi_fdiv>
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
    for (int i = 0; i < 10; i++){
 80a0354:	f1b9 0901 	subs.w	r9, r9, #1
    }
    dX += abs(imu.calcAccel(imu.ax) - refX);
    dY += abs(imu.calcAccel(imu.ay) - refY);
    dZ += abs(imu.calcAccel(imu.az) - refZ);
   
    avMvmt = (dX + dY + dZ) / 3;
 80a0358:	f8c8 0000 	str.w	r0, [r8]
//    reset values
    dX = 0;
    dY = 0;
    dZ = 0;
    avMvmt = 0;
    for (int i = 0; i < 10; i++){
 80a035c:	d1ac      	bne.n	80a02b8 <_Z12getMouvementv+0x24>
    // if (avMvmt > lossThreshold && pixelPointer >= 0){
    // //   pixels[pixelPointer] = 0;
    //   pixelPointer--;
    // }
    
}
 80a035e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0362:	bf00      	nop
 80a0364:	2000019c 	.word	0x2000019c
 80a0368:	200000e0 	.word	0x200000e0
 80a036c:	200001a0 	.word	0x200001a0
 80a0370:	200001a4 	.word	0x200001a4
 80a0374:	200000e8 	.word	0x200000e8
 80a0378:	20000084 	.word	0x20000084
 80a037c:	20000088 	.word	0x20000088
 80a0380:	40400000 	.word	0x40400000
 80a0384:	20000080 	.word	0x20000080

080a0388 <loop>:
    }
    Serial.println(acceptedRange);
    delay(1000);
}

void loop() {
 80a0388:	b508      	push	{r3, lr}
//   IMUActivity();
   updateTimer.Update();
 80a038a:	4803      	ldr	r0, [pc, #12]	; (80a0398 <loop+0x10>)
 80a038c:	f000 f8ca 	bl	80a0524 <_ZN20SparkCorePolledTimer6UpdateEv>
   getMouvement();
  
}
 80a0390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop() {
//   IMUActivity();
   updateTimer.Update();
   getMouvement();
 80a0394:	f7ff bf7e 	b.w	80a0294 <_Z12getMouvementv>
 80a0398:	20000174 	.word	0x20000174

080a039c <_Z9printMvmtv>:
    // //   pixels[pixelPointer] = 0;
    //   pixelPointer--;
    // }
    
}
void printMvmt(){
 80a039c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Serial.print("x: ");
 80a039e:	f001 feb5 	bl	80a210c <_Z16_fetch_usbserialv>
 80a03a2:	4927      	ldr	r1, [pc, #156]	; (80a0440 <_Z9printMvmtv+0xa4>)
 80a03a4:	f001 f978 	bl	80a1698 <_ZN5Print5printEPKc>
    Serial.print(dX);
 80a03a8:	f001 feb0 	bl	80a210c <_Z16_fetch_usbserialv>
 80a03ac:	4b25      	ldr	r3, [pc, #148]	; (80a0444 <_Z9printMvmtv+0xa8>)
 80a03ae:	4605      	mov	r5, r0
 80a03b0:	6818      	ldr	r0, [r3, #0]
 80a03b2:	f002 fb65 	bl	80a2a80 <__aeabi_f2d>
 80a03b6:	2402      	movs	r4, #2
 80a03b8:	4602      	mov	r2, r0
 80a03ba:	460b      	mov	r3, r1
 80a03bc:	9400      	str	r4, [sp, #0]
 80a03be:	4628      	mov	r0, r5
 80a03c0:	f001 fa94 	bl	80a18ec <_ZN5Print5printEdi>
    Serial.print( " Y:");
 80a03c4:	f001 fea2 	bl	80a210c <_Z16_fetch_usbserialv>
 80a03c8:	491f      	ldr	r1, [pc, #124]	; (80a0448 <_Z9printMvmtv+0xac>)
 80a03ca:	f001 f965 	bl	80a1698 <_ZN5Print5printEPKc>
    Serial.print(dY);
 80a03ce:	f001 fe9d 	bl	80a210c <_Z16_fetch_usbserialv>
 80a03d2:	4b1e      	ldr	r3, [pc, #120]	; (80a044c <_Z9printMvmtv+0xb0>)
 80a03d4:	4605      	mov	r5, r0
 80a03d6:	6818      	ldr	r0, [r3, #0]
 80a03d8:	f002 fb52 	bl	80a2a80 <__aeabi_f2d>
 80a03dc:	9400      	str	r4, [sp, #0]
 80a03de:	4602      	mov	r2, r0
 80a03e0:	460b      	mov	r3, r1
 80a03e2:	4628      	mov	r0, r5
 80a03e4:	f001 fa82 	bl	80a18ec <_ZN5Print5printEdi>
    Serial.print(" Z:");
 80a03e8:	f001 fe90 	bl	80a210c <_Z16_fetch_usbserialv>
 80a03ec:	4918      	ldr	r1, [pc, #96]	; (80a0450 <_Z9printMvmtv+0xb4>)
 80a03ee:	f001 f953 	bl	80a1698 <_ZN5Print5printEPKc>
    Serial.print(dZ);
 80a03f2:	f001 fe8b 	bl	80a210c <_Z16_fetch_usbserialv>
 80a03f6:	4b17      	ldr	r3, [pc, #92]	; (80a0454 <_Z9printMvmtv+0xb8>)
 80a03f8:	4605      	mov	r5, r0
 80a03fa:	6818      	ldr	r0, [r3, #0]
 80a03fc:	f002 fb40 	bl	80a2a80 <__aeabi_f2d>
 80a0400:	9400      	str	r4, [sp, #0]
 80a0402:	4602      	mov	r2, r0
 80a0404:	460b      	mov	r3, r1
 80a0406:	4628      	mov	r0, r5
 80a0408:	f001 fa70 	bl	80a18ec <_ZN5Print5printEdi>
    Serial.print(" av: ");
 80a040c:	f001 fe7e 	bl	80a210c <_Z16_fetch_usbserialv>
 80a0410:	4911      	ldr	r1, [pc, #68]	; (80a0458 <_Z9printMvmtv+0xbc>)
 80a0412:	f001 f941 	bl	80a1698 <_ZN5Print5printEPKc>
    Serial.print(avMvmt);
 80a0416:	f001 fe79 	bl	80a210c <_Z16_fetch_usbserialv>
 80a041a:	4b10      	ldr	r3, [pc, #64]	; (80a045c <_Z9printMvmtv+0xc0>)
 80a041c:	4605      	mov	r5, r0
 80a041e:	6818      	ldr	r0, [r3, #0]
 80a0420:	f002 fb2e 	bl	80a2a80 <__aeabi_f2d>
 80a0424:	9400      	str	r4, [sp, #0]
 80a0426:	4602      	mov	r2, r0
 80a0428:	460b      	mov	r3, r1
 80a042a:	4628      	mov	r0, r5
 80a042c:	f001 fa5e 	bl	80a18ec <_ZN5Print5printEdi>
    Serial.println(" ");
 80a0430:	f001 fe6c 	bl	80a210c <_Z16_fetch_usbserialv>
 80a0434:	490a      	ldr	r1, [pc, #40]	; (80a0460 <_Z9printMvmtv+0xc4>)
}
 80a0436:	b003      	add	sp, #12
 80a0438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Serial.print(dY);
    Serial.print(" Z:");
    Serial.print(dZ);
    Serial.print(" av: ");
    Serial.print(avMvmt);
    Serial.println(" ");
 80a043c:	f001 b945 	b.w	80a16ca <_ZN5Print7printlnEPKc>
 80a0440:	080a380b 	.word	0x080a380b
 80a0444:	200000e0 	.word	0x200000e0
 80a0448:	080a380f 	.word	0x080a380f
 80a044c:	200001a0 	.word	0x200001a0
 80a0450:	080a3813 	.word	0x080a3813
 80a0454:	200001a4 	.word	0x200001a4
 80a0458:	080a3817 	.word	0x080a3817
 80a045c:	2000019c 	.word	0x2000019c
 80a0460:	080a3809 	.word	0x080a3809

080a0464 <_Z7OnTimerv>:
   getMouvement();
  
}

void OnTimer(void) {  //Handler for the timer, will be called automatically
 printMvmt();
 80a0464:	f7ff bf9a 	b.w	80a039c <_Z9printMvmtv>

080a0468 <_GLOBAL__sub_I_SystemMode>:
        itmp = (int16_t)((itmp * ix) >> 15);
        if (itmp <= iy) ir += idelta;
            idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
    } while (idelta >= MINDELTADIV); /* last loop is performed for idelta=MINDELTADIV */
    return (ir);
}
 80a0468:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a046a:	f000 fd87 	bl	80a0f7c <HAL_Pin_Map>
#include "LSM9DS1_Types.h"
#include "math.h"
#include "SparkCorePolledTimer.h"


SYSTEM_THREAD(ENABLED);
 80a046e:	2100      	movs	r1, #0
 80a0470:	2001      	movs	r0, #1
 80a0472:	f000 fefd 	bl	80a1270 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0476:	4b13      	ldr	r3, [pc, #76]	; (80a04c4 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0478:	2200      	movs	r2, #0
 80a047a:	701a      	strb	r2, [r3, #0]
 80a047c:	805a      	strh	r2, [r3, #2]
 80a047e:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0482:	4c11      	ldr	r4, [pc, #68]	; (80a04c8 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0484:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0486:	2002      	movs	r0, #2
 80a0488:	f000 feea 	bl	80a1260 <set_system_mode>
 80a048c:	4d0f      	ldr	r5, [pc, #60]	; (80a04cc <_GLOBAL__sub_I_SystemMode+0x64>)
 80a048e:	4620      	mov	r0, r4
 80a0490:	f001 f814 	bl	80a14bc <_ZN9IPAddressC1Ev>
 80a0494:	4620      	mov	r0, r4
int port;
UDP udp;
 80a0496:	4c0e      	ldr	r4, [pc, #56]	; (80a04d0 <_GLOBAL__sub_I_SystemMode+0x68>)
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);


unsigned int localPort = 8888;
IPAddress ipAddress;
 80a0498:	462a      	mov	r2, r5
 80a049a:	490e      	ldr	r1, [pc, #56]	; (80a04d4 <_GLOBAL__sub_I_SystemMode+0x6c>)
 80a049c:	f002 f83c 	bl	80a2518 <__aeabi_atexit>
int port;
UDP udp;
 80a04a0:	4620      	mov	r0, r4
 80a04a2:	f001 fcbf 	bl	80a1e24 <_ZN3UDPC1Ev>
 80a04a6:	462a      	mov	r2, r5
 80a04a8:	490b      	ldr	r1, [pc, #44]	; (80a04d8 <_GLOBAL__sub_I_SystemMode+0x70>)
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	f002 f834 	bl	80a2518 <__aeabi_atexit>
Original Creation Date: April 30, 2015
https://github.com/sparkfun/SparkFun_LSM9DS1_Particle_Library

*****************************************************************/

LSM9DS1 imu;
 80a04b0:	480a      	ldr	r0, [pc, #40]	; (80a04dc <_GLOBAL__sub_I_SystemMode+0x74>)
 80a04b2:	f000 f893 	bl	80a05dc <_ZN7LSM9DS1C1Ev>
        itmp = (int16_t)((itmp * ix) >> 15);
        if (itmp <= iy) ir += idelta;
            idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
    } while (idelta >= MINDELTADIV); /* last loop is performed for idelta=MINDELTADIV */
    return (ir);
}
 80a04b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// a declination to get a more accurate heading. 
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -14.17181// Declination (degrees) montreal

SparkCorePolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds
 80a04ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a04be:	4808      	ldr	r0, [pc, #32]	; (80a04e0 <_GLOBAL__sub_I_SystemMode+0x78>)
 80a04c0:	f000 b816 	b.w	80a04f0 <_ZN20SparkCorePolledTimerC1Em>
 80a04c4:	200000d8 	.word	0x200000d8
 80a04c8:	20000184 	.word	0x20000184
 80a04cc:	2000007c 	.word	0x2000007c
 80a04d0:	2000008c 	.word	0x2000008c
 80a04d4:	080a00b3 	.word	0x080a00b3
 80a04d8:	080a00b5 	.word	0x080a00b5
 80a04dc:	200000e8 	.word	0x200000e8
 80a04e0:	20000174 	.word	0x20000174

080a04e4 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
 80a04e4:	b510      	push	{r4, lr}
 80a04e6:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a04e8:	f000 fd40 	bl	80a0f6c <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
 80a04ec:	6020      	str	r0, [r4, #0]
 80a04ee:	bd10      	pop	{r4, pc}

080a04f0 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
 80a04f0:	b538      	push	{r3, r4, r5, lr}
 80a04f2:	4604      	mov	r4, r0
 80a04f4:	460d      	mov	r5, r1
    Reset();
 80a04f6:	f7ff fff5 	bl	80a04e4 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
 80a04fa:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
 80a04fc:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
 80a04fe:	60a3      	str	r3, [r4, #8]
}
 80a0500:	4620      	mov	r0, r4
 80a0502:	bd38      	pop	{r3, r4, r5, pc}

080a0504 <_ZN20SparkCorePolledTimer10HasElapsedEv>:

void SparkCorePolledTimer::Reset(void){
    timeMark=millis();
}

int SparkCorePolledTimer::HasElapsed(){
 80a0504:	b510      	push	{r4, lr}
 80a0506:	4604      	mov	r4, r0
 80a0508:	f000 fd30 	bl	80a0f6c <HAL_Timer_Get_Milli_Seconds>
  
    timeCurrent=millis();
    timeElapsed=timeCurrent-timeMark;  


    if(timeElapsed>=intervalMS) {
 80a050c:	6823      	ldr	r3, [r4, #0]
 80a050e:	1ac0      	subs	r0, r0, r3
 80a0510:	6863      	ldr	r3, [r4, #4]
 80a0512:	4298      	cmp	r0, r3
 80a0514:	d304      	bcc.n	80a0520 <_ZN20SparkCorePolledTimer10HasElapsedEv+0x1c>
        Reset();
 80a0516:	4620      	mov	r0, r4
 80a0518:	f7ff ffe4 	bl	80a04e4 <_ZN20SparkCorePolledTimer5ResetEv>
        result=true;
 80a051c:	2001      	movs	r0, #1
 80a051e:	bd10      	pop	{r4, pc}
}

int SparkCorePolledTimer::HasElapsed(){
    unsigned long timeCurrent;
    unsigned long timeElapsed;
    int result=false;
 80a0520:	2000      	movs	r0, #0
    if(timeElapsed>=intervalMS) {
        Reset();
        result=true;
    }
    return(result);  
}
 80a0522:	bd10      	pop	{r4, pc}

080a0524 <_ZN20SparkCorePolledTimer6UpdateEv>:

void SparkCorePolledTimer::Update(void){
 80a0524:	b510      	push	{r4, lr}
    if (callback!=NULL) {
 80a0526:	6883      	ldr	r3, [r0, #8]
        result=true;
    }
    return(result);  
}

void SparkCorePolledTimer::Update(void){
 80a0528:	4604      	mov	r4, r0
    if (callback!=NULL) {
 80a052a:	b133      	cbz	r3, 80a053a <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
        if(HasElapsed()) {
 80a052c:	f7ff ffea 	bl	80a0504 <_ZN20SparkCorePolledTimer10HasElapsedEv>
 80a0530:	b118      	cbz	r0, 80a053a <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
            callback();
 80a0532:	68a3      	ldr	r3, [r4, #8]
        }
    }
}
 80a0534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SparkCorePolledTimer::Update(void){
    if (callback!=NULL) {
        if(HasElapsed()) {
            callback();
 80a0538:	4718      	bx	r3
 80a053a:	bd10      	pop	{r4, pc}

080a053c <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
 80a053c:	6081      	str	r1, [r0, #8]
 80a053e:	4770      	bx	lr

080a0540 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
 80a0540:	f000 bd1c 	b.w	80a0f7c <HAL_Pin_Map>

080a0544 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80a0544:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0546:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80a0548:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80a054a:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a054c:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a054e:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80a0550:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0552:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80a0554:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80a0556:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0558:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a055a:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80a055c:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80a055e:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80a0560:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0564:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a0566:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80a0568:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80a056a:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80a056c:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80a056e:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80a0570:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80a0572:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80a0574:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80a0576:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80a0578:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80a057a:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80a057c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80a0580:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80a0582:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80a0584:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80a0586:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80a0588:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80a058a:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 80a058c:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 80a058e:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80a0590:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 80a0592:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 80a0594:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 80a0596:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80a059a:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 80a059c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 80a05a0:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80a05a4:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 80a05a6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 80a05aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 80a05ae:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80a05b2:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a05b4:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80a05b6:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80a05b8:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80a05ba:	6565      	str	r5, [r4, #84]	; 0x54
 80a05bc:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80a05c0:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80a05c4:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80a05c8:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80a05cc:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80a05d0:	d1f0      	bne.n	80a05b4 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80a05d2:	f04f 0300 	mov.w	r3, #0
 80a05d6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80a05da:	bd30      	pop	{r4, r5, pc}

080a05dc <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80a05dc:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80a05de:	231e      	movs	r3, #30
 80a05e0:	226b      	movs	r2, #107	; 0x6b
 80a05e2:	2101      	movs	r1, #1
 80a05e4:	f7ff ffae 	bl	80a0544 <_ZN7LSM9DS14initE14interface_modehh>
}
 80a05e8:	bd10      	pop	{r4, pc}

080a05ea <_ZN7LSM9DS19calcAccelEs>:
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
}

float LSM9DS1::calcAccel(int16_t accel)
{
 80a05ea:	b510      	push	{r4, lr}
 80a05ec:	4604      	mov	r4, r0
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a05ee:	4608      	mov	r0, r1
 80a05f0:	f002 fe4c 	bl	80a328c <__aeabi_i2f>
 80a05f4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80a05f6:	f002 fe9d 	bl	80a3334 <__aeabi_fmul>
}
 80a05fa:	bd10      	pop	{r4, pc}

080a05fc <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80a05fc:	b510      	push	{r4, lr}
 80a05fe:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80a0600:	88c0      	ldrh	r0, [r0, #6]
 80a0602:	f002 fe3f 	bl	80a3284 <__aeabi_ui2f>
 80a0606:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a060a:	f002 fe93 	bl	80a3334 <__aeabi_fmul>
 80a060e:	6760      	str	r0, [r4, #116]	; 0x74
 80a0610:	bd10      	pop	{r4, pc}

080a0612 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80a0612:	b510      	push	{r4, lr}
 80a0614:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80a0616:	7dc0      	ldrb	r0, [r0, #23]
 80a0618:	f002 fe34 	bl	80a3284 <__aeabi_ui2f>
 80a061c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80a0620:	f002 fe88 	bl	80a3334 <__aeabi_fmul>
 80a0624:	67a0      	str	r0, [r4, #120]	; 0x78
 80a0626:	bd10      	pop	{r4, pc}

080a0628 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 80a0628:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a062c:	3b04      	subs	r3, #4
 80a062e:	2b0c      	cmp	r3, #12
 80a0630:	d814      	bhi.n	80a065c <_ZN7LSM9DS18calcmResEv+0x34>
 80a0632:	e8df f003 	tbb	[pc, r3]
 80a0636:	1307      	.short	0x1307
 80a0638:	130a1313 	.word	0x130a1313
 80a063c:	130d1313 	.word	0x130d1313
 80a0640:	1313      	.short	0x1313
 80a0642:	10          	.byte	0x10
 80a0643:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80a0644:	4b06      	ldr	r3, [pc, #24]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0646:	681b      	ldr	r3, [r3, #0]
 80a0648:	e007      	b.n	80a065a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80a064a:	4b05      	ldr	r3, [pc, #20]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a064c:	685b      	ldr	r3, [r3, #4]
 80a064e:	e004      	b.n	80a065a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80a0650:	4b03      	ldr	r3, [pc, #12]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0652:	689b      	ldr	r3, [r3, #8]
 80a0654:	e001      	b.n	80a065a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <_ZN7LSM9DS18calcmResEv+0x38>)
 80a0658:	68db      	ldr	r3, [r3, #12]
 80a065a:	67c3      	str	r3, [r0, #124]	; 0x7c
 80a065c:	4770      	bx	lr
 80a065e:	bf00      	nop
 80a0660:	20000004 	.word	0x20000004

080a0664 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80a0664:	88c3      	ldrh	r3, [r0, #6]
 80a0666:	2bf5      	cmp	r3, #245	; 0xf5
 80a0668:	d007      	beq.n	80a067a <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a066a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a066e:	d004      	beq.n	80a067a <_ZN7LSM9DS115constrainScalesEv+0x16>
 80a0670:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80a0674:	bf1c      	itt	ne
 80a0676:	23f5      	movne	r3, #245	; 0xf5
 80a0678:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80a067a:	7dc2      	ldrb	r2, [r0, #23]
 80a067c:	2a10      	cmp	r2, #16
 80a067e:	d803      	bhi.n	80a0688 <_ZN7LSM9DS115constrainScalesEv+0x24>
 80a0680:	4b08      	ldr	r3, [pc, #32]	; (80a06a4 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80a0682:	40d3      	lsrs	r3, r2
 80a0684:	07da      	lsls	r2, r3, #31
 80a0686:	d401      	bmi.n	80a068c <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80a0688:	2302      	movs	r3, #2
 80a068a:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80a068c:	f890 2020 	ldrb.w	r2, [r0, #32]
 80a0690:	2a10      	cmp	r2, #16
 80a0692:	d803      	bhi.n	80a069c <_ZN7LSM9DS115constrainScalesEv+0x38>
 80a0694:	4b04      	ldr	r3, [pc, #16]	; (80a06a8 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80a0696:	40d3      	lsrs	r3, r2
 80a0698:	07db      	lsls	r3, r3, #31
 80a069a:	d402      	bmi.n	80a06a2 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 80a069c:	2304      	movs	r3, #4
 80a069e:	f880 3020 	strb.w	r3, [r0, #32]
 80a06a2:	4770      	bx	lr
 80a06a4:	00010114 	.word	0x00010114
 80a06a8:	00011110 	.word	0x00011110

080a06ac <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 80a06ac:	b510      	push	{r4, lr}
 80a06ae:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 80a06b0:	2101      	movs	r1, #1
 80a06b2:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 80a06b6:	f001 feab 	bl	80a2410 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 80a06ba:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 80a06be:	2101      	movs	r1, #1
 80a06c0:	f001 feb7 	bl	80a2432 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80a06c4:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80a06c8:	2101      	movs	r1, #1
 80a06ca:	f001 fea1 	bl	80a2410 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80a06ce:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80a06d2:	4c0a      	ldr	r4, [pc, #40]	; (80a06fc <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80a06d4:	2101      	movs	r1, #1
 80a06d6:	f001 feac 	bl	80a2432 <digitalWrite>
	
	SPI.begin();
 80a06da:	4620      	mov	r0, r4
 80a06dc:	f001 f93c 	bl	80a1958 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	2108      	movs	r1, #8
 80a06e4:	f001 f98a 	bl	80a19fc <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80a06e8:	4620      	mov	r0, r4
 80a06ea:	2101      	movs	r1, #1
 80a06ec:	f001 f939 	bl	80a1962 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a06f0:	4620      	mov	r0, r4
}
 80a06f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80a06f6:	2100      	movs	r1, #0
 80a06f8:	f001 b936 	b.w	80a1968 <_ZN8SPIClass11setDataModeEh>
 80a06fc:	20000670 	.word	0x20000670

080a0700 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80a0702:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80a0704:	4617      	mov	r7, r2
 80a0706:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0708:	4d09      	ldr	r5, [pc, #36]	; (80a0730 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80a070a:	4620      	mov	r0, r4
 80a070c:	2100      	movs	r1, #0
 80a070e:	f001 fe90 	bl	80a2432 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80a0712:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80a0716:	4628      	mov	r0, r5
 80a0718:	f001 f984 	bl	80a1a24 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80a071c:	4631      	mov	r1, r6
 80a071e:	4628      	mov	r0, r5
 80a0720:	f001 f980 	bl	80a1a24 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 80a0724:	4620      	mov	r0, r4
}
 80a0726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 80a072a:	2101      	movs	r1, #1
 80a072c:	f001 be81 	b.w	80a2432 <digitalWrite>
 80a0730:	20000670 	.word	0x20000670

080a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0736:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0738:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a073c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a0740:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80a0742:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80a0746:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80a074a:	d103      	bne.n	80a0754 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80a074c:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80a074e:	bf88      	it	hi
 80a0750:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80a0754:	b28c      	uxth	r4, r1
 80a0756:	4620      	mov	r0, r4
 80a0758:	2100      	movs	r1, #0
 80a075a:	f001 fe6a 	bl	80a2432 <digitalWrite>
	SPI.transfer(rAddress);
 80a075e:	4629      	mov	r1, r5
 80a0760:	4809      	ldr	r0, [pc, #36]	; (80a0788 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0762:	f001 f95f 	bl	80a1a24 <_ZN8SPIClass8transferEh>
 80a0766:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80a0768:	1bab      	subs	r3, r5, r6
 80a076a:	429f      	cmp	r7, r3
 80a076c:	dd06      	ble.n	80a077c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80a076e:	2100      	movs	r1, #0
 80a0770:	4805      	ldr	r0, [pc, #20]	; (80a0788 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80a0772:	f001 f957 	bl	80a1a24 <_ZN8SPIClass8transferEh>
 80a0776:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80a077a:	e7f5      	b.n	80a0768 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80a077c:	4620      	mov	r0, r4
 80a077e:	2101      	movs	r1, #1
 80a0780:	f001 fe57 	bl	80a2432 <digitalWrite>
	
	return 1;
}
 80a0784:	2001      	movs	r0, #1
 80a0786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0788:	20000670 	.word	0x20000670

080a078c <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80a078c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80a078e:	2301      	movs	r3, #1
 80a0790:	9300      	str	r3, [sp, #0]
 80a0792:	f10d 030f 	add.w	r3, sp, #15
 80a0796:	f7ff ffcd 	bl	80a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80a079a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a079e:	b005      	add	sp, #20
 80a07a0:	f85d fb04 	ldr.w	pc, [sp], #4

080a07a4 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 80a07a4:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 80a07a6:	f001 fe5d 	bl	80a2464 <_Z19__fetch_global_Wirev>
}
 80a07aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 80a07ae:	f000 be4b 	b.w	80a1448 <_ZN7TwoWire5beginEv>

080a07b2 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80a07b2:	b570      	push	{r4, r5, r6, lr}
 80a07b4:	460e      	mov	r6, r1
 80a07b6:	4615      	mov	r5, r2
 80a07b8:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 80a07ba:	f001 fe53 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a07be:	4631      	mov	r1, r6
 80a07c0:	f000 fe54 	bl	80a146c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 80a07c4:	f001 fe4e 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a07c8:	6803      	ldr	r3, [r0, #0]
 80a07ca:	4629      	mov	r1, r5
 80a07cc:	689b      	ldr	r3, [r3, #8]
 80a07ce:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 80a07d0:	f001 fe48 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a07d4:	6803      	ldr	r3, [r0, #0]
 80a07d6:	4621      	mov	r1, r4
 80a07d8:	689a      	ldr	r2, [r3, #8]
 80a07da:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 80a07dc:	f001 fe42 	bl	80a2464 <_Z19__fetch_global_Wirev>
}
 80a07e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 80a07e4:	f000 be4a 	b.w	80a147c <_ZN7TwoWire15endTransmissionEv>

080a07e8 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a07e8:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07ea:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 80a07ec:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a07ee:	2a01      	cmp	r2, #1
 80a07f0:	d105      	bne.n	80a07fe <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 80a07f2:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 80a07f4:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 80a07f6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a07fa:	f7ff bfda 	b.w	80a07b2 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a07fe:	b92a      	cbnz	r2, 80a080c <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0800:	460a      	mov	r2, r1
}
 80a0802:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 80a0804:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0808:	f7ff bf7a 	b.w	80a0700 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a080c:	bc10      	pop	{r4}
 80a080e:	4770      	bx	lr

080a0810 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0810:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0812:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 80a0814:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 80a0816:	b113      	cbz	r3, 80a081e <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 80a0818:	7a03      	ldrb	r3, [r0, #8]
 80a081a:	015b      	lsls	r3, r3, #5
 80a081c:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 80a081e:	88e2      	ldrh	r2, [r4, #6]
 80a0820:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80a0824:	d005      	beq.n	80a0832 <_ZN7LSM9DS18initGyroEv+0x22>
 80a0826:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a082a:	d104      	bne.n	80a0836 <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 80a082c:	f043 0318 	orr.w	r3, r3, #24
			break;
 80a0830:	e001      	b.n	80a0836 <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 80a0832:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a0836:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a0838:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 80a083a:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80a083e:	431a      	orrs	r2, r3
 80a0840:	4620      	mov	r0, r4
 80a0842:	f7ff ffd1 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80a0846:	2200      	movs	r2, #0
 80a0848:	2111      	movs	r1, #17
 80a084a:	4620      	mov	r0, r4
 80a084c:	f7ff ffcc 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0850:	7aa3      	ldrb	r3, [r4, #10]
 80a0852:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80a0854:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80a0856:	bf14      	ite	ne
 80a0858:	2280      	movne	r2, #128	; 0x80
 80a085a:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80a085c:	b12b      	cbz	r3, 80a086a <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80a085e:	7b23      	ldrb	r3, [r4, #12]
 80a0860:	f003 030f 	and.w	r3, r3, #15
 80a0864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0868:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80a086a:	2112      	movs	r1, #18
 80a086c:	4620      	mov	r0, r4
 80a086e:	f7ff ffbb 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0872:	7ce3      	ldrb	r3, [r4, #19]
 80a0874:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a0876:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80a0878:	bf0c      	ite	eq
 80a087a:	2200      	moveq	r2, #0
 80a087c:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80a087e:	b113      	cbz	r3, 80a0886 <_ZN7LSM9DS18initGyroEv+0x76>
 80a0880:	f042 0210 	orr.w	r2, r2, #16
 80a0884:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80a0886:	7c63      	ldrb	r3, [r4, #17]
 80a0888:	b10b      	cbz	r3, 80a088e <_ZN7LSM9DS18initGyroEv+0x7e>
 80a088a:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80a088e:	7d23      	ldrb	r3, [r4, #20]
 80a0890:	b10b      	cbz	r3, 80a0896 <_ZN7LSM9DS18initGyroEv+0x86>
 80a0892:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80a0896:	211e      	movs	r1, #30
 80a0898:	4620      	mov	r0, r4
 80a089a:	f7ff ffa5 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a089e:	7b63      	ldrb	r3, [r4, #13]
 80a08a0:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a08a2:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 80a08a4:	bf0c      	ite	eq
 80a08a6:	2200      	moveq	r2, #0
 80a08a8:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 80a08aa:	b113      	cbz	r3, 80a08b2 <_ZN7LSM9DS18initGyroEv+0xa2>
 80a08ac:	f042 0210 	orr.w	r2, r2, #16
 80a08b0:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 80a08b2:	7be3      	ldrb	r3, [r4, #15]
 80a08b4:	b10b      	cbz	r3, 80a08ba <_ZN7LSM9DS18initGyroEv+0xaa>
 80a08b6:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a08ba:	4620      	mov	r0, r4
}
 80a08bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 80a08c0:	2113      	movs	r1, #19
 80a08c2:	f7ff bf91 	b.w	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>

080a08c6 <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 80a08c6:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a08c8:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 80a08ca:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a08cc:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a08ce:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 80a08d0:	bf0c      	ite	eq
 80a08d2:	2200      	moveq	r2, #0
 80a08d4:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 80a08d6:	b113      	cbz	r3, 80a08de <_ZN7LSM9DS19initAccelEv+0x18>
 80a08d8:	f042 0210 	orr.w	r2, r2, #16
 80a08dc:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 80a08de:	7e63      	ldrb	r3, [r4, #25]
 80a08e0:	b10b      	cbz	r3, 80a08e6 <_ZN7LSM9DS19initAccelEv+0x20>
 80a08e2:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 80a08e6:	211f      	movs	r1, #31
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	f7ff ff7d 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 80a08ee:	7da2      	ldrb	r2, [r4, #22]
 80a08f0:	b112      	cbz	r2, 80a08f8 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 80a08f2:	7e22      	ldrb	r2, [r4, #24]
 80a08f4:	0152      	lsls	r2, r2, #5
 80a08f6:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 80a08f8:	7de3      	ldrb	r3, [r4, #23]
 80a08fa:	2b08      	cmp	r3, #8
 80a08fc:	d006      	beq.n	80a090c <_ZN7LSM9DS19initAccelEv+0x46>
 80a08fe:	2b10      	cmp	r3, #16
 80a0900:	d007      	beq.n	80a0912 <_ZN7LSM9DS19initAccelEv+0x4c>
 80a0902:	2b04      	cmp	r3, #4
 80a0904:	d107      	bne.n	80a0916 <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 80a0906:	f042 0210 	orr.w	r2, r2, #16
			break;
 80a090a:	e004      	b.n	80a0916 <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 80a090c:	f042 0218 	orr.w	r2, r2, #24
			break;
 80a0910:	e001      	b.n	80a0916 <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 80a0912:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a0916:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a091a:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 80a091c:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 80a091e:	bfa2      	ittt	ge
 80a0920:	f003 0303 	andge.w	r3, r3, #3
 80a0924:	431a      	orrge	r2, r3
 80a0926:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 80a092a:	4620      	mov	r0, r4
 80a092c:	f7ff ff5c 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 80a0930:	7f62      	ldrb	r2, [r4, #29]
 80a0932:	b12a      	cbz	r2, 80a0940 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 80a0934:	7fa2      	ldrb	r2, [r4, #30]
 80a0936:	0152      	lsls	r2, r2, #5
 80a0938:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a093c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0940:	4620      	mov	r0, r4
}
 80a0942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80a0946:	2121      	movs	r1, #33	; 0x21
 80a0948:	f7ff bf4e 	b.w	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>

080a094c <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a094c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a094e:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80a0950:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0952:	2a01      	cmp	r2, #1
 80a0954:	d105      	bne.n	80a0962 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 80a0956:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 80a0958:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 80a095a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a095e:	f7ff bf28 	b.w	80a07b2 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0962:	b92a      	cbnz	r2, 80a0970 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0964:	460a      	mov	r2, r1
}
 80a0966:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 80a0968:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a096c:	f7ff bec8 	b.w	80a0700 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 80a0970:	bc10      	pop	{r4}
 80a0972:	4770      	bx	lr

080a0974 <_ZN7LSM9DS19magOffsetEhs>:
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
	if (axis > 2)
 80a0974:	2902      	cmp	r1, #2
			magOffset(j, mBiasRaw[j]);
	}
	
}
void LSM9DS1::magOffset(uint8_t axis, int16_t offset)
{
 80a0976:	b570      	push	{r4, r5, r6, lr}
 80a0978:	4606      	mov	r6, r0
 80a097a:	460c      	mov	r4, r1
 80a097c:	4615      	mov	r5, r2
	if (axis > 2)
 80a097e:	d810      	bhi.n	80a09a2 <_ZN7LSM9DS19magOffsetEhs+0x2e>
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 80a0980:	0049      	lsls	r1, r1, #1
 80a0982:	3105      	adds	r1, #5
 80a0984:	b2d2      	uxtb	r2, r2
 80a0986:	b2c9      	uxtb	r1, r1
 80a0988:	f7ff ffe0 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a098c:	1ce1      	adds	r1, r4, #3
 80a098e:	0049      	lsls	r1, r1, #1
 80a0990:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0994:	4630      	mov	r0, r6
}
 80a0996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	uint8_t msb, lsb;
	msb = (offset & 0xFF00) >> 8;
	lsb = offset & 0x00FF;
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 80a099a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a099e:	f7ff bfd5 	b.w	80a094c <_ZN7LSM9DS110mWriteByteEhh>
 80a09a2:	bd70      	pop	{r4, r5, r6, pc}

080a09a4 <_ZN7LSM9DS17initMagEv>:
}

void LSM9DS1::initMag()
{
 80a09a4:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a09a6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80a09aa:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a09ac:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a09ae:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a09b2:	bf08      	it	eq
 80a09b4:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a09b6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80a09ba:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80a09be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80a09c2:	bf18      	it	ne
 80a09c4:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80a09c6:	009b      	lsls	r3, r3, #2
 80a09c8:	f003 031c 	and.w	r3, r3, #28
 80a09cc:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 80a09ce:	431a      	orrs	r2, r3
 80a09d0:	2120      	movs	r1, #32
 80a09d2:	f7ff ffbb 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
 80a09d6:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a09da:	4620      	mov	r0, r4
 80a09dc:	3b08      	subs	r3, #8
 80a09de:	b2db      	uxtb	r3, r3
 80a09e0:	2b08      	cmp	r3, #8
 80a09e2:	bf96      	itet	ls
 80a09e4:	4a12      	ldrls	r2, [pc, #72]	; (80a0a30 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 80a09e6:	2200      	movhi	r2, #0
 80a09e8:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 80a09ea:	2121      	movs	r1, #33	; 0x21
 80a09ec:	f7ff ffae 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a09f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a09f4:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a09f6:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a09f8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 80a09fc:	bf0c      	ite	eq
 80a09fe:	2200      	moveq	r2, #0
 80a0a00:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 80a0a02:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 80a0a06:	431a      	orrs	r2, r3
 80a0a08:	2122      	movs	r1, #34	; 0x22
 80a0a0a:	f7ff ff9f 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 80a0a0e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80a0a12:	4620      	mov	r0, r4
 80a0a14:	0092      	lsls	r2, r2, #2
 80a0a16:	f002 020c 	and.w	r2, r2, #12
 80a0a1a:	2123      	movs	r1, #35	; 0x23
 80a0a1c:	f7ff ff96 	bl	80a094c <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0a20:	4620      	mov	r0, r4
}
 80a0a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 80a0a26:	2200      	movs	r2, #0
 80a0a28:	2124      	movs	r1, #36	; 0x24
 80a0a2a:	f7ff bf8f 	b.w	80a094c <_ZN7LSM9DS110mWriteByteEhh>
 80a0a2e:	bf00      	nop
 80a0a30:	080a381d 	.word	0x080a381d

080a0a34 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 80a0a34:	b538      	push	{r3, r4, r5, lr}
 80a0a36:	460c      	mov	r4, r1
 80a0a38:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 80a0a3a:	f001 fd13 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0a3e:	4621      	mov	r1, r4
 80a0a40:	f000 fd14 	bl	80a146c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 80a0a44:	f001 fd0e 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0a48:	6803      	ldr	r3, [r0, #0]
 80a0a4a:	4629      	mov	r1, r5
 80a0a4c:	689b      	ldr	r3, [r3, #8]
 80a0a4e:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 80a0a50:	f001 fd08 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0a54:	2100      	movs	r1, #0
 80a0a56:	f000 fd0d 	bl	80a1474 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 80a0a5a:	f001 fd03 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0a5e:	2201      	movs	r2, #1
 80a0a60:	4621      	mov	r1, r4
 80a0a62:	f000 fd00 	bl	80a1466 <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 80a0a66:	f001 fcfd 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0a6a:	6803      	ldr	r3, [r0, #0]
 80a0a6c:	695b      	ldr	r3, [r3, #20]
 80a0a6e:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80a0a70:	b2c0      	uxtb	r0, r0
 80a0a72:	bd38      	pop	{r3, r4, r5, pc}

080a0a74 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80a0a74:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0a76:	7801      	ldrb	r1, [r0, #0]
 80a0a78:	2901      	cmp	r1, #1
 80a0a7a:	d103      	bne.n	80a0a84 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80a0a7c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0a80:	f7ff bfd8 	b.w	80a0a34 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0a84:	b919      	cbnz	r1, 80a0a8e <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80a0a86:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0a8a:	f7ff be7f 	b.w	80a078c <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80a0a8e:	2000      	movs	r0, #0
 80a0a90:	4770      	bx	lr

080a0a92 <_ZN7LSM9DS114accelAvailableEv>:
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
}

uint8_t LSM9DS1::accelAvailable()
{
 80a0a92:	b508      	push	{r3, lr}
	uint8_t status = xgReadByte(STATUS_REG_1);
 80a0a94:	2127      	movs	r1, #39	; 0x27
 80a0a96:	f7ff ffed 	bl	80a0a74 <_ZN7LSM9DS110xgReadByteEh>
	
	return (status & (1<<0));
}
 80a0a9a:	f000 0001 	and.w	r0, r0, #1
 80a0a9e:	bd08      	pop	{r3, pc}

080a0aa0 <_ZN7LSM9DS110enableFIFOEb>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0aa0:	b538      	push	{r3, r4, r5, lr}
 80a0aa2:	460d      	mov	r5, r1
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0aa4:	2123      	movs	r1, #35	; 0x23
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void LSM9DS1::enableFIFO(bool enable)
{
 80a0aa6:	4604      	mov	r4, r0
	uint8_t temp = xgReadByte(CTRL_REG9);
 80a0aa8:	f7ff ffe4 	bl	80a0a74 <_ZN7LSM9DS110xgReadByteEh>
	if (enable) temp |= (1<<1);
 80a0aac:	b11d      	cbz	r5, 80a0ab6 <_ZN7LSM9DS110enableFIFOEb+0x16>
 80a0aae:	f040 0202 	orr.w	r2, r0, #2
 80a0ab2:	b2d2      	uxtb	r2, r2
 80a0ab4:	e001      	b.n	80a0aba <_ZN7LSM9DS110enableFIFOEb+0x1a>
	else temp &= ~(1<<1);
 80a0ab6:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
	xgWriteByte(CTRL_REG9, temp);
 80a0aba:	4620      	mov	r0, r4
}
 80a0abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LSM9DS1::enableFIFO(bool enable)
{
	uint8_t temp = xgReadByte(CTRL_REG9);
	if (enable) temp |= (1<<1);
	else temp &= ~(1<<1);
	xgWriteByte(CTRL_REG9, temp);
 80a0ac0:	2123      	movs	r1, #35	; 0x23
 80a0ac2:	f7ff be91 	b.w	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>

080a0ac6 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80a0ac6:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0ac8:	7801      	ldrb	r1, [r0, #0]
 80a0aca:	2901      	cmp	r1, #1
 80a0acc:	d103      	bne.n	80a0ad6 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80a0ace:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0ad2:	f7ff bfaf 	b.w	80a0a34 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0ad6:	b919      	cbnz	r1, 80a0ae0 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80a0ad8:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0adc:	f7ff be56 	b.w	80a078c <_ZN7LSM9DS111SPIreadByteEhh>
}
 80a0ae0:	4770      	bx	lr

080a0ae2 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80a0ae2:	b538      	push	{r3, r4, r5, lr}
 80a0ae4:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80a0ae6:	7843      	ldrb	r3, [r0, #1]
 80a0ae8:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80a0aec:	7883      	ldrb	r3, [r0, #2]
 80a0aee:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80a0af2:	f7ff fdb7 	bl	80a0664 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80a0af6:	f7ff fd81 	bl	80a05fc <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80a0afa:	4620      	mov	r0, r4
 80a0afc:	f7ff fd94 	bl	80a0628 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 80a0b00:	4620      	mov	r0, r4
 80a0b02:	f7ff fd86 	bl	80a0612 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 80a0b06:	7823      	ldrb	r3, [r4, #0]
 80a0b08:	2b01      	cmp	r3, #1
 80a0b0a:	d103      	bne.n	80a0b14 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	f7ff fe49 	bl	80a07a4 <_ZN7LSM9DS17initI2CEv>
 80a0b12:	e003      	b.n	80a0b1c <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 80a0b14:	b913      	cbnz	r3, 80a0b1c <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	f7ff fdc8 	bl	80a06ac <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0b1c:	210f      	movs	r1, #15
 80a0b1e:	4620      	mov	r0, r4
 80a0b20:	f7ff ffd1 	bl	80a0ac6 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0b24:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 80a0b26:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 80a0b28:	4620      	mov	r0, r4
 80a0b2a:	f7ff ffa3 	bl	80a0a74 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 80a0b2e:	f646 033d 	movw	r3, #26685	; 0x683d
 80a0b32:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80a0b36:	b205      	sxth	r5, r0
 80a0b38:	429d      	cmp	r5, r3
 80a0b3a:	d10a      	bne.n	80a0b52 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 80a0b3c:	4620      	mov	r0, r4
 80a0b3e:	f7ff fe67 	bl	80a0810 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 80a0b42:	4620      	mov	r0, r4
 80a0b44:	f7ff febf 	bl	80a08c6 <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 80a0b48:	4620      	mov	r0, r4
 80a0b4a:	f7ff ff2b 	bl	80a09a4 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 80a0b4e:	4628      	mov	r0, r5
 80a0b50:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 80a0b52:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 80a0b54:	bd38      	pop	{r3, r4, r5, pc}

080a0b56 <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>:
	
	return ((status & (1<<2)) >> 2);
}

uint8_t LSM9DS1::magAvailable(lsm9ds1_axis axis)
{
 80a0b56:	b510      	push	{r4, lr}
 80a0b58:	460c      	mov	r4, r1
	uint8_t status;
	status = mReadByte(STATUS_REG_M);
 80a0b5a:	2127      	movs	r1, #39	; 0x27
 80a0b5c:	f7ff ffb3 	bl	80a0ac6 <_ZN7LSM9DS19mReadByteEh>
	
	return ((status & (1<<axis)) >> axis);
 80a0b60:	2101      	movs	r1, #1
 80a0b62:	40a1      	lsls	r1, r4
 80a0b64:	4008      	ands	r0, r1
 80a0b66:	4120      	asrs	r0, r4
}
 80a0b68:	b2c0      	uxtb	r0, r0
 80a0b6a:	bd10      	pop	{r4, pc}

080a0b6c <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 80a0b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b70:	4690      	mov	r8, r2
 80a0b72:	460c      	mov	r4, r1
 80a0b74:	461d      	mov	r5, r3
 80a0b76:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a0b7a:	f000 f9f7 	bl	80a0f6c <HAL_Timer_Get_Milli_Seconds>
 80a0b7e:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 80a0b80:	f001 fc70 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0b84:	4621      	mov	r1, r4
 80a0b86:	f000 fc71 	bl	80a146c <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 80a0b8a:	f001 fc6b 	bl	80a2464 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0b8e:	6803      	ldr	r3, [r0, #0]
 80a0b90:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 80a0b94:	689b      	ldr	r3, [r3, #8]
 80a0b96:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 80a0b98:	f001 fc64 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0b9c:	2100      	movs	r1, #0
 80a0b9e:	f000 fc69 	bl	80a1474 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 80a0ba2:	f001 fc5f 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0ba6:	4621      	mov	r1, r4
 80a0ba8:	4632      	mov	r2, r6
 80a0baa:	f000 fc5c 	bl	80a1466 <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 80a0bae:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0bb0:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 80a0bb4:	42b4      	cmp	r4, r6
 80a0bb6:	da1a      	bge.n	80a0bee <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 80a0bb8:	f001 fc54 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0bbc:	6803      	ldr	r3, [r0, #0]
 80a0bbe:	691b      	ldr	r3, [r3, #16]
 80a0bc0:	4798      	blx	r3
 80a0bc2:	b140      	cbz	r0, 80a0bd6 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 80a0bc4:	f001 fc4e 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a0bc8:	6803      	ldr	r3, [r0, #0]
 80a0bca:	f104 0801 	add.w	r8, r4, #1
 80a0bce:	695b      	ldr	r3, [r3, #20]
 80a0bd0:	4798      	blx	r3
 80a0bd2:	5528      	strb	r0, [r5, r4]
 80a0bd4:	4644      	mov	r4, r8
 80a0bd6:	f000 f9c9 	bl	80a0f6c <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 80a0bda:	42b8      	cmp	r0, r7
 80a0bdc:	d9ea      	bls.n	80a0bb4 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 80a0bde:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 80a0be0:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0be2:	1b62      	subs	r2, r4, r5
 80a0be4:	4296      	cmp	r6, r2
 80a0be6:	dd05      	ble.n	80a0bf4 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 80a0be8:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 80a0bec:	e7f9      	b.n	80a0be2 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 80a0bee:	2001      	movs	r0, #1
 80a0bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 80a0bf4:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 80a0bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0bfa <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0bfc:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0bfe:	7801      	ldrb	r1, [r0, #0]
 80a0c00:	2901      	cmp	r1, #1
 80a0c02:	d107      	bne.n	80a0c14 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 80a0c04:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0c08:	9300      	str	r3, [sp, #0]
 80a0c0a:	4613      	mov	r3, r2
 80a0c0c:	462a      	mov	r2, r5
 80a0c0e:	f7ff ffad 	bl	80a0b6c <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0c12:	e007      	b.n	80a0c24 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0c14:	b931      	cbnz	r1, 80a0c24 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 80a0c16:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80a0c1a:	9300      	str	r3, [sp, #0]
 80a0c1c:	4613      	mov	r3, r2
 80a0c1e:	462a      	mov	r2, r5
 80a0c20:	f7ff fd88 	bl	80a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0c24:	b003      	add	sp, #12
 80a0c26:	bd30      	pop	{r4, r5, pc}

080a0c28 <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0c2a:	2306      	movs	r3, #6
 80a0c2c:	466a      	mov	r2, sp
 80a0c2e:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 80a0c30:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 80a0c32:	f7ff ffe2 	bl	80a0bfa <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0c36:	b330      	cbz	r0, 80a0c86 <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0c38:	f89d 3000 	ldrb.w	r3, [sp]
 80a0c3c:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0c40:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0c44:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0c48:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0c4c:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0c50:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0c54:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0c58:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0c5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0c5e:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0c62:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0c64:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 80a0c66:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 80a0c68:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 80a0c6a:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 80a0c6c:	b15d      	cbz	r5, 80a0c86 <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 80a0c6e:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 80a0c72:	1b49      	subs	r1, r1, r5
 80a0c74:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 80a0c76:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 80a0c7a:	1a52      	subs	r2, r2, r1
 80a0c7c:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 80a0c7e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80a0c82:	1a9b      	subs	r3, r3, r2
 80a0c84:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 80a0c86:	b003      	add	sp, #12
 80a0c88:	bd30      	pop	{r4, r5, pc}

080a0c8a <_ZN7LSM9DS18readGyroEv>:
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0c8c:	2306      	movs	r3, #6
 80a0c8e:	466a      	mov	r2, sp
 80a0c90:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 80a0c92:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 80a0c94:	f7ff ffb1 	bl	80a0bfa <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 80a0c98:	b330      	cbz	r0, 80a0ce8 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0c9a:	f89d 3000 	ldrb.w	r3, [sp]
 80a0c9e:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0ca2:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0ca6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0caa:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0cae:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0cb2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0cb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0cba:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0cbc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 80a0cc0:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0cc4:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0cc6:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 80a0cc8:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 80a0cca:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 80a0ccc:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 80a0cce:	b15d      	cbz	r5, 80a0ce8 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 80a0cd0:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80a0cd4:	1b49      	subs	r1, r1, r5
 80a0cd6:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 80a0cd8:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80a0cdc:	1a52      	subs	r2, r2, r1
 80a0cde:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 80a0ce0:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80a0ce4:	1a9b      	subs	r3, r3, r2
 80a0ce6:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 80a0ce8:	b003      	add	sp, #12
 80a0cea:	bd30      	pop	{r4, r5, pc}

080a0cec <_ZN7LSM9DS19calibrateEb>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0cf0:	4604      	mov	r4, r0
 80a0cf2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0cf4:	2300      	movs	r3, #0
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
 80a0cf6:	9101      	str	r1, [sp, #4]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0cf8:	2101      	movs	r1, #1
// is good practice.
void LSM9DS1::calibrate(bool autoCalc)
{  
	uint8_t samples = 0;
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
 80a0cfa:	9304      	str	r3, [sp, #16]
 80a0cfc:	9305      	str	r3, [sp, #20]
 80a0cfe:	9306      	str	r3, [sp, #24]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
 80a0d00:	9307      	str	r3, [sp, #28]
 80a0d02:	9308      	str	r3, [sp, #32]
 80a0d04:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
 80a0d06:	f7ff fecb 	bl	80a0aa0 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0d0a:	223f      	movs	r2, #63	; 0x3f
 80a0d0c:	212e      	movs	r1, #46	; 0x2e
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	f7ff fd6a 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 80a0d14:	212f      	movs	r1, #47	; 0x2f
 80a0d16:	4620      	mov	r0, r4
 80a0d18:	f7ff feac 	bl	80a0a74 <_ZN7LSM9DS110xgReadByteEh>
 80a0d1c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	int32_t gBiasRawTemp[3] = {0, 0, 0};
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
 80a0d20:	2e1e      	cmp	r6, #30
 80a0d22:	d9f7      	bls.n	80a0d14 <_ZN7LSM9DS19calibrateEb+0x28>
 80a0d24:	2700      	movs	r7, #0
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0d26:	42b7      	cmp	r7, r6
 80a0d28:	da32      	bge.n	80a0d90 <_ZN7LSM9DS19calibrateEb+0xa4>
	{	// Read the gyro data stored in the FIFO
		readGyro();
 80a0d2a:	4620      	mov	r0, r4
 80a0d2c:	f7ff ffad 	bl	80a0c8a <_ZN7LSM9DS18readGyroEv>
		gBiasRawTemp[0] += gx;
 80a0d30:	9a07      	ldr	r2, [sp, #28]
 80a0d32:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
 80a0d36:	4620      	mov	r0, r4
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
 80a0d38:	4413      	add	r3, r2
 80a0d3a:	9307      	str	r3, [sp, #28]
		gBiasRawTemp[1] += gy;
 80a0d3c:	9a08      	ldr	r2, [sp, #32]
 80a0d3e:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0d42:	3701      	adds	r7, #1
	{	// Read the gyro data stored in the FIFO
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
 80a0d44:	4413      	add	r3, r2
 80a0d46:	9308      	str	r3, [sp, #32]
		gBiasRawTemp[2] += gz;
 80a0d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0d4a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80a0d4e:	4413      	add	r3, r2
 80a0d50:	9309      	str	r3, [sp, #36]	; 0x24
		readAccel();
 80a0d52:	f7ff ff69 	bl	80a0c28 <_ZN7LSM9DS19readAccelEv>
		aBiasRawTemp[0] += ax;
 80a0d56:	9a04      	ldr	r2, [sp, #16]
 80a0d58:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0d5c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
		readGyro();
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
 80a0d5e:	4413      	add	r3, r2
 80a0d60:	9304      	str	r3, [sp, #16]
		aBiasRawTemp[1] += ay;
 80a0d62:	9a05      	ldr	r2, [sp, #20]
 80a0d64:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0d68:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
		gBiasRawTemp[0] += gx;
		gBiasRawTemp[1] += gy;
		gBiasRawTemp[2] += gz;
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
 80a0d6c:	4413      	add	r3, r2
 80a0d6e:	9305      	str	r3, [sp, #20]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 80a0d70:	f001 fe86 	bl	80a2a80 <__aeabi_f2d>
 80a0d74:	4602      	mov	r2, r0
 80a0d76:	460b      	mov	r3, r1
 80a0d78:	2000      	movs	r0, #0
 80a0d7a:	4926      	ldr	r1, [pc, #152]	; (80a0e14 <_ZN7LSM9DS19calibrateEb+0x128>)
 80a0d7c:	f001 fffe 	bl	80a2d7c <__aeabi_ddiv>
 80a0d80:	f002 f982 	bl	80a3088 <__aeabi_d2iz>
 80a0d84:	b200      	sxth	r0, r0
 80a0d86:	1a2d      	subs	r5, r5, r0
 80a0d88:	9806      	ldr	r0, [sp, #24]
 80a0d8a:	4405      	add	r5, r0
 80a0d8c:	9506      	str	r5, [sp, #24]
	setFIFO(FIFO_THS, 0x1F);
	while (samples < 0x1F)
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
	}
	for(ii = 0; ii < samples ; ii++) 
 80a0d8e:	e7ca      	b.n	80a0d26 <_ZN7LSM9DS19calibrateEb+0x3a>
}

float LSM9DS1::calcGyro(int16_t gyro)
{
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
 80a0d90:	f8d4 b074 	ldr.w	fp, [r4, #116]	; 0x74
}

float LSM9DS1::calcAccel(int16_t accel)
{
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
 80a0d94:	f8d4 a078 	ldr.w	sl, [r4, #120]	; 0x78
 80a0d98:	f104 025e 	add.w	r2, r4, #94	; 0x5e
 80a0d9c:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a0da0:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80a0da4:	f104 0944 	add.w	r9, r4, #68	; 0x44
 80a0da8:	2500      	movs	r5, #0
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 80a0daa:	a907      	add	r1, sp, #28
 80a0dac:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80a0db0:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0db4:	b200      	sxth	r0, r0
 80a0db6:	f822 0f02 	strh.w	r0, [r2, #2]!
 80a0dba:	9202      	str	r2, [sp, #8]
 80a0dbc:	9203      	str	r2, [sp, #12]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0dbe:	f002 fa65 	bl	80a328c <__aeabi_i2f>
 80a0dc2:	4659      	mov	r1, fp
 80a0dc4:	f002 fab6 	bl	80a3334 <__aeabi_fmul>
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0dc8:	ab04      	add	r3, sp, #16
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
 80a0dca:	f848 0f04 	str.w	r0, [r8, #4]!
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0dd2:	3501      	adds	r5, #1
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 80a0dd4:	fb90 f0f6 	sdiv	r0, r0, r6
 80a0dd8:	b200      	sxth	r0, r0
 80a0dda:	f827 0f02 	strh.w	r0, [r7, #2]!
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0dde:	f002 fa55 	bl	80a328c <__aeabi_i2f>
 80a0de2:	4651      	mov	r1, sl
 80a0de4:	f002 faa6 	bl	80a3334 <__aeabi_fmul>
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0de8:	2d03      	cmp	r5, #3
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
 80a0dea:	f849 0f04 	str.w	r0, [r9, #4]!
		readAccel();
		aBiasRawTemp[0] += ax;
		aBiasRawTemp[1] += ay;
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
	}  
	for (ii = 0; ii < 3; ii++)
 80a0dee:	9a02      	ldr	r2, [sp, #8]
 80a0df0:	d1db      	bne.n	80a0daa <_ZN7LSM9DS19calibrateEb+0xbe>
		gBias[ii] = calcGyro(gBiasRaw[ii]);
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
		aBias[ii] = calcAccel(aBiasRaw[ii]);
	}
	
	enableFIFO(false);
 80a0df2:	2100      	movs	r1, #0
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	f7ff fe53 	bl	80a0aa0 <_ZN7LSM9DS110enableFIFOEb>
void LSM9DS1::setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
{
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 80a0dfa:	2200      	movs	r2, #0
 80a0dfc:	212e      	movs	r1, #46	; 0x2e
 80a0dfe:	4620      	mov	r0, r4
 80a0e00:	f7ff fcf2 	bl	80a07e8 <_ZN7LSM9DS111xgWriteByteEhh>
	}
	
	enableFIFO(false);
	setFIFO(FIFO_OFF, 0x00);
	
	if (autoCalc) _autoCalc = true;
 80a0e04:	9b01      	ldr	r3, [sp, #4]
 80a0e06:	b113      	cbz	r3, 80a0e0e <_ZN7LSM9DS19calibrateEb+0x122>
 80a0e08:	2301      	movs	r3, #1
 80a0e0a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80a0e0e:	b00b      	add	sp, #44	; 0x2c
 80a0e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e14:	3ff00000 	.word	0x3ff00000

080a0e18 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 80a0e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e1a:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80a0e1c:	7801      	ldrb	r1, [r0, #0]
 80a0e1e:	2901      	cmp	r1, #1
 80a0e20:	d107      	bne.n	80a0e32 <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 80a0e22:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0e26:	9300      	str	r3, [sp, #0]
 80a0e28:	4613      	mov	r3, r2
 80a0e2a:	462a      	mov	r2, r5
 80a0e2c:	f7ff fe9e 	bl	80a0b6c <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 80a0e30:	e007      	b.n	80a0e42 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80a0e32:	b931      	cbnz	r1, 80a0e42 <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 80a0e34:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80a0e38:	9300      	str	r3, [sp, #0]
 80a0e3a:	4613      	mov	r3, r2
 80a0e3c:	462a      	mov	r2, r5
 80a0e3e:	f7ff fc79 	bl	80a0734 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 80a0e42:	b003      	add	sp, #12
 80a0e44:	bd30      	pop	{r4, r5, pc}

080a0e46 <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0e46:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0e48:	2306      	movs	r3, #6
 80a0e4a:	466a      	mov	r2, sp
 80a0e4c:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 80a0e4e:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 80a0e50:	f7ff ffe2 	bl	80a0e18 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 80a0e54:	b1a0      	cbz	r0, 80a0e80 <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 80a0e56:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a0e5a:	f89d 3000 	ldrb.w	r3, [sp]
 80a0e5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0e62:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 80a0e64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a0e68:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0e70:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 80a0e72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0e76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0e7e:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 80a0e80:	b002      	add	sp, #8
 80a0e82:	bd10      	pop	{r4, pc}

080a0e84 <_ZN7LSM9DS112calibrateMagEb>:
	
	if (autoCalc) _autoCalc = true;
}

void LSM9DS1::calibrateMag(bool loadIn)
{
 80a0e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e88:	4605      	mov	r5, r0
 80a0e8a:	468a      	mov	sl, r1
 80a0e8c:	b087      	sub	sp, #28
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
 80a0e8e:	2300      	movs	r3, #0
 80a0e90:	f8ad 3000 	strh.w	r3, [sp]
 80a0e94:	f8ad 3002 	strh.w	r3, [sp, #2]
 80a0e98:	f8ad 3004 	strh.w	r3, [sp, #4]
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 80a0e9c:	f8ad 3008 	strh.w	r3, [sp, #8]
 80a0ea0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80a0ea4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0ea8:	2480      	movs	r4, #128	; 0x80
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0eaa:	af02      	add	r7, sp, #8
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
	{
		while (!magAvailable())
 80a0eac:	2103      	movs	r1, #3
 80a0eae:	4628      	mov	r0, r5
 80a0eb0:	f7ff fe51 	bl	80a0b56 <_ZN7LSM9DS112magAvailableE12lsm9ds1_axis>
 80a0eb4:	2800      	cmp	r0, #0
 80a0eb6:	d0f9      	beq.n	80a0eac <_ZN7LSM9DS112calibrateMagEb+0x28>
			;
		readMag();
 80a0eb8:	4628      	mov	r0, r5
 80a0eba:	f7ff ffc4 	bl	80a0e46 <_ZN7LSM9DS17readMagEv>
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
 80a0ebe:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80a0ec0:	f8ad 3010 	strh.w	r3, [sp, #16]
		magTemp[1] = my;
 80a0ec4:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80a0ec6:	f8ad 3012 	strh.w	r3, [sp, #18]
		magTemp[2] = mz;
 80a0eca:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80a0ecc:	f8ad 3014 	strh.w	r3, [sp, #20]
		for (j = 0; j < 3; j++)
 80a0ed0:	2300      	movs	r3, #0
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0ed2:	aa04      	add	r2, sp, #16
 80a0ed4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80a0ed8:	f937 1013 	ldrsh.w	r1, [r7, r3, lsl #1]
 80a0edc:	4291      	cmp	r1, r2
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a0ede:	f93d 1013 	ldrsh.w	r1, [sp, r3, lsl #1]
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 80a0ee2:	bfb8      	it	lt
 80a0ee4:	f827 2013 	strhlt.w	r2, [r7, r3, lsl #1]
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 80a0ee8:	4291      	cmp	r1, r2
 80a0eea:	bfc8      	it	gt
 80a0eec:	f82d 2013 	strhgt.w	r2, [sp, r3, lsl #1]
		readMag();
		int16_t magTemp[3] = {0, 0, 0};
		magTemp[0] = mx;		
		magTemp[1] = my;
		magTemp[2] = mz;
		for (j = 0; j < 3; j++)
 80a0ef0:	3301      	adds	r3, #1
 80a0ef2:	2b03      	cmp	r3, #3
 80a0ef4:	d1ed      	bne.n	80a0ed2 <_ZN7LSM9DS112calibrateMagEb+0x4e>
{
	int i, j;
	int16_t magMin[3] = {0, 0, 0};
	int16_t magMax[3] = {0, 0, 0}; // The road warrior
	
	for (i=0; i<128; i++)
 80a0ef6:	3c01      	subs	r4, #1
 80a0ef8:	d1d8      	bne.n	80a0eac <_ZN7LSM9DS112calibrateMagEb+0x28>
 80a0efa:	f105 096a 	add.w	r9, r5, #106	; 0x6a
 80a0efe:	f105 0850 	add.w	r8, r5, #80	; 0x50
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
	{
		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 80a0f02:	f04f 0b02 	mov.w	fp, #2
 80a0f06:	f93d 3014 	ldrsh.w	r3, [sp, r4, lsl #1]
 80a0f0a:	f937 6014 	ldrsh.w	r6, [r7, r4, lsl #1]
 80a0f0e:	441e      	add	r6, r3
 80a0f10:	fb96 f6fb 	sdiv	r6, r6, fp
 80a0f14:	b236      	sxth	r6, r6
 80a0f16:	f829 6f02 	strh.w	r6, [r9, #2]!
		mBias[j] = calcMag(mBiasRaw[j]);
 80a0f1a:	4630      	mov	r0, r6
 80a0f1c:	f002 f9b6 	bl	80a328c <__aeabi_i2f>
 80a0f20:	4601      	mov	r1, r0
 80a0f22:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80a0f24:	f002 fa06 	bl	80a3334 <__aeabi_fmul>
 80a0f28:	f848 0f04 	str.w	r0, [r8, #4]!
		if (loadIn)
 80a0f2c:	f1ba 0f00 	cmp.w	sl, #0
 80a0f30:	d004      	beq.n	80a0f3c <_ZN7LSM9DS112calibrateMagEb+0xb8>
			magOffset(j, mBiasRaw[j]);
 80a0f32:	4632      	mov	r2, r6
 80a0f34:	b2e1      	uxtb	r1, r4
 80a0f36:	4628      	mov	r0, r5
 80a0f38:	f7ff fd1c 	bl	80a0974 <_ZN7LSM9DS19magOffsetEhs>
		{
			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
		}
	}
	for (j = 0; j < 3; j++)
 80a0f3c:	3401      	adds	r4, #1
 80a0f3e:	2c03      	cmp	r4, #3
 80a0f40:	d1e1      	bne.n	80a0f06 <_ZN7LSM9DS112calibrateMagEb+0x82>
		mBias[j] = calcMag(mBiasRaw[j]);
		if (loadIn)
			magOffset(j, mBiasRaw[j]);
	}
	
}
 80a0f42:	b007      	add	sp, #28
 80a0f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0f48 <_GLOBAL__sub_I_magSensitivity>:
 80a0f48:	f000 b818 	b.w	80a0f7c <HAL_Pin_Map>

080a0f4c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0f4c:	b508      	push	{r3, lr}
 80a0f4e:	4b02      	ldr	r3, [pc, #8]	; (80a0f58 <os_mutex_create+0xc>)
 80a0f50:	681b      	ldr	r3, [r3, #0]
 80a0f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f54:	9301      	str	r3, [sp, #4]
 80a0f56:	bd08      	pop	{r3, pc}
 80a0f58:	080601d0 	.word	0x080601d0

080a0f5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0f5c:	b508      	push	{r3, lr}
 80a0f5e:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <HAL_RNG_GetRandomNumber+0xc>)
 80a0f60:	681b      	ldr	r3, [r3, #0]
 80a0f62:	685b      	ldr	r3, [r3, #4]
 80a0f64:	9301      	str	r3, [sp, #4]
 80a0f66:	bd08      	pop	{r3, pc}
 80a0f68:	0806019c 	.word	0x0806019c

080a0f6c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0f6c:	b508      	push	{r3, lr}
 80a0f6e:	4b02      	ldr	r3, [pc, #8]	; (80a0f78 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0f70:	681b      	ldr	r3, [r3, #0]
 80a0f72:	695b      	ldr	r3, [r3, #20]
 80a0f74:	9301      	str	r3, [sp, #4]
 80a0f76:	bd08      	pop	{r3, pc}
 80a0f78:	0806019c 	.word	0x0806019c

080a0f7c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0f7c:	b508      	push	{r3, lr}
 80a0f7e:	4b02      	ldr	r3, [pc, #8]	; (80a0f88 <HAL_Pin_Map+0xc>)
 80a0f80:	681b      	ldr	r3, [r3, #0]
 80a0f82:	681b      	ldr	r3, [r3, #0]
 80a0f84:	9301      	str	r3, [sp, #4]
 80a0f86:	bd08      	pop	{r3, pc}
 80a0f88:	080601b0 	.word	0x080601b0

080a0f8c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0f8c:	b508      	push	{r3, lr}
 80a0f8e:	4b02      	ldr	r3, [pc, #8]	; (80a0f98 <HAL_Pin_Mode+0xc>)
 80a0f90:	681b      	ldr	r3, [r3, #0]
 80a0f92:	689b      	ldr	r3, [r3, #8]
 80a0f94:	9301      	str	r3, [sp, #4]
 80a0f96:	bd08      	pop	{r3, pc}
 80a0f98:	080601b0 	.word	0x080601b0

080a0f9c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0f9c:	b508      	push	{r3, lr}
 80a0f9e:	4b02      	ldr	r3, [pc, #8]	; (80a0fa8 <HAL_Get_Pin_Mode+0xc>)
 80a0fa0:	681b      	ldr	r3, [r3, #0]
 80a0fa2:	68db      	ldr	r3, [r3, #12]
 80a0fa4:	9301      	str	r3, [sp, #4]
 80a0fa6:	bd08      	pop	{r3, pc}
 80a0fa8:	080601b0 	.word	0x080601b0

080a0fac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0fac:	b508      	push	{r3, lr}
 80a0fae:	4b02      	ldr	r3, [pc, #8]	; (80a0fb8 <HAL_GPIO_Write+0xc>)
 80a0fb0:	681b      	ldr	r3, [r3, #0]
 80a0fb2:	691b      	ldr	r3, [r3, #16]
 80a0fb4:	9301      	str	r3, [sp, #4]
 80a0fb6:	bd08      	pop	{r3, pc}
 80a0fb8:	080601b0 	.word	0x080601b0

080a0fbc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0fbc:	b508      	push	{r3, lr}
 80a0fbe:	4b02      	ldr	r3, [pc, #8]	; (80a0fc8 <HAL_I2C_Begin+0xc>)
 80a0fc0:	681b      	ldr	r3, [r3, #0]
 80a0fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0fc4:	9301      	str	r3, [sp, #4]
 80a0fc6:	bd08      	pop	{r3, pc}
 80a0fc8:	080601ac 	.word	0x080601ac

080a0fcc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0fcc:	b508      	push	{r3, lr}
 80a0fce:	4b02      	ldr	r3, [pc, #8]	; (80a0fd8 <HAL_I2C_Request_Data+0xc>)
 80a0fd0:	681b      	ldr	r3, [r3, #0]
 80a0fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0fd4:	9301      	str	r3, [sp, #4]
 80a0fd6:	bd08      	pop	{r3, pc}
 80a0fd8:	080601ac 	.word	0x080601ac

080a0fdc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0fdc:	b508      	push	{r3, lr}
 80a0fde:	4b02      	ldr	r3, [pc, #8]	; (80a0fe8 <HAL_I2C_Begin_Transmission+0xc>)
 80a0fe0:	681b      	ldr	r3, [r3, #0]
 80a0fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0fe4:	9301      	str	r3, [sp, #4]
 80a0fe6:	bd08      	pop	{r3, pc}
 80a0fe8:	080601ac 	.word	0x080601ac

080a0fec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0fec:	b508      	push	{r3, lr}
 80a0fee:	4b02      	ldr	r3, [pc, #8]	; (80a0ff8 <HAL_I2C_End_Transmission+0xc>)
 80a0ff0:	681b      	ldr	r3, [r3, #0]
 80a0ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0ff4:	9301      	str	r3, [sp, #4]
 80a0ff6:	bd08      	pop	{r3, pc}
 80a0ff8:	080601ac 	.word	0x080601ac

080a0ffc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0ffc:	b508      	push	{r3, lr}
 80a0ffe:	4b02      	ldr	r3, [pc, #8]	; (80a1008 <HAL_I2C_Write_Data+0xc>)
 80a1000:	681b      	ldr	r3, [r3, #0]
 80a1002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1004:	9301      	str	r3, [sp, #4]
 80a1006:	bd08      	pop	{r3, pc}
 80a1008:	080601ac 	.word	0x080601ac

080a100c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a100c:	b508      	push	{r3, lr}
 80a100e:	4b02      	ldr	r3, [pc, #8]	; (80a1018 <HAL_I2C_Available_Data+0xc>)
 80a1010:	681b      	ldr	r3, [r3, #0]
 80a1012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1014:	9301      	str	r3, [sp, #4]
 80a1016:	bd08      	pop	{r3, pc}
 80a1018:	080601ac 	.word	0x080601ac

080a101c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a101c:	b508      	push	{r3, lr}
 80a101e:	4b02      	ldr	r3, [pc, #8]	; (80a1028 <HAL_I2C_Read_Data+0xc>)
 80a1020:	681b      	ldr	r3, [r3, #0]
 80a1022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1024:	9301      	str	r3, [sp, #4]
 80a1026:	bd08      	pop	{r3, pc}
 80a1028:	080601ac 	.word	0x080601ac

080a102c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a102c:	b508      	push	{r3, lr}
 80a102e:	4b02      	ldr	r3, [pc, #8]	; (80a1038 <HAL_I2C_Peek_Data+0xc>)
 80a1030:	681b      	ldr	r3, [r3, #0]
 80a1032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1034:	9301      	str	r3, [sp, #4]
 80a1036:	bd08      	pop	{r3, pc}
 80a1038:	080601ac 	.word	0x080601ac

080a103c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a103c:	b508      	push	{r3, lr}
 80a103e:	4b02      	ldr	r3, [pc, #8]	; (80a1048 <HAL_I2C_Flush_Data+0xc>)
 80a1040:	681b      	ldr	r3, [r3, #0]
 80a1042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1044:	9301      	str	r3, [sp, #4]
 80a1046:	bd08      	pop	{r3, pc}
 80a1048:	080601ac 	.word	0x080601ac

080a104c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a104c:	b508      	push	{r3, lr}
 80a104e:	4b02      	ldr	r3, [pc, #8]	; (80a1058 <HAL_I2C_Is_Enabled+0xc>)
 80a1050:	681b      	ldr	r3, [r3, #0]
 80a1052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1054:	9301      	str	r3, [sp, #4]
 80a1056:	bd08      	pop	{r3, pc}
 80a1058:	080601ac 	.word	0x080601ac

080a105c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b03      	ldr	r3, [pc, #12]	; (80a106c <HAL_I2C_Init+0x10>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1066:	9301      	str	r3, [sp, #4]
 80a1068:	bd08      	pop	{r3, pc}
 80a106a:	0000      	.short	0x0000
 80a106c:	080601ac 	.word	0x080601ac

080a1070 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <socket_handle_valid+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	685b      	ldr	r3, [r3, #4]
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	080601bc 	.word	0x080601bc

080a1080 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1080:	b508      	push	{r3, lr}
 80a1082:	4b02      	ldr	r3, [pc, #8]	; (80a108c <socket_create+0xc>)
 80a1084:	681b      	ldr	r3, [r3, #0]
 80a1086:	689b      	ldr	r3, [r3, #8]
 80a1088:	9301      	str	r3, [sp, #4]
 80a108a:	bd08      	pop	{r3, pc}
 80a108c:	080601bc 	.word	0x080601bc

080a1090 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a1090:	b508      	push	{r3, lr}
 80a1092:	4b02      	ldr	r3, [pc, #8]	; (80a109c <socket_receivefrom+0xc>)
 80a1094:	681b      	ldr	r3, [r3, #0]
 80a1096:	695b      	ldr	r3, [r3, #20]
 80a1098:	9301      	str	r3, [sp, #4]
 80a109a:	bd08      	pop	{r3, pc}
 80a109c:	080601bc 	.word	0x080601bc

080a10a0 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a10a0:	b508      	push	{r3, lr}
 80a10a2:	4b02      	ldr	r3, [pc, #8]	; (80a10ac <socket_sendto+0xc>)
 80a10a4:	681b      	ldr	r3, [r3, #0]
 80a10a6:	69db      	ldr	r3, [r3, #28]
 80a10a8:	9301      	str	r3, [sp, #4]
 80a10aa:	bd08      	pop	{r3, pc}
 80a10ac:	080601bc 	.word	0x080601bc

080a10b0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a10b0:	b508      	push	{r3, lr}
 80a10b2:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <socket_close+0xc>)
 80a10b4:	681b      	ldr	r3, [r3, #0]
 80a10b6:	6a1b      	ldr	r3, [r3, #32]
 80a10b8:	9301      	str	r3, [sp, #4]
 80a10ba:	bd08      	pop	{r3, pc}
 80a10bc:	080601bc 	.word	0x080601bc

080a10c0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a10c0:	b508      	push	{r3, lr}
 80a10c2:	4b02      	ldr	r3, [pc, #8]	; (80a10cc <socket_handle_invalid+0xc>)
 80a10c4:	681b      	ldr	r3, [r3, #0]
 80a10c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a10c8:	9301      	str	r3, [sp, #4]
 80a10ca:	bd08      	pop	{r3, pc}
 80a10cc:	080601bc 	.word	0x080601bc

080a10d0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a10d0:	b508      	push	{r3, lr}
 80a10d2:	4b02      	ldr	r3, [pc, #8]	; (80a10dc <HAL_SPI_Begin+0xc>)
 80a10d4:	681b      	ldr	r3, [r3, #0]
 80a10d6:	681b      	ldr	r3, [r3, #0]
 80a10d8:	9301      	str	r3, [sp, #4]
 80a10da:	bd08      	pop	{r3, pc}
 80a10dc:	080601b4 	.word	0x080601b4

080a10e0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a10e0:	b508      	push	{r3, lr}
 80a10e2:	4b02      	ldr	r3, [pc, #8]	; (80a10ec <HAL_SPI_Set_Bit_Order+0xc>)
 80a10e4:	681b      	ldr	r3, [r3, #0]
 80a10e6:	689b      	ldr	r3, [r3, #8]
 80a10e8:	9301      	str	r3, [sp, #4]
 80a10ea:	bd08      	pop	{r3, pc}
 80a10ec:	080601b4 	.word	0x080601b4

080a10f0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a10f0:	b508      	push	{r3, lr}
 80a10f2:	4b02      	ldr	r3, [pc, #8]	; (80a10fc <HAL_SPI_Set_Data_Mode+0xc>)
 80a10f4:	681b      	ldr	r3, [r3, #0]
 80a10f6:	68db      	ldr	r3, [r3, #12]
 80a10f8:	9301      	str	r3, [sp, #4]
 80a10fa:	bd08      	pop	{r3, pc}
 80a10fc:	080601b4 	.word	0x080601b4

080a1100 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a1100:	b508      	push	{r3, lr}
 80a1102:	4b02      	ldr	r3, [pc, #8]	; (80a110c <HAL_SPI_Set_Clock_Divider+0xc>)
 80a1104:	681b      	ldr	r3, [r3, #0]
 80a1106:	691b      	ldr	r3, [r3, #16]
 80a1108:	9301      	str	r3, [sp, #4]
 80a110a:	bd08      	pop	{r3, pc}
 80a110c:	080601b4 	.word	0x080601b4

080a1110 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1110:	b508      	push	{r3, lr}
 80a1112:	4b02      	ldr	r3, [pc, #8]	; (80a111c <HAL_SPI_Send_Receive_Data+0xc>)
 80a1114:	681b      	ldr	r3, [r3, #0]
 80a1116:	695b      	ldr	r3, [r3, #20]
 80a1118:	9301      	str	r3, [sp, #4]
 80a111a:	bd08      	pop	{r3, pc}
 80a111c:	080601b4 	.word	0x080601b4

080a1120 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1120:	b508      	push	{r3, lr}
 80a1122:	4b02      	ldr	r3, [pc, #8]	; (80a112c <HAL_SPI_Init+0xc>)
 80a1124:	681b      	ldr	r3, [r3, #0]
 80a1126:	69db      	ldr	r3, [r3, #28]
 80a1128:	9301      	str	r3, [sp, #4]
 80a112a:	bd08      	pop	{r3, pc}
 80a112c:	080601b4 	.word	0x080601b4

080a1130 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1130:	b508      	push	{r3, lr}
 80a1132:	4b02      	ldr	r3, [pc, #8]	; (80a113c <HAL_SPI_Is_Enabled+0xc>)
 80a1134:	681b      	ldr	r3, [r3, #0]
 80a1136:	6a1b      	ldr	r3, [r3, #32]
 80a1138:	9301      	str	r3, [sp, #4]
 80a113a:	bd08      	pop	{r3, pc}
 80a113c:	080601b4 	.word	0x080601b4

080a1140 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1140:	b508      	push	{r3, lr}
 80a1142:	4b02      	ldr	r3, [pc, #8]	; (80a114c <HAL_SPI_Info+0xc>)
 80a1144:	681b      	ldr	r3, [r3, #0]
 80a1146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1148:	9301      	str	r3, [sp, #4]
 80a114a:	bd08      	pop	{r3, pc}
 80a114c:	080601b4 	.word	0x080601b4

080a1150 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1150:	b508      	push	{r3, lr}
 80a1152:	4b02      	ldr	r3, [pc, #8]	; (80a115c <HAL_USART_Init+0xc>)
 80a1154:	681b      	ldr	r3, [r3, #0]
 80a1156:	699b      	ldr	r3, [r3, #24]
 80a1158:	9301      	str	r3, [sp, #4]
 80a115a:	bd08      	pop	{r3, pc}
 80a115c:	080601c4 	.word	0x080601c4

080a1160 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1160:	b508      	push	{r3, lr}
 80a1162:	4b02      	ldr	r3, [pc, #8]	; (80a116c <HAL_USART_Write_Data+0xc>)
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	080601c4 	.word	0x080601c4

080a1170 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1170:	b508      	push	{r3, lr}
 80a1172:	4b02      	ldr	r3, [pc, #8]	; (80a117c <HAL_USART_Available_Data+0xc>)
 80a1174:	681b      	ldr	r3, [r3, #0]
 80a1176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1178:	9301      	str	r3, [sp, #4]
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	080601c4 	.word	0x080601c4

080a1180 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1180:	b508      	push	{r3, lr}
 80a1182:	4b02      	ldr	r3, [pc, #8]	; (80a118c <HAL_USART_Read_Data+0xc>)
 80a1184:	681b      	ldr	r3, [r3, #0]
 80a1186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1188:	9301      	str	r3, [sp, #4]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	080601c4 	.word	0x080601c4

080a1190 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1190:	b508      	push	{r3, lr}
 80a1192:	4b02      	ldr	r3, [pc, #8]	; (80a119c <HAL_USART_Peek_Data+0xc>)
 80a1194:	681b      	ldr	r3, [r3, #0]
 80a1196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1198:	9301      	str	r3, [sp, #4]
 80a119a:	bd08      	pop	{r3, pc}
 80a119c:	080601c4 	.word	0x080601c4

080a11a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a11a0:	b508      	push	{r3, lr}
 80a11a2:	4b02      	ldr	r3, [pc, #8]	; (80a11ac <HAL_USART_Flush_Data+0xc>)
 80a11a4:	681b      	ldr	r3, [r3, #0]
 80a11a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a11a8:	9301      	str	r3, [sp, #4]
 80a11aa:	bd08      	pop	{r3, pc}
 80a11ac:	080601c4 	.word	0x080601c4

080a11b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a11b0:	b508      	push	{r3, lr}
 80a11b2:	4b02      	ldr	r3, [pc, #8]	; (80a11bc <HAL_USART_Is_Enabled+0xc>)
 80a11b4:	681b      	ldr	r3, [r3, #0]
 80a11b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a11b8:	9301      	str	r3, [sp, #4]
 80a11ba:	bd08      	pop	{r3, pc}
 80a11bc:	080601c4 	.word	0x080601c4

080a11c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a11c0:	b508      	push	{r3, lr}
 80a11c2:	4b02      	ldr	r3, [pc, #8]	; (80a11cc <HAL_USART_Available_Data_For_Write+0xc>)
 80a11c4:	681b      	ldr	r3, [r3, #0]
 80a11c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a11c8:	9301      	str	r3, [sp, #4]
 80a11ca:	bd08      	pop	{r3, pc}
 80a11cc:	080601c4 	.word	0x080601c4

080a11d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a11d0:	b508      	push	{r3, lr}
 80a11d2:	4b02      	ldr	r3, [pc, #8]	; (80a11dc <HAL_USB_USART_Init+0xc>)
 80a11d4:	681b      	ldr	r3, [r3, #0]
 80a11d6:	681b      	ldr	r3, [r3, #0]
 80a11d8:	9301      	str	r3, [sp, #4]
 80a11da:	bd08      	pop	{r3, pc}
 80a11dc:	080601d8 	.word	0x080601d8

080a11e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a11e0:	b508      	push	{r3, lr}
 80a11e2:	4b02      	ldr	r3, [pc, #8]	; (80a11ec <HAL_USB_USART_Begin+0xc>)
 80a11e4:	681b      	ldr	r3, [r3, #0]
 80a11e6:	685b      	ldr	r3, [r3, #4]
 80a11e8:	9301      	str	r3, [sp, #4]
 80a11ea:	bd08      	pop	{r3, pc}
 80a11ec:	080601d8 	.word	0x080601d8

080a11f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a11f0:	b508      	push	{r3, lr}
 80a11f2:	4b02      	ldr	r3, [pc, #8]	; (80a11fc <HAL_USB_USART_Available_Data+0xc>)
 80a11f4:	681b      	ldr	r3, [r3, #0]
 80a11f6:	691b      	ldr	r3, [r3, #16]
 80a11f8:	9301      	str	r3, [sp, #4]
 80a11fa:	bd08      	pop	{r3, pc}
 80a11fc:	080601d8 	.word	0x080601d8

080a1200 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1200:	b508      	push	{r3, lr}
 80a1202:	4b02      	ldr	r3, [pc, #8]	; (80a120c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1204:	681b      	ldr	r3, [r3, #0]
 80a1206:	695b      	ldr	r3, [r3, #20]
 80a1208:	9301      	str	r3, [sp, #4]
 80a120a:	bd08      	pop	{r3, pc}
 80a120c:	080601d8 	.word	0x080601d8

080a1210 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <HAL_USB_USART_Receive_Data+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	699b      	ldr	r3, [r3, #24]
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601d8 	.word	0x080601d8

080a1220 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <HAL_USB_USART_Send_Data+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	69db      	ldr	r3, [r3, #28]
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601d8 	.word	0x080601d8

080a1230 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <HAL_USB_USART_Flush_Data+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	6a1b      	ldr	r3, [r3, #32]
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	080601d8 	.word	0x080601d8

080a1240 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <HAL_USB_USART_Is_Enabled+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	080601d8 	.word	0x080601d8

080a1250 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <inet_gethostbyname+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	080601c0 	.word	0x080601c0

080a1260 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <set_system_mode+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	685b      	ldr	r3, [r3, #4]
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	080601a4 	.word	0x080601a4

080a1270 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <system_thread_set_state+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601a4 	.word	0x080601a4

080a1280 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b03      	ldr	r3, [pc, #12]	; (80a1290 <system_ctrl_set_app_request_handler+0x10>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a128a:	9301      	str	r3, [sp, #4]
 80a128c:	bd08      	pop	{r3, pc}
 80a128e:	0000      	.short	0x0000
 80a1290:	080601a4 	.word	0x080601a4

080a1294 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1294:	b508      	push	{r3, lr}
 80a1296:	4b03      	ldr	r3, [pc, #12]	; (80a12a4 <system_ctrl_set_result+0x10>)
 80a1298:	681b      	ldr	r3, [r3, #0]
 80a129a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a129e:	9301      	str	r3, [sp, #4]
 80a12a0:	bd08      	pop	{r3, pc}
 80a12a2:	0000      	.short	0x0000
 80a12a4:	080601a4 	.word	0x080601a4

080a12a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a12a8:	b508      	push	{r3, lr}
 80a12aa:	4b02      	ldr	r3, [pc, #8]	; (80a12b4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a12ac:	681b      	ldr	r3, [r3, #0]
 80a12ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a12b0:	9301      	str	r3, [sp, #4]
 80a12b2:	bd08      	pop	{r3, pc}
 80a12b4:	080601cc 	.word	0x080601cc

080a12b8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a12b8:	b508      	push	{r3, lr}
 80a12ba:	4b02      	ldr	r3, [pc, #8]	; (80a12c4 <network_config+0xc>)
 80a12bc:	681b      	ldr	r3, [r3, #0]
 80a12be:	681b      	ldr	r3, [r3, #0]
 80a12c0:	9301      	str	r3, [sp, #4]
 80a12c2:	bd08      	pop	{r3, pc}
 80a12c4:	080601c8 	.word	0x080601c8

080a12c8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <network_connect+0xc>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	685b      	ldr	r3, [r3, #4]
 80a12d0:	9301      	str	r3, [sp, #4]
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	080601c8 	.word	0x080601c8

080a12d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a12d8:	b508      	push	{r3, lr}
 80a12da:	4b02      	ldr	r3, [pc, #8]	; (80a12e4 <network_connecting+0xc>)
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	689b      	ldr	r3, [r3, #8]
 80a12e0:	9301      	str	r3, [sp, #4]
 80a12e2:	bd08      	pop	{r3, pc}
 80a12e4:	080601c8 	.word	0x080601c8

080a12e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a12e8:	b508      	push	{r3, lr}
 80a12ea:	4b02      	ldr	r3, [pc, #8]	; (80a12f4 <network_disconnect+0xc>)
 80a12ec:	681b      	ldr	r3, [r3, #0]
 80a12ee:	68db      	ldr	r3, [r3, #12]
 80a12f0:	9301      	str	r3, [sp, #4]
 80a12f2:	bd08      	pop	{r3, pc}
 80a12f4:	080601c8 	.word	0x080601c8

080a12f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <network_ready+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	691b      	ldr	r3, [r3, #16]
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080601c8 	.word	0x080601c8

080a1308 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <network_on+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	695b      	ldr	r3, [r3, #20]
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080601c8 	.word	0x080601c8

080a1318 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <network_off+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	699b      	ldr	r3, [r3, #24]
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	080601c8 	.word	0x080601c8

080a1328 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <network_listen+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	69db      	ldr	r3, [r3, #28]
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	080601c8 	.word	0x080601c8

080a1338 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <network_listening+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	6a1b      	ldr	r3, [r3, #32]
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	080601c8 	.word	0x080601c8

080a1348 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <network_set_listen_timeout+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	080601c8 	.word	0x080601c8

080a1358 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <network_get_listen_timeout+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601c8 	.word	0x080601c8

080a1368 <network_set_hostname>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <network_set_hostname+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601c8 	.word	0x080601c8

080a1378 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <network_get_hostname+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601c8 	.word	0x080601c8

080a1388 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <malloc+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	681b      	ldr	r3, [r3, #0]
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080601a0 	.word	0x080601a0

080a1398 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <free+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	685b      	ldr	r3, [r3, #4]
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601a0 	.word	0x080601a0

080a13a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <realloc+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	689b      	ldr	r3, [r3, #8]
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601a0 	.word	0x080601a0

080a13b8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a13b8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a13ba:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a13bc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a13be:	b113      	cbz	r3, 80a13c6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a13c0:	2203      	movs	r2, #3
 80a13c2:	4601      	mov	r1, r0
 80a13c4:	4798      	blx	r3
    }
 80a13c6:	4620      	mov	r0, r4
 80a13c8:	bd10      	pop	{r4, pc}

080a13ca <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a13ca:	4770      	bx	lr

080a13cc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a13cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13ce:	4606      	mov	r6, r0
 80a13d0:	4615      	mov	r5, r2
 80a13d2:	460c      	mov	r4, r1
 80a13d4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a13d6:	42bc      	cmp	r4, r7
 80a13d8:	d006      	beq.n	80a13e8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a13da:	6833      	ldr	r3, [r6, #0]
 80a13dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a13e0:	689b      	ldr	r3, [r3, #8]
 80a13e2:	4630      	mov	r0, r6
 80a13e4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a13e6:	e7f6      	b.n	80a13d6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a13e8:	4628      	mov	r0, r5
 80a13ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13ec <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a13ec:	2200      	movs	r2, #0
 80a13ee:	7c00      	ldrb	r0, [r0, #16]
 80a13f0:	f7ff be04 	b.w	80a0ffc <HAL_I2C_Write_Data>

080a13f4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a13f4:	2100      	movs	r1, #0
 80a13f6:	7c00      	ldrb	r0, [r0, #16]
 80a13f8:	f7ff be08 	b.w	80a100c <HAL_I2C_Available_Data>

080a13fc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a13fc:	2100      	movs	r1, #0
 80a13fe:	7c00      	ldrb	r0, [r0, #16]
 80a1400:	f7ff be0c 	b.w	80a101c <HAL_I2C_Read_Data>

080a1404 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1404:	2100      	movs	r1, #0
 80a1406:	7c00      	ldrb	r0, [r0, #16]
 80a1408:	f7ff be10 	b.w	80a102c <HAL_I2C_Peek_Data>

080a140c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a140c:	2100      	movs	r1, #0
 80a140e:	7c00      	ldrb	r0, [r0, #16]
 80a1410:	f7ff be14 	b.w	80a103c <HAL_I2C_Flush_Data>

080a1414 <_ZN7TwoWireD0Ev>:
 80a1414:	b510      	push	{r4, lr}
 80a1416:	4604      	mov	r4, r0
 80a1418:	2114      	movs	r1, #20
 80a141a:	f001 f882 	bl	80a2522 <_ZdlPvj>
 80a141e:	4620      	mov	r0, r4
 80a1420:	bd10      	pop	{r4, pc}
	...

080a1424 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1424:	b510      	push	{r4, lr}
 80a1426:	4604      	mov	r4, r0
 80a1428:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a142e:	60a3      	str	r3, [r4, #8]
 80a1430:	4b04      	ldr	r3, [pc, #16]	; (80a1444 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1432:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1434:	7420      	strb	r0, [r4, #16]
 80a1436:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1438:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a143a:	f7ff fe0f 	bl	80a105c <HAL_I2C_Init>

}
 80a143e:	4620      	mov	r0, r4
 80a1440:	bd10      	pop	{r4, pc}
 80a1442:	bf00      	nop
 80a1444:	080a3830 	.word	0x080a3830

080a1448 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1448:	2300      	movs	r3, #0
 80a144a:	461a      	mov	r2, r3
 80a144c:	4619      	mov	r1, r3
 80a144e:	7c00      	ldrb	r0, [r0, #16]
 80a1450:	f7ff bdb4 	b.w	80a0fbc <HAL_I2C_Begin>

080a1454 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1454:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1456:	2400      	movs	r4, #0
 80a1458:	7c00      	ldrb	r0, [r0, #16]
 80a145a:	9400      	str	r4, [sp, #0]
 80a145c:	f7ff fdb6 	bl	80a0fcc <HAL_I2C_Request_Data>
  return result;
}
 80a1460:	b2c0      	uxtb	r0, r0
 80a1462:	b002      	add	sp, #8
 80a1464:	bd10      	pop	{r4, pc}

080a1466 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1466:	2301      	movs	r3, #1
 80a1468:	f7ff bff4 	b.w	80a1454 <_ZN7TwoWire11requestFromEhhh>

080a146c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a146c:	2200      	movs	r2, #0
 80a146e:	7c00      	ldrb	r0, [r0, #16]
 80a1470:	f7ff bdb4 	b.w	80a0fdc <HAL_I2C_Begin_Transmission>

080a1474 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1474:	2200      	movs	r2, #0
 80a1476:	7c00      	ldrb	r0, [r0, #16]
 80a1478:	f7ff bdb8 	b.w	80a0fec <HAL_I2C_End_Transmission>

080a147c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a147c:	2101      	movs	r1, #1
 80a147e:	f7ff bff9 	b.w	80a1474 <_ZN7TwoWire15endTransmissionEh>

080a1482 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1482:	2100      	movs	r1, #0
 80a1484:	7c00      	ldrb	r0, [r0, #16]
 80a1486:	f7ff bde1 	b.w	80a104c <HAL_I2C_Is_Enabled>

080a148a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a148a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a148c:	460f      	mov	r7, r1
 80a148e:	f100 0608 	add.w	r6, r0, #8
 80a1492:	1d05      	adds	r5, r0, #4
 80a1494:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1496:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a149a:	220a      	movs	r2, #10
 80a149c:	4638      	mov	r0, r7
 80a149e:	f000 f952 	bl	80a1746 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a14a2:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a14a4:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a14a6:	d007      	beq.n	80a14b8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a14a8:	2c00      	cmp	r4, #0
 80a14aa:	d0f4      	beq.n	80a1496 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a14ac:	212e      	movs	r1, #46	; 0x2e
 80a14ae:	4638      	mov	r0, r7
 80a14b0:	f000 f8f6 	bl	80a16a0 <_ZN5Print5printEc>
 80a14b4:	4404      	add	r4, r0
 80a14b6:	e7ee      	b.n	80a1496 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a14b8:	4620      	mov	r0, r4
 80a14ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a14bc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a14bc:	b510      	push	{r4, lr}
 80a14be:	4604      	mov	r4, r0
 80a14c0:	4b04      	ldr	r3, [pc, #16]	; (80a14d4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a14c2:	2211      	movs	r2, #17
 80a14c4:	f840 3b04 	str.w	r3, [r0], #4
 80a14c8:	2100      	movs	r1, #0
 80a14ca:	f002 f8c2 	bl	80a3652 <memset>
{
    clear();
}
 80a14ce:	4620      	mov	r0, r4
 80a14d0:	bd10      	pop	{r4, pc}
 80a14d2:	bf00      	nop
 80a14d4:	080a3858 	.word	0x080a3858

080a14d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a14d8:	4603      	mov	r3, r0
 80a14da:	4a07      	ldr	r2, [pc, #28]	; (80a14f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a14dc:	b510      	push	{r4, lr}
 80a14de:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a14e2:	f101 0210 	add.w	r2, r1, #16
 80a14e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a14ea:	4291      	cmp	r1, r2
 80a14ec:	f843 4b04 	str.w	r4, [r3], #4
 80a14f0:	d1f9      	bne.n	80a14e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a14f2:	780a      	ldrb	r2, [r1, #0]
 80a14f4:	701a      	strb	r2, [r3, #0]
}
 80a14f6:	bd10      	pop	{r4, pc}
 80a14f8:	080a3858 	.word	0x080a3858

080a14fc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a14fc:	4a02      	ldr	r2, [pc, #8]	; (80a1508 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a14fe:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1500:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1502:	2204      	movs	r2, #4
 80a1504:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1506:	4770      	bx	lr
 80a1508:	080a3858 	.word	0x080a3858

080a150c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a150c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a150e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1512:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1516:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a151a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a151e:	2304      	movs	r3, #4
 80a1520:	6041      	str	r1, [r0, #4]
 80a1522:	7503      	strb	r3, [r0, #20]
 80a1524:	bd10      	pop	{r4, pc}
	...

080a1528 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a152a:	4d04      	ldr	r5, [pc, #16]	; (80a153c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a152c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a152e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1532:	9500      	str	r5, [sp, #0]
 80a1534:	f7ff ffea 	bl	80a150c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1538:	b003      	add	sp, #12
 80a153a:	bd30      	pop	{r4, r5, pc}
 80a153c:	080a3858 	.word	0x080a3858

080a1540 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1540:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1542:	780d      	ldrb	r5, [r1, #0]
 80a1544:	788b      	ldrb	r3, [r1, #2]
 80a1546:	784a      	ldrb	r2, [r1, #1]
 80a1548:	78c9      	ldrb	r1, [r1, #3]
 80a154a:	9100      	str	r1, [sp, #0]
 80a154c:	4629      	mov	r1, r5
 80a154e:	f7ff ffdd 	bl	80a150c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1552:	b003      	add	sp, #12
 80a1554:	bd30      	pop	{r4, r5, pc}
	...

080a1558 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1558:	4a01      	ldr	r2, [pc, #4]	; (80a1560 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a155c:	601a      	str	r2, [r3, #0]
 80a155e:	4770      	bx	lr
 80a1560:	080a38da 	.word	0x080a38da
 80a1564:	200001a8 	.word	0x200001a8

080a1568 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1568:	2300      	movs	r3, #0
 80a156a:	461a      	mov	r2, r3
 80a156c:	6840      	ldr	r0, [r0, #4]
 80a156e:	f7ff beab 	b.w	80a12c8 <network_connect>

080a1572 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1572:	2200      	movs	r2, #0
 80a1574:	2102      	movs	r1, #2
 80a1576:	6840      	ldr	r0, [r0, #4]
 80a1578:	f7ff beb6 	b.w	80a12e8 <network_disconnect>

080a157c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a157c:	2200      	movs	r2, #0
 80a157e:	4611      	mov	r1, r2
 80a1580:	6840      	ldr	r0, [r0, #4]
 80a1582:	f7ff bea9 	b.w	80a12d8 <network_connecting>

080a1586 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1586:	2200      	movs	r2, #0
 80a1588:	4611      	mov	r1, r2
 80a158a:	6840      	ldr	r0, [r0, #4]
 80a158c:	f7ff beb4 	b.w	80a12f8 <network_ready>

080a1590 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1590:	2300      	movs	r3, #0
 80a1592:	461a      	mov	r2, r3
 80a1594:	4619      	mov	r1, r3
 80a1596:	6840      	ldr	r0, [r0, #4]
 80a1598:	f7ff beb6 	b.w	80a1308 <network_on>

080a159c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a159c:	2300      	movs	r3, #0
 80a159e:	461a      	mov	r2, r3
 80a15a0:	4619      	mov	r1, r3
 80a15a2:	6840      	ldr	r0, [r0, #4]
 80a15a4:	f7ff beb8 	b.w	80a1318 <network_off>

080a15a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a15a8:	2200      	movs	r2, #0
 80a15aa:	f081 0101 	eor.w	r1, r1, #1
 80a15ae:	6840      	ldr	r0, [r0, #4]
 80a15b0:	f7ff beba 	b.w	80a1328 <network_listen>

080a15b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a15b4:	2200      	movs	r2, #0
 80a15b6:	6840      	ldr	r0, [r0, #4]
 80a15b8:	f7ff bec6 	b.w	80a1348 <network_set_listen_timeout>

080a15bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a15bc:	2200      	movs	r2, #0
 80a15be:	4611      	mov	r1, r2
 80a15c0:	6840      	ldr	r0, [r0, #4]
 80a15c2:	f7ff bec9 	b.w	80a1358 <network_get_listen_timeout>

080a15c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a15c6:	2200      	movs	r2, #0
 80a15c8:	4611      	mov	r1, r2
 80a15ca:	6840      	ldr	r0, [r0, #4]
 80a15cc:	f7ff beb4 	b.w	80a1338 <network_listening>

080a15d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a15d0:	b570      	push	{r4, r5, r6, lr}
 80a15d2:	4616      	mov	r6, r2
 80a15d4:	b08e      	sub	sp, #56	; 0x38
 80a15d6:	4604      	mov	r4, r0
    IPAddress addr;
 80a15d8:	a808      	add	r0, sp, #32
 80a15da:	f7ff ff6f 	bl	80a14bc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a15de:	2211      	movs	r2, #17
 80a15e0:	2100      	movs	r1, #0
 80a15e2:	a803      	add	r0, sp, #12
 80a15e4:	f002 f835 	bl	80a3652 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a15e8:	4630      	mov	r0, r6
 80a15ea:	f002 f863 	bl	80a36b4 <strlen>
 80a15ee:	2500      	movs	r5, #0
 80a15f0:	4b0a      	ldr	r3, [pc, #40]	; (80a161c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a15f2:	9500      	str	r5, [sp, #0]
 80a15f4:	b281      	uxth	r1, r0
 80a15f6:	685b      	ldr	r3, [r3, #4]
 80a15f8:	aa03      	add	r2, sp, #12
 80a15fa:	4630      	mov	r0, r6
 80a15fc:	f7ff fe28 	bl	80a1250 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1600:	b120      	cbz	r0, 80a160c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1602:	4629      	mov	r1, r5
 80a1604:	4620      	mov	r0, r4
 80a1606:	f7ff ff79 	bl	80a14fc <_ZN9IPAddressC1Em>
 80a160a:	e003      	b.n	80a1614 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a160c:	a903      	add	r1, sp, #12
 80a160e:	4620      	mov	r0, r4
 80a1610:	f7ff ff62 	bl	80a14d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1614:	4620      	mov	r0, r4
 80a1616:	b00e      	add	sp, #56	; 0x38
 80a1618:	bd70      	pop	{r4, r5, r6, pc}
 80a161a:	bf00      	nop
 80a161c:	2000062c 	.word	0x2000062c

080a1620 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a1620:	4b03      	ldr	r3, [pc, #12]	; (80a1630 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1622:	4a04      	ldr	r2, [pc, #16]	; (80a1634 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1624:	2804      	cmp	r0, #4
 80a1626:	bf0c      	ite	eq
 80a1628:	4610      	moveq	r0, r2
 80a162a:	4618      	movne	r0, r3
 80a162c:	4770      	bx	lr
 80a162e:	bf00      	nop
 80a1630:	200001ac 	.word	0x200001ac
 80a1634:	2000062c 	.word	0x2000062c

080a1638 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1638:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a163a:	4a03      	ldr	r2, [pc, #12]	; (80a1648 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a163c:	601a      	str	r2, [r3, #0]
 80a163e:	2200      	movs	r2, #0
 80a1640:	605a      	str	r2, [r3, #4]
 80a1642:	4770      	bx	lr
 80a1644:	200001ac 	.word	0x200001ac
 80a1648:	080a394c 	.word	0x080a394c

080a164c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a164e:	4606      	mov	r6, r0
 80a1650:	460d      	mov	r5, r1
 80a1652:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1654:	2400      	movs	r4, #0
  while (size--) {
 80a1656:	42bd      	cmp	r5, r7
 80a1658:	d00c      	beq.n	80a1674 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a165a:	6833      	ldr	r3, [r6, #0]
 80a165c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1660:	689b      	ldr	r3, [r3, #8]
 80a1662:	4630      	mov	r0, r6
 80a1664:	4798      	blx	r3
     if (chunk>=0)
 80a1666:	2800      	cmp	r0, #0
 80a1668:	db01      	blt.n	80a166e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a166a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a166c:	e7f3      	b.n	80a1656 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a166e:	2c00      	cmp	r4, #0
 80a1670:	bf08      	it	eq
 80a1672:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1674:	4620      	mov	r0, r4
 80a1676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1678 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1678:	b570      	push	{r4, r5, r6, lr}
 80a167a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a167c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a167e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1680:	b149      	cbz	r1, 80a1696 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1682:	f002 f817 	bl	80a36b4 <strlen>
 80a1686:	682b      	ldr	r3, [r5, #0]
 80a1688:	4602      	mov	r2, r0
 80a168a:	4621      	mov	r1, r4
 80a168c:	4628      	mov	r0, r5
    }
 80a168e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1692:	68db      	ldr	r3, [r3, #12]
 80a1694:	4718      	bx	r3
    }
 80a1696:	bd70      	pop	{r4, r5, r6, pc}

080a1698 <_ZN5Print5printEPKc>:
 80a1698:	b508      	push	{r3, lr}
 80a169a:	f7ff ffed 	bl	80a1678 <_ZN5Print5writeEPKc>
 80a169e:	bd08      	pop	{r3, pc}

080a16a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a16a0:	6803      	ldr	r3, [r0, #0]
 80a16a2:	689b      	ldr	r3, [r3, #8]
 80a16a4:	4718      	bx	r3

080a16a6 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a16a6:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a16a8:	680a      	ldr	r2, [r1, #0]
 80a16aa:	4601      	mov	r1, r0
 80a16ac:	6812      	ldr	r2, [r2, #0]
 80a16ae:	4618      	mov	r0, r3
 80a16b0:	4710      	bx	r2

080a16b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a16b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a16b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a16b6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a16b8:	f7ff fff2 	bl	80a16a0 <_ZN5Print5printEc>
  n += print('\n');
 80a16bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a16be:	4604      	mov	r4, r0
  n += print('\n');
 80a16c0:	4628      	mov	r0, r5
 80a16c2:	f7ff ffed 	bl	80a16a0 <_ZN5Print5printEc>
  return n;
}
 80a16c6:	4420      	add	r0, r4
 80a16c8:	bd38      	pop	{r3, r4, r5, pc}

080a16ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a16ca:	b538      	push	{r3, r4, r5, lr}
 80a16cc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a16ce:	f7ff ffd3 	bl	80a1678 <_ZN5Print5writeEPKc>
 80a16d2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a16d4:	4628      	mov	r0, r5
 80a16d6:	f7ff ffec 	bl	80a16b2 <_ZN5Print7printlnEv>
  return n;
}
 80a16da:	4420      	add	r0, r4
 80a16dc:	bd38      	pop	{r3, r4, r5, pc}

080a16de <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a16de:	b538      	push	{r3, r4, r5, lr}
 80a16e0:	4605      	mov	r5, r0
   size_t n = print(x);
 80a16e2:	f7ff ffe0 	bl	80a16a6 <_ZN5Print5printERK9Printable>
 80a16e6:	4604      	mov	r4, r0
   n += println();
 80a16e8:	4628      	mov	r0, r5
 80a16ea:	f7ff ffe2 	bl	80a16b2 <_ZN5Print7printlnEv>
   return n;
 }
 80a16ee:	4420      	add	r0, r4
 80a16f0:	bd38      	pop	{r3, r4, r5, pc}

080a16f2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a16f2:	2a01      	cmp	r2, #1
 80a16f4:	bf98      	it	ls
 80a16f6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a16f8:	b530      	push	{r4, r5, lr}
 80a16fa:	460b      	mov	r3, r1
 80a16fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a16fe:	2100      	movs	r1, #0
 80a1700:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1704:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1708:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a170c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1710:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1712:	2b09      	cmp	r3, #9
 80a1714:	bf94      	ite	ls
 80a1716:	3330      	addls	r3, #48	; 0x30
 80a1718:	3337      	addhi	r3, #55	; 0x37
 80a171a:	b2db      	uxtb	r3, r3
 80a171c:	4621      	mov	r1, r4
 80a171e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1722:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1724:	2d00      	cmp	r5, #0
 80a1726:	d1ef      	bne.n	80a1708 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1728:	f7ff ffa6 	bl	80a1678 <_ZN5Print5writeEPKc>
}
 80a172c:	b00b      	add	sp, #44	; 0x2c
 80a172e:	bd30      	pop	{r4, r5, pc}

080a1730 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1730:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1732:	b922      	cbnz	r2, 80a173e <_ZN5Print5printEmi+0xe>
 80a1734:	6803      	ldr	r3, [r0, #0]
 80a1736:	b2c9      	uxtb	r1, r1
 80a1738:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a173a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a173c:	4718      	bx	r3
  else return printNumber(n, base);
 80a173e:	b2d2      	uxtb	r2, r2
}
 80a1740:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1742:	f7ff bfd6 	b.w	80a16f2 <_ZN5Print11printNumberEmh>

080a1746 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1746:	f7ff bff3 	b.w	80a1730 <_ZN5Print5printEmi>

080a174a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a174a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a174e:	4607      	mov	r7, r0
 80a1750:	460e      	mov	r6, r1
  if (base == 0) {
 80a1752:	4615      	mov	r5, r2
 80a1754:	b92a      	cbnz	r2, 80a1762 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a175a:	6803      	ldr	r3, [r0, #0]
 80a175c:	b2c9      	uxtb	r1, r1
 80a175e:	689b      	ldr	r3, [r3, #8]
 80a1760:	4718      	bx	r3
  } else if (base == 10) {
 80a1762:	2a0a      	cmp	r2, #10
 80a1764:	d102      	bne.n	80a176c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1766:	2900      	cmp	r1, #0
 80a1768:	da01      	bge.n	80a176e <_ZN5Print5printEli+0x24>
 80a176a:	e004      	b.n	80a1776 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a176c:	b2d2      	uxtb	r2, r2
  }
}
 80a176e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1772:	f7ff bfbe 	b.w	80a16f2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1776:	212d      	movs	r1, #45	; 0x2d
 80a1778:	f7ff ff92 	bl	80a16a0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a177c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a177e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1780:	4271      	negs	r1, r6
 80a1782:	4638      	mov	r0, r7
 80a1784:	f7ff ffb5 	bl	80a16f2 <_ZN5Print11printNumberEmh>
 80a1788:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1790 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1794:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1796:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1798:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a179a:	4617      	mov	r7, r2
 80a179c:	461e      	mov	r6, r3
 80a179e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a17a2:	f001 fc5b 	bl	80a305c <__aeabi_dcmpun>
 80a17a6:	b108      	cbz	r0, 80a17ac <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a17a8:	4947      	ldr	r1, [pc, #284]	; (80a18c8 <_ZN5Print10printFloatEdh+0x138>)
 80a17aa:	e012      	b.n	80a17d2 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a17ac:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a17b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a17b4:	4b45      	ldr	r3, [pc, #276]	; (80a18cc <_ZN5Print10printFloatEdh+0x13c>)
 80a17b6:	4638      	mov	r0, r7
 80a17b8:	4621      	mov	r1, r4
 80a17ba:	f001 fc4f 	bl	80a305c <__aeabi_dcmpun>
 80a17be:	b968      	cbnz	r0, 80a17dc <_ZN5Print10printFloatEdh+0x4c>
 80a17c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a17c4:	4b41      	ldr	r3, [pc, #260]	; (80a18cc <_ZN5Print10printFloatEdh+0x13c>)
 80a17c6:	4638      	mov	r0, r7
 80a17c8:	4621      	mov	r1, r4
 80a17ca:	f001 fc29 	bl	80a3020 <__aeabi_dcmple>
 80a17ce:	b928      	cbnz	r0, 80a17dc <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a17d0:	493f      	ldr	r1, [pc, #252]	; (80a18d0 <_ZN5Print10printFloatEdh+0x140>)
 80a17d2:	4640      	mov	r0, r8
 80a17d4:	f7ff ff50 	bl	80a1678 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a17d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a17dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a17e0:	4b3c      	ldr	r3, [pc, #240]	; (80a18d4 <_ZN5Print10printFloatEdh+0x144>)
 80a17e2:	4638      	mov	r0, r7
 80a17e4:	4631      	mov	r1, r6
 80a17e6:	f001 fc2f 	bl	80a3048 <__aeabi_dcmpgt>
 80a17ea:	b108      	cbz	r0, 80a17f0 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a17ec:	493a      	ldr	r1, [pc, #232]	; (80a18d8 <_ZN5Print10printFloatEdh+0x148>)
 80a17ee:	e7f0      	b.n	80a17d2 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a17f0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a17f4:	4b39      	ldr	r3, [pc, #228]	; (80a18dc <_ZN5Print10printFloatEdh+0x14c>)
 80a17f6:	4638      	mov	r0, r7
 80a17f8:	4631      	mov	r1, r6
 80a17fa:	f001 fc07 	bl	80a300c <__aeabi_dcmplt>
 80a17fe:	2800      	cmp	r0, #0
 80a1800:	d1f4      	bne.n	80a17ec <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1802:	2200      	movs	r2, #0
 80a1804:	2300      	movs	r3, #0
 80a1806:	4638      	mov	r0, r7
 80a1808:	4631      	mov	r1, r6
 80a180a:	f001 fbff 	bl	80a300c <__aeabi_dcmplt>
 80a180e:	b138      	cbz	r0, 80a1820 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1810:	212d      	movs	r1, #45	; 0x2d
 80a1812:	4640      	mov	r0, r8
 80a1814:	f7ff ff44 	bl	80a16a0 <_ZN5Print5printEc>
     number = -number;
 80a1818:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a181c:	4604      	mov	r4, r0
 80a181e:	e000      	b.n	80a1822 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1820:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1822:	492f      	ldr	r1, [pc, #188]	; (80a18e0 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1824:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1828:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a182a:	fa5f f389 	uxtb.w	r3, r9
 80a182e:	429d      	cmp	r5, r3
 80a1830:	d906      	bls.n	80a1840 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1832:	2200      	movs	r2, #0
 80a1834:	4b2b      	ldr	r3, [pc, #172]	; (80a18e4 <_ZN5Print10printFloatEdh+0x154>)
 80a1836:	f001 faa1 	bl	80a2d7c <__aeabi_ddiv>
 80a183a:	f109 0901 	add.w	r9, r9, #1
 80a183e:	e7f4      	b.n	80a182a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1840:	463a      	mov	r2, r7
 80a1842:	4633      	mov	r3, r6
 80a1844:	f000 ffbe 	bl	80a27c4 <__adddf3>
 80a1848:	460f      	mov	r7, r1
 80a184a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a184c:	f001 fc44 	bl	80a30d8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1850:	220a      	movs	r2, #10
 80a1852:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1854:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1856:	4640      	mov	r0, r8
 80a1858:	f7ff ff4b 	bl	80a16f2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a185c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a185e:	b37d      	cbz	r5, 80a18c0 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1860:	4648      	mov	r0, r9
 80a1862:	f001 f8eb 	bl	80a2a3c <__aeabi_ui2d>
 80a1866:	4602      	mov	r2, r0
 80a1868:	460b      	mov	r3, r1
 80a186a:	4630      	mov	r0, r6
 80a186c:	4639      	mov	r1, r7
 80a186e:	f000 ffa7 	bl	80a27c0 <__aeabi_dsub>
 80a1872:	4606      	mov	r6, r0
 80a1874:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1876:	4640      	mov	r0, r8
 80a1878:	491b      	ldr	r1, [pc, #108]	; (80a18e8 <_ZN5Print10printFloatEdh+0x158>)
 80a187a:	f7ff fefd 	bl	80a1678 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a187e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1880:	4b18      	ldr	r3, [pc, #96]	; (80a18e4 <_ZN5Print10printFloatEdh+0x154>)
 80a1882:	2200      	movs	r2, #0
 80a1884:	4630      	mov	r0, r6
 80a1886:	4639      	mov	r1, r7
 80a1888:	f001 f94e 	bl	80a2b28 <__aeabi_dmul>
 80a188c:	460f      	mov	r7, r1
 80a188e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1890:	f001 fbfa 	bl	80a3088 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1894:	220a      	movs	r2, #10
 80a1896:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1898:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a189a:	4640      	mov	r0, r8
 80a189c:	f7ff ff55 	bl	80a174a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a18a0:	4404      	add	r4, r0
    remainder -= toPrint;
 80a18a2:	4648      	mov	r0, r9
 80a18a4:	f001 f8da 	bl	80a2a5c <__aeabi_i2d>
 80a18a8:	4602      	mov	r2, r0
 80a18aa:	460b      	mov	r3, r1
 80a18ac:	4630      	mov	r0, r6
 80a18ae:	4639      	mov	r1, r7
 80a18b0:	f000 ff86 	bl	80a27c0 <__aeabi_dsub>
 80a18b4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a18b6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a18ba:	4606      	mov	r6, r0
 80a18bc:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a18be:	d1df      	bne.n	80a1880 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a18c0:	4620      	mov	r0, r4
 80a18c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a18c6:	bf00      	nop
 80a18c8:	080a3978 	.word	0x080a3978
 80a18cc:	7fefffff 	.word	0x7fefffff
 80a18d0:	080a3980 	.word	0x080a3980
 80a18d4:	41efffff 	.word	0x41efffff
 80a18d8:	080a397c 	.word	0x080a397c
 80a18dc:	c1efffff 	.word	0xc1efffff
 80a18e0:	3fe00000 	.word	0x3fe00000
 80a18e4:	40240000 	.word	0x40240000
 80a18e8:	080a36fa 	.word	0x080a36fa

080a18ec <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a18ec:	f89d 1000 	ldrb.w	r1, [sp]
 80a18f0:	9100      	str	r1, [sp, #0]
 80a18f2:	f7ff bf4d 	b.w	80a1790 <_ZN5Print10printFloatEdh>

080a18f6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a18f6:	b510      	push	{r4, lr}
 80a18f8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a18fa:	f7ff fd5d 	bl	80a13b8 <_ZNSt14_Function_baseD1Ev>
 80a18fe:	4620      	mov	r0, r4
 80a1900:	bd10      	pop	{r4, pc}
	...

080a1904 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1904:	4803      	ldr	r0, [pc, #12]	; (80a1914 <_GLOBAL__sub_I_RGB+0x10>)
 80a1906:	2300      	movs	r3, #0
 80a1908:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a190a:	4a03      	ldr	r2, [pc, #12]	; (80a1918 <_GLOBAL__sub_I_RGB+0x14>)
 80a190c:	4903      	ldr	r1, [pc, #12]	; (80a191c <_GLOBAL__sub_I_RGB+0x18>)
 80a190e:	f000 be03 	b.w	80a2518 <__aeabi_atexit>
 80a1912:	bf00      	nop
 80a1914:	200001b4 	.word	0x200001b4
 80a1918:	2000007c 	.word	0x2000007c
 80a191c:	080a18f7 	.word	0x080a18f7

080a1920 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1920:	4770      	bx	lr

080a1922 <_ZN8SPIClassD0Ev>:
 80a1922:	b510      	push	{r4, lr}
 80a1924:	4604      	mov	r4, r0
 80a1926:	2110      	movs	r1, #16
 80a1928:	f000 fdfb 	bl	80a2522 <_ZdlPvj>
 80a192c:	4620      	mov	r0, r4
 80a192e:	bd10      	pop	{r4, pc}

080a1930 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1930:	b570      	push	{r4, r5, r6, lr}
 80a1932:	4604      	mov	r4, r0
 80a1934:	460e      	mov	r6, r1
 80a1936:	4b07      	ldr	r3, [pc, #28]	; (80a1954 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1938:	2500      	movs	r5, #0
 80a193a:	6003      	str	r3, [r0, #0]
 80a193c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1940:	f7ff fb04 	bl	80a0f4c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1944:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1946:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1948:	f7ff fbea 	bl	80a1120 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a194c:	60a5      	str	r5, [r4, #8]
}
 80a194e:	4620      	mov	r0, r4
 80a1950:	bd70      	pop	{r4, r5, r6, pc}
 80a1952:	bf00      	nop
 80a1954:	080a398c 	.word	0x080a398c

080a1958 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1958:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a195c:	7900      	ldrb	r0, [r0, #4]
 80a195e:	f7ff bbb7 	b.w	80a10d0 <HAL_SPI_Begin>

080a1962 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a1962:	7900      	ldrb	r0, [r0, #4]
 80a1964:	f7ff bbbc 	b.w	80a10e0 <HAL_SPI_Set_Bit_Order>

080a1968 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1968:	7900      	ldrb	r0, [r0, #4]
 80a196a:	f7ff bbc1 	b.w	80a10f0 <HAL_SPI_Set_Data_Mode>
	...

080a1970 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1970:	4a05      	ldr	r2, [pc, #20]	; (80a1988 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a1972:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1974:	5c99      	ldrb	r1, [r3, r2]
 80a1976:	4281      	cmp	r1, r0
 80a1978:	d002      	beq.n	80a1980 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a197a:	3301      	adds	r3, #1
 80a197c:	2b08      	cmp	r3, #8
 80a197e:	d1f9      	bne.n	80a1974 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a1980:	1c58      	adds	r0, r3, #1
}
 80a1982:	b2c0      	uxtb	r0, r0
 80a1984:	4770      	bx	lr
 80a1986:	bf00      	nop
 80a1988:	080a3994 	.word	0x080a3994

080a198c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a198c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a198e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1990:	6018      	str	r0, [r3, #0]
 80a1992:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1994:	6818      	ldr	r0, [r3, #0]
 80a1996:	b2e5      	uxtb	r5, r4
 80a1998:	4288      	cmp	r0, r1
 80a199a:	d906      	bls.n	80a19aa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a199c:	3401      	adds	r4, #1
 80a199e:	2c08      	cmp	r4, #8
 80a19a0:	d002      	beq.n	80a19a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a19a2:	0840      	lsrs	r0, r0, #1
 80a19a4:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a19a6:	e7f5      	b.n	80a1994 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a19a8:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a19ac:	5d5b      	ldrb	r3, [r3, r5]
 80a19ae:	7013      	strb	r3, [r2, #0]
 80a19b0:	bd30      	pop	{r4, r5, pc}
 80a19b2:	bf00      	nop
 80a19b4:	080a3994 	.word	0x080a3994

080a19b8 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a19b8:	b570      	push	{r4, r5, r6, lr}
 80a19ba:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a19bc:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a19c0:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a19c2:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a19c4:	2214      	movs	r2, #20
 80a19c6:	2100      	movs	r1, #0
 80a19c8:	a803      	add	r0, sp, #12
 80a19ca:	f001 fe42 	bl	80a3652 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a19ce:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a19d0:	a903      	add	r1, sp, #12
 80a19d2:	4630      	mov	r0, r6
 80a19d4:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a19d6:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a19da:	f7ff fbb1 	bl	80a1140 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a19de:	ab02      	add	r3, sp, #8
 80a19e0:	f10d 0207 	add.w	r2, sp, #7
 80a19e4:	4629      	mov	r1, r5
 80a19e6:	9804      	ldr	r0, [sp, #16]
 80a19e8:	f7ff ffd0 	bl	80a198c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a19ec:	7920      	ldrb	r0, [r4, #4]
 80a19ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a19f2:	f7ff fb85 	bl	80a1100 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a19f6:	9802      	ldr	r0, [sp, #8]
 80a19f8:	b008      	add	sp, #32
 80a19fa:	bd70      	pop	{r4, r5, r6, pc}

080a19fc <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a19fc:	b538      	push	{r3, r4, r5, lr}
 80a19fe:	4604      	mov	r4, r0
    if (dividerReference)
 80a1a00:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1a02:	4608      	mov	r0, r1
    if (dividerReference)
 80a1a04:	b14d      	cbz	r5, 80a1a1a <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a1a06:	f7ff ffb3 	bl	80a1970 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1a0a:	2201      	movs	r2, #1
 80a1a0c:	fa25 f100 	lsr.w	r1, r5, r0
 80a1a10:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a1a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1a16:	f7ff bfcf 	b.w	80a19b8 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1a1a:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1a20:	f7ff bb6e 	b.w	80a1100 <HAL_SPI_Set_Clock_Divider>

080a1a24 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1a24:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1a26:	7900      	ldrb	r0, [r0, #4]
 80a1a28:	f7ff fb72 	bl	80a1110 <HAL_SPI_Send_Receive_Data>
}
 80a1a2c:	b2c0      	uxtb	r0, r0
 80a1a2e:	bd08      	pop	{r3, pc}

080a1a30 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1a30:	7900      	ldrb	r0, [r0, #4]
 80a1a32:	f7ff bb7d 	b.w	80a1130 <HAL_SPI_Is_Enabled>

080a1a36 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1a36:	b510      	push	{r4, lr}
 80a1a38:	4604      	mov	r4, r0
{
	free(buffer);
 80a1a3a:	6800      	ldr	r0, [r0, #0]
 80a1a3c:	f7ff fcac 	bl	80a1398 <free>
}
 80a1a40:	4620      	mov	r0, r4
 80a1a42:	bd10      	pop	{r4, pc}

080a1a44 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1a44:	b510      	push	{r4, lr}
 80a1a46:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1a48:	6800      	ldr	r0, [r0, #0]
 80a1a4a:	b108      	cbz	r0, 80a1a50 <_ZN6String10invalidateEv+0xc>
 80a1a4c:	f7ff fca4 	bl	80a1398 <free>
	buffer = NULL;
 80a1a50:	2300      	movs	r3, #0
 80a1a52:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1a54:	60a3      	str	r3, [r4, #8]
 80a1a56:	6063      	str	r3, [r4, #4]
 80a1a58:	bd10      	pop	{r4, pc}

080a1a5a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1a5a:	b538      	push	{r3, r4, r5, lr}
 80a1a5c:	4604      	mov	r4, r0
 80a1a5e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1a60:	6800      	ldr	r0, [r0, #0]
 80a1a62:	3101      	adds	r1, #1
 80a1a64:	f7ff fca0 	bl	80a13a8 <realloc>
	if (newbuffer) {
 80a1a68:	b110      	cbz	r0, 80a1a70 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1a6a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1a6e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1a70:	bd38      	pop	{r3, r4, r5, pc}

080a1a72 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1a72:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1a74:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1a76:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1a78:	b113      	cbz	r3, 80a1a80 <_ZN6String7reserveEj+0xe>
 80a1a7a:	6843      	ldr	r3, [r0, #4]
 80a1a7c:	428b      	cmp	r3, r1
 80a1a7e:	d207      	bcs.n	80a1a90 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1a80:	4620      	mov	r0, r4
 80a1a82:	f7ff ffea 	bl	80a1a5a <_ZN6String12changeBufferEj>
 80a1a86:	b120      	cbz	r0, 80a1a92 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1a88:	68a3      	ldr	r3, [r4, #8]
 80a1a8a:	b90b      	cbnz	r3, 80a1a90 <_ZN6String7reserveEj+0x1e>
 80a1a8c:	6822      	ldr	r2, [r4, #0]
 80a1a8e:	7013      	strb	r3, [r2, #0]
 80a1a90:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1a92:	bd10      	pop	{r4, pc}

080a1a94 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1a94:	b570      	push	{r4, r5, r6, lr}
 80a1a96:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1a98:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1a9a:	4604      	mov	r4, r0
 80a1a9c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1a9e:	f7ff ffe8 	bl	80a1a72 <_ZN6String7reserveEj>
 80a1aa2:	b918      	cbnz	r0, 80a1aac <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1aa4:	4620      	mov	r0, r4
 80a1aa6:	f7ff ffcd 	bl	80a1a44 <_ZN6String10invalidateEv>
		return *this;
 80a1aaa:	e009      	b.n	80a1ac0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1aac:	462a      	mov	r2, r5
 80a1aae:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1ab0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1ab2:	6820      	ldr	r0, [r4, #0]
 80a1ab4:	f001 fdc2 	bl	80a363c <memcpy>
	buffer[len] = 0;
 80a1ab8:	6822      	ldr	r2, [r4, #0]
 80a1aba:	68a3      	ldr	r3, [r4, #8]
 80a1abc:	2100      	movs	r1, #0
 80a1abe:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1ac0:	4620      	mov	r0, r4
 80a1ac2:	bd70      	pop	{r4, r5, r6, pc}

080a1ac4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ac4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1ac6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ac8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1aca:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1acc:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1ace:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1ad0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1ad2:	460d      	mov	r5, r1
 80a1ad4:	b139      	cbz	r1, 80a1ae6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1ad6:	4608      	mov	r0, r1
 80a1ad8:	f001 fdec 	bl	80a36b4 <strlen>
 80a1adc:	4629      	mov	r1, r5
 80a1ade:	4602      	mov	r2, r0
 80a1ae0:	4620      	mov	r0, r4
 80a1ae2:	f7ff ffd7 	bl	80a1a94 <_ZN6String4copyEPKcj>
}
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1aec <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1af0:	4b03      	ldr	r3, [pc, #12]	; (80a1b00 <_GLOBAL__sub_I_System+0x14>)
 80a1af2:	2000      	movs	r0, #0
 80a1af4:	7018      	strb	r0, [r3, #0]
 80a1af6:	8058      	strh	r0, [r3, #2]
 80a1af8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1afa:	f7ff bbb1 	b.w	80a1260 <set_system_mode>
 80a1afe:	bf00      	nop
 80a1b00:	200001c4 	.word	0x200001c4

080a1b04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1b04:	4b02      	ldr	r3, [pc, #8]	; (80a1b10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1b06:	681a      	ldr	r2, [r3, #0]
 80a1b08:	4b02      	ldr	r3, [pc, #8]	; (80a1b14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1b0a:	601a      	str	r2, [r3, #0]
 80a1b0c:	4770      	bx	lr
 80a1b0e:	bf00      	nop
 80a1b10:	20000014 	.word	0x20000014
 80a1b14:	200001cc 	.word	0x200001cc

080a1b18 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1b18:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1b1a:	6804      	ldr	r4, [r0, #0]
 80a1b1c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1b1e:	46a4      	mov	ip, r4
    }
 80a1b20:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1b22:	4760      	bx	ip

080a1b24 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1b24:	6803      	ldr	r3, [r0, #0]
 80a1b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1b28:	4718      	bx	r3

080a1b2a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1b2a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1b2c:	4770      	bx	lr

080a1b2e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1b2e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1b30:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1b32:	1a10      	subs	r0, r2, r0
 80a1b34:	4770      	bx	lr

080a1b36 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1b36:	b513      	push	{r0, r1, r4, lr}
 80a1b38:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1b3a:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1b3c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1b40:	68d4      	ldr	r4, [r2, #12]
 80a1b42:	4619      	mov	r1, r3
 80a1b44:	2201      	movs	r2, #1
 80a1b46:	47a0      	blx	r4
}
 80a1b48:	b002      	add	sp, #8
 80a1b4a:	bd10      	pop	{r4, pc}

080a1b4c <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1b4c:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1b4e:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1b50:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1b52:	691b      	ldr	r3, [r3, #16]
 80a1b54:	4798      	blx	r3
 80a1b56:	b128      	cbz	r0, 80a1b64 <_ZN3UDP4readEv+0x18>
 80a1b58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1b5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1b5c:	1c59      	adds	r1, r3, #1
 80a1b5e:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1b60:	5cd0      	ldrb	r0, [r2, r3]
 80a1b62:	bd10      	pop	{r4, pc}
 80a1b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1b68:	bd10      	pop	{r4, pc}

080a1b6a <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1b6a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1b6c:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1b6e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1b70:	691b      	ldr	r3, [r3, #16]
 80a1b72:	4798      	blx	r3
 80a1b74:	b118      	cbz	r0, 80a1b7e <_ZN3UDP4peekEv+0x14>
 80a1b76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1b78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1b7a:	5cd0      	ldrb	r0, [r2, r3]
 80a1b7c:	bd10      	pop	{r4, pc}
 80a1b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1b82:	bd10      	pop	{r4, pc}

080a1b84 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1b84:	4770      	bx	lr

080a1b86 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1b86:	4603      	mov	r3, r0
 80a1b88:	4608      	mov	r0, r1
 80a1b8a:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1b8c:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1b8e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1b90:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1b92:	6803      	ldr	r3, [r0, #0]
 80a1b94:	1a52      	subs	r2, r2, r1
 80a1b96:	68db      	ldr	r3, [r3, #12]
 80a1b98:	4421      	add	r1, r4
}
 80a1b9a:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1b9c:	4718      	bx	r3

080a1b9e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1b9e:	f1a0 0010 	sub.w	r0, r0, #16
 80a1ba2:	f7ff bff0 	b.w	80a1b86 <_ZNK3UDP7printToER5Print>

080a1ba6 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1ba8:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1baa:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1bac:	460f      	mov	r7, r1
 80a1bae:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1bb0:	f7ff fd36 	bl	80a1620 <_ZN5spark12NetworkClass4fromEm>
 80a1bb4:	6803      	ldr	r3, [r0, #0]
 80a1bb6:	68db      	ldr	r3, [r3, #12]
 80a1bb8:	4798      	blx	r3
 80a1bba:	b1b8      	cbz	r0, 80a1bec <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1bbc:	2102      	movs	r1, #2
 80a1bbe:	463b      	mov	r3, r7
 80a1bc0:	2211      	movs	r2, #17
 80a1bc2:	4608      	mov	r0, r1
 80a1bc4:	9600      	str	r6, [sp, #0]
 80a1bc6:	f7ff fa5b 	bl	80a1080 <socket_create>
 80a1bca:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1bcc:	f7ff fa50 	bl	80a1070 <socket_handle_valid>
 80a1bd0:	4604      	mov	r4, r0
 80a1bd2:	b130      	cbz	r0, 80a1be2 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1bd4:	2300      	movs	r3, #0
 80a1bd6:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1bd8:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1bda:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1bdc:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1bde:	2001      	movs	r0, #1
 80a1be0:	e004      	b.n	80a1bec <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a1be2:	682b      	ldr	r3, [r5, #0]
 80a1be4:	4628      	mov	r0, r5
 80a1be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1be8:	4798      	blx	r3
            bound = false;
 80a1bea:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1bec:	b003      	add	sp, #12
 80a1bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1bf0 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1bf0:	b538      	push	{r3, r4, r5, lr}
 80a1bf2:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1bf4:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1bf6:	f7ff fa63 	bl	80a10c0 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1bfa:	4285      	cmp	r5, r0
 80a1bfc:	d002      	beq.n	80a1c04 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1bfe:	6960      	ldr	r0, [r4, #20]
 80a1c00:	f7ff fa56 	bl	80a10b0 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1c04:	f7ff fa5c 	bl	80a10c0 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1c08:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1c0a:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1c0c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1c0e:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1c10:	bd38      	pop	{r3, r4, r5, pc}

080a1c12 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1c12:	b530      	push	{r4, r5, lr}
 80a1c14:	b087      	sub	sp, #28
 80a1c16:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1c1a:	2502      	movs	r5, #2
 80a1c1c:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1c20:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1c24:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1c26:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1c28:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1c2c:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1c30:	799c      	ldrb	r4, [r3, #6]
 80a1c32:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1c36:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1c38:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1c3a:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1c3e:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1c42:	2310      	movs	r3, #16
 80a1c44:	9301      	str	r3, [sp, #4]
 80a1c46:	ab02      	add	r3, sp, #8
 80a1c48:	9300      	str	r3, [sp, #0]
 80a1c4a:	6940      	ldr	r0, [r0, #20]
 80a1c4c:	2300      	movs	r3, #0
 80a1c4e:	f7ff fa27 	bl	80a10a0 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1c52:	b007      	add	sp, #28
 80a1c54:	bd30      	pop	{r4, r5, pc}

080a1c56 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1c56:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1c58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1c5a:	4605      	mov	r5, r0
 80a1c5c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1c5e:	b113      	cbz	r3, 80a1c66 <_ZN3UDP5writeEPKhj+0x10>
 80a1c60:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1c62:	1a24      	subs	r4, r4, r0
 80a1c64:	e000      	b.n	80a1c68 <_ZN3UDP5writeEPKhj+0x12>
 80a1c66:	461c      	mov	r4, r3
 80a1c68:	4294      	cmp	r4, r2
 80a1c6a:	bf28      	it	cs
 80a1c6c:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1c6e:	4418      	add	r0, r3
 80a1c70:	4622      	mov	r2, r4
 80a1c72:	f001 fce3 	bl	80a363c <memcpy>
    _offset += size;
 80a1c76:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1c78:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1c7a:	4423      	add	r3, r4
 80a1c7c:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1c7e:	bd38      	pop	{r3, r4, r5, pc}

080a1c80 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1c80:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1c82:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1c84:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1c86:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1c88:	460e      	mov	r6, r1
 80a1c8a:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1c8c:	4798      	blx	r3
 80a1c8e:	b188      	cbz	r0, 80a1cb4 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1c90:	6823      	ldr	r3, [r4, #0]
 80a1c92:	4620      	mov	r0, r4
 80a1c94:	691b      	ldr	r3, [r3, #16]
 80a1c96:	4798      	blx	r3
 80a1c98:	4285      	cmp	r5, r0
 80a1c9a:	bfa8      	it	ge
 80a1c9c:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1ca0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1ca2:	462a      	mov	r2, r5
 80a1ca4:	4419      	add	r1, r3
 80a1ca6:	4630      	mov	r0, r6
 80a1ca8:	f001 fcc8 	bl	80a363c <memcpy>
      _offset += read;
 80a1cac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1cae:	442b      	add	r3, r5
 80a1cb0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a1cb2:	e001      	b.n	80a1cb8 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a1cb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a1cb8:	4628      	mov	r0, r5
 80a1cba:	bd70      	pop	{r4, r5, r6, pc}

080a1cbc <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1cbe:	4604      	mov	r4, r0
 80a1cc0:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1cc2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1cc4:	460d      	mov	r5, r1
 80a1cc6:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1cc8:	f7ff fcaa 	bl	80a1620 <_ZN5spark12NetworkClass4fromEm>
 80a1ccc:	6803      	ldr	r3, [r0, #0]
 80a1cce:	68db      	ldr	r3, [r3, #12]
 80a1cd0:	4798      	blx	r3
 80a1cd2:	b310      	cbz	r0, 80a1d1a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1cd4:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1cd6:	f7ff f9f3 	bl	80a10c0 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1cda:	4287      	cmp	r7, r0
 80a1cdc:	d01d      	beq.n	80a1d1a <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1cde:	b1e5      	cbz	r5, 80a1d1a <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1ce0:	ab08      	add	r3, sp, #32
 80a1ce2:	2210      	movs	r2, #16
 80a1ce4:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a1ce8:	9301      	str	r3, [sp, #4]
 80a1cea:	eb0d 0302 	add.w	r3, sp, r2
 80a1cee:	9300      	str	r3, [sp, #0]
 80a1cf0:	4629      	mov	r1, r5
 80a1cf2:	2300      	movs	r3, #0
 80a1cf4:	4632      	mov	r2, r6
 80a1cf6:	6960      	ldr	r0, [r4, #20]
 80a1cf8:	f7ff f9ca 	bl	80a1090 <socket_receivefrom>
        if (ret >= 0)
 80a1cfc:	1e05      	subs	r5, r0, #0
 80a1cfe:	db0e      	blt.n	80a1d1e <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1d00:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1d04:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1d08:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1d0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1d0e:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1d10:	f104 001c 	add.w	r0, r4, #28
 80a1d14:	f7ff fc14 	bl	80a1540 <_ZN9IPAddressaSEPKh>
 80a1d18:	e001      	b.n	80a1d1e <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1d1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1d1e:	4628      	mov	r0, r5
 80a1d20:	b009      	add	sp, #36	; 0x24
 80a1d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d24 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1d28:	4606      	mov	r6, r0
 80a1d2a:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1d2c:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1d2e:	460d      	mov	r5, r1
 80a1d30:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1d32:	f7ff fc75 	bl	80a1620 <_ZN5spark12NetworkClass4fromEm>
 80a1d36:	6803      	ldr	r3, [r0, #0]
 80a1d38:	68db      	ldr	r3, [r3, #12]
 80a1d3a:	4798      	blx	r3
 80a1d3c:	b1f8      	cbz	r0, 80a1d7e <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1d3e:	4628      	mov	r0, r5
 80a1d40:	f001 fcb8 	bl	80a36b4 <strlen>
 80a1d44:	2400      	movs	r4, #0
 80a1d46:	b281      	uxth	r1, r0
 80a1d48:	9400      	str	r4, [sp, #0]
 80a1d4a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1d4c:	aa03      	add	r2, sp, #12
 80a1d4e:	4628      	mov	r0, r5
 80a1d50:	f7ff fa7e 	bl	80a1250 <inet_gethostbyname>
 80a1d54:	b990      	cbnz	r0, 80a1d7c <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a1d56:	a903      	add	r1, sp, #12
 80a1d58:	a808      	add	r0, sp, #32
 80a1d5a:	f7ff fbbd 	bl	80a14d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1d5e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1d60:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1d62:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1d64:	4b07      	ldr	r3, [pc, #28]	; (80a1d84 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a1d66:	ad09      	add	r5, sp, #36	; 0x24
 80a1d68:	930e      	str	r3, [sp, #56]	; 0x38
 80a1d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1d6e:	682b      	ldr	r3, [r5, #0]
 80a1d70:	4642      	mov	r2, r8
 80a1d72:	7023      	strb	r3, [r4, #0]
 80a1d74:	a90e      	add	r1, sp, #56	; 0x38
 80a1d76:	4630      	mov	r0, r6
 80a1d78:	47b8      	blx	r7
 80a1d7a:	e000      	b.n	80a1d7e <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1d7c:	4620      	mov	r0, r4
}
 80a1d7e:	b014      	add	sp, #80	; 0x50
 80a1d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1d84:	080a3858 	.word	0x080a3858

080a1d88 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1d88:	b570      	push	{r4, r5, r6, lr}
 80a1d8a:	4604      	mov	r4, r0
 80a1d8c:	4606      	mov	r6, r0
 80a1d8e:	4b05      	ldr	r3, [pc, #20]	; (80a1da4 <_ZN3UDP8remoteIPEv+0x1c>)
 80a1d90:	f101 0520 	add.w	r5, r1, #32
 80a1d94:	f844 3b04 	str.w	r3, [r4], #4
 80a1d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1d9c:	682b      	ldr	r3, [r5, #0]
 80a1d9e:	4630      	mov	r0, r6
 80a1da0:	7023      	strb	r3, [r4, #0]
 80a1da2:	bd70      	pop	{r4, r5, r6, pc}
 80a1da4:	080a3858 	.word	0x080a3858

080a1da8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1daa:	4694      	mov	ip, r2
 80a1dac:	468e      	mov	lr, r1
 80a1dae:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1db0:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1db2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1db4:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a1db6:	4a09      	ldr	r2, [pc, #36]	; (80a1ddc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a1db8:	ac03      	add	r4, sp, #12
 80a1dba:	1d1d      	adds	r5, r3, #4
 80a1dbc:	9202      	str	r2, [sp, #8]
 80a1dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1dc2:	682b      	ldr	r3, [r5, #0]
 80a1dc4:	4662      	mov	r2, ip
 80a1dc6:	7023      	strb	r3, [r4, #0]
 80a1dc8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a1dcc:	4671      	mov	r1, lr
 80a1dce:	9300      	str	r3, [sp, #0]
 80a1dd0:	4630      	mov	r0, r6
 80a1dd2:	ab02      	add	r3, sp, #8
 80a1dd4:	47b8      	blx	r7
    }
 80a1dd6:	b009      	add	sp, #36	; 0x24
 80a1dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1dda:	bf00      	nop
 80a1ddc:	080a3858 	.word	0x080a3858

080a1de0 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1de2:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1de4:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1de6:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1de8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1dea:	4b0d      	ldr	r3, [pc, #52]	; (80a1e20 <_ZN3UDP9endPacketEv+0x40>)
 80a1dec:	ad03      	add	r5, sp, #12
 80a1dee:	f100 0620 	add.w	r6, r0, #32
 80a1df2:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a1df6:	9302      	str	r3, [sp, #8]
 80a1df8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1dfc:	6833      	ldr	r3, [r6, #0]
 80a1dfe:	4672      	mov	r2, lr
 80a1e00:	702b      	strb	r3, [r5, #0]
 80a1e02:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1e06:	9300      	str	r3, [sp, #0]
 80a1e08:	4620      	mov	r0, r4
 80a1e0a:	ab02      	add	r3, sp, #8
 80a1e0c:	47b8      	blx	r7
 80a1e0e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1e10:	6823      	ldr	r3, [r4, #0]
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	69db      	ldr	r3, [r3, #28]
 80a1e16:	4798      	blx	r3
    return result;
}
 80a1e18:	4628      	mov	r0, r5
 80a1e1a:	b009      	add	sp, #36	; 0x24
 80a1e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e1e:	bf00      	nop
 80a1e20:	080a3858 	.word	0x080a3858

080a1e24 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1e24:	b538      	push	{r3, r4, r5, lr}
 80a1e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e2a:	6083      	str	r3, [r0, #8]
 80a1e2c:	4b0b      	ldr	r3, [pc, #44]	; (80a1e5c <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1e2e:	2500      	movs	r5, #0
 80a1e30:	f103 0208 	add.w	r2, r3, #8
 80a1e34:	336c      	adds	r3, #108	; 0x6c
 80a1e36:	6002      	str	r2, [r0, #0]
 80a1e38:	6103      	str	r3, [r0, #16]
 80a1e3a:	6045      	str	r5, [r0, #4]
 80a1e3c:	4604      	mov	r4, r0
 80a1e3e:	f7ff f93f 	bl	80a10c0 <socket_handle_invalid>
 80a1e42:	6160      	str	r0, [r4, #20]
 80a1e44:	f104 001c 	add.w	r0, r4, #28
 80a1e48:	f7ff fb38 	bl	80a14bc <_ZN9IPAddressC1Ev>
 80a1e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1e50:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1e52:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1e54:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1e56:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1e58:	4620      	mov	r0, r4
 80a1e5a:	bd38      	pop	{r3, r4, r5, pc}
 80a1e5c:	080a39c8 	.word	0x080a39c8

080a1e60 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1e60:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1e62:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1e66:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1e68:	b123      	cbz	r3, 80a1e74 <_ZN3UDP13releaseBufferEv+0x14>
 80a1e6a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1e6c:	b110      	cbz	r0, 80a1e74 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a1e6e:	2101      	movs	r1, #1
 80a1e70:	f000 fb57 	bl	80a2522 <_ZdlPvj>
    }
    _buffer = NULL;
 80a1e74:	2300      	movs	r3, #0
 80a1e76:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1e78:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1e7c:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1e7e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1e80:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1e82:	bd10      	pop	{r4, pc}

080a1e84 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1e84:	b570      	push	{r4, r5, r6, lr}
 80a1e86:	4604      	mov	r4, r0
 80a1e88:	4616      	mov	r6, r2
 80a1e8a:	460d      	mov	r5, r1
    releaseBuffer();
 80a1e8c:	f7ff ffe8 	bl	80a1e60 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1e90:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a1e92:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1e94:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a1e96:	b93e      	cbnz	r6, 80a1ea8 <_ZN3UDP9setBufferEjPh+0x24>
 80a1e98:	b135      	cbz	r5, 80a1ea8 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1e9a:	4628      	mov	r0, r5
 80a1e9c:	f7fe f8fd 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a1ea0:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a1ea2:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1ea4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1eaa:	b103      	cbz	r3, 80a1eae <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1eac:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1eae:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1eb0:	3000      	adds	r0, #0
 80a1eb2:	bf18      	it	ne
 80a1eb4:	2001      	movne	r0, #1
 80a1eb6:	bd70      	pop	{r4, r5, r6, pc}

080a1eb8 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1eba:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1ebc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1ebe:	4605      	mov	r5, r0
 80a1ec0:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1ec2:	b91a      	cbnz	r2, 80a1ecc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a1ec4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1ec6:	b109      	cbz	r1, 80a1ecc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a1ec8:	f7ff ffdc 	bl	80a1e84 <_ZN3UDP9setBufferEjPh>
 80a1ecc:	f105 0620 	add.w	r6, r5, #32
 80a1ed0:	3404      	adds	r4, #4
 80a1ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1ed4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1ed6:	6823      	ldr	r3, [r4, #0]
 80a1ed8:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1eda:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a1edc:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1ede:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1ee0:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a1ee2:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a1ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ee6 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1ee6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a1ee8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1eea:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a1eec:	b91a      	cbnz	r2, 80a1ef6 <_ZN3UDP11parsePacketEm+0x10>
 80a1eee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1ef0:	b109      	cbz	r1, 80a1ef6 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a1ef2:	f7ff ffc7 	bl	80a1e84 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1ef6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1ef8:	2300      	movs	r3, #0
 80a1efa:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1efc:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1efe:	b141      	cbz	r1, 80a1f12 <_ZN3UDP11parsePacketEm+0x2c>
 80a1f00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1f02:	b132      	cbz	r2, 80a1f12 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a1f04:	6820      	ldr	r0, [r4, #0]
 80a1f06:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a1f08:	4620      	mov	r0, r4
 80a1f0a:	47a8      	blx	r5
        if (result>0) {
 80a1f0c:	2800      	cmp	r0, #0
            _total = result;
 80a1f0e:	bfc8      	it	gt
 80a1f10:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a1f12:	6823      	ldr	r3, [r4, #0]
 80a1f14:	4620      	mov	r0, r4
}
 80a1f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a1f1a:	691b      	ldr	r3, [r3, #16]
 80a1f1c:	4718      	bx	r3

080a1f1e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1f1e:	4770      	bx	lr

080a1f20 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f20:	7441      	strb	r1, [r0, #17]
 80a1f22:	4770      	bx	lr

080a1f24 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1f24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1f26:	7c00      	ldrb	r0, [r0, #16]
 80a1f28:	f7ff f94a 	bl	80a11c0 <HAL_USART_Available_Data_For_Write>
}
 80a1f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f30:	bd08      	pop	{r3, pc}

080a1f32 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f32:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f34:	7c00      	ldrb	r0, [r0, #16]
 80a1f36:	f7ff f91b 	bl	80a1170 <HAL_USART_Available_Data>
}
 80a1f3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f3e:	bd08      	pop	{r3, pc}

080a1f40 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f40:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1f42:	7c00      	ldrb	r0, [r0, #16]
 80a1f44:	f7ff f924 	bl	80a1190 <HAL_USART_Peek_Data>
}
 80a1f48:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f4c:	bf28      	it	cs
 80a1f4e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f52:	bd08      	pop	{r3, pc}

080a1f54 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1f54:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1f56:	7c00      	ldrb	r0, [r0, #16]
 80a1f58:	f7ff f912 	bl	80a1180 <HAL_USART_Read_Data>
}
 80a1f5c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f60:	bf28      	it	cs
 80a1f62:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f66:	bd08      	pop	{r3, pc}

080a1f68 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f68:	7c00      	ldrb	r0, [r0, #16]
 80a1f6a:	f7ff b919 	b.w	80a11a0 <HAL_USART_Flush_Data>

080a1f6e <_ZN11USARTSerialD0Ev>:
 80a1f6e:	b510      	push	{r4, lr}
 80a1f70:	4604      	mov	r4, r0
 80a1f72:	2114      	movs	r1, #20
 80a1f74:	f000 fad5 	bl	80a2522 <_ZdlPvj>
 80a1f78:	4620      	mov	r0, r4
 80a1f7a:	bd10      	pop	{r4, pc}

080a1f7c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f7c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f7e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f80:	4604      	mov	r4, r0
 80a1f82:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f84:	b925      	cbnz	r5, 80a1f90 <_ZN11USARTSerial5writeEh+0x14>
 80a1f86:	7c00      	ldrb	r0, [r0, #16]
 80a1f88:	f7ff f91a 	bl	80a11c0 <HAL_USART_Available_Data_For_Write>
 80a1f8c:	2800      	cmp	r0, #0
 80a1f8e:	dd05      	ble.n	80a1f9c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f90:	4631      	mov	r1, r6
 80a1f92:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f98:	f7ff b8e2 	b.w	80a1160 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f9c:	4628      	mov	r0, r5
 80a1f9e:	bd70      	pop	{r4, r5, r6, pc}

080a1fa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	4604      	mov	r4, r0
 80a1fa4:	4608      	mov	r0, r1
 80a1fa6:	4611      	mov	r1, r2
 80a1fa8:	2200      	movs	r2, #0
 80a1faa:	6062      	str	r2, [r4, #4]
 80a1fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1fb0:	60a2      	str	r2, [r4, #8]
 80a1fb2:	4a05      	ldr	r2, [pc, #20]	; (80a1fc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1fb4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1fb6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1fb8:	2201      	movs	r2, #1
 80a1fba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1fbc:	461a      	mov	r2, r3
 80a1fbe:	f7ff f8c7 	bl	80a1150 <HAL_USART_Init>
}
 80a1fc2:	4620      	mov	r0, r4
 80a1fc4:	bd10      	pop	{r4, pc}
 80a1fc6:	bf00      	nop
 80a1fc8:	080a3a40 	.word	0x080a3a40

080a1fcc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1fcc:	7c00      	ldrb	r0, [r0, #16]
 80a1fce:	f7ff b8ef 	b.w	80a11b0 <HAL_USART_Is_Enabled>
	...

080a1fd4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1fd4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1fd6:	4d0c      	ldr	r5, [pc, #48]	; (80a2008 <_Z22__fetch_global_Serial1v+0x34>)
 80a1fd8:	6829      	ldr	r1, [r5, #0]
 80a1fda:	f011 0401 	ands.w	r4, r1, #1
 80a1fde:	d111      	bne.n	80a2004 <_Z22__fetch_global_Serial1v+0x30>
 80a1fe0:	4628      	mov	r0, r5
 80a1fe2:	f7fe f85e 	bl	80a00a2 <__cxa_guard_acquire>
 80a1fe6:	b168      	cbz	r0, 80a2004 <_Z22__fetch_global_Serial1v+0x30>
 80a1fe8:	4a08      	ldr	r2, [pc, #32]	; (80a200c <_Z22__fetch_global_Serial1v+0x38>)
 80a1fea:	4621      	mov	r1, r4
 80a1fec:	4b08      	ldr	r3, [pc, #32]	; (80a2010 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1fee:	4809      	ldr	r0, [pc, #36]	; (80a2014 <_Z22__fetch_global_Serial1v+0x40>)
 80a1ff0:	f7ff ffd6 	bl	80a1fa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1ff4:	4628      	mov	r0, r5
 80a1ff6:	f7fe f859 	bl	80a00ac <__cxa_guard_release>
 80a1ffa:	4a07      	ldr	r2, [pc, #28]	; (80a2018 <_Z22__fetch_global_Serial1v+0x44>)
 80a1ffc:	4907      	ldr	r1, [pc, #28]	; (80a201c <_Z22__fetch_global_Serial1v+0x48>)
 80a1ffe:	4805      	ldr	r0, [pc, #20]	; (80a2014 <_Z22__fetch_global_Serial1v+0x40>)
 80a2000:	f000 fa8a 	bl	80a2518 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2004:	4803      	ldr	r0, [pc, #12]	; (80a2014 <_Z22__fetch_global_Serial1v+0x40>)
 80a2006:	bd38      	pop	{r3, r4, r5, pc}
 80a2008:	20000268 	.word	0x20000268
 80a200c:	2000026c 	.word	0x2000026c
 80a2010:	200001e4 	.word	0x200001e4
 80a2014:	200001d0 	.word	0x200001d0
 80a2018:	2000007c 	.word	0x2000007c
 80a201c:	080a1f1f 	.word	0x080a1f1f

080a2020 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2020:	7441      	strb	r1, [r0, #17]
 80a2022:	4770      	bx	lr

080a2024 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2024:	4770      	bx	lr

080a2026 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2026:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2028:	2100      	movs	r1, #0
 80a202a:	7c00      	ldrb	r0, [r0, #16]
 80a202c:	f7ff f8f0 	bl	80a1210 <HAL_USB_USART_Receive_Data>
}
 80a2030:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2034:	bf28      	it	cs
 80a2036:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a203a:	bd08      	pop	{r3, pc}

080a203c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a203c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a203e:	2101      	movs	r1, #1
 80a2040:	7c00      	ldrb	r0, [r0, #16]
 80a2042:	f7ff f8e5 	bl	80a1210 <HAL_USB_USART_Receive_Data>
}
 80a2046:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a204a:	bf28      	it	cs
 80a204c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2050:	bd08      	pop	{r3, pc}

080a2052 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2052:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2054:	7c00      	ldrb	r0, [r0, #16]
 80a2056:	f7ff f8d3 	bl	80a1200 <HAL_USB_USART_Available_Data_For_Write>
}
 80a205a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a205e:	bd08      	pop	{r3, pc}

080a2060 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2060:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2062:	7c00      	ldrb	r0, [r0, #16]
 80a2064:	f7ff f8c4 	bl	80a11f0 <HAL_USB_USART_Available_Data>
}
 80a2068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a206c:	bd08      	pop	{r3, pc}

080a206e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a206e:	7c00      	ldrb	r0, [r0, #16]
 80a2070:	f7ff b8de 	b.w	80a1230 <HAL_USB_USART_Flush_Data>

080a2074 <_ZN9USBSerialD0Ev>:
 80a2074:	b510      	push	{r4, lr}
 80a2076:	4604      	mov	r4, r0
 80a2078:	2114      	movs	r1, #20
 80a207a:	f000 fa52 	bl	80a2522 <_ZdlPvj>
 80a207e:	4620      	mov	r0, r4
 80a2080:	bd10      	pop	{r4, pc}

080a2082 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2082:	b538      	push	{r3, r4, r5, lr}
 80a2084:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2086:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2088:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a208a:	f7ff f8b9 	bl	80a1200 <HAL_USB_USART_Available_Data_For_Write>
 80a208e:	2800      	cmp	r0, #0
 80a2090:	dc01      	bgt.n	80a2096 <_ZN9USBSerial5writeEh+0x14>
 80a2092:	7c60      	ldrb	r0, [r4, #17]
 80a2094:	b128      	cbz	r0, 80a20a2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2096:	4629      	mov	r1, r5
 80a2098:	7c20      	ldrb	r0, [r4, #16]
 80a209a:	f7ff f8c1 	bl	80a1220 <HAL_USB_USART_Send_Data>
 80a209e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a20a2:	bd38      	pop	{r3, r4, r5, pc}

080a20a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a20a4:	b510      	push	{r4, lr}
 80a20a6:	4604      	mov	r4, r0
 80a20a8:	2300      	movs	r3, #0
 80a20aa:	6063      	str	r3, [r4, #4]
 80a20ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a20b0:	60a3      	str	r3, [r4, #8]
 80a20b2:	4b05      	ldr	r3, [pc, #20]	; (80a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a20b4:	4608      	mov	r0, r1
 80a20b6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a20b8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a20ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a20bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a20be:	4611      	mov	r1, r2
 80a20c0:	f7ff f886 	bl	80a11d0 <HAL_USB_USART_Init>
}
 80a20c4:	4620      	mov	r0, r4
 80a20c6:	bd10      	pop	{r4, pc}
 80a20c8:	080a3a70 	.word	0x080a3a70

080a20cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a20cc:	2200      	movs	r2, #0
 80a20ce:	7c00      	ldrb	r0, [r0, #16]
 80a20d0:	f7ff b886 	b.w	80a11e0 <HAL_USB_USART_Begin>

080a20d4 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a20d4:	7c00      	ldrb	r0, [r0, #16]
 80a20d6:	f7ff b8b3 	b.w	80a1240 <HAL_USB_USART_Is_Enabled>

080a20da <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a20da:	f7ff bffb 	b.w	80a20d4 <_ZN9USBSerial9isEnabledEv>
	...

080a20e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a20e0:	b510      	push	{r4, lr}
 80a20e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a20e4:	2214      	movs	r2, #20
 80a20e6:	2100      	movs	r1, #0
 80a20e8:	f001 fab3 	bl	80a3652 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20ec:	4b05      	ldr	r3, [pc, #20]	; (80a2104 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a20ee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a20f2:	4b05      	ldr	r3, [pc, #20]	; (80a2108 <_Z19acquireSerialBufferv+0x28>)
 80a20f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a20f6:	f240 1301 	movw	r3, #257	; 0x101
 80a20fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a20fc:	2381      	movs	r3, #129	; 0x81
 80a20fe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2100:	bd10      	pop	{r4, pc}
 80a2102:	bf00      	nop
 80a2104:	20000375 	.word	0x20000375
 80a2108:	200002f4 	.word	0x200002f4

080a210c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a210c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a210e:	4d0e      	ldr	r5, [pc, #56]	; (80a2148 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2110:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2112:	a801      	add	r0, sp, #4
 80a2114:	f7ff ffe4 	bl	80a20e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2118:	6829      	ldr	r1, [r5, #0]
 80a211a:	f011 0401 	ands.w	r4, r1, #1
 80a211e:	d110      	bne.n	80a2142 <_Z16_fetch_usbserialv+0x36>
 80a2120:	4628      	mov	r0, r5
 80a2122:	f7fd ffbe 	bl	80a00a2 <__cxa_guard_acquire>
 80a2126:	b160      	cbz	r0, 80a2142 <_Z16_fetch_usbserialv+0x36>
 80a2128:	aa01      	add	r2, sp, #4
 80a212a:	4621      	mov	r1, r4
 80a212c:	4807      	ldr	r0, [pc, #28]	; (80a214c <_Z16_fetch_usbserialv+0x40>)
 80a212e:	f7ff ffb9 	bl	80a20a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2132:	4628      	mov	r0, r5
 80a2134:	f7fd ffba 	bl	80a00ac <__cxa_guard_release>
 80a2138:	4a05      	ldr	r2, [pc, #20]	; (80a2150 <_Z16_fetch_usbserialv+0x44>)
 80a213a:	4906      	ldr	r1, [pc, #24]	; (80a2154 <_Z16_fetch_usbserialv+0x48>)
 80a213c:	4803      	ldr	r0, [pc, #12]	; (80a214c <_Z16_fetch_usbserialv+0x40>)
 80a213e:	f000 f9eb 	bl	80a2518 <__aeabi_atexit>
	return _usbserial;
}
 80a2142:	4802      	ldr	r0, [pc, #8]	; (80a214c <_Z16_fetch_usbserialv+0x40>)
 80a2144:	b007      	add	sp, #28
 80a2146:	bd30      	pop	{r4, r5, pc}
 80a2148:	200002f0 	.word	0x200002f0
 80a214c:	20000478 	.word	0x20000478
 80a2150:	2000007c 	.word	0x2000007c
 80a2154:	080a2025 	.word	0x080a2025

080a2158 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2158:	b510      	push	{r4, lr}
 80a215a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a215c:	2214      	movs	r2, #20
 80a215e:	2100      	movs	r1, #0
 80a2160:	f001 fa77 	bl	80a3652 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2164:	4b05      	ldr	r3, [pc, #20]	; (80a217c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2166:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2168:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a216a:	4b05      	ldr	r3, [pc, #20]	; (80a2180 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a216c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a216e:	f240 1301 	movw	r3, #257	; 0x101
 80a2172:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2174:	2381      	movs	r3, #129	; 0x81
 80a2176:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2178:	bd10      	pop	{r4, pc}
 80a217a:	bf00      	nop
 80a217c:	20000528 	.word	0x20000528
 80a2180:	20000490 	.word	0x20000490

080a2184 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2184:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2186:	4c0e      	ldr	r4, [pc, #56]	; (80a21c0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2188:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a218a:	a801      	add	r0, sp, #4
 80a218c:	f7ff ffe4 	bl	80a2158 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2190:	6823      	ldr	r3, [r4, #0]
 80a2192:	07db      	lsls	r3, r3, #31
 80a2194:	d410      	bmi.n	80a21b8 <_Z17_fetch_usbserial1v+0x34>
 80a2196:	4620      	mov	r0, r4
 80a2198:	f7fd ff83 	bl	80a00a2 <__cxa_guard_acquire>
 80a219c:	b160      	cbz	r0, 80a21b8 <_Z17_fetch_usbserial1v+0x34>
 80a219e:	aa01      	add	r2, sp, #4
 80a21a0:	2101      	movs	r1, #1
 80a21a2:	4808      	ldr	r0, [pc, #32]	; (80a21c4 <_Z17_fetch_usbserial1v+0x40>)
 80a21a4:	f7ff ff7e 	bl	80a20a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	f7fd ff7f 	bl	80a00ac <__cxa_guard_release>
 80a21ae:	4a06      	ldr	r2, [pc, #24]	; (80a21c8 <_Z17_fetch_usbserial1v+0x44>)
 80a21b0:	4906      	ldr	r1, [pc, #24]	; (80a21cc <_Z17_fetch_usbserial1v+0x48>)
 80a21b2:	4804      	ldr	r0, [pc, #16]	; (80a21c4 <_Z17_fetch_usbserial1v+0x40>)
 80a21b4:	f000 f9b0 	bl	80a2518 <__aeabi_atexit>
  return _usbserial1;
}
 80a21b8:	4802      	ldr	r0, [pc, #8]	; (80a21c4 <_Z17_fetch_usbserial1v+0x40>)
 80a21ba:	b006      	add	sp, #24
 80a21bc:	bd10      	pop	{r4, pc}
 80a21be:	bf00      	nop
 80a21c0:	2000048c 	.word	0x2000048c
 80a21c4:	20000514 	.word	0x20000514
 80a21c8:	2000007c 	.word	0x2000007c
 80a21cc:	080a2025 	.word	0x080a2025

080a21d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a21d0:	2200      	movs	r2, #0
 80a21d2:	4611      	mov	r1, r2
 80a21d4:	6840      	ldr	r0, [r0, #4]
 80a21d6:	f7ff b88f 	b.w	80a12f8 <network_ready>

080a21da <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21dc:	4616      	mov	r6, r2
 80a21de:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a21e0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21e2:	460f      	mov	r7, r1
 80a21e4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a21e6:	2100      	movs	r1, #0
 80a21e8:	a803      	add	r0, sp, #12
 80a21ea:	f001 fa32 	bl	80a3652 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a21ee:	4630      	mov	r0, r6
 80a21f0:	f001 fa60 	bl	80a36b4 <strlen>
 80a21f4:	2500      	movs	r5, #0
 80a21f6:	9500      	str	r5, [sp, #0]
 80a21f8:	b281      	uxth	r1, r0
 80a21fa:	687b      	ldr	r3, [r7, #4]
 80a21fc:	aa03      	add	r2, sp, #12
 80a21fe:	4630      	mov	r0, r6
 80a2200:	f7ff f826 	bl	80a1250 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2204:	b120      	cbz	r0, 80a2210 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2206:	4629      	mov	r1, r5
 80a2208:	4620      	mov	r0, r4
 80a220a:	f7ff f977 	bl	80a14fc <_ZN9IPAddressC1Em>
 80a220e:	e003      	b.n	80a2218 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2210:	a903      	add	r1, sp, #12
 80a2212:	4620      	mov	r0, r4
 80a2214:	f7ff f960 	bl	80a14d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2218:	4620      	mov	r0, r4
 80a221a:	b009      	add	sp, #36	; 0x24
 80a221c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a221e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a221e:	2200      	movs	r2, #0
 80a2220:	4611      	mov	r1, r2
 80a2222:	6840      	ldr	r0, [r0, #4]
 80a2224:	f7ff b888 	b.w	80a1338 <network_listening>

080a2228 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2228:	2200      	movs	r2, #0
 80a222a:	4611      	mov	r1, r2
 80a222c:	6840      	ldr	r0, [r0, #4]
 80a222e:	f7ff b893 	b.w	80a1358 <network_get_listen_timeout>

080a2232 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2232:	2200      	movs	r2, #0
 80a2234:	6840      	ldr	r0, [r0, #4]
 80a2236:	f7ff b887 	b.w	80a1348 <network_set_listen_timeout>

080a223a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a223a:	2200      	movs	r2, #0
 80a223c:	f081 0101 	eor.w	r1, r1, #1
 80a2240:	6840      	ldr	r0, [r0, #4]
 80a2242:	f7ff b871 	b.w	80a1328 <network_listen>

080a2246 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2246:	2300      	movs	r3, #0
 80a2248:	461a      	mov	r2, r3
 80a224a:	4619      	mov	r1, r3
 80a224c:	6840      	ldr	r0, [r0, #4]
 80a224e:	f7ff b863 	b.w	80a1318 <network_off>

080a2252 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2252:	2300      	movs	r3, #0
 80a2254:	461a      	mov	r2, r3
 80a2256:	4619      	mov	r1, r3
 80a2258:	6840      	ldr	r0, [r0, #4]
 80a225a:	f7ff b855 	b.w	80a1308 <network_on>

080a225e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a225e:	2200      	movs	r2, #0
 80a2260:	4611      	mov	r1, r2
 80a2262:	6840      	ldr	r0, [r0, #4]
 80a2264:	f7ff b838 	b.w	80a12d8 <network_connecting>

080a2268 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2268:	2200      	movs	r2, #0
 80a226a:	2102      	movs	r1, #2
 80a226c:	6840      	ldr	r0, [r0, #4]
 80a226e:	f7ff b83b 	b.w	80a12e8 <network_disconnect>

080a2272 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2272:	2300      	movs	r3, #0
 80a2274:	461a      	mov	r2, r3
 80a2276:	6840      	ldr	r0, [r0, #4]
 80a2278:	f7ff b826 	b.w	80a12c8 <network_connect>

080a227c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a227c:	4b02      	ldr	r3, [pc, #8]	; (80a2288 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a227e:	2204      	movs	r2, #4
 80a2280:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2282:	4a02      	ldr	r2, [pc, #8]	; (80a228c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2284:	601a      	str	r2, [r3, #0]
 80a2286:	4770      	bx	lr
 80a2288:	2000062c 	.word	0x2000062c
 80a228c:	080a3aa0 	.word	0x080a3aa0

080a2290 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2290:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2292:	4b14      	ldr	r3, [pc, #80]	; (80a22e4 <serialEventRun+0x54>)
 80a2294:	b133      	cbz	r3, 80a22a4 <serialEventRun+0x14>
 80a2296:	f7ff ff39 	bl	80a210c <_Z16_fetch_usbserialv>
 80a229a:	6803      	ldr	r3, [r0, #0]
 80a229c:	691b      	ldr	r3, [r3, #16]
 80a229e:	4798      	blx	r3
 80a22a0:	2800      	cmp	r0, #0
 80a22a2:	dc16      	bgt.n	80a22d2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a22a4:	4b10      	ldr	r3, [pc, #64]	; (80a22e8 <serialEventRun+0x58>)
 80a22a6:	b133      	cbz	r3, 80a22b6 <serialEventRun+0x26>
 80a22a8:	f7ff fe94 	bl	80a1fd4 <_Z22__fetch_global_Serial1v>
 80a22ac:	6803      	ldr	r3, [r0, #0]
 80a22ae:	691b      	ldr	r3, [r3, #16]
 80a22b0:	4798      	blx	r3
 80a22b2:	2800      	cmp	r0, #0
 80a22b4:	dc10      	bgt.n	80a22d8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a22b6:	4b0d      	ldr	r3, [pc, #52]	; (80a22ec <serialEventRun+0x5c>)
 80a22b8:	b10b      	cbz	r3, 80a22be <serialEventRun+0x2e>
 80a22ba:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a22be:	4b0c      	ldr	r3, [pc, #48]	; (80a22f0 <serialEventRun+0x60>)
 80a22c0:	b17b      	cbz	r3, 80a22e2 <serialEventRun+0x52>
 80a22c2:	f7ff ff5f 	bl	80a2184 <_Z17_fetch_usbserial1v>
 80a22c6:	6803      	ldr	r3, [r0, #0]
 80a22c8:	691b      	ldr	r3, [r3, #16]
 80a22ca:	4798      	blx	r3
 80a22cc:	2800      	cmp	r0, #0
 80a22ce:	dc06      	bgt.n	80a22de <serialEventRun+0x4e>
 80a22d0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a22d2:	f3af 8000 	nop.w
 80a22d6:	e7e5      	b.n	80a22a4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a22d8:	f3af 8000 	nop.w
 80a22dc:	e7eb      	b.n	80a22b6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a22de:	f3af 8000 	nop.w
 80a22e2:	bd08      	pop	{r3, pc}
	...

080a22f4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a22f4:	b508      	push	{r3, lr}
	serialEventRun();
 80a22f6:	f7ff ffcb 	bl	80a2290 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22fa:	f7fe fe37 	bl	80a0f6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22fe:	4b01      	ldr	r3, [pc, #4]	; (80a2304 <_post_loop+0x10>)
 80a2300:	6018      	str	r0, [r3, #0]
 80a2302:	bd08      	pop	{r3, pc}
 80a2304:	2000063c 	.word	0x2000063c

080a2308 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2308:	4802      	ldr	r0, [pc, #8]	; (80a2314 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a230a:	4a03      	ldr	r2, [pc, #12]	; (80a2318 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a230c:	4903      	ldr	r1, [pc, #12]	; (80a231c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a230e:	1a12      	subs	r2, r2, r0
 80a2310:	f001 b994 	b.w	80a363c <memcpy>
 80a2314:	40024000 	.word	0x40024000
 80a2318:	40024004 	.word	0x40024004
 80a231c:	080a3b70 	.word	0x080a3b70

080a2320 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2320:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2322:	2300      	movs	r3, #0
 80a2324:	9300      	str	r3, [sp, #0]
 80a2326:	461a      	mov	r2, r3
 80a2328:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a232c:	f7fe ffb2 	bl	80a1294 <system_ctrl_set_result>
}
 80a2330:	b003      	add	sp, #12
 80a2332:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2338 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2338:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a233a:	8843      	ldrh	r3, [r0, #2]
 80a233c:	2b0a      	cmp	r3, #10
 80a233e:	d008      	beq.n	80a2352 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2340:	2b50      	cmp	r3, #80	; 0x50
 80a2342:	d109      	bne.n	80a2358 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2344:	4b09      	ldr	r3, [pc, #36]	; (80a236c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2346:	681b      	ldr	r3, [r3, #0]
 80a2348:	b13b      	cbz	r3, 80a235a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a234a:	b003      	add	sp, #12
 80a234c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2350:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2352:	f7ff ffe5 	bl	80a2320 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2356:	e006      	b.n	80a2366 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2358:	2300      	movs	r3, #0
 80a235a:	9300      	str	r3, [sp, #0]
 80a235c:	461a      	mov	r2, r3
 80a235e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2362:	f7fe ff97 	bl	80a1294 <system_ctrl_set_result>
        break;
    }
}
 80a2366:	b003      	add	sp, #12
 80a2368:	f85d fb04 	ldr.w	pc, [sp], #4
 80a236c:	20000634 	.word	0x20000634

080a2370 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2370:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2372:	4c10      	ldr	r4, [pc, #64]	; (80a23b4 <module_user_init_hook+0x44>)
 80a2374:	4d10      	ldr	r5, [pc, #64]	; (80a23b8 <module_user_init_hook+0x48>)
 80a2376:	6823      	ldr	r3, [r4, #0]
 80a2378:	42ab      	cmp	r3, r5
 80a237a:	4b10      	ldr	r3, [pc, #64]	; (80a23bc <module_user_init_hook+0x4c>)
 80a237c:	bf0c      	ite	eq
 80a237e:	2201      	moveq	r2, #1
 80a2380:	2200      	movne	r2, #0
 80a2382:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2384:	d002      	beq.n	80a238c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2386:	f7ff ffbf 	bl	80a2308 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a238a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a238c:	f7fe fde6 	bl	80a0f5c <HAL_RNG_GetRandomNumber>
 80a2390:	4604      	mov	r4, r0
    srand(seed);
 80a2392:	f001 f967 	bl	80a3664 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2396:	4b0a      	ldr	r3, [pc, #40]	; (80a23c0 <module_user_init_hook+0x50>)
 80a2398:	b113      	cbz	r3, 80a23a0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a239a:	4620      	mov	r0, r4
 80a239c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a23a0:	2100      	movs	r1, #0
 80a23a2:	4807      	ldr	r0, [pc, #28]	; (80a23c0 <module_user_init_hook+0x50>)
 80a23a4:	f7fe ff80 	bl	80a12a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a23a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a23ac:	2100      	movs	r1, #0
 80a23ae:	4805      	ldr	r0, [pc, #20]	; (80a23c4 <module_user_init_hook+0x54>)
 80a23b0:	f7fe bf66 	b.w	80a1280 <system_ctrl_set_app_request_handler>
 80a23b4:	40024000 	.word	0x40024000
 80a23b8:	9a271c1e 	.word	0x9a271c1e
 80a23bc:	20000638 	.word	0x20000638
 80a23c0:	00000000 	.word	0x00000000
 80a23c4:	080a2339 	.word	0x080a2339

080a23c8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a23c8:	b510      	push	{r4, lr}
 80a23ca:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a23cc:	480f      	ldr	r0, [pc, #60]	; (80a240c <pinAvailable+0x44>)
 80a23ce:	f7ff fb2f 	bl	80a1a30 <_ZN8SPIClass9isEnabledEv>
 80a23d2:	b128      	cbz	r0, 80a23e0 <pinAvailable+0x18>
 80a23d4:	f1a4 030d 	sub.w	r3, r4, #13
 80a23d8:	2b02      	cmp	r3, #2
 80a23da:	d801      	bhi.n	80a23e0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a23dc:	2000      	movs	r0, #0
 80a23de:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a23e0:	f000 f840 	bl	80a2464 <_Z19__fetch_global_Wirev>
 80a23e4:	f7ff f84d 	bl	80a1482 <_ZN7TwoWire9isEnabledEv>
 80a23e8:	b108      	cbz	r0, 80a23ee <pinAvailable+0x26>
 80a23ea:	2c01      	cmp	r4, #1
 80a23ec:	d9f6      	bls.n	80a23dc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a23ee:	f7ff fdf1 	bl	80a1fd4 <_Z22__fetch_global_Serial1v>
 80a23f2:	f7ff fdeb 	bl	80a1fcc <_ZN11USARTSerial9isEnabledEv>
 80a23f6:	b118      	cbz	r0, 80a2400 <pinAvailable+0x38>
 80a23f8:	f1a4 0312 	sub.w	r3, r4, #18
 80a23fc:	2b01      	cmp	r3, #1
 80a23fe:	d9ed      	bls.n	80a23dc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2400:	2c17      	cmp	r4, #23
 80a2402:	bf8c      	ite	hi
 80a2404:	2000      	movhi	r0, #0
 80a2406:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2408:	bd10      	pop	{r4, pc}
 80a240a:	bf00      	nop
 80a240c:	20000670 	.word	0x20000670

080a2410 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2410:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2412:	b538      	push	{r3, r4, r5, lr}
 80a2414:	4604      	mov	r4, r0
 80a2416:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2418:	d80a      	bhi.n	80a2430 <pinMode+0x20>
 80a241a:	29ff      	cmp	r1, #255	; 0xff
 80a241c:	d008      	beq.n	80a2430 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a241e:	f7ff ffd3 	bl	80a23c8 <pinAvailable>
 80a2422:	b128      	cbz	r0, 80a2430 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2424:	4629      	mov	r1, r5
 80a2426:	4620      	mov	r0, r4
}
 80a2428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a242c:	f7fe bdae 	b.w	80a0f8c <HAL_Pin_Mode>
 80a2430:	bd38      	pop	{r3, r4, r5, pc}

080a2432 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2432:	b538      	push	{r3, r4, r5, lr}
 80a2434:	4604      	mov	r4, r0
 80a2436:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2438:	f7fe fdb0 	bl	80a0f9c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a243c:	28ff      	cmp	r0, #255	; 0xff
 80a243e:	d010      	beq.n	80a2462 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2440:	2806      	cmp	r0, #6
 80a2442:	d804      	bhi.n	80a244e <digitalWrite+0x1c>
 80a2444:	234d      	movs	r3, #77	; 0x4d
 80a2446:	fa23 f000 	lsr.w	r0, r3, r0
 80a244a:	07c3      	lsls	r3, r0, #31
 80a244c:	d409      	bmi.n	80a2462 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a244e:	4620      	mov	r0, r4
 80a2450:	f7ff ffba 	bl	80a23c8 <pinAvailable>
 80a2454:	b128      	cbz	r0, 80a2462 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2456:	4629      	mov	r1, r5
 80a2458:	4620      	mov	r0, r4
}
 80a245a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a245e:	f7fe bda5 	b.w	80a0fac <HAL_GPIO_Write>
 80a2462:	bd38      	pop	{r3, r4, r5, pc}

080a2464 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2464:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2466:	4d0b      	ldr	r5, [pc, #44]	; (80a2494 <_Z19__fetch_global_Wirev+0x30>)
 80a2468:	6829      	ldr	r1, [r5, #0]
 80a246a:	f011 0401 	ands.w	r4, r1, #1
 80a246e:	d10f      	bne.n	80a2490 <_Z19__fetch_global_Wirev+0x2c>
 80a2470:	4628      	mov	r0, r5
 80a2472:	f7fd fe16 	bl	80a00a2 <__cxa_guard_acquire>
 80a2476:	b158      	cbz	r0, 80a2490 <_Z19__fetch_global_Wirev+0x2c>
 80a2478:	4621      	mov	r1, r4
 80a247a:	4807      	ldr	r0, [pc, #28]	; (80a2498 <_Z19__fetch_global_Wirev+0x34>)
 80a247c:	f7fe ffd2 	bl	80a1424 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2480:	4628      	mov	r0, r5
 80a2482:	f7fd fe13 	bl	80a00ac <__cxa_guard_release>
 80a2486:	4a05      	ldr	r2, [pc, #20]	; (80a249c <_Z19__fetch_global_Wirev+0x38>)
 80a2488:	4905      	ldr	r1, [pc, #20]	; (80a24a0 <_Z19__fetch_global_Wirev+0x3c>)
 80a248a:	4803      	ldr	r0, [pc, #12]	; (80a2498 <_Z19__fetch_global_Wirev+0x34>)
 80a248c:	f000 f844 	bl	80a2518 <__aeabi_atexit>
	return wire;
}
 80a2490:	4801      	ldr	r0, [pc, #4]	; (80a2498 <_Z19__fetch_global_Wirev+0x34>)
 80a2492:	bd38      	pop	{r3, r4, r5, pc}
 80a2494:	20000640 	.word	0x20000640
 80a2498:	20000644 	.word	0x20000644
 80a249c:	2000007c 	.word	0x2000007c
 80a24a0:	080a13cb 	.word	0x080a13cb

080a24a4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a24a4:	b513      	push	{r0, r1, r4, lr}
 80a24a6:	4c08      	ldr	r4, [pc, #32]	; (80a24c8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a24a8:	2300      	movs	r3, #0
 80a24aa:	461a      	mov	r2, r3
 80a24ac:	4619      	mov	r1, r3
 80a24ae:	9300      	str	r3, [sp, #0]
 80a24b0:	4620      	mov	r0, r4
 80a24b2:	f7ff f839 	bl	80a1528 <_ZN9IPAddressC1Ehhhh>
 80a24b6:	4620      	mov	r0, r4
 80a24b8:	4a04      	ldr	r2, [pc, #16]	; (80a24cc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a24ba:	4905      	ldr	r1, [pc, #20]	; (80a24d0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a24bc:	b002      	add	sp, #8
 80a24be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a24c2:	f000 b829 	b.w	80a2518 <__aeabi_atexit>
 80a24c6:	bf00      	nop
 80a24c8:	20000658 	.word	0x20000658
 80a24cc:	2000007c 	.word	0x2000007c
 80a24d0:	080a00b3 	.word	0x080a00b3

080a24d4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24d4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a24d6:	4c0c      	ldr	r4, [pc, #48]	; (80a2508 <_GLOBAL__sub_I_SPI+0x34>)
 80a24d8:	4e0c      	ldr	r6, [pc, #48]	; (80a250c <_GLOBAL__sub_I_SPI+0x38>)
 80a24da:	4d0d      	ldr	r5, [pc, #52]	; (80a2510 <_GLOBAL__sub_I_SPI+0x3c>)
 80a24dc:	2100      	movs	r1, #0
 80a24de:	4620      	mov	r0, r4
 80a24e0:	f7ff fa26 	bl	80a1930 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a24e4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24e6:	4c0b      	ldr	r4, [pc, #44]	; (80a2514 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a24e8:	4632      	mov	r2, r6
 80a24ea:	4629      	mov	r1, r5
 80a24ec:	f000 f814 	bl	80a2518 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a24f0:	2101      	movs	r1, #1
 80a24f2:	4620      	mov	r0, r4
 80a24f4:	f7ff fa1c 	bl	80a1930 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a24f8:	4632      	mov	r2, r6
 80a24fa:	4629      	mov	r1, r5
 80a24fc:	4620      	mov	r0, r4
 80a24fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2502:	f000 b809 	b.w	80a2518 <__aeabi_atexit>
 80a2506:	bf00      	nop
 80a2508:	20000670 	.word	0x20000670
 80a250c:	2000007c 	.word	0x2000007c
 80a2510:	080a1921 	.word	0x080a1921
 80a2514:	20000680 	.word	0x20000680

080a2518 <__aeabi_atexit>:
 80a2518:	460b      	mov	r3, r1
 80a251a:	4601      	mov	r1, r0
 80a251c:	4618      	mov	r0, r3
 80a251e:	f001 b87f 	b.w	80a3620 <__cxa_atexit>

080a2522 <_ZdlPvj>:
 80a2522:	f7fd bdbc 	b.w	80a009e <_ZdlPv>
	...

080a2528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2528:	4b24      	ldr	r3, [pc, #144]	; (80a25bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a252a:	681a      	ldr	r2, [r3, #0]
 80a252c:	07d0      	lsls	r0, r2, #31
 80a252e:	bf5c      	itt	pl
 80a2530:	2201      	movpl	r2, #1
 80a2532:	601a      	strpl	r2, [r3, #0]
 80a2534:	4b22      	ldr	r3, [pc, #136]	; (80a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2536:	681a      	ldr	r2, [r3, #0]
 80a2538:	07d1      	lsls	r1, r2, #31
 80a253a:	bf5c      	itt	pl
 80a253c:	2201      	movpl	r2, #1
 80a253e:	601a      	strpl	r2, [r3, #0]
 80a2540:	4b20      	ldr	r3, [pc, #128]	; (80a25c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2542:	681a      	ldr	r2, [r3, #0]
 80a2544:	07d2      	lsls	r2, r2, #31
 80a2546:	bf5c      	itt	pl
 80a2548:	2201      	movpl	r2, #1
 80a254a:	601a      	strpl	r2, [r3, #0]
 80a254c:	4b1e      	ldr	r3, [pc, #120]	; (80a25c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a254e:	681a      	ldr	r2, [r3, #0]
 80a2550:	07d0      	lsls	r0, r2, #31
 80a2552:	bf5c      	itt	pl
 80a2554:	2201      	movpl	r2, #1
 80a2556:	601a      	strpl	r2, [r3, #0]
 80a2558:	4b1c      	ldr	r3, [pc, #112]	; (80a25cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a255a:	681a      	ldr	r2, [r3, #0]
 80a255c:	07d1      	lsls	r1, r2, #31
 80a255e:	bf5c      	itt	pl
 80a2560:	2201      	movpl	r2, #1
 80a2562:	601a      	strpl	r2, [r3, #0]
 80a2564:	4b1a      	ldr	r3, [pc, #104]	; (80a25d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2566:	681a      	ldr	r2, [r3, #0]
 80a2568:	07d2      	lsls	r2, r2, #31
 80a256a:	bf5c      	itt	pl
 80a256c:	2201      	movpl	r2, #1
 80a256e:	601a      	strpl	r2, [r3, #0]
 80a2570:	4b18      	ldr	r3, [pc, #96]	; (80a25d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2572:	681a      	ldr	r2, [r3, #0]
 80a2574:	07d0      	lsls	r0, r2, #31
 80a2576:	bf5c      	itt	pl
 80a2578:	2201      	movpl	r2, #1
 80a257a:	601a      	strpl	r2, [r3, #0]
 80a257c:	4b16      	ldr	r3, [pc, #88]	; (80a25d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a257e:	681a      	ldr	r2, [r3, #0]
 80a2580:	07d1      	lsls	r1, r2, #31
 80a2582:	bf5c      	itt	pl
 80a2584:	2201      	movpl	r2, #1
 80a2586:	601a      	strpl	r2, [r3, #0]
 80a2588:	4b14      	ldr	r3, [pc, #80]	; (80a25dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a258a:	681a      	ldr	r2, [r3, #0]
 80a258c:	07d2      	lsls	r2, r2, #31
 80a258e:	bf5c      	itt	pl
 80a2590:	2201      	movpl	r2, #1
 80a2592:	601a      	strpl	r2, [r3, #0]
 80a2594:	4b12      	ldr	r3, [pc, #72]	; (80a25e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2596:	681a      	ldr	r2, [r3, #0]
 80a2598:	07d0      	lsls	r0, r2, #31
 80a259a:	bf5c      	itt	pl
 80a259c:	2201      	movpl	r2, #1
 80a259e:	601a      	strpl	r2, [r3, #0]
 80a25a0:	4b10      	ldr	r3, [pc, #64]	; (80a25e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a25a2:	681a      	ldr	r2, [r3, #0]
 80a25a4:	07d1      	lsls	r1, r2, #31
 80a25a6:	bf5c      	itt	pl
 80a25a8:	2201      	movpl	r2, #1
 80a25aa:	601a      	strpl	r2, [r3, #0]
 80a25ac:	4b0e      	ldr	r3, [pc, #56]	; (80a25e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a25ae:	681a      	ldr	r2, [r3, #0]
 80a25b0:	07d2      	lsls	r2, r2, #31
 80a25b2:	bf5c      	itt	pl
 80a25b4:	2201      	movpl	r2, #1
 80a25b6:	601a      	strpl	r2, [r3, #0]
 80a25b8:	4770      	bx	lr
 80a25ba:	bf00      	nop
 80a25bc:	200006bc 	.word	0x200006bc
 80a25c0:	200006b8 	.word	0x200006b8
 80a25c4:	200006b4 	.word	0x200006b4
 80a25c8:	200006b0 	.word	0x200006b0
 80a25cc:	200006ac 	.word	0x200006ac
 80a25d0:	200006a8 	.word	0x200006a8
 80a25d4:	200006a4 	.word	0x200006a4
 80a25d8:	200006a0 	.word	0x200006a0
 80a25dc:	2000069c 	.word	0x2000069c
 80a25e0:	20000698 	.word	0x20000698
 80a25e4:	20000694 	.word	0x20000694
 80a25e8:	20000690 	.word	0x20000690

080a25ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a25ec:	4b18      	ldr	r3, [pc, #96]	; (80a2650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a25ee:	681a      	ldr	r2, [r3, #0]
 80a25f0:	07d1      	lsls	r1, r2, #31
 80a25f2:	bf5c      	itt	pl
 80a25f4:	2201      	movpl	r2, #1
 80a25f6:	601a      	strpl	r2, [r3, #0]
 80a25f8:	4b16      	ldr	r3, [pc, #88]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a25fa:	681a      	ldr	r2, [r3, #0]
 80a25fc:	07d2      	lsls	r2, r2, #31
 80a25fe:	bf5c      	itt	pl
 80a2600:	2201      	movpl	r2, #1
 80a2602:	601a      	strpl	r2, [r3, #0]
 80a2604:	4b14      	ldr	r3, [pc, #80]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2606:	681a      	ldr	r2, [r3, #0]
 80a2608:	07d0      	lsls	r0, r2, #31
 80a260a:	bf5c      	itt	pl
 80a260c:	2201      	movpl	r2, #1
 80a260e:	601a      	strpl	r2, [r3, #0]
 80a2610:	4b12      	ldr	r3, [pc, #72]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2612:	681a      	ldr	r2, [r3, #0]
 80a2614:	07d1      	lsls	r1, r2, #31
 80a2616:	bf5c      	itt	pl
 80a2618:	2201      	movpl	r2, #1
 80a261a:	601a      	strpl	r2, [r3, #0]
 80a261c:	4b10      	ldr	r3, [pc, #64]	; (80a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a261e:	681a      	ldr	r2, [r3, #0]
 80a2620:	07d2      	lsls	r2, r2, #31
 80a2622:	bf5c      	itt	pl
 80a2624:	2201      	movpl	r2, #1
 80a2626:	601a      	strpl	r2, [r3, #0]
 80a2628:	4b0e      	ldr	r3, [pc, #56]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a262a:	681a      	ldr	r2, [r3, #0]
 80a262c:	07d0      	lsls	r0, r2, #31
 80a262e:	bf5c      	itt	pl
 80a2630:	2201      	movpl	r2, #1
 80a2632:	601a      	strpl	r2, [r3, #0]
 80a2634:	4b0c      	ldr	r3, [pc, #48]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2636:	681a      	ldr	r2, [r3, #0]
 80a2638:	07d1      	lsls	r1, r2, #31
 80a263a:	bf5c      	itt	pl
 80a263c:	2201      	movpl	r2, #1
 80a263e:	601a      	strpl	r2, [r3, #0]
 80a2640:	4b0a      	ldr	r3, [pc, #40]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2642:	681a      	ldr	r2, [r3, #0]
 80a2644:	07d2      	lsls	r2, r2, #31
 80a2646:	bf5c      	itt	pl
 80a2648:	2201      	movpl	r2, #1
 80a264a:	601a      	strpl	r2, [r3, #0]
 80a264c:	4770      	bx	lr
 80a264e:	bf00      	nop
 80a2650:	200006dc 	.word	0x200006dc
 80a2654:	200006d8 	.word	0x200006d8
 80a2658:	200006d4 	.word	0x200006d4
 80a265c:	200006d0 	.word	0x200006d0
 80a2660:	200006cc 	.word	0x200006cc
 80a2664:	200006c8 	.word	0x200006c8
 80a2668:	200006c4 	.word	0x200006c4
 80a266c:	200006c0 	.word	0x200006c0

080a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2670:	4b18      	ldr	r3, [pc, #96]	; (80a26d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2672:	681a      	ldr	r2, [r3, #0]
 80a2674:	07d1      	lsls	r1, r2, #31
 80a2676:	bf5c      	itt	pl
 80a2678:	2201      	movpl	r2, #1
 80a267a:	601a      	strpl	r2, [r3, #0]
 80a267c:	4b16      	ldr	r3, [pc, #88]	; (80a26d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a267e:	681a      	ldr	r2, [r3, #0]
 80a2680:	07d2      	lsls	r2, r2, #31
 80a2682:	bf5c      	itt	pl
 80a2684:	2201      	movpl	r2, #1
 80a2686:	601a      	strpl	r2, [r3, #0]
 80a2688:	4b14      	ldr	r3, [pc, #80]	; (80a26dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a268a:	681a      	ldr	r2, [r3, #0]
 80a268c:	07d0      	lsls	r0, r2, #31
 80a268e:	bf5c      	itt	pl
 80a2690:	2201      	movpl	r2, #1
 80a2692:	601a      	strpl	r2, [r3, #0]
 80a2694:	4b12      	ldr	r3, [pc, #72]	; (80a26e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2696:	681a      	ldr	r2, [r3, #0]
 80a2698:	07d1      	lsls	r1, r2, #31
 80a269a:	bf5c      	itt	pl
 80a269c:	2201      	movpl	r2, #1
 80a269e:	601a      	strpl	r2, [r3, #0]
 80a26a0:	4b10      	ldr	r3, [pc, #64]	; (80a26e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26a2:	681a      	ldr	r2, [r3, #0]
 80a26a4:	07d2      	lsls	r2, r2, #31
 80a26a6:	bf5c      	itt	pl
 80a26a8:	2201      	movpl	r2, #1
 80a26aa:	601a      	strpl	r2, [r3, #0]
 80a26ac:	4b0e      	ldr	r3, [pc, #56]	; (80a26e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26ae:	681a      	ldr	r2, [r3, #0]
 80a26b0:	07d0      	lsls	r0, r2, #31
 80a26b2:	bf5c      	itt	pl
 80a26b4:	2201      	movpl	r2, #1
 80a26b6:	601a      	strpl	r2, [r3, #0]
 80a26b8:	4b0c      	ldr	r3, [pc, #48]	; (80a26ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26ba:	681a      	ldr	r2, [r3, #0]
 80a26bc:	07d1      	lsls	r1, r2, #31
 80a26be:	bf5c      	itt	pl
 80a26c0:	2201      	movpl	r2, #1
 80a26c2:	601a      	strpl	r2, [r3, #0]
 80a26c4:	4b0a      	ldr	r3, [pc, #40]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26c6:	681a      	ldr	r2, [r3, #0]
 80a26c8:	07d2      	lsls	r2, r2, #31
 80a26ca:	bf5c      	itt	pl
 80a26cc:	2201      	movpl	r2, #1
 80a26ce:	601a      	strpl	r2, [r3, #0]
 80a26d0:	4770      	bx	lr
 80a26d2:	bf00      	nop
 80a26d4:	200006fc 	.word	0x200006fc
 80a26d8:	200006f8 	.word	0x200006f8
 80a26dc:	200006f4 	.word	0x200006f4
 80a26e0:	200006f0 	.word	0x200006f0
 80a26e4:	200006ec 	.word	0x200006ec
 80a26e8:	200006e8 	.word	0x200006e8
 80a26ec:	200006e4 	.word	0x200006e4
 80a26f0:	200006e0 	.word	0x200006e0

080a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a26f4:	4b24      	ldr	r3, [pc, #144]	; (80a2788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a26f6:	681a      	ldr	r2, [r3, #0]
 80a26f8:	07d0      	lsls	r0, r2, #31
 80a26fa:	bf5c      	itt	pl
 80a26fc:	2201      	movpl	r2, #1
 80a26fe:	601a      	strpl	r2, [r3, #0]
 80a2700:	4b22      	ldr	r3, [pc, #136]	; (80a278c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2702:	681a      	ldr	r2, [r3, #0]
 80a2704:	07d1      	lsls	r1, r2, #31
 80a2706:	bf5c      	itt	pl
 80a2708:	2201      	movpl	r2, #1
 80a270a:	601a      	strpl	r2, [r3, #0]
 80a270c:	4b20      	ldr	r3, [pc, #128]	; (80a2790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a270e:	681a      	ldr	r2, [r3, #0]
 80a2710:	07d2      	lsls	r2, r2, #31
 80a2712:	bf5c      	itt	pl
 80a2714:	2201      	movpl	r2, #1
 80a2716:	601a      	strpl	r2, [r3, #0]
 80a2718:	4b1e      	ldr	r3, [pc, #120]	; (80a2794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a271a:	681a      	ldr	r2, [r3, #0]
 80a271c:	07d0      	lsls	r0, r2, #31
 80a271e:	bf5c      	itt	pl
 80a2720:	2201      	movpl	r2, #1
 80a2722:	601a      	strpl	r2, [r3, #0]
 80a2724:	4b1c      	ldr	r3, [pc, #112]	; (80a2798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2726:	681a      	ldr	r2, [r3, #0]
 80a2728:	07d1      	lsls	r1, r2, #31
 80a272a:	bf5c      	itt	pl
 80a272c:	2201      	movpl	r2, #1
 80a272e:	601a      	strpl	r2, [r3, #0]
 80a2730:	4b1a      	ldr	r3, [pc, #104]	; (80a279c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2732:	681a      	ldr	r2, [r3, #0]
 80a2734:	07d2      	lsls	r2, r2, #31
 80a2736:	bf5c      	itt	pl
 80a2738:	2201      	movpl	r2, #1
 80a273a:	601a      	strpl	r2, [r3, #0]
 80a273c:	4b18      	ldr	r3, [pc, #96]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a273e:	681a      	ldr	r2, [r3, #0]
 80a2740:	07d0      	lsls	r0, r2, #31
 80a2742:	bf5c      	itt	pl
 80a2744:	2201      	movpl	r2, #1
 80a2746:	601a      	strpl	r2, [r3, #0]
 80a2748:	4b16      	ldr	r3, [pc, #88]	; (80a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a274a:	681a      	ldr	r2, [r3, #0]
 80a274c:	07d1      	lsls	r1, r2, #31
 80a274e:	bf5c      	itt	pl
 80a2750:	2201      	movpl	r2, #1
 80a2752:	601a      	strpl	r2, [r3, #0]
 80a2754:	4b14      	ldr	r3, [pc, #80]	; (80a27a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2756:	681a      	ldr	r2, [r3, #0]
 80a2758:	07d2      	lsls	r2, r2, #31
 80a275a:	bf5c      	itt	pl
 80a275c:	2201      	movpl	r2, #1
 80a275e:	601a      	strpl	r2, [r3, #0]
 80a2760:	4b12      	ldr	r3, [pc, #72]	; (80a27ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2762:	681a      	ldr	r2, [r3, #0]
 80a2764:	07d0      	lsls	r0, r2, #31
 80a2766:	bf5c      	itt	pl
 80a2768:	2201      	movpl	r2, #1
 80a276a:	601a      	strpl	r2, [r3, #0]
 80a276c:	4b10      	ldr	r3, [pc, #64]	; (80a27b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a276e:	681a      	ldr	r2, [r3, #0]
 80a2770:	07d1      	lsls	r1, r2, #31
 80a2772:	bf5c      	itt	pl
 80a2774:	2201      	movpl	r2, #1
 80a2776:	601a      	strpl	r2, [r3, #0]
 80a2778:	4b0e      	ldr	r3, [pc, #56]	; (80a27b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a277a:	681a      	ldr	r2, [r3, #0]
 80a277c:	07d2      	lsls	r2, r2, #31
 80a277e:	bf5c      	itt	pl
 80a2780:	2201      	movpl	r2, #1
 80a2782:	601a      	strpl	r2, [r3, #0]
 80a2784:	4770      	bx	lr
 80a2786:	bf00      	nop
 80a2788:	2000072c 	.word	0x2000072c
 80a278c:	20000728 	.word	0x20000728
 80a2790:	20000724 	.word	0x20000724
 80a2794:	20000720 	.word	0x20000720
 80a2798:	2000071c 	.word	0x2000071c
 80a279c:	20000718 	.word	0x20000718
 80a27a0:	20000714 	.word	0x20000714
 80a27a4:	20000710 	.word	0x20000710
 80a27a8:	2000070c 	.word	0x2000070c
 80a27ac:	20000708 	.word	0x20000708
 80a27b0:	20000704 	.word	0x20000704
 80a27b4:	20000700 	.word	0x20000700

080a27b8 <__aeabi_drsub>:
 80a27b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a27bc:	e002      	b.n	80a27c4 <__adddf3>
 80a27be:	bf00      	nop

080a27c0 <__aeabi_dsub>:
 80a27c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a27c4 <__adddf3>:
 80a27c4:	b530      	push	{r4, r5, lr}
 80a27c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a27ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a27ce:	ea94 0f05 	teq	r4, r5
 80a27d2:	bf08      	it	eq
 80a27d4:	ea90 0f02 	teqeq	r0, r2
 80a27d8:	bf1f      	itttt	ne
 80a27da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a27de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a27e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a27e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a27ea:	f000 80e2 	beq.w	80a29b2 <__adddf3+0x1ee>
 80a27ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a27f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a27f6:	bfb8      	it	lt
 80a27f8:	426d      	neglt	r5, r5
 80a27fa:	dd0c      	ble.n	80a2816 <__adddf3+0x52>
 80a27fc:	442c      	add	r4, r5
 80a27fe:	ea80 0202 	eor.w	r2, r0, r2
 80a2802:	ea81 0303 	eor.w	r3, r1, r3
 80a2806:	ea82 0000 	eor.w	r0, r2, r0
 80a280a:	ea83 0101 	eor.w	r1, r3, r1
 80a280e:	ea80 0202 	eor.w	r2, r0, r2
 80a2812:	ea81 0303 	eor.w	r3, r1, r3
 80a2816:	2d36      	cmp	r5, #54	; 0x36
 80a2818:	bf88      	it	hi
 80a281a:	bd30      	pophi	{r4, r5, pc}
 80a281c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2824:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2828:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a282c:	d002      	beq.n	80a2834 <__adddf3+0x70>
 80a282e:	4240      	negs	r0, r0
 80a2830:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2834:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a283c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2840:	d002      	beq.n	80a2848 <__adddf3+0x84>
 80a2842:	4252      	negs	r2, r2
 80a2844:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2848:	ea94 0f05 	teq	r4, r5
 80a284c:	f000 80a7 	beq.w	80a299e <__adddf3+0x1da>
 80a2850:	f1a4 0401 	sub.w	r4, r4, #1
 80a2854:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2858:	db0d      	blt.n	80a2876 <__adddf3+0xb2>
 80a285a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a285e:	fa22 f205 	lsr.w	r2, r2, r5
 80a2862:	1880      	adds	r0, r0, r2
 80a2864:	f141 0100 	adc.w	r1, r1, #0
 80a2868:	fa03 f20e 	lsl.w	r2, r3, lr
 80a286c:	1880      	adds	r0, r0, r2
 80a286e:	fa43 f305 	asr.w	r3, r3, r5
 80a2872:	4159      	adcs	r1, r3
 80a2874:	e00e      	b.n	80a2894 <__adddf3+0xd0>
 80a2876:	f1a5 0520 	sub.w	r5, r5, #32
 80a287a:	f10e 0e20 	add.w	lr, lr, #32
 80a287e:	2a01      	cmp	r2, #1
 80a2880:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2884:	bf28      	it	cs
 80a2886:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a288a:	fa43 f305 	asr.w	r3, r3, r5
 80a288e:	18c0      	adds	r0, r0, r3
 80a2890:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2894:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2898:	d507      	bpl.n	80a28aa <__adddf3+0xe6>
 80a289a:	f04f 0e00 	mov.w	lr, #0
 80a289e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a28a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a28a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a28aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a28ae:	d31b      	bcc.n	80a28e8 <__adddf3+0x124>
 80a28b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a28b4:	d30c      	bcc.n	80a28d0 <__adddf3+0x10c>
 80a28b6:	0849      	lsrs	r1, r1, #1
 80a28b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a28bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a28c0:	f104 0401 	add.w	r4, r4, #1
 80a28c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a28c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a28cc:	f080 809a 	bcs.w	80a2a04 <__adddf3+0x240>
 80a28d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a28d4:	bf08      	it	eq
 80a28d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a28da:	f150 0000 	adcs.w	r0, r0, #0
 80a28de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a28e2:	ea41 0105 	orr.w	r1, r1, r5
 80a28e6:	bd30      	pop	{r4, r5, pc}
 80a28e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a28ec:	4140      	adcs	r0, r0
 80a28ee:	eb41 0101 	adc.w	r1, r1, r1
 80a28f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a28f6:	f1a4 0401 	sub.w	r4, r4, #1
 80a28fa:	d1e9      	bne.n	80a28d0 <__adddf3+0x10c>
 80a28fc:	f091 0f00 	teq	r1, #0
 80a2900:	bf04      	itt	eq
 80a2902:	4601      	moveq	r1, r0
 80a2904:	2000      	moveq	r0, #0
 80a2906:	fab1 f381 	clz	r3, r1
 80a290a:	bf08      	it	eq
 80a290c:	3320      	addeq	r3, #32
 80a290e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2912:	f1b3 0220 	subs.w	r2, r3, #32
 80a2916:	da0c      	bge.n	80a2932 <__adddf3+0x16e>
 80a2918:	320c      	adds	r2, #12
 80a291a:	dd08      	ble.n	80a292e <__adddf3+0x16a>
 80a291c:	f102 0c14 	add.w	ip, r2, #20
 80a2920:	f1c2 020c 	rsb	r2, r2, #12
 80a2924:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2928:	fa21 f102 	lsr.w	r1, r1, r2
 80a292c:	e00c      	b.n	80a2948 <__adddf3+0x184>
 80a292e:	f102 0214 	add.w	r2, r2, #20
 80a2932:	bfd8      	it	le
 80a2934:	f1c2 0c20 	rsble	ip, r2, #32
 80a2938:	fa01 f102 	lsl.w	r1, r1, r2
 80a293c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2940:	bfdc      	itt	le
 80a2942:	ea41 010c 	orrle.w	r1, r1, ip
 80a2946:	4090      	lslle	r0, r2
 80a2948:	1ae4      	subs	r4, r4, r3
 80a294a:	bfa2      	ittt	ge
 80a294c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2950:	4329      	orrge	r1, r5
 80a2952:	bd30      	popge	{r4, r5, pc}
 80a2954:	ea6f 0404 	mvn.w	r4, r4
 80a2958:	3c1f      	subs	r4, #31
 80a295a:	da1c      	bge.n	80a2996 <__adddf3+0x1d2>
 80a295c:	340c      	adds	r4, #12
 80a295e:	dc0e      	bgt.n	80a297e <__adddf3+0x1ba>
 80a2960:	f104 0414 	add.w	r4, r4, #20
 80a2964:	f1c4 0220 	rsb	r2, r4, #32
 80a2968:	fa20 f004 	lsr.w	r0, r0, r4
 80a296c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2970:	ea40 0003 	orr.w	r0, r0, r3
 80a2974:	fa21 f304 	lsr.w	r3, r1, r4
 80a2978:	ea45 0103 	orr.w	r1, r5, r3
 80a297c:	bd30      	pop	{r4, r5, pc}
 80a297e:	f1c4 040c 	rsb	r4, r4, #12
 80a2982:	f1c4 0220 	rsb	r2, r4, #32
 80a2986:	fa20 f002 	lsr.w	r0, r0, r2
 80a298a:	fa01 f304 	lsl.w	r3, r1, r4
 80a298e:	ea40 0003 	orr.w	r0, r0, r3
 80a2992:	4629      	mov	r1, r5
 80a2994:	bd30      	pop	{r4, r5, pc}
 80a2996:	fa21 f004 	lsr.w	r0, r1, r4
 80a299a:	4629      	mov	r1, r5
 80a299c:	bd30      	pop	{r4, r5, pc}
 80a299e:	f094 0f00 	teq	r4, #0
 80a29a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a29a6:	bf06      	itte	eq
 80a29a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a29ac:	3401      	addeq	r4, #1
 80a29ae:	3d01      	subne	r5, #1
 80a29b0:	e74e      	b.n	80a2850 <__adddf3+0x8c>
 80a29b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a29b6:	bf18      	it	ne
 80a29b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a29bc:	d029      	beq.n	80a2a12 <__adddf3+0x24e>
 80a29be:	ea94 0f05 	teq	r4, r5
 80a29c2:	bf08      	it	eq
 80a29c4:	ea90 0f02 	teqeq	r0, r2
 80a29c8:	d005      	beq.n	80a29d6 <__adddf3+0x212>
 80a29ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80a29ce:	bf04      	itt	eq
 80a29d0:	4619      	moveq	r1, r3
 80a29d2:	4610      	moveq	r0, r2
 80a29d4:	bd30      	pop	{r4, r5, pc}
 80a29d6:	ea91 0f03 	teq	r1, r3
 80a29da:	bf1e      	ittt	ne
 80a29dc:	2100      	movne	r1, #0
 80a29de:	2000      	movne	r0, #0
 80a29e0:	bd30      	popne	{r4, r5, pc}
 80a29e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a29e6:	d105      	bne.n	80a29f4 <__adddf3+0x230>
 80a29e8:	0040      	lsls	r0, r0, #1
 80a29ea:	4149      	adcs	r1, r1
 80a29ec:	bf28      	it	cs
 80a29ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a29f2:	bd30      	pop	{r4, r5, pc}
 80a29f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a29f8:	bf3c      	itt	cc
 80a29fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a29fe:	bd30      	popcc	{r4, r5, pc}
 80a2a00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2a08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a0c:	f04f 0000 	mov.w	r0, #0
 80a2a10:	bd30      	pop	{r4, r5, pc}
 80a2a12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a16:	bf1a      	itte	ne
 80a2a18:	4619      	movne	r1, r3
 80a2a1a:	4610      	movne	r0, r2
 80a2a1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2a20:	bf1c      	itt	ne
 80a2a22:	460b      	movne	r3, r1
 80a2a24:	4602      	movne	r2, r0
 80a2a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a2a:	bf06      	itte	eq
 80a2a2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2a30:	ea91 0f03 	teqeq	r1, r3
 80a2a34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2a38:	bd30      	pop	{r4, r5, pc}
 80a2a3a:	bf00      	nop

080a2a3c <__aeabi_ui2d>:
 80a2a3c:	f090 0f00 	teq	r0, #0
 80a2a40:	bf04      	itt	eq
 80a2a42:	2100      	moveq	r1, #0
 80a2a44:	4770      	bxeq	lr
 80a2a46:	b530      	push	{r4, r5, lr}
 80a2a48:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a50:	f04f 0500 	mov.w	r5, #0
 80a2a54:	f04f 0100 	mov.w	r1, #0
 80a2a58:	e750      	b.n	80a28fc <__adddf3+0x138>
 80a2a5a:	bf00      	nop

080a2a5c <__aeabi_i2d>:
 80a2a5c:	f090 0f00 	teq	r0, #0
 80a2a60:	bf04      	itt	eq
 80a2a62:	2100      	moveq	r1, #0
 80a2a64:	4770      	bxeq	lr
 80a2a66:	b530      	push	{r4, r5, lr}
 80a2a68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2a74:	bf48      	it	mi
 80a2a76:	4240      	negmi	r0, r0
 80a2a78:	f04f 0100 	mov.w	r1, #0
 80a2a7c:	e73e      	b.n	80a28fc <__adddf3+0x138>
 80a2a7e:	bf00      	nop

080a2a80 <__aeabi_f2d>:
 80a2a80:	0042      	lsls	r2, r0, #1
 80a2a82:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2a86:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2a8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2a8e:	bf1f      	itttt	ne
 80a2a90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2a94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2a98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2a9c:	4770      	bxne	lr
 80a2a9e:	f092 0f00 	teq	r2, #0
 80a2aa2:	bf14      	ite	ne
 80a2aa4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2aa8:	4770      	bxeq	lr
 80a2aaa:	b530      	push	{r4, r5, lr}
 80a2aac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2ab8:	e720      	b.n	80a28fc <__adddf3+0x138>
 80a2aba:	bf00      	nop

080a2abc <__aeabi_ul2d>:
 80a2abc:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ac0:	bf08      	it	eq
 80a2ac2:	4770      	bxeq	lr
 80a2ac4:	b530      	push	{r4, r5, lr}
 80a2ac6:	f04f 0500 	mov.w	r5, #0
 80a2aca:	e00a      	b.n	80a2ae2 <__aeabi_l2d+0x16>

080a2acc <__aeabi_l2d>:
 80a2acc:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ad0:	bf08      	it	eq
 80a2ad2:	4770      	bxeq	lr
 80a2ad4:	b530      	push	{r4, r5, lr}
 80a2ad6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2ada:	d502      	bpl.n	80a2ae2 <__aeabi_l2d+0x16>
 80a2adc:	4240      	negs	r0, r0
 80a2ade:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2ae2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2ae6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2aea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2aee:	f43f aedc 	beq.w	80a28aa <__adddf3+0xe6>
 80a2af2:	f04f 0203 	mov.w	r2, #3
 80a2af6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2afa:	bf18      	it	ne
 80a2afc:	3203      	addne	r2, #3
 80a2afe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b02:	bf18      	it	ne
 80a2b04:	3203      	addne	r2, #3
 80a2b06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2b0a:	f1c2 0320 	rsb	r3, r2, #32
 80a2b0e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2b12:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b16:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2b1a:	ea40 000e 	orr.w	r0, r0, lr
 80a2b1e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b22:	4414      	add	r4, r2
 80a2b24:	e6c1      	b.n	80a28aa <__adddf3+0xe6>
 80a2b26:	bf00      	nop

080a2b28 <__aeabi_dmul>:
 80a2b28:	b570      	push	{r4, r5, r6, lr}
 80a2b2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b36:	bf1d      	ittte	ne
 80a2b38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b3c:	ea94 0f0c 	teqne	r4, ip
 80a2b40:	ea95 0f0c 	teqne	r5, ip
 80a2b44:	f000 f8de 	bleq	80a2d04 <__aeabi_dmul+0x1dc>
 80a2b48:	442c      	add	r4, r5
 80a2b4a:	ea81 0603 	eor.w	r6, r1, r3
 80a2b4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2b52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2b56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2b5a:	bf18      	it	ne
 80a2b5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2b60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2b68:	d038      	beq.n	80a2bdc <__aeabi_dmul+0xb4>
 80a2b6a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2b6e:	f04f 0500 	mov.w	r5, #0
 80a2b72:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2b76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2b7a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2b7e:	f04f 0600 	mov.w	r6, #0
 80a2b82:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2b86:	f09c 0f00 	teq	ip, #0
 80a2b8a:	bf18      	it	ne
 80a2b8c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2b90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2b94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2b98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2b9c:	d204      	bcs.n	80a2ba8 <__aeabi_dmul+0x80>
 80a2b9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2ba2:	416d      	adcs	r5, r5
 80a2ba4:	eb46 0606 	adc.w	r6, r6, r6
 80a2ba8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2bac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2bb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2bb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2bb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2bbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2bc0:	bf88      	it	hi
 80a2bc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2bc6:	d81e      	bhi.n	80a2c06 <__aeabi_dmul+0xde>
 80a2bc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2bcc:	bf08      	it	eq
 80a2bce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2bd2:	f150 0000 	adcs.w	r0, r0, #0
 80a2bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2bda:	bd70      	pop	{r4, r5, r6, pc}
 80a2bdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2be0:	ea46 0101 	orr.w	r1, r6, r1
 80a2be4:	ea40 0002 	orr.w	r0, r0, r2
 80a2be8:	ea81 0103 	eor.w	r1, r1, r3
 80a2bec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2bf0:	bfc2      	ittt	gt
 80a2bf2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2bf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2bfa:	bd70      	popgt	{r4, r5, r6, pc}
 80a2bfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c00:	f04f 0e00 	mov.w	lr, #0
 80a2c04:	3c01      	subs	r4, #1
 80a2c06:	f300 80ab 	bgt.w	80a2d60 <__aeabi_dmul+0x238>
 80a2c0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2c0e:	bfde      	ittt	le
 80a2c10:	2000      	movle	r0, #0
 80a2c12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2c16:	bd70      	pople	{r4, r5, r6, pc}
 80a2c18:	f1c4 0400 	rsb	r4, r4, #0
 80a2c1c:	3c20      	subs	r4, #32
 80a2c1e:	da35      	bge.n	80a2c8c <__aeabi_dmul+0x164>
 80a2c20:	340c      	adds	r4, #12
 80a2c22:	dc1b      	bgt.n	80a2c5c <__aeabi_dmul+0x134>
 80a2c24:	f104 0414 	add.w	r4, r4, #20
 80a2c28:	f1c4 0520 	rsb	r5, r4, #32
 80a2c2c:	fa00 f305 	lsl.w	r3, r0, r5
 80a2c30:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c34:	fa01 f205 	lsl.w	r2, r1, r5
 80a2c38:	ea40 0002 	orr.w	r0, r0, r2
 80a2c3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c48:	fa21 f604 	lsr.w	r6, r1, r4
 80a2c4c:	eb42 0106 	adc.w	r1, r2, r6
 80a2c50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c54:	bf08      	it	eq
 80a2c56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c5a:	bd70      	pop	{r4, r5, r6, pc}
 80a2c5c:	f1c4 040c 	rsb	r4, r4, #12
 80a2c60:	f1c4 0520 	rsb	r5, r4, #32
 80a2c64:	fa00 f304 	lsl.w	r3, r0, r4
 80a2c68:	fa20 f005 	lsr.w	r0, r0, r5
 80a2c6c:	fa01 f204 	lsl.w	r2, r1, r4
 80a2c70:	ea40 0002 	orr.w	r0, r0, r2
 80a2c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2c78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c7c:	f141 0100 	adc.w	r1, r1, #0
 80a2c80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c84:	bf08      	it	eq
 80a2c86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c8a:	bd70      	pop	{r4, r5, r6, pc}
 80a2c8c:	f1c4 0520 	rsb	r5, r4, #32
 80a2c90:	fa00 f205 	lsl.w	r2, r0, r5
 80a2c94:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2c98:	fa20 f304 	lsr.w	r3, r0, r4
 80a2c9c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2ca0:	ea43 0302 	orr.w	r3, r3, r2
 80a2ca4:	fa21 f004 	lsr.w	r0, r1, r4
 80a2ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cac:	fa21 f204 	lsr.w	r2, r1, r4
 80a2cb0:	ea20 0002 	bic.w	r0, r0, r2
 80a2cb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2cb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cbc:	bf08      	it	eq
 80a2cbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cc2:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc4:	f094 0f00 	teq	r4, #0
 80a2cc8:	d10f      	bne.n	80a2cea <__aeabi_dmul+0x1c2>
 80a2cca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2cce:	0040      	lsls	r0, r0, #1
 80a2cd0:	eb41 0101 	adc.w	r1, r1, r1
 80a2cd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2cd8:	bf08      	it	eq
 80a2cda:	3c01      	subeq	r4, #1
 80a2cdc:	d0f7      	beq.n	80a2cce <__aeabi_dmul+0x1a6>
 80a2cde:	ea41 0106 	orr.w	r1, r1, r6
 80a2ce2:	f095 0f00 	teq	r5, #0
 80a2ce6:	bf18      	it	ne
 80a2ce8:	4770      	bxne	lr
 80a2cea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2cee:	0052      	lsls	r2, r2, #1
 80a2cf0:	eb43 0303 	adc.w	r3, r3, r3
 80a2cf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2cf8:	bf08      	it	eq
 80a2cfa:	3d01      	subeq	r5, #1
 80a2cfc:	d0f7      	beq.n	80a2cee <__aeabi_dmul+0x1c6>
 80a2cfe:	ea43 0306 	orr.w	r3, r3, r6
 80a2d02:	4770      	bx	lr
 80a2d04:	ea94 0f0c 	teq	r4, ip
 80a2d08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2d0c:	bf18      	it	ne
 80a2d0e:	ea95 0f0c 	teqne	r5, ip
 80a2d12:	d00c      	beq.n	80a2d2e <__aeabi_dmul+0x206>
 80a2d14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d18:	bf18      	it	ne
 80a2d1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d1e:	d1d1      	bne.n	80a2cc4 <__aeabi_dmul+0x19c>
 80a2d20:	ea81 0103 	eor.w	r1, r1, r3
 80a2d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d28:	f04f 0000 	mov.w	r0, #0
 80a2d2c:	bd70      	pop	{r4, r5, r6, pc}
 80a2d2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d32:	bf06      	itte	eq
 80a2d34:	4610      	moveq	r0, r2
 80a2d36:	4619      	moveq	r1, r3
 80a2d38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d3c:	d019      	beq.n	80a2d72 <__aeabi_dmul+0x24a>
 80a2d3e:	ea94 0f0c 	teq	r4, ip
 80a2d42:	d102      	bne.n	80a2d4a <__aeabi_dmul+0x222>
 80a2d44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2d48:	d113      	bne.n	80a2d72 <__aeabi_dmul+0x24a>
 80a2d4a:	ea95 0f0c 	teq	r5, ip
 80a2d4e:	d105      	bne.n	80a2d5c <__aeabi_dmul+0x234>
 80a2d50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2d54:	bf1c      	itt	ne
 80a2d56:	4610      	movne	r0, r2
 80a2d58:	4619      	movne	r1, r3
 80a2d5a:	d10a      	bne.n	80a2d72 <__aeabi_dmul+0x24a>
 80a2d5c:	ea81 0103 	eor.w	r1, r1, r3
 80a2d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2d6c:	f04f 0000 	mov.w	r0, #0
 80a2d70:	bd70      	pop	{r4, r5, r6, pc}
 80a2d72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2d7a:	bd70      	pop	{r4, r5, r6, pc}

080a2d7c <__aeabi_ddiv>:
 80a2d7c:	b570      	push	{r4, r5, r6, lr}
 80a2d7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2d82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2d86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2d8a:	bf1d      	ittte	ne
 80a2d8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2d90:	ea94 0f0c 	teqne	r4, ip
 80a2d94:	ea95 0f0c 	teqne	r5, ip
 80a2d98:	f000 f8a7 	bleq	80a2eea <__aeabi_ddiv+0x16e>
 80a2d9c:	eba4 0405 	sub.w	r4, r4, r5
 80a2da0:	ea81 0e03 	eor.w	lr, r1, r3
 80a2da4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2da8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2dac:	f000 8088 	beq.w	80a2ec0 <__aeabi_ddiv+0x144>
 80a2db0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2db4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2db8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2dbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2dc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2dc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2dc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2dcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2dd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2dd4:	429d      	cmp	r5, r3
 80a2dd6:	bf08      	it	eq
 80a2dd8:	4296      	cmpeq	r6, r2
 80a2dda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2dde:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2de2:	d202      	bcs.n	80a2dea <__aeabi_ddiv+0x6e>
 80a2de4:	085b      	lsrs	r3, r3, #1
 80a2de6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2dea:	1ab6      	subs	r6, r6, r2
 80a2dec:	eb65 0503 	sbc.w	r5, r5, r3
 80a2df0:	085b      	lsrs	r3, r3, #1
 80a2df2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2df6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2dfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2dfe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e02:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e06:	bf22      	ittt	cs
 80a2e08:	1ab6      	subcs	r6, r6, r2
 80a2e0a:	4675      	movcs	r5, lr
 80a2e0c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e10:	085b      	lsrs	r3, r3, #1
 80a2e12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e1e:	bf22      	ittt	cs
 80a2e20:	1ab6      	subcs	r6, r6, r2
 80a2e22:	4675      	movcs	r5, lr
 80a2e24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e28:	085b      	lsrs	r3, r3, #1
 80a2e2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e36:	bf22      	ittt	cs
 80a2e38:	1ab6      	subcs	r6, r6, r2
 80a2e3a:	4675      	movcs	r5, lr
 80a2e3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e40:	085b      	lsrs	r3, r3, #1
 80a2e42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e4e:	bf22      	ittt	cs
 80a2e50:	1ab6      	subcs	r6, r6, r2
 80a2e52:	4675      	movcs	r5, lr
 80a2e54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e58:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2e5c:	d018      	beq.n	80a2e90 <__aeabi_ddiv+0x114>
 80a2e5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2e62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2e66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2e6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2e6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2e72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2e76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2e7a:	d1c0      	bne.n	80a2dfe <__aeabi_ddiv+0x82>
 80a2e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e80:	d10b      	bne.n	80a2e9a <__aeabi_ddiv+0x11e>
 80a2e82:	ea41 0100 	orr.w	r1, r1, r0
 80a2e86:	f04f 0000 	mov.w	r0, #0
 80a2e8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2e8e:	e7b6      	b.n	80a2dfe <__aeabi_ddiv+0x82>
 80a2e90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e94:	bf04      	itt	eq
 80a2e96:	4301      	orreq	r1, r0
 80a2e98:	2000      	moveq	r0, #0
 80a2e9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2e9e:	bf88      	it	hi
 80a2ea0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2ea4:	f63f aeaf 	bhi.w	80a2c06 <__aeabi_dmul+0xde>
 80a2ea8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2eac:	bf04      	itt	eq
 80a2eae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2eb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2eb6:	f150 0000 	adcs.w	r0, r0, #0
 80a2eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2ebe:	bd70      	pop	{r4, r5, r6, pc}
 80a2ec0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2ec4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2ec8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2ecc:	bfc2      	ittt	gt
 80a2ece:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2ed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2ed6:	bd70      	popgt	{r4, r5, r6, pc}
 80a2ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2edc:	f04f 0e00 	mov.w	lr, #0
 80a2ee0:	3c01      	subs	r4, #1
 80a2ee2:	e690      	b.n	80a2c06 <__aeabi_dmul+0xde>
 80a2ee4:	ea45 0e06 	orr.w	lr, r5, r6
 80a2ee8:	e68d      	b.n	80a2c06 <__aeabi_dmul+0xde>
 80a2eea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2eee:	ea94 0f0c 	teq	r4, ip
 80a2ef2:	bf08      	it	eq
 80a2ef4:	ea95 0f0c 	teqeq	r5, ip
 80a2ef8:	f43f af3b 	beq.w	80a2d72 <__aeabi_dmul+0x24a>
 80a2efc:	ea94 0f0c 	teq	r4, ip
 80a2f00:	d10a      	bne.n	80a2f18 <__aeabi_ddiv+0x19c>
 80a2f02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f06:	f47f af34 	bne.w	80a2d72 <__aeabi_dmul+0x24a>
 80a2f0a:	ea95 0f0c 	teq	r5, ip
 80a2f0e:	f47f af25 	bne.w	80a2d5c <__aeabi_dmul+0x234>
 80a2f12:	4610      	mov	r0, r2
 80a2f14:	4619      	mov	r1, r3
 80a2f16:	e72c      	b.n	80a2d72 <__aeabi_dmul+0x24a>
 80a2f18:	ea95 0f0c 	teq	r5, ip
 80a2f1c:	d106      	bne.n	80a2f2c <__aeabi_ddiv+0x1b0>
 80a2f1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f22:	f43f aefd 	beq.w	80a2d20 <__aeabi_dmul+0x1f8>
 80a2f26:	4610      	mov	r0, r2
 80a2f28:	4619      	mov	r1, r3
 80a2f2a:	e722      	b.n	80a2d72 <__aeabi_dmul+0x24a>
 80a2f2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f30:	bf18      	it	ne
 80a2f32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f36:	f47f aec5 	bne.w	80a2cc4 <__aeabi_dmul+0x19c>
 80a2f3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2f3e:	f47f af0d 	bne.w	80a2d5c <__aeabi_dmul+0x234>
 80a2f42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2f46:	f47f aeeb 	bne.w	80a2d20 <__aeabi_dmul+0x1f8>
 80a2f4a:	e712      	b.n	80a2d72 <__aeabi_dmul+0x24a>

080a2f4c <__gedf2>:
 80a2f4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2f50:	e006      	b.n	80a2f60 <__cmpdf2+0x4>
 80a2f52:	bf00      	nop

080a2f54 <__ledf2>:
 80a2f54:	f04f 0c01 	mov.w	ip, #1
 80a2f58:	e002      	b.n	80a2f60 <__cmpdf2+0x4>
 80a2f5a:	bf00      	nop

080a2f5c <__cmpdf2>:
 80a2f5c:	f04f 0c01 	mov.w	ip, #1
 80a2f60:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2f64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2f70:	bf18      	it	ne
 80a2f72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2f76:	d01b      	beq.n	80a2fb0 <__cmpdf2+0x54>
 80a2f78:	b001      	add	sp, #4
 80a2f7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2f7e:	bf0c      	ite	eq
 80a2f80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2f84:	ea91 0f03 	teqne	r1, r3
 80a2f88:	bf02      	ittt	eq
 80a2f8a:	ea90 0f02 	teqeq	r0, r2
 80a2f8e:	2000      	moveq	r0, #0
 80a2f90:	4770      	bxeq	lr
 80a2f92:	f110 0f00 	cmn.w	r0, #0
 80a2f96:	ea91 0f03 	teq	r1, r3
 80a2f9a:	bf58      	it	pl
 80a2f9c:	4299      	cmppl	r1, r3
 80a2f9e:	bf08      	it	eq
 80a2fa0:	4290      	cmpeq	r0, r2
 80a2fa2:	bf2c      	ite	cs
 80a2fa4:	17d8      	asrcs	r0, r3, #31
 80a2fa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2faa:	f040 0001 	orr.w	r0, r0, #1
 80a2fae:	4770      	bx	lr
 80a2fb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2fb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fb8:	d102      	bne.n	80a2fc0 <__cmpdf2+0x64>
 80a2fba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2fbe:	d107      	bne.n	80a2fd0 <__cmpdf2+0x74>
 80a2fc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fc8:	d1d6      	bne.n	80a2f78 <__cmpdf2+0x1c>
 80a2fca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2fce:	d0d3      	beq.n	80a2f78 <__cmpdf2+0x1c>
 80a2fd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2fd4:	4770      	bx	lr
 80a2fd6:	bf00      	nop

080a2fd8 <__aeabi_cdrcmple>:
 80a2fd8:	4684      	mov	ip, r0
 80a2fda:	4610      	mov	r0, r2
 80a2fdc:	4662      	mov	r2, ip
 80a2fde:	468c      	mov	ip, r1
 80a2fe0:	4619      	mov	r1, r3
 80a2fe2:	4663      	mov	r3, ip
 80a2fe4:	e000      	b.n	80a2fe8 <__aeabi_cdcmpeq>
 80a2fe6:	bf00      	nop

080a2fe8 <__aeabi_cdcmpeq>:
 80a2fe8:	b501      	push	{r0, lr}
 80a2fea:	f7ff ffb7 	bl	80a2f5c <__cmpdf2>
 80a2fee:	2800      	cmp	r0, #0
 80a2ff0:	bf48      	it	mi
 80a2ff2:	f110 0f00 	cmnmi.w	r0, #0
 80a2ff6:	bd01      	pop	{r0, pc}

080a2ff8 <__aeabi_dcmpeq>:
 80a2ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ffc:	f7ff fff4 	bl	80a2fe8 <__aeabi_cdcmpeq>
 80a3000:	bf0c      	ite	eq
 80a3002:	2001      	moveq	r0, #1
 80a3004:	2000      	movne	r0, #0
 80a3006:	f85d fb08 	ldr.w	pc, [sp], #8
 80a300a:	bf00      	nop

080a300c <__aeabi_dcmplt>:
 80a300c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3010:	f7ff ffea 	bl	80a2fe8 <__aeabi_cdcmpeq>
 80a3014:	bf34      	ite	cc
 80a3016:	2001      	movcc	r0, #1
 80a3018:	2000      	movcs	r0, #0
 80a301a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a301e:	bf00      	nop

080a3020 <__aeabi_dcmple>:
 80a3020:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3024:	f7ff ffe0 	bl	80a2fe8 <__aeabi_cdcmpeq>
 80a3028:	bf94      	ite	ls
 80a302a:	2001      	movls	r0, #1
 80a302c:	2000      	movhi	r0, #0
 80a302e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3032:	bf00      	nop

080a3034 <__aeabi_dcmpge>:
 80a3034:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3038:	f7ff ffce 	bl	80a2fd8 <__aeabi_cdrcmple>
 80a303c:	bf94      	ite	ls
 80a303e:	2001      	movls	r0, #1
 80a3040:	2000      	movhi	r0, #0
 80a3042:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3046:	bf00      	nop

080a3048 <__aeabi_dcmpgt>:
 80a3048:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a304c:	f7ff ffc4 	bl	80a2fd8 <__aeabi_cdrcmple>
 80a3050:	bf34      	ite	cc
 80a3052:	2001      	movcc	r0, #1
 80a3054:	2000      	movcs	r0, #0
 80a3056:	f85d fb08 	ldr.w	pc, [sp], #8
 80a305a:	bf00      	nop

080a305c <__aeabi_dcmpun>:
 80a305c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3064:	d102      	bne.n	80a306c <__aeabi_dcmpun+0x10>
 80a3066:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a306a:	d10a      	bne.n	80a3082 <__aeabi_dcmpun+0x26>
 80a306c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3074:	d102      	bne.n	80a307c <__aeabi_dcmpun+0x20>
 80a3076:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a307a:	d102      	bne.n	80a3082 <__aeabi_dcmpun+0x26>
 80a307c:	f04f 0000 	mov.w	r0, #0
 80a3080:	4770      	bx	lr
 80a3082:	f04f 0001 	mov.w	r0, #1
 80a3086:	4770      	bx	lr

080a3088 <__aeabi_d2iz>:
 80a3088:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a308c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3090:	d215      	bcs.n	80a30be <__aeabi_d2iz+0x36>
 80a3092:	d511      	bpl.n	80a30b8 <__aeabi_d2iz+0x30>
 80a3094:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3098:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a309c:	d912      	bls.n	80a30c4 <__aeabi_d2iz+0x3c>
 80a309e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a30a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a30a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a30aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a30ae:	fa23 f002 	lsr.w	r0, r3, r2
 80a30b2:	bf18      	it	ne
 80a30b4:	4240      	negne	r0, r0
 80a30b6:	4770      	bx	lr
 80a30b8:	f04f 0000 	mov.w	r0, #0
 80a30bc:	4770      	bx	lr
 80a30be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a30c2:	d105      	bne.n	80a30d0 <__aeabi_d2iz+0x48>
 80a30c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a30c8:	bf08      	it	eq
 80a30ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a30ce:	4770      	bx	lr
 80a30d0:	f04f 0000 	mov.w	r0, #0
 80a30d4:	4770      	bx	lr
 80a30d6:	bf00      	nop

080a30d8 <__aeabi_d2uiz>:
 80a30d8:	004a      	lsls	r2, r1, #1
 80a30da:	d211      	bcs.n	80a3100 <__aeabi_d2uiz+0x28>
 80a30dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a30e0:	d211      	bcs.n	80a3106 <__aeabi_d2uiz+0x2e>
 80a30e2:	d50d      	bpl.n	80a3100 <__aeabi_d2uiz+0x28>
 80a30e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a30e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a30ec:	d40e      	bmi.n	80a310c <__aeabi_d2uiz+0x34>
 80a30ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a30f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a30f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a30fa:	fa23 f002 	lsr.w	r0, r3, r2
 80a30fe:	4770      	bx	lr
 80a3100:	f04f 0000 	mov.w	r0, #0
 80a3104:	4770      	bx	lr
 80a3106:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a310a:	d102      	bne.n	80a3112 <__aeabi_d2uiz+0x3a>
 80a310c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3110:	4770      	bx	lr
 80a3112:	f04f 0000 	mov.w	r0, #0
 80a3116:	4770      	bx	lr

080a3118 <__aeabi_frsub>:
 80a3118:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a311c:	e002      	b.n	80a3124 <__addsf3>
 80a311e:	bf00      	nop

080a3120 <__aeabi_fsub>:
 80a3120:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3124 <__addsf3>:
 80a3124:	0042      	lsls	r2, r0, #1
 80a3126:	bf1f      	itttt	ne
 80a3128:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a312c:	ea92 0f03 	teqne	r2, r3
 80a3130:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3134:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3138:	d06a      	beq.n	80a3210 <__addsf3+0xec>
 80a313a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a313e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3142:	bfc1      	itttt	gt
 80a3144:	18d2      	addgt	r2, r2, r3
 80a3146:	4041      	eorgt	r1, r0
 80a3148:	4048      	eorgt	r0, r1
 80a314a:	4041      	eorgt	r1, r0
 80a314c:	bfb8      	it	lt
 80a314e:	425b      	neglt	r3, r3
 80a3150:	2b19      	cmp	r3, #25
 80a3152:	bf88      	it	hi
 80a3154:	4770      	bxhi	lr
 80a3156:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a315a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a315e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3162:	bf18      	it	ne
 80a3164:	4240      	negne	r0, r0
 80a3166:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a316a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a316e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3172:	bf18      	it	ne
 80a3174:	4249      	negne	r1, r1
 80a3176:	ea92 0f03 	teq	r2, r3
 80a317a:	d03f      	beq.n	80a31fc <__addsf3+0xd8>
 80a317c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3180:	fa41 fc03 	asr.w	ip, r1, r3
 80a3184:	eb10 000c 	adds.w	r0, r0, ip
 80a3188:	f1c3 0320 	rsb	r3, r3, #32
 80a318c:	fa01 f103 	lsl.w	r1, r1, r3
 80a3190:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3194:	d502      	bpl.n	80a319c <__addsf3+0x78>
 80a3196:	4249      	negs	r1, r1
 80a3198:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a319c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a31a0:	d313      	bcc.n	80a31ca <__addsf3+0xa6>
 80a31a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a31a6:	d306      	bcc.n	80a31b6 <__addsf3+0x92>
 80a31a8:	0840      	lsrs	r0, r0, #1
 80a31aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a31ae:	f102 0201 	add.w	r2, r2, #1
 80a31b2:	2afe      	cmp	r2, #254	; 0xfe
 80a31b4:	d251      	bcs.n	80a325a <__addsf3+0x136>
 80a31b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a31ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a31be:	bf08      	it	eq
 80a31c0:	f020 0001 	biceq.w	r0, r0, #1
 80a31c4:	ea40 0003 	orr.w	r0, r0, r3
 80a31c8:	4770      	bx	lr
 80a31ca:	0049      	lsls	r1, r1, #1
 80a31cc:	eb40 0000 	adc.w	r0, r0, r0
 80a31d0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a31d4:	f1a2 0201 	sub.w	r2, r2, #1
 80a31d8:	d1ed      	bne.n	80a31b6 <__addsf3+0x92>
 80a31da:	fab0 fc80 	clz	ip, r0
 80a31de:	f1ac 0c08 	sub.w	ip, ip, #8
 80a31e2:	ebb2 020c 	subs.w	r2, r2, ip
 80a31e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a31ea:	bfaa      	itet	ge
 80a31ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a31f0:	4252      	neglt	r2, r2
 80a31f2:	4318      	orrge	r0, r3
 80a31f4:	bfbc      	itt	lt
 80a31f6:	40d0      	lsrlt	r0, r2
 80a31f8:	4318      	orrlt	r0, r3
 80a31fa:	4770      	bx	lr
 80a31fc:	f092 0f00 	teq	r2, #0
 80a3200:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3204:	bf06      	itte	eq
 80a3206:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a320a:	3201      	addeq	r2, #1
 80a320c:	3b01      	subne	r3, #1
 80a320e:	e7b5      	b.n	80a317c <__addsf3+0x58>
 80a3210:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3214:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3218:	bf18      	it	ne
 80a321a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a321e:	d021      	beq.n	80a3264 <__addsf3+0x140>
 80a3220:	ea92 0f03 	teq	r2, r3
 80a3224:	d004      	beq.n	80a3230 <__addsf3+0x10c>
 80a3226:	f092 0f00 	teq	r2, #0
 80a322a:	bf08      	it	eq
 80a322c:	4608      	moveq	r0, r1
 80a322e:	4770      	bx	lr
 80a3230:	ea90 0f01 	teq	r0, r1
 80a3234:	bf1c      	itt	ne
 80a3236:	2000      	movne	r0, #0
 80a3238:	4770      	bxne	lr
 80a323a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a323e:	d104      	bne.n	80a324a <__addsf3+0x126>
 80a3240:	0040      	lsls	r0, r0, #1
 80a3242:	bf28      	it	cs
 80a3244:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3248:	4770      	bx	lr
 80a324a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a324e:	bf3c      	itt	cc
 80a3250:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3254:	4770      	bxcc	lr
 80a3256:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a325a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a325e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3262:	4770      	bx	lr
 80a3264:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3268:	bf16      	itet	ne
 80a326a:	4608      	movne	r0, r1
 80a326c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3270:	4601      	movne	r1, r0
 80a3272:	0242      	lsls	r2, r0, #9
 80a3274:	bf06      	itte	eq
 80a3276:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a327a:	ea90 0f01 	teqeq	r0, r1
 80a327e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3282:	4770      	bx	lr

080a3284 <__aeabi_ui2f>:
 80a3284:	f04f 0300 	mov.w	r3, #0
 80a3288:	e004      	b.n	80a3294 <__aeabi_i2f+0x8>
 80a328a:	bf00      	nop

080a328c <__aeabi_i2f>:
 80a328c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3290:	bf48      	it	mi
 80a3292:	4240      	negmi	r0, r0
 80a3294:	ea5f 0c00 	movs.w	ip, r0
 80a3298:	bf08      	it	eq
 80a329a:	4770      	bxeq	lr
 80a329c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a32a0:	4601      	mov	r1, r0
 80a32a2:	f04f 0000 	mov.w	r0, #0
 80a32a6:	e01c      	b.n	80a32e2 <__aeabi_l2f+0x2a>

080a32a8 <__aeabi_ul2f>:
 80a32a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a32ac:	bf08      	it	eq
 80a32ae:	4770      	bxeq	lr
 80a32b0:	f04f 0300 	mov.w	r3, #0
 80a32b4:	e00a      	b.n	80a32cc <__aeabi_l2f+0x14>
 80a32b6:	bf00      	nop

080a32b8 <__aeabi_l2f>:
 80a32b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a32bc:	bf08      	it	eq
 80a32be:	4770      	bxeq	lr
 80a32c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a32c4:	d502      	bpl.n	80a32cc <__aeabi_l2f+0x14>
 80a32c6:	4240      	negs	r0, r0
 80a32c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a32cc:	ea5f 0c01 	movs.w	ip, r1
 80a32d0:	bf02      	ittt	eq
 80a32d2:	4684      	moveq	ip, r0
 80a32d4:	4601      	moveq	r1, r0
 80a32d6:	2000      	moveq	r0, #0
 80a32d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a32dc:	bf08      	it	eq
 80a32de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a32e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a32e6:	fabc f28c 	clz	r2, ip
 80a32ea:	3a08      	subs	r2, #8
 80a32ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a32f0:	db10      	blt.n	80a3314 <__aeabi_l2f+0x5c>
 80a32f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a32f6:	4463      	add	r3, ip
 80a32f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a32fc:	f1c2 0220 	rsb	r2, r2, #32
 80a3300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3304:	fa20 f202 	lsr.w	r2, r0, r2
 80a3308:	eb43 0002 	adc.w	r0, r3, r2
 80a330c:	bf08      	it	eq
 80a330e:	f020 0001 	biceq.w	r0, r0, #1
 80a3312:	4770      	bx	lr
 80a3314:	f102 0220 	add.w	r2, r2, #32
 80a3318:	fa01 fc02 	lsl.w	ip, r1, r2
 80a331c:	f1c2 0220 	rsb	r2, r2, #32
 80a3320:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3324:	fa21 f202 	lsr.w	r2, r1, r2
 80a3328:	eb43 0002 	adc.w	r0, r3, r2
 80a332c:	bf08      	it	eq
 80a332e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3332:	4770      	bx	lr

080a3334 <__aeabi_fmul>:
 80a3334:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3338:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a333c:	bf1e      	ittt	ne
 80a333e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3342:	ea92 0f0c 	teqne	r2, ip
 80a3346:	ea93 0f0c 	teqne	r3, ip
 80a334a:	d06f      	beq.n	80a342c <__aeabi_fmul+0xf8>
 80a334c:	441a      	add	r2, r3
 80a334e:	ea80 0c01 	eor.w	ip, r0, r1
 80a3352:	0240      	lsls	r0, r0, #9
 80a3354:	bf18      	it	ne
 80a3356:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a335a:	d01e      	beq.n	80a339a <__aeabi_fmul+0x66>
 80a335c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3360:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3364:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3368:	fba0 3101 	umull	r3, r1, r0, r1
 80a336c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3370:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3374:	bf3e      	ittt	cc
 80a3376:	0049      	lslcc	r1, r1, #1
 80a3378:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a337c:	005b      	lslcc	r3, r3, #1
 80a337e:	ea40 0001 	orr.w	r0, r0, r1
 80a3382:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3386:	2afd      	cmp	r2, #253	; 0xfd
 80a3388:	d81d      	bhi.n	80a33c6 <__aeabi_fmul+0x92>
 80a338a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a338e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3392:	bf08      	it	eq
 80a3394:	f020 0001 	biceq.w	r0, r0, #1
 80a3398:	4770      	bx	lr
 80a339a:	f090 0f00 	teq	r0, #0
 80a339e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a33a2:	bf08      	it	eq
 80a33a4:	0249      	lsleq	r1, r1, #9
 80a33a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a33aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a33ae:	3a7f      	subs	r2, #127	; 0x7f
 80a33b0:	bfc2      	ittt	gt
 80a33b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a33b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a33ba:	4770      	bxgt	lr
 80a33bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a33c0:	f04f 0300 	mov.w	r3, #0
 80a33c4:	3a01      	subs	r2, #1
 80a33c6:	dc5d      	bgt.n	80a3484 <__aeabi_fmul+0x150>
 80a33c8:	f112 0f19 	cmn.w	r2, #25
 80a33cc:	bfdc      	itt	le
 80a33ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a33d2:	4770      	bxle	lr
 80a33d4:	f1c2 0200 	rsb	r2, r2, #0
 80a33d8:	0041      	lsls	r1, r0, #1
 80a33da:	fa21 f102 	lsr.w	r1, r1, r2
 80a33de:	f1c2 0220 	rsb	r2, r2, #32
 80a33e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a33e6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a33ea:	f140 0000 	adc.w	r0, r0, #0
 80a33ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a33f2:	bf08      	it	eq
 80a33f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a33f8:	4770      	bx	lr
 80a33fa:	f092 0f00 	teq	r2, #0
 80a33fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3402:	bf02      	ittt	eq
 80a3404:	0040      	lsleq	r0, r0, #1
 80a3406:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a340a:	3a01      	subeq	r2, #1
 80a340c:	d0f9      	beq.n	80a3402 <__aeabi_fmul+0xce>
 80a340e:	ea40 000c 	orr.w	r0, r0, ip
 80a3412:	f093 0f00 	teq	r3, #0
 80a3416:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a341a:	bf02      	ittt	eq
 80a341c:	0049      	lsleq	r1, r1, #1
 80a341e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3422:	3b01      	subeq	r3, #1
 80a3424:	d0f9      	beq.n	80a341a <__aeabi_fmul+0xe6>
 80a3426:	ea41 010c 	orr.w	r1, r1, ip
 80a342a:	e78f      	b.n	80a334c <__aeabi_fmul+0x18>
 80a342c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3430:	ea92 0f0c 	teq	r2, ip
 80a3434:	bf18      	it	ne
 80a3436:	ea93 0f0c 	teqne	r3, ip
 80a343a:	d00a      	beq.n	80a3452 <__aeabi_fmul+0x11e>
 80a343c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3440:	bf18      	it	ne
 80a3442:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3446:	d1d8      	bne.n	80a33fa <__aeabi_fmul+0xc6>
 80a3448:	ea80 0001 	eor.w	r0, r0, r1
 80a344c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3450:	4770      	bx	lr
 80a3452:	f090 0f00 	teq	r0, #0
 80a3456:	bf17      	itett	ne
 80a3458:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a345c:	4608      	moveq	r0, r1
 80a345e:	f091 0f00 	teqne	r1, #0
 80a3462:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3466:	d014      	beq.n	80a3492 <__aeabi_fmul+0x15e>
 80a3468:	ea92 0f0c 	teq	r2, ip
 80a346c:	d101      	bne.n	80a3472 <__aeabi_fmul+0x13e>
 80a346e:	0242      	lsls	r2, r0, #9
 80a3470:	d10f      	bne.n	80a3492 <__aeabi_fmul+0x15e>
 80a3472:	ea93 0f0c 	teq	r3, ip
 80a3476:	d103      	bne.n	80a3480 <__aeabi_fmul+0x14c>
 80a3478:	024b      	lsls	r3, r1, #9
 80a347a:	bf18      	it	ne
 80a347c:	4608      	movne	r0, r1
 80a347e:	d108      	bne.n	80a3492 <__aeabi_fmul+0x15e>
 80a3480:	ea80 0001 	eor.w	r0, r0, r1
 80a3484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3488:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a348c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3490:	4770      	bx	lr
 80a3492:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3496:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a349a:	4770      	bx	lr

080a349c <__aeabi_fdiv>:
 80a349c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a34a4:	bf1e      	ittt	ne
 80a34a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a34aa:	ea92 0f0c 	teqne	r2, ip
 80a34ae:	ea93 0f0c 	teqne	r3, ip
 80a34b2:	d069      	beq.n	80a3588 <__aeabi_fdiv+0xec>
 80a34b4:	eba2 0203 	sub.w	r2, r2, r3
 80a34b8:	ea80 0c01 	eor.w	ip, r0, r1
 80a34bc:	0249      	lsls	r1, r1, #9
 80a34be:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a34c2:	d037      	beq.n	80a3534 <__aeabi_fdiv+0x98>
 80a34c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a34c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a34cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a34d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a34d4:	428b      	cmp	r3, r1
 80a34d6:	bf38      	it	cc
 80a34d8:	005b      	lslcc	r3, r3, #1
 80a34da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a34de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a34e2:	428b      	cmp	r3, r1
 80a34e4:	bf24      	itt	cs
 80a34e6:	1a5b      	subcs	r3, r3, r1
 80a34e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a34ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a34f0:	bf24      	itt	cs
 80a34f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a34f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a34fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a34fe:	bf24      	itt	cs
 80a3500:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3504:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3508:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a350c:	bf24      	itt	cs
 80a350e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3512:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3516:	011b      	lsls	r3, r3, #4
 80a3518:	bf18      	it	ne
 80a351a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a351e:	d1e0      	bne.n	80a34e2 <__aeabi_fdiv+0x46>
 80a3520:	2afd      	cmp	r2, #253	; 0xfd
 80a3522:	f63f af50 	bhi.w	80a33c6 <__aeabi_fmul+0x92>
 80a3526:	428b      	cmp	r3, r1
 80a3528:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a352c:	bf08      	it	eq
 80a352e:	f020 0001 	biceq.w	r0, r0, #1
 80a3532:	4770      	bx	lr
 80a3534:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3538:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a353c:	327f      	adds	r2, #127	; 0x7f
 80a353e:	bfc2      	ittt	gt
 80a3540:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3544:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3548:	4770      	bxgt	lr
 80a354a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a354e:	f04f 0300 	mov.w	r3, #0
 80a3552:	3a01      	subs	r2, #1
 80a3554:	e737      	b.n	80a33c6 <__aeabi_fmul+0x92>
 80a3556:	f092 0f00 	teq	r2, #0
 80a355a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a355e:	bf02      	ittt	eq
 80a3560:	0040      	lsleq	r0, r0, #1
 80a3562:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3566:	3a01      	subeq	r2, #1
 80a3568:	d0f9      	beq.n	80a355e <__aeabi_fdiv+0xc2>
 80a356a:	ea40 000c 	orr.w	r0, r0, ip
 80a356e:	f093 0f00 	teq	r3, #0
 80a3572:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3576:	bf02      	ittt	eq
 80a3578:	0049      	lsleq	r1, r1, #1
 80a357a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a357e:	3b01      	subeq	r3, #1
 80a3580:	d0f9      	beq.n	80a3576 <__aeabi_fdiv+0xda>
 80a3582:	ea41 010c 	orr.w	r1, r1, ip
 80a3586:	e795      	b.n	80a34b4 <__aeabi_fdiv+0x18>
 80a3588:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a358c:	ea92 0f0c 	teq	r2, ip
 80a3590:	d108      	bne.n	80a35a4 <__aeabi_fdiv+0x108>
 80a3592:	0242      	lsls	r2, r0, #9
 80a3594:	f47f af7d 	bne.w	80a3492 <__aeabi_fmul+0x15e>
 80a3598:	ea93 0f0c 	teq	r3, ip
 80a359c:	f47f af70 	bne.w	80a3480 <__aeabi_fmul+0x14c>
 80a35a0:	4608      	mov	r0, r1
 80a35a2:	e776      	b.n	80a3492 <__aeabi_fmul+0x15e>
 80a35a4:	ea93 0f0c 	teq	r3, ip
 80a35a8:	d104      	bne.n	80a35b4 <__aeabi_fdiv+0x118>
 80a35aa:	024b      	lsls	r3, r1, #9
 80a35ac:	f43f af4c 	beq.w	80a3448 <__aeabi_fmul+0x114>
 80a35b0:	4608      	mov	r0, r1
 80a35b2:	e76e      	b.n	80a3492 <__aeabi_fmul+0x15e>
 80a35b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a35b8:	bf18      	it	ne
 80a35ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a35be:	d1ca      	bne.n	80a3556 <__aeabi_fdiv+0xba>
 80a35c0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a35c4:	f47f af5c 	bne.w	80a3480 <__aeabi_fmul+0x14c>
 80a35c8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a35cc:	f47f af3c 	bne.w	80a3448 <__aeabi_fmul+0x114>
 80a35d0:	e75f      	b.n	80a3492 <__aeabi_fmul+0x15e>
 80a35d2:	bf00      	nop

080a35d4 <__aeabi_f2iz>:
 80a35d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a35d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a35dc:	d30f      	bcc.n	80a35fe <__aeabi_f2iz+0x2a>
 80a35de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a35e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a35e6:	d90d      	bls.n	80a3604 <__aeabi_f2iz+0x30>
 80a35e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a35ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a35f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a35f4:	fa23 f002 	lsr.w	r0, r3, r2
 80a35f8:	bf18      	it	ne
 80a35fa:	4240      	negne	r0, r0
 80a35fc:	4770      	bx	lr
 80a35fe:	f04f 0000 	mov.w	r0, #0
 80a3602:	4770      	bx	lr
 80a3604:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3608:	d101      	bne.n	80a360e <__aeabi_f2iz+0x3a>
 80a360a:	0242      	lsls	r2, r0, #9
 80a360c:	d105      	bne.n	80a361a <__aeabi_f2iz+0x46>
 80a360e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a3612:	bf08      	it	eq
 80a3614:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3618:	4770      	bx	lr
 80a361a:	f04f 0000 	mov.w	r0, #0
 80a361e:	4770      	bx	lr

080a3620 <__cxa_atexit>:
 80a3620:	b510      	push	{r4, lr}
 80a3622:	4c05      	ldr	r4, [pc, #20]	; (80a3638 <__cxa_atexit+0x18>)
 80a3624:	4613      	mov	r3, r2
 80a3626:	b12c      	cbz	r4, 80a3634 <__cxa_atexit+0x14>
 80a3628:	460a      	mov	r2, r1
 80a362a:	4601      	mov	r1, r0
 80a362c:	2002      	movs	r0, #2
 80a362e:	f3af 8000 	nop.w
 80a3632:	bd10      	pop	{r4, pc}
 80a3634:	4620      	mov	r0, r4
 80a3636:	bd10      	pop	{r4, pc}
 80a3638:	00000000 	.word	0x00000000

080a363c <memcpy>:
 80a363c:	b510      	push	{r4, lr}
 80a363e:	1e43      	subs	r3, r0, #1
 80a3640:	440a      	add	r2, r1
 80a3642:	4291      	cmp	r1, r2
 80a3644:	d004      	beq.n	80a3650 <memcpy+0x14>
 80a3646:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a364a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a364e:	e7f8      	b.n	80a3642 <memcpy+0x6>
 80a3650:	bd10      	pop	{r4, pc}

080a3652 <memset>:
 80a3652:	4603      	mov	r3, r0
 80a3654:	4402      	add	r2, r0
 80a3656:	4293      	cmp	r3, r2
 80a3658:	d002      	beq.n	80a3660 <memset+0xe>
 80a365a:	f803 1b01 	strb.w	r1, [r3], #1
 80a365e:	e7fa      	b.n	80a3656 <memset+0x4>
 80a3660:	4770      	bx	lr
	...

080a3664 <srand>:
 80a3664:	b538      	push	{r3, r4, r5, lr}
 80a3666:	4b12      	ldr	r3, [pc, #72]	; (80a36b0 <srand+0x4c>)
 80a3668:	4605      	mov	r5, r0
 80a366a:	681c      	ldr	r4, [r3, #0]
 80a366c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a366e:	b9d3      	cbnz	r3, 80a36a6 <srand+0x42>
 80a3670:	2018      	movs	r0, #24
 80a3672:	f7fd fe89 	bl	80a1388 <malloc>
 80a3676:	f243 330e 	movw	r3, #13070	; 0x330e
 80a367a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a367c:	8003      	strh	r3, [r0, #0]
 80a367e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3682:	8043      	strh	r3, [r0, #2]
 80a3684:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3688:	8083      	strh	r3, [r0, #4]
 80a368a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a368e:	80c3      	strh	r3, [r0, #6]
 80a3690:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3694:	8103      	strh	r3, [r0, #8]
 80a3696:	2305      	movs	r3, #5
 80a3698:	8143      	strh	r3, [r0, #10]
 80a369a:	230b      	movs	r3, #11
 80a369c:	8183      	strh	r3, [r0, #12]
 80a369e:	2201      	movs	r2, #1
 80a36a0:	2300      	movs	r3, #0
 80a36a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a36a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a36a8:	2200      	movs	r2, #0
 80a36aa:	611d      	str	r5, [r3, #16]
 80a36ac:	615a      	str	r2, [r3, #20]
 80a36ae:	bd38      	pop	{r3, r4, r5, pc}
 80a36b0:	20000078 	.word	0x20000078

080a36b4 <strlen>:
 80a36b4:	4603      	mov	r3, r0
 80a36b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a36ba:	2a00      	cmp	r2, #0
 80a36bc:	d1fb      	bne.n	80a36b6 <strlen+0x2>
 80a36be:	1a18      	subs	r0, r3, r0
 80a36c0:	3801      	subs	r0, #1
 80a36c2:	4770      	bx	lr

080a36c4 <dynalib_user>:
 80a36c4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a36d4:	0000 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
 80a36e4:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 80a36f4:	4d53 4439 3153 002e 6f44 6275 656c 632d     SM9DS1..Double-c
 80a3704:	6568 6b63 7720 7269 6e69 2e67 4400 6665     heck wiring..Def
 80a3714:	7561 746c 7320 7465 6974 676e 2073 6e69     ault settings in
 80a3724:	7420 6968 2073 6b73 7465 6863 7720 6c69      this sketch wil
 80a3734:	206c 6f77 6b72 6620 726f 6120 206e 756f     l work for an ou
 80a3744:	2074 666f 7420 6568 6220 786f 4c20 4d53     t of the box LSM
 80a3754:	4439 3153 4220 6572 6b61 756f 2c74 6220     9DS1 Breakout, b
 80a3764:	7475 6d20 7961 6e20 6565 2064 6f74 6220     ut may need to b
 80a3774:	2065 6f6d 6964 6966 6465 6920 2066 6874     e modified if th
 80a3784:	2065 6f62 7261 2064 756a 706d 7265 2073     e board jumpers 
 80a3794:	7261 2e65 6300 6c61 6269 6172 6974 6e6f     are..calibration
 80a37a4:	7320 6174 7472 6465 4300 6c61 6269 6172      started.Calibra
 80a37b4:	6974 6e6f 6620 6e69 7369 6568 0064 6553     tion finished.Se
 80a37c4:	7574 0070 5148 6f52 7475 7265 505f 4255     tup.HQRouter_PUB
 80a37d4:	494c 4853 5000 7469 6863 3d20 0020 6f52     LISH.Pitch = .Ro
 80a37e4:	6c6c 2020 203d 5900 7761 2020 3d20 0020     ll  = .Yaw   = .
 80a37f4:	6341 6563 7470 6465 7220 6e61 6567 203a     Accepted range: 
 80a3804:	203a 2000 202c 7800 203a 2000 3a59 2000     : . , .x: . Y:. 
 80a3814:	3a5a 2000 7661 203a 2000                         Z:. av: .

080a381d <CSWTCH.57>:
 80a381d:	0020 0000 0040 0000 0060 0000                     ...@...`..

080a3828 <_ZTV7TwoWire>:
	...
 80a3830:	13cb 080a 1415 080a 13ed 080a 13cd 080a     ................
 80a3840:	13f5 080a 13fd 080a 1405 080a 140d 080a     ................

080a3850 <_ZTV9IPAddress>:
	...
 80a3858:	148b 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a3868:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3878:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3888:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3898:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a38a8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a38b8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a38c8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a38d8:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a38e8:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a38f8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a3908:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
 80a3918:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 80a3928:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a3938:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a3944 <_ZTVN5spark12NetworkClassE>:
	...
 80a394c:	1569 080a 1573 080a 157d 080a 1587 080a     i...s...}.......
 80a395c:	1591 080a 159d 080a 15a9 080a 15b5 080a     ................
 80a396c:	15bd 080a 15c7 080a 15d1 080a 616e 006e     ............nan.
 80a397c:	766f 0066 6e69 0066                         ovf.inf.

080a3984 <_ZTV8SPIClass>:
	...
 80a398c:	1921 080a 1923 080a                         !...#...

080a3994 <_ZL14clock_divisors>:
 80a3994:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a39a4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a39b4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a39c4:	0000 0000                                   ....

080a39c8 <_ZTV3UDP>:
	...
 80a39d0:	00b5 080a 00e3 080a 1b37 080a 1c57 080a     ........7...W...
 80a39e0:	1b2f 080a 1b4d 080a 1b6b 080a 1b85 080a     /...M...k.......
 80a39f0:	1ba7 080a 1bf1 080a 1c13 080a 1da9 080a     ................
 80a3a00:	1cbd 080a 1b19 080a 1eb9 080a 1d25 080a     ............%...
 80a3a10:	1de1 080a 1ee7 080a 1c81 080a 1b25 080a     ............%...
 80a3a20:	1d89 080a 1b2b 080a 1b87 080a fff0 ffff     ....+...........
 80a3a30:	0000 0000 1b9f 080a                         ........

080a3a38 <_ZTV11USARTSerial>:
	...
 80a3a40:	1f1f 080a 1f6f 080a 1f7d 080a 164d 080a     ....o...}...M...
 80a3a50:	1f33 080a 1f55 080a 1f41 080a 1f69 080a     3...U...A...i...
 80a3a60:	1f21 080a 1f25 080a                         !...%...

080a3a68 <_ZTV9USBSerial>:
	...
 80a3a70:	2025 080a 2075 080a 2083 080a 164d 080a     % ..u ... ..M...
 80a3a80:	2061 080a 2027 080a 203d 080a 206f 080a     a ..' ..= ..o ..
 80a3a90:	2053 080a 2021 080a                         S ..! ..

080a3a98 <_ZTVN5spark9WiFiClassE>:
	...
 80a3aa0:	2273 080a 2269 080a 225f 080a 21d1 080a     s"..i".._"...!..
 80a3ab0:	2253 080a 2247 080a 223b 080a 2233 080a     S"..G"..;"..3"..
 80a3ac0:	2229 080a 221f 080a 21db 080a               )"..."...!..

080a3acc <__sf_fake_stdin>:
	...

080a3aec <__sf_fake_stdout>:
	...

080a3b0c <__sf_fake_stderr>:
	...
 80a3b2c:	0043                                        C.

080a3b2e <link_const_variable_data_end>:
	...

080a3b30 <link_constructors_location>:
 80a3b30:	080a0469 	.word	0x080a0469
 80a3b34:	080a0541 	.word	0x080a0541
 80a3b38:	080a0f49 	.word	0x080a0f49
 80a3b3c:	080a1559 	.word	0x080a1559
 80a3b40:	080a1639 	.word	0x080a1639
 80a3b44:	080a1905 	.word	0x080a1905
 80a3b48:	080a1aed 	.word	0x080a1aed
 80a3b4c:	080a1b05 	.word	0x080a1b05
 80a3b50:	080a227d 	.word	0x080a227d
 80a3b54:	080a24a5 	.word	0x080a24a5
 80a3b58:	080a24d5 	.word	0x080a24d5
 80a3b5c:	080a2529 	.word	0x080a2529
 80a3b60:	080a25ed 	.word	0x080a25ed
 80a3b64:	080a2671 	.word	0x080a2671
 80a3b68:	080a26f5 	.word	0x080a26f5

080a3b6c <link_constructors_end>:
 80a3b6c:	00000000 	.word	0x00000000
